<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title><![CDATA[Rich Stone Input Output]]></title><description><![CDATA[AHA-moments for developer brains.]]></description><link>https://richstone.io/</link><image><url>https://richstone.io/favicon.png</url><title>Rich Stone Input Output</title><link>https://richstone.io/</link></image><generator>Ghost 4.48</generator><lastBuildDate>Sun, 13 Nov 2022 14:56:52 GMT</lastBuildDate><atom:link href="https://richstone.io/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Recent software engineering visuals digest]]></title><description><![CDATA[<p>I&apos;ve been catching up on some coding visuals and comic strips lately... &#x1F3A8;</p><p>Here&apos;s some good stuff you should see &#x2728; &#x1F440;</p><h3 id="efficient-meetings">Efficient meetings</h3><p>It&apos;s funny how most (?) people think they can multi task during meetings. However, the facial expression shows immediately when someone</p>]]></description><link>https://richstone.io/recent-software-engineering-visuals/</link><guid isPermaLink="false">636746774acf870001b3b046</guid><category><![CDATA[Visual Digest]]></category><dc:creator><![CDATA[Rich Steinmetz]]></dc:creator><pubDate>Sun, 06 Nov 2022 07:00:00 GMT</pubDate><media:content url="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2022/11/New-Drawing.png" medium="image"/><content:encoded><![CDATA[<img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2022/11/New-Drawing.png" alt="Recent software engineering visuals digest"><p>I&apos;ve been catching up on some coding visuals and comic strips lately... &#x1F3A8;</p><p>Here&apos;s some good stuff you should see &#x2728; &#x1F440;</p><h3 id="efficient-meetings">Efficient meetings</h3><p>It&apos;s funny how most (?) people think they can multi task during meetings. However, the facial expression shows immediately when someone drifted off IMHO. This is how a person looks like when they (don&apos;t even try to) pretend to be in the meeting: &#x1F610;</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://www.commitstrip.com/en/2022/09/13/once-upon-a-teams-meeting/?"><div class="kg-bookmark-content"><div class="kg-bookmark-title">Once upon a Teams meeting&#x2026;</div><div class="kg-bookmark-description">The blog relating the daily life of web agency developers</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://www.commitstrip.com/wp-content/themes/krds_blog/favicon.png?v=5" alt="Recent software engineering visuals digest"><span class="kg-bookmark-author">CommitStrip</span><span class="kg-bookmark-publisher">CommitStrip</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://www.commitstrip.com/wp-content/uploads/2022/09/HeadlineImageTemplate-.jpg" alt="Recent software engineering visuals digest"></div></a></figure><p></p><h3 id="a-visual-in-a-podcast">A visual in a podcast</h3><p>A great episode about serializers, full on topic. Inside, Jo&#xEB;l Quenneville describes a diagram in front of your mind&apos;s eye.</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://www.bikeshed.fm/359"><div class="kg-bookmark-content"><div class="kg-bookmark-title">359: Serializers</div><div class="kg-bookmark-description">Chris Toomey is back! (For an episode.) He talks about what he&#x2019;s been up to since handing off the reins to Jo&#xEB;l. He&#x2019;s been playing around with something at Sagewell that he enjoys. At the core of it? Serializers.</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://assets.fireside.fm/file/fireside-images/podcasts/favicon/1/167c01a1-0eb9-4640-b488-c2f6d6866650/touch_icon_ipad.png?v=6" alt="Recent software engineering visuals digest"><span class="kg-bookmark-author">The Bike Shed</span><span class="kg-bookmark-publisher">thoughtbot</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://assets.fireside.fm/file/fireside-images/podcasts/images/1/167c01a1-0eb9-4640-b488-c2f6d6866650/cover_medium.jpg?v=0" alt="Recent software engineering visuals digest"></div></a></figure><p></p><h3 id="graph-theory">Graph theory</h3><p>Rubocop is known to be implemented with graphs... But not only that, it uses the &quot;Visitor Pattern&quot; &#x1F62E;</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://wasabigeek.com/blog/visitor-pattern-in-ruby-rubocop/"><div class="kg-bookmark-content"><div class="kg-bookmark-title">Visitor Pattern in Ruby: Examples from Rubocop</div><div class="kg-bookmark-description">The visitor design pattern separates the operation to be performed from the object structure. We look at a concrete implementation in Rubocop, a Ruby linting and formatting library.</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://wasabigeek.com/icons/icon-512x512.png?v=2024985cd1fb9cd6a58693ffa2e9ed8c" alt="Recent software engineering visuals digest"><span class="kg-bookmark-author">wasabigeek</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://wasabigeek.com/static/80a5d06b70a8b1e494163786d54394f5/409e6/visitor.png" alt="Recent software engineering visuals digest"></div></a></figure><p>And if you want to know how graph theory came to being... &#x1F447;</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://xkcd.com/"><div class="kg-bookmark-content"><div class="kg-bookmark-title">K&#xF6;nigsberg</div><div class="kg-bookmark-description"></div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://xkcd.com/s/919f27.ico" alt="Recent software engineering visuals digest"><span class="kg-bookmark-author">xkcd</span><span class="kg-bookmark-publisher">About</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://imgs.xkcd.com/comics/konigsberg_2x.png" alt="Recent software engineering visuals digest"></div></a></figure><p></p><h3 id="css-selectors-on-1-page">CSS selectors on 1 page</h3><p>From Julia Evans&apos; newsletter. Something I wished I had when I first learned CSS. I&apos;d proably add some specificity indicators to it. And maybe the <code>styles=</code> inline tag? Should also be kind of a selector, right?</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://wizardzines.com/comics/selectors/"><div class="kg-bookmark-content"><div class="kg-bookmark-title">CSS selectors</div><div class="kg-bookmark-description"></div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://wizardzines.com/images/favicon.ico" alt="Recent software engineering visuals digest"><span class="kg-bookmark-author">wizard zines</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://wizardzines.com/comics/selectors/selectors-preview.png" alt="Recent software engineering visuals digest"></div></a></figure><p></p><h3 id="art">Art</h3><p>Some piece of art I always wished I made, this took years of training, I think first implementation took part when I was 12:</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://richstone.io/heroku-alternatives-for-rails-projects-deploying-my-shit-on-fly-io/"><div class="kg-bookmark-content"><div class="kg-bookmark-title">Heroku alternatives for Rails projects: Deploying my shit to fly.io</div><div class="kg-bookmark-description">I like to develop production projects and side projects as deployment-driven as possible. Over the years I had tons of projects on Heroku and I&#x2019;m grateful for the experience &#x1F64F; But if tons of projects are to come again, I don&#x2019;t see a point in paying 7$ bucks per side-project. Luckily</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://richstone.io/assets/icon-192x192.png?v=98cfc7cad2" alt="Recent software engineering visuals digest"><span class="kg-bookmark-author">Rich Stone Input Output</span><span class="kg-bookmark-publisher">Rich Steinmetz</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2022/10/goo-code-makes-its-way-to-the-Cloud.PNG" alt="Recent software engineering visuals digest"></div></a></figure><p></p><p>That&apos;s it for this week! &#x1F3AC;</p><figure class="kg-card kg-image-card"><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2022/11/IMG_0258.PNG" class="kg-image" alt="Recent software engineering visuals digest" loading="lazy" width="256" height="256"></figure>]]></content:encoded></item><item><title><![CDATA[Heroku alternatives for Rails projects: Deploying my shit to fly.io]]></title><description><![CDATA[<p>I like to develop production projects <strong>and</strong> side projects as deployment-driven as possible. Over the years I had tons of projects on Heroku and I&apos;m grateful for the experience &#x1F64F; But if tons of projects are to come again, I don&apos;t see a point in paying</p>]]></description><link>https://richstone.io/heroku-alternatives-for-rails-projects-deploying-my-shit-on-fly-io/</link><guid isPermaLink="false">63552330dac3cc000183effd</guid><category><![CDATA[Ruby]]></category><dc:creator><![CDATA[Rich Steinmetz]]></dc:creator><pubDate>Sun, 23 Oct 2022 11:53:29 GMT</pubDate><media:content url="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2022/10/goo-code-makes-its-way-to-the-Cloud.PNG" medium="image"/><content:encoded><![CDATA[<img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2022/10/goo-code-makes-its-way-to-the-Cloud.PNG" alt="Heroku alternatives for Rails projects: Deploying my shit to fly.io"><p>I like to develop production projects <strong>and</strong> side projects as deployment-driven as possible. Over the years I had tons of projects on Heroku and I&apos;m grateful for the experience &#x1F64F; But if tons of projects are to come again, I don&apos;t see a point in paying 7$ bucks per side-project.</p><p>Luckily Heroku <a href="https://blog.heroku.com/new-low-cost-plans">seems to be coming up with a 5$ bucks plan</a> that gives you 1000 hours across multiple Dynos, so I won&apos;t migrate my existing projects away for now and pay the 5 bucks, no questions asked.</p><p>But for my new side projects, I&apos;m checking out alternatives cause after the 1k hours I would need to pay 7$ per project monthly just for my own enjoyment...</p><h2 id="enter-new-project">Enter new project</h2><p>So I had a very simple app set up locally in a state that was workable for me as an admin and for my 0.5 users, it&apos;s now online here:</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://developer-pursuit.fly.dev/"><div class="kg-bookmark-content"><div class="kg-bookmark-title">Developer Pursuit</div><div class="kg-bookmark-description"></div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://developer-pursuit.fly.dev/favicon.ico" alt="Heroku alternatives for Rails projects: Deploying my shit to fly.io"></div></div><div class="kg-bookmark-thumbnail"><img src="https://developer-pursuit.fly.dev/assets/developer-pursuit-w800-fc107982bd50eb138ce68ea72802e6a9d764cbd175e76b56bc5ba7304303b6de.png" alt="Heroku alternatives for Rails projects: Deploying my shit to fly.io"></div></a></figure><p>It had 1 public controller, and 2 resources with admin controllers hidden behind basic auth, so just an app for someone to manage some data.</p><p>It was time to deploy (actually it was already pretty late, I would have deployed earlier, but I knew that this would be the project where I&apos;ll play around with an alternative).</p><p>I already heard colleagues mentioning <a href="https://fly.io">fly.io</a> and when deploy was due for my new shiny app I did another round of Reddit research. And again, lots of fly.io so here we are.</p><h2 id="things-i-wasnt-sure-about-initially">Things I wasn&apos;t sure about initially:</h2><p></p><p><strong>how much time will this be?</strong></p><p>I ran into a couple of issues, all in all it took me around an hour. Overall, it&apos;s just a couple of commands for a really fresh Rails app, all configuration is taken care of.</p><p><strong>&quot;shit I need to dive into Docker&quot;</strong></p><p><code>$ fly launch</code> sets up a Docker file, so no additional digging needed here. Not sure if that stays like this in the longterm when your app is growing...</p><p>The command creates:</p><pre><code class="language-shell">Dockerfile
fly.toml
.dockerignore</code></pre><p>So I guess you can configure your own freestyle from there.</p><h2 id="things-im-still-not-sure-about">Things I&apos;m still not sure about:</h2><p></p><p><strong>how free is it really?</strong></p><p>Didn&apos;t find it anywhere, but someone on Reddit mentioned a 5$ cap, which should be plenty for hobby apps. fly.io says, &quot;you can keep it free as long as you want&quot;, whatever that means.</p><p><strong>automating CI and CD?</strong></p><p>For Continous Deployment/Delivery: Heroku was built with just that in mind, you change your mainline in the heroku repo, i. e. push your code, which updates the code and the project package on your production machine automatically. So sweet.</p><p>Heroku had also &quot;pipelines&quot; for Continuous Integration stuff.</p><p>For fly.io this will need additional configuration, like configuring GitHub actions with the fly.io CLI (which is really nice to work with by the way).</p><p><strong>monitoring capabilities?</strong></p><p>In Heroku, if you want to know anything about your app (apart from logs) you need to Pay for a higher plan than the free plan. </p><p>The fly.io dashboard has monitoring, metrics, and logging, all in one place. You&apos;ll also get some advanced Grafana metrics out-of-the-box</p><figure class="kg-card kg-image-card"><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2022/10/Screen-Shot-2022-10-23-at-13.44.41.png" class="kg-image" alt="Heroku alternatives for Rails projects: Deploying my shit to fly.io" loading="lazy" width="1917" height="1039"></figure><figure class="kg-card kg-image-card"><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2022/10/Screen-Shot-2022-10-23-at-13.44.02.png" class="kg-image" alt="Heroku alternatives for Rails projects: Deploying my shit to fly.io" loading="lazy" width="1602" height="828"></figure><h2 id="issues-i-ran-into-with-the-first-deploy"><strong>Issues I ran into with the first deploy</strong></h2><p>I think it&apos;s natural for every new PaaS tool to have a bit of a learning curve. Here are a couple of things I needed to understand to get my newest goo code to fly.</p><h3 id="error-1error-failed-attaching-db-to-the-postgres-clusterno-such-host">Error 1 - Error Failed attaching db to the Postgres cluster - no such host</h3><p>When setting up the app, I got an error at the end:</p><pre><code class="language-shell">$ fly launch

... lots of output ...

Error Failed attaching developer-pursuit-db to the Postgres cluster developer-pursuit: Get &quot;http://developer-pursuit-db.internal:5500/commands/databases/developer_pursuit&quot;: dial: lookup developer-pursuit-db.internal. on fdaa:0:c09a::3: no such host.\nTry attaching manually with &apos;fly postgres attach --app developer-pursuit developer-pursuit-db&apos;
</code></pre><p>This seems to be a transient fly.io issue from what I&apos;ve read on their forum. It can be fixed with the terminal command that&apos;s suggested in the error message:</p><pre><code class="language-shell">$ fly postgres attach --app developer-pursuit developer-pursuit-db
</code></pre><h3 id="error-2failed-due-to-unhealthy-allocations">Error 2 - Failed due to unhealthy allocations</h3><pre><code class="language-shell">$ fly deploy

... lots of output ...

--&gt; v1 failed - Failed due to unhealthy allocations - no stable job version to auto revert to and deploying as v2 
</code></pre><p>That was a nasty one. There&apos;s a bit of a cryptic error when your app fails after booting.</p><p>The fly.io docs first point to PORT issues, but checking the env configs, port looked just fine:</p><figure class="kg-card kg-code-card"><pre><code class="language-shell">$ fly configs

Environment variables
NAME VALUE 
PORT 8080  
</code></pre><figcaption>fly.io expects port 8080 to be configured within your app, and Rails makes use of <code>ENV.fetch(&quot;PORT&quot;) { 3000 }</code> to set the port.</figcaption></figure><p>After a bit of despair, I reached for the <code>$ fly logs</code> command and saw the actual stack trace of the Rails app which pointed to an unset <code>ENV</code> variables that I was using for... &#x1F941; ... Basic auth &#x1F389;</p><p>I&apos;ve set the variables with the <code>$ fly secrets</code> utility and the app ran just fine.</p><h2 id="conclusion">Conclusion</h2><p>The overall experience is very good. It sucks to run into cryptic errors when you first try things out, but this was all reasonable and solvable with a bit of thinking and research.</p><p>The command line feels very nice and similar to heroku so far.</p><p>Configs are served for you automagically and you are in full control of the deploy, but if you don&apos;t automate it via GitHub actions or similar, you will mess things up eventually. But that&apos;s additional work...</p><p>I&apos;ll probably stick for my old projects with Heroku for the 5$ bucks per 1k hours and generally fallback to fly.io for new projects.</p><hr><p>If you have any comments or questions:</p><figure class="kg-card kg-embed-card kg-card-hascaption">
    <blockquote class="reddit-card">
      <a href="https://www.reddit.com/r/ruby/comments/ybftgn/heroku_alternatives_for_rails_projects_deploying/?ref_source=embed&amp;ref=share">Heroku alternatives for Rails projects: Deploying my shit on fly.io</a> from
      <a href="https://www.reddit.com/r/ruby/">ruby</a>
    </blockquote>
    <script async src="https://embed.redditmedia.com/widgets/platform.js" charset="UTF-8"></script>
<figcaption>-</figcaption></figure><hr><p>Other stuff? Just tweet it out to me!</p><!--kg-card-begin: html--><a href="https://twitter.com/intent/tweet?screen_name=RichStoneIO&amp;ref_src=twsrc^tfw" class="twitter-mention-button" data-show-count="false">Tweet to @RichStoneIO</a><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><!--kg-card-end: html--><hr><p></p>]]></content:encoded></item><item><title><![CDATA[Why do we call it Ruby and Rails Magic?]]></title><description><![CDATA[There is good and bad magic, enchanting and destructive. But do we need the "magic" term at all? Why do we use it and what mindset does it create?]]></description><link>https://richstone.io/why-do-we-call-it-ruby-and-rails-magic/</link><guid isPermaLink="false">6292093cc866cc000115ff1c</guid><category><![CDATA[Ruby]]></category><dc:creator><![CDATA[Rich Steinmetz]]></dc:creator><pubDate>Wed, 01 Jun 2022 16:55:21 GMT</pubDate><media:content url="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2022/05/IMG_0248.PNG" medium="image"/><content:encoded><![CDATA[<img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2022/05/IMG_0248.PNG" alt="Why do we call it Ruby and Rails Magic?"><p>Imagine you jump into a console and try to debug a method that doesn&apos;t seem to do the right thing. Your <code>Person</code> class&apos; name is returned as <code>&quot;Johnno&quot;</code>, although you expect just <code>&quot;John&quot;</code></p><pre><code class="language-ruby"># person.rb
def name
  # ... some code to decide what and how to return the name ...
  name
end
</code></pre><p>Sometimes, when things get returned in a view, developers <code>inspect()</code> the returned value and see what gets returned in the browser. Let&apos;s say you are one of those developers and do:</p><pre><code class="language-ruby"># person.rb - 1500 lines of code, definitely a fat model.
def name
  # ... some code to decide what and how to return the name ...
  name.inspect
end
</code></pre><p>But then in your view, you see a different output:</p><pre><code>debug parse_old_name: [104, 101, 121] - Johnno
</code></pre><p>The <code>inspect()</code> method returned the old <code>&quot;Johnno&quot;</code> as expected but with some additional weird output. You spend an hour trying to understand what&apos;s going on until a colleague tells you that he monkey-patched the String class in a different method to do some debugging for another bug and forgot to remove it:</p><figure class="kg-card kg-code-card"><pre><code class="language-ruby"># Monkey-patched String somewhere globally &#x1F64A;
class String
  def inspect
    puts &quot;debug #{@current_debug_name}: #{self.bytes} - #{self}&quot;
  end
end
</code></pre><figcaption>&#x1F64A;&#x1F64A;&#x1F64A;</figcaption></figure><p>You could say it&apos;s magic. And while you were debugging you thought it was evil witchcraft. But it&apos;s actually basic Ruby functionality that lets you do good and bad.</p><figure class="kg-card kg-image-card"><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2022/05/IMG_0245.PNG" class="kg-image" alt="Why do we call it Ruby and Rails Magic?" loading="lazy" width="800" height="800"></figure><hr><p>Sometimes, we actually mean good magic. We adore some functionality that happens in the background (AKA &quot;automagically&quot;).</p><p>On other occasions, we mean that something happens under the hood and there&apos;s no way to understand it.</p><p>Especially in the latter case, is this a good term? Or does it restrict us in the things we think we <a href="https://richstone.io/things-you-can-and-cannot-do/">can and cannot understand</a>?</p><h2 id="debunk-some-ruby-magic">Debunk Some Ruby Magic</h2><p>Ruby is a programming language written in C (and in Ruby). It&apos;s text in files that get translated (compiled) to a lower level language (byte code) so that a server (e.g. your computer) can understand it and complete some instructions. This happens when you run <code>ruby your-app.rb</code> for example. OK, that&apos;s pretty fascinating, but in the end, it boils down to physics and logical operations. We just recently learned to take computers for granted and now Ruby comes with its magic tricks.</p><figure class="kg-card kg-image-card"><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2022/05/IMG_0247.PNG" class="kg-image" alt="Why do we call it Ruby and Rails Magic?" loading="lazy" width="1024" height="768"></figure><blockquote class="kg-blockquote-alt">Why do we think it&apos;s magic?</blockquote><p>As illustrated in the monkey-patching example above, meta-programming is a big part of it. It needs first uncovering the magic, like understanding <strong>where</strong> it&apos;s monkey-patched. Then it needs further digging to understand <strong>how</strong> it happens. We mostly skip the latter part and prefer the magic label.</p><p>Another major reason is the innermost goal of Ruby to make developers happy.</p><h3 id="most-human-friendly-language">Most human-friendly language</h3><p>That&apos;s what they are saying about Ruby, it&apos;s the most human-friendly language to ever exist.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2022/05/Pasted-image-20220508111923.png" class="kg-image" alt="Why do we call it Ruby and Rails Magic?" loading="lazy" width="1118" height="2168"><figcaption>https://www.mattmorgante.com/technology/enumerable</figcaption></figure><p>If this image looks to you like BSOD (Blue Screen Of Death), I understand. It definitely can be for one&apos;s brain cells and decision muscles. How in the world can you decide what to use from here if you see <a href="https://ruby-doc.org/core-3.1.1/Enumerable.html">all the Enumerable methods</a> for the first time? Including the fact that some of them are aliases? <a href="https://richstone.io/why-are-there-multiple-names-for-one-method-in-ruby/">Why the hell are there aliases at all!?</a></p><p>That&apos;s some good magic, allowing you to write incredibly awesome and clear code, but for Ruby newcomers some mystic moments might come up, and googling this up the first 53 times is not unusual.</p><figure class="kg-card kg-image-card"><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2022/05/IMG_0246.PNG" class="kg-image" alt="Why do we call it Ruby and Rails Magic?" loading="lazy" width="800" height="800"></figure><p>Now combine this with a web framework based on Ruby that has the same goals and you get hyper magic... &#x1F6E4;</p><h2 id="debunk-some-rails-magic">Debunk Some Rails Magic</h2><p>Rails is a web development framework that&apos;s written in Ruby. Once you&apos;ve run <code>rails new project</code> a bunch of (mostly Ruby) files are generated into a <code>project</code> folder and a bunch of libraries are installed in the according bundle. From there you encounter yourself in your app universe &#x1F52E;</p><p>Rails is perceived to be so magical for similar reasons as Ruby: Rails makes heavy use of Ruby&apos;s meta-programming and aims to be the most intuitive and developer-friendly framework.</p><p>Rails does this partly by adopting a strict convention over configuration philosophy. The good side of it is that established developers can become productive in almost any Rails codebase quite quickly.</p><p>The less good side is that if you don&apos;t know the Rails quirks and don&apos;t grok the philosophy yet, you&apos;ll have a bunch of magic moments.</p><p>Methods are called in places where you don&apos;t see them; files are (auto-)loaded here and there; callbacks... &#x1F4A5;</p><h3 id="convention-over-configuration">Convention over configuration</h3><p>To understand on a high level what&apos;s happening there, you don&apos;t always have to dig into Rails code and understand every little detail. The docs and Rails guides are there when you need them.</p><p>Take this most simple example Rails app:</p><pre><code class="language-ruby"># config/routes.rb
Rails.application.routes.draw do  
  resources :games
end

# app/controllers/games_controller.rb
class GamesController &lt; ApplicationRecord
  def index
  end
end

# app/views/index.html.erb
&lt;h1&gt;All the games&lt;/h1&gt;
</code></pre><p>Can you imagine showing this to a developer who has never touched Rails or a similar framework and making them reason about how and why &quot;All the games&quot; is shown when you hit <code>localhost:3000/games</code>?</p><p>They&apos;ll be perplexed &#x1F52E; But after some digging through the above-mentioned resources (Rails Guides, Rails docs, weird blog posts like this here) they might come up with a few explanations, like this:</p><blockquote>&quot;The Rails framework code seems to run and create some methods and additional functionality on the fly based on its conventions as well as on its adherence to concepts like inheritance, MVC and a REST.&quot; - Developer</blockquote><p>Then they might make more sense of this code and about where and why things are happening:</p><pre><code class="language-ruby"># THIS DEFINES SOME ROUTES METHODS DYNAMICALLY (including the URL path)
# config/routes.rb
Rails.application.routes.draw do  
  resources :games
end

# app/controllers/games_controller.rb
class GamesController &lt; ApplicationRecord
  def index
    # This calls the render() method implicitly that sends the 
    # template with the right name based on convention back to 
    # the browser.
  end
end

# app/views/index.html.erb
&lt;h1&gt;All the games&lt;/h1&gt;
</code></pre><figure class="kg-card kg-image-card"><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2022/05/rails-philosophy.png" class="kg-image" alt="Why do we call it Ruby and Rails Magic?" loading="lazy" width="800" height="800"></figure><p>Whenever you stumble upon something &quot;magical&quot;, remember the moment when you didn&apos;t know anything about Rails. You are now at exactly this moment but with a different problem at hand. Time to start digging. Magic is reduced by introducing more craft, more learning, more documentation, more digging, more bits, and bytes. It opens up opportunities to create and understand.</p><hr><h2 id="appendix">Appendix</h2><p>Some more thoughts on magic and how to cope with it.</p><h3 id="ruby-golf">Ruby Golf</h3><p>That&apos;s some black magic, don&apos;t touch it, for now, nothing good will come out of that, especially if you use this in production &#x1F605;&#x1FA84;&#x2620;&#xFE0F; don&apos;t do this at home, don&apos;t do this in production.</p><p>But if you can&apos;t let your fingers off of it you can check out some good resources and learn some unusual Ruby quirks, it might bump up your understanding of Ruby to a new level:</p><ul><li>Start with <a href="https://idiosyncratic-ruby.com/27-golfing-basics.html">Idiosyncratic Ruby Golfing Basicsl</a></li><li>Then <a href="https://codegolf.stackexchange.com/questions/363/tips-for-golfing-in-ruby">another light read</a></li><li>Then <a href="https://discord.com/channels/518658712081268738/779738543378530334">Ruby Discord #ruby-arcana-&#x1F52E; channel</a></li><li>Then practice <a href="https://code.golf/">the arcane evilness</a></li></ul><p>Don&apos;t forget to keep your IRB open at all times &#x1F3A9;&#x1F430;</p><h3 id="more-ruby-and-rails-magic">More Ruby and Rails &quot;Magic&quot;</h3><p>Some documented magic moments when I heard or read the word &quot;Magic&quot; (or said it myself &#x1F605;) in a Ruby or Rails context:</p><p>2022/04/12 - <code>yield</code> in the <code>application.html.erb</code></p><ul><li><a href="https://richstone.io/debunk/">Debunk yield magic in application.html.erb</a></li></ul><p>2021/02/07 - Ruby injects a magic default value when reducing</p><ul><li><a href="https://richstone.io/ruby-inject-and-ruby-reduce-2/#:~:text=Ruby%20inject%20/%20reduce%20default%20values">Ruby inject/reduce default values pitfalls</a></li></ul><p>I&apos;ll be adding &quot;Magic&quot; findings here as I encounter them &#x1F50E;&#x1F984;</p><hr><h3 id="how-to-become-a-magician">How to become a magician</h3><p>Magicians in the real world do not possess supernatural superpowers (sorry if I disturbed you with this message, but the Easter Bunny isn&apos;t real either!). They checked out how things work and practiced a lot to replicate.</p><ul><li>Play around with things in your IRB. Run methods and check the attributes of the objects at hand</li><li>Test-drive or automate your misunderstandings. This will often lead to you needing the internals of the underlying software, so you can make your tests work</li><li>Get an overview of Ruby and meta-programming concepts, in books like Eloquent Ruby for a light fun read or Chris Oliver&apos;s Ruby Behind The Magic video course</li><li>Check out Destroy All Software videos for seeing how RSpec and other day-to-day software works under the hood</li><li>Dig the Rails Guides</li><li>Dig some Rails Code and documentation when appropriate</li><li>Ask the communities (like the Ruby Discord or Rails Link Slack)</li><li><a href="https://richstone.io/how-to-learn-ruby-timeless-resources-and-techniques/#4-have-a-process-to-get-unstuck">Have a process to get unstuck</a></li></ul><hr><p>Here&apos;s a quick talk that I held on the topic at the awesome Le Wagon bootcamp, if you like more visuals and examples. You will have a few more examples that I don&apos;t mention here, like Ruby&apos;s <code>method_missing</code> and some more examples with visuals on Rails conventions:</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://richstoneio.webinargeek.com/ruby-and-rails-magic-fundamentals"><div class="kg-bookmark-content"><div class="kg-bookmark-title">Ruby &amp; Rails Magic</div><div class="kg-bookmark-description">You can view this talk from your computer, tablet or mobile phone.</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://richstoneio.webinargeek.com/assets/webinargeek/apple-touch-icon.png" alt="Why do we call it Ruby and Rails Magic?"></div></div><div class="kg-bookmark-thumbnail"><img src="https://static.webinargeek.com/uploads/image/16286537/50df820b-095b-43fd-9943-9eb977403547.png" alt="Why do we call it Ruby and Rails Magic?"></div></a></figure>]]></content:encoded></item><item><title><![CDATA[How does yield work in application.html.erb]]></title><description><![CDATA[<!--kg-card-begin: markdown--><p>You&apos;ll encounter this in new Rails apps inside your <code>application.html.erb</code>:</p>
<pre><code class="language-ruby">&lt;body&gt;  
  &lt;main&gt;  
    &lt;%= yield %&gt;  
  &lt;/main&gt;  
&lt;/body&gt;
</code></pre>
<p>But how does <code>yield</code> work inside of the layout template? Where does it get executed and how does it know to</p>]]></description><link>https://richstone.io/debunk/</link><guid isPermaLink="false">628e47e5c866cc000115feac</guid><category><![CDATA[Ruby]]></category><dc:creator><![CDATA[Rich Steinmetz]]></dc:creator><pubDate>Wed, 25 May 2022 15:38:50 GMT</pubDate><media:content url="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2022/05/IMG_0244.PNG" medium="image"/><content:encoded><![CDATA[<!--kg-card-begin: markdown--><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2022/05/IMG_0244.PNG" alt="How does yield work in application.html.erb"><p>You&apos;ll encounter this in new Rails apps inside your <code>application.html.erb</code>:</p>
<pre><code class="language-ruby">&lt;body&gt;  
  &lt;main&gt;  
    &lt;%= yield %&gt;  
  &lt;/main&gt;  
&lt;/body&gt;
</code></pre>
<p>But how does <code>yield</code> work inside of the layout template? Where does it get executed and how does it know to yield the right view in between the layout?</p>
<p>First of all, you&apos;d need to understand Ruby&apos;s <code>yield</code> syntax itself. There&apos;s a lot of good material about it in the Internet, but in short:</p>
<p>You define a method that takes a block:</p>
<pre><code class="language-ruby">def got_it(&amp;block)
  puts &quot;before yield&quot;
  yield
  puts &quot;after yield&quot;
end
</code></pre>
<p>And when executing that method, you give it a block as you do with other common methods like <code>.each { puts &quot;block inside of curly braces&quot; }</code> or <code>.map do &quot;also a block&quot; end</code>.</p>
<p>So in our case we do:</p>
<pre><code class="language-ruby">&gt; got_it { puts &quot;in between yield&quot; }
</code></pre>
<p><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2022/05/Ruby-Block-Flow-copy.PNG" alt="How does yield work in application.html.erb" loading="lazy"></p>
<p>Being equipped with that knowledge, it might mean that somehow <code>application.html.erb</code> gets called with a block that contains the to be displayed view contents which then get yielded between the layout template&apos;s <code>&lt;main&gt;</code> tags.</p>
<p>So let&apos;s go a step back to the beginning and see how this actually plays out in Rails app and where things are happening.</p>
<ol>
<li>Client issues HTTP request</li>
<li>A route gets hit</li>
<li>A Controller action gets hit</li>
<li>There is an implicit or explicit <code>render</code> call</li>
</ol>
<p>E.g. here:</p>
<pre><code class="language-ruby"># GamesController
def index
  @games = Game.all
  # Here render gets called implicitly if you don&#x2019;t write it yourself.
end
</code></pre>
<p>Now <code>render</code> is quite a beast. I&apos;ve dug the relevant stuff in the <a href="https://guides.rubyonrails.org/layouts_and_rendering.html#rendering-by-default-convention-over-configuration-in-action">Ruby Guides Layouts and Rendering Section</a> and had a few pointers, so I tried looking into where the flow of <code>render</code> leads <a href="https://github.com/rails/rails/blob/3520cc77df1b52a6c808083214b583c769e9a4b2/actionpack/lib/abstract_controller/rendering.rb#L23">in the <code>AbstractController::Rendering</code> module</a>. That&apos;s a module included in every controller that inherits from <code>ActionController::Base</code>. So basically most controllers that you&apos;ll see in the wild.</p>
<p><a href="https://guides.rubyonrails.org/layouts_and_rendering.html#rendering-by-default-convention-over-configuration-in-action">The Ruby Guides also mention</a> that the logic for rendering stuff is in <a href="https://api.rubyonrails.org/v7.0.2.4/classes/ActionView/Template/Handlers.html"><code>ActionView::Template::Handlers</code></a>.</p>
<p>There&apos;s tooooons of stuff happening with a lot of moving parts. So let&apos;s try to simplify this a bit.</p>
<p>Ruby distributions have ERB included by default:</p>
<pre><code class="language-shell">$ irb
&gt; require &apos;erb&apos;
=&gt; true
&gt; ERB.new(&quot;2 + 2 is &lt;%= 2 + 2 %&gt;&quot;).result
=&gt; &quot;2 + 2 is 4&quot;

&gt; ERB.new(&quot;YOUR views.html.erb files get transformed to strings here&quot;)
</code></pre>
<p>That&apos;s it, all your template rendering is based on this kind of code &#x1F446; Somewhere deep down in the render method hierarchy, ERB takes some input from you (your <code>&quot;.html.erb&quot;</code> files) and turns it into a String which is sent back to the user as a document response via HTTP.</p>
<p>But Rails is cooler than ERB, they don&apos;t use ERB directly anymore but <a href="https://github.com/jeremyevans/erubi">Erubi</a>, a different gem that is said to be faster and more robust. Basically, Erubi is a slightly different and optimized implementation of &apos;erb&apos;.</p>
<p>The above example in Erubi is a bit different, a bit more eval:</p>
<pre><code class="language-ruby">$ gem install eruby
$ irb
&gt; require &apos;erubi&apos;
&gt; eval(Erubi::Engine.new(&quot;2 + 2 is &lt;%= 2 + 2 %&gt;&quot;).src)
</code></pre>
<p>Let&apos;s tie all of this together now. We said there is this process:</p>
<ol>
<li>Client issues HTTP request</li>
<li>A route gets hit</li>
<li>A Controller action gets hit</li>
<li>There is an implicit or explicit <code>render</code> call</li>
</ol>
<p>Now we know that <code>render</code> brings things together. It takes the view name, renders the layout and passes the view as a block to the layout. Let&apos;s look at an simplified code example to illustrate it.</p>
<p>In some of our controllers, something like this happens:</p>
<pre><code class="language-ruby">def index
  @games = Game.all
  # render(:index) is called implicitly here.
end
</code></pre>
<p>This is how <code>render</code> could look like in its simplest form:</p>
<pre><code class="language-ruby">def render(template)  
  render_with_layout do  
    render_template(template)  
  end  
end
</code></pre>
<p>It runs a <code>render_with_layout</code> method that takes a block where <code>render_template</code> generates the template HTML string for the requested <code>:index</code> view.</p>
<pre><code class="language-ruby">def render_with_layout  
  # This could come from some ERB file, like application.html.erb 
  default_layout = &lt;&lt;-END  
    &lt;head&gt; ... lots of heady stuff &lt;/head&gt;
    &lt;body&gt;
      #{yield}  
    &lt;/body&gt;
  END
  eval(Erubi::Engine.new(default_layout).src)  
end
</code></pre>
<p><code>render_with_layout</code> takes a default layout in this case that could come from some <code>application.html.erb</code> but here we just store it in local variable for simplicity.</p>
<p>What&apos;s getting &quot;inserted&quot; in-place of the <code>yield</code> is the code from <code>render_template</code> (because it&apos;s returned by the block of <code>render_with_layout { render_template }</code>, right?):</p>
<pre><code class="language-ruby">def render_template(partial_name)  
  eval(Erubi::Engine.new(File.read(&quot;#{partial_name.to_s}.html.erb&quot;)).src)  
end
</code></pre>
<p>So, you can imagine this:</p>
<pre><code class="language-ruby">  default_layout = &lt;&lt;-END  
    &lt;head&gt; ... lots of heady stuff &lt;/head&gt;
    &lt;body&gt;
      #{yield}  
    &lt;/body&gt;
  END
</code></pre>
<p>More like this:</p>
<pre><code class="language-ruby">  default_layout = &lt;&lt;-END  
    &lt;head&gt; ... lots of heady stuff &lt;/head&gt;
    &lt;body&gt;
      eval(Erubi::Engine.new(File.read(&quot;#{partial_name.to_s}.html.erb&quot;)).src) 
    &lt;/body&gt;
  END
</code></pre>
<p>And in the end, the <code>default_layout</code> is rendered at the end of the <code>render_with_template</code>:</p>
<pre><code class="language-ruby">eval(Erubi::Engine.new(default_layout).src)
</code></pre>
<p>Check it out in the repo if you&apos;d like to play around with it yourself: <a href="https://github.com/RichStone/ruby-and-rails-playground/tree/meow/Dullify%20Rails&apos;%20yield%20Magic">here</a></p>
<p>So hopefully this article helps to dullify some magic and to get the gist of the initial question about how <code>yield</code> works in a Rails&apos; <code>application.html.erb</code>.</p>
<p><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2022/05/IMG_0243.PNG" alt="How does yield work in application.html.erb" loading="lazy"></p>
<hr>
<h2 id="your-turn">Your Turn</h2>
<p>If you&apos;ve been to any of my workshops or talks, you&apos;ll now that I&apos;m a big fan of learning techniques: Recall, Spaced Repetition, Deliberate Practice, and Mnemonics.</p>
<p>Here are some exercises to pump this article into your brain if you feel like it:</p>
<p><strong>Deliberate practice</strong></p>
<p>Write your own <code>render</code> method where <code>render_with_layout</code> takes a <code>:custom_layout</code> parameter. You might notice that having the <code>default_layout</code> inside of an <code>application.html.erb</code> is tougher to implement. You can make use of methods though, if you&apos;d like to keep things simple.</p>
<p><strong>Recall</strong></p>
<p>Now it gets a bit esoteric, but after completing this article, close your eyes and do a mental exercise. Imagine a request calling a <code>show</code> action on your favorite resource. Go the way down from routes over the controller up to the point where the whole yielding stuff happens. Do you see the flow?</p>
<p><strong>Spaced Repetition</strong></p>
<p>Add a reminder to repeat the above recall exercise again in 3 days.</p>
<hr>
<h3 id="references">References</h3>
<p>If you&apos;d like to dig even deeper yourself, use some resources and examples that I used for this post:</p>
<ul>
<li><a href="https://guides.rubyonrails.org/layouts_and_rendering.html">RailsGuides</a></li>
<li><a href="https://rebuilding-rails.com/">Rebuilding Rails</a> by Noah Gibbs (chapter about ERB and templates)</li>
<li>erubi: <a href="https://github.com/jeremyevans/erubi">https://github.com/jeremyevans/erubi</a></li>
<li>ideas for <a href="https://stackoverflow.com/questions/46541915/how-to-render-erubi-template-to-html">how to render on SoF</a></li>
</ul>
<p>erubi examples with yield and blocks:</p>
<ul>
<li><a href="https://github.com/jeremyevans/erubi/issues/10#issuecomment-334306267">bug report</a></li>
<li><a href="https://stackoverflow.com/questions/9816111/blocks-in-pure-erb-erubis">SoF question</a></li>
</ul>
<!--kg-card-end: markdown--><hr><p>Comments or questions? Just tweet it out to me!</p><!--kg-card-begin: html--><a href="https://twitter.com/intent/tweet?screen_name=RichStoneIO&amp;ref_src=twsrc^tfw" class="twitter-mention-button" data-show-count="false">Tweet to @RichStoneIO</a><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><!--kg-card-end: html-->]]></content:encoded></item><item><title><![CDATA[Things you can and cannot do]]></title><description><![CDATA[<p>Recently, my new company WebinarGeek forced me to do a webinar about myself. Actually, you could choose any topic, but obviously, it&apos;d be cool to add a personal note, so people at the company get to learn a bit about yourself. In the end, it was really fun.</p>]]></description><link>https://richstone.io/things-you-can-and-cannot-do/</link><guid isPermaLink="false">6208bb36bd99190001d7e631</guid><category><![CDATA[Success Stories]]></category><dc:creator><![CDATA[Rich Steinmetz]]></dc:creator><pubDate>Sun, 13 Feb 2022 09:28:25 GMT</pubDate><media:content url="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2022/02/Things-you-can-and-cannot-do.png" medium="image"/><content:encoded><![CDATA[<img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2022/02/Things-you-can-and-cannot-do.png" alt="Things you can and cannot do"><p>Recently, my new company WebinarGeek forced me to do a webinar about myself. Actually, you could choose any topic, but obviously, it&apos;d be cool to add a personal note, so people at the company get to learn a bit about yourself. In the end, it was really fun. It got me thinking about myself and my life and whatever impactful personal learnings I had in the recent years.</p><p>The topic of my webinar ended up being: <strong>Things you can and cannot do</strong>.</p><p>A stinging fun fact about me is that for most of my life I thought...</p><ol><li>Programmers are super cool and coding is awesome, but I can never be &#xA0;a developer because I flunked math back in high school</li><li>Making things visual is valuable and fun, but I won&apos;t ever be able to draw because I have 2 left hands</li></ol><p>However, somewhere around my thirties...</p><ol><li>I became a professional software developer, coding coach, and tech event organizer/speaker</li><li>I&apos;ve drawn educational visualizations, trending on Reddit, published in other people&apos;s blogs, and even upvoted on StackOverflow &#x1F913;&#x1F3A8;</li></ol><p>My theory: To try something new for real, I needed to <strong>internalize and accept</strong> (not just know or understand) that with enough time investment I can become a good enough version of myself in any area that I want, even in those where I feel disconnection for seemingly valid reasons. </p><p>I was happy enough to have had some passions that helped me to do just this, internalize and accept. Additionally, I had some kick-ass motivation to tackle a vastly foreign wonderland as computer science or take a wild chance on getting my hands moving over paper with pens and pencils.</p><p>You can try on your own, and get incredibly good enough at something that you already consider your passion, so you can be assured to have the permission to do something incredibly new. Or, you can skip waiting for 15 years and jump on a vastly attractive but extraneous task that you still consider unmanageable for some reason.</p><p>In any case, whether you think you can or cannot do it, you are...</p><p><em>P.S.: Here&apos;s the webinar replay for the whole story &#x1F499;</em></p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://admin.webinargeek.com/watch/replay/PHOdTHrEFO3ygpp6ooMW011YBmQ/"><div class="kg-bookmark-content"><div class="kg-bookmark-title">Things You Can And Cannot Do &#x1F52E; - WebinarGeek</div><div class="kg-bookmark-description"></div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://admin.webinargeek.com/assets/webinargeek/apple-touch-icon.png" alt="Things you can and cannot do"><span class="kg-bookmark-author">WebinarGeek</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://static.webinargeek.com/uploads/account/logo/1/logo.png" alt="Things you can and cannot do"></div></a></figure>]]></content:encoded></item><item><title><![CDATA[Ruby Open Source Projects For Beginners]]></title><description><![CDATA[Open-source is the greatest opportunity to gather real-world experience while you are still on your journey of getting into the industry.]]></description><link>https://richstone.io/ruby-open-source-projects-for-beginners/</link><guid isPermaLink="false">61a0fd4dabe01c00015c213c</guid><category><![CDATA[Ruby]]></category><category><![CDATA[Career Tips]]></category><dc:creator><![CDATA[Rich Steinmetz]]></dc:creator><pubDate>Fri, 26 Nov 2021 17:09:49 GMT</pubDate><media:content url="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2021/11/Untitled-7.png" medium="image"/><content:encoded><![CDATA[<img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2021/11/Untitled-7.png" alt="Ruby Open Source Projects For Beginners"><p>I see why maintainers and their associates are advocating and sourcing for open source contributors ( &#x361;&#xB0; &#x35C;&#x296; &#x361;&#xB0;) I also see the benefit for developers, and especially for aspiring developers to take the leap and to contribute. This is the greatest opportunity to gather real-world experience while you are still on your journey of getting into the industry.</p><p>Lately, I witnessed interesting keynotes and talks about open source projects in the last Ruby and Rails Conferences. For example:</p><ul><li><a href="https://railsconf.org/watch/live-streams/live-04-14-18-14">Keynote RailsConf 2021 by Eileen Uchitelle</a></li><li>YOUR FIRST OPEN-SOURCE CONTRIBUTION at RubyConf 2021 by Rachael Wright-Munn (available soon on YouTube)</li><li>many more...</li></ul><p>As a beginner, you have special needs to ease yourself into making your first PR and continue having fun with making even more PRs. Here&apos;s what to look out for:</p><ul><li>Active repository with active maintainers</li><li>Repo with a project that you will be able to setup (i.e. familiar stack and a good <code>CONTRIBUTING.md</code></li><li>(Big bonus) strong community; preferably with regular online/in-person meetings and a central place to chat (like Discord, Gitter, or Slack)</li><li>&quot;Good First Issue&quot; type of labels and/or well-described Issues</li></ul><figure class="kg-card kg-image-card"><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2021/11/Screen-Shot-2021-11-26-at-17.01.49.png" class="kg-image" alt="Ruby Open Source Projects For Beginners" loading="lazy" width="658" height="558"></figure><p></p><hr><p></p><h3 id="ruby-and-rails-open-source-projects-for-beginners">Ruby and Rails open-source projects for beginners</h3><p>I wanted to share a hand-picked selection of repositories where I&apos;m sure that it&apos;s good to get out your first and next issue:</p><p></p><figure class="kg-card kg-bookmark-card kg-card-hascaption"><a class="kg-bookmark-container" href="https://github.com/exercism/website"><div class="kg-bookmark-content"><div class="kg-bookmark-title">GitHub - exercism/website: The codebase for Exercism&#x2019;s website.</div><div class="kg-bookmark-description">The codebase for Exercism&#x2019;s website. . Contribute to exercism/website development by creating an account on GitHub.</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://github.com/fluidicon.png" alt="Ruby Open Source Projects For Beginners"><span class="kg-bookmark-author">GitHub</span><span class="kg-bookmark-publisher">exercism</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://opengraph.githubassets.com/4c96a76b5615d49bd6590b0d02eed5a6840c8162a22a0bf9cfac71c080dcffe9/exercism/website" alt="Ruby Open Source Projects For Beginners"></div></a><figcaption>Great Slack community, many repositories to contribute to with all types of issues.</figcaption></figure><p></p><figure class="kg-card kg-bookmark-card kg-card-hascaption"><a class="kg-bookmark-container" href="https://github.com/rubyforgood/casa"><div class="kg-bookmark-content"><div class="kg-bookmark-title">GitHub - rubyforgood/casa: Volunteer management system for nonprofit CASA, which serves foster youth in counties across America.</div><div class="kg-bookmark-description">Volunteer management system for nonprofit CASA, which serves foster youth in counties across America. - GitHub - rubyforgood/casa: Volunteer management system for nonprofit CASA, which serves foste...</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://github.com/fluidicon.png" alt="Ruby Open Source Projects For Beginners"><span class="kg-bookmark-author">GitHub</span><span class="kg-bookmark-publisher">rubyforgood</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://repository-images.githubusercontent.com/248407953/bf278480-2115-11eb-8cf2-97b200cb931b" alt="Ruby Open Source Projects For Beginners"></div></a><figcaption>Some good first issues and a great community of <em>good</em> people.</figcaption></figure><p></p><figure class="kg-card kg-bookmark-card kg-card-hascaption"><a class="kg-bookmark-container" href="https://github.com/ChaelCodes/ConfBuddies"><div class="kg-bookmark-content"><div class="kg-bookmark-title">GitHub - ChaelCodes/ConfBuddies: An app to help you find and meet up with your buddies at conferences.</div><div class="kg-bookmark-description">An app to help you find and meet up with your buddies at conferences. - GitHub - ChaelCodes/ConfBuddies: An app to help you find and meet up with your buddies at conferences.</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://github.com/fluidicon.png" alt="Ruby Open Source Projects For Beginners"><span class="kg-bookmark-author">GitHub</span><span class="kg-bookmark-publisher">ChaelCodes</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://opengraph.githubassets.com/e6e63829ed4146896f002efe6586f76e4527bc3b4a0d29ff58f570ca0aae3fcb/ChaelCodes/ConfBuddies" alt="Ruby Open Source Projects For Beginners"></div></a><figcaption>Fun project, easy to get started with Chael as your kind maintainer.</figcaption></figure><p></p><figure class="kg-card kg-bookmark-card kg-card-hascaption"><a class="kg-bookmark-container" href="https://github.com/RichStone/ruby-freedom-API-stack-sinatra-mongodb-heroku"><div class="kg-bookmark-content"><div class="kg-bookmark-title">GitHub - RichStone/ruby-freedom-API-stack-sinatra-mongodb-heroku: A lightweight Ruby API and mini backend application.</div><div class="kg-bookmark-description">A lightweight Ruby API and mini backend application. - GitHub - RichStone/ruby-freedom-API-stack-sinatra-mongodb-heroku: A lightweight Ruby API and mini backend application.</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://github.com/fluidicon.png" alt="Ruby Open Source Projects For Beginners"><span class="kg-bookmark-author">GitHub</span><span class="kg-bookmark-publisher">RichStone</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://opengraph.githubassets.com/b9dd26e06bed62a43950cc66bdd5c19af5197b8785911357f13bea951f358177/RichStone/ruby-freedom-API-stack-sinatra-mongodb-heroku" alt="Ruby Open Source Projects For Beginners"></div></a><figcaption>Just a shameful plug if you wanna fiddle with me on a Sinatra API stack template ;)</figcaption></figure><p></p><figure class="kg-card kg-bookmark-card kg-card-hascaption"><a class="kg-bookmark-container" href="https://github.com/thoughtbot/factory_bot/issues"><div class="kg-bookmark-content"><div class="kg-bookmark-title">Issues &#xB7; thoughtbot/factory_bot</div><div class="kg-bookmark-description">A library for setting up Ruby objects as test data. - Issues &#xB7; thoughtbot/factory_bot</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://github.com/fluidicon.png" alt="Ruby Open Source Projects For Beginners"><span class="kg-bookmark-author">GitHub</span><span class="kg-bookmark-publisher">thoughtbot</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://opengraph.githubassets.com/4ccaa5bb15e118ad1ea8465eb1554309dfec54c295d9fce245d41797626b2200/thoughtbot/factory_bot" alt="Ruby Open Source Projects For Beginners"></div></a><figcaption>Some Good First Issues in here</figcaption></figure><p></p><figure class="kg-card kg-bookmark-card kg-card-hascaption"><a class="kg-bookmark-container" href="https://github.com/stripe-ruby-mock/stripe-ruby-mock/pulls"><div class="kg-bookmark-content"><div class="kg-bookmark-title">Pull requests &#xB7; stripe-ruby-mock/stripe-ruby-mock</div><div class="kg-bookmark-description">A mocking library for testing stripe ruby. Contribute to stripe-ruby-mock/stripe-ruby-mock development by creating an account on GitHub.</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://github.com/fluidicon.png" alt="Ruby Open Source Projects For Beginners"><span class="kg-bookmark-author">GitHub</span><span class="kg-bookmark-publisher">stripe-ruby-mock</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://opengraph.githubassets.com/609006e4b1afd3848ea9655acd47a1be6eb3fa8a53a524ed2518cd30f026b0bc/stripe-ruby-mock/stripe-ruby-mock" alt="Ruby Open Source Projects For Beginners"></div></a><figcaption>The next step, if you&apos;ve worked with Stripe before and are interested in diving deeper</figcaption></figure><p></p><p>Actually, there are like a million repositories out there where you can make your big decision of where to start contributing. If you are still not overwhelmed, these are some places to casually browse for your favorite repo:</p><p></p><figure class="kg-card kg-bookmark-card kg-card-hascaption"><a class="kg-bookmark-container" href="https://github.com/asyraffff/Open-Source-Ruby-and-Rails-Apps"><div class="kg-bookmark-content"><div class="kg-bookmark-title">GitHub - asyraffff/Open-Source-Ruby-and-Rails-Apps: Awesome Ruby and Rails Open Source applications &#x1F308;</div><div class="kg-bookmark-description">Awesome Ruby and Rails Open Source applications &#x1F308;. Contribute to asyraffff/Open-Source-Ruby-and-Rails-Apps development by creating an account on GitHub.</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://github.com/fluidicon.png" alt="Ruby Open Source Projects For Beginners"><span class="kg-bookmark-author">GitHub</span><span class="kg-bookmark-publisher">asyraffff</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://opengraph.githubassets.com/366e4092d9b46d4feb5fc922a11ad2d6606e119163acb966f758fa0ccb24ea90/asyraffff/Open-Source-Ruby-and-Rails-Apps" alt="Ruby Open Source Projects For Beginners"></div></a><figcaption>Ruby and Rails repos, web apps, and tools</figcaption></figure><p></p><figure class="kg-card kg-bookmark-card kg-card-hascaption"><a class="kg-bookmark-container" href="https://github.com/MunGell/awesome-for-beginners#ruby"><div class="kg-bookmark-content"><div class="kg-bookmark-title">GitHub - MunGell/awesome-for-beginners: A list of awesome beginners-friendly projects.</div><div class="kg-bookmark-description">A list of awesome beginners-friendly projects. Contribute to MunGell/awesome-for-beginners development by creating an account on GitHub.</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://github.com/fluidicon.png" alt="Ruby Open Source Projects For Beginners"><span class="kg-bookmark-author">GitHub</span><span class="kg-bookmark-publisher">MunGell</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://opengraph.githubassets.com/5f2d8935291f0b81405ec89e4c067cb639c4475240646071f2e88a9064d60af4/MunGell/awesome-for-beginners" alt="Ruby Open Source Projects For Beginners"></div></a><figcaption>Different beginner labels in different repos</figcaption></figure><p></p><figure class="kg-card kg-bookmark-card kg-card-hascaption"><a class="kg-bookmark-container" href="https://github.com/public-apis/public-apis"><div class="kg-bookmark-content"><div class="kg-bookmark-title">GitHub - public-apis/public-apis: A collective list of free APIs</div><div class="kg-bookmark-description">A collective list of free APIs. Contribute to public-apis/public-apis development by creating an account on GitHub.</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://github.com/fluidicon.png" alt="Ruby Open Source Projects For Beginners"><span class="kg-bookmark-author">GitHub</span><span class="kg-bookmark-publisher">public-apis</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://repository-images.githubusercontent.com/54346799/c732f580-c97e-11eb-9ec3-d4dbc81f6315" alt="Ruby Open Source Projects For Beginners"></div></a><figcaption>APIs, you may find some ruby-based ones here</figcaption></figure><p></p><figure class="kg-card kg-bookmark-card kg-card-hascaption"><a class="kg-bookmark-container" href="https://www.codetriage.com/"><div class="kg-bookmark-content"><div class="kg-bookmark-title">Get Started Contributing to Open Source Projects | CodeTriage</div><div class="kg-bookmark-description">Discover the easiest way to get started contributing to open source. Over 63,245 devs are helping 6,719 projects with our free, community developed tools</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://www.codetriage.com/assets/favicon-3f3e475345be27562adee9d8e596a032785e3efd4496111cab0b1fe0a81ad722.ico" alt="Ruby Open Source Projects For Beginners"><span class="kg-bookmark-author">CodeTriage</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://www.codetriage.com/assets/sponsors/scout-7276a86cd2157f9b3539e552c9774bed076b0f30036fe17cc56eecfd8b218e31.png" alt="Ruby Open Source Projects For Beginners"></div></a><figcaption>THE open source project finder tool.</figcaption></figure><p></p><hr><p></p><h2 id="how-to-contribute-to-open-source">How to contribute to open-source</h2><p>Now you have the Why and the Where, here is a little bonus of get yourself kickstarted.</p><p>Let&apos;s see if we can package it into a simple process:</p><ol><li>Pick a repo (optionally, find someone to work with you together on the repo)</li><li>Look for beginner-labeled or well-described issues</li><li>Set up the project according to the <code>CONTRIBUTING.md</code> or instructions in the <code>README.md</code></li><li>Reproduce the issue (even if you will &quot;just&quot; be writing docs, you often want to reproduce the thing)</li><li>Solve the issue</li><li>Make your PR</li><li>Wait for feedback and react to the review</li></ol><p>Enjoy and share your experience with <a href="https://richstone.io/how-to-learn-ruby-timeless-resources-and-techniques/#resources-for-everyone">the ruby communities</a>!</p>]]></content:encoded></item><item><title><![CDATA[3 Phases For How To Get A Job As A Web Developer By REAL Example]]></title><description><![CDATA[We'll see 3 phases that I just made up while looking back and recalling his journey. They are intertwined, but the time investment usually crucially shifts in one direction once a new phase really starts.]]></description><link>https://richstone.io/how-to-get-a-job-as-a-web-developer/</link><guid isPermaLink="false">619030b8abe01c00015c1d9b</guid><category><![CDATA[Career Tips]]></category><category><![CDATA[Success Stories]]></category><dc:creator><![CDATA[Rich Steinmetz]]></dc:creator><pubDate>Sun, 21 Nov 2021 13:03:15 GMT</pubDate><media:content url="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2021/11/Screen-Shot-2021-11-13-at-22.46.01.png" medium="image"/><content:encoded><![CDATA[<img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2021/11/Screen-Shot-2021-11-13-at-22.46.01.png" alt="3 Phases For How To Get A Job As A Web Developer By REAL Example"><p>For a coding coach, it&apos;s exciting to read when a coachee achieved one of his bigger goals: </p><blockquote>&quot;Contract signed! &#x1F389;&quot;</blockquote><p>Earlier this year, Dave set a clear goal for himself:</p><p><em>Get a junior web developer position at a sustainable company with a great team culture that&apos;s doing good in the world within 6 months.</em></p><p>That&apos;s ambitious goal-setting by the book, let&apos;s see what he did and how close he came.</p><h2 id="i-preparation-phase">I. Preparation Phase</h2><p>We&apos;ll see 3 phases that I just made up while looking back and recalling his journey. They are intertwined, but the time investment usually crucially shifts in one direction once a new phase <strong>really starts</strong>.</p><h3 id="create-credibility-for-yourself">Create Credibility For Yourself</h3><p>Dave did a self-taught developer Bootcamp program at the <a href="https://www.theodinproject.com/">Odin Project</a> where he did The Single Most Effective Thing to bring you up to coding: Coding a lot of small and big projects.</p><p>Showing things that you&apos;ve built is most important, BUT those things being backed by your effort in a community of some sort is unbeatable. And actually building up knowledge to show during interviews is what the Odin Project forces you to do.</p><p>An awesome alternative to the Odin Project that I always recommend is the remote <a href="https://www.microverse.org/">Microverse</a> Bootcamp where students figure a lot of stuff on their own while pair programming. Pricing model: Start for free, pay when you earn your salary.</p><p>If you have the possibility, I also really recommend immersing yourself in an in-person Developer Bootcamp (Checkout <a href="https://www.lewagon.com/">Le Wagon</a>, if this is an option for you, they have an awesome offering around the globe).</p><p>Also, don&apos;t disregard university programs, especially if you are from a country where University programs won&apos;t throw you into a lifelong hole of credit debt like it&apos;s mostly the case in the US.</p><h3 id="level-up-technical-skills">Level Up Technical Skills</h3><p>Apart from the coding Bootcamp, Dave has emerged in different practices on his own and with other people to get him up to speed even more.</p><ul><li>Dave&apos;s working on a <strong>long-term web app project</strong> with another aspiring web developer</li><li>He&apos;s participating in the Odin Project Bootcamp <strong>chatrooms</strong> to get help and help other people who got stuck</li><li>He&apos;s participating in the weekly Odin Project Clean Code <strong>book club</strong></li><li>He participated in a Game Jam <strong>Hackathon</strong> organized by the Odin Project Bootcamp</li><li>We&apos;ve put an extra effort to speak about and exercise <strong>the right keywords</strong> that are important in software engineering nowadays: TDD, Refactoring, Clean Code, OOP...</li><li>We worked together on a <strong>real-world issue</strong> from one of my freelance jobs which was a big proof of Dave being more than ready to do the job</li><li>We <strong>paired</strong> just for fun on an Exercism <strong>challenge</strong> and<a href="https://www.youtube.com/watch?v=wJE8mX0R_co&amp;t=7s"> recorded it during a live stream</a></li></ul><p>The learning here is, there&apos;s no shortage of opportunities to get real hands-on experience!</p><p>Please note, most of the most effective practices involve working with other people. Software engineering is a<strong> team sport</strong>! </p><h3 id="show-a-nice-door-into-your-developer-soul-%F0%9F%9A%AA">Show a nice door into your developer soul &#x1F6AA;</h3><p>Not a rusty one. &#x2F3E;</p><p>You <strong>will</strong> need a door after your LinkedIn page is brushed up and after you&apos;ve pumped out one bigger or a few smaller demonstratable projects.</p><p>Many beginning developers make the mistake of wanting to code their portfolios from scratch. While it&apos;s a good enough coding practice, the biggest priority for your portfolio page is a good UX, a good structure, and the right information. Recruiters and potential future colleagues most love it at the first glance!</p><p>Unless you are already a skilled frontend or UX person or have someone to spend tons of time with you on making a perfectly designed portfolio page, take a better road: </p><p>Take an already awesome open-source licensed portfolio template in a technology that&apos;s relevant to you and add your information, play around with the template, and tweak it to your needs. Try to understand how and why the developer built it like that. Maybe fix a few errors on the way. Caveat: You&apos;ll still need feedback iterations on it. There are forums and places to get just that for your specific role.</p><p>We followed information best practices, he learned some open source and some React on the way, and probably even some good design practices. Win-win win.</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://www.davidmatalik.com/"><div class="kg-bookmark-content"><div class="kg-bookmark-title">Portfolio App</div><div class="kg-bookmark-description">David Matalik - Web Developer - SOLID Lover - Git Conquerer</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://www.davidmatalik.com/portfolio/favicon.ico" alt="3 Phases For How To Get A Job As A Web Developer By REAL Example"><span class="kg-bookmark-author">Web Developer</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://i.ibb.co/Mf9s9rq/Screenshot-2021-07-27-18-46-11.png" alt="3 Phases For How To Get A Job As A Web Developer By REAL Example"></div></a></figure><h3 id="position-yourself">Position Yourself</h3><p>If you don&apos;t really know the kind of developer you wanna be for the kind of company, try to come up with a little vision or a brand for yourself. One sentence can be enough for the start: </p><blockquote>&quot;I create [fun|maintainable] [software|games|web-apps] for [companies|users] X by following an approach of [conscientious coding and deliberate practice] with technology Y&quot;</blockquote><p>Depending on how much of a social media person you are, creating a strategy around being active on Blogs, YouTube, LinkedIn, or [YOUR SOCIALMEDIA PLACEHOLDER] is a great way to position yourself.</p><p>David made nice educational videos about his learnings and also a video about FAQs to make it easier for companies to understand how he is and where he stands:</p><figure class="kg-card kg-embed-card"><iframe width="200" height="113" src="https://www.youtube.com/embed/zb5TXz2dHbU?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></figure><h3 id="weekly-accountability-practice">Weekly Accountability Practice</h3><p>We talked about the upcoming TODOs on a weekly/bi-weekly basis and pivoted whenever we saw the need to work on something particular in the current phase.</p><p>Being accountable and trying to achieve things while making iterations on your solutions is really important and valuable. At this point, you can also incorporate agile practices to prepare yourself for the Scrum-ish project management environments that you will encounter as a developer.</p><p>Finding the right accountability buddies and communities will take time, but it&apos;s the most effective way to make yourself do stuff and bring yourself through tough phases. I could have probably given up on my computer science studies after a few months if I haven&apos;t talked to developers when things got rough.</p><h2 id="ii-application-phase">II. Application Phase</h2><p>Shit gets real here. And at the same time, you are exposed to the most artificial and flawed process in this universe which gets people together with companies: The Hiring Process AKA Recruitment. You can despair on it. </p><p>But, if you see this as an opportunity to learn, grow, and have fun communicating with other people, all of a sudden, this process becomes a blessing.</p><h3 id="destructure-your-background">Destructure Your Background</h3><p>David had a bit of a techie university degree (economy informatics) from 10 years ago, but his background over the last 10 years was mostly non-tech related and all over the place. </p><p>The first thing to understand here is that &quot;diversity&quot; is held high on most companies&apos; hiring agendas. Diverse backgrounds of any kind bring spice into today&apos;s software teams! Even though it&apos;s not a full reality yet, I see more and more of this and I experienced it a lot during my job search and those of my coachees.</p><p>The second thing to understand here is that your background matters! Everything that you did might have a core that can benefit you in the software engineering team sport. Are you convinced that your background is not worth anything in the industry? Please shoot me a message and we&apos;ll destructure it! ;)</p><p>We extracted his strengths and built up some confidence around them. This is what you need to get your mindset right.</p><h3 id="choose-the-right-portals-make-them-shine">Choose the right portals &amp; make them shine</h3><p>One strategy on getting hired is spreading wide in terms of job portals. Instead of just trusting in LinkedIn to find the right match for you where you hit the &quot;Apply Now&quot; button and your job magically appears. </p><p>The right portal will depend on your company and industry goals. </p><p>Additionally, engaging in communities, conferences, and meetups can be a huge booster.</p><p>There are a few tricks involved in making yourself discoverable and look employable. It&apos;s sad but true that in order to get in touch with companies you need to apply some tricks on your job application platforms. No need to make anything up, just use the right sections for the right information with the right emphasis on the right things.</p><p><a href="linkedin.com/in/davidmatalik/">linkedin.com/in/davidmatalik/</a></p><p>Or check how Bootcamp students do it. They are trained by professionals to do it in a certain way and this is what works in terms of discoverability.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2021/11/image.png" class="kg-image" alt="3 Phases For How To Get A Job As A Web Developer By REAL Example" loading="lazy" width="1304" height="706"><figcaption><a href="https://boingboing.net/2021/11/01/fed-up-with-the-job-search-a-software-engineer-created-a-ridiculous-fake-resume-and-got-a-90-response-rate.html">Screening process killer :/</a></figcaption></figure><h3 id="have-a-plan">Have a plan</h3><p>Applying for jobs can be very tedious and nerve-wracking. Apart from adjusting your mindset to this process, it&apos;s essential to have an application strategy and plan, to expose yourself effectively:</p><ul><li>apply often</li><li>apply in the right places</li><li>have &quot;passive&quot; application sources (e.g. Honeypot, Circular.io, etc.)</li><li>never miss an opportunity to communicate </li><li>stay positive at all times even if you are enraged :D</li><li>embrace rejection</li><li>always follow up and/or kindly ask for feedback</li><li>value the time and the interest of the companies as you value yours</li><li>trust the process! It works in your favor, although sometimes it seems not to</li></ul><p>Without the proper plan and execution, it&apos;s possible that you suddenly find yourself in the <strong>I. Preparation Phase</strong> again, without even noticing it for a long time.</p><h2 id="bonusawesomness">BONUSAWESOMNESS:</h2><p>If you wanna do a little extra to really make things awesome, consider adding a few more perks to your journey.</p><h3 id="really-know-what-you-want">Really know what you want</h3><p>David had a very concrete vision. His vision mixed into a result that&apos;s maybe not 100% the exact thing he envisioned 8 months ago, BUT it comes very close, I think. So he looked for the right companies in the right places and put effort into communicating with companies on an individual level. This is much harder than just clicking &quot;Apply Now&quot; on LinkedIn. Finally, knowing what you want and communicating your vision makes you more special as a candidate.</p><h3 id="track-your-time">Track your time</h3><p>A timesheet keeps you accountable and makes you understand better how you spend your most valuable asset. An Excel sheet is fine, probably even a physical sheet. I personally love to be in a timer flow with the Kanbanflow tool (https://kanbanflow.com) which has managed my projects in the last few years.</p><h3 id="train-your-tenacity">Train your tenacity</h3><p>One thing that really amazed me is how Dave tackled some tasks on his own to explore and really understand some issues that he wrangled with. Tasks where I would have googled the solution up a long time ago or spammed chats and friends with questions about it :D</p><h3 id="variety-is-an-option">Variety is an option</h3><p>Working on multiple projects simultaneously can be a great practice. Sometimes you are stuck, here&apos;s where you can formulate a nice-looking question for others to answer and work on something else in the meantime. Focusing on one thing at a time is fine too, depending on your support environment (maybe you have someone to help you at any time, like a Bootcamp teacher?), your style, workload, and personal preferences.</p><h3 id="review-cycles">Review cycles</h3><p>Undoubtedly Unbeatable.</p><ol><li>Do stuff</li><li>Look at what you&apos;ve done</li><li>Improve</li><li>Repeat</li></ol><p>It&apos;s a superpower.</p><h2 id="aftermath-phase">Aftermath Phase</h2><p>So what was the actual result?</p><p><em>Within 8 months, Dave got a well-paid internship at an awesome company with a great team culture that&apos;s mission-driven to make energy consumption more sustainable.</em></p><p>Close enough? </p><p>But once you can say:</p><blockquote>&quot;Contract signed! &#x1F389;&quot;</blockquote><p>Is it all over? No, the journey has just begun. Now you need to refocus your time and energy on your company&apos;s needs. Prepare your skills and mental models to extract the most fun from your upcoming experience! But also don&apos;t neglect to celebrate and to take a break &#x1F334; Your brain should reshuffle and come up with a new awesome vision. So that in a few months time you can say again:</p><blockquote>&quot;XXX achieved! &#x1F389;&quot;</blockquote><p>P.S.: An integral part of our collaboration with David was to get to know each other well, so please know, if he was a fruit, he&apos;d see himself as an Avocado &#x1F951;</p><p>P.P.S.: Setting goals isn&apos;t without implications and often includes vectors that you can&apos;t control. They can be a source of frustration and lead to giving up in the worst case. I love the alternative approach of building habits which lets you focus on things you can control for the most part.</p>]]></content:encoded></item><item><title><![CDATA[Crush Your Coding Challenges With REAL Test-Driven Development]]></title><description><![CDATA[Most coding challenges exercise more your coding/syntax and problem-solving skills and less your analytical and anticipation skills, not to mention your ability to do Test-Driven Development as a discipline. Let's see how to change that!]]></description><link>https://richstone.io/level-up-with-real-test-driven-development-on-exercism-and-other-challenge-platforms/</link><guid isPermaLink="false">6188039fabe01c00015c1c77</guid><category><![CDATA[Coding Challenges]]></category><category><![CDATA[Ruby]]></category><dc:creator><![CDATA[Rich Steinmetz]]></dc:creator><pubDate>Sun, 07 Nov 2021 17:28:02 GMT</pubDate><media:content url="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2021/11/Screen-Shot-2021-11-07-at-18.37.02.png" medium="image"/><content:encoded><![CDATA[<img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2021/11/Screen-Shot-2021-11-07-at-18.37.02.png" alt="Crush Your Coding Challenges With REAL Test-Driven Development"><p>Most coding challenges exercise more your coding/syntax and problem-solving skills and less your analytical and anticipation skills, not to mention your ability to do Test-Driven Development as a discipline.</p><p><em>Let&apos;s see what we can do, with an example of how I&apos;m going about Ruby challenges on the Exercism coding challenge platform.</em></p><p>On all the coding challenge platforms that I know, tests are pre-written. In Exercism you can see and even change them. On other platforms, they are even hidden or you get to see sample inputs with expected outputs. In short, tests are already there, you satisfy them with your knowledge of coding, syntax, and algorithms. </p><p>On Exercism, some mentors will also look at the design aspect of your code. For Ruby, most of the time, they will insist on an object-oriented type of design paradigm (I know, I was a mentor there as well :).</p><p>This is all great, but what if you want to step up a bit and add some spice to these challenges? For example, by doing real TDD as described in Kent Beck&apos;s books Test-Driven Development By Example or Extreme Programming. You&apos;d be working in iterations of a cycle:</p><ol><li>Red &#x1F534;</li><li>Green &#x1F7E2;</li><li>Refactor &#x1F6E0;</li></ol><p>This is not possible with the Exercism setup, since the tests are pre-written. Exercism argues that this is indeed Test-Driven Development. And in some way it is. At some resource-heavy companies, you might really have the setup that you get some tests pre-written from a team of testers who create them from a requirements specification. Or from QA people, who&apos;d do the same but less on a unit test level and more on an end-2-end level.</p><p>However, this setup is highly uncommon. Nowadays, it&apos;s expected from developers that they write the code <strong>and </strong>the tests. Or sometimes even better, a test, and then some code to satisfy the test ;)</p><p>Test-driven development makes working with your code a joy and I try to hone this skill whenever possible, so once I need to solve a problem on the spot or on the job, I&apos;m getting into the cycle right away.</p><p>My favorite process to solve an Exercism challenge (or any other coding challenge for that matter, if tests are available):</p><ol><li>[ ] Create a tiny &quot;design checklist&quot; (what needs to be done?)</li><li>[ ] Check what Exercism expects in terms of structure (e.g. a class <code>FootballField</code> with a method <code>goalKeeper(inputBalls)</code>)</li><li>[ ] Start coding with the TDD cycle: </li></ol><p>&#x27A1;&#xFE0F; Write a failing test &#x1F534;</p><p>&#x27A1;&#xFE0F; Satisfy the test with the most simple solution &#x1F7E2;</p><p>&#x27A1;&#xFE0F; Refactor (remove duplication and keep an eye on maintainability) &#x1F6E0;</p><p>&#x21A9;&#xFE0F; Repeat &#x1F9D1;&#x200D;&#x1F4BB;</p><p>4. [ ] Try to figure out the edge cases and happy paths on my own</p><p>5. [ ] When I think the exercise is finished: See if Exercism covers even more edge cases and run the Exercism minitest tests to see whether I&apos;ve covered everything.</p><p>For this purpose I created a tiny template for my Exercism Ruby track challenges in RSpec:</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://github.com/RichStone/exercism-exercises/blob/main/ruby/rspec_template_spec.rb"><div class="kg-bookmark-content"><div class="kg-bookmark-title">exercism-exercises/rspec_template_spec.rb at main &#xB7; RichStone/exercism-exercises</div><div class="kg-bookmark-description">Contribute to RichStone/exercism-exercises development by creating an account on GitHub.</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://github.com/fluidicon.png" alt="Crush Your Coding Challenges With REAL Test-Driven Development"><span class="kg-bookmark-author">GitHub</span><span class="kg-bookmark-publisher">RichStone</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://opengraph.githubassets.com/93821c8293f9612c9e99c6edb9d6b4edafa7c0b4f69e2c1b495b65a46e2350b5/RichStone/exercism-exercises" alt="Crush Your Coding Challenges With REAL Test-Driven Development"></div></a></figure><p>It&apos;s RSpec because this is what I&apos;m using at work for more than a year now. But once you see the concept it&apos;s even simpler to set it up with minitest, right? No need to install RSpec in this case.</p><p>More about TDD in Exercism, the exact template setup, and how it all works together in this step by step video:</p><figure class="kg-card kg-embed-card kg-card-hascaption"><iframe width="200" height="113" src="https://www.youtube.com/embed/sJfPj9z2AI0?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><figcaption>How it works.</figcaption></figure>]]></content:encoded></item><item><title><![CDATA[Why Live Streaming Coding & Writing Small Programs!?]]></title><description><![CDATA[In my prior life as a professional live poker player, game streams, online and offline, were some of the most powerful learning opportunities that I had. The same is true for programming...]]></description><link>https://richstone.io/why-live-streaming-coding-writing-small-programs/</link><guid isPermaLink="false">6186acb5abe01c00015c1a7b</guid><category><![CDATA[Live Stream Coding]]></category><dc:creator><![CDATA[Rich Steinmetz]]></dc:creator><pubDate>Sat, 06 Nov 2021 17:19:50 GMT</pubDate><media:content url="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2021/11/Screen-Shot-2021-11-06-at-17.56.59.png" medium="image"/><content:encoded><![CDATA[<img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2021/11/Screen-Shot-2021-11-06-at-17.56.59.png" alt="Why Live Streaming Coding &amp; Writing Small Programs!?"><p>I&apos;m doing an experiment (again). Live Stream Coding. And Writing Small Programs (again).</p><p>In my prior life as professional small stakes live poker player, game streams, online and offline, were some of the most powerful learning opportunities that I had. Seeing what&apos;s actually going on under the hood and the thoughts of experienced players were incredibly helpful.</p><p>The same is true for programming. Seeing developers solving issues on the spot is a whole different thing than seeing them present you the well-crafted materials in form of books, blogs, and video courses. </p><p>We are not just professional coders. We are also professional Googlers. The earlier in the career, the more we are the latter than the former. Why is it then that in conventional educational coding videos we only see how someone is solving a problem perfectly? Not their struggles and actual findings along the way? Googling and debugging well, is as essential as software architecture, language knowledge, and algorithms, especially at the beginning of your career.</p><p><strong>But is every live stream a learning opportunity?</strong></p><p>Apart from doing a live stream every day for the last week, I&apos;ve been reading up on this topic. There are streamers who condemn code streaming, there are streamers who love them. The same goes for watchers. The issue is, every live stream is different, done by different people with different intentions. </p><p>If you want to do a live stream while coding your next big project, that&apos;s cool, and some people will love it, but it&apos;s definitely not as fun and educational as working on a small problem or challenge the complexity of which is easy to fit into every watcher&apos;s brain.</p><p>I&apos;ve been looking at live streams that many developers are doing at the moment. It&apos;s sometimes hard to learn from them unless they are doing a structured session about a focused topic.</p><p>There are inherent issues with jumping into a live stream of a large codebase, where the streamer works on a non-trivial problem.</p><p><strong>Educational issues when jumping into a live stream:</strong></p><ol><li>You don&apos;t have the codebase context</li><li>You don&apos;t have the domain knowledge</li><li>You don&apos;t know what is currently worked on</li></ol><p>Still, some developer streamers reach an audience of up to about 100 live watchers. Good job! Having a lot of watchers is cool and ensures lively chat discussions. But this brings another challenge for the stream as a learning opportunity: It distracts the coding streamer and the progress of solving the problem at hand.</p><p>4. Learning is always interrupted</p><p>5. Project&apos;s progress is interrupted</p><p>This is cool if you are inside the stream to hang out with folks, but less cool if you are there to learn &#x1F4DA;</p><p>Looking at all these issues, I wonder if we can set some parameters for live streams to make them more effective for learners? What is the minority of the exceptional educational streamers doing so well?</p><p><strong>Making live streams more of an enjoyable educational experience:</strong></p><ol><li>Present the codebase at the beginning of each stream, keep your Small Program&#x2122; small enough, so that its complexity fits into people&apos;s brains</li><li>Explain the domain context and the problem to solve, don&apos;t expect watchers to have knowledge as you do</li><li>Set clear goals and keep a visible note about the project&apos;s progress so far</li><li>Comments are fun, handle non-essential comments during breaks or at the end of the session</li><li>Encourage watchers to interact with you in a pair/mob programming type of way, where you all try to solve the challenge together</li></ol><p>These are my initial thoughts and I will <a href="https://richstone.io/code-live-streams/">experiment with them as my streaming adventure progresses</a>. </p><h3 id="sum-sum">Sum sum</h3><p>Basically, from this perspective, the answer to the question of <em>Why Live Streaming Coding</em> is to experiment with live streaming even more as an educational tool than hanging out with other devs. </p><p>And then <em>Why Writing Small Program</em>s? In order to make Live Streaming Coding more of an enjoyable learning experience. What a closure &#x1F504;</p><p>There&apos;s a bit more to it, though, than I want to handle in this post. More details and reasons on how I came to writing small programs (again) in a live coding stream fashion:</p><figure class="kg-card kg-embed-card kg-card-hascaption"><iframe width="200" height="113" src="https://www.youtube.com/embed/F1YOzYwlo90?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><figcaption>Oh, Why?</figcaption></figure><p></p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://www.youtube.com/channel/UCyec8BlQmM9C_EW8cmsoJtg"><div class="kg-bookmark-content"><div class="kg-bookmark-title">YouTube&#x2019;a devam etmeden &#xF6;nce</div><div class="kg-bookmark-description"></div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://www.google.com/favicon.ico" alt="Why Live Streaming Coding &amp; Writing Small Programs!?"></div></div><div class="kg-bookmark-thumbnail"><img src="https://www.gstatic.com/ac/cb/cb_yt_logo_d_header_118x26_4dfe7c3d17767ffd2294ae90fb54337e.png" alt="Why Live Streaming Coding &amp; Writing Small Programs!?"></div></a></figure>]]></content:encoded></item><item><title><![CDATA[Mixed Thoughts Newsletter: Hi Alan, Let's talk Ruby APIs tomorrow, and much more]]></title><description><![CDATA[Some mixed thoughts about recent topics and future endeavors 🚀]]></description><link>https://richstone.io/mixed-thoughts-newsletter-1/</link><guid isPermaLink="false">60bca2ac4774b1000164402a</guid><category><![CDATA[Newsletter]]></category><dc:creator><![CDATA[Rich Steinmetz]]></dc:creator><pubDate>Sun, 06 Jun 2021 10:51:29 GMT</pubDate><media:content url="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2021/06/rails-freedom-statue.PNG" medium="image"/><content:encoded><![CDATA[<img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2021/06/rails-freedom-statue.PNG" alt="Mixed Thoughts Newsletter: Hi Alan, Let&apos;s talk Ruby APIs tomorrow, and much more"><p>Lots of ground to cover in this very first mixed thoughts newsletter:</p><ul><li>Hi Alan</li><li>Let&apos;s talk Ruby APIs tomorrow (7th June) </li><li>Magic Bootcamp student questions</li><li>New endeavors</li><li>1 life-changer</li><li>React template for your portfolio website?</li></ul><p>First things first. Let&apos;s start with a big shoutout to Alan who joined the newsletter subscriber list. He just joined the list. Nothing more, nothing less. But this triggered the creation process of this very first <a href="https://richstone.io/" rel="nofollow">richstone.io</a> mixed thoughts newsletter. So, thanks Alan, wherever you are right now. And of course a huge thanks to the other 25 subscribers here. Including my mom.</p><p>Newest endeavor: I&apos;m becoming a father soon. The second time. I&apos;ll be a serial father so to say. Not sure if it&apos;s a major achievement but it&apos;s definitely a form of engineering and entrepreneurship that creates exciting times for me and everyone around! &#x1F38A;<br><br>Other people who are always all excited: Bootcamp students! I love that energy! That&apos;s why I make a constant effort to keep in touch with those nice folks trying to get into the industry. There&apos;s so much to learn and so many unknowns. But not just for them. I&apos;ve done a few talks and workshops around Employability, Big O, and Tech Interviews <a href="https://www.linkedin.com/company/microverseinc/">Microverse</a> and <a href="https://www.linkedin.com/company/migracode-barcelona/">MigraCode Barcelona</a> in the last weeks and seemingly simple questions like...<br><br>- is class &lt;&lt; self REALLY the same as self.class in Ruby? <br>- what is ACTUALLY complexity in Big O?<br>- should I ALREADY apply for a job?<br><br>... become topics of their own worth exploring from different angles for student AND teacher &#x1F680;<br><br>Speaking of Bootcamps, I&apos;ve gone against my principles and recommended a REACT TEMPLATE to build a developer portfolio page. Basically, a TEMPLATE with REACT for a static page that&apos;s the window to your developer soul. Normally you don&apos;t need a React template for a static page. Unless... You want to learn React ;) Also, usually, you&apos;d see Bootcamp students code their portfolio page completely themselves from scratch. This is something I would rarely recommend unless the student is really well-versed in design and/or frontend development. Every situation is different and in this case, it was a good fit to go with React AND to use a template. By the way, there are cool React templates, that make forking and changing them a great learning experience too.<br><br>Having said all that, the most important life-changer:<br>After almost a year of professional ruby coding, I&apos;ve made ruby&apos;s multiline strings stick with a visual.</p><figure class="kg-card kg-image-card"><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2021/06/image-1.png" class="kg-image" alt="Mixed Thoughts Newsletter: Hi Alan, Let&apos;s talk Ruby APIs tomorrow, and much more" loading="lazy" width="800" height="409"></figure><p>Life-changing. <a href="https://richstone.io/ruby-multi-line-string-hell-1/">No more deploy blockers!</a></p><p><br>Finally, I&apos;ve made good progress in creating a template for your Ruby APIs with Sinatra.rb, MongoDB, and Heroku. I&apos;m planning to do a whole day free workshop on this, let me know if you also think it&apos;s a good use of your time to bake an API backend someday. There will be a warm-up talk about the template and other tools to create an API on Monday 7th of June (<a href="https://www.meetup.com/ruby-and-rails-developers-barcelona/events/278355139/">https://www.meetup.com/ruby-and-rails-developers-barcelona/events/278355139/</a>).<br><br>As always, I&apos;d love to hear from you via archaic text channels, novel in-person meetings, or online gatherings.</p>]]></content:encoded></item><item><title><![CDATA[Ruby multi-line string hell 1]]></title><description><![CDATA[<p>Ruby developers don&apos;t usually hate things about Ruby. But there&apos;s one thing that seems to be more complicated at times than necessary in Ruby.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2021/06/image.png" class="kg-image" alt loading="lazy" width="845" height="955"><figcaption>Here I am again, every now and then... Those purple links...</figcaption></figure><p>As you can see, I&apos;m a frequent guest at</p>]]></description><link>https://richstone.io/ruby-multi-line-string-hell-1/</link><guid isPermaLink="false">60b805ea4774b10001643f3d</guid><category><![CDATA[Ruby]]></category><dc:creator><![CDATA[Rich Steinmetz]]></dc:creator><pubDate>Wed, 02 Jun 2021 23:00:45 GMT</pubDate><media:content url="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2021/06/ruby-multiline-string.PNG" medium="image"/><content:encoded><![CDATA[<img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2021/06/ruby-multiline-string.PNG" alt="Ruby multi-line string hell 1"><p>Ruby developers don&apos;t usually hate things about Ruby. But there&apos;s one thing that seems to be more complicated at times than necessary in Ruby.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2021/06/image.png" class="kg-image" alt="Ruby multi-line string hell 1" loading="lazy" width="845" height="955"><figcaption>Here I am again, every now and then... Those purple links...</figcaption></figure><p>As you can see, I&apos;m a frequent guest at some fellow sufferers&apos; confessions.</p><p>I even blocked the deployment once, because we didn&apos;t have tests for rake tasks and CI didn&apos;t detect that this is not a multi-line string:</p><figure class="kg-card kg-code-card"><pre><code class="language-ruby">logger.log &quot;A very long sentence&quot; /
		   &quot;that ends here&quot;
# =&gt; NoMethodError (undefined method `/&apos; for &quot;A very long sentence&quot;:String)</code></pre><figcaption>Can you guess what other mistake is hidden here that no one of the PR reviewers will notice? &#x1F608;&#xA0;</figcaption></figure><p>For the IDE this syntax is just fine too, so no warnings or anything there either... &#x1F4A3;</p><p>Basically, every time my string got too long, I needed to look it up. I think our 80 characters line length rubocop limit was just long enough to drop off my spaced learning capabilities and force me to look it up again...</p><p>So finally, I&apos;ve drawn this down as a first step to get hold of the multi-line string hell.</p><p>If you try visualizing it, the forward-slash indeed makes sense in terms of flow. The text flow after the slash will go down and not up. Here it is one more time:</p><figure class="kg-card kg-image-card"><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2021/06/ruby-multiline-string-1.PNG" class="kg-image" alt="Ruby multi-line string hell 1" loading="lazy" width="2238" height="1146"></figure><p>No more purple links! For that part at least. There&apos;s some more visualization and meditation needed to get the rest of it into my brain, so that the devious Heredoc interpolations, squiggly operators, and whitespace handlers become second nature.</p>]]></content:encoded></item><item><title><![CDATA[[Part I] Ruby Freedom Stack Web App - Sinatra - MongoDB - Heroku - Minitest]]></title><description><![CDATA[<p>Are you an (aspiring?) Ruby developer looking for some freedom for your web app or API ideas? Or maybe you are just tired of learning all the conventions, rules, or laws that Rails is putting on you and you&apos;d like to move on your own for a bit?</p>]]></description><link>https://richstone.io/the-freedom-stack-ruby-api-app-sinatra-mongodb-heroku-minitest/</link><guid isPermaLink="false">60814e92334d3600012760dd</guid><category><![CDATA[Ruby]]></category><dc:creator><![CDATA[Rich Steinmetz]]></dc:creator><pubDate>Sat, 22 May 2021 09:39:33 GMT</pubDate><media:content url="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2021/04/freedom-stack-header-1.PNG" medium="image"/><content:encoded><![CDATA[<img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2021/04/freedom-stack-header-1.PNG" alt="[Part I] Ruby Freedom Stack Web App - Sinatra - MongoDB - Heroku - Minitest"><p>Are you an (aspiring?) Ruby developer looking for some freedom for your web app or API ideas? Or maybe you are just tired of learning all the conventions, rules, or laws that Rails is putting on you and you&apos;d like to move on your own for a bit? </p><p>If so, then check this out: In this thorough step-by-step tutorial we will navigate you towards a lightweight application with Sinatra, MongoDB, OAuth, and Bulma running on Heroku. You have most of the control. Fewer frameworks, less overhead.</p><blockquote>freedom /&#x2C8;fri&#x2D0;.d&#x259;m/ noun (for ruby devs) - 1. The power or right to get ideas rolling with gems, architectures, or structures as one wants, at no monetary cost - 2. The state of not being constrained by the burden of learning a big framework or overthinking on a rigid database schema.</blockquote><p>We will transform to freedom in 2 phases, building 2 reusable templates on the way: </p><ol><li>An API template with a minimal freedom quotes REST API for your non-UI backends <em>(in case you just want the template, head here: <a href="https://github.com/RichStone/ruby-freedom-API-stack-sinatra-mongodb-heroku">github.com/RichStone/freedom-API-template</a>)</em></li><li>A web application with OAuth authentication, route authorization, and a beautiful JavaScript-free Bulma UI <em>(<a href="https://github.com/RichStone/ruby-freedom-webapp-stack-sinatra-mongodb-heroku-bulma-oauth">github.com/RichStone/freedom-webapp-template</a>)</em></li></ol><p>This post here is about PHASE 1.</p><p>PHASE 2 will implement OAuth, route authorization, and a Bulma CSS UI in a different post.</p><h2 id="prerequisites">Prerequisites</h2><h4 id="ideas-%F0%9F%92%A1">Ideas &#x1F4A1;</h4><p>Stuff you want to build.</p><h4 id="time-%E2%8F%B3">Time &#x23F3;</h4><p>Everything&apos;s possible within a very reasonable amount of time with the magic of Ruby, Heroku hosting, cloud-based MongoDB, and some shiny gems. Still, you will need to set aside some time to create and learn. </p><p>If you just want the templates, grab them from the links above. </p><p>My wild guess is that building everything along with this tutorial will take <strong>a few hours on average</strong>. Plan accordingly. <strong>If you track your focused working time on it and let me know after, I will never forget you.</strong></p><h4 id="experience-%F0%9F%8E%93">Experience &#x1F393;</h4><p>You will need to have the programming basics down. You have Ruby installed and you know your way, at least a bit, around the command line, git, and web apps. <strong>Or you have a burning desire to get there (If you ever get stuck, ping me).</strong></p><h4 id="money-%F0%9F%A4%91">Money &#x1F911;</h4><p><strong>No hidden costs</strong>, everything&apos;s running on open-source and the generous hosting free tiers.</p><h2 id="1-setup-rubys-sinatra-micro-web-framework">1. Setup Ruby&apos;s Sinatra micro web framework</h2><p>I&apos;ve been enjoying development with Ruby and Rails for almost a year at this point. I still feel that it&apos;s big, intertwined, not easy to oversee. I don&apos;t feel the speed and freedom of starting a web or API project yet, that I had with Flask or Node as a backend framework. Let&apos;s try fixing that!</p><figure class="kg-card kg-code-card"><pre><code class="language-shell">$ mkdir freedom-stack
$ cd freedom-stack
$ touch app.rb</code></pre><figcaption>Warm-up.</figcaption></figure><p>Now that we have our app project folder set up, let&apos;s create a tiny minimal sinatra app in the <code>app.rb</code> file:</p><pre><code class="language-ruby"># app.rb

require &apos;sinatra&apos;

get &apos;/freedom&apos; do
  &apos;&#x201C;Freedom is not worth having if it does not include the freedom to make&apos; \
  &apos;mistakes.&#x201D; - Mahatma Gandhi&apos;
end</code></pre><p>If you have Sinatra installed already (e.g. via bundler: <code>gem install sinatra</code>), it&apos;s time to fire up your first app:</p><pre><code class="language-shell">$ ruby app.rb
== Sinatra (v2.1.0) has taken the stage on 4567 for development with backup from Puma
Puma starting in single mode...
* Version 4.3.6 (ruby 2.7.1-p83), codename: Mysterious Traveller
* Min threads: 0, max threads: 16
* Environment: development
* Listening on tcp://127.0.0.1:4567
* Listening on tcp://[::1]:4567
Use Ctrl-C to stop
</code></pre><p>As you can see from the log our app runs on localhost port 4567! &#x1F5FD;</p><p>So, let&apos;s see what&apos;s going on there:</p><figure class="kg-card kg-image-card"><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2021/04/image-3.png" class="kg-image" alt="[Part I] Ruby Freedom Stack Web App - Sinatra - MongoDB - Heroku - Minitest" loading="lazy" width="866" height="862"></figure><p>We haven&apos;t yet defined anything for the root URL path, so this definitely makes sense! However, our defined route works as expected on <code>127.0.0.1:4567/freedom</code>:</p><figure class="kg-card kg-image-card"><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2021/04/image-5.png" class="kg-image" alt="[Part I] Ruby Freedom Stack Web App - Sinatra - MongoDB - Heroku - Minitest" loading="lazy" width="609" height="151"></figure><p>Good time to share this amazingness with the world on GitHub &#x1F648;</p><figure class="kg-card kg-code-card"><pre><code class="language-shell">$ git init
$ git add app.rb
$ git commit -m&apos;Set up Sinatra app&apos;
$ git branch -M main # no need for masters!
# create your repo in GitHub and grab your repo URL:
$ git remote add origin git@github.com:USER/REPONAME.git
$ git push -u origin main</code></pre><figcaption>Not sure if I&apos;ve done this 1000 times already.</figcaption></figure><p>Great, before we go to the next chapter, do you see the terrible mistake that we&apos;ve pushed to the repo? It&apos;s missing a space between &quot;make&quot; and &quot;mistakes&quot;. Which irony. It comes from the darkest, most tyrannic part of Ruby: multiline strings.</p><figure class="kg-card kg-code-card"><pre><code class="language-ruby">get &apos;/freedom&apos; do
  &apos;&#x201C;Freedom is not worth having if it does not include the freedom to make&apos; \
  &apos; mistakes.&#x201D; - Mahatma Gandhi&apos;
end</code></pre><figcaption>We were missing a space before &quot;mistakes&quot;.</figcaption></figure><p>Now that it&apos;s fixed we should see the changes. In theory. Expectations are high, especially, when you are spoiled by Rails, Flask, and super hot reload JS development setups. With sinatra we need to go an extra step and install the reloader gem first: <code>gem install sinatra-contrib</code>.</p><p>Then we can enjoy it in our app:</p><pre><code class="language-shell"># app.rb

require &apos;sinatra&apos;
require &apos;sinatra/reloader&apos; if development?

get &apos;/freedom&apos; do
  &apos;&#x201C;Freedom is not worth having if it does not include the freedom to make&apos; \
  &apos; mistakes.&#x201D; - Mahatma Gandhi&apos;
end
</code></pre><p>OK, hope the Ministry of Truth hasn&apos;t seen it, quickly amending the changes and overwriting our remote repository with the new truth &#x1F98A;</p><figure class="kg-card kg-code-card"><pre><code class="language-shell">$ git commit --amend --no-edit
$ git push -f</code></pre><figcaption>Side note: Don&apos;t use <code>-f</code> option, unless you think you know what you do.</figcaption></figure><p>Now we could use a short break to meditate on what we&apos;ve just achieved: a truly new backend API freedom application running on localhost without bugs nor mistakes.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2021/04/image-12.png" class="kg-image" alt="[Part I] Ruby Freedom Stack Web App - Sinatra - MongoDB - Heroku - Minitest" loading="lazy" width="495" height="107"><figcaption>Everything begins somewhere.</figcaption></figure><h2 id="2-deploy-on-heroku">2. Deploy on Heroku</h2><p>So far so good. We were good engineers until now. We&apos;ve set up an app with git and hot reload right away. However, our app only runs locally. We, on the other hand, love to develop close to production, don&apos;t we? <strong>Heroku</strong> is the GOTO &quot;Platform as a Service&quot;(PaaS) provider for Ruby apps, so let&apos;s go with the big names for our big projects.</p><p>First, you&apos;ll need a <a href="https://signup.heroku.com/">Heroku account</a> and the <a href="https://devcenter.heroku.com/articles/heroku-cli">Heroku CLI</a> <em>(creating the account and installing the CLI will take you a few minutes with Heroku&apos;s great docs, I&apos;ll be waiting here)</em>.</p><p>&#x231B; </p><p>Second, we&apos;ll need to set our app up for Heroku. How will Heroku know, which gems to install when we push our application to their servers? The <strong>Gemfile</strong> tells Heroku exactly that:</p><figure class="kg-card kg-code-card"><pre><code class="language-ruby"># Gemfile

gem &apos;sinatra&apos;
gem &apos;sinatra-contrib&apos;</code></pre><figcaption>The treasure file.</figcaption></figure><p>And then we add the <code>config.ru</code> which is a configuration file that Heroku uses to start up your app:</p><figure class="kg-card kg-code-card"><pre><code class="language-ruby"># config.ru

require &apos;./app.rb&apos;
run Sinatra::Application</code></pre><figcaption>(<code>config.ru</code> is the configuration file used by the rackup command to run rack apps. It gets called automatically when you push your git changes to Heroku. Just so you heard about it ;))</figcaption></figure><p>By the way, since we are using the Gemfile now, you can do <code>bundle install</code> and your dependencies will be managed automatically for your app via bundler. Win-win.</p><p>Third, we commit our changes and deploy to Heroku:</p><figure class="kg-card kg-code-card"><pre><code class="language-ruby">$ git add .
$ git commit -m&apos;Set up for Heroku deployment&apos;
$ heroku create # this creates a new Heroku app
Creating app... done, &#x2B22; sheltered-escarpment-38193
https://sheltered-escarpment-38193.herokuapp.com/ | https://git.heroku.com/sheltered-escarpment-38193.git

$ git push heroku main</code></pre><figcaption>If deployment was that easy at your day job...</figcaption></figure><p>We still haven&apos;t defined anything for our root route <code>/</code> and Heroku seems to have its own 404 error handling:</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2021/04/image-6.png" class="kg-image" alt="[Part I] Ruby Freedom Stack Web App - Sinatra - MongoDB - Heroku - Minitest" loading="lazy" width="649" height="97"><figcaption>We don&apos;t see the funny microphone picture anymore.&#xA0;</figcaption></figure><p>But the <code>/freedom</code> route works as before, so all good for now, we can look at 404s sometime later.</p><h2 id="3-setup-mongodb">3. Setup MongoDB</h2><p>SQL is great. But it feels rigid at times. Especially for my developer experience, I always loved to pass around JSON documents from the bottom of a DB up to the top of the client&apos;s browser. This is just how my brain likes to think about data and this is also where you need to put the least thought into how to handle data between the different phases.</p><p>Some people might miss SQL normalization, relational logic, and fixed database schemas for some use cases. But for my apps and for tons of other flexible use cases where you don&apos;t know which kind of data will be dawned on you, it&apos;s great to have something like Mongo.</p><p>Installing and using MongoDB with some language driver (in our case Ruby) is easy, so let&apos;s jump right into it. I would be crazy trying to guess your operating system and to compete with MongoDB&apos;s awesome step-by-step guides, so please <a href="https://docs.mongodb.com/manual/administration/install-community/">go there, choose your OS from the menu, and get MongoDB on your machine</a> in a couple of minutes.</p><p>&#x231B;</p><p>After you&apos;ve spelled the magic commands from the MongoDB documentation to install and start up the new database, 4 particularly interesting things happened:</p><ol><li>a directory was created for the MongoDB data (AKA the database)</li><li>another directory was created where Mongo writes its logs</li><li>an important configuration file was created to configure the database</li><li>you can now connect to your mongo process via the mongo shell:</li></ol><figure class="kg-card kg-code-card"><pre><code class="language-shell">$ mongo
&gt; help
	db.help()                    help on db methods
	db.mycoll.help()             help on collection methods
    [...]
&gt; db.getMongo()
connection to 127.0.0.1:27017
&gt; show dbs
admin   0.000GB
config  0.000GB
local   0.000GB</code></pre><figcaption>Our mongo shell is connected to a MongoDB instance on <code>127.0.0.1:27017</code> and we have 3 databases already right after installation, very productive.</figcaption></figure><p>As you can see, we are on a roll here. So, let&apos;s keep with the momentum and connect MongoDB to our Sinatra app real quick <em>(by the way, every step here is its own commit in git, in case you&apos;d like to follow along like a pro ;)</em>.</p><h3 id="install-mongoid-gem">Install mongoid gem</h3><pre><code class="language-ruby"># Gemfile

source &apos;https://rubygems.org&apos;
gem &apos;sinatra&apos;
gem &apos;sinatra-contrib&apos;
gem &apos;mongoid&apos;</code></pre><p>Run <code>bundle &#xA0;install</code>.</p><h3 id="add-mongoid-configuration">Add mongoid configuration</h3><p>Now we need to let sinatra know where our mongo process is running and which database we want to use. For that, we create a new <code>mongoid.yml</code> file in our project:</p><figure class="kg-card kg-code-card"><pre><code class="language-ruby"># mongoid.yml

development:
  clients:
    default:
      database: freedom_stack
      hosts:
        - localhost:27017
      options:
        server_selection_timeout: 1</code></pre><figcaption>We know from playing in our mongo shell earlier that the mongo instance runs on localhost:27017</figcaption></figure><h3 id="add-mongoid-to-your-app">Add mongoid to your app</h3><pre><code class="language-ruby"># app.rb

require &apos;sinatra&apos;
require &apos;sinatra/reloader&apos; if development?
require &apos;mongoid&apos; # get the mongoid ruby driver
project_root = File.dirname(__FILE__)
Mongoid.load!(File.join(project_root, &apos;mongoid.yml&apos;)) # get the configs
...</code></pre><p>And that&apos;s basically it. Local database connected.</p><h3 id="add-a-model">Add a model</h3><p>What will be the central piece of our API? Let&apos;s say we want to manage quotes about freedom.</p><figure class="kg-card kg-code-card"><pre><code class="language-ruby"># app.rb

[... all the requires ...]

class FreedomQuote
  include Mongoid::Document

  field :email, type: String
end

...</code></pre><figcaption>Agile as we are today, one single <code>:quote</code> field should be enough for now.</figcaption></figure><p>Including <code>Mongoid::Document</code> for your FreedomQuote model is basically like inheriting from <code>ActiveRecord::Base</code> model in Rails. In general, the mongoid gem makes a great effort to get yourself a Rails-like experience, so many things will be familiar for you if you come from Rails.</p><h3 id="add-a-basic-rest-api">Add a basic REST API</h3><p>Now we&apos;ll come to the meat of our API, the resources management via <strong>CRUD</strong> (<strong>C</strong>reate, <strong>R</strong>ead, <strong>U</strong>pdate, <strong>D</strong>elete).</p><p>Most APIs have one or more central resources that can be managed by authenticated users or by the public. REST is an API architecture that makes it easier to do. In our case, the central resources are the freedom quotes, so let&apos;s manage them.</p><figure class="kg-card kg-code-card"><pre><code class="language-ruby"># app.rb

[... more code in the beginning ...]

class FreedomQuote
  include Mongoid::Document

  field :quote, type: String
end

# Create a new freedom quote
post &apos;/freedom_quotes&apos; do
  quote = FreedomQuote.create!(params[:quote])
  quote.to_json
end

# Read all freedom quotes
get &apos;/freedom_quotes&apos; do
  FreedomQuote.all.to_json
end

# read an individual freedom quote
get &apos;/freedom_quotes/:id&apos; do
  FreedomQuote.find(params[:id]).to_json
end

# Update an existing freedom quote
patch &apos;/freedom_quotes/:id&apos; do
  quote = FreedomQuote.find(params[:id]).update(params[:quote])
  quote.to_json
end

# Delete a freedom quote
delete &apos;/freedom_quotes/:id&apos; do
  quote = FreedomQuote.find(params[:id]).delete
  quote.to_json
end

[... more freedom code ...]</code></pre><figcaption>CRrUD</figcaption></figure><p>Let&apos;s check out our glorious users and <strong>R</strong>ead them all:</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2021/05/image.png" class="kg-image" alt="[Part I] Ruby Freedom Stack Web App - Sinatra - MongoDB - Heroku - Minitest" loading="lazy" width="606" height="164"><figcaption>Not much traffic here yet.</figcaption></figure><p>Great, we can see that we have an empty array of freedom quotes. No probs, we will just add someone.</p><p>Looking up users is easy in the browser. But since browsers cannot do POST requests, we need another tool for that. For example, <code>cURL</code> that&apos;s available on most command lines:</p><figure class="kg-card kg-code-card"><pre><code class="language-shell">$ curl -X POST --data &apos;quote=Freedom is near&apos; http://localhost:4567/freedom_quotes
HTTP/1.1 200 OK
Content-Type: text/html;charset=utf-8
X-XSS-Protection: 1; mode=block
X-Content-Type-Options: nosniff
X-Frame-Options: SAMEORIGIN
Content-Length: 58</code></pre><figcaption>A POST request with the good old cURL tool requesting to POST a quote to the specified server at the URL location. The server thinks it&apos;s &quot;200 OK&quot;.</figcaption></figure><p>After that we can ask the browser about our freedom quotes again:</p><figure class="kg-card kg-image-card"><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2021/05/image-6.png" class="kg-image" alt="[Part I] Ruby Freedom Stack Web App - Sinatra - MongoDB - Heroku - Minitest" loading="lazy" width="616" height="325"></figure><p>And this is what we see back down in our MongoDB shell:</p><figure class="kg-card kg-code-card"><pre><code class="language-shell">$ mongo
&gt; show dbs
admin          0.000GB
config         0.000GB
freedom_stack  0.000GB
local          0.000GB
&gt; use freedom_stack
&gt; db.users.find()
{ &quot;_id&quot; : ObjectId(&quot;60a11b128310bf848407132a&quot;), &quot;quote&quot; : &quot;Freedom is near&quot; }</code></pre><figcaption>A new database was created. We can <code>use</code> and query its <code>freedom_quotes</code> <strong>collection</strong> to get a user <strong>document</strong> similar to Rails&apos; <code>ActiverRecord</code>(old mechanisms, new document DB terminology)</figcaption></figure><p>It&apos;s official, we have our first freedom quote in the database! However, that&apos;s only running on our computer, AKA &quot;Works on my local&quot;. Let&apos;s get this quickly in production now.</p><h3 id="bringing-mongo-to-production">Bringing Mongo to production</h3><p>Heroku is lazy and does not host MongoDB databases for anyone. Instead, you can easily plug in MongoDBs Pro version: <strong>MongoDB Atlas</strong>. It will be hosted on Mongo&apos;s servers and communicate with your app on Heroku.</p><p>You will have <strong>half a Gigabyte of disk space</strong> for your account in the MongoDB Atlas free tier. This will be plenty for any simple web app that you implement. If you grow over it, you are probably ready to pay the extra buck for the awesome service that you will get when a database is actually hosted for you (<em>by the way, hosting Postgres on Heroku isn&apos;t free forever either; you have 7.000 rows in Heroku&apos;s free tier. That&apos;s never any near to 512 MB. Never. Ever.</em>).</p><p>This will be a process of <strong>5 very short steps</strong>, from <a href="https://developer.mongodb.com/how-to/use-atlas-on-heroku/#step-1--create-an-atlas-account">creating a MongoDB Atlas account</a> to <a href="https://developer.mongodb.com/how-to/use-atlas-on-heroku/#step-1--create-an-atlas-account">granting access to your mongo database</a>. Do all the 5 steps as described and come back here (<em>I had an issue signing up via Google OAuth when I was on my phone, so if you are reading this on mobile, don&apos;t give up! You might just need to wait until you are back at a real computer screen. Which will make all the setup easier anyway</em>).</p><p>&#x231B;&#x231B;</p><p>Second, get the URL that your Sinatra app on Heroku will use to communicate with the database on Mongo&apos;s servers. Here: <a href="https://developer.mongodb.com/how-to/use-atlas-on-heroku/#get-your-atlas-cluster-connection-string">a brief description of how to make this work</a>.</p><p>&#x231B; get yourself a URL like this:</p><pre><code class="language-shell">mongodb+srv://freedom-stack:rich_PASSWORDO@cluster0.zhtt7.mongodb.net/myFirstDatabase?retryWrites=true&amp;w=majority</code></pre><p>We will add this URL to our <code>mongoid.yml</code> to configure sinatra with it:</p><figure class="kg-card kg-code-card"><pre><code class="language-ruby"># mongoid.yml

[... development configs ...]

# new **production** configuration
production:
  clients:
    default:
      uri: mongodb+srv://freedom-stack:rich_PASSWORDO@cluster0.zhtt7.mongodb.net/myFirstDatabase?retryWrites=true&amp;w=majority
      options:
        server_selection_timeout: 5</code></pre><figcaption>Mongoid will automatically detect our current environment (development vs. production).</figcaption></figure><p>One major issue here, we don&apos;t really want to store our password in free text. So let&apos;s store it in a file that does not get committed to git, but can be read from our local project directory. There&apos;s a gem that makes working with a &quot;hidden&quot; <code>.env</code> file easy:</p><pre><code class="language-ruby"># Gemfile

[...]
gem &apos;dotenv&apos;</code></pre><p>After a <code>bundle install</code> we can add to our app code:</p><pre><code class="language-ruby"># app.rb

require &apos;sinatra&apos;
require &apos;sinatra/reloader&apos; if development?
require &apos;dotenv&apos;
Dotenv.load
[...]</code></pre><p>With this in place, we can now use everything that we add to our <code>.env</code> file as an <code>ENV[&apos;VARIABLE&apos;]</code>, if we follow the following format:</p><figure class="kg-card kg-code-card"><pre><code class="language-ruby"># .env

MONGODB_CLUSTER_PASSWORD=rich_PASSWORDO</code></pre><figcaption><code>MONGODB_CLUSTER_PASSWORD</code> is a global object provided by sinatra. Everything from the <code>.env</code> file now gets saved there.</figcaption></figure><p>And not to forget to tell git about our plans, creating a <code>.gitignore</code> file:</p><pre><code class="language-shell"># .gitignore

.env</code></pre><p>So, if we never commit our <code>.env</code> file to git, how will our deployed app on Heroku know about our MongoDB Atlas password? Great question!</p><p>We can set <a href="https://devcenter.heroku.com/articles/config-vars">Heroku environment variables</a> directly in the Heroku UI or via the Heroku CLI on the command line in our project repository:</p><figure class="kg-card kg-code-card"><pre><code class="language-ruby">$ heroku config:set MONGODB_CLUSTER_PASSWORD=rich_PASSWORDO</code></pre><figcaption>No one will know about it unless someone gets access to your Heroku account.</figcaption></figure><p>Now we are going to deploy all the changes to production. Let&apos;s commit our latest changes, push everything to our repository, and then push everything to Heroku. And check that everything works as expected on Heroku &#x1F62C;</p><figure class="kg-card kg-code-card"><pre><code class="language-shell">$ git add mongoid.yml
$ git commit -m&apos;Add mongoid production settings&apos;
$ git push # goes to our repository
$ git push heroku main

[... tons of output ...]

remote:        Released v6
remote:        https://sheltered-escarpment-38193.herokuapp.com/ deployed to Heroku
remote: 
remote: Verifying deploy... done.
To https://git.heroku.com/sheltered-escarpment-38193.git
   ca9870c..d5320aa  main -&gt; main
</code></pre><figcaption>For pushing your changes to Heroku, you don&apos;t need to push to your GitHub repository, but you <strong>do</strong> need to commit your changes. Heroku is integrated with git.</figcaption></figure><p>After a successful deployment, Heroku spits out the URL location where your app is hosted remotely. In the example case above it&apos;s <a href="https://sheltered-escapement-298346.herokuapp.com/"><code>https://sheltered-escapement-298346.herokuapp.com/</code></a>. Take your own URL, <strong>R</strong>ead all freedom quotes (just to see an empty array), then <strong>C</strong>reate a new freedom quote (with cURL or Postman), <strong>D</strong>elete them, or <strong>U</strong>pdate their <code>:quote</code> attribute.</p><p>Here are some example cURL commands:</p><figure class="kg-card kg-code-card"><pre><code class="language-ruby">$ curl https://sheltered-escarpment-38193.herokuapp.com/freedom_quotes
[ ]

$ curl -X POST -d &apos;quote=buuaaa&apos; https://sheltered-escarpment-38193.herokuapp.com/freedom_quotes
{&quot;_id&quot;:{&quot;$oid&quot;:&quot;6084973cabb19d0004104cdc&quot;},&quot;quote&quot;:&quot;buuaaa&quot;}

$ curl -X GET https://sheltered-escarpment-38193.herokuapp.com/freedom_quotes/6084973cabb19d0004104cdc
{&quot;_id&quot;:{&quot;$oid&quot;:&quot;6084973cabb19d0004104cdc&quot;},&quot;quote&quot;:&quot;buuaaa&quot;}           

$ curl -X PATCH -d &apos;quote=@@@&apos; https://sheltered-escarpment-38193.herokuapp.com/freedom_quotes/6084973cabb19d0004104cdc
true

$ curl -X DELETE https://sheltered-escarpment-38193.herokuapp.com/freedom_quotes/6084973cabb19d0004104cdc

true

$ curl https://sheltered-escarpment-38193.herokuapp.com/freedom_quotes
[ ]</code></pre><figcaption>A user journey.</figcaption></figure><p>&#x1F3AE;&#x1F3B2;</p><p>Cool, you are back! Hope you played and tested to your full enjoyment!</p><!--kg-card-begin: html--><div class="alert error">
    We have built a public API so far. That&apos;s really kind, but obviously, anyone can now add and delete everything, so this will get crazy very soon.
    
    For the API version, we could add token-based authorization, so that only clients that you trust would be able to have write access.
    
    Later, when we add authentication for the web app, we will see how we can protect the endpoints on a per-user basis.
</div><!--kg-card-end: html--><p>Speaking of testing, before we wrap up this first version of our template, let&apos;s have some basic tests in place to prepare yourself for good engineering practices and maintainable code right away.</p><h2 id="4-set-up-tests">4. Set up tests</h2><p>Tests might let you feel like you slow down in the beginning, but they are speeding you up in the long term and make your overall design better. Sold &#x1F911;</p><h3 id="install-test-environment">Install test environment</h3><p>As always, adding some gems...</p><pre><code class="language-ruby"># Gemfile

[... more gems ...]

gem &apos;rack-test&apos;
gem &apos;minitest&apos;</code></pre><p>... and installing them...</p><pre><code class="language-shell">$ bundle install</code></pre><h3 id="connect-to-the-test-database">Connect to the test database</h3><p>We need a different database for our tests. A database that we can fill and wipe as we desire on every test run. So we need to add another configuration to our <code>mongoid.yml</code>:</p><pre><code class="language-yaml"># mongoid.yml

[... development config ...]

test:
  clients:
    default:
      database: freedom_stack_test
      hosts:
        - localhost:27017
      options:
        server_selection_timeout: 1

[... production config ...]</code></pre><p>It&apos;s exactly the same config as for <code>development</code>, just with the database name changed to <code>freedom_stack_test</code>. </p><h3 id="unit-tests">Unit tests</h3><p>There is not much complex unit logic to be tested, we will focus on blunt integration tests that make sure our API does everything it is supposed to be doing between our requests and the communication with MongoDB.</p><h3 id="add-integration-tests">Add integration tests</h3><p>Let&apos;s create a file called <code>app_test.rb</code>. We need to include a bunch of stuff first before we can start testing.</p><p>Let&apos;s define our environment first, otherwise, Sinatra will always assume the &apos;development&apos; environment. </p><pre><code class="language-ruby"># app_test.rb

ENV[&apos;APP_ENV&apos;] = &apos;test&apos;</code></pre><p>Now, a few more things. Firstly, we <strong>require our <code>app.rb</code></strong> to get all the routes and classes that we&apos;ve defined there.</p><pre><code class="language-ruby"># app_test.rb

ENV[&apos;APP_ENV&apos;] = &apos;test&apos;

require &apos;./app.rb&apos;</code></pre><p>Next, we need the gems that will make all the testing functionality possible.</p><pre><code class="language-ruby"># app_test.rb

ENV[&apos;APP_ENV&apos;] = &apos;test&apos;

require &apos;./app.rb&apos;
# Test gems.
require &apos;minitest/autorun&apos;
require &apos;minitest/pride&apos;
require &apos;rack/test&apos;</code></pre><p>And then we finish the setup by connecting to our mongo instance. Since we have defined <code>ENV[&apos;APP_ENV&apos;] = &apos;test&apos;</code> for our environment, Mongoid will connect to the <code>test</code> configurations from the <code>mongoid.yml</code>.</p><pre><code class="language-ruby"># app_test.rb

ENV[&apos;APP_ENV&apos;] = &apos;test&apos;

require &apos;./app.rb&apos;
# Test gems.
require &apos;minitest/autorun&apos;
require &apos;minitest/pride&apos;
require &apos;rack/test&apos;
# Database stuff.
require &apos;mongoid&apos;
project_root = File.dirname(__FILE__)
Mongoid.load!(File.join(project_root, &apos;mongoid.yml&apos;))</code></pre><p>That&apos;s it. Now we build our test class <code>AppTest</code>. It inherits from <code>Minitest::Test</code> to have all the assertion methods like <code>assert_equal</code>. We <code>include Rack::Test::Methods</code> to have the typical methods of a rack application ( <code>get</code>, <code>post</code>, <code>last_response</code> etc.). <code>def app</code> needs to be defined so that <code>rack/test</code> knows how to start your app.</p><pre><code class="language-ruby"># app_test.rb

ENV[&apos;APP_ENV&apos;] = &apos;test&apos;

require &apos;./app.rb&apos;
# Test gems.
require &apos;minitest/autorun&apos;
require &apos;minitest/pride&apos;
require &apos;rack/test&apos;
# Database stuff.
require &apos;mongoid&apos;
project_root = File.dirname(__FILE__)
Mongoid.load!(File.join(project_root, &apos;mongoid.yml&apos;))

class AppTest &lt; Minitest::Test
  include Rack::Test::Methods

  def app
    Sinatra::Application
  end
end</code></pre><p>Puh, this was quite some preparation, but now we can add a simple test, to test our simple <code>/freedom</code> route.</p><pre><code class="language-ruby"># app_test.rb

[... lots of setup ...]

class AppTest &lt; Minitest::Test
  include Rack::Test::Methods

  def app
    Sinatra::Application
  end

  def test_gandhi_about_freedom
    get &apos;/freedom&apos;
    assert last_response.ok?
    assert_match /freedom(.*)Gandhi/, last_response.body
  end
end</code></pre><p>Now let&apos;s run this thing:</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2021/04/image-10.png" class="kg-image" alt="[Part I] Ruby Freedom Stack Web App - Sinatra - MongoDB - Heroku - Minitest" loading="lazy" width="760" height="344"><figcaption>Requiring <code>minitest/pride</code> brings some color into the game.</figcaption></figure><p><code>bundle exec</code> makes sure that we actually run the tests with all the exact versions installed for this particular project by bundler.</p><p>Let&apos;s check what happens if we run a test against our empty <code>freedom_stack_test</code> database calling the GET <code>/freedom_quotes</code> route:</p><figure class="kg-card kg-code-card"><pre><code class="language-ruby"># app_test.rb

[... lots of setup ...]

class AppTest &lt; Minitest::Test
  include Rack::Test::Methods

  def app
    Sinatra::Application
  end

  def test_gandhi_about_freedom
    get &apos;/freedom&apos;
    assert last_response.ok?
    assert_match /freedom(.*)Gandhi/, last_response.body
  end
  
  def test_returns_empty_array_when_no_quotes
    get &apos;/freedom_quotes&apos;
    assert last_response.ok?
    assert_equal &apos;[]&apos;, last_response.body
  end
end</code></pre><figcaption>This works too!</figcaption></figure><p>Now, when we start adding users, we need to make sure that the database is wiped after every test run to ensure consistency in the tests. That&apos;s where <code>Mongoid.purge!</code> gets handy. Adding it along with a test that tests our POST <code>/freedom_quotes</code> route:</p><figure class="kg-card kg-code-card"><pre><code class="language-ruby"># app_test.rb

[... lots of setup ...]

class AppTest &lt; Minitest::Test
  include Rack::Test::Methods

  def app
    Sinatra::Application
  end
  
  def teardown
    Mongoid.purge!
  end

[... some freedom tests ...]

  def test_post_new_freedom_quote
    get &apos;freedom_quotes&apos;
    assert_equal 0, JSON.parse(last_response.body).count

    quote = &apos;In Freedom we trust.&apos;
    post &apos;/freedom_quotes&apos;, { quote: quote }
    assert last_response.ok?

    get &apos;freedom_quotes&apos;
    assert_equal 1, JSON.parse(last_response.body).count
    assert_equal quote, JSON.parse(last_response.body).first[&apos;quote&apos;]
  end

[... much more freedom tests ...]
</code></pre><figcaption>Awesome!</figcaption></figure><p>This is not a tutorial about testing, so I won&apos;t go into details, but I promise that I&apos;ve tested some more which you can check out in the <code>app_test.rb</code> file in the <a href="https://github.com/RichStone/ruby-freedom-API-stack-sinatra-mongodb-heroku">GitHub repo</a> if you are interested.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2021/05/image-7.png" class="kg-image" alt="[Part I] Ruby Freedom Stack Web App - Sinatra - MongoDB - Heroku - Minitest" loading="lazy" width="725" height="108"><figcaption><code>$ bundle exec ruby app_test.rb</code></figcaption></figure><h3 id="acceptance-or-end-to-end-tests">Acceptance or end-to-end tests</h3><p>Missing end-to-end or acceptance tests? As soon as we get our hands on the UI, we will add some cool gems for that and set everything up.</p><p>Other than that, we are done setting up the tests! Feels good, doesn&apos;t it?</p><h2 id="%E2%9C%85-mini-api-backend-template-done">&#x2705; Mini API Backend Template Done</h2><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2021/04/image-11.png" class="kg-image" alt="[Part I] Ruby Freedom Stack Web App - Sinatra - MongoDB - Heroku - Minitest" loading="lazy" width="499" height="325"><figcaption>We have come a long way.</figcaption></figure><p>The awesome thing is, you can now use this for any API application that you are about to kickstart. Your API idea might not need a <code>FreedomQuote</code> model, but you can rename it to whatever you like and there you go! &#x1F5FD;&#x1F680;</p><p>If you can&apos;t wait to bring your API or mini-backend idea to life, here&apos;s the link to the repo: <a href="https://github.com/RichStone/ruby-freedom-API-stack-sinatra-mongodb-heroku">github.com/RichStone/freedom-API-template</a>.</p><h3 id="how-to-reuse-the-freedom-stack-api-template">How to reuse the Freedom Stack API template?</h3><p>Check out <a href="https://github.com/RichStone/ruby-freedom-API-stack-sinatra-mongodb-heroku">github.com/RichStone/freedom-API-template</a>, it&apos;s the technical source of truth to get you started. But in short, less technical terms:</p><ol><li>Clone the template</li><li>Setup MongoDB locally or remotely</li><li>Run the tests</li><li>Replace <code>/freedom_quotes</code> with your own API idea</li><li>Change and rerun the tests</li><li>Add other routes and return more cool data</li><li>Write tests ;)</li><li>Push to your repo</li><li>Host on your Heroku</li><li>(optional) Host on your own domain</li></ol><h2 id="nutshell-%F0%9F%A5%9C">Nutshell &#x1F95C;</h2><p>We&apos;ve built a lightweight web app and a bare API backend to get us started. We probably learned a thing or 2 on the way. We have a rough orientation of how to go about developing the templates. What could possibly go wrong?</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2021/04/Screenshot-from-2021-04-25-00-37-00.png" class="kg-image" alt="[Part I] Ruby Freedom Stack Web App - Sinatra - MongoDB - Heroku - Minitest" loading="lazy" width="297" height="286"><figcaption><a href="https://t.me/addstickers/DinDino">Din the Dino</a>.</figcaption></figure><p>I could have lost some semicolons somewhere. Let me know if you are the lucky one to find them, I will really appreciate any feedback to improve this guide. I&apos;m also here to help if any roadblocks come up or if you have any thoughts regarding the templates. </p><p>Hope this gives you some freedom to start something new or at least to have a bit of fun!</p><p>Keep tuned to see the tutorial unfold into the creation of a real web app with OAuth, route authorization, and a Bulma CSS UI in a different post &#x1F49A;</p>]]></content:encoded></item><item><title><![CDATA[Junior Success Story - Ricardo DevOps Engineer]]></title><description><![CDATA[Ricardo got in touch with me because was on his way to be a part of the Software Engineering world. He didn't have a big portfolio of hard assets yet...]]></description><link>https://richstone.io/junior-success-story-ricardo-devops-engineer/</link><guid isPermaLink="false">607b4fb4334d360001275f7c</guid><category><![CDATA[Success Stories]]></category><dc:creator><![CDATA[Rich Steinmetz]]></dc:creator><pubDate>Sun, 18 Apr 2021 16:30:14 GMT</pubDate><media:content url="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2021/04/ricardo-devops-engineer-header-1.PNG" medium="image"/><content:encoded><![CDATA[<img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2021/04/ricardo-devops-engineer-header-1.PNG" alt="Junior Success Story - Ricardo DevOps Engineer"><p>Ricardo got in touch with me because he was on a path to join the Software Engineering world. I had a very positive &quot;prognosis&quot; for him after our first meetup. He didn&apos;t have a big portfolio of polished hard assets yet. But he did have an active GitHub with projects, an AWS Developer Associate certification, and a whole bunch of &quot;soft assets&quot;. </p><p>In <a href="https://richstone.io/your-hidden-assets-to-get-your-first-developer-job/">my article about your hidden career assets</a>, I describe soft assets (<strong>Motivation</strong>, <strong>Background</strong>, <strong>Activity</strong>, <strong>Personality</strong>, <strong>Communication</strong>, <strong>Luck</strong>) which anyone has to some degree apart from technical skill and portfolio projects. Let&apos;s see how it mapped out in Ricardo&apos;s case.</p><hr><p>Ricardo was highly <strong>Motivated</strong>. He was bursting with energy when he talked about getting into DevOps or Cloud Engineering (or full-stack web development if anything else goes wrong). One of his big drivers was the ability to create more with the software superpowers.<br><br>One thing that made me confident about his endeavor was his engineering <strong>Background</strong> already. Having a degree and work experience in energy engineering definitely gives you some edge. I still was worried a bit that most established companies pay too much attention to official statuses (like a university degree, or &quot;at least&quot; a Bootcamp degree) and suggested to peek at potential bootcamps and some other things to boost his credibility. </p><p>Additionally, I wasn&apos;t sure if there would be enough options for DevOps junior positions, but I thought it was better to focus on this position for the moment, since &quot;Cloud Engineers&quot; are less of a popular terminology in job ads and web developer was more like a last resort idea anyway...</p><p>Apparently, there were ways to overcome those obstacles.<br><br>There&apos;s quite some <strong>Activity</strong> on the <a href="https://github.com/Richardbmk">Ricardo/GitHub</a> if you&apos;d like to check it out. Exploring the Cloud and full-stack experiments is the leitmotif of this GitHub space. All of this was accompanied by an updated LinkedIn profile and well-designed portfolio pages including a blog to solidify his learnings. Lastly, Ricardo reached out to potential mentors and employers to gain additional visibility and get clear in his focus. </p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2021/04/image-2.png" class="kg-image" alt="Junior Success Story - Ricardo DevOps Engineer" loading="lazy" width="1341" height="943"><figcaption>Activity creates Visibility.</figcaption></figure><p>In the end, the open-minded <strong>Personality</strong> and very responsive clear-to-the-point <strong>Communication</strong> skills brought all of this home, I think. </p><p>Passing all the technical tests and interviews wasn&apos;t a cakewalk either, but all the projects and all the learning have now paid out. Finally, there were 2 offers from the last application offensive &#x1F680;</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2021/04/image-1.png" class="kg-image" alt="Junior Success Story - Ricardo DevOps Engineer" loading="lazy" width="1266" height="957"><figcaption>Another Gopher successfully shot over the Cloud &#x1F680; (<a href="https://github.com/MariaLetta/free-gophers-pack">more awesome Gophers</a>)</figcaption></figure><p>I find this story particularly interesting because this was basically a one-man effort over the course of a year. We had just a few chats when he asked me for advice but it was enough to bring some clarity and, as he put it, &quot;bring some momentum&quot; into the whole undertaking.</p><p>Yes, I had some doubts regarding the degree situation and the job market but I was sure that victory was unavoidable by continuing to work on the hard assets and applying to companies. Being consistent in that, Ricardo forced his <strong>Luck</strong> rather earlier than later. Chapeau!</p><p>I think that there&apos;s a lot of potential to level up for him within the next 1-2 if he is willing to continue the grind. I&apos;ll be updating this story here or post a new one when the time has come, so keep tuned :)</p>]]></content:encoded></item><item><title><![CDATA[How to start learning Ruby? (timeless resources and techniques)]]></title><description><![CDATA[It's a very short compilation of the resources I found most useful when I started to learn Ruby a year ago. Use them to start, continue, and get unstuck!]]></description><link>https://richstone.io/how-to-learn-ruby-timeless-resources-and-techniques/</link><guid isPermaLink="false">606ef5bd334d360001275b88</guid><category><![CDATA[Ruby]]></category><dc:creator><![CDATA[Rich Steinmetz]]></dc:creator><pubDate>Sat, 10 Apr 2021 17:12:10 GMT</pubDate><media:content url="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2021/04/how-start-learning-ruby.PNG" medium="image"/><content:encoded><![CDATA[<img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2021/04/how-start-learning-ruby.PNG" alt="How to start learning Ruby? (timeless resources and techniques)"><p>You learn Ruby by writing Ruby. It all starts with getting your hands dirty, over and over again. Accompany your dirty hands with some good theoretical stuff and you are good to go. Here I present 4 crucial points to get started:</p><ol><li>Unit Exploration</li><li>Integration Exploration</li><li>Resources for learning &amp; creating</li><li>A process to get unstuck </li></ol><p>Then at the end, I make a suggestion on how you could combine those points into your own curriculum to learn Ruby. </p><p>It&apos;s a very short compilation of the resources I found most useful when I started to learn Ruby a year ago. I see them over and over again as suggestions to people switching to Ruby or being completely new to it. I kept the number of resources very short because I know that you already have enough decisions to make in your life.</p><p>This is not a suggestion on how to learn Rails. This would be a bit more of a different post. It&apos;d be cool if you dig into Ruby a bit and write some small projects from A to Z before getting into Rails. Once you&apos;ve done that let me know and we will spin up a &quot;How to start learning Ruby on Rails?&quot; post ;)</p><h2 id="1-unit-exploration-with-irb">1. Unit Exploration with IRB</h2><p>I pop-open the IRB (Interactive RuBy) shell all the time. Here you can play around with the syntax, inspect the environment around you, and run Ruby meta-commands. Every learning process starts with curiosity, experimentation, and exploration. Whenever you read or think something interesting, spin up an IRB and try it out!</p><figure class="kg-card kg-image-card kg-width-wide kg-card-hascaption"><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2021/04/first-step-to-understand-ruby.PNG" class="kg-image" alt="How to start learning Ruby? (timeless resources and techniques)" loading="lazy" width="2048" height="2048"><figcaption>Just a few cool things.</figcaption></figure><h2 id="2-integration-exploration-with-scripts">2. Integration Exploration with Scripts</h2><p>IRB is great when you learn and experiment and inspect things. But it&apos;s not so great for writing coherent pieces of code. Whenever you&apos;d like to see how things play together write a script.</p><p>In Ruby, you&apos;ve written a class and a few modules faster than you can say</p><figure class="kg-card kg-code-card"><pre><code>Investitionsverwaltungsentwicklungsgesellschaft</code></pre><figcaption>An everyday German word.</figcaption></figure><pre><code class="language-ruby"># script.rb
module WordCounter
  def char_count
    word.size
  end
end

class Word
  include WordCounter
  
  attr_accessor :word
  
  def initialize(word)
    self.word = word
  end
end

word = Word.new(&apos;Investitionsverwaltungsentwicklungsgesellschaft&apos;)
puts(&quot;A normal German word has around #{word.char_count} characters &#x1F937;&quot;)</code></pre><p>And you&apos;ve run your script faster than you can say blink:</p><pre><code class="language-ruby">~ ruby script.rb
A normal German word has around 47 characters &#x1F937;</code></pre><p>And then, you can also load your script into IRB and play around with the classes and objects:</p><figure class="kg-card kg-code-card"><pre><code class="language-ruby">~ irb
irb&gt; load &apos;~/script.rb&apos;
A normal German word has around 47 characters &#x1F937;
=&gt; true
irb&gt; Word.ancestors
=&gt; [Word, WordCounter, Object, Kernel, BasicObject]</code></pre><figcaption>Your Word class is now available inside IRB, so play around with it!</figcaption></figure><p>The point is, you can experiment with a larger part of the language with a script. If IRB could be used to explore and inspect single Units, then scripts could empower you to do Integration Exploration.</p><p>You can also use a similar approach by writing tests for your Ruby files or web applications. Integration at its finest.</p><h2 id="3-accompany-your-learning-with-resources">3. Accompany your Learning with Resources</h2><p>Of course, you need inspiration and reasons for spinning up IRB or creating scripts. That&apos;s where resources jump in.</p><p>There are 2 types of resources:</p><ol><li>Resources that someone else created for you to learn</li><li>Resources that you create while learning</li></ol><p>Below are my personal opinionated preferences but I still think you will find them useful when you follow along. However, if you don&apos;t like any of those, maybe it&apos;s not worth sticking with them. Then just go to the next one or initiate your own research. There is tons of great material out there!</p><p>The resources presented here exist each for at least about 5-10 years already and they still will be useful for learning Ruby 3+ in the next 10 years or so (yes, that&apos;s a tough bet but I&apos;m taking the risk &#x1F0A1;&#x1F0A2; cause it&apos;s suited).</p><h3 id="resources-for-everyone">Resources for everyone</h3><p>No matter your developer experience level, you&apos;ll find this useful...</p><p><strong>Chats and Forums</strong></p><p>The ruby community is really outstanding. Having been active in the Java, Python, and JS communities, I have something to compare. The Ruby community is really something :))</p><ul><li><a href="https://www.rubyonrails.link/">https://www.rubyonrails.link/</a></li><li><a href="https://discord.gg/H7bfQUEWRm">https://discord.gg/H7bfQUEWRm</a></li><li><a href="https://www.reddit.com/r/ruby/">https://www.reddit.com/r/ruby/</a></li></ul><p>Each community has its rules and guidelines. Get a feeling for them and participate!</p><p><strong>Build toy and real applications</strong> </p><p>Find a tutorial that resembles your idea or something that you would really like to work at and follow along. If you feel confident, try to use the tutorial to actually build your own idea.</p><p><strong>Work on your favorite open source project</strong> </p><p>I&apos;m not too deep into the open-source world, but projects you can start contributing to right now independent of your experience level: exercism.io and ruby for good. <a href="https://github.com/codenamev/knowledge-baby/tree/master/Contributing%20To%20Open%20Source">Here&apos;s a useful compilation of everything open-source in Ruby</a>.</p><p><strong>Videos</strong></p><p>Some Rubyists explain things in video form which can be a really helpful alternation for your learning muscles: </p><ul><li>DriftingRuby</li><li>GoRails</li><li>RubyTapas</li><li>YouTube (duh)</li></ul><p>Watch whatever is relevant for your current task at hand or take a course that psyches you out.</p><h3 id="resources-for-learning-ruby-as-a-total-beginner">Resources for learning Ruby as a total beginner</h3><p>Ruby resources for total beginners are rarer than those for people who already have their feet wet. I didn&apos;t start learning Ruby as a total beginner, but here are the things I see referenced all the time for being a great resource:</p><p>&#x1F468;&#x200D;&#x1F3EB; <a href="https://www.codecademy.com/catalog/language/ruby"><strong>codecademy</strong></a> - always a great interactive primer for any programming language</p><p>&#x1F4D5; <a href="https://www.learnenough.com/ruby-tutorial"><strong>Learn Enough</strong></a> - to get you started with Ruby more softly, then you should checkout Hartl&apos;s Rails tutorial if you want to dig into web apps</p><p>&#x1F4D6; <a href="https://learncodethehardway.org/ruby/"><strong>Learn Ruby The Hard Way</strong></a> (Book, videos, email support) - a step by step guide that kicks your ass if you prefer that style ;)</p><h3 id="bootcamps">Bootcamps</h3><p>Bootcamps have great materials to get you off the ground from 0 to the more advanced lands of Ruby and Rails. Check out these free bootcamps:</p><p>&#x1F32C; <a href="https://www.theodinproject.com/paths/full-stack-ruby-on-rails/courses/ruby"><strong>The Odin Project</strong></a><strong> </strong>- Great open-source materials and community</p><p><strong>&#x1F469;&#x200D;&#x1F393; <a href="https://open.appacademy.io/learn/full-stack-online/ruby/setting-up-a-development-environment--phase-1-">AppAcademy</a></strong> - High-quality Bootcamp material for free</p><h3 id="resources-for-learning-ruby-as-an-experienced-developer">Resources for learning Ruby as an experienced developer</h3><p>&#x1F468;&#x200D;&#x1F3EB; <strong>exercism.io</strong> - You will love it for learning to write idiomatic Ruby in direct conversation and a mentoring relationship with other developers</p><p>&#x1F9D8; <strong>rubykoans</strong> - unlock the koans by writing tests while learning Ruby concepts </p><p>&#x1F4D6; <strong>books</strong> - Eloquent Ruby or Well-grounded Rubyist (if you have more time) and Ruby Under a Microscope to get deep into the internals</p><h2 id="4-have-a-process-to-get-unstuck">4. Have a process to get unstuck</h2><p>With the tools above you are well-prepared to max out on your learning by getting out of your comfort zone and building something new, maybe even something extraordinary. In other words, you are well-prepared to get stuck ;)</p><p>Getting stuck can be scary. You could start to question your intelligence and the purpose of life. Before doing that, though, try this process in this particular order to get yourself unstuck. If this doesn&apos;t help, let me know! (I hope to hear from 0 people about this, but I&apos;m up for the challenge &#x2694;)</p><p><strong>a) Think and dissect</strong></p><ul><li>Inspect what&apos;s happening (e.g. IRB), try to understand all the inputs and outputs</li><li>Isolate the moving parts into their own methods and write tests for how you expect it to work</li><li>Redo everything step by step since the last time that it worked well</li><li><strong><a href="https://en.wikipedia.org/wiki/Rubber_duck_debugging">Rubber duck</a></strong></li></ul><p><strong>b) Search</strong></p><p>Probably you&apos;ll have googled it for a bit already by this point in time, but try to phrase it differently. Also try to look for the issue directly in StackOverflow or on Reddit.</p><p><strong>c) Videos</strong></p><p>In the video hubs, that I mentioned above, search for the topic that could offer the solution if you understood it better.</p><p><strong>d) Ask</strong></p><p>I wouldn&apos;t have made it into programming without other people. Ruby has a wonderful community of developers who do just that: help other people. As your last resort, now that you explored all the possibilities of your current challenge, you can explain it in detail in one of the communities above. If your issue is general enough, consider posting it on StackOverflow or Reddit.</p><h2 id="your-getting-started-curriculum">Your getting-started curriculum</h2><p>Whatever you decide from this list: Pick something and make a weekly plan of how you&apos;ll go about it. </p><p>Don&apos;t be rigid about what you want to finish on which deadline but rather block time to work on the stuff and give yourself time to understand things. That&apos;s certainly one of my weaknesses: I want to get stuff done quickly and move on to the next thing, but I am often reminded that deep understanding goes a long way when I dig deeper into something or write about it.</p><p>Pick a combination of things if time allows for it. For example, if you do some coding challenges, ask for feedback somewhere (exercism.io or in communities). While you are waiting for the feedback, create something with your own project or tutorial. Then before bed read a chapter from a Ruby book. All those things will reinforce each other and you will inevitably build rubynian pathways in your brain.</p><p>And don&apos;t forget to spin up the magic IRB shell, tests, and scripts to play around with things that you find noticeable and to break them along the way (better break them in IRB before they sneak as nasty bugs into your apps ;)</p>]]></content:encoded></item><item><title><![CDATA[How to understand JavaScript?]]></title><description><![CDATA[There is no way around acquiring knowledge about JavaScript and gaining experience in writing it.
However, the more you think, eat, and sleep JavaScript...]]></description><link>https://richstone.io/how-to-understand-javascript/</link><guid isPermaLink="false">606ef2a4334d360001275b64</guid><category><![CDATA[JavaScript]]></category><dc:creator><![CDATA[Rich Steinmetz]]></dc:creator><pubDate>Fri, 09 Apr 2021 11:35:42 GMT</pubDate><media:content url="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2021/04/first-step-to-understand-javascript-header.PNG" medium="image"/><content:encoded><![CDATA[<img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2021/04/first-step-to-understand-javascript-header.PNG" alt="How to understand JavaScript?"><p>There is no way around acquiring knowledge about JavaScript and gaining experience in writing it.</p><p>However, the more you think, eat, and sleep JavaScript the faster you will see an improved understanding. One thing you should do early on the technical side:</p><blockquote>Whenever you read something about JS, spin up a console and try it out.</blockquote><figure class="kg-card kg-image-card kg-width-wide"><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/xhtzjbw/2021/04/first-step-to-understand-javascript.PNG" class="kg-image" alt="How to understand JavaScript?" loading="lazy" width="1275" height="956"></figure>]]></content:encoded></item></channel></rss>