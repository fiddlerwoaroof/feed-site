<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title><![CDATA[null]]></title><description><![CDATA[null]]></description><link>https://blog.driftingruby.com/</link><image><url>https://blog.driftingruby.com/favicon.png</url><title>null</title><link>https://blog.driftingruby.com/</link></image><generator>Ghost 5.8</generator><lastBuildDate>Thu, 17 Nov 2022 13:03:03 GMT</lastBuildDate><atom:link href="https://blog.driftingruby.com/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Docker Builds are slow on M1]]></title><description><![CDATA[<p>This is a neat Docker trick for those who have an ARM development machine (Apple M1), but sometimes need to build x86/amd64 images locally to push up to a registry. </p><p>Sure, having a CI/CD platform to do this is probably ideal, but for little programs or just sometimes</p>]]></description><link>https://blog.driftingruby.com/docker-builds/</link><guid isPermaLink="false">626c9cce92b4b104b4ccc12b</guid><category><![CDATA[development]]></category><category><![CDATA[docker]]></category><dc:creator><![CDATA[Dave Kimura]]></dc:creator><pubDate>Sun, 10 Apr 2022 02:39:00 GMT</pubDate><media:content url="https://blog.driftingruby.com/content/images/2022/04/docker-1.jpg" medium="image"/><content:encoded><![CDATA[<img src="https://blog.driftingruby.com/content/images/2022/04/docker-1.jpg" alt="Docker Builds are slow on M1"><p>This is a neat Docker trick for those who have an ARM development machine (Apple M1), but sometimes need to build x86/amd64 images locally to push up to a registry. </p><p>Sure, having a CI/CD platform to do this is probably ideal, but for little programs or just sometimes in general, it may be handy to know this. </p><p>If you have a spare Intel machine laying around, you can turn it into a build server. Get something like <a href="https://docs.docker.com/engine/install/ubuntu/">Ubuntu installed</a> on there and install the latest Docker. On your development machine, <a href="https://www.ssh.com/academy/ssh/copy-id">copy your publish SSH key over to this build server.</a></p><p>So now you you have your server set up and you want to build your Docker image for an x86/amd64 platform. Typically, you would run a command like this below to target the platform.</p><!--kg-card-begin: markdown--><pre><code>docker buildx build -f Dockerfile --platform linux/amd64 .
</code></pre>
<!--kg-card-end: markdown--><p>And this will work, but what you&apos;ll notice is that this is an extremely slow process. The Apple Silicon chips are amazing and are the fastest machines I&apos;ve ever used. However, when emulating the x86 instructions to build a docker image, it takes such a long time. I&apos;ve seen this take over an hour on larger and more complex projects.</p><p>Just as an example. Here we have a very simple Ruby on Rails application that has little moving parts. I&apos;m using things like <code>esbuild</code> and <code>css-bundling</code>, but nothing fancy. On the M1 chip, it took over 250 seconds to build the image.</p><!--kg-card-begin: markdown--><pre><code># Apple Silicon
[+] Building 316.4s (23/23) FINISHED
</code></pre>
<!--kg-card-end: markdown--><p>However, on a AMD 5900X server, I have a Virtual Machine running on there which has Docker installed. Running the exact same project on there took much less time.</p><!--kg-card-begin: markdown--><pre><code># AMD 5900X
[+] Building 62.3s (24/24) FINISHED
</code></pre>
<!--kg-card-end: markdown--><p>So, the main concern here is that I do not want to interrupt my normal process on how I build images or handle things. It would be a pain to push up my code, ssh into the build server, pull it down, and then build the image. This is a lot of steps, but luckily there is a MUCH easier way to do this.</p><p>Docker&apos;s buildx build command has a flag that we can specify a specific builder.</p><p>So, we can create this builder on our local machine. The nice part about this creation is that it is idempotent, so you can run this command many times without changing the result. All we have to do is to create a builder profile and in this case I have named it <code>amd64_builder</code>. &#xA0;Since this builder is a pool of resources, I give a name to for the VM. I&apos;m also specifying the platform that I&apos;m building against and then pass in the SSH url for my builder machine.</p><!--kg-card-begin: markdown--><pre><code>docker buildx create \
  --name amd64_builder \
  --node linux_amd64_builder \
  --platform linux/amd64 \
  ssh://USERNAME@IP_ADDRESS_OF_BUILDER
</code></pre>
<!--kg-card-end: markdown--><p>Now, I can build and push the image to the registry. The magical flag that we&apos;ll use is <code>--builder</code> as we can now specify the builder VM. The rest of the buildx command is the same as we would expect.</p><!--kg-card-begin: markdown--><pre><code>docker buildx build \
  --builder amd64_builder \
  --tag USERNAME/REPONAME:TAG \
  --push .
</code></pre>
<!--kg-card-end: markdown--><p>In some cases, I&apos;ve seen this go almost 10x faster than the amd64 emulation on the M1 chip. If you have a spare Intel/AMD machine laying around, this may be a worthwhile adventure.</p>]]></content:encoded></item><item><title><![CDATA[Transferring Files]]></title><description><![CDATA[<p>Sometimes we get into situations where we need to remotely transfer a file. This file could be large or it could be tiny. This file may be sensitive or could be of little importance. Regardless, sending this file over to a remote location could still have its challenges. What if</p>]]></description><link>https://blog.driftingruby.com/transferring-files/</link><guid isPermaLink="false">6250169d92b4b104b4ccc0d9</guid><dc:creator><![CDATA[Dave Kimura]]></dc:creator><pubDate>Fri, 08 Apr 2022 11:21:16 GMT</pubDate><media:content url="https://blog.driftingruby.com/content/images/2022/04/transferring-files.jpg" medium="image"/><content:encoded><![CDATA[<img src="https://blog.driftingruby.com/content/images/2022/04/transferring-files.jpg" alt="Transferring Files"><p>Sometimes we get into situations where we need to remotely transfer a file. This file could be large or it could be tiny. This file may be sensitive or could be of little importance. Regardless, sending this file over to a remote location could still have its challenges. What if the file is coming from a headless server? Perhaps you have some logs that you want to inspect on your local machine instead of parsing through them remotely in an ssh session. This is where <a href="https://magic-wormhole.readthedocs.io">magic-wormhole</a> comes into play.</p><h2 id="installation">Installation</h2><h3 id="macos">macOS</h3><p><code>brew install magic-wormhole</code></p><h3 id="linux-debianubuntu">Linux (Debian/Ubuntu)</h3><p><code>sudo apt install magic-wormhole</code></p><h2 id="usage">Usage</h2><p>To send a file, you simply use the wormhole command and specify which file you wish to send.</p><!--kg-card-begin: markdown--><pre><code>&#x279C;  ~ wormhole send server.log
Sending 1.1 GB file named &apos;server.log&apos;
Wormhole code is: 5-hydraulic-snowslide
On the other computer, please run:

wormhole receive 5-hydraulic-snowslide
</code></pre>
<!--kg-card-end: markdown--><p>Now that we have specified which file we want to send, we&apos;ve been provided with a &quot;wormhole code&quot; that we can use on the receiving end.</p><!--kg-card-begin: markdown--><pre><code>wormhole receive 5-hydraulic-snowslide
</code></pre>
<!--kg-card-end: markdown--><p>And that&apos;s all we have to do! On the receiving computer, we&apos;ve downloaded the requested file! In the past, I would have used <code>scp</code> or <code>ftp</code> but remembering the syntax, while isn&apos;t too difficult, can prove to be challenging at times especially if nonstandard ports are used or if ports aren&apos;t opened up on the firewall to make the connection.</p><!--kg-card-begin: markdown--><pre><code>&#x279C;  ~ wormhole receive 5-hydraulic-snowslide
Receiving file (1.1 GB) into: server.log
ok? (y/N): y
Receiving (-&gt;tcp:some-external-ip:65250)..
 80%|&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x258F;               | 859M/1.07G [00:04&lt;00:01, 206MB/s]
</code></pre>
<!--kg-card-end: markdown-->]]></content:encoded></item><item><title><![CDATA[Let's Encrypt Wildcard Cert]]></title><description><![CDATA[<p>I&apos;m writing this more as documentation for myself as I have several domains which I often use as playgrounds for certain things. This could be a kubernetes environment or a docker cluster where I have several applications deployed, but don&apos;t want to set up an nginx</p>]]></description><link>https://blog.driftingruby.com/lets-encrypt-wildcard-cert/</link><guid isPermaLink="false">6023e851d719b1963d8d9d43</guid><category><![CDATA[server]]></category><dc:creator><![CDATA[Dave Kimura]]></dc:creator><pubDate>Wed, 10 Feb 2021 14:29:39 GMT</pubDate><media:content url="https://blog.driftingruby.com/content/images/2021/02/PNG-image-90C9A493911C-1-1.png" medium="image"/><content:encoded><![CDATA[<img src="https://blog.driftingruby.com/content/images/2021/02/PNG-image-90C9A493911C-1-1.png" alt="Let&apos;s Encrypt Wildcard Cert"><p>I&apos;m writing this more as documentation for myself as I have several domains which I often use as playgrounds for certain things. This could be a kubernetes environment or a docker cluster where I have several applications deployed, but don&apos;t want to set up an nginx site for each one of the apps that I deploy.</p><p>Recently, I found out about Portainer for managing a docker environment. Think of this as a kubernetes-lite. This isn&apos;t good for any kind of production use case, but does have some benefits for at home management of a local docker instance.</p><figure class="kg-card kg-image-card"><img src="https://blog.driftingruby.com/content/images/2021/02/PNG-image-90C9A493911C-1.png" class="kg-image" alt="Let&apos;s Encrypt Wildcard Cert" loading="lazy" width="1841" height="1128" srcset="https://blog.driftingruby.com/content/images/size/w600/2021/02/PNG-image-90C9A493911C-1.png 600w, https://blog.driftingruby.com/content/images/size/w1000/2021/02/PNG-image-90C9A493911C-1.png 1000w, https://blog.driftingruby.com/content/images/size/w1600/2021/02/PNG-image-90C9A493911C-1.png 1600w, https://blog.driftingruby.com/content/images/2021/02/PNG-image-90C9A493911C-1.png 1841w" sizes="(min-width: 720px) 720px"></figure><p>So in this illustration, we have a request coming in on 443. This request could be using the domain name <code>c1.mydomain.com</code> and there could be another request coming in from <code>c2.mydomain.com</code>. </p><p>Previously, you would have a certificate for both subdomains and would need to set up the appropriate port forwarding for each subdomain to the appropriate server. This is a huge pain, so, instead, this is where a wildcard certificate can come in handy.</p><p>In this particular scenario, I have an nginx proxy which will be used to route all of the traffic coming in to my network. This is handy because I can use this reverse proxy for SSL termination and also routing the traffic to various servers based on the domain name. This doesn&apos;t have to be a powerful server. You could even use a Raspberry Pi to route this traffic. Again, this is for a home server and not really production grade.</p><p>You will need some prerequisites. And I also use CloudFlare&apos;s DNS for handling these wildcard domains. This is nice because certbot and cloudflare play pretty nicely to automatically verify the challenges via their API.</p><!--kg-card-begin: markdown--><pre><code>apt install certbot letsencrypt python3-certbot-dns-cloudflare
</code></pre>
<!--kg-card-end: markdown--><p>If you already have certbot and the necessary extensions installed, you can simply run this script to get a wildcard certificate. </p><!--kg-card-begin: markdown--><pre><code>sudo certbot certonly \
     --cert-name mydomain.com \
     --dns-cloudflare \
     --dns-cloudflare-credentials /etc/letsencrypt/cloudflareapi.cfg \
     --server https://acme-v02.api.letsencrypt.org/directory \
     -d &quot;*.mydomain.com&quot; \
     -d mydomain.com
</code></pre>
<!--kg-card-end: markdown--><p>So, now we can configure our nginx proxy to take any request from this domain and forward it over to my docker host.</p><!--kg-card-begin: markdown--><pre><code>server {
  server_name *.mydomain.com;
  server_name ~^(?&lt;subdomain&gt;.+)\.mydomain\.com$;
  add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot; always;
  # proxy_next_upstream error timeout http_502;
  location / {
    proxy_pass http://DOCKER_HOST_IP_ADDRESS;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    proxy_buffering off;
  }
  listen 443 ssl;
  ssl_certificate /etc/letsencrypt/live/mydomain.com/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/mydomain.com/privkey.pem;
  include /etc/letsencrypt/options-ssl-nginx.conf;
  ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
}

server {
  return 301 https://$host$request_uri;
  listen 80 ;
  listen [::]:80 ;
  server_name *.mydomain.com;
  server_name ~^(?&lt;subdomain&gt;.+)\.mydomain\.com$;
}
</code></pre>
<!--kg-card-end: markdown--><p>In another blog article, I&apos;ll describe how I set up the Docker host to take in these requests from the nginx server.</p>]]></content:encoded></item><item><title><![CDATA[Best Developer Tools Trick]]></title><description><![CDATA[<p>So to start, I am a Ruby person. I love Ruby and also Ruby on Rails. They are my language and framework of choice. However, like all things, over time the framework will evolve as well as the community.</p><p>With the evolution of Ruby on Rails over time, we have</p>]]></description><link>https://blog.driftingruby.com/best-developer-tools-trick/</link><guid isPermaLink="false">601d61fd45d993957239eaaa</guid><category><![CDATA[development]]></category><dc:creator><![CDATA[Dave Kimura]]></dc:creator><pubDate>Fri, 21 Feb 2020 05:00:00 GMT</pubDate><content:encoded><![CDATA[<p>So to start, I am a Ruby person. I love Ruby and also Ruby on Rails. They are my language and framework of choice. However, like all things, over time the framework will evolve as well as the community.</p><p>With the evolution of Ruby on Rails over time, we have seen more and more Javascript added into the mix. We have seen Javascript Front End Frameworks introduced and it paved an entirely different route for us. A route that I don&apos;t necessarily agree with, but regardless, we&apos;re using more Javascript today than we have ever before.</p><p>It wasn&apos;t until the addition of StimulusJS did I really start to dive deeper into Javascript. I believe that good practices and sticking as close to the Ruby on Rails core as possible will promote healthy and maintainable applications with as few resources as possible.</p><p>Regardless of the path that we choose, Javascript is here to stay (for now), so it is important to know about the tools that we have available to us. Much like <code>puts</code> debugging within Ruby, we have <code>console.log()</code> in Javascript. This will get us pretty far with debugging or building out something within Javascript. However, we get into situations where we are out of our window scope in Javascript and things get a bit more difficult.</p><p>Here in lies our best Developer Tool Trick, and I&apos;ve tested this with both Chrome and Firefox. So let&apos;s take a very simple Stimulus Controller where we have one target, and when it connects, we will log the target into our console so we can ensure it is registering properly.</p><pre><code class="language-javascript">import { Controller } from &quot;stimulus&quot;
export default class extends Controller {  
  static targets = [&quot;input&quot;]
  initialize() {  }
  connect() {
    console.log(this.inputTarget)
  }
  disconnect() { }
}</code></pre><p>So, when we open the Developer Tools, we will see the console with the logged input.</p><figure class="kg-card kg-image-card"><img src="https://blog.driftingruby.com/content/images/2021/02/image-15.png" class="kg-image" alt loading="lazy" width="638" height="114" srcset="https://blog.driftingruby.com/content/images/size/w600/2021/02/image-15.png 600w, https://blog.driftingruby.com/content/images/2021/02/image-15.png 638w"></figure><p>So everything looks like it is working well. On a very simple case like this, we may continue on coding. However, other times, on more complicated issues, we may want to interact with this object. However, this is where things get to be a bit more difficult. Do we try to grab the element on the page and then follow through our code and recreate what we&apos;re trying to do in the Stimulus Controller? On a simple example, this will work. However, if you&apos;re trying to use another Javascript library like Tribute, Choices-JS, FullCalendar, etc. it can be very difficult since we don&apos;t have access to these libraries in our global scope. Instead, we&apos;re importing these into our application within the Stimulus Controller.</p><p>So if you find yourself in one of these situations, continue to log to the console the object that you would like to interact with. Then RIGHT CLICK on the object in the console and select <code>Store as global variable</code></p><figure class="kg-card kg-image-card"><img src="https://blog.driftingruby.com/content/images/2021/02/image-16.png" class="kg-image" alt loading="lazy" width="640" height="245" srcset="https://blog.driftingruby.com/content/images/size/w600/2021/02/image-16.png 600w, https://blog.driftingruby.com/content/images/2021/02/image-16.png 640w"></figure><p>This will create a temporary variable of that object which will now allow you to interact with.</p><figure class="kg-card kg-image-card"><img src="https://blog.driftingruby.com/content/images/2021/02/image-17.png" class="kg-image" alt loading="lazy" width="640" height="275" srcset="https://blog.driftingruby.com/content/images/size/w600/2021/02/image-17.png 600w, https://blog.driftingruby.com/content/images/2021/02/image-17.png 640w"></figure><p>This feature has been around for a few years, but was one that I just happen to stumble upon the other day. It was completely changed the way I debug and approach problems within Javascript.</p><p>I hope that this serves as a reminder or a new trick in your toolset! Thanks for reading!<br></p>]]></content:encoded></item><item><title><![CDATA[Stickers!]]></title><description><![CDATA[<p>Stickers are now live on <a href="https://www.driftingruby.com/">Drifting Ruby</a>! You can <a href="https://www.driftingruby.com/profile">visit your account</a> or sign up for one to see what stickers are available. Stickers are a way for tracking progress throughout Drifting Ruby.</p><figure class="kg-card kg-image-card"><img src="https://blog.driftingruby.com/content/images/2021/02/image-14.png" class="kg-image" alt loading="lazy" width="640" height="521" srcset="https://blog.driftingruby.com/content/images/size/w600/2021/02/image-14.png 600w, https://blog.driftingruby.com/content/images/2021/02/image-14.png 640w"></figure><p>We will be adding various kinds of stickers in the future, but started off with some basic</p>]]></description><link>https://blog.driftingruby.com/stickers/</link><guid isPermaLink="false">601d61d145d993957239ea9d</guid><category><![CDATA[announcement]]></category><dc:creator><![CDATA[Dave Kimura]]></dc:creator><pubDate>Wed, 06 Mar 2019 05:00:00 GMT</pubDate><content:encoded><![CDATA[<p>Stickers are now live on <a href="https://www.driftingruby.com/">Drifting Ruby</a>! You can <a href="https://www.driftingruby.com/profile">visit your account</a> or sign up for one to see what stickers are available. Stickers are a way for tracking progress throughout Drifting Ruby.</p><figure class="kg-card kg-image-card"><img src="https://blog.driftingruby.com/content/images/2021/02/image-14.png" class="kg-image" alt loading="lazy" width="640" height="521" srcset="https://blog.driftingruby.com/content/images/size/w600/2021/02/image-14.png 600w, https://blog.driftingruby.com/content/images/2021/02/image-14.png 640w"></figure><p>We will be adding various kinds of stickers in the future, but started off with some basic ones. Any suggestions are welcome if you&apos;d like to see one added.</p><h2 id="why-stickers">Why Stickers?</h2><p>I&apos;ve always enjoyed playing games and sites that have this kind of functionality. One notable site is Stack Overflow with their Badges. Some time ago, I played World of Warcraft and they had Achievements. Working towards something was always fun and wanted to bring the same kind of fun to Drifting Ruby.</p><h2 id="why-the-name">Why the name?</h2><p>Many sites have this kind of functionality. They all coin their own naming of these kinds of &quot;badges&quot;. However, I wanted something unique and didn&apos;t like the term &quot;Achievements&quot;. Some other thoughts were Rewards, Trophies, However, some of these terms felt like some may find it as a false sense of accomplishment. So, after some time, we came up with Stickers. After all, who doesn&apos;t like stickers.</p>]]></content:encoded></item><item><title><![CDATA[Ruby on Rails 6.0 Beta 1 Deprecations]]></title><description><![CDATA[<p>About this time last year, I covered <a href="https://blog.driftingruby.com/ruby-on-rails-5-2-0-deprecations/">Ruby on Rails 5.2 Deprecations</a> and got lots of appreciative feedback. With the upcoming next major update of Ruby on Rails, I&apos;d figure that I would do a new article and make it a tradition.</p><p>NOTE: Ruby on Rails 6.</p>]]></description><link>https://blog.driftingruby.com/ruby-on-rails-6-0-beta-1-deprecations/</link><guid isPermaLink="false">601d61a445d993957239ea94</guid><category><![CDATA[announcement]]></category><dc:creator><![CDATA[Dave Kimura]]></dc:creator><pubDate>Sat, 19 Jan 2019 05:00:00 GMT</pubDate><content:encoded><![CDATA[<p>About this time last year, I covered <a href="https://blog.driftingruby.com/ruby-on-rails-5-2-0-deprecations/">Ruby on Rails 5.2 Deprecations</a> and got lots of appreciative feedback. With the upcoming next major update of Ruby on Rails, I&apos;d figure that I would do a new article and make it a tradition.</p><p>NOTE: Ruby on Rails 6.0 will require Ruby 2.5.0. So if you&apos;re stuck on an older version of Ruby for whatever reason, you may want to consider holding off on updating your application to 6.0.</p><p>I will likely update this article as later betas and release candidates come.</p><h2 id="actionmailer">ActionMailer</h2><p>Deprecate <code>ActionMailer::Base.receive</code> in favor of <a href="https://github.com/rails/rails/tree/master/actionmailbox">Action Mailbox</a>.</p><p>Add <code>MailDeliveryJob</code> for delivering both regular and parameterized mail. Deprecate using <code>DeliveryJob</code> and <code>Parameterized::DeliveryJob</code>.</p><h2 id="actionpack">ActionPack</h2><p>Remove deprecated <code>fragment_cache_key</code> helper in favor of <code>combined_fragment_cache_key</code>.</p><p>Remove deprecated methods in <code>ActionDispatch::TestResponse</code>.<br><code>#success?</code>, <code>missing?</code> and <code>error?</code> were deprecated in Rails 5.2 in favor of <code>#successful?</code>, <code>not_found?</code> and <code>server_error?</code>.<br></p><p>Deprecate <code>ActionDispatch::Http::ParameterFilter</code> in favor of <code>ActiveSupport::ParameterFilter</code>.</p><p>Controller level <code>force_ssl</code> has been deprecated in favor of <code>config.force_ssl</code>.<br></p><h2 id="actionview">ActionView</h2><p>Remove deprecated <code>image_alt</code> helper.</p><p>Deprecate calling private model methods from view helpers.<br>For example, in methods like <code>options_from_collection_for_select</code> and <code>collection_select</code> it is possible to call private methods from the objects used.<br></p><h2 id="activerecord">ActiveRecord</h2><p>Remove deprecated <code>#set_state</code> from the transaction object.</p><p>Remove deprecated <code>#supports_statement_cache?</code> from the database adapters.</p><p>Remove deprecated <code>#insert_fixtures</code> from the database adapters.</p><p>Remove deprecated <code>ActiveRecord::ConnectionAdapters::SQLite3Adapter#valid_alter_table_type?</code>.</p><p>Deprecate <code>config.activerecord.sqlite3.represent_boolean_as_integer</code>.</p><p>Remove deprecated <code>ActiveRecord::Migrator.migrations_path=</code>.</p><p>Remove deprecated <code>expand_hash_conditions_for_aggregates</code>.</p><p>Deprecate passing <code>migrations_paths</code> to <code>connection.assume_migrated_upto_version</code>.</p><p>Deprecate <code>ActiveRecord::Result#to_hash</code> in favor of <code>ActiveRecord::Result#to_a</code>.</p><p>Deprecate <code>column_name_length</code>, <code>table_name_length</code>, <code>columns_per_table</code>, <code>indexes_per_table</code>, <code>columns_per_multicolumn_index</code>, <code>sql_query_length</code>, and <code>joins_per_query</code> methods in <code>DatabaseLimits</code>.</p><p>Deprecate <code>update_attributes</code>/<code>!</code> in favor of <code>update</code>/<code>!</code>.<br></p><h2 id="activestorage">ActiveStorage</h2><p>Replace <code>config.active_storage.queue</code> with two options that indicate which queues analysis and purge jobs should use, respectively:</p><ul><li><code>config.active_storage.queues.analysis</code></li><li><code>config.active_storage.queues.purge</code></li></ul><p><code>config.active_storage.queue</code> is preferred over the new options when it&apos;s set, but it is deprecated and will be removed in Rails 6.1.</p><p>Add <code>ActiveStorage::Blob#open</code>, which downloads a blob to a tempfile on disk and yields the tempfile. Deprecate <code>ActiveStorage::Downloading</code>.</p><p>Use the <a href="https://github.com/janko-m/image_processing">ImageProcessing</a> gem for Active Storage variants, and deprecate the MiniMagick backend.</p><p>This means that variants are now automatically oriented if the original image was rotated. Also, in addition to the existing ImageMagick operations, variants can now use <code>:resize_to_fit</code>, <code>:resize_to_fill</code>, and other ImageProcessing macros. These are now recommended over raw <code>:resize</code>, as they also sharpen the thumbnail after resizing.</p><p>The ImageProcessing gem also comes with a backend implemented on <a href="http://jcupitt.github.io/libvips/">libvips</a>, an alternative to ImageMagick which has significantly better performance than ImageMagick in most cases, both in terms of speed and memory usage. In Active Storage it&apos;s now possible to switch to the libvips backend by changing <code>Rails.application.config.active_storage.variant_processor</code> to <code>:vips</code>.</p><h2 id="activesupport">ActiveSupport</h2><p>Remove deprecated <code>Module#reachable?</code> method.</p><p>Remove deprecated <code>#acronym_regex</code> method from <code>Inflections</code>.<br></p><p>Deprecate <code>ActiveSupport::Multibyte::Unicode#pack_graphemes(array)</code> and <code>ActiveSuppport::Multibyte::Unicode#unpack_graphemes(string)</code> in favor of <code>array.flatten.pack(&quot;U*&quot;)</code> and <code>string.scan(/\X/).map(&amp;:codepoints)</code>, respectively.<br></p><p>Deprecate <code>ActiveSupport::Multibyte::Chars.consumes?</code> in favor of <code>String#is_utf8?</code>.</p><p>Deprecate <code>ActiveSupport::Multibyte::Unicode#normalize</code> and <code>ActiveSuppport::Multibyte::Chars#normalize</code> in favor of <code>String#unicode_normalize</code></p><p>Deprecate <code>ActiveSupport::Multibyte::Unicode#downcase/upcase/swapcase</code> in favor of<code>String#downcase/upcase/swapcase</code>.</p><p>Deprecate the use of <code>LoggerSilence</code> in favor of <code>ActiveSupport::LoggerSilence</code></p><p>Deprecate using negative limits in <code>String#first</code> and <code>String#last</code>.</p><p>Allow <code>Range#===</code> and <code>Range#cover?</code> on Range.<br><br><code>Range#cover?</code> can now accept a range argument like <code>Range#include?</code> and <code>Range#===</code>. <code>Range#===</code> works correctly on Ruby 2.6. <code>Range#include?</code> is moved into a new file, with these two methods<br><br><em>Requiring active_support/core_ext/range/include_range is now deprecated.</em> <em>Use <code>require &quot;active_support/core_ext/range/compare_range&quot;</code> instead.</em><br></p><p><br></p><h2 id="custom-fields">Custom Fields<br></h2>]]></content:encoded></item><item><title><![CDATA[Audio Upgrades]]></title><description><![CDATA[<p>I&apos;ve been using the same audio equipment for a few years now and initially they were exactly what I needed at the time. I posted my set up on how I screencast a few years ago <a href="https://blog.driftingruby.com/how-i-screencast/">https://blog.driftingruby.com/how-i-screencast/ </a>which gives a pretty thorough insight of</p>]]></description><link>https://blog.driftingruby.com/audio-upgrades/</link><guid isPermaLink="false">601d614645d993957239ea81</guid><category><![CDATA[equipment]]></category><dc:creator><![CDATA[Dave Kimura]]></dc:creator><pubDate>Sat, 05 Jan 2019 05:00:00 GMT</pubDate><content:encoded><![CDATA[<p>I&apos;ve been using the same audio equipment for a few years now and initially they were exactly what I needed at the time. I posted my set up on how I screencast a few years ago <a href="https://blog.driftingruby.com/how-i-screencast/">https://blog.driftingruby.com/how-i-screencast/ </a>which gives a pretty thorough insight of the &quot;behind the scenes&quot;.</p><p>The mixer that I used, the Peavey PV6 USB, had a built-in analog to digital converter which recently started to give out. During a recording at 11PM, I realized that the audio was corrupted. When I&apos;m recording, reliability is an absolute must. I decided to upgrade and remove the mixer from the equation. In order to do so, I needed to get a few different components. I needed a way to equalize the audio, a compressor to reduce peaks, and an amplifier for the microphone. I also needed a new analog to digital converter.</p><p>So, to accomplish everything, I upgraded to a PreSonus Studio Channel and a Focusrite Solo. Between the two devices, it fulfilled the requirements.</p><figure class="kg-card kg-image-card"><img src="https://blog.driftingruby.com/content/images/2021/02/image-12.png" class="kg-image" alt loading="lazy" width="639" height="423" srcset="https://blog.driftingruby.com/content/images/size/w600/2021/02/image-12.png 600w, https://blog.driftingruby.com/content/images/2021/02/image-12.png 639w"></figure><p>Earlier in the year, I upgraded the microphone as well from the Shure SM58. It had been a wonderful microphone and there&apos;s nothing wrong with it. In fact, I had upgraded from the Blue Yeti to the SM58. However, it is a cheaper microphone and didn&apos;t give the quality I was after. So I upgraded from the SM58 to the ElectroVoice RE20 microphone.</p><figure class="kg-card kg-image-card"><img src="https://blog.driftingruby.com/content/images/2021/02/image-13.png" class="kg-image" alt loading="lazy" width="640" height="480" srcset="https://blog.driftingruby.com/content/images/size/w600/2021/02/image-13.png 600w, https://blog.driftingruby.com/content/images/2021/02/image-13.png 640w"></figure><p>The quality of audio on Drifting Ruby is something that I take very serious and want to provide the best possible quality of videos. I know that for most people, it is an afterthought and likely won&apos;t even notice the differences. However, to me, a professional quality audio is important and something that I feel that I&apos;ve accomplished.</p><p>While there is much better equipment available, I feel that it would be diminishing returns. Higher grade equipment would likely not only be overkill, but it would also not make a noticeable difference. After all, I am just working with a single channel.</p><p>While I&apos;m still optimizing the new equipment, I hope that you enjoy the content!</p>]]></content:encoded></item><item><title><![CDATA[Default Ruby on Rails Options]]></title><description><![CDATA[<p>A lot of times, we will create a new Ruby on Rails application and go through the process of our normal configuration setup. Sometimes, we will create a template to expedite our setup like in a recent screencast episode. https://www.driftingruby.com/episodes/templating-ruby-on-rails-applications</p><p>Other times, we will need</p>]]></description><link>https://blog.driftingruby.com/default-ruby-on-rails-options/</link><guid isPermaLink="false">601d60ec45d993957239ea70</guid><category><![CDATA[development]]></category><dc:creator><![CDATA[Dave Kimura]]></dc:creator><pubDate>Thu, 03 Jan 2019 05:00:00 GMT</pubDate><content:encoded><![CDATA[<p>A lot of times, we will create a new Ruby on Rails application and go through the process of our normal configuration setup. Sometimes, we will create a template to expedite our setup like in a recent screencast episode. https://www.driftingruby.com/episodes/templating-ruby-on-rails-applications</p><p>Other times, we will need to create a new Ruby on Rails application and we have a list of things that we want to skip. It can be annoying to remember or script out these things. When we create a new application, we can skip something like Turbolinks.</p><p>rails new testapp --skip-turbolinks</p><p>If this is a common occurrence, then this isn&apos;t something we want to have to remember every time. Luckily, there is a much easier way to make these kinds of changes a default. Create a file <code>.railsrc</code> in your home directory.</p><p>touch ~/.railsrc</p><p>Edit the file and paste in your overrides.</p><pre><code>--skip-spring
--skip-test-unit
--skip-bundle
--skip-coffee</code></pre><p>You can even set up defaults for webpack and a framework by adding the lines in the <code>.railsrc</code> file.</p><pre><code>--skip-spring
--skip-test-unit
--skip-bundle
--skip-coffee
--webpack=vue</code></pre><p>And it also works for database settings.</p><pre><code>--skip-spring
--skip-test-unit
--skip-bundle
--skip-coffee
--webpack=vue
-d mysql</code></pre>]]></content:encoded></item><item><title><![CDATA[Loofah Gem - CVE-2018-16468]]></title><description><![CDATA[<p>The Loofah gem recently had a vulnerability reported which could potentially expose your application to a Cross Site Scripting attack.</p><p>From <a href="https://nvd.nist.gov/vuln/detail/CVE-2018-16468">https://nvd.nist.gov/vuln/detail/CVE-2018-16468</a> it reads</p><!--kg-card-begin: markdown--><blockquote>
<p>In the Loofah gem for Ruby, through v2.2.2, unsanitized JavaScript may occur in sanitized output when a crafted</p></blockquote>]]></description><link>https://blog.driftingruby.com/loofah-gem-cve-2018-16468/</link><guid isPermaLink="false">601d607b45d993957239ea61</guid><category><![CDATA[security]]></category><dc:creator><![CDATA[Dave Kimura]]></dc:creator><pubDate>Thu, 01 Nov 2018 04:00:00 GMT</pubDate><content:encoded><![CDATA[<p>The Loofah gem recently had a vulnerability reported which could potentially expose your application to a Cross Site Scripting attack.</p><p>From <a href="https://nvd.nist.gov/vuln/detail/CVE-2018-16468">https://nvd.nist.gov/vuln/detail/CVE-2018-16468</a> it reads</p><!--kg-card-begin: markdown--><blockquote>
<p>In the Loofah gem for Ruby, through v2.2.2, unsanitized JavaScript may occur in sanitized output when a crafted SVG element is republished.</p>
</blockquote>
<!--kg-card-end: markdown--><p>Since the Ruby on Rails framework depends on <code>rails-html-sanitizer</code> and this depends on <code>loofah</code>, there is a likely chance that your application is affected too.</p><p>To immediately address this issue, add this to your Gemfile.</p><p><code>gem &apos;loofah&apos;, &apos;~&gt; 2.2.3</code></p><p>Then run</p><p><code>bundle update loofah</code></p>]]></content:encoded></item><item><title><![CDATA[Setting the Name in From Emails in Ruby on Rails]]></title><description><![CDATA[<p>Sending emails in Ruby on Rails is pretty simple and it is something that we often do not give much thought about if the emails are received. However, attention to detail is important.</p><p>I too fell into this trap where I never took notice to the Name that was being</p>]]></description><link>https://blog.driftingruby.com/setting-the-name-in-from-emails-in-ruby-on-rails/</link><guid isPermaLink="false">601d5fc245d993957239ea46</guid><category><![CDATA[development]]></category><dc:creator><![CDATA[Dave Kimura]]></dc:creator><pubDate>Tue, 30 Oct 2018 04:00:00 GMT</pubDate><content:encoded><![CDATA[<p>Sending emails in Ruby on Rails is pretty simple and it is something that we often do not give much thought about if the emails are received. However, attention to detail is important.</p><p>I too fell into this trap where I never took notice to the Name that was being displayed on emails that were being generated. Looking back, the name on each of the email addresses were showing up as <code>support</code>.</p><figure class="kg-card kg-image-card"><img src="https://blog.driftingruby.com/content/images/2021/02/image-11.png" class="kg-image" alt loading="lazy" width="958" height="162" srcset="https://blog.driftingruby.com/content/images/size/w600/2021/02/image-11.png 600w, https://blog.driftingruby.com/content/images/2021/02/image-11.png 958w" sizes="(min-width: 720px) 720px"></figure><p>I started to investigate where this mixup was. I tried manually sending the email from my mail client and it came through properly. Since the emails are being sent through Amazon SES, I looked in there since I had initially verified the email address through there.</p><p>This led me to look into my application to see where I could potentially fix this.</p><p>Within the ApplicationMailer file <code>app/mailers/application_mailer.rb</code> we can set the default from email address and originally my file looked like this</p><!--kg-card-begin: markdown--><pre><code>class ApplicationMailer &lt; ActionMailer::Base 
  helper ApplicationHelper 
  default from: &apos;support@driftingruby.com&apos; 
  layout &apos;mailer&apos; 
end
</code></pre>
<!--kg-card-end: markdown--><p>The fix ended up being really simple. I changed the <code>default from:</code> to</p><!--kg-card-begin: markdown--><pre><code>default from: &apos;Drifting Ruby &lt;support@driftingruby.com&gt;&apos;
</code></pre>
<!--kg-card-end: markdown--><p>and deployed the code.</p><p>This display name format <code>&apos;descriptive name &lt;email address&gt;&apos;</code> is pretty common and widely accepted.</p><p>The problem was fixed. Take a moment and check your mailers and make sure that they are sending with a descriptive name.</p>]]></content:encoded></item><item><title><![CDATA[Updated to Mojave]]></title><description><![CDATA[<p>MacOS 10.14 was released recently and updating the operating system of your development environment can be scary. Typically, I&apos;ll wait some time before I update to ensure I don&apos;t lose productivity. I took the plunge and updated and ran into a strange error where a</p>]]></description><link>https://blog.driftingruby.com/updated-to-mojave/</link><guid isPermaLink="false">601c64a12bd4a679c693dfea</guid><dc:creator><![CDATA[Dave Kimura]]></dc:creator><pubDate>Fri, 28 Sep 2018 04:00:00 GMT</pubDate><content:encoded><![CDATA[<p>MacOS 10.14 was released recently and updating the operating system of your development environment can be scary. Typically, I&apos;ll wait some time before I update to ensure I don&apos;t lose productivity. I took the plunge and updated and ran into a strange error where a library was missing.</p><p>If you&apos;ve upgrade to Mojave and try to install a gem like <code>mini_racer</code> you will run into problems with a library not being found. This was due to XCode 10 removing the library. However, there is an easy fix to this.</p><p>The first indication was that the command line tools were not installed.</p><!--kg-card-begin: markdown--><pre><code>Gem::Ext::BuildError: ERROR: Failed to build gem native extension. current directory: /Users/kobaltz/.rvm/gems/ruby-2.4.4/gems/mini_racer-0.1.14/ext/mini_racer_extension /Users/kobaltz/.rvm/rubies/ruby-2.4.4/bin/ruby -r ./siteconf20180928-7580-5rhj67.rb extconf.rb checking for -lpthread... *** extconf.rb failed *** Could not create Makefile due to some reason, probably lack of necessary libraries and/or headers. Check the mkmf.log file for more details. You may need configuration options. Provided configuration options: --with-opt-dir --with-opt-include --without-opt-include=${opt-dir}/include --with-opt-lib --without-opt-lib=${opt-dir}/lib --with-make-prog --without-make-prog --srcdir=. --curdir --ruby=/Users/kobaltz/.rvm/rubies/ruby-2.4.4/bin/$(RUBY_BASE_NAME) --with-pthreadlib --without-pthreadlib /Users/kobaltz/.rvm/rubies/ruby-2.4.4/lib/ruby/2.4.0/mkmf.rb:457:in `try_do&apos;: The compiler failed to generate an executable file. (RuntimeError) You have to install development tools first.
</code></pre>
<!--kg-card-end: markdown--><p>Make sure XCode Command Line Tools is installed</p><p><code>xcode-select --install</code></p><p>So then the everything should work correctly..., not quite. Installing <code>mini_racer</code> still failed.</p><!--kg-card-begin: markdown--><pre><code>Gem::Ext::BuildError: ERROR: Failed to build gem native extension. current directory: /Users/kobaltz/.rvm/gems/ruby-2.4.4/gems/mini_racer-0.1.14/ext/mini_racer_extension /Users/kobaltz/.rvm/rubies/ruby-2.4.4/bin/ruby -r ./siteconf20180928-8233-1xwbzpf.rb extconf.rb checking for -lpthread... yes checking for -lobjc... yes creating Makefile current directory: /Users/kobaltz/.rvm/gems/ruby-2.4.4/gems/mini_racer-0.1.14/ext/mini_racer_extension make &quot;DESTDIR=&quot; clean current directory: /Users/kobaltz/.rvm/gems/ruby-2.4.4/gems/mini_racer-0.1.14/ext/mini_racer_extension make &quot;DESTDIR=&quot; compiling mini_racer_extension.cc clang: warning: argument unused during compilation: &apos;-rdynamic&apos; [-Wunused-command-line-argument] In file included from mini_racer_extension.cc:2: In file included from /Users/kobaltz/.rvm/rubies/ruby-2.4.4/include/ruby-2.4.0/ruby.h:33: In file included from /Users/kobaltz/.rvm/rubies/ruby-2.4.4/include/ruby-2.4.0/ruby/ruby.h:2012: /Users/kobaltz/.rvm/rubies/ruby-2.4.4/include/ruby-2.4.0/ruby/intern.h:47:19: warning: &apos;register&apos; storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register] void rb_mem_clear(register VALUE*, register long); ^~~~~~~~~ /Users/kobaltz/.rvm/rubies/ruby-2.4.4/include/ruby-2.4.0/ruby/intern.h:47:36: warning: &apos;register&apos; storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register] void rb_mem_clear(register VALUE*, register long); ^~~~~~~~~ 2 warnings generated. linking shared-object mini_racer_extension.bundle clang: warning: libstdc++ is deprecated; move to libc++ [-Wdeprecated] ld: library not found for -lstdc++ clang: error: linker command failed with exit code 1 (use -v to see invocation) make: *** [mini_racer_extension.bundle] Error 1 make failed, exit code 2 Gem files will remain installed in /Users/kobaltz/.rvm/gems/ruby-2.4.4/gems/mini_racer-0.1.14 for inspection. Results logged to /Users/kobaltz/.rvm/gems/ruby-2.4.4/extensions/x86_64-darwin-17/2.4.0/mini_racer-0.1.14/gem_make.out An error occurred while installing mini_racer (0.1.14), and Bundler cannot continue. Make sure that `gem install mini_racer -v &apos;0.1.14&apos;` succeeds before bundling.
</code></pre>
<!--kg-card-end: markdown--><p>So the error <code>ld: library not found for -lstdc++</code> is where the actual error lies.</p><p>To fix this, open the folder</p><p><code>open /Library/Developer/CommandLineTools/Packages/</code></p><p>Run the package <code>macOS_SDK_headers_for_macOS_10.14.pkg</code></p><p>Then <code>gem install mini_racer</code> works!</p><p>This issue may not be only related to <code>mini_racer</code> as it could affect any gem that compiles an extension.</p>]]></content:encoded></item><item><title><![CDATA[Ruby on Rails 5.2.0 Deprecations]]></title><description><![CDATA[<p>With Ruby on Rails 5.2.0.Beta2 out now, its release candidate and official release is probably right around the corner. In efforts to clean up some of the code base, some methods have been deprecated. If you have been keeping your apps up to date with the latest</p>]]></description><link>https://blog.driftingruby.com/ruby-on-rails-5-2-0-deprecations/</link><guid isPermaLink="false">601c646b2bd4a679c693dfe1</guid><category><![CDATA[announcement]]></category><dc:creator><![CDATA[Dave Kimura]]></dc:creator><pubDate>Sat, 06 Jan 2018 05:00:00 GMT</pubDate><content:encoded><![CDATA[<p>With Ruby on Rails 5.2.0.Beta2 out now, its release candidate and official release is probably right around the corner. In efforts to clean up some of the code base, some methods have been deprecated. If you have been keeping your apps up to date with the latest stable releases, chances are that you have noticed these for some time coming as the via the deprecation notices in the application logs.</p><p>For easy searching purposes, I&#x2019;ve parsed through the logs of all of the upcoming deprecations in Ruby on Rails 5.2.0. These were taken straight out of the CHANGELOGs.</p><p>We will be releasing January&apos;s free screencast of some of the upcoming features in Ruby on Rails 5.2.0.</p><p>Overall, this has been a pretty light release for deprecations which is really nice. Hopefully, updating a Ruby on Rails app from 5.1.X to 5.2.X will be a fairly smooth transition.</p><h1 id="action-cable">Action Cable</h1><p><a href="https://github.com/rails/rails/blob/v5.2.0.beta2/actioncable/CHANGELOG.md">https://github.com/rails/rails/blob/v5.2.0.beta2/actioncable/CHANGELOG.md</a></p><h2 id="removed-deprecations">Removed Deprecations</h2><ul><li>Removed deprecated evented redis adapter.</li></ul><h2 id="new-deprecations">New Deprecations</h2><ul><li>None</li></ul><h1 id="action-mailer">Action Mailer</h1><p><a href="https://github.com/rails/rails/blob/v5.2.0.beta2/actionmailer/CHANGELOG.md">https://github.com/rails/rails/blob/v5.2.0.beta2/actionmailer/CHANGELOG.md</a></p><h2 id="removed-deprecations-1">Removed Deprecations</h2><ul><li>None</li></ul><h2 id="new-deprecations-1">New Deprecations</h2><ul><li>None</li></ul><h1 id="action-pack">Action Pack</h1><p><a href="https://github.com/rails/rails/blob/v5.2.0.beta2/actionpack/CHANGELOG.md">https://github.com/rails/rails/blob/v5.2.0.beta2/actionpack/CHANGELOG.md</a></p><h2 id="removed-deprecations-2">Removed Deprecations</h2><ul><li>Remove deprecated <code>ActionController::ParamsParser::ParseError</code></li></ul><h2 id="new-deprecations-2">New Deprecations</h2><ul><li>Deprecate <code>ActionDispatch::TestResponse</code> response aliases</li></ul><h1 id="action-view">Action View</h1><p><a href="https://github.com/rails/rails/blob/v5.2.0.beta2/actionview/CHANGELOG.md">https://github.com/rails/rails/blob/v5.2.0.beta2/actionview/CHANGELOG.md</a></p><h2 id="removed-deprecations-3">Removed Deprecations</h2><ul><li>Remove deprecated Erubis ERB handler.</li></ul><h2 id="new-deprecations-3">New Deprecations</h2><ul><li>None</li></ul><h1 id="action-job">Action Job</h1><p><a href="https://github.com/rails/rails/blob/v5.2.0.beta2/activejob/CHANGELOG.md">https://github.com/rails/rails/blob/v5.2.0.beta2/activejob/CHANGELOG.md</a></p><h2 id="removed-deprecations-4">Removed Deprecations</h2><ul><li>None</li></ul><h2 id="new-deprecations-4">New Deprecations</h2><ul><li>None</li></ul><h1 id="active-model">Active Model</h1><p><a href="https://github.com/rails/rails/blob/v5.2.0.beta2/activemodel/CHANGELOG.md">https://github.com/rails/rails/blob/v5.2.0.beta2/activemodel/CHANGELOG.md</a></p><h2 id="removed-deprecations-5">Removed Deprecations</h2><ul><li>None</li></ul><h2 id="new-deprecations-5">New Deprecations</h2><ul><li>None</li></ul><h1 id="active-record">Active Record</h1><p><a href="https://github.com/rails/rails/blob/v5.2.0.beta2/activerecord/CHANGELOG.md">https://github.com/rails/rails/blob/v5.2.0.beta2/activerecord/CHANGELOG.md</a></p><h2 id="removed-deprecations-6">Removed Deprecations</h2><ul><li>Remove deprecated method <code>#sanitize_conditions</code>.</li><li>Remove deprecated method <code>#scope_chain</code>.</li><li>Remove deprecated configuration <code>.error_on_ignored_order_or_limit</code>.</li><li>Remove deprecated arguments from <code>#verify!</code>.</li><li>Remove deprecated argument <code>name</code> from <code>#indexes</code>.</li><li>Remove deprecated method <code>ActiveRecord::Migrator.schema_migrations_table_name</code>.</li><li>Remove deprecated method <code>supports_primary_key?</code>.</li><li>Remove deprecated method <code>supports_migrations?</code>.</li><li>Remove deprecated methods <code>initialize_schema_migrations_table</code> and <code>initialize_internal_metadata_table</code>.</li><li>Remove deprecated support to passing a class to <code>:class_name</code> on associations.</li><li>Remove deprecated argument <code>default</code> from <code>index_name_exists?</code>.</li><li>Remove deprecated support to <code>quoted_id</code> when typecasting an Active Record object.</li><li>Remove deprecated <code>#migration_keys</code>.</li></ul><h2 id="new-deprecations-6">New Deprecations</h2><ul><li>Deprecate <code>set_state</code> method in <code>TransactionState</code></li><li>Deprecate delegating to <code>arel</code> in <code>Relation</code>.</li><li>Deprecate passing arguments and block at the same time to <code>count</code> and <code>sum</code> in <code>ActiveRecord::Calculations</code>.</li><li>Deprecate <code>supports_statement_cache?</code>.</li></ul><h1 id="active-storage-new-">Active Storage (new!)</h1><p><a href="https://github.com/rails/rails/blob/v5.2.0.beta2/activestorage/CHANGELOG.md">https://github.com/rails/rails/blob/v5.2.0.beta2/activestorage/CHANGELOG.md</a></p><h2 id="removed-deprecations-7">Removed Deprecations</h2><ul><li>None</li></ul><h2 id="new-deprecations-7">New Deprecations</h2><ul><li>None</li></ul><h1 id="active-support">Active Support</h1><p><a href="https://github.com/rails/rails/blob/v5.2.0.beta2/activesupport/CHANGELOG.md">https://github.com/rails/rails/blob/v5.2.0.beta2/activesupport/CHANGELOG.md</a></p><h2 id="removed-deprecations-8">Removed Deprecations</h2><ul><li>Remove deprecated <code>halt_callback_chains_on_return_false</code> option.</li><li>Remove deprecated <code>:if</code> and <code>:unless</code> string filter for callbacks.</li></ul><h2 id="new-deprecations-8">New Deprecations</h2><ul><li>Deprecate <code>secrets.secret_token</code>.</li><li>Deprecate <code>Module#reachable?</code> method.</li></ul>]]></content:encoded></item><item><title><![CDATA[Configuring a Sentry Server on Ubuntu 16.04 LTS]]></title><description><![CDATA[<p>Sentry is an error tracking software product which has many different subscriptions options. Its software is open source and can be difficult to install if you are unfamiliar with the server side of things and hosting. They do offer a free hosted option for up to 10k events per month,</p>]]></description><link>https://blog.driftingruby.com/configuring-a-sentry-server-on-ubuntu-16-04-lts/</link><guid isPermaLink="false">601c62f72bd4a679c693df8a</guid><category><![CDATA[utilities]]></category><dc:creator><![CDATA[Dave Kimura]]></dc:creator><pubDate>Wed, 01 Nov 2017 04:00:00 GMT</pubDate><content:encoded><![CDATA[<p>Sentry is an error tracking software product which has many different subscriptions options. Its software is open source and can be difficult to install if you are unfamiliar with the server side of things and hosting. They do offer a free hosted option for up to 10k events per month, 1 user and up to seven days retention.</p><p>In this example, I&apos;m using an updated Ubuntu 16.04.2 LTS install. To get started, we will install several packages. Note, this will install Redis and PostgreSQL. Typically, you would want to install these on their own servers.</p><!--kg-card-begin: markdown--><pre><code>curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -
sudo apt-get install -y python-virtualenv python-setuptools python-pip libxslt1-dev gcc
sudo apt-get install -y libffi-dev libjpeg-dev libxml2-dev libxslt-dev libyaml-dev python-dev
sudo apt-get install -y python-setuptools python-dev libxslt1-dev gcc libffi-dev libjpeg-dev
sudo apt-get install -y libxml2-dev libxslt-dev libyaml-dev libpq-dev nginx
sudo apt-get install -y postgresql-server-dev-9.5 supervisor nodejs
sudo apt-get install -y postgresql redis-server
</code></pre>
<!--kg-card-end: markdown--><p>We&apos;ll then create a sentry user that will be running the software. We will also allow this use to be a sudoer.</p><!--kg-card-begin: markdown--><pre><code>sudo adduser sentry
sudo adduser sentry sudo
</code></pre>
<!--kg-card-end: markdown--><p>Next, we need to create our database. To do this, we will login as the postgres user and open the template1 database. We&apos;ll create a sentry database user and password. Be sure to change this password. We then need to create the <code>citext</code> extension.</p><!--kg-card-begin: markdown--><pre><code>sudo su - postgres
psql template1
create extension citext;
create user sentry with password &apos;sentry&apos;;
create database sentrydb with owner sentry;
\q
exit
</code></pre>
<!--kg-card-end: markdown--><p>We will then login as the sentry user and create a virtual environment for sentry.</p><!--kg-card-begin: markdown--><pre><code>sudo su - sentry
virtualenv ~/sentry_app/
source ~/sentry_app/bin/activate
</code></pre>
<!--kg-card-end: markdown--><p>Let&apos;s install sentry</p><!--kg-card-begin: markdown--><pre><code>pip install -U sentry
sentry init
</code></pre>
<!--kg-card-end: markdown--><p>Let&apos;s configure the <code>sentry.conf.py</code> with <code>vi</code>, <code>nano</code> or whatever your preferred editor is.</p><!--kg-card-begin: markdown--><pre><code>nano ~/.sentry/sentry.conf.py
DATABASES = {
    &apos;default&apos;: {
        &apos;ENGINE&apos;: &apos;sentry.db.postgres&apos;,
        &apos;NAME&apos;: &apos;sentrydb&apos;,
        &apos;USER&apos;: &apos;sentry&apos;, 
        &apos;PASSWORD&apos;: &apos;sentry&apos;, # &lt;-- or whatever you set with the psql command
        &apos;HOST&apos;: &apos;localhost&apos;,
        &apos;PORT&apos;: &apos;5432&apos;,
    }
}
</code></pre>
<!--kg-card-end: markdown--><p>We&apos;re now ready to upgrade! This will migrate the database; building the tables and initial data. You will also be asked to create a user which will be your login information.</p><!--kg-card-begin: markdown--><pre><code>sentry upgrade
</code></pre>
<!--kg-card-end: markdown--><p>Let&apos;s log out of the <code>sentry</code> user and make <code>sentry</code>startup whenever the server boots.</p><!--kg-card-begin: markdown--><pre><code>exit
sudo nano /etc/supervisor/conf.d/sentry.conf
</code></pre>
<!--kg-card-end: markdown--><p>We&apos;ll then paste this into <code>sentry.conf</code></p><!--kg-card-begin: markdown--><pre><code>[program:sentry-web] 
directory=/home/sentry/sentry_app/
environment=SENTRY_CONF=&quot;/home/sentry/.sentry&quot; 
command=/home/sentry/sentry_app/bin/sentry run web 
autostart=true 
autorestart=true 
redirect_stderr=true 
user=sentry stdout_logfile=syslog 
stderr_logfile=syslog 
[program:sentry-worker] 
directory=/home/sentry/sentry_app/ 
environment=SENTRY_CONF=&quot;/home/sentry/.sentry&quot; 
command=/home/sentry/sentry_app/bin/sentry run worker 
autostart=true 
autorestart=true 
redirect_stderr=true 
user=sentry 
stdout_logfile=syslog 
stderr_logfile=syslog 
[program:sentry-cron] 
directory=/home/sentry/sentry_app/ 
environment=SENTRY_CONF=&quot;/home/sentry/.sentry&quot; 
command=/home/sentry/sentry_app/bin/sentry run cron 
autostart=true 
autorestart=true 
redirect_stderr=true 
stdout_logfile=syslog 
stderr_logfile=syslog
</code></pre>
<!--kg-card-end: markdown--><p>We&apos;ll then update <code>supervisor</code> and check its status.</p><!--kg-card-begin: markdown--><pre><code>sudo supervisorctl reread
sudo supervisorctl update

sudo supervisorctl status
</code></pre>
<!--kg-card-end: markdown--><p>The app will then be available at <code>http://localhost:9000</code>. &#xA0;If you want to set up SSL or run <code>sentry</code> on port 80, we can create an NGINX proxy.</p><p>sudo nano /etc/nginx/sites-enabled/default</p><p>Then replace the <code>location /</code> with the following.</p><!--kg-card-begin: markdown--><pre><code>location / 
{ 
  proxy_pass http://localhost:9000; 
  proxy_redirect off; 
  proxy_set_header Host $host; 
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header X-Forwarded-Proto $scheme; 
}
</code></pre>
<!--kg-card-end: markdown--><p>If you need to configure your email settings, you can edit <code>/home/sentry/.sentry/config.yml</code>.</p><p>You can also setup <code>crontab</code> to cleanup the sentry data periodically.</p><!--kg-card-begin: markdown--><pre><code>crontab -e
0 3 * * * sentry cleanup --days=30
</code></pre>
<!--kg-card-end: markdown--><p>Your site will be live at <code>http://x.x.x.x/auth/login</code>. Start a project and and tracking errors now!</p>]]></content:encoded></item><item><title><![CDATA[Going Pro on Drifting Ruby]]></title><description><![CDATA[<p><em><strong>Update: </strong>New site launched! From now until Nov 25th, 2017, save on the Pro Membership! Get the Pro Membership for $15.00 USD per month while you maintain an active subscription. First Pro Episode is scheduled to be released on Nov 12th, 2017.</em></p><p>The past few years have been a</p>]]></description><link>https://blog.driftingruby.com/going-pro-on-drifting-ruby/</link><guid isPermaLink="false">601c62b52bd4a679c693df7f</guid><category><![CDATA[announcement]]></category><dc:creator><![CDATA[Dave Kimura]]></dc:creator><pubDate>Sat, 21 Oct 2017 04:00:00 GMT</pubDate><content:encoded><![CDATA[<p><em><strong>Update: </strong>New site launched! From now until Nov 25th, 2017, save on the Pro Membership! Get the Pro Membership for $15.00 USD per month while you maintain an active subscription. First Pro Episode is scheduled to be released on Nov 12th, 2017.</em></p><p>The past few years have been a lot of work and fun! I&apos;ve spent nearly every week preparing and producing screencasts to help the community with continuing education and knowledge. For over 100 episodes, I have produced and made the content free for anyone to view.</p><p>There will be a subscription service on Drifting Ruby. Initially, there is just one level to subscribe to; Pro. Having a Pro subscription will provide you a few benefits; access to Pro episodes, invite to a private Slack Community, priority for Episode suggestions and showing your support for Drifting Ruby.</p><p>All existing free episodes will remain free. A free episode will be released on the first week of the month, every month. The other episodes throughout the month will be under the Pro subscription.</p><p>Pricing for the Pro subscription is $19.00 USD per month and will be recurring each month from the day that you first subscribe. Each month, the recurring subscription fee of $19.00 USD will be charged. To continue watching Pro episodes, a current subscription will be required.</p><p>With this being said, I value our youth and have great respect for our educators. Therefore, with a valid school email, the recurring subscription fee will be $9.00 per month. This is not a promotional rate, but rather an encouragement to continue learning. Periodically, you may receive an email and have to click a link to verify and continue your subscription at a discounted rate. If you are unable to verify your email address, the subscription will be cancelled for the following billing cycle.</p><p>If you would like to see additional features on Drifting Ruby, please let me know! Drop me a line at <a href="mailto:support@driftingruby.com">support@driftingruby.com</a> or create a ticket at <a href="https://www.driftingruby.com/feedbacks/new" rel="noopener">https://www.driftingruby.com/feedbacks/new</a></p><p>I sincerely thank you for your support over the past few years. I have enjoyed producing the content and even learning a lot myself along the way.</p>]]></content:encoded></item><item><title><![CDATA[A Tail of Debugging Issues]]></title><description><![CDATA[<p>There have been many times when I&apos;ve been debugging a complicated issue. More often than not, it was something crazy that I had done and it seemed like a good idea at the time. Whether it is a endless recursive loop or just a good ole bug in</p>]]></description><link>https://blog.driftingruby.com/a-tail-of-debugging-issues/</link><guid isPermaLink="false">601c623e2bd4a679c693df72</guid><category><![CDATA[development]]></category><dc:creator><![CDATA[Dave Kimura]]></dc:creator><pubDate>Thu, 31 Aug 2017 04:00:00 GMT</pubDate><content:encoded><![CDATA[<p>There have been many times when I&apos;ve been debugging a complicated issue. More often than not, it was something crazy that I had done and it seemed like a good idea at the time. Whether it is a endless recursive loop or just a good ole bug in the code.</p><p>We all have our own ways of debugging and sometimes they&apos;re really efficient. However, other times, they&apos;re just familiar so that is our first weapon of choice. Just because something is familiar does not make it efficient. Sometimes branching out and trying something new may not be efficient due to the initial learning curve.</p><p>However, this article will take two most likely familiar techniques and combine them into one simple, rememberable and powerful debugging technique. Some time ago, Aaron Patterson had written an article on <a href="http://tenderlovemaking.com/2016/02/05/i-am-a-puts-debuggerer.html">Puts Debugging</a> and it was a great read. Depending on our application and the complexity of the bug, this may not be enough.</p><h1 id="tail">Tail</h1><p>Within virtually every *nix system (Ubuntu, Centos, MacOS, etc.) there is a command that can show the last bits of a file. From your terminal within the application directory, you can run this command to see the last 100 lines of your file.</p><p>tail -100 log/development.log</p><p>Pretty cool huh? While you have your application running on a separate terminal, you can use this command to view the logs as they occur.</p><p>tail -f log/development.log</p><p>This is really powerful to see errors and other issues that may be happening. Any kind of successful request or failure will be logged here since within our `config/environments/development.rb` we have the following set by default.</p><p>config.log_level = :debug</p><p>If you don&apos;t have this in there, it will be <code>:debug</code> by default.</p><h1 id="grep">Grep</h1><p>Grep is another popular command that I use all the time. It makes life so much easier when parsing a file to fine something specific. To keep things simple, I can <code>grep</code> a the output of a file and it will only show the relevant information.</p><p>&gt; cat Gemfile | grep source source &apos;https://rubygems.org&apos;</p><p>So we can call something like <code>cat Gemfile</code> which would display the entire contents of our Gemfile in the terminal. Combine this with a pipe (|) and <code>grep</code> with our search term and it returns the relevant results. Really cool!</p><h1 id="tail-grep">Tail + Grep</h1><p>While reading the development logs is fairly straight forward once you are familiar with the output and you know what you&apos;re looking for, it is still cumbersome if there is a LOT of information that is getting returned on a single request. Sometimes, it&apos;s not as simple as reading the relevant bits since there is a bunch of distracting information in between.</p><p>So when I&apos;m debugging an issue, whether it is a silly background job not running properly or some other nuance, I will throw something like this within my code to test.</p><figure class="kg-card kg-image-card"><img src="https://blog.driftingruby.com/content/images/2021/02/image-10.png" class="kg-image" alt loading="lazy" width="472" height="118"></figure><p>This gives some separation of the logs and it also gives me a nice little wrapper to try and see what&apos;s going on. However, on complicated queries or requests, this may still get buried in the mix of the rest of the logs. Instead, we can simply do something like this within the relevant bit of code.</p><p>Rails.logger.info &quot;DEBUG::some_var::#{some_var}</p><p>And within my terminal, I&apos;ll tail the logs and grep for <code>DEBUG</code> with a command like this.</p><p>tail -f log/development.log | grep DEBUG</p><p>Now, not only am I not bothered by the rest of the logs polluting my terminal, but I can clearly see when this bit of code has ran and also see the output without trying pick through a bunch of logs.</p><p>Happy Debugging!</p>]]></content:encoded></item></channel></rss>