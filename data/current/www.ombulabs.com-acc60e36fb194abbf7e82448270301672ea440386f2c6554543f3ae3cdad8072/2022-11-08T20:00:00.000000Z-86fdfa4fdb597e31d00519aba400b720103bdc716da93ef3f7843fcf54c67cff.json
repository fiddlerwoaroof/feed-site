{
  "title":"Testing Something Special",
  "date":"2022-11-08T20:00:00.000000Z",
  "author":"kostiantyn",
  "id":"https://www.ombulabs.com/blog/software-development/open-source/testing/testing-something-special",
  "link":"https://www.ombulabs.com/blog/software-development/open-source/testing/testing-something-special.html",
  "content":"<p>Frontend development is so exciting nowadays! There is a wide spectrum of opportunities in each particular project. There can be tons of different interesting cases related to feature development, bug fixing and <strong>testing</strong>! A lot of new components, configurations, and flows.</p>\n\n\n\n<h3>The stack</h3>\n\n<p>TypeScript, React.js</p>\n\n<h3>Interesting facts</h3>\n\n<p>Today we will take a look at one of the two most interesting and progressive parts of web development - Forms &amp; Tables. <s><strong>100% NO, huge NO, totally NO</strong></s> They are kind of <s>the biggest regret and disappointment</s> foundation in web development. Almost all projects are built by adding forms &amp; tables. Some of them can even include only forms &amp; tables. All of them are mostly the same - layout, logic &amp; use cases, but with different styling.</p>\n\n<h3>Welcome the guest of the evening</h3>\n\n<p>We definitely should <s>at least try to</s> live in peace with them, though, and walk hand in hand as they are a big part of the <s>West</s> Web world. So today’s pick is testing <code>&lt;form /&gt;</code> submissions.</p>\n\n<h3>Here we go again…</h3>\n\n<p>This story begins with <a href=\"https://github.com/jaredpalmer/formik/issues/3590\">this issue</a> in one of the most popular form libraries in the React.js world, <strong><a href=\"https://github.com/jaredpalmer/formik\">Formik</a></strong>. The problem was in continuously submitting a form by holding the <code>Enter</code> key. This behavior is native to browsers, so the solution chosen was to work around it with a submitting flag - <code>allowSubmit</code>. Submissions would be allowed only when the flag is in its <code>true</code> state. Changing <code>allowSubmit</code> to <code>false</code> after submission and back to <code>true</code> after the <code>keyUp</code> event was fired by the enter key works perfectly for resolving this issue. Toggling this behavior was handled by adding a new <code>boolean</code> property that was checked by <code>onSubmit</code> &amp; <code>onKeyUp</code> handlers.</p>\n\n<h3>Issue solution</h3>\n<div class=\"highlight\"><pre><code class=\"language-js\"><span></span>    <span class=\"kd\">const</span> <span class=\"nx\">ENTER_KEY_CODE</span> <span class=\"o\">=</span> <span class=\"mf\">13</span><span class=\"p\">;</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">allowSubmit</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">useRef</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">handleKeyUp</span> <span class=\"o\">=</span> <span class=\"p\">({</span> <span class=\"nx\">keyCode</span> <span class=\"p\">}</span><span class=\"o\">:</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">KeyboardEvent</span><span class=\"o\">&lt;</span><span class=\"nx\">HTMLFormElement</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// If submit event was fired &amp; prevent prop was passed unblock the submission</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">keyCode</span> <span class=\"o\">===</span> <span class=\"nx\">ENTER_KEY_CODE</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">preventStickingSubmissions</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">allowSubmit</span><span class=\"p\">.</span><span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">};</span>\n    <span class=\"c1\">// Wrapper for the submit event handler</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">submitWrap</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">ev</span><span class=\"o\">:</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">FormEvent</span><span class=\"o\">&lt;</span><span class=\"nx\">HTMLFormElement</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// Check if the form was not already submitted</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">allowSubmit</span><span class=\"p\">.</span><span class=\"nx\">current</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// Call the original submit handler</span>\n        <span class=\"nx\">handleSubmit</span><span class=\"p\">(</span><span class=\"nx\">ev</span><span class=\"p\">);</span>\n        <span class=\"c1\">// If prevent prop was passed -&gt; change flag's state</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">preventStickingSubmissions</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"nx\">allowSubmit</span><span class=\"p\">.</span><span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// Prevent the default browser submit event behavior</span>\n        <span class=\"nx\">ev</span><span class=\"p\">.</span><span class=\"nx\">preventDefault</span><span class=\"p\">();</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">};</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">form</span>\n        <span class=\"nx\">onKeyUp</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">handleKeyUp</span><span class=\"p\">}</span>\n        <span class=\"nx\">onSubmit</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">submitWrap</span><span class=\"p\">}</span>\n        <span class=\"c1\">// The rest of the props go here</span>\n        <span class=\"p\">{...</span><span class=\"nx\">props</span><span class=\"p\">}</span>\n      <span class=\"o\">/&gt;</span>\n    <span class=\"p\">);</span>\n</code></pre></div>\n<h3>Rewards and congratulations were so close…</h3>\n\n<p>At the top of the definition of the <code>&lt;Form /&gt;</code> component a <code>TODO</code> was placed with the call for implementing tests for this component. I’m positioning myself as somebody who believes in karma - <strong>The code you leave for others is the same code you will get from others</strong>. So I decided to add tests for my implementation right away.</p>\n\n<h3>1001 night</h3>\n\n<p>I created a new file for tests, in which I decided to cover previously implemented logic with a couple of tests. But right after I defined the <code>describe</code> &amp; <code>it</code> functions I got stuck. I realized that I had no idea how to mock sticking submission behavior.</p>\n\n<p>My attempts looked something like this:</p>\n<div class=\"highlight\"><pre><code class=\"language-js\"><span></span>    <span class=\"kd\">const</span> <span class=\"nx\">form</span> <span class=\"o\">=</span> <span class=\"nx\">getByRole</span><span class=\"p\">(</span><span class=\"s1\">'form'</span><span class=\"p\">);</span>\n    <span class=\"nx\">act</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"nx\">fireEvent</span><span class=\"p\">.</span><span class=\"nx\">keyDown</span><span class=\"p\">(</span><span class=\"nx\">form</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">keyCode</span><span class=\"o\">:</span> <span class=\"nx\">ENTER_KEY_CODE</span> <span class=\"p\">});</span>\n      <span class=\"nx\">fireEvent</span><span class=\"p\">.</span><span class=\"nx\">keyDown</span><span class=\"p\">(</span><span class=\"nx\">form</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">keyCode</span><span class=\"o\">:</span> <span class=\"nx\">ENTER_KEY_CODE</span> <span class=\"p\">});</span>\n      <span class=\"nx\">fireEvent</span><span class=\"p\">.</span><span class=\"nx\">keyUp</span><span class=\"p\">(</span><span class=\"nx\">form</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">keyCode</span><span class=\"o\">:</span> <span class=\"nx\">ENTER_KEY_CODE</span> <span class=\"p\">});</span>\n      <span class=\"nx\">fireEvent</span><span class=\"p\">.</span><span class=\"nx\">keyDown</span><span class=\"p\">(</span><span class=\"nx\">form</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">keyCode</span><span class=\"o\">:</span> <span class=\"nx\">ENTER_KEY_CODE</span> <span class=\"p\">});</span>\n      <span class=\"nx\">fireEvent</span><span class=\"p\">.</span><span class=\"nx\">keyDown</span><span class=\"p\">(</span><span class=\"nx\">form</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">keyCode</span><span class=\"o\">:</span> <span class=\"nx\">ENTER_KEY_CODE</span> <span class=\"p\">});</span>\n    <span class=\"p\">});</span>\n    <span class=\"k\">await</span> <span class=\"nx\">waitFor</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">onSubmit</span><span class=\"p\">).</span><span class=\"nx\">toBeCalledTimes</span><span class=\"p\">(</span><span class=\"mf\">1</span><span class=\"p\">));</span>\n</code></pre></div>\n<p>Or this:</p>\n<div class=\"highlight\"><pre><code class=\"language-js\"><span></span>    <span class=\"kd\">const</span> <span class=\"nx\">form</span> <span class=\"o\">=</span> <span class=\"nx\">getByRole</span><span class=\"p\">(</span><span class=\"s1\">'form'</span><span class=\"p\">);</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">event</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">KeyboardEvent</span><span class=\"p\">(</span><span class=\"s1\">'keydown'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n      <span class=\"nx\">keyCode</span><span class=\"o\">:</span> <span class=\"nx\">ENTER_KEY_CODE</span>\n    <span class=\"p\">});</span>\n    <span class=\"nx\">act</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"nx\">form</span><span class=\"p\">.</span><span class=\"nx\">dispatchEvent</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">);</span>\n      <span class=\"nx\">form</span><span class=\"p\">.</span><span class=\"nx\">dispatchEvent</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">);</span>\n      <span class=\"nx\">fireEvent</span><span class=\"p\">.</span><span class=\"nx\">keyUp</span><span class=\"p\">(</span><span class=\"nx\">form</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">keyCode</span><span class=\"o\">:</span> <span class=\"nx\">ENTER_KEY_CODE</span> <span class=\"p\">});</span>\n      <span class=\"nx\">form</span><span class=\"p\">.</span><span class=\"nx\">dispatchEvent</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">);</span>\n      <span class=\"nx\">form</span><span class=\"p\">.</span><span class=\"nx\">dispatchEvent</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n    <span class=\"k\">await</span> <span class=\"nx\">waitFor</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">onSubmit</span><span class=\"p\">).</span><span class=\"nx\">toBeCalledTimes</span><span class=\"p\">(</span><span class=\"mf\">2</span><span class=\"p\">));</span>\n</code></pre></div>\n<p>After running these tests, I expected that they would at least fail with incorrect called times count, but the result was worse - the <code>onSubmit</code> function wasn’t called at all. I tried tons of different combinations. So after my first unsuccessful attempt, I left it for a couple of days with the decision to push the code and create a draft PR stating my desire to add tests, but that I was stuck and still working on them, so maybe somebody would leave a useful comment that would help me figure out what was wrong with the logic for testing this feature.</p>\n\n<h3>…Three Days Grace… umm, later…</h3>\n\n<p>Opening the file with the tests, I decided to take a step back and rethink my idea for testing this feature. I started to think about which result I was trying to achieve and in which way so, in my mind, I was thinking like an ordinary user of the service - I keep holding the pressed <code>Enter</code> button and the form is submitted a couple of times. Then I started to think about what is going on under the hood when keeping that button pressed. I debugged my code a couple of times and understood that I do not care about the <code>keydown</code> event. The event that fires continuously when I’m holding the button is <code>submit</code>, the <code>keydown</code> event fires only once. After realizing that, everything fell into place. The solution was in the surface the whole time.</p>\n\n<p>The one thing that needed to be changed in the previous code was the <code>keydown</code> event. After changing it to <code>submit</code> my tests started to run successfully!</p>\n\n<h3>The final code</h3>\n<div class=\"highlight\"><pre><code class=\"language-js\"><span></span>    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'should submit form two times when pressing enter key, then unpressing it &amp; repeat'</span><span class=\"p\">,</span> <span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">onSubmit</span> <span class=\"o\">=</span> <span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nx\">fn</span><span class=\"p\">();</span>\n      <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">getByRole</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">render</span><span class=\"p\">(</span>\n        <span class=\"o\">&lt;</span><span class=\"nx\">Formik</span> <span class=\"nx\">initialValues</span><span class=\"o\">=</span> <span class=\"nx\">preventStickingSubmissions</span> <span class=\"nx\">onSubmit</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">onSubmit</span><span class=\"p\">}</span><span class=\"o\">&gt;</span>\n          <span class=\"o\">&lt;</span><span class=\"nx\">Form</span> <span class=\"nx\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Form&quot;</span> <span class=\"o\">/&gt;</span>\n        <span class=\"o\">&lt;</span><span class=\"err\">/Formik&gt;</span>\n      <span class=\"p\">);</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">form</span> <span class=\"o\">=</span> <span class=\"nx\">getByRole</span><span class=\"p\">(</span><span class=\"s1\">'form'</span><span class=\"p\">);</span>\n      <span class=\"nx\">act</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">fireEvent</span><span class=\"p\">.</span><span class=\"nx\">submit</span><span class=\"p\">(</span><span class=\"nx\">form</span><span class=\"p\">);</span>\n        <span class=\"nx\">fireEvent</span><span class=\"p\">.</span><span class=\"nx\">submit</span><span class=\"p\">(</span><span class=\"nx\">form</span><span class=\"p\">);</span>\n        <span class=\"nx\">fireEvent</span><span class=\"p\">.</span><span class=\"nx\">submit</span><span class=\"p\">(</span><span class=\"nx\">form</span><span class=\"p\">);</span>\n        <span class=\"nx\">fireEvent</span><span class=\"p\">.</span><span class=\"nx\">keyUp</span><span class=\"p\">(</span><span class=\"nx\">form</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">keyCode</span><span class=\"o\">:</span> <span class=\"nx\">ENTER_KEY_CODE</span> <span class=\"p\">});</span>\n        <span class=\"nx\">fireEvent</span><span class=\"p\">.</span><span class=\"nx\">submit</span><span class=\"p\">(</span><span class=\"nx\">form</span><span class=\"p\">);</span>\n        <span class=\"nx\">fireEvent</span><span class=\"p\">.</span><span class=\"nx\">submit</span><span class=\"p\">(</span><span class=\"nx\">form</span><span class=\"p\">);</span>\n        <span class=\"nx\">fireEvent</span><span class=\"p\">.</span><span class=\"nx\">keyUp</span><span class=\"p\">(</span><span class=\"nx\">form</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">keyCode</span><span class=\"o\">:</span> <span class=\"nx\">ENTER_KEY_CODE</span> <span class=\"p\">});</span>\n      <span class=\"p\">});</span>\n      <span class=\"k\">await</span> <span class=\"nx\">waitFor</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">onSubmit</span><span class=\"p\">).</span><span class=\"nx\">toBeCalledTimes</span><span class=\"p\">(</span><span class=\"mf\">2</span><span class=\"p\">));</span>\n    <span class=\"p\">});</span>\n</code></pre></div>\n<h3>Conclusion</h3>\n\n<p>Solving this problem reminded me of the main truth - <strong>there is no magic in software development</strong>. If I don’t understand why something happens in a certain way - the best choice, in that case, is diving deep into the source of the problem/implementation.</p>"
}