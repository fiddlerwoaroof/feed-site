{
  "title":"Using RxJava and Kotlin to Assemble an Android App",
  "date":"2021-08-31T14:47:50.000000-07:00",
  "author":null,
  "id":"https://dzone.com/articles/3162078",
  "link":"https://dzone.com/articles/using-rxjava-and-kotlin-to-assemble-an-android-app",
  "content":"<p dir=\"ltr\">Advanced portable applications accomplish a great deal. They convey information between various back-ends through network APIs. They store and recover information from the local database, process substantial amounts of media, and communicate with web sockets. It's difficult to monitor all the data from various asynchronous data sources, particularly realizing that the users are used to a simple, fluid user experience.</p>\n<p dir=\"ltr\">At the beginning of Android, designers utilized the class AsyncTask from the Android system to accomplish everything outside the primary UI thread. Although async tasks did what they should, utilizing them wasn't the most charming experience in light of all the standard code you would eventually end up writing due to adaptability issues. If you had a further developed use case (i.e., introducing information from a neighborhood data set on the UI while making an API solicitation to get the most recent information from the backend, refreshing the nearby data set, and introducing the most recent information on the UI), things would quickly spiral. You would wind up with code that is difficult to comprehend and keep up with.</p>"
}