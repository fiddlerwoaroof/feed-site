{
  "title":"Taming the Moose: Method Modifiers Instead of Overrides in Object-Oriented Perl",
  "date":"2021-08-31T12:00:37.000000-07:00",
  "author":null,
  "id":"https://dzone.com/articles/3163096",
  "link":"https://dzone.com/articles/taming-the-moose-method-modifiers-instead-of-overr",
  "content":"<div>\n <p>Last month <a href=\"https://phoenixtrap.com/2021/07/13/taming-the-moose-picking-the-best-way-to-subclass-perl-methods/\">I wrote about using Moose's <code>override</code> function</a> to, well, override a superclass's method. <a href=\"https://chris.prather.org/\">Chris Prather</a> on the <a href=\"https://kiwiirc.com/nextclient/#irc://irc.perl.org/moose\">#moose IRC channel</a> suggested soon after that the <a href=\"https://metacpan.org/dist/Moose/view/lib/Moose/Manual/MethodModifiers.pod#Around-modifiers\"><code>around</code> method modifier</a> (or its little sisters <a href=\"https://metacpan.org/dist/Moose/view/lib/Moose/Manual/MethodModifiers.pod#Before-and-after-Modifiers\"><code>before</code> and <code>after</code></a>) might be a better choice if you're also calling the original method inside. He noted that &quot;at a minimum <code>override</code> only works if you're subclassing, <code>around</code> will apply to composing methods too.&quot;</p>\n <p>His point was that when you decide to compose <a href=\"https://metacpan.org/pod/Moose::Manual::Roles\">roles</a> (also know as <a href=\"https://en.wikipedia.org/wiki/Trait_(computer_programming)\">traits</a>) instead of or in addition to more traditional inheritance, <code>override</code> simply doesn't work: only a method modifier will do. (And as <a href=\"https://haarg.org/\">Graham Knop</a> and <a href=\"https://github.com/karenetheridge\">Karen Etheridge</a> later remarked on IRC, <code>override</code> isn't even an option if you're using <a href=\"https://metacpan.org/pod/Moo\">Moo</a> as an alternative to Moose.)</p></div>"
}