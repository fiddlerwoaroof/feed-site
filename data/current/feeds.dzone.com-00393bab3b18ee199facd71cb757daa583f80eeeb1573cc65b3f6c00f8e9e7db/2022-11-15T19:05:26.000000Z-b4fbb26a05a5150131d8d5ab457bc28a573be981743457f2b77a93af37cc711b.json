{
  "title":"Integration Tests With Arquillian Extensions on the Payara Platform",
  "date":"2022-11-15T19:05:26.000000Z",
  "author":null,
  "id":"http://dzone.com/articles/3285622",
  "link":"http://dzone.com/articles/integration-tests-with-arquillian-extensions-on-the-payara-platform",
  "content":"<p>Arquillian is one of the most classical integration test frameworks for <a href=\"https://dzone.com/articles/jvm-architecture-explained\">JVM (Java Virtual Machine)</a>-based applications, currently maintained by Red Hat. Its main particularity consists in the fact that, in order to facilitate integration testing through the <code>maven</code> lifecycle, it allows the deployment of the tested applications on an embedded, managed, or remote <a href=\"https://dzone.com/articles/getting-started-with-jakarta-ee-9-hello-world\">Jakarta EE</a>-compliant container, like Payara.</p>\n<h2>From Manual To Automated Integration Testing</h2>\n<p>Historically speaking, the <a href=\"https://dzone.com/articles/integration-testing-what-it-is-and-how-to-do-it-ri\">integration testing process</a> used to be a highly manual activity, consisting of deploying the application on the application server before running the test cases. This is especially due to the utilization of building tools like <code>maven</code> which default lifecycle provisions the integration test phase, named <code>verify</code>, just before <code>install</code> and <code>deploy</code>. This means that in-container integration tests cannot be performed in an out-of-the-box manner with such tools, because they are run before the deployment phase, despite the fact that, in order to be run, they require applications to be deployed. So, we find ourselves in a kind of circular problem here: in order to test the application we need to deploy it first, and, in order to deploy it, we need to test it first. This is why integration tests were traditionally performed manually.</p>"
}