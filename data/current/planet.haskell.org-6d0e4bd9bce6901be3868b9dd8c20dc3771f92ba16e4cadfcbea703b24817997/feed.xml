<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:planet="http://planet.intertwingly.net/" xmlns:indexing="urn:atom-extension:indexing" indexing:index="no"><access:restriction xmlns:access="http://www.bloglines.com/about/specs/fac-1.0" relationship="deny"/>
  <title>Planet Haskell</title>
  <updated>2021-09-01T08:04:41Z</updated>
  <generator uri="http://intertwingly.net/code/venus/">Venus</generator>
  <author>
    <name>Haskell Admin Team</name>
    <email>planet@haskell.org</email>
  </author>
  <id>http://planet.haskell.org/atom.xml</id>
  <link href="http://planet.haskell.org/atom.xml" rel="self" type="application/atom+xml">
  <link href="http://planet.haskell.org/" rel="alternate">

  <entry xml:lang="en">
    <id>http://www.joachim-breitner.de/blog/783-A_Candid_explainer__Safe_higher-order_upgrades</id>
    <link href="http://www.joachim-breitner.de/blog/783-A_Candid_explainer__Safe_higher-order_upgrades" rel="alternate" type="text/html">
    <title xml:lang="en">A Candid explainer: Safe higher-order upgrades</title>
    <summary type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p><em>This is the second post in a <a href="https://www.joachim-breitner.de/blog/782-A_Candid_explainer__The_rough_idea">series about the inteface description language Candid</a>.</em></p>
<h2 id="safe-upgrades">Safe upgrades</h2>
<p>A central idea behind Candid is that services evolve over time, and so also their interfaces evolve. As they do, it is desirable to keep the interface usable by clients who have not been updated. In particular on a blockchainy platform like the Internet Computer, where some programs are immutable and <em>cannot</em> be changed to accommodate changes in the interface of the services they use, this is of importance.</p>
<p>Therefore, Candid defines which changes to an interface are guaranteed to be backward compatible. Of course it’s compatible to add new methods to a service, but <em>some</em> changes to a method signature can also be ok. For example, changing</p>
<pre><code>service A1 : {
  get_value : (variant { current; previous : nat })
    -&gt; (record { value : int; last_change : nat })
}</code></pre>
<p>to</p>
<pre><code>service A2 : {
  get_value : (variant { current; previous : nat; default })
    -&gt; (record { value : int; last_change : nat; committed : bool })
}</code></pre>
<p>is fine: It doesn’t matter that clients that still use the old interface don’t know about the new constructor of the argument variant. And the extra field in the result record will silently be ignored by old clients.</p>
<p>In the Candid spec, this relation is written as <code>A2 &lt;: A1</code> (note the order!), and the formal footing this builds on is <em>subtyping</em>. We thus say that “it is safe to upgrade a service to a subtype”, and that <code>A2</code>’s interface is a subtype of <code>A1</code>’s.</p>
<p>In small examples, I often use <code>nat</code> and <code>int</code>, because every <code>nat</code> is also a <code>int</code>, but some <code>int</code> values are not not <code>nat</code> values, namely the negative ones. We say <code>nat</code> is a subtype of <code>int</code>, <code>nat &lt;: int</code>. So a function that in the first returns a <code>int</code> can in the new version return a <code>nat</code> without breaking old clients. But the other direction doesn’t work: If the old version’s method had a return type of <code>nat</code>, then changing that to <code>int</code> would be a breaking change, as old clients would not be prepared to handle negative numbers.</p>
<p>Note that arguments of function types follow different rules. In fact, the rules are simply turned around, and in argument position (also called “negative position”), we can evolve the interface to accept <em>supertypes</em>. Concretely, a function that originally expected an <code>nat</code> can be changed to expect an <code>int</code>, but the other direction doesn’t work, because there might still be old clients around that send negative numbers. This reversing-of-the-rules is called <em>contravariance</em>.</p>
<p>The vision is that the developer’s tooling will warn the developer before they upgrade the code of a running service to a type that is not a subtype of the old interface.</p>
<p>Let me stress, though, that all this is about not breaking existing clients that use the old interface. It does <em>not</em> mean that a client developer who fetches the new interface for your service won’t have to change their <em>code</em> to make his programs compile again.</p>
<h2 id="higher-order-composition">Higher order composition</h2>
<p>So far, we considered the simple case of one service with a bunch of clients, i.e. the “first order” situation. Things get much more interesting if we have multiple services that are composed, and that pass around references to each other, and we <em>still</em> want everything to be nicely typed and never fail even as we upgrade services.</p>
<p>Therefore, Candid’s type system can express that a service’s method expects or a returns a <em>reference</em> to another service or method, and the <em>type</em> that this service or method should have. For example</p>
<pre><code>service B : { add_listener : (text, func (int) -&gt; ()) -&gt; () }</code></pre>
<p>says that the service with interface <code>B</code> has a method called <code>add_listener</code> which takes two arguments, a plain value of type text and a reference to a function that itself expects a <code>int</code>-typed argument.</p>
<p>The contravariance of the subtyping rules explained above also applies to the types of these function reference. And because the <code>int</code> in the above type is on the left of <em>two</em> function arrows, the subtyping rule direction flips twice, and it is therefore safe to upgrade the service to accept the following interface:</p>
<pre><code>service B : { add_listener : (text, func (nat) -&gt; ()) -&gt; () }</code></pre>
<h2 id="soundness-theorem-and-coq-proof">Soundness theorem and Coq proof</h2>
<p>The combination of these higher order features and the safe upgrade mechanism is maybe the unique selling point of Candid, but also what made its design quite tricky sometimes. And although the conventional subtyping rules work well, we wanted to do some less conventional things (more on that below), and more than once thought we had a good solution, only to notice that it did not hold water in complicated higher-order cases.</p>
<p>But what does it mean to hold water? I felt the need to precisely define a soundness criteria for higher order interface description languages, which you can find in the document <a href="https://github.com/dfinity/candid/blob/master/spec/IDL-Soundness.md">An IDL Soundness Proposition</a>. This is a general framework which you can instantiate with your concrete IDL language and rules, and then it tells you what you have to prove to consider your language to be sound. Intuitively, it simulates all possible ways in which services can be defined and upgraded, and in which they can pass around references to each other, and the soundness property is that then that for all messages sent between services, they can always be understood.</p>
<p>The document also shows, in general, that any system that builds on “canonical subtyping” in sound, as expected. That is still a generic theorem that you can instantiate with a concrete system, but now there is less to do.</p>
<p>Because these proofs can get tricky in corner cases, it is valuable to mechanize them in an interactive theorem prover and have the computer check the proofs. So I have created a <a href="https://github.com/dfinity/candid/tree/master/coq">Coq formalization</a> that defines the <a href="https://github.com/dfinity/candid/blob/master/coq/IDLSoundness.v">soundness criteria</a>, including the reduction to canonical subtyping. It also defines <a href="https://github.com/dfinity/candid/blob/master/coq/MiniCandid.v">MiniCandid, a greatly simplified variant of Candid</a>, proves various properties about it (transitivity etc.) and finally instantiates the soundness theorem.</p>
<p>I am particularly fond of the use of coinduction to model the equirecursive types, and the use of <a href="https://www.joachim-breitner.de/blog/777-Named_goals_in_Coq">named cases</a>, as we know them from Isabelle, to make the proofs a bit more readable and maintainable.</p>
<p>I am less fond of how much work it seems to be to extend MiniCandid with more of Candid’s types. Already <a href="https://github.com/dfinity/candid/pull/272">adding <code>vec</code></a> was more work than it’s worth it, and I defensively blame Coq’s not-so-great support for nested recursion.</p>
<p><em>The soundness relies on subtyping, and that is all fine and well as long as we stick to canonical rules. Unfortunately, practical considerations force us to deviate from these a bit, as we will see in the next post of this series.</em></p></div>
    </summary>
    <updated>2021-08-30T21:21:38Z</updated>
    <published>2021-08-30T21:21:38Z</published>
    <author>
      <name>Joachim Breitner</name>
      <email>mail@joachim-breitner.de</email>
    </author>
    <source>
      <id>http://www.joachim-breitner.de//blog</id>
      <logo>http://joachim-breitner.de/avatars/avatar_128.png</logo>
      <link href="http://www.joachim-breitner.de//blog" rel="alternate" type="text/html">
      <link href="http://www.joachim-breitner.de/blog_feed.rss" rel="self" type="application/rss+xml">
      <subtitle xml:lang="en">Joachim Breitners Denkblogade</subtitle>
      <title xml:lang="en">nomeataâ€™s mind shares</title>
      <updated>2021-08-30T22:01:14Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://tweag.io/blog/2021-08-30-icfp5/</id>
    <link href="https://tweag.io/blog/2021-08-30-icfp5/" rel="alternate" type="text/html">
    <title>Daily ICFP: Day 5</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><h1>Daily ICFP</h1>
<p>Several Tweagers all agreed to gather notes here about our
<a href="https://icfp21.sigplan.org/">ICFP</a> (International Conference on Functional
Programming) experiences.</p>
<p>Other posts in this series:</p>
<ul>
<li><a href="https://www.tweag.io/blog/2021-08-23-icfp0/">ICFP - Day 0</a></li>
<li><a href="https://www.tweag.io/blog/2021-08-24-icfp1/">ICFP - Day 1</a></li>
<li><a href="https://www.tweag.io/blog/2021-08-25-icfp2/">ICFP - Day 2</a></li>
<li><a href="https://www.tweag.io/blog/2021-08-26-icfp3/">ICFP - Day 3</a></li>
<li><a href="https://www.tweag.io/blog/2021-08-27-icfp4/">ICFP - Day 4</a></li>
</ul>
<h2>Day 5 - Friday</h2>
<p>These notes follow Arnaud, Noon and Richard through their day at ICFP,
roughly in order. (The talks are not publicly posted at the time
of publication of this post, but we expect they will be over the
coming weeks.)</p>
<p><em>Arnaud</em> — <a href="https://icfp21.sigplan.org/details/ocaml-2021-papers/9/Parafuzz-Coverage-guided-Property-Fuzzing-for-Multicore-OCaml-programs">Parafuzz: Coverage-guided Property Fuzzing for Multicore OCaml programs</a>: this is in the context of multicore OCaml (multicore OCaml has algebraic effects). The authors use algebraic effects to abstract over concurrency primitives, so that they can test concurrency property with the AFL fuzzer (AFL tries generate random inputs, here random schedules, while trying very hard to trigger code paths that were not covered by previous runs).</p>
<p><em>Arnaud</em> — <a href="https://icfp21.sigplan.org/details/ocaml-2021-papers/13/Wibbily-Wobbly-Timey-Camly">Wibbily Wobbly Timey Camly</a>: an OCaml library to deal with time, timezones, time intervals, etc… The talk focused a lot on finding out whether a particular date belong to a set of dates. These sets are built by assembling constraints. It’s an unusual, but very convincing design.</p>
<p><em>Noon</em> — FARM starts today! I’m so excited; I’ve wanted to attend FARM
for <em>years</em>, and this is my first opportunity!</p>
<p><em>Noon</em> — <a href="https://icfp21.sigplan.org/details/farm-2021-papers/2/mimium-a-self-extensible-programming-language-for-sound-and-music">mimium: a self-extensible programming language for sound and music</a></p>
<ul>
<li>Nice language that has scheduling and state.</li>
<li>Has a focus on composition over live-coding (c.f. extempore, say.)</li>
</ul>
<p><em>Noon</em> — Unfortunately, the next speaker wasn’t able to make it, so there was no talk.</p>
<p><em>Noon</em> — Bit disappointed that FARM and Haskell Symposium are on at the same time, I’ve
ended up attending Haskell, and I’ll hope to watch FARM at a later point.</p>
<p><a href="https://icfp21.sigplan.org/details/haskellsymp-2021/5/Practical-Normalization-by-Evaluation-for-EDSLs">Practical Normalization by Evaluation for EDSLs</a>, by Nachiappan Villiappan, Alejandro Russo, and Sam Lindley</p>
<p><em>Noon</em></p>
<ul>
<li>Prefer shallow over deep embedding to piggy-back features from the host language.</li>
<li>Downside is we’ve lost syntax for the operations.</li>
<li>Maybe one way is to interconvert between expression representation and host (?) representation</li>
<li>Doesn’t always work; sometimes there’s no unique choice.</li>
</ul>
<p><em>Richard</em></p>
<p>I had heard the term “normalization by evaluation” a number of times in the
literature, but I never really understood it until watching this talk: the
idea is to take a bit of syntax, interpret it into a semantic domain (that is,
reinterpret it as an expression in the host language) and then inject the
result back into the encoding of the syntax of the object language. The only
problem is, now that I’ve described it thusly, it feels vacuous once again:
what is the difference between “normalization by evaluation” and just
evaluating terms in your object language? The term keeps cropping up, but I
don’t really get it.</p>
<p>Let me think a bit more about what the words mean: normalization is the
process of finding a normal form, where a normal form is (generally) a
distinguished member of an equivalence class, useful for checking membership
in the equivalence class. That is, if we want to identify all semantically
equal expressions, we want to notice that <code class="language-text">1 + 1</code> and <code class="language-text">2</code> are semantically
equal; thus, they are in the same equivalence class. A good way to notice this
is to choose one distinguished member of each equivalence class: this is the
normal form. For <code class="language-text">1 + 1</code> and <code class="language-text">2</code>, <code class="language-text">2</code> will be this normal form. Evaluation is
a separate process by which we take an expression and simplify it according to
well-established rules of evaluation.</p>
<p>Putting this together, we might surmise that “normalization by evaluation” is
an approach for checking semantic equality of expressions, using this recipe:</p>
<blockquote>
<p>To determine whether <code class="language-text">e1</code> and <code class="language-text">e2</code> are equal:</p>
</blockquote>
<blockquote>
<ol>
<li>Evaluate <code class="language-text">e1</code> to yield value <code class="language-text">v1</code>.</li>
<li>Evaluate <code class="language-text">e2</code> to yield value <code class="language-text">v2</code>.</li>
<li>Declare that <code class="language-text">e1</code> is semantically equal to <code class="language-text">e2</code> iff <code class="language-text">v1</code> is syntactically equal to <code class="language-text">v2</code>.</li>
</ol>
</blockquote>
<p>This process does not really care what <code class="language-text">v1</code> and <code class="language-text">v2</code> are — just whether
they’re syntactically equal. So maybe that really is the essence of
normalization by evaluation. And I’ve probably struggled to understand this
because this process seems “obvious” to me, and so I cannot really imagine
another way of checking semantic equality of expressions.</p>
<p>In the end, I’m not sure whether this definition of
normalization-by-evaluation is correct, and I’m afraid I got stuck on this
during the talk and did not extract other useful bits.</p>
<p><em>Noon</em> — <a href="https://icfp21.sigplan.org/details/haskellsymp-2021/10/Safe-Mutation-with-Algebraic-Effects">Safe Mutation with Algebraic Effects</a></p>
<ul>
<li>Concurrency is frustrating; we don’t want non-determinism!</li>
<li>Maybe algebraic effects can help?</li>
<li>Idea: Annotate the resources and modify these to control what can be done.</li>
<li>It all works!</li>
</ul>
<p><em>Richard</em> — <a href="https://icfp21.sigplan.org/details/haskellsymp-2021/7/Seeking-Stability-by-being-Lazy-and-Shallow-Lazy-and-shallow-instantiation-is-user-f">Seeking Stability by being Lazy and Shallow: Lazy and shallow instantiation is user friendly</a>, by Gert-Jan Bottu and Richard A. Eisenberg.</p>
<p>I will not comment further on this talk other than to include this shameless
plug, and to publicly state how much I enjoyed working with former Tweag
intern Gert-Jan on developing this paper. I do hope to submit a proposal
requesting lazy instantiation in future versions of GHC.</p>
<p><em>Noon</em> — I had wanted to watch the <a href="https://icfp21.sigplan.org/details/haskellsymp-2021/13/Linear-Haskell-Today-and-Tomorrow">Linear Haskell, Today and Tomorrow</a>
talk, but it was scheduled alongside ShutdownPL (<em>and</em> FARM); I really want to support
ICFPs efforts for more DEI (diversity, equity, and inclusion) content so I feel compelled to attend ShutdownPL; I’ll have
to catch the other talks at a later time.</p>
<p><em>Richard</em> — <a href="https://icfp21.sigplan.org/details/haskellsymp-2021/13/Linear-Haskell-Today-and-Tomorrow">Linear Haskell, Today and Tomorrow</a>, keynote by former Tweager Jean-Philippe Bernardy</p>
<p>This is a fine keynote describing the state of linear types in Haskell today
and sketching out how we can extract more from them in the future. In
particular, it describes the long-term plan for supporting pure
mutable-in-place structures, as long as we can verify statically (via linear
types) that there are never two live copies of the structures.</p>
<p><em>Noon</em> — <a href="https://icfp21.sigplan.org/details/icfp-2021-social-events/12/ShutdownPL">ShutdownPL - Seeking Good Trouble Before It Goes Bad: Anti-Jerk Systems in STEM</a></p>
<ul>
<li>This was a bold and strong talk. The main discussion was around the need to
address problematic people at the <em>end</em> of the so-called “pipeline problem” in
STEM; i.e. there’s no point bringing people in to a community if they are just
going to leave because they are not welcomed.</li>
<li>So, one of the key ideas I got from this talk was to consider why people
<em>leave</em>. I think this is a very powerful concept and often quite hard to do.</li>
<li>Another key idea from this talk was highlighting the damage done to
communities by supporting, publicly, people known to be engaging in
problematic behaviour. While I think it’s perhaps very obvious, it also can
be quite subtle; the talk goes into a discussion of legal issues some of the
community leaders, in the specific example, were facing, and the cost
of speaking up; which is often very high; especially high if you are not in a
privileged position.</li>
<li>One of the most practical ideas that I came out of this talk with, is this:
Survey people who are in/leaving your community, and find out what they are
thinking. It doesn’t have to be entirely negative; it could also solicit
comments on things that are going well, or new ideas, etc. But one idea that
came up, in discussions with my partner afterwards, was the idea of what I’m
calling a “Living Code of Conduct”: It’s a mechanism for flagging behaviour
(good or bad!) and aligning it to a specific code-of-conduct item managed by
the community. It’s probably best done anonymously; but doesn’t have to be;
there could be lots of variants. In any case, if you’re at all interested in
this idea, do <a href="mailto:noon.vandersilk@tweag.io">reach out to me</a>; I’d love to chat more about it!</li>
</ul>
<p><em>Noon</em> — <a href="https://icfp21.sigplan.org/details/haskellsymp-2021/1/Deadlock-Free-Session-Types-in-Linear-Haskell">Deadlock-Free Session Types in Linear Haskell</a></p>
<ul>
<li>Really enjoying the presentations by Wen; she has a very engaging style.</li>
<li>First time I’ve heard about Session types, but I think I got a good feeling.</li>
<li>Overall I really enjoyed it!</li>
</ul>
<p><em>Noon</em> — <a href="https://icfp21.sigplan.org/details/haskellsymp-2021/2/Evaluating-Linear-Functions-to-Symmetric-Monoidal-Categories">Evaluating Linear Functions to Symmetric Monoidal Categories</a></p>
<ul>
<li>Box and wire diagrams.</li>
<li>Symmetric Monoidal Categories (SMCs).</li>
<li>Issue with Arrows is that they don’t represent these box-and-write diagrams very well; and in particular fail at the parallelisation.</li>
<li>Idea is to use arrows to implement the an SMC, so that they are easier to work with.</li>
<li>Perhaps has applications to quantum computing!</li>
<li>So of course I’m interested, and will try and do a bit more reading.</li>
</ul>
<h3>Summary</h3>
<p><em>Noon</em> —</p>
<ul>
<li>Overall, my experience at ICFP has been great.</li>
<li>I feel very full of FP/Type theory knowledge! I feel like I learned a lot
of new words and concepts that I will inevitably have to google again, but
now they’ll spark a pleasant memory in my mind :)</li>
<li>I met several very friendly people, and also watched many lovely talks
that I enjoyed; hopefully some friendly faces from ICFP will be appearing on
the <a href="https://www.compositional.fm/">Compositional podcast</a> in the next few months!</li>
<li>Thanks to the organisers and all the speakers for their hard work!</li>
</ul></div>
    </summary>
    <updated>2021-08-30T00:00:00Z</updated>
    <published>2021-08-30T00:00:00Z</published>
    <source>
      <id>https://tweag.io</id>
      <author>
        <name>Tweag I/O</name>
      </author>
      <link href="https://tweag.io" rel="alternate" type="text/html">
      <link href="http://www.tweag.io/rss.xml" rel="self" type="application/rss+xml">
      <subtitle>Scale your engineering power. We enable deep-tech startups to achieve
their vision, from research to product delivery.</subtitle>
      <title>Tweag - Engineering blog</title>
      <updated>2021-08-31T14:07:39Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>https://www.fpcomplete.com/blog/axum-hyper-tonic-tower-part1/</id>
    <link href="https://www.fpcomplete.com/blog/axum-hyper-tonic-tower-part1/" rel="alternate" type="text/html">
    <title xml:lang="en">Combining Axum, Hyper, Tonic, and Tower for hybrid web/gRPC apps: Part 1</title>
    <content type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p>I've played around with various web server libraries and frameworks in Rust, and found various strengths and weaknesses with them. Most recently, I put together an FP Complete solution called Zehut (which I'll blog about another time) that needed to combine a web frontend and gRPC server. I used Hyper, Tonic, and a minimal library I put together called <a href="https://github.com/snoyberg/routetype-rs">routetype</a>. It worked, but I was left underwhelmed. Working directly with Hyper, even with the minimal <code>routetype</code> layer, felt too ad-hoc.</p>
<p>When I recently saw the release of <a href="https://lib.rs/crates/axum">Axum</a>, it seemed to be speaking to many of the needs I had, especially calling out Tonic support. I decided to make an experiment of replacing the direct Hyper+<code>routetype</code> usage I'd used with Axum. Overall the approach works, but (like the <code>routetype</code> work I'd already done) involved some hairy business around the Hyper and Tower APIs.</p>
<p>I've been meaning to write some blog post/tutorial/experience report for Hyper+Tower for a while now. So I decided to take this opportunity to step through these four libraries (Tower, Hyper, Axum, and Tonic), with the specific goal in mind of creating hybrid web/gRPC apps. It turned out that there was more information here than I'd anticipated. To make for easier reading, I've split this up into a four part blog post series:</p>
<ol>
<li>Today's post: overview of Tower</li>
<li>Understanding Hyper, and first experiences with Axum</li>
<li>Demonstration of Tonic for a gRPC client/server</li>
<li>How to combine Axum and Tonic services into a single service</li>
</ol>
<p>Let's dive in!</p>
<form action="https://api.follow.it/subscription-form/MG0vdVFGRkdNWGxraFBKd0QwUjdZSzdQOCtUOHlnUmNkRGptcUhLTXZnSnJHd043dnM4dHBpa3hVa3BJZ2tWY3JEbWp5UTdMVjRQMXgrUWFlejBUOUdLenhsMGdLQjNOSUZlTUhBNy9tQWhTUTFDSnM1WXRyQnF2Q0FnNXIrRW58RHJVYUNuQmV5dVFQSFl4azJnLzM5eDcyZ0JVTHl2clp2TmQ0ajh0WmFUaz0=/8" class="blog-subscribe" method="post" target="_blank">
  <input name="email" type="email">
  <button class="btn btn-primary">
    Subscribe to our blog via email
  </button>
  <small>Email subscriptions come from our <a href="https://www.fpcomplete.com/feed/" target="_blank">Atom feed</a> and are handled by <a href="https://follow.it" target="_blank">follow.it</a>. You will only receive notifications of blog posts, and can unsubscribe any time.</small>
</form>
<h2 id="what-is-tower">What is Tower?</h2>
<p>The first stop on our journey is the <a href="https://lib.rs/crates/tower">tower crate</a>. To quote the docs, which state this succinctly:</p>
<blockquote>
<p>Tower provides a simple core abstraction, the <code>Service</code> trait, which represents an asynchronous function taking a request and returning either a response or an error. This abstraction can be used to model both clients and servers.</p>
</blockquote>
<p>This sounds fairly straightforward. To express it in Haskell syntax, I'd probably say <code>Request -&gt; IO Response</code>, leveraging the fact that <code>IO</code> handles both error handling and asynchronous I/O. But the <code>Service</code> trait is necessarily more complex than that simplified signature:</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #586e75;">pub </span><span style="color: #268bd2;">trait </span><span style="color: #b58900;">Service</span><span style="color: #657b83;">&lt;Request&gt; {
    </span><span style="color: #268bd2;">type </span><span style="color: #b58900;">Response</span><span style="color: #657b83;">;
    </span><span style="color: #268bd2;">type </span><span style="color: #b58900;">Error</span><span style="color: #657b83;">;

    </span><span style="color: #93a1a1;">// This is what it says in the generated docs
    </span><span style="color: #268bd2;">type </span><span style="color: #b58900;">Future</span><span style="color: #657b83;">: Future;

    </span><span style="color: #93a1a1;">// But this more informative piece is in the actual source code
    </span><span style="color: #268bd2;">type </span><span style="color: #b58900;">Future</span><span style="color: #657b83;">: Future&lt;Output = </span><span style="color: #859900;">Result</span><span style="color: #657b83;">&lt;</span><span style="color: #268bd2;">Self::</span><span style="color: #657b83;">Response, </span><span style="color: #268bd2;">Self::</span><span style="color: #657b83;">Error&gt;&gt;;

    </span><span style="color: #268bd2;">fn </span><span style="color: #b58900;">poll_ready</span><span style="color: #657b83;">(
        </span><span style="color: #859900;">&amp;</span><span style="color: #586e75;">mut </span><span style="color: #268bd2;">self</span><span style="color: #657b83;">,
        </span><span style="color: #268bd2;">cx</span><span style="color: #657b83;">: </span><span style="color: #859900;">&amp;</span><span style="color: #586e75;">mut </span><span style="color: #657b83;">Context&lt;'</span><span style="color: #859900;">_</span><span style="color: #657b83;">&gt;
    ) -&gt; Poll&lt;</span><span style="color: #859900;">Result</span><span style="color: #657b83;">&lt;(), </span><span style="color: #268bd2;">Self::</span><span style="color: #657b83;">Error&gt;&gt;;
    </span><span style="color: #268bd2;">fn </span><span style="color: #b58900;">call</span><span style="color: #657b83;">(</span><span style="color: #859900;">&amp;</span><span style="color: #586e75;">mut </span><span style="color: #268bd2;">self</span><span style="color: #657b83;">, </span><span style="color: #268bd2;">req</span><span style="color: #657b83;">: Request) -&gt; </span><span style="color: #268bd2;">Self::</span><span style="color: #657b83;">Future;
}
</span></code></pre>
<p><code>Service</code> is a trait, parameterized on the types of <code>Request</code>s it can handle. There's nothing specific about HTTP in Tower, so <code>Request</code>s may be lots of different things. And even within Hyper, an HTTP library leveraging Tower, we'll see that there are at least two different types of <code>Request</code> we care about.</p>
<p>Anyway, two of the associated types here are straightforward: <code>Response</code> and <code>Error</code>. Combining the parameterized <code>Request</code> with <code>Response</code> and <code>Error</code>, we basically have all the information we care about for a <code>Service</code>.</p>
<p>But it's <em>not</em> all the information Rust cares about. To provide for asynchronous calls, we need to provide a <code>Future</code>. And the compiler needs to know the type of the <code>Future</code> we'll be returning. This isn't really useful information to use as a programmer, but there are <a href="https://lib.rs/crates/async-trait">plenty of pain points already</a> around <code>async</code> code in traits.</p>
<p>And finally, what about those last two methods? They are there to allow the <code>Service</code> itself to be asynchronous. It took me quite a while to fully wrap my head around this. We have two different components of async behavior going on here:</p>
<ul>
<li>The <code>Service</code> may not be immediately ready to handle a new incoming request. For example (coming from <a href="https://docs.rs/tower-service/0.3.1/src/tower_service/lib.rs.html#244-257">the docs on <code>poll_ready</code></a>), the server may currently be at capacity. You need to check <code>poll_ready</code> to find out whether the <code>Service</code> is ready to accept a new request. Then, when it's ready, you use <code>call</code> to initiate handling of a new <code>Request</code>.</li>
<li>The handling of the request itself is <em>also</em> async, returning a <code>Future</code>, which can be polled/awaited.</li>
</ul>
<p>Some of this complexity can be hidden away. For example, instead of giving a concrete type for <code>Future</code>, you can use a trait object (a.k.a. type erasure). Stealing again from the docs, the following is a perfectly valid associated type for <code>Future</code>:</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #268bd2;">type </span><span style="color: #b58900;">Future </span><span style="color: #657b83;">= Pin&lt;</span><span style="color: #859900;">Box</span><span style="color: #657b83;">&lt;dyn Future&lt;Output = </span><span style="color: #859900;">Result</span><span style="color: #657b83;">&lt;</span><span style="color: #268bd2;">Self::</span><span style="color: #657b83;">Response, </span><span style="color: #268bd2;">Self::</span><span style="color: #657b83;">Error&gt;&gt;&gt;&gt;;
</span></code></pre>
<p>However, this incurs some overhead for dynamic dispatch.</p>
<p>Finally, these two layers of async behavior are often unnecessary. Many times, our server is <em>always</em> ready to handle a new incoming <code>Request</code>. In the wild, you'll often see code that hard-codes the idea that a service is always ready. To quote from those docs for the final time in this section:</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #268bd2;">fn </span><span style="color: #b58900;">poll_ready</span><span style="color: #657b83;">(</span><span style="color: #859900;">&amp;</span><span style="color: #586e75;">mut </span><span style="color: #268bd2;">self</span><span style="color: #657b83;">, </span><span style="color: #268bd2;">cx</span><span style="color: #657b83;">: </span><span style="color: #859900;">&amp;</span><span style="color: #586e75;">mut </span><span style="color: #657b83;">Context&lt;'</span><span style="color: #859900;">_</span><span style="color: #657b83;">&gt;) -&gt; Poll&lt;</span><span style="color: #859900;">Result</span><span style="color: #657b83;">&lt;(), </span><span style="color: #268bd2;">Self::</span><span style="color: #657b83;">Error&gt;&gt; {
    Poll::Ready(</span><span style="color: #859900;">Ok</span><span style="color: #657b83;">(()))
}
</span></code></pre>
<p>This isn't saying that request handling is synchronous in our <code>Service</code>. It's saying that request <em>acceptance</em> always succeeds immediately.</p>
<p>Going along with the two layers of async handling, there are similarly two layers of error handling. Both accepting the new request may fail, and processing the new request may fail. But as you can see in the code above, it's possible to hard-code something which always succeeds with <code>Ok(())</code>, which is fairly common for <code>poll_ready</code>. When processing the request itself also cannot fail, using <a href="https://doc.rust-lang.org/stable/std/convert/enum.Infallible.html"><code>Infallible</code></a> (and eventually <a href="https://doc.rust-lang.org/stable/std/primitive.never.html">the <code>never</code> type</a>) as the <code>Error</code> associated type is a good call.</p>
<h2 id="fake-web-server">Fake web server</h2>
<p>That was all relatively abstract, which is part of the problem with understanding Tower (at least for me). Let's make it more concrete by implementing a fake web server and fake web application. My <code>Cargo.toml</code> file looks like:</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #657b83;">[</span><span style="color: #b58900;">package</span><span style="color: #657b83;">]
</span><span style="color: #268bd2;">name </span><span style="color: #657b83;">= </span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">learntower</span><span style="color: #839496;">&quot;
</span><span style="color: #268bd2;">version </span><span style="color: #657b83;">= </span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">0.1.0</span><span style="color: #839496;">&quot;
</span><span style="color: #268bd2;">edition </span><span style="color: #657b83;">= </span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">2018</span><span style="color: #839496;">&quot;

</span><span style="color: #657b83;">[</span><span style="color: #b58900;">dependencies</span><span style="color: #657b83;">]
</span><span style="color: #268bd2;">tower </span><span style="color: #657b83;">= { </span><span style="color: #268bd2;">version </span><span style="color: #657b83;">= </span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">0.4</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">, </span><span style="color: #268bd2;">features </span><span style="color: #657b83;">= [</span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">full</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">] }
</span><span style="color: #268bd2;">tokio </span><span style="color: #657b83;">= { </span><span style="color: #268bd2;">version </span><span style="color: #657b83;">= </span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">1</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">, </span><span style="color: #268bd2;">features </span><span style="color: #657b83;">= [</span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">full</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">] }
</span><span style="color: #268bd2;">anyhow </span><span style="color: #657b83;">= </span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">1</span><span style="color: #839496;">&quot;
</span></code></pre>
<p>I've uploaded <a href="https://gist.github.com/snoyberg/c6c54ed38ec8fac966e362eb212ab421">the full source code as a Gist</a>, but let's walk through this example. First we define some helper types to represent HTTP request and response values:</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #586e75;">pub </span><span style="color: #268bd2;">struct </span><span style="color: #b58900;">Request </span><span style="color: #657b83;">{
    </span><span style="color: #586e75;">pub </span><span style="color: #268bd2;">path_and_query</span><span style="color: #657b83;">: String,
    </span><span style="color: #586e75;">pub </span><span style="color: #268bd2;">headers</span><span style="color: #657b83;">: HashMap&lt;</span><span style="color: #859900;">String</span><span style="color: #657b83;">, </span><span style="color: #859900;">String</span><span style="color: #657b83;">&gt;,
    </span><span style="color: #586e75;">pub </span><span style="color: #268bd2;">body</span><span style="color: #657b83;">: </span><span style="color: #859900;">Vec</span><span style="color: #657b83;">&lt;</span><span style="color: #268bd2;">u8</span><span style="color: #657b83;">&gt;,
}

#[</span><span style="color: #268bd2;">derive</span><span style="color: #657b83;">(Debug)]
</span><span style="color: #586e75;">pub </span><span style="color: #268bd2;">struct </span><span style="color: #b58900;">Response </span><span style="color: #657b83;">{
    </span><span style="color: #586e75;">pub </span><span style="color: #268bd2;">status</span><span style="color: #657b83;">: </span><span style="color: #268bd2;">u32</span><span style="color: #657b83;">,
    </span><span style="color: #586e75;">pub </span><span style="color: #268bd2;">headers</span><span style="color: #657b83;">: HashMap&lt;</span><span style="color: #859900;">String</span><span style="color: #657b83;">, </span><span style="color: #859900;">String</span><span style="color: #657b83;">&gt;,
    </span><span style="color: #586e75;">pub </span><span style="color: #268bd2;">body</span><span style="color: #657b83;">: </span><span style="color: #859900;">Vec</span><span style="color: #657b83;">&lt;</span><span style="color: #268bd2;">u8</span><span style="color: #657b83;">&gt;,
}
</span></code></pre>
<p>Next we want to define a function, <code>run</code>, which:</p>
<ul>
<li>Accepts a web application as an argument</li>
<li>Loops infinitely</li>
<li>Generates fake <code>Request</code> values</li>
<li>Prints out the <code>Response</code> values it gets from the application</li>
</ul>
<p>The first question is: how do you represent that web application? It's going to be an implementation of <code>Service</code>, with the <code>Request</code> and <code>Response</code> types being those we defined above. We don't need to know much about the errors, since we'll simply print them. These parts are pretty easy:</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #586e75;">pub</span><span style="color: #657b83;"> async </span><span style="color: #268bd2;">fn </span><span style="color: #b58900;">run</span><span style="color: #657b83;">&lt;App&gt;(</span><span style="color: #586e75;">mut </span><span style="color: #268bd2;">app</span><span style="color: #657b83;">: App)
</span><span style="color: #859900;">where</span><span style="color: #657b83;">
    App: Service&lt;crate::http::Request, Response = crate::http::Response&gt;,
    </span><span style="color: #268bd2;">App::</span><span style="color: #657b83;">Error: std::fmt::Debug,
</span></code></pre>
<p>But there's one final bound we need to take into account. We want our fake web server to be able to handle requests concurrently. To do that, we'll use <code>tokio::spawn</code> to create new tasks for handling requests. Therefore, we need to be able to send the request handling to a separate task, which will require bounds of both <code>Send</code> and <code>'static</code>. There are at least two different ways of handling this:</p>
<ul>
<li>Cloning the <code>App</code> value in the main task and sending it to the spawned task</li>
<li>Creating the <code>Future</code> in the main task and sending it to the spawned task</li>
</ul>
<p>There are different runtime impacts of making this decision, such as whether the main request accept loop will be blocked or not by the application reporting that it's not available for requests. I decided to go with the latter approach. So we've got one more bound on <code>run</code>:</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #657b83;">App::Future: </span><span style="color: #859900;">Send </span><span style="color: #657b83;">+ </span><span style="color: #586e75;">'static</span><span style="color: #657b83;">,
</span></code></pre>
<p>The body of <code>run</code> is wrapped inside a <code>loop</code> to allow simulating an infinitely running server. First we sleep for a bit and then generate our new fake request:</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #657b83;">tokio::time::sleep(tokio::time::Duration::from_secs(</span><span style="color: #6c71c4;">1</span><span style="color: #657b83;">)).await;

</span><span style="color: #268bd2;">let</span><span style="color: #657b83;"> req = </span><span style="color: #859900;">crate</span><span style="color: #657b83;">::http::Request {
    path_and_query: </span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">/fake/path?page=1</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">.</span><span style="color: #859900;">to_owned</span><span style="color: #657b83;">(),
    headers: HashMap::new(),
    body: </span><span style="color: #859900;">Vec</span><span style="color: #657b83;">::new(),
};
</span></code></pre>
<p>Next, we use the <code>ready</code> method (from the <code>ServiceExt</code> extension trait) to check whether the service is ready to accept a new request:</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #268bd2;">let</span><span style="color: #657b83;"> app = </span><span style="color: #859900;">match</span><span style="color: #657b83;"> app.</span><span style="color: #859900;">ready</span><span style="color: #657b83;">().await {
    </span><span style="color: #859900;">Err</span><span style="color: #657b83;">(e) </span><span style="color: #859900;">=&gt; </span><span style="color: #657b83;">{
        </span><span style="color: #859900;">eprintln!</span><span style="color: #657b83;">(</span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">Service not able to accept requests: </span><span style="color: #cb4b16;">{:?}</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">, e);
        </span><span style="color: #859900;">continue</span><span style="color: #657b83;">;
    }
    </span><span style="color: #859900;">Ok</span><span style="color: #657b83;">(app) </span><span style="color: #859900;">=&gt;</span><span style="color: #657b83;"> app,
};
</span></code></pre>
<p>Once we know we can make another request, we get our <code>Future</code>, spawn the task, and then wait for the <code>Future</code> to complete:</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #268bd2;">let</span><span style="color: #657b83;"> future = app.</span><span style="color: #859900;">call</span><span style="color: #657b83;">(req);
tokio::spawn(async </span><span style="color: #586e75;">move </span><span style="color: #657b83;">{
    </span><span style="color: #859900;">match</span><span style="color: #657b83;"> future.await {
        </span><span style="color: #859900;">Ok</span><span style="color: #657b83;">(res) </span><span style="color: #859900;">=&gt; println!</span><span style="color: #657b83;">(</span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">Successful response: </span><span style="color: #cb4b16;">{:?}</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">, res),
        </span><span style="color: #859900;">Err</span><span style="color: #657b83;">(e) </span><span style="color: #859900;">=&gt; eprintln!</span><span style="color: #657b83;">(</span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">Error occurred: </span><span style="color: #cb4b16;">{:?}</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">, e),
    }
});
</span></code></pre>
<p>And just like that, we have a fake web server! Now it's time to implement our fake web application. I'll call it <code>DemoApp</code>, and give it an atomic counter to make things slightly interesting:</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #657b83;">#[</span><span style="color: #268bd2;">derive</span><span style="color: #657b83;">(Default)]
</span><span style="color: #586e75;">pub </span><span style="color: #268bd2;">struct </span><span style="color: #b58900;">DemoApp </span><span style="color: #657b83;">{
    </span><span style="color: #268bd2;">counter</span><span style="color: #657b83;">: Arc&lt;AtomicUsize&gt;,
}
</span></code></pre>
<p>Next comes the implementation of <code>Service</code>. The first few bits are relatively easy:</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #268bd2;">impl </span><span style="color: #657b83;">tower::Service&lt;crate::http::Request&gt; </span><span style="color: #859900;">for </span><span style="color: #b58900;">DemoApp </span><span style="color: #657b83;">{
    </span><span style="color: #268bd2;">type </span><span style="color: #b58900;">Response </span><span style="color: #657b83;">= </span><span style="color: #859900;">crate</span><span style="color: #657b83;">::http::Response;
    </span><span style="color: #268bd2;">type </span><span style="color: #b58900;">Error </span><span style="color: #657b83;">= anyhow::Error;
    #[</span><span style="color: #268bd2;">allow</span><span style="color: #657b83;">(clippy::type_complexity)]
    </span><span style="color: #268bd2;">type </span><span style="color: #b58900;">Future </span><span style="color: #657b83;">= Pin&lt;</span><span style="color: #859900;">Box</span><span style="color: #657b83;">&lt;dyn Future&lt;Output = </span><span style="color: #859900;">Result</span><span style="color: #657b83;">&lt;</span><span style="color: #268bd2;">Self::</span><span style="color: #657b83;">Response, </span><span style="color: #268bd2;">Self::</span><span style="color: #657b83;">Error&gt;&gt; </span><span style="color: #859900;">+ Send</span><span style="color: #657b83;">&gt;&gt;;

    </span><span style="color: #93a1a1;">// Still need poll_ready and call
</span><span style="color: #657b83;">}
</span></code></pre>
<p><code>Request</code> and <code>Response</code> get set to the types we defined, we'll use the wonderful <code>anyhow</code> crate's <code>Error</code> type, and we'll use a trait object for the <code>Future</code>. We're going to implement a <code>poll_ready</code> which is always ready for a <code>Request</code>:</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #268bd2;">fn </span><span style="color: #b58900;">poll_ready</span><span style="color: #657b83;">(
    </span><span style="color: #859900;">&amp;</span><span style="color: #586e75;">mut </span><span style="color: #268bd2;">self</span><span style="color: #657b83;">,
    </span><span style="color: #268bd2;">_cx</span><span style="color: #657b83;">: </span><span style="color: #859900;">&amp;</span><span style="color: #586e75;">mut </span><span style="color: #657b83;">std::task::Context&lt;'</span><span style="color: #859900;">_</span><span style="color: #657b83;">&gt;,
) -&gt; Poll&lt;</span><span style="color: #859900;">Result</span><span style="color: #657b83;">&lt;(), </span><span style="color: #268bd2;">Self::</span><span style="color: #657b83;">Error&gt;&gt; {
    Poll::Ready(</span><span style="color: #859900;">Ok</span><span style="color: #657b83;">(())) </span><span style="color: #93a1a1;">// always ready to accept a connection
</span><span style="color: #657b83;">}
</span></code></pre>
<p>And finally we get to our <code>call</code> method. We're going to implement some logic to increment the counter, fail 25% of the time, and otherwise echo back the request from the user, with an added <code>X-Counter</code> response header. Let's see it in action:</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #268bd2;">fn </span><span style="color: #b58900;">call</span><span style="color: #657b83;">(</span><span style="color: #859900;">&amp;</span><span style="color: #586e75;">mut </span><span style="color: #268bd2;">self</span><span style="color: #657b83;">, </span><span style="color: #586e75;">mut </span><span style="color: #268bd2;">req</span><span style="color: #657b83;">: crate::http::Request) -&gt; </span><span style="color: #268bd2;">Self::</span><span style="color: #657b83;">Future {
    </span><span style="color: #268bd2;">let</span><span style="color: #657b83;"> counter = </span><span style="color: #d33682;">self</span><span style="color: #657b83;">.counter.</span><span style="color: #859900;">clone</span><span style="color: #657b83;">();
    </span><span style="color: #859900;">Box</span><span style="color: #657b83;">::pin(async </span><span style="color: #586e75;">move </span><span style="color: #657b83;">{
        </span><span style="color: #859900;">println!</span><span style="color: #657b83;">(</span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">Handling a request for </span><span style="color: #cb4b16;">{}</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">, req.path_and_query);
        </span><span style="color: #268bd2;">let</span><span style="color: #657b83;"> counter = counter.</span><span style="color: #859900;">fetch_add</span><span style="color: #657b83;">(</span><span style="color: #6c71c4;">1</span><span style="color: #657b83;">, std::sync::atomic::Ordering::SeqCst);
        anyhow::ensure</span><span style="color: #859900;">!</span><span style="color: #657b83;">(counter % </span><span style="color: #6c71c4;">4 </span><span style="color: #657b83;">!= </span><span style="color: #6c71c4;">2</span><span style="color: #657b83;">, </span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">Failing 25% of the time, just for fun</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">);
        req.headers
            .</span><span style="color: #859900;">insert</span><span style="color: #657b83;">(</span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">X-Counter</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">.</span><span style="color: #859900;">to_owned</span><span style="color: #657b83;">(), counter.</span><span style="color: #859900;">to_string</span><span style="color: #657b83;">());
        </span><span style="color: #268bd2;">let</span><span style="color: #657b83;"> res = </span><span style="color: #859900;">crate</span><span style="color: #657b83;">::http::Response {
            status: </span><span style="color: #6c71c4;">200</span><span style="color: #657b83;">,
            headers: req.headers,
            body: req.body,
        };
        </span><span style="color: #859900;">Ok</span><span style="color: #657b83;">::&lt;</span><span style="color: #859900;">_</span><span style="color: #657b83;">, anyhow::Error&gt;(res)
    })
}
</span></code></pre>
<p>With all that in place, running our fake web app on our fake web server is nice and easy:</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #657b83;">#[</span><span style="color: #268bd2;">tokio</span><span style="color: #657b83;">::</span><span style="color: #268bd2;">main</span><span style="color: #657b83;">]
async </span><span style="color: #268bd2;">fn </span><span style="color: #b58900;">main</span><span style="color: #657b83;">() {
    fakeserver::run(app::DemoApp::default()).await;
}
</span></code></pre><h2 id="app-fn"><code>app_fn</code></h2>
<p>One thing that's particularly unsatisfying about the code above is how much ceremony it takes to write a web application. I need to create a new data type, provide a <code>Service</code> implementation for it, and futz around with all that <code>Pin&lt;Box&lt;Future&gt;&gt;</code> business to make things line up. The core logic of our <code>DemoApp</code> is buried inside the <code>call</code> method. It would be nice to provide a helper of some kind that lets us define things more easily.</p>
<p>You can check out <a href="https://gist.github.com/snoyberg/cb72a9cbefc608ec15e05ed70ced1a6b">the full code as a Gist</a>. But let's talk through it here.  We're going to implement a new helper <code>app_fn</code> function which takes a closure as its argument. That closure will take in a <code>Request</code> value, and then return a <code>Response</code>. But we want to make sure it asynchronously returns the <code>Response</code>. So we'll need our calls to look something like:</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #859900;">app_fn</span><span style="color: #657b83;">(|</span><span style="color: #268bd2;">req</span><span style="color: #657b83;">| async { </span><span style="color: #859900;">some_code</span><span style="color: #657b83;">(req).await })
</span></code></pre>
<p>This <code>app_fn</code> function needs to return a type which provides our <code>Service</code> implementation. Let's call it <code>AppFn</code>. Putting these two things together, we get:</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #586e75;">pub </span><span style="color: #268bd2;">struct </span><span style="color: #b58900;">AppFn</span><span style="color: #657b83;">&lt;F&gt; {
    </span><span style="color: #268bd2;">f</span><span style="color: #657b83;">: F,
}

</span><span style="color: #586e75;">pub </span><span style="color: #268bd2;">fn </span><span style="color: #b58900;">app_fn</span><span style="color: #657b83;">&lt;F, Ret&gt;(</span><span style="color: #268bd2;">f</span><span style="color: #657b83;">: F) -&gt; AppFn&lt;F&gt;
</span><span style="color: #859900;">where</span><span style="color: #657b83;">
    F: FnMut(crate::http::Request) -&gt; Ret,
    Ret: Future&lt;Output = </span><span style="color: #859900;">Result</span><span style="color: #657b83;">&lt;crate::http::Response, anyhow::Error&gt;&gt;,
{
    AppFn { f }
}
</span></code></pre>
<p>So far, so good. We can see with the bounds on <code>app_fn</code> that we'll accept a <code>Request</code> and return some <code>Ret</code> type, and <code>Ret</code> must be a <code>Future</code> that produces a <code>Result&lt;Response, Error&gt;</code>. Implementing <code>Service</code> for this isn't too bad:</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #268bd2;">impl</span><span style="color: #657b83;">&lt;F, Ret&gt; tower::Service&lt;crate::http::Request&gt; </span><span style="color: #859900;">for </span><span style="color: #b58900;">AppFn</span><span style="color: #657b83;">&lt;F&gt;
</span><span style="color: #859900;">where</span><span style="color: #657b83;">
    F: FnMut(crate::http::Request) -&gt; Ret,
    Ret: Future&lt;Output = </span><span style="color: #859900;">Result</span><span style="color: #657b83;">&lt;crate::http::Response, anyhow::Error&gt;&gt;,
{
    </span><span style="color: #268bd2;">type </span><span style="color: #b58900;">Response </span><span style="color: #657b83;">= </span><span style="color: #859900;">crate</span><span style="color: #657b83;">::http::Response;
    </span><span style="color: #268bd2;">type </span><span style="color: #b58900;">Error </span><span style="color: #657b83;">= anyhow::Error;
    </span><span style="color: #268bd2;">type </span><span style="color: #b58900;">Future </span><span style="color: #657b83;">= Ret;

    </span><span style="color: #268bd2;">fn </span><span style="color: #b58900;">poll_ready</span><span style="color: #657b83;">(
        </span><span style="color: #859900;">&amp;</span><span style="color: #586e75;">mut </span><span style="color: #268bd2;">self</span><span style="color: #657b83;">,
        </span><span style="color: #268bd2;">_cx</span><span style="color: #657b83;">: </span><span style="color: #859900;">&amp;</span><span style="color: #586e75;">mut </span><span style="color: #657b83;">std::task::Context&lt;'</span><span style="color: #859900;">_</span><span style="color: #657b83;">&gt;,
    ) -&gt; Poll&lt;</span><span style="color: #859900;">Result</span><span style="color: #657b83;">&lt;(), </span><span style="color: #268bd2;">Self::</span><span style="color: #657b83;">Error&gt;&gt; {
        Poll::Ready(</span><span style="color: #859900;">Ok</span><span style="color: #657b83;">(())) </span><span style="color: #93a1a1;">// always ready to accept a connection
    </span><span style="color: #657b83;">}

    </span><span style="color: #268bd2;">fn </span><span style="color: #b58900;">call</span><span style="color: #657b83;">(</span><span style="color: #859900;">&amp;</span><span style="color: #586e75;">mut </span><span style="color: #268bd2;">self</span><span style="color: #657b83;">, </span><span style="color: #268bd2;">req</span><span style="color: #657b83;">: crate::http::Request) -&gt; </span><span style="color: #268bd2;">Self::</span><span style="color: #657b83;">Future {
        (</span><span style="color: #d33682;">self</span><span style="color: #657b83;">.f)(req)
    }
}
</span></code></pre>
<p>We have the same bounds as on <code>app_fn</code>, the associated types <code>Response</code> and <code>Error</code> are straightforward, and <code>poll_ready</code> is the same as it was before. The first interesting bit is <code>type Future = Ret;</code>. We previously went the route of a trait object, which was more verbose and less performant. This time, we already have a type, <code>Ret</code>, that represents the <code>Future</code> the caller of our function will be providing. It's really nice that we get to simply use it here!</p>
<p>The <code>call</code> method leverages the function provided by the caller to produce a new <code>Ret</code>/<code>Future</code> value per incoming request and hand it back to the web server for processing.</p>
<p>And finally, our <code>main</code> function can now embed our application logic inside it as a closure. This looks like:</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #657b83;">#[</span><span style="color: #268bd2;">tokio</span><span style="color: #657b83;">::</span><span style="color: #268bd2;">main</span><span style="color: #657b83;">]
async </span><span style="color: #268bd2;">fn </span><span style="color: #b58900;">main</span><span style="color: #657b83;">() {
    </span><span style="color: #268bd2;">let</span><span style="color: #657b83;"> counter = Arc::new(AtomicUsize::new(</span><span style="color: #6c71c4;">0</span><span style="color: #657b83;">));
    fakeserver::run(util::app_fn(</span><span style="color: #586e75;">move </span><span style="color: #859900;">|</span><span style="color: #586e75;">mut</span><span style="color: #657b83;"> req</span><span style="color: #859900;">| </span><span style="color: #657b83;">{
        </span><span style="color: #93a1a1;">// need to clone this from the closure before moving it into the async block
        </span><span style="color: #268bd2;">let</span><span style="color: #657b83;"> counter = counter.</span><span style="color: #859900;">clone</span><span style="color: #657b83;">();
        async </span><span style="color: #586e75;">move </span><span style="color: #657b83;">{
            </span><span style="color: #859900;">println!</span><span style="color: #657b83;">(</span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">Handling a request for </span><span style="color: #cb4b16;">{}</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">, req.path_and_query);
            </span><span style="color: #268bd2;">let</span><span style="color: #657b83;"> counter = counter.</span><span style="color: #859900;">fetch_add</span><span style="color: #657b83;">(</span><span style="color: #6c71c4;">1</span><span style="color: #657b83;">, std::sync::atomic::Ordering::SeqCst);
            anyhow::ensure</span><span style="color: #859900;">!</span><span style="color: #657b83;">(counter % </span><span style="color: #6c71c4;">4 </span><span style="color: #657b83;">!= </span><span style="color: #6c71c4;">2</span><span style="color: #657b83;">, </span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">Failing 25% of the time, just for fun</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">);
            req.headers
                .</span><span style="color: #859900;">insert</span><span style="color: #657b83;">(</span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">X-Counter</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">.</span><span style="color: #859900;">to_owned</span><span style="color: #657b83;">(), counter.</span><span style="color: #859900;">to_string</span><span style="color: #657b83;">());
            </span><span style="color: #268bd2;">let</span><span style="color: #657b83;"> res = </span><span style="color: #859900;">crate</span><span style="color: #657b83;">::http::Response {
                status: </span><span style="color: #6c71c4;">200</span><span style="color: #657b83;">,
                headers: req.headers,
                body: req.body,
            };
            </span><span style="color: #859900;">Ok</span><span style="color: #657b83;">::&lt;</span><span style="color: #859900;">_</span><span style="color: #657b83;">, anyhow::Error&gt;(res)
        }
    }))
    .await;
}
</span></code></pre><h3 id="side-note-the-extra-clone">Side note: the extra clone</h3>
<p>From bitter experience, both my own and others I've spoken with, that <code>let counter = counter.clone();</code> above is likely the trickiest piece of the code above. It's all too easy to write code that looks something like:</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #268bd2;">let</span><span style="color: #657b83;"> counter = Arc::new(AtomicUsize::new(</span><span style="color: #6c71c4;">0</span><span style="color: #657b83;">));
fakeserver::run(util::app_fn(</span><span style="color: #586e75;">move </span><span style="color: #859900;">|</span><span style="color: #657b83;">_req</span><span style="color: #859900;">|</span><span style="color: #657b83;"> async </span><span style="color: #586e75;">move </span><span style="color: #657b83;">{
    </span><span style="color: #268bd2;">let</span><span style="color: #657b83;"> counter = counter.</span><span style="color: #859900;">fetch_add</span><span style="color: #657b83;">(</span><span style="color: #6c71c4;">1</span><span style="color: #657b83;">, std::sync::atomic::Ordering::SeqCst);
    </span><span style="color: #859900;">Err</span><span style="color: #657b83;">(anyhow::anyhow</span><span style="color: #859900;">!</span><span style="color: #657b83;">(
        </span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">Just demonstrating the problem, counter is {}</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">,
        counter
    ))
}))
.await;
</span></code></pre>
<p>This looks perfectly reasonable. We move the <code>counter</code> into the closure and then use it. However, the compiler isn't too happy with us:</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #657b83;">error[</span><span style="color: #cb4b16;">E0507</span><span style="color: #657b83;">]: cannot </span><span style="color: #586e75;">move</span><span style="color: #657b83;"> out of `counter`, a captured variable </span><span style="color: #859900;">in</span><span style="color: #657b83;"> an `</span><span style="color: #859900;">FnMut</span><span style="color: #657b83;">` closure
   --&gt; src\main.rs:</span><span style="color: #6c71c4;">96</span><span style="color: #657b83;">:</span><span style="color: #6c71c4;">57
    </span><span style="color: #859900;">|
</span><span style="color: #6c71c4;">95  </span><span style="color: #859900;">|       </span><span style="color: #268bd2;">let</span><span style="color: #657b83;"> counter = Arc::new(AtomicUsize::new(</span><span style="color: #6c71c4;">0</span><span style="color: #657b83;">));
    |           ------- captured outer variable
</span><span style="color: #6c71c4;">96  </span><span style="color: #859900;">|       </span><span style="color: #657b83;">fakeserver::run(util::app_fn(</span><span style="color: #586e75;">move </span><span style="color: #859900;">|</span><span style="color: #657b83;">_req</span><span style="color: #859900;">|</span><span style="color: #657b83;"> async </span><span style="color: #586e75;">move </span><span style="color: #657b83;">{
    |  _________________________________________________________^
</span><span style="color: #6c71c4;">97  </span><span style="color: #859900;">| |         </span><span style="color: #268bd2;">let</span><span style="color: #657b83;"> counter = counter.</span><span style="color: #859900;">fetch_add</span><span style="color: #657b83;">(</span><span style="color: #6c71c4;">1</span><span style="color: #657b83;">, std::sync::atomic::Ordering::SeqCst);
    | |                       -------
    </span><span style="color: #859900;">| |                       |
    | |                       </span><span style="color: #586e75;">move</span><span style="color: #657b83;"> occurs because `counter` has </span><span style="color: #268bd2;">type</span><span style="color: #657b83;"> `Arc&lt;AtomicUsize&gt;`, which does not implement the `</span><span style="color: #859900;">Copy</span><span style="color: #657b83;">` </span><span style="color: #268bd2;">trait
    </span><span style="color: #859900;">| |                       </span><span style="color: #586e75;">move</span><span style="color: #657b83;"> occurs due to </span><span style="color: #859900;">use in</span><span style="color: #657b83;"> generator
</span><span style="color: #6c71c4;">98  </span><span style="color: #859900;">| |         Err</span><span style="color: #657b83;">(anyhow::anyhow</span><span style="color: #859900;">!</span><span style="color: #657b83;">(
</span><span style="color: #6c71c4;">99  </span><span style="color: #859900;">| |             </span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">Just demonstrating the problem, counter is {}</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">,
</span><span style="color: #6c71c4;">100 </span><span style="color: #859900;">| |</span><span style="color: #657b83;">             counter
</span><span style="color: #6c71c4;">101 </span><span style="color: #859900;">| |         </span><span style="color: #657b83;">))
</span><span style="color: #6c71c4;">102 </span><span style="color: #859900;">| |     </span><span style="color: #657b83;">}))
    </span><span style="color: #859900;">| |</span><span style="color: #cb4b16;">_____</span><span style="color: #859900;">^ </span><span style="color: #586e75;">move</span><span style="color: #657b83;"> out of `counter` occurs here
</span></code></pre>
<p>It's a slightly confusing error message. In my opinion, it's confusing because of the formatting I've used. And I've used that formatting because (1) <code>rustfmt</code> encourages it, and (2) the Hyper docs encourage it. Let me reformat a bit, and then explain the issue:</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #268bd2;">let</span><span style="color: #657b83;"> counter = Arc::new(AtomicUsize::new(</span><span style="color: #6c71c4;">0</span><span style="color: #657b83;">));
fakeserver::run(util::app_fn(</span><span style="color: #586e75;">move </span><span style="color: #859900;">|</span><span style="color: #657b83;">_req</span><span style="color: #859900;">| </span><span style="color: #657b83;">{
    async </span><span style="color: #586e75;">move </span><span style="color: #657b83;">{
        </span><span style="color: #268bd2;">let</span><span style="color: #657b83;"> counter = counter.</span><span style="color: #859900;">fetch_add</span><span style="color: #657b83;">(</span><span style="color: #6c71c4;">1</span><span style="color: #657b83;">, std::sync::atomic::Ordering::SeqCst);
        </span><span style="color: #859900;">Err</span><span style="color: #657b83;">(anyhow::anyhow</span><span style="color: #859900;">!</span><span style="color: #657b83;">(
            </span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">Just demonstrating the problem, counter is {}</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">,
            counter
        ))
    }
}))
</span></code></pre>
<p>The issue is that, in the argument to <code>app_fn</code>, we have two different control structures:</p>
<ul>
<li>A move closure, which takes ownership of <code>counter</code> and produces a <code>Future</code></li>
<li>An <code>async move</code> block, which takes ownership of <code>counter</code></li>
</ul>
<p>The issue is that there's only one <code>counter</code> value. It gets moved first into the closure. That means we can't use <code>counter</code> again outside the closure, which we don't try to do. All good. The second thing is that, when that closure is called, the <code>counter</code> value will be moved from the closure into the <code>async move</code> block. That's also fine, but it's only fine once. If you try to call the closure a second time, it would fail, because the <code>counter</code> has already been moved. Therefore, this closure is a <code>FnOnce</code>, not a <code>Fn</code> or <code>FnMut</code>.</p>
<p>And that's the problem here. As we saw above, we need at least a <code>FnMut</code> as our argument to the fake web server. This makes intuitive sense: we will call our application request handling function multiple times, not just once.</p>
<p>The fix for this is to clone the <code>counter</code> inside the closure body, but before moving it into the <code>async move</code> block. That's easy enough:</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #657b83;">fakeserver::run(util::app_fn(</span><span style="color: #586e75;">move </span><span style="color: #859900;">|</span><span style="color: #657b83;">_req</span><span style="color: #859900;">| </span><span style="color: #657b83;">{
    </span><span style="color: #268bd2;">let</span><span style="color: #657b83;"> counter = counter.</span><span style="color: #859900;">clone</span><span style="color: #657b83;">();
    async </span><span style="color: #586e75;">move </span><span style="color: #657b83;">{
        </span><span style="color: #268bd2;">let</span><span style="color: #657b83;"> counter = counter.</span><span style="color: #859900;">fetch_add</span><span style="color: #657b83;">(</span><span style="color: #6c71c4;">1</span><span style="color: #657b83;">, std::sync::atomic::Ordering::SeqCst);
        </span><span style="color: #859900;">Err</span><span style="color: #657b83;">(anyhow::anyhow</span><span style="color: #859900;">!</span><span style="color: #657b83;">(
            </span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">Just demonstrating the problem, counter is {}</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">,
            counter
        ))
    }
}))
</span></code></pre>
<p>This is a really subtle point, hopefully this demonstration will help make it clearer.</p>
<h2 id="connections-and-requests">Connections and requests</h2>
<p>There's a simplification in our fake web server above. A real HTTP workflow starts off with a new connection, and then handles a stream of requests off of that connection. In other words, instead of having just one service, we really need two services:</p>
<ol>
<li>A service like we have above, which accepts <code>Request</code>s and returns <code>Response</code>s</li>
<li>A service that accepts connection information and returns one of the above services</li>
</ol>
<p>Again, leaning on some terse Haskell syntax, we'd want:</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #859900;">type </span><span style="color: #cb4b16;">InnerService </span><span style="color: #859900;">= </span><span style="color: #cb4b16;">Request </span><span style="color: #859900;">-&gt; </span><span style="color: #cb4b16;">IO Response
</span><span style="color: #859900;">type </span><span style="color: #cb4b16;">OuterService </span><span style="color: #859900;">= </span><span style="color: #cb4b16;">ConnectionInfo </span><span style="color: #859900;">-&gt; </span><span style="color: #cb4b16;">IO InnerService
</span></code></pre>
<p>Or, to borrow some beautiful Java terminology, we want to create a <em>service factory</em> which will take some connection information and return a request handling service. Or, to use Tower/Hyper terminology, we have a <em>service</em>, and a <em>make service</em>. Which, if you've ever been confused by the Hyper tutorials like I was, may finally explain why &quot;Hello World&quot; requires both a <code>service_fn</code> and <code>make_service_fn</code> call.</p>
<p>Anyway, it's too detailed to dive into all the changes necessary to the code above to replicate this concept, but I've <a href="https://gist.github.com/snoyberg/b574ef4ece5f23913c6c70b1f4f22ed5">provided a Gist showing an <code>AppFactoryFn</code></a>.</p>
<p>And with that... we've finally played around with fake stuff long enough that we can dive into real life Hyper code. Hurrah!</p>
<h2 id="next-time">Next time</h2>
<p>Up until this point, we've only played with Tower. Next time, we're going to explore how Hyper handles real life web applications, and where things differ from our simple example. We'll finish up that post with our first application in Axum, the new web framework that kicked off this post series.</p>
<p>If you're looking for more Rust content from FP Complete, check out:</p>
<ul>
<li><a href="https://www.fpcomplete.com/tags/rust/">Rust tagged blog posts</a></li>
<li><a href="https://www.fpcomplete.com/rust/">Rust homepage</a></li>
<li><a href="https://www.fpcomplete.com/rust/crash-course/">Rust Crash Course</a></li>
</ul></div>
    </content>
    <updated>2021-08-30T00:00:00Z</updated>
    <published>2021-08-30T00:00:00Z</published>
    <source>
      <id>https://www.fpcomplete.com/atom.xml</id>
      <author>
        <name>FP Complete</name>
      </author>
      <link href="https://www.fpcomplete.com/atom.xml" rel="self" type="application/atom+xml">
      <link href="https://www.fpcomplete.com" rel="alternate" type="text/html">
      <subtitle xml:lang="en">Blog posts from FP Complete, focusing on Rust, Haskell, and DevOps</subtitle>
      <title xml:lang="en">FP Complete Blog</title>
      <updated>2021-08-30T00:00:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://www.joachim-breitner.de/blog/782-A_Candid_explainer__The_rough_idea</id>
    <link href="http://www.joachim-breitner.de/blog/782-A_Candid_explainer__The_rough_idea" rel="alternate" type="text/html">
    <title xml:lang="en">A Candid explainer: The rough idea</title>
    <summary type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p>One of the technologies that was created by DFINITY as we built the “Internet Computer” is <strong>Candid</strong>. Candid is</p>
<ul>
<li>a language to describe the <em>interface</em> of a service, with named methods, arguments and results,</li>
<li>a type system for these arguments and results that maps to many possible implementation languages, thus enabling interoperability between these languages,</li>
<li>a wire format (encoding) of values of these types,</li>
<li>a notion of “safe upgrade” that allows service developers to evolve their interface with the assurance that no clients break, even in the presence of higher-order composition,</li>
<li>a meta-theory of safe interface description languages and a formal proof that Candid has these properties, and</li>
<li>a bunch of tools and libraries.</li>
</ul>
<p>In this in-depth blog post series I want to shed some light onto these aspects of Candid. The target audience is mainly anyone who wants to deeply understand Candid, e.g. researchers, implementors of Candid tools, anyone who wants to builds a better alternative, but no particular prior Candid knowledge is expected. Also, much of what is discussed here is independent of the Internet Computer. Some posts may be more theoretical or technical than others; if you are lost in one I hope you’ll rejoin for the subsequent post</p>
<p>Much in these posts is not relevant for developers who just want to <em>use</em> Candid in their projects, and also much that they want to know is missing. The <a href="https://sdk.dfinity.org/docs/introduction/welcome.html">Internet Computer dev docs</a> will hopefully cater to that audience.</p>
<h2 id="blog-post-series-overview">Blog post series overview</h2>
<ol type="1">
<li><p><a href="https://www.joachim-breitner.de/blog/782"><strong>The rough idea</strong></a> (this post)</p>
<p>Announcing the blog post series, and very briefly outlining what an Interface Description Language even is.</p></li>
<li><p><a href="https://www.joachim-breitner.de/blog/783"><strong>Safe higher-order upgrades</strong></a></p>
<p>Every can do first-order interface description languages. What makes Candid special is its support for higher-order service composition. This post also contains some general meta-theory and a Coq proof!</p></li>
<li><p><strong>Opt is special</strong> (to be published)</p>
<p>Extending records in argument position is surprisingly tricky. Lean why, and how we solved it.</p></li>
<li><p><strong>Language integration</strong> (to be published)</p>
<p>The point of Candid is inter-op, so let’s look the various patterns of connecting Candid to your favorite programming language.</p></li>
<li><p><strong>Quirks</strong> (to be published)</p>
<p>The maybe most interesting post in this series: Candid has a bunch of quirks (hashed field names, no tuples but sequnces, references that nobody used, and more). I’ll explain some of them, why they are there, and what else we could have done. Beware: This post will be opinionated.</p></li>
</ol>
<h2 id="the-rough-idea">The rough idea</h2>
<p>The idea of an interface description language is easy to begin with. Something like</p>
<pre><code>service A : {
  add : (int) -&gt; ();
  get : () -&gt; (int);
}</code></pre>
<p>clearly communicates that a service called <code>A</code> provides two methods <code>add</code> and <code>get</code>, that <code>add</code> takes an integer as an argument, and that <code>get</code> returns such a number. Of course, this only captures the outer shape of the service, but not what it actually does – we might assume it implements a counter of sorts, but that is <em>not</em> part of the Candid interface description.</p>
<p>In order to now use the service, we also need a (low-level) transport mechanism. Candid itself does not specify that, but merely assumes that it exists, and is able to transport the name of the invoked method and a raw sequence of bytes to the service, and a response (again a raw sequence of bytes) back.</p>
<p>Already on the Internet Computer we have two distinct transport mechanisms used are external calls via <a href="https://sdk.dfinity.org/docs/interface-spec/index.html#http-call-overview">an HTTP-based RPC interface</a> and <a href="https://sdk.dfinity.org/docs/interface-spec/index.html#system-api-call">on-chain inter-canister calls</a>. Both are handled by the service in the same way. Here we can see that Candid succeeds in abstracting over differences in the low-level transport mechanism. Because of this abstraction, it is possible to use Candid over other transportation mechanisms as well (conventional HTTPS, E-Mail, avian carrier). I think Candid has potential there as well, so even if you are not interested in the Internet Computer, this post may be interesting to you.</p>
<p>The translation of argument and result values (e.g. numbers of type <code>int</code>) to the raw sequence of bytes is <a href="https://github.com/dfinity/candid/blob/master/spec/Candid.md#binary-format">specified by Candid</a>, defining a <em>wire format</em>. For example, the type <code>int</code> denotes whole numbers of arbitrary size, and they are encoded using the <a href="https://en.wikipedia.org/wiki/LEB128">LEB128 scheme</a>. The Candid wire format also contains a magic number (<code>DIDL</code>, which is <code>0x4449444c</code> in hex) and a type description (more on that later). So when passing the value <code>2342</code> to the <code>add</code>, the raw bytes transported will be <code>0x4449444c00017da612</code>.</p>
<p>Of course we want to transfer more data than just integers, and thus Candid supports a fairly complete set of common basic types (<code>nat</code>, <code>int</code>, <code>nat8</code>, <code>nat16</code>, <code>nat32</code>, <code>nat64</code>, <code>int8</code>, <code>int16</code>, <code>int32</code>, <code>int64</code>, <code>float32</code>, <code>float64</code>, <code>bool</code>, <code>text</code>, <code>blob</code>) and composite types (<code>vec</code>tors, <code>opt</code>ional values , <code>record</code>s and <code>variant</code>s). The design goal is to provide a <em>canonical</em> set of types – enough to express most data that you might want to pass, but no more than needed, so that different host languages can support these types easily.</p>
<p>The Candid type system is <em>structural</em>. This means that two types are the same when they are defined the same way. Imagine two different services defining the same</p>
<pre><code>type User = record { name : text; user_id : nat }</code></pre>
<p>then although <code>User</code> is defined in two places, it’s still the same type. In other words, these name <code>type</code> definitions are always just simple <em>aliases</em>, and what matters is their right-hand side.</p>
<p>Because Candid types can be recursive (e.g. <code>type Peano = opt Peano</code>), this means we have an <em>equirecursive</em> type system, which makes some things relatively hard.</p>
<p><em>So far, nothing too special about Candid compared to other interface definition languages (although a structural equirecursive type system is already something). In <a href="https://www.joachim-breitner.de/blog/783">the next post</a> we look at reference types, and how such higher order features make Candid an interesting technology.</em></p></div>
    </summary>
    <updated>2021-08-29T15:51:54Z</updated>
    <published>2021-08-29T15:51:54Z</published>
    <author>
      <name>Joachim Breitner</name>
      <email>mail@joachim-breitner.de</email>
    </author>
    <source>
      <id>http://www.joachim-breitner.de//blog</id>
      <logo>http://joachim-breitner.de/avatars/avatar_128.png</logo>
      <link href="http://www.joachim-breitner.de//blog" rel="alternate" type="text/html">
      <link href="http://www.joachim-breitner.de/blog_feed.rss" rel="self" type="application/rss+xml">
      <subtitle xml:lang="en">Joachim Breitners Denkblogade</subtitle>
      <title xml:lang="en">nomeataâ€™s mind shares</title>
      <updated>2021-08-30T22:01:13Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://doisinkidney.com/posts/2021-08-29-weighted-search-package.html</id>
    <link href="https://doisinkidney.com/posts/2021-08-29-weighted-search-package.html" rel="alternate" type="text/html">
    <title>Weighted Search Package</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div class="info">
    Posted on August 29, 2021
</div>
<div class="info">
    
</div>
<div class="info">
    
        Tags: <a href="https://doisinkidney.com/tags/Haskell.html" title="All pages tagged 'Haskell'.">Haskell</a>
    
</div>

<p>I have packaged up the more interesting bits from the <a href="https://dl.acm.org/doi/abs/10.1145/3473577">Algebras for Weighted Search</a> paper and put it up on hackage.</p>
<p>You can see it <a href="https://hackage.haskell.org/package/monus-weighted-search">here</a>.</p>
<p>It contains the <code>HeapT</code> monad, the <code>Monus</code> class, and an implementation of Dijkstraâ€™s algorithm, the Viterbi algorithm, and probabilistic parsing.</p>
<p>Check it out!</p></div>
    </summary>
    <updated>2021-08-29T00:00:00Z</updated>
    <published>2021-08-29T00:00:00Z</published>
    <author>
      <name>Donnacha Oisín Kidney</name>
    </author>
    <source>
      <id>https://doisinkidney.com</id>
      <link href="https://doisinkidney.com" rel="alternate" type="text/html">
      <link href="https://doisinkidney.com/rss.xml" rel="self" type="application/rss+xml">
      <subtitle>Mainly writing about programming</subtitle>
      <title>Donnacha Oisín Kidney's Blog</title>
      <updated>2021-08-29T00:00:00Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:,2021:/misc/job-interview.idea</id>
    <link href="https://blog.plover.com/misc/job-interview.idea.html" rel="alternate" type="text/html">
    <title>How to fix hiring?</title>
    <content type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p>On Twitter, <a href="https://twitter.com/mscccc/status/1430986038252654600">Mike Coutermarsh suggested</a>:</p>

<blockquote>
  <p>Job interview: “algorithms”</p>
  
  <p>Reality: “Turn a 127 message deep slack thread between 5 engineers
  into a decision”</p>
</blockquote>

<p>I suppose this was meant facetiously but I think it might contain the
germ of a good idea.</p>

<p>Applicants are usually given timed a programming quiz.  What if
instead, the candidate was supplied with the 127-message Slack thread
and given 24 hours to write up a proposal document?  I honestly think
this might produce good results.</p>

<p>Such a submission would be extremely probative of the candidate's
talents and abilities, including:</p>

<ul>
<li>reading and understanding technical arguments</li>
<li>balancing engineering tradeoffs</li>
<li>foreseeing potential issues</li>
<li>writing clear English</li>
<li>planning</li>
<li>seriousness</li>
<li>writing coherent, well-organized, and persuasive documents</li>
</ul>

<p>It is much more difficult to cheat on this task than on a typical
programming exercise. The candidate certainly can't submit a
prewritten essay that they found somewhere; that would be easy to
detect. A candidate who can take someone else's prewritten essay and
quickly rewrite it to plausibly appear original is probably quite
well-qualified on many of the important metrics!  (Plus an additional
important one: the ability to do research. They had to locate,
recognize, and read the essay they rewrote.)</p>

<p>It shouldn't be hard to change up the essay topic periodically, since
the engineers will be producing several of those 127-message Slack
threads every month.  This also tends to impede cheating.</p>

<p>When a good candidate comes for an in-person interview, you have a
ready-made topic of conversation.  Instead of coding at the
whiteboard, you can ask them to discuss their proposal.</p>

<p>Complaints that this would discriminate against candidates with poor
command of English do not hold water.  Good command of English is one
of the job requirements, and the whole point of a job interview is to
discriminate against unqualified candidates.  Besides, if the hiring
process encourages candidates to improve their English writing
abilities, rather than cramming a bunch of red-black-tree algorithms,
language trivia, or irrelevant brainteasters, so much the better for
everyone.</p></div>
    </content>
    <updated>2021-08-28T16:57:00Z</updated>
    <published>2021-08-28T16:57:00Z</published>
    <category term="/misc"/>
    <author>
      <name>Mark Dominus</name>
      <email>mjd@plover.com</email>
      <uri>http://www.plover.com/</uri>
    </author>
    <source>
      <id>tag:,2005:/</id>
      <icon>http://perl.plover.com/favicon.ico</icon>
      <link href="https://blog.plover.com/index.atom" rel="self" type="application/atom+xml">
      <link href="https://blog.plover.com" rel="alternate" type="text/html">
      <subtitle>The Universe of Discourse (Mark Dominus Blog)</subtitle>
      <title>The Universe of Discourse</title>
      <updated>2021-08-28T16:57:00Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:,2021:/math/combinator-s</id>
    <link href="https://blog.plover.com/math/combinator-s.html" rel="alternate" type="text/html">
    <title>Why is the S combinator an S?</title>
    <content type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p>The most important combinator in
<a href="https://en.wikipedia.org/wiki/combinatory_logic">combinatory logic</a> is the <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24S%24"> combinator,
defined simply:</p>

<p>$$
S x y z ⇒ (x z)(y z)
$$</p>

<p>or in <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24%5clambda%24">-calculus terms:</p>

<p>$$
S = \lambda x y z. (x z)(y z).
$$</p>

<p><a href="https://en.wikipedia.org/wiki/SKI_combinator_calculus">A wonderful theorem</a> states that any
<img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24%5clambda%24">-expression with no free variables can be converted into a
combinator expression that contains only the combinators <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24S%2c%20K%2c%24"> and
<img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24I%24">, where <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24S%24"> is really the only interesting one of the three,
<img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24I%24"> being merely the identity function, and <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24K%24"> a constructor of
constant functions:</p>

<p>$$
\begin{align}
I x   &amp; = x \\
K x y &amp; = x \\
\end{align}
$$</p>

<p>In fact one can get along without <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24I%24"> since <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24S%20K%20K%20%3d%20I%24">.</p>

<p>A not-too-infrequently-asked question is why the three combinators are
named as they are.  The <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24I%24"> is an identity function and pretty obvious
stands for “identity”.</p>

<p>Similarly the <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24K%24"> constructs constant functions: <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24K%20x%24"> is the combinator which
ignores its argument and yields <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24x%24">. So it's not hard to imagine that
<img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24K%24"> is short for <em>Konstant</em>, which is German for “constant”; no
mystery there.</p>

<p>But why <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24S%24">?  People typically guess that it stands for
“substitution”, the idea being that if you have some application
$$A\,B$$
then <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24S%24"> allows one to <strong>substitute</strong> some term <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24T%24"> for a free variable
<img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24v%24"> in both <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24A%24"> and <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24B%24"> prior to the application:</p>

<p>$$
S\, A\, B\, T = A[v/T]\, B[v/T].
$$</p>

<p>Although this seems plausible, it's not correct.</p>

<p>Combinatory logic was introduced in a 1924 paper of Moses Schönfinkel. In it,
he defines a family of combinators including the standard <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24S%24">, <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24K%24">,
and <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24I%24">; he shows that only <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24S%24"> and <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24K%24"> are required.  His
initial set of combinators comprises the following:</p>

<p>$$
\begin{array}{cllrl}
I &amp; \textit{Identitätsfunktion} &amp; \text{“identity function”}&amp; I\,x =&amp; x  \\
C &amp; \textit{Konstanzfunktion} &amp; \text{“constancy function”} &amp; C\,x\,y =&amp; x \\
T &amp; \textit{Vertauschungsfunktion} &amp; \text{“swap function”} &amp; T\,x\,y\,z=&amp; x\,z\,y \\
Z &amp; \textit{Zusammensetzungsfunktion} &amp; \text{“composition function”} &amp; Z\,x\,y\,z=&amp; x\,(y\,z) \\
S &amp; \textit{Verschmelzungsfunktion} &amp; \text{“fusion function”} &amp; S\,x\,y\,z=&amp; x\,z\,(y\,z)
\end{array}
$$</p>

<p>(Schönfinkel also had combinators representing logical operations (one
corresponding to the <a href="https://en.wikipedia.org/wiki/Sheffer_stroke">Sheffer stroke</a>, which had
been discovered in 1913), and to quantification, but those don't
concern us right now.)</p>

<p><img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24T%24"> and <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24Z%24"> are now usually called <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24C%24"> and <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24B%24">.  These names
probably originated in Curry's <em>Grundlagen der kombinatorischen Logik</em>
(1930).  Curry 1930 is probably also the origin of the change from
<img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24C%24"> to <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24K%24">.  I have no idea why Schönfinkel chose to abbreviate
<em>Konstanzfunktion</em> as <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24C%24"> instead of <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24K%24">. Curry notes that for
<img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24I%2c%20K%2c%20B%2c%20C%2c%20S%24"> Schönfinkel has <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24I%2c%20C%2c%20Z%2c%20T%2c%20S%24">, but does not explain his
changes.  In Curry and Feys’ influential 1958 book on combinatory
logic, the <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24B%24">  and <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24C%24"> combinators given names that are are
literal translations of Schönfinkel's: “elementary permutator” and
“elementary compositor”.</p>

<p>Returning to the <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24S%24"> combinator, one sees that its German name in
Schönfinkel's paper, <em>Verschmelzungsfunktion</em>, begins with the letter V, but
so does <em>Vertauschungsfunktion</em>, so abbreviating either with V would
have been ambiguous.  Schönfinkel instead chose to abbreviate
<em>Verschmelzungsfunktion</em> with S for its root <em>schmelzen</em>, “fusion”,
and <em>Vertauschungsfunktion</em> with T for its root <em>tauschen</em>, “swap”.
The word <em>schmelzen</em> is akin to English words “melt” and “smelt”.</p>

<p>The “swap” is straightforward: the <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24T%24"> combinator swaps the order of
the arguments to <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24x%24"> in <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24x%5c%2cy%5c%2cz%24">: $$T\,x\,y\,z = x\,z\,y$$ but
does not otherwise alter the structure of the expression.</p>

<p>But why is <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24S%24"> the “melting” or “fusion” combinator?  It's because
Schönfinkel was interested in reducing abitrary mathematical expressions to
combinators. He will sometimes have an application <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24%28f%5c%2c%20x%29%28g%5c%2c%20x%29%24">
and he wants to ‘fuse’ the two occurrences of <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24x%24">.  He can do this
by rewriting the expression as <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24S%5c%2c%20f%5c%2c%20g%5c%2c%20x%24">. Schönfinkel says:</p>

<blockquote>
  <p>Der praktische Nutzen der Function <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24S%24"> besteht ersichtlich darin,
  daß sie es ermöglicht, mehrmals auftresnde Veränderliche — und bis
  zu einem gewissen Grade auch individuelle Functionen — nur einmal
  auftreten zu lassen.</p>
  
  <p>Clearly, the practical use of the function <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24S%24"> will be to enable
  us to reduce the number of occurrences of a variable — and to some
  extent also of a particular function — from several to a single one.</p>
</blockquote>

<p>(Translation from van Heijenoort, p. 362.)</p>

<p>So there you have it: the <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24S%24"> combinator is so-named not for
substitution, but because S is the first letter of <em>schmelzen</em>, ‘to
fuse’.</p>

<h2>References</h2>

<ul>
<li><p>Schönfinkel, M.  “Über die Bausteine der mathematischen Logik” (“On the building-blocks
of mathematical logic”), <em>Mathematische Annalen</em> (1969), p. 305–316; Berlin,
Göttingen, Heidelberg.</p>

<p>English translation in Van Heijenoort, Jean (ed.) <em>From Frege to
Gödel: a Source Book in Mathematical Logic, 1879–1931</em> (1967)
pp. 355–366 Harvard University Press; Cambridge and London.</p></li>
<li><p>Curry, H.B.
“<a href="https://doi.org/10.2307/2370619">Grundlagen der kombinatorischen Logik</a>”
(“Fundamentals of combinatory logic”), _American Journal of
Mathematics Vol. 52, No. 3 (Jul., 1930), pp. 509-536.</p></li>
<li><p>Curry, H.B. and Robert Feys <em>Combinatory Logic</em> (1958) p. 152
North-Holland Publishing Company, Amsterdam.</p></li>
</ul></div>
    </content>
    <updated>2021-08-28T16:02:00Z</updated>
    <published>2021-08-28T16:02:00Z</published>
    <category term="/math"/>
    <author>
      <name>Mark Dominus</name>
      <email>mjd@plover.com</email>
      <uri>http://www.plover.com/</uri>
    </author>
    <source>
      <id>tag:,2005:/</id>
      <icon>http://perl.plover.com/favicon.ico</icon>
      <link href="https://blog.plover.com/index.atom" rel="self" type="application/atom+xml">
      <link href="https://blog.plover.com" rel="alternate" type="text/html">
      <subtitle>The Universe of Discourse (Mark Dominus Blog)</subtitle>
      <title>The Universe of Discourse</title>
      <updated>2021-08-28T16:57:00Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-1777990983847811806.post-7712329497884133684</id>
    <link href="https://www.haskellforall.com/feeds/7712329497884133684/comments/default" rel="replies" title="Post Comments" type="application/atom+xml">
    <link href="https://www.haskellforall.com/2021/08/naming-function-arguments-in-dhall.html#comment-form" rel="replies" title="0 Comments" type="text/html">
    <link href="https://www.blogger.com/feeds/1777990983847811806/posts/default/7712329497884133684" rel="edit" type="application/atom+xml">
    <link href="https://www.blogger.com/feeds/1777990983847811806/posts/default/7712329497884133684" rel="self" type="application/atom+xml">
    <link href="https://www.haskellforall.com/2021/08/naming-function-arguments-in-dhall.html" rel="alternate" title="Naming function arguments in Dhall" type="text/html">
    <title>Naming function arguments in Dhall</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">doc-args    <p>This post showcases some neat <a href="https://dhall-lang.org/">Dhall</a> language features for improving the readability of types that I think other languages should steal.</p><p>To motivate this post, consider the following Haskell type for <a href="https://hackage.haskell.org/package/text-1.2.5.0/docs/Data-Text.html#v:replace"><code>Data.Text.replace</code></a>:</p><div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb1-1" tabindex="-1"/><span class="ot">replace ::</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">Text</span></span></code></pre></div><p>This function replaces all occurrences of a substring with another substring, but you wouldn’t be able to easily guess which argument is which from the type alone.</p><p>Fortunately, the function does have Haddock-level documentation in the form of comments for each function argument:</p><div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-1" tabindex="-1"/>replace</span><br><span id="cb2-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-2" tabindex="-1"/><span class="ot">    ::</span> <span class="dt">Text</span></span><br><span id="cb2-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-3" tabindex="-1"/>    <span class="co">-- ^ @needle@ to search for.  If this string is empty, an</span></span><br><span id="cb2-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-4" tabindex="-1"/>    <span class="co">-- error will occur.</span></span><br><span id="cb2-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-5" tabindex="-1"/>    <span class="ot">-&gt;</span> <span class="dt">Text</span></span><br><span id="cb2-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-6" tabindex="-1"/>    <span class="co">-- ^ @replacement@ to replace @needle@ with.</span></span><br><span id="cb2-7"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-7" tabindex="-1"/>    <span class="ot">-&gt;</span> <span class="dt">Text</span></span><br><span id="cb2-8"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-8" tabindex="-1"/>    <span class="co">-- ^ @haystack@ in which to search.</span></span><br><span id="cb2-9"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-9" tabindex="-1"/>    <span class="ot">-&gt;</span> <span class="dt">Text</span></span></code></pre></div><p>… but what if you could provide a hint to what each argument does within the type itself?</p><h4 id="naming-function-arguments-using-forall">Naming function arguments using <code>∀</code> / <code>forall</code></h4><p>Well, in Dhall you can, and here is the equivalent Dhall type:</p><div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb3-1" tabindex="-1"/><span class="op">$</span> dhall repl</span><br><span id="cb3-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb3-2" tabindex="-1"/>⊢ <span class="op">:</span><span class="kw">type</span> <span class="dt">Text</span><span class="op">/</span>replace</span><br><span id="cb3-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb3-3" tabindex="-1"/></span><br><span id="cb3-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb3-4" tabindex="-1"/>∀(needle <span class="op">:</span> <span class="dt">Text</span>) → ∀(replacement <span class="op">:</span> <span class="dt">Text</span>) → ∀(haystack <span class="op">:</span> <span class="dt">Text</span>) → <span class="dt">Text</span></span></code></pre></div><p>… or if you prefer ASCII syntax then that is the same as this type:</p><div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb4-1" tabindex="-1"/><span class="kw">forall</span> (needle <span class="op">:</span> <span class="dt">Text</span>) <span class="ot">-&gt;</span></span><br><span id="cb4-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb4-2" tabindex="-1"/><span class="kw">forall</span> (replacement <span class="op">:</span> <span class="dt">Text</span>) <span class="ot">-&gt;</span></span><br><span id="cb4-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb4-3" tabindex="-1"/><span class="kw">forall</span> (haystack <span class="op">:</span> <span class="dt">Text</span>) <span class="ot">-&gt;</span></span><br><span id="cb4-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb4-4" tabindex="-1"/>  <span class="dt">Text</span></span></code></pre></div><p>Here we’ve tagged each function argument with the argument’s name. In fact, you don’t need to do this explicitly. Dhall will automatically infer named function argument types when you create user-defined functions:</p><div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb5-1" tabindex="-1"/>⊢ <span class="op">:</span><span class="kw">type</span> λ(name <span class="op">:</span> <span class="dt">Text</span>) → <span class="st">&quot;Hello, ${name}&quot;</span></span><br><span id="cb5-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb5-2" tabindex="-1"/></span><br><span id="cb5-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb5-3" tabindex="-1"/>∀(name <span class="op">:</span> <span class="dt">Text</span>) → <span class="dt">Text</span></span></code></pre></div><p>In many cases these names are “cosmetic”, meaning that they have no effect on type-checking. For example, as far as the type-checker is concerned the following function type:</p><div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb6-1" tabindex="-1"/>∀(name <span class="op">:</span> <span class="dt">Text</span>) → <span class="dt">Text</span></span></code></pre></div><p>… is the exact same as the following simpler function type (they are α-equivalent):</p><div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-1" tabindex="-1"/><span class="dt">Text</span> → <span class="dt">Text</span></span></code></pre></div><p>However, sometimes these names are not cosmetic! The simplest example is a polymorphic function (a.k.a. a “generic” function), like the following polymorphic identity function:</p><div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb8-1" tabindex="-1"/><span class="kw">let</span> identity</span><br><span id="cb8-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb8-2" tabindex="-1"/>      <span class="op">:</span> ∀(a <span class="op">:</span> <span class="dt">Type</span>) → a → a</span><br><span id="cb8-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb8-3" tabindex="-1"/>      <span class="ot">=</span> λ(a <span class="op">:</span> <span class="dt">Type</span>) → λ(x <span class="op">:</span> a) → x</span><br><span id="cb8-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb8-4" tabindex="-1"/></span><br><span id="cb8-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb8-5" tabindex="-1"/><span class="kw">in</span>  identity</span></code></pre></div><p>Here we’ve used the <code>∀</code> to name the first function argument <code>a</code>, which lets us reference that name downstream within the same type.</p><div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb9-1" tabindex="-1"/><span class="kw">let</span> identity</span><br><span id="cb9-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb9-2" tabindex="-1"/>       <span class="co">-- We're naming our first function argument `a` …</span></span><br><span id="cb9-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb9-3" tabindex="-1"/>       <span class="co">-- ↓</span></span><br><span id="cb9-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb9-4" tabindex="-1"/>      <span class="op">:</span> ∀(a <span class="op">:</span> <span class="dt">Type</span>) → a → a</span><br><span id="cb9-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb9-5" tabindex="-1"/>                   <span class="co">-- ↑   ↑</span></span><br><span id="cb9-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb9-6" tabindex="-1"/>                   <span class="co">-- … so that we can reference the value of the first function</span></span><br><span id="cb9-7"><a href="https://www.haskellforall.com/feeds/posts/default#cb9-7" tabindex="-1"/>                   <span class="co">-- argument downstream within the same type</span></span><br><span id="cb9-8"><a href="https://www.haskellforall.com/feeds/posts/default#cb9-8" tabindex="-1"/>      <span class="ot">=</span> λ(a <span class="op">:</span> <span class="dt">Type</span>) → λ(x <span class="op">:</span> a) → x</span><br><span id="cb9-9"><a href="https://www.haskellforall.com/feeds/posts/default#cb9-9" tabindex="-1"/></span><br><span id="cb9-10"><a href="https://www.haskellforall.com/feeds/posts/default#cb9-10" tabindex="-1"/><span class="kw">in</span>  identity</span></code></pre></div><p>However, unlike other languages, Dhall also lets us name the second function argument using the exact same syntax, even though our second function argument is not a <code>Type</code>:</p><div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb10-1" tabindex="-1"/><span class="kw">let</span> identity</span><br><span id="cb10-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb10-2" tabindex="-1"/>      <span class="op">:</span> ∀(a <span class="op">:</span> <span class="dt">Type</span>) → ∀(x <span class="op">:</span> a) → a</span><br><span id="cb10-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb10-3" tabindex="-1"/>      <span class="ot">=</span> λ(a <span class="op">:</span> <span class="dt">Type</span>) → λ(x <span class="op">:</span> a) → x</span></code></pre></div><p>In fact, this is actually the type that the interpreter would have inferred if we had omitted the type annotation. The name of this second function argument is cosmetic, though.</p><p>Another example where the argument name is not cosmetic is the following hypothetical Dhall type for a safe division function that rejects <code>0</code> denominators at type-checking time:</p><div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb11-1" tabindex="-1"/>divide</span><br><span id="cb11-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb11-2" tabindex="-1"/>    <span class="op">:</span> ∀(<span class="fu">denominator</span> <span class="op">:</span> <span class="dt">Natural</span>) →</span><br><span id="cb11-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb11-3" tabindex="-1"/>      ∀(proof <span class="op">:</span> <span class="dt">Natural</span><span class="op">/</span>isZero <span class="fu">denominator</span> ≡ <span class="dt">False</span>) →</span><br><span id="cb11-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb11-4" tabindex="-1"/>      ∀(<span class="fu">numerator</span> <span class="op">:</span> <span class="dt">Natural</span>) →</span><br><span id="cb11-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb11-5" tabindex="-1"/>        <span class="dt">Natural</span></span></code></pre></div><p>This division function takes three arguments instead of the usual two:</p><ul><li><p>The first argument is the denominator</p><p>… as you may have guessed from the helpful type-level name</p></li><li><p>The second function argument requires a proof that <code>denominator</code> is non-zero</p><blockquote><p>Side note: This proof obligation is satisfied by <code>assert : False ≡ False</code> so long as <code>denominator</code> is not <code>0</code></p></blockquote></li><li><p>The third argument is the numerator</p></li></ul><p>By naming the first argument <code>denominator</code>, we can refer to the <em>value</em> of the first argument within the <em>type</em> of the second argument:</p><div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb12-1" tabindex="-1"/>divide</span><br><span id="cb12-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb12-2" tabindex="-1"/>    <span class="co">--  We're referring to the value of the first argument …</span></span><br><span id="cb12-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb12-3" tabindex="-1"/>    <span class="co">--  ↓</span></span><br><span id="cb12-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb12-4" tabindex="-1"/>    <span class="op">:</span> ∀(<span class="fu">denominator</span> <span class="op">:</span> <span class="dt">Natural</span>) →</span><br><span id="cb12-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb12-5" tabindex="-1"/>    <span class="co">--                         … within the type of the second argument</span></span><br><span id="cb12-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb12-6" tabindex="-1"/>    <span class="co">--                         ↓</span></span><br><span id="cb12-7"><a href="https://www.haskellforall.com/feeds/posts/default#cb12-7" tabindex="-1"/>      ∀(proof <span class="op">:</span> <span class="dt">Natural</span><span class="op">/</span>isZero <span class="fu">denominator</span> ≡ <span class="dt">False</span>) →</span><br><span id="cb12-8"><a href="https://www.haskellforall.com/feeds/posts/default#cb12-8" tabindex="-1"/>    <span class="co">--  ↑</span></span><br><span id="cb12-9"><a href="https://www.haskellforall.com/feeds/posts/default#cb12-9" tabindex="-1"/>    <span class="co">--  These names are still cosmetic, though</span></span><br><span id="cb12-10"><a href="https://www.haskellforall.com/feeds/posts/default#cb12-10" tabindex="-1"/>    <span class="co">--  ↓</span></span><br><span id="cb12-11"><a href="https://www.haskellforall.com/feeds/posts/default#cb12-11" tabindex="-1"/>      ∀(<span class="fu">numerator</span> <span class="op">:</span> <span class="dt">Natural</span>) →</span><br><span id="cb12-12"><a href="https://www.haskellforall.com/feeds/posts/default#cb12-12" tabindex="-1"/>        <span class="dt">Natural</span></span></code></pre></div><p>You might wonder why Dhall uses the <code>∀</code> / <code>forall</code> keyword for this purpose, since typically most languages only use <code>forall</code> to create polymorphic (a.k.a. “generic”) functions. This is because Dhall is implemented as a <a href="https://en.wikipedia.org/wiki/Pure_type_system">pure type system</a>, meaning that Dhall uniformly handles term-level function arguments and type-level function arguments in the exact same way. They’re both special cases of <a href="https://en.wikipedia.org/wiki/Dependent_type#%CE%A0_type">Π types</a>.</p><p>The following paper does a really good job explaining pure type systems and Π types:</p><ul><li><a href="https://www.microsoft.com/en-us/research/wp-content/uploads/1997/01/henk.pdf">Henk: a typed intermediate language</a>,</li></ul><p>… and that’s actually where I stole this trick from.</p><p>Really the correct symbol to use is <code>Π</code> and not <code>∀</code>, but there isn’t a great way to input <code>Π</code> as ASCII. The Henk paper suggests using <code>|~|</code> as the ASCII counterpart to <code>Π</code>, but that didn’t seem right to me. I went with <code>∀</code> / <code>forall</code> because there’s already prior art for using those for type arguments.</p><h4 id="anonymous-record-types">Anonymous record types</h4><p>There is another approach to naming function arguments that doesn’t require a pure type system at all: anonymous record types.</p><p>For example, we could have changed the <code>Text/replace</code> function to have this type:</p><div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb13-1" tabindex="-1"/>{ needle <span class="op">:</span> <span class="dt">Text</span>, replacement <span class="op">:</span> <span class="dt">Text</span>, haystack <span class="op">:</span> <span class="dt">Text</span> } → <span class="dt">Text</span></span></code></pre></div><p>That’s pretty clear, too, and can be done in any language that supports anonymous record types, including Dhall, <a href="https://fsharp.org/">F#</a>, <a href="https://www.purescript.org/">PureScript</a>, <a href="https://elm-lang.org/">Elm</a>, and <a href="https://ocaml.org/">OCaml</a>.</p><h4 id="naming-type-parameters">Naming type parameters</h4><p>You can also use the above two tricks to name type arguments for type constructors, too.</p><p>For example, we can define a <code>Map</code> type constructor to be a list of key-value pairs:</p><div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb14-1" tabindex="-1"/><span class="kw">let</span> <span class="dt">Map</span> <span class="ot">=</span></span><br><span id="cb14-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb14-2" tabindex="-1"/>      λ(key <span class="op">:</span> <span class="dt">Type</span>) →</span><br><span id="cb14-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb14-3" tabindex="-1"/>      λ(value <span class="op">:</span> <span class="dt">Type</span>) →</span><br><span id="cb14-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb14-4" tabindex="-1"/>        <span class="dt">List</span> { mapKey <span class="op">:</span> key, mapValue <span class="op">:</span> value }</span></code></pre></div><p>… which we would use like this:</p><div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb15-1" tabindex="-1"/>⊢ <span class="dt">Map</span> <span class="dt">Text</span> <span class="dt">Natural</span></span><br><span id="cb15-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb15-2" tabindex="-1"/></span><br><span id="cb15-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb15-3" tabindex="-1"/><span class="dt">List</span> { mapKey <span class="op">:</span> <span class="dt">Text</span>, mapValue <span class="op">:</span> <span class="dt">Natural</span> }</span></code></pre></div><p>… and the inferred type names the arguments to our <code>Map</code> type constructor:</p><div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb16-1" tabindex="-1"/>⊢ <span class="op">:</span><span class="kw">type</span> <span class="dt">Map</span></span><br><span id="cb16-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb16-2" tabindex="-1"/></span><br><span id="cb16-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb16-3" tabindex="-1"/>∀(key <span class="op">:</span> <span class="dt">Type</span>) → ∀(value <span class="op">:</span> <span class="dt">Type</span>) → <span class="dt">Type</span></span></code></pre></div><p>We can also use anonymous records to name type arguments, too! For example, we could have instead defined <code>Map</code> as:</p><div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb17-1" tabindex="-1"/><span class="kw">let</span> <span class="dt">Map</span> <span class="ot">=</span></span><br><span id="cb17-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb17-2" tabindex="-1"/>      λ(args <span class="op">:</span> { key <span class="op">:</span> <span class="dt">Type</span>, value <span class="op">:</span> <span class="dt">Type</span> }) →</span><br><span id="cb17-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb17-3" tabindex="-1"/>        <span class="dt">List</span> { mapKey <span class="op">:</span> args<span class="op">.</span>key, mapValue <span class="op">:</span> args<span class="op">.</span>value }</span></code></pre></div><p>… which we would use like this:</p><div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb18-1" tabindex="-1"/>⊢ <span class="dt">Map</span> { key <span class="ot">=</span> <span class="dt">Text</span>, value <span class="ot">=</span> <span class="dt">Natural</span> }</span><br><span id="cb18-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb18-2" tabindex="-1"/></span><br><span id="cb18-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb18-3" tabindex="-1"/><span class="dt">List</span> { mapKey <span class="op">:</span> <span class="dt">Text</span>, mapValue <span class="op">:</span> <span class="dt">Natural</span> }</span></code></pre></div><p>… and this latter <code>Map</code> would have an inferred type of:</p><div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb19-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb19-1" tabindex="-1"/>⊢ <span class="op">:</span><span class="kw">type</span> <span class="dt">Map</span></span><br><span id="cb19-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb19-2" tabindex="-1"/></span><br><span id="cb19-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb19-3" tabindex="-1"/>∀(args <span class="op">:</span> { key <span class="op">:</span> <span class="dt">Type</span>, value <span class="op">:</span> <span class="dt">Type</span> }) → <span class="dt">Type</span></span></code></pre></div><p>Pretty neat! Not many languages can pass type constructor arguments as named fields of a record.</p><h4 id="conclusion">Conclusion</h4><p>Hopefully this gives language designers some ideas for how they can add language support for naming function arguments.</p><p>Unfortunately, my favorite language (<a href="https://www.haskell.org/">Haskell</a>) does not exactly support these features, so sometimes people work around this by using <code>newtype</code>s to name function arguments. I’ve never been of fan of this approach, especially if the newtype is not opaque and this post does a good job of explaining why:</p><ul><li><a href="https://lexi-lambda.github.io/blog/2020/11/01/names-are-not-type-safety/">Names are not type safety</a></li></ul><p>However, you can simulate this trick in Haskell using something like what the <code>vulkan</code> package does, which is to use <code>DataKinds</code> and <code>TypeOperators</code> to create a type-level operator that lets you associate arbitrary name data with types:</p><div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb20-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-1" tabindex="-1"/><span class="kw">type</span> (<span class="ot">name ::</span> k) <span class="op">:::</span> a <span class="ot">=</span> a</span></code></pre></div><p>… which the package uses like this:</p><div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb21-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb21-1" tabindex="-1"/>cmdDraw</span><br><span id="cb21-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb21-2" tabindex="-1"/><span class="ot">    ::</span> <span class="kw">forall</span> io <span class="op">.</span> (<span class="dt">MonadIO</span> io)</span><br><span id="cb21-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb21-3" tabindex="-1"/>    <span class="ot">=&gt;</span> <span class="co">-- | @commandBuffer@ is the command buffer into which the command is</span></span><br><span id="cb21-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb21-4" tabindex="-1"/>       <span class="co">-- recorded.</span></span><br><span id="cb21-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb21-5" tabindex="-1"/>       <span class="dt">CommandBuffer</span></span><br><span id="cb21-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb21-6" tabindex="-1"/>    <span class="ot">-&gt;</span> <span class="co">-- | @vertexCount@ is the number of vertices to draw.</span></span><br><span id="cb21-7"><a href="https://www.haskellforall.com/feeds/posts/default#cb21-7" tabindex="-1"/>       (<span class="st">&quot;vertexCount&quot;</span> <span class="op">:::</span> <span class="dt">Word32</span>)</span><br><span id="cb21-8"><a href="https://www.haskellforall.com/feeds/posts/default#cb21-8" tabindex="-1"/>    <span class="ot">-&gt;</span> <span class="co">-- | @instanceCount@ is the number of instances to draw.</span></span><br><span id="cb21-9"><a href="https://www.haskellforall.com/feeds/posts/default#cb21-9" tabindex="-1"/>       (<span class="st">&quot;instanceCount&quot;</span> <span class="op">:::</span> <span class="dt">Word32</span>)</span><br><span id="cb21-10"><a href="https://www.haskellforall.com/feeds/posts/default#cb21-10" tabindex="-1"/>    <span class="ot">-&gt;</span> <span class="co">-- | @firstVertex@ is the index of the first vertex to draw.</span></span><br><span id="cb21-11"><a href="https://www.haskellforall.com/feeds/posts/default#cb21-11" tabindex="-1"/>       (<span class="st">&quot;firstVertex&quot;</span> <span class="op">:::</span> <span class="dt">Word32</span>)</span><br><span id="cb21-12"><a href="https://www.haskellforall.com/feeds/posts/default#cb21-12" tabindex="-1"/>    <span class="ot">-&gt;</span> <span class="co">-- | @firstInstance@ is the instance ID of the first instance to draw.</span></span><br><span id="cb21-13"><a href="https://www.haskellforall.com/feeds/posts/default#cb21-13" tabindex="-1"/>       (<span class="st">&quot;firstInstance&quot;</span> <span class="op">:::</span> <span class="dt">Word32</span>)</span><br><span id="cb21-14"><a href="https://www.haskellforall.com/feeds/posts/default#cb21-14" tabindex="-1"/>    <span class="ot">-&gt;</span> io ()</span></code></pre></div><p>These names are ignored by the type-checker, just like the equivalent cosmetic names in Dhall.</p></div>
    </content>
    <updated>2021-08-27T15:22:33Z</updated>
    <published>2021-08-27T15:22:00Z</published>
    <author>
      <name>Gabriel Gonzalez</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/01917800488530923694</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-1777990983847811806</id>
      <author>
        <name>Gabriel Gonzalez</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/01917800488530923694</uri>
      </author>
      <link href="https://www.haskellforall.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml">
      <link href="https://www.blogger.com/feeds/1777990983847811806/posts/default" rel="self" type="application/atom+xml">
      <link href="https://www.haskellforall.com/" rel="alternate" type="text/html">
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html">
      <link href="https://www.blogger.com/feeds/1777990983847811806/posts/default?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml">
      <title>Haskell for all</title>
      <updated>2021-08-31T13:52:52Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://medium.com/p/810a2f6051eb</id>
    <link href="https://cdsmithus.medium.com/nascent-ghc-proposal-source-rewrite-rules-and-optional-constraints-810a2f6051eb?source=rss-18bd5acaea78------2" rel="alternate" type="text/html">
    <title>Nascent GHC Proposal: Source Rewrite Rules and Optional Constraints</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Lately, I’ve been thinking more and more about something that would be nice to have in GHC.</p><h4>Motivation #1: HMock Predicates</h4><p>Consider the Predicate type <a href="https://github.com/cdsmith/HMock/blob/7aea28411cfaff2cd5adaf73c37f26962cc167e8/src/Test/HMock/Predicates.hs#L96">from HMock</a>:</p><pre>data Predicate a = Predicate<br>  { showPredicate :: String,<br>    showNegation :: String,<br>    accept :: a -&gt; Bool,<br>    explain :: a -&gt; String<br>  }</pre><p>The purpose of this type is to be a function a -&gt; Bool that can also explain itself. That is, you can get Strings to explain what it’s testing, and why a particular argument matches or not. There are three important things to know about Predicate:</p><ol><li>It’s important that Predicate works on arbitrary types, including those without Show instances. Indeed, using predicates is the only way to match function calls in HMock whose arguments <em>don’t</em> have Eq and Show instances.</li><li>The exact strings produced by showPredicate, showNegation, and explain are entirely unspecified, by design. It’s nice for users if they are as descriptive as possible, but they only get used in error messages and diagnostics, so no kind of real correctness depends upon their exact value.</li><li>Predicates are often polymorphic. For instance, there is eq :: (Show a, Eq a) =&gt; a -&gt; Predicate a, which compares checks for equality with a specific value. There are even more complex predicates, too, like unorderedElemsAre :: MonoFoldable t =&gt; [Predicate (Element t)] -&gt; Predicate t, which uses a Ford-Fulkerson max-flow algorithm to match elements and child predicates, then reports on the best available matching, and whether there were either elements or child predicates that couldn’t be matched.</li></ol><p>Here’s the fundamental problem: what do I do with Show instances? Even in the description above, there are some unsatisfying choices:</p><ul><li>The eq predicate requires a Show constraint. This is used to implement showPredicate, showNegation, and explain. However, if it weren’t available, I could still provide the core functionality of eq at the cost of somewhat poorer descriptive text. Leaving out the Show constraint would have doomed <em>all</em> users to receive poor descriptions. In the end, I left it in, making eq less useful. I could also define a separate nonShowableEq predicate, which is identical to eq in all ways except that it lacks Show. This is ugly, and doing this everywhere would double the exposed symbols in this module (from 50 to 100 exports!)</li><li>On the other hand, unorderedElemsAre doesn’t have an Eq constraint on Element t. If it did, I could provide <em>better</em> explanatory text by listing which specific element values in the collection were unexpected. Yet this seems too limiting on such a useful combinator, which is often useful for higher-order types. Therefore, I left the constraint out. This is a real loss of functionality. Again, I could define showableUnorderedElemsAre, but at the cost of exploding the API if I did this everywhere.</li></ul><p>What I really want is for GHC to check the types looking for a Show constraint, then use one or the other implementation depending on whether a Show constraint exists. This might seem suspect. Indeed, it is! It’s only reasonable because the results of the two implementations are equivalent up to the unspecified explanatory text.</p><h4>Motivation #2: Improving efficiency</h4><p>This isn’t the only time something like this comes up. A similar situation often arises with polymorphic algorithms. With only an Eq constraint, the best you can do for Haskell’s nub function (which removes duplicates from a list) is O(<em>n</em>²). Add an Ord constraint, and you can do the same thing in O(<em>n</em> log <em>n</em>). It requires a bit of care to do it in a way that preserves the original order, but it’s still possible. Add a Hashable constraint, and you can do it in O(<em>n</em>) expected time.</p><p>In practice, Haskell offers nub, and common libraries offer orbNub to do the same thing more efficiently. That’s again an extra API for the <em>same</em> function, just with better performance at the cost of more assumptions about its input. It’s ugly that this is necessary.</p><h4>Existing (and partial) solutions</h4><p>It’s not surprising that people have thought about this in the past. There are several bits of prior work worth mentioning.</p><ul><li>In C++, there’s an approach known as SFINAE: “Specialization Failure Is Not An Error”. What this means is that you can just write two implementations of the same template, and if the more specific one doesn’t compile, you don’t get an error! Instead, the compiler ignores it and substitutes the more general implementation. Since C++ monomorphizes all templates at compile time, it all comes down to trying, and dropping the specialization if possible. This means C++ programs can make these trade-offs without exposing different names and APIs.</li><li>Mike Izbicki has written a Haskell library called <a href="https://github.com/mikeizbicki/ifcxt">ifcxt</a> for Haskell, which partially solves the problem. The good news is that you can use the library to define optional constraints, and different implementations based on whether the constraint is satisfied or not. The bad news is that it requires Template Haskell to write a bunch of boilerplate. Unfortunately, new boilerplate is needed for every new type, so this Template Haskell cannot be internal to the implementation and needs to be invoked from the client code.</li><li>GHC already has a mechanism called rewrite rules, which allow certain expressions to be matched and rewritten by the compiler into a more efficient form. However, this happens during the Core stage of GHC, which is after type class resolution has occurred. This means that rewrite rules are not able to add additional type classes.</li></ul><p>It seems that what’s needed here is a GHC plugin or extension.</p><h4>Proposed solution #1: Source rewrite rules</h4><p>This seems very similar to a rewrite rule, but just needs to fire at a different stage of the compilation. Therefore, if I were proposing this, I would propose a new kind of rewrite rule. Something like this:</p><pre>{-# SOURCE_RULES<br>    &quot;nub/Ord&quot; forall x. nub x = ordNub x<br>  #-}</pre><p>When encountering a rule like this during type checking, GHC would attempt to perform the given substitution. If the resulting program type checks, fine. Otherwise, it would fall back to not applying the rule rather than failing the compile. This is very like the SFINAE rule in C++.</p><h4>Proposed solution #2: Optional constraints</h4><p>There’s a slight problem with the solution above: it’s not very compositional when we have separate compilation. If I write this:</p><pre>foo :: a -&gt; a<br>foo = id</pre><pre>fooNum :: Num a =&gt; a -&gt; a<br>fooNum a = a + 1</pre><pre>{-# SOURCE_RULES<br>    &quot;fooNum&quot; forall x. foo x = fooNum x<br>  #-}</pre><pre>bar x = foo x</pre><p>What is the type of bar? If bar has type a -&gt; a, then the fooNum rule never fires. On the other hand, if bar has type Num a =&gt; a -&gt; a, then it is insufficiently general.</p><p>I propose that it should infer a -&gt; a, but with an explicit type signature, one could write bar :: ?Num a =&gt; a -&gt; a. This would inform GHC that it should generate two versions of bar, one specialized implementation with a Num constraint, and one general implementation without. It should then automatically generate a new source rule forall x. bar x = barNum x, that tries to rewrite the more general implementation into the specialized one when possible. (If there are no source rules that depend on the constraint, GHC could realize that both implementations are the same, and decline to generate a specialization at all, possibly with a warning about a redundant optional constraint.)</p><h4>Conclusion</h4><p>What do you think? Is this a direction you’d like to see GHC move? Is ifCxt enough?</p><img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=810a2f6051eb" width="1"></div>
    </content>
    <updated>2021-08-27T01:40:18Z</updated>
    <published>2021-08-27T01:40:18Z</published>
    <category term="haskell"/>
    <category term="ghc"/>
    <author>
      <name>Chris Smith</name>
    </author>
    <source>
      <id>https://medium.com/@cdsmithus?source=rss-18bd5acaea78------2</id>
      <logo>https://cdn-images-1.medium.com/fit/c/150/150/1*rU9ddF_bkph8Qg3jip7vfw.jpeg</logo>
      <link href="https://medium.com/@cdsmithus?source=rss-18bd5acaea78------2" rel="alternate" type="text/html">
      <link href="https://medium.com/@cdsmithus/feed" rel="self" type="application/rss+xml">
      <link href="http://medium.superfeedr.com" rel="hub" type="text/html">
      <subtitle>Stories by Chris Smith on Medium</subtitle>
      <title>Stories by Chris Smith on Medium</title>
      <updated>2021-09-01T07:52:35Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://tweag.io/blog/2021-08-27-icfp4/</id>
    <link href="https://tweag.io/blog/2021-08-27-icfp4/" rel="alternate" type="text/html">
    <title>Daily ICFP: Day 4</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><h1>Daily ICFP</h1>
<p>Several Tweagers all agreed to gather notes here about our
<a href="https://icfp21.sigplan.org/">ICFP</a> (International Conference on Functional
Programming) experiences.</p>
<p>Other posts in this series:</p>
<ul>
<li><a href="https://www.tweag.io/blog/2021-08-23-icfp0/">ICFP - Day 0</a></li>
<li><a href="https://www.tweag.io/blog/2021-08-24-icfp1/">ICFP - Day 1</a></li>
<li><a href="https://www.tweag.io/blog/2021-08-25-icfp2/">ICFP - Day 2</a></li>
<li><a href="https://www.tweag.io/blog/2021-08-26-icfp3/">ICFP - Day 3</a></li>
<li><a href="https://www.tweag.io/blog/2021-08-30-icfp5/">ICFP - Day 5</a></li>
</ul>
<h2>Day 4 - Thursday</h2>
<p>These notes follow Noon and Richard through their day at ICFP,
roughly in order. (The talks are not publicly posted at the time
of publication of this post, but we expect they will be over the
coming weeks.)</p>
<p><em>Noon</em> — Second to last day of ICFP. I’m becoming sad that it’s
going to be over! But that said, I’m <em>really</em> looking forward to today!
I feel a bit relaxed as well, because from my timezone (UK) I get a bit
of a break in the morning (as I’m starting my day at the Haskell track.)</p>
<h4><a href="https://icfp21.sigplan.org/details/haskellsymp-2021/9/Chesskell-A-Two-Player-Game-at-the-Type-Level">Chesskell: A Two-Player Game at the Type Level</a>, by Toby Bailey and Michael Gale</h4>
<p><em>Noon</em></p>
<ul>
<li>What if you were taught chess slowly by a compiler?</li>
<li>Chesskell uses a little bit (a lot) more memory than the Witcher 3.</li>
<li>Overall a very fun talk about pushing the limits of type-level programming in GHC.</li>
</ul>
<p><em>Richard</em></p>
<p>This was such a fun talk. Chesskell is an implementation of chess such that
any illegal move is a type error. You play by typing in a Haskell buffer to
append moves to the game.</p>
<p>To be clear: this is <em>not</em> an implementation of a chess game. It’s really only
a fun experiment to see how far Haskell’s type system can go. In this sense,
this project is a little dangerous: I wouldn’t want, say, a Java programmer to
come across Chesskell and think this is how one would implement chess in
Haskell! With that out of the way, though, this <em>is</em> indeed really fun. It’s
amazing this can be done at all.</p>
<p>The talk focused mostly on limitations in GHC around its evaluation of type
families, which is unpredictably slow. We at GHC know this and are working on
it (led by Adam Gundry of Well-Typed), but this talk really pointed out all
our flaws. It also describes an EDSL (embedded domain-specific language) that
struggles with the new simplified subsumption in GHC 9. (See the
<a href="https://github.com/ghc-proposals/ghc-proposals/pull/287">proposal</a> for a
description.) It’s the first example I’ve come across of a program that is
anti-simplified-subsumption in a way that cannot be easily repaired.</p>
<h4><a href="https://icfp21.sigplan.org/details/haskellsymp-2021/8/Express-applications-of-dynamically-typed-Haskell-expressions">Express: applications of dynamically typed Haskell expressions</a>, by Rudy Matela</h4>
<p><em>Noon</em></p>
<ul>
<li>Talking about <a href="https://hackage.haskell.org/package/express">this library</a></li>
<li>Very cool library.</li>
<li>Really cool capability to generate conjectures (equations that are true from testing) from expressions; i.e. learn things such as <code class="language-text">xs ++ [] = xs</code>, and other interesting ideas.</li>
<li>Uses this to generalise property-based testing counter-examples.</li>
<li>Also does function synthesis!</li>
<li>Overall I loved this talk and the idea and I think the library will only get much more awesome over time!</li>
</ul>
<p><em>Richard</em></p>
<p>I really liked this talk, too. It starts with a simple idea — Haskell’s
<code class="language-text">Dynamic</code> — and extends it with the ability to track function application and
store abstract variables (that is, an <code class="language-text">x</code> that is not bound to a value, like
we would see in an algebraic equation). The talk then explores all manner of
applications of this simple idea. The whole approach (simple idea leading to
multifarious applications) is so Haskelly.</p>
<h4><a href="https://icfp21.sigplan.org/details/haskellsymp-2021/4/Haskell-Automatic-Function-Inversion-in-Haskell">Haskell⁻¹: Automatic Function Inversion in Haskell</a>, by Finn Teegen, Kai-Oliver Prott and Niels Bunkenburg.</h4>
<p><em>Noon</em></p>
<ul>
<li>When inverting, how to deal with functions that are not injective? (i.e. no unique inverse)</li>
<li>Idea: Just allow multiple inverses!</li>
<li>With <a href="https://github.com/cau-placc/inversion-plugin">the plugin</a>, any function in standard Haskell can be inverted.</li>
<li>Want a “functional logic” version of Haskell, similar to Prolog.</li>
<li>Went into a bit more detail about the function inversion process.</li>
<li>Overall pretty interesting, and gives me more motivation that one day I’d love to investigate how GHC plugins work and what is possible with them!</li>
</ul>
<p><em>Richard</em></p>
<p>This nice talk shows another superpower of GHC: allowing plugins that can
manipulate Haskell source — this one, computing inverses of functions.</p>
<h4><a href="https://icfp21.sigplan.org/details/haskellsymp-2021/12/Why-Functional-Programming-with-Linear-Types-Matters">Why functional programming with linear types matters</a>, by Tweag CEO Mathieu Boespflug</h4>
<p><em>Noon</em></p>
<ul>
<li>My favourite quote: “The Spleen of Reality”</li>
</ul>
<p><em>Richard</em></p>
<p>This talk explores why Tweag is interested in linear types, focusing on two
key benefits: extra safety (the example given was that we don’t want our
functional program to accidentally duplicate one pizza into two) and extra
performance (linear types can be used to ensure resource disposal, and so
provides a potential alternative to garbage collection and the costly latency
GC can introduce).</p>
<p>The talk also includes an excellent introduction to linear types for anyone
who does not know about them.</p>
<h4><a href="https://icfp21.sigplan.org/details/haskellsymp-2021/6/Design-Patterns-for-Parser-Combinators-Functional-Pearl-">Design Patterns for Parser Combinators (Functional Pearl)</a>, by Jamie Willis and Nicolas Wu</h4>
<p><em>Noon</em></p>
<ul>
<li>Love the code-review talk format!</li>
<li><a href="https://github.com/j-mie6/design-patterns-for-parser-combinators/issues/3">https://github.com/j-mie6/design-patterns-for-parser-combinators/issues/3</a></li>
<li><a href="https://github.com/j-mie6/design-patterns-for-parser-combinators/pull/6/files">https://github.com/j-mie6/design-patterns-for-parser-combinators/pull/6/files</a></li>
<li>Can’t be described; you have to watch the talk. Exceptional.</li>
</ul>
<p><em>Richard</em></p>
<p>Amazing talk. Do watch. And, when you do, keep in mind that everything you’re
seeing is actually live.</p>
<p>This is one of a series of amazing talks by Nick Wu. I will endeavor to watch
the talk of any paper of his into perpetuity.</p>
<p>Oh, and there was content: a very nice description of useful design patterns
for parser combinators. Nothing earth-shattering here, but it’s really great
to have all this material in one place. When I reach for parser combinators
next (or am mentoring someone who is), I will point them to this paper.</p>
<p><em>Noon</em> — <strong><a href="https://icfp21.sigplan.org/details/haskellsymp-2021/3/Graded-Monads-and-Type-Level-Programming-for-Dependence-Analysis">Graded Monads and Type-Level Programming for Dependence Analysis</a>, by Finnbar Keating and Michael Gale</strong></p>
<ul>
<li>Imagine working with a robot.</li>
<li>Want types to reflect what we do: such as reading from the screen, writing to the screen, etc.</li>
<li>Graded monads can help us do this.</li>
</ul>
<p><em>Noon</em> — <strong><a href="https://icfp21.sigplan.org/details/mlfamilyworkshop-2021-papers/6/Sylvester-Unified-typed-notation-for-symbolic-mathematics-and-proofs-short-talk-">Sylvester: Unified, typed, notation for symbolic mathematics and proofs (short talk)</a>, by Allister Beharry</strong></p>
<ul>
<li>Popped into this talk because I was curious about the topic.</li>
<li>It’s based in F#; not a language I’ve used a lot recently.</li>
<li>Main idea is to have a language that allows for computer-algebra <em>and</em> general-purpose programming.</li>
<li>Integrates with other tools (say, Z3).</li>
<li>I really like the idea in general, and it was nice to watch this and step outside my usual comfort zone a bit.</li>
</ul>
<p><em>Richard</em> — In the afternoon <a href="https://pltea.github.io/">PLTea</a>, an
interesting conversation led to a new insight: GHC has for some time thought
about doing finer-grained analysis for recompilation avoidance. That is, if I
change one function, then I have to recompile only modules that depend on
that function. But I don’t think the current analysis is always quite that
clever. And so, being cleverer would avoid spurious recompilation. The new
insight is that this kind of cleverness would be very helpful to IDEs trying
to provide live code feedback: in order for an IDE to know where (say) a type
error is, it has to run the code through GHC. If we can compile just a tiny
part of the file at a time (part of what would power the fine-grained
recompilation-avoiding dependency analysis), then this live feedback would
come much faster. So it’s nice to see multiple benefits from one feature! Now
we just have to design and implement the feature…</p></div>
    </summary>
    <updated>2021-08-27T00:00:00Z</updated>
    <published>2021-08-27T00:00:00Z</published>
    <source>
      <id>https://tweag.io</id>
      <author>
        <name>Tweag I/O</name>
      </author>
      <link href="https://tweag.io" rel="alternate" type="text/html">
      <link href="http://www.tweag.io/rss.xml" rel="self" type="application/rss+xml">
      <subtitle>Scale your engineering power. We enable deep-tech startups to achieve
their vision, from research to product delivery.</subtitle>
      <title>Tweag - Engineering blog</title>
      <updated>2021-08-31T14:07:39Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://haskell.org/ghc/blog/20210827-ghc-8.10.7-released.html</id>
    <link href="http://haskell.org/ghc/blog/20210827-ghc-8.10.7-released.html" rel="alternate" type="text/html">
    <title>GHC 8.10.7 is now available</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><h1>GHC 8.10.7 is now available</h1>
<h4 class="text-muted">Zubin Duggal - 2021-08-27</h4>

<p>The GHC team is very pleased to announce the availability of GHC 8.10.7. Source and binary distributions are available at the <a href="https://downloads.haskell.org/ghc/8.10.7/">usual place</a>.</p>
<p>This is a small bugfix release, fixing one linking portability issue (<a href="https://gitlab.haskell.org/ghc/ghc/issues/19950">#19950</a>) present in GHC 8.10.5 and GHC 8.10.6 on some x86_64 macOS toolchains, which resulted in undefined symbol errors for <code>___darwin_check_fd_set_overflow</code>.</p>
<p>Issue <a href="https://gitlab.haskell.org/ghc/ghc/issues/19950">#19950</a> is caused by a bug in newer Apple toolchains (specifically XCode 12) where programs compiled with affected versions of XCode are not backwards compatible with configurations running older version of XCode (certain versions of XCode 11).</p>
<p>We claimed to have fixed this in GHC 8.10.6, but alas this wasnâ€™t the case. The fix was originally tested on the master branch, which uses a different build configuration from the 8.10 branch. We have now tested the fix on the GHC 8.10 branch and finally squashed the bug.</p>
<p>We would like to thank Microsoft Research, GitHub, IOHK, the Zw3rk stake pool, Tweag I/O, Serokell, Equinix, SimSpace, and other anonymous contributors whose on-going financial and in-kind support has facilitated GHC maintenance and release management over the years. We would also like to thank the hundreds of open-source contributors whose work makes GHC possible.</p>
<p>A complete list of bug fixes and improvements can be found in the <a href="https://downloads.haskell.org/ghc/8.10.7/docs/html/users_guide/8.10.7-notes.html">release notes</a>.</p>
<p>As always, feel free to report any issues you encounter via <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/new">gitlab.haskell.org</a>.</p></div>
    </summary>
    <updated>2021-08-27T00:00:00Z</updated>
    <published>2021-08-27T00:00:00Z</published>
    <author>
      <name>ghc-devs</name>
    </author>
    <source>
      <id>http://haskell.org/ghc</id>
      <link href="http://haskell.org/ghc" rel="alternate" type="text/html">
      <link href="http://haskell.org/ghc/rss.xml" rel="self" type="application/rss+xml">
      <title>GHC Developer blog</title>
      <updated>2021-08-27T00:00:00Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-8768401356830813531.post-4897572765487639472</id>
    <link href="http://softwaresimply.blogspot.com/feeds/4897572765487639472/comments/default" rel="replies" title="Post Comments" type="application/atom+xml">
    <link href="http://www.blogger.com/comment.g?blogID=8768401356830813531&amp;postID=4897572765487639472" rel="replies" title="0 Comments" type="text/html">
    <link href="http://www.blogger.com/feeds/8768401356830813531/posts/default/4897572765487639472" rel="edit" type="application/atom+xml">
    <link href="http://www.blogger.com/feeds/8768401356830813531/posts/default/4897572765487639472" rel="self" type="application/atom+xml">
    <link href="http://feedproxy.google.com/~r/SoftwareSimply/~3/vgc9Il-F95k/dependent-types-are-runtime-maybe.html" rel="alternate" title="Dependent Types are a Runtime Maybe" type="text/html">
    <title>Dependent Types are a Runtime Maybe</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Awhile back I was discussing dependent types with someone and we ended up concluding that dependent types can always be replaced by a runtime Maybe.  This seemed to me then (and still does today) as a fairly surprising and provocative conclusion.  So I thought I'd put the idea out there and see what people think.</p><p>Let's look at a few examples that are commonly used to illustrate dependent types:</p><p></p><ul style="text-align: left;"><li>Vectors of length N</li><li>Matrices of size <span style="font-family: courier;">m x n</span></li><li>Sorted lists</li><li>Height-balanced trees (trees where the height of subtrees differ by at most one)</li></ul><div>The argument is roughly as follows.  All of these examples ultimately boil down to enforcing some kind of constraint on some data types.  The more powerful your dependent type system, the more rich and expressive will be the constraints that you can enforce.  If we take this thought experiment to its logical conclusion, we end up with a dependent type system that allows us to enforce any constraint that can be computed.</div><div><br></div><div>The important realization here is that every one of the above dependent type examples are a constraint that can also be enforced by a smart constructor.  The smart constructor pattern is roughly this:</div><div><br></div><div><span style="font-family: courier;">module Foo</span></div><div><span style="font-family: courier;">  ( Foo</span></div><div><span style="font-family: courier;">  , mkFoo</span></div><div><span style="font-family: courier;">  -- Any other functionality that Foo supplies</span></div><div><span style="font-family: courier;">  )</span></div><div><span style="font-family: courier;"><br></span></div><div><span style="font-family: courier;">data Foo = ...</span></div><div><span style="font-family: courier;"><br></span></div><div><span style="font-family: courier;">mkFoo :: FooInputs -&gt; Maybe Foo</span></div><div><br></div><div>You can express all of the above dependent type constraints using this pattern. VecN can simply hold a vector and the length N constraint can be enforced in mkVecN.  Similarly, SortedList can simple hold a list and the mkSortedList can sort its input and/or return Nothing if its input isn't sorted.  The smart constructor <span style="font-family: courier;">mkFoo</span> can contain arbitrarily complex Turing-complete constraints and return a <span style="font-family: courier;">Just</span> whenever they're satisfied or a <span style="font-family: courier;">Nothing</span> if they're not.</div><div><br></div><div>The key difference between dependent types and a smart constructor is that with dependent types the constraint is enforced at compile time and with a smart constructor it is checked at runtime.  This suggests a rule of thumb for answering the question of whether you should use dependent types:</div><div><br></div><div>If the cost (TCO...i.e. the sum total of dev time, readability of the resulting code, and all the ongoing maintenance) of using a dependent type is less than the cost of handling the <span style="font-family: courier;">Nothing</span> cases at runtime, then you should use a dependent type.  Otherwise, you should just use a smart constructor.</div><div><br></div><div>The interesting thing here is that Haskell gives us a fantastic set of tools for handling runtime Nothing values.  The <span style="font-family: courier;">Maybe</span> type is has instances of Functor, Applicative, and Monad which allow us to avoid a lot of the code overhead of checking the failure cases and handling them appropriately.  It is often possible to front load the checking of the constraint with a case statement near the top level:</div><div><br></div><div><span style="font-family: courier;">case mkFoo inputs of</span></div><div><span style="font-family: courier;">  Nothing -&gt; handleError</span></div><div><span style="font-family: courier;">  Just a -&gt; handleSuccess a</span></div><div><br></div><div>Then all the rest of your code will be working with <span style="font-family: courier;">Foo</span>, which is structurally guaranteed to have the properties you want and allows the use of simplified code that doesn't bother checking the error conditions.</div><div><br></div><div>My takeaway from this argument is that you should only reach for dependent types when dealing with situations where you can't front-load the error handling and the cost of having <span style="font-family: courier;">Maybe a</span>'s floating around your code exceeds the cost of the dependent type machinery.</div><div><br></div><div>What do you think?  Am I missing something here?  I'd love to see if anyone has practical examples of dependent types that can't be boiled down to this kind of smart constructor and runtime <span style="font-family: courier;">Maybe</span> or where the cost of doing so is exceptionally high.</div><p></p><img alt="" height="1" src="http://feeds.feedburner.com/~r/SoftwareSimply/~4/vgc9Il-F95k" width="1"></div>
    </content>
    <updated>2021-08-26T14:23:36Z</updated>
    <published>2021-08-26T14:23:00Z</published><feedburner:origLink xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0">http://softwaresimply.blogspot.com/2021/08/dependent-types-are-runtime-maybe.html</feedburner:origLink>
    <author>
      <name>mightybyte</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/15198998578494149797</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-8768401356830813531</id>
      <category term="haskell"/>
      <category term="cabal"/>
      <category term="happs"/>
      <category term="heist"/>
      <category term="ltmt"/>
      <category term="scripting"/>
      <category term="analysis"/>
      <category term="ember"/>
      <category term="javascript"/>
      <category term="screencast"/>
      <category term="snap"/>
      <author>
        <name>mightybyte</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/15198998578494149797</uri>
      </author>
      <link href="http://softwaresimply.blogspot.com/" rel="alternate" type="text/html">
      <link href="http://www.blogger.com/feeds/8768401356830813531/posts/default?start-index=26&amp;max-results=25&amp;redirect=false" rel="next" type="application/atom+xml">
      <link href="http://feeds.feedburner.com/SoftwareSimply" rel="self" type="application/atom+xml">
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html">
      <subtitle>software development, functional programming, haskell, etc</subtitle>
      <title>Software Simply</title>
      <updated>2021-08-26T19:57:14Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://tweag.io/blog/2021-08-26-icfp3/</id>
    <link href="https://tweag.io/blog/2021-08-26-icfp3/" rel="alternate" type="text/html">
    <title>Daily ICFP: Day 3</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><h1>Daily ICFP</h1>
<p>Several Tweagers all agreed to gather notes here about our
<a href="https://icfp21.sigplan.org/">ICFP</a> (International Conference on Functional
Programming) experiences.</p>
<p>Other posts in this series:</p>
<ul>
<li><a href="https://www.tweag.io/blog/2021-08-23-icfp0/">ICFP - Day 0</a></li>
<li><a href="https://www.tweag.io/blog/2021-08-24-icfp1/">ICFP - Day 1</a></li>
<li><a href="https://www.tweag.io/blog/2021-08-25-icfp2/">ICFP - Day 2</a></li>
<li><a href="https://www.tweag.io/blog/2021-08-27-icfp4/">ICFP - Day 4</a></li>
<li><a href="https://www.tweag.io/blog/2021-08-30-icfp5/">ICFP - Day 5</a></li>
</ul>
<h2>Day 3 - Wednesday</h2>
<p>These notes follow Noon, Arnaud, and Richard through their day at ICFP,
roughly in order.</p>
<p><em>Noon</em> — <a href="https://icfp21.sigplan.org/details/icfp-2021-papers/26/On-Continuation-Passing-Transformations-and-Expected-Cost-Analysis">On Continuation-Passing Transformations and Expected Cost Analysis</a></p>
<ul>
<li>Discussion of the difficulty of costing probabilistic algorithms (i.e. you don’t know what it will do.)</li>
<li>Turns out using continuations makes it a bit easier to reason about (I didn’t quite follow the trick that makes it true),</li>
<li>But, it gives a way to think compute average-cost analysis, which seems pretty useful!</li>
</ul>
<p><em>Noon</em> — <a href="https://icfp21.sigplan.org/details/icfp-2021-papers/15/Automatic-Amortized-Resource-Analysis-with-the-Quantum-Physicist-s-Method">Automatic Amortized Resource Analysis with the Quantum Physicist’s Method</a></p>
<ul>
<li>Quantum physics? I’m interested.</li>
<li>“This talk doesn’t involve any quantum physics at all”. Oh well.</li>
<li>Idea is to think in terms of an “energy bank” and how much your program will need over time.</li>
<li>Can use this to think about time, and space.</li>
<li>Analogy to Alice and Bob having some fixed money and some fixed task (buying candy).</li>
<li>Their idea is to take a (kind-of) super-position of all kinds of ways of splitting up resources (money).</li>
<li>This helps with some technical detail of the standard amortized resource approaches (I didn’t quite get why.)</li>
<li>Really enjoyable.</li>
<li>Definitely curious to take a look at this paper!</li>
</ul>
<p><em>Arnaud</em> — <a href="https://icfp21.sigplan.org/details/icfp-2021-papers/31/GhostCell-Separating-Permissions-from-Data-in-Rust">GhostCell: Separating Permissions from Data in
Rust</a></p>
<p>This talk addresses an important problem in the Rust programming
language: how does one write a structure with pointer sharing in Rust
(typically: a doubly-linked list). Until now, it was either using
unsafe features (danger!) or using a <code class="language-text">Cell</code> type (slow and icky). In
this talk a new safe and efficient approach is proposed. Which would
be remarkable already. But the authors also proved their approach
safe <em>in Coq</em>, as part of the RustBelt project. Impressive.</p>
<p><em>Noon</em> — <a href="https://icfp21.sigplan.org/details/icfp-2021-papers/33/Skipping-the-Binder-Bureaucracy-with-Mixed-Embeddings-in-a-Semantics-Course-Function">Skipping the Binder Bureaucracy with Mixed Embeddings in a Semantics Course</a></p>
<ul>
<li>In learning about proofs and correctness, how to get to the good stuff faster?</li>
<li>Answer: By using features of the host/meta language.</li>
<li>I’m personally unconvinced (not that I’m an expert); it seems worse to me to have implicit implementation details that students don’t quite understand.</li>
<li>But I do understand the desire to speed up getting to the good parts!</li>
<li>And maybe this is a good technique when <em>not</em> teaching? Just for your own experimenting? Probably.</li>
</ul>
<p><em>Richard</em> — <a href="https://icfp21.sigplan.org/details/icfp-2021-papers/33/Skipping-the-Binder-Bureaucracy-with-Mixed-Embeddings-in-a-Semantics-Course-Function">Skipping the Binder Bureaucracy with Mixed Embeddings in a
Semantics Course (Functional
Pearl)</a>,
by Adam Chlipala</p>
<p>This was a nice talk about a technique Adam uses in his course on formal
verification of programming languages using the Coq proof assistant. His goal
is to take undergraduates, in a single semester, from no experience with Coq
to being able to do non-trivial proofs on programming languages with e.g.
effects or concurrency. The talk describes the use of <em>mixed embeddings</em> in
his formalization of effectful languages: use a deep embedding of the command
language but a shallow embedding of expressions. That is, the command
structure (e.g. write to memory, goto, etc.) is expressed using a datatype,
but expressions (that evaluate to some value) are just written in Coq’s native
syntax. This allows for e.g. proofs about commands without needing to worry at
all about expressions (and variable binding!).</p>
<p>I had previously viewed shallow embeddings as a bit of a parlor trick: if
you’re describing a programming language that has behavior very similar to the
one you’re writing in, you can skip some of the description. But the whole
trick depends on a close correspondence between the object language (that is,
the one you’re implementing) and the host language (that is, the one you’re
writing in). Yet this presentation made me realize that shallow embeddings are
considerably cheaper than deep ones — in the cases when the trick works.
Cheap and cheerful is sometimes indeed better than fully general — especially
if it allows undergrads to access advanced material so quickly.</p>
<p><em>Richard</em> — <a href="https://icfp21.sigplan.org/details/icfp-2021-papers/16/Catala-A-Programming-Language-for-the-Law">Catala: A Programming Language for the
Law</a>,
by Denis Merigoux, Nicolas Chataing, and Jonathan Protzenko</p>
<p>I was so excited when I saw this paper in the program, as I always wondered
how we could take legal statutes and formalize them. This paper attempts this
for the tax code, where the rules are very algorithmic. (Formalizing, e.g.,
slander laws seems harder.) The authors worked with lawyers to design a
language, Catala, that is a fully expressive functional language while using a
syntax easily readable by lawyers (i.e. domain experts). In the act of
translating tax statutes into Catala, lawyers frequently discovered new
ambiguities in the law. In the Q&amp;A session, we even imagined writing
QuickCheck properties over laws. (Example: you would probably want a monotonic
tax system, where an increase in gross income never yields a decrease in
take-home income. Indeed, Jonathan explained that non-monotonic tax law is
actually unconstitutional in France — yet he believes the existing tax law is
non-monotonic anyway.)</p>
<p>This talk filled me with optimism at the receptiveness of lawyers to this new
technology. The research group is actively seeking new groups to collaborate
with.</p>
<p><em>Noon</em> — <a href="https://icfp21.sigplan.org/details/icfp-2021-papers/16/Catala-A-Programming-Language-for-the-Law">Catala: A Programming Language for the Law</a></p>
<ul>
<li>One of the few (only?) talk about a paper that I had actually read before the conference!</li>
<li>I’ve been fascinated with tax calculations since reading the various <a href="https://betweenbooks.com.au/updates/2020/capital-and-ideology-thomas-piketty-2020.html">Piketty books</a>.</li>
<li>Motivation: Converting law into code is hard and sometimes subjective.</li>
<li>IRS income tax program implemented in assembly from the 60s!</li>
<li>Idea: Mix <em>law</em> and <em>code</em> together (as both are necessary for determining correctness.)</li>
<li>Interesting fact: The language was at least partly co-designed by lawyers who helped pick the keywords,</li>
<li>Quite liked this idea and the talk!</li>
</ul>
<p><em>Noon</em> — PLTea</p>
<ul>
<li>Some interesting conversations.</li>
</ul>
<p><em>Noon</em> — Programming Contest Report</p>
<ul>
<li>An astonishing amount of work goes into this.</li>
<li><em>Richard</em>: Yes, it does! I’m amazed every year by the generosity of the organizers of this contest in planning and executing it.</li>
</ul>
<p><em>Richard</em> — Program Chair Report</p>
<p>Many conferences include a report from the program chair, including
information about the number of submissions, the selection process, and how
many papers got accepted. Interestingly, the pandemic has had only a small
effect on the number of submissions to ICFP, despite anecdotal evidence I’ve
heard that submissions are down in other scientific fields. (Plausible
theories: less time for focused thought during school shutdowns; less ability
to focus due to anxiety in the news; less research time for faculty who teach
due to the need to redesign courses to work well in a remote format.) Maybe
this means that interest in ICFP is actually going up, cancelling out the
negative effect of the pandemic. Huge thanks to Ron Garcia for chairing the
program committee and to Sukyoung Ryu for chairing the conference!</p>
<p><em>Noon</em> — Industrial Reception</p>
<ul>
<li>Had a really enjoyable chat with the various visitors to the Tweag table. Thanks everyone for stopping by!</li>
</ul>
<p><em>Richard</em> — I second that comment about the Industrial Reception. We had a
very nice crew of people interested both in Tweag and in research ideas. Among
more Tweag-centric discussions, I had a small but fascinating conversation
about which is more fundamental: math or computer science. I’ve felt for a few
years that computer science is just applied mathematics, but the way in which
dependent types can describe fundamental mathematical concepts makes me wonder
sometimes whether I’ve gotten the relationship backwards. As a case in point,
I wondered aloud with a visitor to the Tweag table (I did not ask permission
for posting their name) about how to re-express the fundamental definitions
about differential calculus on manifolds using dependent types. This sounds
very, very fun, but I worry it will be too distracting from “real” work (like
continuing to improve GHC)! We’ll see whether I can fit this in.</p>
<p><em>Richard</em> — <a href="https://icfp21.sigplan.org/details/icfp-2021-papers/37/How-to-design-co-programs-JFP-Presentation-">How to design co-programs, by Jeremy Gibbons</a></p>
<p>This presentation gives a wonderfully elegant, simple approach to taking the
first steps toward writing functions. There are no advanced concepts (don’t
trip over the word “corecursion”!) and the video shows how typed functional
programming is such an aide to reasoning about how to write programs.</p>
<p><em>Richard</em> — <a href="https://icfp21.sigplan.org/details/icfp-2021-papers/40/Leibniz-equality-is-isomorphic-to-Martin-L-f-identity-parametrically-JFP-Presentati">Leibniz equality is isomorphic to Martin-Löf identity, parametrically</a>, by Andreas Abel, Jesper Cockx, Dominique Devriese, Amin Timany, and Philip Wadler (presented by Phil)</p>
<p>This paper presents a proof that Leibniz equality and Martin-Löf equality are
isomorphic. The talk gives very nice introductions to both of these concepts,
so I am going to skip that here. As the talk concedes, the isomorphism between
these two notions of equality is not necessarily all that useful, but it’s
nice to know how the proof can be done, and it’s interesting that the proof
requires an assumption of parametricity. The paper (and presentation!) are
both literate Agda, meaning that rendering the LaTeX or slides also
type-checks the technical content, giving greater assurance of the result.</p>
<p>This talk is a nice peek into the power of dependent types to write formal proofs!</p>
<p><em>Richard</em> — If other attendees at ICFP are reading this, please spend more
time in the lounge! A few times I cruised through the lounge looking for new
folks to meet and left disappointed. Somehow, last year’s ICFP did not suffer
from this problem: I had many great out-of-band conversations. Maybe the
novelty of online conferences has worn off? I’ve still had a number of fine
conversations this year, but it definitely feels a step down from last year.</p></div>
    </summary>
    <updated>2021-08-26T00:00:00Z</updated>
    <published>2021-08-26T00:00:00Z</published>
    <source>
      <id>https://tweag.io</id>
      <author>
        <name>Tweag I/O</name>
      </author>
      <link href="https://tweag.io" rel="alternate" type="text/html">
      <link href="http://www.tweag.io/rss.xml" rel="self" type="application/rss+xml">
      <subtitle>Scale your engineering power. We enable deep-tech startups to achieve
their vision, from research to product delivery.</subtitle>
      <title>Tweag - Engineering blog</title>
      <updated>2021-08-31T14:07:39Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://tweag.io/blog/2021-08-25-icfp2/</id>
    <link href="https://tweag.io/blog/2021-08-25-icfp2/" rel="alternate" type="text/html">
    <title>Daily ICFP: Day 2</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><h1>Daily ICFP</h1>
<p>Several Tweagers all agreed to gather notes here about our
<a href="https://icfp21.sigplan.org/">ICFP</a> (International Conference on Functional
Programming) experiences.</p>
<p>Other posts in this series:</p>
<ul>
<li><a href="https://www.tweag.io/blog/2021-08-23-icfp0/">ICFP - Day 0</a></li>
<li><a href="https://www.tweag.io/blog/2021-08-24-icfp1/">ICFP - Day 1</a></li>
<li><a href="https://www.tweag.io/blog/2021-08-26-icfp3/">ICFP - Day 3</a></li>
<li><a href="https://www.tweag.io/blog/2021-08-27-icfp4/">ICFP - Day 4</a></li>
<li><a href="https://www.tweag.io/blog/2021-08-30-icfp5/">ICFP - Day 5</a></li>
</ul>
<h2>Day 2 - Tuesday</h2>
<p>These notes follow Noon, Arnaud, and Richard through their day at ICFP,
roughly in order.</p>
<p><em>Richard</em> — Watched the video for <a href="https://icfp21.sigplan.org/details/icfp-2021-papers/17/Symbolic-and-Automatic-Differentiation-of-Languages"><strong>Symbolic and Automatic Differentiation
of
Languages</strong></a>,
by <a href="https://conal.net">Conal Elliott</a>. Conal’s papers and talks are always
very insightful — because they are always very simple. Conal has a
remarkable knack for taking problems that seem complex and reducing them to
their essence — often, a simple compositional language. This work fits very
much in this vein, describing how we can derive parsers for a language
straight from its definition. The talk is gentle and mind-blowing all at the
same time.</p>
<p><em>Noon</em> — <a href="https://icfp21.sigplan.org/details/icfp-2021-papers/32/Higher-Order-Probabilistic-Adversarial-Computations-Categorical-Semantics-and-Progra">Higher-Order Probabilistic Adversarial Computations</a></p>
<ul>
<li>Wondering if this is related to Adversarial Machine Learning.</li>
<li>I think maybe; but it seems to be focused on categorising types of adversaries via type theory?</li>
<li>It got quite technical for me quite quickly, but it’s at least interesting to see a totally different take on this concept!</li>
</ul>
<p><em>Noon</em> — <a href="https://icfp21.sigplan.org/details/icfp-2021-papers/7/How-to-Evaluate-Blame-for-Gradual-Types">How to Evaluate Blame for Gradual Types</a></p>
<ul>
<li>Interested in this because I was curious about Gradual Types.</li>
<li>“The Rational Programmer” - Seems cute/interesting; but also maybe a bit fraught because I think comparing the idea to the usage in economics is a mistake, as I believe it’s widely considered to be one of the biggest mistakes in economics to assume rational agents!</li>
</ul>
<p><em>Noon</em> — <a href="https://icfp21.sigplan.org/details/icfp-2021-papers/17/Symbolic-and-Automatic-Differentiation-of-Languages">Symbolic and Automatic Differentiation of Languages</a></p>
<ul>
<li>Always relaxing to listen to Conal talk.</li>
<li>I learned that the derivatives Conal talks about initially are these: <a href="https://en.wikipedia.org/wiki/Brzozowski_derivative">Brzozowski derivative</a></li>
<li>He then relates this to differential calculus!</li>
<li>He then describes automatic and symbolic differentiation in this setting, and using this, builds language derivatives.</li>
<li>The conclusion is that these two things have the same structure with different interpretations. Very cool.</li>
</ul>
<p><em>Richard</em> — I attended both Q&amp;A sessions for my own paper, <a href="https://icfp21.sigplan.org/details/icfp-2021-papers/3/An-Existential-Crisis-Resolved-Type-Inference-for-First-Class-Existential-Types">An Existential
Crisis Resolved: Type Inference for First-Class Existential
Types</a>.
The first session went for 30 minutes, and the second session went for an
hour. This is a wonderful aspect of the online format: we have as much time as
we want to discuss a paper. There was considerable interest in an
implementation. A few other tidbits:</p>
<ul>
<li>The approach to existential types in the paper requires including
<em>expressions</em> in <em>types</em>. In order to compute type equality, then, we must
define what expressions are equal to one another. A simple starting point
for an expression equivalence relation is to use syntactic equality. Thus,
<code class="language-text">1 + 1</code> would equal <code class="language-text">1 + 1</code>, but it wouldn’t equal <code class="language-text">2</code>. We can get cleverer
over time. However, there is immediately a problem: GHC might optimize an
expression. For example, it might change <code class="language-text">let x = 5 in 10</code> to be just <code class="language-text">10</code>
(<code class="language-text">x</code> was unused). But these expressions are not considered equal in types,
so the optimization has the possibility of destroying the well-typedness of
an expression. The solution is likely that we will have to have Core
coercions (a coercion is essentially a little expression that says that two
certain types are equal) that witness the correctness of optimization
passes.</li>
<li>Rust has a feature called impl traits (I think) that are essentially
existentials. They seem strictly less powerful than what we’ve proposed in
this paper, but I need to learn more about what Rust does.</li>
</ul>
<p><em>Noon</em> — <a href="https://icfp21.sigplan.org/details/icfp-2021-papers/37/How-to-design-co-programs-JFP-Presentation-">How to design co-programs</a></p>
<ul>
<li>Where do programs come from? Programs come from data structure.</li>
<li>Mostly we talk about <em>input</em> data structure; but should also talk about <em>output</em> data structure!</li>
<li>If you use this idea, you get a different algorithm for the sorting example.</li>
<li>Overall I like the idea; I feel like there’s probably more fruit to be gained from it.</li>
</ul>
<p><em>Noon</em> — PLTea</p>
<ul>
<li>Chat 1 - Very nice chat hearing about bidirectional programs.</li>
<li>Chat 2 - Had a nice chat about CLaSH and formal verification.</li>
</ul>
<p><em>Noon</em> — SIGPLAN CARES</p>
<ul>
<li>Very nice chat about feeling included/excluded at a conference.</li>
<li>Was very well moderated by Simon Peyton-Jones; left me feeling very hopeful.</li>
</ul>
<p><em>Noon</em> — <a href="https://icfp21.sigplan.org/details/icfp-2021-papers/40/Leibniz-equality-is-isomorphic-to-Martin-L-f-identity-parametrically-JFP-Presentati">Leibniz equality is isomorphic to Martin-Löf identity</a></p>
<ul>
<li>Looked interesting; didn’t follow it all.</li>
<li>My main conclusion: I need to learn more Agda.</li>
</ul>
<p><em>Noon</em> — PLTea #2</p>
<ul>
<li>Less good; conversations were a bit dominated by one or two people.</li>
</ul>
<p><em>Noon</em> — <a href="https://icfp21.sigplan.org/details/icfp-2021-papers/42/Building-PL-Powered-Systems-for-Humans">Building PL-Powered Systems for Humans</a></p>
<ul>
<li>Describing interesting UIs and programming synthesis in evaluating MOOC programming tasks.</li>
<li>Nice discussion around how to let the users control the search space.</li>
<li>Interesting paper to look into: <a href="https://priyan.info/files/assuage_uist2021.pdf">Assuage</a>.</li>
<li>Interesting keynote idea to interview another researcher during your talk!</li>
<li>Mostly enjoyed the interview, but sometimes got a bit lost when there wasn’t any text/graphics to ground the conversation.</li>
</ul>
<p><em>Arnaud</em> — There have been several discussions on quantitative
evaluation of programming-language tools. The first was in <a href="https://icfp21.sigplan.org/details/icfp-2021-papers/7/How-to-Evaluate-Blame-for-Gradual-Types">How to
Evaluate Blame for Gradual
Types</a>. It
isn’t obvious from the title, but this paper is about building a model
of the programming activity in order to be able to quantify the effect
of error messages in the debugging process. The second such discussion
was during the keynote (see previous paragraph) where the difficulty
of quantifying effects in programming language was raised and Elena
Glassman said that she favoured qualitative evaluation. This is a very
important discussion, programming languages is a field where tools and
technologies are rarely evaluated for their real-world relevance
rather than their theoretical elegance. I contend that we don’t know
how to evaluate programming languages yet, so it’s always exciting to
see people make steps in this direction.</p>
<p><em>Noon</em> — Dinner</p>
<ul>
<li>Got a nice intro to the ‘Granule’ programming language from Dominic Orchard and Jack Hughes.</li>
<li>Learned that there is such a thing as types indexed by continuous variables!</li>
</ul>
<p><em>Richard</em> — Enjoyed the trivia night, quickly becoming a SIGPLAN conference
tradition, hosted by José Calderón and Paulette Koronkevich. We formed a team
rather randomly at one of the conference tables and then proceeded to <strong>win</strong>.
It turns out that recognizing a small detail of a Hieronymus Bosch painting
can come in handy!</p>
<p>(Richard attended less of ICFP than usual today, due to the need to execute
travel plans that had been delayed by Hurricane/Tropical Storm Henri over the
weekend. More action tomorrow and future days!)</p></div>
    </summary>
    <updated>2021-08-25T00:00:00Z</updated>
    <published>2021-08-25T00:00:00Z</published>
    <source>
      <id>https://tweag.io</id>
      <author>
        <name>Tweag I/O</name>
      </author>
      <link href="https://tweag.io" rel="alternate" type="text/html">
      <link href="http://www.tweag.io/rss.xml" rel="self" type="application/rss+xml">
      <subtitle>Scale your engineering power. We enable deep-tech startups to achieve
their vision, from research to product delivery.</subtitle>
      <title>Tweag - Engineering blog</title>
      <updated>2021-08-31T14:07:39Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://tweag.io/blog/2021-08-24-icfp1/</id>
    <link href="https://tweag.io/blog/2021-08-24-icfp1/" rel="alternate" type="text/html">
    <title>Daily ICFP: Day 1</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><h1>Daily ICFP</h1>
<p>Several Tweagers all agreed to gather notes here about our
<a href="https://icfp21.sigplan.org/">ICFP</a> (International Conference on Functional
Programming) experiences.</p>
<p>Other posts in this series:</p>
<ul>
<li><a href="https://www.tweag.io/blog/2021-08-23-icfp0/">ICFP - Day 0</a></li>
<li><a href="https://www.tweag.io/blog/2021-08-25-icfp2/">ICFP - Day 2</a></li>
<li><a href="https://www.tweag.io/blog/2021-08-26-icfp3/">ICFP - Day 3</a></li>
<li><a href="https://www.tweag.io/blog/2021-08-27-icfp4/">ICFP - Day 4</a></li>
<li><a href="https://www.tweag.io/blog/2021-08-30-icfp5/">ICFP - Day 5</a></li>
</ul>
<h2>Day 1 - Monday</h2>
<p>These notes follow Noon, Arnaud, and Richard through their day at ICFP,
roughly in order.</p>
<p><em>Richard</em> — <a href="https://icfp21.sigplan.org/details/icfp-2021-papers/21/Calculating-Dependently-Typed-Compilers-Functional-Pearl-"><strong>Calculating Dependently-Typed Compilers (Functional
Pearl)</strong></a></p>
<p>Started my day at 6:30am in order to attend the Q&amp;A for <strong>Calculating
Dependently-Typed Compilers (Functional Pearl)</strong>, by Mitchell Pickard and
Graham Hutton, of the University of Nottingham. (I watched the video itself
last night.) This is a very cool paper about a technique for deriving a
proved-correct compiler by construction. The main example in the talk was
about compiling a simple expression language to a stack machine. The
correctness condition is that <code class="language-text">exec (compile e) s = eval e : s</code>, where <code class="language-text">e</code>
is the expression under consideration, <code class="language-text">s</code> is a call stack, and <code class="language-text">:</code> pushes a
new item onto the call stack. Starting with this equation, we can consider
different forms of <code class="language-text">e</code> and then use the correctness requirement to derive
what the stack language (the elements stored in <code class="language-text">s</code>) needs to be, and how
<code class="language-text">compile</code> should work.</p>
<p>I really enjoyed the talk (though I haven’t yet gone back to the paper).
It’s presented simply and convincingly. And I think the idea is really cool,
showing the power of dependent types. (Both the source language and the
target stack language are intrinsically typed, requiring the compilation to
be dependently typed.) Do watch the talk: it’s accessible and educational.</p>
<p>The Q&amp;A was a pleasant chat among like-minded folks; all seemed to generally
support the line of research and appreciated the results. A nice nugget of
knowledge that came out was the importance of the interactive features of
Agda in order to create this solution. I asked whether an implementation in
Haskell would be possible; Mitchell thought it probably would be. But I
already know that the act of composing the solution in Haskell would be much
more difficult than in Agda because Haskell is still catching up when it
comes to editor integration. Yet another reason to support
<a href="https://github.com/haskell/haskell-language-server">HLS</a>!</p>
<p><em>Richard</em> — Watched a few videos of talks I’m interested in. I don’t think I’ll
list all such videos, lest anyone out there get offended by my choices. :) I
really miss the in-person interactions of an in-person conference, but being
able to watch videos at my leisure is really nice — especially when I can
enable captions, run the videos at 1.25x or 1.5x, and rewind to rewatch the
hard parts.</p>
<p><em>Richard</em> — The Q&amp;A sessions are technically available in either time band (the
ICFP conference itself happens both 3am-10am in my time zone, US East, and
also 3pm-10pm), but some authors are available only for one of the Q&amp;A
sessions. This is frustrating, because it means I miss some great stuff in
the middle of my night. I wonder if it would be possible for the active Q&amp;A
session (some authors make it to both!) to be recorded and viewable later —
perhaps just during the conference (in order to incentivize interaction and
protect some degree of the privacy of the conversations).</p>
<p><em>Richard</em> — The program at <a href="https://icfp21.sigplan.org/">icfp21.sigplan.org</a>
allows users to select what
events they are attending by starring them. Then, there is a way to make a
subscribable calendar with those events (and it stays updated!). I’ve
subscribed my usual Google calendar to this ICFP calendar, and it’s making
time management so much easier! The only problem is that the main-time-band
events share their state with the mirrored-time-band events, so things appear
on my calendar twice. This is imperfect, but still really helpful.</p>
<p><em>Noon</em> — Q&amp;A: <a href="https://icfp21.sigplan.org/details/icfp-2021-papers/11/Algebras-for-Weighted-Search">Algebras for Weighted Search</a></p>
<ul>
<li>Unfortunately missed most of the talk; but caught the Q&amp;A.</li>
<li>Looks like this was quite popular and people were very excited about it!</li>
<li>As far as I understand it, people were excited to see weighted search formulated as a Monad.</li>
<li>One interesting comment that Oisín mentioned in the talk was by swapping the order of … (something I can’t remember) you get a parser instead of a duplicate remover. This sounded very interesting to me, so I’d be curious to know what it means!</li>
<li>Some comments about weighted optimisation!</li>
</ul>
<p><em>Noon</em> — <a href="https://icfp21.sigplan.org/details/icfp-2021-papers/41/Fun-Funky-Functional-The-Pursuit-of-Better-User-Interfaces-for-Programming">Fun, Funky, Functional: The Pursuit of Better User Interfaces for Programming</a></p>
<ul>
<li>Learned about the combined field of PL =&lt;&lt; HCI</li>
<li>Nice talk; I missed a lot of it, but I’ll go back and take a look!</li>
<li>Love the idea of more structured editing and closing the gap between drawing by programming and other forms of drawing.</li>
</ul>
<p><em>Richard</em> — Watched the same keynote as Noon, above. It was delivered by Ravi
Chugh. Very nicely done, introducing a wide array of different papers on the
intersection of PL (programming languages) and HCI (human-computer
interaction). The highlight of the talk was a tool made by Ravi and his
students that supports advanced editing techniques:</p>
<ul>
<li>The language demonstrated describes a diagram, and the diagram appears to
the right of the code. But you can edit the diagram by clicking and
dragging, just like a drawing program, and demonstrated program updates the
code. Very cool!</li>
<li>This software also supports block-editing the code itself. That is, instead
of thinking about characters and lines, you can think about programming
constructs, like a particular variable binding or if-expression. Moving
pieces around moves whole semantically-relevant pieces, not just a few
characters. I’ve been wanting this for years.</li>
<li>A further example included a program that produces an HTML version of a
table. But you could edit the rendered table, and the HTML-generating code
would update accordingly! You could even edit the DOM of the rendered HTML
and the code would update. Amazing.</li>
</ul>
<p>I can’t wait for the techniques demonstrated in this keynote become standard
and widespread. We will all be better off when that happens.</p>
<p><em>Noon</em> — <a href="https://icfp21.sigplan.org/details/icfp-2021-papers/18/Propositions-as-Types-and-Shared-State">Propositions-as-Types and Shared State</a></p>
<ul>
<li>Curious to know what this connection will be.</li>
<li>Interested to learn the Linear logic &lt;-&gt; Session types connection.</li>
<li>Got a little bit away from me technically as it went on; but surely quite interesting!</li>
</ul>
<p><em>Noon</em> — <a href="https://icfp21.sigplan.org/details/icfp-2021-papers/21/Calculating-Dependently-Typed-Compilers-Functional-Pearl-">Calculating Dependently-Typed Compilers</a></p>
<ul>
<li>We want to formally verify a compiler;</li>
<li>What if you specify the compiler and then <em>derive</em> an implementation? (Instead of programming it and then <em>verifying</em> you did it right.)</li>
<li>This talk is about doing this!</li>
<li>Cool explanation of using dependent types to define a language that doesn’t allow illegally-typed expressions.</li>
<li>Very cool example of deriving the <code class="language-text">compile</code> function! Felt a little bit magical?</li>
<li>Really motivated me to read the paper!</li>
</ul>
<p><em>Noon</em> — Networking</p>
<ul>
<li>To end my day I had a really nice table-chat with a person from the
community whose work I really love! They were so friendly and nice and
it was a great conversation :) Left me feeling very good and energised for
tomorrow!</li>
</ul>
<p><em>Richard</em> — I attended two PLTeas today. These are social sessions where each
participant is randomly matched with several others to talk for 15 minutes.
Over the course of the day, I participated in 4 such groupings. It’s all a
little artificial, but random encounters are really the lifeblood of
conferences: it’s these encounters that lead to future collaborations. (I
have several papers that came about only because of random encounters at
conferences.) A few highlights include chatting with my friend Joachim
Breitner about pattern-matching syntax in Haskell (hope we didn’t bore the
others!), telling a graduating undergrad to choose Penn for graduate school
(I had a great experience there), and meeting someone (I didn’t ask for their
permission to include their name here, so I won’t) working on code synthesis
in the <a href="https://github.com/haskell/haskell-language-server">Haskell Language
Server</a> (HLS). This last
project is about adding a feature to HLS (which powers editor integration
across several editors via the <a href="https://microsoft.github.io/language-server-protocol/">Language Server
Protocol</a>) to figure
out from context what code to insert next. If done right, this could be a
game-changer for Haskell programmers. I’ve encouraged this young researcher
to get in further touch so I can use whatever powers I have to support this
important work.</p>
<p>(Fun fact: Joachim and I first met as roommates at ICFP’14. But this was after
we co-authored a paper together! Joachim completed an internship at Microsoft
with Simon Peyton Jones a little while after I did. Then, Simon, Joachim,
Stephanie Weirich, and I wrote a
<a href="https://richarde.dev/papers/2014/coercible/coercible.pdf">paper</a>. Joachim and
I agreed to room together at the conference, and we thus first met in person
when he arrived at our room. The majority of my papers have been written
remotely with co-authors, even way before the pandemic.)</p>
<p><em>Arnaud</em> — Contextual Modal Types for Algebraic Effects and Handlers</p>
<ul>
<li>This is about using the technology of contextual modal type theory to give type to algebraic effects and handlers.</li>
<li>It differs from most treatment of effect type systems in that this lets the effects be represented by a comonad of sort, rather than a monad. Effectful arrows have type <code class="language-text">C a -&gt; b</code> for some <code class="language-text">C</code>. I think this is sometimes referred as “capabilities”. This reminds me of <a href="https://dl.acm.org/doi/10.1145/3408993">Recovering purity with comonads and capabilities</a> (though I don’t really understand this article yet). I’m really keen to understand this approach better.</li>
</ul>
<p><em>Arnaud</em> — Generalized Evidence Passing for Effect Handlers: Efficient Compilation of Effect Handlers to C</p>
<ul>
<li>This is about a compilation technique for algebraic effects and handlers.</li>
<li>The talk was very enticing, but I didn’t really learn much from it. The compilation is performed in a series of passes, the first of which is conversion to multiple-prompt delimited continuation; which already seems to contain some magic. The result looks quite impressive, though. I’ll have to read the paper.</li>
</ul>
<p><em>Richard</em> — I played the Untitled PL Card Game with four other attendees. This
social event has participants play an Apples-to-Apples-like game, but the
cards are based on PL concepts. You can <a href="https://uplcg.jaspervdj.be/rooms">play
online</a>, too. This was fun, but I wish
there was more opportunity to meet my fellow players.</p>
<p><em>Richard</em> — I attended the Ask Me Anything on Climate Change with Benjamin
Pierce. Well, it was supposed to be Benjamin, but he was called away with a
family emergency (I very much hope everything is OK!), so Mike Hicks stepped
in instead. Kudos to Mike for handling this surprise appearance so
graciously. While climate change is not directly related to functional
programming, it <em>is</em> an existential threat to the human race, so if we don’t
work on climate change, too, functional programming will surely suffer. The
topics were naturally quite interesting. We talked about the future of
conferences, as there was talk of virtual conferences even before the
pandemic. The sense I got from Mike is that we would like to get back to
in-person conferences when possible, despite their impact on the climate,
possibly mixed in with some virtual ones.</p></div>
    </summary>
    <updated>2021-08-24T00:00:00Z</updated>
    <published>2021-08-24T00:00:00Z</published>
    <source>
      <id>https://tweag.io</id>
      <author>
        <name>Tweag I/O</name>
      </author>
      <link href="https://tweag.io" rel="alternate" type="text/html">
      <link href="http://www.tweag.io/rss.xml" rel="self" type="application/rss+xml">
      <subtitle>Scale your engineering power. We enable deep-tech startups to achieve
their vision, from research to product delivery.</subtitle>
      <title>Tweag - Engineering blog</title>
      <updated>2021-08-31T14:07:39Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://www.parsonsmatt.org/2021/08/24/designing_new.html</id>
    <link href="https://www.parsonsmatt.org/2021/08/24/designing_new.html" rel="alternate" type="text/html">
    <title>Designing New</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I want a better way of constructing Haskell records.</p>

<p>Let’s compare and contrast the existing ways.
We’ll be using this datatype as an example:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">data</span> <span class="kt">Env</span> <span class="o">=</span> <span class="kt">Env</span>
    <span class="p">{</span> <span class="n">accountId</span> <span class="o">::</span> <span class="kt">String</span>
    <span class="p">,</span> <span class="n">accountPassword</span> <span class="o">::</span> <span class="kt">String</span>
    <span class="p">,</span> <span class="n">requestHook</span> <span class="o">::</span> <span class="kt">Request</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="kt">Request</span>
    <span class="p">,</span> <span class="n">responseHook</span> <span class="o">::</span> <span class="kt">Response</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="kt">Response</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>This type is an <code class="language-plaintext highlighter-rouge">Env</code> that you might see in a <code class="language-plaintext highlighter-rouge">ReaderT Env IO</code> integration with some external service.
We can attach request hooks and response hooks.</p>

<h1 id="function-arguments">Function Arguments</h1>

<p>The simplest and <em>most</em> boring way is to pass function arguments.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">env</span> <span class="o">::</span> <span class="kt">Env</span>
<span class="n">env</span> <span class="o">=</span> <span class="kt">Env</span> <span class="s">&quot;asdfadf&quot;</span> <span class="s">&quot;hunter42&quot;</span> <span class="n">pure</span> <span class="n">pure</span>
</code></pre></div></div>

<p>This is undesirable for a few reasons:</p>

<ol>
  <li>We have no idea what those parameters mean without looking at the datatype definition.</li>
  <li>We have to pass arguments in a specific order.</li>
  <li>If the type of the <code class="language-plaintext highlighter-rouge">Env</code> changes, then this <em>also</em> changes.</li>
  <li>… but we don’t get a break if the field order is changed in a way that respects the types!</li>
</ol>

<p>Consider swapping the order of <code class="language-plaintext highlighter-rouge">accountId</code> and <code class="language-plaintext highlighter-rouge">accountPassword</code> in our data definition.
Now everything breaks mysteriously with no type errors.</p>

<p>Using the function-style for constructing records is probably a bad idea.</p>

<h1 id="record-labels">Record Labels</h1>

<p>The second most boring way is to use record construction syntax:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">env</span> <span class="o">::</span> <span class="kt">Env</span>
<span class="n">env</span> <span class="o">=</span> <span class="kt">Env</span>
    <span class="p">{</span> <span class="n">accountId</span> <span class="o">=</span> <span class="s">&quot;asdfasdf&quot;</span>
    <span class="p">,</span> <span class="n">accountPassword</span> <span class="o">=</span> <span class="s">&quot;hunter42&quot;</span>
    <span class="p">,</span> <span class="n">requestHook</span> <span class="o">=</span> <span class="n">pure</span>
    <span class="p">,</span> <span class="n">responseHook</span> <span class="o">=</span> <span class="n">pure</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>This solves basically all the problems with function arguments.
However, we’re still sensitive to changes in the record constructor.
If we add a new field, we must account for that in all creation sites.
This is annoying, especially since many new fields in records like this are designed to accommodate new functionality or customization, and most existing users want to just ignore them.</p>

<h1 id="a-default-record">A Default Record</h1>

<p>Instead of <em>constructing</em> a record, we’ll have end users <em>modify</em> an existing record.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">defaultEnv</span> <span class="o">::</span> <span class="kt">Env</span>
<span class="n">defaultEnv</span> <span class="o">=</span> <span class="kt">Env</span>
    <span class="p">{</span> <span class="n">accountId</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
    <span class="p">,</span> <span class="n">accountPassword</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
    <span class="p">,</span> <span class="n">requestHook</span> <span class="o">=</span> <span class="n">pure</span>
    <span class="p">,</span> <span class="n">responseHook</span> <span class="o">=</span> <span class="n">pure</span>
    <span class="p">}</span>

<span class="n">env</span> <span class="o">::</span> <span class="kt">Env</span>
<span class="n">env</span> <span class="o">=</span> <span class="n">defaultEnv</span>
    <span class="p">{</span> <span class="n">accountId</span> <span class="o">=</span> <span class="s">&quot;asdfasdf&quot;</span>
    <span class="p">,</span> <span class="n">accountPassword</span> <span class="o">=</span> <span class="s">&quot;hunter42&quot;</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>However, this is gross, for a few reasons.
The first is that we provide a dummy value of <code class="language-plaintext highlighter-rouge">accountId</code> and <code class="language-plaintext highlighter-rouge">accountPassword</code>, and the end user is required to fill them in.
There’s actually no way for us to give a warning or error if they fail to provide it.</p>

<p>The standard solution is to <em>accept function arguments</em>, but this has a nasty problem: record syntax binds tighter than anything else, even function application, so we need to do this:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">defaultEnv</span> <span class="o">::</span> <span class="kt">String</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="o">-&gt;</span> <span class="kt">Env</span>
<span class="n">defaultEnv</span> <span class="n">a</span> <span class="n">p</span> <span class="o">=</span> <span class="kt">Env</span> <span class="n">a</span> <span class="n">p</span> <span class="n">pure</span> <span class="n">pure</span> <span class="c1">-- brevity, forgive me</span>

<span class="n">env</span> <span class="o">::</span> <span class="kt">Env</span>
<span class="n">env</span> <span class="o">=</span> <span class="p">(</span><span class="n">defaultEnv</span> <span class="s">&quot;asdfasdf&quot;</span> <span class="s">&quot;hunter42&quot;</span><span class="p">)</span>
    <span class="p">{</span> <span class="n">requestHook</span> <span class="o">=</span> <span class="nf">\</span><span class="n">req</span> <span class="o">-&gt;</span> <span class="kr">do</span>
        <span class="n">logRequest</span> <span class="n">req</span>
        <span class="n">pure</span> <span class="n">req</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>That’s right - we gotta put parens around our constructor.
We can’t use <code class="language-plaintext highlighter-rouge">$</code> here, either, because the syntax explicitly requires a <code class="language-plaintext highlighter-rouge">value { field0 = val0, ... fieldN = valN }</code> form.</p>

<p>Also now we’re back at the same problem with <code class="language-plaintext highlighter-rouge">defaultEnv</code> - we can mismatch our function arguments.</p>

<h1 id="an-args-record">An Args Record</h1>

<p>The pattern I chose for <a href="https://hackage.haskell.org/package/persistent-2.13.1.1/docs/Database-Persist-SqlBackend.html#v:mkSqlBackend"><code class="language-plaintext highlighter-rouge">SqlBackend</code></a> in <code class="language-plaintext highlighter-rouge">persistent</code> is to have an <code class="language-plaintext highlighter-rouge">*Args</code> record.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{-# language DuplicateRecordFields #-}</span>
<span class="cp">{-# language RecordWildCards #-}</span>

<span class="kr">data</span> <span class="kt">EnvArgs</span> <span class="o">=</span> <span class="kt">EnvArgs</span>
    <span class="p">{</span> <span class="n">accountId</span> <span class="o">::</span> <span class="kt">String</span>
    <span class="p">,</span> <span class="n">accountPassword</span> <span class="o">::</span> <span class="kt">String</span>
    <span class="p">}</span>

<span class="n">mkEnv</span> <span class="o">::</span> <span class="kt">EnvArgs</span> <span class="o">-&gt;</span> <span class="kt">Env</span>
<span class="n">mkEnv</span> <span class="kt">EnvArgs</span> <span class="p">{</span><span class="o">..</span><span class="p">}</span> <span class="o">=</span> <span class="kt">Env</span>
    <span class="p">{</span> <span class="n">requestHook</span> <span class="o">=</span> <span class="n">pure</span>
    <span class="p">,</span> <span class="n">responseHook</span> <span class="o">=</span> <span class="n">pure</span>
    <span class="p">,</span> <span class="o">..</span>
    <span class="p">}</span>

<span class="n">env</span> <span class="o">::</span> <span class="kt">Env</span>
<span class="n">env</span> <span class="o">=</span> <span class="n">mkEnv</span> <span class="kt">EnvArgs</span> 
    <span class="p">{</span> <span class="n">accountId</span> <span class="o">=</span> <span class="s">&quot;asdfasdf&quot;</span>
    <span class="p">,</span> <span class="n">accountPassword</span> <span class="o">=</span> <span class="s">&quot;hunter42&quot;</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>This solves all of the above problems, but it’s a bit unsatisfying - we can’t <em>also</em> modify the <code class="language-plaintext highlighter-rouge">requestHook</code> and <code class="language-plaintext highlighter-rouge">responseHook</code> parameters directly in <code class="language-plaintext highlighter-rouge">mkEnv</code>, we have to do it outside.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fullEnv</span> <span class="o">::</span> <span class="kt">Env</span>
<span class="n">fullEnv</span> <span class="o">=</span> 
    <span class="p">(</span><span class="n">mkEnv</span> <span class="kt">EnvArgs</span> <span class="p">{</span><span class="o">..</span><span class="p">})</span> 
        <span class="p">{</span> <span class="n">requestHook</span> <span class="o">=</span> <span class="nf">\</span><span class="n">req</span> <span class="o">-&gt;</span> <span class="kr">do</span>
            <span class="n">log</span> <span class="n">req</span>
            <span class="n">pure</span> <span class="n">req</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>Hmm, slightly annoying syntax, again.
But, hey, whatever, it works.</p>

<h1 id="codependent-records">Codependent Records</h1>

<p>No, I’m not talking about some fancy type theory.
Record syntax is essentially <em>codependent</em> on the value it is modifying, or the constructor it is using.
We can’t pass in a ‘record’ of stuff and use it in ways that are clever or useful.</p>

<p>Let’s talk about the “whitespace operator.”
We can imagine defining it like this, for regular functions:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">( )</span> <span class="o">::</span> <span class="p">(</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">b</span>
<span class="n">f</span> <span class="n">a</span> <span class="o">=</span> <span class="n">f</span> <span class="n">a</span>
</code></pre></div></div>

<p>OK, it’s special built in syntax, the definition doesn’t make any sense.
But let’s try and write it for <em>records</em> now.
Remember we need to support update and creation.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">( )</span> <span class="o">::</span> <span class="p">(</span><span class="kt">AllowableRecord</span> <span class="n">con</span> <span class="n">rec</span> <span class="n">result</span><span class="p">)</span>
    <span class="o">=&gt;</span> <span class="n">con</span> <span class="o">-&gt;</span> <span class="n">rec</span> <span class="o">-&gt;</span> <span class="n">result</span>
<span class="n">con</span> <span class="n">rec</span> <span class="o">=</span> <span class="n">implementRecord</span> <span class="n">con</span> <span class="n">rec</span>

<span class="kr">class</span> <span class="kt">AllowableRecord</span> <span class="n">con</span> <span class="n">rec</span> <span class="n">result</span> <span class="kr">where</span>
    <span class="n">implementRecord</span> <span class="o">::</span> <span class="n">con</span> <span class="o">-&gt;</span> <span class="n">rec</span> <span class="o">-&gt;</span> <span class="n">result</span>
</code></pre></div></div>

<p>Now <code class="language-plaintext highlighter-rouge">rec</code> is something that can stand alone - it is freed from the codependent relationship with the values and constructors it serves.
What is that something, though?</p>

<p>It could be a row type, like PureScript.
That’d be awesome.</p>

<p>Well now I’ve just worked myself up into a Mood about GHC’s record syntax.
Even with <code class="language-plaintext highlighter-rouge">OverloadedRecordDot</code>, Haskell’s records are still <em>bad</em>, they’re just not <em>awful</em>.</p>

<h1 id="ignore-records-use-functions">Ignore Records, Use Functions</h1>

<p>This approach eschews records entirely for updates and uses <code class="language-plaintext highlighter-rouge">set*</code> functions.
It makes for a pretty clean interface.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">env</span> <span class="o">::</span> <span class="kt">Env</span>
<span class="n">env</span> <span class="o">=</span> 
    <span class="n">addRequestHook</span> <span class="p">(</span><span class="nf">\</span><span class="n">req</span> <span class="o">-&gt;</span> <span class="n">log</span> <span class="n">req</span> <span class="o">&gt;&gt;</span> <span class="n">pure</span> <span class="n">req</span><span class="p">)</span>
    <span class="o">$</span> <span class="n">mkEnv</span> <span class="kt">EnvArgs</span>
        <span class="p">{</span> <span class="n">accountId</span> <span class="o">=</span> <span class="s">&quot;asdfasdf&quot;</span>
        <span class="p">,</span> <span class="n">accountPassword</span> <span class="o">=</span> <span class="s">&quot;hunter42&quot;</span>
        <span class="p">}</span>

<span class="n">addRequestHook</span> <span class="o">::</span> <span class="p">(</span><span class="kt">Request</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="kt">Request</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Env</span> <span class="o">-&gt;</span> <span class="kt">Env</span>
<span class="n">addRequestHook</span> <span class="n">newHook</span> <span class="n">env</span> <span class="o">=</span> <span class="n">env</span>
    <span class="p">{</span> <span class="n">requestHook</span> <span class="o">=</span> <span class="nf">\</span><span class="n">req</span> <span class="o">-&gt;</span> <span class="kr">do</span>
        <span class="n">requestHook</span> <span class="n">env</span> <span class="n">req</span>
        <span class="n">newHook</span> <span class="n">req</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>This is pretty tedious as a library author to write, but it gives you a better interface.</p>

<p>It would be <em>nice</em> if we could use this for construction, too.
But this is a challenge because the <em>type</em> would change with each new addition to the record.
The <code class="language-plaintext highlighter-rouge">{ ... }</code> record syntax can know ahead of time how many fields there are, and GHC can issue warnings (or errors) if any are missing.</p>

<h1 id="type-changing-updates">Type Changing Updates</h1>

<p>We can use a type parameter for each field that is required to be set.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">data</span> <span class="kt">EnvP</span> <span class="n">a</span> <span class="n">b</span> <span class="o">=</span> <span class="kt">EnvP</span>
    <span class="p">{</span> <span class="n">accountId</span> <span class="o">::</span> <span class="n">a</span>
    <span class="p">,</span> <span class="n">accountPassword</span> <span class="o">::</span> <span class="n">b</span>
    <span class="p">,</span> <span class="n">requestHook</span> <span class="o">::</span> <span class="kt">Request</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="kt">Request</span>
    <span class="p">,</span> <span class="n">responseHook</span> <span class="o">::</span> <span class="kt">Response</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="kt">Response</span>
    <span class="p">}</span>

<span class="kr">type</span> <span class="kt">Env</span> <span class="o">=</span> <span class="kt">EnvP</span> <span class="kt">String</span> <span class="kt">String</span>

<span class="kr">data</span> <span class="kt">Void</span>

<span class="n">defaultEnv</span> <span class="o">::</span> <span class="kt">EnvP</span> <span class="kt">Void</span> <span class="kt">Void</span>
<span class="n">defaultEnv</span> <span class="o">=</span> <span class="kt">EnvP</span>
    <span class="p">{</span> <span class="n">requestHook</span> <span class="o">=</span> <span class="n">pure</span>
    <span class="p">,</span> <span class="n">responseHook</span> <span class="o">=</span> <span class="n">pure</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>GHC will issue warnings here, but that’s okay - we <em>know</em> they’re undefined at the type level.</p>

<p>Now we can write our <code class="language-plaintext highlighter-rouge">set</code> functions:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">setAccountId</span> <span class="o">::</span> <span class="kt">String</span> <span class="o">-&gt;</span> <span class="kt">EnvP</span> <span class="n">a</span> <span class="n">b</span> <span class="o">-&gt;</span> <span class="kt">EnvP</span> <span class="kt">String</span> <span class="n">b</span>
<span class="n">setAccountId</span> <span class="n">str</span> <span class="n">env</span> <span class="o">=</span> <span class="n">env</span> <span class="p">{</span> <span class="n">accountId</span> <span class="o">=</span> <span class="n">str</span> <span class="p">}</span>

<span class="n">setAccountPassword</span> <span class="o">::</span> <span class="kt">String</span> <span class="o">-&gt;</span> <span class="kt">EnvP</span> <span class="n">a</span> <span class="n">b</span> <span class="o">-&gt;</span> <span class="kt">EnvP</span> <span class="n">a</span> <span class="kt">String</span>
<span class="n">setAccountPassword</span> <span class="n">str</span> <span class="n">env</span> <span class="o">=</span> <span class="n">env</span> <span class="p">{</span> <span class="n">accountPassword</span> <span class="o">=</span> <span class="n">str</span> <span class="p">}</span>

<span class="n">env</span> <span class="o">::</span> <span class="kt">Env</span>
<span class="n">env</span> <span class="o">=</span> 
    <span class="n">setAccountId</span> <span class="s">&quot;asdfasdf&quot;</span> 
    <span class="o">$</span> <span class="n">setAccountPassword</span> <span class="s">&quot;hunter42&quot;</span>
    <span class="o">$</span> <span class="n">defaultEnv</span>
</code></pre></div></div>

<p>And, well, this actually works out.
If we only expose the <code class="language-plaintext highlighter-rouge">Env</code> type (and maybe a pattern synonym for construction/deconstruction), this interface should be pretty safe and straightforward.
A final <code class="language-plaintext highlighter-rouge">mkEnv</code> call could even put it behind a <code class="language-plaintext highlighter-rouge">newtype</code> wrapper, or a similar datatype, similar to the <code class="language-plaintext highlighter-rouge">*Args</code> pattern above.
The boilerplate sucks, but would be easy to <code class="language-plaintext highlighter-rouge">TemplateHaskell</code> away.</p>

<p>Can <code class="language-plaintext highlighter-rouge">OverloadedRecordDot</code> help us here?
With some of the tricks in <a href="https://www.parsonsmatt.org/2021/07/29/stealing_impl_from_rust.html">Stealing <code class="language-plaintext highlighter-rouge">impl</code> From Rust</a>, sort of.
We can write simple setters:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">data</span> <span class="kt">User</span> <span class="o">=</span> <span class="kt">User</span> <span class="p">{</span> <span class="n">name</span> <span class="o">::</span> <span class="kt">String</span> <span class="p">}</span>

<span class="kr">instance</span> <span class="kt">HasField</span> <span class="s">&quot;setName&quot;</span> <span class="kt">User</span> <span class="p">(</span><span class="kt">String</span> <span class="o">-&gt;</span> <span class="kt">User</span><span class="p">)</span> <span class="kr">where</span>
    <span class="n">getField</span> <span class="n">self</span> <span class="n">newName</span> <span class="o">=</span> 
        <span class="n">self</span> <span class="p">{</span> <span class="n">name</span> <span class="o">=</span> <span class="n">newName</span> <span class="p">}</span>
</code></pre></div></div>

<p>And, using the One Weird Trick to defeat functional dependencies, we can write type-changing setters, too!</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">instance</span> 
    <span class="kt">HasField</span> <span class="s">&quot;setAccountId&quot;</span> <span class="p">(</span><span class="kt">EnvP</span> <span class="n">a</span> <span class="n">b</span><span class="p">)</span> <span class="p">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="kt">EnvP</span> <span class="n">x</span> <span class="n">b</span><span class="p">)</span>
  <span class="o">=&gt;</span>
    <span class="kt">HasField</span> <span class="s">&quot;setAccountId&quot;</span> <span class="p">(</span><span class="kt">EnvP</span> <span class="n">a</span> <span class="n">b</span><span class="p">)</span> <span class="p">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="kt">EnvP</span> <span class="n">x</span> <span class="n">b</span><span class="p">)</span>
  <span class="kr">where</span>
    <span class="n">getField</span> <span class="n">self</span> <span class="n">x</span> <span class="o">=</span> <span class="n">self</span> <span class="p">{</span> <span class="n">accountId</span> <span class="o">=</span> <span class="n">x</span> <span class="p">}</span>
</code></pre></div></div>

<p>Now, to provide a good UX, we’d want to require this be <code class="language-plaintext highlighter-rouge">String</code>, possibly with a nice <code class="language-plaintext highlighter-rouge">TypeError</code> constraint that complains.
But this’ll work for now - we can totally write this:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">env</span> <span class="o">::</span> <span class="kt">EnvP</span> <span class="kt">String</span> <span class="kt">Void</span>
<span class="n">env</span> <span class="o">=</span> <span class="n">defaultEnv</span><span class="o">.</span><span class="n">setAccountId</span> <span class="s">&quot;asdfasdf&quot;</span>
</code></pre></div></div>

<p>Unfortunately, <em>chaining</em> this isn’t really feasible.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">env</span> <span class="o">::</span> <span class="kt">EnvP</span> <span class="kt">String</span> <span class="kt">String</span>
<span class="n">env</span> <span class="o">=</span> <span class="n">defaultEnv</span><span class="o">.</span><span class="n">setAccountId</span> <span class="s">&quot;asdfasdf&quot;</span><span class="o">.</span><span class="n">setAccountPassword</span> <span class="s">&quot;hunter42&quot;</span> 
</code></pre></div></div>

<p>This fails with an error, as <code class="language-plaintext highlighter-rouge">.setAccountPassword</code> is attaching to <code class="language-plaintext highlighter-rouge">&quot;asdfasdf&quot;</code>, not the <em>return</em> of <code class="language-plaintext highlighter-rouge">defaultEnv.setAccountId &quot;asdfasdf&quot;</code>.
So we can work around this with parens:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">env</span> <span class="o">::</span> <span class="kt">EnvP</span> <span class="kt">String</span> <span class="kt">String</span>
<span class="n">env</span> <span class="o">=</span> 
    <span class="p">(</span><span class="n">defaultEnv</span><span class="o">.</span><span class="n">setAccountId</span> <span class="s">&quot;asdfasdf&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">setAccountPassword</span> <span class="s">&quot;hunter42&quot;</span> 
</code></pre></div></div>

<p>This gets annoying, especially as the chaining goes up.
Assigning to intermediate values also works:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">env</span> <span class="o">::</span> <span class="kt">EnvP</span> <span class="kt">String</span> <span class="kt">String</span>
<span class="n">env</span> <span class="o">=</span> 
    <span class="kr">let</span> 
        <span class="n">withId</span> <span class="o">=</span> <span class="n">defaultEnv</span><span class="o">.</span><span class="n">setAccountId</span> <span class="s">&quot;asdfasdf&quot;</span>
        <span class="n">withPassword</span> <span class="o">=</span> <span class="n">withId</span><span class="o">.</span><span class="n">setAccountPassword</span> <span class="s">&quot;hunter42&quot;</span> 
     <span class="kr">in</span> 
        <span class="n">withPassword</span>
</code></pre></div></div>

<p>But, at this point, I’m wondering how this is any better than just writing</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">env</span> <span class="o">::</span> <span class="kt">EnvP</span> <span class="kt">String</span> <span class="kt">String</span>
<span class="n">env</span> <span class="o">=</span> <span class="n">setAccountId</span> <span class="s">&quot;asdfadsf&quot;</span> <span class="o">$</span> <span class="n">setAccountPassword</span> <span class="s">&quot;hunter42&quot;</span> <span class="n">defaultEnv</span>
</code></pre></div></div>

<p>Unfortunately, the type errors can get a bit weird and annoying carrying around the <code class="language-plaintext highlighter-rouge">EnvP</code> value.
Wrapping it in a <code class="language-plaintext highlighter-rouge">newtype</code> or translating to a separate data structure can make errors better.
It also distinguishes the “create this record” and “use this record” scenarios.</p>

<h1 id="back-to-args">Back to Args</h1>

<p>And, yeah, ultimately, I think <code class="language-plaintext highlighter-rouge">Args</code> is probably the right way to go.</p>

<p>There’s not really much to a library for it.
You’d define a class like this:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">class</span> <span class="kt">New</span> <span class="n">a</span> <span class="kr">where</span>
    <span class="kr">type</span> <span class="kt">Args</span> <span class="n">a</span> <span class="o">=</span> <span class="n">r</span> <span class="o">|</span> <span class="n">r</span> <span class="o">-&gt;</span> <span class="n">a</span>
    
    <span class="n">new</span> <span class="o">::</span> <span class="kt">Args</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">a</span>
</code></pre></div></div>

<p>You want the <code class="language-plaintext highlighter-rouge">TypeFamilyDependencies</code> annotation on <code class="language-plaintext highlighter-rouge">Args</code> because you want the argument type to inform the result type.
A data family would also work, but it would not allow you to define it separately and document it with a separate type name.
Maybe a problem, maybe not.
It may also be nice to vary the return type, allowing <code class="language-plaintext highlighter-rouge">IO</code>, for example.
That looks like this:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">class</span> <span class="kt">New</span> <span class="n">a</span> <span class="kr">where</span>
    <span class="kr">type</span> <span class="kt">Args</span> <span class="n">a</span> <span class="o">=</span> <span class="n">r</span> <span class="o">|</span> <span class="n">r</span> <span class="o">-&gt;</span> <span class="n">a</span>
    <span class="kr">type</span> <span class="kt">Return</span> <span class="n">a</span> <span class="o">=</span> <span class="n">r</span> <span class="o">|</span> <span class="n">r</span> <span class="o">-&gt;</span> <span class="n">a</span>
    <span class="kr">type</span> <span class="kt">Return</span> <span class="n">a</span> <span class="o">=</span> <span class="n">a</span>

    <span class="n">new</span> <span class="o">::</span> <span class="kt">Args</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">Return</span> <span class="n">a</span>
</code></pre></div></div>

<p>But now we’ve just, got, like, this type class, where it takes a thing, and returns another thing (maybe in IO, maybe not?? who knows).
And this is so general and lawless that making a library for it seems a bit silly.</p>

<p>So, instead of writing a library, I wrote a blog post.</p></div>
    </summary>
    <updated>2021-08-24T00:00:00Z</updated>
    <published>2021-08-24T00:00:00Z</published>
    <source>
      <id>https://www.parsonsmatt.org</id>
      <author>
        <name>Matt Parsons</name>
      </author>
      <link href="https://www.parsonsmatt.org" rel="alternate" type="text/html">
      <link href="https://www.parsonsmatt.org/feed.xml" rel="self" type="application/rss+xml">
      <title>Overcoming Software</title>
      <updated>2021-08-24T19:04:42Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-US">
    <id>584219d403596e3099e0ee9b:58462c0e15d5db6feba171c0:61206fc3fd1b0e2d17cf9b2a</id>
    <link href="https://mmhaskell.com/blog/2021/8/20/quicksort-video" rel="alternate" type="text/html">
    <title>New Quicksort Video!</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><figure class="               sqs-block-image-figure               intrinsic             ">
          
        
        

        
          
            
          
            <img alt="quicksort_final.jpg" class="thumb-image" src="https://images.squarespace-cdn.com/content/v1/584219d403596e3099e0ee9b/1629578517800-L0U105UV3GYZYSYY17RR/quicksort_final.jpg?format=1000w">
          
        
          
        

        
      
        </figure>
      

    
  


  


<p>This week we've got a new video out! It goes in depth into the Quicksort algorithm. We compare implementations in Haskell and Python, and also consider what it really means for us to have an &quot;In Place&quot; algorithm that mutates our data.</p>
<p>I've written about this topic before, so check out these articles if you prefer written content!</p>
<ul>
<li><a href="https://mmhaskell.com/blog/2019/5/6/making-arrays-mutable">Mutable Arrays</a></li>
<li><a href="https://mmhaskell.com/blog/2019/5/13/quicksort-with-haskell">Quicksort</a></li>
</ul>
<p>But this new video includes some neat visuals showing Quicksort in action, so check it out!</p>
<p>All the code in the video is visible <a href="https://github.com/MondayMorningHaskell/Sorting/tree/main/src/Quicksort">on Github</a> as well!</p>
<p>If you like this content, make sure to <a href="https://www.mmhaskell.com/subscribe">subscribe</a> to our mailing list!</p></div>
    </summary>
    <updated>2021-08-23T14:30:00Z</updated>
    <published>2021-08-23T14:30:00Z</published>
    <author>
      <name>James Bowen</name>
    </author>
    <source>
      <id>https://mmhaskell.com/blog/</id>
      <link href="https://mmhaskell.com/blog/" rel="alternate" type="text/html">
      <link href="https://mmhaskell.com/blog?format=rss" rel="self" type="application/rss+xml">
      <title>Blog - Monday Morning Haskell</title>
      <updated>2021-09-01T05:25:47Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://www.well-typed.com/blog/2021/08/the-new-ghc-diagnostic-infrastructure</id>
    <link href="https://well-typed.com/blog/2021/08/the-new-ghc-diagnostic-infrastructure" rel="alternate" type="text/html">
    <title>The new GHC diagnostic infrastructure</title>
    <summary>TL;DR Starting from version _9.4_, GHC will have a completely revamped
API to deal with diagnostics (i.e.Â warnings or errors), moving away from
loosely-structured strings in favour of richer Haskell types. This will
make it easier to develop IDEs and other tools that work with GHC's
diagnostics.

Well-Typed [...]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong> Starting from version <em>9.4</em>, GHC will have a completely revamped API to deal with diagnostics (i.e. warnings or errors), moving away from loosely-structured strings in favour of richer Haskell types. This will make it easier to develop IDEs and other tools that work with GHC’s diagnostics.</p>
<p>Well-Typed was able to carry out this work thanks to <a href="https://richarde.dev/">Richard Eisenberg</a>, as part of NSF grant number 1704041.</p>
<h3 id="introduction">Introduction</h3>
<p>The topic of “Can we please have better IDEs?” crops up now and again within the Haskell community. Over the years tools like <a href="https://github.com/haskell/haskell-language-server">Haskell Language Server</a> dramatically improved the situation, but all these tools had to deal with one constant factor: the limitations of the GHC API, in particular how it emitted diagnostics.</p>

<p>Previously, diagnostics were emitted as structured documents (<code>SDoc</code>s), which can be seen as strings with a richer API to control their layout when being pretty-printed. Once GHC emitted a diagnostic as an <code>SDoc</code>, the best tools could do was to parse the text hoping to regain some structure out of it. Consider the following error:</p>
<pre><code>AnyM.hs:12:3: error:
    Illegal bang-pattern (use BangPatterns):
    ! res
   |
12 |   !res &lt;- anyM (pure . (==) 5) [1..]
   |   ^^^^</code></pre>
<p>Here most tools have to work unnecessarily hard, in order to:<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn1" id="fnref1"><sup>1</sup></a></p>
<ol type="1">
<li>Find out the diagnostic’s precise location, by parsing the <code>filename:line:column</code> on the first line.</li>
<li>Understand whether this is an error or a warning (and perhaps the specific warning flag used) by parsing the rest of the first line.</li>
<li>Determine the meaning of the diagnostic (e.g. that this is a parse error due to use of a bang-pattern when the <code>BangPatterns</code> extension is not enabled).</li>
<li>If the diagnostic includes extra context like involved types or variables, further parse and analyse the text to extract such information for later use.</li>
<li>Parse any hints present in the diagnostic (in this case <code>use BangPatterns</code>), turning them into automated refactorings that the user may wish to apply.</li>
</ol>
<p>This is surely not very ergonomic for GHC API users, and with this in mind, <a href="https://well-typed.com/people/alp">Alp Mestanogullari</a> wrote <a href="https://github.com/ghc-proposals/ghc-proposals/pull/306">GHC proposal #306</a> to improve the situation, and this was subsequently implemented by <a href="https://well-typed.com/people/alfredo">Alfredo Di Napoli</a> working with <a href="https://richarde.dev/">Richard Eisenberg</a>.</p>
<p>In this blog post, we will explore what lies in store in future releases of GHC when it comes to diagnostic messages. <a href="https://well-typed.com/blog/rss2.xml#part-1-representing-diagnostics-in-the-ghc-api">Part 1</a> explains the new diagnostic API design at a high level, and <a href="https://well-typed.com/blog/rss2.xml#part-2-applications-and-further-work">Part 2</a> summarizes further possibilities that this work enables, including a low-barrier way to get started contributing to GHC. If you’d prefer a larger example, the <a href="https://well-typed.com/blog/rss2.xml#appendix-example-tool-to-customize-errors">Appendix</a> demonstrates a tiny tool that uses the GHC API to parse a module and give customised errors and hints for some categories of diagnostics.</p>
<h3 id="part-1-representing-diagnostics-in-the-ghc-api">Part 1: Representing diagnostics in the GHC API</h3>
<p>A <em>diagnostic</em> is a fact that GHC emits about the compiled program. These diagnostics always arise for a particular reason, such as a warning flag being enabled or a type error GHC can’t recover from. However, there is a fluid relationship between warnings and errors in GHC: for example, <code>-Werror</code> turns warnings into errors. Thus we refer to “diagnostics” or “messages” to encompass both.</p>
<p>Our work focused on creating a richer hierarchy of diagnostic types that can be returned by the GHC API functions instead of an opaque <code>SDoc</code>. The key idea is to have datatypes describing the meaning of errors, rather than their presentation. As an example, the <code>TcRnMessage</code> type describes diagnostics that may be emitted by the type-checker:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb2-1"><a href="https://well-typed.com/blog/rss2.xml#cb2-1"/><span class="kw">data</span> <span class="dt">TcRnMessage</span> <span class="kw">where</span></span>
<span id="cb2-2"><a href="https://well-typed.com/blog/rss2.xml#cb2-2"/>  <span class="dt">TcRnUnknownMessage</span><span class="ot">      ::</span> (<span class="dt">Diagnostic</span> a, <span class="dt">Typeable</span> a) <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">TcRnMessage</span></span>
<span id="cb2-3"><a href="https://well-typed.com/blog/rss2.xml#cb2-3"/>  <span class="dt">TcRnUnusedPatternBinds</span><span class="ot">  ::</span> <span class="dt">HsBind</span> <span class="dt">GhcRn</span> <span class="ot">-&gt;</span> <span class="dt">TcRnMessage</span></span>
<span id="cb2-4"><a href="https://well-typed.com/blog/rss2.xml#cb2-4"/>  <span class="dt">TcRnDodgyImports</span><span class="ot">        ::</span> <span class="dt">RdrName</span> <span class="ot">-&gt;</span> <span class="dt">TcRnMessage</span></span>
<span id="cb2-5"><a href="https://well-typed.com/blog/rss2.xml#cb2-5"/>  <span class="op">...</span></span></code></pre></div>
<p>The <code>GhcMessage</code> type unifies diagnostics that may be generated across different phases of compilation:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb3-1"><a href="https://well-typed.com/blog/rss2.xml#cb3-1"/><span class="kw">data</span> <span class="dt">GhcMessage</span> <span class="kw">where</span></span>
<span id="cb3-2"><a href="https://well-typed.com/blog/rss2.xml#cb3-2"/>  <span class="co">-- | A message from the parsing phase.</span></span>
<span id="cb3-3"><a href="https://well-typed.com/blog/rss2.xml#cb3-3"/>  <span class="dt">GhcPsMessage</span><span class="ot">      ::</span> <span class="dt">PsMessage</span> <span class="ot">-&gt;</span> <span class="dt">GhcMessage</span></span>
<span id="cb3-4"><a href="https://well-typed.com/blog/rss2.xml#cb3-4"/>  <span class="co">-- | A message from typecheck/renaming phase.</span></span>
<span id="cb3-5"><a href="https://well-typed.com/blog/rss2.xml#cb3-5"/>  <span class="dt">GhcTcRnMessage</span><span class="ot">    ::</span> <span class="dt">TcRnMessage</span> <span class="ot">-&gt;</span> <span class="dt">GhcMessage</span></span>
<span id="cb3-6"><a href="https://well-typed.com/blog/rss2.xml#cb3-6"/>  <span class="co">-- | A message from the desugaring (HsToCore) phase.</span></span>
<span id="cb3-7"><a href="https://well-typed.com/blog/rss2.xml#cb3-7"/>  <span class="dt">GhcDsMessage</span><span class="ot">      ::</span> <span class="dt">DsMessage</span> <span class="ot">-&gt;</span> <span class="dt">GhcMessage</span></span>
<span id="cb3-8"><a href="https://well-typed.com/blog/rss2.xml#cb3-8"/>  <span class="co">-- | A message from the driver.</span></span>
<span id="cb3-9"><a href="https://well-typed.com/blog/rss2.xml#cb3-9"/>  <span class="dt">GhcDriverMessage</span><span class="ot">  ::</span> <span class="dt">DriverMessage</span> <span class="ot">-&gt;</span> <span class="dt">GhcMessage</span></span>
<span id="cb3-10"><a href="https://well-typed.com/blog/rss2.xml#cb3-10"/>  <span class="co">-- | An \&quot;escape\&quot; hatch which can be used when we don't know the source of</span></span>
<span id="cb3-11"><a href="https://well-typed.com/blog/rss2.xml#cb3-11"/>  <span class="co">-- the message or if the message is not one of the typed ones.</span></span>
<span id="cb3-12"><a href="https://well-typed.com/blog/rss2.xml#cb3-12"/>  <span class="dt">GhcUnknownMessage</span><span class="ot"> ::</span> (<span class="dt">Diagnostic</span> a, <span class="dt">Typeable</span> a) <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">GhcMessage</span></span></code></pre></div>
<p>Each message is then wrapped into a <code>MsgEnvelope</code> (as we will see later) to store metadata such as the source position. Given a <code>TcRnMessage</code>, tools can simply pattern match to interpret the diagnostic and extract the information they need. However, they will also need to render the message for the user or retrieve any hints, and this is where the new <code>Diagnostic</code> typeclass comes into play.</p>
<h4 id="the-diagnostic-typeclass">The <code>Diagnostic</code> typeclass</h4>
<p>The <code>Diagnostic</code> typeclass is defined as such:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb4-1"><a href="https://well-typed.com/blog/rss2.xml#cb4-1"/><span class="kw">class</span> <span class="dt">Diagnostic</span> a <span class="kw">where</span></span>
<span id="cb4-2"><a href="https://well-typed.com/blog/rss2.xml#cb4-2"/><span class="ot">  diagnosticMessage ::</span> a <span class="ot">-&gt;</span> <span class="dt">DecoratedSDoc</span></span>
<span id="cb4-3"><a href="https://well-typed.com/blog/rss2.xml#cb4-3"/><span class="ot">  diagnosticReason  ::</span> a <span class="ot">-&gt;</span> <span class="dt">DiagnosticReason</span></span>
<span id="cb4-4"><a href="https://well-typed.com/blog/rss2.xml#cb4-4"/><span class="ot">  diagnosticHints   ::</span> a <span class="ot">-&gt;</span> [<span class="dt">GhcHint</span>]</span></code></pre></div>
<p>This specifies the common interface supported by diagnostic types such as <code>TcRnMessage</code>. It includes:</p>
<ul>
<li><p>The <code>diagnosticMessage</code>: how this diagnostic can be presented to the user as text (structured for pretty-printing).</p></li>
<li><p>The <code>diagnosticReason</code>: why this diagnostic arose, for example due to an error or a warning controlled by a specific flag. There is a subtle but important nuance behind this field, discussed below.</p></li>
<li><p>The <code>diagnosticHints</code>: a list of hints that tools can use to present users with refactoring suggestions. For example, this may include a value like <code>SuggestExtension BangPatterns</code> if enabling the extension may fix the error.</p></li>
</ul>
<h4 id="representing-unknown-diagnostics">Representing “unknown” diagnostics</h4>
<p>The astute reader probably noticed the following data constructor for a <code>TcRnMessage</code> (and similarly for <code>GhcMessage</code>):</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb5-1"><a href="https://well-typed.com/blog/rss2.xml#cb5-1"/><span class="op">...</span></span>
<span id="cb5-2"><a href="https://well-typed.com/blog/rss2.xml#cb5-2"/>  <span class="dt">TcRnUnknownMessage</span><span class="ot"> ::</span> (<span class="dt">Diagnostic</span> a, <span class="dt">Typeable</span> a) <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">TcRnMessage</span></span>
<span id="cb5-3"><a href="https://well-typed.com/blog/rss2.xml#cb5-3"/><span class="op">...</span></span></code></pre></div>
<p>This constructor serves two purposes. First of all, it allows us to gradually port the existing GHC <code>SDoc</code> diagnostics to the new API without having to do it all in one go. GHC emits <em>a lot</em> of diagnostics, so only a subset have been ported and new errors and warnings are converted day after day. In the meantime, we can simply wrap all the existing <code>SDoc</code> into a generic <code>DiagnosticMessage</code> (which has a suitable <code>Diagnostic</code> instance) and pass it to the <code>TcRnUnknownMessage</code>.</p>
<p>Second, this constructor makes the diagnostic infrastructure <em>extensible</em>: tools building on the GHC API and performing their own checks, such as the <a href="https://well-typed.com/blog/2020/08/implementing-a-ghc-plugin-for-liquid-haskell/">LiquidHaskell GHC plugin</a>, will be able to define their own diagnostic types.</p>
<h4 id="messages-and-envelopes">Messages and envelopes</h4>
<p>A diagnostic type such as <code>TcRnMessage</code> or <code>GhcMessage</code> captures the meaning of the warning or error, but not the context in which it arose. For that, the GHC API wraps it in a <code>MsgEnvelope</code>:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb6-1"><a href="https://well-typed.com/blog/rss2.xml#cb6-1"/><span class="kw">data</span> <span class="dt">MsgEnvelope</span> e <span class="ot">=</span> <span class="dt">MsgEnvelope</span></span>
<span id="cb6-2"><a href="https://well-typed.com/blog/rss2.xml#cb6-2"/>   {<span class="ot"> errMsgSpan        ::</span> <span class="dt">SrcSpan</span></span>
<span id="cb6-3"><a href="https://well-typed.com/blog/rss2.xml#cb6-3"/>   ,<span class="ot"> errMsgContext     ::</span> <span class="dt">PrintUnqualified</span></span>
<span id="cb6-4"><a href="https://well-typed.com/blog/rss2.xml#cb6-4"/>   ,<span class="ot"> errMsgDiagnostic  ::</span> e</span>
<span id="cb6-5"><a href="https://well-typed.com/blog/rss2.xml#cb6-5"/>   ,<span class="ot"> errMsgSeverity    ::</span> <span class="dt">Severity</span></span>
<span id="cb6-6"><a href="https://well-typed.com/blog/rss2.xml#cb6-6"/>   } <span class="kw">deriving</span> (<span class="dt">Functor</span>, <span class="dt">Foldable</span>, <span class="dt">Traversable</span>)</span></code></pre></div>
<p>Hopefully this type is fairly self explanatory:</p>
<ul>
<li>The <code>errMsgSpan</code> carries the range of <em>source positions</em> to which the message relates.</li>
<li>The <code>errMsgContext</code> is a minor detail, determining whether names are printed with or without module qualifiers.</li>
<li>The <code>errMsgDiagnostic</code> is the <em>payload</em> of the message, for example a <code>TcRnMessage</code> or <code>GhcMessage</code>.</li>
<li>The <code>errMsgSeverity</code> is the <em>severity</em> of the message, to which we turn now.</li>
</ul>
<h4 id="reason-and-severity">Reason and severity</h4>
<p>It isn’t immediately obvious why a <code>MsgEnvelope</code> contains a <code>Severity</code>, while the <code>Diagnostic</code> class includes a function returning a <code>DiagnosticReason</code>, since these might seem overlapping. Let’s take a look at their definitions first:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb7-1"><a href="https://well-typed.com/blog/rss2.xml#cb7-1"/><span class="kw">data</span> <span class="dt">Severity</span></span>
<span id="cb7-2"><a href="https://well-typed.com/blog/rss2.xml#cb7-2"/>  <span class="ot">=</span> <span class="dt">SevIgnore</span></span>
<span id="cb7-3"><a href="https://well-typed.com/blog/rss2.xml#cb7-3"/>  <span class="op">|</span> <span class="dt">SevWarning</span></span>
<span id="cb7-4"><a href="https://well-typed.com/blog/rss2.xml#cb7-4"/>  <span class="op">|</span> <span class="dt">SevError</span></span>
<span id="cb7-5"><a href="https://well-typed.com/blog/rss2.xml#cb7-5"/></span>
<span id="cb7-6"><a href="https://well-typed.com/blog/rss2.xml#cb7-6"/><span class="kw">data</span> <span class="dt">DiagnosticReason</span></span>
<span id="cb7-7"><a href="https://well-typed.com/blog/rss2.xml#cb7-7"/>  <span class="ot">=</span> <span class="dt">WarningWithoutFlag</span></span>
<span id="cb7-8"><a href="https://well-typed.com/blog/rss2.xml#cb7-8"/>  <span class="op">|</span> <span class="dt">WarningWithFlag</span> <span class="op">!</span><span class="dt">WarningFlag</span></span>
<span id="cb7-9"><a href="https://well-typed.com/blog/rss2.xml#cb7-9"/>  <span class="op">|</span> <span class="dt">ErrorWithoutFlag</span></span>
<span id="cb7-10"><a href="https://well-typed.com/blog/rss2.xml#cb7-10"/>  <span class="kw">deriving</span> (<span class="dt">Eq</span>, <span class="dt">Show</span>)</span></code></pre></div>
<p>While it looks like they might be unified, they actually serve two different purposes: the <code>Severity</code> is an enumeration that indicates how GHC will report this message to the user (or not at all, in case of a <code>SevIgnore</code>). The <code>DiagnosticReason</code> instead gives the reason <em>why</em> the diagnostic was generated by GHC in the first place.</p>
<p>This arises from the fluid relationship between errors and warnings in GHC. For example, a diagnostic might be created due to the <code>-Wunused-imports</code> warning flag, but with <code>-Werror</code> enabled, so it should be treated as an error, not a warning. Thus the <code>Severity</code> will be <code>SevError</code> whereas the <code>DiagnosticReason</code> will be <code>WarningWithFlag Opt_WarnUnusedImports</code>. Keeping separate the “nature of the message” vs. “how the message should be treated”, we are able to capture both concepts without information loss.</p>
<p>The <code>DiagnosticReason</code> is determined by the <code>diagnosticReason</code> class method as a fixed function of the diagnostic type, and never changes. In contrast, the <code>Severity</code> is computed dynamically depending on the flags enabled at the point in the GHC session where the message is emitted, and hence must be stored as part of the <code>MsgEnvelope</code>.</p>
<h3 id="part-2-applications-and-further-work">Part 2: Applications and further work</h3>
<p>Refactoring GHC this way has been a long and sometimes tricky process, but we hope it will bring many benefits to the ecosystem. In this section we will explore next steps and possible projects that could put this work to use.</p>
<h4 id="completing-the-refactoring">Completing the refactoring</h4>
<p>We have completed the foundations, but there is still lots to be done, as described in <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/19905">#19905</a>. The good news is that the majority of diagnostics still not ported are not too hard to convert, and these kind of tasks are well suited as a first ticket for somebody who is looking for an opportunity to contribute to GHC.</p>
<p>We have written a collection of self-contained and self-explanatory tickets, which are <a href="https://gitlab.haskell.org/ghc/ghc/-/issues?scope=all&amp;state=opened&amp;label_name%5B%5D=error%20messages&amp;label_name%5B%5D=newcomer&amp;label_name%5B%5D=T::task">labelled <code>error messages+newcomer+task</code> in the GHC issue tracker</a>. A typical ticket (such as <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/20119">#20119</a>) gives a high level overview of what needs to be done together with a possible plan of action, mentioning a couple of key modules to get people started.</p>
<p>We have already been delighted to see some new GHC contributors getting started through this work!</p>
<h4 id="haskell-language-server-integration">Haskell Language Server integration</h4>
<p>A key motivation for this refactoring work was to enable HLS to consume GHC’s diagnostics more conveniently, rather than needing to parse them with regular expressions. This is being discussed on <a href="https://github.com/haskell/haskell-language-server/issues/2014">HLS issue #2014</a>. It will take a bit of time before HLS can start incorporating the new infrastructure and reap its benefits, because HLS will need to be adapted to deal with the substantial changes in the GHC API in versions 9.2 and 9.4.</p>
<h4 id="ghc-unique-diagnostic-codes">GHC unique diagnostic codes</h4>
<p>There was a recent surge of interest in <a href="https://github.com/ghc-proposals/ghc-proposals/pull/325">GHC proposal #325</a>, which suggests diagnostics should be given unique reference IDs a la Rust, for example:</p>
<pre><code>&gt; class a

&lt;interactive&gt;:5:7: error:
    [GHCERR_b356c55] Malformed head of type or class declaration: a</code></pre>
<p>The idea is that the unique ID (here <code>GHCERR_b356c55</code>) is easier to search for, or look up in a reference document, than a longer message that may change between compiler releases.</p>
<p>Doing this using the old <code>SDoc</code>-based infrastructure in GHC would have been daunting and potentially very error prone: using the new diagnostic infrastructure this seems fairly easy now. As a small proof of concept, we could simply add an ADT enumerating all the diagnostics:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb9-1"><a href="https://well-typed.com/blog/rss2.xml#cb9-1"/><span class="kw">data</span> <span class="dt">DiagnosticId</span></span>
<span id="cb9-2"><a href="https://well-typed.com/blog/rss2.xml#cb9-2"/>  <span class="ot">=</span> <span class="dt">GHCERR_01</span></span>
<span id="cb9-3"><a href="https://well-typed.com/blog/rss2.xml#cb9-3"/>  <span class="op">|</span> <span class="dt">GHCERR_02</span></span>
<span id="cb9-4"><a href="https://well-typed.com/blog/rss2.xml#cb9-4"/>  <span class="op">|</span> <span class="dt">GHCWARN_01</span></span>
<span id="cb9-5"><a href="https://well-typed.com/blog/rss2.xml#cb9-5"/>  <span class="op">|</span> <span class="op">...</span></span></code></pre></div>
<p>Then we could extend the <code>Diagnostic</code> typeclass to require that each diagnostic must return an identifier:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb10-1"><a href="https://well-typed.com/blog/rss2.xml#cb10-1"/><span class="kw">class</span> <span class="dt">Diagnostic</span> a <span class="kw">where</span></span>
<span id="cb10-2"><a href="https://well-typed.com/blog/rss2.xml#cb10-2"/><span class="ot">  diagnosticId      ::</span> a <span class="ot">-&gt;</span> <span class="dt">DiagnosticId</span></span>
<span id="cb10-3"><a href="https://well-typed.com/blog/rss2.xml#cb10-3"/><span class="ot">  diagnosticMessage ::</span> a <span class="ot">-&gt;</span> <span class="dt">DecoratedSDoc</span></span>
<span id="cb10-4"><a href="https://well-typed.com/blog/rss2.xml#cb10-4"/><span class="ot">  diagnosticReason  ::</span> a <span class="ot">-&gt;</span> <span class="dt">DiagnosticReason</span></span>
<span id="cb10-5"><a href="https://well-typed.com/blog/rss2.xml#cb10-5"/><span class="ot">  diagnosticHints   ::</span> a <span class="ot">-&gt;</span> [<span class="dt">GhcHint</span>]</span></code></pre></div>
<p>Last but not least, when displaying messages we could now pretty-print the relevant diagnostic and its ID (together with a URL pointing to the relevant section in the GHC manual, for example). The extra typeclass method will ensure that <code>diagnosticId</code> is automatically accessible as part of the normal GHC API.</p>
<h4 id="diagnostic-message-plugins">Diagnostic message plugins</h4>
<p>GHC already has an extensive plugin mechanism that allows developers to modify certain stages of the compilation pipeline, for example to add optimization passes or adjust the type-checker’s behaviour. A “diagnostic message plugin” would allow users to intercept a diagnostic message before it gets printed, so that they can manipulate it, for example to add domain-specific error information. This could just be a hook in the form of an effectful function <code>GhcMessage -&gt; m GhcMessage</code> that would be called by GHC before we pretty-print the message, where the monad <code>m</code> would allow side-effects such as IO, looking up data in the GHC API session and so on.</p>
<p>For example, a plugin to search for unknown function identifiers on Hoogle might look something like this<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn2" id="fnref2"><sup>2</sup></a>:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb11-1"><a href="https://well-typed.com/blog/rss2.xml#cb11-1"/><span class="kw">data</span> <span class="dt">HoogleSeacher</span> <span class="ot">=</span> <span class="dt">HoogleSeacher</span> {</span>
<span id="cb11-2"><a href="https://well-typed.com/blog/rss2.xml#cb11-2"/><span class="ot">    originalMessage  ::</span> <span class="dt">TcRnMessage</span></span>
<span id="cb11-3"><a href="https://well-typed.com/blog/rss2.xml#cb11-3"/>  ,<span class="ot"> foundIdentifiers ::</span> [<span class="dt">JSON.Value</span>]</span>
<span id="cb11-4"><a href="https://well-typed.com/blog/rss2.xml#cb11-4"/>  }</span>
<span id="cb11-5"><a href="https://well-typed.com/blog/rss2.xml#cb11-5"/></span>
<span id="cb11-6"><a href="https://well-typed.com/blog/rss2.xml#cb11-6"/><span class="kw">instance</span> <span class="dt">Diagnostic</span> <span class="dt">HoogleSeacher</span></span>
<span id="cb11-7"><a href="https://well-typed.com/blog/rss2.xml#cb11-7"/>  diagnosticReason <span class="ot">=</span> diagnosticReason <span class="op">.</span> originalMessage</span>
<span id="cb11-8"><a href="https://well-typed.com/blog/rss2.xml#cb11-8"/>  diagnosticMessage (<span class="dt">HoogleSeacher</span> msg foundIdentifiers) <span class="ot">=</span> diagnosticReason msg <span class="ot">`unionDecoratedSDoc`</span> <span class="op">...</span></span>
<span id="cb11-9"><a href="https://well-typed.com/blog/rss2.xml#cb11-9"/>     <span class="co">-- Print the original message, together with any identifiers fetched from Hoogle</span></span>
<span id="cb11-10"><a href="https://well-typed.com/blog/rss2.xml#cb11-10"/></span>
<span id="cb11-11"><a href="https://well-typed.com/blog/rss2.xml#cb11-11"/><span class="ot">hooglePlugin ::</span> <span class="dt">DiagnosticPlugin</span></span>
<span id="cb11-12"><a href="https://well-typed.com/blog/rss2.xml#cb11-12"/>hooglePlugin <span class="ot">=</span> defaultDiagnosticPlugin { onGhcMessage <span class="ot">=</span> searchHoogle }</span>
<span id="cb11-13"><a href="https://well-typed.com/blog/rss2.xml#cb11-13"/>  <span class="kw">where</span></span>
<span id="cb11-14"><a href="https://well-typed.com/blog/rss2.xml#cb11-14"/><span class="ot">    searchHoogle ::</span> <span class="dt">GhcMonad</span> m <span class="ot">=&gt;</span> <span class="dt">GhcMessage</span> <span class="ot">-&gt;</span> m <span class="dt">GhcMessage</span></span>
<span id="cb11-15"><a href="https://well-typed.com/blog/rss2.xml#cb11-15"/>    searchHoogle <span class="ot">=</span> \<span class="kw">case</span></span>
<span id="cb11-16"><a href="https://well-typed.com/blog/rss2.xml#cb11-16"/>      <span class="dt">GhcTcRnMessage</span> (msg<span class="op">@</span><span class="dt">TcRnOutOfScope</span>{outOfScopeName})</span>
<span id="cb11-17"><a href="https://well-typed.com/blog/rss2.xml#cb11-17"/>        <span class="ot">-&gt;</span> <span class="kw">do</span> <span class="kw">let</span> query <span class="ot">=</span> <span class="st">&quot;https://hoogle.haskell.org?mode=json&amp;hoogle=&quot;</span> <span class="op">&lt;&gt;</span> outOfScopeName</span>
<span id="cb11-18"><a href="https://well-typed.com/blog/rss2.xml#cb11-18"/>              results <span class="ot">&lt;-</span> <span class="co">-- issue a HTTP query and decode the resulting JSON</span></span>
<span id="cb11-19"><a href="https://well-typed.com/blog/rss2.xml#cb11-19"/>              <span class="fu">pure</span> <span class="op">$</span> <span class="dt">GhcUnknownMessage</span> (<span class="dt">HoogleSeacher</span> msg results)</span>
<span id="cb11-20"><a href="https://well-typed.com/blog/rss2.xml#cb11-20"/>      x <span class="ot">-&gt;</span> <span class="fu">pure</span> x</span></code></pre></div>
<h4 id="json-output-from-ghc">JSON output from GHC</h4>
<p>It would be nice to give GHC the ability to emit structured diagnostics in JSON, when a particular flag is set. This would mean that tools not able to use the GHC API directly could simply call GHC with this flag and parse the output JSON into something structured they can manipulate.</p>
<p>GHC already supports a <code>-ddump-json</code> flag, but its semantics is largely unspecified and it does not currently leverage the new representation of diagnostic messages. There has been some discussion in ticket <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/19278">#19278</a> on what a potential JSON interface could look like. The final design hasn’t been decided yet, so if you have any valuable input or feedback on what you would like to see, that ticket is the one to monitor closely.</p>
<h3 id="conclusion">Conclusion</h3>
<p>I (<a href="https://well-typed.com/people/alfredo">Alfredo</a>) would like to personally thank <a href="https://richarde.dev/">Richard Eisenberg</a> for the valuable contributions during this work and for all the “rebuttals” which ultimately led to the final design. The original “diagnostic message plugin” idea was suggested to me by my colleague <a href="https://well-typed.com/people/andres">Andres Löh</a>.</p>
<p>While doing this refactoring work, we kept in mind real world use cases, trying to come up with an API that would maximise reuse in IDEs and other third party tools. Having said that, it’s always hard to guess what would be most useful to others, and this is why we would love to hear from you if you have a tool you think could benefit from the new GHC API. It would be great to receive feedback on whether or not this work is actually making your life easier. Please get in touch via the GHC issue tracker (in particular <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/19905">#19905</a>) or the <a href="https://mail.haskell.org/cgi-bin/mailman/listinfo/ghc-devs"><code>ghc-devs</code> mailing list</a>.</p>
<p>Well-Typed are always open to working on projects that benefit GHC and the surrounding Haskell ecosystem. Please email <a href="mailto:info@well-typed.com">info@well-typed.com</a> if you’d like to discuss how we can help with your open-source or commercial project.</p>
<h3 id="appendix-example-tool-to-customize-errors">Appendix: Example tool to customize errors</h3>
<p>Here’s an example of a tiny tool that uses the GHC API to parse a module and give customised errors and hints for some categories of diagnostics. It runs an interactive GHC session via the <code>runGhc</code> function, tries to parse the input module and returns either a collection of diagnostics including some errors, or a successfully parsed module. If there are parse errors, it pretty-prints them using custom functions.</p>
<p>Ignoring the technical details, the key functions are <code>prettyPrintError</code> and <code>reworkBangPatterns</code>, where we were able to work with a <em>typed</em> representation of diagnostics and their hints. This was not possible with previous versions of GHC: in their case, <code>errs</code> would be just a collection of <code>SDoc</code>s, and the best thing we could have done would have been to parse the <code>SDoc</code>s to recover any extra information.</p>
<p>The <a href="https://gitlab.haskell.org/-/snippets/3140">full code is available here</a>. It requires a recent build of GHC HEAD or GHC 9.4 (when available).<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn3" id="fnref3"><sup>3</sup></a></p>
<div class="sourceCode" id="cb12"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb12-1"><a href="https://well-typed.com/blog/rss2.xml#cb12-1"/><span class="ot">playground ::</span> <span class="dt">FilePath</span></span>
<span id="cb12-2"><a href="https://well-typed.com/blog/rss2.xml#cb12-2"/>           <span class="co">-- ^ The module we would like to compile, with extension (e.g. &quot;AnyM.hs&quot;)</span></span>
<span id="cb12-3"><a href="https://well-typed.com/blog/rss2.xml#cb12-3"/>           <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb12-4"><a href="https://well-typed.com/blog/rss2.xml#cb12-4"/>playground filename <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb12-5"><a href="https://well-typed.com/blog/rss2.xml#cb12-5"/>  res <span class="ot">&lt;-</span> runGhc (<span class="dt">Just</span> myGhcLibDir) <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb12-6"><a href="https://well-typed.com/blog/rss2.xml#cb12-6"/>    df <span class="ot">&lt;-</span> getSessionDynFlags</span>
<span id="cb12-7"><a href="https://well-typed.com/blog/rss2.xml#cb12-7"/></span>
<span id="cb12-8"><a href="https://well-typed.com/blog/rss2.xml#cb12-8"/>    setSessionDynFlags <span class="op">$</span> df { ghcLink        <span class="ot">=</span> <span class="dt">LinkInMemory</span></span>
<span id="cb12-9"><a href="https://well-typed.com/blog/rss2.xml#cb12-9"/>                            , ghcMode        <span class="ot">=</span> <span class="dt">CompManager</span></span>
<span id="cb12-10"><a href="https://well-typed.com/blog/rss2.xml#cb12-10"/>                            , extensionFlags <span class="ot">=</span> EnumSet.empty</span>
<span id="cb12-11"><a href="https://well-typed.com/blog/rss2.xml#cb12-11"/>                            }</span>
<span id="cb12-12"><a href="https://well-typed.com/blog/rss2.xml#cb12-12"/></span>
<span id="cb12-13"><a href="https://well-typed.com/blog/rss2.xml#cb12-13"/>    hsc_env <span class="ot">&lt;-</span> getSession</span>
<span id="cb12-14"><a href="https://well-typed.com/blog/rss2.xml#cb12-14"/>    mb_emod <span class="ot">&lt;-</span> first (<span class="fu">fmap</span> <span class="dt">GhcDriverMessage</span>) <span class="op">&lt;$&gt;</span> liftIO (summariseFile hsc_env [] fn <span class="dt">Nothing</span> <span class="dt">Nothing</span>)</span>
<span id="cb12-15"><a href="https://well-typed.com/blog/rss2.xml#cb12-15"/>    <span class="kw">case</span> mb_emod <span class="kw">of</span></span>
<span id="cb12-16"><a href="https://well-typed.com/blog/rss2.xml#cb12-16"/>      <span class="dt">Left</span> errs  <span class="ot">-&gt;</span> <span class="fu">pure</span> <span class="op">$</span> <span class="dt">Left</span> errs</span>
<span id="cb12-17"><a href="https://well-typed.com/blog/rss2.xml#cb12-17"/>      <span class="dt">Right</span> emod <span class="ot">-&gt;</span> handleSourceError (<span class="fu">pure</span> <span class="op">.</span> <span class="dt">Left</span> <span class="op">.</span> srcErrorMessages)</span>
<span id="cb12-18"><a href="https://well-typed.com/blog/rss2.xml#cb12-18"/>                                      (<span class="dt">Right</span> <span class="op">&lt;$&gt;</span> parseModule (emsModSummary emod))</span>
<span id="cb12-19"><a href="https://well-typed.com/blog/rss2.xml#cb12-19"/></span>
<span id="cb12-20"><a href="https://well-typed.com/blog/rss2.xml#cb12-20"/>  <span class="kw">case</span> res <span class="kw">of</span></span>
<span id="cb12-21"><a href="https://well-typed.com/blog/rss2.xml#cb12-21"/>    <span class="dt">Left</span> errs <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb12-22"><a href="https://well-typed.com/blog/rss2.xml#cb12-22"/>      <span class="fu">putStrLn</span> <span class="st">&quot;Errors:&quot;</span></span>
<span id="cb12-23"><a href="https://well-typed.com/blog/rss2.xml#cb12-23"/>      <span class="fu">putStrLn</span> <span class="op">$</span> showPprUnsafe <span class="op">.</span> ppr <span class="op">$</span> formatBulleted defaultSDocContext <span class="op">$</span></span>
<span id="cb12-24"><a href="https://well-typed.com/blog/rss2.xml#cb12-24"/>        (mkDecorated <span class="op">$</span> <span class="fu">map</span> (prettyPrintError <span class="op">.</span> errMsgDiagnostic) (bagToList <span class="op">.</span> getMessages <span class="op">$</span> errs))</span>
<span id="cb12-25"><a href="https://well-typed.com/blog/rss2.xml#cb12-25"/>    <span class="dt">Right</span> ps  <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb12-26"><a href="https://well-typed.com/blog/rss2.xml#cb12-26"/>      <span class="co">-- Do something with the parsed module.</span></span>
<span id="cb12-27"><a href="https://well-typed.com/blog/rss2.xml#cb12-27"/>      <span class="fu">putStrLn</span> <span class="op">$</span> showPprUnsafe (pm_parsed_source ps)</span>
<span id="cb12-28"><a href="https://well-typed.com/blog/rss2.xml#cb12-28"/></span>
<span id="cb12-29"><a href="https://well-typed.com/blog/rss2.xml#cb12-29"/>  <span class="kw">where</span></span>
<span id="cb12-30"><a href="https://well-typed.com/blog/rss2.xml#cb12-30"/></span>
<span id="cb12-31"><a href="https://well-typed.com/blog/rss2.xml#cb12-31"/><span class="ot">    prettyPrintError ::</span> <span class="dt">GhcMessage</span> <span class="ot">-&gt;</span> <span class="dt">SDoc</span></span>
<span id="cb12-32"><a href="https://well-typed.com/blog/rss2.xml#cb12-32"/>    prettyPrintError msg <span class="ot">=</span></span>
<span id="cb12-33"><a href="https://well-typed.com/blog/rss2.xml#cb12-33"/>      <span class="kw">let</span> body  <span class="ot">=</span> <span class="kw">case</span> msg <span class="kw">of</span></span>
<span id="cb12-34"><a href="https://well-typed.com/blog/rss2.xml#cb12-34"/>            <span class="dt">GhcPsMessage</span> (<span class="dt">PsErrNumUnderscores</span> _)</span>
<span id="cb12-35"><a href="https://well-typed.com/blog/rss2.xml#cb12-35"/>              <span class="ot">-&gt;</span> vcat [ text <span class="st">&quot;You are trying to use the underscore (_) to separate the digits&quot;</span></span>
<span id="cb12-36"><a href="https://well-typed.com/blog/rss2.xml#cb12-36"/>                      , text <span class="st">&quot;but this syntax is not standard Haskell2010 syntax.&quot;</span></span>
<span id="cb12-37"><a href="https://well-typed.com/blog/rss2.xml#cb12-37"/>                      ]</span>
<span id="cb12-38"><a href="https://well-typed.com/blog/rss2.xml#cb12-38"/>            _ <span class="ot">-&gt;</span> vcat <span class="op">.</span> unDecorated <span class="op">$</span> diagnosticMessage msg</span>
<span id="cb12-39"><a href="https://well-typed.com/blog/rss2.xml#cb12-39"/>          hints <span class="ot">=</span> <span class="fu">map</span> reworkBangPatterns (diagnosticHints msg)</span>
<span id="cb12-40"><a href="https://well-typed.com/blog/rss2.xml#cb12-40"/>      <span class="kw">in</span> vcat [</span>
<span id="cb12-41"><a href="https://well-typed.com/blog/rss2.xml#cb12-41"/>             body</span>
<span id="cb12-42"><a href="https://well-typed.com/blog/rss2.xml#cb12-42"/>           , hang (text <span class="st">&quot;Hints:&quot;</span>) <span class="dv">2</span> (vcat hints)</span>
<span id="cb12-43"><a href="https://well-typed.com/blog/rss2.xml#cb12-43"/>           ]</span>
<span id="cb12-44"><a href="https://well-typed.com/blog/rss2.xml#cb12-44"/></span>
<span id="cb12-45"><a href="https://well-typed.com/blog/rss2.xml#cb12-45"/><span class="ot">    reworkBangPatterns ::</span> <span class="dt">GhcHint</span> <span class="ot">-&gt;</span> <span class="dt">SDoc</span></span>
<span id="cb12-46"><a href="https://well-typed.com/blog/rss2.xml#cb12-46"/>    reworkBangPatterns h <span class="ot">=</span> ppr <span class="op">$</span> <span class="kw">case</span> h <span class="kw">of</span></span>
<span id="cb12-47"><a href="https://well-typed.com/blog/rss2.xml#cb12-47"/>      <span class="dt">SuggestSingleExtension</span> _ <span class="dt">LangExt.BangPatterns</span></span>
<span id="cb12-48"><a href="https://well-typed.com/blog/rss2.xml#cb12-48"/>        <span class="ot">-&gt;</span> text <span class="st">&quot;Uh-oh, you need to enable BangPatterns! :)&quot;</span></span>
<span id="cb12-49"><a href="https://well-typed.com/blog/rss2.xml#cb12-49"/>      x <span class="ot">-&gt;</span> ppr x</span>
<span id="cb12-50"><a href="https://well-typed.com/blog/rss2.xml#cb12-50"/></span>
<span id="cb12-51"><a href="https://well-typed.com/blog/rss2.xml#cb12-51"/><span class="op">...</span></span></code></pre></div>
<p>For example, here’s a trivial Haskell program containing some parse errors:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb13-1"><a href="https://well-typed.com/blog/rss2.xml#cb13-1"/><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span></span>
<span id="cb13-2"><a href="https://well-typed.com/blog/rss2.xml#cb13-2"/></span>
<span id="cb13-3"><a href="https://well-typed.com/blog/rss2.xml#cb13-3"/><span class="kw">import</span> <span class="dt">Data.Foldable</span></span>
<span id="cb13-4"><a href="https://well-typed.com/blog/rss2.xml#cb13-4"/></span>
<span id="cb13-5"><a href="https://well-typed.com/blog/rss2.xml#cb13-5"/><span class="ot">anyM ::</span> (<span class="dt">Monad</span> m, <span class="dt">Foldable</span> t) <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> m <span class="dt">Bool</span>) <span class="ot">-&gt;</span> t a <span class="ot">-&gt;</span> m <span class="dt">Bool</span></span>
<span id="cb13-6"><a href="https://well-typed.com/blog/rss2.xml#cb13-6"/>anyM f <span class="ot">=</span> foldrM (\v acc <span class="ot">-&gt;</span> <span class="kw">do</span> { v <span class="ot">&lt;-</span> f v; <span class="kw">if</span> v <span class="kw">then</span> <span class="fu">pure</span> <span class="dt">True</span> <span class="kw">else</span> <span class="fu">pure</span> acc}) <span class="dt">False</span></span>
<span id="cb13-7"><a href="https://well-typed.com/blog/rss2.xml#cb13-7"/></span>
<span id="cb13-8"><a href="https://well-typed.com/blog/rss2.xml#cb13-8"/><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb13-9"><a href="https://well-typed.com/blog/rss2.xml#cb13-9"/>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb13-10"><a href="https://well-typed.com/blog/rss2.xml#cb13-10"/>  <span class="op">!</span>res <span class="ot">&lt;-</span> anyM (<span class="fu">pure</span> <span class="op">.</span> (<span class="op">==</span>) <span class="dv">5</span>) [<span class="dv">10</span>_000 <span class="op">..</span>]</span>
<span id="cb13-11"><a href="https://well-typed.com/blog/rss2.xml#cb13-11"/>  <span class="fu">print</span> res</span></code></pre></div>
<p>Running the program above on this program (saved as <code>AnyM.hs</code>) produces something like this:</p>
<pre><code>/Users/adinapoli/programming/haskell/playground/AnyM.hs:10:3: error:
    Illegal bang-pattern
    !res
    Suggested fix: Perhaps you intended to use BangPatterns
   |
10 |   !res &lt;- anyM (pure . (==) 5) [10_000 ..]
   |   ^^^^

/Users/adinapoli/programming/haskell/playground/AnyM.hs:10:33: error:
    Illegal underscores in integer literals
    Suggested fix: Perhaps you intended to use NumericUnderscores
   |
10 |   !res &lt;- anyM (pure . (==) 5) [10_000 ..]
   |                                 ^^^^^^
Errors:
* You are trying to use the underscore (_) to separate the digits
  but this syntax is not standard Haskell2010 syntax.
  Hints: Perhaps you intended to use NumericUnderscores
* Illegal bang-pattern
  !res
  Hints: Uh-oh, you need to enable BangPatterns! :)</code></pre>
<p>The first two messages are part of the standard output that GHC would normally emit, whereas the last part is our little tool in action.</p>
<section class="footnotes">
<hr></hr>
<ol>
<li id="fn1"><p>If we were dealing directly with the output of a GHC API call rather than a diagnostic as printed on <code>stdout</code> by GHC we would have avoided steps 1 and 2 but the rest would still have been necessary.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref1">↩︎</a></p></li>
<li id="fn2"><p>This is obviously a fictional example, just to demonstrate a semi-interesting usage of the plugin. Furthermore, at the time of writing, the <code>TcRnOutOfScope</code> constructor has not yet been ported.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref2">↩︎</a></p></li>
<li id="fn3"><p>The GHC version will need to include commit <a href="https://gitlab.haskell.org/ghc/ghc/-/commit/06d1ca856d3374bf8dac952740cfe4cef76a350d"><code>06d1ca856d3374bf8dac952740cfe4cef76a350d</code></a>. Of course it is possible that subsequent GHC API changes will require changes to the code.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref3">↩︎</a></p></li>
</ol>
</section></div>
    </content>
    <updated>2021-08-23T00:00:00Z</updated>
    <published>2021-08-23T00:00:00Z</published>
    <category term="ghc"/>
    <category term="error-messages"/>
    <author>
      <name>alfredo</name>
    </author>
    <source>
      <id>https://well-typed.com/blog/</id>
      <logo>https://well-typed.com/img/wtnlogoplain.svg</logo>
      <link href="https://well-typed.com/blog/rss2.xml" rel="self" type="application/rss+xml">
      <link href="https://well-typed.com/blog/" rel="alternate" type="text/html">
      <subtitle>Because Well-Typed Programs Don't Go Wrong</subtitle>
      <title>Well-Typed Blog</title>
      <updated>2021-08-23T00:00:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://www.joachim-breitner.de/blog/781-Sweet_former_employee_appreciation</id>
    <link href="http://www.joachim-breitner.de/blog/781-Sweet_former_employee_appreciation" rel="alternate" type="text/html">
    <title xml:lang="en">Sweet former employee appreciation</title>
    <summary type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p>Two months ago was my last day of working as an employee for DFINITY, and as I mentioned in <a href="https://www.joachim-breitner.de/blog/780">the previous blog post</a>, one of my main contributions was the introduction and maintenance of the <a href="https://sdk.dfinity.org/docs/interface-spec/index.html">Interface Specification</a>.</p>
<figure>
<img alt="The Interface Specification as a book" src="https://www.joachim-breitner.de/various/interface-spec-book.jpg"><figcaption>The Interface Specification as a book</figcaption>
</figure>
<p>Hence I was especially happy to find that my former colleague Hans Larsen has, as a farewell gift and token of appreciation, created a hard copy of the document, with 107 pages of dry technical content that, and a very sweet dedication on the back. This is especially valuable as it came from Lars personally (i.e. it’s not “just” routine HR work to keep former employees happy, which I could imagine to be a thing in big and mature corporations), and despite the fact that he himself has left DFINITY since.</p>
<p>I also take this as further confirmation that this specification-driven design process, despite the initial resistance and daily hurdles, is a good one. A rough list of guiding principles would be:</p>
<ul>
<li>Describe the complete interface, not just signatures (schemas), but <em>also</em> semantics (behavior), in one document. The teams on either side of the interface should not need any other information. In particular, they should never have to peek into the other team’s code to see how it works.</li>
<li>New features or changes are first designed by writing down how they affect the interface specification, discussed on that level with the “other” teams, agreed upon, and then implemented. Treating the document as code and discussing these features on pull requests is helpful here. Depending on how quickly DFINITY becomes more open, we may get to see that happening on the currently internal <code>ic-ref</code> repository.</li>
<li>The interface semantics is described not just using possibly ambiguous or incomplete prose, but also a comprehensive formalism. That formalism is ideally mechanized, but pseudo-math is better than nothing.</li>
<li>The interface is implemented more than once (e.g. a prototype <a href="https://github.com/dfinity/ic-hs">reference implementation</a>, and the production implementation) to keep the implementations honest.</li>
<li>Dually, the interface has more than one consumer, one ideally being a executable test suite that is implementation-agnostic.</li>
</ul>
<p>The similarity to the concept of “<a href="https://deepspec.org/page/About/_">deep specifications</a>” from the DeepSpec project is indeed striking.</p>
<p>One of my hopes at DFINITY was that these principles would catch on and that other components (e.g the NNS, the nodes or the ICP ledger canister) would follow suite. That did not happen, it seems. Or rather, it did not happen yet…</p>
<p>PS, in case you are wondering how: The rendering of the document that’s shown at at <a class="uri" href="https://sdk.dfinity.org/docs/interface-spec/index.html">https://sdk.dfinity.org/docs/interface-spec/index.html</a> is not great; the internal website had a different style with made navigating this large document more possible, as it was a dedicated site with the document’s nested table of content on the left.</p></div>
    </summary>
    <updated>2021-08-22T09:32:37Z</updated>
    <published>2021-08-22T09:32:37Z</published>
    <author>
      <name>Joachim Breitner</name>
      <email>mail@joachim-breitner.de</email>
    </author>
    <source>
      <id>http://www.joachim-breitner.de//blog</id>
      <logo>http://joachim-breitner.de/avatars/avatar_128.png</logo>
      <link href="http://www.joachim-breitner.de//blog" rel="alternate" type="text/html">
      <link href="http://www.joachim-breitner.de/blog_feed.rss" rel="self" type="application/rss+xml">
      <subtitle xml:lang="en">Joachim Breitners Denkblogade</subtitle>
      <title xml:lang="en">nomeataâ€™s mind shares</title>
      <updated>2021-08-30T22:01:14Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://www.well-typed.com/blog/2021/08/large-records</id>
    <link href="https://well-typed.com/blog/2021/08/large-records" rel="alternate" type="text/html">
    <title>Avoiding quadratic core code size with large records</title>
    <summary>[Edsko] will be talking about the problems discussed in this blog post
in his [Haskell Implementors' Workshop] talk this Sunday, Aug 22. The
talk will be broadcast live on YouTube.
Consider a module that contains nothing but the definition of a single
large record and some type class instances:

``` [...]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><blockquote>
<a href="https://well-typed.com/people/edsko">Edsko</a> will be talking about the problems discussed in this blog post in his <a href="https://icfp21.sigplan.org/home/hiw-2021">Haskell Implementors’ Workshop</a> talk this Sunday, Aug 22. The talk will be broadcast live on YouTube.
</blockquote>
<p>Consider a module that contains nothing but the definition of a single large record and some type class instances:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="https://well-typed.com/blog/rss2.xml#cb1-1"/><span class="ot">{-# OPTIONS_GHC -fplugin=RecordDotPreprocessor #-}</span></span>
<span id="cb1-2"><a href="https://well-typed.com/blog/rss2.xml#cb1-2"/></span>
<span id="cb1-3"><a href="https://well-typed.com/blog/rss2.xml#cb1-3"/><span class="kw">module</span> <span class="dt">Example</span> <span class="kw">where</span></span>
<span id="cb1-4"><a href="https://well-typed.com/blog/rss2.xml#cb1-4"/></span>
<span id="cb1-5"><a href="https://well-typed.com/blog/rss2.xml#cb1-5"/><span class="kw">import</span> <span class="dt">Data.Aeson</span></span>
<span id="cb1-6"><a href="https://well-typed.com/blog/rss2.xml#cb1-6"/><span class="kw">import</span> <span class="dt">Generics.SOP.JSON</span></span>
<span id="cb1-7"><a href="https://well-typed.com/blog/rss2.xml#cb1-7"/><span class="kw">import</span> <span class="dt">Generics.SOP.TH</span></span>
<span id="cb1-8"><a href="https://well-typed.com/blog/rss2.xml#cb1-8"/><span class="kw">import</span> <span class="dt">GHC.TypeLits</span></span>
<span id="cb1-9"><a href="https://well-typed.com/blog/rss2.xml#cb1-9"/></span>
<span id="cb1-10"><a href="https://well-typed.com/blog/rss2.xml#cb1-10"/><span class="kw">newtype</span> <span class="dt">T</span> (<span class="ot">i ::</span> <span class="dt">Nat</span>) <span class="ot">=</span> <span class="dt">MkT</span> <span class="dt">Word</span></span>
<span id="cb1-11"><a href="https://well-typed.com/blog/rss2.xml#cb1-11"/>  <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Eq</span>, <span class="dt">ToJSON</span>)</span>
<span id="cb1-12"><a href="https://well-typed.com/blog/rss2.xml#cb1-12"/></span>
<span id="cb1-13"><a href="https://well-typed.com/blog/rss2.xml#cb1-13"/><span class="kw">data</span> <span class="dt">R</span> <span class="ot">=</span> <span class="dt">MkR</span> {</span>
<span id="cb1-14"><a href="https://well-typed.com/blog/rss2.xml#cb1-14"/><span class="ot">      f00 ::</span> <span class="dt">T</span> <span class="dv">00</span></span>
<span id="cb1-15"><a href="https://well-typed.com/blog/rss2.xml#cb1-15"/>    ,<span class="ot"> f01 ::</span> <span class="dt">T</span> <span class="dv">01</span></span>
<span id="cb1-16"><a href="https://well-typed.com/blog/rss2.xml#cb1-16"/>      <span class="co">-- .. lots more ..</span></span>
<span id="cb1-17"><a href="https://well-typed.com/blog/rss2.xml#cb1-17"/>    ,<span class="ot"> f98 ::</span> <span class="dt">T</span> <span class="dv">98</span></span>
<span id="cb1-18"><a href="https://well-typed.com/blog/rss2.xml#cb1-18"/>    ,<span class="ot"> f99 ::</span> <span class="dt">T</span> <span class="dv">99</span></span>
<span id="cb1-19"><a href="https://well-typed.com/blog/rss2.xml#cb1-19"/>    }</span>
<span id="cb1-20"><a href="https://well-typed.com/blog/rss2.xml#cb1-20"/>  <span class="kw">deriving</span> (<span class="dt">Eq</span>, <span class="dt">Show</span>)</span>
<span id="cb1-21"><a href="https://well-typed.com/blog/rss2.xml#cb1-21"/></span>
<span id="cb1-22"><a href="https://well-typed.com/blog/rss2.xml#cb1-22"/>deriveGeneric '<span class="dt">'R</span></span>
<span id="cb1-23"><a href="https://well-typed.com/blog/rss2.xml#cb1-23"/></span>
<span id="cb1-24"><a href="https://well-typed.com/blog/rss2.xml#cb1-24"/><span class="kw">instance</span> <span class="dt">ToJSON</span> <span class="dt">R</span> <span class="kw">where</span></span>
<span id="cb1-25"><a href="https://well-typed.com/blog/rss2.xml#cb1-25"/>  toJSON <span class="ot">=</span> gtoJSON defaultJsonOptions</span></code></pre></div>
<p>As it stands—using <code>ghc</code>’s standard representation for records, along with the code generated by the <a href="https://hackage.haskell.org/package/record-dot-preprocessor"><code>RecordDotPreprocessor</code></a> plugin and the <code>Generic</code> instance generated by <a href="http://hackage.haskell.org/package/generics-sop"><code>generics-sop</code></a>—this results in a <code>core</code> representation of a whopping 450,000 terms/types/coercions, takes 3 seconds to compile, and requires 500M of RAM to compile.<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn1" id="fnref1"><sup>1</sup></a></p>
<p>If we change this module to</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="https://well-typed.com/blog/rss2.xml#cb2-1"/><span class="kw">module</span> <span class="dt">Example</span> <span class="kw">where</span></span>
<span id="cb2-2"><a href="https://well-typed.com/blog/rss2.xml#cb2-2"/></span>
<span id="cb2-3"><a href="https://well-typed.com/blog/rss2.xml#cb2-3"/><span class="kw">import</span> <span class="dt">Data.Aeson</span> (<span class="dt">ToJSON</span>(..))</span>
<span id="cb2-4"><a href="https://well-typed.com/blog/rss2.xml#cb2-4"/><span class="kw">import</span> <span class="dt">Data.Record.Generic.JSON</span></span>
<span id="cb2-5"><a href="https://well-typed.com/blog/rss2.xml#cb2-5"/><span class="kw">import</span> <span class="dt">Data.Record.TH</span></span>
<span id="cb2-6"><a href="https://well-typed.com/blog/rss2.xml#cb2-6"/></span>
<span id="cb2-7"><a href="https://well-typed.com/blog/rss2.xml#cb2-7"/><span class="kw">import</span> <span class="dt">Test.Record.Size.Infra</span></span>
<span id="cb2-8"><a href="https://well-typed.com/blog/rss2.xml#cb2-8"/></span>
<span id="cb2-9"><a href="https://well-typed.com/blog/rss2.xml#cb2-9"/>largeRecord defaultLazyOptions [d|</span>
<span id="cb2-10"><a href="https://well-typed.com/blog/rss2.xml#cb2-10"/>    data R = MkR {</span>
<span id="cb2-11"><a href="https://well-typed.com/blog/rss2.xml#cb2-11"/>          f00 :: T 00</span>
<span id="cb2-12"><a href="https://well-typed.com/blog/rss2.xml#cb2-12"/>        , f01 :: T 01</span>
<span id="cb2-13"><a href="https://well-typed.com/blog/rss2.xml#cb2-13"/>          -- .. lots more ..</span>
<span id="cb2-14"><a href="https://well-typed.com/blog/rss2.xml#cb2-14"/>        , f98 :: T 98</span>
<span id="cb2-15"><a href="https://well-typed.com/blog/rss2.xml#cb2-15"/>        , f99 :: T 99</span>
<span id="cb2-16"><a href="https://well-typed.com/blog/rss2.xml#cb2-16"/>        }</span>
<span id="cb2-17"><a href="https://well-typed.com/blog/rss2.xml#cb2-17"/>      deriving (Eq, Show)</span>
<span id="cb2-18"><a href="https://well-typed.com/blog/rss2.xml#cb2-18"/>  |]</span>
<span id="cb2-19"><a href="https://well-typed.com/blog/rss2.xml#cb2-19"/></span>
<span id="cb2-20"><a href="https://well-typed.com/blog/rss2.xml#cb2-20"/><span class="kw">instance</span> <span class="dt">ToJSON</span> <span class="dt">R</span> <span class="kw">where</span></span>
<span id="cb2-21"><a href="https://well-typed.com/blog/rss2.xml#cb2-21"/>  toJSON <span class="ot">=</span> gtoJSON</span></code></pre></div>
<p>we get a module with essentially the same functionality, <em>but</em> with a <code>core</code> size of a mere 14,000 terms/types/coercions, which compiles within 1 second and requires roughly 100M of RAM.</p>
<p>In this blog post we describe why this simple module generates so much code, and how the <code>large-records</code> library manages to reduce this by more than an order of magnitude.</p>

<p>We wrote this library because <a href="https://juspay.in/">Juspay</a> recently engaged Well-Typed’s services, and one of their requests to us was to try and improve compilation time and compilation memory requirements for their code base. Juspay very generously allowed us to make <code>large-records</code> open source, and it is now <a href="http://hackage.haskell.org/package/large-records">available on <code>Hackage</code></a>.</p>
<h3 id="quadratic-code-size-at-every-level">Quadratic code size at every level</h3>
<p>The reason the <code>core</code> representation of our example module is so large is that unfortunately there are many examples of <code>ghc</code> and other libraries being <a href="https://accidentallyquadratic.tumblr.com/">accidentally quadratic</a>. Before we look at some concrete examples, let’s first investigate where this quadratic code size is coming from. As we will see, it arises at every level: terms, types, type classes, and type level programming.</p>
<h4 id="warmup-terms">Warmup: terms</h4>
<p>For our running example, we will want to have a record with lots of fields. To avoid some “accidental optimizations”, we’ll give each of those fields a different type. To make that a little bit easier, we’ll just introduce a single type that is indexed by a natural number, so that this one type definition gives us as many different types as we need:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="https://well-typed.com/blog/rss2.xml#cb3-1"/><span class="kw">data</span> <span class="dt">T</span> (<span class="ot">n ::</span> <span class="dt">Nat</span>) <span class="ot">=</span> <span class="dt">MkT</span> <span class="dt">Int</span></span></code></pre></div>
<p>That out of the way, consider a record with lots of fields, such as</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="https://well-typed.com/blog/rss2.xml#cb4-1"/><span class="kw">data</span> <span class="dt">R</span> <span class="ot">=</span> <span class="dt">MkR</span> {</span>
<span id="cb4-2"><a href="https://well-typed.com/blog/rss2.xml#cb4-2"/><span class="ot">    f00 ::</span> <span class="dt">T</span> <span class="dv">00</span></span>
<span id="cb4-3"><a href="https://well-typed.com/blog/rss2.xml#cb4-3"/>  ,<span class="ot"> f01 ::</span> <span class="dt">T</span> <span class="dv">01</span></span>
<span id="cb4-4"><a href="https://well-typed.com/blog/rss2.xml#cb4-4"/>  ,<span class="ot"> f02 ::</span> <span class="dt">T</span> <span class="dv">02</span></span>
<span id="cb4-5"><a href="https://well-typed.com/blog/rss2.xml#cb4-5"/>  <span class="co">-- .. lots more ..</span></span>
<span id="cb4-6"><a href="https://well-typed.com/blog/rss2.xml#cb4-6"/>  ,<span class="ot"> f98 ::</span> <span class="dt">T</span> <span class="dv">98</span></span>
<span id="cb4-7"><a href="https://well-typed.com/blog/rss2.xml#cb4-7"/>  ,<span class="ot"> f99 ::</span> <span class="dt">T</span> <span class="dv">99</span></span>
<span id="cb4-8"><a href="https://well-typed.com/blog/rss2.xml#cb4-8"/>  }</span></code></pre></div>
<p>When we define a record, <code>ghc</code> will generate field accessors for all fields in the record. In other words, it will derive functions such as</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="https://well-typed.com/blog/rss2.xml#cb5-1"/><span class="ot">f00 ::</span> <span class="dt">R</span> <span class="ot">-&gt;</span> <span class="dt">T</span> <span class="dv">0</span></span></code></pre></div>
<p>These functions are not difficult to generate, of course. Each function is just a simple <code>case</code> statement:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="https://well-typed.com/blog/rss2.xml#cb6-1"/>f00 <span class="ot">=</span> \(<span class="ot">r ::</span> <span class="dt">R</span>) <span class="ot">-&gt;</span></span>
<span id="cb6-2"><a href="https://well-typed.com/blog/rss2.xml#cb6-2"/>    <span class="kw">case</span> r <span class="kw">of</span></span>
<span id="cb6-3"><a href="https://well-typed.com/blog/rss2.xml#cb6-3"/>      <span class="dt">MkR</span> x00 x01 x02 x03 x04 x05 x06 x07 x08 x09</span>
<span id="cb6-4"><a href="https://well-typed.com/blog/rss2.xml#cb6-4"/>          x10 x11 x12 x13 x14 x15 x16 x17 x18 x19</span>
<span id="cb6-5"><a href="https://well-typed.com/blog/rss2.xml#cb6-5"/>          <span class="co">-- .. lots more ..</span></span>
<span id="cb6-6"><a href="https://well-typed.com/blog/rss2.xml#cb6-6"/>          x90 x91 x92 x93 x94 x95 x96 x97 x98 x99 <span class="ot">-&gt;</span></span>
<span id="cb6-7"><a href="https://well-typed.com/blog/rss2.xml#cb6-7"/>        x00</span></code></pre></div>
<p>Although simple, this case statement mentions a lot of unused variables (99 of them, in fact). Moreover, each of those variables is annotated with their type. This means that this one function is actually rather large; <code>ghc</code> reports that it contains 5 terms and 202 types. The size of this function is clearly linear in the number <code>n</code> of fields we have; moreover, <code>ghc</code> will generate one function for each of those <code>n</code> fields; that means that simply declaring the record will already generate code that is <code>O(n²)</code> in size.</p>
<h4 id="more-subtle-types">More subtle: types</h4>
<p>Suppose we define an applicative “<code>zip</code>” function for <code>R</code>, something like</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="https://well-typed.com/blog/rss2.xml#cb7-1"/><span class="ot">zipMyRecordWith ::</span></span>
<span id="cb7-2"><a href="https://well-typed.com/blog/rss2.xml#cb7-2"/>     <span class="dt">Applicative</span> f</span>
<span id="cb7-3"><a href="https://well-typed.com/blog/rss2.xml#cb7-3"/>  <span class="ot">=&gt;</span> (<span class="kw">forall</span> n<span class="op">.</span> <span class="dt">T</span> n <span class="ot">-&gt;</span> <span class="dt">T</span> n <span class="ot">-&gt;</span> f (<span class="dt">T</span> n))</span>
<span id="cb7-4"><a href="https://well-typed.com/blog/rss2.xml#cb7-4"/>  <span class="ot">-&gt;</span> <span class="dt">R</span> <span class="ot">-&gt;</span> <span class="dt">R</span> <span class="ot">-&gt;</span> f <span class="dt">R</span></span>
<span id="cb7-5"><a href="https://well-typed.com/blog/rss2.xml#cb7-5"/>zipMyRecordWith f r r' <span class="ot">=</span></span>
<span id="cb7-6"><a href="https://well-typed.com/blog/rss2.xml#cb7-6"/>        <span class="fu">pure</span> <span class="dt">MkR</span></span>
<span id="cb7-7"><a href="https://well-typed.com/blog/rss2.xml#cb7-7"/>    <span class="op">&lt;*&gt;</span> f (f00 r) (f00 r')</span>
<span id="cb7-8"><a href="https://well-typed.com/blog/rss2.xml#cb7-8"/>    <span class="op">&lt;*&gt;</span> f (f01 r) (f01 r')</span>
<span id="cb7-9"><a href="https://well-typed.com/blog/rss2.xml#cb7-9"/>    <span class="op">&lt;*&gt;</span> f (f02 r) (f02 r')</span>
<span id="cb7-10"><a href="https://well-typed.com/blog/rss2.xml#cb7-10"/>    <span class="co">-- .. lots more ..</span></span>
<span id="cb7-11"><a href="https://well-typed.com/blog/rss2.xml#cb7-11"/>    <span class="op">&lt;*&gt;</span> f (f98 r) (f98 r')</span>
<span id="cb7-12"><a href="https://well-typed.com/blog/rss2.xml#cb7-12"/>    <span class="op">&lt;*&gt;</span> f (f99 r) (f99 r')</span></code></pre></div>
<p>Clearly the size of this function is at least linear in the number of record fields, that much is expected. However, <code>-ddump-simpl</code> tells us that this function contains <em>50,818 types</em>! Where are all of those coming from?</p>
<p>Recall the type of <code>(&lt;*&gt;)</code>:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="https://well-typed.com/blog/rss2.xml#cb8-1"/><span class="ot">(&lt;*&gt;) ::</span> <span class="dt">Applicative</span> f <span class="ot">=&gt;</span> f (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> f a <span class="ot">-&gt;</span> f b</span></code></pre></div>
<p>Those type variables need to be instantiated; <code>f</code> is always instantiated to the <code>f</code> type parameter passed to <code>zipMyRecordWith</code>, <code>a</code> is the type of the next field we’re applying, but what about <code>b</code>? Let’s annotate <code>zipMyRecordWith</code> with the types of <code>a</code> and <code>b</code> in pseudo-Haskell:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="https://well-typed.com/blog/rss2.xml#cb9-1"/><span class="ot">zipMyRecordWith ::</span></span>
<span id="cb9-2"><a href="https://well-typed.com/blog/rss2.xml#cb9-2"/>     <span class="dt">Applicative</span> f</span>
<span id="cb9-3"><a href="https://well-typed.com/blog/rss2.xml#cb9-3"/>  <span class="ot">=&gt;</span> (<span class="kw">forall</span> n<span class="op">.</span> <span class="dt">T</span> n <span class="ot">-&gt;</span> <span class="dt">T</span> n <span class="ot">-&gt;</span> f (<span class="dt">T</span> n))</span>
<span id="cb9-4"><a href="https://well-typed.com/blog/rss2.xml#cb9-4"/>  <span class="ot">-&gt;</span> <span class="dt">R</span> <span class="ot">-&gt;</span> <span class="dt">R</span> <span class="ot">-&gt;</span> f <span class="dt">R</span></span>
<span id="cb9-5"><a href="https://well-typed.com/blog/rss2.xml#cb9-5"/>zipMyRecordWith f r r' <span class="ot">=</span></span>
<span id="cb9-6"><a href="https://well-typed.com/blog/rss2.xml#cb9-6"/>        <span class="fu">pure</span> <span class="dt">MkR</span></span>
<span id="cb9-7"><a href="https://well-typed.com/blog/rss2.xml#cb9-7"/>    <span class="op">&lt;*&gt;</span> <span class="op">@</span>(<span class="dt">T</span> <span class="dv">00</span>) <span class="op">@</span>(<span class="dt">T</span> <span class="dv">01</span> <span class="ot">-&gt;</span> <span class="dt">T</span> <span class="dv">02</span> <span class="ot">-&gt;</span> <span class="dt">T</span> <span class="dv">03</span> <span class="ot">-&gt;</span> <span class="op">..</span> <span class="ot">-&gt;</span> <span class="dt">T</span> <span class="dv">99</span> <span class="ot">-&gt;</span> <span class="dt">R</span>) f (f00 r) (f00 r')</span>
<span id="cb9-8"><a href="https://well-typed.com/blog/rss2.xml#cb9-8"/>    <span class="op">&lt;*&gt;</span> <span class="op">@</span>(<span class="dt">T</span> <span class="dv">01</span>) <span class="op">@</span>(        <span class="dt">T</span> <span class="dv">02</span> <span class="ot">-&gt;</span> <span class="dt">T</span> <span class="dv">03</span> <span class="ot">-&gt;</span> <span class="op">..</span> <span class="ot">-&gt;</span> <span class="dt">T</span> <span class="dv">99</span> <span class="ot">-&gt;</span> <span class="dt">R</span>) f (f01 r) (f01 r')</span>
<span id="cb9-9"><a href="https://well-typed.com/blog/rss2.xml#cb9-9"/>    <span class="op">&lt;*&gt;</span> <span class="op">@</span>(<span class="dt">T</span> <span class="dv">02</span>) <span class="op">@</span>(                <span class="dt">T</span> <span class="dv">03</span> <span class="ot">-&gt;</span> <span class="op">..</span> <span class="ot">-&gt;</span> <span class="dt">T</span> <span class="dv">99</span> <span class="ot">-&gt;</span> <span class="dt">R</span>) f (f02 r) (f02 r')</span>
<span id="cb9-10"><a href="https://well-typed.com/blog/rss2.xml#cb9-10"/>    <span class="co">-- .. lots more ..</span></span>
<span id="cb9-11"><a href="https://well-typed.com/blog/rss2.xml#cb9-11"/>    <span class="op">&lt;*&gt;</span> <span class="op">@</span>(<span class="dt">T</span> <span class="dv">98</span>) <span class="op">@</span>(                              <span class="dt">T</span> <span class="dv">99</span> <span class="ot">-&gt;</span> <span class="dt">R</span>) f (f98 r) (f98 r')</span>
<span id="cb9-12"><a href="https://well-typed.com/blog/rss2.xml#cb9-12"/>    <span class="op">&lt;*&gt;</span> <span class="op">@</span>(<span class="dt">T</span> <span class="dv">99</span>) <span class="op">@</span>(                                      <span class="dt">R</span>) f (f99 r) (f99 r')</span></code></pre></div>
<p>The first instantiation of <code>(&lt;*&gt;)</code> mentions the type of every single field; the second mentions the types of all-but-one field, the next of all-but-two, etc. This means that the size of this <em>single</em> function is once again <code>O(n²)</code> in the number of record fields.</p>
<h4 id="type-class-dictionaries">Type class dictionaries</h4>
<p>Suppose we wanted to capture the concept “some constraints <code>c</code> applied to the types of all fields in our record”:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="https://well-typed.com/blog/rss2.xml#cb10-1"/><span class="kw">class</span> (</span>
<span id="cb10-2"><a href="https://well-typed.com/blog/rss2.xml#cb10-2"/>    c (<span class="dt">T</span> <span class="dv">00</span>)</span>
<span id="cb10-3"><a href="https://well-typed.com/blog/rss2.xml#cb10-3"/>  , c (<span class="dt">T</span> <span class="dv">01</span>)</span>
<span id="cb10-4"><a href="https://well-typed.com/blog/rss2.xml#cb10-4"/>  , c (<span class="dt">T</span> <span class="dv">02</span>)</span>
<span id="cb10-5"><a href="https://well-typed.com/blog/rss2.xml#cb10-5"/>  <span class="co">-- .. lots more ..</span></span>
<span id="cb10-6"><a href="https://well-typed.com/blog/rss2.xml#cb10-6"/>  , c (<span class="dt">T</span> <span class="dv">98</span>)</span>
<span id="cb10-7"><a href="https://well-typed.com/blog/rss2.xml#cb10-7"/>  , c (<span class="dt">T</span> <span class="dv">99</span>)</span>
<span id="cb10-8"><a href="https://well-typed.com/blog/rss2.xml#cb10-8"/>  ) <span class="ot">=&gt;</span> <span class="dt">Constraints_R</span> c</span></code></pre></div>
<p>This should be fine right? Right? Wrong.</p>
<p>When we declare a type class, we’re effectively constructing a record type with fields for each of the methods of the class; this record is known as the “dictionary” for the class. Superclass constraints translate to “subdictionaries”: when a class such as <code>Ord</code> has a superclass constraint on <code>Eq</code>, then the dictionary for <code>Ord</code> will have a field for an <code>Eq</code> dictionary.</p>
<p>This means that this definition of <code>Constraints_R</code> is actually of a very similar nature to the definition of <code>R</code> itself: it defines a record with 100 fields. And just like for the record, <code>ghc</code> will generate “field accessors” to extract the fields of this dictionary; put another way, those field accessors “prove” that if we know <code>Constraints_R c</code>, we also know <code>c (T 00)</code>, <code>c (T 01)</code>, etc. What do those field accessors look like? You guessed it, a big pattern match; in pseudo-Haskell:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="https://well-typed.com/blog/rss2.xml#cb11-1"/><span class="op">$</span><span class="ot">p1Constraints_R ::</span> <span class="dt">Constraints_R</span> c <span class="ot">=&gt;</span> c (<span class="dt">T</span> <span class="dv">0</span>)</span>
<span id="cb11-2"><a href="https://well-typed.com/blog/rss2.xml#cb11-2"/><span class="op">$</span>p1Constraints_R <span class="ot">=</span> \dict <span class="ot">-&gt;</span></span>
<span id="cb11-3"><a href="https://well-typed.com/blog/rss2.xml#cb11-3"/>    <span class="kw">case</span> dict <span class="kw">of</span></span>
<span id="cb11-4"><a href="https://well-typed.com/blog/rss2.xml#cb11-4"/>      <span class="dt">Constraints_R</span> d00 d01 d02 d03 d04 d05 d06 d07 d08 d09</span>
<span id="cb11-5"><a href="https://well-typed.com/blog/rss2.xml#cb11-5"/>                    d10 d11 d12 d13 d14 d15 d16 d17 d18 d19</span>
<span id="cb11-6"><a href="https://well-typed.com/blog/rss2.xml#cb11-6"/>                    <span class="co">-- .. lots more ..</span></span>
<span id="cb11-7"><a href="https://well-typed.com/blog/rss2.xml#cb11-7"/>                    d90 d91 d92 d93 d94 d95 d96 d97 d98 d99 <span class="ot">-&gt;</span></span>
<span id="cb11-8"><a href="https://well-typed.com/blog/rss2.xml#cb11-8"/>        d00</span></code></pre></div>
<p>Since <code>ghc</code> generates a projection like this for each superclass constraint, this once again results in code of size that is <code>O(n²)</code> in the number of record fields.</p>
<h4 id="type-level-induction">Type level induction</h4>
<p>So far all our examples have been simple Haskell; for our next example, we’ll get a bit more advanced. Just like we can have list <em>values</em>, we can also have list <em>types</em>; for example, here is a type-level list of the indices of the <code>T</code> types used inside our running example record <code>R</code>:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="https://well-typed.com/blog/rss2.xml#cb12-1"/><span class="kw">type</span> <span class="dt">IndicesR</span> <span class="ot">=</span> '[</span>
<span id="cb12-2"><a href="https://well-typed.com/blog/rss2.xml#cb12-2"/>    <span class="dv">00</span>, <span class="dv">01</span>, <span class="dv">02</span>, <span class="dv">03</span>, <span class="dv">04</span>, <span class="dv">05</span>, <span class="dv">06</span>, <span class="dv">07</span>, <span class="dv">08</span>, <span class="dv">09</span></span>
<span id="cb12-3"><a href="https://well-typed.com/blog/rss2.xml#cb12-3"/>  , <span class="dv">10</span>, <span class="dv">11</span>, <span class="dv">12</span>, <span class="dv">13</span>, <span class="dv">14</span>, <span class="dv">15</span>, <span class="dv">16</span>, <span class="dv">17</span>, <span class="dv">18</span>, <span class="dv">19</span></span>
<span id="cb12-4"><a href="https://well-typed.com/blog/rss2.xml#cb12-4"/>  <span class="co">-- .. lots more ..</span></span>
<span id="cb12-5"><a href="https://well-typed.com/blog/rss2.xml#cb12-5"/>  , <span class="dv">90</span>, <span class="dv">91</span>, <span class="dv">92</span>, <span class="dv">93</span>, <span class="dv">94</span>, <span class="dv">95</span>, <span class="dv">96</span>, <span class="dv">97</span>, <span class="dv">98</span>, <span class="dv">99</span></span>
<span id="cb12-6"><a href="https://well-typed.com/blog/rss2.xml#cb12-6"/>  ]</span></code></pre></div>
<p>There are many use cases for type level lists. For example, we can define a type <a href="http://hackage.haskell.org/package/sop-core-0.5.0.1/docs/Data-SOP-NP.html"><code>NP</code></a> such that <code>NP f [x, y, .., z]</code> is basically the same as <code>(f x, f y, .., f z)</code>:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="https://well-typed.com/blog/rss2.xml#cb13-1"/><span class="kw">data</span> <span class="dt">NP</span> (<span class="ot">f ::</span> k <span class="ot">-&gt;</span> <span class="dt">Type</span>) (<span class="ot">xs ::</span> [k]) <span class="kw">where</span></span>
<span id="cb13-2"><a href="https://well-typed.com/blog/rss2.xml#cb13-2"/>  <span class="dt">Nil</span><span class="ot">  ::</span> <span class="dt">NP</span> f '[]</span>
<span id="cb13-3"><a href="https://well-typed.com/blog/rss2.xml#cb13-3"/><span class="ot">  (:*) ::</span> f x <span class="ot">-&gt;</span> <span class="dt">NP</span> f xs <span class="ot">-&gt;</span> <span class="dt">NP</span> f (x '<span class="op">:</span> xs)</span></code></pre></div>
<p>If we have a <code>T</code> for every index in <code>IndicesR</code>, we can construct a value of our record:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="https://well-typed.com/blog/rss2.xml#cb14-1"/><span class="ot">npToR ::</span> <span class="dt">NP</span> <span class="dt">T</span> <span class="dt">IndicesR</span> <span class="ot">-&gt;</span> <span class="dt">R</span></span>
<span id="cb14-2"><a href="https://well-typed.com/blog/rss2.xml#cb14-2"/>npToR (  f00 <span class="op">:*</span> f01 <span class="op">:*</span> f02 <span class="op">:*</span> f03 <span class="op">:*</span> f04 <span class="op">:*</span> f05 <span class="op">:*</span> f06 <span class="op">:*</span> f07 <span class="op">:*</span> f08 <span class="op">:*</span> f09</span>
<span id="cb14-3"><a href="https://well-typed.com/blog/rss2.xml#cb14-3"/>      <span class="op">:*</span> f10 <span class="op">:*</span> f11 <span class="op">:*</span> f12 <span class="op">:*</span> f13 <span class="op">:*</span> f14 <span class="op">:*</span> f15 <span class="op">:*</span> f16 <span class="op">:*</span> f17 <span class="op">:*</span> f18 <span class="op">:*</span> f19</span>
<span id="cb14-4"><a href="https://well-typed.com/blog/rss2.xml#cb14-4"/>       <span class="co">-- .. lots more ..</span></span>
<span id="cb14-5"><a href="https://well-typed.com/blog/rss2.xml#cb14-5"/>      <span class="op">:*</span> f90 <span class="op">:*</span> f91 <span class="op">:*</span> f92 <span class="op">:*</span> f93 <span class="op">:*</span> f94 <span class="op">:*</span> f95 <span class="op">:*</span> f96 <span class="op">:*</span> f97 <span class="op">:*</span> f98 <span class="op">:*</span> f99</span>
<span id="cb14-6"><a href="https://well-typed.com/blog/rss2.xml#cb14-6"/>      <span class="op">:*</span> <span class="dt">Nil</span> ) <span class="ot">=</span> <span class="dt">MkR</span> {<span class="op">..</span>}</span></code></pre></div>
<p>The compiled size of <code>npToR</code> is large, <em>but</em> it is linear in size (total size of 4441 terms, types and coercions for 100 fields, and a total size of 2241 for 50 fields). So far so good.</p>
<p>In order to get to the problem I’d like to illustrate in this section, we need one more concept. Suppose wanted to write a function that can construct a value of <code>NP T xs</code> for <em>any</em> <code>xs</code>:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="https://well-typed.com/blog/rss2.xml#cb15-1"/><span class="ot">mkNP ::</span> <span class="dt">NP</span> <span class="dt">T</span> xs</span></code></pre></div>
<p>This should be possible, since <code>T</code> is just a wrapper around an <code>Int</code>, and so all we need to do is generate as many <code>T</code>s as there are elements in the type level list <code>xs</code>. However, <code>xs</code> is a <em>type level</em> list, and we cannot pattern match on types in Haskell; indeed, they do not even exist at all at run-time.</p>
<p>Therefore we somehow need to <em>reflect</em> the type level list at the term level: we need a value that corresponds exactly to the type. We do this by introducing a new type, indexed by a type level list, so that given a type level list of a particular length, our new type has exactly <em>one</em> value. Such a type—a type with exactly one value—is known as a <em>singleton type</em>:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="https://well-typed.com/blog/rss2.xml#cb16-1"/><span class="kw">data</span> <span class="dt">SList</span><span class="ot"> ::</span> [k] <span class="ot">-&gt;</span> <span class="dt">Type</span> <span class="kw">where</span></span>
<span id="cb16-2"><a href="https://well-typed.com/blog/rss2.xml#cb16-2"/>  <span class="dt">SNil</span><span class="ot">  ::</span> <span class="dt">SList</span> '[]</span>
<span id="cb16-3"><a href="https://well-typed.com/blog/rss2.xml#cb16-3"/>  <span class="dt">SCons</span><span class="ot"> ::</span> <span class="dt">SList</span> xs <span class="ot">-&gt;</span> <span class="dt">SList</span> (x '<span class="op">:</span> xs)</span></code></pre></div>
<p><code>SList</code> gives us a value that we can pattern match on, and when we do we discover something about the shape of the type level list <code>xs</code>:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="https://well-typed.com/blog/rss2.xml#cb17-1"/><span class="ot">mkNP' ::</span> <span class="dt">SList</span> xs <span class="ot">-&gt;</span> <span class="dt">NP</span> <span class="dt">T</span> xs</span>
<span id="cb17-2"><a href="https://well-typed.com/blog/rss2.xml#cb17-2"/>mkNP' <span class="dt">SNil</span>      <span class="ot">=</span> <span class="dt">Nil</span></span>
<span id="cb17-3"><a href="https://well-typed.com/blog/rss2.xml#cb17-3"/>mkNP' (<span class="dt">SCons</span> s) <span class="ot">=</span> <span class="dt">MkT</span> <span class="dv">0</span> <span class="op">:*</span> mkNP' s</span></code></pre></div>
<p>The closest we can come to <code>mkNP</code> is to make this singleton value implicit:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="https://well-typed.com/blog/rss2.xml#cb18-1"/><span class="kw">class</span> <span class="dt">SListI</span> (<span class="ot">xs ::</span> [k]) <span class="kw">where</span></span>
<span id="cb18-2"><a href="https://well-typed.com/blog/rss2.xml#cb18-2"/><span class="ot">  sList ::</span> <span class="dt">SList</span> xs</span>
<span id="cb18-3"><a href="https://well-typed.com/blog/rss2.xml#cb18-3"/></span>
<span id="cb18-4"><a href="https://well-typed.com/blog/rss2.xml#cb18-4"/><span class="ot">mkNP ::</span> <span class="dt">SListI</span> xs <span class="ot">=&gt;</span> <span class="dt">NP</span> <span class="dt">T</span> xs</span>
<span id="cb18-5"><a href="https://well-typed.com/blog/rss2.xml#cb18-5"/>mkNP <span class="ot">=</span> mkNP' sList</span></code></pre></div>
<p>If we now try to use <code>mkNP</code> to construct a value of our record</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb19-1"><a href="https://well-typed.com/blog/rss2.xml#cb19-1"/><span class="ot">r0 ::</span> <span class="dt">R</span></span>
<span id="cb19-2"><a href="https://well-typed.com/blog/rss2.xml#cb19-2"/>r0 <span class="ot">=</span> npToR mkNP</span></code></pre></div>
<p>we will of course find that we need an instance of <code>SListI</code> for <code>IndicesR</code>. Our first instinct might be to write something like</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb20-1"><a href="https://well-typed.com/blog/rss2.xml#cb20-1"/><span class="kw">instance</span> <span class="dt">SListI</span> <span class="dt">IndicesR</span> <span class="kw">where</span></span>
<span id="cb20-2"><a href="https://well-typed.com/blog/rss2.xml#cb20-2"/>  sList <span class="ot">=</span></span>
<span id="cb20-3"><a href="https://well-typed.com/blog/rss2.xml#cb20-3"/>      <span class="dt">SCons</span></span>
<span id="cb20-4"><a href="https://well-typed.com/blog/rss2.xml#cb20-4"/>    <span class="op">$</span> <span class="dt">SCons</span></span>
<span id="cb20-5"><a href="https://well-typed.com/blog/rss2.xml#cb20-5"/>    <span class="op">$</span> <span class="dt">SCons</span></span>
<span id="cb20-6"><a href="https://well-typed.com/blog/rss2.xml#cb20-6"/>    <span class="co">-- .. lots more ..</span></span>
<span id="cb20-7"><a href="https://well-typed.com/blog/rss2.xml#cb20-7"/>    <span class="op">$</span> <span class="dt">SCons</span></span>
<span id="cb20-8"><a href="https://well-typed.com/blog/rss2.xml#cb20-8"/>    <span class="op">$</span> <span class="dt">SCons</span></span>
<span id="cb20-9"><a href="https://well-typed.com/blog/rss2.xml#cb20-9"/>    <span class="op">$</span> <span class="dt">SNil</span></span></code></pre></div>
<p>but if we do that, we will soon discover that the compiled code is quadratic in size. We could have predicted that: it’s the same problem as in the “Types” section above, with <code>($)</code> playing the role of <code>(&lt;*&gt;)</code>. But even if we write it as</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb21-1"><a href="https://well-typed.com/blog/rss2.xml#cb21-1"/><span class="kw">instance</span> <span class="dt">SListI</span> <span class="dt">IndicesR</span> <span class="kw">where</span></span>
<span id="cb21-2"><a href="https://well-typed.com/blog/rss2.xml#cb21-2"/>  sList <span class="ot">=</span></span>
<span id="cb21-3"><a href="https://well-typed.com/blog/rss2.xml#cb21-3"/>    <span class="dt">SCons</span> (</span>
<span id="cb21-4"><a href="https://well-typed.com/blog/rss2.xml#cb21-4"/>    <span class="dt">SCons</span> (</span>
<span id="cb21-5"><a href="https://well-typed.com/blog/rss2.xml#cb21-5"/>    <span class="dt">SCons</span> (</span>
<span id="cb21-6"><a href="https://well-typed.com/blog/rss2.xml#cb21-6"/>    <span class="co">-- .. lots more ..</span></span>
<span id="cb21-7"><a href="https://well-typed.com/blog/rss2.xml#cb21-7"/>    <span class="dt">SCons</span> (</span>
<span id="cb21-8"><a href="https://well-typed.com/blog/rss2.xml#cb21-8"/>    <span class="dt">SCons</span> (</span>
<span id="cb21-9"><a href="https://well-typed.com/blog/rss2.xml#cb21-9"/>    <span class="dt">SNil</span></span>
<span id="cb21-10"><a href="https://well-typed.com/blog/rss2.xml#cb21-10"/>    ))) <span class="co">{- .. lots more brackets .. -}</span> ))</span></code></pre></div>
<p>we’re still in trouble: each of those <code>SCons</code> applications has two type argument <code>x</code> and <code>xs</code> (the type level list of the tail). So with some type annotations, this code is</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb22-1"><a href="https://well-typed.com/blog/rss2.xml#cb22-1"/><span class="kw">instance</span> <span class="dt">SListI</span> <span class="dt">IndicesR</span> <span class="kw">where</span></span>
<span id="cb22-2"><a href="https://well-typed.com/blog/rss2.xml#cb22-2"/>  sList <span class="ot">=</span></span>
<span id="cb22-3"><a href="https://well-typed.com/blog/rss2.xml#cb22-3"/>    <span class="dt">SCons</span> <span class="op">@</span><span class="dv">00</span> <span class="op">@</span>'[<span class="dv">01</span>, <span class="dv">02</span>, <span class="dv">03</span>, <span class="op">..</span>, <span class="dv">99</span>] (</span>
<span id="cb22-4"><a href="https://well-typed.com/blog/rss2.xml#cb22-4"/>    <span class="dt">SCons</span> <span class="op">@</span><span class="dv">01</span> <span class="op">@</span>'[    <span class="dv">02</span>, <span class="dv">03</span>, <span class="op">..</span>, <span class="dv">99</span>] (</span>
<span id="cb22-5"><a href="https://well-typed.com/blog/rss2.xml#cb22-5"/>    <span class="dt">SCons</span> <span class="op">@</span><span class="dv">02</span> <span class="op">@</span>'[        <span class="dv">03</span>, <span class="op">..</span>, <span class="dv">99</span>] (</span>
<span id="cb22-6"><a href="https://well-typed.com/blog/rss2.xml#cb22-6"/>    <span class="co">-- .. lots more ..</span></span>
<span id="cb22-7"><a href="https://well-typed.com/blog/rss2.xml#cb22-7"/>    <span class="dt">SCons</span> <span class="op">@</span><span class="dv">98</span> <span class="op">@</span>'[                <span class="dv">99</span>] (</span>
<span id="cb22-8"><a href="https://well-typed.com/blog/rss2.xml#cb22-8"/>    <span class="dt">SCons</span> <span class="op">@</span><span class="dv">99</span> <span class="op">@</span>'[                  ] (</span>
<span id="cb22-9"><a href="https://well-typed.com/blog/rss2.xml#cb22-9"/>    <span class="dt">SNil</span></span>
<span id="cb22-10"><a href="https://well-typed.com/blog/rss2.xml#cb22-10"/>    ))) <span class="co">{- .. lots more brackets .. -}</span> ))</span></code></pre></div>
<p>So this code is again <code>O(n²)</code> in size (actually, the real code generated by <code>ghc</code> is much worse than this, due to the fact that <code>SList</code> is a GADT; after desugaring, the function has a total size of 15,352, and after the simplifier runs (in <code>-O0</code>) that expands to a whopping 46,151).</p>
<p>Experienced type-level Haskellers might be surprised that we’d try to write this <code>SListI</code> instance by hand. After all, the <em>definition</em> of a singleton type is that it is a type with only a single value, and so we should be able to just derive it automatically. Indeed we can:</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb23-1"><a href="https://well-typed.com/blog/rss2.xml#cb23-1"/><span class="kw">instance</span> <span class="dt">SListI</span> '[] <span class="kw">where</span></span>
<span id="cb23-2"><a href="https://well-typed.com/blog/rss2.xml#cb23-2"/>  sList <span class="ot">=</span> <span class="dt">SNil</span></span>
<span id="cb23-3"><a href="https://well-typed.com/blog/rss2.xml#cb23-3"/></span>
<span id="cb23-4"><a href="https://well-typed.com/blog/rss2.xml#cb23-4"/><span class="kw">instance</span> <span class="dt">SListI</span> xs <span class="ot">=&gt;</span> <span class="dt">SListI</span> (x '<span class="op">:</span> xs) <span class="kw">where</span></span>
<span id="cb23-5"><a href="https://well-typed.com/blog/rss2.xml#cb23-5"/>  sList <span class="ot">=</span> <span class="dt">SCons</span> sList</span></code></pre></div>
<p>Surely we should be good now, right? These definitions are small, and don’t deal with concrete large lists, and so we avoid quadratic code size. Right? Wrong.</p>
<p>Although it is true that the two instances for <code>SListI</code> are unproblematic, the moment that we use <code>npToR mkNP</code>, <code>ghc</code> needs to prove <code>SListI '[00, 01, .. 99]</code>. In other words, it must generate code that produces a <em>dictionary</em> for <code>SListI [00, 01, .. 99]</code>. Since <code>SListI</code> for <code>(x ': xs)</code> has a superclass constraint <code>SListI xs</code>, the dictionary for <code>SListI [00, 01, .., 99]</code> will have a field for the dictionary for <code>SListI [01, .., 99]</code>, all the way down to the empty type level list. This means that <code>ghc</code> will generate 100 dictionaries; each of those dictionaries contains an <code>SCons</code> application with the same type annotation as in hand-written code above. This means that we <em>still</em> have code that is <code>O(n²)</code> in size.</p>
<h3 id="concrete-examples">Concrete examples</h3>
<p>In the previous section we discussed the ways in which we might end up with accidentally quadratic code size. In this section we will consider some examples of code generated by specific libraries. We will start with GHC generics, which is actually a <em>good</em> example: it generates code of size <code>O(n log n)</code> rather than <code>O(n²)</code>. After that we will discuss <code>record-dot-preprocessor</code> and <code>generics-sop</code>, both of which do generate code of <code>O(n²)</code> size.</p>
<h4 id="ghc-generics">GHC Generics</h4>
<p>The goal of <em>generic programming</em> is to be able to write a single function that can be applied to values of lots of different types. Generics libraries such as <a href="https://hackage.haskell.org/package/base/docs/GHC-Generics.html"><code>GHC.Generics</code></a> and <a href="http://hackage.haskell.org/package/generics-sop"><code>generics-sop</code></a> (discussed below) do this by translating the value to a <em>representation type</em>; since every type can be translated to only a handful of different representation types, it suffices to write a function over all of those representation types.</p>
<p>Here we will discuss a simplified form of <a href="https://hackage.haskell.org/package/base/docs/GHC-Generics.html"><code>GHC.Generics</code></a> that still illustrates the same point. The generic representation of a record such as the one above is essentially just a large nested tuple. For the GHC library itself it does not actually matter terribly <em>how</em> this tuple is created; for example, this would work:</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb24-1"><a href="https://well-typed.com/blog/rss2.xml#cb24-1"/><span class="kw">type</span> <span class="kw">family</span> <span class="dt">GHC_Rep</span> (<span class="ot">a ::</span> <span class="dt">Type</span>)<span class="ot"> ::</span> <span class="dt">Type</span></span>
<span id="cb24-2"><a href="https://well-typed.com/blog/rss2.xml#cb24-2"/></span>
<span id="cb24-3"><a href="https://well-typed.com/blog/rss2.xml#cb24-3"/><span class="kw">type</span> <span class="kw">instance</span> <span class="dt">GHC_Rep</span> <span class="dt">R</span> <span class="ot">=</span> (<span class="dt">T</span> <span class="dv">00</span>, (<span class="dt">T</span> <span class="dv">01</span>, (<span class="dt">T02</span>, <span class="op">...</span> (<span class="dt">T98</span>, <span class="dt">T99</span>))))</span></code></pre></div>
<p>Although it would work, it would not be great from a code size perspective. Consider the function that would translate <code>R</code> to <code>GHC_Rep R</code>:</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb25-1"><a href="https://well-typed.com/blog/rss2.xml#cb25-1"/><span class="ot">ghcTo ::</span> <span class="dt">R</span> <span class="ot">-&gt;</span> <span class="dt">GHC_Rep</span> <span class="dt">R</span></span>
<span id="cb25-2"><a href="https://well-typed.com/blog/rss2.xml#cb25-2"/>ghcTo <span class="dt">MkR</span>{<span class="op">..</span>} <span class="ot">=</span></span>
<span id="cb25-3"><a href="https://well-typed.com/blog/rss2.xml#cb25-3"/>    (,) <span class="op">@</span>(<span class="dt">T</span> <span class="dv">00</span>) <span class="op">@</span>(<span class="dt">T</span> <span class="dv">01</span>, (<span class="dt">T02</span>, <span class="op">...</span> (<span class="dt">T98</span>, <span class="dt">T99</span>))) f00 (</span>
<span id="cb25-4"><a href="https://well-typed.com/blog/rss2.xml#cb25-4"/>    (,) <span class="op">@</span>(<span class="dt">T</span> <span class="dv">01</span>)        <span class="op">@</span>(<span class="dt">T02</span>, <span class="op">...</span> (<span class="dt">T98</span>, <span class="dt">T99</span>))  f01 (</span>
<span id="cb25-5"><a href="https://well-typed.com/blog/rss2.xml#cb25-5"/>    (,) <span class="op">@</span>(<span class="dt">T</span> <span class="dv">02</span>)             <span class="op">@</span>(<span class="op">...</span> (<span class="dt">T98</span>, <span class="dt">T99</span>))  f02 (</span>
<span id="cb25-6"><a href="https://well-typed.com/blog/rss2.xml#cb25-6"/>    <span class="co">-- .. lots more ..</span></span>
<span id="cb25-7"><a href="https://well-typed.com/blog/rss2.xml#cb25-7"/>    (,) <span class="op">@</span>(<span class="dt">T</span> <span class="dv">99</span>)                         <span class="op">@</span>(())  f99 (</span>
<span id="cb25-8"><a href="https://well-typed.com/blog/rss2.xml#cb25-8"/>    () ))))</span></code></pre></div>
<p>This pattern is starting to get familiar at this point; with this representation, <code>ghcTo</code> would be <code>O(n²)</code> in size. Fortunately, GHC generics avoids this problem by instead generating a <em>balanced</em> representation, something like</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb26-1"><a href="https://well-typed.com/blog/rss2.xml#cb26-1"/><span class="kw">type</span> <span class="kw">instance</span> <span class="dt">GHC_Rep</span> <span class="dt">R</span> <span class="ot">=</span></span>
<span id="cb26-2"><a href="https://well-typed.com/blog/rss2.xml#cb26-2"/> ( ( ( ( ( ( <span class="dt">T</span> <span class="dv">00</span>, ( <span class="dt">T</span> <span class="dv">01</span>, <span class="dt">T</span> <span class="dv">02</span> ) )</span>
<span id="cb26-3"><a href="https://well-typed.com/blog/rss2.xml#cb26-3"/>         , ( <span class="dt">T</span> <span class="dv">03</span>, ( <span class="dt">T</span> <span class="dv">04</span>, <span class="dt">T</span> <span class="dv">05</span> ) )</span>
<span id="cb26-4"><a href="https://well-typed.com/blog/rss2.xml#cb26-4"/>         )</span>
<span id="cb26-5"><a href="https://well-typed.com/blog/rss2.xml#cb26-5"/> <span class="co">-- .. lots more ..</span></span>
<span id="cb26-6"><a href="https://well-typed.com/blog/rss2.xml#cb26-6"/>         , ( ( <span class="dt">T</span> <span class="dv">46</span>, <span class="dt">T</span> <span class="dv">47</span> )</span>
<span id="cb26-7"><a href="https://well-typed.com/blog/rss2.xml#cb26-7"/>           , ( <span class="dt">T</span> <span class="dv">48</span>, <span class="dt">T</span> <span class="dv">49</span> )</span>
<span id="cb26-8"><a href="https://well-typed.com/blog/rss2.xml#cb26-8"/>   ) ) ) ) )</span>
<span id="cb26-9"><a href="https://well-typed.com/blog/rss2.xml#cb26-9"/> , ( ( ( ( ( <span class="dt">T</span> <span class="dv">50</span>, ( <span class="dt">T</span> <span class="dv">51</span>, <span class="dt">T</span> <span class="dv">52</span> ) )</span>
<span id="cb26-10"><a href="https://well-typed.com/blog/rss2.xml#cb26-10"/>         , ( <span class="dt">T</span> <span class="dv">53</span>, ( <span class="dt">T</span> <span class="dv">54</span>, <span class="dt">T</span> <span class="dv">55</span> ) )</span>
<span id="cb26-11"><a href="https://well-typed.com/blog/rss2.xml#cb26-11"/>         )</span>
<span id="cb26-12"><a href="https://well-typed.com/blog/rss2.xml#cb26-12"/> <span class="co">-- .. lots more ..</span></span>
<span id="cb26-13"><a href="https://well-typed.com/blog/rss2.xml#cb26-13"/>         , ( ( <span class="dt">T</span> <span class="dv">96</span>, <span class="dt">T</span> <span class="dv">97</span> )</span>
<span id="cb26-14"><a href="https://well-typed.com/blog/rss2.xml#cb26-14"/>           , ( <span class="dt">T</span> <span class="dv">98</span>, <span class="dt">T</span> <span class="dv">99</span> )</span>
<span id="cb26-15"><a href="https://well-typed.com/blog/rss2.xml#cb26-15"/> ) ) ) ) ) )</span></code></pre></div>
<p>With this representation, the number of branches is still the same, but in the translation function the type annotations are now <em>halved</em> in size at each branch, rather than reduced by 1:</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb27-1"><a href="https://well-typed.com/blog/rss2.xml#cb27-1"/><span class="ot">ghcTo ::</span> <span class="dt">R</span> <span class="ot">-&gt;</span> <span class="dt">GHC_Rep</span> <span class="dt">R</span></span>
<span id="cb27-2"><a href="https://well-typed.com/blog/rss2.xml#cb27-2"/>ghcTo <span class="dt">MkR</span>{<span class="op">..</span>} <span class="ot">=</span></span>
<span id="cb27-3"><a href="https://well-typed.com/blog/rss2.xml#cb27-3"/>  ( ( ( ( ( ( f00, ( f01, f02 ) )</span>
<span id="cb27-4"><a href="https://well-typed.com/blog/rss2.xml#cb27-4"/>          , ( f03 , ( f04, f05 ) )</span>
<span id="cb27-5"><a href="https://well-typed.com/blog/rss2.xml#cb27-5"/>          )</span>
<span id="cb27-6"><a href="https://well-typed.com/blog/rss2.xml#cb27-6"/>  <span class="co">-- .. lots more ..</span></span>
<span id="cb27-7"><a href="https://well-typed.com/blog/rss2.xml#cb27-7"/>          , ( ( f96, f97 )</span>
<span id="cb27-8"><a href="https://well-typed.com/blog/rss2.xml#cb27-8"/>            , ( f98, f99 )</span>
<span id="cb27-9"><a href="https://well-typed.com/blog/rss2.xml#cb27-9"/>  ) ) ) ) ) )</span></code></pre></div>
<p>As a consequence, the size of <em>this</em> version, and the cost of GHC generics in general, is actually <code>O(n log n)</code> in the number of record fields, although the constant factor is reasonably high.</p>
<p>It is worth emphasizing how much better <code>O(n log n)</code> is than <code>O(n²)</code>. Here is a plot of the cost of GHC generics (in terms of AST size: terms, types and coercions) as we vary the number of record fields from 100 fields to 1000 fields:</p>
<p><img src="https://well-typed.com/blog/aux/images/large-records/ghc-generics.png"></p>
<p>This almost looks linear. It isn’t; the cost per field is roughly 460 terms/types/coercions when we have 100 fields, and that increases to roughly 625 when we get to 1000 fields, but the cost only goes up very slowly.</p>
<h4 id="the-recorddotsyntax-preprocessor">The <code>RecordDotSyntax</code> preprocessor</h4>
<p>The <a href="https://hackage.haskell.org/package/record-dot-preprocessor"><code>record-dot-preprocessor</code></a> is a preprocessor and GHC plugin for the <a href="https://github.com/ghc-proposals/ghc-proposals/pull/282">RecordDotSyntax</a> GHC proposal. The preprocessor interprets specialized “record syntax”; for example, it translates</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb28-1"><a href="https://well-typed.com/blog/rss2.xml#cb28-1"/>expr{lbl1<span class="op">.</span>lbl2 <span class="ot">=</span> val}</span></code></pre></div>
<p>to</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb29-1"><a href="https://well-typed.com/blog/rss2.xml#cb29-1"/>setField <span class="op">@</span><span class="st">&quot;lbl1&quot;</span> expr <span class="op">$</span> setField <span class="op">@</span><span class="st">&quot;lbl2&quot;</span> (getField <span class="op">@</span><span class="st">&quot;lbl1&quot;</span> expr) val</span></code></pre></div>
<p>These two functions <code>getField</code> and <code>hasField</code> come from a <code>HasField</code> class currently provided by <a href="https://hackage.haskell.org/package/record-hasfield"><code>record-hasfield</code></a> (although now that the <a href="https://github.com/ghc-proposals/ghc-proposals/pull/158">Add <code>setField</code> to <code>HasField</code> proposal</a> is accepted, this should eventually move to <code>base</code>):</p>
<div class="sourceCode" id="cb30"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb30-1"><a href="https://well-typed.com/blog/rss2.xml#cb30-1"/><span class="kw">class</span> <span class="dt">HasField</span> x r a <span class="op">|</span> x r <span class="ot">-&gt;</span> a <span class="kw">where</span></span>
<span id="cb30-2"><a href="https://well-typed.com/blog/rss2.xml#cb30-2"/><span class="ot">  hasField ::</span> r <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> r, a)</span></code></pre></div>
<p>When you include</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb31-1"><a href="https://well-typed.com/blog/rss2.xml#cb31-1"/><span class="ot">{-# OPTIONS_GHC -fplugin=RecordDotPreprocessor #-}</span></span></code></pre></div>
<p>at the top of your Haskell file, the <code>RecordDotPreprocessor</code> plugin will generate <code>HasField</code> instances for you. They look innocuous enough:</p>
<div class="sourceCode" id="cb32"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb32-1"><a href="https://well-typed.com/blog/rss2.xml#cb32-1"/><span class="kw">instance</span> <span class="dt">HasField</span> <span class="st">&quot;f00&quot;</span> <span class="dt">R</span> (<span class="dt">T</span> <span class="dv">00</span>) <span class="kw">where</span></span>
<span id="cb32-2"><a href="https://well-typed.com/blog/rss2.xml#cb32-2"/>  hasField r <span class="ot">=</span> (\x <span class="ot">-&gt;</span> r { f00 <span class="ot">=</span> x }, f00 r)</span></code></pre></div>
<p>Unfortunately, once we get to <code>ghc</code>’s internal representation, this is much less innocent:</p>
<div class="sourceCode" id="cb33"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb33-1"><a href="https://well-typed.com/blog/rss2.xml#cb33-1"/><span class="ot">hasField_f00 ::</span> <span class="dt">R</span> <span class="ot">-&gt;</span> (<span class="dt">T</span> <span class="dv">0</span> <span class="ot">-&gt;</span> <span class="dt">R</span>, <span class="dt">T</span> <span class="dv">0</span>)</span>
<span id="cb33-2"><a href="https://well-typed.com/blog/rss2.xml#cb33-2"/>hasField_f00 r <span class="ot">=</span> (</span>
<span id="cb33-3"><a href="https://well-typed.com/blog/rss2.xml#cb33-3"/>      \new <span class="ot">-&gt;</span> <span class="kw">case</span> r <span class="kw">of</span></span>
<span id="cb33-4"><a href="https://well-typed.com/blog/rss2.xml#cb33-4"/>        <span class="dt">MkR</span> x00 x01 x02 x03 x04 x05 x06 x07 x08 x09</span>
<span id="cb33-5"><a href="https://well-typed.com/blog/rss2.xml#cb33-5"/>            x10 x11 x12 x13 x14 x15 x16 x17 x18 x19</span>
<span id="cb33-6"><a href="https://well-typed.com/blog/rss2.xml#cb33-6"/>            <span class="co">-- .. lots more ..</span></span>
<span id="cb33-7"><a href="https://well-typed.com/blog/rss2.xml#cb33-7"/>            x90 x91 x92 x93 x94 x95 x96 x97 x98 x99 <span class="ot">-&gt;</span></span>
<span id="cb33-8"><a href="https://well-typed.com/blog/rss2.xml#cb33-8"/>          <span class="dt">MkR</span> new x01 x02 x03 x04 x05 x06 x07 x08 x09</span>
<span id="cb33-9"><a href="https://well-typed.com/blog/rss2.xml#cb33-9"/>              x10 x11 x12 x13 x14 x15 x16 x17 x18 x19</span>
<span id="cb33-10"><a href="https://well-typed.com/blog/rss2.xml#cb33-10"/>              <span class="co">-- .. lots more ..</span></span>
<span id="cb33-11"><a href="https://well-typed.com/blog/rss2.xml#cb33-11"/>              x90 x91 x92 x93 x94 x95 x96 x97 x98 x99</span>
<span id="cb33-12"><a href="https://well-typed.com/blog/rss2.xml#cb33-12"/>    , <span class="kw">case</span> r <span class="kw">of</span></span>
<span id="cb33-13"><a href="https://well-typed.com/blog/rss2.xml#cb33-13"/>        <span class="dt">MkR</span> x00 x01 x02 x03 x04 x05 x06 x07 x08 x09</span>
<span id="cb33-14"><a href="https://well-typed.com/blog/rss2.xml#cb33-14"/>            x10 x11 x12 x13 x14 x15 x16 x17 x18 x19</span>
<span id="cb33-15"><a href="https://well-typed.com/blog/rss2.xml#cb33-15"/>            <span class="co">-- .. lots more ..</span></span>
<span id="cb33-16"><a href="https://well-typed.com/blog/rss2.xml#cb33-16"/>            x90 x91 x92 x93 x94 x95 x96 x97 x98 x99 <span class="ot">-&gt;</span></span>
<span id="cb33-17"><a href="https://well-typed.com/blog/rss2.xml#cb33-17"/>          x00</span>
<span id="cb33-18"><a href="https://well-typed.com/blog/rss2.xml#cb33-18"/>    )</span></code></pre></div>
<p>We saw this before when we discussed the record field accessors; the same linear cost that a field accessor induces is induced here as well, with a larger constant factor. As for field accessors, we need to generate a <code>HasField</code> instance for every field, and hence altogether we once again have code that is <code>O(n²)</code> in size.</p>
<p>This really matters: a module containing <em>just</em> the declaration of our record size has a total size of 22,065 terms/types/coercions after desugaring, and 22,277 after the simplifier (with <code>-O0</code>). This is already much bigger than it should be, due to the quadratic nature fo the field accessors. Generating <code>HasField</code> instances for all fields results in a total code size of 58,665 after desugaring and 78,977 after the simplifier. And all we’ve done is define the record! (For comparison, with <code>large-records</code>, a module containing a single record with 100 fields has a mere total size of 8,305 after desugaring, expanding to 13,958 after the simplifier, and that is <em>including support for generics</em>).</p>
<h4 id="sop-generics">SOP generics</h4>
<p>The <a href="http://hackage.haskell.org/package/generics-sop"><code>generics-sop</code></a> library is similar in nature to GHC generics, but it uses a different generic representation. It is described in detail in the paper <a href="http://edsko.net/pubs/TrueSumsOfProducts.pdf">True Sums of Products</a>; here we give a simplified presentation.</p>
<p>In fact, we have already seen most ingredients. The <code>generics-sop</code> representation for a record is essentially the <code>NP</code> type that we discussed in “Type level induction”, above. In that section we saw that the function <code>npToR</code> that translates <em>from</em> the generic representation <em>to</em> <code>R</code> is linear in size. Unfortunately, the same is not true for the inverse function:</p>
<div class="sourceCode" id="cb34"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb34-1"><a href="https://well-typed.com/blog/rss2.xml#cb34-1"/><span class="ot">npFromR ::</span> <span class="dt">R</span> <span class="ot">-&gt;</span> <span class="dt">NP</span> <span class="dt">T</span> <span class="dt">IndicesR</span></span>
<span id="cb34-2"><a href="https://well-typed.com/blog/rss2.xml#cb34-2"/>npFromR <span class="dt">MkR</span>{<span class="op">..</span>} <span class="ot">=</span> (</span>
<span id="cb34-3"><a href="https://well-typed.com/blog/rss2.xml#cb34-3"/>       f00 <span class="op">:*</span> f01 <span class="op">:*</span> f02 <span class="op">:*</span> f03 <span class="op">:*</span> f04 <span class="op">:*</span> f05 <span class="op">:*</span> f06 <span class="op">:*</span> f07 <span class="op">:*</span> f08 <span class="op">:*</span> f09</span>
<span id="cb34-4"><a href="https://well-typed.com/blog/rss2.xml#cb34-4"/>    <span class="op">:*</span> f10 <span class="op">:*</span> f11 <span class="op">:*</span> f12 <span class="op">:*</span> f13 <span class="op">:*</span> f14 <span class="op">:*</span> f15 <span class="op">:*</span> f16 <span class="op">:*</span> f17 <span class="op">:*</span> f18 <span class="op">:*</span> f19</span>
<span id="cb34-5"><a href="https://well-typed.com/blog/rss2.xml#cb34-5"/>    <span class="co">-- .. lots more ..</span></span>
<span id="cb34-6"><a href="https://well-typed.com/blog/rss2.xml#cb34-6"/>    <span class="op">:*</span> f90 <span class="op">:*</span> f91 <span class="op">:*</span> f92 <span class="op">:*</span> f93 <span class="op">:*</span> f94 <span class="op">:*</span> f95 <span class="op">:*</span> f96 <span class="op">:*</span> f97 <span class="op">:*</span> f98 <span class="op">:*</span> f99</span>
<span id="cb34-7"><a href="https://well-typed.com/blog/rss2.xml#cb34-7"/><span class="pp">#endif</span></span>
<span id="cb34-8"><a href="https://well-typed.com/blog/rss2.xml#cb34-8"/>    <span class="op">:*</span> <span class="dt">Nil</span></span>
<span id="cb34-9"><a href="https://well-typed.com/blog/rss2.xml#cb34-9"/>    )</span></code></pre></div>
<p>That wildcard pattern match <code>MkR{..}</code> will expand to a pattern match for a variable for every field, but that doesn’t matter here: we only generate <em>one</em> translation function, and it’s fine if that is linear in size. The problem however is in the body of this function. After the previous examples, perhaps you can spot the problem already: <code>(:*)</code> has a bunch of type arguments, and one of those is the list of indices at the tail; so this code looks something like</p>
<div class="sourceCode" id="cb35"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb35-1"><a href="https://well-typed.com/blog/rss2.xml#cb35-1"/>npFromR <span class="dt">MkR</span>{<span class="op">..</span>} <span class="ot">=</span></span>
<span id="cb35-2"><a href="https://well-typed.com/blog/rss2.xml#cb35-2"/>    (<span class="op">:*</span>) <span class="op">@</span><span class="dv">00</span> <span class="op">@</span>'[<span class="dv">1</span>, <span class="dv">2</span>, <span class="op">..</span>, <span class="dv">98</span>, <span class="dv">99</span>] f00 (</span>
<span id="cb35-3"><a href="https://well-typed.com/blog/rss2.xml#cb35-3"/>    (<span class="op">:*</span>) <span class="op">@</span><span class="dv">01</span> <span class="op">@</span>'[   <span class="dv">2</span>, <span class="op">..</span>, <span class="dv">98</span>, <span class="dv">99</span>] f01 (</span>
<span id="cb35-4"><a href="https://well-typed.com/blog/rss2.xml#cb35-4"/>    (<span class="op">:*</span>) <span class="op">@</span><span class="dv">02</span> <span class="op">@</span>'[      <span class="op">..</span>, <span class="dv">98</span>, <span class="dv">99</span>] f02 (</span>
<span id="cb35-5"><a href="https://well-typed.com/blog/rss2.xml#cb35-5"/>    <span class="co">-- .. lots more ..</span></span>
<span id="cb35-6"><a href="https://well-typed.com/blog/rss2.xml#cb35-6"/>    (<span class="op">:*</span>) <span class="op">@</span><span class="dv">98</span> <span class="op">@</span>'[              <span class="dv">99</span>] f98 (</span>
<span id="cb35-7"><a href="https://well-typed.com/blog/rss2.xml#cb35-7"/>    (<span class="op">:*</span>) <span class="op">@</span><span class="dv">99</span> <span class="op">@</span>'[                ] f99 (</span>
<span id="cb35-8"><a href="https://well-typed.com/blog/rss2.xml#cb35-8"/>    <span class="dt">Nil</span> )))))</span></code></pre></div>
<p>a depressingly familiar sight at this point (and again, the real code is worse, due to the fact that <code>NP</code> is a GADT). This matters: the size of <code>npToR</code> is 4,441 terms/types/coercions, the size of <code>npFromR</code> is 46,459.</p>
<p>The <code>generics-sop</code> library suffers from quadratic code size in other places as well. It makes heavy use of type-level lists, in a similar style to <code>SListI</code> above, and with the same kinds of problems. It also represents <em>metadata</em> at the type-level, rather than just at the term level, which are more type-level lists. These are not fundamental problems; <code>generics-sop</code> simply wasn’t designed with the goal to optimize for code size reduction in mind. As we saw in the section on GHC generics, these costs can probably be brought down to <code>O(n log n)</code>, though this will require careful thought.</p>
<h3 id="the-large-records-library">The <code>large-records</code> library</h3>
<p>When you use the <a href="http://hackage.haskell.org/package/large-records"><code>large-records</code></a> library and define</p>
<div class="sourceCode" id="cb36"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb36-1"><a href="https://well-typed.com/blog/rss2.xml#cb36-1"/>largeRecord defaultLazyOptions [d|</span>
<span id="cb36-2"><a href="https://well-typed.com/blog/rss2.xml#cb36-2"/>  data R = MkR {</span>
<span id="cb36-3"><a href="https://well-typed.com/blog/rss2.xml#cb36-3"/>      f00 :: T 00</span>
<span id="cb36-4"><a href="https://well-typed.com/blog/rss2.xml#cb36-4"/>    , f01 :: T 01</span>
<span id="cb36-5"><a href="https://well-typed.com/blog/rss2.xml#cb36-5"/>    , f02 :: T 02</span>
<span id="cb36-6"><a href="https://well-typed.com/blog/rss2.xml#cb36-6"/>    -- .. lots more ..</span>
<span id="cb36-7"><a href="https://well-typed.com/blog/rss2.xml#cb36-7"/>    , f98 :: T 98</span>
<span id="cb36-8"><a href="https://well-typed.com/blog/rss2.xml#cb36-8"/>    , f99 :: T 99</span>
<span id="cb36-9"><a href="https://well-typed.com/blog/rss2.xml#cb36-9"/>    }</span>
<span id="cb36-10"><a href="https://well-typed.com/blog/rss2.xml#cb36-10"/>  |]</span></code></pre></div>
<p>You get the definition of a type <code>R</code> with field accessors, <code>HasField</code> instances for every field, and a <code>Generic</code> instance (albeit for a custom generics library), <em>but</em> the code will be entirely linear—<code>O(n)</code>—in the size of the record. In this section we will see how <code>large-records</code> achieves this for the basic definitions; we will discuss generics separately in the next section.</p>
<h4 id="representation">Representation</h4>
<p>As we saw, the moment that we declare a record, <code>ghc</code> will generate field accessors for each field of the record, resulting in code that is <code>O(n²)</code> in size. It follows that we cannot use the normal representation of the record. Instead, <code>large-records</code> generates the following:</p>
<div class="sourceCode" id="cb37"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb37-1"><a href="https://well-typed.com/blog/rss2.xml#cb37-1"/><span class="kw">newtype</span> <span class="dt">R</span> <span class="ot">=</span> <span class="dt">LR__MkR</span> {<span class="ot"> vectorFromR ::</span> <span class="dt">Vector</span> <span class="dt">Any</span> }</span></code></pre></div>
<p>That is, we are representing the record basically by an untyped vector which will have an entry for every field in the record.<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn2" id="fnref2"><sup>2</sup></a> Of course, typically users will never deal with this untyped representation directly, but use the field accessors or <code>HasField</code> instances, which we will discuss next.</p>
<h4 id="field-accessors">Field accessors</h4>
<p>Along with the definition of <code>R</code>, <code>large-records</code> generates an unsafe function that can return any element of the vector at any type:</p>
<div class="sourceCode" id="cb38"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb38-1"><a href="https://well-typed.com/blog/rss2.xml#cb38-1"/><span class="ot">unsafeGetIndexR ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">R</span> <span class="ot">-&gt;</span> a</span>
<span id="cb38-2"><a href="https://well-typed.com/blog/rss2.xml#cb38-2"/>unsafeGetIndexR n t <span class="ot">=</span> noInlineUnsafeCo <span class="op">$</span> vectorFromR t n</span></code></pre></div>
<p>where <code>noInlineUnsafeCo</code> is a non-inlinable form of <code>unsafeCoerce</code><a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn3" id="fnref3"><sup>3</sup></a>. Just like the internal representation of <code>R</code>, this function is not intended for normal use. Instead, it is used to define field accessors for each field. For example, here is the definition of the accessor <code>f00</code>:</p>
<div class="sourceCode" id="cb39"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb39-1"><a href="https://well-typed.com/blog/rss2.xml#cb39-1"/><span class="ot">f00 ::</span> <span class="dt">R</span> <span class="ot">-&gt;</span> <span class="dt">T</span> <span class="dv">0</span></span>
<span id="cb39-2"><a href="https://well-typed.com/blog/rss2.xml#cb39-2"/>f00 <span class="ot">=</span> unsafeGetIndexR <span class="dv">0</span></span></code></pre></div>
<p>One of these accessors is generated for every field, but the size of each accessor is constant (and tiny), so the generation of all accessors results in code that is <code>O(n)</code> in size.</p>
<h4 id="hasfield-instance"><code>HasField</code> instance</h4>
<p>The <code>HasField</code> instance is very similar. Along with the unsafe accessor, we also define an unsafe update function:</p>
<div class="sourceCode" id="cb40"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb40-1"><a href="https://well-typed.com/blog/rss2.xml#cb40-1"/><span class="ot">unsafeSetIndexR ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">R</span> <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">R</span></span>
<span id="cb40-2"><a href="https://well-typed.com/blog/rss2.xml#cb40-2"/>unsafeSetIndexR n r x <span class="ot">=</span> <span class="dt">LR__MkR</span> <span class="op">$</span></span>
<span id="cb40-3"><a href="https://well-typed.com/blog/rss2.xml#cb40-3"/>    unsafeUpd (vectorFromR r) [(n, noInlineUnsafeCo x)]</span></code></pre></div>
<p>The <code>HasField</code> instance is now easy, and once again constant in size and tiny:</p>
<div class="sourceCode" id="cb41"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb41-1"><a href="https://well-typed.com/blog/rss2.xml#cb41-1"/><span class="kw">instance</span> <span class="dt">HasField</span> <span class="st">&quot;f00&quot;</span> <span class="dt">R</span> (<span class="dt">T</span> <span class="dv">0</span>) <span class="kw">where</span></span>
<span id="cb41-2"><a href="https://well-typed.com/blog/rss2.xml#cb41-2"/>  hasField r <span class="ot">=</span> (unsafeSetIndexR <span class="dv">0</span> r, unsafeGetIndexR <span class="dv">0</span> r)</span></code></pre></div>
<h4 id="pattern-synonym">Pattern synonym</h4>
<p>By default <code>large-records</code> does <em>not</em> generate a pattern synonym for <code>R</code>. It <em>can</em> do, if requested:</p>
<div class="sourceCode" id="cb42"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb42-1"><a href="https://well-typed.com/blog/rss2.xml#cb42-1"/>largeRecord (defaultLazyOptions {generatePatternSynonym <span class="ot">=</span> <span class="dt">True</span>}) [d|</span>
<span id="cb42-2"><a href="https://well-typed.com/blog/rss2.xml#cb42-2"/>  data R = MkR {</span>
<span id="cb42-3"><a href="https://well-typed.com/blog/rss2.xml#cb42-3"/>      f00 :: T 00</span>
<span id="cb42-4"><a href="https://well-typed.com/blog/rss2.xml#cb42-4"/>    , f01 :: T 01</span>
<span id="cb42-5"><a href="https://well-typed.com/blog/rss2.xml#cb42-5"/>    , f02 :: T 02</span>
<span id="cb42-6"><a href="https://well-typed.com/blog/rss2.xml#cb42-6"/>    -- .. lots more ..</span>
<span id="cb42-7"><a href="https://well-typed.com/blog/rss2.xml#cb42-7"/>    , f98 :: T 98</span>
<span id="cb42-8"><a href="https://well-typed.com/blog/rss2.xml#cb42-8"/>    , f99 :: T 99</span>
<span id="cb42-9"><a href="https://well-typed.com/blog/rss2.xml#cb42-9"/>    }</span>
<span id="cb42-10"><a href="https://well-typed.com/blog/rss2.xml#cb42-10"/>  |]</span></code></pre></div>
<p>With the <code>generatePatternSynonym</code> option, <code>large-records</code> generates two new definitions. First, a function that constructs a tuple containing all fields of the record:</p>
<div class="sourceCode" id="cb43"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb43-1"><a href="https://well-typed.com/blog/rss2.xml#cb43-1"/><span class="ot">tupleFromR ::</span> <span class="dt">R</span></span>
<span id="cb43-2"><a href="https://well-typed.com/blog/rss2.xml#cb43-2"/>           <span class="ot">-&gt;</span> ( (<span class="dt">T</span> <span class="dv">00</span>, <span class="dt">T</span> <span class="dv">01</span>, <span class="dt">T</span> <span class="dv">02</span>, <span class="co">{- .. lots more .. -}</span>, <span class="dt">T</span> <span class="dv">60</span>, <span class="dt">T</span> <span class="dv">61</span>)</span>
<span id="cb43-3"><a href="https://well-typed.com/blog/rss2.xml#cb43-3"/>              , (<span class="dt">T</span> <span class="dv">62</span>, <span class="dt">T</span> <span class="dv">63</span>, <span class="dt">T</span> <span class="dv">64</span>, <span class="co">{- .. lots more .. -}</span>, <span class="dt">T</span> <span class="dv">98</span>, <span class="dt">T</span> <span class="dv">99</span>)</span>
<span id="cb43-4"><a href="https://well-typed.com/blog/rss2.xml#cb43-4"/>              )</span>
<span id="cb43-5"><a href="https://well-typed.com/blog/rss2.xml#cb43-5"/>tupleFromR r <span class="ot">=</span> (</span>
<span id="cb43-6"><a href="https://well-typed.com/blog/rss2.xml#cb43-6"/>      unsafeGetIndexR <span class="dv">00</span> r</span>
<span id="cb43-7"><a href="https://well-typed.com/blog/rss2.xml#cb43-7"/>    , unsafeGetIndexR <span class="dv">01</span> r</span>
<span id="cb43-8"><a href="https://well-typed.com/blog/rss2.xml#cb43-8"/>    , unsafeGetIndexR <span class="dv">02</span> r</span>
<span id="cb43-9"><a href="https://well-typed.com/blog/rss2.xml#cb43-9"/>    <span class="co">-- .. lots more ..</span></span>
<span id="cb43-10"><a href="https://well-typed.com/blog/rss2.xml#cb43-10"/>    , unsafeGetIndexR <span class="dv">60</span> r</span>
<span id="cb43-11"><a href="https://well-typed.com/blog/rss2.xml#cb43-11"/>    , unsafeGetIndexR <span class="dv">61</span> r</span>
<span id="cb43-12"><a href="https://well-typed.com/blog/rss2.xml#cb43-12"/>    )</span>
<span id="cb43-13"><a href="https://well-typed.com/blog/rss2.xml#cb43-13"/>  , ( unsafeGetIndexR <span class="dv">62</span> r</span>
<span id="cb43-14"><a href="https://well-typed.com/blog/rss2.xml#cb43-14"/>    , unsafeGetIndexR <span class="dv">63</span> r</span>
<span id="cb43-15"><a href="https://well-typed.com/blog/rss2.xml#cb43-15"/>    , unsafeGetIndexR <span class="dv">64</span> r</span>
<span id="cb43-16"><a href="https://well-typed.com/blog/rss2.xml#cb43-16"/>     <span class="co">-- .. lots more ..</span></span>
<span id="cb43-17"><a href="https://well-typed.com/blog/rss2.xml#cb43-17"/>    , unsafeGetIndexR <span class="dv">98</span> r</span>
<span id="cb43-18"><a href="https://well-typed.com/blog/rss2.xml#cb43-18"/>    , unsafeGetIndexR <span class="dv">99</span> r</span>
<span id="cb43-19"><a href="https://well-typed.com/blog/rss2.xml#cb43-19"/>  ) )</span></code></pre></div>
<p>(It was careful to use a nested tuple, because <code>ghc</code> does not support tuples with more than 62 fields.) It then uses this function as a view pattern in an <a href="https://downloads.haskell.org/ghc/9.0.1/docs/html/users_guide/exts/pattern_synonyms.html">explicitly bidirectional pattern synonym</a>:</p>
<div class="sourceCode" id="cb44"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb44-1"><a href="https://well-typed.com/blog/rss2.xml#cb44-1"/><span class="kw">pattern</span> <span class="dt">MkR</span><span class="ot"> ::</span> <span class="dt">T</span> <span class="dv">0</span> <span class="ot">-&gt;</span> <span class="dt">T</span> <span class="dv">1</span> <span class="ot">-&gt;</span> <span class="dt">T</span> <span class="dv">2</span> <span class="ot">-&gt;</span> <span class="co">{- .. lots more .. -}</span> <span class="ot">-&gt;</span> <span class="dt">T</span> <span class="dv">98</span> <span class="ot">-&gt;</span> <span class="dt">T99</span> <span class="ot">-&gt;</span> <span class="dt">R</span></span>
<span id="cb44-2"><a href="https://well-typed.com/blog/rss2.xml#cb44-2"/><span class="kw">pattern</span> <span class="dt">MkR</span>{f00, f01, f02, <span class="co">{- .. lots more .. -}</span>, f98, f99} <span class="ot">&lt;-</span></span>
<span id="cb44-3"><a href="https://well-typed.com/blog/rss2.xml#cb44-3"/>    tupleFromR <span class="ot">-&gt;</span> ( ( f00, f01, f02, f03, f04, f05, f06, f07, f08, f09</span>
<span id="cb44-4"><a href="https://well-typed.com/blog/rss2.xml#cb44-4"/>                    , f10, f11, f12, f13, f14, f15, f16, f17, f18, f19</span>
<span id="cb44-5"><a href="https://well-typed.com/blog/rss2.xml#cb44-5"/>                    <span class="co">-- .. lots more ..</span></span>
<span id="cb44-6"><a href="https://well-typed.com/blog/rss2.xml#cb44-6"/>                    , f60, f61</span>
<span id="cb44-7"><a href="https://well-typed.com/blog/rss2.xml#cb44-7"/>                    )</span>
<span id="cb44-8"><a href="https://well-typed.com/blog/rss2.xml#cb44-8"/>                  , (           f62, f63, f64, f65, f66, f67, f68, f69</span>
<span id="cb44-9"><a href="https://well-typed.com/blog/rss2.xml#cb44-9"/>                    <span class="co">-- .. lots more ..</span></span>
<span id="cb44-10"><a href="https://well-typed.com/blog/rss2.xml#cb44-10"/>                    , f90, f91, f92, f93, f94, f95, f96, f97, f98, f99</span>
<span id="cb44-11"><a href="https://well-typed.com/blog/rss2.xml#cb44-11"/>                  ) )</span>
<span id="cb44-12"><a href="https://well-typed.com/blog/rss2.xml#cb44-12"/>  <span class="kw">where</span></span>
<span id="cb44-13"><a href="https://well-typed.com/blog/rss2.xml#cb44-13"/>    <span class="dt">MkR</span> x00 x01 x02 <span class="co">{- .. lots more .. -}</span> x98 x99 <span class="ot">=</span> <span class="dt">RFromVector</span> <span class="op">$</span> fromList [</span>
<span id="cb44-14"><a href="https://well-typed.com/blog/rss2.xml#cb44-14"/>          unsafeCoerce x00</span>
<span id="cb44-15"><a href="https://well-typed.com/blog/rss2.xml#cb44-15"/>        , unsafeCoerce x01</span>
<span id="cb44-16"><a href="https://well-typed.com/blog/rss2.xml#cb44-16"/>        , unsafeCoerce x02</span>
<span id="cb44-17"><a href="https://well-typed.com/blog/rss2.xml#cb44-17"/>          <span class="co">-- .. lots more ..</span></span>
<span id="cb44-18"><a href="https://well-typed.com/blog/rss2.xml#cb44-18"/>        , unsafeCoerce x98</span>
<span id="cb44-19"><a href="https://well-typed.com/blog/rss2.xml#cb44-19"/>        , unsafeCoerce x99</span>
<span id="cb44-20"><a href="https://well-typed.com/blog/rss2.xml#cb44-20"/>        ]</span></code></pre></div>
<p>The pattern synonym makes it possible to pattern match on <code>R</code> or construct <code>R</code> values as if it was defined in the normal way. The reason that we don’t generate it by default is an annoying one: when we declare a record pattern synonym, <code>ghc</code> very “helpfully” <a href="https://downloads.haskell.org/ghc/9.0.1/docs/html/users_guide/exts/pattern_synonyms.html#record-pattern-synonyms">generates field accessors</a>, which was precisely what we were trying to avoid.</p>
<p>So the option is there for code bases that need it; when enabled, we reintroduce a quadratic component, albeit a reasonably small one, and the rest of the generated code is still linear. Fortunately, many code bases that deal with large records never actually construct such records directly. They are instead populated from databases or from REST requests; in such cases, the pattern synonym is not required. In addition, <code>large-records</code> provides a quasi-quoter that can be used in lieu of the pattern synonym so that you can write, for example,</p>
<div class="sourceCode" id="cb45"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb45-1"><a href="https://well-typed.com/blog/rss2.xml#cb45-1"/><span class="ot">firstTwo ::</span> <span class="dt">R</span> <span class="ot">-&gt;</span> (<span class="dt">T</span> <span class="dv">0</span>, <span class="dt">T1</span>)</span>
<span id="cb45-2"><a href="https://well-typed.com/blog/rss2.xml#cb45-2"/>firstTwo [lr| MkR { f00 = x0, f01 = x1 } |] <span class="ot">=</span> (x0, x1)</span></code></pre></div>
<p>In <code>ghc- 9.2</code> we have the new <a href="https://downloads.haskell.org/ghc/9.2.1-rc1/docs/html/users_guide/exts/field_selectors.html"><code>NoFieldSelectors</code> language pragma</a> (<a href="https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0160-no-toplevel-field-selectors.rst">ghc proposal</a>, <a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/4743">merge request</a>) which might improve the situation here, but I haven’t experimented with that yet.</p>
<h3 id="generics">Generics</h3>
<p>The <code>large-records</code> library comes with its own <code>Generic</code> class. Although the class and its instances are defined rather differently, <em>usage</em> of the class—that is, the way you’d write generic functions—is very similar in style to <code>generics-sop</code>. The class is defined as</p>
<div class="sourceCode" id="cb46"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb46-1"><a href="https://well-typed.com/blog/rss2.xml#cb46-1"/><span class="kw">class</span> <span class="dt">Generic</span> a <span class="kw">where</span></span>
<span id="cb46-2"><a href="https://well-typed.com/blog/rss2.xml#cb46-2"/>  <span class="co">-- Translation</span></span>
<span id="cb46-3"><a href="https://well-typed.com/blog/rss2.xml#cb46-3"/><span class="ot">  from ::</span> a <span class="ot">-&gt;</span> <span class="dt">Rep</span> <span class="dt">I</span> a</span>
<span id="cb46-4"><a href="https://well-typed.com/blog/rss2.xml#cb46-4"/><span class="ot">  to   ::</span> <span class="dt">Rep</span> <span class="dt">I</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb46-5"><a href="https://well-typed.com/blog/rss2.xml#cb46-5"/></span>
<span id="cb46-6"><a href="https://well-typed.com/blog/rss2.xml#cb46-6"/>  <span class="co">-- Constraints</span></span>
<span id="cb46-7"><a href="https://well-typed.com/blog/rss2.xml#cb46-7"/>  <span class="kw">type</span> <span class="dt">Constraints</span><span class="ot"> a ::</span> (<span class="dt">Type</span> <span class="ot">-&gt;</span> <span class="dt">Constraint</span>) <span class="ot">-&gt;</span> <span class="dt">Constraint</span></span>
<span id="cb46-8"><a href="https://well-typed.com/blog/rss2.xml#cb46-8"/><span class="ot">  dict ::</span> <span class="dt">Constraints</span> a c <span class="ot">=&gt;</span> <span class="dt">Proxy</span> c <span class="ot">-&gt;</span> <span class="dt">Rep</span> (<span class="dt">Dict</span> c) a</span>
<span id="cb46-9"><a href="https://well-typed.com/blog/rss2.xml#cb46-9"/></span>
<span id="cb46-10"><a href="https://well-typed.com/blog/rss2.xml#cb46-10"/>  <span class="co">-- Metadata</span></span>
<span id="cb46-11"><a href="https://well-typed.com/blog/rss2.xml#cb46-11"/><span class="ot">  metadata ::</span> <span class="dt">Proxy</span> a <span class="ot">-&gt;</span> <span class="dt">Metadata</span> a</span></code></pre></div>
<p>We will discuss the various parts of this class separately, and finish with an example of a generic function that ties all this together.</p>
<h4 id="translation-to-and-from-the-generic-representation">Translation to and from the generic representation</h4>
<p>The generic representation used by <code>large-records</code> is</p>
<div class="sourceCode" id="cb47"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb47-1"><a href="https://well-typed.com/blog/rss2.xml#cb47-1"/><span class="kw">newtype</span> <span class="dt">Rep</span> f a <span class="ot">=</span> <span class="dt">Rep</span> (<span class="dt">Vector</span> (f <span class="dt">Any</span>))</span></code></pre></div>
<p>In other words, if we pick the identity functor for <code>f</code>, then <code>Rep f a</code> is just <code>Vector Any</code>; this means that <code>from</code> and <code>to</code> can just be <code>coerce</code>:<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn4" id="fnref4"><sup>4</sup></a></p>
<div class="sourceCode" id="cb48"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb48-1"><a href="https://well-typed.com/blog/rss2.xml#cb48-1"/><span class="kw">instance</span> <span class="dt">Generic</span> <span class="dt">R</span> <span class="kw">where</span></span>
<span id="cb48-2"><a href="https://well-typed.com/blog/rss2.xml#cb48-2"/>  from <span class="ot">=</span> coerce</span>
<span id="cb48-3"><a href="https://well-typed.com/blog/rss2.xml#cb48-3"/>  to   <span class="ot">=</span> coerce</span>
<span id="cb48-4"><a href="https://well-typed.com/blog/rss2.xml#cb48-4"/>  <span class="co">-- .. more ..</span></span></code></pre></div>
<h4 id="constraints">Constraints</h4>
<p>The <code>Constraints</code> type family is meant to capture the concept of “a constraint applied to all fields in the record”. We encountered this idea above in the section “Type class dictionaries”, where we noticed we have to be careful. Here is how <code>large-records</code> instantiates <code>Constraints</code> for our running example:</p>
<div class="sourceCode" id="cb49"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb49-1"><a href="https://well-typed.com/blog/rss2.xml#cb49-1"/><span class="kw">class</span> <span class="dt">Constraints_R</span> c <span class="kw">where</span></span>
<span id="cb49-2"><a href="https://well-typed.com/blog/rss2.xml#cb49-2"/><span class="ot">  dictConstraints_R ::</span> <span class="dt">Proxy</span> c <span class="ot">-&gt;</span> <span class="dt">Rep</span> (<span class="dt">Dict</span> c) <span class="dt">R</span></span>
<span id="cb49-3"><a href="https://well-typed.com/blog/rss2.xml#cb49-3"/></span>
<span id="cb49-4"><a href="https://well-typed.com/blog/rss2.xml#cb49-4"/><span class="kw">instance</span> <span class="dt">Generic</span> <span class="dt">R</span> <span class="kw">where</span></span>
<span id="cb49-5"><a href="https://well-typed.com/blog/rss2.xml#cb49-5"/>  <span class="kw">type</span> <span class="dt">Constraints</span> <span class="dt">R</span> <span class="ot">=</span> <span class="dt">Constraints_R</span></span>
<span id="cb49-6"><a href="https://well-typed.com/blog/rss2.xml#cb49-6"/>  dict <span class="ot">=</span> dictConstraints_R</span>
<span id="cb49-7"><a href="https://well-typed.com/blog/rss2.xml#cb49-7"/>  <span class="co">-- .. more ..</span></span></code></pre></div>
<p><code>Constraints_R</code> does <em>not</em> have any superclass constraints, thus avoiding the quadratic cost of all the dictionary projections. Instead, it is constructing a <em>vector of dictionaries</em>. Essentially, we are constructing <em>our own representation of a dictionary</em>, just like we constructed our own representation for a record. Unlike the GHC representation of dictionaries, we can project from our representation by just doing a vector index.</p>
<p>Fortunately, we <em>can</em> give an <em>instance</em> for <code>Constraints_R</code>:</p>
<div class="sourceCode" id="cb50"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb50-1"><a href="https://well-typed.com/blog/rss2.xml#cb50-1"/><span class="kw">instance</span> ( c (<span class="dt">T</span> <span class="dv">0</span>)</span>
<span id="cb50-2"><a href="https://well-typed.com/blog/rss2.xml#cb50-2"/>         , c (<span class="dt">T</span> <span class="dv">1</span>)</span>
<span id="cb50-3"><a href="https://well-typed.com/blog/rss2.xml#cb50-3"/>         , c (<span class="dt">T</span> <span class="dv">2</span>)</span>
<span id="cb50-4"><a href="https://well-typed.com/blog/rss2.xml#cb50-4"/>          <span class="co">-- .. lots more ..</span></span>
<span id="cb50-5"><a href="https://well-typed.com/blog/rss2.xml#cb50-5"/>         , c (<span class="dt">T</span> <span class="dv">98</span>)</span>
<span id="cb50-6"><a href="https://well-typed.com/blog/rss2.xml#cb50-6"/>         , c (<span class="dt">T</span> <span class="dv">99</span>)</span>
<span id="cb50-7"><a href="https://well-typed.com/blog/rss2.xml#cb50-7"/>         ) <span class="ot">=&gt;</span> <span class="dt">Constraints_R</span> c <span class="kw">where</span></span>
<span id="cb50-8"><a href="https://well-typed.com/blog/rss2.xml#cb50-8"/>  dictConstraints_R p <span class="ot">=</span> <span class="dt">Rep</span> <span class="op">$</span> fromList [</span>
<span id="cb50-9"><a href="https://well-typed.com/blog/rss2.xml#cb50-9"/>        unsafeCoerce (dictFor p) (<span class="dt">Proxy</span> <span class="op">@</span>(<span class="dt">T</span> <span class="dv">0</span>))</span>
<span id="cb50-10"><a href="https://well-typed.com/blog/rss2.xml#cb50-10"/>      , unsafeCoerce (dictFor p) (<span class="dt">Proxy</span> <span class="op">@</span>(<span class="dt">T</span> <span class="dv">1</span>))</span>
<span id="cb50-11"><a href="https://well-typed.com/blog/rss2.xml#cb50-11"/>      , unsafeCoerce (dictFor p) (<span class="dt">Proxy</span> <span class="op">@</span>(<span class="dt">T</span> <span class="dv">2</span>))</span>
<span id="cb50-12"><a href="https://well-typed.com/blog/rss2.xml#cb50-12"/>      <span class="co">-- .. lots more ..</span></span>
<span id="cb50-13"><a href="https://well-typed.com/blog/rss2.xml#cb50-13"/>      , unsafeCoerce (dictFor p) (<span class="dt">Proxy</span> <span class="op">@</span>(<span class="dt">T</span> <span class="dv">98</span>))</span>
<span id="cb50-14"><a href="https://well-typed.com/blog/rss2.xml#cb50-14"/>      , unsafeCoerce (dictFor p) (<span class="dt">Proxy</span> <span class="op">@</span>(<span class="dt">T</span> <span class="dv">99</span>))</span>
<span id="cb50-15"><a href="https://well-typed.com/blog/rss2.xml#cb50-15"/>      ]</span></code></pre></div>
<p>In core, this results in a <em>single</em> function with 100 arguments, that constructs our custom dictionary representation. This function is reasonably large (3523 terms/types/coercions), but not excessively so, and moreover, it is <code>O(n)</code> in the number of record fields.</p>
<h4 id="metadata">Metadata</h4>
<p>The <code>Metadata</code> provided by <code>large-records</code> is currently fairly minimal; it tells us the names of the record, its constructor, and the fields, as well as the strictness of each field:</p>
<div class="sourceCode" id="cb51"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb51-1"><a href="https://well-typed.com/blog/rss2.xml#cb51-1"/><span class="kw">data</span> <span class="dt">Metadata</span> a <span class="ot">=</span> <span class="dt">Metadata</span> {</span>
<span id="cb51-2"><a href="https://well-typed.com/blog/rss2.xml#cb51-2"/><span class="ot">      recordName          ::</span> <span class="dt">String</span></span>
<span id="cb51-3"><a href="https://well-typed.com/blog/rss2.xml#cb51-3"/>    ,<span class="ot"> recordConstructor   ::</span> <span class="dt">String</span></span>
<span id="cb51-4"><a href="https://well-typed.com/blog/rss2.xml#cb51-4"/>    ,<span class="ot"> recordSize          ::</span> <span class="dt">Int</span></span>
<span id="cb51-5"><a href="https://well-typed.com/blog/rss2.xml#cb51-5"/>    ,<span class="ot"> recordFieldMetadata ::</span> <span class="dt">Rep</span> <span class="dt">FieldMetadata</span> a</span>
<span id="cb51-6"><a href="https://well-typed.com/blog/rss2.xml#cb51-6"/>    }</span>
<span id="cb51-7"><a href="https://well-typed.com/blog/rss2.xml#cb51-7"/></span>
<span id="cb51-8"><a href="https://well-typed.com/blog/rss2.xml#cb51-8"/><span class="kw">data</span> <span class="dt">FieldStrictness</span> <span class="ot">=</span> <span class="dt">FieldStrict</span> <span class="op">|</span> <span class="dt">FieldLazy</span></span>
<span id="cb51-9"><a href="https://well-typed.com/blog/rss2.xml#cb51-9"/></span>
<span id="cb51-10"><a href="https://well-typed.com/blog/rss2.xml#cb51-10"/><span class="kw">data</span> <span class="dt">FieldMetadata</span> x <span class="kw">where</span></span>
<span id="cb51-11"><a href="https://well-typed.com/blog/rss2.xml#cb51-11"/>  <span class="dt">FieldMetadata</span> <span class="ot">::</span></span>
<span id="cb51-12"><a href="https://well-typed.com/blog/rss2.xml#cb51-12"/>       <span class="dt">KnownSymbol</span> name</span>
<span id="cb51-13"><a href="https://well-typed.com/blog/rss2.xml#cb51-13"/>    <span class="ot">=&gt;</span> <span class="dt">Proxy</span> name</span>
<span id="cb51-14"><a href="https://well-typed.com/blog/rss2.xml#cb51-14"/>    <span class="ot">-&gt;</span> <span class="dt">FieldStrictness</span></span>
<span id="cb51-15"><a href="https://well-typed.com/blog/rss2.xml#cb51-15"/>    <span class="ot">-&gt;</span> <span class="dt">FieldMetadata</span> x</span></code></pre></div>
<p>Metadata is generated automatically by the <code>largeRecord</code> invocation.</p>
<p>Note that the name of each field is at the type level; this is primarily to help with <a href="https://hackage.haskell.org/package/large-records/docs/Data-Record-Generic-GHC.html">integration with GHC generics</a>. This is essential for the integration of <code>large-records</code> with other libraries, but a detailed discussion of this is outside the scope of this blog post.</p>
<h4 id="writing-generic-functions">Writing generic functions</h4>
<p>An in-depth discussion on how to write generic functions in the style of <code>generics-sop</code> is beyond the scope of this blog post; interested readers may wish to refer to the <a href="http://edsko.net/pubs/TrueSumsOfProducts.pdf">True Sums of Products</a> paper or watch Andres Löh’s <a href="https://www.youtube.com/watch?v=sQxH349HOik"><code>generics-sop</code> tutorial at ZuriHac 2016</a> or read his <a href="https://github.com/kosmikus/SSGEP">SSGEP summer school lecture notes</a>. Here we will discuss one (typical) example only.</p>
<p>Generic functions in <code>generics-sop</code> style are written using a set of combinators on the generic representation. As a simple example, we can <em>zip</em> two <code>Rep</code>s:</p>
<div class="sourceCode" id="cb52"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb52-1"><a href="https://well-typed.com/blog/rss2.xml#cb52-1"/><span class="fu">zipWith</span><span class="ot"> ::</span> (<span class="kw">forall</span> x<span class="op">.</span> f x <span class="ot">-&gt;</span> g x <span class="ot">-&gt;</span> h x)</span>
<span id="cb52-2"><a href="https://well-typed.com/blog/rss2.xml#cb52-2"/>        <span class="ot">-&gt;</span> <span class="dt">Rep</span> f a <span class="ot">-&gt;</span> <span class="dt">Rep</span> g a <span class="ot">-&gt;</span> <span class="dt">Rep</span> h a</span></code></pre></div>
<p>It is worth spelling out what this function is doing: it is zipping together all the fields of two records, albeit in their generic representation (<code>Rep</code>). We therefore require that the function we’re zipping with is polymorphic: we must be able to zip fields no matter their type.</p>
<p>As another example, we can <em>map</em> a function over all fields in the record; there is a function <code>map</code>, as you’d expect:</p>
<div class="sourceCode" id="cb53"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb53-1"><a href="https://well-typed.com/blog/rss2.xml#cb53-1"/><span class="fu">map</span><span class="ot"> ::</span> (<span class="kw">forall</span> x<span class="op">.</span> f x <span class="ot">-&gt;</span> g x) <span class="ot">-&gt;</span> <span class="dt">Rep</span> f a <span class="ot">-&gt;</span> <span class="dt">Rep</span> g a</span></code></pre></div>
<p>but there is also a slightly more useful version of this:</p>
<div class="sourceCode" id="cb54"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb54-1"><a href="https://well-typed.com/blog/rss2.xml#cb54-1"/><span class="ot">cmap ::</span> (<span class="dt">Generic</span> a, <span class="dt">Constraints</span> a c)</span>
<span id="cb54-2"><a href="https://well-typed.com/blog/rss2.xml#cb54-2"/>     <span class="ot">=&gt;</span> <span class="dt">Proxy</span> c</span>
<span id="cb54-3"><a href="https://well-typed.com/blog/rss2.xml#cb54-3"/>     <span class="ot">-&gt;</span> (<span class="kw">forall</span> x<span class="op">.</span> c x <span class="ot">=&gt;</span> f x <span class="ot">-&gt;</span> g x)</span>
<span id="cb54-4"><a href="https://well-typed.com/blog/rss2.xml#cb54-4"/>     <span class="ot">-&gt;</span> <span class="dt">Rep</span> f a <span class="ot">-&gt;</span> <span class="dt">Rep</span> g a</span></code></pre></div>
<p>This <em>constrained map</em> still requires the function we’re applying to all fields to be polymorphic, <em>but</em> it is given the guarantee that the types it is applied to all satisfy constraint <code>c</code>. Of course, in order to be able to do that, we need constraint <code>c</code> to hold for all fields, which is why this function requires <code>Constraints a c</code>. There is a similar generalization of <code>zipWith</code> called <code>czipWith</code>, as well as applicative versions of both of these functions.</p>
<p>The final combinator we will discuss applies when we have a vector in which every element has the <em>same</em> type: in this case, we can <em>collapse</em> the vector to an ordinary list:</p>
<div class="sourceCode" id="cb55"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb55-1"><a href="https://well-typed.com/blog/rss2.xml#cb55-1"/><span class="ot">collapse ::</span> <span class="dt">Rep</span> (<span class="dt">K</span> a) b <span class="ot">-&gt;</span> [a]</span></code></pre></div>
<p>Here is an example of a generic function that can translate any value to JSON, provided it has a <code>Generic</code> instance and provided we have <code>ToJSON</code> instances for all fields:</p>
<div class="sourceCode" id="cb56"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb56-1"><a href="https://well-typed.com/blog/rss2.xml#cb56-1"/><span class="ot">gtoJSON ::</span> <span class="kw">forall</span> a<span class="op">.</span> (<span class="dt">Generic</span> a, <span class="dt">Constraints</span> a <span class="dt">ToJSON</span>) <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Value</span></span>
<span id="cb56-2"><a href="https://well-typed.com/blog/rss2.xml#cb56-2"/>gtoJSON <span class="ot">=</span></span>
<span id="cb56-3"><a href="https://well-typed.com/blog/rss2.xml#cb56-3"/>      Aeson.object</span>
<span id="cb56-4"><a href="https://well-typed.com/blog/rss2.xml#cb56-4"/>    <span class="op">.</span> Rep.collapse</span>
<span id="cb56-5"><a href="https://well-typed.com/blog/rss2.xml#cb56-5"/>    <span class="op">.</span> Rep.zipWith (mapKKK <span class="op">$</span> \n x <span class="ot">-&gt;</span> (Text.pack n, x)) recordFieldNames</span>
<span id="cb56-6"><a href="https://well-typed.com/blog/rss2.xml#cb56-6"/>    <span class="op">.</span> Rep.cmap (<span class="dt">Proxy</span> <span class="op">@</span><span class="dt">ToJSON</span>) (<span class="dt">K</span> <span class="op">.</span> toJSON <span class="op">.</span> unI)</span>
<span id="cb56-7"><a href="https://well-typed.com/blog/rss2.xml#cb56-7"/>    <span class="op">.</span> from</span>
<span id="cb56-8"><a href="https://well-typed.com/blog/rss2.xml#cb56-8"/>  <span class="kw">where</span></span>
<span id="cb56-9"><a href="https://well-typed.com/blog/rss2.xml#cb56-9"/>    <span class="dt">Metadata</span>{<span class="op">..</span>} <span class="ot">=</span> metadata (<span class="dt">Proxy</span> <span class="op">@</span>a)</span></code></pre></div>
<p>If you are new to <code>generics-sop</code> style programming, this function may require careful reading, but the essence of it is simple:</p>
<ol type="1">
<li>Translate the value to its generic representation using <code>from</code></li>
<li>Apply <code>toJSON</code> to all fields</li>
<li>Zip it with the metadata to get a vector of <code>(name, value)</code> pairs</li>
<li>Collapse that vector to a list</li>
<li>Use Aeson’s standard <a href="https://hackage.haskell.org/package/aeson/docs/Data-Aeson.html#v:object"><code>object</code></a> function to create the JSON object.</li>
</ol>
<p>Once you are used to the paradigm, <code>generics-sop</code> style programming allows for the very succinct definition of generic functions (I’d go so far as calling it “elegant”, but then I am biased). Typically a function like <code>gtoJSON</code> would be used to derive a <code>ToJSON</code> instance:</p>
<div class="sourceCode" id="cb57"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb57-1"><a href="https://well-typed.com/blog/rss2.xml#cb57-1"/><span class="kw">instance</span> <span class="dt">ToJSON</span> <span class="dt">R</span> <span class="kw">where</span></span>
<span id="cb57-2"><a href="https://well-typed.com/blog/rss2.xml#cb57-2"/>  toJSON <span class="ot">=</span> gtoJSON</span></code></pre></div>
<p>Indeed, the <code>large-records</code> library can generate such instances automatically for a handful of classes.</p>
<h4 id="transforms">Transforms</h4>
<p>The only aspect of the generics programming aspect of <code>large-records</code> we have not covered here is what is known as <a href="https://hackage.haskell.org/package/sop-core-0.5.0.1/docs/Data-SOP.html#t:HTrans">“transforms”</a> in <code>generics-sop</code> style programming. Transforms allow you to generically modify type indices; for example, suppose we have a HKD-style definition of a table, as used in the <a href="https://haskell-beam.github.io/beam/"><code>beam</code> database library</a>:</p>
<div class="sourceCode" id="cb58"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb58-1"><a href="https://well-typed.com/blog/rss2.xml#cb58-1"/><span class="kw">data</span> <span class="dt">Table</span> f <span class="ot">=</span> <span class="dt">MkTable</span> {</span>
<span id="cb58-2"><a href="https://well-typed.com/blog/rss2.xml#cb58-2"/><span class="ot">      tableField1 ::</span> f <span class="dt">Int</span></span>
<span id="cb58-3"><a href="https://well-typed.com/blog/rss2.xml#cb58-3"/>    ,<span class="ot"> tableField2 ::</span> f <span class="dt">Maybe</span></span>
<span id="cb58-4"><a href="https://well-typed.com/blog/rss2.xml#cb58-4"/>    }</span></code></pre></div>
<p>We could write a generic function that could, say, turn a <code>Table Identity</code> into a <code>Table Maybe</code>. Doing this without using type-level lists anywhere is surprisingly difficult, and a discussion of how this is done in <code>large-records</code> is probably a good topic for a separate blog post. For now we just refer any interested readers to the <a href="https://github.com/well-typed/large-records/blob/main/test/Test/Record/Sanity/Transform.hs">examples in the test suite</a>.</p>
<p>Talking of <code>beam</code>, <code>large-records</code> integrates smoothly with <a href="https://hackage.haskell.org/package/beam-core"><code>beam-core</code></a> by means of an auxiliary library <a href="https://github.com/well-typed/beam-large-records"><code>beam-large-records</code></a>. This library is <a href="https://github.com/well-typed/beam-large-records">on GitHub</a> but is not available on Hackage yet because it depends on a <a href="https://github.com/haskell-beam/beam/pull/585">small patch to <code>beam</code></a>. Hopefully it will be released soon.</p>
<h3 id="benchmarks">Benchmarks</h3>
<p>For the purpose of these benchmarks, we are interested in <em>compile-time</em>, not run-time performance. I have not yet done any benchmarks of run-time performance. There might be some run-time benefits compared to other generics approaches because there is no conversion to and from a generic representation, but there are probably some performance penalties for normal functions because the record representation used internally in <code>large-records</code> is much less transparent to the GHC optimizer. Measuring this is future work.</p>
<p>In terms of compile time performance, however, the results are pretty clear. Here is a graph of the size of the core AST of the module (the sum of the terms, types and coercions in the module) plotted against the number of record fields, after desugaring:</p>
<p><img src="https://well-typed.com/blog/aux/images/large-records/desugar.png"></p>
<p>As you can see, for vanilla <code>ghc</code> the size grows quadratically to nearly 450,000 nodes, but stays nice and flat for <code>large-records</code>. The GHC simplifier reduces the size of the AST a bit in the case of vanilla <code>ghc</code> and <em>increases</em> it a bit for <code>large-records</code>, but <code>large-records</code> is still the clear winner:</p>
<p><img src="https://well-typed.com/blog/aux/images/large-records/simplifier.png"></p>
<p>In terms of “real” performance measurements, here is a plot of <code>ghc</code> memory usage as reported by the OS (in kB), against the number of record fields:</p>
<p><img src="https://well-typed.com/blog/aux/images/large-records/memory.png"></p>
<p>As you can see, <code>ghc</code> climbs to roughly 500 MB for 100 fields, whereas <code>large-records</code> stays near the 100 MB mark. There is a similar graph for compilation time (in terms of elapsed wall-clock time in seconds):</p>
<p><img src="https://well-typed.com/blog/aux/images/large-records/time.png"></p>
<p>For vanilla <code>ghc</code> compilation takes roughly 3 seconds for 100 fields, whereas <code>large-records</code> is 3x times faster and stays under one second.</p>
<p>(These numbers have been normalized against compiling an empty module. The error bars here indicate standard error; each module has been compiled 100 times.)</p>
<h3 id="conclusions">Conclusions</h3>
<p>The <code>large-records</code> library generates code that is strictly <code>O(n)</code> in size in the number of record fields. It does so at the cost of generating basically untyped <code>core</code>. This does not matter for code <em>using</em> <code>large-records</code>, which is still presented with a perfectly safe, typed interface. It might however reduce the applicability of the techniques employed by <code>large-records</code> more generally within <code>ghc</code>: the <a href="https://www.microsoft.com/en-us/research/wp-content/uploads/2016/07/history.pdf">History of Haskell</a> paper (Section 9.1) emphasizes the importance of having a typed internal <code>ghc</code> language to catch and help debug compiler bugs.</p>
<p>Perhaps aiming for linear cost however is not necessary. We saw in the section on GHC generics that if we are careful how we set things up, we can generate code that is <code>O(n log n)</code> in size. Similar techniques can be applied in libraries such as <code>generics-sop</code> as well, provided that we are careful at every step; for example, the use of type-level <em>lists</em> should be avoided and we should be using type-level (balanced) <em>trees</em> instead.</p>
<p>In order to tackle the problem at a more fundamental level, we might need to be able to introduce and control sharing at the type level; Richard Eisenberg opened <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/20264">ghc ticket #20264</a> after my HIW talk on <code>large-records</code> with some thoughts on the topic. As a completely alternative approach, the work on <a href="https://www.microsoft.com/en-us/research/publication/scrap-your-type-applications/">Scrap your type applications</a> removes type arguments altogether. This may well address many of the concerns in this blog post, but it’s such a radically different internal language that it’s hard to foresee quite all the consequences.</p>
<p>Addressing the overabundance with types is however only one aspect of the problem, albeit an important one. Specifically, it does not prevent record pattern matches and record updates (either on term level records or on type class dictionaries) in <code>core</code> always being linear in the size of the record. Perhaps an extension to <code>core</code> could alleviate this problem, though changes to <code>core</code> affect to the entire compiler backend and so are rightly treated with extreme prejudice.</p>
<p>When such problems are addressed in <code>ghc</code>, a library like <code>large-records</code> may no longer be required. Until such time, however, the <code>large-records</code> library can be used to significantly reduce compile time and memory requirements for code bases that contain many large records.</p>
<section class="footnotes">
<hr></hr>
<ol>
<li id="fn1"><p>Compilation time and memory usage normalised to an empty module.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref1">↩︎</a></p></li>
<li id="fn2"><p>We will not discuss it in this blog post, but the library currently has support for records where <em>all</em> fields are strict and records where <em>all</em> fields are lazy. It would not be too difficult to extend it to records where some fields are lazy and some are strict. It does not currently support <code>UNPACK</code> pragmas; adding support for that would be more difficult, we would need to add an unboxed vector for each type of unpacked field.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref2">↩︎</a></p></li>
<li id="fn3"><p>This is to avoid a segfault with <code>ghc</code> prior to version 9.0. See <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/16893">GHC ticket #16893</a>.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref3">↩︎</a></p></li>
<li id="fn4"><p>The actual code generated uses an indirection through another function to deal with strictness: if the record has strict fields, then those fields are forced in the <code>to</code> translation.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref4">↩︎</a></p></li>
</ol>
</section></div>
    </content>
    <updated>2021-08-20T00:00:00Z</updated>
    <published>2021-08-20T00:00:00Z</published>
    <category term="coding"/>
    <category term="performance"/>
    <category term="open-source"/>
    <category term="records"/>
    <author>
      <name>edsko</name>
    </author>
    <source>
      <id>https://well-typed.com/blog/</id>
      <logo>https://well-typed.com/img/wtnlogoplain.svg</logo>
      <link href="https://well-typed.com/blog/rss2.xml" rel="self" type="application/rss+xml">
      <link href="https://well-typed.com/blog/" rel="alternate" type="text/html">
      <subtitle>Because Well-Typed Programs Don't Go Wrong</subtitle>
      <title>Well-Typed Blog</title>
      <updated>2021-08-23T00:00:00Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://medium.com/p/a1b42ad36923</id>
    <link href="https://itnext.io/abstraction-in-reflex-and-codeworld-a1b42ad36923?source=rss-18bd5acaea78------2" rel="alternate" type="text/html">
    <title>Abstraction in Reflex and CodeWorld</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I’ve put together a neat example lately of using FRP (<a href="https://en.wikipedia.org/wiki/Functional_reactive_programming">Functional Reactive Programming</a>) to cleanly separate and model the interactions of the pieces of an interactive application: in this case, an RPN (<a href="https://en.wikipedia.org/wiki/Reverse_Polish_notation">Reverse Polish Notation</a>) calculator. In this article, I present the Haskell code for this application using the <a href="https://reflex-frp.org/">Reflex FRP library</a> and the <a href="https://code.world/haskell">CodeWorld</a> graphics API.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/290/1*sin_TIYlye-kx02I_CjAmQ.jpeg"><figcaption>An RPN Calculator</figcaption></figure><p>Because CodeWorld is a relatively low-level graphics API, we’ll be reinventing abstractions like numeric entry fields. Don’t think that’s a fundamental part of FRP! Indeed, libraries like reflex-dom provide you all the power of traditional high-level component libraries using the same FRP. But I think starting from the ground up is a nice learning experience; we can see how to work up from very simple primitives to build higher-level components, and you can apply the same abstraction techniques to build application-specific abstractions in your own code.</p><p>The calculator we’ll obtain at the end of the series is at this link:</p><p><a href="https://code.world/haskell#PP_y0l9mQepdeIvwDXWfNOQ">CodeWorld</a></p><p>It definitely has some deficiencies:</p><ul><li>Rendering of very precise numbers is lacking.</li><li>You cannot enter negative numbers.</li><li>Lots of important operations are missing.</li></ul><p>Consider these exercises for the interested reader. I’ve only implemented enough to make the abstraction techniques clear, and never intended for this to be a production quality calculator!</p><h4>Basic Definitions</h4><p>If you’re not familiar with FRP, the idea is to model the interactive parts of your software in terms of two abstractions: <em>events</em> and <em>behaviors</em>. An <em>event</em> is a thing that occurs at discrete moments in time, such as a key press or a mouse click. (If you’re used to conventional GUI programming, beware: in FRP, an event is not a single <em>occurrence</em> of the thing, but rather the <em>entire</em> thing which can occur many times.) A <em>behavior</em> is a value that changes over time, such as a mouse position. (Again, a behavior isn’t a value at a <em>specific</em> time, but rather the <em>entire</em> concept of something like a mouse position that changes over time.)</p><p>Reflex adds a third abstraction that’s a sort of hybrid between the two. A <em>dynamic</em> value is a value that changes only at discrete points in time. Because it does change over time, its current value forms a <em>behavior</em>. But because it changes at discrete points in time, its updates form an <em>event</em>.</p><h4>Starting with Buttons</h4><p>One thing we’ll need for a calculator that CodeWorld doesn’t provide for us is buttons! On the one hand, buttons are pretty simple things: you click on them and they do something. However, as we’ll see, getting an intuitive and user-friendly button experience is non-trivial and worth abstracting over!</p><p>Here’s a Reflex program using CodeWorld to create a simple (not very user-friendly) button.</p><p><a href="https://code.world/haskell#Px5T48q9KCouvmkmmyGNHig">CodeWorld</a></p><p>The source code is:</p><pre>{-# LANGUAGE OverloadedStrings #-}</pre><pre>import CodeWorld.Reflex<br>import Control.Monad.IO.Class<br>import Data.Functor (($&gt;))<br>import Data.Text (Text)<br>import Reflex</pre><pre>button :: ReflexCodeWorld t m =&gt; Text -&gt; m (Event t ())<br>button label =<br>  do<br>    draw (pure (rectangle 5 2 &lt;&gt; lettering label))<br>    clicks &lt;- getPointerClick<br>    return (ffilter inButton clicks $&gt; ())<br>  where<br>    inButton (x, y) = abs x &lt; 2.5 &amp;&amp; abs y &lt; 1</pre><pre>foreign import javascript &quot;window.alert('clicked!');&quot;<br>  notify :: IO ()</pre><pre>app :: ReflexCodeWorld t m =&gt; m ()<br>app = do<br>  clicks &lt;- button &quot;Click me!&quot;<br>  performEvent (clicks $&gt; liftIO notify)<br>  return ()</pre><pre>main :: IO ()<br>main = reflexOf app</pre><p>If you’ve made it this far, you’re probably familiar with OverloadedStrings, which just let us write string literals for Text values in Haskell. The rest of this I’ll explain now.</p><p>First of all, the type of <em>button</em> says that you must provide a label, and you get back an <em>event</em>, whose occurrences are button clicks. ReflexCodeWorld is just a class that encapsulates all of the constraints needed to write Reflex programs that interact with CodeWorld. Any time you need access to fundamental drawing and event handling things using CodeWorld types, you need this class. Buttons draw to the screen and listen for mouse clicks, so the class is needed here.</p><p>The implementation of <em>button</em> draws the button on the screen by using a function called <em>draw</em>. If you look up the type for <em>draw</em>, it’s ReflexCodeWorld t m =&gt; Dynamic t Picture -&gt; m (). The <em>dynamic</em> picture means you can draw a picture that changes over time. But in this case, our button doesn’t change, so we use <em>pure</em> to draw a constant picture of a rectangle and lettering. The next task is to determine when the button has been clicked. We use <em>getPointerClick</em> to retrieve an event that tells us when the mouse has been clicked, and then filter only those clicks that occur within the bounds of the button (using <em>ffilter</em>), and replace the points in the pointer event with () (using the $&gt; Functor operator) because clients don’t care which specific pixel was clicked.</p><p>At this point, you may start to wonder where all these combinators are coming from. The ones that relate directly to drawing and UI events come from the CodeWorld.Reflex module, the documentation for which can be found at <a href="https://hackage.haskell.org/package/codeworld-api-0.6.0/docs/CodeWorld-Reflex.html">https://hackage.haskell.org/package/codeworld-api-0.6.0/docs/CodeWorld-Reflex.html</a> or by clicking the Guide button from the CodeWorld tab. The general combinators for events and behaviors come from Reflex, and a good reference is the <a href="https://github.com/reflex-frp/reflex/blob/develop/Quickref.md">Reflex Quick Reference</a>. Keep in mind that there are instances as well: Event, Behavior, and Dynamic are all functors, and Behavior and Dynamic are applicative functors and monads as well. (Note that the monad instance for Dynamic can be expensive, so avoid it if possible!)</p><p>This completes the generic implementation of buttons. Next I use the JavaScript FFI to define a simple action so we can tell when the button event fires, and use <em>performEvent</em> (another Reflex combinator) to attach that IO action to the event returned from <em>button</em>. To put it all together, <em>reflexOf</em> is a CodeWorld function that runs a ReflexCodeWorld network in the CodeWorld environment.</p><h4>Building a Better Button</h4><p>This button worked, but it was ugly and limited. It’s always the same size and location, doesn’t react to the user pressing it at all, and generally doesn’t behave as users are accustomed to buttons behaving in modern user interfaces. We can do better!</p><p>First, to make the size and location configurable, we should define a type for button configuration properties, and bundle all these options together. That looks like this:</p><pre>data ButtonConfig = ButtonConfig<br>  { buttonLocation :: Point,<br>    buttonWidth :: Double,<br>    buttonHeight :: Double,<br>    buttonText :: Text<br>  }</pre><p>It’s a trivial exercise to rewrite <em>button</em> to take a ButtonConfig and render itself in an arbitrary size and location. It looks like this.</p><p><a href="https://code.world/haskell#PbmFTi_WhFj_mRHnwqGn3DQ">CodeWorld</a></p><p>And the source code for that button is:</p><pre>button :: ReflexCodeWorld t m =&gt; ButtonConfig -&gt; m (Event t ())<br>button (ButtonConfig (x, y) w h label) =<br>  do<br>    draw (pure pic)<br>    clicks &lt;- getPointerClick<br>    return (ffilter inButton clicks $&gt; ())<br>  where<br>    inButton (xx, yy) = abs (xx - x) &lt; w / 2 &amp;&amp; abs (yy - y) &lt; h / 2<br>    pic =<br>      translated x y $<br>        clipped w h (lettering label)<br>          &lt;&gt; rectangle w h</pre><p>I’ve used CodeWorld functions called <em>translated</em> and <em>clipped</em> to move the visual appearance of the button and ensure the label doesn’t extend beyond the now-configurable size. Aside from that, this is all straight-forward.</p><p>More complex is making the button respond to user input and behave as buttons tend to behave in modern user interfaces. If you try out some buttons in your favorite GUI programs, you may notice that they behave like this:</p><ul><li>There may or may not be a hover effect to indicate when your pointer is over the button.</li><li>When you press down on the pointer, the button is held down, but its action isn’t yet triggered.</li><li>If you drag the pointer off the button before releasing, the action is <em>not</em> triggered. Similarly, if you click elsewhere and drag onto the button, the action is <em>not</em> triggered.</li><li>The button’s action is triggered only when you <em>release</em> the pointer while it’s <em>over</em> the button, <em>and</em> it was pressed over the button. However, the action triggers regardless of whether it was temporarily moved off of the button while the pointer was held down.</li></ul><p>That’s a complicated behavior! But in the end, every detail is justifiable by considering the human experience of using the button. We’d like to replicate this behavior in our button.</p><p>When approaching a complex problem like this, I like to start by naming things! I ended up with the following bit of code, which I’ll explain line-by-line.</p><pre>do<br>  over &lt;- fmap inButton &lt;$&gt; getPointerPosition<br>  down &lt;- isPointerDown<br>  click &lt;- getPointerClick<br>  lastAnchored &lt;- holdDyn False $ fmap inButton click<br>  let anchored = (&amp;&amp;) &lt;$&gt; down &lt;*&gt; lastAnchored<br>  let releases = ffilter not (updated anchored) $&gt; ()<br>  let triggers = gate (current over) releases</pre><p>Here’s what’s going on:</p><ul><li><em>over</em> is a dynamic Bool value indicating whether the pointer is located over the button. We start with <em>getPointerPosition</em>, which is a dynamic Point, and then fmap the <em>inButton</em> function from above to get a dynamic Bool.</li><li><em>down</em> is a dynamic Bool value indicating whether the pointer is currently being held down, regardless of whether it’s over the button. This is defined using <em>isPointerDown</em>, which is a CodeWorld Reflex primitive.</li><li><em>click</em> is an event indicating that the pointer is pressed down, regardless of whether it’s over the button. The value associated with each event is the point where the pointer was clicked. This is defined using <em>getPointerClick</em>, which is again a CodeWorld Reflex primitive.</li><li><em>lastAnchored</em> is a dynamic Bool value that remembers whether the last pointer press happened over the button or not. We start with all pointer presses (<em>click</em>), fmap <em>inButton</em> to get an Event of Bool values instead of Point values, and finally use <em>holdDyn</em> (a standard Reflex operation) to build a dynamic value that remembers the most recent Event occurrence.</li><li><em>anchored</em> is a combination of <em>lastAnchored</em> and <em>down</em>, a dynamic Bool value that tells whether there’s an ongoing pointer press that started over the button. It uses Applicative operators to combine the two simpler values.</li><li><em>releases</em> is an event takes all of the updates to <em>anchored</em>, and then filters out only those that change it to False. Here, <em>updated</em> is a standard Reflex combinator that extracts the Event of updates to a dynamic value.</li><li>Finally, <em>triggers</em> gates <em>releases</em> to keep only those releases that happen while over the button. Here, <em>current</em> is a standard Reflex combinator that gets the behavior representing the current sample of a dynamic value. Then <em>gate</em> is another standard Reflex combinator that gates an event by a behavior.</li></ul><p>The <em>triggers</em> Event is what we want: an event representing the precise times at which the effect of a button should be triggered.</p><p>Next, we’d like the rendering of the button to differ depending on the state. Specifically, we’d like to render differently depending on <em>anchored</em> and <em>over</em>. To accomplish this, instead of using <em>pure</em> with <em>draw</em>, we’ll use applicative combinators to pass arguments to a rendering function.</p><pre>draw (render &lt;$&gt; anchored &lt;*&gt; over)</pre><p>The rendering function I’ve chosen uses the two parameters to choose a background color for the button.</p><pre>render anchored over =<br>  translated x y $<br>    clipped w h (lettering label)<br>      &lt;&gt; rectangle w h<br>      &lt;&gt; colored (color anchored over) (solidRectangle w h)</pre><pre>color _ False = white<br>color False True = RGB 0.9 0.9 0.9<br>color True True = RGB 0.8 0.8 0.8</pre><p>You can play with the completed button here:</p><p><a href="https://code.world/haskell#Pmls2_rsLWm34f2wcF9CWmw">CodeWorld</a></p><p>The nice thing about this button is that the API stayed exactly the same as the earlier configurable button. The logic change to make the button behavior more user-friendly was entirely encapsulated inside the implementation of a reusable component. This is the case despite some pretty radical changes, like triggering the effect on mouse release instead of mouse press! That kind of abstraction is possible because the event abstraction is available for user-defined events.</p><h4>Entering Numbers</h4><p>The next challenge is the number entry field. Since this is a calculator, entering numbers is one of the most important things you can do, and it shouldn’t surprise us that the task gets a little complicated. We identify the following requirements.</p><ul><li>If there’s no number being typed yet, we can type a number, with or without decimal points, to enter that number.</li><li>We can set the current number being typed to any number we desire. For example, the number entry field sometimes functions as the top element of the stack, so when we pop a number off the stack, we’ll set the entry field to that number.</li><li>It’s also possible that no number is being entered. For example, immediately after performing a math operation, there is no number being entered.</li></ul><p>Following the lessons learned from the button example earlier, we’ll start with a config structure giving configuration options about the number entry field. There’s a new wrinkle though:</p><pre>data NumFieldConfig t = NumFieldConfig<br>  { numFieldLocation :: Point,<br>    numFieldWidth :: Double,<br>    numFieldHeight :: Double,<br>    setNumField :: Event t (Maybe Rational)<br>  }</pre><p>What is <em>setNumField</em>? Well, unlike with buttons, we need to be able to set the value of the number field from outside of the field itself. The way we do this in Reflex is to pass <em>in</em> what the control needs to know about the outside world, such as when the outside world wants it to change its current value. The value attached to the event is a Maybe because it’s possible (and, indeed, is the most common case) that the outside world wants to reset the field to not be entering a number at all.</p><p>Now the function to build a number field has this type:</p><pre>numField ::<br>  ReflexCodeWorld t m =&gt;<br>  NumFieldConfig t -&gt;<br>  m (Dynamic t (Maybe Rational))</pre><p>That is, you pass in a NumFieldConfig (including an event that’s used for setting the value), and you get back a dynamic current value (which is possibly non-existent, hence the Maybe).</p><p>One approach here might be to implement an arbitrary text entry field, and then parse a number from that when the value is needed. Instead, though, we’ll take a different tack: keep a running number any time there’s a current number being edited. In order to enter decimals, in addition to the number itself, we need to keep track of whether a decimal point has been typed, and if so, how many decimal places have been typed beyond that point (pun intended). So we can define a state type for the internal state of the number field like this:</p><pre>data NumFieldState = NumFieldState<br>  { numFieldValue :: Rational,<br>    numFieldDecimalPlaces :: Maybe Int<br>  }</pre><p>Now we need to implement this. We’ll turn to what’s a pretty common trick for state machines in Reflex: use <em>foldDyn</em> (a standard Reflex combinator) with the function application operator to apply an event of state transition functions to the initial state. Build up that event by merging a lot of smaller events with function composition. Here’s what it looks like this time:</p><pre>numField (NumFieldConfig (x, y) w h set) =<br>  do<br>    text &lt;- getTextEntry<br>    key &lt;- getKeyPress<br>    state &lt;-<br>      foldDyn ($) Nothing $<br>        mergeWith<br>          (.)<br>          [ const . fmap initState &lt;$&gt; set,<br>            ffilter (== &quot;0&quot;) text $&gt; digit 0,<br>            ffilter (== &quot;1&quot;) text $&gt; digit 1,<br>            ffilter (== &quot;2&quot;) text $&gt; digit 2,<br>            ffilter (== &quot;3&quot;) text $&gt; digit 3,<br>            ffilter (== &quot;4&quot;) text $&gt; digit 4,<br>            ffilter (== &quot;5&quot;) text $&gt; digit 5,<br>            ffilter (== &quot;6&quot;) text $&gt; digit 6,<br>            ffilter (== &quot;7&quot;) text $&gt; digit 7,<br>            ffilter (== &quot;8&quot;) text $&gt; digit 8,<br>            ffilter (== &quot;9&quot;) text $&gt; digit 9,<br>            ffilter (== &quot;.&quot;) text $&gt; dot,<br>            ffilter (== &quot;Backspace&quot;) key $&gt; backspace<br>          ]<br>    draw (render &lt;$&gt; state)<br>    return (fmap numFieldValue &lt;$&gt; state)</pre><p>We’re filtering out any time that a digit or dot is entered, backspace is pressed, or the current value is set using the event from the config. As explained above, when these things happen, we construct a state transition function, and yield it from the merged event using <em>mergeWith</em>, combining simultaneous events using function composition. Then we use <em>foldDyn</em> to fold over the event of state transition functions to get a dynamic current state.</p><p>There are four auxiliary functions used here to construct state transitions: <em>initState</em>, <em>digit</em>, <em>dot</em>, and <em>backspace</em>. There’s also an auxiliary <em>render</em> function used in the call to <em>draw</em>. These don’t use any Reflex functionality at all, since they are just plain functions on the state, and they also don’t use any new CodeWorld functionity. So I won’t explain them all, but will instead just link to a demo with the complete code, which you can review at your leisure.</p><p><a href="https://code.world/haskell#PLvBvf4iLvSAXMz_rw9LXUA">CodeWorld</a></p><p>The stack display component doesn’t introduce any new concepts at all, and is in fact a much simpler application of the same pattern since it has no input except for the setter function in the config. I’m omitting it here, but you can browse its code in the final calculator program.</p><h4>Operations</h4><p>Now that we have the basic components in place, we’ll start working toward wiring them together. There’s one more application-specific abstraction we can define here to make that process much more composable: <em>operations</em>. Operations include things like addition, subtraction, etc. But they also include pushing values onto the stack, popping them off the stack, and maybe in the future even more like dup, swap, etc.</p><p>Ultimate, an operation has two kinds of effects: setting the current number, and setting the current stack.</p><pre>data OpEffect t = OpEffect<br>  { entryEffect :: Event t (Maybe Rational),<br>    stackEffect :: Event t [Rational]<br>  }</pre><p>You can start to see how these are set up to be wired into the number field and stack display components, but we’ve still got some work to get there. An operation is just one way to affect the number field and stack, and a complete calculator will need to wire together a lot of different possible operations. Luckily, OpEffect forms a monoid, which lets us combine a lot of them together!</p><pre>instance Reflex t =&gt; Semigroup (OpEffect t) where<br>  OpEffect c1 s1 &lt;&gt; OpEffect c2 s2 =<br>    OpEffect (leftmost [c1, c2]) (leftmost [s1, s2])</pre><pre>instance Reflex t =&gt; Monoid (OpEffect t) where<br>  mempty = OpEffect never never</pre><p>The empty OpEffect simply never sets anything. To combine two OpEffects, we combine their effects using <em>leftmost</em>. (If two effects fire simultaneously, this implementation will prefer the left one and drop the right one, but in that case it’s not clear what the right behavior is so that’s a fine choice.)</p><p>One thing worth calling out here: there is no ReflexCodeWorld class here; just Reflex. That’s because we’ve graduated a step above dealing with low-level graphics APIs, and are building the logical layer for interacting with stacks and numbers. The translation from these RPN calculator concepts down to drawings and pointer events and such was already implemented earlier. The lack of ReflexCodeWorld is a sign that we’ve succeeded in the abstraction.</p><p>At this point, we can begin implementing operations. For instance, pushing the current number field value onto the stack:</p><pre>pushStack ::<br>  Reflex t =&gt;<br>  Event t a -&gt;<br>  Dynamic t (Maybe Rational) -&gt;<br>  Dynamic t [Rational] -&gt;<br>  OpEffect t<br>pushStack occurred entryVal stackVal =<br>  OpEffect<br>    { entryEffect = occurred $&gt; Nothing,<br>      stackEffect =<br>        tag<br>          ( (:)<br>              &lt;$&gt; (fromMaybe 0 &lt;$&gt; current entryVal)<br>              &lt;*&gt; current stackVal<br>          )<br>          occurred<br>    }</pre><p>Here, <em>occurred</em> is an event that indicates when we want <em>pushStack</em> to happen. To push, we need access to the previous number entry and stack, and we yield an OpEffect that sets the new number entry and stack accordingly. The Reflex combinator <em>tag</em> is very useful here: it lets us take all occurrences of the event and replace the event value with some behavior, which we can build up from the current number entry field and stack.</p><p>We can also pop the top value off the stack, and replace the number entry field with it. This is another straightforward use of <em>tag</em>. Notice that we need the previous stack, but not the previous number field since we’ll be wiping out its value with a new one.</p><pre>popStack ::<br>  Reflex t =&gt;<br>  Event t a -&gt;<br>  Dynamic t [Rational] -&gt;<br>  OpEffect t<br>popStack occurred stackVal =<br>  OpEffect<br>    { entryEffect = tag (listToMaybe &lt;$&gt; current stackVal) occurred,<br>      stackEffect = tag (drop 1 &lt;$&gt; current stackVal) occurred<br>    }</pre><p>Finally, we’ll have a lot of operations that modify the stack. We want these to work in a consistent way: if there’s a current number being entered, push it onto the stack first and clear the number entry field, then perform the operation on the stack. Here’s how we can say that generically:</p><pre>stackOp ::<br>  Reflex t =&gt;<br>  ([Rational] -&gt; [Rational]) -&gt;<br>  Event t a -&gt;<br>  Dynamic t (Maybe Rational) -&gt;<br>  Dynamic t [Rational] -&gt;<br>  OpEffect t<br>stackOp f occurred entryVal stackVal =<br>  OpEffect<br>    { entryEffect = occurred $&gt; Nothing,<br>      stackEffect = tag (f &lt;$&gt; input) occurred<br>    }<br>  where<br>    input =<br>      (\s -&gt; maybe s (: s))<br>        &lt;$&gt; current stackVal &lt;*&gt; current entryVal</pre><p>We’ll need some binary operations (like addition and subtraction) and some unary operations (like square root). Let’s make wrappers for those so we can define specific operations more easily.</p><pre>binaryOp ::<br>  Reflex t =&gt;<br>  (Rational -&gt; Rational -&gt; Rational) -&gt;<br>  Event t a -&gt;<br>  Dynamic t (Maybe Rational) -&gt;<br>  Dynamic t [Rational] -&gt;<br>  OpEffect t<br>binaryOp op = stackOp f<br>  where<br>    f (x : y : xs) = op y x : xs<br>    f other = other</pre><pre>unaryOp ::<br>  Reflex t =&gt;<br>  (Rational -&gt; Rational) -&gt;<br>  Event t a -&gt;<br>  Dynamic t (Maybe Rational) -&gt;<br>  Dynamic t [Rational] -&gt;<br>  OpEffect t<br>unaryOp op = stackOp f<br>  where<br>    f (x : xs) = op x : xs<br>    f other = other</pre><p>This gives us all the pieces we need to wire together a calculator.</p><h4>Putting It All Together</h4><p>Now it’s time to wire all this together. Because we have cyclic data dependencies among our components, we need the RecursiveDo language extension for this. This extension just lets us define recursive blocks of do notation where the bound values can refer to each other. Then we’ll just plug it all in:</p><pre>calculator :: ReflexCodeWorld t m =&gt; m ()<br>calculator = do<br>  key &lt;- getKeyPress<br>  text &lt;- getTextEntry</pre><pre>  sqrtButton &lt;- button (ButtonConfig (-3.5, -3) 3 1.25 &quot;sqrt&quot;)<br>  sinButton &lt;- button (ButtonConfig (0, -3) 3 1.25 &quot;sin&quot;)<br>  cosButton &lt;- button (ButtonConfig (3.5, -3) 3 1.25 &quot;cos&quot;)</pre><pre>  rec let OpEffect entryEff stackEff =<br>            mconcat<br>              [ pushStack (ffilter (== &quot;Enter&quot;) key) num stk,<br>                popStack (ffilter (== &quot;Esc&quot;) key) stk,<br>                binaryOp (+) (ffilter (== &quot;+&quot;) text) num stk,<br>                binaryOp (-) (ffilter (== &quot;-&quot;) text) num stk,<br>                binaryOp (*) (ffilter (== &quot;*&quot;) text) num stk,<br>                binaryOp (/) (ffilter (== &quot;/&quot;) text) num stk,<br>                unaryOp (approx sqrt) sqrtButton num stk,<br>                unaryOp (approx sin) sinButton num stk,<br>                unaryOp (approx cos) cosButton num stk<br>              ]<br>      num &lt;- numField (NumFieldConfig (0, 5) 10 1.5 entryEff)<br>      stk &lt;- stack (StackConfig (0, 1) 10 6 stackEff)</pre><pre>  return ()</pre><p>The mconcat combines all the individual operations in one combined effect, which is then wired into the number field and stack components. Just to demonstrate that it’s possible, I’ve bound some operations to keys and some to buttons on the screen. The operation code doesn’t care where its events come from, which is why events are a nice abstraction. This ties it all together into one big calculator, leaving only one step left:</p><pre>main :: IO ()<br>main = reflexOf calculator</pre><p>And we’re done!</p><p>You can peruse the final calculator code here:</p><p><a href="https://code.world/haskell#PP_y0l9mQepdeIvwDXWfNOQ">CodeWorld</a></p><img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=a1b42ad36923" width="1"><hr></hr><p><a href="https://itnext.io/abstraction-in-reflex-and-codeworld-a1b42ad36923">Abstraction in Reflex and CodeWorld</a> was originally published in <a href="https://itnext.io">ITNEXT</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p></div>
    </content>
    <updated>2021-08-18T07:01:35Z</updated>
    <published>2021-08-14T01:41:13Z</published>
    <category term="frp"/>
    <category term="haskell"/>
    <category term="codeworld"/>
    <category term="reflex"/>
    <author>
      <name>Chris Smith</name>
    </author>
    <source>
      <id>https://medium.com/@cdsmithus?source=rss-18bd5acaea78------2</id>
      <logo>https://cdn-images-1.medium.com/fit/c/150/150/1*rU9ddF_bkph8Qg3jip7vfw.jpeg</logo>
      <link href="https://medium.com/@cdsmithus?source=rss-18bd5acaea78------2" rel="alternate" type="text/html">
      <link href="https://medium.com/@cdsmithus/feed" rel="self" type="application/rss+xml">
      <link href="http://medium.superfeedr.com" rel="hub" type="text/html">
      <subtitle>Stories by Chris Smith on Medium</subtitle>
      <title>Stories by Chris Smith on Medium</title>
      <updated>2021-09-01T07:52:35Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>https://www.fpcomplete.com/blog/announcing-amber-ci-secret-tool/</id>
    <link href="https://www.fpcomplete.com/blog/announcing-amber-ci-secret-tool/" rel="alternate" type="text/html">
    <title xml:lang="en">Announcing Amber, encrypted secrets management</title>
    <content type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p>Years ago, <a href="https://travis-ci.org/">Travis CI</a> introduced a method for passing secret values from your repository into the Travis CI system. This method relies on encryption to ensure that anyone can provide a new secret, but only the CI system itself can read those secrets. I've always thought that the Travis approach to secrets was one of the best around, and was disappointed that other CI tools continued to use the more standard &quot;set and update secrets in a web interface&quot; approach. (We'll get into the advantages of the encrypted-secrets approach a bit later.)</p>
<p>Fast-forward to earlier this year, and for running <a href="https://www.fpcomplete.com/products/kube360/">Kube360</a> deployment jobs, we found that the secrets-in-CI-web-interface approach simply wasn't scaling. So I hacked together a quick script that used GPG and symmetric key encryption to encrypt a <code>secrets.sh</code> file containing the relevant secrets for CI (or, really, CD in this case). This worked, but had some downsides.</p>
<p>A few weeks ago, I finally bit the bullet and rewrote this ugly script. Instead of using GPG and symmetric key encryption, I used <a href="https://lib.rs/crates/sodiumoxide"><code>sodiumoxide</code></a> and public key encryption. This addressed essentially all the pain points I had with our CD setup. However, this tool was very much custom-built for Kube360.</p>
<p>Over the weekend, I extracted the general-purpose components of this tool into a <a href="https://github.com/fpco/amber">new open source repository</a>. This blog post is announcing the first public release of Amber, a tool geared at CI/CD systems for better management of secret data over time. There's basic information in that repo to describe how to use the tool. This blog post is intended to go into more detail on why I believe encrypted-secrets is a better approach than web-interface-of-secrets.</p>
<h2 id="the-pain-points">The pain points</h2>
<p>There are two primary issues with the standard CI secrets management approach:</p>
<ol>
<li>It can be tedious to manage a large number of values inside a web interface. I've personally made mistakes copy-pasting values. And if you ever need to run a script locally for testing purposes, copying all the values out each time is an even bigger pain. (More on that below.)</li>
<li>It's completely reasonable for secret values to change over time. However, there's no evidence of this in the source repository feeding into the CI system. Instead, the changes happen opaquely, and can never be observed as having changed, nor an old build faithfully reproduced with the original values. (This is pretty similar to why we believe <a href="https://www.fpcomplete.com/blog/2017/04/ci-build-process-in-code-repository/">your CI build process should be in your code repository</a>.)</li>
</ol>
<p>With encrypted values within a repository, both of these things change. Adding new encrypted values is now a command line call, which for many of us is less tedious and more foolproof than web interfaces. The encrypted secrets are stored in the Git repository itself, so as values change over time, the files provide evidence of that fact. And checking out an old commit from the repository will allow you to rerun a build with exactly the same secrets as when the commit was made.</p>
<h2 id="why-public-key">Why public key</h2>
<p>One of the important changes I made from the GPG script mentioned above was public key, instead of symmetric key, encryption. With symmetric key encryption, you use the same key to encrypt and decrypt data. That means that all people who want to encrypt a value into the repository need access to a piece of secret data. While encrypting new secret values isn't <em>that</em> common an activity, requiring access to that secret data is best avoided.</p>
<p>Instead, with public key encryption, we generate a secret key and public key. The public key lives inside the repository, in the same file as the secrets themselves. With that in place, anyone with access to the repo can encrypt new values, without any ability to read existing values.</p>
<p>Further, since the public key is available in the repository, Amber is able to perform sanity checks to ensure that its secret key matches up with the public key in the repository. While the encryption algorithms we use provide the ability to ensure message integrity, this self-check provides for nicer diagnostics, clearly distinguishing &quot;message corrupted&quot; from &quot;looks like you're using the wrong secret key for this repository.&quot;</p>
<h2 id="minimizing-deltas">Minimizing deltas</h2>
<p>Amber is optimized for the Git repository case. This includes wanting to minimize the deltas when updating secrets. This resulted in three design decisions:</p>
<ul>
<li>
<p>The config file format is YAML. Its whitespace-sensitive formatting makes it a great choice to minimize the number of lines affected when updating a secret. While other formats (like TOML) would have been great choices too, I stuck with YAML as, anecdotally, it seems to have stronger overall language support for people wishing to write companion tools.</p>
</li>
<li>
<p>In addition to storing the secret name and encrypted value (the ciphertext), Amber additionally includes a SHA256 digest of the secret. This means that, if you encrypt the same value twice, Amber can detect this and avoid generating a new ciphertext. This has the additional benefit of letting users check if they know the secret value without being able to decrypt the file.</p>
</li>
<li>
<p>The most natural representation of this data would be a YAML mapping, something like:</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #268bd2;">secrets</span><span style="color: #657b83;">:
</span><span style="color: #657b83;">  </span><span style="color: #268bd2;">NAME1</span><span style="color: #657b83;">:
</span><span style="color: #657b83;">    </span><span style="color: #268bd2;">sha256</span><span style="color: #657b83;">: </span><span style="color: #2aa198;">deadbeef
</span><span style="color: #657b83;">    </span><span style="color: #268bd2;">cipher</span><span style="color: #657b83;">: </span><span style="color: #2aa198;">abc123
</span></code></pre>
<p>However, in most languages, the ordering of keys in a mapping is arbitrary. This makes it harder to read these files, and means that arbitrary minor changes may result in large deltas. Instead, Amber stores secrets in an array:</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #268bd2;">secrets</span><span style="color: #657b83;">:
</span><span style="color: #657b83;">- </span><span style="color: #268bd2;">name</span><span style="color: #657b83;">: </span><span style="color: #2aa198;">NAME1
</span><span style="color: #657b83;">  </span><span style="color: #268bd2;">sha256</span><span style="color: #657b83;">: </span><span style="color: #2aa198;">deadbeef
</span><span style="color: #657b83;">  </span><span style="color: #268bd2;">cipher</span><span style="color: #657b83;">: </span><span style="color: #2aa198;">abc123
</span></code></pre></li>
</ul>
<p>This all works together to achieve what for me is the goal of secrets in a repository: you can trivially see in a <code>git diff</code> which secrets values were added, removed, or updated.</p>
<h2 id="local-running">Local running</h2>
<p>Ideally production deployments are only ever run from the official CI/CD system designated for that. However:</p>
<ol>
<li>Sometimes during development it's much easier to iterate by doing non-production deployments from your local system.</li>
<li>As a realist, I have to admit that even the best run DevOps teams may occasionally need to bend the rules for expediency or better debugging of a production issue.</li>
</ol>
<p>For Kube360, it wasn't unreasonable to have about a dozen secret values for a standard deployment. Copy/pasting all of those to your local machine each time you want to debug an issue wasn't feasible. This encouraged some worst practices, such as keeping the secret values in a plain-text shell script file locally. For a development cluster, that's not the worst thing in the world. But lax security practices in dev tend to bleed into prod too easily.</p>
<p>Copying a single secret value from CI secrets or a team password manager is a completely different story. It takes 30 seconds at the beginning of a debug session. I feel no objections to doing so.</p>
<p>Even this may be something we can bypass with cloud secrets managers, which I'll mention below.</p>
<h2 id="what-s-with-the-name">What's with the name?</h2>
<p>As we all know, there are two hard problems in computer science:</p>
<ol>
<li>Cache invalidation</li>
<li>Naming things</li>
<li>Off-by-one errors</li>
</ol>
<p>I named this tool Amber based on Jurassic Park, and the idea of some highly important data (dinosaur DNA) being trapped in amber under layers of sediment. This fit in nicely with my image of storing encrypted secrets inside the commits of a Git repository. But since I just finished playing &quot;Legend of Zelda: Skyward Sword,&quot; a more appropriate image seems to be:</p>
<p><img alt="Zelda trapped in amber" src="https://www.fpcomplete.com/images/blog/amber-zelda.png"></p>
<h2 id="implementation">Implementation</h2>
<p>I wrote this tool in Rust. It's a pretty small codebase currently, clocking in at only 445 SLOC of Rust code. It's also a pretty simple overall implementation, if anyone is interested in a first project to contribute to.</p>
<h2 id="future-enhancements">Future enhancements</h2>
<p>Future enhancements will be driven by internal and customer needs at FP Complete, as well as feedback we receive on the issue tracker and pull requests. I have a few ideas ranging from concrete to nebulous for enhancements:</p>
<ul>
<li>Masking values. Currently, <code>amber exec</code> will simply run the child process without modifying its output at all. A standard CI system feature is to mask secret values from output. Implementing such as change in Amber should be straightforward. (<a href="https://github.com/fpco/amber/issues/1">Issue #1</a>)</li>
<li>Tie-ins with cloud secrets management systems. Currently, Amber's only source of the secret key is via environment variables. There are many use cases where grabbing the data from a secrets manager, such as AWS Secrets Manager or Azure Key Vault, would be a better choice. In particular, during deployments, this could allow delegating access to secrets to existing cloud-native permissions mechanisms. See <a href="https://github.com/fpco/amber/issues/2">issue #2</a> and <a href="https://github.com/fpco/amber/pull/4">pull request #4</a> for some more information. One possible approach here is to follow a pattern of naming the secret based on the public key, leading to a zero-config approach to discovering the secret key (since the public key is already in the repository).</li>
<li>Additional platform support. Currently, we're building executables for x86-64 on Linux (static via musl), Windows, and Mac. Cross compilation support from Rust is great, and one of the reasons I prefer writing CI tools like this in Rust. However, the <code>sodiumoxide</code> library depends on <code>libsodium</code>, so additional GitHub Actions setup will be necessary to get these builds working.</li>
<li>Auto-generation of passwords. In our Kube360 work, a common need is to generate a temporary password to be used by different components in the system (e.g., an OpenID Connect client secret used by both the Identity Provider and Service Provider). A simple <code>amber gen-password CLIENT_SECRET</code> subcommand may be nice.</li>
<li>I haven't released this code to <a href="https://crates.io/">crates</a>, but if there's interest I'd be happy to do so.</li>
<li>Support for encrypted files in addition to encrypted environment variables. I haven't really thought through what the interface for this may look like.</li>
</ul>
<h2 id="get-started">Get started</h2>
<p>There are <a href="https://github.com/fpco/amber#readme">instructions in the repo</a> for getting started with Amber. The basic steps are:</p>
<ul>
<li>Download the executable from <a href="https://github.com/fpco/amber/releases">the release page</a> or build it yourself</li>
<li>Use <code>amber init</code> to create an <code>amber.yaml</code> file and a secret key</li>
<li>Store the secret key somewhere safe, like your password manager, and additionally within your CI system's secrets
<ul>
<li>In theory, this is the last value you'll ever store there!</li>
</ul>
</li>
<li>Add your secrets with <code>amber encrypt</code></li>
<li>Commit <code>amber.yaml</code> to your repository</li>
<li>Modify your CI scripts to download the Amber executable and use <code>amber exec</code> to run commands that need secrets</li>
</ul>
<h2 id="more-from-fp-complete">More from FP Complete</h2>
<p>FP Complete is an IT consulting firm specializing in server-side development, DevOps, Rust, and Haskell. A large part of our consulting involves improving and automating build and deployment pipelines. If you're interested in additional help from FP Complete in one of these domains, please <a href="https://www.fpcomplete.com/contact-us/">contact us</a>.</p>
<p>Interested in working with a team of DevOps, Rust, and Haskell engineers to solve real world problems? We're actively <a href="https://www.fpcomplete.com/jobs/">hiring senior and lead DevOps engineers</a>.</p>
<p>Want to read more? Check out:</p>
<ul>
<li><a href="https://www.fpcomplete.com/blog/">Our blog</a></li>
<li><a href="https://www.fpcomplete.com/devsecops/">Our DevOps homepage</a></li>
<li><a href="https://www.fpcomplete.com/rust/">Our Rust homepage</a></li>
</ul></div>
    </content>
    <updated>2021-08-17T00:00:00Z</updated>
    <published>2021-08-17T00:00:00Z</published>
    <source>
      <id>https://www.fpcomplete.com/atom.xml</id>
      <author>
        <name>FP Complete</name>
      </author>
      <link href="https://www.fpcomplete.com/atom.xml" rel="self" type="application/atom+xml">
      <link href="https://www.fpcomplete.com" rel="alternate" type="text/html">
      <subtitle xml:lang="en">Blog posts from FP Complete, focusing on Rust, Haskell, and DevOps</subtitle>
      <title xml:lang="en">FP Complete Blog</title>
      <updated>2021-08-30T00:00:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-US">
    <id>584219d403596e3099e0ee9b:58462c0e15d5db6feba171c0:6118577db2e37755bf506c4e</id>
    <link href="https://mmhaskell.com/blog/2021/8/16/fixing-haskellings-filepaths" rel="alternate" type="text/html">
    <title>Fixing Haskellings Filepaths</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Hey folks! I'm experimenting with a new content format for Monday Morning Haskell. Every Monday Evening now, I'm going to stream myself writing some Haskell or working on a Haskell problem, and then the following Monday I'll post an overview of that stream on YouTube. </p>
<p>Last week was the first streaming session, where I was working on an issue with <a href="https://github.com/MondayMorningHaskell/haskellings">Haskellings</a>. So this video will have some highlights from that. For broader context, I was looking to replace some custom functions I had built for filepath manipulation with the more well tested System.Filepath library.</p>
<p>This being the first stream, I hope you'll understand things are still a bit rough around the edges, but I hope you enjoy it! If you want to tune in to watch me on Monday Evenings, head over to my <a href="https://www.twitch.tv/james_mml">Twitch page</a>!</p></div>
    </summary>
    <updated>2021-08-16T15:00:00Z</updated>
    <published>2021-08-16T15:00:00Z</published>
    <author>
      <name>James Bowen</name>
    </author>
    <source>
      <id>https://mmhaskell.com/blog/</id>
      <link href="https://mmhaskell.com/blog/" rel="alternate" type="text/html">
      <link href="https://mmhaskell.com/blog?format=rss" rel="self" type="application/rss+xml">
      <title>Blog - Monday Morning Haskell</title>
      <updated>2021-09-01T05:25:47Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-1777990983847811806.post-6319221858421997722</id>
    <link href="https://www.haskellforall.com/feeds/6319221858421997722/comments/default" rel="replies" title="Post Comments" type="application/atom+xml">
    <link href="https://www.haskellforall.com/2021/08/namespaced-de-bruijn-indices.html#comment-form" rel="replies" title="3 Comments" type="text/html">
    <link href="https://www.blogger.com/feeds/1777990983847811806/posts/default/6319221858421997722" rel="edit" type="application/atom+xml">
    <link href="https://www.blogger.com/feeds/1777990983847811806/posts/default/6319221858421997722" rel="self" type="application/atom+xml">
    <link href="https://www.haskellforall.com/2021/08/namespaced-de-bruijn-indices.html" rel="alternate" title="Namespaced De Bruijn indices" type="text/html">
    <title>Namespaced De Bruijn indices</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">namespaced-debruijn    <p>In this post I share a trick I use for dealing with bound variables in <a href="https://dhall-lang.org/">Dhall</a> that I thought might be useful for other interpreted programming languages. I have no idea if this trick has been introduced before but if it has then just let me know and I’ll acknowledge any prior art here.</p><p>Edit: Todd Wilson points out that Mark-Oliver Stehr’s <a href="https://www.sciencedirect.com/science/article/pii/S1571066105801252">CINNI</a> originally introduced this idea.</p><p>The brief explanation of the trick is: instead of choosing between a named or a nameless representation for bound variables you can get the best of both worlds by namespacing De Bruijn indices by variable names. This simplifies the implementation and in some cases improves the end user’s experience.</p><p>The rest of this post is a longer explanation of the above summary, starting with an explanation of the trick and followed by a review of the benefits of this approach.</p><h4 id="background">Background</h4><p>I’d like to first explain what I mean by “named” and “nameless” representations before I explain the trick.</p><p>A named representation of the lambda calculus syntax tree typically looks something like this:</p><div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb1-1" tabindex="-1"/><span class="kw">data</span> <span class="dt">Syntax</span></span><br><span id="cb1-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb1-2" tabindex="-1"/>    <span class="ot">=</span> <span class="dt">Variable</span> <span class="dt">String</span></span><br><span id="cb1-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb1-3" tabindex="-1"/>    <span class="op">|</span> <span class="dt">Lambda</span> <span class="dt">String</span> <span class="dt">Syntax</span></span><br><span id="cb1-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb1-4" tabindex="-1"/>    <span class="op">|</span> <span class="dt">Apply</span> <span class="dt">Syntax</span> <span class="dt">Syntax</span></span></code></pre></div><p>For example, if the user wrote the following Haskell-like code:</p><div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-1" tabindex="-1"/>\f <span class="ot">-&gt;</span> \x <span class="ot">-&gt;</span> f x</span></code></pre></div><p>… then that would correspond to this syntax tree:</p><div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb3-1" tabindex="-1"/><span class="ot">example ::</span> <span class="dt">Syntax</span></span><br><span id="cb3-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb3-2" tabindex="-1"/>example <span class="ot">=</span> <span class="dt">Lambda</span> <span class="st">&quot;f&quot;</span> (<span class="dt">Lambda</span> <span class="st">&quot;x&quot;</span> (<span class="dt">Apply</span> (<span class="dt">Variable</span> <span class="st">&quot;f&quot;</span>) (<span class="dt">Variable</span> <span class="st">&quot;x&quot;</span>)))</span></code></pre></div><p>The named representation has the nice property that it preserves the original variable names … well, sort of. This representation definitely preserves the variable names when you initially parse the code into the syntax tree, but if you β-reduce an expression you can potentially run into problems.</p><p>For example, consider this expression:</p><div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb4-1" tabindex="-1"/>\x <span class="ot">-&gt;</span> (\y <span class="ot">-&gt;</span> \x <span class="ot">-&gt;</span> y) x</span></code></pre></div><p>… which corresponds to this syntax tree:</p><div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb5-1" tabindex="-1"/><span class="dt">Lambda</span> <span class="st">&quot;x&quot;</span> (<span class="dt">Apply</span> (<span class="dt">Lambda</span> <span class="st">&quot;y&quot;</span> (<span class="dt">Lambda</span> <span class="st">&quot;x&quot;</span> (<span class="dt">Variable</span> <span class="st">&quot;y&quot;</span>))) (<span class="dt">Variable</span> <span class="st">&quot;x&quot;</span>))</span></code></pre></div><p>If you try to β-reduce <code>(\y -&gt; \x -&gt; y) x</code> without renaming any variables then you get the following incorrect result:</p><div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb6-1" tabindex="-1"/>\x <span class="ot">-&gt;</span> \x <span class="ot">-&gt;</span> x</span></code></pre></div><p>This bug is known as “name capture” and capture-avoiding substitution requires renaming one of the variables named <code>x</code> so that the inner <code>x</code> does not shadow the outer <code>x</code>. For example, we could fix the problem by renaming the outer <code>x</code> to <code>x1</code> like this:</p><div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-1" tabindex="-1"/>\x1 <span class="ot">-&gt;</span> \x <span class="ot">-&gt;</span> x1</span></code></pre></div><p>A nameless representation tries to work around these name capture issues by replacing the variable names with numeric indices (known as <a href="https://en.wikipedia.org/wiki/De_Bruijn_index">De Bruijn indices</a>):</p><div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb8-1" tabindex="-1"/><span class="kw">data</span> <span class="dt">Syntax</span></span><br><span id="cb8-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb8-2" tabindex="-1"/>    <span class="ot">=</span> <span class="dt">Variable</span> <span class="dt">Int</span></span><br><span id="cb8-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb8-3" tabindex="-1"/>    <span class="op">|</span> <span class="dt">Lambda</span> <span class="dt">Syntax</span></span><br><span id="cb8-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb8-4" tabindex="-1"/>    <span class="op">|</span> <span class="dt">Apply</span> <span class="dt">Syntax</span> <span class="dt">Syntax</span></span></code></pre></div><p>For example, code like this:</p><div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb9-1" tabindex="-1"/>\f <span class="ot">-&gt;</span> \x <span class="ot">-&gt;</span> f x</span></code></pre></div><p>… corresponds to this nameless representation:</p><div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb10-1" tabindex="-1"/><span class="ot">example ::</span> <span class="dt">Syntax</span></span><br><span id="cb10-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb10-2" tabindex="-1"/>example <span class="ot">=</span> <span class="dt">Lambda</span> (<span class="dt">Lambda</span> (<span class="dt">Apply</span> (<span class="dt">Variable</span> <span class="dv">1</span>) (<span class="dt">Variable</span> <span class="dv">0</span>)))</span></code></pre></div><p>Carefully note that the <code>Lambda</code> constructor now has no field for the bound variable name, so it’s as if the user had instead written:</p><div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb11-1" tabindex="-1"/>\ <span class="ot">-&gt;</span> \ <span class="ot">-&gt;</span> <span class="op">@</span><span class="dv">1</span> <span class="op">@</span><span class="dv">0</span></span></code></pre></div><p>… using <code>@n</code> to represent the variable whose De Bruijn index is <code>n</code>.</p><p>The numeric De Bruijn indices refer to bound variables. Specifically, the numeric index <code>0</code> refers to the “closest” or “innermost” variable bound by a lambda:</p><div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb12-1" tabindex="-1"/><span class="co">--                This 0 index …</span></span><br><span id="cb12-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb12-2" tabindex="-1"/><span class="co">--                ↓</span></span><br><span id="cb12-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb12-3" tabindex="-1"/>    \ <span class="ot">-&gt;</span> \ <span class="ot">-&gt;</span> <span class="op">@</span><span class="dv">1</span> <span class="op">@</span><span class="dv">0</span></span><br><span id="cb12-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb12-4" tabindex="-1"/><span class="co">--       ↑ … refers to the variable bound by this lambda</span></span></code></pre></div><p>… and incrementing the index moves to the next outermost lambda:</p><div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb13-1" tabindex="-1"/><span class="co">--             This 1 index …</span></span><br><span id="cb13-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb13-2" tabindex="-1"/><span class="co">--             ↓</span></span><br><span id="cb13-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb13-3" tabindex="-1"/>    \ <span class="ot">-&gt;</span> \ <span class="ot">-&gt;</span> <span class="op">@</span><span class="dv">1</span> <span class="op">@</span><span class="dv">0</span></span><br><span id="cb13-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb13-4" tabindex="-1"/><span class="co">--  ↑ … refers to the variable bound by this lambda</span></span></code></pre></div><p>De Bruijn indices avoid name collisions between bound variables, but they require you to do additional work if you wish to preserve the original variable names. There are several ways to do so, and I’ll present my preferred approach.</p><h4 id="the-trick---part-1">The trick - Part 1</h4><p>We can get the best of both worlds by combining the named and nameless representations into a hybrid representation like this:</p><div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb14-1" tabindex="-1"/><span class="kw">data</span> <span class="dt">Syntax</span></span><br><span id="cb14-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb14-2" tabindex="-1"/>    <span class="ot">=</span> <span class="dt">Variable</span> <span class="dt">String</span> <span class="dt">Int</span></span><br><span id="cb14-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb14-3" tabindex="-1"/>    <span class="op">|</span> <span class="dt">Lambda</span> <span class="dt">String</span> <span class="dt">Syntax</span></span><br><span id="cb14-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb14-4" tabindex="-1"/>    <span class="op">|</span> <span class="dt">Apply</span> <span class="dt">Syntax</span> <span class="dt">Syntax</span></span></code></pre></div><p>I call this representation “namespaced De Bruijn indices”.</p><p>This is almost the exact same as our named representation, except that we have now added an <code>Int</code> field to the <code>Variable</code> constructor. This <code>Int</code> field is morally the same as the De Bruijn index in the nameless representation, except that this time the De Bruijn index is “namespaced” to a specific variable name.</p><p>The easiest way to explain this is with a few examples.</p><p>The following expression:</p><div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb15-1" tabindex="-1"/>\x <span class="ot">-&gt;</span> \y <span class="ot">-&gt;</span> \x <span class="ot">-&gt;</span> x<span class="op">@</span><span class="dv">0</span></span></code></pre></div><p>… corresponds to this syntax tree:</p><div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb16-1" tabindex="-1"/><span class="dt">Lambda</span> <span class="st">&quot;x&quot;</span> (<span class="dt">Lambda</span> <span class="st">&quot;y&quot;</span> (<span class="dt">Lambda</span> <span class="st">&quot;x&quot;</span> (<span class="dt">Variable</span> <span class="st">&quot;x&quot;</span> <span class="dv">0</span>)))</span></code></pre></div><p>… and this curried function returns the third function argument:</p><div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb17-1" tabindex="-1"/><span class="co">--                    This …</span></span><br><span id="cb17-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb17-2" tabindex="-1"/><span class="co">--                    ↓</span></span><br><span id="cb17-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb17-3" tabindex="-1"/>    \x <span class="ot">-&gt;</span> \y <span class="ot">-&gt;</span> \x <span class="ot">-&gt;</span> x<span class="op">@</span><span class="dv">0</span></span><br><span id="cb17-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb17-4" tabindex="-1"/><span class="co">--               ↑ … refers to this bound variable</span></span></code></pre></div><p>… because that is the innermost bound variable named <code>x</code>.</p><p>Similarly, the following expression:</p><div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb18-1" tabindex="-1"/>\x <span class="ot">-&gt;</span> \y <span class="ot">-&gt;</span> \x <span class="ot">-&gt;</span> y<span class="op">@</span><span class="dv">0</span></span></code></pre></div><p>… corresponds to this syntax tree:</p><div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb19-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb19-1" tabindex="-1"/><span class="dt">Lambda</span> <span class="st">&quot;x&quot;</span> (<span class="dt">Lambda</span> <span class="st">&quot;y&quot;</span> (<span class="dt">Lambda</span> <span class="st">&quot;x&quot;</span> (<span class="dt">Variable</span> <span class="st">&quot;y&quot;</span> <span class="dv">0</span>)))</span></code></pre></div><p>… which returns the second function argument:</p><div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb20-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-1" tabindex="-1"/><span class="co">--                    This …</span></span><br><span id="cb20-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-2" tabindex="-1"/><span class="co">--                    ↓</span></span><br><span id="cb20-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-3" tabindex="-1"/>    \x <span class="ot">-&gt;</span> \y <span class="ot">-&gt;</span> \x <span class="ot">-&gt;</span> y<span class="op">@</span><span class="dv">0</span></span><br><span id="cb20-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-4" tabindex="-1"/><span class="co">--         ↑ … refers to this bound variable</span></span></code></pre></div><p>… because that is the innermost bound variable named <code>y</code>.</p><p>Carefully note that our variable still has a De Bruijn index of 0, but we ignore the innermost bound variable named <code>x</code> because we also pair our De Bruijn index with name of the variable we are referring to (<code>y</code>) so we only count bound variables named <code>y</code> when resolving the De Bruijn index.</p><p>Finally, the following expression:</p><div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb21-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb21-1" tabindex="-1"/>\x <span class="ot">-&gt;</span> \y <span class="ot">-&gt;</span> \x <span class="ot">-&gt;</span> x<span class="op">@</span><span class="dv">1</span></span></code></pre></div><p>… corresponds to this syntax tree:</p><div class="sourceCode" id="cb22"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb22-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-1" tabindex="-1"/><span class="dt">Lambda</span> <span class="st">&quot;x&quot;</span> (<span class="dt">Lambda</span> <span class="st">&quot;y&quot;</span> (<span class="dt">Lambda</span> <span class="st">&quot;x&quot;</span> (<span class="dt">Variable</span> <span class="st">&quot;x&quot;</span> <span class="dv">1</span>)))</span></code></pre></div><p>… which returns the first function argument:</p><div class="sourceCode" id="cb23"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb23-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-1" tabindex="-1"/><span class="co">--                    This …</span></span><br><span id="cb23-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-2" tabindex="-1"/><span class="co">--                    ↓</span></span><br><span id="cb23-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-3" tabindex="-1"/>    \x <span class="ot">-&gt;</span> \y <span class="ot">-&gt;</span> \x <span class="ot">-&gt;</span> x<span class="op">@</span><span class="dv">1</span></span><br><span id="cb23-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-4" tabindex="-1"/><span class="co">--   ↑ … refers to this bound variable</span></span></code></pre></div><p>The De Bruijn index is 1, which means that it refers to the second innermost (0-indexed) bound variable named <code>x</code>.</p><p>Notice how this representation lets us refer to <a href="https://en.wikipedia.org/wiki/Variable_shadowing">shadowed variables</a> by their index. These De Bruijn indices are not an internal implementation detail, but are actually available to the user as part of the surface syntax of the language.</p><p>However, we want to avoid littering the code with these De Bruijn indices, which brings us to the second part of the trick.</p><h4 id="the-trick---part-2">The trick - Part 2</h4><p>The next step is to add syntactic sugar to the language by allowing users to omit the index in the source code, which defaults the index to <code>0</code>. This means that an expression that never references shadowed variables never needs to specify a De Bruijn index.</p><p>For example, instead of writing this:</p><div class="sourceCode" id="cb24"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb24-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-1" tabindex="-1"/>\x <span class="ot">-&gt;</span> \y <span class="ot">-&gt;</span> \x <span class="ot">-&gt;</span> x<span class="op">@</span><span class="dv">0</span></span></code></pre></div><p>… we can elide the index to simplify the code to:</p><div class="sourceCode" id="cb25"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb25-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb25-1" tabindex="-1"/>\x <span class="ot">-&gt;</span> \y <span class="ot">-&gt;</span> \x <span class="ot">-&gt;</span> x</span></code></pre></div><p>… which will still parse as:</p><div class="sourceCode" id="cb26"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb26-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb26-1" tabindex="-1"/><span class="dt">Lambda</span> <span class="st">&quot;x&quot;</span> (<span class="dt">Lambda</span> <span class="st">&quot;y&quot;</span> (<span class="dt">Lambda</span> <span class="st">&quot;x&quot;</span> (<span class="dt">Variable</span> <span class="st">&quot;x&quot;</span> <span class="dv">0</span>)))</span></code></pre></div><p>Similarly, we can simplify this:</p><div class="sourceCode" id="cb27"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb27-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb27-1" tabindex="-1"/>\x <span class="ot">-&gt;</span> \y <span class="ot">-&gt;</span> \x <span class="ot">-&gt;</span> y<span class="op">@</span><span class="dv">0</span></span></code></pre></div><p>… to this:</p><div class="sourceCode" id="cb28"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb28-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb28-1" tabindex="-1"/>\x <span class="ot">-&gt;</span> \y <span class="ot">-&gt;</span> \x <span class="ot">-&gt;</span> y</span></code></pre></div><p>… which will still parse as:</p><div class="sourceCode" id="cb29"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb29-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb29-1" tabindex="-1"/><span class="dt">Lambda</span> <span class="st">&quot;x&quot;</span> (<span class="dt">Lambda</span> <span class="st">&quot;y&quot;</span> (<span class="dt">Lambda</span> <span class="st">&quot;x&quot;</span> (<span class="dt">Variable</span> <span class="st">&quot;y&quot;</span> <span class="dv">0</span>)))</span></code></pre></div><p>However, we cannot use this syntactic sugar to simplify the final example:</p><div class="sourceCode" id="cb30"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb30-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb30-1" tabindex="-1"/>\x <span class="ot">-&gt;</span> \y <span class="ot">-&gt;</span> \x <span class="ot">-&gt;</span> x<span class="op">@</span><span class="dv">1</span></span></code></pre></div><p>… since the index is non-zero. Any code that references a shadowed variable still needs to use an explicit De Bruijn index to do so.</p><p>Vice versa, we also omit zero indices when pretty-printing code. When we pretty-print this syntax tree:</p><div class="sourceCode" id="cb31"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb31-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb31-1" tabindex="-1"/><span class="dt">Lambda</span> <span class="st">&quot;x&quot;</span> (<span class="dt">Lambda</span> <span class="st">&quot;y&quot;</span> (<span class="dt">Lambda</span> <span class="st">&quot;x&quot;</span> (<span class="dt">Variable</span> <span class="st">&quot;x&quot;</span> <span class="dv">0</span>)))</span></code></pre></div><p>… we don’t include the index:</p><div class="sourceCode" id="cb32"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb32-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-1" tabindex="-1"/>\x <span class="ot">-&gt;</span> \y <span class="ot">-&gt;</span> \x <span class="ot">-&gt;</span> x</span></code></pre></div><p>This syntactic sugar ensures that most users do not need to be aware that indices exist at all when writing code. The user only encounters the indices in two scenarios:</p><ul><li><p>The user wishes to explicitly reference a shadowed variable</p><p>For example, in the following expression:</p><div class="sourceCode" id="cb33"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb33-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb33-1" tabindex="-1"/>\x <span class="ot">-&gt;</span> \y <span class="ot">-&gt;</span> \x <span class="ot">-&gt;</span> x<span class="op">@</span><span class="dv">1</span></span></code></pre></div><p>… the user might prefer to use the built-in language support for disambiguating variables of the same name rather than renaming one of the two variables named <code>x</code>.</p></li><li><p>The indices appear in a β-reduced result</p><p>For example, this expression has no user-visible De Bruijn indices:</p><div class="sourceCode" id="cb34"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb34-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb34-1" tabindex="-1"/>\x <span class="ot">-&gt;</span> (\y <span class="ot">-&gt;</span> \x <span class="ot">-&gt;</span> y) x</span></code></pre></div><p>… but if you β-reduce the expression (I’ll cover how in the <a href="https://www.haskellforall.com/feeds/posts/default#appendix---implementation">Appendix</a>) and pretty-print the β-reduced expression then the result will introduce a non-zero De Bruijn index to disambiguate the two variables named <code>x</code>:</p><div class="sourceCode" id="cb35"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb35-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb35-1" tabindex="-1"/>\x <span class="ot">-&gt;</span> \x <span class="ot">-&gt;</span> x<span class="op">@</span><span class="dv">1</span></span></code></pre></div></li></ul><p>In fact, the latter scenario is the reason I originally adopted this trick: I wanted to be able to display β-reduced functions to the end user while preserving the original variable names as much as possible.</p><p>Note that De Bruijn indices don’t appear when a β-reduced expression does not reference any shadowed variables. For example, if you β-reduce this expression:</p><div class="sourceCode" id="cb36"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb36-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb36-1" tabindex="-1"/>(\f <span class="ot">-&gt;</span> f f) (\x <span class="ot">-&gt;</span> x)</span></code></pre></div><p>… the result has no De Bruijn index (because the index is 0 and is therefore elided by the pretty-printer):</p><div class="sourceCode" id="cb37"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb37-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb37-1" tabindex="-1"/>\x <span class="ot">-&gt;</span> x</span></code></pre></div><h4 id="the-trick---part-3">The trick - Part 3</h4><p>One of the benefits of the traditional nameless representation using (non-namespaced) De Bruijn indices is that you get α-equivalence for free. Two nameless expressions are α-equivalent if they are syntactically identical. We can build upon this useful property to derive a compact algorithm for α-equivalence of “namespaced De Bruijn indices”.</p><p>The trick is to recognize that namespaced De Bruijn indices reduce to ordinary De Bruijn indices in the degenerate case when you rename all variables to the same name. I’ll call this renaming process “α-reduction”.</p><p>For example, if we α-reduce the following expression by renaming all of the: variables to <code>_</code>:</p><div class="sourceCode" id="cb38"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb38-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb38-1" tabindex="-1"/>\x <span class="ot">-&gt;</span> \y <span class="ot">-&gt;</span> \x <span class="ot">-&gt;</span> x<span class="op">@</span><span class="dv">1</span></span></code></pre></div><p>… then we get this result:</p><div class="sourceCode" id="cb39"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb39-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb39-1" tabindex="-1"/>\_ <span class="ot">-&gt;</span> \_ <span class="ot">-&gt;</span> \_ <span class="ot">-&gt;</span> _<span class="op">@</span><span class="dv">2</span></span></code></pre></div><p>See the <a href="https://www.haskellforall.com/feeds/posts/default#appendix---implementation">Appendix</a> for the α-reduction algorithm.</p><p>Equipped with α-reduction, then we can derive α-equivalence: two expressions are α-equivalent if their α-reduced forms are syntactically identical.</p><p>For example, this expression:</p><div class="sourceCode" id="cb40"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb40-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb40-1" tabindex="-1"/>\x <span class="ot">-&gt;</span> x</span></code></pre></div><p>… and this expression:</p><div class="sourceCode" id="cb41"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb41-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb41-1" tabindex="-1"/>\y <span class="ot">-&gt;</span> y</span></code></pre></div><p>… both α-reduce to:</p><div class="sourceCode" id="cb42"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb42-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb42-1" tabindex="-1"/>\_ <span class="ot">-&gt;</span> _</span></code></pre></div><p>… so they are α-equivalent.</p><h4 id="benefits">Benefits</h4><p>There are a few benefits of using this trick that motivate me to use this in all of my interpreted languages:</p><ul><li><p>This trick improves the readability of β-reduced functions</p><p>β-reduced functions preserve the original variable names and this trick doesn’t suffer from the rename-related name pollution that plagues other capture-avoiding substitution algorithms. In particular, β-reduced expressions only display De Bruijn indices when absolutely necessary (if they reference a shadowed variable) and they otherwise use the original pristine variable names.</p></li><li><p>This trick simplifies the internal implementation</p><p>You don’t need to maintain two separate syntax trees for a named and nameless representation. You can use the same syntax tree for both since any named syntax tree can be α-reduced to give the equivalent nameless syntax tree.</p></li><li><p>This trick enables userland support for referencing shadowed variables</p><p>I know some people think that referencing shadowed variable names is a misfeature. However, I personally feel that resolving name collisions by adding <code>'</code> or <code>_</code> characters to the end of variable names is less principled than having language support for resolving name collisions using optional De Bruijn indices.</p></li><li><p>(Not shown) This trick can sometimes improve type errors</p><p>To be precise, this trick improves the inferred types displayed in error messages when using explicit universal quantification.</p><p>Type variables also have to avoid name collisions, so if you use the same namespaced De Bruijn representation for your types then you avoid polluting your inferred types and error messages with junk type variables like <code>a14</code>.</p><p>This post doesn’t cover the equivalent type-level trick, but you can refer to the <a href="https://github.com/dhall-lang/dhall-lang/tree/master/standard">Dhall standard</a> if you need an example of a language that uses this trick.</p></li></ul><h4 id="conclusion">Conclusion</h4><p>I believe that namespaced De Bruijn indices are most appropriate for languages that are (A) strongly normalizing (like Dhall) and (B) interpreted, because such languages tend to support pretty-printing β-reduced functions.</p><p>I think this trick is also useful to a lesser extent for all interpreted languages, if only because the implementation is (in my opinion) simpler and more elegant than other algorithms for capture-avoiding substitution (See the <a href="https://www.haskellforall.com/feeds/posts/default#appendix---implementation">Appendix</a> below).</p><p>On the other hand, compiled languages will likely not benefit much from this trick since they typically have no need to preserve the original variable names and they also will use an intermediate representation that is very different from the concrete syntax tree.</p><h4 id="appendix---implementation">Appendix - Implementation</h4><p>This section provides Haskell code specifying how to α-reduce and β-reduce a syntax tree that uses namespaced De Bruijn indices.</p><p>This reference implementation is not the most efficient implementation, but it’s the simplest one which I use for pedagogical purposes. If you’re interested in efficiency then check out my <a href="https://github.com/Gabriel439/grace">Grace</a> project, which mixes this trick with the more efficient <a href="https://en.wikipedia.org/wiki/Normalisation_by_evaluation">normalization-by-evaluation</a> algorithm.</p><p>I also don’t include code for the parser or pretty-printer, because the only interesting part is the syntactic sugar for handling variables with a De Bruijn index of <code>0</code>. Again, check out <a href="https://github.com/Gabriel439/grace">Grace</a> if you want to refer to a more complete implementation.</p><div class="sourceCode" id="cb43"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb43-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-1" tabindex="-1"/><span class="co">-- | Syntax tree</span></span><br><span id="cb43-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-2" tabindex="-1"/><span class="kw">data</span> <span class="dt">Syntax</span></span><br><span id="cb43-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-3" tabindex="-1"/>    <span class="ot">=</span> <span class="dt">Variable</span> <span class="dt">String</span> <span class="dt">Int</span></span><br><span id="cb43-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-4" tabindex="-1"/>    <span class="op">|</span> <span class="dt">Lambda</span> <span class="dt">String</span> <span class="dt">Syntax</span></span><br><span id="cb43-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-5" tabindex="-1"/>    <span class="op">|</span> <span class="dt">Apply</span> <span class="dt">Syntax</span> <span class="dt">Syntax</span></span><br><span id="cb43-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-6" tabindex="-1"/>    <span class="kw">deriving</span> (<span class="dt">Eq</span>, <span class="dt">Show</span>)</span><br><span id="cb43-7"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-7" tabindex="-1"/></span><br><span id="cb43-8"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-8" tabindex="-1"/><span class="co">{-| Increase the index of all bound variables matching the given variable name</span></span><br><span id="cb43-9"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-9" tabindex="-1"/></span><br><span id="cb43-10"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-10" tabindex="-1"/><span class="co">    This is modified from the Shifting definition in Pierce's \&quot;Types and</span></span><br><span id="cb43-11"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-11" tabindex="-1"/><span class="co">    Programming Languages\&quot; by adding an additional argument for the namespace</span></span><br><span id="cb43-12"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-12" tabindex="-1"/><span class="co">    to shift</span></span><br><span id="cb43-13"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-13" tabindex="-1"/><span class="co">-}</span></span><br><span id="cb43-14"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-14" tabindex="-1"/>shift</span><br><span id="cb43-15"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-15" tabindex="-1"/><span class="ot">    ::</span> <span class="dt">Int</span></span><br><span id="cb43-16"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-16" tabindex="-1"/>    <span class="co">-- ^ The amount to shift by</span></span><br><span id="cb43-17"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-17" tabindex="-1"/>    <span class="ot">-&gt;</span> <span class="dt">String</span></span><br><span id="cb43-18"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-18" tabindex="-1"/>    <span class="co">-- ^ The variable name to match (a.k.a. the namespace)</span></span><br><span id="cb43-19"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-19" tabindex="-1"/>    <span class="ot">-&gt;</span> <span class="dt">Int</span></span><br><span id="cb43-20"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-20" tabindex="-1"/>    <span class="co">-- ^ The minimum bound for which indices to shift</span></span><br><span id="cb43-21"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-21" tabindex="-1"/>    <span class="ot">-&gt;</span> <span class="dt">Syntax</span></span><br><span id="cb43-22"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-22" tabindex="-1"/>    <span class="co">-- ^ The expression to shift</span></span><br><span id="cb43-23"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-23" tabindex="-1"/>    <span class="ot">-&gt;</span> <span class="dt">Syntax</span></span><br><span id="cb43-24"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-24" tabindex="-1"/>shift offset namespace minIndex syntax <span class="ot">=</span></span><br><span id="cb43-25"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-25" tabindex="-1"/>    <span class="kw">case</span> syntax <span class="kw">of</span></span><br><span id="cb43-26"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-26" tabindex="-1"/>        <span class="dt">Variable</span> name <span class="fu">index</span> <span class="ot">-&gt;</span> <span class="dt">Variable</span> name index'</span><br><span id="cb43-27"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-27" tabindex="-1"/>          <span class="kw">where</span></span><br><span id="cb43-28"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-28" tabindex="-1"/>            index'</span><br><span id="cb43-29"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-29" tabindex="-1"/>                <span class="op">|</span> name <span class="op">==</span> namespace <span class="op">&amp;&amp;</span> minIndex <span class="op">&lt;=</span> <span class="fu">index</span> <span class="ot">=</span> <span class="fu">index</span> <span class="op">+</span> offset</span><br><span id="cb43-30"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-30" tabindex="-1"/>                <span class="op">|</span> <span class="fu">otherwise</span>                              <span class="ot">=</span> <span class="fu">index</span></span><br><span id="cb43-31"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-31" tabindex="-1"/></span><br><span id="cb43-32"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-32" tabindex="-1"/>        <span class="dt">Lambda</span> name body <span class="ot">-&gt;</span> <span class="dt">Lambda</span> name body'</span><br><span id="cb43-33"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-33" tabindex="-1"/>          <span class="kw">where</span></span><br><span id="cb43-34"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-34" tabindex="-1"/>            minIndex'</span><br><span id="cb43-35"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-35" tabindex="-1"/>                <span class="op">|</span> name <span class="op">==</span> namespace <span class="ot">=</span> minIndex <span class="op">+</span> <span class="dv">1</span></span><br><span id="cb43-36"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-36" tabindex="-1"/>                <span class="op">|</span> <span class="fu">otherwise</span>         <span class="ot">=</span> minIndex</span><br><span id="cb43-37"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-37" tabindex="-1"/></span><br><span id="cb43-38"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-38" tabindex="-1"/>            body' <span class="ot">=</span> shift offset namespace minIndex' body</span><br><span id="cb43-39"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-39" tabindex="-1"/></span><br><span id="cb43-40"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-40" tabindex="-1"/>        <span class="dt">Apply</span> function argument <span class="ot">-&gt;</span> <span class="dt">Apply</span> function' argument'</span><br><span id="cb43-41"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-41" tabindex="-1"/>          <span class="kw">where</span></span><br><span id="cb43-42"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-42" tabindex="-1"/>            function' <span class="ot">=</span> shift offset namespace minIndex function</span><br><span id="cb43-43"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-43" tabindex="-1"/></span><br><span id="cb43-44"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-44" tabindex="-1"/>            argument' <span class="ot">=</span> shift offset namespace minIndex argument</span><br><span id="cb43-45"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-45" tabindex="-1"/></span><br><span id="cb43-46"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-46" tabindex="-1"/><span class="co">{-| Substitute the given variable name and index with an expression</span></span><br><span id="cb43-47"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-47" tabindex="-1"/></span><br><span id="cb43-48"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-48" tabindex="-1"/><span class="co">    This is modified from the Substitution definition in Pierce's \&quot;Types and</span></span><br><span id="cb43-49"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-49" tabindex="-1"/><span class="co">    Programming Languages\&quot; by adding an additional argument for the variable</span></span><br><span id="cb43-50"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-50" tabindex="-1"/><span class="co">    index</span></span><br><span id="cb43-51"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-51" tabindex="-1"/><span class="co">-}</span></span><br><span id="cb43-52"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-52" tabindex="-1"/>substitute</span><br><span id="cb43-53"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-53" tabindex="-1"/><span class="ot">    ::</span> <span class="dt">Syntax</span></span><br><span id="cb43-54"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-54" tabindex="-1"/>    <span class="co">-- ^ The expression to substitute into</span></span><br><span id="cb43-55"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-55" tabindex="-1"/>    <span class="ot">-&gt;</span> <span class="dt">String</span></span><br><span id="cb43-56"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-56" tabindex="-1"/>    <span class="co">-- ^ The name of the variable to replace</span></span><br><span id="cb43-57"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-57" tabindex="-1"/>    <span class="ot">-&gt;</span> <span class="dt">Int</span></span><br><span id="cb43-58"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-58" tabindex="-1"/>    <span class="co">-- ^ The index of the variable to replace</span></span><br><span id="cb43-59"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-59" tabindex="-1"/>    <span class="ot">-&gt;</span> <span class="dt">Syntax</span></span><br><span id="cb43-60"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-60" tabindex="-1"/>    <span class="co">-- ^ The expression to substitute in place of the given variable</span></span><br><span id="cb43-61"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-61" tabindex="-1"/>    <span class="ot">-&gt;</span> <span class="dt">Syntax</span></span><br><span id="cb43-62"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-62" tabindex="-1"/>substitute expression name <span class="fu">index</span> replacement <span class="ot">=</span></span><br><span id="cb43-63"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-63" tabindex="-1"/>    <span class="kw">case</span> expression <span class="kw">of</span></span><br><span id="cb43-64"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-64" tabindex="-1"/>        <span class="dt">Variable</span> name' index'</span><br><span id="cb43-65"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-65" tabindex="-1"/>            <span class="op">|</span> name <span class="op">==</span> name' <span class="op">&amp;&amp;</span> <span class="fu">index</span> <span class="op">==</span> index' <span class="ot">-&gt;</span> replacement</span><br><span id="cb43-66"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-66" tabindex="-1"/>            <span class="op">|</span> <span class="fu">otherwise</span>                        <span class="ot">-&gt;</span> <span class="dt">Variable</span> name' index'</span><br><span id="cb43-67"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-67" tabindex="-1"/></span><br><span id="cb43-68"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-68" tabindex="-1"/>        <span class="dt">Lambda</span> name' body <span class="ot">-&gt;</span> <span class="dt">Lambda</span> name' body'</span><br><span id="cb43-69"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-69" tabindex="-1"/>          <span class="kw">where</span></span><br><span id="cb43-70"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-70" tabindex="-1"/>            index'</span><br><span id="cb43-71"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-71" tabindex="-1"/>                <span class="op">|</span> name <span class="op">==</span> name' <span class="ot">=</span> <span class="fu">index</span> <span class="op">+</span> <span class="dv">1</span></span><br><span id="cb43-72"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-72" tabindex="-1"/>                <span class="op">|</span> <span class="fu">otherwise</span>     <span class="ot">=</span> <span class="fu">index</span></span><br><span id="cb43-73"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-73" tabindex="-1"/></span><br><span id="cb43-74"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-74" tabindex="-1"/>            shiftedBody <span class="ot">=</span> shift <span class="dv">1</span> name' <span class="dv">0</span> replacement</span><br><span id="cb43-75"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-75" tabindex="-1"/></span><br><span id="cb43-76"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-76" tabindex="-1"/>            body' <span class="ot">=</span> substitute body name index' shiftedBody</span><br><span id="cb43-77"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-77" tabindex="-1"/></span><br><span id="cb43-78"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-78" tabindex="-1"/>        <span class="dt">Apply</span> function argument <span class="ot">-&gt;</span> <span class="dt">Apply</span> function' argument'</span><br><span id="cb43-79"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-79" tabindex="-1"/>          <span class="kw">where</span></span><br><span id="cb43-80"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-80" tabindex="-1"/>            function' <span class="ot">=</span> substitute function name <span class="fu">index</span> replacement</span><br><span id="cb43-81"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-81" tabindex="-1"/></span><br><span id="cb43-82"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-82" tabindex="-1"/>            argument' <span class="ot">=</span> substitute argument name <span class="fu">index</span> replacement</span><br><span id="cb43-83"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-83" tabindex="-1"/></span><br><span id="cb43-84"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-84" tabindex="-1"/><span class="co">-- | β-reduce an expression</span></span><br><span id="cb43-85"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-85" tabindex="-1"/><span class="ot">betaReduce ::</span> <span class="dt">Syntax</span> <span class="ot">-&gt;</span> <span class="dt">Syntax</span></span><br><span id="cb43-86"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-86" tabindex="-1"/>betaReduce syntax <span class="ot">=</span></span><br><span id="cb43-87"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-87" tabindex="-1"/>    <span class="kw">case</span> syntax <span class="kw">of</span></span><br><span id="cb43-88"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-88" tabindex="-1"/>        <span class="dt">Variable</span> name <span class="fu">index</span> <span class="ot">-&gt;</span> <span class="dt">Variable</span> name <span class="fu">index</span></span><br><span id="cb43-89"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-89" tabindex="-1"/></span><br><span id="cb43-90"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-90" tabindex="-1"/>        <span class="dt">Lambda</span> name body <span class="ot">-&gt;</span> <span class="dt">Lambda</span> name body'</span><br><span id="cb43-91"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-91" tabindex="-1"/>          <span class="kw">where</span></span><br><span id="cb43-92"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-92" tabindex="-1"/>            body' <span class="ot">=</span> betaReduce body</span><br><span id="cb43-93"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-93" tabindex="-1"/></span><br><span id="cb43-94"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-94" tabindex="-1"/>        <span class="dt">Apply</span> function argument <span class="ot">-&gt;</span></span><br><span id="cb43-95"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-95" tabindex="-1"/>            <span class="kw">case</span> function' <span class="kw">of</span></span><br><span id="cb43-96"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-96" tabindex="-1"/>                <span class="dt">Lambda</span> name body <span class="ot">-&gt;</span> body'</span><br><span id="cb43-97"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-97" tabindex="-1"/>                  <span class="kw">where</span></span><br><span id="cb43-98"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-98" tabindex="-1"/>                    shiftedArgument <span class="ot">=</span> shift <span class="dv">1</span> name <span class="dv">0</span> argument</span><br><span id="cb43-99"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-99" tabindex="-1"/></span><br><span id="cb43-100"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-100" tabindex="-1"/>                    substitutedBody <span class="ot">=</span> substitute body name <span class="dv">0</span> shiftedArgument</span><br><span id="cb43-101"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-101" tabindex="-1"/></span><br><span id="cb43-102"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-102" tabindex="-1"/>                    unshiftedBody <span class="ot">=</span> shift (<span class="op">-</span><span class="dv">1</span>) name <span class="dv">0</span> substitutedBody</span><br><span id="cb43-103"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-103" tabindex="-1"/></span><br><span id="cb43-104"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-104" tabindex="-1"/>                    body' <span class="ot">=</span> betaReduce unshiftedBody</span><br><span id="cb43-105"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-105" tabindex="-1"/></span><br><span id="cb43-106"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-106" tabindex="-1"/>                _ <span class="ot">-&gt;</span> <span class="dt">Apply</span> function' argument'</span><br><span id="cb43-107"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-107" tabindex="-1"/>          <span class="kw">where</span></span><br><span id="cb43-108"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-108" tabindex="-1"/>            function' <span class="ot">=</span> betaReduce function</span><br><span id="cb43-109"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-109" tabindex="-1"/></span><br><span id="cb43-110"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-110" tabindex="-1"/>            argument' <span class="ot">=</span> betaReduce argument</span><br><span id="cb43-111"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-111" tabindex="-1"/></span><br><span id="cb43-112"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-112" tabindex="-1"/><span class="co">-- | α-reduce an expression</span></span><br><span id="cb43-113"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-113" tabindex="-1"/><span class="ot">alphaReduce ::</span> <span class="dt">Syntax</span> <span class="ot">-&gt;</span> <span class="dt">Syntax</span></span><br><span id="cb43-114"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-114" tabindex="-1"/>alphaReduce syntax <span class="ot">=</span></span><br><span id="cb43-115"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-115" tabindex="-1"/>    <span class="kw">case</span> syntax <span class="kw">of</span></span><br><span id="cb43-116"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-116" tabindex="-1"/>        <span class="dt">Variable</span> name <span class="fu">index</span> <span class="ot">-&gt;</span> <span class="dt">Variable</span> name <span class="fu">index</span></span><br><span id="cb43-117"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-117" tabindex="-1"/></span><br><span id="cb43-118"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-118" tabindex="-1"/>        <span class="dt">Lambda</span> name body <span class="ot">-&gt;</span> <span class="dt">Lambda</span> <span class="st">&quot;_&quot;</span> body'</span><br><span id="cb43-119"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-119" tabindex="-1"/>          <span class="kw">where</span></span><br><span id="cb43-120"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-120" tabindex="-1"/>            shiftedBody <span class="ot">=</span> shift <span class="dv">1</span> <span class="st">&quot;_&quot;</span> <span class="dv">0</span> body</span><br><span id="cb43-121"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-121" tabindex="-1"/></span><br><span id="cb43-122"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-122" tabindex="-1"/>            substitutedBody <span class="ot">=</span> substitute shiftedBody name <span class="dv">0</span> (<span class="dt">Variable</span> <span class="st">&quot;_&quot;</span> <span class="dv">0</span>)</span><br><span id="cb43-123"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-123" tabindex="-1"/></span><br><span id="cb43-124"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-124" tabindex="-1"/>            unshiftedBody <span class="ot">=</span> shift (<span class="op">-</span><span class="dv">1</span>) name <span class="dv">0</span> substitutedBody</span><br><span id="cb43-125"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-125" tabindex="-1"/></span><br><span id="cb43-126"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-126" tabindex="-1"/>            body' <span class="ot">=</span> alphaReduce unshiftedBody</span><br><span id="cb43-127"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-127" tabindex="-1"/></span><br><span id="cb43-128"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-128" tabindex="-1"/>        <span class="dt">Apply</span> function argument <span class="ot">-&gt;</span> <span class="dt">Apply</span> function' argument'</span><br><span id="cb43-129"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-129" tabindex="-1"/>          <span class="kw">where</span></span><br><span id="cb43-130"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-130" tabindex="-1"/>            function' <span class="ot">=</span> alphaReduce function</span><br><span id="cb43-131"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-131" tabindex="-1"/></span><br><span id="cb43-132"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-132" tabindex="-1"/>            argument' <span class="ot">=</span> alphaReduce argument</span><br><span id="cb43-133"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-133" tabindex="-1"/></span><br><span id="cb43-134"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-134" tabindex="-1"/><span class="co">-- | Returns `True` if the two input expressions are α-equivalent</span></span><br><span id="cb43-135"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-135" tabindex="-1"/><span class="ot">alphaEquivalent ::</span> <span class="dt">Syntax</span> <span class="ot">-&gt;</span> <span class="dt">Syntax</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span></span><br><span id="cb43-136"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-136" tabindex="-1"/>alphaEquivalent left right <span class="ot">=</span> alphaReduce left <span class="op">==</span> alphaReduce right</span></code></pre></div><h4 id="appendix---history">Appendix - History</h4><p>I actually first introduced this feature in <a href="https://github.com/Gabriel439/Haskell-Morte-Library">Morte</a>, not Dhall. The idea originated from the discussion on this <a href="https://github.com/Gabriel439/Haskell-Morte-Library/issues/1">issue</a>.</p></div>
    </content>
    <updated>2021-08-14T20:01:54Z</updated>
    <published>2021-08-13T15:07:00Z</published>
    <author>
      <name>Gabriel Gonzalez</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/01917800488530923694</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-1777990983847811806</id>
      <author>
        <name>Gabriel Gonzalez</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/01917800488530923694</uri>
      </author>
      <link href="https://www.haskellforall.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml">
      <link href="https://www.blogger.com/feeds/1777990983847811806/posts/default" rel="self" type="application/atom+xml">
      <link href="https://www.haskellforall.com/" rel="alternate" type="text/html">
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html">
      <link href="https://www.blogger.com/feeds/1777990983847811806/posts/default?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml">
      <title>Haskell for all</title>
      <updated>2021-08-31T13:52:52Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://haskell.org/ghc/blog/20210814-ghc-8.10.6-released.html</id>
    <link href="http://haskell.org/ghc/blog/20210814-ghc-8.10.6-released.html" rel="alternate" type="text/html">
    <title>GHC 8.10.6 is now available</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><h1>GHC 8.10.6 is now available</h1>
<h4 class="text-muted">Zubin Duggal - 2021-08-14</h4>

<p>The GHC team is very pleased to announce the availability of GHC 8.10.6. Source and binary distributions are available at the <a href="https://downloads.haskell.org/ghc/8.10.6/">usual place</a>.</p>
<p>This is a bugfix release, fixing many issues present in GHC 8.10.5, including:</p>
<ul>
<li><p>A fix for segmentation faults in GHCi on <code>aarch64-darwin</code> due to an incorrect foreign import in <code>haskeline</code>. See <a href="https://www.haskell.org/ghc/blog/20210709-capi-usage.html">this blog post</a> by Ben Gamari for more details on how your library could be affected.</p></li>
<li><p>A fix for a critical bug affecting Haskell Language Server (HLS) among other applications caused by missing RTS symbols required for statically linked builds of the GHC library (<a href="https://gitlab.haskell.org/ghc/ghc/issues/19763">#19763</a>).</p></li>
<li><p>No longer emitting spurious warnings for LLVM versions (LLVM 9-12) that were actually supported (<a href="https://gitlab.haskell.org/ghc/ghc/issues/19973">#19973</a>, <a href="https://gitlab.haskell.org/ghc/ghc/issues/19829">#19829</a>, <a href="https://gitlab.haskell.org/ghc/ghc/issues/19959">#19959</a>).</p></li>
<li><p>Numerous bug fixes for the new LLVM based <code>aarch64-darwin</code> backend (<a href="https://gitlab.haskell.org/ghc/ghc/issues/20132">#20132</a>).</p></li>
<li><p>Fixes and stability improvements for the non-moving GC (<a href="https://gitlab.haskell.org/ghc/ghc/issues/19715">#19715</a>).</p></li>
<li><p>Many other bug fixes for the RTS (<a href="https://gitlab.haskell.org/ghc/ghc/issues/18033">#18033</a>, <a href="https://gitlab.haskell.org/ghc/ghc/issues/20132">#20132</a>, <a href="https://gitlab.haskell.org/ghc/ghc/issues/20093">#20093</a>, <a href="https://gitlab.haskell.org/ghc/ghc/issues/19421">#19421</a>).</p></li>
<li><p>Many packaging related fixes, including versioned <code>ghc-pkg</code> executables (<a href="https://gitlab.haskell.org/ghc/ghc/issues/20087">#20087</a>), and actually distributing GHC versions linked against the <code>integer-simple</code> big integer backend (<a href="https://gitlab.haskell.org/ghc/ghc/issues/18967">#18967</a>, <a href="https://gitlab.haskell.org/ghc/ghc/issues/19953">#19953</a>) on both Windows and Alpine Linux. Previous releases were still linked against the <code>GMP</code> library due to a misconfiguration of the builders.</p></li>
<li><p>A significant refactoring of <code>process</code> fixing numerous bugs mostly on Apple platforms (<a href="https://gitlab.haskell.org/ghc/ghc/issues/19994">#19994</a>, <a href="https://github.com/haskell/process/pull/208">process refactoring</a>).</p></li>
<li><p>A FreeBSD release after fixing issues that caused GHC 8.10.5 to be unable to build (<a href="https://gitlab.haskell.org/ghc/ghc/issues/19958">#19958</a>, <a href="https://gitlab.haskell.org/ghc/ghc/issues/19948">#19948</a>).</p></li>
<li><p>Bug fixes for the linker on Darwin platforms (<a href="https://gitlab.haskell.org/ghc/ghc/issues/20004">#20004</a>, <a href="https://gitlab.haskell.org/ghc/ghc/issues/19968">#19968</a>, <a href="https://gitlab.haskell.org/ghc/ghc/issues/19950">#19950</a>).</p></li>
</ul>
<p>A complete list of bug fixes and improvements can be found in the <a href="https://downloads.haskell.org/ghc/8.10.6/docs/html/users_guide/8.10.6-notes.html">release notes</a>.</p>
<p>As always, feel free to report any issues you encounter via <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/new">gitlab.haskell.org</a>.</p></div>
    </summary>
    <updated>2021-08-14T00:00:00Z</updated>
    <published>2021-08-14T00:00:00Z</published>
    <author>
      <name>ghc-devs</name>
    </author>
    <source>
      <id>http://haskell.org/ghc</id>
      <link href="http://haskell.org/ghc" rel="alternate" type="text/html">
      <link href="http://haskell.org/ghc/rss.xml" rel="self" type="application/rss+xml">
      <title>GHC Developer blog</title>
      <updated>2021-08-27T00:00:00Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://gilmi.me/post/2021/08/14/hs-core-tools</id>
    <link href="https://gilmi.me/post/2021/08/14/hs-core-tools" rel="alternate" type="text/html">
    <title>Core Haskell tools</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>In this guide we'll take a look at a few core tools that are installed
with the Haskell toolchain. Specifically, <code>ghc</code>, <code>runghc</code> and <code>ghci</code>.
These tools can be used to compile, interpret or explore Haskell programs.</p><p>If you haven't installed a Haskell toolchain yet, jump over to the <a href="https://haskell.org/downloads">haskell.org/downloads</a>
page.</p><p>Note: if you installed your Haskell toolchain using the stack tool only,
and these programs (<code>ghc</code>, <code>ghci</code>, <code>runghc</code>) are not available in your terminal,
prefix the commands with <code>stack exec -- </code>. So <code>&lt;command&gt;</code> becomes <code>stack exec -- &lt;command&gt;</code>.
See the documentation in the
<a href="https://docs.haskellstack.org/en/stable/GUIDE/#exec">Stack user guide</a>
for more details.</p><ul><li><a href="https://gilmi.me/blog/rss#compiling-programs-with-ghc">Compiling programs with ghc</a><ul><li><a href="https://gilmi.me/blog/rss#common-options-for-ghc">Common options for GHC</a><ul><li><a href="https://gilmi.me/blog/rss#warnings">Warnings</a></li><li><a href="https://gilmi.me/blog/rss#optimisations">Optimisations</a></li></ul></li></ul></li><li><a href="https://gilmi.me/blog/rss#an-interactive-environment">An interactive environment</a><ul><li><a href="https://gilmi.me/blog/rss#using-external-packages-in-ghci">Using external packages in ghci</a></li></ul></li><li><a href="https://gilmi.me/blog/rss#additional-information">Additional information</a></li></ul><p>First, let's start by opening your system's command line interface
and running <code>ghc --version</code> to make sure we have successfully
installed a Haskell toolchain:</p><pre><code>➜ ghc --version
The Glorious Glasgow Haskell Compilation System, version 9.0.1</code></pre><p>If this fails, consult <a href="https://gilmi.me/downloads">the downloads page</a> for information on
how to install Haskell on your computer.</p><h2><span id="compiling-programs-with-ghc">Compiling programs with ghc</span></h2><p>Running <code>ghc</code> invokes the Glasgow Haskell Compiler (GHC), and can be used to
compile Haskell modules and programs into native executables and libraries.</p><p>Create a new Haskell source file named <code>hello.hs</code>,
and write the following code in it:</p><pre><code class="hs">main = putStrLn &quot;Hello, Haskell!&quot;</code></pre><p>Now, we can compile the program by invoking <code>ghc</code> with the file name:</p><pre><code class="sh">➜ ghc hello.hs
[1 of 1] Compiling Main             ( hello.hs, hello.o )
Linking hello ...</code></pre><p>GHC created the following files:</p><ol><li><code>hello.hi</code> - Haskell interface file, we won't discuss this file in this article</li><li><code>hello.o</code> - Object file, the output of the compiler before linking,
we won't discuss this file in this article either.</li><li><code>hello</code> (or <code>hello.exe</code> on Microsoft Windows) - A native runnable
executable.</li></ol><p>GHC will produce an executable when the source file satisfies both conditions:</p><ol><li>Defines the <code>main</code> function in the source file</li><li>Defines the module name to be <code>Main</code> (this can be done by adding
<code>module Main where</code> at the top of the file), or does not have
a module declaration (which is then inferred as the module <code>Main</code>).</li></ol><p>Otherwise, it will only produce the <code>.o</code> and <code>.hi</code> files.</p><p>In our case, we have defined <code>main</code> and omitted the module declaration,
so GHC created an executable for us. And we can run it:</p><pre><code class="sh">➜ ./hello 
Hello, Haskell!</code></pre><p>Alternatively, we can skip the compilation phase by using the command <code>runghc</code>:</p><pre><code class="sh">➜ runghc hello.hs
Hello, Haskell!</code></pre><p><code>runghc</code> interprets the source file instead of compiling it and does not
create build artifacts. This makes it very useful when developing programs
and can help accelerate the feedback loop. More information about <code>runghc</code>
can be found in the
<a href="https://downloads.haskell.org/ghc/latest/docs/html/users_guide/runghc.html">GHC user guide</a>.</p><h3><span id="common-options-for-ghc">Common options for GHC</span></h3><p>Here are a few notable options we can use with <code>ghc</code> and <code>runghc</code>.
Since we already successfully compiled our <code>hello.hs</code> program and
produced an executable, We'll have to use the flag <code>-fforce-recomp</code>
to force recompilation of our <code>hello.hs</code> source file.
Otherwise GHC will notice that the content of <code>hello.hs</code> hasn't changed
and will skip the recompilation.</p><h4><span id="warnings">Warnings</span></h4><p>The <code>-Wall</code> flag will enable GHC to emit many warnings about our code
(but not all warnings available, contrary to its name).
I strongly recommend always using it.</p><p>Let's compile our <code>hello.hs</code> program again, this time with <code>-Wall</code>:</p><pre><code class="sh">➜ ghc -Wall hello.hs -fforce-recomp
[1 of 1] Compiling Main             ( hello.hs, hello.o )

hello.hs:1:1: warning: [-Wmissing-signatures]
    Top-level binding with no type signature: main :: IO ()
  |
1 | main = putStrLn &quot;Hello, Haskell!&quot;
  | ^^^^
Linking hello ...</code></pre><p>GHC has successfully compiled our program, but it has also emitted a warning about
not annotating <code>main</code> with a type signature. While Haskell can infer
the types of most expressions, it is recommended that top-level definitions
are annotated with their types.</p><p>We can remedy that by adding the following line above our main definition:</p><pre><code class="hs">main :: IO ()</code></pre><p>Now our <code>hello.hs</code> source file looks like this:</p><pre><code class="hs">main :: IO ()
main = putStrLn &quot;Hello, world!&quot;</code></pre><p>And now GHC will compile <code>hello.hs</code> without warnings.</p><p><code>-Wall</code> emits many useful warnings that can easily be bugs,
including warnings about name shadowing, unused variables, and more.</p><p>Note that <code>-Wall</code> does not stop GHC from compiling your program.
If this is something you'd like to do, specifying the flag <code>-Werror</code>
will convert warnings to errors and will halt compilation when a warning
is emitted.</p><h4><span id="optimisations">Optimisations</span></h4><p>Another very useful flag is <code>-O</code>. This flag asks GHC to compile the program
with optimisations and code improvements at the cost of taking longer to compile.
This will often make the program run much faster and perform more aggressive
optimisations such as inlining and specialisation.
For even more optimisations that may take significantly longer to compile,
<code>-O2</code> is also available.</p><h2><span id="an-interactive-environment">An interactive environment</span></h2><p>GHC provides an interactive environment in a form of a
Read-Evaluate-Print Loop (REPL) called GHCi.
To enter the environment run the program <code>ghci</code>.</p><pre><code class="sh">➜ ghci
GHCi, version 9.0.1: https://www.haskell.org/ghc/  :? for help
ghci&gt; </code></pre><p>It provides an interactive prompt where Haskell expressions can be written and
evaluated.</p><p>For example:</p><pre><code class="sh">ghci&gt; 1 + 1
2
ghci&gt; putStrLn &quot;Hello, world!&quot;
Hello, world!</code></pre><p>We can define new names:</p><pre><code class="sh">ghci&gt; double x = x + x
ghci&gt; double 2
4</code></pre><p>We can write multi-line code by surrounding it with <code>:{</code> and <code>:}</code>:</p><pre><code class="hs">ghci&gt; :{
| map f list =
|     case list of
|         [] -&gt; []
|         x : xs -&gt; f x : map f xs
| :}
ghci&gt; map (+1) [1, 2, 3]
[2,3,4]
</code></pre><p>We can import Haskell source files using the <code>:load</code> command (<code>:l</code> for short):</p><pre><code class="sh">ghci&gt; :load hello.hs
[1 of 1] Compiling Main             ( hello.hs, interpreted )
Ok, one module loaded.
ghci&gt; main
Hello, Haskell!</code></pre><p>As well as import library modules:</p><pre><code class="sh">ghci&gt; import Data.Bits
ghci&gt; shiftL 32 1
64
ghci&gt; clearBit 33 0
32</code></pre><p>We can even ask what the type of an expression is using the <code>:type</code> command
(<code>:t</code> for short):</p><pre><code class="sh">λ&gt; :type putStrLn
putStrLn :: String -&gt; IO ()</code></pre><p>To exit <code>ghci</code>, use the <code>:quit</code> command (or <code>:q</code> for short)</p><pre><code class="sh">ghci&gt; :quit
Leaving GHCi.</code></pre><p>A more thorough introduction to GHCi can be found in the
<a href="https://downloads.haskell.org/~ghc/9.0.1/docs/html/users_guide/ghci.html">GHC user guide</a>.</p><h3><span id="using-external-packages-in-ghci">Using external packages in ghci</span></h3><p>By default, GHCi can only load and use packages that are
<a href="https://downloads.haskell.org/ghc/latest/docs/html/users_guide/9.0.1-notes.html#included-libraries">included with the GHC installation</a>.</p><p>However, users of <a href="https://www.haskell.org/cabal">cabal-install</a> and
<a href="http://haskellstack.org">stack</a> can download and load external packages
very easily using the following commands:</p><p>cabal-install:</p><pre><code class="sh">cabal repl --build-depends async --build-depends say</code></pre><p>Stack:</p><pre><code class="sh">stack exec --package async --package say -- ghci</code></pre><p>And the modules of the relevant packages will be available for import:</p><pre><code class="sh">GHCi, version 9.0.1: https://www.haskell.org/ghc/  :? for help
ghci&gt; import Control.Concurrent.Async 
ghci&gt; import Say
ghci&gt; concurrently_ (sayString &quot;Hello&quot;) (sayString &quot;World&quot;)
Hello
World</code></pre><p>Stack users can also use this feature with <code>runghc</code> and <code>ghc</code> by replacing
<code>ghci</code> in the command above, and cabal-install users can generate an
environment file that will make <code>async</code> and <code>say</code> visible for GHC tools
in the current directory using this command:</p><pre><code class="sh">cabal install --lib async say --package-env .</code></pre><p>Many more packages are waiting for you on <a href="https://hackage.haskell.org">Hackage</a>.</p><h2><span id="additional-information">Additional information</span></h2><p>This article covered the most common usage of the core tools GHC offers.
If you'd like to learn more about them,
<a href="https://downloads.haskell.org/ghc/latest/docs/html/users_guide">the GHC manual</a>
contains additional information on how to use the tools, including how to control
the runtime system and how to profile Haskell programs.</p></div>
    </summary>
    <updated>2021-08-14T00:00:00Z</updated>
    <published>2021-08-14T00:00:00Z</published>
    <category term="haskell"/>
    <category term="tools"/>
    <author>
      <name>Gil</name>
    </author>
    <source>
      <id>https://gilmi.me</id>
      <link href="https://gilmi.me" rel="alternate" type="text/html">
      <link href="https://gilmi.me/blog/rss" rel="self" type="application/rss+xml">
      <title>Î»m.me</title>
      <updated>2021-09-01T08:04:37Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>https://www.snoyman.com/blog/2021/08/bitwarden-encrypted-backup-tool/</id>
    <link href="https://www.snoyman.com/blog/2021/08/bitwarden-encrypted-backup-tool/" rel="alternate" type="text/html">
    <title>Bitwarden encrypted backup tool</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I've been using <a href="https://bitwarden.com/">Bitwarden</a> as my password manager for years. At this point, my whole family is on it, as well as <a href="https://www.fpcomplete.com/">my company</a>. Suffice it to say that if I ever lost access to that vault, I would be in a lot of trouble. While I overall really like Bitwarden, one limitation is has is a lack of an encrypted export function.</p>
<p>A few weeks ago, I decided to write a tool to automate the process of exporting a Bitwarden vault to a JSON file and encrypting it. And today I decided to <a href="https://github.com/snoyberg/bwbackup">release this tool as open source</a>. Hopefully it will be useful to someone else.</p>
<p>Below is the <code>README.md</code>, which contains relevant information on how this tool works internally and how to get started.</p>
<hr></hr>
<h2 id="bwbackup">bwbackup</h2>
<p><a href="https://github.com/snoyberg/bwbackup/actions/workflows/rust.yml"><img alt="Rust" src="https://github.com/snoyberg/bwbackup/actions/workflows/rust.yml/badge.svg"></a></p>
<p>Create encrypted backups of your Bitwarden vault.</p>
<p>This is a simple tool, intended to solve a simple problem. When you use the Bitwarden CLI, you're able to extract a CSV or JSON encoded copy of your entire vault. Unfortunately, this copy isn't encrypted. The purpose of this tool is to run the relevant commands against the <code>bw</code> executable and encrypt the data before it ever touches your hard drive.</p>
<p>Important notes:</p>
<ul>
<li>If you have MFA enabled, you'll likely need to run <code>bw login</code> at least once before running this executable to provide the MFA token.</li>
<li>If you log in with multiple different Bitwarden accounts, running this tool will switch which one you're logged in with.</li>
<li>The <code>bw unlock</code> and <code>bw export</code> commands (at time of writing) unfortunately do not allow specifying the password via environment variables. Therefore, the password will be passed as a command line argument, which is less secure. It's possible that other processes on your system may be able to see that password. Caveat emptor!</li>
<li>The file is encrypted using a <a href="https://lib.rs/crates/sodiumoxide"><code>sodiumoxide</code></a> <code>secretbox</code>, using your master password for key generation.</li>
<li>This tool will produce a new salt and nonce and each invocation, meaning even if your vault and password remain unchanged, you will get different encrypted output on each invocation.</li>
</ul>
<p>This tool is lightly tested, but I've been using it myself and have had no issues. Hopefully others will find it useful too!</p>
<h2 id="installing">Installing</h2>
<p>You can check the <a href="https://github.com/snoyberg/bwbackup">GitHub Actions</a> for recent artifacts, or can build it yourself by <a href="https://www.rust-lang.org/tools/install">installing Rust</a> and running <code>cargo install --git https://github.com/snoyberg/bwbackup</code>.</p>
<h2 id="backup-procedure">Backup procedure</h2>
<p>I use the following wrapper shell script to backup to my <code>~/dotfiles</code> repo and create a new commit once a week:</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #657b83;">#!/usr/bin/env bash

set -euxo pipefail

cd ~/dotfiles
bwbackup backup --email MYEMAILADDRESS --file bwbackup.json.enc
git add bwbackup.json.enc
git commit -m &quot;BitWarden backup at $(date)&quot;
git push
</span></code></pre></div>
    </summary>
    <updated>2021-08-13T00:00:00Z</updated>
    <published>2021-08-13T00:00:00Z</published>
    <source>
      <id>https://www.snoyman.com</id>
      <author>
        <name>Michael Snoyman</name>
      </author>
      <link href="https://www.snoyman.com" rel="alternate" type="text/html">
      <link href="https://www.snoyman.com/rss.xml" rel="self" type="application/rss+xml">
      <subtitle>Michael Snoyman's homepage and blog. Eclectic collection of programming (mostly Rust and Haskell) and lifting (weights, children, and monads).</subtitle>
      <title>Snoyberg - Michael Snoyman</title>
      <updated>2021-08-13T00:00:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://byorgey.wordpress.com/?p=2382</id>
    <link href="https://byorgey.wordpress.com/2021/08/11/competitive-programming-in-haskell-monoidal-accumulation/" rel="alternate" type="text/html">
    <link href="https://byorgey.wordpress.com/2021/08/11/competitive-programming-in-haskell-monoidal-accumulation/#comments" rel="replies" type="text/html">
    <link href="https://byorgey.wordpress.com/2021/08/11/competitive-programming-in-haskell-monoidal-accumulation/feed/atom/" rel="replies" type="application/atom+xml">
    <title xml:lang="en">Competitive programming in Haskell: monoidal accumulation</title>
    <summary type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml">In my last competitive programming post, I challenged you to solve Please, Go First. In that problem, we are presented with a hypothetical scenario with people waiting in a queue for a ski lift. Each person is part of a … <a href="https://byorgey.wordpress.com/2021/08/11/competitive-programming-in-haskell-monoidal-accumulation/">Continue reading <span class="meta-nav">→</span></a></div>
    </summary>
    <content type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p>In <a href="https://byorgey.wordpress.com/2021/06/19/competitive-programming-in-haskell-folding-folds/">my last competitive programming post</a>, I challenged you to solve <a href="https://open.kattis.com/problems/pleasegofirst">Please, Go First</a>. In that problem, we are presented with a hypothetical scenario with people waiting in a queue for a ski lift. Each person is part of a friend group (possibly just themselves), but friend groups are not necessarily consecutive in line; when someone gets to the top they will wait for the last person in their friend group to arrive before skiing. We are asked to consider how much waiting time could be saved if people start letting others go ahead of them in line as long as it doesn’t cost them any waiting time and decreases the waiting time for the others.</p>
<p>There is actually a bit of ambiguity that we need to resolve first; to be honest, it’s not the most well-written problem statement. Consider this scenario, with three people in group <img alt="A" class="latex" src="https://s0.wp.com/latex.php?latex=A&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"> and two in group <img alt="b" class="latex" src="https://s0.wp.com/latex.php?latex=b&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002">:</p>
<div style="text-align: center;">
<p><img alt="A_1b_1A_2A_3b_2" class="latex" src="https://s0.wp.com/latex.php?latex=A_1b_1A_2A_3b_2&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"></p>
</div>
<p>Consider the person labelled <img alt="b_1" class="latex" src="https://s0.wp.com/latex.php?latex=b_1&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002">. Should they let <img alt="A_2" class="latex" src="https://s0.wp.com/latex.php?latex=A_2&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"> pass? Letting <img alt="A_2" class="latex" src="https://s0.wp.com/latex.php?latex=A_2&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"> pass would not change <img alt="b_1" class="latex" src="https://s0.wp.com/latex.php?latex=b_1&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002">’s waiting time: they have to wait for <img alt="b_2" class="latex" src="https://s0.wp.com/latex.php?latex=b_2&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"> anyway and it does not matter whether they do the waiting at the top or bottom of the mountain. But it would not immediately change <img alt="A_2" class="latex" src="https://s0.wp.com/latex.php?latex=A_2&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002">’s waiting time, either: they still have to wait for <img alt="A_3" class="latex" src="https://s0.wp.com/latex.php?latex=A_3&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002">. What the problem literally says is “someone lets another pass if doing this doesn’t change his own total waiting time, but saves time for the other person”, so taking this literally would seem to imply that in this scenario <img alt="b_1" class="latex" src="https://s0.wp.com/latex.php?latex=b_1&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"> does <em>not</em> let <img alt="A_2" class="latex" src="https://s0.wp.com/latex.php?latex=A_2&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"> pass. However, the given example inputs and outputs imply that in this scenario <img alt="b_1" class="latex" src="https://s0.wp.com/latex.php?latex=b_1&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"> <em>should</em> let <img alt="A_2" class="latex" src="https://s0.wp.com/latex.php?latex=A_2&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"> pass; indeed, right after doing so, <img alt="b_1" class="latex" src="https://s0.wp.com/latex.php?latex=b_1&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"> can then let <img alt="A_3" class="latex" src="https://s0.wp.com/latex.php?latex=A_3&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"> pass as well, which saves time for both <img alt="A_3" class="latex" src="https://s0.wp.com/latex.php?latex=A_3&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"> and <img alt="A_2" class="latex" src="https://s0.wp.com/latex.php?latex=A_2&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002">. So in the end, it seems we really want to say something like “<img alt="x" class="latex" src="https://s0.wp.com/latex.php?latex=x&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"> should let <img alt="y" class="latex" src="https://s0.wp.com/latex.php?latex=y&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"> pass if it doesn’t increase <img alt="x" class="latex" src="https://s0.wp.com/latex.php?latex=x&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002">’s waiting time and will eventually save time for <img alt="y" class="latex" src="https://s0.wp.com/latex.php?latex=y&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002">”.</p>
<h2 id="the-solution-idea">The solution idea</h2>
<p>It took me an embarrassingly long time to come up with the following key insight: after doing this process as much as possible, I claim that (1) all the friends within each friend group will be consecutive, and (2) the groups will be sorted by the original position of the <em>last</em> person in each group. To see why claim (2) is true, note that whenever someone is last in their friend group, moving backward in the line always increases their waiting time; so any two people who are both last in their friend group will never pass each other, since it would make the waiting time worse for the one who moves backward. That means the people who are last in their friend group will always remain in the same relative order. As for claim (1), I thought about it for a while and am so far unable to come up with a short, convincing proof, though I still believe it is true (and my solution based on it was accepted). If anyone has a good way to show why this must be true, I’d love to hear about it in the comments.</p>
<p>My second key insight is that the total amount of time saved for a given friend group depends only on (1) how many people are in the group and (2) how many places the last person in the group got to move up (although there are other ways to solve the problem; more below). In particular, the total time saved for the group will be the product of these two numbers, times five minutes. It’s irrelevant how many places someone moves if they are not last in their group, because they have to wait until that last person arrives, and it makes no difference if they do their waiting at the top or bottom of the mountain.</p>
<h2 id="my-solution">My solution</h2>
<p>So here’s my solution, based on the above insights. First, let’s set up the main pipeline to read the input, solve each test case, and produce the output.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span>main</span> <span style="color: red;">=</span> <span>C.interact</span> <span>$</span>
  <span>runScanner</span> <span style="color: red;">(</span><span>numberOf</span> <span style="color: red;">(</span><span>int</span> <span>*&gt;</span> <span>str</span><span style="color: red;">)</span><span style="color: red;">)</span> <span>&gt;&gt;&gt;</span> <span>map</span> <span style="color: red;">(</span><span>solve</span> <span>&gt;&gt;&gt;</span> <span>showB</span><span style="color: red;">)</span> <span>&gt;&gt;&gt;</span> <span>C.unlines</span></code></pre>
<p><code>showB</code> is just a utility function I’ve recently added to my solution template which calls <code>show</code> and then converts the result to a <code>ByteString</code> using <code>pack</code>.</p>
<p>For a given test case, we need to first do a pass through the lift queue in order to accumulate some information about friend groups: for each group, we need to know how big it is, as well as the index of the last member of the group. In an imperative language, we would make accumulator variables to hold this information (probably two maps, <em>aka</em> dictionaries), and then iterate through the queue, imperatively updating the accumulator variables for each item. We can translate that approach more or less mechanically into Haskell, by having an update function that takes a single item and a tuple of accumulators as input, and returns a new tuple of accumulators as output. This is the <a href="https://gist.github.com/aaronallen8455/5f73e76428bf8ed8566457d032ccf90f">approach taken by Aaron Allen</a>, and sometimes that’s the best way to do something like this. However, in this particular scenario—looping over a list and accumulating some information—the accumulators are often monoidal, which gives us much nicer tools to work with, such as <code>foldMap</code> and <code>Data.Map.fromListWith (&lt;&gt;)</code>.</p>
<p>We’ll make a type <code>Group</code> to represent the needed information about a friend group: the number of people and the index of the last person. We can use <a href="https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/deriving_via.html"><code>DerivingVia</code></a> to create an appropriate <code>Semigroup</code> instance for it (in this case we actually don’t need <code>Monoid</code> since there is no such thing as an empty group). Note that we use <code>First Int</code> instead of the expected <code>Last Int</code>; this is explained below.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span style="color: blue; font-weight: bold;">newtype</span> <span>Group</span> <span style="color: red;">=</span> <span>Group</span> <span style="color: red;">{</span> <span>unGroup</span> <span style="color: red;">::</span> <span style="color: red;">(</span><span>Int</span><span style="color: red;">,</span> <span>Int</span><span style="color: red;">)</span> <span style="color: red;">}</span>
  <span style="color: blue; font-weight: bold;">deriving</span> <span>Semigroup</span> <span>via</span> <span style="color: red;">(</span><span>Sum</span> <span>Int</span><span style="color: red;">,</span> <span>First</span> <span>Int</span><span style="color: red;">)</span>
  <span style="color: blue; font-weight: bold;">deriving</span> <span>Show</span></code></pre>
<p>Now we can write the code to calculate the total time save for a given starting queue.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span>solve</span> <span style="color: red;">::</span> <span>ByteString</span> <span style="color: red;">-&gt;</span> <span>Int</span>
<span>solve</span> <span style="color: red;">(</span><span>C.unpack</span> <span style="color: red;">-&gt;</span> <span>queue</span><span style="color: red;">)</span> <span style="color: red;">=</span> <span>timeSaved</span>
  <span style="color: blue; font-weight: bold;">where</span></code></pre>
<p>We first map over the queue and turn each item into a singleton <code>Group</code> (<code>imap</code> is a utility to do an indexed map, with type <code>(Int -&gt; a -&gt; b) -&gt; [a] -&gt; [b]</code>); then we use <code>M.fromListWith (&lt;&gt;)</code> to build a <code>Map</code> associating each distinct character to a <code>Group</code>. The <code>Semigroup</code> instance will take care of summing the number of friends and keeping only the last index in each group. Note that <code>fromListWith</code> is implemented via a left fold, which explains why we needed to use <code>First Int</code> instead of <code>Last Int</code>: the list items will actually be combined in reverse order. (Alternatively, we could use <code>Last Int</code> and <code>M.fromListWith (flip (&lt;&gt;))</code>; of course, this is only something we need to worry about when using a non-commutative <code>Semigroup</code>).</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">    <span>groupInfo</span> <span style="color: red;">::</span> <span>Map</span> <span>Char</span> <span>Group</span>
    <span>groupInfo</span> <span style="color: red;">=</span> <span>queue</span> <span>&gt;$&gt;</span> <span>imap</span> <span style="color: red;">(</span><span style="color: red;">\</span><span>i</span> <span>c</span> <span style="color: red;">-&gt;</span> <span style="color: red;">(</span><span>c</span><span style="color: red;">,</span> <span>Group</span> <span style="color: red;">(</span><span class="hs-num">1</span><span style="color: red;">,</span> <span>i</span><span style="color: red;">)</span><span style="color: red;">)</span><span style="color: red;">)</span> <span>&gt;&gt;&gt;</span> <span>M.fromListWith</span> <span style="color: red;">(</span><span>&lt;&gt;</span><span style="color: red;">)</span></code></pre>
<p>Now we can sort the queue by index of the last member of each friend group, producing its final form:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">    <span>sortedQueue</span> <span style="color: red;">=</span> <span>sortOn</span> <span style="color: red;">(</span><span style="color: red;">(</span><span>groupInfo</span><span>!</span><span style="color: red;">)</span> <span>&gt;&gt;&gt;</span> <span>unGroup</span> <span>&gt;&gt;&gt;</span> <span>snd</span><span style="color: red;">)</span> <span>queue</span></code></pre>
<p>Computing the total time saved is now just a matter of figuring out how much each last friend moved and summing the time save for each friend group:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">    <span>timeSaved</span> <span style="color: red;">=</span> <span>sortedQueue</span> <span>&gt;$&gt;</span> <span>zip</span> <span style="color: red;">[</span><span class="hs-num">0</span> <span style="color: red;">::</span> <span>Int</span> <span style="color: red;">..</span><span style="color: red;">]</span>   <span style="color: green;">-- final positions</span>
      <span>&gt;&gt;&gt;</span> <span>groupBy</span> <span style="color: red;">(</span><span style="color: red;">(</span><span>==</span><span style="color: red;">)</span> <span>`on`</span> <span>snd</span><span style="color: red;">)</span>                   <span style="color: green;">-- put groups together</span>
      <span>&gt;&gt;&gt;</span> <span>map</span> <span style="color: red;">(</span><span>last</span> <span>&gt;&gt;&gt;</span> <span>timeSaveForGroup</span><span style="color: red;">)</span> <span>&gt;&gt;&gt;</span> <span>sum</span>
        <span style="color: green;">-- get the time save based on the last person in each group</span>

    <span>timeSaveForGroup</span> <span style="color: red;">(</span><span>i</span><span style="color: red;">,</span><span>c</span><span style="color: red;">)</span> <span style="color: red;">=</span> <span class="hs-num">5</span> <span>*</span> <span>size</span> <span>*</span> <span style="color: red;">(</span><span>idx</span> <span style="color: green;">-</span> <span>i</span><span style="color: red;">)</span>
      <span style="color: blue; font-weight: bold;">where</span>
        <span>Group</span> <span style="color: red;">(</span><span>size</span><span style="color: red;">,</span> <span>idx</span><span style="color: red;">)</span> <span style="color: red;">=</span> <span>groupInfo</span><span>!</span><span>c</span></code></pre>
<p>This is not the fastest way to solve the problem—in fact, my solution is slowest of the five Haskell solutions so far!—but I wanted to illustrate this technique of accumulating over an array using a <code>Semigroup</code> and <code>M.fromListWith</code>. <code>foldMap</code> can be used similarly when we need just a single result value rather than a <code>Map</code> of some sort.</p>
<h2 id="other-solutions">Other solutions</h2>
<p>Several people linked to their own solutions. I already mentioned Aaron Allen’s solution above. <a href="https://github.com/anurudhp/CPHaskell/blob/master/contests/kattis/pleasegofirst.hs">Anurudh Peduri’s solution</a> works by computing the initial and final wait time for each group and subtracting; notably, it simply sorts the groups alphabetically, not by index of the final member of the group. I don’t quite understand it, but I <em>think</em> this works because the initial and final wait times would change by the same amount when permuting the groups in line, so ultimately this cancels out.</p>
<p><a href="https://github.com/TimPut/KattisProblems/blob/master/pleasegofirst.hs">Tim Put’s solution</a> is by far the fastest (and, in my opinion, the cleverest). For each friend in a friend group, it computes the number of people in other friend groups who stand between them and the last person in their group (using a clever combination of functions including <code>ByteString.elemIndices</code>). Each such person represents a potential time save of 5 minutes, all of which will be realized once the groups are all consecutive. Hence all we have to do is sum these numbers and multiply by 5. It is instructive thinking about why this works. It does <em>not</em> compute the actual time saved by each group, just the <em>potential time save</em> represented by each group. That potential time save might be realized by the group itself (if the last person in the group gets to move up) or by a different group (if someone in the group lets others go ahead of them). Ultimately, though, it does not matter how much time is saved by each group, only the total amount of time saved.</p>
<h2 id="next-time-purple-rain">Next time: Purple Rain</h2>
<p>For next time, I invite you to solve <a href="https://open.kattis.com/problems/purplerain">Purple Rain</a>. This problem has a solution which is “well known” in competitive programming (if you need a hint, ybbx hc Xnqnar’f Nytbevguz); the challenge is to translate it into idiomatic (and, ideally, reusable) Haskell.</p></div>
    </content>
    <updated>2021-08-11T21:51:58Z</updated>
    <published>2021-08-11T21:51:58Z</published>
    <category scheme="https://byorgey.wordpress.com" term="competitive programming"/>
    <category scheme="https://byorgey.wordpress.com" term="haskell"/>
    <category scheme="https://byorgey.wordpress.com" term="Kattis"/>
    <author>
      <name>Brent</name>
      <uri>http://ozark.hendrix.edu/~yorgey/</uri>
    </author>
    <source>
      <id>http://byorgey.wordpress.com/feed/atom/</id>
      <link href="https://byorgey.wordpress.com" rel="alternate" type="text/html">
      <link href="https://byorgey.wordpress.com/feed/atom/" rel="self" type="application/atom+xml">
      <link href="https://byorgey.wordpress.com/osd.xml" rel="search" title="blog :: Brent -&gt; [String]" type="application/opensearchdescription+xml">
      <link href="https://s1.wp.com/opensearch.xml" rel="search" title="WordPress.com" type="application/opensearchdescription+xml">
      <link href="https://byorgey.wordpress.com/?pushpress=hub" rel="hub" type="text/html">
      <title xml:lang="en">blog :: Brent -&gt; [String]</title>
      <updated>2021-08-11T21:51:58Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-US">
    <id>584219d403596e3099e0ee9b:58462c0e15d5db6feba171c0:61113d93d3e3f71eaa7967f9</id>
    <link href="https://mmhaskell.com/blog/2021/8/9/monday-evening-haskell" rel="alternate" type="text/html">
    <title>Monday Evening Haskell!</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><figure class="               sqs-block-image-figure               intrinsic             ">
          
        
        

        
          
            
          
            <img alt="newlogo3_mod.png" class="thumb-image" src="https://images.squarespace-cdn.com/content/v1/584219d403596e3099e0ee9b/1628519847957-IJTFWDU9VGC9TWE7M2CQ/newlogo3_mod.png?format=1000w">
          
        
          
        

        
      
        </figure>
      

    
  


  


<p>We have an exciting announcement this week! Tonight, I'll be trying out a new form of content. I'll be <strong>streaming</strong> myself writing some Haskell. This will likely be a weekly event for quite a while. To see some Haskell in action, head to our <a href="https://www.twitch.tv/james_mml">Twitch Stream page</a> from 7:30 PM until 9:30 PM Pacific Daylight Time (UTC-7).</p>
<p>Tonight's focus will be on updating <a href="https://github.com/MondayMorningHaskell/haskellings">Haskellings</a> to use a library for file paths instead of its current custom system. The next few weeks will probably also be centered around Haskellings, but I'll also venture into some areas, like trying out some example coding problems with Haskell. I'll also change around the streaming time to give a chance to followers from around the world.</p>
<p>So don't miss out, head to our <a href="https://www.twitch.tv/james_mml">Twitch page</a>, follow us, and tune in tonight at 7:30!</p></div>
    </summary>
    <updated>2021-08-09T15:00:00Z</updated>
    <published>2021-08-09T15:00:00Z</published>
    <author>
      <name>James Bowen</name>
    </author>
    <source>
      <id>https://mmhaskell.com/blog/</id>
      <link href="https://mmhaskell.com/blog/" rel="alternate" type="text/html">
      <link href="https://mmhaskell.com/blog?format=rss" rel="self" type="application/rss+xml">
      <title>Blog - Monday Morning Haskell</title>
      <updated>2021-09-01T05:25:47Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://haskell.org/ghc/blog/20210807-ghc-9.2.1-rc1-released.html</id>
    <link href="http://haskell.org/ghc/blog/20210807-ghc-9.2.1-rc1-released.html" rel="alternate" type="text/html">
    <title>GHC 9.2.1-rc1 is now available</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><h1>GHC 9.2.1-rc1 is now available</h1>
<h4 class="text-muted">bgamari - 2021-08-07</h4>

<p>The GHC team is very happy to announce the availability of the release cadidate of the 9.2.1 release. Binary distributions, source distributions, and documentation are available at <a href="https://downloads.haskell.org/ghc/9.2.1-rc1">downloads.haskell.org</a>.</p>
<p>GHC 9.2 will bring a number of exciting features including:</p>
<ul>
<li><p>A native code generation backend for AArch64, significantly reducing compilation times on ARM platforms such as the Apple M1.</p></li>
<li><p>Many changes in the area of records, including the new <code>RecordDotSyntax</code> and <code>NoFieldSelectors</code> language extensions, as well as Support for <code>DuplicateRecordFields</code> with <code>PatternSynonyms</code>.</p></li>
<li><p>Introduction of the new <code>GHC2021</code> language extension set, giving users convenient access to a larger set of language extensions which have been long considered stable.</p></li>
<li><p>Merge of <code>ghc-exactprint</code> into the GHC tree, providing infrastructure for source-to-source program rewriting out-of-the-box.</p></li>
<li><p>Introduction of a <code>BoxedRep</code> <code>RuntimeRep</code>, allowing for polymorphism over levity of boxed objects (<a href="https://gitlab.haskell.org/ghc/ghc/issues/17526">#17526</a>)</p></li>
<li><p>Implementation of the <code>UnliftedDataTypes</code> extension, allowing users to define types which do not admit lazy evaluation (<a href="https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0265-unlifted-datatypes.rst">proposal</a>)</p></li>
<li><p>The new <a href="https://well-typed.com/blog/2021/01/first-look-at-hi-profiling-mode/">-hi profiling</a> mechanism which provides significantly improved insight into thunk leaks.</p></li>
<li><p>Support for the <code>ghc-debug</code> out-of-process heap inspection library <a href="http://ghc.gitlab.haskell.org/ghc-debug/">ghc-debug</a></p></li>
<li><p>Support for profiling of pinned objects with the cost-centre profiler (<a href="https://gitlab.haskell.org/ghc/ghc/issues/7275">#7275</a>)</p></li>
<li><p>Introduction of Haddock documentation support in TemplateHaskell (<a href="https://gitlab.haskell.org/ghc/ghc/issues/5467">#5467</a>)</p></li>
</ul>
<p>Thank you to GitHub, IOHK, the Zw3rk stake pool, Tweag I/O, Serokell, Equinix, SimSpace, and other anonymous contributors whose on-going financial and in-kind support has facilitated GHC maintenance and release management over the years. Moreover, this release would not have been possible without the hundreds of open-source contributors whose work comprise this release.</p>
<p>As always, do give this a try and open a <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/new">ticket</a> if you see anything amiss.</p>
<p>Happy testing,</p>
<ul>
<li>Ben</li>
</ul></div>
    </summary>
    <updated>2021-08-07T00:00:00Z</updated>
    <published>2021-08-07T00:00:00Z</published>
    <author>
      <name>ghc-devs</name>
    </author>
    <source>
      <id>http://haskell.org/ghc</id>
      <link href="http://haskell.org/ghc" rel="alternate" type="text/html">
      <link href="http://haskell.org/ghc/rss.xml" rel="self" type="application/rss+xml">
      <title>GHC Developer blog</title>
      <updated>2021-08-27T00:00:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://www.well-typed.com/blog/2021/08/ghc-2021-06-2021-07</id>
    <link href="https://well-typed.com/blog/2021/08/ghc-2021-06-2021-07" rel="alternate" type="text/html">
    <title>GHC activities report: June-July 2021</title>
    <summary>This seventh edition of our GHC activities report marks the one-year
anniversary since that start of sending out these regular updates on the
work on GHC and related projects that we are doing at Well-Typed. The
current edition covers roughly the months of June and and July 2021.

You can find the previous [...]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This seventh edition of our GHC activities report marks the one-year anniversary since that start of sending out these regular updates on the work on GHC and related projects that we are doing at Well-Typed. The current edition covers roughly the months of June and and July 2021.</p>
<p>You can find the previous editions collected under the <a href="https://well-typed.com/blog/tags/ghc-activities-report">ghc-activities-report tag</a>.</p>
<p>A bit of background: One aspect of our work at Well-Typed is to support GHC and the Haskell core infrastructure. Several companies, including IOHK, Facebook, and GitHub via the Haskell Foundation, are providing us with funding to do this work. We are also <a href="https://well-typed.com/blog/2020/09/working-with-hasura-ghc-tooling/">working with Hasura</a> on better debugging tools. We are very grateful on behalf of the whole Haskell community for the support these companies provide.</p>
<p>If you are interested in also contributing funding to ensure we can continue or even scale up this kind of work, please <a href="mailto:info@well-typed.com">get in touch</a>. If you are interested in working with us, we <a href="https://well-typed.com/blog/2021/08/haskell-development-job-with-well-typed/">recently announced a hiring round</a>.</p>
<p>Of course, GHC is a large community effort, and Well-Typed’s contributions are just a small part of this. This report does not aim to give an exhaustive picture of <em>all</em> GHC work that is ongoing, and there are many fantastic features currently being worked on that are omitted here simply because none of us are currently involved in them in any way. Furthermore, the aspects we <em>do</em> mention are still the work of many people. In many cases, we have just been helping with the last few steps of integration. We are immensely grateful to everyone contributing to GHC. Please keep doing so (or start)!</p>

<h2 id="team">Team</h2>
<p>Currently, <a href="https://well-typed.com/people/ben">Ben Gamari</a>, <a href="https://well-typed.com/people/andreask">Andreas Klebinger</a>, <a href="https://well-typed.com/people/matthew">Matthew Pickering</a> and <a href="https://well-typed.com/people/zubin">Zubin Duggal</a> are working primarily on GHC-related tasks. In addition, <a href="https://well-typed.com/people/alfredo">Alfredo Di Napoli</a> has been doing some work on GHC in the last two months, next to other projects he is working on. Many others within Well-Typed, including <a href="https://well-typed.com/people/adam">Adam Gundry</a>, <a href="https://well-typed.com/people/alp">Alp Mestanogullari</a>, <a href="https://well-typed.com/people/douglas">Douglas Wilson</a> and <a href="https://well-typed.com/people/oleg">Oleg Grenrus</a>, contributed to GHC more occasionally.</p>
<h2 id="release-management">Release management</h2>
<ul>
<li><p><a href="https://well-typed.com/people/ben">Ben</a> has been handling backports and release planning for the 9.2.1 and 9.0.2 releases.</p></li>
<li><p><a href="https://well-typed.com/people/matthew">Matt</a> worked on the structure of the bindists produced by <code>hadrian</code>, now they are much more like the ones produced by <code>make</code>. This also fixes some other issues with the Windows packaging from the 9.0.1 release. (<a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6133">!6133</a>)</p></li>
<li><p><a href="https://well-typed.com/people/matthew">Matt</a> worked on fixing some issues with the 8.10.5 Darwin packaging which caused several tickets to be reported about hangs (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/19950">#19950</a>, <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/19968">#19968</a>, <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/20004">#20004</a>, <a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5992">!5992</a>, <a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6003">!6003</a>).</p></li>
<li><p><a href="https://well-typed.com/people/zubin">Zubin</a> fixed some bugs with LLVM version detection in the HEAD and 8.10.5 releases (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/19973">#19973</a>, <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/19828">#19828</a>, <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/19959">#19959</a>).</p></li>
<li><p><a href="https://well-typed.com/people/zubin">Zubin</a> has a patch in progress (<a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5965">!5965</a>) that will allow the GHC library to be re-installed, so that GHC API clients (e.g. Haskell Language Server) are not restricted to the boot library versions that shipped with the compiler. This paves the way for smaller binary distributions of GHC, since users would be able to recompile the GHC library to have access to things like profiling and debug information, instead of having to ship all these configurations in the binary distribution.</p></li>
</ul>
<h2 id="compiler-error-messages">Compiler error messages</h2>
<ul>
<li><p><a href="https://well-typed.com/people/alfredo">Alfredo</a> continued his work on GHC’s new diagnostic API (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/18516">#18516</a>, <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/19905">#19905</a>). After completing the foundational work, he started to port existing GHC errors and warnings to the new API as well as fine-tuning the design (<a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6087">!6087</a>, <a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6249">!6249</a>, <a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6165">!6165</a>, <a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6129">!6129</a>, <a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5924">!5924</a>, <a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5872">!5872</a>, <a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5719">!5719</a>). He also created a few newcomer-friendly tickets to help with the conversion work: these tickets have a lot of context to guide first-time GHC contributors towards their first merged MR. See for example <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/20118">#20118</a> and <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/20119">#20119</a>.</p></li>
<li><p><a href="https://well-typed.com/people/alfredo">Alfredo</a> is also finalising an introductory blog post to the new GHC diagnostic API which will be published in the next few weeks.</p></li>
</ul>
<h2 id="frontend">Frontend</h2>
<ul>
<li><p><a href="https://well-typed.com/people/matthew">Matt</a> has started preliminary work on fixing a long standing bug where mixing optimisation levels would lead to optimisations not firing in some cases (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/12847">#12847</a>, <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/13002">#13002</a>, <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/20021">#20021</a>, <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/8635">#8635</a>, <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/9370">#9370</a>). With the patch (<a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6080">!6080</a>), the pragmas are always read from interface files but we are careful to not look when optimisation is turned off. It turns out that using some information from interface files improves compiler performance because simpler code is produced.</p></li>
<li><p><a href="https://well-typed.com/people/matthew">Matt</a> has continued on his crusade to refactor and modernise GHC’s driver code (<a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5987">!5987</a>, <a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6178">!6178</a>). This time the code that drives <code>--make</code> has been in his sights. Amongst other things the patch tries to separate the specification of the build graph from the execution of the build graph, so it is possible to describe different execution strategies. The patch also simplifies (and specifies) how module cycles are compiled which has long been a pain-point for people modifying this area.</p></li>
<li><p><a href="https://well-typed.com/people/matthew">Matt</a> fixed the <code>-Wunused-packages</code> warning to work correctly with reexported packages (<a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6130">!6130</a>).</p></li>
<li><p><a href="https://well-typed.com/people/zubin">Zubin</a> fixed a bug affecting Backpack users that resulted in a compiler panic instead of a type error in certain cases (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/19244">#19244</a>).</p></li>
<li><p><a href="https://well-typed.com/people/ben">Ben</a> introduced driver support for Clang’s <code>--target</code> flag, improving robustness of builds in multi-architecture environments (e.g. Darwin with Rosetta, <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/20162">#20162</a>).</p></li>
</ul>
<h2 id="haddock-and-documentation">Haddock and documentation</h2>
<ul>
<li><a href="https://well-typed.com/people/zubin">Zubin</a> rebased and improved the long pending <code>hi</code> Haddock work, which should allow Haddock to generate documentation using only GHC interface (<code>.hi</code>) files (<a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6224">!6224</a>). This greatly simplifies Haddock’s implementation, and allows it to skip parsing, renaming and type-checking files if the appropriate information already exists in the interface files, speeding it up greatly in such cases. This also reduces Haddock’s peak memory consumption. Identifiers in Haddock comments will also be renamed by GHC itself, and the results are also serialized into <code>.hi</code> files for tooling to make use of. A number of Haddock bugs were fixed along the way (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/20034">#20034</a>, <a href="https://github.com/haskell/haddock/issues/30">haddock 30</a>, <a href="https://github.com/haskell/haddock/issues/665">haddock 665</a>, <a href="https://github.com/haskell/haddock/issues/921">haddock 921</a>).</li>
</ul>
<h2 id="ghci-and-developer-experience">GHCi and developer experience</h2>
<ul>
<li><p><a href="https://well-typed.com/people/zubin">Zubin</a> improved GHCi completion to better support Unicode characters and operators, fixing a bug in the 9.2 pre-release, which erased the entire line the user typed if completion was triggered on an operator name (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/20101">#20101</a>, <a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6160">!6160</a>).</p></li>
<li><p><a href="https://well-typed.com/people/matthew">Matt</a> has fixed a number of 9.2 regressions involving GHCi (<a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6032">!6032</a>, <a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6090">!6090</a>).</p></li>
</ul>
<h2 id="profiling-and-debugging">Profiling and debugging</h2>
<ul>
<li><p><a href="https://well-typed.com/people/matthew">Matt</a> took <code>ghc-debug</code> for a test on a puzzling profile presented by a user (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/20065">#20065</a>) which seemed to have a large discrepancy between live bytes and the information reported in the profile. It turned out that the application had a severely fragmented heap, which was easy to diagnose and observe using <code>ghc-debug</code>.</p></li>
<li><p><a href="https://well-typed.com/people/andreask">Andreas</a> is still working on ways to make <code>perf</code> and similar tools work well on Haskell code. He wrote a <a href="https://well-typed.com/blog/2021/07/ghc-sp-profiling/">blog post</a> with more details for the curious.</p></li>
</ul>
<h2 id="compiler-performance">Compiler performance</h2>
<ul>
<li><a href="https://well-typed.com/people/matthew">Matt</a> squashed a leak in the simplifier which should reduce maximum residency for all programs, and in particular reduced maximum residency in the test from 2GB to 1.3GB (<a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6202">!6202</a>).</li>
<li><a href="https://well-typed.com/people/matthew">Matt</a> found a very subtle space leak caused by a reference being retained on the stack longer than necessary (<a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6185">!6185</a>).</li>
<li><a href="https://well-typed.com/people/andreask">Andreas</a> improved register allocation performance under high register pressure (<a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6209">!6209</a>).</li>
</ul>
<h2 id="runtime-performance">Runtime performance</h2>
<ul>
<li><a href="https://well-typed.com/people/ben">Ben</a> characterised and worked to resolve a number of runtime performance regressions observed in GHC 9.0.1 (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/19557">#19557</a>, <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/19701">#19701</a>, <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/19822">#19822</a>, <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/19727">#19727</a>, <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/19769">#19769</a>, <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/19790">#19790</a>).</li>
</ul>
<h2 id="compiler-correctness">Compiler correctness</h2>
<ul>
<li><p><a href="https://well-typed.com/people/ben">Ben</a> wrote a <a href="https://well-typed.com/blog/2021/06/keepAlive-story/">blog post</a> motivating the <code>keepAlive#</code> operation introduced in GHC 9.0, as well as several of the considerations relevant to its design.</p></li>
<li><p><a href="https://well-typed.com/people/ben">Ben</a> performed a refactoring of GHC’s “adjustor” mechanism used by some foreign calls, fixing a bug manifesting with some newer <code>libffi</code> versions (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/20051">#20051</a>) while fixing a few nearby <code>libffi</code>-related bugs (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/19869">#19869</a>).</p></li>
<li><p><a href="https://well-typed.com/people/ben">Ben</a> collected and characterised a number of issues manifesting on AArch64/Darwin which were ultimately found to be due to the rather peculiar ABI of that platform (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/20079">#20079</a>). He performed an audit (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/20085">#20085</a>) of Hackage packages looking for similar issues in common packages and wrote a <a href="https://well-typed.com/blog/2021/08/capi-usage/">blog post</a> providing advice to users for writing portable, robust foreign library bindings.</p></li>
<li><p><a href="https://well-typed.com/people/ben">Ben</a> carried out a thorough refactoring of the internals of the <code>process</code> library, fixing a subtle correctness bug manifesting under Darwin (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/19994">#19994</a>) while reducing process spawn cost in many cases.</p></li>
<li><p><a href="https://well-typed.com/people/matthew">Matt</a> started looking into an old static pointers correctness issue (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/16981">#16981</a>) which a few users had commented on recently. We know what the problem is but it seems that to fix the ticket robustly a more invasive change will be needed to how static pointers are compiled.</p></li>
</ul>
<h2 id="runtime-system">Runtime system</h2>
<ul>
<li><p><a href="https://well-typed.com/people/andreask">Andreas</a> enabled the <code>pthread</code>-based RTS ticker implementation by default for the single-threaded RTS (<a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6158">!6158</a>), improving compatibility with foreign libraries using signal-based alarms.</p></li>
<li><p><a href="https://well-typed.com/people/ben">Ben</a> diagnosed and fixed a bug the GHC runtime’s threading abstraction leading to severe GC performance regressions in 9.2 and <code>master</code> (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/20144">#20144</a>).</p></li>
<li><p><a href="https://well-typed.com/people/ben">Ben</a> diagnosed and fixed a subtle bug in the non-moving garbage collector due to an inconsistency in size units in the array write barrier implementation (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/19715">#19715</a>).</p></li>
</ul>
<h2 id="ci-and-infrastructure">CI and infrastructure</h2>
<ul>
<li><p><a href="https://well-typed.com/people/matthew">Matt</a> has added support to <a href="https://ghc.gitlab.haskell.org/head.hackage/">head.hackage</a> to run a test-suite of programs. This replaces tests in GHC’s testsuite which depended on external packages and hence were never executed during normal test runs. Now it will be straightforward to add tests with more complicated dependencies.</p></li>
<li><p><a href="https://well-typed.com/people/matthew">Matt</a> worked on GHC’s <a href="https://grafana.gitlab.haskell.org/">performance dashboard infrastructure</a>, using the data collected during <code>head.hackage</code> and validation builds to monitor GHC’s compilation performance.</p></li>
<li><p><a href="https://well-typed.com/people/ben">Ben</a> migrated GHC build artifacts and Docker images to local storage to improve service availability.</p></li>
<li><p><a href="https://well-typed.com/people/ben">Ben</a> refactored the GHC CI infrastructure on Darwin to make it uniform with other platforms and reducing the potential for <code>nix</code> paths leaking into binary distributions (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/20131">#20131</a>).</p></li>
</ul></div>
    </content>
    <updated>2021-08-06T00:00:00Z</updated>
    <published>2021-08-06T00:00:00Z</published>
    <category term="well-typed"/>
    <category term="ghc"/>
    <category term="community"/>
    <category term="ghc-activities-report"/>
    <author>
      <name>ben, matthew, andreask, zubin, alfredo</name>
    </author>
    <source>
      <id>https://well-typed.com/blog/</id>
      <logo>https://well-typed.com/img/wtnlogoplain.svg</logo>
      <link href="https://well-typed.com/blog/rss2.xml" rel="self" type="application/rss+xml">
      <link href="https://well-typed.com/blog/" rel="alternate" type="text/html">
      <subtitle>Because Well-Typed Programs Don't Go Wrong</subtitle>
      <title>Well-Typed Blog</title>
      <updated>2021-08-23T00:00:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://www.well-typed.com/blog/2021/08/haskell-development-job-with-well-typed</id>
    <link href="https://well-typed.com/blog/2021/08/haskell-development-job-with-well-typed" rel="alternate" type="text/html">
    <title>Haskell development job with Well-Typed</title>
    <summary>TL;DR _If you'd like a job with us, send your application as soon as
possible._

We are looking for a Haskell expert to join our team at Well-Typed. This
is a great opportunity for someone who is passionate about Haskell and
who is keen to improve and promote Haskell in a professional context.


About [...]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><strong>tl;dr</strong> <em>If you’d like a job with us, send your application as soon as possible.</em></p>
<p>We are looking for a Haskell expert to join our team at Well-Typed. This is a great opportunity for someone who is passionate about Haskell and who is keen to improve and promote Haskell in a professional context.</p>
<h3 id="about-well-typed">About Well-Typed</h3>
<p>We are a team of top notch Haskell experts. Founded in 2008, we were the first company dedicated to promoting the mainstream commercial use of Haskell. To achieve this aim, we help companies that are using or moving to Haskell by providing a range of services including consulting, development, training, and support and improvement of the Haskell development tools. We work with a wide range of clients, from tiny startups to well-known multinationals. We have established a track record of technical excellence and satisfied customers.</p>
<p>Our company has a strong engineering culture. All our managers and decision makers are themselves Haskell developers. Most of us have an academic background and we are not afraid to apply proper computer science to customers’ problems, particularly the fruits of FP and PL research.</p>
<p>We are a self-funded company so we are not beholden to external investors and can concentrate on the interests of our clients, our staff and the Haskell community.</p>
<h3 id="about-the-job">About the job</h3>

<p>The role is not tied to a single specific project or task, and is fully remote.</p>
<p>In general, work for Well-Typed could cover any of the projects and activities that we are involved in as a company. The work may involve:</p>
<ul>
<li><p>working on GHC, libraries and tools;</p></li>
<li><p>Haskell application development;</p></li>
<li><p>working directly with clients to solve their problems;</p></li>
<li><p>teaching Haskell and developing training materials.</p></li>
</ul>
<p>We try wherever possible to arrange tasks within our team to suit peoples’ preferences and to rotate to provide variety and interest.</p>
<p>Well-Typed has a variety of clients. For some we do proprietary Haskell development and consulting. For others, much of the work involves open-source development and cooperating with the rest of the Haskell community: the commercial, open-source and academic users.</p>
<p>Our ideal candidate has excellent knowledge of Haskell, whether from industry, academia or personal interest. Familiarity with other languages, low-level programming and good software engineering practices are also useful. Good organisation and ability to manage your own time and reliably meet deadlines is important. You should also have good communication skills.</p>
<p>You are likely to have a bachelor’s degree or higher in computer science or a related field, although this isn’t a requirement.</p>
<p>Further (optional) bonus skills:</p>
<ul>
<li><p>experience in teaching Haskell or other technical topics,</p></li>
<li><p>experience of consulting or running a business,</p></li>
<li><p>knowledge of and experience in applying formal methods,</p></li>
<li><p>familiarity with (E)DSL design,</p></li>
<li><p>knowledge of concurrency and/or systems programming,</p></li>
<li><p>experience with working on GHC,</p></li>
<li><p>experience with web programming (in particular front-end),</p></li>
<li><p>… (you tell us!)</p></li>
</ul>
<h3 id="offer-details">Offer details</h3>
<p>The offer is initially for one year full time, with the intention of a long term arrangement. Living in England is not required. We may be able to offer either employment or sub-contracting, depending on the jurisdiction in which you live.</p>
<p>If you are interested, please apply by email to <a class="email" href="mailto:jobs@well-typed.com">jobs@well-typed.com</a>. Tell us why you are interested and why you would be a good fit for Well-Typed, and attach your CV. Please indicate how soon you might be able to start.</p>
<p>We will consider applications as we receive them, summer vacations permitting. In any case, please try to get your application to us by 31 August 2021.</p></div>
    </content>
    <updated>2021-08-03T00:00:00Z</updated>
    <published>2021-08-03T00:00:00Z</published>
    <category term="jobs"/>
    <category term="well-typed"/>
    <author>
      <name>christine, andres, duncan, adam</name>
    </author>
    <source>
      <id>https://well-typed.com/blog/</id>
      <logo>https://well-typed.com/img/wtnlogoplain.svg</logo>
      <link href="https://well-typed.com/blog/rss2.xml" rel="self" type="application/rss+xml">
      <link href="https://well-typed.com/blog/" rel="alternate" type="text/html">
      <subtitle>Because Well-Typed Programs Don't Go Wrong</subtitle>
      <title>Well-Typed Blog</title>
      <updated>2021-08-23T00:00:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://www.well-typed.com/blog/2021/08/capi-usage</id>
    <link href="https://well-typed.com/blog/2021/08/capi-usage" rel="alternate" type="text/html">
    <title>Best practices for foreign imports</title>
    <summary>_editorial note:_ This is a cross-post of a post originally written for
the [GHC developers' blog].

tl;dr: When importing system libraries we strongly recommend that users
use GHC's [capi calling convention]. For details, see the
[recommendations section] below.

One of Haskell's strengths is its great [...]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><em>editorial note:</em> This is a cross-post of a post originally written for the <a href="https://www.haskell.org/ghc/blog/20210709-capi-usage.html">GHC developers’ blog</a>.</p>
<p>tl;dr: When importing system libraries we strongly recommend that users use GHC’s <a href="https://downloads.haskell.org/ghc/9.0.1/docs/html/users_guide/exts/ffi.html?highlight=capiffi#extension-CApiFFI"><code>capi</code> calling convention</a>. For details, see the <a href="https://well-typed.com/blog/rss2.xml#recommendations">recommendations section</a> below.</p>
<p>One of Haskell’s strengths is its great foreign function interface: using time-tested foreign libraries or raw system calls is just a <code>foreign import</code> away. However, while syntactically simple, safely using foreign functions can be quite tricky. A few weeks ago we saw one facet of this problem in the <a href="https://well-typed.com/blog/2021/06/keepAlive-story"><code>keepAlive#</code> post</a>. This week we will look at another complexity which has recently caused us trouble: calling conventions.</p>

<h2 id="why-this-matters">Why this matters</h2>
<p>With the increasing prevalance of ARM hardware with Apple’s recent releases, many latent bugs due to calling convention details are becoming more visible.</p>
<p>For instance, in <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/20079">#20079</a> it was noticed that GHCi crashes on AArch64/Darwin when the terminal window is resized. We eventually found that this was due to a <a href="https://github.com/judah/haskeline/issues/162">bug</a> in <code>haskeline</code>: <code>ioctl</code>, a variadic function, was <a href="https://github.com/judah/haskeline/blob/c03e7029b2d9c3d16da5480306b42b8d4ebe03cf/System/Console/Haskeline/Backend/Posix.hsc#L64">imported</a> using GHC’s <code>ccall</code> calling convention. The <a href="https://github.com/judah/haskeline/pull/163/files">fix</a> is straightforward: use the <a href="https://downloads.haskell.org/ghc/9.0.1/docs/html/users_guide/exts/ffi.html?highlight=capiffi#extension-CApiFFI"><code>capi</code> pseudo-calling convention</a> introduced in GHC 7.10.1.</p>
<p>It turns out that incorrect <code>ioctl</code> imports is <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/20085#note_363651">rather common pattern</a> among Hackage packages. Consequently, we thought it would be helpful to offer some explicit guidance for users.</p>
<h2 id="background-foreign-calling-conventions">Background: Foreign calling conventions</h2>
<p>During a function call both the caller and the callee must agree on several operational details:</p>
<ul>
<li>when the function is called:
<ul>
<li>which arguments can be passed in registers?</li>
<li>in what order are the remaining arguments pushed to the stack?</li>
<li>how are variadic functions handled?</li>
<li>must the stack be aligned?</li>
<li>where is the return address found?</li>
</ul></li>
<li>when the function returns:
<ul>
<li>who is responsible for popping the arguments from the stack?</li>
<li>where is the return value(s) stored?</li>
</ul></li>
</ul>
<p>Together, these details are known as a <em>calling convention</em> and are typically implied by the operating system and target architecture. For instance, x86-64 Linux (and most other POSIX platforms) typically uses the <a href="https://github.com/hjl-tools/x86-psABI/wiki/x86-64-psABI-1.0.pdf">System V amd64 calling convention</a> whereas 32-bit Windows has no fewer than three commonly-used conventions.</p>
<p>When compiling C source, the C compiler determines a function’s calling convention using its <em>signature</em>, which typically appears in a header file. However, when GHC imports a function with the usual <code>ccall</code> calling convention, e.g.:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="https://well-typed.com/blog/rss2.xml#cb1-1"/>foreign <span class="kw">import</span> ccall &quot;hello_world&quot; helloWorld :: <span class="dt">IO</span> ()</span></code></pre></div>
<p>it does not have the benefit of a signature; instead it must infer the calling convention from the type given by the import. This can break in two ways:</p>
<ul>
<li>many calling conventions treat variadic functions (e.g. <code>printf</code>) differently from the corresponding non-variadic signature; while it is <a href="https://downloads.haskell.org/ghc/9.0.1/docs/html/users_guide/exts/ffi.html?highlight=capiffi#varargs-not-supported-by-ccall-calling-convention">documented</a> that <code>ccall</code> does not support variadic functions, this fact is not well-known by users.</li>
<li>the type provided by the user may be wrong (e.g. using <code>Int</code> instead of <code>CInt</code>)</li>
</ul>
<p>Unfortunately, with the <code>foreign import ccall</code> mechanism the compiler has no way of catching such issues, potentially leaving the user with difficult-to-spot, platform-dependent soundness bugs.</p>
<h2 id="safe-foreign-calls-via-capiffi">Safe foreign calls via <code>CApiFFI</code></h2>
<p>To address help mitigate this class of bugs, GHC 7.10 introduced a new language extension, <a href="https://downloads.haskell.org/ghc/9.0.1/docs/html/users_guide/exts/ffi.html?highlight=capiffi#extension-CApiFFI"><code>CApiFFI</code></a>, which offers a more robust way to import foreign functions. Unlike <code>ccall</code>, <code>capi</code> requires that the user specify both the foreign function’s name as well as the name of the header file where its signature can be found. For instance, one can write:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="https://well-typed.com/blog/rss2.xml#cb2-1"/>foreign <span class="kw">import</span> capi &quot;stdio.h puts&quot; c_puts :: <span class="dt">Ptr</span> <span class="dt">CChar</span> -&gt; <span class="dt">IO</span> <span class="dt">CInt</span></span></code></pre></div>
<p>To compile this, GHC will construct a C source file which <code>#include</code>’s <code>stdio.h</code>. and defines a stub function which performs the call:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb3-1"><a href="https://well-typed.com/blog/rss2.xml#cb3-1"/><span class="pp">#include </span><span class="im">&quot;stdio.h&quot;</span></span>
<span id="cb3-2"><a href="https://well-typed.com/blog/rss2.xml#cb3-2"/>HsInt32 ghczuwrapperZC0ZCmainZCHelloZCputs(<span class="dt">void</span>* a1) {</span>
<span id="cb3-3"><a href="https://well-typed.com/blog/rss2.xml#cb3-3"/>    <span class="cf">return</span> puts(a1);</span>
<span id="cb3-4"><a href="https://well-typed.com/blog/rss2.xml#cb3-4"/>}</span></code></pre></div>
<p>This approach brings a few advantages:</p>
<ul>
<li><code>capi</code> imports can be used to import functions defined using CPP</li>
<li>the calling convention is decided by the C compiler using the signature provided in the indicated header file, eliminating the potential for inconsistency</li>
<li>variadic functions “just work”</li>
<li>it removes the need to worry about which of Windows’ zoo of supported conventions is used (see <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/12890">#12890</a>, <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/3052">#3052</a>)</li>
</ul>
<h2 id="recommendations">Recommendations for users</h2>
<p>As a rule, the easiest code to debug is the code that you don’t need to write. Consequently, users are encouraged to use existing bindings libraries (e.g. <code>unix</code>) instead of defining their own foreign imports when possible.</p>
<p>Of course, not all libraries have bindings available. In these cases we recommend that users use <code>foreign import capi</code> for imports of libraries not under their control (e.g. system libraries).</p>
<p>Note, however, that <code>capi</code> does incur a small (arguably negligible) runtime cost due to the to the C stub. It is justifiable to use <code>ccall</code> to avoid this runtime cost in cases where the foreign function is shipped with a package’s <code>cbits</code>, where the calling convention is clear.</p></div>
    </content>
    <updated>2021-08-02T00:00:00Z</updated>
    <published>2021-08-02T00:00:00Z</published>
    <category term="ghc"/>
    <category term="foreign function interface"/>
    <category term="calling convention"/>
    <author>
      <name>ben</name>
    </author>
    <source>
      <id>https://well-typed.com/blog/</id>
      <logo>https://well-typed.com/img/wtnlogoplain.svg</logo>
      <link href="https://well-typed.com/blog/rss2.xml" rel="self" type="application/rss+xml">
      <link href="https://well-typed.com/blog/" rel="alternate" type="text/html">
      <subtitle>Because Well-Typed Programs Don't Go Wrong</subtitle>
      <title>Well-Typed Blog</title>
      <updated>2021-08-23T00:00:00Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-9757377.post-8563114018485533080</id>
    <link href="https://issues.org/say-goodbye-hero-model-science-elkins-tanton-kavli/" rel="related" title="Time to say goodbye to our heroes?" type="text/html">
    <link href="https://wadler.blogspot.com/feeds/8563114018485533080/comments/default" rel="replies" title="Post Comments" type="application/atom+xml">
    <link href="https://www.blogger.com/comment.g?blogID=9757377&amp;postID=8563114018485533080" rel="replies" title="0 Comments" type="text/html">
    <link href="https://www.blogger.com/feeds/9757377/posts/default/8563114018485533080" rel="edit" type="application/atom+xml">
    <link href="https://www.blogger.com/feeds/9757377/posts/default/8563114018485533080" rel="self" type="application/atom+xml">
    <link href="https://wadler.blogspot.com/2021/07/time-to-say-goodbye-to-our-heroes.html" rel="alternate" title="Time to say goodbye to our heroes?" type="text/html">
    <title>Time to say goodbye to our heroes?</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p></p><p><span face="freight-text-pro, Times New Roman, Times, serif" style="color: #444444;"><span style="background-color: white; font-size: 19px; letter-spacing: 0.56px;"></span></span></p><div class="separator" style="clear: both; text-align: center;"><span face="freight-text-pro, Times New Roman, Times, serif" style="color: #444444;"><a href="https://lh3.googleusercontent.com/-bhxIk_os4qI/YQMV4jsMY4I/AAAAAAACdaA/f1aMNI_rUCo6nrT_Z7rsYlPh7Qpl2mg_gCLcBGAsYHQ/image.png" style="margin-left: 1em; margin-right: 1em;"><img alt="" height="234" src="https://lh3.googleusercontent.com/-bhxIk_os4qI/YQMV4jsMY4I/AAAAAAACdaA/f1aMNI_rUCo6nrT_Z7rsYlPh7Qpl2mg_gCLcBGAsYHQ/w640-h234/image.png" width="640"></a></span></div><p></p>Lindy Elkins-Tanton describes and disputes the &quot;<a href="https://draft.blogger.com/">hero</a>&quot; model of academia, and suggests a model instead organised around teams focused on big questions. Thanks to <a href="https://jfdm.github.io/">Jan de Muijnck-Hughes</a> for the pointer.<span face="freight-text-pro, &quot;Times New Roman&quot;, Times, serif" style="background-color: white; color: #444444; letter-spacing: 0.56px;"><blockquote>Reorienting our focus from the hero model’s “big people” to the consideration of big questions will address many of the challenges plaguing universities today: incremental, derivative, low-risk science; faltering funding; relentless focus on quantity of publication; irreproducible research; ongoing complaints of harassment; lack of diversity; an atmosphere that leaves students struggling with mental health; and (despite enormous funding outlays) an inadequately trained workforce in the STEM fields of science, technology, engineering, and math.</blockquote></span><p></p></div>
    </content>
    <updated>2021-07-30T11:25:42Z</updated>
    <published>2021-07-29T20:58:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="Academia"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="Education"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="Science"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="University"/>
    <author>
      <name>Philip Wadler</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/12009347515095774366</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-9757377</id>
      <category term="Politics"/>
      <category term="Functional Programming"/>
      <category term="Programming Languages"/>
      <category term="Scotland"/>
      <category term="Computing"/>
      <category term="Independence"/>
      <category term="Yes!"/>
      <category term="Haskell"/>
      <category term="UK"/>
      <category term="Academia"/>
      <category term="Edinburgh"/>
      <category term="Cycling"/>
      <category term="Graphics"/>
      <category term="Types"/>
      <category term="Mathematics"/>
      <category term="Science"/>
      <category term="US"/>
      <category term="Covid-19"/>
      <category term="Logic"/>
      <category term="Security"/>
      <category term="Web"/>
      <category term="EU"/>
      <category term="Comics"/>
      <category term="Theory"/>
      <category term="Climate Change"/>
      <category term="Israel"/>
      <category term="Education"/>
      <category term="Blockchain"/>
      <category term="Internet"/>
      <category term="Status"/>
      <category term="University"/>
      <category term="Comedy"/>
      <category term="DSL"/>
      <category term="Databases"/>
      <category term="Dynamic and Static Typing"/>
      <category term="IOHK"/>
      <category term="Privacy"/>
      <category term="Recursion"/>
      <category term="SIGPLAN"/>
      <category term="Scala"/>
      <category term="Session Types"/>
      <category term="Strange Loop"/>
      <category term="ACM"/>
      <category term="Agda"/>
      <category term="Concurrency"/>
      <category term="Cryptocurrency"/>
      <category term="Developers"/>
      <category term="F#"/>
      <category term="Green"/>
      <category term="JavaScript"/>
      <category term="Lego"/>
      <category term="Technology"/>
      <category term="Writing"/>
      <category term="Architecture"/>
      <category term="Category Theory"/>
      <category term="Copyright"/>
      <category term="Distributed Computing"/>
      <category term="Europe"/>
      <category term="Formal Methods"/>
      <category term="Java"/>
      <category term="Racket"/>
      <category term="Science Fiction"/>
      <category term="BLM"/>
      <category term="Brexit"/>
      <category term="DRM"/>
      <category term="Environment"/>
      <category term="Erlang"/>
      <category term="Finance"/>
      <category term="Object-Oriented"/>
      <category term="Productivity"/>
      <category term="BDS"/>
      <category term="Books"/>
      <category term="Cinema"/>
      <category term="Gender"/>
      <category term="Japan"/>
      <category term="Net Neutrality"/>
      <category term="Open Access"/>
      <category term="Palestine"/>
      <category term="Pyret"/>
      <category term="Scheme"/>
      <category term="Sweden"/>
      <category term="Theatre"/>
      <author>
        <name>Philip Wadler</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/12009347515095774366</uri>
      </author>
      <link href="https://wadler.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml">
      <link href="https://www.blogger.com/feeds/9757377/posts/default?alt=atom" rel="self" type="application/atom+xml">
      <link href="https://wadler.blogspot.com/" rel="alternate" type="text/html">
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html">
      <link href="https://www.blogger.com/feeds/9757377/posts/default?alt=atom&amp;start-index=26&amp;max-results=25" rel="next" type="application/atom+xml">
      <title>Wadler's Blog</title>
      <updated>2021-08-24T20:25:45Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://www.parsonsmatt.org/2021/07/29/stealing_impl_from_rust.html</id>
    <link href="https://www.parsonsmatt.org/2021/07/29/stealing_impl_from_rust.html" rel="alternate" type="text/html">
    <title>Stealing Impl from Rust</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>With the new <code class="language-plaintext highlighter-rouge">OverloadedRecordDot</code> language extension, we can use the <code class="language-plaintext highlighter-rouge">.</code> character to access stuff on records.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{-# language OverloadedRecordDot #-}</span>

<span class="kr">data</span> <span class="kt">User</span> <span class="o">=</span> <span class="kt">User</span> <span class="p">{</span> <span class="n">name</span> <span class="o">::</span> <span class="kt">String</span> <span class="p">}</span>

<span class="n">main</span> <span class="o">::</span> <span class="kt">IO</span> <span class="nb">()</span>
<span class="n">main</span> <span class="o">=</span> <span class="kr">do</span>
    <span class="kr">let</span> <span class="n">user</span> <span class="o">=</span> <span class="kt">User</span> <span class="p">{</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;Matt&quot;</span> <span class="p">}</span>
    <span class="n">putStrLn</span> <span class="n">user</span><span class="o">.</span><span class="n">name</span>
</code></pre></div></div>

<p>This is syntax sugar for the following code:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">import</span> <span class="nn">GHC.Records</span>

<span class="kr">data</span> <span class="kt">User</span> <span class="o">=</span> <span class="kt">User</span> <span class="p">{</span> <span class="n">name</span> <span class="o">::</span> <span class="kt">String</span> <span class="p">}</span>

<span class="kr">instance</span> <span class="kt">HasField</span> <span class="s">&quot;name&quot;</span> <span class="kt">User</span> <span class="kt">String</span> <span class="kr">where</span>
    <span class="n">getField</span> <span class="p">(</span><span class="kt">User</span> <span class="n">n</span><span class="p">)</span> <span class="o">=</span> 
        <span class="n">n</span>

<span class="n">main</span> <span class="o">::</span> <span class="kt">IO</span> <span class="nb">()</span>
<span class="n">main</span> <span class="o">=</span> <span class="kr">do</span>
    <span class="kr">let</span> <span class="n">user</span> <span class="o">=</span> <span class="kt">User</span> <span class="p">{</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;Matt&quot;</span> <span class="p">}</span>
    <span class="n">putStrLn</span> <span class="p">(</span><span class="n">getField</span> <span class="o">@</span><span class="s">&quot;name&quot;</span> <span class="n">user</span><span class="p">)</span>
</code></pre></div></div>

<p>As it happens, we can <em>add</em> fields to a record.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{-# language OverloadedRecordDot #-}</span>

<span class="kr">data</span> <span class="kt">User</span> <span class="o">=</span> <span class="kt">User</span> <span class="p">{</span> <span class="n">name</span> <span class="o">::</span> <span class="kt">String</span> <span class="p">}</span>

<span class="kr">instance</span> <span class="kt">HasField</span> <span class="s">&quot;age&quot;</span> <span class="kt">User</span> <span class="kt">Int</span> <span class="kr">where</span>
    <span class="n">getField</span> <span class="n">user</span> <span class="o">=</span> 
        <span class="mi">32</span>

<span class="n">main</span> <span class="o">::</span> <span class="kt">IO</span> <span class="nb">()</span>
<span class="n">main</span> <span class="o">=</span> <span class="kr">do</span>
    <span class="kr">let</span> <span class="n">user</span> <span class="o">=</span> <span class="kt">User</span> <span class="p">{</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;Matt&quot;</span> <span class="p">}</span>
    <span class="n">print</span> <span class="n">user</span><span class="o">.</span><span class="n">age</span>
</code></pre></div></div>

<p>This works, though it’s a bit boring.</p>

<p>It’s much more useful to have, say, virtual fields.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">data</span> <span class="kt">User</span> 
    <span class="o">=</span> <span class="kt">User</span>
    <span class="p">{</span> <span class="n">firstName</span> <span class="o">::</span> <span class="kt">String</span>
    <span class="p">,</span> <span class="n">lastName</span> <span class="o">::</span> <span class="kt">String</span>
    <span class="p">}</span>

<span class="kr">instance</span> <span class="kt">HasField</span> <span class="s">&quot;name&quot;</span> <span class="kt">User</span> <span class="kt">String</span> <span class="kr">where</span>
    <span class="n">getField</span> <span class="n">user</span> <span class="o">=</span> 
        <span class="n">unwords</span> <span class="p">[</span><span class="n">user</span><span class="o">.</span><span class="n">firstName</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">lastName</span><span class="p">]</span>
</code></pre></div></div>

<p>This gives us a “virtual field,” which can allow us to refactor code that depends on the record field in neat ways!</p>

<h1 id="methods">Methods</h1>

<p>So, those types, they don’t have to be ordinary values.
They can be <em>methods</em>.</p>

<p>Or, y’know, functions, whatever, it’s all the same in Haskell.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">instance</span> <span class="kt">HasField</span> <span class="s">&quot;greet&quot;</span> <span class="kt">User</span> <span class="p">(</span><span class="kt">String</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="nb">()</span><span class="p">)</span> <span class="kr">where</span>
    <span class="n">getField</span> <span class="n">self</span> <span class="n">message</span> <span class="o">=</span> <span class="kr">do</span>
        <span class="n">putStrLn</span> <span class="o">$</span> <span class="n">concat</span> <span class="p">[</span><span class="n">message</span><span class="p">,</span> <span class="s">&quot;, &quot;</span><span class="p">,</span> <span class="n">self</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="s">&quot;!&quot;</span><span class="p">]</span>

<span class="n">main</span> <span class="o">::</span> <span class="kt">IO</span> <span class="nb">()</span>
<span class="n">main</span> <span class="o">=</span> <span class="kr">do</span>
    <span class="kr">let</span> <span class="n">user</span> <span class="o">=</span> <span class="kt">User</span> <span class="p">{</span> <span class="n">firstName</span> <span class="o">=</span> <span class="s">&quot;Matt&quot;</span><span class="p">,</span> <span class="n">lastName</span> <span class="o">=</span> <span class="s">&quot;Parsons&quot;</span> <span class="p">}</span>
    <span class="n">user</span><span class="o">.</span><span class="n">greet</span> <span class="s">&quot;UhhhHHH Excuse me WTF&quot;</span>
</code></pre></div></div>

<p>This prints out <code class="language-plaintext highlighter-rouge">UhhhHHH Excuse me WTF, Matt Parsons!</code>.
Which is pretty cool.</p>

<h1 id="impl"><code class="language-plaintext highlighter-rouge">impl</code></h1>

<p>Rust has a <a href="https://doc.rust-lang.org/std/keyword.impl.html">keyword <code class="language-plaintext highlighter-rouge">impl</code></a>, which is used in two ways:</p>

<ol>
  <li>Adding methods to a type.</li>
  <li>Adding a trait to a type.</li>
</ol>

<p>The linked docs tell the whole story, just about.</p>

<p>I don’t know about you but I want nicer syntax than all the <code class="language-plaintext highlighter-rouge">instance HasField</code> stuff.
I wrote a little library that <em>should</em> do this:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">data</span> <span class="kt">User</span> <span class="o">=</span> <span class="kt">User</span> <span class="p">{</span> <span class="n">name</span> <span class="o">::</span> <span class="kt">String</span> <span class="p">}</span>

<span class="n">impl</span> <span class="n">''User</span> <span class="o">[</span><span class="n">d</span><span class="o">|</span>

    greet :: String -&gt; IO ()
    greet message = do
        putStrLn $ concat [message, &quot;, &quot;, self.name]
<span class="o">|]</span>
</code></pre></div></div>

<p>It’s relatively straightforward.
In pseudocode, it’s implemented like this:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">impl</span> <span class="o">::</span> <span class="kt">Name</span> <span class="o">-&gt;</span> <span class="kt">Q</span> <span class="p">[</span><span class="kt">Dec</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="kt">Q</span> <span class="p">[</span><span class="kt">Dec</span><span class="p">]</span>
<span class="n">impl</span> <span class="n">tyName</span> <span class="n">qds</span> <span class="o">=</span> <span class="kr">do</span>
    <span class="n">decs</span> <span class="o">&lt;-</span> <span class="n">qds</span>
    <span class="kr">let</span>
        <span class="n">namesTypesExprs</span> <span class="o">::</span> <span class="p">[(</span><span class="kt">String</span><span class="p">,</span> <span class="kt">Type</span><span class="p">,</span> <span class="kt">Exp</span><span class="p">)]</span>
        <span class="n">namesTypesExprs</span> <span class="o">=</span>
            <span class="n">getTypesAndExprs</span> <span class="n">decs</span>

    <span class="n">instances</span> <span class="o">&lt;-</span> <span class="n">for</span> <span class="n">namesTypesExprs</span> <span class="o">$</span> <span class="nf">\</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">typ</span><span class="p">,</span> <span class="n">exp</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kr">do</span>
        <span class="o">[</span><span class="n">d</span><span class="o">|</span>
            instance HasField $(name) $(tyName) $(typ) where
                getField self = $(exp)
        <span class="o">|]</span>
    <span class="n">pure</span> <span class="p">(</span><span class="n">concat</span> <span class="n">instances</span><span class="p">)</span>
</code></pre></div></div>

<p>Unfortunately, I ran into a bit of a <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/20185">blocking issue</a>, namely that GHC does not support <code class="language-plaintext highlighter-rouge">OverloadedRecordDot</code> in <code class="language-plaintext highlighter-rouge">TemplateHaskell</code> <code class="language-plaintext highlighter-rouge">QuasiQuotes</code> yet.
While I can work around it, I’d rather not bother until <code class="language-plaintext highlighter-rouge">OverloadedRecordDot</code> is fully supported by GHC.</p>

<h1 id="the-dealbreaker">The Dealbreaker</h1>

<p>There’s no polymorphism allowed.</p>

<p>Like, at all.</p>

<p>You can’t write:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">instance</span> <span class="p">(</span><span class="kt">Show</span> <span class="n">a</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="kt">HasField</span> <span class="s">&quot;myPrint&quot;</span> <span class="kt">User</span> <span class="p">(</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="nb">()</span><span class="p">)</span> <span class="kr">where</span>
    <span class="n">getField</span> <span class="n">self</span> <span class="n">a</span> <span class="o">=</span> <span class="kr">do</span>
        <span class="n">putStrLn</span> <span class="p">(</span><span class="n">show</span> <span class="n">a</span><span class="p">)</span>
</code></pre></div></div>

<p>This fails the functional dependencies.
You can’t write methods generic in <code class="language-plaintext highlighter-rouge">MonadIO m =&gt; HasField User (String -&gt; m ())</code> either.</p>

<p>The functional dependencies seem pretty reasonable:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">class</span> <span class="kt">HasField</span> <span class="n">sym</span> <span class="n">r</span> <span class="n">a</span> <span class="o">|</span> <span class="n">sym</span> <span class="n">r</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="kr">where</span>
    <span class="n">getField</span> <span class="o">::</span> <span class="n">r</span> <span class="o">-&gt;</span> <span class="n">a</span>
</code></pre></div></div>

<p>This means that the types <code class="language-plaintext highlighter-rouge">sym</code> and <code class="language-plaintext highlighter-rouge">r</code> <em>uniquely determine</em> the <code class="language-plaintext highlighter-rouge">a</code> type - or, that if you know what <code class="language-plaintext highlighter-rouge">sym</code> and <code class="language-plaintext highlighter-rouge">r</code> are, then you <em>always</em> know <em>exactly</em> what <code class="language-plaintext highlighter-rouge">a</code> is.
Since users of our isntance are able to select things like <code class="language-plaintext highlighter-rouge">IO</code>, <code class="language-plaintext highlighter-rouge">ReaderT () IO</code>, and <code class="language-plaintext highlighter-rouge">StateT Int IO</code> for this, you <em>can’t</em> uniquely determine the result type just based on the answer.</p>

<p>Seems like <code class="language-plaintext highlighter-rouge">ImpredicativeTypes</code> should work here, but they apparently don’t.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">instance</span> <span class="kt">HasField</span> <span class="s">&quot;myPrint&quot;</span> <span class="kt">User</span> <span class="p">(</span><span class="n">forall</span> <span class="n">a</span><span class="o">.</span> <span class="kt">Show</span> <span class="n">a</span> <span class="o">=&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="nb">()</span><span class="p">)</span> <span class="kr">where</span> <span class="o">...</span>
</code></pre></div></div>

<p>This fails with a syntax error, due to the way <code class="language-plaintext highlighter-rouge">OverloadedRecordDot</code> affects GHC’s parser.</p>

<blockquote>
  <p><a href="https://gitlab.haskell.org/ghc/ghc/-/issues/20186">Bugs for the bug god!!</a></p>
</blockquote>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">instance</span> <span class="kt">HasField</span> <span class="s">&quot;myPrint&quot;</span> <span class="kt">User</span> <span class="p">(</span><span class="n">forall</span> <span class="n">a</span> <span class="o">.</span> <span class="kt">Show</span> <span class="n">a</span> <span class="o">=&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="nb">()</span><span class="p">)</span> <span class="kr">where</span> <span class="o">...</span>
</code></pre></div></div>

<p>This fails because it is an illegal polymorphic type.</p>

<h1 id="illegal-polymorphism">Illegal Polymorphism</h1>

<p>But wait - this is an <em>impredicative</em> type.
<code class="language-plaintext highlighter-rouge">ImpredicativeTypes</code> was a deprecated language extension, but I recall hearing that we landed support for them with <a href="https://github.com/ghc-proposals/ghc-proposals/pull/274">Quick Look Impredicativity</a>.
And, in GHC 9, <a href="https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/impredicative_types.html#impredicative-polymorphism">we have a proper <code class="language-plaintext highlighter-rouge">ImpredicativeTypes</code> behavior</a>!
We <em>definitely</em> are paying a big cost for it - the <a href="https://gitlab.haskell.org/ghc/ghc/-/wikis/migration/9.0#simplified-subsumption">Simplify Subsumption</a> proposal gives <em>no</em> practical benefit  to programmers <em>except</em> that it gives additional power to Quick Look Impredicativity.</p>

<p>Unfortunately, enabling <code class="language-plaintext highlighter-rouge">ImpredicativeTypes</code> doesn’t make this work - GHC still deems the above an illegal polymorphic type.
It turns out, you can’t <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/20188">put an impredicative type in an instance at all</a>.</p>

<p>Oh well.</p>

<h1 id="breaking-news">BREAKING NEWS</h1>

<p>Okay, so I posted this, and was immediately offered a Prime Tip by Sandy Maguire.
Apparently <a href="https://www.youtube.com/watch?v=ZXtdd8e7CQQ">Richard Eisenberg</a> has published a video stating how to defeat this.
The answer is to <em>demand the constraint in the context</em>.</p>

<p>So we can write <code class="language-plaintext highlighter-rouge">myPrint</code> like this:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">instance</span> 
    <span class="p">(</span> <span class="kt">Show</span> <span class="n">a</span> 
    <span class="p">,</span> <span class="kt">HasField</span> <span class="s">&quot;myPrint&quot;</span> <span class="kt">User</span> <span class="p">(</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="nb">()</span><span class="p">)</span>
    <span class="p">)</span>
  <span class="o">=&gt;</span> 
    <span class="kt">HasField</span> <span class="s">&quot;myPrint&quot;</span> <span class="kt">User</span> <span class="p">(</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="nb">()</span><span class="p">)</span> 
  <span class="kr">where</span>
    <span class="n">getField</span> <span class="n">self</span> <span class="n">a</span> <span class="o">=</span> <span class="kr">do</span>
        <span class="n">putStrLn</span> <span class="o">$</span> <span class="n">concat</span> <span class="p">[</span><span class="n">self</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="s">&quot; says: &quot;</span><span class="p">,</span> <span class="n">show</span> <span class="n">a</span><span class="p">]</span>
</code></pre></div></div>

<p>That let’s us write code like this:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">go</span> <span class="o">::</span> <span class="kt">IO</span> <span class="nb">()</span>
<span class="n">go</span> <span class="o">=</span> <span class="kr">do</span>
    <span class="kr">let</span> <span class="n">user</span> <span class="o">=</span> <span class="kt">User</span> <span class="p">{</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;Matt&quot;</span> <span class="p">}</span>
    <span class="n">user</span><span class="o">.</span><span class="n">myPrint</span> <span class="sc">'a'</span>
    <span class="n">user</span><span class="o">.</span><span class="n">myPrint</span> <span class="mi">3</span>
</code></pre></div></div>

<p>Which evaluates like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$&gt; go
Matt says: 'a'
Matt says: 3
</code></pre></div></div>

<p>Nice!</p>

<p>Deal <em>un</em>breaker.</p>

<h1 id="yet-another-update">Yet Another Update</h1>

<p>Reddit user <code class="language-plaintext highlighter-rouge">/u/WhisterPayer</code> implemented <a href="https://github.com/ElderEphemera/instance-impl">this plugin</a> to accomplish this!
Awesome.</p></div>
    </summary>
    <updated>2021-07-29T00:00:00Z</updated>
    <published>2021-07-29T00:00:00Z</published>
    <source>
      <id>https://www.parsonsmatt.org</id>
      <author>
        <name>Matt Parsons</name>
      </author>
      <link href="https://www.parsonsmatt.org" rel="alternate" type="text/html">
      <link href="https://www.parsonsmatt.org/feed.xml" rel="self" type="application/rss+xml">
      <title>Overcoming Software</title>
      <updated>2021-08-24T19:04:47Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-US">
    <id>584219d403596e3099e0ee9b:58462c0e15d5db6feba171c0:60d3c62cc3d05806fc08138f</id>
    <link href="https://mmhaskell.com/blog/2021/7/26/summer-sale-ending" rel="alternate" type="text/html">
    <title>Summer Sale Ending!</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><figure class="               sqs-block-image-figure               intrinsic             ">
          
        
        

        
          
            
          
            <img alt="newlogo2.png" class="thumb-image" src="https://images.squarespace-cdn.com/content/v1/584219d403596e3099e0ee9b/1624491578474-K2IS5VTDYBX1NFQ7TDHD/newlogo2.png?format=1000w">
          
        
          
        

        
      
        </figure>
      

    
  


  


<p>Today is the last day of the Monday Morning Haskell summer sale! If you <a href="https://www.mmhaskell.com/subscribe">subscribe</a> today, you'll get a discount code to use on all of our courses! This includes our new <a href="https://academy.mondaymorninghaskell.com/p/making-sense-of-monads">Making Sense of Monads course</a>. If you're relatively new to Haskell, this is a great way to learn about this tricky topic that's a stumbling block for many newcomers. It's a short, one-module course covering these topics:</p>
<ol>
<li>Starting out with simpler functional structures (e.g. Functors)</li>
<li>The syntactic elements involved in writing monadic functions</li>
<li>The most common monads and how to combine them</li>
<li>Bonus challenges to test your knowledge</li>
</ol>
<p>You can get a closer overview of the content on the <a href="https://academy.mondaymorninghaskell.com/p/making-sense-of-monads">course page here</a>. You can also look at our <a href="https://academy.mondaymorninghaskell.com">full course listings here</a>. And if you <a href="https://www.mmhaskell.com/subscribe">subscribe</a> today (July 26th) you'll get a discount code for all these courses! So don't wait!</p></div>
    </summary>
    <updated>2021-07-26T14:30:00Z</updated>
    <published>2021-07-26T14:30:00Z</published>
    <author>
      <name>James Bowen</name>
    </author>
    <source>
      <id>https://mmhaskell.com/blog/</id>
      <link href="https://mmhaskell.com/blog/" rel="alternate" type="text/html">
      <link href="https://mmhaskell.com/blog?format=rss" rel="self" type="application/rss+xml">
      <title>Blog - Monday Morning Haskell</title>
      <updated>2021-09-01T05:25:47Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://magnus.therning.org/2021-07-23-keeping-todo-items-in-org-roam-v2.html</id>
    <link href="https://magnus.therning.org/2021-07-23-keeping-todo-items-in-org-roam-v2.html" rel="alternate" type="text/html">
    <title>Keeping todo items in org-roam v2</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>
Org-roam v2 has been <a href="https://blog.jethro.dev/posts/org_roam_v2/">released</a> and yes, it broke my config a bit. Unfortunately
the v1-to-v2 upgrade wizard didn't work for me. I realized later that it might
have been due to the roam-related functions I'd hooked into `'before-save-hook`.
I didn't think about it until I'd already manually touched up almost all my
files (there aren't that many) so I can't say anything for sure. However, I
think it might be a good idea to keep hooks in mind if one runs into issues with
upgrading.
</p>

<p>
The majority of the time I didn't spend on my notes though, but on the setup
I've written about in an earlier post, <a href="https://magnus.therning.org/2021-03-14-keeping-todo-items-in-org-roam.html">Keeping todo items in org-roam</a>. Due to
some of the changes in v2, changes that I think make org-roam slightly more
&quot;org-y&quot;, that setup needed a bit of love.
</p>

<p>
The basis is still the same 4 functions I described in that post, only the
details had to be changed.
</p>

<p>
I hope the following is useful, and as always I'm always happy to receive
commends and suggestions for improvements.
</p>

<div class="outline-2" id="outline-container-org2ca70ee">
<h2 id="org2ca70ee">Some tag helpers</h2>
<div class="outline-text-2" id="text-org2ca70ee">
<p>
The very handy functions for extracting tags as lists seem to be gone, in their
place I found <code>org-roam-{get,set}-keyword</code>. Using these I wrote three wrappers
that allow slightly nicer handling of tags.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span class="org-rainbow-delimiters-depth-1">(</span><span class="org-keyword">defun</span> <span class="org-function-name">roam-extra:get-filetags</span> <span class="org-rainbow-delimiters-depth-2">()</span>
  <span class="org-rainbow-delimiters-depth-2">(</span>split-string <span class="org-rainbow-delimiters-depth-3">(</span><span class="org-keyword">or</span> <span class="org-rainbow-delimiters-depth-4">(</span>org-roam-get-keyword <span class="org-string">&quot;filetags&quot;</span><span class="org-rainbow-delimiters-depth-4">)</span> <span class="org-string">&quot;&quot;</span><span class="org-rainbow-delimiters-depth-3">)</span><span class="org-rainbow-delimiters-depth-2">)</span><span class="org-rainbow-delimiters-depth-1">)</span>

<span class="org-rainbow-delimiters-depth-1">(</span><span class="org-keyword">defun</span> <span class="org-function-name">roam-extra:add-filetag</span> <span class="org-rainbow-delimiters-depth-2">(</span>tag<span class="org-rainbow-delimiters-depth-2">)</span>
  <span class="org-rainbow-delimiters-depth-2">(</span><span class="org-keyword">let*</span> <span class="org-rainbow-delimiters-depth-3">(</span><span class="org-rainbow-delimiters-depth-4">(</span>new-tags <span class="org-rainbow-delimiters-depth-5">(</span>cons tag <span class="org-rainbow-delimiters-depth-6">(</span>roam-extra:get-filetags<span class="org-rainbow-delimiters-depth-6">)</span><span class="org-rainbow-delimiters-depth-5">)</span><span class="org-rainbow-delimiters-depth-4">)</span>
         <span class="org-rainbow-delimiters-depth-4">(</span>new-tags-str <span class="org-rainbow-delimiters-depth-5">(</span>combine-and-quote-strings new-tags<span class="org-rainbow-delimiters-depth-5">)</span><span class="org-rainbow-delimiters-depth-4">)</span><span class="org-rainbow-delimiters-depth-3">)</span>
    <span class="org-rainbow-delimiters-depth-3">(</span>org-roam-set-keyword <span class="org-string">&quot;filetags&quot;</span> new-tags-str<span class="org-rainbow-delimiters-depth-3">)</span><span class="org-rainbow-delimiters-depth-2">)</span><span class="org-rainbow-delimiters-depth-1">)</span>

<span class="org-rainbow-delimiters-depth-1">(</span><span class="org-keyword">defun</span> <span class="org-function-name">roam-extra:del-filetag</span> <span class="org-rainbow-delimiters-depth-2">(</span>tag<span class="org-rainbow-delimiters-depth-2">)</span>
  <span class="org-rainbow-delimiters-depth-2">(</span><span class="org-keyword">let*</span> <span class="org-rainbow-delimiters-depth-3">(</span><span class="org-rainbow-delimiters-depth-4">(</span>new-tags <span class="org-rainbow-delimiters-depth-5">(</span>seq-difference <span class="org-rainbow-delimiters-depth-6">(</span>roam-extra:get-filetags<span class="org-rainbow-delimiters-depth-6">)</span> `<span class="org-rainbow-delimiters-depth-6">(</span>,tag<span class="org-rainbow-delimiters-depth-6">)</span><span class="org-rainbow-delimiters-depth-5">)</span><span class="org-rainbow-delimiters-depth-4">)</span>
         <span class="org-rainbow-delimiters-depth-4">(</span>new-tags-str <span class="org-rainbow-delimiters-depth-5">(</span>combine-and-quote-strings new-tags<span class="org-rainbow-delimiters-depth-5">)</span><span class="org-rainbow-delimiters-depth-4">)</span><span class="org-rainbow-delimiters-depth-3">)</span>
    <span class="org-rainbow-delimiters-depth-3">(</span>org-roam-set-keyword <span class="org-string">&quot;filetags&quot;</span> new-tags-str<span class="org-rainbow-delimiters-depth-3">)</span><span class="org-rainbow-delimiters-depth-2">)</span><span class="org-rainbow-delimiters-depth-1">)</span>
</pre>
</div>
</div>
</div>

<div class="outline-2" id="outline-container-orgc4e90df">
<h2 id="orgc4e90df">The layer</h2>
<div class="outline-text-2" id="text-orgc4e90df">
<p>
<code>roam-extra:todo-p</code> needed no changes at all. I'm including it here only for
easy reference.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span class="org-rainbow-delimiters-depth-1">(</span><span class="org-keyword">defun</span> <span class="org-function-name">roam-extra:todo-p</span> <span class="org-rainbow-delimiters-depth-2">()</span>
  <span class="org-doc">&quot;Return non-nil if current buffer has any </span><span class="org-doc"><span class="custom">TODO</span></span><span class="org-doc"> entry.</span>

<span class="org-doc"><span class="custom">TODO</span></span><span class="org-doc"> entries marked as done are ignored, meaning the this</span>
<span class="org-doc">function returns nil if current buffer contains only completed</span>
<span class="org-doc">tasks.&quot;</span>
  <span class="org-rainbow-delimiters-depth-2">(</span>org-element-map
      <span class="org-rainbow-delimiters-depth-3">(</span>org-element-parse-buffer 'headline<span class="org-rainbow-delimiters-depth-3">)</span>
      'headline
    <span class="org-rainbow-delimiters-depth-3">(</span><span class="org-keyword">lambda</span> <span class="org-rainbow-delimiters-depth-4">(</span>h<span class="org-rainbow-delimiters-depth-4">)</span>
      <span class="org-rainbow-delimiters-depth-4">(</span>eq <span class="org-rainbow-delimiters-depth-5">(</span>org-element-property <span class="org-builtin">:todo-type</span> h<span class="org-rainbow-delimiters-depth-5">)</span>
          'todo<span class="org-rainbow-delimiters-depth-4">)</span><span class="org-rainbow-delimiters-depth-3">)</span>
    nil 'first-match<span class="org-rainbow-delimiters-depth-2">)</span><span class="org-rainbow-delimiters-depth-1">)</span>
</pre>
</div>

<p>
As pretty much all functions I used in the old version of
<code>roam-extra:update-todo-tag</code> are gone I took the opportunity to rework it
completely. I think it ended up being slightly simpler. I suspect the the use of
<code>org-with-point-at 1 ...</code> is unnecessary, but I haven't tested it yet so I'm
leaving it in for now.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span class="org-rainbow-delimiters-depth-1">(</span><span class="org-keyword">defun</span> <span class="org-function-name">roam-extra:update-todo-tag</span> <span class="org-rainbow-delimiters-depth-2">()</span>
  <span class="org-doc">&quot;Update </span><span class="org-doc"><span class="custom">TODO</span></span><span class="org-doc"> tag in the current buffer.&quot;</span>
  <span class="org-rainbow-delimiters-depth-2">(</span><span class="org-keyword">when</span> <span class="org-rainbow-delimiters-depth-3">(</span><span class="org-keyword">and</span> <span class="org-rainbow-delimiters-depth-4">(</span>not <span class="org-rainbow-delimiters-depth-5">(</span>active-minibuffer-window<span class="org-rainbow-delimiters-depth-5">)</span><span class="org-rainbow-delimiters-depth-4">)</span>
             <span class="org-rainbow-delimiters-depth-4">(</span>org-roam-file-p<span class="org-rainbow-delimiters-depth-4">)</span><span class="org-rainbow-delimiters-depth-3">)</span>
    <span class="org-rainbow-delimiters-depth-3">(</span><span class="org-keyword">org-with-point-at</span> <span class="org-highlight-numbers-number">1</span>
      <span class="org-rainbow-delimiters-depth-4">(</span><span class="org-keyword">let*</span> <span class="org-rainbow-delimiters-depth-5">(</span><span class="org-rainbow-delimiters-depth-6">(</span>tags <span class="org-rainbow-delimiters-depth-7">(</span>roam-extra:get-filetags<span class="org-rainbow-delimiters-depth-7">)</span><span class="org-rainbow-delimiters-depth-6">)</span>
             <span class="org-rainbow-delimiters-depth-6">(</span>is-todo <span class="org-rainbow-delimiters-depth-7">(</span>roam-extra:todo-p<span class="org-rainbow-delimiters-depth-7">)</span><span class="org-rainbow-delimiters-depth-6">)</span><span class="org-rainbow-delimiters-depth-5">)</span>
        <span class="org-rainbow-delimiters-depth-5">(</span><span class="org-keyword">cond</span> <span class="org-rainbow-delimiters-depth-6">(</span><span class="org-rainbow-delimiters-depth-7">(</span><span class="org-keyword">and</span> is-todo <span class="org-rainbow-delimiters-depth-8">(</span>not <span class="org-rainbow-delimiters-depth-9">(</span>seq-contains-p tags <span class="org-string">&quot;</span><span class="org-string"><span class="custom">todo</span></span><span class="org-string">&quot;</span><span class="org-rainbow-delimiters-depth-9">)</span><span class="org-rainbow-delimiters-depth-8">)</span><span class="org-rainbow-delimiters-depth-7">)</span>
               <span class="org-rainbow-delimiters-depth-7">(</span>roam-extra:add-filetag <span class="org-string">&quot;</span><span class="org-string"><span class="custom">todo</span></span><span class="org-string">&quot;</span><span class="org-rainbow-delimiters-depth-7">)</span><span class="org-rainbow-delimiters-depth-6">)</span>
              <span class="org-rainbow-delimiters-depth-6">(</span><span class="org-rainbow-delimiters-depth-7">(</span><span class="org-keyword">and</span> <span class="org-rainbow-delimiters-depth-8">(</span>not is-todo<span class="org-rainbow-delimiters-depth-8">)</span> <span class="org-rainbow-delimiters-depth-8">(</span>seq-contains-p tags <span class="org-string">&quot;</span><span class="org-string"><span class="custom">todo</span></span><span class="org-string">&quot;</span><span class="org-rainbow-delimiters-depth-8">)</span><span class="org-rainbow-delimiters-depth-7">)</span>
               <span class="org-rainbow-delimiters-depth-7">(</span>roam-extra:del-filetag <span class="org-string">&quot;</span><span class="org-string"><span class="custom">todo</span></span><span class="org-string">&quot;</span><span class="org-rainbow-delimiters-depth-7">)</span><span class="org-rainbow-delimiters-depth-6">)</span><span class="org-rainbow-delimiters-depth-5">)</span><span class="org-rainbow-delimiters-depth-4">)</span><span class="org-rainbow-delimiters-depth-3">)</span><span class="org-rainbow-delimiters-depth-2">)</span><span class="org-rainbow-delimiters-depth-1">)</span>
</pre>
</div>

<p>
In the previous version <code>roam-extra:todo-files</code> was built using an SQL query.
That felt a little brittle to me, so despite that my <a href="https://d12frosted.io/posts/2021-01-16-task-management-with-roam-vol5.html">original inspiration</a>
contains an updated SQL query I decided to go the route of using the org-roam
API instead. The function <code>org-roam-node-list</code> makes it easy to get all nodes
and then finding the files is just a matter of using <code>seq-filter</code> and <code>seq-map</code>.
Now that headings may be nodes, and that heading-based nodes seem to inherit the
top-level tags, a file may appear more than once, hence the call to <code>seq-unique</code>
at the end.
</p>

<p>
Based on what I've seen V2 appears less eager to sync the DB, so to make sure
all nodes are up-to-date it's best to start off with forcing a sync.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span class="org-rainbow-delimiters-depth-1">(</span><span class="org-keyword">defun</span> <span class="org-function-name">roam-extra:todo-files</span> <span class="org-rainbow-delimiters-depth-2">()</span>
  <span class="org-doc">&quot;Return a list of roam files containing </span><span class="org-doc"><span class="custom">todo</span></span><span class="org-doc"> tag.&quot;</span>
  <span class="org-rainbow-delimiters-depth-2">(</span>org-roam-db-sync<span class="org-rainbow-delimiters-depth-2">)</span>
  <span class="org-rainbow-delimiters-depth-2">(</span><span class="org-keyword">let</span> <span class="org-rainbow-delimiters-depth-3">(</span><span class="org-rainbow-delimiters-depth-4">(</span>todo-nodes <span class="org-rainbow-delimiters-depth-5">(</span>seq-filter <span class="org-rainbow-delimiters-depth-6">(</span><span class="org-keyword">lambda</span> <span class="org-rainbow-delimiters-depth-7">(</span>n<span class="org-rainbow-delimiters-depth-7">)</span>
                                  <span class="org-rainbow-delimiters-depth-7">(</span>seq-contains-p <span class="org-rainbow-delimiters-depth-8">(</span>org-roam-node-tags n<span class="org-rainbow-delimiters-depth-8">)</span> <span class="org-string">&quot;</span><span class="org-string"><span class="custom">todo</span></span><span class="org-string">&quot;</span><span class="org-rainbow-delimiters-depth-7">)</span><span class="org-rainbow-delimiters-depth-6">)</span>
                                 <span class="org-rainbow-delimiters-depth-6">(</span>org-roam-node-list<span class="org-rainbow-delimiters-depth-6">)</span><span class="org-rainbow-delimiters-depth-5">)</span><span class="org-rainbow-delimiters-depth-4">)</span><span class="org-rainbow-delimiters-depth-3">)</span>
    <span class="org-rainbow-delimiters-depth-3">(</span>seq-uniq <span class="org-rainbow-delimiters-depth-4">(</span>seq-map #'org-roam-node-file todo-nodes<span class="org-rainbow-delimiters-depth-4">)</span><span class="org-rainbow-delimiters-depth-3">)</span><span class="org-rainbow-delimiters-depth-2">)</span><span class="org-rainbow-delimiters-depth-1">)</span>
</pre>
</div>

<p>
With that in place it turns out that also <code>roam-extra:update-todo-files</code> worked
without any changes. I'm including it here for easy reference as well.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span class="org-rainbow-delimiters-depth-1">(</span><span class="org-keyword">defun</span> <span class="org-function-name">roam-extra:update-todo-files</span> <span class="org-rainbow-delimiters-depth-2">(</span><span class="org-type">&amp;rest</span> _<span class="org-rainbow-delimiters-depth-2">)</span>
  <span class="org-doc">&quot;Update the value of `</span><span class="org-doc"><span class="org-constant">org-agenda-files</span></span><span class="org-doc">'.&quot;</span>
  <span class="org-rainbow-delimiters-depth-2">(</span><span class="org-keyword">setq</span> org-agenda-files <span class="org-rainbow-delimiters-depth-3">(</span>roam-extra:todo-files<span class="org-rainbow-delimiters-depth-3">)</span><span class="org-rainbow-delimiters-depth-2">)</span><span class="org-rainbow-delimiters-depth-1">)</span>
</pre>
</div>
</div>
</div>

<div class="outline-2" id="outline-container-org317e364">
<h2 id="org317e364">Hooking it up</h2>
<div class="outline-text-2" id="text-org317e364">
<p>
The variable <code>org-roam-file-setup-hook</code> is gone, so the the more general
<code>find-file-hook</code> will have to be used instead.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span class="org-rainbow-delimiters-depth-1">(</span>add-hook 'find-file-hook #'roam-extra:update-todo-tag<span class="org-rainbow-delimiters-depth-1">)</span>
<span class="org-rainbow-delimiters-depth-1">(</span>add-hook 'before-save-hook #'roam-extra:update-todo-tag<span class="org-rainbow-delimiters-depth-1">)</span>
<span class="org-rainbow-delimiters-depth-1">(</span>advice-add 'org-agenda <span class="org-builtin">:before</span> #'roam-extra:update-todo-files<span class="org-rainbow-delimiters-depth-1">)</span>
</pre>
</div>
</div>
</div>
<div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-emacs.html">emacs</a> <a href="https://magnus.therning.org/tag-org-mode.html">org-mode</a> <a href="https://magnus.therning.org/tag-org-roam.html">org-roam</a> <a href="https://magnus.therning.org/tag-spacemacs.html">spacemacs</a> </div></div>
    </summary>
    <updated>2021-07-23T13:07:00Z</updated>
    <published>2021-07-23T13:07:00Z</published>
    <category term="emacs"/>
    <category term="org-mode"/>
    <category term="org-roam"/>
    <category term="spacemacs"/>
    <source>
      <id>https://magnus.therning.org/</id>
      <author>
        <name>Magnus Therning</name>
      </author>
      <link href="https://magnus.therning.org/" rel="alternate" type="text/html">
      <link href="https://magnus.therning.org/feed.xml" rel="self" type="application/rss+xml">
      <subtitle>Magnus web site</subtitle>
      <title>Magnus web site</title>
      <updated>2021-07-23T14:07:31Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:,2021:/math/double-convergents</id>
    <link href="https://blog.plover.com/math/double-convergents.html" rel="alternate" type="text/html">
    <title>The convergents of 2x</title>
    <content type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p>Take some real number <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24%5calpha%24"> and let its convergents be <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24c_0%2c%0ac_1%2c%20c_2%2c%20%5cldots%24">.  Now consider the convergents of <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%242%5calpha%24">.
Sometimes they will include <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%242c_0%2c%202c_1%2c%202c_2%2c%20%5cldots%24">, sometimes only
some of these.</p>

<p>For example, the convergents of <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24%5cpi%24"> and <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%242%5cpi%24"> are</p>

<p>$$ \begin{array}{rlc}
\pi &amp; \approx &amp; 
  \color{darkblue}{3},&amp;&amp;&amp; \color{darkblue}{\frac{22}{7}}, &amp;
  \color{darkblue}{\frac{333}{106}}, &amp;&amp; \color{darkblue}{\frac{355}{113}}, &amp;
  \color{darkblue}{\frac{103993}{33102}}, &amp;&amp;
  \frac{104348}{33215}, &amp;
  \color{darkblue}{\frac{208341}{66317}}, &amp;
  \ldots \\
2\pi &amp; \approx &amp;
  \color{darkblue}{6}, &amp; \frac{19}{3}, &amp; \frac{25}{4}, &amp; \color{darkblue}{\frac{44}{7}}, &amp;
  \color{darkblue}{\frac{333}{53}}, &amp;
  \frac{377}{60}, &amp;
  \color{darkblue}{\frac{710}{113}}, &amp;
  \color{darkblue}{\frac{103393}{16551}},  &amp;
  \frac{312689}{49766}, &amp;&amp;
  \color{darkblue}{\frac{416682}{66317}}, &amp;
  \ldots
\end{array} <br>
$$  </p>

<p>Here are the analogous lists for <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24%5cfrac%7b1%2b%5csqrt%7b5%7d%7d2%24"> and
<img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%241%2b%5csqrt5%24">:</p>

<p>$$
\begin{array}{rlc}
\frac12{1+\sqrt{5}}&amp; \approx &amp; 
  1, &amp; 2, &amp; \color{darkblue}{\frac32}, &amp; \frac53, &amp; \frac85, &amp; \color{darkblue}{\frac{13}8}, &amp; \frac{21}{13}, &amp;
  \frac{34}{21}, &amp; \color{darkblue}{\frac{55}{34}}, &amp; \frac{89}{55}, &amp; \frac{144}{89}, &amp; \color{darkblue}{\frac{233}{144}}, &amp; \frac{377}{233}, &amp;\frac{610}{377} , &amp; \color{darkblue}{\frac{987}{610} }, &amp; \ldots
  \\
1+\sqrt{5} &amp; \approx &amp;
  &amp; &amp; \color{darkblue}{3}, &amp;&amp;&amp; \color{darkblue}{\frac{13}4}, &amp;&amp;&amp; \color{darkblue}{\frac{55}{17}}, &amp;&amp;&amp; \color{darkblue}{\frac{233}{72}}, &amp;&amp;&amp; \color{darkblue}{\frac{987}{305}}, &amp; \ldots 
\end{array}
$$</p>

<p>This time all the convergents in the second list are matched by
convergents in the first list.  The number <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24%5cfrac%7b1%2b%5csqrt5%7d%7b2%7d%24"> is
notorious because it's the real number whose convergents converge the
most slowly.  I'm surprised that <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%241%2b%5csqrt5%24"> converges so much more
quickly; I would not have expected the factor of 2 to change the
situation so drastically.</p>

<p>I haven't thought about this at all yet, but it seems to me that a
promising avenue would be to look at what Gosper's algorithm would do
for the case <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24x%5cmapsto%202x%24"> and see what simplifications can be
done. This would probably produce some insight, and maybe a method for 
constructing a number <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24%5calpha%24"> so that <em>all</em> the convergents of
<img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%242%5calpha%24"> are twice those of <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24%5calpha%24">.</p></div>
    </content>
    <updated>2021-07-22T13:09:00Z</updated>
    <published>2021-07-22T13:09:00Z</published>
    <category term="/math"/>
    <author>
      <name>Mark Dominus</name>
      <email>mjd@plover.com</email>
      <uri>http://www.plover.com/</uri>
    </author>
    <source>
      <id>tag:,2005:/</id>
      <icon>http://perl.plover.com/favicon.ico</icon>
      <link href="https://blog.plover.com/index.atom" rel="self" type="application/atom+xml">
      <link href="https://blog.plover.com" rel="alternate" type="text/html">
      <subtitle>The Universe of Discourse (Mark Dominus Blog)</subtitle>
      <title>The Universe of Discourse</title>
      <updated>2021-08-28T16:57:00Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://mpickering.github.io//ide/posts/2021-07-22-summer-of-hls.html</id>
    <link href="http://mpickering.github.io//ide/posts/2021-07-22-summer-of-hls.html" rel="alternate" type="text/html">
    <title>2021-07-22-summer-of-hls</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><h2> Summer of HLS </h2>
<p class="text-muted">
    Posted on July 22, 2021 by <a href="https://github.com/fendor">Fendor</a>
    <span class="avatar"><img src="https://mpickering.github.io/ide/images/fendor.png"></span>
</p>

<p>Greetings!</p>
<p>This summer I am honoured to be able to work on HLS and improve its ecosystem! The project consists of three sub-goals: Bringing HLS/GHCIDE up-to-speed with recent GHC developments, improving the very delicate and important loading logic of GHCIDE, and bringing a proper interface to cabal and stack to query for build information required by an IDE.</p>
<p>But before you continue, I’d like to thank the people who made this project possible! You know who it is? It is you! Thanks to your donations to <a href="https://opencollective.com/haskell-language-server">Haskell Language Server OpenCollective</a> we accumulated over 3000 USD in the collective, making it possible for me to dedicate the whole summer to working on this project. Additionally, I’d like to thank the <a href="https://haskell.foundation/">Haskell Foundation</a>, with whom the <a href="https://haskell.foundation/affiliates/">Haskell IDE Team</a> is affiliated, for their generous donation. So, <strong>thank you</strong>!</p>
<p>Alright, let’s jump into action, what do we want achieve this summer?</p>
<h2 id="ghc-and-ghcide">GHC and GHCIDE</h2>
<p>When GHC 9.0 was released, HLS had no support for it for almost three months and there is no work-in-progress PR for GHC 9.2. A big part of the migration cycle is caused by the module hierarchy re-organisation and changes to GHC’s API. Because of that, it has taken a long time to migrate a large part of the ecosystem.</p>
<p>Haskell Language Server is big. In fact, so big that having every plugin and dependency updated immediately is close to impossible without having an entire team dedicated to upgrading for multiple weeks. However, the main features of the IDE are implemented in GHCIDE (the power-horse of Haskell Language Server). It has fewer features and fewer external dependencies. As such, contrary to HLS, upgrading GHCIDE within a reasonable amount of time after a GHC release <em>is</em> possible. Thus, we want to port GHCIDE to be compatible with GHC 9.2 alpha and lay the foundation to publish GHCIDE to Hackage.</p>
<p>Achieving this goal has clear advantages: an IDE for people who use the latest GHC version. However, it additionally helps developers in migrating their own project to newer GHC versions, since GHCIDE provides a convenient way to discover where an identifier can be imported from.</p>
<h2 id="multiple-home-units">Multiple Home Units</h2>
<p>For a summary and some motivation on what this project is all about see this <a href="https://mpickering.github.io/ide/posts/2020-10-12-multiple-home-units.html">blog post</a>.</p>
<p>As a TLDR: it stabilises HLS’ component loading logic and furthermore, enables some long-desired features for cabal and stack, such as loading multiple components into the same GHCi session.</p>
<h2 id="cabals-show-build-info">Cabal’s Show-Build-Info</h2>
<p>If you know of the so-called <code>show-build-info</code> command in cabal, you might chuckle a bit. At least four authors (including myself) have already attempted to merge <code>show-build-info</code> for <code>cabal-install</code>. It was never finished and merged though.</p>
<p>However, implementing this feature would benefit HLS greatly, as it entails that HLS can eagerly load all components within a cabal project, e.g. provide type-checking and goto definitions for all components. In particular, this would help the Google Summer of Code project adding <a href="https://summerofcode.withgoogle.com/organizations/5997747863289856/#5971774971314176">symbolic renaming</a> support to HLS. Symbolic renaming can only properly function if all components of a project are known but currently, for stack and cabal projects, HLS has no way of finding all components and loading them. <code>show-build-info</code> solves this issue for cabal and there are plans to add a similar command for stack.</p>
<h2 id="summary">Summary</h2>
<p>I am happy to continue contributing to the HLS ecosystem and excited for this summer! Now I hope you are as excited as me. I will keep you all updated on new developments once there is some presentable progress.</p>

<hr></hr>
<a class="text-muted" href="https://mpickering.github.io/ide/index.html">Index</a></div>
    </summary>
    <updated>2021-07-22T00:00:00Z</updated>
    <published>2021-07-22T00:00:00Z</published>
    <source>
      <id>http://mpickering.github.io//ide/atom.xml</id>
      <author>
        <name>Matthew Pickering</name>
        <email>matthewtpickering@gmail.com</email>
      </author>
      <link href="http://mpickering.github.io//ide/atom.xml" rel="self" type="application/atom+xml">
      <link href="http://mpickering.github.io/" rel="alternate" type="text/html">
      <title>IDE Updates</title>
      <updated>2021-07-22T00:00:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>https://www.fpcomplete.com/blog/istio-mtls-debugging-story/</id>
    <link href="https://www.fpcomplete.com/blog/istio-mtls-debugging-story/" rel="alternate" type="text/html">
    <title xml:lang="en">An Istio/mutual TLS debugging story</title>
    <content type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p>Last week, our team was working on a feature enhancement to <a href="https://www.fpcomplete.com/products/kube360/">Kube360</a>. We work with clients in regulated industries, and one of the requirements was fully encrypted traffic throughout the cluster. While we've supported Istio's mutual TLS (mTLS) as an optional feature for end-user applications, not all of our built-in services were using mTLS strict mode. We were working on rolling out that support.</p>
<p>One of the cornerstones of Kube360 is our centralized authentication system, which is primarily supplied by a service (called <code>k3dash</code>) that receives incoming traffic, performs authentication against an external identity provider (such as Okta, Azure AD, or others), and then provides those credentials to the other services within the clusters, such as the Kubernetes Dashboard or Grafana. This service in particular was giving some trouble.</p>
<p>Before diving into the bugs and the debugging journey, however, let's review both Istio's mTLS support and relevant details of how <code>k3dash</code> operates.</p>
<p><em>Interested in solving these kinds of problems? We're looking for experienced DevOps engineers to join our global team. We're hiring globally, and particularly looking for another US lead engineer. If you're interesting, <a href="mailto:jobs@fpcomplete.com">send your CV to jobs@fpcomplete.com</a>.</em></p>
<h2 id="what-is-mtls">What is mTLS?</h2>
<p>In a typical Kubernetes setup, encrypted traffic comes into the cluster and hits a load balancer. That load balancer terminates the TLS connection, resulting in the decrypted traffic. That decrypted traffic is then sent to the relevant service within the cluster. Since traffic within the cluster is typically considered safe, for many use cases this is an acceptable approach.</p>
<p>But for some use cases, such as handling Personally Identifiable Information (PII), extra safeguards may be desired or required. In those cases, we would like to ensure that <em>all</em> network traffic, even traffic inside the same cluster, is encrypted. That gives extra guarantees against both snooping (reading data in transit) and spoofing (faking the source of data) attacks. This can help mitigate the impact of other flaws in the system.</p>
<p>Implementing this complete data-in-transit encryption system manually requires a major overhaul to essentially every application in the cluster. You'll need to teach all of them to terminate their own TLS connections, issue certificates for all applications, and add a new Certificate Authority for all applications to respect.</p>
<p>Istio's mTLS handles this outside of the application. It installs a sidecar that communicates with your application over a localhost connection, bypassing exposed network traffic. It uses sophisticated port forwarding rules (via IP tables) to redirect incoming and outgoing traffic to and from the pod to go via the sidecar. And the Envoy sidecar in the proxy handles all the logic of obtaining TLS certificates, refreshing keys, termination, etc.</p>
<p>The way Istio handles all of this is pretty incredible. When it works, it works great. And when it fails, it can be disastrously difficult to debug. Which is what happened here (though thankfully it took less than a day to get to a conclusion). In the realm of <em>epic foreshadowment</em>, let me point out three specific points about Istio's mTLS worth mentioning.</p>
<ul>
<li>In strict mode, which is what we're going for, the Envoy sidecar will reject any incoming plaintext communication.</li>
<li>Something I hadn't recognized at first, but now have fully internalized: normally, if you make an HTTP connection to a host that doesn't exist, you'll get a failed connection error. You definitely <em>won't</em> get an HTTP response. With Istio, however, you'll <em>always</em> make a successful outgoing HTTP connection, since your connection is going to Envoy itself. If the Envoy proxy cannot make the connection, it will return an HTTP response body with a 503 error message, like most proxies.</li>
<li>The Envoy proxy has special handling for some protocols. Most importantly, if you make a plaintext HTTP outgoing connection, the Envoy proxy has sophisticated abilities to parse the outgoing request, understand details about various headers, and do intelligent routing.</li>
</ul>
<p>OK, that's mTLS. Let's talk about the other player here: <code>k3dash</code>.</p>
<h2 id="k3dash-and-reverse-proxying"><code>k3dash</code> and reverse proxying</h2>
<p>The primary method <code>k3dash</code> uses to provide authentication credentials to other services inside the cluster is HTTP reverse proxying. This is a common technique, and common libraries exist for doing it. In fact, <a href="https://www.stackage.org/package/http-reverse-proxy">I wrote one such library</a> years ago. We've already mentioned a common use case of reverse proxying: load balancing. In a reverse proxy situation, incoming traffic is received by one server, which analyzes the incoming request, performs some transformations, and then chooses a destination service to forward the request to.</p>
<p>One of the most important aspects of reverse proxying is header management. There are a few different things you can do at the header level, such as:</p>
<ul>
<li>Remove hop-by-hop headers, such as <code>transfer-encoding</code>, which apply to a single hop and not the end-to-end communication between client and server.</li>
<li>Inject new headers. For example, in <code>k3dash</code>, we regularly inject headers recognized by the final services for authentication purposes.</li>
<li>Leave headers completely untouched. This is often the case with headers like <code>content-type</code>, where we typically want the client and final server to exchange data without any interference.</li>
</ul>
<p>As one <em>epic foreshadowment</em> example, consider the <code>Host</code> header in a typical reverse proxy situation. I may have a single load balancer handling traffic for a dozen different domain names, including domain names <code>A</code> and <code>B</code>. And perhaps I have a single service behind the reverse proxy serving the traffic for both of those domain names. I need to make sure that my load balancer forwards on the <code>Host</code> header to the final service, so it can decide how to respond to the request.</p>
<p><code>k3dash</code> in fact uses the library linked above for its implementation, and is following fairly standard header forwarding rules, plus making some specific modifications within the application.</p>
<p>I think that's enough backstory, and perhaps you're already beginning to piece together what went wrong based on my clues above. Anyway, let's dive in!</p>
<h2 id="the-problem">The problem</h2>
<p>One of my coworkers, Sibi, got started on the Istio mTLS strict mode migration. He got strict mode turned on in a test cluster, and then began to figure out what was broken. I don't know all the preliminary changes he made. But when he reached out to me, he'd gotten us to a point where the Kubernetes load balancer was successfully receiving the incoming requests for <code>k3dash</code> and forwarding them along to <code>k3dash</code>. <code>k3dash</code> was able to log the user in and provide its own UI display. All good so far.</p>
<p>However, following through from the main UI to the Kubernetes Dashboard would fail, and we'd end up with this error message in the browser:</p>
<blockquote>
<p>upstream connect error or disconnect/reset before headers. reset reason: connection failure</p>
</blockquote>
<p>Sibi believed this to be a problem with the <code>k3dash</code> codebase itself and asked me to step in to help debug.</p>
<h2 id="the-wrong-rabbit-hole-and-incredible-laziness">The wrong rabbit hole, and incredible laziness</h2>
<p>This whole section is just a cathartic gripe session on how I foot-gunned myself. I'm entirely to blame for my own pain, as we're about to see.</p>
<p>It seemed pretty clear that the outgoing connection from the <code>k3dash</code> pod to the <code>kubernetes-dashboard</code> pod was failing. (And this turned out to be a safe guess.) The first thing I wanted to do was make a simpler repro, which in this case involved <code>kubectl exec</code>ing into the <code>k3dash</code> container and <code>curl</code>ing to the in-cluster service endpoint. Essentially:</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #657b83;">$ curl -ivvv http://kube360-kubernetes-dashboard.kube360-system.svc.cluster.local/
*   Trying 172.20.165.228...
* TCP_NODELAY set
* Connected to kube360-kubernetes-dashboard.kube360-system.svc.cluster.local (172.20.165.228) port 80 (#0)
&gt; GET / HTTP/1.1
&gt; Host: kube360-kubernetes-dashboard.kube360-system.svc.cluster.local
&gt; User-Agent: curl/7.58.0
&gt; Accept: */*
&gt;
&lt; HTTP/1.1 503 Service Unavailable
HTTP/1.1 503 Service Unavailable
&lt; content-length: 84
content-length: 84
&lt; content-type: text/plain
content-type: text/plain
&lt; date: Wed, 14 Jul 2021 15:29:04 GMT
date: Wed, 14 Jul 2021 15:29:04 GMT
&lt; server: envoy
server: envoy
&lt;
* Connection #0 to host kube360-kubernetes-dashboard.kube360-system.svc.cluster.local left intact
upstream connect error or disconnect/reset before headers. reset reason: local reset
</span></code></pre>
<p>This reproed the problem right away. Great! I was now completely convinced that the problem was not <code>k3dash</code> specific, since neither <code>curl</code> nor <code>k3dash</code> could make the connection, and they both gave the same <code>upstream connect error</code> message. I could think of a few different reasons for this to happen, none of which were correct:</p>
<ul>
<li>The outgoing packets from the container were not being sent to the Envoy proxy. I strongly believed this one for a while. But if I'd thought a bit harder, I would have realized that this was completely impossible. That <code>upstream connect error</code> message was of course coming from the Envoy proxy itself! If we were having a normal connection failure, we would have received the error message at the TCP level, not as an HTTP 503 response code. Next!</li>
<li>The Envoy sidecar was receiving the packets, but the mesh was confused enough that it couldn't figure out how to connect to the destination Envoy sidecar. This turned out to be partially right, but not in the way I thought.</li>
</ul>
<p>I futzed around with lots of different attempts here but was essentially stalled. Until Sibi noticed something fascinating. It turns out that the following, seemingly nonsensical command <em>did</em> work:</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #657b83;">curl http://kube360-kubernetes-dashboard.kube360-system.svc.cluster.local:443/
</span></code></pre>
<p>For some reason, making an <em>insecure</em> HTTP request over 443, the <em>secure</em> HTTPS port, worked. This made no sense, of course. Why would using the wrong port fix everything? And this is where incredible laziness comes into play. You see, Kubernetes Dashboard's default configuration uses TLS, and requires all of that setup I mentioned above about passing around certificates and updating accepted Certificate Authorities. But you can turn off that requirement, and make it listen on plain text. Since (1) this was intracluster communication, and (2) we've always had strict mTLS on our roadmap, we decided to simply turn off TLS in the Kubernetes Dashboard. However, when doing so, I forgot to switch the port number from 443 to 80.</p>
<p>Not to worry though! I <em>did</em> remember to correctly configure <code>k3dash</code> to communicate with Kubernetes Dashboard, using insecure HTTP, over port 443. Since both parties agreed on the port, it didn't matter that it was the wrong port.</p>
<p>But this was all very frustrating. It meant that the &quot;repro&quot; wasn't a repro at all. <code>curl</code>ing on the wrong port was giving the same error message, but for a different reason. In the meanwhile, we went ahead and changed Kubernetes Dashboard to listen on port 80 and <code>k3dash</code> to connect on port 80. We thought there <em>may</em> be a possibility that the Envoy proxy was giving some special treatment to the port number, which in retrospect doesn't really make much sense. In any event, this ended at a situation where our &quot;repro&quot; wasn't a repro at all.</p>
<h2 id="the-bug-is-in-k3dash">The bug is in <code>k3dash</code></h2>
<p>Now it was clear that Sibi was right. <code>curl</code> could connect, <code>k3dash</code> couldn't. The bug <em>must</em> be inside <code>k3dash</code>. But I couldn't figure out how. Being the author of essentially all the HTTP libraries involved in this toolchain, I began to worry that my HTTP client library itself may somehow be the source of the bug. I went down a rabbit hole there too, putting together some minimal sample program outside <code>k3dash</code>. I <code>kubectl cp</code>ed them over and then ran them... and everything worked fine. Phew, my libraries were working, but not <code>k3dash</code>.</p>
<p>Then I did the thing I should have done at the very beginning. I looked at the logs very, very carefully. Remember, <code>k3dash</code> is doing a reverse proxy. So, it receives an incoming request, modifies it, makes the new request, and then sends a modified response back. The logs included the modified outgoing HTTP request (some fields modified to remove private information):</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #657b83;">2021-07-15 05:20:39.820662778 UTC ServiceRequest Request {
  host                 = &quot;kube360-kubernetes-dashboard.kube360-system.svc.cluster.local&quot;
  port                 = 80
  secure               = False
  requestHeaders       = [(&quot;X-Real-IP&quot;,&quot;127.0.0.1&quot;),(&quot;host&quot;,&quot;test-kube360-hostname.hidden&quot;),(&quot;upgrade-insecure-requests&quot;,&quot;1&quot;),(&quot;user-agent&quot;,&quot;&lt;REDACTED&gt;&quot;),(&quot;accept&quot;,&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&quot;),(&quot;sec-gpc&quot;,&quot;1&quot;),(&quot;referer&quot;,&quot;http://test-kube360-hostname.hidden/dash&quot;),(&quot;accept-language&quot;,&quot;en-US,en;q=0.9&quot;),(&quot;cookie&quot;,&quot;&lt;REDACTED&gt;&quot;),(&quot;x-forwarded-for&quot;,&quot;192.168.0.1&quot;),(&quot;x-forwarded-proto&quot;,&quot;http&quot;),(&quot;x-request-id&quot;,&quot;&lt;REDACTED&gt;&quot;),(&quot;x-envoy-attempt-count&quot;,&quot;3&quot;),(&quot;x-envoy-internal&quot;,&quot;true&quot;),(&quot;x-forwarded-client-cert&quot;,&quot;&lt;REDACTED&gt;&quot;),(&quot;Authorization&quot;,&quot;&lt;REDACTED&gt;&quot;)]
  path                 = &quot;/&quot;
  queryString          = &quot;&quot;
  method               = &quot;GET&quot;
  proxy                = Nothing
  rawBody              = False
  redirectCount        = 0
  responseTimeout      = ResponseTimeoutNone
  requestVersion       = HTTP/1.1
}
</span></code></pre>
<p>I tried to leave in enough content here to give you the same overwhelmed sense that I had looking it. Keep in mind the <code>requestHeaders</code> field is in practice about three times as long. Anyway, with the slimmed down headers, and all my hints throughout, see if you can guess what the problem is.</p>
<p>Ready? It's the <code>Host</code> header! Let's take a quote from the <a href="https://istio.io/latest/docs/ops/configuration/traffic-management/traffic-routing/">Istio traffic routing documentation</a>. Regarding HTTP traffic, it says:</p>
<blockquote>
<p>Requests are routed based on the port and <em><code>Host</code></em> header, rather than port and IP. This means the destination IP address is effectively ignored. For example, <code>curl 8.8.8.8 -H &quot;Host: productpage.default.svc.cluster.local&quot;</code>, would be routed to the <code>productpage</code> Service.</p>
</blockquote>
<p>See the problem? <code>k3dash</code> is behaving like a standard reverse proxy, and including the <code>Host</code> header, which is almost always the right thing to do. But not here! In this case, that <code>Host</code> header we're forwarding is confusing Envoy. Envoy is trying to connect to something (<code>test-kube360-hostname.hidden</code>) that doesn't respond to its mTLS connections. That's why we get the <code>upstream connect error</code>. And that's why we got the same response as when we used the wrong port number, since Envoy is configured to only receive incoming traffic on a port that the service is actually listening to.</p>
<h2 id="the-fix">The fix</h2>
<p>After all of that, the fix is rather anticlimactic:</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #dc322f;">-(\(h, _) -&gt; not (Set.member h _serviceStripHeaders))
</span><span style="color: #859900;">+-- Strip out host headers, since they confuse the Envoy proxy
+(\(h, _) -&gt; not (Set.member h _serviceStripHeaders) &amp;&amp; h /= &quot;Host&quot;)
</span></code></pre>
<p>We already had logic in <code>k3dash</code> to strip away specific headers for each service. And it turns out this logic was primarily used to strip out the <code>Host</code> header for services that got confused when they saw it! Now we just need to strip away the <code>Host</code> header for all the services instead. Fortunately none of our services perform any logic based on the <code>Host</code> header, so with that in place, we should be good. We deployed the new version of <code>k3dash</code>, and voilà! everything worked.</p>
<h2 id="the-moral-of-the-story">The moral of the story</h2>
<p>I walked away from this adventure with a much better understanding of how Istio interacts with applications, which is great. I got a great reminder to look more carefully at log messages before hardening my assumptions about the source of a bug. And I got a great kick in the pants for being lazy about port number fixes.</p>
<p>All in all, it was about six hours of debugging fun. And to quote a great Hebrew phrase on it, &quot;היה טוב, וטוב שהיה&quot; (it was good, and good that it <em>was</em> (in the past)).</p>
<hr></hr>
<p>As I mentioned above, we're actively looking for new DevOps candidates, especially US based candidates. If you're interested in working with a global team of experienced DevOps, Rust, and Haskell engineers, consider <a href="mailto:jobs@fpcomplete.com">sending us your CV</a>.</p>
<p>And if you're looking for a solid Kubernetes platform, batteries included, so you can offload this kind of tedious debugging to some other unfortunate souls (read: us), <a href="https://www.fpcomplete.com/products/kube360/">check out Kube360</a>.</p>
<p>If you liked this article, you may also like:</p>
<ul>
<li><a href="https://www.fpcomplete.com/devsecops/">DevSecOps homepage</a></li>
<li><a href="https://www.fpcomplete.com/blog/rust-kubernetes-windows/">Deploying Rust with Windows Containers on Kubernetes</a></li>
<li><a href="https://www.fpcomplete.com/blog/cloud-vendor-neutrality/">Cloud Vendor Neutrality</a></li>
<li><a href="https://www.fpcomplete.com/blog/devops-for-developers/">DevOps for (Skeptical) Developers</a></li>
<li><a href="https://www.fpcomplete.com/blog/kube360s-kubernetes-security-focus/">Secure defaults with Kubernetes Security with Kube360</a></li>
</ul>
<div class="blog-cta">
<p><a href="https://www.fpcomplete.com/signups/request-a-demo/"><img alt="See what Kube360 can do for you" src="https://www.fpcomplete.com/images/cta/kube360.png"></a></p>
</div></div>
    </content>
    <updated>2021-07-20T00:00:00Z</updated>
    <published>2021-07-20T00:00:00Z</published>
    <source>
      <id>https://www.fpcomplete.com/atom.xml</id>
      <author>
        <name>FP Complete</name>
      </author>
      <link href="https://www.fpcomplete.com/atom.xml" rel="self" type="application/atom+xml">
      <link href="https://www.fpcomplete.com" rel="alternate" type="text/html">
      <subtitle xml:lang="en">Blog posts from FP Complete, focusing on Rust, Haskell, and DevOps</subtitle>
      <title xml:lang="en">FP Complete Blog</title>
      <updated>2021-08-30T00:00:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-US">
    <id>584219d403596e3099e0ee9b:58462c0e15d5db6feba171c0:60d3c48b93583f1d488d12b6</id>
    <link href="https://mmhaskell.com/blog/2021/7/19/hidden-identity-using-the-identity-monad" rel="alternate" type="text/html">
    <title>Hidden Identity: Using the Identity Monad</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://www.mmhaskell.com/blog/2021/7/12/making-sense-of-monads">Last week</a> we announced our new <a href="https://academy.mondaymorninghaskell.com/p/making-sense-of-monads">Making Sense of Monads</a> course. If you <a href="https://www.mmhaskell.com/subscribe">subscribe</a> to our mailing list in the next week, you can get a special discount for this and our other courses! So don't miss out!</p>
<p>But in the meantime, we've got one more article on monads! Last week, we looked at the &quot;Function monad&quot;. This week, we're going to explore another monad that you might not think about as much. But even if we don't specifically invoke it, this monad is actually present quite often, just in a hidden way! Once again, you  can watch the video to learn more about this, or just read along below!</p><p>On its face, the identity monad is very simple. It just seems to wrap a value, and we can retrieve this value by calling <code>runIdentity</code>:</p><pre><code class="lang-haskell">newtype Identity a = Identity { runIdentity :: a }</code></pre><p>So we can easily wrap any value in the Identity monad just by calling the <code>Identity</code> constructor, and we can unwrap it by calling <code>runIdentity</code>.</p><p>We can write a very basic instance of the monad typeclass for this type, that just incorporates wrapping and unwrapping the value:</p><pre><code class="lang-haskell">instance Monad Identity where
  return = Identity
  (Identity a) &gt;&gt;= f = f a</code></pre><h2 id="a-base-monad">A Base Monad</h2><p>So what's the point or use of this? Well first of all, let's consider a lot of common monads. We might think of <code>Reader</code>, <code>Writer</code> and <code>State</code>. These all have transformer variations like <code>ReaderT</code>, <code>WriterT</code>, and <code>StateT</code>. But actually, it's the &quot;vanilla&quot; versions of these functions that are the variations!</p><p>If we consider the <code>Reader</code> monad, this is actually a type synonym for a transformer over the Identity monad!</p><pre><code class="lang-haskell">type Reader a = ReaderT Identity a</code></pre><p>In this way, we don't need multiple abstractions to deal with &quot;vanilla&quot; monads and their transformers. The vanilla versions are the same as the transformers. The <code>runReader</code> function can actually be written in terms of <code>runReaderT</code> and <code>runIdentity</code>:</p><pre><code class="lang-haskell">runReader :: Reader r a -&gt; r -&gt; a
runReader action = runIdentity . (runReaderT action)</code></pre><h2 id="using-identity">Using Identity</h2><p>Now, there aren't that many reasons to use <code>Identity</code> explicitly, since the monad encapsulates no computational strategy. But here's one idea. Suppose that you've written a transformation function that takes a monadic action and runs some transformations on the inner value:</p><pre><code class="lang-haskell">transformInt :: (Monad m) =&gt; m Int -&gt; m (Double, Int)
transformInt action = do
  asDouble &lt;- fromIntegral &lt;$&gt; action
  tripled &lt;- (3 *) &lt;$&gt; action
  return (asDouble, tripled)</code></pre><p>You would get an error if you tried to apply this to a normal unwrapped value. But by wrapping in <code>Identity</code>, we can reuse this function!</p><pre><code class="lang-haskell">&gt;&gt; transformInt 5
Error!
&gt;&gt; transformInt (Identity 5)
Identity (5.0, 15)</code></pre><p>We can imagine the same thing with a function constraint using <code>Functor</code> or <code>Applicative</code>. Remember that <code>Identity</code> belongs to these classes as well, since it is a <code>Monad</code>!</p><p>Of course, it would be possible in this case to write a normal function that would accomplish the simple task in this example. But no matter how complex the task, we could write a version relying on the <code>Identity</code> monad that will always work!</p><pre><code class="lang-haskell">transformInt' :: Int -&gt; (Double, Int)
transformInt' = runIdentity . transformToInt . Identity

...

&gt;&gt; transformInt' 5
(5.0, 15)</code></pre><p>The <code>Identity</code> monad is just a bit of trivia regarding monads. If you've been dying to learn how to really use monads in your own programming, you should sign up for our new course <a href="https://academy.mondaymorninghaskell.com/p/making-sense-of-monads">Making Sense of Monads!</a> For the next week you can <a href="https://www.mmhaskell.com/subscribe">subscribe</a> to our mailing list and get a discount on this course as well as our <a href="https://academy.mondaymorninghaskell.com">other courses</a>!</p></div>
    </summary>
    <updated>2021-07-19T14:30:00Z</updated>
    <published>2021-07-19T14:30:00Z</published>
    <author>
      <name>James Bowen</name>
    </author>
    <source>
      <id>https://mmhaskell.com/blog/</id>
      <link href="https://mmhaskell.com/blog/" rel="alternate" type="text/html">
      <link href="https://mmhaskell.com/blog?format=rss" rel="self" type="application/rss+xml">
      <title>Blog - Monday Morning Haskell</title>
      <updated>2021-09-01T05:25:47Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://www.parsonsmatt.org/2021/07/16/hspec_hooks.html</id>
    <link href="https://www.parsonsmatt.org/2021/07/16/hspec_hooks.html" rel="alternate" type="text/html">
    <title>Hspec Hooks</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>The <code class="language-plaintext highlighter-rouge">hspec</code> testing library includes many useful facilities for writing tests, including a powerful “hooks” capability.
These hooks allow you to provide data and capabilities to your tests.</p>

<h1 id="specwith"><code class="language-plaintext highlighter-rouge">SpecWith</code></h1>

<p>The typical <code class="language-plaintext highlighter-rouge">hspec</code> test suite looks like this:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">main</span> <span class="o">::</span> <span class="kt">IO</span> <span class="nb">()</span>
<span class="n">main</span> <span class="o">=</span> 
    <span class="n">hspec</span> <span class="n">specs</span>

<span class="n">specs</span> <span class="o">::</span> <span class="kt">Spec</span>
<span class="n">specs</span> <span class="o">=</span> <span class="kr">do</span>
    <span class="n">describe</span> <span class="s">&quot;math&quot;</span> <span class="o">$</span> <span class="kr">do</span>
        <span class="n">it</span> <span class="s">&quot;1 + 1&quot;</span> <span class="o">$</span> <span class="kr">do</span>
            <span class="mi">1</span> <span class="o">+</span> <span class="mi">1</span>
                <span class="p">`</span><span class="n">shouldBe</span><span class="p">`</span>
                    <span class="mi">2</span>
        <span class="n">it</span> <span class="s">&quot;3 * 2&quot;</span> <span class="o">$</span> <span class="kr">do</span>
            <span class="mi">3</span> <span class="o">*</span> <span class="mi">2</span>
                <span class="p">`</span><span class="n">shouldBe</span><span class="p">`</span>
                    <span class="mi">6</span>
    <span class="n">describe</span> <span class="s">&quot;words&quot;</span> <span class="o">$</span> <span class="kr">do</span>
        <span class="n">it</span> <span class="s">&quot;breaks stuff up&quot;</span> <span class="o">$</span> <span class="kr">do</span>
            <span class="n">words</span> <span class="s">&quot;asdf asdf asdf&quot;</span>
                <span class="p">`</span><span class="n">shouldBe</span><span class="p">`</span>
                    <span class="p">[</span><span class="s">&quot;asdf&quot;</span><span class="p">,</span> <span class="s">&quot;asdf&quot;</span><span class="p">,</span> <span class="s">&quot;asdf&quot;</span><span class="p">]</span>
</code></pre></div></div>

<p>Everything is a <code class="language-plaintext highlighter-rouge">Spec</code>, and it’s all nice and cute.</p>

<p>Suddenly, you want to provide a database connection to each item in a spec.
You can do this using a plain ol’ function argument, and this works alright.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">main</span> <span class="o">::</span> <span class="kt">IO</span> <span class="nb">()</span>
<span class="n">main</span> <span class="o">=</span> <span class="kr">do</span>
    <span class="n">db</span> <span class="o">&lt;-</span> <span class="n">createDatabase</span>
    <span class="n">specs</span> <span class="n">db</span>

<span class="n">specs</span> <span class="o">::</span> <span class="kt">DB</span> <span class="o">-&gt;</span> <span class="kt">Spec</span>
<span class="n">specs</span> <span class="n">db</span> <span class="o">=</span> <span class="kr">do</span>
    <span class="n">describe</span> <span class="s">&quot;SELECT&quot;</span> <span class="o">$</span> <span class="kr">do</span>
        <span class="n">it</span> <span class="s">&quot;works&quot;</span> <span class="o">$</span> <span class="kr">do</span>
            <span class="n">result</span> <span class="o">&lt;-</span> <span class="n">runDb</span> <span class="n">db</span> <span class="s">&quot;SELECT....&quot;</span>
            <span class="n">result</span>
                <span class="p">`</span><span class="n">shouldBe</span><span class="p">`</span>
                    <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
</code></pre></div></div>

<p>But - what if we want to have a <em>fresh</em> database connection made, for each test?
Well, then it’s a bit more awkward.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">specs</span> <span class="o">::</span> <span class="kt">Spec</span>
<span class="n">specs</span> <span class="o">=</span> <span class="kr">do</span>
    <span class="n">describe</span> <span class="s">&quot;SELECT&quot;</span> <span class="o">$</span> <span class="kr">do</span>
        <span class="n">it</span> <span class="s">&quot;works&quot;</span> <span class="o">$</span> <span class="kr">do</span>
            <span class="n">db</span> <span class="o">&lt;-</span> <span class="n">createDatabase</span>
            <span class="n">result</span> <span class="o">&lt;-</span> <span class="n">runDb</span> <span class="n">db</span> <span class="s">&quot;SELECT....&quot;</span>
            <span class="n">result</span>
                <span class="p">`</span><span class="n">shouldBe</span><span class="p">`</span>
                    <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
        <span class="n">it</span> <span class="s">&quot;does other stuff&quot;</span> <span class="o">$</span> <span class="kr">do</span>
            <span class="n">db</span> <span class="o">&lt;-</span> <span class="n">createDatabase</span>
            <span class="n">result</span> <span class="o">&lt;-</span> <span class="n">runDb</span> <span class="n">db</span> <span class="s">&quot;OTHER STUFF...&quot;</span>
            <span class="n">result</span> 
                <span class="p">`</span><span class="n">shouldBe</span><span class="p">`</span>
                    <span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">]</span>
</code></pre></div></div>

<p>That’s not much fun!</p>

<p><code class="language-plaintext highlighter-rouge">hspec</code> gives us a function <code class="language-plaintext highlighter-rouge">before</code> that can be used to provide a fresh value for each item in a spec.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">specs</span> <span class="o">::</span> <span class="kt">Spec</span>
<span class="n">specs</span> <span class="o">=</span> <span class="n">before</span> <span class="n">createDatabase</span> <span class="o">$</span> <span class="kr">do</span>
    <span class="n">describe</span> <span class="s">&quot;SELECT&quot;</span> <span class="o">$</span> <span class="kr">do</span>
        <span class="n">it</span> <span class="s">&quot;works&quot;</span> <span class="o">$</span> <span class="nf">\</span><span class="n">db</span> <span class="o">-&gt;</span> <span class="kr">do</span>
            <span class="n">result</span> <span class="o">&lt;-</span> <span class="n">runDb</span> <span class="n">db</span> <span class="s">&quot;SELECT....&quot;</span>
            <span class="n">result</span>
                <span class="p">`</span><span class="n">shouldBe</span><span class="p">`</span>
                    <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
        <span class="n">it</span> <span class="s">&quot;does other stuff&quot;</span> <span class="o">$</span> <span class="nf">\</span><span class="n">db</span> <span class="o">-&gt;</span> <span class="kr">do</span>
            <span class="n">result</span> <span class="o">&lt;-</span> <span class="n">runDb</span> <span class="n">db</span> <span class="s">&quot;OTHER STUFF...&quot;</span>
            <span class="n">result</span> 
                <span class="p">`</span><span class="n">shouldBe</span><span class="p">`</span>
                    <span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">]</span>
</code></pre></div></div>

<p>Let’s look at the type of <code class="language-plaintext highlighter-rouge">before</code>.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">before</span> <span class="o">::</span> <span class="kt">IO</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">SpecWith</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">Spec</span>
</code></pre></div></div>

<p>This raises some questions.
What is a <code class="language-plaintext highlighter-rouge">SpecWith</code>?
All of the <code class="language-plaintext highlighter-rouge">describe</code> stuff functions in <a href="https://hackage.haskell.org/package/hspec-core-2.8.2/docs/Test-Hspec-Core-Spec.html#g:2">a <code class="language-plaintext highlighter-rouge">SpecM</code> monad</a>, which constructs the <code class="language-plaintext highlighter-rouge">Spec</code> tree and allows for filtering, focusing, and mapping of spec items.
That link shows that <code class="language-plaintext highlighter-rouge">type Spec = SpecWith ()</code>.
Expanding our type, we get this:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">before</span> <span class="o">::</span> <span class="kt">IO</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">SpecWith</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">SpecWith</span> <span class="nb">()</span>
</code></pre></div></div>

<p>A <code class="language-plaintext highlighter-rouge">SpecWith</code> is a test that expects some additional context.</p>

<h1 id="more-before">More <code class="language-plaintext highlighter-rouge">before</code></h1>

<p>So, <code class="language-plaintext highlighter-rouge">before</code> is used to provide a fresh thing to every test item.
What if you want to create a single thing and have it be shared among every spec item?</p>

<p>We can use <code class="language-plaintext highlighter-rouge">beforeAll</code> to accomplish that.
It has the same signature.
The only difference is that the creation action is run once, and then shared among every test.</p>

<p>What if you don’t want to pass anything to the tests, but you want to run some action?</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">before_</span> <span class="o">::</span> <span class="kt">IO</span> <span class="nb">()</span> <span class="o">-&gt;</span> <span class="kt">SpecWith</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">SpecWith</span> <span class="n">a</span>
</code></pre></div></div>

<p>You may be wondering: “What if I want to run an action <em>once</em> before <em>all</em> the items in the test go, but don’t provide a value?”
<code class="language-plaintext highlighter-rouge">hspec</code> has you covered - <code class="language-plaintext highlighter-rouge">beforeAll_</code> works exactly like that.</p>

<p>There’s one more tricky thing here - <code class="language-plaintext highlighter-rouge">beforeWith</code>.</p>

<p>Note that in <code class="language-plaintext highlighter-rouge">before</code>, the result is a <code class="language-plaintext highlighter-rouge">Spec</code> - a test without extra context.
How do we call <code class="language-plaintext highlighter-rouge">before</code> on something that has already had <code class="language-plaintext highlighter-rouge">before</code> called on it?
<code class="language-plaintext highlighter-rouge">beforeWith</code> comes to the rescue.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">beforeWith</span> <span class="o">::</span> <span class="p">(</span><span class="n">b</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="n">a</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">SpecWith</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">SpecWith</span> <span class="n">b</span>
</code></pre></div></div>

<p>If you understand <code class="language-plaintext highlighter-rouge">Contravariant</code> functors, then that intuition will carry you a decent way.
If you don’t, that’s cool - let’s dig into it.</p>

<p>Let’s say we have some group of tests that want to run a set of migrations against the database, and also provide some information along with the database connection.
We’ll insert a fake <code class="language-plaintext highlighter-rouge">User</code> and make the <code class="language-plaintext highlighter-rouge">Id</code> available to the resulting tests.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">spec</span> <span class="o">::</span> <span class="kt">Spec</span>
<span class="n">spec</span> <span class="o">=</span> <span class="n">before</span> <span class="n">createDatabase</span> <span class="o">$</span> <span class="kr">do</span>
    <span class="n">describe</span> <span class="s">&quot;SELECT&quot;</span> <span class="o">$</span> <span class="kr">do</span>
        <span class="n">it</span> <span class="s">&quot;has a database&quot;</span> <span class="o">$</span> <span class="nf">\</span><span class="n">db</span> <span class="o">-&gt;</span> <span class="kr">do</span>
            <span class="o">...</span>

    <span class="n">beforeWith</span> <span class="n">createUser</span> <span class="o">$</span> <span class="n">describe</span> <span class="s">&quot;With User&quot;</span> <span class="o">$</span> <span class="kr">do</span>
        <span class="n">it</span> <span class="s">&quot;has a db and a user&quot;</span> <span class="o">$</span> <span class="nf">\</span><span class="p">(</span><span class="n">db</span><span class="p">,</span> <span class="n">userId</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kr">do</span>
            <span class="o">...</span>

<span class="n">createUser</span> <span class="o">::</span> <span class="kt">DB</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="p">(</span><span class="kt">DB</span><span class="p">,</span> <span class="kt">UserId</span><span class="p">)</span>
<span class="n">createUser</span> <span class="n">db</span> <span class="o">=</span> <span class="kr">do</span>
    <span class="n">userId</span> <span class="o">&lt;-</span> <span class="n">runDb</span> <span class="o">$</span> <span class="n">insert</span> <span class="kt">User</span> <span class="p">{</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;asdf&quot;</span> <span class="p">}</span>
    <span class="n">pure</span> <span class="p">(</span><span class="n">db</span><span class="p">,</span> <span class="n">userId</span><span class="p">)</span>
</code></pre></div></div>

<p>Now, <code class="language-plaintext highlighter-rouge">beforeWith</code> means that each item gets run before each spec.
So each test item in the database will have a different <code class="language-plaintext highlighter-rouge">User</code> created for the test.</p>

<p>Naturally, there’s <code class="language-plaintext highlighter-rouge">beforeAllWith</code>, which would only be run once, and would provide the same <code class="language-plaintext highlighter-rouge">UserId</code> to each test item.</p>

<p>You may wonder: “Is there a <code class="language-plaintext highlighter-rouge">beforeAllWith_</code>? Or even just <code class="language-plaintext highlighter-rouge">beforeWith_</code>?”
There is not, and the reason is that they’re redundant.
Note how <code class="language-plaintext highlighter-rouge">before_</code> and <code class="language-plaintext highlighter-rouge">beforeAll_</code> don’t affect the context of the specs.</p>

<pre><code class="language-Haskell">before_    :: IO () -&gt; SpecWith a -&gt; SpecWith a
beforeAll_ :: IO () -&gt; SpecWith a -&gt; SpecWith a
</code></pre>

<p>If we want to <em>not</em> affect the context of the spec, then we can just return it directly.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">beforeWith_</span> <span class="o">::</span> <span class="p">(</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="nb">()</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">SpecWith</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">SpecWith</span> <span class="n">a</span>
<span class="n">beforeWith_</span> <span class="n">action</span> <span class="o">=</span> 
    <span class="n">beforeWith</span> <span class="o">$</span> <span class="nf">\</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="kr">do</span>
        <span class="n">action</span> <span class="n">a</span>
        <span class="n">pure</span> <span class="n">a</span>
</code></pre></div></div>

<h1 id="after"><code class="language-plaintext highlighter-rouge">after</code></h1>

<p>The <code class="language-plaintext highlighter-rouge">before</code> family of functions are useful for providing data and preparing the state of the world for a test.
<code class="language-plaintext highlighter-rouge">after</code> is useful for tearing it down, or cleaning up after a test.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">after</span> <span class="o">::</span> <span class="kt">ActionWith</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">SpecWith</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">SpecWith</span> <span class="n">a</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">ActionWith</code> is a type synonym, so let’s review the definition and inline it here:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">type</span> <span class="kt">ActionWith</span> <span class="n">a</span> <span class="o">=</span> 
    <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="nb">()</span>

<span class="n">after</span> <span class="o">::</span> <span class="p">(</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="nb">()</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">SpecWith</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">SpecWith</span> <span class="n">a</span>
</code></pre></div></div>

<p>(I often find that inlining type synonyms helps with <code class="language-plaintext highlighter-rouge">hspec</code> when reading and understanding it)</p>

<p>Let’s write a function that deletes the <code class="language-plaintext highlighter-rouge">User</code> out of the database for all the terms.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">spec</span> <span class="o">::</span> <span class="kt">Spec</span>
<span class="n">spec</span> <span class="o">=</span> <span class="n">before</span> <span class="n">createDatabase</span> <span class="o">$</span> <span class="kr">do</span>
    <span class="n">describe</span> <span class="s">&quot;SELECT&quot;</span> <span class="o">...</span>

    <span class="n">beforeWith</span> <span class="n">createUser</span> <span class="o">$</span> 
        <span class="n">after</span> <span class="n">deleteUser</span> <span class="o">$</span>
        <span class="n">describe</span> <span class="s">&quot;With User&quot;</span> <span class="o">$</span> <span class="kr">do</span>
            <span class="n">it</span> <span class="s">&quot;has a db and a user&quot;</span> <span class="o">$</span> <span class="nf">\</span><span class="p">(</span><span class="n">db</span><span class="p">,</span> <span class="n">userId</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kr">do</span>
                <span class="o">...</span>

<span class="n">createUser</span> <span class="o">::</span> <span class="kt">DB</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="p">(</span><span class="kt">DB</span><span class="p">,</span> <span class="kt">UserId</span><span class="p">)</span>
<span class="n">createUser</span> <span class="n">db</span> <span class="o">=</span> <span class="kr">do</span>
    <span class="n">userId</span> <span class="o">&lt;-</span> <span class="n">runDb</span> <span class="o">$</span> <span class="n">insert</span> <span class="kt">User</span> <span class="p">{</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;asdf&quot;</span> <span class="p">}</span>
    <span class="n">pure</span> <span class="p">(</span><span class="n">db</span><span class="p">,</span> <span class="n">userId</span><span class="p">)</span>

<span class="n">deleteUser</span> <span class="o">::</span> <span class="p">(</span><span class="kt">DB</span><span class="p">,</span> <span class="kt">UserId</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="nb">()</span>
<span class="n">deleteUser</span> <span class="p">(</span><span class="n">db</span><span class="p">,</span> <span class="n">userId</span><span class="p">)</span> <span class="o">=</span> <span class="kr">do</span>
    <span class="n">runDb</span> <span class="o">$</span> <span class="n">delete</span> <span class="n">userId</span>
    <span class="n">pure</span> <span class="nb">()</span>
</code></pre></div></div>

<p>Now, we aren’t polluting our database with all those <code class="language-plaintext highlighter-rouge">User</code> rows.</p>

<p><code class="language-plaintext highlighter-rouge">afterAll</code> does what you expect, if you know how <code class="language-plaintext highlighter-rouge">beforeAll</code> works.
The action is run exactly once, after all spec items have been run.
If we replace <code class="language-plaintext highlighter-rouge">after</code> with <code class="language-plaintext highlighter-rouge">afterAll</code> in the above code, we’ll get some slightly weird results.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">beforeWith</span> <span class="n">createUser</span> <span class="o">$</span>
    <span class="n">afterAll</span> <span class="n">deleteUser</span> <span class="o">$</span> 
        <span class="n">describe</span> <span class="s">&quot;With User&quot;</span> <span class="o">$</span> <span class="kr">do</span>
            <span class="n">it</span> <span class="s">&quot;has a thing&quot;</span> <span class="o">...</span>
            <span class="n">it</span> <span class="s">&quot;likes cats&quot;</span> <span class="o">...</span>
            <span class="n">it</span> <span class="s">&quot;also likes dogs&quot;</span> <span class="o">...</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">beforeWith</code> is called <em>each time</em> - so we create a fresh <code class="language-plaintext highlighter-rouge">User</code> for each database.
<code class="language-plaintext highlighter-rouge">afterAll</code> gets called on the <em>last</em> spec item - so we keep the first two <code class="language-plaintext highlighter-rouge">User</code> rows in the database.</p>

<p><code class="language-plaintext highlighter-rouge">after_</code> and <code class="language-plaintext highlighter-rouge">afterAll_</code> ignore the <code class="language-plaintext highlighter-rouge">a</code> from <code class="language-plaintext highlighter-rouge">SpecWith a</code>.
Instead of being an <code class="language-plaintext highlighter-rouge">ActionWith a</code> or an <code class="language-plaintext highlighter-rouge">(a -&gt; IO ())</code> as the first parameter, it’s merely the <code class="language-plaintext highlighter-rouge">IO ()</code> action.</p>

<h1 id="around"><code class="language-plaintext highlighter-rouge">around</code></h1>

<p><code class="language-plaintext highlighter-rouge">around</code> is pretty tricky.
It encapsulates the pattern above - create something for each test, then tear it down afterwards.
Most uses of <code class="language-plaintext highlighter-rouge">before create $ after destroy $ ...</code> can be refactored to use <code class="language-plaintext highlighter-rouge">around</code> and enjoy greater exception safety.</p>

<p>Let’s start off with <code class="language-plaintext highlighter-rouge">around_</code>.
It doesn’t worry about the extra context, which makes it easier to understand.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">around_</span> <span class="o">::</span> <span class="p">(</span><span class="kt">IO</span> <span class="nb">()</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="nb">()</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">SpecWith</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">SpecWith</span> <span class="n">a</span>
</code></pre></div></div>

<p>Our first argument is a function, which accepts an <code class="language-plaintext highlighter-rouge">IO ()</code> action and returns another one.
The <code class="language-plaintext highlighter-rouge">IO ()</code> can be named <code class="language-plaintext highlighter-rouge">runTest</code>, and it becomes clear how it works:</p>

<pre><code class="language-Haskell">spec :: Spec
spec = 
    around_ 
        (\runTest -&gt; do
            putStrLn &quot;beginning&quot;
            runTest
            putStrLn &quot;ending&quot;
        ) 
        $ describe &quot;My tests&quot; $ 
</code></pre>

<p>So, our <code class="language-plaintext highlighter-rouge">IO ()</code> parameter is our test, and we can do whatever we want around it.</p>

<p>Let’s get back to <code class="language-plaintext highlighter-rouge">around</code>.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">around</span> <span class="o">::</span> <span class="p">(</span><span class="kt">ActionWith</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="nb">()</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">SpecWith</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">Spec</span>

<span class="n">around</span> <span class="o">::</span> <span class="p">((</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="nb">()</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="nb">()</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">SpecWith</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">SpecWith</span> <span class="nb">()</span>
</code></pre></div></div>

<p>It’s really similar, but our <code class="language-plaintext highlighter-rouge">runTest</code> is now a <em>function</em> from <code class="language-plaintext highlighter-rouge">a</code> to the <code class="language-plaintext highlighter-rouge">IO ()</code>.
Let’s write our user creation/deletion helper with <code class="language-plaintext highlighter-rouge">around</code>.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">spec</span> <span class="o">::</span> <span class="kt">Spec</span>
<span class="n">spec</span> <span class="o">=</span> 
    <span class="n">around</span> 
        <span class="p">(</span><span class="nf">\</span><span class="n">runTest</span> <span class="o">-&gt;</span> <span class="kr">do</span>
            <span class="n">db</span> <span class="o">&lt;-</span> <span class="n">createDatabase</span>
            <span class="n">userId</span> <span class="o">&lt;-</span> <span class="n">createUser</span> <span class="n">db</span>
            <span class="n">runTest</span> <span class="p">(</span><span class="n">db</span><span class="p">,</span> <span class="n">userId</span><span class="p">)</span>
            <span class="n">deleteUser</span> <span class="p">(</span><span class="n">db</span><span class="p">,</span> <span class="n">userId</span><span class="p">)</span>
        <span class="p">)</span> <span class="o">$</span> <span class="n">describe</span> <span class="s">&quot;With User&quot;</span> <span class="o">$</span> <span class="kr">do</span>
            <span class="n">it</span> <span class="s">&quot;has a user&quot;</span> <span class="o">$</span> <span class="nf">\</span><span class="p">(</span><span class="n">db</span><span class="p">,</span> <span class="n">userId</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="o">...</span>

            <span class="n">it</span> <span class="s">&quot;ok ya i get it&quot;</span> <span class="o">$</span> <span class="nf">\</span><span class="p">(</span><span class="n">db</span><span class="p">,</span> <span class="n">userId</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="o">...</span>
</code></pre></div></div>

<p>One thing that’s neat is that we can use <code class="language-plaintext highlighter-rouge">bracket</code> style to safely close out resources, too.
Instead of creating a database connection, let’s use the <code class="language-plaintext highlighter-rouge">withDatabase</code> sort of API.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">spec</span> <span class="o">::</span> <span class="kt">Spec</span>
<span class="n">spec</span> <span class="o">=</span> 
    <span class="n">around</span> 
        <span class="p">(</span><span class="nf">\</span><span class="n">runTest</span> <span class="o">-&gt;</span> <span class="kr">do</span>
            <span class="n">withDatabase</span> <span class="o">$</span> <span class="nf">\</span><span class="n">db</span> <span class="o">-&gt;</span> <span class="kr">do</span>
                <span class="n">userId</span> <span class="o">&lt;-</span> <span class="n">createUser</span> <span class="n">db</span>
                <span class="n">runTest</span> <span class="p">(</span><span class="n">db</span><span class="p">,</span> <span class="n">userId</span><span class="p">)</span>
                <span class="n">deleteUser</span> <span class="p">(</span><span class="n">db</span><span class="p">,</span> <span class="n">userId</span><span class="p">)</span>
        <span class="p">)</span> <span class="o">$</span> <span class="n">describe</span> <span class="s">&quot;With User&quot;</span> <span class="o">$</span> <span class="kr">do</span>
            <span class="n">it</span> <span class="s">&quot;has a user&quot;</span> <span class="o">$</span> <span class="nf">\</span><span class="p">(</span><span class="n">db</span><span class="p">,</span> <span class="n">userId</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="o">...</span>

            <span class="n">it</span> <span class="s">&quot;ok ya i get it&quot;</span> <span class="o">$</span> <span class="nf">\</span><span class="p">(</span><span class="n">db</span><span class="p">,</span> <span class="n">userId</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="o">...</span>
</code></pre></div></div>

<p>Now, if an exception is thrown in the test <em>or</em> in the <code class="language-plaintext highlighter-rouge">around</code> action, the <code class="language-plaintext highlighter-rouge">withDatabase</code> function gets a chance to clean up the database connection.
Resource safety FTW!</p>

<h1 id="aroundwith"><code class="language-plaintext highlighter-rouge">aroundWith</code></h1>

<p>You may have noticed that <code class="language-plaintext highlighter-rouge">around</code> results in a <code class="language-plaintext highlighter-rouge">Spec</code>, not a <code class="language-plaintext highlighter-rouge">SpecWith</code>.
You may have further inferred that there must be an <code class="language-plaintext highlighter-rouge">aroundWith</code> that lifted that restriction.
There is, and the type signature is a bit scary.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">aroundWith</span>
    <span class="o">::</span> <span class="p">(</span><span class="kt">ActionWith</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">ActionWith</span> <span class="n">b</span><span class="p">)</span> 
    <span class="o">-&gt;</span> <span class="kt">SpecWith</span> <span class="n">a</span>
    <span class="o">-&gt;</span> <span class="kt">SpecWith</span> <span class="n">b</span>

<span class="c1">-- inlining ActionWith type synonym</span>
<span class="n">aroundWith</span>
    <span class="o">::</span> <span class="p">((</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="nb">()</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">b</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="nb">()</span><span class="p">))</span> 
    <span class="o">-&gt;</span> <span class="kt">SpecWith</span> <span class="n">a</span>
    <span class="o">-&gt;</span> <span class="kt">SpecWith</span> <span class="n">b</span>

<span class="c1">-- deleting unnecessary parens</span>
<span class="n">aroundWith</span>
    <span class="o">::</span> <span class="p">((</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="nb">()</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">b</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="nb">()</span><span class="p">)</span> 
    <span class="o">-&gt;</span> <span class="kt">SpecWith</span> <span class="n">a</span>
    <span class="o">-&gt;</span> <span class="kt">SpecWith</span> <span class="n">b</span>
</code></pre></div></div>

<p>The callback to <code class="language-plaintext highlighter-rouge">aroundWith</code> is intriguing.
The <code class="language-plaintext highlighter-rouge">b</code> is provided <em>to us</em>, and we must provide an <code class="language-plaintext highlighter-rouge">a</code> to the callback.
That <code class="language-plaintext highlighter-rouge">b</code> represents the “outer context” of our test suite - the result type, what we’re plugging the whole test into.
While the <code class="language-plaintext highlighter-rouge">a</code> represents the “inner context” of the argument <code class="language-plaintext highlighter-rouge">SpecWith a</code> that we’re passed.
<code class="language-plaintext highlighter-rouge">aroundWith</code> is saying: “I know how to unify these two contexts.”</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">aroundWith</span> <span class="o">$</span> <span class="nf">\</span><span class="n">runTest</span> <span class="n">outerContext</span> <span class="o">-&gt;</span> <span class="kr">do</span>
    <span class="n">innerContext</span> <span class="o">&lt;-</span> <span class="n">createInnerContext</span> <span class="n">outerContext</span>
    <span class="n">runTest</span> <span class="n">innerContext</span>
</code></pre></div></div>

<p>Now, we can rewrite our database creation, user creation, etc to properly delete and create these things.
More importantly - it happens in a composable manner.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">spec</span> <span class="o">::</span> <span class="kt">Spec</span>
<span class="n">spec</span> <span class="o">=</span> <span class="kr">do</span>
    <span class="kr">let</span>
        <span class="n">provideDatabase</span> <span class="n">runTest</span> <span class="o">=</span>
            <span class="n">withDatabase</span> <span class="o">$</span> <span class="nf">\</span><span class="n">db</span> <span class="o">-&gt;</span>
                <span class="n">runTest</span> <span class="n">db</span>

    <span class="n">around</span> <span class="n">provideDatabase</span> <span class="o">$</span> <span class="n">describe</span> <span class="s">&quot;With Database&quot;</span> <span class="o">$</span> <span class="kr">do</span>
        <span class="n">it</span> <span class="s">&quot;has stuff&quot;</span> <span class="o">...</span>
        <span class="n">it</span> <span class="s">&quot;okay&quot;</span> <span class="o">...</span>

        <span class="kr">let</span> 
            <span class="n">provideUser</span> <span class="n">runTest</span> <span class="n">db</span> <span class="o">=</span> <span class="kr">do</span>
                <span class="n">userId</span> <span class="o">&lt;-</span> <span class="n">createUser</span> <span class="n">db</span>
                <span class="n">runTest</span> <span class="p">(</span><span class="n">db</span><span class="p">,</span> <span class="n">userId</span><span class="p">)</span>
                <span class="n">deleteUser</span> <span class="p">(</span><span class="n">db</span><span class="p">,</span> <span class="n">userId</span><span class="p">)</span>

        <span class="n">aroundWith</span> <span class="n">provideUser</span> <span class="o">$</span> <span class="n">describe</span> <span class="s">&quot;With User&quot;</span> <span class="o">$</span> <span class="kr">do</span>
            <span class="n">it</span> <span class="o">...</span>
            <span class="n">it</span> <span class="o">...</span>
</code></pre></div></div>

<p>We can even use <code class="language-plaintext highlighter-rouge">bracket</code> internally, to ensure that exceptions are handled neatly.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">spec</span> <span class="o">::</span> <span class="kt">Spec</span>
<span class="n">spec</span> <span class="o">=</span> <span class="kr">do</span>
    <span class="kr">let</span>
        <span class="n">provideDatabase</span> <span class="n">runTest</span> <span class="o">=</span>
            <span class="n">withDatabase</span> <span class="o">$</span> <span class="nf">\</span><span class="n">db</span> <span class="o">-&gt;</span>
                <span class="n">runTest</span> <span class="n">db</span>

    <span class="n">around</span> <span class="n">provideDatabase</span> <span class="o">$</span> <span class="n">describe</span> <span class="s">&quot;With Database&quot;</span> <span class="o">$</span> <span class="kr">do</span>
        <span class="n">it</span> <span class="s">&quot;has stuff&quot;</span> <span class="o">...</span>
        <span class="n">it</span> <span class="s">&quot;okay&quot;</span> <span class="o">...</span>

        <span class="kr">let</span> 
            <span class="n">provideUser</span> <span class="n">runTest</span> <span class="n">db</span> <span class="o">=</span> <span class="kr">do</span>
                <span class="n">bracket</span>
                    <span class="p">(</span><span class="n">createUser</span> <span class="n">db</span><span class="p">)</span>
                    <span class="p">(</span><span class="nf">\</span><span class="n">userId</span> <span class="o">-&gt;</span> <span class="n">deleteUser</span> <span class="p">(</span><span class="n">db</span><span class="p">,</span> <span class="n">userId</span><span class="p">))</span>
                    <span class="p">(</span><span class="nf">\</span><span class="n">userId</span> <span class="o">-&gt;</span> <span class="n">runTest</span> <span class="p">(</span><span class="n">db</span><span class="p">,</span> <span class="n">userId</span><span class="p">))</span>

        <span class="n">aroundWith</span> <span class="n">provideUser</span> <span class="o">$</span> <span class="n">describe</span> <span class="s">&quot;With User&quot;</span> <span class="o">$</span> <span class="kr">do</span>
            <span class="n">it</span> <span class="o">...</span>
            <span class="n">it</span> <span class="o">...</span>
</code></pre></div></div>

<p>Finally, if you’re just mapping the <code class="language-plaintext highlighter-rouge">a</code> type, there’s <code class="language-plaintext highlighter-rouge">mapSubject</code>, which lets you modify the type for the underlying items.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mapSubject</span> <span class="o">::</span> <span class="p">(</span><span class="n">b</span> <span class="o">-&gt;</span> <span class="n">a</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">SpecWith</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">SpecWith</span> <span class="n">b</span>
</code></pre></div></div>

<h1 id="hspec-rules">Hspec Rules</h1>

<p>I love writing tests with <code class="language-plaintext highlighter-rouge">hspec</code>.
Hopefully, you’ll enjoy writing fancy composable tests with the library too!</p></div>
    </summary>
    <updated>2021-07-16T00:00:00Z</updated>
    <published>2021-07-16T00:00:00Z</published>
    <source>
      <id>https://www.parsonsmatt.org</id>
      <author>
        <name>Matt Parsons</name>
      </author>
      <link href="https://www.parsonsmatt.org" rel="alternate" type="text/html">
      <link href="https://www.parsonsmatt.org/feed.xml" rel="self" type="application/rss+xml">
      <title>Overcoming Software</title>
      <updated>2021-08-24T19:04:41Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://www.parsonsmatt.org/2021/07/12/template_haskell_performance_tips.html</id>
    <link href="https://www.parsonsmatt.org/2021/07/12/template_haskell_performance_tips.html" rel="alternate" type="text/html">
    <title>Template Haskell Performance Tips</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><code class="language-plaintext highlighter-rouge">TemplateHaskell</code> is a powerful feature.
With it, you can generate Haskell code using Haskell code, and GHC will compile it for you.
This allows you to do many neat things, like <a href="https://hackage.haskell.org/package/qq-literals">quoted type safe literals</a>, <a href="https://hackage.haskell.org/package/persistent-2.13.1.1/docs/Database-Persist-Quasi.html">database entity definitions</a>, <a href="https://hackage.haskell.org/package/singletons-th-3.0/docs/Data-Singletons-TH.html">singletonized types for type-level programming</a>, <a href="https://hackage.haskell.org/package/lens-5.0.1/docs/Control-Lens-TH.html">automatic <code class="language-plaintext highlighter-rouge">Lens</code> generation</a>, among other things.</p>

<p>One of the main downsides to <code class="language-plaintext highlighter-rouge">TemplateHaskell</code> is that it can cause compilation times to increase significantly.
Let’s dig into these slowdowns and talk about how to make them a bit less onerous.</p>

<h1 id="firing-up-the-external-interpreter">Firing up the external interpreter</h1>

<p>EDIT: <a href="https://www.reddit.com/r/haskell/comments/oiwl6z/templatehaskell_performance_tips/h4ya0ay/">Adam Gundry commented on <code class="language-plaintext highlighter-rouge">reddit</code></a> that this section is wrong.
The external interpreter is only used if <code class="language-plaintext highlighter-rouge">-fexternal-interpreter</code> option is passed to GHC.
This may be why I was unable to detect the overhead from running an external interpret!</p>

<p>If you use <code class="language-plaintext highlighter-rouge">TemplateHaskell</code> at all in a module, then GHC needs to fire up an external interpeter.
GHC loads the interpreter (typically something like <code class="language-plaintext highlighter-rouge">ghci</code>), then executes/interprets the Haskell code.
Splices return one of the <a href="https://www.stackage.org/haddock/lts-18.2/template-haskell-2.16.0.0/Language-Haskell-TH.html#g:18">Haskell syntax algebraic data types</a>.</p>

<p>This has a constant overhead cost.
It’s difficult to measure directly, since GHC doesn’t have an easy means of outputting performance and timing information on a per module basis.
However, we can pass <code class="language-plaintext highlighter-rouge">+RTS -s -RTS</code> to GHC, which will cause it to print performance for a “package target.”</p>

<p>And, with GHC 9, I’m actually unable to determine a difference.
The noise in a given run appears to overwhelm the costs of actually firing up the interpreter.
So much for that!</p>

<p>(If you find different things, please let me know - you can file an issue or a PR to the <a href="https://github.com/parsonsmatt/parsonsmatt.github.io">GitHub repo</a>)</p>

<h1 id="actually-running-code">Actually running code</h1>

<p>GHC has two phases for TH:</p>

<ol>
  <li>Generating Code</li>
  <li>Compiling Code</li>
</ol>

<p>Generating code typically doesn’t take much time at all, though this isn’t guaranteed.</p>

<p>Fortunately, we can easily write a timing utility, since the <code class="language-plaintext highlighter-rouge">TemplateHaskell</code> generation type allows you to run arbitrary <code class="language-plaintext highlighter-rouge">IO</code> operations.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">import</span> <span class="nn">Data.Time</span> <span class="p">(</span><span class="nf">getCurrentTime</span><span class="p">,</span> <span class="nf">diffUTCTime</span><span class="p">)</span>
<span class="kr">import</span> <span class="nn">Language.Haskell.TH</span> <span class="p">(</span><span class="kt">Q</span><span class="p">,</span> <span class="nf">runIO</span><span class="p">,</span> <span class="nf">reportWarning</span><span class="p">)</span>

<span class="n">timed</span> <span class="o">::</span> <span class="kt">String</span> <span class="o">-&gt;</span> <span class="kt">Q</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">Q</span> <span class="n">a</span>
<span class="n">timed</span> <span class="n">message</span> <span class="n">action</span> <span class="o">=</span> <span class="kr">do</span>
    <span class="n">begin</span> <span class="o">&lt;-</span> <span class="n">runIO</span> <span class="n">getCurrentTime</span>
    <span class="n">result</span> <span class="o">&lt;-</span> <span class="n">action</span>
    <span class="n">end</span> <span class="o">&lt;-</span> <span class="n">runIO</span> <span class="n">getCurrentTime</span>
    <span class="kr">let</span> <span class="n">duration</span> <span class="o">=</span> <span class="n">end</span> <span class="p">`</span><span class="n">diffUTCTime</span><span class="p">`</span> <span class="n">begin</span>
    <span class="n">reportWarning</span> <span class="o">$</span> <span class="n">concat</span> <span class="p">[</span> <span class="s">&quot;[&quot;</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="s">&quot;]: &quot;</span><span class="p">,</span> <span class="n">show</span> <span class="n">duration</span><span class="p">]</span>
    <span class="n">pure</span> <span class="n">result</span>
</code></pre></div></div>

<p>Expert benchmarkers will complain about using <code class="language-plaintext highlighter-rouge">getCurrentTime</code> since it isn’t monotonic, which is a valid complaint.
But we’re not getting a real benchmark anyway, and we’re mostly just going to see whether generation or compilation is dominating the elapsed time (hint: it’ll almost always be compilation).</p>

<p>With this, we will get a reported warning about the duration of the code generation.
In <a href="https://www.reddit.com/r/haskell/comments/oi1x5v/tiny_use_of_template_haskell_causing_huge_memory/h4tr7n8/">this reddit comment</a>, I used it to determine that generation of some code was taking <code class="language-plaintext highlighter-rouge">0.0015s</code>, while compilation of the resulting code took <code class="language-plaintext highlighter-rouge">21.201s</code>.
The code looks like this:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">module</span> <span class="nn">Main</span> <span class="kr">where</span>

<span class="kr">import</span> <span class="nn">TuplesTH</span>

<span class="o">$</span><span class="p">(</span><span class="n">timed</span> <span class="s">&quot;tuples&quot;</span> <span class="o">$</span> <span class="n">generateTupleBoilerplate</span> <span class="mi">62</span><span class="p">)</span>

<span class="n">main</span> <span class="o">::</span> <span class="kt">IO</span> <span class="nb">()</span>
<span class="n">main</span> <span class="o">=</span> <span class="kr">do</span>
    <span class="n">print</span> <span class="o">$</span> <span class="n">_3</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">42</span><span class="p">,</span><span class="s">&quot;hello&quot;</span><span class="p">,</span><span class="sc">'z'</span><span class="p">)</span>
</code></pre></div></div>

<p>The output looks like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Building executable 'th-perf-exe' for th-perf-0.1.0.0..
[1 of 2] Compiling Main

/home/matt/Projects/th-perf/app/Main.hs:11:2: warning: [tuples]: 0.001553454s
   |
11 | $(timed &quot;tuples&quot; $ generateTupleBoilerplate 62)
   |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[2 of 2] Compiling Paths_th_perf
  21,569,689,896 bytes allocated in the heap
   6,231,564,888 bytes copied during GC
     594,126,600 bytes maximum residency (17 sample(s))
       3,578,104 bytes maximum slop
            1641 MiB total memory in use (0 MB lost due to fragmentation)

                                     Tot time (elapsed)  Avg pause  Max pause
  Gen  0      1097 colls,     0 par    4.919s   4.921s     0.0045s    0.1072s
  Gen  1        17 colls,     0 par    4.466s   4.467s     0.2628s    1.0215s

  TASKS: 4 (1 bound, 3 peak workers (3 total), using -N1)

  SPARKS: 0 (0 converted, 0 overflowed, 0 dud, 0 GC'd, 0 fizzled)

  INIT    time    0.001s  (  0.001s elapsed)
  MUT     time   11.813s  ( 12.135s elapsed)
  GC      time    9.385s  (  9.388s elapsed)
  EXIT    time    0.001s  (  0.007s elapsed)
  Total   time   21.201s  ( 21.530s elapsed)

  Alloc rate    1,825,890,582 bytes per MUT second

  Productivity  55.7% of total user, 56.4% of total elapsed
</code></pre></div></div>

<p>This sort of timing is usually only useful to determine whether you need to benchmark and optimize the <em>generation</em> phase or the <em>compilation</em> phase.
Optimizing <em>generation</em> is a relatively standard Haskell performance optimization process, so I won’t cover it here.
If your code is mostly pure functions (or, with GHC 9, the new <a href="https://www.stackage.org/haddock/nightly-2021-07-11/template-haskell-2.17.0.0/Language-Haskell-TH.html#t:Quote"><code class="language-plaintext highlighter-rouge">Quote</code></a> type class), then it’s straightforward to do.
Many <code class="language-plaintext highlighter-rouge">Q</code> features are not supported in <code class="language-plaintext highlighter-rouge">IO</code>, and it’s difficult to accurately benchmark them.</p>

<h1 id="optimizing-compilation">Optimizing Compilation</h1>

<p>In the above example, GHC spends a tiny amount of time generating code, and then spends a <em>huge</em> amount of time compiling it.
What’s going on?</p>

<p>In <a href="https://www.parsonsmatt.org/2019/11/27/keeping_compilation_fast.html">Keeping Compilation Fast</a>, I write that GHC compiles modules superlinearly in the size of the module.
That means that large modules take longer to compile than the same amount of code split up over several modules.
<code class="language-plaintext highlighter-rouge">TemplateHaskell</code> has no way of creating <em>modules</em>, or even altering the imports/exports of a given module, and so it necessarily might run into this problem.</p>

<p>We have two means of reducing generated code: spreading the use over multiple modules, and optimizing how we generate the code.</p>

<h2 id="fewer-calls-to-th">Fewer Calls to TH</h2>

<p>In <a href="https://www.parsonsmatt.org/2019/12/06/splitting_persistent_models.html">Splitting Persistent Models</a>, I wrote how to speed up compile-times by isolating the <code class="language-plaintext highlighter-rouge">persistent</code> model definitions into separate modules.
This results in many smaller modules, which GHC can compile much faster - in part because the modules are able to parallelized, and in part because they are smaller, and don’t hit the superlinearity.</p>

<p>You can do this with any other thing, too. 
A large module that has a ton of data types and a <code class="language-plaintext highlighter-rouge">TemplateHaskell</code> declaration for each type will quickly become a problem in compilation.
Separating it out into multiple modules, each exporting a small subset of those types, will allow GHC to operate much more quickly.</p>

<h2 id="smaller-code">Smaller Code</h2>

<p>It’s relatively easy to generate a massive amount of Haskell code.
After all, the entire <em>point</em> is to make GHC generate code for us, because we don’t want to write it ourselves!</p>

<p>In order to see how much code we’re generating in a module, it’s useful to enable the <code class="language-plaintext highlighter-rouge">-ddump-splices</code> option.
We can do this with a <code class="language-plaintext highlighter-rouge">GHC_OPTIONS</code> pragma above the module header:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{-# language TemplateHaskell #-}</span>

<span class="cp">{-# OPTIONS_GHC -ddump-splices #-}</span>

<span class="kr">module</span> <span class="nn">Lib</span> <span class="kr">where</span>

<span class="kr">import</span> <span class="nn">Language.Haskell.TH.Syntax</span> <span class="p">(</span><span class="nf">liftTyped</span><span class="p">)</span>

<span class="n">asdf</span> <span class="o">::</span> <span class="kt">Int</span>
<span class="n">asdf</span> <span class="o">=</span> <span class="o">$$</span><span class="p">(</span><span class="n">liftTyped</span> <span class="mi">3</span><span class="p">)</span>
</code></pre></div></div>

<p>With this option, GHC will print the splice and the corresponding output while compiling the module.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Building library for th-perf-0.1.0.0..
[2 of 3] Compiling Lib
/home/matt/Projects/th-perf/src/Lib.hs:10:10-22: Splicing expression liftTyped 3 ======&gt; 3
</code></pre></div></div>

<p>However, if you’ve got a performance problem, then you’ve probably got more output here than you have any idea what to do with.
In <a href="https://www.reddit.com/r/haskell/comments/oi1x5v/tiny_use_of_template_haskell_causing_huge_memory/h4tr7n8/">the reddit thread</a>, we ended up generating enough code that I couldn’t scroll back to the top!
So, we’ll want to dump the resulting splices to a file.
We can use the <code class="language-plaintext highlighter-rouge">-ddump-to-file</code>, and GHC will store the splices for a module in a file named <code class="language-plaintext highlighter-rouge">$(module-name).dump-$(phase)</code>.
If you’re building with <code class="language-plaintext highlighter-rouge">stack</code>, then the files will be located in the <code class="language-plaintext highlighter-rouge">.stack-work</code> file.
We can get the resulting size of the file using <code class="language-plaintext highlighter-rouge">wc</code> and a bit of a glob.
In that investigation, this is the command and output:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ wc -l .stack-work/**/*.dump-splices
15897 .stack-work/dist/x86_64-linux-tinfo6/Cabal-3.4.0.0/build/th-perf-exe/th-perf-exe-tmp/app/Main.dump-splices
</code></pre></div></div>

<p>That’s 15,897 lines of code!
You can open that file up and see what it generates.
In that example, there wasn’t much to optimize.</p>

<h3 id="beware-splicing-and-lifting">Beware Splicing and Lifting</h3>

<p>At the work codebase, we had a <code class="language-plaintext highlighter-rouge">TemplateHaskell</code> function that ended up taking several minutes to compile.
It iterated through all of our database models and generated a function that would stream each row from the database and verify that we could successfully parse everything out of the database.
This is nice to check that our <code class="language-plaintext highlighter-rouge">PersistField</code> definitions worked, or that our <code class="language-plaintext highlighter-rouge">JSONB</code> columns could all still be parsed.</p>

<p>I investigated the slow compile-time by dumping splices, and managed to find that it was splicing in the entire <a href="https://www.stackage.org/haddock/lts-18.2/persistent-2.13.1.1/Database-Persist-EntityDef-Internal.html#t:EntityDef"><code class="language-plaintext highlighter-rouge">EntityDef</code></a> type, multiple times, for each table.
This is a relatively large record, with a bunch of fields, and each <code class="language-plaintext highlighter-rouge">FieldDef</code> <em>also</em> is relatively large, with a bunch of fields!</p>

<p>The resulting code size was enormous.
Why was it doing this?
I looked into it and discovered this innocuous bit of code:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">do</span>
    <span class="c1">-- ...</span>
    <span class="n">tableName</span> <span class="o">&lt;-</span> <span class="p">[</span><span class="o">|</span> <span class="n">getEntityHaskellName</span> <span class="n">entityDef</span> <span class="o">|</span><span class="p">]</span>
    <span class="n">dbName</span> <span class="o">&lt;-</span> <span class="p">[</span><span class="o">|</span> <span class="n">getEntityDBName</span> <span class="n">entityDef</span> <span class="o">|</span><span class="p">]</span>
    <span class="c1">-- ...</span>
    <span class="n">pure</span> <span class="o">$</span> <span class="n">mkFun</span> <span class="n">tableName</span> <span class="n">dbName</span>
</code></pre></div></div>

<p>You might expect that <code class="language-plaintext highlighter-rouge">tableName</code> would be an expression containing <em>only</em> the Haskell name of the entity.
However, it’s <em>actually</em> the <em>entire expression</em> in the <code class="language-plaintext highlighter-rouge">QuasiQuote</code>!
Haskell allows you to implicitly lift things, sometimes, depending on scope and context etc.
The <a href="https://www.stackage.org/haddock/lts-18.2/template-haskell-2.16.0.0/Language-Haskell-TH-Syntax.html#t:Lift"><code class="language-plaintext highlighter-rouge">lift</code> in question refers to the <code class="language-plaintext highlighter-rouge">Lift</code> type class</a>, not the <code class="language-plaintext highlighter-rouge">MonadTrans</code> variant.
This ends up being translated to:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tableName</span> <span class="o">&lt;-</span> <span class="p">[</span><span class="o">|</span> <span class="o">$</span><span class="p">(</span><span class="n">lift</span> <span class="n">getEntityHaskellName</span><span class="p">)</span> <span class="o">$</span><span class="p">(</span><span class="n">lift</span> <span class="n">entityDef</span><span class="p">)</span> <span class="o">|</span><span class="p">]</span>
</code></pre></div></div>

<p>Lifting a function like this is relatively easy - you just splice a reference to the function.
So the resulting expression for the <em>function name</em> is something like:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">lift</span> <span class="n">getEntityHaskellName</span>
<span class="o">===&gt;</span>
    <span class="kt">VarE</span> <span class="n">'getEntityHaskellName</span>
</code></pre></div></div>

<p>In order to <code class="language-plaintext highlighter-rouge">lift</code> the <code class="language-plaintext highlighter-rouge">EntityDef</code> into the expression, we need to take the <em>complete run-time value</em> and transform it into valid Haskell code, which we then splice in directly.
In this case, that looks something like this:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">lift</span> <span class="n">entityDef</span>
<span class="o">===&gt;</span>
    <span class="kt">EntityDef</span>
        <span class="p">{</span> <span class="n">entityHaskell</span> <span class="o">=</span> 
            <span class="kt">EntityNameHS</span> <span class="p">(</span><span class="kt">Data</span><span class="o">.</span><span class="kt">Text</span><span class="o">.</span><span class="n">pack</span> <span class="s">&quot;SomeTable&quot;</span><span class="p">)</span>
        <span class="p">,</span> <span class="n">entityDB</span> <span class="o">=</span>
            <span class="kt">EntityNameDB</span> <span class="p">(</span><span class="kt">Data</span><span class="o">.</span><span class="kt">Text</span><span class="o">.</span><span class="n">pack</span> <span class="s">&quot;some_table&quot;</span><span class="p">)</span>
        <span class="p">,</span> <span class="n">entityId</span> <span class="o">=</span> 
            <span class="kt">EntityIdField</span> <span class="p">(</span>
                <span class="kt">FieldDef</span>
                    <span class="p">{</span> <span class="n">fieldHaskell</span> <span class="o">=</span>
                        <span class="kt">FieldNameHS</span> <span class="p">(</span><span class="kt">Data</span><span class="o">.</span><span class="kt">Text</span><span class="o">.</span><span class="n">pack</span> <span class="s">&quot;id&quot;</span><span class="p">)</span>
                    <span class="p">,</span> <span class="n">fieldDB</span> <span class="o">=</span>
                        <span class="kt">FieldNameDB</span> <span class="p">(</span><span class="kt">Data</span><span class="o">.</span><span class="kt">Text</span><span class="o">.</span><span class="n">pack</span> <span class="s">&quot;id&quot;</span><span class="p">)</span>
                    <span class="p">,</span> <span class="n">fieldType</span> <span class="o">=</span> 
                        <span class="c1">-- ....</span>
                    <span class="p">,</span> <span class="n">fieldSqlType</span> <span class="o">=</span>
                        <span class="c1">-- ...</span>
                    <span class="p">,</span> <span class="c1">-- etc... </span>
                    <span class="p">}</span>
        <span class="p">,</span> <span class="n">entityFields</span> <span class="o">=</span> 
            <span class="p">[</span> <span class="kt">FieldDef</span> <span class="p">{</span> <span class="o">...</span> <span class="p">}</span>
            <span class="p">,</span> <span class="kt">FieldDef</span> <span class="p">{</span> <span class="o">...</span> <span class="p">}</span>
            <span class="p">,</span> <span class="kt">FieldDef</span> <span class="p">{</span> <span class="o">...</span> <span class="p">}</span>
            <span class="p">,</span> <span class="o">...</span>
            <span class="p">]</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>The combined expression splices this in:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">VarE</span> <span class="n">'getEntityHaskellName</span> 
<span class="p">`</span><span class="kt">AppE</span><span class="p">`</span> 
    <span class="p">(</span><span class="kt">ConE</span> <span class="kt">'EntityDef</span> 
    <span class="p">`</span><span class="kt">AppE</span><span class="p">`</span> 
        <span class="p">(</span><span class="kt">ConE</span> <span class="kt">'EntityNameHS</span> 
        <span class="p">`</span><span class="kt">AppE</span><span class="p">`</span> 
            <span class="p">(</span><span class="kt">VarE</span> <span class="n">'pack</span> <span class="p">`</span><span class="kt">AppE</span><span class="p">`</span> <span class="kt">LitE</span> <span class="p">(</span><span class="kt">StringL</span> <span class="s">&quot;SomeTable&quot;</span><span class="p">))</span>
        <span class="p">)</span>
    <span class="p">`</span><span class="kt">AppE</span><span class="p">`</span>
        <span class="p">(</span><span class="kt">ConE</span> <span class="kt">'EntityNameDB</span> <span class="o">...</span><span class="p">)</span>
    <span class="p">)</span>
</code></pre></div></div>

<p>Which is no good - we’re obviously <em>only</em> grabbing a single field from the record.
Fortunately, we can fix that real easy:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tableName</span> <span class="o">&lt;-</span> <span class="n">lift</span> <span class="o">$</span> <span class="n">getEntityHaskellName</span> <span class="n">entityDef</span>
<span class="n">dbName</span> <span class="o">&lt;-</span> <span class="n">lift</span> <span class="o">$</span> <span class="n">getEntityDBName</span> <span class="n">entityDef</span>
</code></pre></div></div>

<p>This performs the access before we generate the code, resulting in significantly smaller code generation.</p>

<h1 id="recompilation-avoidance">Recompilation Avoidance</h1>

<p>GHC is usually pretty clever about determining if it can avoid recompiling a module.
However, <code class="language-plaintext highlighter-rouge">TemplateHaskell</code> defeats this, and GHC doesn’t even <em>try</em> to see if it can avoid recompiling - it just recompiles.
(This may be fixed in an upcoming GHC, but as of 9.0, it’s still doing the safe/dumb thing).</p>

<p>We can’t <em>fix</em> this, but we can work around it.
Try to isolate your <code class="language-plaintext highlighter-rouge">TemplateHaskell</code> use to only a few modules, and keep them as small as possible.</p>

<p>For example, suppose you have a ~500 line module that contains a bunch of data types, <code class="language-plaintext highlighter-rouge">deriveJSON</code> calls for those types, business logic, and handler API functions.
If <em>any</em> dependency of that module changes, you need to recompile the whole module due to the <code class="language-plaintext highlighter-rouge">TH</code> recompilation rule.
This needlessly recompiles everything - the datatypes, functions, JSON derivation, etc.</p>

<p>If you pull the datatypes and <code class="language-plaintext highlighter-rouge">TemplateHaskell</code> into a separate module, then <em>that</em> module needs to be recompiled every time.
However, GHC is smart enough to avoid recompiling the dependent module.
Suppose you split the 500 line module into two files, one of which is 20 lines of <code class="language-plaintext highlighter-rouge">data</code> and <code class="language-plaintext highlighter-rouge">TemplateHaskell</code>, and the other is 480 lines of functions, code, etc.
GHC will always recompile the 20 line module (very fast), and intelligently avoid recompiling the 480 lines when it doesn’t need to.</p>

<h2 id="recompilation-cascade">Recompilation Cascade</h2>

<p>Recompilation Cascade is the name I’ve given to a problem where a tiny change triggers a <code class="language-plaintext highlighter-rouge">[TH]</code> rebuild of a module, and, since that module got rebuilt, every dependent module using <code class="language-plaintext highlighter-rouge">TH</code> gets rebuilt.
If you use <code class="language-plaintext highlighter-rouge">TemplateHaskell</code> pervasively, then you may end up having <code class="language-plaintext highlighter-rouge">[TH]</code> rebuilds for your entire codebase!
This can wreck incremental compile times.</p>

<p>Try to avoid this by separating out your <code class="language-plaintext highlighter-rouge">TemplateHaskell</code> into isolated modules, if at all possible.</p>

<p>If you use the <code class="language-plaintext highlighter-rouge">typed QQ literals</code> trick, then you can isolate those literals into a <code class="language-plaintext highlighter-rouge">Constants</code> module, and use those constants directly.
Instead of:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">module</span> <span class="nn">X</span> <span class="kr">where</span>

<span class="n">sendEmailToFoo</span> <span class="o">=</span> <span class="n">sendEmail</span> <span class="o">[</span><span class="n">email</span><span class="o">|</span>foobar@gmail.com<span class="o">|]</span> <span class="s">&quot;hello world&quot;</span>
</code></pre></div></div>

<p>Consider using this instead:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">module</span> <span class="nn">Email.Constants</span> <span class="kr">where</span>
  
    <span class="n">foobar_at_gmail</span> <span class="o">=</span> <span class="o">[</span><span class="n">email</span><span class="o">|</span>foobar@gmail.com<span class="o">|]</span>

<span class="kr">module</span> <span class="nn">X</span> <span class="kr">where</span>

    <span class="kr">import</span> <span class="nn">Email.Constants</span>

    <span class="n">sendEmailToFoo</span> <span class="o">=</span> <span class="n">sendEmail</span> <span class="n">foobar_at_gmail</span> <span class="s">&quot;hello world&quot;</span>
</code></pre></div></div>

<p>With the latter form, <code class="language-plaintext highlighter-rouge">X</code> does not use <code class="language-plaintext highlighter-rouge">TemplateHaskell</code>, and therefore can skip recompilation if any dependencies change.</p></div>
    </summary>
    <updated>2021-07-12T00:00:00Z</updated>
    <published>2021-07-12T00:00:00Z</published>
    <source>
      <id>https://www.parsonsmatt.org</id>
      <author>
        <name>Matt Parsons</name>
      </author>
      <link href="https://www.parsonsmatt.org" rel="alternate" type="text/html">
      <link href="https://www.parsonsmatt.org/feed.xml" rel="self" type="application/rss+xml">
      <title>Overcoming Software</title>
      <updated>2021-08-24T19:04:40Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://haskell.org/ghc/blog/20210709-capi-usage.html</id>
    <link href="http://haskell.org/ghc/blog/20210709-capi-usage.html" rel="alternate" type="text/html">
    <title>Best practices for foreign imports</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><h1>Best practices for foreign imports</h1>
<h4 class="text-muted">bgamari - 2021-07-12</h4>

<p>tl;dr: When importing system libraries we strongly recommend that users use GHC’s <a href="https://downloads.haskell.org/ghc/9.0.1/docs/html/users_guide/exts/ffi.html?highlight=capiffi#extension-CApiFFI"><code>capi</code> calling convention</a>. For details, see the <a href="https://www.haskell.org/ghc/rss.xml#recommendations">recommendations section</a> below.</p>
<p>One of Haskell’s strengths is its great foreign function interface: using time-tested foreign libraries or raw system calls is just a <code>foreign import</code> away. However, while syntactically simple, safely using foreign functions can be quite tricky. A few weeks ago we saw one facet of this problem in the <a href="https://www.haskell.org/ghc/blog/20210607-the-keepAlive-story.html"><code>keepAlive#</code> post</a>. This week we will look at another complexity which has recently caused us trouble: calling conventions.</p>
<h2 id="why-this-matters">Why this matters</h2>
<p>With the increasing prevalance of ARM hardware with Apple’s recent releases, many latent bugs due to calling convention details are becoming more visible.</p>
<p>For instance, in <a href="https://gitlab.haskell.org/ghc/ghc/issues/20079">#20079</a> it was noticed that GHCi crashes on AArch64/Darwin when the terminal window is resized. We eventually found that this was due to a <a href="https://github.com/judah/haskeline/issues/162">bug</a> in <code>haskeline</code>: <code>ioctl</code>, a variadic function, was <a href="https://github.com/judah/haskeline/blob/c03e7029b2d9c3d16da5480306b42b8d4ebe03cf/System/Console/Haskeline/Backend/Posix.hsc#L64">imported</a> using GHC’s <code>ccall</code> calling convention. The <a href="https://github.com/judah/haskeline/pull/163/files">fix</a> is straightforward: use the <a href="https://downloads.haskell.org/ghc/9.0.1/docs/html/users_guide/exts/ffi.html?highlight=capiffi#extension-CApiFFI"><code>capi</code> pseudo-calling convention</a> introduced in GHC 7.10.1.</p>
<p>It turns out that incorrect <code>ioctl</code> imports is <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/20085#note_363651">rather common pattern</a> among Hackage packages. Consequently, we thought it would be helpful to offer some explicit guidance for users.</p>
<h2 id="background-foreign-calling-conventions">Background: Foreign calling conventions</h2>
<p>During a function call both the caller and the callee must agree on several operational details:</p>
<ul>
<li>when the function is called:
<ul>
<li>which arguments can be passed in registers?</li>
<li>in what order are the remaining arguments pushed to the stack?</li>
<li>how are variadic functions handled?</li>
<li>must the stack be aligned?</li>
<li>where is the return address found?</li>
</ul></li>
<li>when the function returns:
<ul>
<li>who is responsible for popping the arguments from the stack?</li>
<li>where is the return value(s) stored?</li>
</ul></li>
</ul>
<p>Together, these details are known as a <em>calling convention</em> and are typically implied by the operating system and target architecture. For instance, x86-64 Linux (and most other POSIX platforms) typically uses the <a href="https://github.com/hjl-tools/x86-psABI/wiki/x86-64-psABI-1.0.pdf">System V amd64 calling convention</a> whereas 32-bit Windows has no fewer than three commonly-used conventions.</p>
<p>When compiling C source, the C compiler determines a function’s calling convention using its <em>signature</em>, which typically appears in a header file. However, when GHC imports a function with the usual <code>ccall</code> calling convention, e.g.:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" title="1">foreign <span class="kw">import</span> ccall &quot;hello_world&quot; helloWorld :: <span class="dt">IO</span> ()</a></code></pre></div>
<p>it does not have the benefit of a signature; instead it must infer the calling convention from the type given by the import. This can break in two ways:</p>
<ul>
<li>many calling conventions treat variadic functions (e.g. <code>printf</code>) differently from the corresponding non-variadic signature; while it is <a href="https://downloads.haskell.org/ghc/9.0.1/docs/html/users_guide/exts/ffi.html?highlight=capiffi#varargs-not-supported-by-ccall-calling-convention">documented</a> that <code>ccall</code> does not support variadic functions, this fact is not well-known by users.</li>
<li>the type provided by the user may be wrong (e.g. using <code>Int</code> instead of <code>CInt</code>)</li>
</ul>
<p>Unfortunately, with the <code>foreign import ccall</code> mechanism the compiler has no way of catching such issues, potentially leaving the user with difficult-to-spot, platform-dependent soundness bugs.</p>
<h2 id="safe-foreign-calls-via-capiffi">Safe foreign calls via <code>CApiFFI</code></h2>
<p>To address help mitigate this class of bugs, GHC 7.10 introduced a new language extension, <a href="https://downloads.haskell.org/ghc/9.0.1/docs/html/users_guide/exts/ffi.html?highlight=capiffi#extension-CApiFFI"><code>CApiFFI</code></a>, which offers a more robust way to import foreign functions. Unlike <code>ccall</code>, <code>capi</code> requires that the user specify both the foreign function’s name as well as the name of the header file where its signature can be found. For instance, one can write:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" title="1">foreign <span class="kw">import</span> capi &quot;stdio.h puts&quot; c_puts :: <span class="dt">Ptr</span> <span class="dt">CChar</span> -&gt; <span class="dt">IO</span> <span class="dt">CInt</span></a></code></pre></div>
<p>To compile this, GHC will construct a C source file which <code>#include</code>’s <code>stdio.h</code>. and defines a stub function which performs the call:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode c"><code class="sourceCode c"><a class="sourceLine" id="cb3-1" title="1"><span class="pp">#include </span><span class="im">&quot;stdio.h&quot;</span></a>
<a class="sourceLine" id="cb3-2" title="2">HsInt32 ghczuwrapperZC0ZCmainZCHelloZCputs(<span class="dt">void</span>* a1) {</a>
<a class="sourceLine" id="cb3-3" title="3">    <span class="cf">return</span> puts(a1);</a>
<a class="sourceLine" id="cb3-4" title="4">}</a></code></pre></div>
<p>This approach brings a few advantages:</p>
<ul>
<li><code>capi</code> imports can be used to import functions defined using CPP</li>
<li>the calling convention is decided by the C compiler using the signature provided in the indicated header file, eliminating the potential for inconsistency</li>
<li>variadic functions “just work”</li>
<li>it removes the need to worry about which of Windows’ zoo of supported conventions is used (see <a href="https://gitlab.haskell.org/ghc/ghc/issues/12890">#12890</a>, <a href="https://gitlab.haskell.org/ghc/ghc/issues/3052">#3052</a>)</li>
</ul>
<h2 id="recommendations">Recommendations for users</h2>
<p>As a rule, the easiest code to debug is the code that you don’t need to write. Consequently, users are encouraged to use existing bindings libraries (e.g. <code>unix</code>) instead of defining their own foreign imports when possible.</p>
<p>Of course, not all libraries have bindings available. In these cases we recommend that users use <code>foreign import capi</code> for imports of libraries not under their control (e.g. system libraries).</p>
<p>Note, however, that <code>capi</code> does incur a small (arguably negligible) runtime cost due to the to the C stub. It is justifiable to use <code>ccall</code> to avoid this runtime cost in cases where the foreign function is shipped with a package’s <code>cbits</code>, where the calling convention is clear.</p></div>
    </summary>
    <updated>2021-07-12T00:00:00Z</updated>
    <published>2021-07-12T00:00:00Z</published>
    <author>
      <name>ghc-devs</name>
    </author>
    <source>
      <id>http://haskell.org/ghc</id>
      <link href="http://haskell.org/ghc" rel="alternate" type="text/html">
      <link href="http://haskell.org/ghc/rss.xml" rel="self" type="application/rss+xml">
      <title>GHC Developer blog</title>
      <updated>2021-08-27T00:00:00Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:,2021:/lang/etym/forensic</id>
    <link href="https://blog.plover.com/lang/etym/forensic.html" rel="alternate" type="text/html">
    <title>“Forensic” doesn't mean what I thought it did</title>
    <content type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p>Last week at work we released bad code, which had somehow survived
multiple reviews.  I was very interested in finding out how this
happened, dug into the Git history to find out, and wrote a report.
Originally I titled the report something like “Forensic analysis of
Git history” (and one of my co-workers independently referred to the
investigation as forensic) but then I realized I wasn't sure what
“forensic” meant.  I looked it up, and learned it was the wrong word.</p>

<p>A forensic analysis is one performed in the service of a court or
court case.  “Forensic” itself is from Latin <em>forum</em>, which is
<a href="https://en.wikipedia.org/wiki/Forum_%28Roman%29">a public assembly place</a> where markets were held
and court cases were heard.</p>

<p>Forensic <em>medicine</em> is medicine in service of a court case, for
example to determine a cause of death.  For this reason it often
refers to a postmortem examination, and I thought that “forensic”
meant a postmortem or other retrospective analysis. That was the sense
I intended it.  But no.  I had written a postmortem analysis, but not
a forensic one.</p></div>
    </content>
    <updated>2021-07-09T17:48:00Z</updated>
    <published>2021-07-09T17:48:00Z</published>
    <category term="/lang/etym"/>
    <author>
      <name>Mark Dominus</name>
      <email>mjd@plover.com</email>
      <uri>http://www.plover.com/</uri>
    </author>
    <source>
      <id>tag:,2005:/</id>
      <icon>http://perl.plover.com/favicon.ico</icon>
      <link href="https://blog.plover.com/index.atom" rel="self" type="application/atom+xml">
      <link href="https://blog.plover.com" rel="alternate" type="text/html">
      <subtitle>The Universe of Discourse (Mark Dominus Blog)</subtitle>
      <title>The Universe of Discourse</title>
      <updated>2021-08-28T16:57:00Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://r6.ca/blog/20200929T023701Z.html</id>
    <link href="http://r6.ca/blog/20200929T023701Z.html" rel="alternate" type="text/html">
    <title>It Is Never a Compiler Bug Until It Is</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Last week I was trying to add some <a href="https://github.com/bitcoin-core/secp256k1/pull/822/commits/2456616cb1bb34178ff83b24eaf738f0fee3d82b#diff-b04459e37839cd223176618536295715R429">testing code to libsecp256k1</a> and I was pulling out my hair trying to get it to work.
No amount of <code>printf</code> was working to illuminate what I was doing wrong.
Finally, out of desperation, I thought I would do a quick check to see if there are any compiler bugs related to <code>memcmp</code>, and lo and behold, I found <a href="https://gcc.gnu.org/bugzilla/show_bug.cgi?id=95189">GCC bug #95189: memcmp being wrongly stripped like strcmp</a>.</p><p>Honestly this was a pretty horrifying bug to read about.
Under some circumstances GCC 9 and 10 will cause <code>memcmp</code> to return an incorrect value when one of the inputs is statically known array that contains <code>NULL</code> bytes.
As I rushed to <a href="https://gist.githubusercontent.com/roconnor/2b8e22e829ed80088ed6690cc3c7f3a8/raw/455571a6d9053c597c1585debe6f9dbd6af85071/gistfile1.txt">recompile my computer system using GCC 8</a>, I contemplated what the vast consequences of such a bug could be, and pondered how it was possible that computers could function at all.</p><p>However over the week, with the help of my colleagues, we managed to get a better understanding of the scope of the bug.
The bug can only convert non-zero values to zero values.
The static array needs to have a <code>NULL</code> byte within the first 4 bytes.
Most importantly, the <code>memcmp</code> result must not immediately be compared to <code>0</code> for equality or inequality, or any equivalent test.
A different code path is taken in the compiler in that case.
That explained why computers were still functioning.
I expect the vast majority of the uses of <code>memcmp</code> does an immediate test for equality with <code>0</code>.</p><p>I still wondered though, how much code was being affected. My colleague Tim suggested that it would be possible to instrument GCC to emit a message when it was about to miscompile a program.
Together we came up with <a href="https://gcc.gnu.org/bugzilla/attachment.cgi?id=49276&amp;action=diff">a patch</a> to GCC 9 and 10 that would print a debugging message.
Once again, I recompiled my entire system, to see what GCC was miscompiling.
This is what I found:</p><ul>
<li><a href="https://github.com/unicode-org/icu/blob/4fb47b12a70737ee12326220e71c2d73c5ec658f/icu4c/source/common/uniset_props.cpp#L709">https://github.com/unicode-org/icu/blob/4fb47b12a70737ee12326220e71c2d73c5ec658f/icu4c/source/common/uniset_props.cpp#L709</a></li>
<li><a href="https://github.com/xiph/flac/blob/ce6dd6b5732e319ef60716d9cc9af6a836a4011a/src/flac/decode.c#L1310">https://github.com/xiph/flac/blob/ce6dd6b5732e319ef60716d9cc9af6a836a4011a/src/flac/decode.c#L1310</a></li>
<li><a href="https://github.com/torvalds/linux/blob/fb0155a09b0224a7147cb07a4ce6034c8d29667f/drivers/atm/zatm.c#L1172">https://github.com/torvalds/linux/blob/fb0155a09b0224a7147cb07a4ce6034c8d29667f/drivers/atm/zatm.c#L1172</a></li>
<li><a href="https://github.com/nss-dev/nss/blob/1f3746f5107535a47bb4e3969f561e1bd1314bab/gtests/pk11_gtest/pk11_chacha20poly1305_unittest.cc#L425">https://github.com/nss-dev/nss/blob/1f3746f5107535a47bb4e3969f561e1bd1314bab/gtests/pk11_gtest/pk11_chacha20poly1305_unittest.cc#L425</a></li>
<li><a href="https://github.com/GNOME/glib/blob/010569b3734f864fcf584f771915b78bd391eb5f/glib/tests/refstring.c#L70">https://github.com/GNOME/glib/blob/010569b3734f864fcf584f771915b78bd391eb5f/glib/tests/refstring.c#L70</a></li>
<li><a href="https://github.com/heimdal/heimdal/blob/7ae2dfd853c87f9cbecb6f399de4dad09bad4606/lib/gssapi/krb5/arcfour.c#L390">https://github.com/heimdal/heimdal/blob/7ae2dfd853c87f9cbecb6f399de4dad09bad4606/lib/gssapi/krb5/arcfour.c#L390</a>, <a href="https://github.com/heimdal/heimdal/blob/7ae2dfd853c87f9cbecb6f399de4dad09bad4606/lib/gssapi/krb5/arcfour.c#L661">https://github.com/heimdal/heimdal/blob/7ae2dfd853c87f9cbecb6f399de4dad09bad4606/lib/gssapi/krb5/arcfour.c#L661</a>, <a href="https://github.com/heimdal/heimdal/blob/7ae2dfd853c87f9cbecb6f399de4dad09bad4606/lib/gssapi/krb5/arcfour.c#L1279">https://github.com/heimdal/heimdal/blob/7ae2dfd853c87f9cbecb6f399de4dad09bad4606/lib/gssapi/krb5/arcfour.c#L1279</a></li>
<li><a href="https://github.com/zeromq/libzmq/blob/22d218a182855f28038e865cb75bf5897ff0c786/tests/test_mock_pub_sub.cpp#L203">https://github.com/zeromq/libzmq/blob/22d218a182855f28038e865cb75bf5897ff0c786/tests/test_mock_pub_sub.cpp#L203</a></li>
<li><a href="https://github.com/pigoz/mplayer-svn/blob/8d651873a9eb193f5155ffb51ece206f187cf00f/sub/sub_cc.c#L391-L412">https://github.com/pigoz/mplayer-svn/blob/8d651873a9eb193f5155ffb51ece206f187cf00f/sub/sub_cc.c#L391-L412</a></li>
</ul>
<p>On my entire system I only found 10 lines of code that were miscompiled.
Three lines are tests.
All of the lines could be rewritten as a comparison to 0.
None of the lines looked that serious.
I am not sure which one is the worse: the reduced message integrity code(?) from some ARCFOUR implementation or the something something from an ATM driver?</p><p>The mplayer miscompilation is the most mysterious.
The code surrounding that function all appears to be immediately compare <code>memcmp</code> with <code>0</code>.
And given that my debug message refused to point to exactly what line is being miscompiled in that function, I fear some set of optimizations has happened to allow this code to be miscompiled in some way.</p><p>With more hardware I could do <a href="https://hydra.nixos.org/jobset/nixpkgs/trunk#tabs-jobs">a more thorough investigation</a> of the consequences of this GCC bug.
Until then I am going to stick with GCC 8 until GCC 9 and 10 have a new point releases.</p><p><ins datetime="20210708T152301Z">Update: Thanks goes to Marc ‘risson’ Schmitt, who had <a href="https://blog.cri.epita.fr/post/2020-12-05-a-gcc-bug-tracking-affected-software/" title="A GCC bug: tracking affected software">more hardware</a>.  Please check out <a href="https://blog.cri.epita.fr/post/2020-12-05-a-gcc-bug-tracking-affected-software/build-logs-grep">his results</a>.</ins></p></div>
    </content>
    <updated>2021-07-08T15:23:01Z</updated>
    <published>2020-09-29T02:37:01Z</published>
    <source>
      <id>http://r6.ca/blog/</id>
      <author>
        <name>Russell O’Connor</name>
        <uri>http://r6.ca/</uri>
      </author>
      <link href="http://r6.ca/blog/" rel="alternate" type="text/html">
      <link href="http://r6.ca/blog/feed.atom" rel="self" type="application/atom+xml">
      <title>Russell O’Connor’s Blog</title>
      <updated>2021-07-08T15:23:01Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:,2021:/math/dice-game</id>
    <link href="https://blog.plover.com/math/dice-game.html" rel="alternate" type="text/html">
    <title>A simple dice-throwing game that seems hard to play</title>
    <content type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p>I ran into a fun math problem yesterday, easy to ask, easy to
understand, but somewhat open-ended and seems to produce fairly
complex behavior.  It might be a good problem for a bright high school
student to tinker with.</p>

<p>Consider the following one-player game.  You start with a total of <em>n</em>
points. On each turn, you choose to throw either a four-, six-, or
eight-sided die, and then subtract the number thrown from your point
total. The game continues until your total reaches zero (and you win)
or goes below zero (and you lose).</p>

<p>This game seems surprisingly difficult to analyze.  The computer
analysis is quite easy, but what I mean is, if someone comes to you
offering to pay you a dollar if you can win starting with <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24n%3d9%24">
points, and it would be spoilsportish to say “just wait here for half
an hour while I write this computer program”, what's your good move?</p>

<p>Is there even a way to make an educated guess, short of doing a full
analysis?  The <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24n%e2%89%a44%24"> strategy is obvious, but even for <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24n%3d5%24"> you need
to start calculating: rolling the d4 is safe.  Rolling the d6 gives
you a chance of wiping out, but also a chance of winning instantly; is
that an improvement?  (Spoiler: it is, quite substantially so!  Your
chance of winning increases from <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%2436%5c%25%24"> to <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%2440%2e7%5c%25%24">.)</p>

<p>With the game as described, and optimal play, the probability of
winning approaches <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%2445%2e66%5c%25%24"> as the number of points increases, and the
strategy is not simple: the best strategy for <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24n%e2%89%a420%24"> uses the d4 in 13
cases, the d6 in 4 cases, and the d8 in 3 cases:</p>

<p>$$\begin{array}{rcl}
n &amp; \text{Best play} &amp; \text{Win %} \\  \hline
1 &amp;  4\quad  &amp; 25.00\% \\
2 &amp;  4\quad  &amp; 31.25 \\
3 &amp;  4\quad  &amp; 39.06 \\
4 &amp;  4\quad  &amp; 48.83 \\ \hline
5 &amp;  6  &amp; 40.69\% \\
6 &amp;  6  &amp; 47.47 \\
7 &amp;  4\quad  &amp; 44.01 \\
8 &amp;  \quad8  &amp; 47.04 \\ \hline
9 &amp;  4\quad  &amp; 44.80\% \\
10 &amp;  4\quad  &amp; 45.83 \\
11 &amp;  4\quad  &amp; 45.42 \\
12 &amp;  4\quad  &amp; 45.77 \\ \hline
13 &amp;  6  &amp; 45.48 \% \\
14 &amp;  \quad8  &amp; 45.73 \\
15 &amp;  4\quad  &amp; 45.60 \\
16 &amp;  \quad8  &amp; 45.71 \\ \hline
17 &amp;  4\quad  &amp; 45.63 \% \\
18 &amp;  4\quad  &amp; 45.67 \\
19 &amp;  4\quad  &amp; 45.65 \\
20 &amp;  6  &amp; 45.67
\end{array}
$$</p>

<p>It seems fairly clear (and not hard to prove) that when the die with
fewest sides has <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24d%24">  sides, the good numbers of points are
multiples of <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24d%24">, with <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24kd%2b1%24"> somewhat worse, and then <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24kd%2b2%2c%0akd%2b3%2c%20%5cldots%24"> generally better and better to the next peak at
<img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24kd%2bd%24">.  But there are exceptions: even if <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24d%24"> is not the smallest
die, if you have a <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24d%24">-sided die, it is good to have <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24d%24"> points,
and when you do you should roll the <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24d%24">-sided die.</p>

<p>I did get a little more insight after making the chart above and
seeing the 4-periodicity. In a
comment on
<a href="https://math.stackexchange.com/q/4192238/25554">my Math SE post</a> I
observed:</p>

<blockquote>
  <p>There is a way to see quickly that the d4 is better for
  <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24n%3d7%24">. <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24n%3d1%24"> is the worst possible position. <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24n%3d2%2c3%2c%24"> and
  <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%244%24"> are increasingly good; <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%244%24"> is best because you can't lose
  and you might win outright. After that <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%245%24">  is bad again, but not
  as bad as <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%241%24">, with <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%246%2c7%2c8%24"> increasingly good. The pattern
  continues this way, with <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%244k%e2%88%923%2c4k%e2%88%922%2c4k%e2%88%921%2c4k%24"> being increasingly
  good, and then <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%244k%2b1%24"> being worse again but better than
  <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%244k%e2%88%923%24">. For <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24n%3d7%24">, the d6 allows one to land on
  <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24%5c%5c%7b1%2c2%2c3%2c4%2c5%2c6%5c%5c%7d%24">, and the d4 on <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24%5c%5c%7b3%2c4%2c5%2c6%5c%5c%7d%24">. But <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%241%24"> is
  worse than <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%245%24"> and <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%242%24"> is worse than <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%246%24">, so prefer the d4.</p>
</blockquote>

<p>The d4-d6-d8 case is unusually confusing, because for example it's not
clear whether from 12 points you should throw d4, hoping to land on 8,
or d6, hoping to land on 6.  (I haven't checked but I imagine the two
strategies perform almost equally well; similarly it probably doesn't
matter much if you throw the d4 or the d6 first from <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24n%3d10%24">.)</p>

<p>That the d6 is best for <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24n%3d13%24"> is very surprising to me.</p>

<p>Why <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%2445%2e66%5c%25%24">?  I don't know.  With only one die, the winning probability
for large <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24n%24"> converges to <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24%5cfrac2%7bn%2b1%7d%24"> which I imagine is a fairly
straightforward calculation (but I have not done it).  For more than
one die, it seems much harder.</p>

<p>Is there a way to estimate the winning probability for large <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24n%24">,
given the list of dice? Actually yes, a little bit: the probability of
winning with just a d4 is <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24%5cfrac%2025%24">, and the d6 and d8 can't hurt,
so we know the chance of winning with all three dice available will be
somewhat more than <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%2440%5c%25%24">, as it is.  The value of larger dice falls
off rapidly with the number of sides, so for example with d4+d6 the
chance of winning increases from <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%2440%5c%25%24"> to almost <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%2445%5c%25%24">, and
adding the d8 only nudges this up to <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%2445%2e66%5c%25%24">.</p>

<p>The probability of winning with a d2 is <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24%5cfrac%2023%24">, and if you have
a d3 also the probability goes up to <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24%5cfrac%2034%24">, which seems simple
enough, but if you add a d4 instead of the d3 instead it goes to
<img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%2468%2e965%5c%25%24">, whatever that is.  And Dfan Schmidt tells me that d3 + d4
converges to <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24%5cfrac%7b512%7d%7b891%7d%24">.</p>

<p>I wrote it up for
<a href="https://math.stackexchange.com/q/4192238/25554">Math StackExchange</a>
but nobody has replied yet.</p>

<p><a href="https://pic.blog.plover.com/math/dice-game/dice-game.py.txt">Here's Python code to calculate the values</a>. Enjoy.</p>

<p>[ Addendum: <a href="https://math.stackexchange.com/questions/4192238/convergence-of-a-recursively-defined-sequence-that-arises-in-a-dice-throwing-gam?noredirect=1#comment8697921_4192238">Michael Lugo points out</a> that the d2+d4 probability
(“<img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%2468%2e965%5c%25%24">, whatever that is”)
is simply <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24%5cfrac%7b20%7d%7b29%7d%24">, and gives some other similar results.
One is that d3+d4+d5 has a winning  probability of <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24%5cfrac%7b16%7d%7b27%7d%24">;
the small denominator is  surprising. ]</p></div>
    </content>
    <updated>2021-07-08T13:55:00Z</updated>
    <published>2021-07-08T13:55:00Z</published>
    <category term="/math"/>
    <author>
      <name>Mark Dominus</name>
      <email>mjd@plover.com</email>
      <uri>http://www.plover.com/</uri>
    </author>
    <source>
      <id>tag:,2005:/</id>
      <icon>http://perl.plover.com/favicon.ico</icon>
      <link href="https://blog.plover.com/index.atom" rel="self" type="application/atom+xml">
      <link href="https://blog.plover.com" rel="alternate" type="text/html">
      <subtitle>The Universe of Discourse (Mark Dominus Blog)</subtitle>
      <title>The Universe of Discourse</title>
      <updated>2021-08-28T16:57:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>https://www.fpcomplete.com/blog/rust-asref-asderef/</id>
    <link href="https://www.fpcomplete.com/blog/rust-asref-asderef/" rel="alternate" type="text/html">
    <title xml:lang="en">Rust's as_ref vs as_deref</title>
    <content type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p>What's wrong with this program?</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #268bd2;">fn </span><span style="color: #b58900;">main</span><span style="color: #657b83;">() {
    </span><span style="color: #268bd2;">let</span><span style="color: #657b83;"> option_name: </span><span style="color: #859900;">Option</span><span style="color: #657b83;">&lt;</span><span style="color: #859900;">String</span><span style="color: #657b83;">&gt; = </span><span style="color: #859900;">Some</span><span style="color: #657b83;">(</span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">Alice</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">.</span><span style="color: #859900;">to_owned</span><span style="color: #657b83;">());
    </span><span style="color: #859900;">match</span><span style="color: #657b83;"> option_name {
        </span><span style="color: #859900;">Some</span><span style="color: #657b83;">(name) </span><span style="color: #859900;">=&gt; println!</span><span style="color: #657b83;">(</span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">Name is </span><span style="color: #cb4b16;">{}</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">, name),
        </span><span style="color: #859900;">None =&gt; println!</span><span style="color: #657b83;">(</span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">No name provided</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">),
    }
    </span><span style="color: #859900;">println!</span><span style="color: #657b83;">(</span><span style="color: #839496;">&quot;</span><span style="color: #cb4b16;">{:?}</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">, option_name);
}
</span></code></pre>
<p>The compiler gives us a wonderful error message, including a hint on how to fix it:</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #657b83;">error[E0382]: borrow of partially moved value: `option_name`
 --&gt; src\main.rs:7:22
  |
4 |         Some(name) =&gt; println!(&quot;Name is {}&quot;, name),
  |              ---- value partially moved here
...
7 |     println!(&quot;{:?}&quot;, option_name);
  |                      ^^^^^^^^^^^ value borrowed here after partial move
  |
  = note: partial move occurs because value has type `String`, which does not implement the `Copy` trait
help: borrow this field in the pattern to avoid moving `option_name.0`
  |
4 |         Some(ref name) =&gt; println!(&quot;Name is {}&quot;, name),
  |              ^^^
</span></code></pre>
<p>The issue here is that our pattern match on <code>option_name</code> moves the <code>Option&lt;String&gt;</code> value into the match. We can then no longer use <code>option_name</code> after the <code>match</code>. But this is disappointing, because our usage of <code>option_name</code> and <code>name</code> inside the pattern match doesn't actually require moving the value at all! Instead, borrowing would be just fine.</p>
<p>And that's exactly what the <code>note</code> from the compiler says. We can use the <code>ref</code> keyword in the <a href="https://doc.rust-lang.org/stable/reference/patterns.html#identifier-patterns">identifier pattern</a> to change this behavior and, instead of <em>moving</em> the value, we'll borrow a reference to the value. Now we're free to reuse <code>option_name</code> after the <code>match</code>. That version of the code looks like:</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #268bd2;">fn </span><span style="color: #b58900;">main</span><span style="color: #657b83;">() {
    </span><span style="color: #268bd2;">let</span><span style="color: #657b83;"> option_name: </span><span style="color: #859900;">Option</span><span style="color: #657b83;">&lt;</span><span style="color: #859900;">String</span><span style="color: #657b83;">&gt; = </span><span style="color: #859900;">Some</span><span style="color: #657b83;">(</span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">Alice</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">.</span><span style="color: #859900;">to_owned</span><span style="color: #657b83;">());
    </span><span style="color: #859900;">match</span><span style="color: #657b83;"> option_name {
        </span><span style="color: #859900;">Some</span><span style="color: #657b83;">(</span><span style="color: #586e75;">ref</span><span style="color: #657b83;"> name) </span><span style="color: #859900;">=&gt; println!</span><span style="color: #657b83;">(</span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">Name is </span><span style="color: #cb4b16;">{}</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">, name),
        </span><span style="color: #859900;">None =&gt; println!</span><span style="color: #657b83;">(</span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">No name provided</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">),
    }
    </span><span style="color: #859900;">println!</span><span style="color: #657b83;">(</span><span style="color: #839496;">&quot;</span><span style="color: #cb4b16;">{:?}</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">, option_name);
}
</span></code></pre>
<p>For the curious, you can <a href="https://doc.rust-lang.org/std/keyword.ref.html">read more about the <code>ref</code> keyword</a>.</p>
<h2 id="more-idiomatic">More idiomatic</h2>
<p>While this is <em>working</em> code, in my opinion and experience, it's not idiomatic. It's far more common to put the borrow on <code>option_name</code>, like so:</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #268bd2;">fn </span><span style="color: #b58900;">main</span><span style="color: #657b83;">() {
    </span><span style="color: #268bd2;">let</span><span style="color: #657b83;"> option_name: </span><span style="color: #859900;">Option</span><span style="color: #657b83;">&lt;</span><span style="color: #859900;">String</span><span style="color: #657b83;">&gt; = </span><span style="color: #859900;">Some</span><span style="color: #657b83;">(</span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">Alice</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">.</span><span style="color: #859900;">to_owned</span><span style="color: #657b83;">());
    </span><span style="color: #859900;">match &amp;</span><span style="color: #657b83;">option_name {
        </span><span style="color: #859900;">Some</span><span style="color: #657b83;">(name) </span><span style="color: #859900;">=&gt; println!</span><span style="color: #657b83;">(</span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">Name is </span><span style="color: #cb4b16;">{}</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">, name),
        </span><span style="color: #859900;">None =&gt; println!</span><span style="color: #657b83;">(</span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">No name provided</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">),
    }
    </span><span style="color: #859900;">println!</span><span style="color: #657b83;">(</span><span style="color: #839496;">&quot;</span><span style="color: #cb4b16;">{:?}</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">, option_name);
}
</span></code></pre>
<p>I like this version more, since it's blatantly obvious that we have no intention of moving <code>option_name</code> in the pattern match. Now <code>name</code> still remains as a reference, <code>println!</code> can use it as a reference, and everything is fine.</p>
<p>The fact that this code works, however, is a specifically added feature of the language. Before <a href="https://rust-lang.github.io/rfcs/2005-match-ergonomics.html">RFC 2005 &quot;match ergonomics&quot; landed in 2016</a>, the code above would have failed. That's because we tried to match the <code>Some</code> constructor against a <em>reference</em> to an <code>Option</code>, and those types don't match up. To borrow the RFC's terminology, getting that code to work would require &quot;a bit of a dance&quot;:</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #268bd2;">fn </span><span style="color: #b58900;">main</span><span style="color: #657b83;">() {
    </span><span style="color: #268bd2;">let</span><span style="color: #657b83;"> option_name: </span><span style="color: #859900;">Option</span><span style="color: #657b83;">&lt;</span><span style="color: #859900;">String</span><span style="color: #657b83;">&gt; = </span><span style="color: #859900;">Some</span><span style="color: #657b83;">(</span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">Alice</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">.</span><span style="color: #859900;">to_owned</span><span style="color: #657b83;">());
    </span><span style="color: #859900;">match &amp;</span><span style="color: #657b83;">option_name {
        </span><span style="color: #859900;">&amp;Some</span><span style="color: #657b83;">(</span><span style="color: #586e75;">ref</span><span style="color: #657b83;"> name) </span><span style="color: #859900;">=&gt; println!</span><span style="color: #657b83;">(</span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">Name is </span><span style="color: #cb4b16;">{}</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">, name),
        </span><span style="color: #859900;">&amp;None =&gt; println!</span><span style="color: #657b83;">(</span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">No name provided</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">),
    }
    </span><span style="color: #859900;">println!</span><span style="color: #657b83;">(</span><span style="color: #839496;">&quot;</span><span style="color: #cb4b16;">{:?}</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">, option_name);
}
</span></code></pre>
<p>Now all of the types really line up explicitly:</p>
<ul>
<li>We have an <code>&amp;Option&lt;String&gt;</code></li>
<li>We can therefore match on a <code>&amp;Some</code> variant or a <code>&amp;None</code> variant</li>
<li>In the <code>&amp;Some</code> variant, we need to make sure we borrow the inner value, so we add a <code>ref</code> keyword</li>
</ul>
<p>Fortunately, with RFC 2005 in place, this extra noise isn't needed, and we can simplify our pattern match as above. The Rust language is better for this change, and the masses can rejoice.</p>
<h2 id="introducing-as-ref">Introducing as_ref</h2>
<p>But what if we didn't have RFC 2005? Would we be required to use the awkward syntax above forever? Thanks to a helper method, no. The problem in our code is that <code>&amp;option_name</code> is a reference to an <code>Option&lt;String&gt;</code>. And we want to pattern match on the <code>Some</code> and <code>None</code> constructors, and capture a <code>&amp;String</code> instead of a <code>String</code> (avoiding the move). RFC 2005 implements that as a direct language feature. But there's also a method on <code>Option</code> that does just this: <code>as_ref</code>.</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #268bd2;">impl</span><span style="color: #657b83;">&lt;T&gt; </span><span style="color: #b58900;">Option</span><span style="color: #657b83;">&lt;T&gt; {
    </span><span style="color: #586e75;">pub </span><span style="color: #268bd2;">const fn </span><span style="color: #b58900;">as_ref</span><span style="color: #657b83;">(</span><span style="color: #859900;">&amp;</span><span style="color: #268bd2;">self</span><span style="color: #657b83;">) -&gt; </span><span style="color: #859900;">Option</span><span style="color: #657b83;">&lt;</span><span style="color: #859900;">&amp;</span><span style="color: #657b83;">T&gt; {
        </span><span style="color: #859900;">match </span><span style="color: #657b83;">*</span><span style="color: #d33682;">self </span><span style="color: #657b83;">{
            </span><span style="color: #859900;">Some</span><span style="color: #657b83;">(</span><span style="color: #586e75;">ref</span><span style="color: #657b83;"> x) </span><span style="color: #859900;">=&gt; Some</span><span style="color: #657b83;">(x),
            </span><span style="color: #859900;">None =&gt; None</span><span style="color: #657b83;">,
        }
    }
}
</span></code></pre>
<p>This is another way of avoiding the &quot;dance,&quot; by capturing it in the method definition itself. But thankfully, there's a great language ergonomics feature that captures this pattern, and automatically applies this rule for us. Meaning that <code>as_ref</code> isn't really necessary any more... right?</p>
<h2 id="side-rant-ergonomics-in-rust">Side rant: ergonomics in Rust</h2>
<p>I absolutely love the ergonomics features of Rust. There is no &quot;but&quot; in my love for RFC 2005. There is, however, a concern around learning and teaching a language with these kinds of ergonomics. These kinds of features work 99% of the time. But when they fail, as we're about to see, it can come as a large shock.</p>
<p>I'm guessing most Rustaceans, at least those that learned the language after 2016, never considered the fact that there was something weird about being able to pattern match a <code>Some</code> from an <code>&amp;Option&lt;String&gt;</code> value. It feels natural. It <em>is</em> natural. But because you were never forced to confront this while learning the language, at some point in the distant future you'll crash into a wall when this ergonomic feature doesn't kick in.</p>
<p>I kind of wish there was a <code>--no-ergonomics</code> flag that we could turn on when learning the language to force us to confront all of these details. But there isn't. I'm hoping blog posts like this help out. Anyway, &lt;/rant&gt;.</p>
<h2 id="when-rfc-2005-fails">When RFC 2005 fails</h2>
<p>We can fairly easily create a contrived example of match ergonomics failing to solve our problem. Let's &quot;improve&quot; our program above by factoring out the greet logic to its own helper function:</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #268bd2;">fn </span><span style="color: #b58900;">try_greet</span><span style="color: #657b83;">(</span><span style="color: #268bd2;">option_name</span><span style="color: #657b83;">: </span><span style="color: #859900;">Option</span><span style="color: #657b83;">&lt;</span><span style="color: #859900;">&amp;String</span><span style="color: #657b83;">&gt;) {
    </span><span style="color: #859900;">match</span><span style="color: #657b83;"> option_name {
        </span><span style="color: #859900;">Some</span><span style="color: #657b83;">(name) </span><span style="color: #859900;">=&gt; println!</span><span style="color: #657b83;">(</span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">Name is </span><span style="color: #cb4b16;">{}</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">, name),
        </span><span style="color: #859900;">None =&gt; println!</span><span style="color: #657b83;">(</span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">No name provided</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">),
    }
}

</span><span style="color: #268bd2;">fn </span><span style="color: #b58900;">main</span><span style="color: #657b83;">() {
    </span><span style="color: #268bd2;">let</span><span style="color: #657b83;"> option_name: </span><span style="color: #859900;">Option</span><span style="color: #657b83;">&lt;</span><span style="color: #859900;">String</span><span style="color: #657b83;">&gt; = </span><span style="color: #859900;">Some</span><span style="color: #657b83;">(</span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">Alice</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">.</span><span style="color: #859900;">to_owned</span><span style="color: #657b83;">());
    </span><span style="color: #859900;">try_greet</span><span style="color: #657b83;">(</span><span style="color: #859900;">&amp;</span><span style="color: #657b83;">option_name);
    </span><span style="color: #859900;">println!</span><span style="color: #657b83;">(</span><span style="color: #839496;">&quot;</span><span style="color: #cb4b16;">{:?}</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">, option_name);
}
</span></code></pre>
<p>This code won't compile:</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #657b83;">error[E0308]: mismatched types
  --&gt; src\main.rs:10:15
   |
10 |     try_greet(&amp;option_name);
   |               ^^^^^^^^^^^^
   |               |
   |               expected enum `Option`, found `&amp;Option&lt;String&gt;`
   |               help: you can convert from `&amp;Option&lt;T&gt;` to `Option&lt;&amp;T&gt;` using `.as_ref()`: `&amp;option_name.as_ref()`
   |
   = note:   expected enum `Option&lt;&amp;String&gt;`
           found reference `&amp;Option&lt;String&gt;`
</span></code></pre>
<p>Now we've bypassed any ability to use match ergonomics at the call site. With what we know about <code>as_ref</code>, it's easy enough to fix this. But, at least in my experience, the first time someone runs into this kind of error, it's a bit surprising, since most of us have never previously thought about the distinction between <code>Option&lt;&amp;T&gt;</code> and <code>&amp;Option&lt;T&gt;</code>.</p>
<p>These kinds of errors tend to pop up when combining together other helper functions, such as <code>map</code>, which circumvent the need for explicit pattern matching.</p>
<p>As an aside, you could solve this compile error pretty easily, without resorting to <code>as_ref</code>. Instead, you could change the type signature of <code>try_greet</code> to take a <code>&amp;Option&lt;String&gt;</code> instead of an <code>Option&lt;&amp;String&gt;</code>, and then allow the match ergonomics to kick in within the body of <code>try_greet</code>. One reason not to do this is that, as mentioned, this was all a contrived example to demonstrate a failure. But the other reason is more important: neither <code>&amp;Option&lt;String&gt;</code> nor <code>Option&lt;&amp;String&gt;</code> are good argument types. Let's explore that next.</p>
<h2 id="when-as-ref-fails">When as_ref fails</h2>
<p>We're taught pretty early in our Rust careers that, when receiving an argument to a function, we should prefer taking references to slices instead of references to owned objects. In other words:</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #268bd2;">fn </span><span style="color: #b58900;">greet_good</span><span style="color: #657b83;">(</span><span style="color: #268bd2;">name</span><span style="color: #657b83;">: </span><span style="color: #859900;">&amp;</span><span style="color: #268bd2;">str</span><span style="color: #657b83;">) {
    </span><span style="color: #859900;">println!</span><span style="color: #657b83;">(</span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">Name is </span><span style="color: #cb4b16;">{}</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">, name);
}

</span><span style="color: #268bd2;">fn </span><span style="color: #b58900;">greet_bad</span><span style="color: #657b83;">(</span><span style="color: #268bd2;">name</span><span style="color: #657b83;">: </span><span style="color: #859900;">&amp;</span><span style="color: #657b83;">String) {
    </span><span style="color: #859900;">println!</span><span style="color: #657b83;">(</span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">Name is </span><span style="color: #cb4b16;">{}</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">, name);
}
</span></code></pre>
<p>And in fact, if you pass this code by <code>clippy</code>, it will tell you to change the signature of <code>greet_bad</code>. The <a href="https://rust-lang.github.io/rust-clippy/master/index.html#ptr_arg">clippy lint description</a> provides a great explanation of this, but suffice it to say that <code>greet_good</code> is more general in what it accepts than <code>greet_bad</code>.</p>
<p>The same logic applies to <code>try_greet</code>. Why should we accept <code>Option&lt;&amp;String&gt;</code> instead of <code>Option&lt;&amp;str&gt;</code>? And interestingly, clippy doesn't complain in this case like it did in <code>greet_bad</code>. To see why, let's change our signature like so and see what happens:</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #268bd2;">fn </span><span style="color: #b58900;">try_greet</span><span style="color: #657b83;">(</span><span style="color: #268bd2;">option_name</span><span style="color: #657b83;">: </span><span style="color: #859900;">Option</span><span style="color: #657b83;">&lt;</span><span style="color: #859900;">&amp;</span><span style="color: #268bd2;">str</span><span style="color: #657b83;">&gt;) {
    </span><span style="color: #859900;">match</span><span style="color: #657b83;"> option_name {
        </span><span style="color: #859900;">Some</span><span style="color: #657b83;">(name) </span><span style="color: #859900;">=&gt; println!</span><span style="color: #657b83;">(</span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">Name is </span><span style="color: #cb4b16;">{}</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">, name),
        </span><span style="color: #859900;">None =&gt; println!</span><span style="color: #657b83;">(</span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">No name provided</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">),
    }
}

</span><span style="color: #268bd2;">fn </span><span style="color: #b58900;">main</span><span style="color: #657b83;">() {
    </span><span style="color: #268bd2;">let</span><span style="color: #657b83;"> option_name: </span><span style="color: #859900;">Option</span><span style="color: #657b83;">&lt;</span><span style="color: #859900;">String</span><span style="color: #657b83;">&gt; = </span><span style="color: #859900;">Some</span><span style="color: #657b83;">(</span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">Alice</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">.</span><span style="color: #859900;">to_owned</span><span style="color: #657b83;">());
    </span><span style="color: #859900;">try_greet</span><span style="color: #657b83;">(option_name.</span><span style="color: #859900;">as_ref</span><span style="color: #657b83;">());
    </span><span style="color: #859900;">println!</span><span style="color: #657b83;">(</span><span style="color: #839496;">&quot;</span><span style="color: #cb4b16;">{:?}</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">, option_name);
}
</span></code></pre>
<p>This code no longer compiles:</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #657b83;">error[E0308]: mismatched types
  --&gt; src\main.rs:10:15
   |
10 |     try_greet(option_name.as_ref());
   |               ^^^^^^^^^^^^^^^^^^^^ expected `str`, found struct `String`
   |
   = note: expected enum `Option&lt;&amp;str&gt;`
              found enum `Option&lt;&amp;String&gt;`
</span></code></pre>
<p>This is another example of ergonomics failing. You see, when you call a function with an argument of type <code>&amp;String</code>, but the function expects a <code>&amp;str</code>, <a href="https://doc.rust-lang.org/book/ch15-02-deref.html#implicit-deref-coercions-with-functions-and-methods">deref coercion</a> kicks in and will perform a conversion for you. This is a piece of Rust ergonomics that we all rely on regularly, and every once in a while it completely fails to help us. This is one of those times. The compiler will not automatically convert a <code>Option&lt;&amp;String&gt;</code> into an <code>Option&lt;&amp;str&gt;</code>.</p>
<p>(You can also read more about <a href="https://doc.rust-lang.org/nomicon/coercions.html">coercions in the nomicon</a>.)</p>
<p>Fortunately, there's another helper method on <code>Option</code> that does this for us. <code>as_deref</code> works just like <code>as_ref</code>, but additionally performs a <code>deref</code> method call on the value. Its implementation in <code>std</code> is interesting:</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #268bd2;">impl</span><span style="color: #657b83;">&lt;T: Deref&gt; </span><span style="color: #b58900;">Option</span><span style="color: #657b83;">&lt;T&gt; {
    </span><span style="color: #586e75;">pub </span><span style="color: #268bd2;">fn </span><span style="color: #b58900;">as_deref</span><span style="color: #657b83;">(</span><span style="color: #859900;">&amp;</span><span style="color: #268bd2;">self</span><span style="color: #657b83;">) -&gt; </span><span style="color: #859900;">Option</span><span style="color: #657b83;">&lt;</span><span style="color: #859900;">&amp;</span><span style="color: #268bd2;">T::</span><span style="color: #657b83;">Target&gt; {
        </span><span style="color: #d33682;">self</span><span style="color: #657b83;">.</span><span style="color: #859900;">as_ref</span><span style="color: #657b83;">().</span><span style="color: #859900;">map</span><span style="color: #657b83;">(|</span><span style="color: #268bd2;">t</span><span style="color: #657b83;">| t.</span><span style="color: #859900;">deref</span><span style="color: #657b83;">())
    }
}
</span></code></pre>
<p>But we can also implement it more explicitly to see the behavior spelled out:</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #859900;">use </span><span style="color: #657b83;">std::ops::Deref;

</span><span style="color: #268bd2;">fn </span><span style="color: #b58900;">try_greet</span><span style="color: #657b83;">(</span><span style="color: #268bd2;">option_name</span><span style="color: #657b83;">: </span><span style="color: #859900;">Option</span><span style="color: #657b83;">&lt;</span><span style="color: #859900;">&amp;</span><span style="color: #268bd2;">str</span><span style="color: #657b83;">&gt;) {
    </span><span style="color: #859900;">match</span><span style="color: #657b83;"> option_name {
        </span><span style="color: #859900;">Some</span><span style="color: #657b83;">(name) </span><span style="color: #859900;">=&gt; println!</span><span style="color: #657b83;">(</span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">Name is </span><span style="color: #cb4b16;">{}</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">, name),
        </span><span style="color: #859900;">None =&gt; println!</span><span style="color: #657b83;">(</span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">No name provided</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">),
    }
}

</span><span style="color: #268bd2;">fn </span><span style="color: #b58900;">my_as_deref</span><span style="color: #657b83;">&lt;T: Deref&gt;(</span><span style="color: #268bd2;">x</span><span style="color: #657b83;">: </span><span style="color: #859900;">&amp;Option</span><span style="color: #657b83;">&lt;T&gt;) -&gt; </span><span style="color: #859900;">Option</span><span style="color: #657b83;">&lt;</span><span style="color: #859900;">&amp;</span><span style="color: #268bd2;">T::</span><span style="color: #657b83;">Target&gt; {
    </span><span style="color: #859900;">match </span><span style="color: #657b83;">*x {
        </span><span style="color: #859900;">None =&gt; None</span><span style="color: #657b83;">,
        </span><span style="color: #859900;">Some</span><span style="color: #657b83;">(</span><span style="color: #586e75;">ref</span><span style="color: #657b83;"> t) </span><span style="color: #859900;">=&gt; Some</span><span style="color: #657b83;">(t.</span><span style="color: #859900;">deref</span><span style="color: #657b83;">())
    }
}

</span><span style="color: #268bd2;">fn </span><span style="color: #b58900;">main</span><span style="color: #657b83;">() {
    </span><span style="color: #268bd2;">let</span><span style="color: #657b83;"> option_name: </span><span style="color: #859900;">Option</span><span style="color: #657b83;">&lt;</span><span style="color: #859900;">String</span><span style="color: #657b83;">&gt; = </span><span style="color: #859900;">Some</span><span style="color: #657b83;">(</span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">Alice</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">.</span><span style="color: #859900;">to_owned</span><span style="color: #657b83;">());
    </span><span style="color: #859900;">try_greet</span><span style="color: #657b83;">(</span><span style="color: #859900;">my_as_deref</span><span style="color: #657b83;">(</span><span style="color: #859900;">&amp;</span><span style="color: #657b83;">option_name));
    </span><span style="color: #859900;">println!</span><span style="color: #657b83;">(</span><span style="color: #839496;">&quot;</span><span style="color: #cb4b16;">{:?}</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">, option_name);
}
</span></code></pre>
<p>And to bring this back to something closer to real world code, here's a case where combining <code>as_deref</code> and <code>map</code> leads to much cleaner code than you'd otherwise have:</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #268bd2;">fn </span><span style="color: #b58900;">greet</span><span style="color: #657b83;">(</span><span style="color: #268bd2;">name</span><span style="color: #657b83;">: </span><span style="color: #859900;">&amp;</span><span style="color: #268bd2;">str</span><span style="color: #657b83;">) {
    </span><span style="color: #859900;">println!</span><span style="color: #657b83;">(</span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">Name is </span><span style="color: #cb4b16;">{}</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">, name);
}

</span><span style="color: #268bd2;">fn </span><span style="color: #b58900;">main</span><span style="color: #657b83;">() {
    </span><span style="color: #268bd2;">let</span><span style="color: #657b83;"> option_name: </span><span style="color: #859900;">Option</span><span style="color: #657b83;">&lt;</span><span style="color: #859900;">String</span><span style="color: #657b83;">&gt; = </span><span style="color: #859900;">Some</span><span style="color: #657b83;">(</span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">Alice</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">.</span><span style="color: #859900;">to_owned</span><span style="color: #657b83;">());
    option_name.</span><span style="color: #859900;">as_deref</span><span style="color: #657b83;">().</span><span style="color: #859900;">map</span><span style="color: #657b83;">(greet);
    </span><span style="color: #859900;">println!</span><span style="color: #657b83;">(</span><span style="color: #839496;">&quot;</span><span style="color: #cb4b16;">{:?}</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">, option_name);
}
</span></code></pre><h2 id="real-ish-life-example">Real-ish life example</h2>
<p>Like most of my blog posts, this one was inspired by some real world code. To simplify the concept down a bit, I was parsing a config file, and ended up with an <code>Option&lt;String&gt;</code>. I needed some code that would either provide the value from the config, or default to a static string in the source code. Without <code>as_deref</code>, I could have used <code>STATIC_STRING_VALUE.to_string()</code> to get types to line up, but that would have been ugly and inefficient. Here's a somewhat intact representation of that code:</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #859900;">use </span><span style="color: #657b83;">serde::Deserialize;

#[</span><span style="color: #268bd2;">derive</span><span style="color: #657b83;">(Deserialize)]
</span><span style="color: #268bd2;">struct </span><span style="color: #b58900;">Config </span><span style="color: #657b83;">{
    </span><span style="color: #268bd2;">some_value</span><span style="color: #657b83;">: </span><span style="color: #859900;">Option</span><span style="color: #657b83;">&lt;</span><span style="color: #859900;">String</span><span style="color: #657b83;">&gt;
}

</span><span style="color: #268bd2;">const </span><span style="color: #cb4b16;">DEFAULT_VALUE</span><span style="color: #657b83;">: </span><span style="color: #859900;">&amp;</span><span style="color: #268bd2;">str </span><span style="color: #657b83;">= </span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">my-default-value</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">;

</span><span style="color: #268bd2;">fn </span><span style="color: #b58900;">main</span><span style="color: #657b83;">() {
    </span><span style="color: #268bd2;">let </span><span style="color: #586e75;">mut</span><span style="color: #657b83;"> file = std::fs::File::open(</span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">config.yaml</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">).</span><span style="color: #859900;">unwrap</span><span style="color: #657b83;">();
    </span><span style="color: #268bd2;">let</span><span style="color: #657b83;"> config: Config = serde_yaml::from_reader(</span><span style="color: #859900;">&amp;</span><span style="color: #586e75;">mut</span><span style="color: #657b83;"> file).</span><span style="color: #859900;">unwrap</span><span style="color: #657b83;">();
    </span><span style="color: #268bd2;">let</span><span style="color: #657b83;"> value = config.some_value.</span><span style="color: #859900;">as_deref</span><span style="color: #657b83;">().</span><span style="color: #859900;">unwrap_or</span><span style="color: #657b83;">(</span><span style="color: #cb4b16;">DEFAULT_VALUE</span><span style="color: #657b83;">);
    </span><span style="color: #859900;">println!</span><span style="color: #657b83;">(</span><span style="color: #839496;">&quot;</span><span style="color: #2aa198;">value is </span><span style="color: #cb4b16;">{}</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">, value);
}
</span></code></pre>
<p>Want to learn more Rust with FP Complete? Check out these links:</p>
<ul>
<li><a href="https://www.fpcomplete.com/training/">Training courses</a></li>
<li><a href="https://www.fpcomplete.com/rust/crash-course/">Rust Crash Course</a></li>
<li><a href="https://www.fpcomplete.com/tags/rust/">Rust tagged articles</a></li>
<li><a href="https://www.fpcomplete.com/rust/">FP Complete Rust homepage</a></li>
</ul></div>
    </content>
    <updated>2021-07-05T00:00:00Z</updated>
    <published>2021-07-05T00:00:00Z</published>
    <source>
      <id>https://www.fpcomplete.com/atom.xml</id>
      <author>
        <name>FP Complete</name>
      </author>
      <link href="https://www.fpcomplete.com/atom.xml" rel="self" type="application/atom+xml">
      <link href="https://www.fpcomplete.com" rel="alternate" type="text/html">
      <subtitle xml:lang="en">Blog posts from FP Complete, focusing on Rust, Haskell, and DevOps</subtitle>
      <title xml:lang="en">FP Complete Blog</title>
      <updated>2021-08-30T00:00:00Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://magnus.therning.org/2021-07-03-the-timeout-manager-exception.html</id>
    <link href="https://magnus.therning.org/2021-07-03-the-timeout-manager-exception.html" rel="alternate" type="text/html">
    <title>The timeout manager exception</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>
The other day I bumped the dependencies of a Haskell project at work and noticed
a new exception being thrown:
</p>

<blockquote>
<p>
Thread killed by timeout manager
</p>
</blockquote>

<p>
After a couple of false starts (it wasn't the <a href="https://hackage.haskell.org/package/resource-pool">connection pool</a>, nor was it
<a href="https://hackage.haskell.org/package/servant">servant</a>) I realised that a better approach would be to look at the list of
packages that were updated as part of the dependency bumping.<sup><a class="footref" href="https://magnus.therning.org/feed.xml#fn.1" id="fnr.1">1</a></sup> Most of them
I thought would be <span class="underline">very</span> unlikely sources of it, but two in the list stood out:
</p>

<table>


<colgroup>
<col class="org-left">

<col class="org-right">

<col class="org-right">
</colgroup>
<thead>
<tr>
<th class="org-left" scope="col">Package</th>
<th class="org-right" scope="col">Pre</th>
<th class="org-right" scope="col">Post</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left"><a href="https://hackage.haskell.org/package/unliftio">unliftio</a></td>
<td class="org-right">0.2.14</td>
<td class="org-right">0.2.18</td>
</tr>

<tr>
<td class="org-left"><a href="https://hackage.haskell.org/package/warp">warp</a></td>
<td class="org-right">3.3.15</td>
<td class="org-right">3.3.16</td>
</tr>
</tbody>
</table>

<p>
<code>warp</code> since the exception seemed to be thrown shortly after handling an HTTP
request, and <code>unliftio</code> since the exception was caught by the handler for
uncaught exceptions and its description contains &quot;thread&quot;. Also, when looking at
the code changes in <code>warp</code> on GitHub<sup><a class="footref" href="https://magnus.therning.org/feed.xml#fn.2" id="fnr.2">2</a></sup> I found that some of the changes
introduced was increased use of <code>unliftio</code> for async stuff. The changes contain
mentions of <code>TimeoutThread</code> and <code>System.TimeManager</code>. That sounded promising,
and it lead me to the <a href="https://hackage.haskell.org/package/time-manager-0.0.0/docs/System-TimeManager.html#t:TimeoutThread">TimeoutThread</a> exception in <a href="https://hackage.haskell.org/package/time-manager">time-manager</a>.
</p>

<p>
With that knowledge I could quickly adjust the handler for uncaught exceptions
to not log <code>TimeoutThread</code> as fatal:
</p>

<div class="org-src-container">
<pre class="src src-haskell"><span class="org-haskell-definition">lastExceptionHandler</span> <span class="org-haskell-operator">::</span> <span class="org-haskell-type">LoggerSet</span> <span class="org-haskell-operator">-&gt;</span> <span class="org-haskell-type">SomeException</span> <span class="org-haskell-operator">-&gt;</span> <span class="org-haskell-type">IO</span> <span class="org-haskell-constructor"><span class="org-rainbow-delimiters-depth-1">()</span></span>
<span class="org-haskell-definition">lastExceptionHandler</span> logger e
  <span class="org-haskell-operator">|</span> <span class="org-haskell-constructor">Just</span> <span class="org-haskell-constructor">TimeoutThread</span> <span class="org-haskell-operator">&lt;-</span> fromException e <span class="org-haskell-operator">=</span> return <span class="org-haskell-constructor"><span class="org-rainbow-delimiters-depth-1">()</span></span>
  <span class="org-haskell-operator">|</span> otherwise <span class="org-haskell-operator">=</span> <span class="org-haskell-keyword">do</span>
      logFatalIoS logger <span class="org-haskell-operator">$</span> pack <span class="org-haskell-operator">$</span> <span class="org-string">&quot;uncaught exception: &quot;</span> <span class="org-haskell-operator">&lt;&gt;</span> displayException e
      flushLogStr logger
</pre>
</div>

<p>
I have to say it was a bit more work to arrive at this than I'd have liked. I
reckon there are easier ways to track down the information I needed. So I'd love
to hear what tricks and tips others have.
</p>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a class="footnum" href="https://magnus.therning.org/feed.xml#fnr.1" id="fn.1">1</a></sup> <div class="footpara"><p class="footpara">
As a bonus it gave me a good reason to reach for <a href="https://man7.org/linux/man-pages/man1/comm.1.html"><code>comm</code></a>, a command that I
rarely use but for some reason always enjoy.
</p></div></div>

<div class="footdef"><sup><a class="footnum" href="https://magnus.therning.org/feed.xml#fnr.2" id="fn.2">2</a></sup> <div class="footpara"><p class="footpara">
GitHub's compare feature isn't very easy to discover, but a URL like this
<a href="https://github.com/yesodweb/wai/compare/warp-3.3.15...warp-3.3.16">https://github.com/yesodweb/wai/compare/warp-3.3.15â€¦warp-3.3.16</a> (note the 3
dots!) does the trick.
</p></div></div>


</div>
</div><div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-haskell.html">haskell</a> <a href="https://magnus.therning.org/tag-warp.html">warp</a> <a href="https://magnus.therning.org/tag-servant.html">servant</a> </div></div>
    </summary>
    <updated>2021-07-03T11:52:00Z</updated>
    <published>2021-07-03T11:52:00Z</published>
    <category term="haskell"/>
    <category term="warp"/>
    <category term="servant"/>
    <source>
      <id>https://magnus.therning.org/</id>
      <author>
        <name>Magnus Therning</name>
      </author>
      <link href="https://magnus.therning.org/" rel="alternate" type="text/html">
      <link href="https://magnus.therning.org/feed.xml" rel="self" type="application/rss+xml">
      <subtitle>Magnus web site</subtitle>
      <title>Magnus web site</title>
      <updated>2021-07-23T14:07:31Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>https://www.snoyman.com/blog/2021/07/rust-if-without-else/</id>
    <link href="https://www.snoyman.com/blog/2021/07/rust-if-without-else/" rel="alternate" type="text/html">
    <title>if without else in Rust</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Miriam and my book, <a href="https://www.beginrust.com">Begin Rust</a>, is available both as a standalone book or as a <a href="https://www.educative.io/courses/ultimate-guide-to-rust-programming">course on Educative</a>. One of our users on Educative asked a question about the &quot;Hello If&quot; section of the book, and we decided to provide a response on the blog (in addition to on the <a href="https://groups.google.com/g/begin-rust">Begin Rust mailing list</a>.</p>
<hr></hr>
<p>In the book, we say:</p>
<blockquote>
<p>However, there is one restriction in the kind of if expressions weâ€™ve seen so far. They must evaluate to unit ()</p>
</blockquote>
<p>The user asked whether this was related to the fact that the main function is returning unit, which in fact is implied by the error message the compiler gives. However, that's <em>not</em> the case. In the context of that section, &quot;the kind of if expressions&quot; we're referring to are if expressions without else blocks. Let's demonstrate. Consider this program:</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #268bd2;">fn </span><span style="color: #b58900;">return_number</span><span style="color: #657b83;">(</span><span style="color: #268bd2;">is_even</span><span style="color: #657b83;">: </span><span style="color: #268bd2;">bool</span><span style="color: #657b83;">) -&gt; </span><span style="color: #268bd2;">u32 </span><span style="color: #657b83;">{
    </span><span style="color: #859900;">if</span><span style="color: #657b83;"> is_even {
        </span><span style="color: #6c71c4;">42
    </span><span style="color: #657b83;">} </span><span style="color: #859900;">else </span><span style="color: #657b83;">{
        </span><span style="color: #6c71c4;">43
    </span><span style="color: #657b83;">}
}

</span><span style="color: #268bd2;">fn </span><span style="color: #b58900;">main</span><span style="color: #657b83;">() {
    </span><span style="color: #859900;">println!</span><span style="color: #657b83;">(</span><span style="color: #839496;">&quot;</span><span style="color: #cb4b16;">{}</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">, </span><span style="color: #859900;">return_number</span><span style="color: #657b83;">(</span><span style="color: #b58900;">true</span><span style="color: #657b83;">));
    </span><span style="color: #859900;">println!</span><span style="color: #657b83;">(</span><span style="color: #839496;">&quot;</span><span style="color: #cb4b16;">{}</span><span style="color: #839496;">&quot;</span><span style="color: #657b83;">, </span><span style="color: #859900;">return_number</span><span style="color: #657b83;">(</span><span style="color: #b58900;">false</span><span style="color: #657b83;">));
}
</span></code></pre>
<p>We have an <code>if</code>/<code>else</code> expression which evaluates to a <code>u32</code>. That becomes the return value of the function <code>return_number</code>. Everything is fine.</p>
<p>However, let's tweak this ever so slightly and remove the else:</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #268bd2;">fn </span><span style="color: #b58900;">return_number</span><span style="color: #657b83;">(</span><span style="color: #268bd2;">is_even</span><span style="color: #657b83;">: </span><span style="color: #268bd2;">bool</span><span style="color: #657b83;">) -&gt; </span><span style="color: #268bd2;">u32 </span><span style="color: #657b83;">{
    </span><span style="color: #859900;">if</span><span style="color: #657b83;"> is_even {
        </span><span style="color: #6c71c4;">42
    </span><span style="color: #657b83;">}
}
</span></code></pre>
<p>This no longer compiles, and instead gives the error message:</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #657b83;">error[E0317]: `if` may be missing an `else` clause
</span></code></pre>
<p>We can try to &quot;fix&quot; this by ignoring the result of evaluating the if expression, like so:</p>
<pre style="background-color: #fdf6e3;"><code><span style="color: #268bd2;">fn </span><span style="color: #b58900;">return_number</span><span style="color: #657b83;">(</span><span style="color: #268bd2;">is_even</span><span style="color: #657b83;">: </span><span style="color: #268bd2;">bool</span><span style="color: #657b83;">) -&gt; </span><span style="color: #268bd2;">u32 </span><span style="color: #657b83;">{
    </span><span style="color: #859900;">if</span><span style="color: #657b83;"> is_even {
        </span><span style="color: #6c71c4;">42
    </span><span style="color: #657b83;">}; </span><span style="color: #93a1a1;">// semicolon ignores the result!
    </span><span style="color: #6c71c4;">43
</span><span style="color: #657b83;">}
</span></code></pre>
<p>Even so, the compiler is not happy, and gives the same error message above.</p>
<p>Takeaways:</p>
<ul>
<li>If you have an if without an else, the body must <em>always</em> evaluate to unit, no exceptions.</li>
<li>If you have an if and an else, their blocks must evaluate to the same type.</li>
<li>If you return the result of an if/else expression from a function, the return type of the function must match the type of the expressions in the if and else blocks.</li>
</ul></div>
    </summary>
    <updated>2021-07-01T00:00:00Z</updated>
    <published>2021-07-01T00:00:00Z</published>
    <source>
      <id>https://www.snoyman.com</id>
      <author>
        <name>Michael Snoyman</name>
      </author>
      <link href="https://www.snoyman.com" rel="alternate" type="text/html">
      <link href="https://www.snoyman.com/rss.xml" rel="self" type="application/rss+xml">
      <subtitle>Michael Snoyman's homepage and blog. Eclectic collection of programming (mostly Rust and Haskell) and lifting (weights, children, and monads).</subtitle>
      <title>Snoyberg - Michael Snoyman</title>
      <updated>2021-08-13T00:00:00Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://medium.com/p/db22d09da027</id>
    <link href="https://cdsmithus.medium.com/towers-of-hanoi-from-a-random-start-db22d09da027?source=rss-18bd5acaea78------2" rel="alternate" type="text/html">
    <title>Towers of Hanoi from a Random Start</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><figure><img alt="" src="https://cdn-images-1.medium.com/max/677/0*0yy72GI2eWciBITc.jpeg"></figure><p>There’s a well-known problem called the Towers of Hanoi, in which <em>n</em> disks, all different sizes, are placed onto three rods to form towers. The goal is to move between various configurations while following two rules.</p><ol><li>You may only move one disk at a time, and must place that disk onto a tower before you can pick up a new one.</li><li>You may never place a larger disk on top of a smaller disk.</li></ol><p>The famous version of this problem starts with all the disks on the first tower, and then asks you to move them all to the last tower. How many moves are required? It’s a famous example of recursion (if you’re a computer programmer) or induction (if you’re a mathematician). The key realization is that at some point, you must move the largest ring to the final tower, and to do this, the entire stack of <em>n </em>- 1 disks must reside on the middle tower. Since the location of the largest disk doesn’t affect your ability to move smaller disks, this sub-problem is identical to the original problem, but with one fewer disk. To solve the problem for <em>n</em> disks, then, you simply solve an identical problem for <em>n</em> - 1 disks, take one move to move the largest disk over, and then solve the <em>n - </em>1 problem again. Conclusion: solving the classic problem requires one fewer move than the <em>n</em>th power of 2.</p><p>But we can ask more questions than this. Lately, I’ve been pondering the case where, instead of starting with all disks in the first tower, we start with some arbitrary starting configuration. What can we say about this problem?</p><p>One might first wonder how many legal configurations there are in the first place. This isn’t a difficult question, because the only choice you have is which disks are part of which towers. The order of the disks in that tower is completely determined by the rules. So the number of legal configurations is equal to the <em>n</em>th power of 3. You can compare this to the solution to the classic problem, which (including the start and finish) goes through a number of configurations equal to the <em>n</em>th power of 2. So with one disk, you go through 2 of the 3 configurations in the course of solving the problem. But with more disks, there are more and more unreached configurations, and the number grows exponentially. There’s a lot of space here for interesting things to happen.</p><p>We can build an algorithm for solving such an arbitrary instance of the Towers of Hanoi.</p><ol><li>If the largest disk is already on the right tower, ignore it and start these instructions over considering only the smaller disks.</li><li>Run this same algorithm to move the smaller disks to the auxiliary tower.</li><li>Move the largest disk to the target tower.</li><li>Run this same algorithm to move the smaller disks to the target tower.</li></ol><p>A little thought should show you that all of these moves are necessary, since you can’t move the largest disk if there are any smaller disks on <em>either</em> the pole you move it from or the pole you move it to. This looks much like the algorithm for solving the classic problem, except for step 1. In some cases a disk may already be in the location you want to move it to. In that case, there’s no need to move it. Indeed, this algorithm proves that the classic problem is a worst-case scenario, because in the classic problem, step 1 will never apply, so you can never skip steps.</p><p>The Haskell code for this is pretty simple:</p><pre>solve = go 3<br>  where<br>    go _ [] = []<br>    go i (n : ns)<br>      | n /= i = clear ++ [(1, i)] ++ stack<br>      | otherwise = first (+ 1) &lt;$&gt; go i ns<br>      where<br>        aux = 6 - n - i<br>        clear = first (+ 1) &lt;$&gt; go aux ns<br>        stack = first (+ 1) &lt;$&gt; go i ((const aux) &lt;$&gt; ns)</pre><p>Having a computational implementation of a solver, we can start to ask more problems. For example, how many moves does it take, <em>on average</em>, to solve a problem chosen uniformly from all possible configurations. The answer is surprisingly clean: exactly 2/3 of the moves it takes to solve the classic problem. Is that surprising? A little at first… but not really, since there’s a 2/3 chance that each disk would need to be moved onto the target tower.</p><p>That’s all I have. My point here, I think, is that the Towers of Hanoi, despite being very well known, presents some additional questions beyond just those you’ll typically see. Many other math puzzles behave similarly, and it’s always a good idea to ask yourself is you see any other interesting phenomena worth investigating.</p><img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=db22d09da027" width="1"></div>
    </content>
    <updated>2021-06-30T12:16:48Z</updated>
    <published>2021-06-30T05:56:02Z</published>
    <category term="mathematics"/>
    <author>
      <name>Chris Smith</name>
    </author>
    <source>
      <id>https://medium.com/@cdsmithus?source=rss-18bd5acaea78------2</id>
      <logo>https://cdn-images-1.medium.com/fit/c/150/150/1*rU9ddF_bkph8Qg3jip7vfw.jpeg</logo>
      <link href="https://medium.com/@cdsmithus?source=rss-18bd5acaea78------2" rel="alternate" type="text/html">
      <link href="https://medium.com/@cdsmithus/feed" rel="self" type="application/rss+xml">
      <link href="http://medium.superfeedr.com" rel="hub" type="text/html">
      <subtitle>Stories by Chris Smith on Medium</subtitle>
      <title>Stories by Chris Smith on Medium</title>
      <updated>2021-09-01T07:52:35Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://medium.com/p/cc0ece3c8c92</id>
    <link href="https://cdsmithus.medium.com/announcing-hmock-0-3-cc0ece3c8c92?source=rss-18bd5acaea78------2" rel="alternate" type="text/html">
    <title>Announcing HMock 0.3</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I’ve just released <a href="https://hackage.haskell.org/package/HMock-0.3.0.0">HMock 0.3</a> to Hackage. See <a href="https://itnext.io/hmock-first-rate-mocks-in-haskell-e59d7c3b066c">the original announcement</a> for more details on the project.</p><p>Highlights of this release include:</p><ul><li>You can now use the WholeMethodMatcher type in an expectation to write a custom predicate that looks at more than one argument at a time when deciding whether to match a method call.</li><li>You can now add side-effects to methods using whenever. You should prefer to avoid this and use expectations instead, since if you’re not careful side-effects can accidentally match method calls that you weren’t looking for. But occasionally this can be very useful.</li><li>You can now mock methods with a polymorphic return type. There must be a Typeable constraint on the return type for this to work.</li></ul><p>This is still classified as a preview release, as I’m planning large breaking changes in order to integrate with effect systems and API layers, such as polysemy, fused-effects, servant, and haxl. You can safely use HMock as long as you add an upper bound on the second component of the version number.</p><img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=cc0ece3c8c92" width="1"></div>
    </content>
    <updated>2021-06-30T05:40:07Z</updated>
    <published>2021-06-30T05:37:44Z</published>
    <category term="mocking"/>
    <category term="haskell"/>
    <author>
      <name>Chris Smith</name>
    </author>
    <source>
      <id>https://medium.com/@cdsmithus?source=rss-18bd5acaea78------2</id>
      <logo>https://cdn-images-1.medium.com/fit/c/150/150/1*rU9ddF_bkph8Qg3jip7vfw.jpeg</logo>
      <link href="https://medium.com/@cdsmithus?source=rss-18bd5acaea78------2" rel="alternate" type="text/html">
      <link href="https://medium.com/@cdsmithus/feed" rel="self" type="application/rss+xml">
      <link href="http://medium.superfeedr.com" rel="hub" type="text/html">
      <subtitle>Stories by Chris Smith on Medium</subtitle>
      <title>Stories by Chris Smith on Medium</title>
      <updated>2021-09-01T07:52:35Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://magnus.therning.org/2021-06-27-a-first-look-at-hmock.html</id>
    <link href="https://magnus.therning.org/2021-06-27-a-first-look-at-hmock.html" rel="alternate" type="text/html">
    <title>A first look at HMock</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>
The other day I found Chris Smith's <a href="https://itnext.io/hmock-first-rate-mocks-in-haskell-e59d7c3b066c">HMock: First Rate Mocks in Haskell</a> (<a href="https://hackage.haskell.org/package/HMock">link to
hackage</a>) and thought it could be nice see if it can clear up some of the tests I
have in a few of the Haskell projects at work. All the projects follow the
pattern of defining custom monads for effects (something like final tagless)
with instances implemented on a stack of monads from MTL. It's a pretty standard
thing in Haskell I'd say, especially since the monad stack very often ends up
being <code>ReaderT MyConfig IO</code>.
</p>

<p>
I decided to try it first on a single such custom monad, one for making HTTP
requests:
</p>

<div class="org-src-container">
<pre class="src src-haskell"><span class="org-haskell-keyword">class</span> <span class="org-haskell-type">Monad</span> m <span class="org-haskell-operator">=&gt;</span> <span class="org-haskell-type">MonadHttpClient</span> m <span class="org-haskell-keyword">where</span>
  mHttpGet <span class="org-haskell-operator">::</span> <span class="org-haskell-type">String</span> <span class="org-haskell-operator">-&gt;</span> m <span class="org-rainbow-delimiters-depth-1">(</span><span class="org-haskell-type">Status</span>, <span class="org-haskell-type">ByteString</span><span class="org-rainbow-delimiters-depth-1">)</span>
  mHttpPost <span class="org-haskell-operator">::</span> <span class="org-rainbow-delimiters-depth-1">(</span><span class="org-haskell-type">Typeable</span> a, <span class="org-haskell-type">Postable</span> a<span class="org-rainbow-delimiters-depth-1">)</span> <span class="org-haskell-operator">=&gt;</span> <span class="org-haskell-type">String</span> <span class="org-haskell-operator">-&gt;</span> a <span class="org-haskell-operator">-&gt;</span> m <span class="org-rainbow-delimiters-depth-1">(</span><span class="org-haskell-type">Status</span>, <span class="org-haskell-type">ByteString</span><span class="org-rainbow-delimiters-depth-1">)</span>
</pre>
</div>

<p>
Yes, the underlying implementation uses <a href="https://hackage.haskell.org/package/wreq">wreq</a>, but I'm not too bothered by that
shining through. Also, initially I didn't have that <code>Typeable a</code> constraint on
<code>mHttpPost</code>, it got added after a short <a href="https://github.com/cdsmith/HMock/issues/1">exchange about <code>KnownSymbol</code></a> with Chris.
</p>

<p>
To dip a toe in the water I thought I'd simply write tests for the two effects
themselves. First of all there's an impressive list of extensions needed, and
then the monad needs to be made mockable:
</p>

<div class="org-src-container">
<pre class="src src-haskell"><span class="org-haskell-pragma">{-# LANGUAGE DataKinds #-}</span>
<span class="org-haskell-pragma">{-# LANGUAGE FlexibleInstances #-}</span>
<span class="org-haskell-pragma">{-# LANGUAGE GADTs #-}</span>
<span class="org-haskell-pragma">{-# LANGUAGE ImportQualifiedPost #-}</span>
<span class="org-haskell-pragma">{-# LANGUAGE MultiParamTypeClasses #-}</span>
<span class="org-haskell-pragma">{-# LANGUAGE RankNTypes #-}</span>
<span class="org-haskell-pragma">{-# LANGUAGE StandaloneDeriving #-}</span>
<span class="org-haskell-pragma">{-# LANGUAGE TemplateHaskell #-}</span>
<span class="org-haskell-pragma">{-# LANGUAGE TypeApplications #-}</span>
<span class="org-haskell-pragma">{-# LANGUAGE TypeFamilies #-}</span>

<span class="org-haskell-definition">makeMockable</span> ''<span class="org-haskell-constructor">MonadHttpClient</span>
</pre>
</div>

<p>
After that, writing a test with HMock for <code>mHttpGet</code> was fairly straight
forward, I could simply follow the examples in the package's documentation. I'm
using <a href="https://hackage.haskell.org/package/tasty">tasty</a> for organising the tests though:
</p>

<div class="org-src-container">
<pre class="src src-haskell"><span class="org-haskell-definition">httpGetTest</span> <span class="org-haskell-operator">::</span> <span class="org-haskell-type">TestTree</span>
<span class="org-haskell-definition">httpGetTest</span> <span class="org-haskell-operator">=</span> testCase <span class="org-string">&quot;Get&quot;</span> <span class="org-haskell-operator">$</span> <span class="org-haskell-keyword">do</span>
  <span class="org-rainbow-delimiters-depth-1">(</span>s, b<span class="org-rainbow-delimiters-depth-1">)</span> <span class="org-haskell-operator">&lt;-</span> runMockT <span class="org-haskell-operator">$</span> <span class="org-haskell-keyword">do</span>
    expect <span class="org-haskell-operator">$</span> <span class="org-haskell-constructor">MHttpGet</span> <span class="org-string">&quot;url&quot;</span> <span class="org-haskell-operator">|-&gt;</span> <span class="org-rainbow-delimiters-depth-1">(</span>status200, <span class="org-string">&quot;result&quot;</span><span class="org-rainbow-delimiters-depth-1">)</span>
    mHttpGet <span class="org-string">&quot;url&quot;</span>
  status200 <span class="org-haskell-operator">@=?</span> s
  <span class="org-string">&quot;result&quot;</span> <span class="org-haskell-operator">@=?</span> b
</pre>
</div>

<p>
The effect for sending a <code>POST</code> request was slightly trickier, as can be seen in
the issue linked above, but with some help I came up with the following:
</p>

<div class="org-src-container">
<pre class="src src-haskell"><span class="org-haskell-definition">httpPostTest</span> <span class="org-haskell-operator">::</span> <span class="org-haskell-type">TestTree</span>
<span class="org-haskell-definition">httpPostTest</span> <span class="org-haskell-operator">=</span> testCase <span class="org-string">&quot;Post&quot;</span> <span class="org-haskell-operator">$</span> <span class="org-haskell-keyword">do</span>
  <span class="org-rainbow-delimiters-depth-1">(</span>s, b<span class="org-rainbow-delimiters-depth-1">)</span> <span class="org-haskell-operator">&lt;-</span> runMockT <span class="org-haskell-operator">$</span> <span class="org-haskell-keyword">do</span>
    expect <span class="org-haskell-operator">$</span> <span class="org-haskell-constructor">MHttpPost_</span> <span class="org-rainbow-delimiters-depth-1">(</span>eq <span class="org-string">&quot;url&quot;</span><span class="org-rainbow-delimiters-depth-1">)</span> <span class="org-rainbow-delimiters-depth-1">(</span>typed <span class="org-haskell-operator">@</span><span class="org-haskell-constructor">ByteString</span> anything<span class="org-rainbow-delimiters-depth-1">)</span> <span class="org-haskell-operator">|-&gt;</span> <span class="org-rainbow-delimiters-depth-1">(</span>status201, <span class="org-string">&quot;result&quot;</span><span class="org-rainbow-delimiters-depth-1">)</span>
    mHttpPost <span class="org-string">&quot;url&quot;</span> <span class="org-rainbow-delimiters-depth-1">(</span><span class="org-string">&quot;hello&quot;</span> <span class="org-haskell-operator">::</span> <span class="org-haskell-type">ByteString</span><span class="org-rainbow-delimiters-depth-1">)</span>
  status201 <span class="org-haskell-operator">@=?</span> s
  <span class="org-string">&quot;result&quot;</span> <span class="org-haskell-operator">@=?</span> b
</pre>
</div>

<div class="outline-2" id="outline-container-org07a2709">
<h2 id="org07a2709">Next step</h2>
<div class="outline-text-2" id="text-org07a2709">
<p>
My hope is that using HMock will remove the need for creating a bunch of test
implementations for the various custom monads for effects<sup><a class="footref" href="https://magnus.therning.org/feed.xml#fn.1" id="fnr.1">1</a></sup> in the projects,
thereby reducing the amount of test code overall. I also suspect that it will
make the tests clearer and easier to read, as the behaviour of the mocks are
closer to the tests using the mocks.
</p>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a class="footnum" href="https://magnus.therning.org/feed.xml#fnr.1" id="fn.1">1</a></sup> <div class="footpara"><p class="footpara">
Basically they could be looked at as hand-written mocks.
</p></div></div>


</div>
</div><div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-haskell.html">haskell</a> <a href="https://magnus.therning.org/tag-testing.html">testing</a> <a href="https://magnus.therning.org/tag-mocks.html">mocks</a> </div></div>
    </summary>
    <updated>2021-06-27T21:14:00Z</updated>
    <published>2021-06-27T21:14:00Z</published>
    <category term="haskell"/>
    <category term="testing"/>
    <category term="mocks"/>
    <source>
      <id>https://magnus.therning.org/</id>
      <author>
        <name>Magnus Therning</name>
      </author>
      <link href="https://magnus.therning.org/" rel="alternate" type="text/html">
      <link href="https://magnus.therning.org/feed.xml" rel="self" type="application/rss+xml">
      <subtitle>Magnus web site</subtitle>
      <title>Magnus web site</title>
      <updated>2021-07-23T14:07:31Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://medium.com/p/49413b5113a1</id>
    <link href="https://cdsmithus.medium.com/coming-soon-virtual-haskell-cohack-49413b5113a1?source=rss-18bd5acaea78------2" rel="alternate" type="text/html">
    <title>Coming Soon: Virtual Haskell Cohack</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Before COVID-19 left its mark on the world, a group of us met one a month in New York for the “Haskell Cohack”, hacking together on Haskell programming projects of various forms. We had people there to learn Haskell or teach it, to talk about category theory, to work on core libraries, or just to fiddle around with programming problems like Project Euler or Advent of Code. It was great fun! But then this virus shut down the city, and we have missed our monthly meeting ever since.</p><p>I’m now reviving the Cohack, but in virtual form. Our first session will be Saturday, July 10, and details are at <a href="https://www.meetup.com/NY-Haskell/events/279067287/">https://www.meetup.com/NY-Haskell/events/279067287/</a>. I hope you’ll consider attending. Since it’s virtual, you don’t even need to be in New York to come.</p><p>Here’s what you can expect:</p><ul><li>Meet fellow Haskellers in small-group intro sessions. I think introductions work best in small groups, so I plan to split us up into small groups (4 to 5 people each) to meet each other. If you attend more of the monthly Cohack events, you can meet even more people.</li><li>Collaborate on projects. The word “project” is pretty flexible. If you want to learn or teach Haskell, please come! At the other extreme, you’re welcome to pop in and ask for help hacking on GHC or other advanced projects. You can work one-on-one with someone pair programming, or join a group discussion. If you want collaborators for a project, topic, or discussion of your choice, we’ll have some time dedicated to elevator pitches for projects before the work time starts.</li><li>Hear some interesting lightning talks from fellow attendees, focusing on what they worked on during the event, or on any other interesting Haskell topic they would like to share about.</li></ul><p>I’m basing this around Zoom’s “breakout rooms” feature, meaning it will be easy to organize yourselves into groups of your choice. I’ll add rooms for projects that give pitches, but also leave some generic rooms around for ad hoc organizing.</p><p>There are very few rules. You can work on whatever you want, alone or with others, whether or not it’s open source. You don’t even have to work on Haskell; Haskell-adjacent languages like Elm, Idris, Coq, Agda, ML, etc. are completely welcome. The only real rule I’ll enforce is to be respectful and inclusive to others.</p><p>I hope to see you (virtually) there. Please RSVP on the meetup link above, so that I know who’s coming.</p><img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=49413b5113a1" width="1"></div>
    </content>
    <updated>2021-06-26T02:38:46Z</updated>
    <published>2021-06-26T02:38:46Z</published>
    <author>
      <name>Chris Smith</name>
    </author>
    <source>
      <id>https://medium.com/@cdsmithus?source=rss-18bd5acaea78------2</id>
      <logo>https://cdn-images-1.medium.com/fit/c/150/150/1*rU9ddF_bkph8Qg3jip7vfw.jpeg</logo>
      <link href="https://medium.com/@cdsmithus?source=rss-18bd5acaea78------2" rel="alternate" type="text/html">
      <link href="https://medium.com/@cdsmithus/feed" rel="self" type="application/rss+xml">
      <link href="http://medium.superfeedr.com" rel="hub" type="text/html">
      <subtitle>Stories by Chris Smith on Medium</subtitle>
      <title>Stories by Chris Smith on Medium</title>
      <updated>2021-09-01T07:52:35Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://byorgey.wordpress.com/?p=2379</id>
    <link href="https://byorgey.wordpress.com/2021/06/24/types-versus-sets-in-math-and-programming-languages/" rel="alternate" type="text/html">
    <link href="https://byorgey.wordpress.com/2021/06/24/types-versus-sets-in-math-and-programming-languages/#comments" rel="replies" type="text/html">
    <link href="https://byorgey.wordpress.com/2021/06/24/types-versus-sets-in-math-and-programming-languages/feed/atom/" rel="replies" type="application/atom+xml">
    <title xml:lang="en">Types versus sets in math and programming languages</title>
    <summary type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml">For several years I have been designing and implementing a functional teaching language especially for use in the context of a Discrete Mathematics course. The idea is for students to be exposed to some functional and statically-typed programming early in … <a href="https://byorgey.wordpress.com/2021/06/24/types-versus-sets-in-math-and-programming-languages/">Continue reading <span class="meta-nav">→</span></a></div>
    </summary>
    <content type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p>For several years I have been designing and implementing a <a href="https://github.com/disco-lang/disco/">functional teaching language especially for use in the context of a Discrete Mathematics course</a>. The idea is for students to be exposed to some functional and statically-typed programming early in their computer science education, and to give them a fun and concrete way to see the connections between the concepts they learn in a Discrete Math course and computation. I am <a href="https://cs.wheaton.edu/~tvandrun/dmfp/">not the first to think of combining FP + Discrete Math</a>, but I think there is an opportunity to do it really well with a language designed expressly for the purpose. (And, who am I kidding, designing and implementing a language is just plain fun.)</p>
<p>Of course the language has an expressive static type system, with base types like natural numbers, rationals, Booleans, and Unicode characters, as well as sum and product types, lists, strings, and the ability to define arbitrary recursive types. It also has built-in types and syntax for finite sets. For example,</p>
<pre><code>A : Set ℕ
A = {1, 3, 6}</code></pre>
<p>(Incidentally, I will be using Unicode syntax since it looks nice, but there are also ASCII equivalents for everything.) Sets support the usual operations like union, intersection, and difference, as well as set comprehension notation. The intention is that this will provide a rich playground for students to play around with the basic set theory that is typically taught in a discrete math class.</p>
<h2 id="but-wait">But wait…</h2>
<p>Hopefully the above all seems pretty normal if you are used to programming in a statically typed language. Unfortunately, there is something here that I suspect is going to be deeply confusing to students. I am so used to it that it took me a long time to realize what was wrong; maybe you have not realized it either. (Well, perhaps I gave it away with the title of the blog post…)</p>
<p>In a math class, we typically tell students that <img alt="\mathbb{N}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cmathbb%7BN%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"> is a <em>set</em>. But in Disco, <code>ℕ</code> is a <em>type</em> and something like <code>{1,2,3}</code> is a set. If you have been told that <img alt="\mathbb{N}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cmathbb%7BN%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"> is a set, the distinction is going to seem very weird and artificial to you. For example, right now in Disco, you can ask whether <code>{1,2}</code> is a subset of <code>{1,2,3}</code>:</p>
<pre><code>Disco&gt; {1,2} ⊆ {1,2,3}
true</code></pre>
<p>But if you try to ask whether <code>{1,2}</code> is a subset of <code>ℕ</code>, you get a syntax error:</p>
<pre><code>Disco&gt; {1,2} ⊆ ℕ
1:10:
  |
1 | {1,2} ⊆ ℕ
  |          ^
keyword &quot;ℕ&quot; cannot be used as an identifier</code></pre>
<p>Now, we could try various things to improve this particular example—at the very least, make it fail more gracefully. But the fundamental question remains: what is the distinction between types and sets, and why is it important? If it’s not important, we should get rid of it; if it is important, then I need to be able to explain it to students!</p>
<p>We could try to completely get rid of the distinction, but this seems like it would lead directly to a dependent type system and refinement types. Refinement types <a href="https://ucsd-progsys.github.io/liquidhaskell-blog/">are super cool</a> but I really don’t think I want to go there (Disco’s type system is <a href="https://github.com/disco-lang/disco/issues/207">already complicated enough</a>).</p>
<p>However, I think there actually is an important distinction; this blog post is my first attempt at crystallizing my thoughts on the distinction and how I plan to explain it to students.</p>
<h2 id="types-vs-sets">Types vs sets</h2>
<p>So what is the difference between sets and types? The slogan is that types are <em>intensional</em>, whereas sets are <em>extensional</em>. (I won’t actually use those words with my students.) That is:</p>
<ul>
<li>Sets are characterized by the <img alt="\in" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cin&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"> relation: we can <em>ask</em> which items are elements of a set and which are not.</li>
<li>Types, on the other hand, are characterized by how elements of the type are built: we can <em>construct</em> elements of a type (and <em>deconstruct</em> them) in certain ways specific to the type.</li>
</ul>
<p>This seems kind of symmetric, but it is not. You can’t ask whether a thing is an element of a set if you don’t know how to even make or talk about any things in the first place. So types are prior to sets: types provide a universe of values, constructed in orderly ways, that we can work with; only then can we start picking out certain values to place them in a set.</p>
<p>Of course, this all presupposes some kind of type theory as foundational. Of course I am aware that one can instead take axiomatic set theory as a foundation and build everything up from the empty set. But I’m building a typed functional programming language, so of course I’m taking type theory as foundational! More importantly, however, it’s what almost every working mathematician does <em>in practice</em>. No one actually works or thinks in terms of axiomatic set theory (besides set theorists). Even in a typical math class, some sets are special. Before we can talk about the set <img alt="{1,3,6}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B1%2C3%2C6%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002">, we have to introduce the special set <img alt="\mathbb{N}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cmathbb%7BN%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"> so we know what <img alt="1" class="latex" src="https://s0.wp.com/latex.php?latex=1&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002">, <img alt="3" class="latex" src="https://s0.wp.com/latex.php?latex=3&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002">, and <img alt="6" class="latex" src="https://s0.wp.com/latex.php?latex=6&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"> are. Before we can talk about the set <img alt="{(1,1), (3,5), (6,8)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%281%2C1%29%2C+%283%2C5%29%2C+%286%2C8%29%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"> we have to introduce the special Cartesian product operation on sets so we know what tuples are. And so on. We can think of types as a <em>language</em> for describing this prior class of special sets.</p>
<h2 id="explaining-things-to-students">Explaining things to students</h2>
<p>So what will I actually say to my students? First of all, when introducing the language, I will tell them about various built-in primitive types like naturals, rationals, booleans, and characters. I won’t make a big deal about it, and I don’t think I will need to: for the most part they will have already seen a language like Python or Java with types for primitive values.</p>
<p>When we get to talking about sets, however (usually the second unit, after starting with propositional logic), we will define sets as collections of values, and I will explicitly point out the similarity to types. I will tell them that types are <em>special built-in sets</em> with rules for building their elements. We will go on to talk about disjoint union and Cartesian product, and practice building elements of sum and product types. (When we later get to recursion, they will therefore have the tools they need to start building recursive types such as lists and trees.)</p>
<p>The other thing to mention will be the way that when we write the type of a set, as in, <code>Set ℕ</code>, we have to write down the type of the elements—in other words, the <em>universe</em>, or ambient set from which the elements are chosen. When introducing set theory, traditionally one mentions universe sets only when talking about the set complement operation; but the fact is that mathematicians always have some universe set in mind when describing a given set.</p>
<p>Now, coming back to the example of <code>{1,2} ⊆ ℕ</code>, it would still be confusing for students if this is a syntax error, and I have some ideas about how to make it work. Briefly, the idea is to allow types to be used in expressions (but not the other way around!), with <code>T : Set T</code>. If I tell them that types are special sets, then logically they will expect to be able to use them as such! However, this is an extremely nontrivial change: it means that Disco would now be able to represent <em>infinite</em> sets, requiring sets to be internally represented via a deep embedding, rather than simply storing their elements (as is currently the case). For example, <code>2 ∈ (ℕ \ {3,5})</code> should evaluate to <code>true</code>, but we obviously can’t just enumerate all the elements of <code>ℕ \ {3,5}</code> since there are infinitely many. More on this in a future post, perhaps!</p></div>
    </content>
    <updated>2021-06-24T11:34:50Z</updated>
    <published>2021-06-24T11:34:50Z</published>
    <category scheme="https://byorgey.wordpress.com" term="projects"/>
    <category scheme="https://byorgey.wordpress.com" term="teaching"/>
    <category scheme="https://byorgey.wordpress.com" term="foundations"/>
    <category scheme="https://byorgey.wordpress.com" term="language"/>
    <category scheme="https://byorgey.wordpress.com" term="math"/>
    <category scheme="https://byorgey.wordpress.com" term="pedagogy"/>
    <category scheme="https://byorgey.wordpress.com" term="programming"/>
    <category scheme="https://byorgey.wordpress.com" term="sets"/>
    <category scheme="https://byorgey.wordpress.com" term="types"/>
    <author>
      <name>Brent</name>
      <uri>http://ozark.hendrix.edu/~yorgey/</uri>
    </author>
    <source>
      <id>http://byorgey.wordpress.com/feed/atom/</id>
      <link href="https://byorgey.wordpress.com" rel="alternate" type="text/html">
      <link href="https://byorgey.wordpress.com/feed/atom/" rel="self" type="application/atom+xml">
      <link href="https://byorgey.wordpress.com/osd.xml" rel="search" title="blog :: Brent -&gt; [String]" type="application/opensearchdescription+xml">
      <link href="https://s1.wp.com/opensearch.xml" rel="search" title="WordPress.com" type="application/opensearchdescription+xml">
      <link href="https://byorgey.wordpress.com/?pushpress=hub" rel="hub" type="text/html">
      <title xml:lang="en">blog :: Brent -&gt; [String]</title>
      <updated>2021-08-11T21:51:58Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://izbicki.me/blog/teaching-open-source-in-north-korea.html</id>
    <link href="http://izbicki.me/blog/teaching-open-source-in-north-korea.html" rel="alternate" type="text/html">
    <title>Teaching Open Source Software in North Korea</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><h1>Teaching Open Source Software in North Korea

</h1>
<div class="info">
    
        posted on 2021-06-24
    
    
    
</div>
<p>In 2016, I went to North Korea to teach a class of masters students how to contribute to <a href="https://en.wikipedia.org/wiki/Open_source">open source software</a>. Here’s an image from one of my lectures:</p>
<div class="figure">
<img alt="Mike Izbicki teaching open source software in North Korea" src="https://izbicki.me/blog/category/img/pust/icopust-me3.jpg">
<p class="caption">Mike Izbicki teaching open source software in North Korea</p>
</div>

<p>As part of the class, students were required to submit patches to a project of their choosing, and I want to share the stories of how two of these patches landed into the popular machine learning libraries <a href="https://mlpack.org">mlpack</a> and <a href="https://vowpalwabbit.org">vowpal wabbit</a>. I believe these examples highlight how academic collaboration between North Koreans and Americans can benefit ordinary citizens of both countries and improve diplomatic relations.</p>
<h2 id="the-mlpack-patch">The mlpack patch</h2>
<p>One of the students was working on a “vision-based vehicle detection system” for his masters thesis. In this problem, we are given a live feed from a video camera mounted near a road, and the goal is to count the number of cars and trucks that pass by. This is a fairly standard machine vision problem that students around the world regularly implement, and the output looks something like:</p>
<div class="figure">
<img src="https://izbicki.me/blog/category/img/pust/vehicle-detection.gif">

</div>
<p>(This image unfortunately isn’t from the student’s project, but is instead taken from <a class="uri" href="https://github.com/ahmetozlu/vehicle_counting_tensorflow">https://github.com/ahmetozlu/vehicle_counting_tensorflow</a>.)</p>
<p>Apparently, the North Korean department of transportation had directed the student to work on this problem because traffic in Pyongyang was growing rapidly. Visitors to Pyongyang in the 1990s would often remark about the lack of cars on the roads, but these days the city is <a href="https://www.pinterest.com/pin/139893132146429424/">bustling with traffic</a>. I guess <a href="https://www.youngpioneertours.com/north-korean-traffic-girls/">Pyongyang’s famous Traffic Girls</a> could use some automated help keeping traffic flowing.</p>
<p>Graduate students in North Korea have unfiltered internet access, and the student had used this access to download the mlpack machine learning library in order to implement their vehicle detection system. They chose to use mlpack because it was written in C++, and that was the main language they had been taught in their undergrad university courses. But they were encountering a very serious problem: their computer was old and did not have enough memory to compile the library!</p>
<p>After an hour or so of debugging with the student, we narrowed down the problem to mlpack’s use of C++ templates. The mlpack library uses templates extensively throughout its code in order to enable generic programming with no runtime overhead. This use of templates has earned mlpack a well-deserved reputation for running models <a href="https://www.mlpack.org/benchmark.html">very fast with low memory overhead</a>, but the downside is that compilation is slow and memory intensive. At the time, compilation consumed a peak of about 2GB of RAM, but the North Korean student’s laptop only had 1GB of RAM available.</p>
<p>The student finally managed to get mlpack to compile by greatly optimizing the compilation procedure. The original code contained hundreds of unnecessary <code>#include</code> statements spread across the project, and the fix was simply to remove this dead code. You can view the <a href="https://github.com/mlpack/mlpack/commit/5bb2f245d7ad5de70384be6b3486690b417d854c">actual commit on github</a>. The fix sped up compilation by about 25% and more than halved memory consumption. The tens of thousands of people and companies who have used mlpack since then are all benefiting from this North Korean student’s excellent work.</p>
<h2 id="the-vowpal-wabbit-patch">The vowpal wabbit patch</h2>
<p>Many of the masters students in my class had not yet selected a thesis topic, and so I encouraged one student to work on twitter sentiment analysis. In this problem, we are given a tweet like</p>
<center>
<a href="https://twitter.com/senatormenendez/status/1006551464406323201?lang=ca"> <img alt="https://twitter.com/senatormenendez/status/1006551464406323201?lang=ca" src="https://izbicki.me/blog/category/img/pust/tweet.png"> </a>
</center>
<p>and we must classify the tweet as having either positive or negative sentiment towards a topic. For example, the tweet above has a negative sentiment towards the <a href="https://en.wikipedia.org/wiki/2018_North_Korea%E2%80%93United_States_Singapore_Summit">2018 Singapore Summit between President Trump and Chairman Kim Jong-Un</a>. By analyzing thousands (or millions/billions) of tweets this way, we can determine how different communities feel about a particular topic. Again, this is an entirely routine task implemented by students around the world. But for the North Korean students, this task was remarkable.</p>
<p>The students had all heard of twitter before, but they didn’t use it. Even though their computers had a direct, unfiltered connection to the internet, they were not allowed to create accounts on social media websites. The reason—as it was explained to me—is because the United States controls most internet infrastructure (including websites like Twitter), and through programs like the NSA’s <a href="https://en.wikipedia.org/wiki/PRISM_(surveillance_program)">PRISM</a> and the Army’s <a href="https://www.lawfareblog.com/integration-psychological-operations-cyber-operations">Cyber Command</a> is spying on and manipulating social media.  The United States and North Korea never signed a peace treaty after the Korean War, and so North Koreans still very much worry about being attacked by the US. Not creating social media accounts was one of the “defenses” that these North Korean students were required to use in order to limit the effect of potential “American cyberattacks”. Fortunately, studying twitter is one of my research areas, and I had brought some reasonably sized data sets with me for the students to analyze.</p>
<p>What’s remarkable about this project—as one of my North Korean colleagues liked to remind me—is that it was the first time a North Korean student had ever analyzed twitter data. And analyzing twitter data would soon have geopolitical importance: Less than a year after this project was started, Donald Trump was elected president of the United States, and twitter became one of the primary tools that his administration would use to announce its foreign policy to the world. Fortunately, by the time Trump gave twitter this pseudo-official status, at least a small number of North Koreans had experience analyzing twitter data. They could use this experience to better understand both Trump’s tweets and the responses sent by millions of Americans. The North Korean government now recognizes the importance of using social media to understand American policy, and has recently created a <a href="https://www.dailynk.com/english/north-korea-forms-new-foreign-ministry-organization-focused-analyzing-us-intentions/">new foreign ministry dedicated to analyzing US intentions</a> through social media and other public information sources. And this is great news for both countries! The United States is built on a system of transparency because we actively want everyone—including North Koreans—to understand how our democracy functions and how to best negotiate with us to achieve shared goals.</p>
<p>This interaction between scientific exchanges and diplomacy is called <a href="https://www.aaas.org/programs/center-science-diplomacy">science diplomacy</a>, and it was <a href="https://americandiplomacy.web.unc.edu/2019/11/how-u-s-soviet-scientific-and-technical-exchanges-helped-end-the-cold-war/">instrumental in helping the US and Soviet Union negotiate successful limitations on nuclear weapons systems</a> during the cold war. I believe my work teaching open source software in North Korea helps demonstrate that this science diplomacy model can also be successfully applied to US-North Korean negotiations as well.</p>
<p>Now back to the student’s open source contribution. I recommended that the student use <a href="https://vowpalwabbit.org/">vowpal wabbit</a> to perform the analysis, since this is a great tool for analyzing large scale text datasets. The student successfully downloaded the code, compiled it, and analyzed the sentiment of a few thousand tweets. In this case, the code worked fine on the student’s computer without modification. But for the class on open source software, the student was still required to submit a patch.</p>
<p>He found an <a href="https://github.com/VowpalWabbit/vowpal_wabbit/issues/919">open issue</a> on github asking for the ability to correct how the intercept term interacts with L2 regularization when training linear models, and submitted a <a href="https://github.com/VowpalWabbit/vowpal_wabbit/pull/1151">patch</a> to add this behavior. (The pull requests for both projects were submitted from my github account since github is considered social media, and the North Korean students weren’t allowed to create social media accounts.) A <a href="https://github.com/VowpalWabbit/vowpal_wabbit/issues/1729">bug</a> was later found in this patch, and a <a href="https://github.com/VowpalWabbit/vowpal_wabbit/pull/1794">subsequent patch</a> was added to fix the issue. This back-and-forth is exactly how open source software development is supposed to work, and I find it amazing that open source software lets ordinary people from around the world find common purpose building awesome software even across seemingly irreconcilable political differences.</p>
<h2 id="the-future-of-open-source-in-north-korea">The future of open source in North Korea</h2>
<p>AFAIK, the patches submitted for this class were the first ever open source contributions to come from North Korea; unfortunately, they were also the last.</p>
<p>I had organized another trip to North Korea the following year (2017) that would have brought several other instructors to teach about open source software, but President Trump <a href="https://www.bbc.com/news/world-asia-40680500">banned Americans from travelling to North Korea</a>. So I and the other instructors could no longer meet with North Korean students, and there was no one to teach them how to contribute to open source or encourage them to do so.</p>

<p>President Biden has recently announced his policy of <a href="https://www.reuters.com/world/asia-pacific/biden-administration-has-completed-north-korea-policy-review-white-house-2021-04-30/">“practical diplomacy”</a> with North Korea. But the details of this policy are not yet clear, and the travel ban remains in effect. As long as this policy remains in effect, I and other American instructors will not be able to help North Koreans contribute to open source. So Americans will not benefit from North Koreans fixing bugs in our code, and the science diplomacy that effectively reduced tensions between the US and Soviet Union cannot be used as a tool to reduce tensions between the US and North Korea. </p></div>
    </summary>
    <updated>2021-06-24T00:00:00Z</updated>
    <published>2021-06-24T00:00:00Z</published>
    <source>
      <id>http://izbicki.me/feed.rss</id>
      <author>
        <name>Mike Izbicki</name>
        <email>mike@izbicki.me</email>
      </author>
      <link href="http://izbicki.me/feed.rss" rel="self" type="application/atom+xml">
      <link href="http://izbicki.me" rel="alternate" type="text/html">
      <title>Mike Izbicki's blog posts</title>
      <updated>2021-06-24T00:00:00Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://doisinkidney.com/posts/2021-06-21-icfp-paper.html</id>
    <link href="https://doisinkidney.com/posts/2021-06-21-icfp-paper.html" rel="alternate" type="text/html">
    <title>ICFP Paperâ€”Algebras for Weighted Search</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div class="info">
    Posted on June 21, 2021
</div>
<div class="info">
    
</div>
<div class="info">
    
        Tags: <a href="https://doisinkidney.com/tags/Haskell.html" title="All pages tagged 'Haskell'.">Haskell</a>, <a href="https://doisinkidney.com/tags/Agda.html" title="All pages tagged 'Agda'.">Agda</a>
    
</div>

<p>The paper “Algebras for Weighted Search” has just been accepted unconditionally to ICFP. I wrote it with my supervisor, <a href="http://zenzike.com/">Nicolas Wu</a>, and it covers a lot of the topics I’ve written about on this blog (including hyperfunctions and breadth-first traversals).</p>
<p>The preprint is available <a href="https://doisinkidney.com/../pdfs/algebras-for-weighted-search.pdf">here</a>.</p></div>
    </summary>
    <updated>2021-06-21T00:00:00Z</updated>
    <published>2021-06-21T00:00:00Z</published>
    <author>
      <name>Donnacha Oisín Kidney</name>
    </author>
    <source>
      <id>https://doisinkidney.com</id>
      <link href="https://doisinkidney.com" rel="alternate" type="text/html">
      <link href="https://doisinkidney.com/rss.xml" rel="self" type="application/rss+xml">
      <subtitle>Mainly writing about programming</subtitle>
      <title>Donnacha Oisín Kidney's Blog</title>
      <updated>2021-08-29T00:00:00Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-9757377.post-4963372818796502038</id>
    <link href="https://apply.workable.com/io-global/j/DC4A9703F1/" rel="related" title="The Plutus team is hiring" type="text/html">
    <link href="https://wadler.blogspot.com/feeds/4963372818796502038/comments/default" rel="replies" title="Post Comments" type="application/atom+xml">
    <link href="https://www.blogger.com/comment.g?blogID=9757377&amp;postID=4963372818796502038" rel="replies" title="0 Comments" type="text/html">
    <link href="https://www.blogger.com/feeds/9757377/posts/default/4963372818796502038" rel="edit" type="application/atom+xml">
    <link href="https://www.blogger.com/feeds/9757377/posts/default/4963372818796502038" rel="self" type="application/atom+xml">
    <link href="https://wadler.blogspot.com/2021/02/the-plutus-team-is-hiring.html" rel="alternate" title="The Plutus team is hiring" type="text/html">
    <title>The Plutus team is hiring</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div><div class="separator" style="clear: both; text-align: center;"><a href="https://lh3.googleusercontent.com/-PN3eS7OX20U/YDe8UjIDNKI/AAAAAAABpec/O50is13HqOYyv0ScqobZYiXmxVXnoaxRgCLcBGAsYHQ/image.png" style="margin-left: 1em; margin-right: 1em;"><img alt="" height="549" src="https://lh3.googleusercontent.com/-PN3eS7OX20U/YDe8UjIDNKI/AAAAAAABpec/O50is13HqOYyv0ScqobZYiXmxVXnoaxRgCLcBGAsYHQ/w640-h549/image.png" width="640"></a></div><br></div><div><br></div><div>IOG, formerly known as IOHK, is hiring two new members for the Plutus team, currently led by Manuel Chakravarty and Michael Peyton-Jones. One of the posts is for a new leader, but don't worry, Manuel and Michael are both staying; the other post is someone to work on developer relations and communications. People working with the Plutus team include myself, Simon Thompson, and John Hughes. Plutus is a library for Haskell that provides smart contracts for Cardano. Ada, the coin of Cardano, is (as of last week) the fourth-largest cryptocurrency by market capitalisation, at USD$32 billion.<br></div><div><br></div><div>Details below. Let me know if you have any questions. </div><div><span style="color: #333e49; font-size: 22px; text-align: center;"><br></span></div><div><div style="text-align: left;"><b style="color: #333e49; font-family: arial; font-size: 22px; text-align: center;">Software Engineering Lead - Plutus</b></div><div style="text-align: left;"><br></div><div><p>We are searching for a Software Engineer to lead our Plutus team. The Plutus team is building the core of Cardanoâ€™s smart contract functionality on the bedrock of functional programming languages. We are an interdisciplinary team who do original R&amp;D and turn it into production systems.</p><p>In the past few years, the Plutus team has:</p><ul><li style="border: 0px; font: inherit; margin: 0px; padding: 0px; vertical-align: baseline;">Published five peer-reviewed papers with top academic researchers</li><li style="border: 0px; font: inherit; margin: 0px; padding: 0px; vertical-align: baseline;">Designed and implemented three programming languages</li><li style="border: 0px; font: inherit; margin: 0px; padding: 0px; vertical-align: baseline;">Formalized the semantics of two of those languages using Agda</li><li style="border: 0px; font: inherit; margin: 0px; padding: 0px; vertical-align: baseline;">Helped to improve the ability of Agda to generate usable Haskell output</li><li style="border: 0px; font: inherit; margin: 0px; padding: 0px; vertical-align: baseline;">Created novel compilation techniques for data types</li><li style="border: 0px; font: inherit; margin: 0px; padding: 0px; vertical-align: baseline;">Written a GHC proposal, which is now being taken into implementation work</li><li style="border: 0px; font: inherit; margin: 0px; padding: 0px; vertical-align: baseline;">Implemented a compiler for a subset of Haskell as a GHC plug-in</li><li style="border: 0px; font: inherit; margin: 0px; padding: 0px; vertical-align: baseline;">Used statistical modeling to infer evaluation cost models</li><li style="border: 0px; font: inherit; margin: 0px; padding: 0px; vertical-align: baseline;">Participated in the design and implementation of the Cardano ledger extensions to support smart contracts.</li></ul><p>Such a heady and complex mixture of research, development, and design work needs a competent leader to keep it all working well. If that sounds like fun to you, drop us a line!</p><a class="gmail-c-link" href="https://apply.workable.com/io-global/j/DC4A9703F1/" rel="noopener noreferrer" style="background-color: #f8f8f8; font-family: Slack-Lato, appleLogo, sans-serif; font-size: 15px;" target="_blank">https://apply.workable.com/io-global/j/DC4A9703F1/</a></div><div><span style="color: #333e49; font-family: arial; font-size: 22px;"><br></span></div><div><span style="color: #333e49; font-family: arial; font-size: 22px;"><b>Developer Relations Specialist - Plutus</b></span></div><div><span style="color: #333e49; font-family: arial; font-size: 22px;"><br></span></div><div><div class="gmail-job-preview-styles__description--2BkR3" style="background-color: #f9f9f9; border: 0px; font-size: 14px; line-height: inherit; margin: 0px 0px 40px; padding: 0px; vertical-align: baseline;"><div style="border: 0px; font-size: 16px; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: 1.5; margin: 0px 0px 1em; padding: 0px; vertical-align: baseline;"><p style="border: 0px; color: #333e49; font-family: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: 1.5; margin: 0px 0px 1em; padding: 0px; vertical-align: baseline;">The Cardano ecosystem is expanding and software developer interest is increasing rapidly, so we are looking for a Developer Relations Specialist for the Plutus smart contract programming platform. You will help build, nurture and manage new relationships within established blockchain and smart contract development communities, especially Ethereum.</p><p style="border: 0px; color: #333e49; font-family: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: 1.5; margin: 0px 0px 1em; padding: 0px; vertical-align: baseline;">This role will put you at the forefront of an exciting developer ecosystem at a crucial time in its development, winning and onboarding partners, feeding any requirements and proposals back into the business, and helping rapidly expand a healthy, productive Cardano developer base.</p><p style="border: 0px; color: #333e49; font-family: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: 1.5; margin: 0px 0px 1em; padding: 0px; vertical-align: baseline;">To enjoy this role you will be someone who is passionate about blockchain technologies and the real problems they can address. You will have a proactive, problem-solving attitude, and enjoy working with customers and representing IOG at conferences, meetups, podcasts, etc.</p></div></div></div></div><p><a class="gmail-c-link" href="https://apply.workable.com/io-global/j/965433F163/" rel="noopener noreferrer" style="background-color: #f8f8f8; font-family: Slack-Lato, appleLogo, sans-serif; font-size: 15px; font-style: inherit; font-weight: inherit;" target="_blank">https://apply.workable.com/io-global/j/965433F163/</a> </p><p><br></p><div><div><div class="gmail-job-preview-styles__description--2BkR3"></div></div></div></div>
    </content>
    <updated>2021-06-20T09:39:36Z</updated>
    <published>2021-02-25T15:07:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="Blockchain"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="Cryptocurrency"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="Functional Programming"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="Haskell"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="IOHK"/>
    <author>
      <name>Philip Wadler</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/12009347515095774366</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-9757377</id>
      <category term="Politics"/>
      <category term="Functional Programming"/>
      <category term="Programming Languages"/>
      <category term="Scotland"/>
      <category term="Computing"/>
      <category term="Independence"/>
      <category term="Yes!"/>
      <category term="Haskell"/>
      <category term="UK"/>
      <category term="Academia"/>
      <category term="Edinburgh"/>
      <category term="Cycling"/>
      <category term="Graphics"/>
      <category term="Types"/>
      <category term="Mathematics"/>
      <category term="Science"/>
      <category term="US"/>
      <category term="Covid-19"/>
      <category term="Logic"/>
      <category term="Security"/>
      <category term="Web"/>
      <category term="EU"/>
      <category term="Comics"/>
      <category term="Theory"/>
      <category term="Climate Change"/>
      <category term="Israel"/>
      <category term="Education"/>
      <category term="Blockchain"/>
      <category term="Internet"/>
      <category term="Status"/>
      <category term="University"/>
      <category term="Comedy"/>
      <category term="DSL"/>
      <category term="Databases"/>
      <category term="Dynamic and Static Typing"/>
      <category term="IOHK"/>
      <category term="Privacy"/>
      <category term="Recursion"/>
      <category term="SIGPLAN"/>
      <category term="Scala"/>
      <category term="Session Types"/>
      <category term="Strange Loop"/>
      <category term="ACM"/>
      <category term="Agda"/>
      <category term="Concurrency"/>
      <category term="Cryptocurrency"/>
      <category term="Developers"/>
      <category term="F#"/>
      <category term="Green"/>
      <category term="JavaScript"/>
      <category term="Lego"/>
      <category term="Technology"/>
      <category term="Writing"/>
      <category term="Architecture"/>
      <category term="Category Theory"/>
      <category term="Copyright"/>
      <category term="Distributed Computing"/>
      <category term="Europe"/>
      <category term="Formal Methods"/>
      <category term="Java"/>
      <category term="Racket"/>
      <category term="Science Fiction"/>
      <category term="BLM"/>
      <category term="Brexit"/>
      <category term="DRM"/>
      <category term="Environment"/>
      <category term="Erlang"/>
      <category term="Finance"/>
      <category term="Object-Oriented"/>
      <category term="Productivity"/>
      <category term="BDS"/>
      <category term="Books"/>
      <category term="Cinema"/>
      <category term="Gender"/>
      <category term="Japan"/>
      <category term="Net Neutrality"/>
      <category term="Open Access"/>
      <category term="Palestine"/>
      <category term="Pyret"/>
      <category term="Scheme"/>
      <category term="Sweden"/>
      <category term="Theatre"/>
      <author>
        <name>Philip Wadler</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/12009347515095774366</uri>
      </author>
      <link href="https://wadler.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml">
      <link href="https://www.blogger.com/feeds/9757377/posts/default?alt=atom" rel="self" type="application/atom+xml">
      <link href="https://wadler.blogspot.com/" rel="alternate" type="text/html">
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html">
      <link href="https://www.blogger.com/feeds/9757377/posts/default?alt=atom&amp;start-index=26&amp;max-results=25" rel="next" type="application/atom+xml">
      <title>Wadler's Blog</title>
      <updated>2021-08-24T20:25:45Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://byorgey.wordpress.com/?p=2375</id>
    <link href="https://byorgey.wordpress.com/2021/06/19/competitive-programming-in-haskell-folding-folds/" rel="alternate" type="text/html">
    <link href="https://byorgey.wordpress.com/2021/06/19/competitive-programming-in-haskell-folding-folds/#comments" rel="replies" type="text/html">
    <link href="https://byorgey.wordpress.com/2021/06/19/competitive-programming-in-haskell-folding-folds/feed/atom/" rel="replies" type="application/atom+xml">
    <title xml:lang="en">Competitive programming in Haskell: folding folds</title>
    <summary type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml">Now that the semester is over—and I will be on sabbatical in the fall!—you can expect a lot more competitive programming in Haskell posts. In a previous post, I challenged you to solve Origami. j0sejuan took me up on the … <a href="https://byorgey.wordpress.com/2021/06/19/competitive-programming-in-haskell-folding-folds/">Continue reading <span class="meta-nav">→</span></a></div>
    </summary>
    <content type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p>Now that the semester is over—and I will be on sabbatical in the fall!—you can expect a lot more competitive programming in Haskell posts. In <a href="https://byorgey.wordpress.com/2021/02/23/competitive-programming-in-haskell-folding-challenge/">a previous post</a>, I challenged you to solve <a href="https://open.kattis.com/problems/origami">Origami</a>. <a href="https://byorgey.wordpress.com/2021/02/23/competitive-programming-in-haskell-folding-challenge/#comment-39466">j0sejuan took me up on the challenge</a>, as did Aaron Allen and Ryan Yates; if you still want to try it, go do it before reading on!</p>
<p>In the problem, we start with a square sheet of paper and are given a series of folds to perform in sequence; each fold is specified as a line, and we fold whatever is on one side of the line across onto the other side. Given some query points, we have to compute how thick the resulting origami design is at each point.</p>
<h2 id="lines">Lines</h2>
<p>The first order of business is some computational geometry relating to lines in 2D (this code can all be found in <a href="https://github.com/byorgey/comprog-hs/blob/master/Geom.hs">Geom.hs</a>. Here I am following <a href="https://vlecomte.github.io/">Victor Lecomte</a>’s excellent <a href="https://vlecomte.github.io/cp-geo.pdf">Handbook of geometry for competitive programmers</a>, which I think I’ve mentioned before. I’ll try to give a bit of explanation, but if you want full explanations and proofs you should consult that document.</p>
<p>The equation of a line <img alt="ax + by = c" class="latex" src="https://s0.wp.com/latex.php?latex=ax+%2B+by+%3D+c&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"> can be thought of as the set of all points <img alt="(x,y)" class="latex" src="https://s0.wp.com/latex.php?latex=%28x%2Cy%29&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"> whose dot product with the vector <img alt="(a,b)" class="latex" src="https://s0.wp.com/latex.php?latex=%28a%2Cb%29&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"> is a constant <img alt="c" class="latex" src="https://s0.wp.com/latex.php?latex=c&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002">. This will in fact be a line perpendicular to the vector <img alt="(a,b)" class="latex" src="https://s0.wp.com/latex.php?latex=%28a%2Cb%29&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002">, where <img alt="c" class="latex" src="https://s0.wp.com/latex.php?latex=c&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"> determines the distance of the line from the origin. Alternatively, we can think of the vector <img alt="(b,-a)" class="latex" src="https://s0.wp.com/latex.php?latex=%28b%2C-a%29&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002">, which is perpendicular to <img alt="(a,b)" class="latex" src="https://s0.wp.com/latex.php?latex=%28a%2Cb%29&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"> and thus parallel to the line; the line now consists of all points <img alt="(x,y)" class="latex" src="https://s0.wp.com/latex.php?latex=%28x%2Cy%29&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"> whose <a href="https://byorgey.wordpress.com/2020/07/10/competitive-programming-in-haskell-2d-cross-product-part-1/">2D cross product</a> with <img alt="(b,-a)" class="latex" src="https://s0.wp.com/latex.php?latex=%28b%2C-a%29&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"> is the constant <img alt="c" class="latex" src="https://s0.wp.com/latex.php?latex=c&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"> (since <img alt="(b,-a) \times (x,y) = by - (-a)x = ax + by" class="latex" src="https://s0.wp.com/latex.php?latex=%28b%2C-a%29+%5Ctimes+%28x%2Cy%29+%3D+by+-+%28-a%29x+%3D+ax+%2B+by&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002">; note that the order matters). Either representation would work, but I will follow Lecomte in choosing the second: we represent a line by a vector giving its direction, and a scalar offset.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span style="color: blue; font-weight: bold;">data</span> <span>L2</span> <span>s</span> <span style="color: red;">=</span> <span>L2</span> <span style="color: red;">{</span> <span>getDirection</span> <span style="color: red;">::</span> <span>!</span><span style="color: red;">(</span><span>V2</span> <span>s</span><span style="color: red;">)</span><span style="color: red;">,</span> <span>getOffset</span> <span style="color: red;">::</span> <span>!</span><span>s</span> <span style="color: red;">}</span>
<span style="color: blue; font-weight: bold;">type</span> <span>L2D</span> <span style="color: red;">=</span> <span>L2</span> <span>Double</span></code></pre>
<p>There are a few ways to construct a line: from an equation <img alt="ax + by = c" class="latex" src="https://s0.wp.com/latex.php?latex=ax+%2B+by+%3D+c&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002">, or from two points which lie on the line. The first is easy, given the above discussion. For the second, given points <img alt="p" class="latex" src="https://s0.wp.com/latex.php?latex=p&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"> and <img alt="q" class="latex" src="https://s0.wp.com/latex.php?latex=q&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002">, we can easily construct the direction of the line as <img alt="v = q - p" class="latex" src="https://s0.wp.com/latex.php?latex=v+%3D+q+-+p&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002">. Then to get the constant <img alt="c" class="latex" src="https://s0.wp.com/latex.php?latex=c&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002">, we simply use the fact that <img alt="c" class="latex" src="https://s0.wp.com/latex.php?latex=c&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"> is the cross product of the direction vector with any point on the line, say, <img alt="p" class="latex" src="https://s0.wp.com/latex.php?latex=p&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"> (of course <img alt="q" class="latex" src="https://s0.wp.com/latex.php?latex=q&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"> would also work).</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span>lineFromEquation</span> <span style="color: red;">::</span> <span>Num</span> <span>s</span> <span style="color: red;">=&gt;</span> <span>s</span> <span style="color: red;">-&gt;</span> <span>s</span> <span style="color: red;">-&gt;</span> <span>s</span> <span style="color: red;">-&gt;</span> <span>L2</span> <span>s</span>
<span>lineFromEquation</span> <span>a</span> <span>b</span> <span>c</span> <span style="color: red;">=</span> <span>L2</span> <span style="color: red;">(</span><span>V2</span> <span>b</span> <span style="color: red;">(</span><span style="color: green;">-</span><span>a</span><span style="color: red;">)</span><span style="color: red;">)</span> <span>c</span>

<span>lineFromPoints</span> <span style="color: red;">::</span> <span>Num</span> <span>s</span> <span style="color: red;">=&gt;</span> <span>P2</span> <span>s</span> <span style="color: red;">-&gt;</span> <span>P2</span> <span>s</span> <span style="color: red;">-&gt;</span> <span>L2</span> <span>s</span>
<span>lineFromPoints</span> <span>p</span> <span>q</span> <span style="color: red;">=</span> <span>L2</span> <span>v</span> <span style="color: red;">(</span><span>v</span> <span>`cross`</span> <span>p</span><span style="color: red;">)</span>
  <span style="color: blue; font-weight: bold;">where</span>
    <span>v</span> <span style="color: red;">=</span> <span>q</span> <span>^-^</span> <span>p</span></code></pre>
<p>Now we can write some functions to decide where a given point lies with respect to a line. First, the <code>side</code> function computes <img alt="ax + by - c = (b,-a) \times (x,y) - c" class="latex" src="https://s0.wp.com/latex.php?latex=ax+%2B+by+-+c+%3D+%28b%2C-a%29+%5Ctimes+%28x%2Cy%29+-+c&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"> for any point <img alt="p = (x,y)" class="latex" src="https://s0.wp.com/latex.php?latex=p+%3D+%28x%2Cy%29&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002">.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span>side</span> <span style="color: red;">::</span> <span>Num</span> <span>s</span> <span style="color: red;">=&gt;</span> <span>L2</span> <span>s</span> <span style="color: red;">-&gt;</span> <span>P2</span> <span>s</span> <span style="color: red;">-&gt;</span> <span>s</span>
<span>side</span> <span style="color: red;">(</span><span>L2</span> <span>v</span> <span>c</span><span style="color: red;">)</span> <span>p</span> <span style="color: red;">=</span> <span>cross</span> <span>v</span> <span>p</span> <span style="color: green;">-</span> <span>c</span></code></pre>
<p>Of course, for points that lie on the line, this quantity will be zero. We can also classify points <img alt="p" class="latex" src="https://s0.wp.com/latex.php?latex=p&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"> as lying to the left or right of the line (looking in the direction of <img alt="v" class="latex" src="https://s0.wp.com/latex.php?latex=v&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002">) depending on whether <code>side l p</code> is positive or negative, respectively.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span>onLine</span> <span style="color: red;">::</span> <span style="color: red;">(</span><span>Num</span> <span>s</span><span style="color: red;">,</span> <span>Eq</span> <span>s</span><span style="color: red;">)</span> <span style="color: red;">=&gt;</span> <span>L2</span> <span>s</span> <span style="color: red;">-&gt;</span> <span>P2</span> <span>s</span> <span style="color: red;">-&gt;</span> <span>Bool</span>
<span>onLine</span> <span>l</span> <span>p</span> <span style="color: red;">=</span> <span>side</span> <span>l</span> <span>p</span> <span>==</span> <span class="hs-num">0</span>

<span>leftOf</span> <span style="color: red;">::</span> <span style="color: red;">(</span><span>Num</span> <span>s</span><span style="color: red;">,</span> <span>Ord</span> <span>s</span><span style="color: red;">)</span> <span style="color: red;">=&gt;</span> <span>L2</span> <span>s</span> <span style="color: red;">-&gt;</span> <span>P2</span> <span>s</span> <span style="color: red;">-&gt;</span> <span>Bool</span>
<span>leftOf</span> <span>l</span> <span>p</span> <span style="color: red;">=</span> <span>side</span> <span>l</span> <span>p</span> <span>&gt;</span> <span class="hs-num">0</span>

<span>rightOf</span> <span style="color: red;">::</span> <span style="color: red;">(</span><span>Num</span> <span>s</span><span style="color: red;">,</span> <span>Ord</span> <span>s</span><span style="color: red;">)</span> <span style="color: red;">=&gt;</span> <span>L2</span> <span>s</span> <span style="color: red;">-&gt;</span> <span>P2</span> <span>s</span> <span style="color: red;">-&gt;</span> <span>Bool</span>
<span>rightOf</span> <span>l</span> <span>p</span> <span style="color: red;">=</span> <span>side</span> <span>l</span> <span>p</span> <span>&lt;</span> <span class="hs-num">0</span></code></pre>
<p>The last piece we will need to solve the problem is a way to reflect a point across a line. <code>toProjection l p</code> computes the vector perpendicular to <img alt="l" class="latex" src="https://s0.wp.com/latex.php?latex=l&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"> which points from <img alt="p" class="latex" src="https://s0.wp.com/latex.php?latex=p&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"> to <img alt="l" class="latex" src="https://s0.wp.com/latex.php?latex=l&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002">, and <code>reflectAcross</code> works by adding <code>toProjection l p</code> to <code>p</code> twice. I won’t derive the definition of <code>toProjection</code>, but the basic idea is to start with a vector perpendicular to the direction of the line (<code>perp v</code>) and scale it by a factor related to <code>side l p</code>. (Intuitively, it makes sense that <img alt="ax + by - c" class="latex" src="https://s0.wp.com/latex.php?latex=ax+%2B+by+-+c&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"> tells us something about the distance from <img alt="(x,y)" class="latex" src="https://s0.wp.com/latex.php?latex=%28x%2Cy%29&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"> to the line; the farther away <img alt="(x,y)" class="latex" src="https://s0.wp.com/latex.php?latex=%28x%2Cy%29&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"> is from the line, the farther <img alt="ax + by" class="latex" src="https://s0.wp.com/latex.php?latex=ax+%2B+by&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"> is from <img alt="c" class="latex" src="https://s0.wp.com/latex.php?latex=c&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002">.) See Lecomte for the full details.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span>toProjection</span> <span style="color: red;">::</span> <span>Fractional</span> <span>s</span> <span style="color: red;">=&gt;</span> <span>L2</span> <span>s</span> <span style="color: red;">-&gt;</span> <span>P2</span> <span>s</span> <span style="color: red;">-&gt;</span> <span>V2</span> <span>s</span>
<span>toProjection</span> <span>l</span><span style="color: red;">@</span><span style="color: red;">(</span><span>L2</span> <span>v</span> <span style="color: blue; font-weight: bold;">_</span><span style="color: red;">)</span> <span>p</span> <span style="color: red;">=</span> <span style="color: red;">(</span><span style="color: green;">-</span><span>side</span> <span>l</span> <span>p</span> <span>/</span> <span>normSq</span> <span>v</span><span style="color: red;">)</span> <span>*^</span> <span>perp</span> <span>v</span>

<span>project</span> <span style="color: red;">::</span> <span>Fractional</span> <span>s</span> <span style="color: red;">=&gt;</span> <span>L2</span> <span>s</span> <span style="color: red;">-&gt;</span> <span>P2</span> <span>s</span> <span style="color: red;">-&gt;</span> <span>P2</span> <span>s</span>
<span>project</span> <span>l</span> <span>p</span> <span style="color: red;">=</span> <span>p</span> <span>^+^</span> <span>toProjection</span> <span>l</span> <span>p</span>

<span>reflectAcross</span> <span style="color: red;">::</span> <span>Fractional</span> <span>s</span> <span style="color: red;">=&gt;</span> <span>L2</span> <span>s</span> <span style="color: red;">-&gt;</span> <span>P2</span> <span>s</span> <span style="color: red;">-&gt;</span> <span>P2</span> <span>s</span>
<span>reflectAcross</span> <span>l</span> <span>p</span> <span style="color: red;">=</span> <span>p</span> <span>^+^</span> <span style="color: red;">(</span><span class="hs-num">2</span> <span>*^</span> <span>toProjection</span> <span>l</span> <span>p</span><span style="color: red;">)</span></code></pre>
<h2 id="folding-origami">Folding origami</h2>
<p>Finally we can solve the problem! First, some imports and input parsing.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span style="color: green;">{-# LANGUAGE RecordWildCards #-}</span>

<span style="color: blue; font-weight: bold;">import</span>           <span>Control.Arrow</span>
<span style="color: blue; font-weight: bold;">import</span> <span style="color: blue; font-weight: bold;">qualified</span> <span>Data.ByteString.Lazy.Char8</span> <span style="color: blue; font-weight: bold;">as</span> <span>C</span>

<span style="color: blue; font-weight: bold;">import</span>           <span>Geom</span>
<span style="color: blue; font-weight: bold;">import</span>           <span>ScannerBS</span>

<span>main</span> <span style="color: red;">=</span> <span>C.interact</span> <span>$</span>
  <span>runScanner</span> <span>tc</span> <span>&gt;&gt;&gt;</span> <span>solve</span> <span>&gt;&gt;&gt;</span> <span>map</span> <span style="color: red;">(</span><span>show</span> <span>&gt;&gt;&gt;</span> <span>C.pack</span><span style="color: red;">)</span> <span>&gt;&gt;&gt;</span> <span>C.unlines</span>

<span style="color: blue; font-weight: bold;">data</span> <span>TC</span> <span style="color: red;">=</span> <span>TC</span> <span style="color: red;">{</span> <span>steps</span> <span style="color: red;">::</span> <span style="color: red;">[</span><span>L2D</span><span style="color: red;">]</span><span style="color: red;">,</span> <span>holes</span> <span style="color: red;">::</span> <span style="color: red;">[</span><span>P2D</span><span style="color: red;">]</span> <span style="color: red;">}</span>

<span>tc</span> <span style="color: red;">=</span> <span>TC</span> <span>&lt;$&gt;</span> <span>numberOf</span> <span style="color: red;">(</span><span>lineFromPoints</span> <span>&lt;$&gt;</span> <span>p2</span> <span>double</span> <span>&lt;*&gt;</span> <span>p2</span> <span>double</span><span style="color: red;">)</span> <span>&lt;*&gt;</span> <span>numberOf</span> <span style="color: red;">(</span><span>p2</span> <span>double</span><span style="color: red;">)</span>

<span>solve</span> <span style="color: red;">::</span> <span>TC</span> <span style="color: red;">-&gt;</span> <span style="color: red;">[</span><span>Int</span><span style="color: red;">]</span>
<span>solve</span> <span>TC</span><span style="color: red;">{</span><span style="color: red;">..</span><span style="color: red;">}</span> <span style="color: red;">=</span> <span>map</span> <span>countLayers</span> <span>holes</span>
  <span style="color: blue; font-weight: bold;">where</span></code></pre>
<p>For <code>countLayers</code>, the idea is to work backwards from a given query point to find all its preimages, that is, the points that will eventually map to that point under the folds. Then we can just count how many of those points lie (strictly) inside the original square of paper.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">    <span>inSquare</span> <span style="color: red;">(</span><span>V2</span> <span>x</span> <span>y</span><span style="color: red;">)</span> <span style="color: red;">=</span> <span class="hs-num">0</span> <span>&lt;</span> <span>x</span> <span>&amp;&amp;</span> <span>x</span> <span>&lt;</span> <span class="hs-num">1000</span> <span>&amp;&amp;</span> <span class="hs-num">0</span> <span>&lt;</span> <span>y</span> <span>&amp;&amp;</span> <span>y</span> <span>&lt;</span> <span class="hs-num">1000</span></code></pre>
<p>For a given point and fold, there are two possibilities, depending on which side of the fold line the point falls on. If the point falls on the fold or to the right of it, then it has no preimages (we always fold from right to left, so after the fold, there will be no paper on the right side of the line, and the problem specifies that points exactly on a folded edge do not count). Hence we can just discard such a point. On the other hand, if the point lies on the left side of the line, then the point has two preimages: the point itself, and its reflection across the fold line.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">    <span>preimage</span> <span style="color: red;">::</span> <span>L2D</span> <span style="color: red;">-&gt;</span> <span>P2D</span> <span style="color: red;">-&gt;</span> <span style="color: red;">[</span><span>P2D</span><span style="color: red;">]</span>
    <span>preimage</span> <span>l</span> <span>p</span>
      <span style="color: red;">|</span> <span>leftOf</span> <span>l</span> <span>p</span> <span style="color: red;">=</span> <span style="color: red;">[</span><span>p</span><span style="color: red;">,</span> <span>reflectAcross</span> <span>l</span> <span>p</span><span style="color: red;">]</span>
      <span style="color: red;">|</span> <span>otherwise</span>  <span style="color: red;">=</span> <span>[]</span></code></pre>
<p>So we keep a set of points, starting with the singleton query point, and for each fold (in order from last to first) we find the preimage of every point in the set under the fold. We actually use lists of points instead of sets, because (1) we won’t ever get any collisions (actually, the more I think about this, the less sure I am!) and (2) it lets us use the actual list monad instead of making some ad-hoc <code>Set</code> monad operations.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">    <span>countLayers</span> <span style="color: red;">::</span> <span>P2D</span> <span style="color: red;">-&gt;</span> <span>Int</span>
    <span>countLayers</span> <span>q</span> <span style="color: red;">=</span> <span>length</span> <span>.</span> <span>filter</span> <span>inSquare</span> <span>$</span> <span>foldr</span> <span style="color: red;">(</span><span style="color: red;">\</span><span>l</span> <span style="color: red;">-&gt;</span> <span style="color: red;">(</span><span>&gt;&gt;=</span> <span>preimage</span> <span>l</span><span style="color: red;">)</span><span style="color: red;">)</span> <span style="color: red;">[</span><span>q</span><span style="color: red;">]</span> <span>steps</span></code></pre>
<p>It is very satisfying to use a fold to process a list of folds!</p>
<h2 id="next-time-please-go-first">Next time: Please, Go First</h2>
<p>For next time, I invite you to solve <a href="https://open.kattis.com/problems/pleasegofirst">Please, Go First</a>.</p></div>
    </content>
    <updated>2021-06-19T14:55:32Z</updated>
    <published>2021-06-19T14:55:32Z</published>
    <category scheme="https://byorgey.wordpress.com" term="competitive programming"/>
    <category scheme="https://byorgey.wordpress.com" term="haskell"/>
    <category scheme="https://byorgey.wordpress.com" term="2D"/>
    <category scheme="https://byorgey.wordpress.com" term="fold"/>
    <category scheme="https://byorgey.wordpress.com" term="geometry"/>
    <category scheme="https://byorgey.wordpress.com" term="Kattis"/>
    <category scheme="https://byorgey.wordpress.com" term="line"/>
    <category scheme="https://byorgey.wordpress.com" term="origami"/>
    <category scheme="https://byorgey.wordpress.com" term="reflect"/>
    <author>
      <name>Brent</name>
      <uri>http://ozark.hendrix.edu/~yorgey/</uri>
    </author>
    <source>
      <id>http://byorgey.wordpress.com/feed/atom/</id>
      <link href="https://byorgey.wordpress.com" rel="alternate" type="text/html">
      <link href="https://byorgey.wordpress.com/feed/atom/" rel="self" type="application/atom+xml">
      <link href="https://byorgey.wordpress.com/osd.xml" rel="search" title="blog :: Brent -&gt; [String]" type="application/opensearchdescription+xml">
      <link href="https://s1.wp.com/opensearch.xml" rel="search" title="WordPress.com" type="application/opensearchdescription+xml">
      <link href="https://byorgey.wordpress.com/?pushpress=hub" rel="hub" type="text/html">
      <title xml:lang="en">blog :: Brent -&gt; [String]</title>
      <updated>2021-08-11T21:51:58Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://www.joachim-breitner.de/blog/780-Leaving_DFINITY</id>
    <link href="http://www.joachim-breitner.de/blog/780-Leaving_DFINITY" rel="alternate" type="text/html">
    <title xml:lang="en">Leaving DFINITY</title>
    <summary type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p>Last Thursday was my last working day at <a href="https://dfinity.org/">DFINITY</a>. There are various reasons why I felt that after almost three years the DFINITY Foundation isn’t quite the right place for me anymore, and this plan has been in the making for a while. Primarily, there are personal pull factors that strongly suggest that I’ll take a break from full time employment, so I decided to see the launch of the Internet Computer through and then leave.</p>
<p>DFINITY has hired some amazing people, and it was a great pleasure to work with them. I learned a lot (some Rust, a lot of Nix, and just how merciless Conway’s law is), and I dare say I had the opportunity to do some good work, contributing my part to make the Internet Computer a reality.</p>
<p>I am especially proud of the <a href="https://sdk.dfinity.org/docs/interface-spec/index.html">Interface Specification</a> and the specification-driven design principles behind it. It even comes with a <a href="https://github.com/dfinity/ic-hs">model reference implementation and acceptance test suite</a>, and although we didn’t quite get to do formalization, those familiar with the <a href="https://deepspec.org/main">DeepSpec project</a> will recognize some influence of their concept of “<a href="https://deepspec.org/page/About/_">deep specifications</a>”.</p>
<p>Besides that, there is of course my work on the <a href="https://github.com/dfinity/motoko/graphs/contributors">Motoko programming language</a>, where I build the backend,a the <a href="https://github.com/dfinity/candid/blob/master/spec/Candid.md">Candid interoperability layer</a>, where I helped with the formalism, formulated the a <a href="https://github.com/dfinity/candid/blob/master/spec/IDL-Soundness.md">generic soundness criterion for Interface Description Languages in a higher order settings</a> and <a href="https://github.com/dfinity/candid/tree/master/coq">formally verified that in Coq</a>. Fortunately, all of this work is now Free Software or at least Open Source.</p>
<p>With so much work poured into this project, I continue to care about it, and you’ll see me post on the <a href="https://forum.dfinity.org/">the developer forum</a> and hack on Motoko. As the Internet Computer becomes gradually more open, I hope I can be gradually more involved again. But even without me contributing full-time I am sure that DFINITY and the Internet Computer will do well; when I left there were still plenty of smart, capable and enthusiastic people forging ahead.</p>
<p>So what’s next?</p>
<p>So far, I have rushed every professional transition in my life: When starting my PhD, when starting my postdoc, when starting my job at DFINITY, and every time I regretted it. So this time, I will take a proper break and will explore the world a bit (as far as that is possible given the pandemic). I will stresslessly contribute to various open source projects. I also hope to do more public outreach and teaching, writing more blog posts again, recording <a href="https://www.youtube.com/playlist?list=PL4FcLyLhO9jggmkqJyJ2i9pCSiDpwKiVu">screencasts</a> and giving talks and lectures. If you want to invite me to your user group/seminar/company/workshop, please let me know! Also, I might be up for small interesting projects in a while.</p>
<p>Beyond these, I have no concrete plans and am looking forward to the inspiration I might get from hiking through the Scandinavian wilderness. If you happen to stumble across my tent, please stop for a tea.</p></div>
    </summary>
    <updated>2021-06-19T10:51:24Z</updated>
    <published>2021-06-19T10:51:24Z</published>
    <author>
      <name>Joachim Breitner</name>
      <email>mail@joachim-breitner.de</email>
    </author>
    <source>
      <id>http://www.joachim-breitner.de//blog</id>
      <logo>http://joachim-breitner.de/avatars/avatar_128.png</logo>
      <link href="http://www.joachim-breitner.de//blog" rel="alternate" type="text/html">
      <link href="http://www.joachim-breitner.de/blog_feed.rss" rel="self" type="application/rss+xml">
      <subtitle xml:lang="en">Joachim Breitners Denkblogade</subtitle>
      <title xml:lang="en">nomeataâ€™s mind shares</title>
      <updated>2021-08-30T22:01:14Z</updated>
    </source>
  </entry>
</feed>
