<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:planet="http://planet.intertwingly.net/" xmlns:indexing="urn:atom-extension:indexing" indexing:index="no"><access:restriction xmlns:access="http://www.bloglines.com/about/specs/fac-1.0" relationship="deny"/>
  <title>Planet Haskell</title>
  <updated>2022-11-17T12:03:29Z</updated>
  <generator uri="http://intertwingly.net/code/venus/">Venus</generator>
  <author>
    <name>Haskell Admin Team</name>
    <email>planet@haskell.org</email>
  </author>
  <id>http://planet.haskell.org/atom.xml</id>
  <link href="http://planet.haskell.org/atom.xml" rel="self" type="application/atom+xml">
  <link href="http://planet.haskell.org/" rel="alternate">

  <entry>
    <id>https://tweag.io/blog/2022-11-17-jupyter-with-next/</id>
    <link href="https://tweag.io/blog/2022-11-17-jupyter-with-next/" rel="alternate" type="text/html">
    <title>JupyterWith Next</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://jupyterwith.tweag.io">JupyterWith</a> has been around for several years with growing popularity.
Over the years, we found that researchers struggled with the Nix language and jupyterWith API.
Since researchers are our primary target audience, we decided to improve the usability of jupyterWith.</p>
<p>Today, we are proud to announce the release of a new version!
The new simplified API makes jupyterWith easier to use and provides more options for creating kernels.</p>
<h2 id="what-is-jupyterwith"><a class="anchor before" href="https://www.tweag.io/rss.xml#what-is-jupyterwith"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>What is jupyterWith?</h2>
<p>JupyterLab is a web-based interactive development environment for notebooks, code, and data.
These notebooks can be shared with other users and the residing code can be rerun providing repeatability.</p>
<p>The Jupyter ecosystem allows users to produce and repeat research and results, but it lacks in facilitating reproducible results.
There may not appear to be a difference between repeatable and reproducible, but there is a meaningful difference; reproducibility guarantees that our code and results will be exactly the same while repeatability does not.</p>
<p>While many Jupyter kernels are available as Python packages, just as many are not (e.g. haskell and julia).
Projects such as <a href="https://pdm.fming.dev/latest/">PDM</a> and <a href="https://github.com/thoth-station/jupyterlab-requirements">JupyterLab Requirements</a> can create reproducible environments but are restricted to the Python kernels.</p>
<p>jupyterWith was <a href="https://www.tweag.io/blog/2019-02-28-jupyter-with/">announced</a> in early 2019 and provides a Nix-based framework for declarative and reproducible JupyterLab environments with configurable kernels.
It actively supports over a dozen kernels and provides example setups and notebooks for users to try out.
jupyterWith can create entirely reproducible JupyterLab environments for any kernel.</p>
<h2 id="why-jupyterwith"><a class="anchor before" href="https://www.tweag.io/rss.xml#why-jupyterwith"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Why jupyterWith?</h2>
<p>If you can run an experiment multiple times in the same environment and get to the same conclusion, you have repeatability.
In our case, running the same code on the same machine should give the same outputs.
Consider what would happen if you handed off your code to another user and they ran it on their system.
Different operating systems or different versions of the same operating system may fetch different versions of the same package.
Fetching the same package at different times may not return the same version due to patch or security updates.
If you can guarantee the same outputs given all that has changed, then you have reproducibility.</p>
<p>With repeatability, we cannot guarantee that the packages and dependencies of our code will remain constant.
Using jupyterWith we can give that guarantee and ensure that on any system, run by any user, and given identical inputs, the code will produce identical outputs.
This guarantee is what makes our code and therefore our research reproducible.</p>
<h2 id="what-is-new"><a class="anchor before" href="https://www.tweag.io/rss.xml#what-is-new"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>What is new?</h2>
<p>This release focuses on helping users quickly and easily get their project started, and making it easier to extend kernels to fit their needs.</p>
<h3 id="new-templates"><a class="anchor before" href="https://www.tweag.io/rss.xml#new-templates"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>New templates</h3>
<p>The new version of jupyterWith provides new kernel templates which makes it easier for users to bootstrap their project using Nix flakes.
They are small, easily digestible, and ready to be customized.</p>
<h3 id="better-python-kernels"><a class="anchor before" href="https://www.tweag.io/rss.xml#better-python-kernels"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Better Python kernels</h3>
<p>It used to be difficult to select particular Python packages because we were tied to <code class="language-text">nixpkgs</code>.
jupyterWith now use <a href="https://python-poetry.org/">Poetry</a> and <a href="https://github.com/nix-community/poetry2nix">poetry2nix</a> to install kernels that are packaged with Python and their dependencies.
Poetry allows users to easily select the desired version of a package and can resolve dependencies.
poetry2nix greatly simplifies the kernel files, which helps with readability and maintainability.</p>
<h3 id="better-kernel-definition-interface"><a class="anchor before" href="https://www.tweag.io/rss.xml#better-kernel-definition-interface"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Better kernel definition interface</h3>
<p>Finally, we have simplified and standardized the interfaces for kernel files.
This makes it easier for users to implement completely new kernels.</p>
<h2 id="getting-started"><a class="anchor before" href="https://www.tweag.io/rss.xml#getting-started"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Getting Started</h2>
<p>The following code will initialize a new project directory with a flake template from the jupyterWith repository and start the JupyterLab environment.
With a renewed focus on user ease, this is all that is necessary to get started.</p>
<div class="gatsby-highlight"><pre class="language-shell"><code class="language-shell">$ <span class="token function">mkdir</span> my-project
$ <span class="token builtin class-name">cd</span> my-project
$ nix flake init --template github:tweag/jupyterWith
$ nix run</code></pre></div>
<p>Each kernel provided will generally only have the standard libraries and packages available, but there is a readme provided with the template with instructions on extending existing kernels, creating a custom kernel, and installing extensions.</p>
<h2 id="migration"><a class="anchor before" href="https://www.tweag.io/rss.xml#migration"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Migration</h2>
<p>If you have used jupyterWith in the past, you are probably used to seeing kernel files like the ipython kernel example below.
The version of Python used and the packages available to the kernel, can be set using the <code class="language-text">python3</code> and <code class="language-text">packages</code> attributes respectively.</p>
<p><em>Old interface</em></p>
<div class="gatsby-highlight"><pre class="language-nix"><code class="language-nix"><span class="token punctuation">{</span>
  iPython <span class="token operator">=</span> iPythonWith <span class="token punctuation">{</span>
    <span class="token comment"># Identifier that will appear on the Jupyter interface.</span>
    name <span class="token operator">=</span> <span class="token string">&quot;nixpkgs&quot;</span><span class="token punctuation">;</span>
    <span class="token comment"># Libraries to be available to the kernel.</span>
    packages <span class="token operator">=</span> p<span class="token punctuation">:</span> <span class="token keyword">with</span> p<span class="token punctuation">;</span> <span class="token punctuation">[</span> numpy pandas <span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment"># Optional definition of `python3` to be used.</span>
    <span class="token comment"># Useful for overlaying packages.</span>
    python3 <span class="token operator">=</span> pkgs<span class="token punctuation">.</span>python3Packages<span class="token punctuation">;</span>
    <span class="token comment"># Optional value to true that ignore file collisions inside the packages environment</span>
    ignoreCollisions <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre></div>
<p>The new interface is similar but there are a few key differences.
All kernels are provided through <code class="language-text">availableKernels</code> and the kernels are named by the language rather than the kernel project name.
For example, before there was <code class="language-text">iPythonWith</code> and <code class="language-text">iHaskellWith</code>, and now it is <code class="language-text">availableKernels.python</code> and <code class="language-text">availableKernels.haskell</code>.
The version of Python uses is passed through the <code class="language-text">python</code> attribute and additional packages are provided with the <code class="language-text">extraPackages</code> attribute.
There is one new attribute, <code class="language-text">editablePackageSources</code>, which is used by poetry2nix, to add packages to the environment in editable mode.</p>
<p><em>New interface!</em></p>
<div class="gatsby-highlight"><pre class="language-nix"><code class="language-nix"><span class="token punctuation">{</span>
  pkgs<span class="token punctuation">,</span>
  availableKernels<span class="token punctuation">,</span>
  kernelName<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">:</span>
availableKernels<span class="token punctuation">.</span>python<span class="token punctuation">.</span>override <span class="token punctuation">{</span>
  name <span class="token operator">=</span> <span class="token string">&quot;python-with-numpy&quot;</span><span class="token punctuation">;</span> <span class="token comment"># must be unique</span>
  displayName <span class="token operator">=</span> <span class="token string">&quot;python with numpy&quot;</span><span class="token punctuation">;</span> <span class="token comment"># name that appears in JupyterLab Web UI</span>
  python <span class="token operator">=</span> pkgs<span class="token punctuation">.</span>python3<span class="token punctuation">;</span>
  extraPackages <span class="token operator">=</span> ps<span class="token punctuation">:</span> <span class="token punctuation">[</span> ps<span class="token punctuation">.</span>numpy <span class="token punctuation">]</span><span class="token punctuation">;</span>
  editablePackageSources <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre></div>
<p>Both of these are still subject to the package versions available in <code class="language-text">nixpkgs</code>.
However, with Poetry, we can create a completely custom kernel with a <code class="language-text">pyproject.toml</code> file and specify exactly which package versions we want.
The full details are available in the <strong>How To</strong> and <strong>Tutorials</strong> sections of the <a href="https://jupyterwith.tweag.io">documentation</a>.</p>
<h2 id="conclusion"><a class="anchor before" href="https://www.tweag.io/rss.xml#conclusion"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Conclusion</h2>
<p>Usability has been improved, but there is much more to do.
The next major items on the roadmap include:</p>
<ul>
<li>Updating and improving the flake templates.</li>
<li>Updating and improving documentation on configuring existing kernels and packaging new kernels.</li>
<li>Providing better MacOS support.</li>
<li>Adding new and improving existing kernels.</li>
<li>Create a website indexing kernels that can be used and configured in jupyterWith.</li>
</ul>
<p>Join us in contributing to the project.
You can find the repository <a href="https://github.com/tweag/jupyterWith">here</a>.</p></div>
    </summary>
    <updated>2022-11-17T00:00:00Z</updated>
    <published>2022-11-17T00:00:00Z</published>
    <source>
      <id>https://tweag.io</id>
      <author>
        <name>Tweag I/O</name>
      </author>
      <link href="https://tweag.io" rel="alternate" type="text/html">
      <link href="http://www.tweag.io/rss.xml" rel="self" type="application/rss+xml">
      <subtitle>Scale your engineering power. We enable deep-tech startups to achieve
their vision, from research to product delivery.</subtitle>
      <title>Tweag - Engineering blog</title>
      <updated>2022-11-17T06:35:57Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-US">
    <id>584219d403596e3099e0ee9b:58462c0e15d5db6feba171c0:6369c4307b8a1e54007f7103</id>
    <link href="https://mmhaskell.com/blog/2022/11/14/an-unusual-application-for-dijkstra" rel="alternate" type="text/html">
    <title>An Unusual Application for Dijkstra</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Today will be the final write-up for a 2021 Advent of Code problem. It will also serve as a capstone for the work on <a href="https://mmhaskell.com/blog/2022/9/5/dijkstra-comparison-looking-at-the-library-function">Dijkstra's algorithm</a> I did back in the summer! This problem uses Dijkstra's algorithm, but in a more unusual way! We'll be working on <a href="https://adventofcode.com/2021/day/23">Day 23</a> from last year. And for my part, I'll say that days 21-24 were all extremely challenging, so this is one of the &quot;final boss&quot; puzzles!</p>
<p>Like our previous write-ups, this is an <strong>In-Depth</strong> walkthrough, and it's a long one! So get ready for some details! The <a href="https://github.com/MondayMorningHaskell/AdventOfCode/blob/main/src/Day23.hs">code is available on GitHub</a> as always so you can follow along.</p>
<h2 id="problem-statement">Problem Statement</h2>
<p>For this puzzle, we start with a set of tokens divided into 4 rooms with a hallway allowing them to move around.</p>
<pre><code>#############
#...........#
###B#C#B#D###
  #A#D#C#A#
  #########</code></pre><p>Our goal is to rearrange the tokens so that the <code>A</code> tokens are both in the first room, the <code>B</code> tokens are in the second room, the <code>C</code> tokens are in the third room, and the <code>D</code> tokens are in the fourth room.</p>
<pre><code>#############
#...........#
###A#B#C#D###
  #A#B#C#D#
  #########</code></pre><p>However, there are a lot of restrictions on the possible moves. First, token's <strong>can't move past each other in the hall</strong> (or rooms). If <code>D</code> comes out of the fourth room first, we cannot then move the <code>A</code> in that room anywhere to the left. It could only go to a space on the right.</p>
<pre><code>#############
#.......D...#
###B#C#B#.###
  #A#D#C#A#
  #########</code></pre><p>Next, each token can only make two moves total. It can move into the hallway once, and then into its appropriate room. It can't take a side journey into a different room to make space for other tokens to pass.</p>
<p>On top of this, each token spends a certain amount of &quot;power&quot; (or &quot;energy&quot;) to move per space. The different tokens spend a different amount of energy:</p>
<pre><code>A = 1
B = 10
C = 100
D = 1000</code></pre><p>So from the start position, we could spend 2000 energy to move <code>D</code> up to the right, and then only 9 energy to move <code>A</code> all the way to the left side.</p>
<pre><code>#############
#.A.......D.#
###B#C#B#.###
  #A#D#C#.#
  #########</code></pre><p>Our goal is to get the desired configuration with the least amount of energy expended.</p>
<p>For the &quot;harder&quot; version of this problem, not much changes. We just have <strong>4</strong> tokens per room, so more maneuvering steps are required.</p>
<pre><code>#############
#...........#
###B#C#B#D###
  #D#C#B#A#
  #D#B#A#C#
  #A#D#C#A#
  #########</code></pre><h2 id="solution-approach">Solution Approach</h2>
<p>The surprising solution approach (at least I was surprised when I realized it could work), is to treat this like a graph problem. Each &quot;state&quot; of the puzzle represents a node in the graph. Any given state has &quot;edges&quot; representing transitions to future states of the puzzle. The edges are weighted by how much energy is required in the transition.</p>
<p>Once we view the problem in this way, the solution is simple. We apply a &quot;shortest path&quot; algorithm (like Dijkstra's) using the &quot;end&quot; state of the puzzle as the destination. We'll get the series of moves that uses the least total energy.</p>
<p>For example, the first starting solution would represent one node. It would have an edge to this following puzzle state, with a weight of 2000, since a <code>D</code> is moving two spaces.</p>
<pre><code>#############
#.........D.#
###B#C#B#.###
  #A#D#C#A#
  #########</code></pre><p>There are some potential questions about the scale of this problem. If the potential number of nodes is too high, even Dijkstra's algorithm could take too long. And if the tokens could be placed arbitrarily anywhere in the puzzle space, our upper bound might be a factorial number like <a href="https://www.calculatorsoup.com/calculators/discretemathematics/permutations.php">23-P-16</a>. This would be too large.</p>
<p>However, as a practical matter, the solution space is much smaller than this because of the many restrictions on how tokens can actually move. So we'll end up with a solution space that is still large but not intractable.</p>
<h2 id="solution-outline">Solution Outline</h2>
<p>As we start to outline our solution, we need to start by considering which Dijkstra library function we'll use. In order to allow monadic actions in our functions (such as logging), we'll use <code>dijkstraM</code>, which has the following type signature:</p>
<pre><code class="lang-haskell">dijkstraM ::
  (Monad m, Foldable f, Num cost, Ord cost, Ord state) =&gt;
  (state -&gt; m (f state)) -&gt;
  (state -&gt; state -&gt; m cost) -&gt;
  (state -&gt; m bool) -&gt;
  state -&gt;
  m (Maybe (cost, [state]))</code></pre>
<p>To make this work, we need to pick the types we'll use for <code>state</code> and <code>cost</code>. For the <code>cost</code>, we can rely on a simple <code>Int</code>. For the <code>state</code>, we'll create a custom <code>GraphState</code> type that will represent the state of the solution at a particular point in time.</p>
<pre><code class="lang-haskell">data GraphState = ...</code></pre>
<p>We'll expand more on exactly what information goes into this type as we go along. But now that we've defined our type, we can define the three functions that we'll use as inputs to <code>dijkstraM</code>:</p>
<pre><code class="lang-haskell">getNeighbors :: (MonadLogger m) =&gt; GraphState -&gt; m [GraphState]
getCost :: (MonadLogger m) =&gt; GraphState -&gt; GraphState -&gt; m Int
isComplete :: (MonadLogger m) =&gt; GraphState -&gt; m Bool</code></pre>
<p>We can (and will) add at least one more argument to partially apply, but still, this lets us outline what a full invocation of the function might look like:</p>
<pre><code class="lang-haskell">solution :: (MonadLogger m) =&gt; GraphState -&gt; m (Maybe (Int, [GraphState])
solution initialState = dijkstraM getNeighbors getCost isComplete initialState</code></pre>
<h2 id="completeness-check">Completeness Check</h2>
<p>So now let's start filling in these functions. We'll start with the completeness check, since that's the easiest. Because this check is run fairly often, we want to make it as quick as possible. So instead of doing a full completeness check on the state each time we call it, we'll store a specific field in the graph state called <code>roomsFull</code>.</p>
<pre><code class="lang-haskell">data GraphState = GraphState
  { roomsFull :: Int -- Initially 0, increments when we finish a room
  ...
  }</code></pre>
<p>This field will be 0 when we initialize the state, and whenever we &quot;complete&quot; a room in our search path, we'll bump the number up. Checking for completeness then is as simple as checking that we've completed all 4 rooms.</p>
<pre><code class="lang-haskell">isComplete :: (MonadLogger m) =&gt; GraphState -&gt; m Bool
isComplete gs = return (roomsFull gs == 4)</code></pre>
<h2 id="cost">Cost</h2>
<p>It would be more convenient to combine the cost with the neighbors function, like in <code>dijkstraAssoc</code>. But we don't have this option if we want to use a monad. Calculating the cost between two raw graph states would be a little tricky, since we'd have to go through a lot of cases to see what has actually changed.</p>
<p>However, it gets easier if we include the &quot;last move&quot; as part of the <code>GraphState</code> type. So let's start defining what a <code>Move</code> looks like. To start, we'll include a <code>NoMove</code> constructor for the initial position, and we'll make a note that the <code>GraphState</code> will include this field.</p>
<pre><code class="lang-haskell">data Move =
  NoMove |
  ...

data GraphState = GraphState
  { lastMove :: Move
  , roomsFull :: Int
  ...
  }</code></pre>
<p>So how do we describe a move? Because the rules are so constrained, we can be sure every move has the following:</p>
<ol>
<li>A particular token that is moving.</li>
<li>A particular &quot;hall space&quot; that it is moving to or from.</li>
<li>A particular &quot;room&quot; that it is moving to or from.</li>
</ol>
<p>Each of these concepts is easily enumerated, so let's make some <code>Enum</code> types that are also indexable (we'll see why soon):</p>
<pre><code class="lang-haskell">data Token = A | B | C | D
  deriving (Show, Eq, Ord, Enum, Ix)

data Room = RA | RB | RC | RD
  deriving (Show, Eq, Ord, Enum, Ix)

-- Can never occupy spaces above the room like H3, H5, H7, H9
data HallSpace = H1 | H2 | H4 | H6 | H8 | H10 | H11
  deriving (Show, Eq, Ord, Enum, Ix)</code></pre>
<p>Now we can describe the <code>Move</code> constructor with these three items, as well as two more pieces of data. First, an <code>Int</code> paired with the room describing the &quot;slot&quot; of the room involved. For example, the top &quot;slot&quot; of a room would be 1, the space below it would be 2, and so on. Finally, we'll include a <code>Bool</code> telling us if the move is leaving the room (<code>True</code>) or entering the room (<code>False</code>). This won't be necessarily for calculations, but it helps with debugging.</p>
<pre><code class="lang-haskell">data Move =
  NoMove |
  Move Token HallSpace (Room, Int) Bool
  deriving (Show, Eq, Ord)</code></pre>
<p>So what is the cost of a move? We have to calculate the distance, and we have to know the power multiplier. So let's make two constant arrays that we'll reference. First, let's match each token to its multiplier:</p>
<pre><code class="lang-haskell">tokenPower :: A.Array Token Int
tokenPower = A.array (A, D) [(A, 1), (B, 10), (C, 100), (D, 1000)]</code></pre>
<p>Now we want to match each pair of &quot;hall space&quot; and &quot;room&quot; with a distance measurement. This tells us how many moves it takes to get from the hall space to the space above the room. For example, the first hall space requires <code>2</code> moves to get to room A and <code>4</code> to get to room B, while the second space only requires <code>1</code> and <code>3</code> moves, respectively:</p>
<pre><code class="lang-haskell">hallRoomDistance :: A.Array (HallSpace, Room) Int
hallRoomDistance = A.array ((H1, RA), (H11, RD))
  [ ((H1, RA), 2), ((H1, RB), 4), ((H1, RC), 6), ((H1, RD), 8)
  , ((H2, RA), 1), ((H2, RB), 3), ((H2, RC), 5), ((H2, RD), 7)
  ...
  ]</code></pre>
<p>Here's what the complete array looks like:</p>
<pre><code class="lang-haskell">hallRoomDistance :: A.Array (HallSpace, Room) Int
hallRoomDistance = A.array ((H1, RA), (H11, RD))
  [ ((H1, RA), 2), ((H1, RB), 4), ((H1, RC), 6), ((H1, RD), 8)
  , ((H2, RA), 1), ((H2, RB), 3), ((H2, RC), 5), ((H2, RD), 7)
  , ((H4, RA), 1), ((H4, RB), 1), ((H4, RC), 3), ((H4, RD), 5)
  , ((H6, RA), 3), ((H6, RB), 1), ((H6, RC), 1), ((H6, RD), 3)
  , ((H8, RA), 5), ((H8, RB), 3), ((H8, RC), 1), ((H8, RD), 1)
  , ((H10, RA), 7), ((H10, RB), 5), ((H10, RC), 3), ((H10, RD), 1)
  , ((H11, RA), 8), ((H11, RB), 6), ((H11, RC), 4), ((H11, RD), 2)
  ]</code></pre>
<p>Now calculating the cost is fairly straightforward. We get the distance to the room, add the slot within the room, and then multiply this by the power multiplier.</p>
<pre><code class="lang-haskell">getCost :: (MonadLogger m) =&gt; GraphState -&gt; GraphState -&gt; m Int
getCost _ gs = if lastMove gs == NoMove
  then return 0
  else do
    let (Move token hs (rm, slot) _) = lastMove gs
    let mult = tokenPower A.! token
    let distance = slot + hallRoomDistance A.! (hs, rm)
    return $ mult * distance</code></pre>
<h2 id="finishing-the-graph-state">Finishing the Graph State</h2>
<p>Our solution is starting to take on a bit more shape, but we need to complete our <code>GraphState</code> type before we can make further progress. But now armed with the notion of a <code>Token</code>, we can fill in the remaining fields that describe it. Each room has a list of tokens that are currently residing there. And then each hall space either has a token there or not, so we have <code>Maybe Token</code> fields for them.</p>
<pre><code class="lang-haskell">data GraphState = GraphState
  { lastMove :: Move
  , roomsFull :: Int
  , roomA :: [Token]
  , roomB :: [Token]
  , roomC :: [Token]
  , roomD :: [Token]
  , hall1 :: Maybe Token
  , hall2 :: Maybe Token
  , hall4 :: Maybe Token
  , hall6 :: Maybe Token
  , hall8 :: Maybe Token
  , hall10 :: Maybe Token
  , hall11 :: Maybe Token
  }
  deriving (Show, Eq, Ord)</code></pre>
<p>Sometimes it will be useful for us to access parts of the state in a general way. We might want a function to access &quot;one of the rooms&quot; or &quot;one of the hall spaces&quot;. Some day, I might revise my solution to use proper Haskell &quot;Lenses&quot;, which would be ideal for this problem. But for now we'll define a couple simple type aliases for a <code>RoomLens</code> to access the tokens in a general room, and a <code>HallLens</code> for looking at a general hall space.</p>
<pre><code class="lang-haskell">type RoomLens = GraphState -&gt; [Token]
type HallLens = GraphState -&gt; Maybe Token</code></pre>
<p>One last piece of boilerplate we'll want will be to have &quot;split lists&quot; for each room. Each of these is a tuple of two lists. The first list is the hall spaces to the &quot;left&quot; of that room, and the second has the hall spaces to the &quot;right&quot; of the room.</p>
<p>These lists will help us answer questions like, &quot;how many empty hall spaces can we move to from this room moving left?&quot;, or &quot;what is the first token to the right of this room?&quot; For these to be useful, each hall space should also include the &quot;lens&quot; into the <code>GraphState</code>, so we can examine what token lives there.</p>
<p>For example, room A has <code>H2</code> and <code>H1</code> to its left (in that order), and then <code>H4</code>, <code>H6</code>, <code>H8</code>, <code>H10</code> and <code>H11</code> to its right. We'll match each <code>HallSpace</code> with its <code>HallLens</code>, so <code>H1</code> combines with the <code>hall1</code> field from <code>GraphState</code>, and so on.</p>
<pre><code class="lang-haskell">aSplits :: ([(HallLens, HallSpace)], [(HallLens, HallSpace)])
aSplits =
  ( [(hall2, H2), (hall1, H1)]
  , [(hall4, H4), (hall6, H6), (hall8, H8), (hall10, H10), (hall11, H11)]
  )</code></pre>
<p>Here's what the rest of those look like:</p>
<pre><code class="lang-haskell">bSplits :: ([(HallLens, HallSpace)], [(HallLens, HallSpace)])
bSplits =
  ( [(hall4, H4), (hall2, H2), (hall1, H1)]
  , [(hall6, H6), (hall8, H8), (hall10, H10), (hall11, H11)]
  )

cSplits :: ([(HallLens, HallSpace)], [(HallLens, HallSpace)])
cSplits =
  ( [(hall6, H6), (hall4, H4), (hall2, H2), (hall1, H1)]
  , [(hall8, H8), (hall10, H10), (hall11, H11)]
  )

dSplits :: ([(HallLens, HallSpace)], [(HallLens, HallSpace)])
dSplits =
  ( [(hall8, H8), (hall6, H6), (hall4, H4), (hall2, H2), (hall1, H1)]
  , [(hall10, H10), (hall11, H11)]
  )</code></pre>
<p>It would be easy enough to use a common function with <code>splitAt</code> to describe all of these. But once again, we'll reference these many times throughout the solution, so using constants instead of requiring function logic could help make our code faster.</p>
<h2 id="moves-from-a-particular-room">Moves from a Particular Room</h2>
<p>Now it's time for the third and largest piece of the puzzle: calculating the &quot;next&quot; states, or the &quot;neighboring&quot; states of a particular graph state. This means determining what moves are possible from a particular position. This is a complex problem that we'll have to keep breaking down into smaller and smaller parts.</p>
<p>We can first observe that every move involves one room and the hallway - there are no moves from room to room. So we can divide the work by considering all the moves concerning <em>one particular room</em>. Then there are three cases for each room:</p>
<ol>
<li>The room is complete; it is full of the appropriate token.</li>
<li>The room is empty or partially full of the appropriate token.</li>
<li>The room has mismatched tokens inside.</li>
</ol>
<p>In case 1, we'll propose no moves involving this room. In case 2, we will try to find the appropriate token in the hall and bring it into the room (from either direction). In case 3, we will consider all the ways to move a token <em>out</em> of the room.</p>
<p>We'll do all this in a general function <code>roomMoves</code>. This function needs to know the room size, the appropriate token for the room, the appropriate <em>lens</em> for accessing the room, and finally, the split list corresponding to the room. This leads to a long type signature, but each parameter has its role:</p>
<pre><code class="lang-haskell">roomMoves ::
  (MonadLogger m) =&gt;
  Int -&gt;
  Token -&gt;
  Room -&gt;
  RoomLens -&gt;
  ([(HallLens, HallSpace)], [(HallLens, HallSpace)]) -&gt;
  GraphState -&gt;
  m [GraphState]
roomMoves rs tok rm roomLens splits gs = ...</code></pre>
<p>For <code>getNeighbors</code>, all we have to do is invoke this function once for each room and combine the results.</p>
<pre><code class="lang-haskell">getNeighbors :: (MonadLogger m) =&gt; Int -&gt; GraphState -&gt; m [GraphState]
getNeighbors rs gs = do
  arm &lt;- roomMoves rs A RA roomA aSplits gs
  brm &lt;- roomMoves rs B RB roomB bSplits gs
  crm &lt;- roomMoves rs C RC roomC cSplits gs
  drm &lt;- roomMoves rs D RD roomD dSplits gs
  return $ arm &lt;&gt; brm &lt;&gt; crm &lt;&gt; drm</code></pre>
<p>Now back to <code>roomMoves</code>. Let's start by defining the three cases mentioned above. The first case is easy to complete.</p>
<pre><code class="lang-haskell">roomMoves rs tok rm roomLens splits gs 
  | roomLens gs == replicate rs tok = return []
  | all (== tok) (roomLens gs) = ...
  | otherwise = ...</code></pre>
<p>Now let's consider the second case. We want to search each direction from this room to try to find a hall space containing the matching token. We can do this with a recursive helper function. In the base case, we're out of hall spaces to search, so we return <code>Nothing</code>:</p>
<pre><code class="lang-haskell">findX :: Token -&gt; GraphState -&gt; [(HallLens, HallSpace)] -&gt; Maybe HallSpace
findX _ _ [] = Nothing
findX tok gs ((lens, space) : rest) = ...</code></pre>
<p>Then there are three simple cases for what to do with the next space. If we have an instance of the token, return the space. If we have a different token, the answer is <code>Nothing</code> (we are blocked). If there is no token there, we continue the search recursively.</p>
<pre><code class="lang-haskell">findX :: Token -&gt; GraphState -&gt; [(HallLens, HallSpace)] -&gt; Maybe HallSpace
findX _ _ [] = Nothing
findX tok gs ((lens, space) : rest)
  | lens gs == Just tok = Just space
  | isJust (lens gs) = Nothing
  | otherwise = findX tok gs rest</code></pre>
<p>Using our split lists, we can find the potential spaces on the left and the right by applying our <code>findX</code> helper.</p>
<pre><code class="lang-haskell">roomMoves rs tok rm roomLens splits gs 
  | roomLens gs == replicate rs tok = return []
  | all (== tok) (roomLens gs) = do
    let maybeLeft = findX tok gs (fst splits)
        maybeRight = findX tok gs (snd splits)
        halls = catMaybes [maybeLeft, maybeRight]
        ...
  | otherwise = ...</code></pre>
<p>For right now, let's just worry about constructing the <code>Move</code> object. Later on, we'll fill out a function to apply this move:</p>
<pre><code class="lang-haskell">applyHallMove :: Int -&gt; Token -&gt; RoomLens -&gt; GraphState -&gt; Move -&gt; GraphState</code></pre>
<p>So to finish the case, we get the &quot;slot&quot; number to move to by considering the length of the room currently. Then we construct the <code>Move</code>, and apply it against our two possible outcomes.</p>
<pre><code class="lang-haskell">roomMoves rs tok rm roomLens splits gs 
  | roomLens gs == replicate rs tok = return []
  | all (== tok) (roomLens gs) = do
    let maybeLeft = findX tok gs (fst splits)
        maybeRight = findX tok gs (snd splits)
        halls = catMaybes [maybeLeft, maybeRight]
        slot = rs - length (roomLens gs)
        moves = map (\h -&gt; Move tok h (rm, slot) False) halls
    return $ map (applyHallMove rs tok roomLens gs) moves
  | otherwise = ...</code></pre>
<h2 id="moves-out-of-the-room">Moves Out of the Room</h2>
<p>Now let's consider the third case - moving a token out of a room. This requires finding as many consecutive &quot;empty&quot; hall spaces in each direction as we can. This will be another recursive helper like <code>findX</code>:</p>
<pre><code class="lang-haskell">findEmptyHalls :: GraphState -&gt; [(HallLens, HallSpace)] -&gt; [HallSpace] -&gt; [HallSpace]
findEmptyHalls _ [] accum = accum
findEmptyHalls gs ((lens, space) : rest) accum = ...</code></pre>
<p>Once we hit a <code>Just</code> token value in the graph state, we can return our accumulated list. But otherwise we keep recursing.</p>
<pre><code class="lang-haskell">findEmptyHalls :: GraphState -&gt; [(HallLens, HallSpace)] -&gt; [HallSpace] -&gt; [HallSpace]
findEmptyHalls _ [] accum = accum
findEmptyHalls gs ((lens, space) : rest) accum = if isJust (lens gs) then accum
  else findEmptyHalls gs rest (space : accum)</code></pre>
<p>Now we can apply this back in our <code>roomMoves</code> function with both sides of the <code>splits</code>.</p>
<pre><code class="lang-haskell">roomMoves rs tok rm roomLens splits gs 
  | roomLens gs == replicate rs tok = return []
  | all (== tok) (roomLens gs) = ...
  | otherwise = do
    let (topRoom : restRoom) = roomLens gs
        halls = findEmptyHalls gs (fst splits) [] &lt;&gt; findEmptyHalls gs (snd splits) []
        ...</code></pre>
<p>Once again then, we calculate the &quot;slot&quot; value and construct the new move using each of the hall spaces. Notice that the slot calculation is different. We want to subtract the length of the &quot;rest&quot; of the room from the room size, since this gives the appropriate slot value.</p>
<pre><code class="lang-haskell">roomMoves rs tok rm roomLens splits gs 
  | roomLens gs == replicate rs tok = return []
  | all (== tok) (roomLens gs) = ...
  | otherwise = do
    let (topRoom : restRoom) = roomLens gs
        halls = findEmptyHalls gs (fst splits) [] &lt;&gt; findEmptyHalls gs (snd splits) []
        slot = rs - length restRoom
        moves = map (\h -&gt; Move topRoom h (rm, slot) True) halls
    ...</code></pre>
<p>Then, as before, we'll assume we have a helper to &quot;apply&quot; the move, and return the new graph states. Notice this time, we set the move flag as <code>True</code>, since the move is coming <em>out</em> of the room.</p>
<pre><code class="lang-haskell">applyRoomMove :: GraphState -&gt; Token -&gt; Move -&gt; GraphState
applyRoomMove = ...

roomMoves rs tok rm roomLens splits gs 
  | roomLens gs == replicate rs tok = return []
  | all (== tok) (roomLens gs) = ...
| otherwise = do
    let (topRoom : restRoom) = roomLens gs
        halls = findEmptyHalls gs (fst splits) [] &lt;&gt; findEmptyHalls gs (snd splits) []
        slot = rs - length restRoom
        moves = map (\h -&gt; Move topRoom h (rm, slot) True) halls
    return $ map (applyRoomMove gs tok) moves</code></pre>
<p>Now let's work on these two &quot;apply&quot; helpers. Each will take the current state and the <code>Move</code> and construct the new <code>GraphState</code>.</p>
<h2 id="applying-moves">Applying moves</h2>
<p>We'll start by applying the move <em>from</em> the room. Of course, for the <code>NoMove</code> case, we return the original state.</p>
<pre><code class="lang-haskell">applyRoomMove :: GraphState -&gt; Move -&gt; GraphState
applyRoomMove gs NoMove = gs
applyRoomMove gs m@(Move token h (rm, slot) _) = ...</code></pre>
<p>Now with all our new information, we'll update the <code>GraphState</code> in two stages, because this will require two case statements. First, we'll update the hall space to contain the moved token. We'll also place the move <code>m</code> into the <code>lastMove</code> spot.</p>
<pre><code class="lang-haskell">applyRoomMove :: GraphState -&gt; Move -&gt; GraphState
applyRoomMove gs NoMove = gs
applyRoomMove gs m@(Move token h (rm, slot) _) =
  let gs2 = case h of
        H1 -&gt; gs {hall1 = Just token, lastMove = m}
        H2 -&gt; gs {hall2 = Just token, lastMove = m}
        H4 -&gt; gs {hall4 = Just token, lastMove = m}
        H6 -&gt; gs {hall6 = Just token, lastMove = m}
        H8 -&gt; gs {hall8 = Just token, lastMove = m}
        H10 -&gt; gs {hall10 = Just token, lastMove = m}
        H11 -&gt; gs {hall11 = Just token, lastMove = m}
  in  ...</code></pre>
<p>Now we need to modify the room to drop the top token. Unfortunately, we can't actually use a <code>RoomLens</code> argument in conjunction with record syntax updating, so this needs to be a case statement as well. With <a href="https://hackage.haskell.org/package/lens">proper lenses</a>, we could probably simplify this.</p>
<pre><code class="lang-haskell">applyRoomMove :: GraphState -&gt; Token -&gt; Move -&gt; GraphState
applyRoomMove gs roomToken NoMove = gs
applyRoomMove gs roomToken m@(Move token h (rm, slot) _) =
  let gs2 = case h of
        H1 -&gt; gs {hall1 = Just token, lastMove = m}
        H2 -&gt; gs {hall2 = Just token, lastMove = m}
        H4 -&gt; gs {hall4 = Just token, lastMove = m}
        H6 -&gt; gs {hall6 = Just token, lastMove = m}
        H8 -&gt; gs {hall8 = Just token, lastMove = m}
        H10 -&gt; gs {hall10 = Just token, lastMove = m}
        H11 -&gt; gs {hall11 = Just token, lastMove = m}
  in  case rm of
    RA -&gt; gs2 { roomA = tail (roomA gs)}
    RB -&gt; gs2 { roomB = tail (roomB gs)}
    RC -&gt; gs2 { roomC = tail (roomC gs)}
    RD -&gt; gs2 { roomD = tail (roomD gs)}</code></pre>
<p>That's all for applying a move from the room. Applying a move from the hall into the room is similar. But we have the extra task of determining if the destination room is now complete. So in this case we actually can make use of the <code>RoomLens</code>.</p>
<pre><code class="lang-haskell">applyHallMove :: Int -&gt; RoomLens -&gt; GraphState -&gt; Move -&gt; GraphState
applyHallMove rs roomLens gs NoMove = gs
applyHallMove rs roomLens gs m@(Move token h (rm, slot) _) = ...</code></pre>
<p>As before, we start by updating the hall space (now it's <code>Nothing</code>) and the <code>lastMove</code> field. We'll also update the <code>finishedCount</code> on this update step.</p>
<pre><code class="lang-haskell">applyHallMove :: Int -&gt; RoomLens -&gt; GraphState -&gt; Move -&gt; GraphState
applyHallMove rs roomLens gs NoMove = gs
applyHallMove rs roomLens gs m@(Move token h (rm, slot) _) =
  let gs2 = case h of
        H1 -&gt; gs {hall1 = Nothing, lastMove = m, roomsFull = finishedCount}
        H2 -&gt; gs {hall2 = Nothing, lastMove = m, roomsFull = finishedCount}
        H4 -&gt; gs {hall4 = Nothing, lastMove = m, roomsFull = finishedCount}
        H6 -&gt; gs {hall6 = Nothing, lastMove = m, roomsFull = finishedCount}
        H8 -&gt; gs {hall8 = Nothing, lastMove = m, roomsFull = finishedCount}
        H10 -&gt; gs {hall10 = Nothing, lastMove = m, roomsFull = finishedCount}
        H11 -&gt; gs {hall11 = Nothing, lastMove = m, roomsFull = finishedCount}
  in  ...
  where
    finishedCount = ...</code></pre>
<p>How do we implement the <code>finishedCount</code>? It's not too difficult. We can easily assess if it's finished by checking the <code>roomLens</code> on the original state and seeing if it's equal to &quot;Room Size minus 1&quot;. Then the finished count increments if this is true.</p>
<pre><code class="lang-haskell">applyHallMove :: Int -&gt; RoomLens -&gt; GraphState -&gt; Move -&gt; GraphState
applyHallMove rs roomLens gs NoMove = gs
applyHallMove rs roomLens gs m@(Move token h (rm, slot) _) =
  let gs2 = case h of
        H1 -&gt; gs {hall1 = Nothing, lastMove = m, roomsFull = finishedCount}
        H2 -&gt; gs {hall2 = Nothing, lastMove = m, roomsFull = finishedCount}
        H4 -&gt; gs {hall4 = Nothing, lastMove = m, roomsFull = finishedCount}
        H6 -&gt; gs {hall6 = Nothing, lastMove = m, roomsFull = finishedCount}
        H8 -&gt; gs {hall8 = Nothing, lastMove = m, roomsFull = finishedCount}
        H10 -&gt; gs {hall10 = Nothing, lastMove = m, roomsFull = finishedCount}
        H11 -&gt; gs {hall11 = Nothing, lastMove = m, roomsFull = finishedCount}
  in  ...
  where
    finished = length (roomLens gs) == rs - 1
    finishedCount = if finished then roomsFull gs + 1 else roomsFull gs</code></pre>
<p>Now we do the same concluding step as the room move, except this time we're adding the token to the room instead of removing it.</p>
<pre><code class="lang-haskell">applyHallMove :: Int -&gt; RoomLens -&gt; GraphState -&gt; Move -&gt; GraphState
applyHallMove rs roomLens gs NoMove = gs
applyHallMove rs roomLens gs m@(Move token h (rm, slot) _) =
  let gs2 = case h of
        H1 -&gt; gs {hall1 = Nothing, lastMove = m, roomsFull = finishedCount}
        H2 -&gt; gs {hall2 = Nothing, lastMove = m, roomsFull = finishedCount}
        H4 -&gt; gs {hall4 = Nothing, lastMove = m, roomsFull = finishedCount}
        H6 -&gt; gs {hall6 = Nothing, lastMove = m, roomsFull = finishedCount}
        H8 -&gt; gs {hall8 = Nothing, lastMove = m, roomsFull = finishedCount}
        H10 -&gt; gs {hall10 = Nothing, lastMove = m, roomsFull = finishedCount}
        H11 -&gt; gs {hall11 = Nothing, lastMove = m, roomsFull = finishedCount}
  in case rm of
    RA -&gt; gs2 {roomA = A : roomA gs}
    RB -&gt; gs2 {roomB = B : roomB gs}
    RC -&gt; gs2 {roomC = C : roomC gs}
    RD -&gt; gs2 {roomD = D : roomD gs}
  where
    finished = length (roomLens gs) == rs - 1
    finishedCount = if finished then roomsFull gs + 1 else roomsFull gs</code></pre>
<h2 id="making-the-initial-state">Making the Initial State</h2>
<p>That's the conclusion of the algorithm functions; now we just need some glue, such as the initial states and pulling it all together. For the first time with our Advent of Code problems, we don't actually need to parse an input file. We could go through this process, but the &quot;hard&quot; input is still basically the same size, so we can just define these initial states in code.</p>
<p>Let's recall that our basic case looks like this:</p>
<pre><code>#############
#...........#
###B#C#B#D###
  #A#D#C#A#
  #########</code></pre><p>We'll translate it into an initial state as:</p>
<pre><code class="lang-haskell">initialState1 :: GraphState
initialState1 = GraphState
  NoMove 0 [B, A] [C, D] [B, C] [D, A]
  Nothing Nothing Nothing Nothing Nothing Nothing Nothing</code></pre>
<p>Our slightly harder version has the same structure, just with letters in more unusual places.</p>
<pre><code class="lang-haskell">{-
#############
#...........#
###C#A#D#D###
  #B#A#B#C#
  #########
-}

initialState2 :: GraphState
initialState2 = GraphState
  NoMove 0 [C, B] [A, A] [D, B] [D, C]
  Nothing Nothing Nothing Nothing Nothing Nothing Nothing</code></pre>
<p>Now for the &quot;hard&quot; part of the problem, we increase the room size to 4, and insert additional characters into each room. This is what those states look like.</p>
<pre><code class="lang-haskell">initialState3 :: GraphState
initialState3 = GraphState
  NoMove 0 [B, D, D, A] [C, C, B, D] [B, B, A, C] [D, A, C, A]
  Nothing Nothing Nothing Nothing Nothing Nothing Nothing

initialState4 :: GraphState
initialState4 = GraphState
  NoMove 0 [C, D, D, B] [A, C, B, A] [D, B, A, B] [D, A, C, C]
  Nothing Nothing Nothing Nothing Nothing Nothing Nothing</code></pre>
<h2 id="solving-the-problem">Solving the Problem</h2>
<p>Now we can &quot;solve&quot; each of the problems. Our solution code is essentially the same for each side. The &quot;hard&quot; part just passes <code>4</code> as the room size. </p>
<pre><code class="lang-haskell">solveDay23Easy :: GraphState -&gt; IO (Maybe Int)
solveDay23Easy gs = runStdoutLoggingT $ do
   result &lt;- dijkstraM (getNeighbors 2) getCost isComplete gs
   case result of
    Nothing -&gt; return Nothing
    Just (d, path) -&gt; return $ Just d

solveDay23Hard :: GraphState -&gt; IO (Maybe Int)
solveDay23Hard gs = runStdoutLoggingT $ do
   result &lt;- dijkstraM (getNeighbors 4) getCost isComplete gs
   case result of
    Nothing -&gt; return Nothing
    Just (d, path) -&gt; return $ Just d</code></pre>
<p>And now our code is complete! We can run it and the total distance. It actually turns out to require less energy for the second case in each group:</p>
<pre><code>First  Size-2: 12521
Second Size-2: 10526
First  Size-4: 44169
Second Size-4: 41284</code></pre><p>It's also possible, if we want, to print out the &quot;path&quot; we took by considering the moves in each state!</p>
<pre><code class="lang-haskell">solveDay23Easy :: GraphState -&gt; IO (Maybe Int)
solveDay23Easy gs = runStdoutLoggingT $ do
   result &lt;- dijkstraM (getNeighbors 2) getCost isComplete gs
   case result of
    Nothing -&gt; return Nothing
    Just (d, path) -&gt; do
      forM_ path $ \gs' -&gt; logDebugN (pack . show $ lastMove gs')
      return $ Just d</code></pre>
<p>Here's the path we take for this simple version! Remember that <code>True</code> moves come from the room into the hall, and <code>False</code> moves go from the hall back into the room.</p>
<pre><code>[Debug] Move D H10 (RD,1) True
[Debug] Move A H2 (RD,2) True
[Debug] Move B H4 (RC,1) True
[Debug] Move C H6 (RB,1) True
[Debug] Move C H6 (RC,1) False
[Debug] Move D H8 (RB,2) True
[Debug] Move D H8 (RD,2) False
[Debug] Move D H10 (RD,1) False
[Debug] Move B H4 (RB,2) False
[Debug] Move B H4 (RA,1) True
[Debug] Move B H4 (RB,1) False
[Debug] Move A H2 (RA,1) False</code></pre><p>As a final note, the scale of the search is fairly large but by no means intractable. My solution doesn't give an instant answer, but it returns within a minute or so.</p>
<h2 id="conclusion">Conclusion</h2>
<p>That is all for our review of Advent of Code 2021! We'll have the video walkthrough later in the week. And then in a couple weeks, we'll be ready to start Advent of Code 2022, so stay tuned for that!</p>
<p>If you've enjoyed these tutorials, make sure to <a href="https://www.mmhaskell.com/subscribe">subscribe</a> to our mailing list! We've got a big offer coming up next week that you won't want to miss!</p></div>
    </summary>
    <updated>2022-11-15T03:30:00Z</updated>
    <published>2022-11-15T03:30:00Z</published>
    <author>
      <name>James Bowen</name>
    </author>
    <source>
      <id>https://mmhaskell.com/blog/</id>
      <link href="https://mmhaskell.com/blog/" rel="alternate" type="text/html">
      <link href="https://mmhaskell.com/blog?format=rss" rel="self" type="application/rss+xml">
      <title>Blog - Monday Morning Haskell</title>
      <updated>2022-11-17T02:30:51Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://tweag.io/blog/2022-11-15-unrolling-with-typeclasses/</id>
    <link href="https://tweag.io/blog/2022-11-15-unrolling-with-typeclasses/" rel="alternate" type="text/html">
    <title>Staged programming with typeclasses</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Staged programming consists of evaluating parts of a program at compile time
for greater efficiency at runtime, as some computations would have already been
executed or made more efficient during compilation. The poster child for
staged programming is the exponential function: to compute <code class="language-text">a^b</code>, if <code class="language-text">b</code> is
known at compile time, <code class="language-text">a^b</code> can be replaced by <code class="language-text">b</code> explicit
multiplications. Staged programming allows you to write
<code class="language-text">a^5</code>, but have the expression compile to <code class="language-text">a*a*a*a*a</code>.</p>
<p>In Haskell, the traditional way to do staged programming is to
<a href="https://www.youtube.com/watch?v=AzJVFkm42zM">reach for Template Haskell</a>. Template Haskell
is, after all, designed for this purpose and gives you strong
guarantees that the produced code is indeed <code class="language-text">a*a*a*a*a</code>, as
desired. On the other hand it does feel a little heavyweight and
programmers, in practice, tend to avoid exposing Template Haskell in
their interfaces.</p>
<p>In this blog post, I want to present another way to do staged programming that
is more lightweight, and feels more like a native Haskell solution, but, in
exchange, offers fewer guarantees. At its core, what is needed for staged
programming is to distinguish between what is statically known and what is
dynamically known. In Template Haskell, static and dynamic information is
classified by whether an expression is within a quotation or not. But there is
another way to signal statically-known information in Haskell: types.</p>
<p>This is what we are going to do in this blog post: passing
statically-known arguments at the type level. I’ve
<a href="https://hackage.haskell.org/package/linear-base-0.2.0/docs/Data-Replicator-Linear.html#v:elim">used this technique in linear-base</a>.</p>
<h2 id="natural-numbers-at-the-type-level"><a class="anchor before" href="https://www.tweag.io/rss.xml#natural-numbers-at-the-type-level"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Natural numbers at the type level</h2>
<p>Haskell offers a native kind <code class="language-text">Nat</code> of type-level natural numbers. We
could pass the (statically known) exponent as <code class="language-text">Nat</code>, in fact we
eventually will, but it is difficult to consume numbers of kind <code class="language-text">Nat</code>
because GHC doesn’t know enough about them (for instance, GHC doesn’t
know that <code class="language-text">n+1</code> is equivalent to <code class="language-text">1+n</code>).</p>
<p>Instead, we will use an inductive encoding of the natural numbers:
<a href="https://wiki.haskell.org/Peano_numbers">the Peano encoding</a>.</p>
<div class="gatsby-highlight"><pre class="language-haskell"><code class="language-haskell"><span class="token keyword">data</span> <span class="token constant">Peano</span>
  <span class="token operator">=</span> <span class="token constant">Z</span>         <span class="token comment">-- zero</span>
  <span class="token operator">|</span> <span class="token constant">S</span> <span class="token constant">Peano</span>   <span class="token comment">-- successor of another peano number</span></code></pre></div>
<p>In this encoding, 3 is written <code class="language-text">S (S (S Z))</code>.</p>
<p>Normally, <code class="language-text">Peano</code> would live at the type level, and both <code class="language-text">Z</code> and <code class="language-text">S</code> would
live at the term level (they’re data constructors after all). But thanks to
the <code class="language-text">DataKinds</code> extension – which allows data constructors to be promoted to
types – we can also use <code class="language-text">Peano</code> as the kind of type-level <code class="language-text">Z</code> and <code class="language-text">S</code>.</p>
<p>Now let’s return to the <code class="language-text">power</code> function. We will first create a typeclass
<code class="language-text">RecurseOnPeano</code>, that will contain the <code class="language-text">power</code> function (and that could host
any other recursive metaprogramming function that operates on <code class="language-text">Peano</code>s):</p>
<div class="gatsby-highlight"><pre class="language-haskell"><code class="language-haskell"><span class="token keyword">class</span> <span class="token constant">RecurseOnPeano</span> <span class="token punctuation">(</span><span class="token hvariable">n</span> <span class="token operator">::</span> <span class="token constant">Peano</span><span class="token punctuation">)</span> <span class="token keyword">where</span>
  <span class="token hvariable">power</span> <span class="token operator">::</span> <span class="token constant">Int</span> <span class="token operator">-&gt;</span> <span class="token constant">Int</span></code></pre></div>
<p>The <code class="language-text">power</code> function only needs one term-level parameter: the number that will
be multiplied by itself <code class="language-text">n</code> times. Indeed, the exponent is already “supplied”
as a type-level parameter <code class="language-text">n</code>. In fact, the signature of the <code class="language-text">power</code> function
outside the typeclass would be:</p>
<div class="gatsby-highlight"><pre class="language-haskell"><code class="language-haskell"><span class="token hvariable">power</span> <span class="token operator">::</span> <span class="token hvariable">forall</span> <span class="token punctuation">(</span><span class="token hvariable">n</span> <span class="token operator">::</span> <span class="token constant">Peano</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token constant">RecurseOnPeano</span> <span class="token hvariable">n</span> <span class="token operator">=&gt;</span> <span class="token constant">Int</span> <span class="token operator">-&gt;</span> <span class="token constant">Int</span></code></pre></div>
<p>At a call site, the type-level parameter <code class="language-text">n</code> will be supplied to the function
through a <em>type application</em>, using the dedicated <code class="language-text">@</code> symbol (e.g.
<code class="language-text">power @(S (S Z)) 4</code>). It isn’t possible to omit the type parameter <code class="language-text">n</code> at a
call site because there is no way for GHC to deduce it from the type of a
term-level parameter of the function. So we need to enable the
<code class="language-text">AllowAmbiguousTypes</code> extension.</p>
<p>The implementation of the <code class="language-text">power</code> function will be defined through two
instances of the <code class="language-text">RecurseOnPeano</code> typeclass – one for the base case (<code class="language-text">n = Z</code>),
and one for the recursive case (<code class="language-text">n = S n'</code>) – as one would do in a term-level
recursive function.</p>
<p>The first instance is relatively straightforward as <code class="language-text">x^0 = 1</code> for every
positive integer <code class="language-text">x</code>:</p>
<div class="gatsby-highlight"><pre class="language-haskell"><code class="language-haskell"><span class="token keyword">instance</span> <span class="token constant">RecurseOnPeano</span> <span class="token constant">Z</span> <span class="token keyword">where</span>
  <span class="token hvariable">power</span> <span class="token hvariable">_</span> <span class="token operator">=</span> <span class="token number">1</span></code></pre></div>
<p>For the second instance we want to write <code class="language-text">power @(S n) x = x * power @n x</code>. But
to use <code class="language-text">power @n x</code>, <code class="language-text">n</code> needs to fulfill the <code class="language-text">RecurseOnPeano</code> constraint too.
In the end, that yields:</p>
<div class="gatsby-highlight"><pre class="language-haskell"><code class="language-haskell"><span class="token keyword">instance</span> <span class="token constant">RecurseOnPeano</span> <span class="token hvariable">n</span> <span class="token operator">=&gt;</span> <span class="token constant">RecurseOnPeano</span> <span class="token punctuation">(</span><span class="token constant">S</span> <span class="token hvariable">n</span><span class="token punctuation">)</span> <span class="token keyword">where</span>
  <span class="token hvariable">power</span> <span class="token hvariable">x</span> <span class="token operator">=</span> <span class="token hvariable">x</span> <span class="token operator">*</span> <span class="token hvariable">power</span> <span class="token operator">@</span><span class="token hvariable">n</span> <span class="token hvariable">x</span></code></pre></div>
<p>We now have a first working example:</p>
<div class="gatsby-highlight"><pre class="language-haskell"><code class="language-haskell"><span class="token comment">-- &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; file CompileRecurse.hs &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>

<span class="token comment">{-# LANGUAGE KindSignatures #-}</span>
<span class="token comment">{-# LANGUAGE TypeApplications #-}</span>
<span class="token comment">{-# LANGUAGE DataKinds #-}</span>
<span class="token comment">{-# LANGUAGE ScopedTypeVariables  #-}</span>
<span class="token comment">{-# LANGUAGE AllowAmbiguousTypes #-}</span>
<span class="token keyword">module</span> <span class="token constant">CompileRecurse</span> <span class="token keyword">where</span>
<span class="token import-statement"><span class="token keyword">import</span> GHC<span class="token punctuation">.</span>TypeLits</span>

<span class="token keyword">data</span> <span class="token constant">Peano</span> <span class="token operator">=</span> <span class="token constant">Z</span> <span class="token operator">|</span> <span class="token constant">S</span> <span class="token constant">Peano</span>

<span class="token keyword">class</span> <span class="token constant">RecurseOnPeano</span> <span class="token punctuation">(</span><span class="token hvariable">n</span> <span class="token operator">::</span> <span class="token constant">Peano</span><span class="token punctuation">)</span> <span class="token keyword">where</span>
  <span class="token hvariable">power</span> <span class="token operator">::</span> <span class="token constant">Int</span> <span class="token operator">-&gt;</span> <span class="token constant">Int</span>

<span class="token keyword">instance</span> <span class="token constant">RecurseOnPeano</span> <span class="token constant">Z</span> <span class="token keyword">where</span>
  <span class="token hvariable">power</span> <span class="token hvariable">_</span> <span class="token operator">=</span> <span class="token number">1</span>
  <span class="token comment">{-# INLINE power #-}</span>
<span class="token keyword">instance</span> <span class="token constant">RecurseOnPeano</span> <span class="token hvariable">n</span> <span class="token operator">=&gt;</span> <span class="token constant">RecurseOnPeano</span> <span class="token punctuation">(</span><span class="token constant">S</span> <span class="token hvariable">n</span><span class="token punctuation">)</span> <span class="token keyword">where</span>
  <span class="token hvariable">power</span> <span class="token hvariable">x</span> <span class="token operator">=</span> <span class="token hvariable">x</span> <span class="token operator">*</span> <span class="token hvariable">power</span> <span class="token operator">@</span><span class="token hvariable">n</span> <span class="token hvariable">x</span>
  <span class="token comment">{-# INLINE power #-}</span>

<span class="token comment">-- &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; file Main.hs &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>

<span class="token comment">{-# LANGUAGE TypeApplications #-}</span>
<span class="token comment">{-# LANGUAGE DataKinds #-}</span>
<span class="token keyword">module</span> <span class="token constant">Main</span> <span class="token keyword">where</span>
<span class="token import-statement"><span class="token keyword">import</span> CompileRecurse</span>

<span class="token hvariable">main</span> <span class="token operator">::</span> <span class="token constant">IO</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token hvariable">main</span> <span class="token operator">=</span> <span class="token builtin">print</span> <span class="token operator">$</span> <span class="token hvariable">power</span> <span class="token operator">@</span><span class="token punctuation">(</span><span class="token constant">S</span> <span class="token punctuation">(</span><span class="token constant">S</span> <span class="token punctuation">(</span><span class="token constant">S</span> <span class="token constant">Z</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token number">2</span>  <span class="token comment">-- this should print 8</span></code></pre></div>
<p>Many languages extensions are required for this example to work:</p>
<ul>
<li><code class="language-text">KindSignatures</code> permits the syntax <code class="language-text">(n :: Peano)</code> to restrict the
<code class="language-text">RecurseOnPeano</code> class to types of the <code class="language-text">Peano</code> kind.</li>
<li><code class="language-text">TypeApplications</code> gives the <code class="language-text">@type</code> syntax to supply type-level parameters.</li>
<li><code class="language-text">DataKinds</code> allows us to promote the <code class="language-text">Peano</code> data type to the kind level.</li>
<li><code class="language-text">ScopedTypeVariables</code> is needed to be able to refer to <code class="language-text">n</code> in the body of
<code class="language-text">power</code> in the second instance of <code class="language-text">RecurseOnPeano</code>.</li>
<li><code class="language-text">AllowAmbiguousTypes</code> is needed when we declare a typeclass function in
which the term-level parameters (if there are any) are not sufficient to
infer the type-level parameters (and thus require an explicit type
application at the call site).</li>
</ul>
<p>I also added <code class="language-text">{-# INLINE #-}</code> pragmas on the <code class="language-text">power</code> implementations, because
we indeed want GHC to inline these to achieve our initial goal. For such a
simple example, GHC would inline them by default, but it’s better to be
explicit about our intent here.</p>
<p>You can now validate that the <code class="language-text">power @(S (S (S Z))) 2</code> encoding for <code class="language-text">2^3</code>
indeed prints <code class="language-text">8</code> on the terminal.</p>
<h2 id="from-peano-type-level-integers-to-ghc-nats"><a class="anchor before" href="https://www.tweag.io/rss.xml#from-peano-type-level-integers-to-ghc-nats"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>From <code class="language-text">Peano</code> type-level integers to GHC <code class="language-text">Nat</code>s</h2>
<p>Writing <code class="language-text">S (S (S Z))</code> is not very convenient. We would definitely prefer to
write <code class="language-text">3</code> instead. And that is possible, if we allow a bit more complexity in
our code.</p>
<p>Number literals, such as <code class="language-text">3</code>, when used at the type level are of kind <code class="language-text">Nat</code>
from <code class="language-text">GHC.TypeLits</code>.</p>
<p>Unfortunately, if we completely replace our home-made <code class="language-text">Peano</code>s with GHC <code class="language-text">Nat</code>s,
we will run into some issues of overlapping instances in the <code class="language-text">RecurseOnPeano</code>
typeclass.<sup id="fnref-1"><a class="footnote-ref" href="https://www.tweag.io/rss.xml#fn-1">1</a></sup></p>
<p>A solution can be found by using the <code class="language-text">{-# OVERLAPPING #-}</code> and
<code class="language-text">{-# OVERLAPPABLE #-}</code> pragmas, but it is quite fragile: instance selection is
no longer driven by types or structure but rather by a manual override. And
<a href="https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/instances.html#extension-OverlappingInstances">the rules for such an override</a> are rather complex,
especially when more than two instances are involved; in the case at hand, we
might want to add a third instance with a specific implementation for <code class="language-text">n = 1</code>.</p>
<p>Instead, we will add a type family (that is, a function from types to types) to
convert from <code class="language-text">Nat</code>s to <code class="language-text">Peano</code>s, and add an auxiliary function <code class="language-text">power'</code> that
will take a type-level <code class="language-text">Nat</code> instead of a type-level <code class="language-text">Peano</code>:</p>
<div class="gatsby-highlight"><pre class="language-haskell"><code class="language-haskell"><span class="token comment">-- &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; add to file CompileRecurse.hs &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>

<span class="token comment">{-# LANGUAGE TypeOperators #-}</span>
<span class="token comment">{-# LANGUAGE TypeFamilies #-}</span>
<span class="token comment">{-# LANGUAGE UndecidableInstances #-}</span>
<span class="token comment">{-# LANGUAGE FlexibleContexts #-}</span>

<span class="token keyword">type</span> <span class="token hvariable">family</span> <span class="token constant">NatToPeano</span> <span class="token hvariable">n</span> <span class="token keyword">where</span>
  <span class="token constant">NatToPeano</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token constant">Z</span>
  <span class="token constant">NatToPeano</span> <span class="token hvariable">n</span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token punctuation">(</span><span class="token constant">NatToPeano</span> <span class="token punctuation">(</span><span class="token hvariable">n</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">-- 'RecurseOnPeano (NatToPeano n) =&gt;' means that the ¨Peano equivalent of n</span>
<span class="token comment">-- must be an instance of RecurseOnPeano to get access to 'power'</span>
<span class="token hvariable">power'</span> <span class="token operator">::</span> <span class="token hvariable">forall</span> <span class="token punctuation">(</span><span class="token hvariable">n</span> <span class="token operator">::</span> <span class="token constant">Nat</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token punctuation">(</span><span class="token constant">RecurseOnPeano</span> <span class="token punctuation">(</span><span class="token constant">NatToPeano</span> <span class="token hvariable">n</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">Int</span> <span class="token operator">-&gt;</span> <span class="token constant">Int</span>
<span class="token hvariable">power'</span> <span class="token operator">=</span> <span class="token hvariable">power</span> <span class="token operator">@</span><span class="token punctuation">(</span><span class="token constant">NatToPeano</span> <span class="token hvariable">n</span><span class="token punctuation">)</span>

<span class="token comment">-- &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; change in file Main.hs &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>

<span class="token hvariable">main</span> <span class="token operator">=</span> <span class="token builtin">print</span> <span class="token operator">$</span> <span class="token hvariable">power'</span> <span class="token operator">@</span><span class="token number">3</span> <span class="token number">2</span>  <span class="token comment">-- this should still print 8</span></code></pre></div>
<p>Our function is still working as expected, and is now more convenient to use!</p>
<h2 id="a-look-under-the-hood"><a class="anchor before" href="https://www.tweag.io/rss.xml#a-look-under-the-hood"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>A look under the hood</h2>
<p>Our initial goal was to unroll the <code class="language-text">power'</code> function at compile
time. Let’s check whether this promise holds.</p>
<p>We will create a new test file <code class="language-text">test/CompileRecurseTests.hs</code> and set specific
GHC options so that we can take a look at the generated Core<sup id="fnref-2"><a class="footnote-ref" href="https://www.tweag.io/rss.xml#fn-2">2</a></sup> code for our
project:</p>
<div class="gatsby-highlight"><pre class="language-haskell"><code class="language-haskell"><span class="token comment">{-# OPTIONS_GHC -O -ddump-simpl -dsuppress-all -dsuppress-uniques -ddump-to-file #-}</span>
<span class="token comment">{-# LANGUAGE TypeApplications #-}</span>
<span class="token comment">{-# LANGUAGE DataKinds #-}</span>
<span class="token keyword">module</span> <span class="token constant">Main</span> <span class="token keyword">where</span>

<span class="token import-statement"><span class="token keyword">import</span> CompileRecurse</span>

<span class="token hvariable">myFunc</span> <span class="token operator">::</span> <span class="token constant">Int</span> <span class="token operator">-&gt;</span> <span class="token constant">Int</span>
<span class="token hvariable">myFunc</span> <span class="token hvariable">x</span> <span class="token operator">=</span> <span class="token hvariable">power'</span> <span class="token operator">@</span><span class="token number">3</span> <span class="token hvariable">x</span> <span class="token operator">+</span> <span class="token number">1</span>

<span class="token hvariable">main</span> <span class="token operator">::</span> <span class="token constant">IO</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token hvariable">main</span> <span class="token operator">=</span> <span class="token builtin">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div>
<p>The following GHC flags are used:</p>
<ul>
<li><code class="language-text">-O</code> enables optimizations in GHC.</li>
<li><code class="language-text">-ddump-simpl</code> requests the Core code after the output of the simplifier.</li>
<li><code class="language-text">-dsuppress-all</code> and <code class="language-text">-dsuppress-uniques</code> reduce the verbosity of the output
(otherwise, searching for a specific piece of code would become very
tedious).</li>
<li>Finally, <code class="language-text">-ddump-to-file</code> asks for the output to be written to a file in the
build directory.</li>
</ul>
<p>With the above options, compiling and running the test suite creates a
file <code class="language-text">CompileRecurseTests.dump-simpl</code> deep down in the build tree.<sup id="fnref-3"><a class="footnote-ref" href="https://www.tweag.io/rss.xml#fn-3">3</a></sup>
If we ignore all the lines about <code class="language-text">$trModule</code>, we get:</p>
<div class="gatsby-highlight"><pre class="language-text"><code class="language-text">-- RHS size: {terms: 12, types: 3, coercions: 0, joins: 0/0}
myFunc
  = \ x -&gt; case x of { I# x1 -&gt; I# (+# (*# x1 (*# x1 x1)) 1#) }</code></pre></div>
<p><code class="language-text">I#</code> is the “boxing” constructor for integers, that is, the one taking an
unboxed integer (<code class="language-text">Int#</code>) and creating a Haskell <code class="language-text">Int</code> (an integer behind a
pointer). <code class="language-text">+#</code> and <code class="language-text">*#</code> are the equivalent of arithmetic functions <code class="language-text">+</code> and <code class="language-text">*</code>
for unboxed integers <code class="language-text">Int#</code>.</p>
<p>We can see that <code class="language-text">myFunc</code></p>
<ul>
<li>takes an <code class="language-text">Int</code>,</li>
<li>unboxes its value,</li>
<li>makes the 2 product operations corresponding to the inlined <code class="language-text">power' @3 x</code>,</li>
<li>adds <code class="language-text">1</code>, and finally,</li>
<li>boxes the result once again to produce an <code class="language-text">Int</code>.</li>
</ul>
<p>There is no mention of <code class="language-text">power'</code> here, so the function has been successfully
inlined!</p>
<h2 id="inspection-testing"><a class="anchor before" href="https://www.tweag.io/rss.xml#inspection-testing"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Inspection testing</h2>
<p>Checking manually whether or not the inlining has happened – by looking
through the <code class="language-text">.dump-simpl</code> file after every change – is really impractical.
Instead, it is possible to use the <a href="https://hackage.haskell.org/package/tasty-inspection-testing"><code class="language-text">inspection-testing</code></a>
and <a href="https://hackage.haskell.org/package/inspection-testing"><code class="language-text">tasty-inspection-testing</code></a> libraries to
automate such a process.</p>
<p>To do this, we simply need to introduce a function <code class="language-text">myFunc'</code> – corresponding to
what we expect to be the optimized and inlined form of <code class="language-text">myFunc</code> – and then we
check that both <code class="language-text">myFunc</code> and <code class="language-text">myFunc'</code> result in the same generated Core code
by using the specific <code class="language-text">===</code> comparison operator (and a little bit of Template
Haskell too):</p>
<div class="gatsby-highlight"><pre class="language-haskell"><code class="language-haskell"><span class="token comment">{-# OPTIONS_GHC -O -dno-suppress-type-signatures -fplugin=Test.Tasty.Inspection.Plugin #-}</span>
<span class="token comment">{-# LANGUAGE TypeApplications #-}</span>
<span class="token comment">{-# LANGUAGE DataKinds #-}</span>
<span class="token comment">{-# LANGUAGE TemplateHaskell #-}</span>

<span class="token keyword">module</span> <span class="token constant">Main</span> <span class="token keyword">where</span>

<span class="token import-statement"><span class="token keyword">import</span> Test<span class="token punctuation">.</span>Tasty</span>
<span class="token import-statement"><span class="token keyword">import</span> Test<span class="token punctuation">.</span>Tasty<span class="token punctuation">.</span>Inspection</span>
<span class="token import-statement"><span class="token keyword">import</span> CompileRecurse</span>

<span class="token hvariable">myFunc</span> <span class="token operator">::</span> <span class="token constant">Int</span> <span class="token operator">-&gt;</span> <span class="token constant">Int</span>
<span class="token hvariable">myFunc</span> <span class="token hvariable">x</span> <span class="token operator">=</span> <span class="token hvariable">power'</span> <span class="token operator">@</span><span class="token number">3</span> <span class="token hvariable">x</span> <span class="token operator">+</span> <span class="token number">1</span>

<span class="token hvariable">myFunc'</span> <span class="token operator">::</span> <span class="token constant">Int</span> <span class="token operator">-&gt;</span> <span class="token constant">Int</span>
<span class="token hvariable">myFunc'</span> <span class="token hvariable">x</span> <span class="token operator">=</span> <span class="token hvariable">x</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token hvariable">x</span> <span class="token operator">*</span> <span class="token hvariable">x</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>

<span class="token hvariable">main</span> <span class="token operator">::</span> <span class="token constant">IO</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token hvariable">main</span> <span class="token operator">=</span> <span class="token hvariable">defaultMain</span> <span class="token operator">.</span> <span class="token hvariable">testGroup</span> <span class="token string">&quot;Inspection testing of power'&quot;</span> <span class="token operator">$</span>
  <span class="token punctuation">[</span> <span class="token operator">$</span><span class="token punctuation">(</span><span class="token hvariable">inspectTest</span> <span class="token operator">$</span> '<span class="token hvariable">myFunc</span> <span class="token operator">===</span> '<span class="token hvariable">myFunc'</span><span class="token punctuation">)</span> <span class="token punctuation">]</span></code></pre></div>
<p>Running the test suite gives:</p>
<div class="gatsby-highlight"><pre class="language-text"><code class="language-text">Inspection testing of power'
  myFunc === myFunc': OK

All 1 tests passed (0.01s)</code></pre></div>
<p>If both functions didn’t result in the same generated Core code – e.g. if we
wrote <code class="language-text">(x * x) * x + 1</code> instead of <code class="language-text">x * (x * x) + 1</code> in <code class="language-text">myFunc'</code> – we would
get:</p>
<div class="gatsby-highlight"><pre class="language-text"><code class="language-text">Inspection testing of power'
  myFunc === myFunc': FAIL
    LHS:
        [ ... ]
        myFunc
          = \ (x [Dmd=&lt;S,1*U(U)&gt;] :: Int) -&gt;
              case x of { I# x1 -&gt; I# (+# (*# x1 (*# x1 x1)) 1#) }
    RHS:
        [ ... ]
        myFunc'
          = \ (x [Dmd=&lt;S,1*U(U)&gt;] :: Int) -&gt;
              case x of { I# x -&gt; I# (+# (*# (*# x x) x) 1#) }

1 out of 1 tests failed (0.01s)
typeclass-blogpost&gt; Test suite inspection-tests failed</code></pre></div>
<p>In this way, the correct inlining of <code class="language-text">power'</code> can be checked automatically
after each change to the codebase!</p>
<h2 id="conclusion"><a class="anchor before" href="https://www.tweag.io/rss.xml#conclusion"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Conclusion</h2>
<p>This was a brief introduction to staged programming in Haskell, leveraging the
type (and typeclass) system as a lightweight alternative to Template Haskell.
The technique detailed in this article has been implemented in real-world
contexts to create variadic functions like <a href="https://hackage.haskell.org/package/base-4.17.0.0/docs/Text-Printf.html#v:printf"><code class="language-text">printf</code></a>,
and I hope that you will find many other useful applications for it!</p>
<p>I would like to give a special thank you to Arnaud Spiwack who both taught me
this technique in the first place, and then helped me to greatly improve this blog
post.</p>


<div class="footnotes">
<hr>
<ol>
<li id="fn-1">In short, this is because GHC can’t distinguish between the base and
recursive instances with <code class="language-text">Nat</code>s as easily as it can with <code class="language-text">Peano</code>s<a class="footnote-backref" href="https://www.tweag.io/rss.xml#fnref-1">↩</a></li>
<li id="fn-2">Core is the main intermediate language used inside GHC.<a class="footnote-backref" href="https://www.tweag.io/rss.xml#fnref-2">↩</a></li>
<li id="fn-3">In my case, the full path was:
<code class="language-text">.stack-work/dist/x86_64-linux-nix/Cabal-3.4.1.0/build/compile-recurse-tests/compile-recurse-tests-tmp/test/CompileRecurseTests.dump-simpl</code>.<a class="footnote-backref" href="https://www.tweag.io/rss.xml#fnref-3">↩</a></li>
</ol>
</div></div>
    </summary>
    <updated>2022-11-15T00:00:00Z</updated>
    <published>2022-11-15T00:00:00Z</published>
    <source>
      <id>https://tweag.io</id>
      <author>
        <name>Tweag I/O</name>
      </author>
      <link href="https://tweag.io" rel="alternate" type="text/html">
      <link href="http://www.tweag.io/rss.xml" rel="self" type="application/rss+xml">
      <subtitle>Scale your engineering power. We enable deep-tech startups to achieve
their vision, from research to product delivery.</subtitle>
      <title>Tweag - Engineering blog</title>
      <updated>2022-11-17T06:35:57Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>https://www.snoyman.com/blog/why-my-video-calls-sucked/</id>
    <link href="https://www.snoyman.com/blog/why-my-video-calls-sucked/" rel="alternate" type="text/html">
    <title>Why my video calls sucked (and how I fixed it)</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>A few years ago, I <a href="https://www.snoyman.com/blog/2019/06/my-new-home-network-setup/">wrote a blog post</a> about how I set up the networking in our house following some major construction. I was really excited about how much better the internet would be. No more WiFi dead zones, and a wired connection to my computer to provide extra speed and stability to my office. Overall, the results were great. Speed test anywhere in my house showed I was getting the full 500mbps promised by my cable company. However, not everything was working as expected:</p>
<ul>
<li>Video calls stuttered, a lot. The most egregious and confusing behavior was that, during a call, I would continue to see the video moving while people went silent for between 10 and 20 seconds.</li>
<li>My kids complained off-and-on about problems in online games (Minecraft in this case), and had trouble talking with friends over Discord audio chat.</li>
</ul>
<p>If you're looking for a summary &quot;try this if you're having trouble,&quot; here are my three recommendations:</p>
<ul>
<li>Diagnosis: try tethering to your smartphone instead of using the internet in your house and see if the behavior is better. You'll almost certainly have slower speeds, but video calls and gaming may be more consistent.</li>
<li>Stop gap measure: try running a VPN of some kind and see if that improves the situation. One possibility is trying out <a href="https://1.1.1.1/">Cloudflare Warp</a>. This helped significantly for me, but wasn't perfect.</li>
<li>Real fix for the underlying problem: buy a new router, connect it to the modem/router from your Internet Service Provider (ISP), and put the modem into bridge mode.</li>
</ul>
<p>The rest of this blog post will try to explain what the problem is. We're going to get into the technicals, but I'm hoping the content will make sense to anyone with basic experience on the internet, not just networking engineers.</p>
<p>Finally, it's worth calling out two coworkers for their involvement in this story. First is Niklas HambÃ¼chen, who years ago warned me of the perils of ISP-provided routers. I should have listened to him then. The second is Neil Mayhew, who not only helped me debug this along the way, but also accidentally gave me the clue I needed to isolate the problem.</p>
<h2 id="analyzing-the-problem">Analyzing the problem</h2>
<p>If you're suffering from the problems I describe above, it can be <em>incredibly</em> frustrating. Not only do video calls turn into a source of endless pain and miscommunication, but no one will believe you. Call the ISP, and they'll tell you your speed tests are fine. Same with hardware manufacturers, operating systems, and the video software itself in most cases. Nothing sees the problem. You know something is broken, but you're essentially told you're crazy.</p>
<p>The big hints to me that <em>something</em> more complicated was happening under the surface was which things worked well and which didn't. Watch some videos online? No problem at all. Browse websites? Fine. Massive downloads (pretty common in my line of work)? Incredibly fast. The fact that calls and gaming were broken was the first indication something was weird.</p>
<p>The final puzzle piece hit a few weeks ago. The aforementioned Neil had told me for a while how great VR gaming was, especially a game called Echo Arena, and so we ordered an Oculus. I loaded up the game, went into the lobby... and timed out. I tried that a few more times, and it kept happening. Then I tried using my phone as a mobile hotspot, and the game worked perfectly.</p>
<p>Before I explain why that was so important, we have to talk about a few lower level details of networks.</p>
<h2 id="packets-addresses-and-ports">Packets, addresses, and ports</h2>
<p>We often use terms like &quot;connecting&quot; to a website. In a physical sense, that doesn't happen. When I go to YouTube.com, I don't have a physical cable, radio signal, or any other physical manifestation of a connection between my computer and some computer at YouTube headquarters. Instead, the way the internet works is a series of computers that connect to each other and pass data around to each other. This is known as <em>routing</em>.</p>
<p>Every computer on a network has an Internet Protocol (IP) address. These are numbers that look like 192.168.54.32. You've probably seen them at some point. The basic idea of routing traffic is I say to the next computer in the line &quot;hey, I want to talk to a computer with that address.&quot; The next computer may have connections to 5 other computers, and it knows which of those computers is closest to that IP address. It figures this out using a routing table. The data then &quot;hops&quot; from that computer to the next one, from there to another computer, and so on until it reaches its destination.</p>
<p>But like I said, there aren't any &quot;connections.&quot; Instead, internet traffic is made up of a bunch of &quot;packets.&quot; You can think of these as envelopes. They have an IP address on the outside, and a small amount of data inside. When you &quot;connect&quot; to another computer, you're actually sending a bunch of these packets over the network. The computers in the middle route your traffic by looking at the outside of the envelope (called the <em>header</em>). And your packets make it to their destination.</p>
<p>One other thing to keep in mind. Each computer can talk to lots of other computers at the same time. Each computer may provide different ways to talk to it (known as <em>protocols</em>, such as the web, or email, or video calling). To allow a single computer to do all these things at the same time, we have one more important number: the port number. This is a number between 1 and 65,536, and tells the computer which &quot;connection&quot; traffic is trying to use. When you send a packet, your header includes the destination IP address and destination port number. It also includes the source IP address and source port number. This allows the other computer to respond to you.</p>
<h2 id="packet-loss-udp-and-tcp">Packet loss, UDP, and TCP</h2>
<p>OK, one more topic to learn. There are actual physical mechanisms that control networks. It could be a network cable, a WiFi signal, a statelite connection to Starlink, or the 4G cellular signal on your phone. They all share one thing in common: they can lose data. Maybe you're driving through a tunnel and the cell signal is interrupted. Maybe you live in my neighborhood, and the cable company still hasn't properly protected their cables from water and you lose internet every time it rains. Whatever the case, and for whatever reason, it's entirely possible to lose some of the data. This is known as <em>packet loss</em>.</p>
<p>There are two basic approaches in networking to dealing with packet loss, each with their own advantages and disadvantages.</p>
<ul>
<li>User Datagram Protocol, or UDP, is a protocol that works as a &quot;fire and forget&quot; message. I send data to the other side, and I have no guarantees of if it arrived or the order it will arrive in (maybe packet 513 will get there before packet 512). Maybe the same packet will get received multiple times. No one knows.</li>
<li>Transmission Control Protocol, or TCP, is what people normally think of as a &quot;connection&quot; on the internet. TCP adds a bunch of bookkeeping rules to address the limitations of UDP. It makes sure packets arrive in the correct order, resending them if they didn't get to the other side. It makes sure the order of packets is correct. And it lets you know if the other side breaks the connection.</li>
</ul>
<p>You may be wondering: why in the world would anyone ever use UDP? It sounds terrible! Overall, TCP is more commonly used for sure, because most people need those guarantees most of the time. But there are some use cases where UDP is far superior. (And finally this weird tangent will connect back to the beginning of the blog post.) UDP is great when:</p>
<ul>
<li>You don't actually need every single bit of data to arrive on the other side.</li>
<li>You care much more about raw speed than other factors.</li>
</ul>
<p>There are two great examples of this:</p>
<ol>
<li>Audio calls! It turns out that if you take a stream of audio, you can break it down into a whole bunch of tiny data packets containing a slice of time. Then you can send them over the network. If one of those packets is lost, the other side can usually understand what you said from all the other audio packets. And having to add in the delays imposed by TCP to ensure all the data arrives would impose more delays, causing audio calls to become &quot;laggy,&quot; or to be more technical, would introduce <em>latency</em>.</li>
<li>Gaming. In lots of video games, we don't need to have every single bit of data about what the user did. There are ways to write gaming protocols that say things like &quot;don't tell me the user pressed up for 5 seconds, tell me their new position.&quot; If one of those updates gets lost, it's no big deal, the next update will give the newer position. You may &quot;glitch&quot; a bit in the game and jump around, but again, overall, the speed is more important than every piece of data.</li>
</ol>
<p>There are other examples of UDP being superior, but I won't bother covering them here, because now we know enough to see what was happening in my house.</p>
<h2 id="what-s-in-a-router">What's in a router?</h2>
<p>It turns out that Echo Arena, that game I tried playing, was communicating with the server over UDP. And for whatever reason, it was more sensitive to the breakage in my house than other things like video calls and Minecraft. It turns out, the router in our house was mishandling UDP packets.</p>
<p>Most people get a router from their cable, DSL, or fiberoptic company when they pay them for internet access. But this device generally is <em>not</em> just a router. It's actually doing three different jobs most of the time, and we need to separate those out:</p>
<ul>
<li><em>Modem</em>. The term modem means a device that converts one kind of physical connection into a network connection. Cable modems, for example, convert the TV cable wires already running into your house into a network signal, something they weren't originally designed for. Fiber modems will convert the fiberoptic light-based signals into a network signal. DSL does the same with phone lines. Even old-school dial-up modems are simply using audio over the phone line for the same purpose.</li>
<li><em>Wireless access point</em>. You can connect to your &quot;router&quot; by plugging in a network cable to the back and connecting that to your computer. But most people these days are using a WiFi signal instead. A wireless access point is the translator between WiFi signals and your wired network. In the case of your modem/wireless router combo, it's built into the device, but you <em>could</em> use an external one. (And this is a great way to extend the range of your wireless network if you need to.)</li>
</ul>
<p>And finally, we get to the router itself. There are two more things we need to learn about IP addresses:</p>
<ul>
<li>There are some IP addresses that have been reserved as &quot;private,&quot; meaning they can be used inside people's homes or businesses, but can't go on the internet. This includes anything that starts with <code>10.</code> or <code>192.168.</code>. If those look familiar... just wait a second, we'll get to it.</li>
<li>There are only 4 billion IP addresses possible. That may seem like a lot, but it turns out that it isn't nearly enough for all the people, servers, Internet of Things devices, and everything else that wants to be on the internet. We have an IP address shortage.
<ul>
<li>
<p>Side note: the current common IP address standard is called IPv4, and is what I'm referring to. There's a new standard, called IPv6, that totally solves this problem by introducing an insane number of addresses. To <a href="https://www.techtarget.com/whatis/feature/IPv6-addresses-how-many-is-that-in-numbers">get a sense of how big</a>:</p>
<blockquote>
<p>340,282,366,920,938,463,463,374,607,431,768,211,456, which is approximately 340 undecillion addresses...</p>
<p>So we could assign an IPV6 address to EVERY ATOM ON THE SURFACE OF THE EARTH, and still have enough addresses left to do another 100+ earths.</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<p>Unfortunately, IPv6 is having trouble taking off, so we're stuck with IPv4 and a shortage of IP addresses. And this is where your router comes in. Its job is to get a public IP address from your ISP, and then create a local network inside your house. It does this by a few different technologies:</p>
<ul>
<li>The router creates a private IP address for itself. This is commonly 192.168.0.1, or 192.168.1.1, or something along those lines.</li>
<li>It runs something called a DHCP server that lets other computers on the network ask for a new IP address and connection information. It will hand out private addresses like 192.168.1.27.</li>
<li>And finally, the part we care about the most: your router does <em>Network Address Translation</em>, or NAT, to convert your packets from private to public addresses.</li>
</ul>
<h2 id="what-s-in-a-nat">What's in a NAT?</h2>
<p>Let's break this down. Suppose you're trying to connect to a website like youtube.com. Your computer will look up (using a different system called DNS which I'm <em>not</em> covering right now) that website's IP address. For example, I just got the address 172.217.18.14 when looking up www.youtube.com. I want to connect to it as a secure website (HTTPS), and the standard port number for that is 443. My computer knows its own <em>private</em> IP address (let's say it's 192.168.1.27), and randomly chooses an unused port number (let's say 4001). Then my computer makes a packet that looks like:</p>
<ul>
<li>Destination IP: 172.217.18.14</li>
<li>Destination port: 443</li>
<li>Source IP: 192.168.1.27</li>
<li>Source port: 4001</li>
<li>Data: please start a TCP connection with me</li>
</ul>
<p>Then, it sends that packet to my router so the router can pass that packet on to the rest of the internet. However, as it stands right now, that packet will be blocked, because private IP addresses are not allowed on the internet. And that's a good thing, because <em>lots</em> of computers in the world have the IP address 192.168.1.27, and YouTube wouldn't know which comptuer to send it to.</p>
<p>Instead, the router translates the network address (e.g., NAT). The router has some public IP address it got from my ISP, let's say 82.20.63.76. It will then translate the header on the packet above to say:</p>
<ul>
<li>Source IP: 82.20.63.76</li>
<li>Source port: 54542 (we'll come back to why this is different in a moment)</li>
</ul>
<p>The router has to remember that it did this translation, and it sends off the packet to the internet. Eventually YouTube receives the request, processes it, and sends out a packet of its own that looks like this:</p>
<ul>
<li>Destination IP: 82.20.63.76</li>
<li>Destination port: 54542</li>
<li>Source IP: 172.217.18.14</li>
<li>Source port: 443</li>
<li>Data: OK, starting a TCP connection</li>
</ul>
<p>The router receives this packet, notices the destination port, and remembers &quot;hey, I remember that 192.168.1.27 should get these.&quot; It then replaces the destination IP and port with:</p>
<ul>
<li>Destination IP: 192.168.1.27</li>
<li>Destination port: 4001</li>
</ul>
<p>It then sends that data into the local network inside my house, where my computer receives it, and thinks it's talking directly to YouTube.</p>
<p>Side point: why did the router change from 4001 to 54542? Because other computers in my network may <em>also</em> be using source port 4001, and the router needs to distinguish which computer should receive these packets.</p>
<p>This is a horribly ugly hacky workaround for not having enough IP addresses. But it (mostly) works just fine, and the entire internet is built on it right now.</p>
<p>If you want to see evidence of this happening, check your local computers settings and see what IP address it thinks it has. Then compare with the number you get from https://whatsmyip.com/. That website is seeing the IP address from the router, not from your local computer, and so you'll almost certainly get two different numbers.</p>
<h2 id="about-that-mostly">About that &quot;mostly&quot;</h2>
<p>I said this all mostly works. Let's start with TCP. With TCP, there's a whole protocol of how to connect over TCP. The router understands this, looks at the headers and the data, and remembers the mapping between the original source IP/port and the new source port. Almost every router under the sun handles this situation really well.</p>
<p>Unfortunately, the situation isn't as good for UDP. That's because there's no real &quot;connection.&quot; UDP is just a bunch of packets. Good routers handle UDP really well, keep track of the mappings, and intelligently decide when a source port has been unused for long enough that it's allowed to forget about it.</p>
<p>And that brings me to my video call problems. The router included with the modem from my ISP sucks. It would forget about these mappings at the wrong time. The result would be that, in the middle of a call, the UDP packets carrying the audio from the other side would suddenly get &quot;stuck&quot; on the router and not get sent to my computer. Eventually, the router would remember a new port mapping and the call would resume. But I'd lose 10-20 seconds of audio while that happened.</p>
<p>For various technical reasons that I'm no expert at and aren't really relevant, the video data in calls often goes over TCP instead of UDP, and that's why I would continue to see the video move while people went silent.</p>
<p>Similarly, the kids could play Minecraft for a while before packet loss ensued and they'd get sent to &quot;limbo.&quot; Discord calls would work until they'd glitch for a bit. And finally, the final puzzle piece: Echo Arena detected the situation <em>much</em> faster than anything else and simply refused to play at all.</p>
<h2 id="the-solution">The solution</h2>
<p>With the problem identified, the solution is simple: don't use the router in the modem I got from my ISP. I bought a new router, plugged it into the modem, and switched the modem into &quot;bridge mode.&quot; This disables the router functionality in the modem. Now my shiny new modem got a public IP address and could send data directly to the internet. It's responsible for giving out IP addresses in my house and doing all the NAT work. And since it's a good router, it does this all correctly. With this device installed, video calls instantly became near-perfect, my kids stopped complaining about Minecraft, and I could play Echo Arena (which I still suck at, but hey, that's what I get for writing blog posts instead of practicing my video game skills).</p>
<p>In my case, I already had Wireless Access Points (WAPs) throughout the house, so I did <em>not</em> need a wireless router. Instead, I bought an ER605 from TP-Link. I've been very happy with the EAP245 WAPs I got from TP-Link before, and this is part of the same business class of devices. However, if you don't have your own WAPs, it's probably a better idea to get a wireless router, which includes both router and WAP functionality.</p>
<p>Anyway, I hope that explanation is helpful to someone else. When discussing with Neil, he pointed out how sad it is that many people in the world are probably affected by this crappy-internet problem and have no way of diagnosing it themselves. (Hell, I'm a network engineer and it took about three years for me to figure it out!) Good luck to all!</p></div>
    </summary>
    <updated>2022-11-14T00:00:00Z</updated>
    <published>2022-11-14T00:00:00Z</published>
    <source>
      <id>https://www.snoyman.com</id>
      <author>
        <name>Michael Snoyman</name>
      </author>
      <link href="https://www.snoyman.com" rel="alternate" type="text/html">
      <link href="https://www.snoyman.com/rss.xml" rel="self" type="application/rss+xml">
      <subtitle>Michael Snoyman's homepage and blog. Eclectic collection of programming (mostly Rust and Haskell) and lifting (weights, children, and monads).</subtitle>
      <title>Snoyberg - Michael Snoyman</title>
      <updated>2022-11-14T00:00:00Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-9757377.post-6336356683269033056</id>
    <link href="https://iohk.io/en/scotfest/" rel="related" title=" IO Scotfest: The Age of Voltaire - Nov 18-19" type="text/html">
    <link href="https://wadler.blogspot.com/feeds/6336356683269033056/comments/default" rel="replies" title="Post Comments" type="application/atom+xml">
    <link href="https://www.blogger.com/comment.g?blogID=9757377&amp;postID=6336356683269033056" rel="replies" title="0 Comments" type="text/html">
    <link href="https://www.blogger.com/feeds/9757377/posts/default/6336356683269033056" rel="edit" type="application/atom+xml">
    <link href="https://www.blogger.com/feeds/9757377/posts/default/6336356683269033056" rel="self" type="application/atom+xml">
    <link href="https://wadler.blogspot.com/2022/11/io-scotfest-age-of-voltaire-nov-18-19.html" rel="alternate" title=" IO Scotfest: The Age of Voltaire - Nov 18-19" type="text/html">
    <title>IO Scotfest: The Age of Voltaire - Nov 18-19</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><span color="rgba(0, 0, 0, 0.9)" face="-apple-system, system-ui, &quot;system-ui&quot;, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, &quot;Fira Sans&quot;, Ubuntu, Oxygen, &quot;Oxygen Sans&quot;, Cantarell, &quot;Droid Sans&quot;, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;, &quot;Lucida Grande&quot;, Helvetica, Arial, sans-serif" style="background-color: white; font-size: 14px; white-space: pre-wrap;"></span></p><div class="separator" style="clear: both; text-align: center;"><span color="rgba(0, 0, 0, 0.9)" face="-apple-system, system-ui, &quot;system-ui&quot;, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, &quot;Fira Sans&quot;, Ubuntu, Oxygen, &quot;Oxygen Sans&quot;, Cantarell, &quot;Droid Sans&quot;, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;, &quot;Lucida Grande&quot;, Helvetica, Arial, sans-serif" style="background-color: white; font-size: 14px; white-space: pre-wrap;"><a href="https://blogger.googleusercontent.com/img/a/AVvXsEhmQoHqXMpeyKxi2lDEOTmSbRkzpf-oV4f52XZvFAQNsy2ghhv86djR3jXLhfc57YSi_2guOFwvH2sWdGSiW8s53cRLeTZnAAkLs2jU4AhqtkHf41AJUVl1vNb3PZVhBqHQlhj2zWZEMYP_he_90EVb3pOitXnm-2HT_R1TkAtOSXYbBqp-zQ" style="margin-left: 1em; margin-right: 1em;"><img alt="" height="640" src="https://blogger.googleusercontent.com/img/a/AVvXsEhmQoHqXMpeyKxi2lDEOTmSbRkzpf-oV4f52XZvFAQNsy2ghhv86djR3jXLhfc57YSi_2guOFwvH2sWdGSiW8s53cRLeTZnAAkLs2jU4AhqtkHf41AJUVl1vNb3PZVhBqHQlhj2zWZEMYP_he_90EVb3pOitXnm-2HT_R1TkAtOSXYbBqp-zQ=w640-h640" width="640"></a></span></div><p></p><p><span color="rgba(0, 0, 0, 0.9)" face="-apple-system, system-ui, &quot;system-ui&quot;, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, &quot;Fira Sans&quot;, Ubuntu, Oxygen, &quot;Oxygen Sans&quot;, Cantarell, &quot;Droid Sans&quot;, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;, &quot;Lucida Grande&quot;, Helvetica, Arial, sans-serif" style="background-color: white; font-size: 14px; white-space: pre-wrap;">IOHK/IOG will be hosting a meeting at Edinburgh next week. Available online, plus an in-person meetup for folk near Edinburgh.</span></p><span color="rgba(0, 0, 0, 0.9)" face="-apple-system, system-ui, &quot;system-ui&quot;, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, &quot;Fira Sans&quot;, Ubuntu, Oxygen, &quot;Oxygen Sans&quot;, Cantarell, &quot;Droid Sans&quot;, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;, &quot;Lucida Grande&quot;, Helvetica, Arial, sans-serif" style="background-color: white; font-size: 14px; white-space: pre-wrap;"></span><blockquote><span color="rgba(0, 0, 0, 0.9)" face="-apple-system, system-ui, &quot;system-ui&quot;, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, &quot;Fira Sans&quot;, Ubuntu, Oxygen, &quot;Oxygen Sans&quot;, Cantarell, &quot;Droid Sans&quot;, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;, &quot;Lucida Grande&quot;, Helvetica, Arial, sans-serif" style="background-color: white; font-size: 14px; white-space: pre-wrap;">Let’s celebrate the dawning of a new era for </span><a class="link" href="https://www.linkedin.com/feed/hashtag/cardano?trk=public_post-text" target="_self">#Cardano</a><span color="rgba(0, 0, 0, 0.9)" face="-apple-system, system-ui, &quot;system-ui&quot;, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, &quot;Fira Sans&quot;, Ubuntu, Oxygen, &quot;Oxygen Sans&quot;, Cantarell, &quot;Droid Sans&quot;, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;, &quot;Lucida Grande&quot;, Helvetica, Arial, sans-serif" style="background-color: white; font-size: 14px; white-space: pre-wrap;"> together. Join us for a virtual event that will showcase the community’s achievements over the last 5 years &amp; discuss IOG’s vision for the future of Cardano. Learn more: </span><a class="link" href="https://lnkd.in/g2bzZEtR?trk=public_post-text" rel="nofollow" target="_self">https://lnkd.in/g2bzZEtR</a><span color="rgba(0, 0, 0, 0.9)" face="-apple-system, system-ui, &quot;system-ui&quot;, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, &quot;Fira Sans&quot;, Ubuntu, Oxygen, &quot;Oxygen Sans&quot;, Cantarell, &quot;Droid Sans&quot;, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;, &quot;Lucida Grande&quot;, Helvetica, Arial, sans-serif" style="background-color: white; font-size: 14px; white-space: pre-wrap;"> </span></blockquote><p> </p><span color="rgba(0, 0, 0, 0.9)" face="-apple-system, system-ui, &quot;system-ui&quot;, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, &quot;Fira Sans&quot;, Ubuntu, Oxygen, &quot;Oxygen Sans&quot;, Cantarell, &quot;Droid Sans&quot;, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;, &quot;Lucida Grande&quot;, Helvetica, Arial, sans-serif" style="background-color: white; font-size: 14px; white-space: pre-wrap;"></span></div>
    </content>
    <updated>2022-11-12T12:11:11Z</updated>
    <published>2022-11-12T12:09:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="Cryptocurrency"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="IOHK"/>
    <author>
      <name>Philip Wadler</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/12009347515095774366</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-9757377</id>
      <category term="Politics"/>
      <category term="Functional Programming"/>
      <category term="Programming Languages"/>
      <category term="Scotland"/>
      <category term="Computing"/>
      <category term="Independence"/>
      <category term="Yes!"/>
      <category term="Haskell"/>
      <category term="Academia"/>
      <category term="UK"/>
      <category term="Edinburgh"/>
      <category term="Cycling"/>
      <category term="Graphics"/>
      <category term="Mathematics"/>
      <category term="Science"/>
      <category term="Types"/>
      <category term="Logic"/>
      <category term="US"/>
      <category term="Covid-19"/>
      <category term="Security"/>
      <category term="Web"/>
      <category term="EU"/>
      <category term="Comics"/>
      <category term="Theory"/>
      <category term="Climate Change"/>
      <category term="Israel"/>
      <category term="Blockchain"/>
      <category term="Education"/>
      <category term="IOHK"/>
      <category term="Cryptocurrency"/>
      <category term="Internet"/>
      <category term="SIGPLAN"/>
      <category term="Scala"/>
      <category term="Status"/>
      <category term="University"/>
      <category term="Writing"/>
      <category term="ACM"/>
      <category term="Comedy"/>
      <category term="Concurrency"/>
      <category term="DSL"/>
      <category term="Databases"/>
      <category term="Dynamic and Static Typing"/>
      <category term="F#"/>
      <category term="Green"/>
      <category term="JavaScript"/>
      <category term="Lego"/>
      <category term="Privacy"/>
      <category term="Recursion"/>
      <category term="Session Types"/>
      <category term="Strange Loop"/>
      <category term="Agda"/>
      <category term="Category Theory"/>
      <category term="Developers"/>
      <category term="Formal Methods"/>
      <category term="Java"/>
      <category term="Object-Oriented"/>
      <category term="Technology"/>
      <category term="Architecture"/>
      <category term="Copyright"/>
      <category term="Distributed Computing"/>
      <category term="Europe"/>
      <category term="Productivity"/>
      <category term="Racket"/>
      <category term="Science Fiction"/>
      <category term="BLM"/>
      <category term="Brexit"/>
      <category term="DRM"/>
      <category term="Environment"/>
      <category term="Erlang"/>
      <category term="Finance"/>
      <category term="Gender"/>
      <category term="Theatre"/>
      <category term="BDS"/>
      <category term="Books"/>
      <category term="Cinema"/>
      <category term="Communication"/>
      <category term="Japan"/>
      <category term="Net Neutrality"/>
      <category term="Open Access"/>
      <category term="Palestine"/>
      <category term="Pyret"/>
      <category term="Scheme"/>
      <category term="Sweden"/>
      <author>
        <name>Philip Wadler</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/12009347515095774366</uri>
      </author>
      <link href="https://wadler.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml">
      <link href="https://www.blogger.com/feeds/9757377/posts/default?alt=atom" rel="self" type="application/atom+xml">
      <link href="https://wadler.blogspot.com/" rel="alternate" type="text/html">
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html">
      <link href="https://www.blogger.com/feeds/9757377/posts/default?alt=atom&amp;start-index=26&amp;max-results=25" rel="next" type="application/atom+xml">
      <title>Wadler's Blog</title>
      <updated>2022-11-12T12:12:37Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-US">
    <id>584219d403596e3099e0ee9b:58462c0e15d5db6feba171c0:6360af0ff40f6d334be8e91c</id>
    <link href="https://mmhaskell.com/blog/2022/11/10/zoomenhance-video-walkthrough" rel="alternate" type="text/html">
    <title>Zoom/Enhance Video Walkthrough</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p class="">Here’s our penultimate video walkthrough from Advent of Code 2021. Earlier this week was the <a href="https://www.mmhaskell.com/blog/2022/11/7/zoom-enhance">in-depth code writeup</a> for your perusal. The video is <a href="https://youtu.be/Gzqn5CaQF_8">here on YouTube</a>, and here’s the <a href="https://github.com/MondayMorningHaskell/AdventOfCode/blob/main/src/Day16.hs">code</a><a href="https://github.com/MondayMorningHaskell/AdventOfCode/blob/main/src/Day20.hs"> </a><a href="https://github.com/MondayMorningHaskell/AdventOfCode/blob/main/src/Day16.hs">on GitHub</a>!</p>




<p class="">If you’re enjoying this content, make sure to <a href="https://www.mmhaskell.com/subscribe">subscribe</a> to our monthly newsletter! Later this month you’ll also get access to some special offers on course content!</p></div>
    </summary>
    <updated>2022-11-10T15:30:00Z</updated>
    <published>2022-11-10T15:30:00Z</published>
    <author>
      <name>James Bowen</name>
    </author>
    <source>
      <id>https://mmhaskell.com/blog/</id>
      <link href="https://mmhaskell.com/blog/" rel="alternate" type="text/html">
      <link href="https://mmhaskell.com/blog?format=rss" rel="self" type="application/rss+xml">
      <title>Blog - Monday Morning Haskell</title>
      <updated>2022-11-17T02:30:51Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://tweag.io/blog/2022-11-10-learning-games-with-rllib/</id>
    <link href="https://tweag.io/blog/2022-11-10-learning-games-with-rllib/" rel="alternate" type="text/html">
    <title>Reinforcement Learning for Open Games</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>In this post we illustrate how we built <a href="https://github.com/Learning-Games/open-games-RLib">“Learning Games”</a>,
an integration between the <a href="https://github.com/philipp-zahn/open-games-hs"><code class="language-text">open-games-hs</code></a> framework and <a href="https://docs.ray.io/en/latest/rllib/index.html">rllib</a>,
in order to gain access to the entire Python ecosystem and train agents for games written in Haskell.</p>
<p><code class="language-text">open-games-hs</code> is a Haskell library and DSL for defining,
operating, and analyzing certain kinds of game-theoretic games. It comes
with a rich type theory and implementation that allows for the
specification of agent strategies as Haskell functions.</p>
<p>For some games, encoding strategies in Haskell is fairly simple. But one could
imagine another way: what if we could <em>learn</em> those strategies? Utilizing the
theories of reinforcement learning? Well, one idea might be to try and build
a series of algorithms in Haskell implementing these strategies; <em>or</em>, we
could try and connect the Learning Games ecosystem to the Python AI ecosystem,
and see if we can leverage both, at the same time!</p>
<p>In this post, we illustrate how we combined Learning Games and rllib to easily model games using Haskell while training agents with Python.</p>
<h2 id="running-example-the-prisoners-dilemma"><a class="anchor before" href="https://www.tweag.io/rss.xml#running-example-the-prisoners-dilemma"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Running example: The Prisoner’s Dilemma</h2>
<p>To keep things simple, we focus on a single game throughout the post, but, as we discuss at the end, the same approach we used for this game can be applied to a whole family of games.</p>
<p>Broadly speaking, the concept of a <a href="https://en.wikipedia.org/wiki/Prisoner%27s_dilemma"><em>Prisoner’s Dilemma</em></a> (PD) refers to a well-known paradoxical situation in which <a href="https://en.wikipedia.org/wiki/Rational_agent">“rational”</a> agents are incentivized to not cooperate with each other, even if it might be in their best interest to do so.</p>
<h3 id="game-description"><a class="anchor before" href="https://www.tweag.io/rss.xml#game-description"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Game description</h3>
<p>Two people (the potential “prisoners”, or “agents”), Agatha and Bibi, are thought to have committed a crime.
They are picked up and each is held in a holding cell.</p>
<p>They have no way to communicate with each other, and each has the option to either betray the other, or stay silent.
The possible outcomes, <strong>known by all parties</strong>, are:</p>
<ul>
<li>If both Agatha and Bibi betray one another, each of them serves two years.</li>
<li>If Agatha betrays Bibi but Bibi stays silent, Agatha serves nothing and Bibi serves three years.</li>
<li>If Agatha stays silent but Bibi betrays Agatha, Agatha serves three years and Bibi serves nothing.</li>
<li>If Agatha and Bibi both stay silent, each of them serves one year (on a lesser charge).</li>
</ul>
<h3 id="nash-equilibrium-vs-cooperative-solution"><a class="anchor before" href="https://www.tweag.io/rss.xml#nash-equilibrium-vs-cooperative-solution"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Nash equilibrium vs. cooperative solution</h3>
<p>This game has what is known as a <a href="https://en.wikipedia.org/wiki/Nash_equilibrium"><em>Nash equilibrium</em></a>: assuming that each agent has chosen their strategy, no agent can increase their expected payoff (i.e. reduce time served) assuming that the other agent keeps their strategy unchanged.
The equilibrium for this game is mutual betrayal, which is the best option from a “rational”, self-interested perspective: defecting always results in a better payoff than cooperating, regardless of the other player’s choice.
However, despite the unfavorable individual incentive to betray each other, the collectively better result would be for both agents to stay silent, so that they both serve a shorter sentence.</p>
<h3 id="iterated-variant"><a class="anchor before" href="https://www.tweag.io/rss.xml#iterated-variant"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Iterated variant</h3>
<p>A more interesting version of the game — known as the <em>iterated</em> prisoner’s dilemma — is that in which the game is played more than once in succession, and each agent remembers the previous moves of the other agent.
This is the variant of the game we experimented with, since it is amenable to reinforcement learning: agents can be trained so that they can play optimally against their opponent’s strategy and even learn to trust and cooperate with each other.
The latter is possible because the neural network can be trained and learn from historical data.</p>
<h2 id="prisoners-dilemma-as-an-open-game"><a class="anchor before" href="https://www.tweag.io/rss.xml#prisoners-dilemma-as-an-open-game"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Prisoner’s dilemma as an open game</h2>
<p>First, we encode the players’ actions using a Haskell datatype.
Using standard nomenclature, each agent can either <code class="language-text">Cooperate</code> (i.e. stay silent), or <code class="language-text">Defect</code> (i.e. betray):</p>
<div class="gatsby-highlight"><pre class="language-haskell"><code class="language-haskell"><span class="token keyword">data</span> <span class="token constant">Action</span> <span class="token operator">=</span> <span class="token constant">Cooperate</span> <span class="token operator">|</span> <span class="token constant">Defect</span></code></pre></div>
<p>Next, we implement the payoff calculation.
As is common when modelling this game, we use non-negative payoffs (i.e. rewards), as opposed to costs used in the original description of the game.
The possible values of <code class="language-text">(PayoffA, PayoffB)</code> are summarized as follows:</p>
<table>
<thead>
<tr>
<th/>
<th align="center">B stays silent</th>
<th align="center">B betrays A</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>A stays silent</strong></td>
<td align="center">(3, 3)</td>
<td align="center">(0, 5)</td>
</tr>
<tr>
<td><strong>A betrays B</strong></td>
<td align="center">(5, 0)</td>
<td align="center">(1, 1)</td>
</tr>
</tbody>
</table>
<p>The function below implements this table, computing the payoff for agent <code class="language-text">i</code>, given <code class="language-text">i</code>’s and <code class="language-text">j</code>’s actions.</p>
<div class="gatsby-highlight"><pre class="language-haskell"><code class="language-haskell"><span class="token hvariable">prisonersDilemmaMatrix</span> <span class="token operator">::</span> <span class="token constant">Action</span> <span class="token operator">-&gt;</span> <span class="token constant">Action</span> <span class="token operator">-&gt;</span> <span class="token constant">Double</span>
<span class="token hvariable">prisonersDilemmaMatrix</span> <span class="token constant">Cooperate</span> <span class="token constant">Cooperate</span> <span class="token operator">=</span> <span class="token number">3</span>
<span class="token hvariable">prisonersDilemmaMatrix</span> <span class="token constant">Cooperate</span> <span class="token constant">Defect</span>    <span class="token operator">=</span> <span class="token number">0</span>
<span class="token hvariable">prisonersDilemmaMatrix</span> <span class="token constant">Defect</span>    <span class="token constant">Cooperate</span> <span class="token operator">=</span> <span class="token number">5</span>
<span class="token hvariable">prisonersDilemmaMatrix</span> <span class="token constant">Defect</span>    <span class="token constant">Defect</span>    <span class="token operator">=</span> <span class="token number">1</span></code></pre></div>
<h3 id="game-specification"><a class="anchor before" href="https://www.tweag.io/rss.xml#game-specification"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Game specification</h3>
<p>Learning Games comes with <a href="https://github.com/philipp-zahn/open-games-hs/blob/0de997aca1de94003842365173aa530fb0c3fd4d/Tutorial/TUTORIAL.md">a tutorial</a> illustrating the semantics of the Template Haskell DSL in terms of <a href="https://en.wikipedia.org/wiki/String_diagram">string diagrams</a> and shows how to specify games using it.
Our intention in this post is not to explain this library in detail; for details please refer to the <a href="https://github.com/philipp-zahn/open-games-hs/blob/0de997aca1de94003842365173aa530fb0c3fd4d/Tutorial/TUTORIAL.md">Learning Games modelling tutorial</a>.
In this DSL, the prisoner’s dilemma looks like this:</p>
<div class="gatsby-highlight"><pre class="language-haskell"><code class="language-haskell"><span class="token hvariable">prisonersDilemma</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token hvariable">opengame</span><span class="token operator">|</span>
   <span class="token hvariable">inputs</span>    <span class="token operator">:</span>                                                        <span class="token punctuation">;</span>
   <span class="token hvariable">feedback</span>  <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token hvariable">payoff0</span><span class="token punctuation">,</span><span class="token hvariable">payoff1</span><span class="token punctuation">)</span>                                      <span class="token punctuation">;</span>
   <span class="token operator">:----------------------------:</span>
   <span class="token hvariable">inputs</span>    <span class="token operator">:</span>                                                        <span class="token punctuation">;</span>
   <span class="token hvariable">feedback</span>  <span class="token operator">:</span> <span class="token hvariable">payoff0</span>                                                <span class="token punctuation">;</span>
   <span class="token hvariable">operation</span> <span class="token operator">:</span> <span class="token hvariable">interactWithEnv</span>                                        <span class="token punctuation">;</span>
   <span class="token hvariable">outputs</span>   <span class="token operator">:</span> <span class="token hvariable">decisionPlayer0</span>                                        <span class="token punctuation">;</span>
   <span class="token hvariable">returns</span>   <span class="token operator">:</span> <span class="token hvariable">prisonersDilemmaMatrix</span> <span class="token hvariable">decisionPlayer0</span> <span class="token hvariable">decisionPlayer1</span> <span class="token punctuation">;</span>

   <span class="token hvariable">inputs</span>    <span class="token operator">:</span>                                                        <span class="token punctuation">;</span>
   <span class="token hvariable">feedback</span>  <span class="token operator">:</span> <span class="token hvariable">payoff1</span>                                                <span class="token punctuation">;</span>
   <span class="token hvariable">operation</span> <span class="token operator">:</span> <span class="token hvariable">interactWithEnv</span>                                        <span class="token punctuation">;</span>
   <span class="token hvariable">outputs</span>   <span class="token operator">:</span> <span class="token hvariable">decisionPlayer1</span>                                        <span class="token punctuation">;</span>
   <span class="token hvariable">returns</span>   <span class="token operator">:</span> <span class="token hvariable">prisonersDilemmaMatrix</span> <span class="token hvariable">decisionPlayer1</span> <span class="token hvariable">decisionPlayer0</span> <span class="token punctuation">;</span>
   <span class="token operator">:----------------------------:</span>
   <span class="token hvariable">outputs</span>   <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token hvariable">decisionPlayer0</span><span class="token punctuation">,</span> <span class="token hvariable">decisionPlayer1</span><span class="token punctuation">)</span>                     <span class="token punctuation">;</span>
   <span class="token hvariable">returns</span>   <span class="token operator">:</span>                                                        <span class="token punctuation">;</span>
  <span class="token operator">|</span><span class="token punctuation">]</span></code></pre></div>
<p>It describes the prisoner’s dilemma as the composition of two standalone sub-games.
Interestingly, each subgame needs to know the decision of the opponent to calculate its payoff (using the <code class="language-text">prisonersDilemmaMatrix</code> function).
We can represent this information flow graphically as follows:</p>
<p>
  <img src="https://www.tweag.io/5039bc8ec0d53db26f6c93f463a8ec65/pd-diagram.svg" width="49%">
</p>
<p>Given a <code class="language-text">strategy</code> of type <code class="language-text">List '[Action, Action]</code> (i.e. a <a href="https://github.com/Learning-Games/open-games-RLib/blob/68fb06636430a68d174a32983c0a7403148ff656/src/Engine/TLL.hs">heterogeneous list</a> containing the decisions of the first and the second agent), we can use the framework to run the game once and observe the resulting payoffs.</p>
<div class="gatsby-highlight"><pre class="language-haskell"><code class="language-haskell"><span class="token hvariable">extractPayoffAndNextState</span> <span class="token punctuation">(</span><span class="token hvariable">play</span> <span class="token hvariable">prisonersDilemma</span> <span class="token hvariable">strategy</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token operator">::</span> <span class="token constant">IO</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token constant">Double</span><span class="token punctuation">,</span> <span class="token constant">Double</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token constant">Action</span><span class="token punctuation">,</span> <span class="token constant">Action</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">-- (feedback, output)</span></code></pre></div>
<p>Note that, given we want to play the games step-by-step, we need to break games up so that, if they consist of several rounds, they output their internal state, and that state is then passed into the next game.
This is a technical limitation that we aim to clean up in subsequent work.</p>
<h2 id="the-game-server"><a class="anchor before" href="https://www.tweag.io/rss.xml#the-game-server"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>The game server</h2>
<p>A general challenge in utilizing rllib for playing open games is figuring out
how to make the two frameworks speak to each other, given that they are
written in different languages. Our strategy for addressing this issue is the
following:</p>
<ul>
<li>Turn the open games side into <a href="https://hackage.haskell.org/package/servant-server">a server</a> and the rllib side
into a client.</li>
<li>Have the server and the client exchange information (agent strategies,
payoffs, etc.) encoded as <a href="https://hackage.haskell.org/package/aeson">JSON objects</a>.</li>
</ul>
<p>To account for the possibility of rllib utilizing parallelism during
training, as well as getting a performance edge, we chose to use
<a href="https://hackage.haskell.org/package/servant-websockets">websockets</a> instead of plain http. This way we avoid
managing game sessions and reduce communication overhead between the server
and the client.</p>
<p>Most of the server infrastructure is standard for servant-based applications,
and at its core sits the following function:</p>
<div class="gatsby-highlight"><pre class="language-haskell"><code class="language-haskell"><span class="token hvariable">wsPlay</span> <span class="token operator">::</span> <span class="token constant">PendingConnection</span> <span class="token operator">-&gt;</span> <span class="token constant">Handler</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token hvariable">wsPlay</span> <span class="token hvariable">pending</span> <span class="token operator">=</span> <span class="token keyword">do</span>
  <span class="token hvariable">liftIO</span> <span class="token operator">$</span> <span class="token keyword">do</span>
    <span class="token hvariable">connection</span> <span class="token operator">&lt;-</span> <span class="token hvariable">WS<span class="token punctuation">.</span>acceptRequest</span> <span class="token hvariable">pending</span>
    <span class="token hvariable">handle</span> <span class="token punctuation">(</span><span class="token builtin">const</span> <span class="token punctuation">(</span><span class="token hvariable">pure</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token hvariable">WS<span class="token punctuation">.</span>withPingThread</span> <span class="token hvariable">connection</span> <span class="token number">10</span> <span class="token punctuation">(</span><span class="token hvariable">pure</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">$</span> <span class="token hvariable">liftIO</span> <span class="token operator">$</span> <span class="token hvariable">forever</span> <span class="token operator">$</span> <span class="token keyword">do</span>
      <span class="token comment">-- (a) Read some game actions from the websocket</span>
      <span class="token constant">Just</span> <span class="token punctuation">(</span><span class="token constant">PlayParameters</span> <span class="token punctuation">{</span> <span class="token hvariable">player0Action</span><span class="token punctuation">,</span> <span class="token hvariable">player1Action</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">&lt;-</span> <span class="token hvariable">decode</span> <span class="token operator">&lt;$&gt;</span> <span class="token hvariable">WS<span class="token punctuation">.</span>receiveData</span> <span class="token operator">@</span><span class="token constant">ByteString</span> <span class="token hvariable">connection</span>

      <span class="token comment">-- (b) Play one step of the game with these actions, and obtain the payoffs.</span>
      <span class="token keyword">let</span> <span class="token hvariable">strategy</span>  <span class="token operator">=</span> <span class="token hvariable">player0Action</span> <span class="token operator">::-</span> <span class="token hvariable">player1Action</span> <span class="token operator">::-</span> <span class="token constant">Nil</span>
      <span class="token punctuation">(</span><span class="token hvariable">payoff0</span><span class="token punctuation">,</span> <span class="token hvariable">payoff1</span><span class="token punctuation">)</span> <span class="token operator">&lt;-</span> <span class="token builtin">fst</span> <span class="token operator">&lt;$&gt;</span> <span class="token hvariable">extractPayoffAndNextState</span> <span class="token punctuation">(</span><span class="token hvariable">play</span> <span class="token hvariable">prisonersDilemma</span> <span class="token hvariable">strategy</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div>
<p><code class="language-text">wsPlay</code> takes a pending connection to a websocket and then indefinitely:</p>
<ol>
<li>receives and decodes JSON objects containing a pair of actions (for agents 0 and 1, respectively)</li>
<li>uses these actions to execute one round of prisoner’s dilemma and observe the corresponding payoffs</li>
<li>encodes said payoffs as another JSON object, which it then sends back to the websocket.</li>
</ol>
<p>Once the server is up and running, one can send it messages directly, e.g. via <a href="https://github.com/vi/websocat"><code class="language-text">websocat</code></a> like so:</p>
<div class="gatsby-highlight"><pre class="language-bash"><code class="language-bash">$ <span class="token builtin class-name">echo</span> <span class="token string">'{&quot;player0Action&quot;: &quot;Defect&quot;, &quot;player1Action&quot;: &quot;Defect&quot;}'</span> <span class="token operator">|</span> websocat ws://localhost:3000/prisoners-dilemma/play
<span class="token punctuation">{</span><span class="token string">&quot;player0Payoff&quot;</span>:1,<span class="token string">&quot;player1Payoff&quot;</span>:1<span class="token punctuation">}</span></code></pre></div>
<p>Or we can do so from a reinforcement learning client — exciting times!</p>
<h2 id="the-client-reinforcement-learning-with-rllib"><a class="anchor before" href="https://www.tweag.io/rss.xml#the-client-reinforcement-learning-with-rllib"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>The client: Reinforcement learning with rllib</h2>
<p>With the server side out of the way, let’s focus now on the client side.</p>
<p>Let’s briefly remind ourselves of the gist of reinforcement learning.
The general idea is that we establish an environment, we make moves in that environment, and the environment tells us how good each move was.
We can can use rllib to codify this structure, supposing we can come up with a way to map our problem onto this model.
Of course, it so happens we can:
the two players serve as our “agents” and the Haskell Learning Games library as the “environment”; all is left to do is define valid actions!</p>
<p>We can use rllib’s <a href="https://github.com/ray-project/ray/blob/bcf77f38ee60f493c8c44de25e14f187856afead/python/ray/tune/tune.py#L126">tune</a> entrypoint for training agents, which essentially requires two things:</p>
<ol>
<li>a specification of the game <em>environment</em>, including <em>observations</em><sup id="fnref-1"><a class="footnote-ref" href="https://www.tweag.io/rss.xml#fn-1">1</a></sup> and the <em>action space</em><sup id="fnref-2"><a class="footnote-ref" href="https://www.tweag.io/rss.xml#fn-2">2</a></sup> that comes in the form of a user-defined subclass of rllib’s <code class="language-text">MultiAgentEnv</code> class, and</li>
<li>a game-specific configuration dictionary, specifying general information needed by rllib, such as the number of GPUs to be used, and game-specific information, such as agent strategies; this configuration is also used when creating objects of the custom class.</li>
</ol>
<p>For every open game we experimented with we manually defined both items.
Let’s take a look at their most interesting aspects.</p>
<h3 id="hard-coding-agent-strategies"><a class="anchor before" href="https://www.tweag.io/rss.xml#hard-coding-agent-strategies"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Hard-coding agent strategies</h3>
<p>Perhaps the most interesting part of the configuration dictionary for us is the <code class="language-text">multiagent</code> field, which allows for choosing different policies for different agents in multiagent games (e.g. always defecting, copying the opponent’s move, etc).
In our implementation we populate this field by means of the following function:</p>
<div class="gatsby-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">make_multiagent_config</span><span class="token punctuation">(</span>policy0<span class="token punctuation">,</span> policy1<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;policies_to_train&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;player_0&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string">&quot;policies&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;player_0&quot;</span><span class="token punctuation">:</span> policy0<span class="token punctuation">.</span>policy<span class="token punctuation">,</span>
            <span class="token string">&quot;player_1&quot;</span><span class="token punctuation">:</span> policy1<span class="token punctuation">.</span>policy<span class="token punctuation">,</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span></code></pre></div>
<p>There are a few details left out, but basically it lets us allocate a particular strategy (either “learned”, or some particular hard-coded policy) to a particular player.</p>
<p>Having an RL framework that supports multiagent training was one of our primary reasons to pick rllib in the first place; and this seems like a particularly neat approach.</p>
<p>This is also an especially important feature for analyzing whether or not the training side is learning “correctly”; we can simply set some hard-coded strategy for one of the agents, allow the other one to learn, and check to see if it does the “best thing” given that strategy.</p>
<h3 id="subclassing-multiagentenv"><a class="anchor before" href="https://www.tweag.io/rss.xml#subclassing-multiagentenv"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Subclassing <code class="language-text">MultiAgentEnv</code></h3>
<p>The way we found to build a multiagent environment was to create a subclass of <a href="https://docs.ray.io/en/latest/rllib/package_ref/env/multi_agent_env.html">MultiAgentEnv</a> and override three of its methods.</p>
<h4 id="1-initialization"><a class="anchor before" href="https://www.tweag.io/rss.xml#1-initialization"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>1. Initialization</h4>
<p>During <a href="https://github.com/Learning-Games/open-games-RLib/blob/68fb06636430a68d174a32983c0a7403148ff656/rllib-client/ma/env.py#L12">initialization</a> the game is set up and essential game information is stored into the game object, such as the action space and the observation space.</p>
<p>For PD in particular, the action space is <a href="https://github.com/openai/gym/blob/master/gym/spaces/discrete.py#L10">discrete</a> and contains only two moves (<code class="language-text">0</code> for cooperating and <code class="language-text">1</code> for defecting).
Our observations are a pair of the moves that each player chose to make.</p>
<p>Note that the particular representation that the action space and the observation space take on depends heavily on the learning algorithm that you will use them with.
We are using the standard <a href="https://docs.ray.io/en/latest/rllib/rllib-algorithms.html#pg">Policy Gradient</a> implementation, which supports our selection of spaces.</p>
<h4 id="2-resetting"><a class="anchor before" href="https://www.tweag.io/rss.xml#2-resetting"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>2. Resetting</h4>
<p>A <em>step</em> is one move (or one round) of the game.
All steps of the game make up an <em>episode</em>.</p>
<p>During training, <a href="https://github.com/Learning-Games/open-games-RLib/blob/68fb06636430a68d174a32983c0a7403148ff656/rllib-client/ma/env.py#L67">the game must be reset</a> between different episodes.
When resetting, we also close and re-open the websocket connection.</p>
<p>Some games might end early (e.g. in Mario, you may be eaten by a flower), while some games always have a single round (e.g. Rock-Paper-Scissors, or the Prisoner’s Dilemma).
Making those games repeat in the same episode instead of many episodes turns out to work better with rllib.
Still, episodes are limited by a fixed <em>episode length</em>.</p>
<h4 id="3-taking-a-step"><a class="anchor before" href="https://www.tweag.io/rss.xml#3-taking-a-step"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>3. Taking a step</h4>
<p>The <a href="https://github.com/Learning-Games/open-games-RLib/blob/68fb06636430a68d174a32983c0a7403148ff656/rllib-client/ma/env.py#L83">most crucial method is <code class="language-text">step</code></a> which, given a dictionary <code class="language-text">action_dict</code> containing the action of each player, executes one game step.</p>
<p>First, it creates a JSON object containing the two moves and sends it to the server via the active socket:</p>
<div class="gatsby-highlight"><pre class="language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">DiscreteTwoPlayerLearningGamesEnv</span><span class="token punctuation">(</span>MultiAgentEnv<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">def</span> <span class="token function">step</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> action_dict<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

        <span class="token comment"># Build the data</span>
        data <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token string-interpolation"><span class="token string">f&quot;player</span><span class="token interpolation"><span class="token punctuation">{</span>i<span class="token punctuation">}</span></span><span class="token string">Action&quot;</span></span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>action_map<span class="token punctuation">[</span>action_dict<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>
            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>num_agents<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        <span class="token comment"># Send the actions on the socket</span>
        self<span class="token punctuation">.</span>ws<span class="token punctuation">.</span>send<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>

        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre></div>
<p>then it reads back the corresponding payoffs from the socket:</p>
<div class="gatsby-highlight"><pre class="language-python"><code class="language-python">        <span class="token comment"># Receive the payoffs message</span>
        response <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ws<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></div>
<p>Last, it computes rewards and observations on a per-agent basis that are to be fed to the learning algorithm, and checks whether the game has come to an end:</p>
<div class="gatsby-highlight"><pre class="language-python"><code class="language-python">        rewards      <span class="token operator">=</span> <span class="token punctuation">{</span> i<span class="token punctuation">:</span> response<span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f&quot;player</span><span class="token interpolation"><span class="token punctuation">{</span>i<span class="token punctuation">}</span></span><span class="token string">Payoff&quot;</span></span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>num_agents<span class="token punctuation">)</span> <span class="token punctuation">}</span>
        observations <span class="token operator">=</span> <span class="token punctuation">{</span> i<span class="token punctuation">:</span> <span class="token punctuation">(</span>action_dict<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> action_dict<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>num_agents<span class="token punctuation">)</span> <span class="token punctuation">}</span>
        dones        <span class="token operator">=</span> <span class="token punctuation">{</span> i<span class="token punctuation">:</span> is_done <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>num_agents<span class="token punctuation">)</span> <span class="token punctuation">}</span></code></pre></div>
<p>where <code class="language-text">is_done</code> is simply a check that we’ve done enough steps:</p>
<div class="gatsby-highlight"><pre class="language-python"><code class="language-python">is_done <span class="token operator">=</span> step_number <span class="token operator">&gt;=</span> episode_length</code></pre></div>
<p>There are a few more technical details, which you can see in <a href="https://github.com/Learning-Games/open-games-RLib">our full implementation</a>, but most of it is fairly straightforward.</p>
<p>On with the training!</p>
<h2 id="training-against-different-strategies"><a class="anchor before" href="https://www.tweag.io/rss.xml#training-against-different-strategies"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Training against different strategies</h2>
<p>With all the setup out of the way, now it’s time to have some fun!
The most exciting part of this project was experimenting with different agent policies in rllib and watching the learning agents learn how to play optimally against the opponent strategies <em>in real time</em>, on <a href="https://www.tensorflow.org/tensorboard">tensorboard</a>.</p>
<p>With all our infrastructure in place, this became a pretty straightforward task:</p>
<div class="gatsby-highlight"><pre class="language-python"><code class="language-python">ray<span class="token punctuation">.</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span>

tune<span class="token punctuation">.</span>run<span class="token punctuation">(</span>
    <span class="token string">&quot;PG&quot;</span><span class="token punctuation">,</span>
    config <span class="token operator">=</span> make_pd_config<span class="token punctuation">(</span>learned<span class="token punctuation">,</span> always_defect<span class="token punctuation">)</span><span class="token punctuation">,</span>
    stop   <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;timesteps_total&quot;</span><span class="token punctuation">:</span> <span class="token number">25_000</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">)</span>

tune<span class="token punctuation">.</span>run<span class="token punctuation">(</span>
    <span class="token string">&quot;PG&quot;</span><span class="token punctuation">,</span>
    config <span class="token operator">=</span> make_pd_config<span class="token punctuation">(</span>random_pd_move<span class="token punctuation">,</span> learned<span class="token punctuation">)</span><span class="token punctuation">,</span>
    stop   <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;timesteps_total&quot;</span><span class="token punctuation">:</span> <span class="token number">25_000</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre></div>
<h3 id="against-an-agent-that-always-defects"><a class="anchor before" href="https://www.tweag.io/rss.xml#against-an-agent-that-always-defects"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Against an agent that always defects</h3>
<p>When <code class="language-text">player1</code> consistently defects, the optimal strategy for <code class="language-text">player0</code> is to always defect as well, for an average payoff of 1.
If <code class="language-text">player0</code> were to cooperate, their payoff would be 0.
This is observed in the payoff curves, where <code class="language-text">player0</code>’s payoff converges to 1 starting from under one (minimum: 0), and <code class="language-text">player1</code>’s payoff converges to 1 starting from over 1 (maximum: 5).</p>
<p>
  <img src="https://www.tweag.io/b5feb4e037320809abe31733e4aaa5e6/pd_learned_vs_always_defect_ep_length_10_ray_tune_sampler_results_custom_metrics_player_0_step_average_mean.svg" width="49%">
  <img src="https://www.tweag.io/c81e412f189074f4afaac24cc70d53dd/pd_learned_vs_always_defect_ep_length_10_ray_tune_sampler_results_custom_metrics_player_1_step_average_mean.svg" width="49%">
</p>
<h3 id="against-random-moves"><a class="anchor before" href="https://www.tweag.io/rss.xml#against-random-moves"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Against random moves</h3>
<p>When <code class="language-text">player1</code> plays random moves, the optimal strategy for <code class="language-text">player0</code> is to always defect.
Since — statistically speaking — 50% of the time <code class="language-text">player1</code> will be defecting and 50% of the time they will be cooperating, <code class="language-text">player0</code> makes a payoff of 1 half of the time (when <code class="language-text">player1</code> happens to defect as well) and a payoff of 5 the other half of the time (when <code class="language-text">player1</code> happens to cooperate), which gives an average payoff of 3, as observed in the graph for <code class="language-text">player0</code>.
Similarly, the payoff of <code class="language-text">player1</code> converges towards 0.5; half of the time it is 0 and the other half it is 1.</p>
<p>
  <img src="https://www.tweag.io/b10307f4cfe1ff588fbb569caf58dedc/pd_learned_vs_random_ep_length_1000_ray_tune_sampler_results_custom_metrics_player_0_step_average_mean.svg" width="49%">
  <img src="https://www.tweag.io/9885c9a523bb94003016804cfbe60b1d/pd_learned_vs_random_ep_length_1000_ray_tune_sampler_results_custom_metrics_player_1_step_average_mean.svg" width="49%">
</p>
<h3 id="against-tit-for-tat"><a class="anchor before" href="https://www.tweag.io/rss.xml#against-tit-for-tat"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Against tit-for-tat</h3>
<p>When <code class="language-text">player1</code> uses tit-for-tat, the optimal strategy for <code class="language-text">player0</code> is to do the same, so that both players perpetually cooperate, for a mutually beneficial result where both players have a payoff of 3.</p>
<p>
  <img src="https://www.tweag.io/d8e832e28eddd37bee9fbed5dd34168b/pd_learned_vs_tit_for_tat_ep_len_10_ray_tune_sampler_results_custom_metrics_player_0_step_average_mean.svg" width="49%">
  <img src="https://www.tweag.io/a579f0f0523334bc9b942c405732a406/pd_learned_vs_tit_for_tat_ep_len_10_ray_tune_sampler_results_custom_metrics_player_1_step_average_mean.svg" width="49%">
</p>
<h3 id="against-another-learning-agent"><a class="anchor before" href="https://www.tweag.io/rss.xml#against-another-learning-agent"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Against another learning agent</h3>
<p>When both agents are learners and the length of an episode (i.e. the number of past rounds the agents have memory of) is low, both players are incentivized to defect for a payoff of 1 per agent.
This is not necessarily optimal but, as we mentioned earlier, is a Nash equilibrium for prisoner’s dilemma.
However, by setting the episode length sufficiently high (100 rounds), we finally observed both agents learning to cooperate for a payoff of 3 per agent.</p>
<p>
  <img src="https://www.tweag.io/1422b4fc9d17ba64df6fd206a9eb05a8/pd_learned_vs_learned_ep_length_100_ray_tune_sampler_results_custom_metrics_player_0_step_average_mean.svg" width="49%">
  <img src="https://www.tweag.io/52592db68b996012b7ff54cfe9aa5875/pd_learned_vs_learned_ep_length_100_ray_tune_sampler_results_custom_metrics_player_1_step_average_mean.svg" width="49%">
</p>
<h2 id="conclusion"><a class="anchor before" href="https://www.tweag.io/rss.xml#conclusion"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Conclusion</h2>
<p>All in all, this experiment has shown very promising results: daunting though the task initially looked, connecting the two libraries was successful.</p>
<p>We tried three other games requiring a different setup, as it could be easily changed:</p>
<table>
<thead>
<tr>
<th/>
<th align="center">Stateful</th>
<th align="center">Steps</th>
<th align="center">Players</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Prisoner%27s_dilemma">(iterated) Prisoner’s Dilemma</a></td>
<td align="center">No</td>
<td align="center">1</td>
<td align="center">2</td>
</tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Rock_paper_scissors">(iterated) Rock-Paper-Scissors</a></td>
<td align="center">No</td>
<td align="center">1</td>
<td align="center">2</td>
</tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Monty_Hall_problem">Monty Hall</a></td>
<td align="center">Yes</td>
<td align="center">2</td>
<td align="center">1</td>
</tr>
<tr>
<td><a href="https://en.wikibooks.org/wiki/Bestiary_of_Behavioral_Economics/Trust_Game">Trust Game</a></td>
<td align="center">Yes</td>
<td align="center">2</td>
<td align="center">2</td>
</tr>
</tbody>
</table>
<p>For the multi-step games in this list (Monty Hall, Trust Game) we decomposed the monolithic game definition into sub-games.
This was necessary for interleaving game execution and communication with the client between each step.
We performed this transformation manually this time, but we believe that this process can (and should, in the future) be automated by the Haskell DSL for a large class of games — after all, modularity is one of the greatest strengths of Learning Games.</p>
<p>Another question that we have not addressed in this blog post is whether learned agents can perform optimally against strategies they have not been trained against.
Can an agent that knows how to defeat an ever-defecting opponent also defeat an ever-cooperating one?</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn-1">The observations, or observation space, is the set of data that the RL training code will look at, in order to decide how to act.
In typical RL, this might be the literal pixels of the game, say from an Atari, or perhaps the state of the board when playing Go.
In our case, it mostly consisted of the moves of the “other” player.<a class="footnote-backref" href="https://www.tweag.io/rss.xml#fnref-1">↩</a></li>
<li id="fn-2">An “action space” refers to the set of valid actions that the agent can make, at any time.
In some games, this is very simple; i.e. in the “Rock-Paper-Scissors” game, it is simply <code class="language-text">[Rock, Paper, Scissors]</code>.
In some games, certain moves are only valid at certain times.
There are a few ways of addressing this, perhaps the easiest of which is simply penalizing invalid moves via a negative reward.<a class="footnote-backref" href="https://www.tweag.io/rss.xml#fnref-2">↩</a></li>
</ol>
</div></div>
    </summary>
    <updated>2022-11-10T00:00:00Z</updated>
    <published>2022-11-10T00:00:00Z</published>
    <source>
      <id>https://tweag.io</id>
      <author>
        <name>Tweag I/O</name>
      </author>
      <link href="https://tweag.io" rel="alternate" type="text/html">
      <link href="http://www.tweag.io/rss.xml" rel="self" type="application/rss+xml">
      <subtitle>Scale your engineering power. We enable deep-tech startups to achieve
their vision, from research to product delivery.</subtitle>
      <title>Tweag - Engineering blog</title>
      <updated>2022-11-17T06:35:57Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:,2022:/addenda/202210</id>
    <link href="https://blog.plover.com/addenda/202210.html" rel="alternate" type="text/html">
    <title>Addenda to recent articles 202210</title>
    <content type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p>I haven't done one of these in a while.  And there have been
addenda. I thought hey, what if I ask Git to give me a list of commits
from October that contain the word ‘Addendum’.  And what do you know,
that worked pretty well.  So maybe addenda summaries will become a
regular thing again, if I don't forget by next month.</p>

<p>Most of the addenda resulted in separate followup articles, which I
assume you will already have seen.
(<a href="https://blog.plover.com/prog/haskell/how-to-ap.html">[1]</a>
<a href="https://blog.plover.com/prog/interval-search-2.html">[2]</a>
<a href="https://blog.plover.com/lang/poutine-3.html">[3]</a>) I will not mention this sort of
addendum in future summaries.</p>

<ul>
<li><p>In <a href="https://blog.plover.com/prog/haskell/lazy-search.html">my discussion of lazy search in Haskell</a> 
I had a few versions that used <code>do</code>-notation in the list monad, but
eventually abandoned it n favor of explicit <code>concatMap</code>.  For
example:</p>

<pre><code>      s nodes = nodes ++ (s $ concatMap childrenOf nodes)
</code></pre>

<p>I went back to see what this would look like with <code>do</code> notation:</p>

<pre><code>      s nodes = (nodes ++) . s $ do
          n &lt;- nodes
          childrenOf n
</code></pre>

<p>Meh.</p></li>
<li><p>Regarding
<a href="https://blog.plover.com/lang/poutine-3.html">the origin of the family name ‘Hooker’</a>,
I rejected Wiktionary's suggestion that it was an occupational name
for a maker of hooks, and speculated that it might be a fisherman.
I am still trying to figure this out.
<a href="https://english.stackexchange.com/questions/597644/origin-of-the-surname-hooker">I asked about it on English Language Stack Exchange</a>
but I have not seen anything really persuasive yet.  One of the
answers suggests that it <em>is</em> a maker of hooks, spelled <em>hocere</em> in
earlier times.</p>

<p>(I had been picturing wrought-iron hooks for hanging things, and
wondered why the occupational term for a maker of these wasn't
“Smith”.  But the hooks are supposedly clothes-fastening hooks, made
of bone or some similar finely-workable material.  )</p>

<p>The OED has no record of <em>hocere</em>, so I've asked
for access to the Dictionary of Old English Corpus of the Bodleian
library.  This is supposedly available to anyone for noncommercial
use, but it has been eight days and they have not yet answered my
request.</p>

<p>I will post an update, if I have anything to update.</p></li>
</ul></div>
    </content>
    <updated>2022-11-08T23:34:00Z</updated>
    <published>2022-11-08T23:34:00Z</published>
    <category term="/addenda"/>
    <author>
      <name>Mark Dominus</name>
      <email>mjd@plover.com</email>
      <uri>http://www.plover.com/</uri>
    </author>
    <source>
      <id>tag:,2005:/</id>
      <icon>http://perl.plover.com/favicon.ico</icon>
      <link href="https://blog.plover.com/index.atom" rel="self" type="application/atom+xml">
      <link href="https://blog.plover.com" rel="alternate" type="text/html">
      <subtitle>The Universe of Discourse (Mark Dominus Blog)</subtitle>
      <title>The Universe of Discourse</title>
      <updated>2022-11-08T23:34:00Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://tweag.io/blog/2022-11-08-functional-programming-from-sets-and-functions/</id>
    <link href="https://tweag.io/blog/2022-11-08-functional-programming-from-sets-and-functions/" rel="alternate" type="text/html">
    <title>Functional programming from sets and functions</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Introductions to functional programming are usually targeted at people who are already accustomed to programming, and they typically present the perks of the paradigm by comparing it to imperative or object-oriented programming. This often leaves the reader with the impression that they have to unlearn practices and concepts they already know to adopt this new paradigm.</p>
<p>In this post I would like to try a different approach, not requiring any programming knowledge, but only the most basic intuition. We will build on high school mathematics, in the form of sets and functions, to provide a learning path to understanding functional programming<sup id="fnref-1"><a class="footnote-ref" href="https://www.tweag.io/rss.xml#fn-1">1</a></sup>.</p>
<h2 id="introduction"><a class="anchor before" href="https://www.tweag.io/rss.xml#introduction"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Introduction</h2>
<p>Functional programming is a paradigm for writing computer programs based on, well, you can guess: functions!</p>
<p>These <a href="https://en.wikipedia.org/wiki/Function_(mathematics)">functions</a> are exactly the same ones that are taught in high school.</p>
<p>To recall the definition of a function, and specify the notation and some terminology used in this post, a function <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mi>f</mi><mo>:</mo><mi>X</mi><mo>→</mo><mi>Y</mi></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;f : X \to Y&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut"></span><span class="mord mathnormal">f</span><span class="mspace"></span><span class="mrel">:</span><span class="mspace"></span></span><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal">X</span><span class="mspace"></span><span class="mrel">→</span><span class="mspace"></span></span><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal">Y</span></span></span></span></span> is a <a href="https://en.wikipedia.org/wiki/Relation_(mathematics)">relation</a> between a set <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mi>X</mi></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;X&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal">X</span></span></span></span></span> (called the <a href="https://en.wikipedia.org/wiki/Domain_of_a_function">domain</a> of <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mi>f</mi></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;f&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut"></span><span class="mord mathnormal">f</span></span></span></span></span>) and a set <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mi>Y</mi></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;Y&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal">Y</span></span></span></span></span> (called the <a href="https://en.wikipedia.org/wiki/Codomain">codomain</a> of <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mi>f</mi></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;f&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut"></span><span class="mord mathnormal">f</span></span></span></span></span>) such that every <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mi>x</mi><mo>∈</mo><mi>X</mi></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;x \in X&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut"></span><span class="mord mathnormal">x</span><span class="mspace"></span><span class="mrel">∈</span><span class="mspace"></span></span><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal">X</span></span></span></span></span> is related to exactly one element in <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mi>Y</mi></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;Y&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal">Y</span></span></span></span></span>. We write <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mi>f</mi><mtext> </mtext><mi>x</mi></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;f \, x&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut"></span><span class="mord mathnormal">f</span><span class="mspace"></span><span class="mord mathnormal">x</span></span></span></span></span> to describe this element in <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mi>Y</mi></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;Y&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal">Y</span></span></span></span></span>.</p>
<p>In mathematics, sets and functions are used to study the properties of some mathematical object or to prove some theorem. We, however, would like to use them to instruct a computer to perform certain specified operations. Functions, given their nature of associating outputs to inputs, provide a natural model for computations.</p>
<p>Nonetheless, from their definition it is not obvious how functions could be used to write full-fledged programs, implement complex algorithms, and handle interactions with the users and the world.</p>
<p>Let’s explore together how we could implement programs using only functions.</p>
<h2 id="the-span-styletext-transform-nonetextrmmaxspan-between-two-integers"><a class="anchor before" href="https://www.tweag.io/rss.xml#the-span-styletext-transform-nonetextrmmaxspan-between-two-integers"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>The <span><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mtext>max</mtext></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\textrm{max}&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord text"><span class="mord textrm">max</span></span></span></span></span></span></span> between two integers</h2>
<p>As a starting point, let’s try to define a program that, given two integers, returns the greatest one.</p>
<p>To implement it as a function, we need to think first about its domain, which describes the possible inputs, and its codomain, describing the possible outputs. Since we want to receive <em>two</em> integers as input, we need to choose the set which contains all the <em>pairs</em> of integers. This set of pairs is called the <a href="https://en.wikipedia.org/wiki/Cartesian_product">Cartesian product</a> and is denoted, for example, by <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mi mathvariant="double-struck">Z</mi><mo>×</mo><mi mathvariant="double-struck">Z</mi></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\mathbb{Z} \times \mathbb{Z}&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut"></span><span class="mord mathbb">Z</span><span class="mspace"></span><span class="mbin">×</span><span class="mspace"></span></span><span class="base"><span class="strut" style="height: 0.6889em;"></span><span class="mord mathbb">Z</span></span></span></span></span>. Given that we want a single integer as output, the codomain will be the set of integers.</p>
<p>Hence, the <a href="https://en.wikipedia.org/wiki/Type_signature">signature</a> of our function will be:</p>
<div class="math math-display"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math display="block">&lt;semantics&gt;<mrow><mtext>max</mtext><mo>:</mo><mi mathvariant="double-struck">Z</mi><mo>×</mo><mi mathvariant="double-struck">Z</mi><mo>→</mo><mi mathvariant="double-struck">Z</mi></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\textrm{max} : \mathbb{Z} \times \mathbb{Z} \to \mathbb{Z}&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord text"><span class="mord textrm">max</span></span><span class="mspace"></span><span class="mrel">:</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mord mathbb">Z</span><span class="mspace"></span><span class="mbin">×</span><span class="mspace"></span></span><span class="base"><span class="strut" style="height: 0.6889em;"></span><span class="mord mathbb">Z</span><span class="mspace"></span><span class="mrel">→</span><span class="mspace"></span></span><span class="base"><span class="strut" style="height: 0.6889em;"></span><span class="mord mathbb">Z</span></span></span></span></span></div>
<p>Next, we would like to implement it along these lines: if we call <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mi>x</mi></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;x&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span></span> and <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mi>y</mi></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;y&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut"></span><span class="mord mathnormal">y</span></span></span></span></span> the two inputs, if <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mi>x</mi></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;x&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span></span> is greater than or equal to <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mi>y</mi></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;y&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut"></span><span class="mord mathnormal">y</span></span></span></span></span> then we output <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mi>x</mi></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;x&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span></span>, otherwise we output <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mi>y</mi></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;y&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut"></span><span class="mord mathnormal">y</span></span></span></span></span>.
Notice that to describe our implementation, we are referring to “if” and “greater than”. And, guess what? They are functions themselves!</p>
<p><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mtext>if</mtext></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\textrm{if}&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6944em;"></span><span class="mord text"><span class="mord textrm">if</span></span></span></span></span></span> could be seen as a function that receives three arguments: a Boolean (i.e., from the set <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mo stretchy="false">{</mo><mtext>true</mtext><mo separator="true">,</mo><mtext>false</mtext><mo stretchy="false">}</mo></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\{\textrm{true},\textrm{false}\}&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut"></span><span class="mopen">{</span><span class="mord text"><span class="mord textrm">true</span></span><span class="mpunct">,</span><span class="mspace"></span><span class="mord text"><span class="mord textrm">false</span></span><span class="mclose">}</span></span></span></span></span>); an integer to be used as output when the Boolean is <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mtext>true</mtext></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\textrm{true}&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6151em;"></span><span class="mord text"><span class="mord textrm">true</span></span></span></span></span></span>; and another integer which should be the output when the Boolean is <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mtext>false</mtext></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\textrm{false}&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6944em;"></span><span class="mord text"><span class="mord textrm">false</span></span></span></span></span></span>:</p>
<div class="math math-display"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math display="block">&lt;semantics&gt;<mrow><mtext>if</mtext><mo>:</mo><mtext>Bool</mtext><mo>×</mo><mi mathvariant="double-struck">Z</mi><mo>×</mo><mi mathvariant="double-struck">Z</mi><mo>→</mo><mi mathvariant="double-struck">Z</mi></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\textrm{if} : \textrm{Bool} \times \mathbb{Z} \times \mathbb{Z} \to \mathbb{Z}&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6944em;"></span><span class="mord text"><span class="mord textrm">if</span></span><span class="mspace"></span><span class="mrel">:</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mord text"><span class="mord textrm">Bool</span></span><span class="mspace"></span><span class="mbin">×</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mord mathbb">Z</span><span class="mspace"></span><span class="mbin">×</span><span class="mspace"></span></span><span class="base"><span class="strut" style="height: 0.6889em;"></span><span class="mord mathbb">Z</span><span class="mspace"></span><span class="mrel">→</span><span class="mspace"></span></span><span class="base"><span class="strut" style="height: 0.6889em;"></span><span class="mord mathbb">Z</span></span></span></span></span></div>
<p>Similarly, <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mtext>greater_than</mtext></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\textrm{greater\_than}&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut"></span><span class="mord text"><span class="mord textrm">greater_than</span></span></span></span></span></span> could be seen as a function that receives two integers, and outputs <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mtext>true</mtext></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\textrm{true}&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6151em;"></span><span class="mord text"><span class="mord textrm">true</span></span></span></span></span></span> if the first is greater than or equal to the second, or <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mtext>false</mtext></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\textrm{false}&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6944em;"></span><span class="mord text"><span class="mord textrm">false</span></span></span></span></span></span> otherwise:</p>
<div class="math math-display"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math display="block">&lt;semantics&gt;<mrow><mtext>greater_than</mtext><mo>:</mo><mi mathvariant="double-struck">Z</mi><mo>×</mo><mi mathvariant="double-struck">Z</mi><mo>→</mo><mtext>Bool</mtext></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\textrm{greater\_than} : \mathbb{Z} \times \mathbb{Z} \to \textrm{Bool}&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut"></span><span class="mord text"><span class="mord textrm">greater_than</span></span><span class="mspace"></span><span class="mrel">:</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mord mathbb">Z</span><span class="mspace"></span><span class="mbin">×</span><span class="mspace"></span></span><span class="base"><span class="strut" style="height: 0.6889em;"></span><span class="mord mathbb">Z</span><span class="mspace"></span><span class="mrel">→</span><span class="mspace"></span></span><span class="base"><span class="strut" style="height: 0.6944em;"></span><span class="mord text"><span class="mord textrm">Bool</span></span></span></span></span></span></div>
<p>At this point, it becomes clear that we can implement <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mtext>max</mtext></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\textrm{max}&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord text"><span class="mord textrm">max</span></span></span></span></span></span> by carefully composing these two functions:</p>
<div class="math math-display"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math display="block">&lt;semantics&gt;<mrow><mtext>max</mtext><mtext> </mtext><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mtext>if</mtext><mtext> </mtext><mo stretchy="false">(</mo><mtext>greater_than</mtext><mtext> </mtext><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\textrm{max} \, (x, y) = \textrm{if} \, (\textrm{greater\_than} \, (x, y), x, y)&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut"></span><span class="mord text"><span class="mord textrm">max</span></span><span class="mspace"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord mathnormal">y</span><span class="mclose">)</span><span class="mspace"></span><span class="mrel">=</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mord text"><span class="mord textrm">if</span></span><span class="mspace"></span><span class="mopen">(</span><span class="mord text"><span class="mord textrm">greater_than</span></span><span class="mspace"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord mathnormal">y</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord mathnormal">y</span><span class="mclose">)</span></span></span></span></span></div>
<h2 id="the-span-styletext-transform-nonetextrmmaxspan-among-a-set-of-integers"><a class="anchor before" href="https://www.tweag.io/rss.xml#the-span-styletext-transform-nonetextrmmaxspan-among-a-set-of-integers"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>The <span><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mtext>max</mtext></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\textrm{max}&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord text"><span class="mord textrm">max</span></span></span></span></span></span></span> among a set of integers</h2>
<p>We are now able to compute the maximum of two integers. It should be easy enough now to generalize this to compute the maximum of an arbitrary non-empty finite set of integers.</p>
<p>First, as always, let’s try to think about the domain and the codomain of the function we want to define. Nothing changes for the codomain; it still is just an integer. The domain is now a bit more involved since its elements should be non-empty finite <a href="https://en.wikipedia.org/wiki/Subset">subsets</a> of <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mi mathvariant="double-struck">Z</mi></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\mathbb{Z}&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6889em;"></span><span class="mord mathbb">Z</span></span></span></span></span>. Whenever the elements of a set are sets themselves, we can be sure that we need to use the <a href="https://en.wikipedia.org/wiki/Power_set">power set</a>. Since we want only non-empty finite subsets, we restrict ourselves to the set of all non-empty finite subsets of a given set <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mi>S</mi></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;S&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal">S</span></span></span></span></span>, which we denote by <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mi mathvariant="script">F</mi><mi>S</mi></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\mathscr{F} S&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.7em;"></span><span class="mord mathscr">F</span><span class="mord mathnormal">S</span></span></span></span></span>.</p>
<p>Hence, what we would like to define is the following function:</p>
<div class="math math-display"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math display="block">&lt;semantics&gt;<mrow><mtext>multi_max</mtext><mo>:</mo><mi mathvariant="script">F</mi><mi mathvariant="double-struck">Z</mi><mo>→</mo><mi mathvariant="double-struck">Z</mi></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\textrm{multi\_max} : \mathscr{F} \mathbb{Z} \to \mathbb{Z}&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut"></span><span class="mord text"><span class="mord textrm">multi_max</span></span><span class="mspace"></span><span class="mrel">:</span><span class="mspace"></span></span><span class="base"><span class="strut" style="height: 0.7em;"></span><span class="mord mathscr">F</span><span class="mord mathbb">Z</span><span class="mspace"></span><span class="mrel">→</span><span class="mspace"></span></span><span class="base"><span class="strut" style="height: 0.6889em;"></span><span class="mord mathbb">Z</span></span></span></span></span></div>
<p>Let’s try to think about the implementation. If you had to do such a computation in your head, you would probably do something like the following:</p>
<ul>
<li>If our input set contains just one element, then that element is already the maximum of the set, and we are done.</li>
<li>On the other hand, if our set contains at least two elements, we could compute their <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mtext>max</mtext></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\textrm{max}&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord text"><span class="mord textrm">max</span></span></span></span></span></span> and keep it in memory.</li>
<li>Then we take another element of our input set, if it exists, and we compute the <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mtext>max</mtext></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\textrm{max}&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord text"><span class="mord textrm">max</span></span></span></span></span></span> between the value we kept in memory and this new element, and then we replace the value in memory with the result.</li>
<li>We continue in this fashion until we are left with no other elements to compare. At that point, the value we have in memory is the maximum of the set.</li>
</ul>
<p>Functions have no memory, though. They can rely only on their inputs to compute their outputs. Therefore, we need to shuffle things around a bit to be able to provide the result of every step as an input for the next one. We can do this by observing that the maximum of a set <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mi>X</mi></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;X&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal">X</span></span></span></span></span> with at least two elements, containing an element <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mi>x</mi></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;x&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span></span>, is just the <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;max&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">ma</span><span class="mord mathnormal">x</span></span></span></span></span> between <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mi>x</mi></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;x&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span></span> and <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mtext>multi_max</mtext><mtext> </mtext><mo stretchy="false">(</mo><mi>X</mi><mo>∖</mo><mo stretchy="false">{</mo><mi>x</mi><mo stretchy="false">}</mo><mo stretchy="false">)</mo></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\textrm{multi\_max} \, (X \setminus \{x\})&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut"></span><span class="mord text"><span class="mord textrm">multi_max</span></span><span class="mspace"></span><span class="mopen">(</span><span class="mord mathnormal">X</span><span class="mspace"></span><span class="mbin">∖</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mopen">{</span><span class="mord mathnormal">x</span><span class="mclose">})</span></span></span></span></span>, where <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mi>X</mi><mo>∖</mo><mo stretchy="false">{</mo><mi>x</mi><mo stretchy="false">}</mo></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;X \setminus \{x\}&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut"></span><span class="mord mathnormal">X</span><span class="mspace"></span><span class="mbin">∖</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mopen">{</span><span class="mord mathnormal">x</span><span class="mclose">}</span></span></span></span></span> is the set <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mi>X</mi></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;X&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal">X</span></span></span></span></span> with the element <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mi>x</mi></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;x&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span></span> <a href="https://en.wikipedia.org/wiki/Complement_(set_theory)#/Relative_complement">removed</a>:</p>
<div class="math math-display"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math display="block">&lt;semantics&gt;<mtable columnalign="left center center left" columnspacing="1em" rowspacing="0.16em"><mtr><mtd><mstyle displaystyle="false" scriptlevel="0"><mtext>multi_max</mtext></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mrow><mo stretchy="false">{</mo><mi>x</mi><mo stretchy="false">}</mo></mrow></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mo lspace="0em" rspace="0em">=</mo></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle displaystyle="false" scriptlevel="0"><mtext>multi_max</mtext></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mrow><mo stretchy="false">(</mo><mo stretchy="false">{</mo><mi>x</mi><mo stretchy="false">}</mo><mo>∪</mo><mo stretchy="false">(</mo><mi>X</mi><mo>∖</mo><mo stretchy="false">{</mo><mi>x</mi><mo stretchy="false">}</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mo lspace="0em" rspace="0em">=</mo></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mrow><mtext>max</mtext><mtext> </mtext><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mtext>multi_max</mtext><mtext> </mtext><mo stretchy="false">(</mo><mi>X</mi><mo>∖</mo><mo stretchy="false">{</mo><mi>x</mi><mo stretchy="false">}</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\begin{array}{lccl}
\textrm{multi\_max} &amp; \{x\} &amp; = &amp; x \\
\textrm{multi\_max} &amp; (\{x\} \cup (X \setminus \{x\})) &amp; = &amp; \textrm{max} \, (x, \textrm{multi\_max}\, (X \setminus \{x\}))
\end{array}&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width: 0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 1.45em;"><span><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mord text"><span class="mord textrm">multi_max</span></span></span></span><span><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mord text"><span class="mord textrm">multi_max</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width: 0.5em;"></span><span class="arraycolsep" style="width: 0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 1.45em;"><span><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mopen">{</span><span class="mord mathnormal">x</span><span class="mclose">}</span></span></span><span><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mopen">({</span><span class="mord mathnormal">x</span><span class="mclose">}</span><span class="mspace"></span><span class="mbin">∪</span><span class="mspace"></span><span class="mopen">(</span><span class="mord mathnormal">X</span><span class="mspace"></span><span class="mbin">∖</span><span class="mspace"></span><span class="mopen">{</span><span class="mord mathnormal">x</span><span class="mclose">}))</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width: 0.5em;"></span><span class="arraycolsep" style="width: 0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 1.45em;"><span><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mrel">=</span></span></span><span><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mrel">=</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width: 0.5em;"></span><span class="arraycolsep" style="width: 0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 1.45em;"><span><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mord text"><span class="mord textrm">max</span></span><span class="mspace"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord text"><span class="mord textrm">multi_max</span></span><span class="mspace"></span><span class="mopen">(</span><span class="mord mathnormal">X</span><span class="mspace"></span><span class="mbin">∖</span><span class="mspace"></span><span class="mopen">{</span><span class="mord mathnormal">x</span><span class="mclose">}))</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width: 0.5em;"></span></span></span></span></span></span></span></div>
<p>With <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mi>A</mi><mo>∪</mo><mi>B</mi></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;A \cup B&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace"></span><span class="mbin">∪</span><span class="mspace"></span></span><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal">B</span></span></span></span></span> we denote the <a href="https://en.wikipedia.org/wiki/Union_(set_theory)">union</a> of two sets <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mi>A</mi></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;A&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span></span> and <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mi>B</mi></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;B&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal">B</span></span></span></span></span>, which is the set that contains all the elements from both <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mi>A</mi></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;A&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span></span> and <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mi>B</mi></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;B&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal">B</span></span></span></span></span>.</p>
<p>This definition is <a href="https://en.wikipedia.org/wiki/Recursion">recursive</a> since <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mtext>multi_max</mtext></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\textrm{multi\_max}&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut"></span><span class="mord text"><span class="mord textrm">multi_max</span></span></span></span></span></span> is defined in terms of <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mtext>multi_max</mtext></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\textrm{multi\_max}&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut"></span><span class="mord text"><span class="mord textrm">multi_max</span></span></span></span></span></span> itself. This works because we are calling <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mtext>multi_max</mtext></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\textrm{multi\_max}&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut"></span><span class="mord text"><span class="mord textrm">multi_max</span></span></span></span></span></span> on a smaller set and, since <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mi>X</mi></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;X&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal">X</span></span></span></span></span> is finite, we can be certain that if we continue to do so, sooner or later we will arrive at a set containing a single element, and the recursion will stop.</p>
<p>Recursion is a typical tool that is often used in functional programming since iterations (in the form of <a href="https://en.wikipedia.org/wiki/For_loop"><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mtext>for</mtext></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\textrm{for}&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6944em;"></span><span class="mord text"><span class="mord textrm">for</span></span></span></span></span></span> loops</a>, for example) need to resort to things that could not be directly implemented as functions, like mutation of an iterator.</p>
<h2 id="how-does-execution-work"><a class="anchor before" href="https://www.tweag.io/rss.xml#how-does-execution-work"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>How does execution work?</h2>
<p>Suppose we want to compute the maximum of the set <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mo stretchy="false">{</mo><mn>5</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>7</mn><mo separator="true">,</mo><mn>4</mn><mo stretchy="false">}</mo></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\{5, 2, 7, 4\}&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut"></span><span class="mopen">{</span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord">7</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord">4</span><span class="mclose">}</span></span></span></span></span> using our <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mtext>multi_max</mtext></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\textrm{multi\_max}&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut"></span><span class="mord text"><span class="mord textrm">multi_max</span></span></span></span></span></span> function.</p>
<p>The only thing we need to use is the equality provided by the definition of <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mtext>multi_max</mtext></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\textrm{multi\_max}&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut"></span><span class="mord text"><span class="mord textrm">multi_max</span></span></span></span></span></span>:</p>
<div class="math math-display"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math display="block">&lt;semantics&gt;<mtable columnalign="left center left" columnspacing="1em" rowspacing="0.16em"><mtr><mtd><mstyle displaystyle="false" scriptlevel="0"><mrow><mtext>multi_max</mtext><mtext> </mtext><mo stretchy="false">{</mo><mn>5</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>7</mn><mo separator="true">,</mo><mn>4</mn><mo stretchy="false">}</mo></mrow></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mo lspace="0em" rspace="0em">=</mo></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mrow><mtext>max</mtext><mtext> </mtext><mo stretchy="false">(</mo><mn>5</mn><mo separator="true">,</mo><mtext>multi_max</mtext><mtext> </mtext><mo stretchy="false">{</mo><mn>2</mn><mo separator="true">,</mo><mn>7</mn><mo separator="true">,</mo><mn>4</mn><mo stretchy="false">}</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle displaystyle="false" scriptlevel="0"><mrow/></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mo lspace="0em" rspace="0em">=</mo></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mrow><mtext>max</mtext><mtext> </mtext><mo stretchy="false">(</mo><mn>5</mn><mo separator="true">,</mo><mtext>max</mtext><mtext> </mtext><mo stretchy="false">(</mo><mn>2</mn><mo separator="true">,</mo><mtext>multi_max</mtext><mtext> </mtext><mo stretchy="false">{</mo><mn>7</mn><mo separator="true">,</mo><mn>4</mn><mo stretchy="false">}</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle displaystyle="false" scriptlevel="0"><mrow/></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mo lspace="0em" rspace="0em">=</mo></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mrow><mtext>max</mtext><mtext> </mtext><mo stretchy="false">(</mo><mn>5</mn><mo separator="true">,</mo><mtext>max</mtext><mtext> </mtext><mo stretchy="false">(</mo><mn>2</mn><mo separator="true">,</mo><mtext>max</mtext><mtext> </mtext><mo stretchy="false">(</mo><mn>7</mn><mo separator="true">,</mo><mtext>multi_max</mtext><mtext> </mtext><mo stretchy="false">{</mo><mn>4</mn><mo stretchy="false">}</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle displaystyle="false" scriptlevel="0"><mrow/></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mo lspace="0em" rspace="0em">=</mo></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mrow><mtext>max</mtext><mtext> </mtext><mo stretchy="false">(</mo><mn>5</mn><mo separator="true">,</mo><mtext>max</mtext><mtext> </mtext><mo stretchy="false">(</mo><mn>2</mn><mo separator="true">,</mo><mtext>max</mtext><mtext> </mtext><mo stretchy="false">(</mo><mn>7</mn><mo separator="true">,</mo><mn>4</mn><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle displaystyle="false" scriptlevel="0"><mrow/></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mo lspace="0em" rspace="0em">=</mo></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mrow><mtext>max</mtext><mtext> </mtext><mo stretchy="false">(</mo><mn>5</mn><mo separator="true">,</mo><mtext>max</mtext><mtext> </mtext><mo stretchy="false">(</mo><mn>2</mn><mo separator="true">,</mo><mn>7</mn><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle displaystyle="false" scriptlevel="0"><mrow/></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mo lspace="0em" rspace="0em">=</mo></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mrow><mtext>max</mtext><mtext> </mtext><mo stretchy="false">(</mo><mn>5</mn><mo separator="true">,</mo><mn>7</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle displaystyle="false" scriptlevel="0"><mrow/></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mo lspace="0em" rspace="0em">=</mo></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mn>7</mn></mstyle></mtd></mtr></mtable>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\begin{array}{lcl}
\textrm{multi\_max} \, \{5, 2, 7, 4\} &amp; = &amp; \textrm{max} \, (5, \textrm{multi\_max} \, \{2, 7, 4\}) \\
&amp; = &amp; \textrm{max} \, (5, \textrm{max} \, (2, \textrm{multi\_max} \, \{7, 4\})) \\
&amp; = &amp; \textrm{max} \, (5, \textrm{max} \, (2, \textrm{max} \, (7, \textrm{multi\_max} \, \{4\}))) \\
&amp; = &amp; \textrm{max} \, (5, \textrm{max} \, (2, \textrm{max} \, (7, 4))) \\
&amp; = &amp; \textrm{max} \, (5, \textrm{max} \, (2, 7)) \\
&amp; = &amp; \textrm{max} \, (5, 7) \\
&amp; = &amp; 7
\end{array}&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width: 0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 4.45em;"><span><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mord text"><span class="mord textrm">multi_max</span></span><span class="mspace"></span><span class="mopen">{</span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord">7</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord">4</span><span class="mclose">}</span></span></span><span><span class="pstrut" style="height: 3em;"></span><span class="mord"></span></span><span><span class="pstrut" style="height: 3em;"></span><span class="mord"></span></span><span><span class="pstrut" style="height: 3em;"></span><span class="mord"></span></span><span><span class="pstrut" style="height: 3em;"></span><span class="mord"></span></span><span><span class="pstrut" style="height: 3em;"></span><span class="mord"></span></span><span><span class="pstrut" style="height: 3em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 3.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width: 0.5em;"></span><span class="arraycolsep" style="width: 0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 4.45em;"><span><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mrel">=</span></span></span><span><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mrel">=</span></span></span><span><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mrel">=</span></span></span><span><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mrel">=</span></span></span><span><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mrel">=</span></span></span><span><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mrel">=</span></span></span><span><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mrel">=</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 3.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width: 0.5em;"></span><span class="arraycolsep" style="width: 0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 4.45em;"><span><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mord text"><span class="mord textrm">max</span></span><span class="mspace"></span><span class="mopen">(</span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord text"><span class="mord textrm">multi_max</span></span><span class="mspace"></span><span class="mopen">{</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord">7</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord">4</span><span class="mclose">})</span></span></span><span><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mord text"><span class="mord textrm">max</span></span><span class="mspace"></span><span class="mopen">(</span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord text"><span class="mord textrm">max</span></span><span class="mspace"></span><span class="mopen">(</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord text"><span class="mord textrm">multi_max</span></span><span class="mspace"></span><span class="mopen">{</span><span class="mord">7</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord">4</span><span class="mclose">}))</span></span></span><span><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mord text"><span class="mord textrm">max</span></span><span class="mspace"></span><span class="mopen">(</span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord text"><span class="mord textrm">max</span></span><span class="mspace"></span><span class="mopen">(</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord text"><span class="mord textrm">max</span></span><span class="mspace"></span><span class="mopen">(</span><span class="mord">7</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord text"><span class="mord textrm">multi_max</span></span><span class="mspace"></span><span class="mopen">{</span><span class="mord">4</span><span class="mclose">})))</span></span></span><span><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mord text"><span class="mord textrm">max</span></span><span class="mspace"></span><span class="mopen">(</span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord text"><span class="mord textrm">max</span></span><span class="mspace"></span><span class="mopen">(</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord text"><span class="mord textrm">max</span></span><span class="mspace"></span><span class="mopen">(</span><span class="mord">7</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord">4</span><span class="mclose">)))</span></span></span><span><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mord text"><span class="mord textrm">max</span></span><span class="mspace"></span><span class="mopen">(</span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord text"><span class="mord textrm">max</span></span><span class="mspace"></span><span class="mopen">(</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord">7</span><span class="mclose">))</span></span></span><span><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mord text"><span class="mord textrm">max</span></span><span class="mspace"></span><span class="mopen">(</span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord">7</span><span class="mclose">)</span></span></span><span><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mord">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 3.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width: 0.5em;"></span></span></span></span></span></span></span></div>
<p>All of these expressions are equivalent to one another. It just so happens that <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mn>7</mn></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;7&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">7</span></span></span></span></span> is the simplest of them.</p>
<p>From this perspective, computing is the same thing as simplifying.</p>
<h2 id="what-if-we-wanted-the-span-styletext-transform-nonetextrmminspan-instead"><a class="anchor before" href="https://www.tweag.io/rss.xml#what-if-we-wanted-the-span-styletext-transform-nonetextrmminspan-instead"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>What if we wanted the <span><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mtext>min</mtext></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\textrm{min}&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6679em;"></span><span class="mord text"><span class="mord textrm">min</span></span></span></span></span></span></span> instead?</h2>
<p>Now, for a twist, suppose we want to compute the minimum of a non-empty finite set of integers. We could just copy and paste our definition of <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mtext>multi_max</mtext></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\textrm{multi\_max}&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut"></span><span class="mord text"><span class="mord textrm">multi_max</span></span></span></span></span></span> and replace <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mtext>max</mtext></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\textrm{max}&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord text"><span class="mord textrm">max</span></span></span></span></span></span> with <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mtext>min</mtext></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\textrm{min}&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6679em;"></span><span class="mord text"><span class="mord textrm">min</span></span></span></span></span></span> everywhere:</p>
<div class="math math-display"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math display="block">&lt;semantics&gt;<mtable columnalign="left center center left" columnspacing="1em" rowspacing="0.16em"><mtr><mtd><mstyle displaystyle="false" scriptlevel="0"><mtext>multi_min</mtext></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mrow><mo stretchy="false">{</mo><mi>x</mi><mo stretchy="false">}</mo></mrow></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mo lspace="0em" rspace="0em">=</mo></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle displaystyle="false" scriptlevel="0"><mtext>multi_min</mtext></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mrow><mo stretchy="false">(</mo><mo stretchy="false">{</mo><mi>x</mi><mo stretchy="false">}</mo><mo>∪</mo><mo stretchy="false">(</mo><mi>X</mi><mo>∖</mo><mo stretchy="false">{</mo><mi>x</mi><mo stretchy="false">}</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mo lspace="0em" rspace="0em">=</mo></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mrow><mtext>min</mtext><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mtext>multi_min</mtext><mtext> </mtext><mo stretchy="false">(</mo><mi>X</mi><mo>∖</mo><mo stretchy="false">{</mo><mi>x</mi><mo stretchy="false">}</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\begin{array}{lccl}
\textrm{multi\_min} &amp; \{x\} &amp; = &amp; x \\
\textrm{multi\_min} &amp; (\{x\} \cup (X \setminus \{x\})) &amp; = &amp; \textrm{min} (x, \textrm{multi\_min} \, (X \setminus \{x\}))
\end{array}&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width: 0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 1.45em;"><span><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mord text"><span class="mord textrm">multi_min</span></span></span></span><span><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mord text"><span class="mord textrm">multi_min</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width: 0.5em;"></span><span class="arraycolsep" style="width: 0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 1.45em;"><span><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mopen">{</span><span class="mord mathnormal">x</span><span class="mclose">}</span></span></span><span><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mopen">({</span><span class="mord mathnormal">x</span><span class="mclose">}</span><span class="mspace"></span><span class="mbin">∪</span><span class="mspace"></span><span class="mopen">(</span><span class="mord mathnormal">X</span><span class="mspace"></span><span class="mbin">∖</span><span class="mspace"></span><span class="mopen">{</span><span class="mord mathnormal">x</span><span class="mclose">}))</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width: 0.5em;"></span><span class="arraycolsep" style="width: 0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 1.45em;"><span><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mrel">=</span></span></span><span><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mrel">=</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width: 0.5em;"></span><span class="arraycolsep" style="width: 0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 1.45em;"><span><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mord text"><span class="mord textrm">min</span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord text"><span class="mord textrm">multi_min</span></span><span class="mspace"></span><span class="mopen">(</span><span class="mord mathnormal">X</span><span class="mspace"></span><span class="mbin">∖</span><span class="mspace"></span><span class="mopen">{</span><span class="mord mathnormal">x</span><span class="mclose">}))</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width: 0.5em;"></span></span></span></span></span></span></span></div>
<p>Et voilà! Done!</p>
<p>However, we might not be extremely happy about this. A lot of the definition is just duplicated. It would be nicer if we could generalize this to remove the duplication.</p>
<p>The main trick to removing duplication when writing in this style is to keep the common parts and extract the different ones as inputs.</p>
<p>In this case, the only difference is in the usage of either the <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mtext>max</mtext></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\textrm{max}&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord text"><span class="mord textrm">max</span></span></span></span></span></span> or the <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mtext>min</mtext></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\textrm{min}&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6679em;"></span><span class="mord text"><span class="mord textrm">min</span></span></span></span></span></span> functions. They are both members of the <a href="https://en.wikipedia.org/wiki/Function_(mathematics)#Set_exponentiation">set of functions</a> from <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mi mathvariant="double-struck">Z</mi><mo>×</mo><mi mathvariant="double-struck">Z</mi></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\mathbb{Z} \times \mathbb{Z}&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut"></span><span class="mord mathbb">Z</span><span class="mspace"></span><span class="mbin">×</span><span class="mspace"></span></span><span class="base"><span class="strut" style="height: 0.6889em;"></span><span class="mord mathbb">Z</span></span></span></span></span> to <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mi mathvariant="double-struck">Z</mi></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\mathbb{Z}&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6889em;"></span><span class="mord mathbb">Z</span></span></span></span></span>, which we denote by <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><msup><mi mathvariant="double-struck">Z</mi><mrow><mi mathvariant="double-struck">Z</mi><mo>×</mo><mi mathvariant="double-struck">Z</mi></mrow></msup></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\mathbb{Z}^{\mathbb{Z} \times \mathbb{Z}}&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.8452em;"></span><span class="mord"><span class="mord mathbb">Z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height: 0.8452em;"><span><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathbb mtight">Z</span><span class="mbin mtight">×</span><span class="mord mathbb mtight">Z</span></span></span></span></span></span></span></span></span></span></span></span></span>.</p>
<p>Using this insight, we can now define</p>
<div class="math math-display"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math display="block">&lt;semantics&gt;<mrow><mtext>multi</mtext><mo>:</mo><msup><mi mathvariant="double-struck">Z</mi><mrow><mi mathvariant="double-struck">Z</mi><mo>×</mo><mi mathvariant="double-struck">Z</mi></mrow></msup><mo>×</mo><mi mathvariant="script">F</mi><mi mathvariant="double-struck">Z</mi><mo>→</mo><mi mathvariant="double-struck">Z</mi></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\textrm{multi} : \mathbb{Z}^{\mathbb{Z} \times \mathbb{Z}} \times \mathscr{F} \mathbb{Z} \to \mathbb{Z}&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6944em;"></span><span class="mord text"><span class="mord textrm">multi</span></span><span class="mspace"></span><span class="mrel">:</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mord"><span class="mord mathbb">Z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height: 0.8952em;"><span><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathbb mtight">Z</span><span class="mbin mtight">×</span><span class="mord mathbb mtight">Z</span></span></span></span></span></span></span></span></span><span class="mspace"></span><span class="mbin">×</span><span class="mspace"></span></span><span class="base"><span class="strut" style="height: 0.7em;"></span><span class="mord mathscr">F</span><span class="mord mathbb">Z</span><span class="mspace"></span><span class="mrel">→</span><span class="mspace"></span></span><span class="base"><span class="strut" style="height: 0.6889em;"></span><span class="mord mathbb">Z</span></span></span></span></span></div>
<p>which takes as its inputs a function to combine two integers and a non-empty finite set of integers, and returns an integer as its result.</p>
<p>Its implementation is similar to our previous <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mtext>multi_max</mtext></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\textrm{multi\_max}&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut"></span><span class="mord text"><span class="mord textrm">multi_max</span></span></span></span></span></span> and <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mtext>multi_min</mtext></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\textrm{multi\_min}&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut"></span><span class="mord text"><span class="mord textrm">multi_min</span></span></span></span></span></span><sup id="fnref-2"><a class="footnote-ref" href="https://www.tweag.io/rss.xml#fn-2">2</a></sup>:</p>
<div class="math math-display"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math display="block">&lt;semantics&gt;<mtable columnalign="left center center left" columnspacing="1em" rowspacing="0.16em"><mtr><mtd><mstyle displaystyle="false" scriptlevel="0"><mtext>multi</mtext></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mrow><mo stretchy="false">(</mo><mi>f</mi><mo separator="true">,</mo><mo stretchy="false">{</mo><mi>x</mi><mo stretchy="false">}</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mo lspace="0em" rspace="0em">=</mo></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle displaystyle="false" scriptlevel="0"><mtext>multi</mtext></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mrow><mo stretchy="false">(</mo><mi>f</mi><mo separator="true">,</mo><mo stretchy="false">(</mo><mo stretchy="false">{</mo><mi>x</mi><mo stretchy="false">}</mo><mo>∪</mo><mo stretchy="false">(</mo><mi>X</mi><mo>∖</mo><mo stretchy="false">{</mo><mi>x</mi><mo stretchy="false">}</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mo lspace="0em" rspace="0em">=</mo></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mtext>multi</mtext><mtext> </mtext><mo stretchy="false">(</mo><mi>f</mi><mo separator="true">,</mo><mi>X</mi><mo>∖</mo><mo stretchy="false">{</mo><mi>x</mi><mo stretchy="false">}</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\begin{array}{lccl}
\textrm{multi} &amp; (f, \{x\}) &amp; = &amp; x \\
\textrm{multi} &amp; (f, (\{x\} \cup (X \setminus \{x\}))) &amp; = &amp; f (x, \textrm{multi} \, (f, X \setminus \{x\}))
\end{array}&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width: 0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 1.45em;"><span><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mord text"><span class="mord textrm">multi</span></span></span></span><span><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mord text"><span class="mord textrm">multi</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width: 0.5em;"></span><span class="arraycolsep" style="width: 0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 1.45em;"><span><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">f</span><span class="mpunct">,</span><span class="mspace"></span><span class="mopen">{</span><span class="mord mathnormal">x</span><span class="mclose">})</span></span></span><span><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">f</span><span class="mpunct">,</span><span class="mspace"></span><span class="mopen">({</span><span class="mord mathnormal">x</span><span class="mclose">}</span><span class="mspace"></span><span class="mbin">∪</span><span class="mspace"></span><span class="mopen">(</span><span class="mord mathnormal">X</span><span class="mspace"></span><span class="mbin">∖</span><span class="mspace"></span><span class="mopen">{</span><span class="mord mathnormal">x</span><span class="mclose">})))</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width: 0.5em;"></span><span class="arraycolsep" style="width: 0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 1.45em;"><span><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mrel">=</span></span></span><span><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mrel">=</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width: 0.5em;"></span><span class="arraycolsep" style="width: 0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 1.45em;"><span><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mord mathnormal">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord text"><span class="mord textrm">multi</span></span><span class="mspace"></span><span class="mopen">(</span><span class="mord mathnormal">f</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord mathnormal">X</span><span class="mspace"></span><span class="mbin">∖</span><span class="mspace"></span><span class="mopen">{</span><span class="mord mathnormal">x</span><span class="mclose">}))</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width: 0.5em;"></span></span></span></span></span></span></span></div>
<p>Now we can redefine <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mtext>multi_max</mtext></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\textrm{multi\_max}&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut"></span><span class="mord text"><span class="mord textrm">multi_max</span></span></span></span></span></span> and <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mtext>multi_min</mtext></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\textrm{multi\_min}&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut"></span><span class="mord text"><span class="mord textrm">multi_min</span></span></span></span></span></span> by using <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mtext>max</mtext></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\textrm{max}&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord text"><span class="mord textrm">max</span></span></span></span></span></span> and <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mtext>min</mtext></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\textrm{min}&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6679em;"></span><span class="mord text"><span class="mord textrm">min</span></span></span></span></span></span>, respectively, as the first argument <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mi>f</mi></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;f&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut"></span><span class="mord mathnormal">f</span></span></span></span></span>:</p>
<div class="math math-display"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math display="block">&lt;semantics&gt;<mrow><mtext>multi_min</mtext><mtext> </mtext><mi>X</mi><mo>=</mo><mtext>multi</mtext><mtext> </mtext><mo stretchy="false">(</mo><mtext>min</mtext><mo separator="true">,</mo><mi>X</mi><mo stretchy="false">)</mo><mspace/><mtext>multi_max</mtext><mtext> </mtext><mi>X</mi><mo>=</mo><mtext>multi</mtext><mtext> </mtext><mo stretchy="false">(</mo><mtext>max</mtext><mo separator="true">,</mo><mi>X</mi><mo stretchy="false">)</mo></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\textrm{multi\_min} \, X = \textrm{multi} \, (\textrm{min}, X) \\
\textrm{multi\_max} \, X = \textrm{multi} \, (\textrm{max}, X)&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut"></span><span class="mord text"><span class="mord textrm">multi_min</span></span><span class="mspace"></span><span class="mord mathnormal">X</span><span class="mspace"></span><span class="mrel">=</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mord text"><span class="mord textrm">multi</span></span><span class="mspace"></span><span class="mopen">(</span><span class="mord text"><span class="mord textrm">min</span></span><span class="mpunct">,</span><span class="mspace"></span><span class="mord mathnormal">X</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut"></span><span class="mord text"><span class="mord textrm">multi_max</span></span><span class="mspace"></span><span class="mord mathnormal">X</span><span class="mspace"></span><span class="mrel">=</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mord text"><span class="mord textrm">multi</span></span><span class="mspace"></span><span class="mopen">(</span><span class="mord text"><span class="mord textrm">max</span></span><span class="mpunct">,</span><span class="mspace"></span><span class="mord mathnormal">X</span><span class="mclose">)</span></span></span></span></span></div>
<p>Our newly defined <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mtext>multi</mtext></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\textrm{multi}&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6944em;"></span><span class="mord text"><span class="mord textrm">multi</span></span></span></span></span></span> is much more general and opens up new possibilities. For example, we could define a function to compute the sum or the product of all the elements in a set just by plugging in <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mo>+</mo></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;+&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut"></span><span class="mord">+</span></span></span></span></span> or <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math>&lt;semantics&gt;<mrow><mo>∗</mo></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;*&lt;/annotation&gt;&lt;/semantics&gt;</math></span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.4653em;"></span><span class="mord">∗</span></span></span></span></span> as the first argument.</p>
<h2 id="conclusion"><a class="anchor before" href="https://www.tweag.io/rss.xml#conclusion"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Conclusion</h2>
<p>Programming using only mathematical functions is certainly doable, and it also has many perks, since it allows us to reuse all the knowledge we acquired about functions during our math studies, and build on concepts which are typically learned in high school.</p>
<p>Moreover, functions are by definition deterministic – a characteristic which generally does not hold for <a href="https://www.haskellforall.com/2013/07/statements-vs-expressions.html">imperative statements</a> – and this allows to keep things more explicit and more easily testable.</p>
<p>Even though the conceptual model is extremely simple, it is nonetheless <a href="https://en.wikipedia.org/wiki/Lambda_calculus#Explanation_and_applications">as powerful as other programming paradigms could be</a>. In particular, it is possible to model with functions every possible interaction with the external world, including <a href="https://hackage.haskell.org/package/base-4.16.1.0/docs/Prelude.html#t:IO">IO actions</a> and <a href="https://hackage.haskell.org/package/base-4.16.1.0/docs/Data-IORef.html">mutable variables</a>.</p>
<p>The trick to achieve this consists in appropriately enlarging the domain and the codomain of our functions. Does the function need to access some data? Enlarge its domain to add an input parameter. Does the function need to interact with some external component? Enlarge the codomain to return all the data necessary to describe the required interaction.</p>
<p>Once you have modeled your computation as a function, you can hand it over to a machine which is able to execute it way faster that you could possibly do on your own.</p>
<p>If you have an interesting algorithm (or even a boring one!) to implement, it is always a valuable exercise to think how it could be implemented just in terms of sets and functions. It will help you to understand and to create a more precise mental model of the flow of the data throughout your implementation, possibly uncovering some hidden assumptions you were making which would be better treated explicitly.</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn-1">I am referring to <a href="https://en.wikipedia.org/wiki/Pure_function">pure</a> functional programming, specifically. Other programming languages exist which are referred to as functional, in which the functions do not necessarily adhere to this kind of mathematical definition.<a class="footnote-backref" href="https://www.tweag.io/rss.xml#fnref-1">↩</a></li>
<li id="fn-2">For the attentive reader: since a set has no natural ordering, this definition works only for an associative and commutative binary function <code class="language-text">f</code>. Working with naturally ordered structures as <a href="https://en.wikipedia.org/wiki/List_(abstract_data_type)">lists</a> instead of sets makes the issue disappear.<a class="footnote-backref" href="https://www.tweag.io/rss.xml#fnref-2">↩</a></li>
</ol>
</div></div>
    </summary>
    <updated>2022-11-08T00:00:00Z</updated>
    <published>2022-11-08T00:00:00Z</published>
    <source>
      <id>https://tweag.io</id>
      <author>
        <name>Tweag I/O</name>
      </author>
      <link href="https://tweag.io" rel="alternate" type="text/html">
      <link href="http://www.tweag.io/rss.xml" rel="self" type="application/rss+xml">
      <subtitle>Scale your engineering power. We enable deep-tech startups to achieve
their vision, from research to product delivery.</subtitle>
      <title>Tweag - Engineering blog</title>
      <updated>2022-11-17T06:35:57Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-US">
    <id>584219d403596e3099e0ee9b:58462c0e15d5db6feba171c0:6360737595087879b5da3631</id>
    <link href="https://mmhaskell.com/blog/2022/11/7/zoom-enhance" rel="alternate" type="text/html">
    <title>Zoom! Enhance!</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><figure class="               sqs-block-image-figure               intrinsic             ">
          
        
        

        
          
            
          
            
              <img alt="" class="thumb-image" src="https://images.squarespace-cdn.com/content/v1/584219d403596e3099e0ee9b/dc410879-16a2-455a-afc5-e73cf98738dd/zoom_enhance.jpg?format=1000w">
            
          
        
          
        

        
      
        </figure>
      

    
  


  




<p>Today we'll be tackling the <a href="https://adventofcode.com/2021/day/20">Day 20</a> problem from Advent of Code 2021. This problem is a fun take on the <a href="https://knowyourmeme.com/memes/zoom-and-enhance">Zoom and Enhance cliche</a> from TV dramas where cops and spies can always seem to get unrealistic details from grainy camera footage by &quot;enhancing&quot; it. We'll have a binary image and we'll need to keep applying a decoding key to expand the image.</p>
<p>As always, you can see all the nitty gritty details of the code at once by going to the <a href="https://github.com/MondayMorningHaskell/AdventOfCode/blob/main/src/Day20.hs">GitHub repository</a> I've made for these problems. If you're enjoying these in-depth walkthroughs, make sure to <a href="https://www.mmhaskell.com/subscribe">subscribe</a> so you can stay up to date with the latest news.</p>
<h2 id="problem-statement">Problem Statement</h2>
<p>Our problem input consists of a couple sections that have &quot;binary&quot; data, where the <code>.</code> character represents 0 and the <code>#</code> character represents 1.</p>
<pre><code>..#.#..#####.#.#.#.###.##.....###.##.#..###.####..#####..#....#..#..##..##
#..######.###...####..#..#####..##..#.#####...##.#.#..#.##..#.#......#.###
.######.###.####...#.##.##..#..#..#####.....#.#....###..#.##......#.....#.
.#..#..##..#...##.######.####.####.#.#...#.......#..#.#.#...####.##.#.....
.#..#...##.#.##..#...##.#.##..###.#......#.#.......#.#.#.####.###.##...#..
...####.#..#..#.##.#....##..#.####....##...##..#...#......#.#.......#.....
..##..####..#...#.#.#...##..#.#..###..#####........#..####......#..#

#..#.
#....
##..#
..#..
..###</code></pre><p>The first part (which actually would appear all on one line) is a 512 character decoding key. Why length 512? Well <code>512 = 2^9</code>, and we'll see in a second why the ninth power is significant.</p>
<p>The second part of the input is a 2D &quot;image&quot;, represented in binary. Our goal is to &quot;enhance&quot; the image using the decoding key. How do we enhance it?</p>
<p>To get the new value at a coordinate <code>(x, y)</code>, we have to consider the value at that coordinate together with all 8 of its neighbors.</p>
<pre><code># . . # .
#[. . .].
#[# . .]#
.[. # .].
. . # # #</code></pre><p>The brackets show every pixel that is involved in getting the new value at the &quot;center&quot; of our grid. The way we get the value is to line up these pixels in binary: <code>...#...#. = 000100010</code>. Then we get the decimal value (34 in this case). This tells us new value comes from the 34th character in the decoder key, which is <code>#</code>. So this middle pixel will be &quot;on&quot; after the first expansion. Since each pixel expansion factors in 9 pixels, there are <code>2^9 = 512</code> possible values, hence the length of the decoding key.</p>
<p>All transformations happen simultaneously. What is noteworthy is that for &quot;fringe&quot; pixels we must account for the boundary outside the initial image. And in fact, our image then expands into this new region! The enhanced version of our first 5x5 image actually becomes size 7x7.</p>
<pre><code>.##.##.
#..#.#.
##.#..#
####..#
.#..##.
..##..#
...#.#.</code></pre><p>For the easy part, we'll do this expansion twice. For the hard part, we'll do it 50 times. Our puzzle answer is the number of pixels that are lit in the final iteration.</p>
<h2 id="solution-approach">Solution Approach</h2>
<p>At first glance, this problem is pretty straightforward. It's another &quot;state evolution&quot; problem where we take the problem in an initial state and write a function to evolve that state to the next step. Evolving a single step involves looking at the individual pixels, and applying a fairly simple algorithm to get the resulting pixel.</p>
<p>The ever-expanding range of coordinates is a little tricky. But if we use a structure that allows &quot;negative&quot; indices (and Haskell makes this easy!), it's not too bad.</p>
<p>But there's one <strong>BIG</strong> nuance though with how the &quot;infinite&quot; image works. We still have to implicitly imagine that the enhancement algorithm is applying to all the other pixels in &quot;infinite space&quot;. You would hope that, since all those pixels are surrounded by other &quot;off&quot; pixels, they remain &quot;off&quot;.</p>
<p>However, my &quot;hard&quot; puzzle input got a decoding key with <code>#</code> in the <code>0</code> position, meaning that &quot;off&quot; pixels surrounded by other &quot;off&quot; pixels all turn on! Luckily, the decoder also has <code>.</code> in the final position, meaning that these pixels turn &quot;off&quot; again on the next step. However, we need to account for this on/off pattern of all these &quot;outside pixels&quot; since they'll affect the pixels on the fringe of our solution.</p>
<p>To that end, we'll need to keep track of the value of outer pixels throughout our algorithm - I'll refer to this as the &quot;outside bit&quot;. This will impact every layer of the solution!</p>
<p>So with that to look forward to, let's start coding!</p>
<h2 id="utilities">Utilities</h2>
<p>As always, a few utilities will benefit us. From <a href="https://www.mmhaskell.com/blog/2022/10/31/binary-packet-parsing">last week's look at binary numbers</a>, we'll use a couple helpers like the <code>Bit</code> type and a binary-to-decimal conversion function.</p>
<pre><code class="lang-haskell">data Bit = Zero | One
  deriving (Eq, Ord)

bitsToDecimal64 :: [Bit] -&gt; Word64</code></pre>
<p>Another very useful idea is turning a nested list into a hash map. This helps simplify parsing a lot. We saw this function in the <a href="https://www.mmhaskell.com/blog/2022/10/10/flashing-octopuses-and-bfs">Day 11 Octopus Problem</a>.</p>
<pre><code class="lang-haskell">hashMapFromNestedLists :: [[a]] -&gt; HashMap Coord2 a</code></pre>
<p>Another idea from Day 11 was getting all 8 neighbors of a 2D coordinate. Originally, we did this with <code>(0,0)</code> as a hard lower bound. But we can expand this idea so that the grid bounds of the function are taken as inputs. So <code>getNeighbors8Flex</code> takes two additional coordinate parameters to help provide those bounds for us.</p>
<pre><code class="lang-haskell">getNeighbors8Flex :: Coord2 -&gt; Coord2 -&gt; Coord2 -&gt; [Coord2]
getNeighbors8Flex (minRow, minCol) (maxRow, maxCol) (row, col) = catMaybes
  [maybeUpLeft, maybeUp, maybeUpRight, maybeLeft, maybeRight, maybeDownLeft, maybeDown, maybeDownRight]
  where
    maybeUp = if row &gt; minRow then Just (row - 1, col) else Nothing
    maybeUpRight = if row &gt; minRow &amp;&amp; col &lt; maxCol then Just (row - 1, col + 1) else Nothing
    maybeRight = if col &lt; maxCol then Just (row, col + 1) else Nothing
    maybeDownRight = if row &lt; maxRow &amp;&amp; col &lt; maxCol then Just (row + 1, col + 1) else Nothing
    maybeDown = if row &lt; maxRow then Just (row + 1, col) else Nothing
    maybeDownLeft = if row &lt; maxRow &amp;&amp; col &gt; minCol then Just (row + 1, col - 1) else Nothing
    maybeLeft = if col &gt; minCol then Just (row, col - 1) else Nothing
    maybeUpLeft = if row &gt; minRow &amp;&amp; col &gt; minCol then Just (row - 1, col - 1) else Nothing</code></pre>
<p>Of particular note is the way we <strong>order the results</strong>. This ordering (top, then same row, then bottom), will allow us to easily decode our values for this problem.</p>
<p>Another detail for this problem is that we'll just want to use &quot;no bounds&quot; on the coordinates with the minimum and maximum integers as the bounds.</p>
<pre><code class="lang-haskell">getNeighbors8Unbounded :: Coord2 -&gt; [Coord2]
getNeighbors8Unbounded = getNeighbors8Flex (minBound, minBound) (maxBound, maxBound)</code></pre>
<p>Last but not least, we'll also rely on this old standby, the <code>countWhere</code> function, to quickly get the occurrence of certain values in a list.</p>
<pre><code class="lang-haskell">countWhere :: (a -&gt; Bool) -&gt; [a] -&gt; Int</code></pre>
<h2 id="inputs">Inputs</h2>
<p>Like all Advent of Code problems, we'll start with parsing our input. We need to get everything into bits, but instead of <code>0</code> and <code>1</code> characters, we're dealing with the character <code>.</code> for off, and <code>#</code> for 1. So we start with a <code>choice</code> parser to get a single pixel.</p>
<pre><code class="lang-haskell">parsePixel :: (MonadLogger m) =&gt; ParsecT Void Text m Bit
parsePixel = choice [char '.' &gt;&gt; return Zero, char '#' &gt;&gt; return One]</code></pre>
<p>Now we need a couple types to organize our values. The decoder map will tell us a particular bit for every index from 0-511. So we can use a hash map with <code>Word64</code> as the key.</p>
<pre><code class="lang-haskell">type DecoderMap = HashMap Word64 Bit</code></pre>
<p>Furthermore, it's easy to see how we build this decoder from a list of bits with a simple <code>zip</code>:</p>
<pre><code class="lang-haskell">buildDecoder :: [Bit] -&gt; DecoderMap
buildDecoder input = HM.fromList (zip [0..] input)</code></pre>
<p>For the image though, we have 2D data. So let's using a hash map over <code>Coord2</code> for our <code>ImageMap</code> type:</p>
<pre><code class="lang-haskell">type ImageMap = HashMap Coord2 Bit</code></pre>
<p>We have enough tools to start writing our function now. We'll parse an initial series of pixels and build the decoder out of them, followed by a couple <code>eol</code> characters.</p>
<pre><code class="lang-haskell">parseInput :: (MonadLogger m) =&gt; ParsecT Void Text m (DecoderMap, ImageMap)
parseInput = do
  decoderMap &lt;- buildDecoder &lt;$&gt; some parsePixel
  eol &gt;&gt; eol
  ...</code></pre>
<p>Now we'll get the 2D image. We'll start by getting a nested list structure using the <code>sepEndBy1 ... eol</code> trick we've seen so many times already.</p>
<pre><code class="lang-haskell">parse2DImage :: (MonadLogger m) =&gt; ParsecT Void Text m [[Bit]]
parse2DImage = sepEndBy1 (some parsePixel) eol</code></pre>
<p>Now to put it all together, we'll use our conversion function to get our map from the nested lists, and then we've got our two inputs: the <code>DecoderMap</code> and the initial <code>ImageMap</code>!</p>
<pre><code class="lang-haskell">parseInput :: (MonadLogger m) =&gt; ParsecT Void Text m (DecoderMap, ImageMap)
parseInput = do
  decoderMap &lt;- buildDecoder &lt;$&gt; some parsePixel
  eol &gt;&gt; eol
  image &lt;- hashMapFromNestedLists &lt;$&gt; parse2DImage
  return (decoderMap, image)</code></pre>
<h2 id="processing-one-pixel">Processing One Pixel</h2>
<p>In terms of writing out the algorithm, we'll try a &quot;bottom up&quot; approach this time. We'll start by solving the smallest problem we can think of, which is this: For a single pixel, how do we calculate its new value in one step of expansion?</p>
<p>There are multiple ways to approach this piece, but the way I chose was to imagine this as a folding function. We'll start a new &quot;enhanced&quot; image as an empty map, and we'll insert the new pixels one-by-one using this folding function. So each iteration modifies a single <code>Coord2</code> key of an <code>ImageMap</code>. We can fit this into a &quot;fold&quot; pattern if the end of this function's signature looks like this:</p>
<pre><code class="lang-haskell">-- At some point we have HM.insert coord bit newImage
f :: ImageMap -&gt; Coord2 -&gt; m ImageMap
f newImage coord = ...</code></pre>
<p>But we need some extra information in this function to solve the problem of which &quot;bit&quot; we're inserting. We'll need the original image of course, to find the pixels around this coordinate. We'll also need the decoding map once we convert these to a decimal index. Last of all, we need the &quot;outside bit&quot; discussed above in the solution approach. Here's a type signature to gather these together.</p>
<pre><code class="lang-haskell">processPixel ::
  (MonadLogger m) =&gt;
  DecoderMap -&gt;
  ImageMap -&gt;
  Bit -&gt;
  ImageMap -&gt; Coord2 -&gt; m ImageMap
processPixel decoderMap initialImage bounds outsideBit newImage pixel = ...</code></pre>
<p>Let's start with a helper function to get the original image's bit at a particular coordinate.  Whenever we do a bit lookup outside our original image, its coordinates will not exist in the <code>initialImage</code> map. In this case we'll use the outside bit.</p>
<pre><code class="lang-haskell">processPixel decoderMap initialImage outsideBit newImage pixel = do
  ...
  where
    getBit :: Coord2 -&gt; Bit
    getBit coord = fromMaybe outsideBit (initialImage HM.!? coord)</code></pre>
<p>Now we need to get all the neighboring coordinates of this pixel. We'll use our <code>getNeighbors8Unbounded</code> utility from above. We could restrict ourselves to the bounds of the original, augmented by 1, but there's no particular need. We get the bit at each location, and assert that we have indeed found all 8 neighbors.</p>
<pre><code class="lang-haskell">processPixel decoderMap initialImage outsideBit newImage pixel = do
  let allNeighbors = getNeighbors8Unbounded pixel
      neighborBits = getBit &lt;$&gt; allNeighbors
  if length allNeighbors /= 8
    then error &quot;Must have 8 neighbors!&quot;
    ...
where
    getBit = ...</code></pre>
<p>Now the &quot;neighbors&quot; function doesn't include the bit at the specific input pixel! So we have to split our neighbors and insert it into the middle like so:</p>
<pre><code class="lang-haskell">processPixel decoderMap initialImage outsideBit newImage pixel = do
  let allNeighbors = getNeighbors8Unbounded pixel
      neighborBits = getBit &lt;$&gt; allNeighbors
  if length allNeighbors /= 8
    then error &quot;Must have 8 neighbors!&quot;
    else do
      let (first4, second4) = splitAt 4 neighborBits
          finalBits = first4 ++ (getBit pixel : second4)
     ...
where
    getBit = ...</code></pre>
<p>Now that we have a list of 9 bits, we can decode those bits (using <code>bitsToDecimal64</code> from last time). This gives us the index to look up in our decoder, which we insert into the new image!</p>
<pre><code class="lang-haskell">processPixel decoderMap initialImage outsideBit newImage pixel = do
  let allNeighbors = getNeighbors8Unbounded pixel
      neighborBits = getBit &lt;$&gt; allNeighbors
  if length allNeighbors /= 8
    then error &quot;Must have 8 neighbors!&quot;
    else do
      let (first4, second4) = splitAt 4 neighborBits
          finalBits = first4 ++ (getBit pixel : second4)
          indexToDecode = bitsToDecimal64 finalBits
          bit = decoderMap HM.! indexToDecode
      return $ HM.insert pixel bit newImage
  where
    getBit :: Coord2 -&gt; Bit
    getBit coord = fromMaybe outsideBit (initialImage HM.!? coord)</code></pre>
<h2 id="expanding-the-image">Expanding the Image</h2>
<p>Now that we can populate the value for a single pixel, let's step back one layer of the problem and determine how to expand the full image. As mentioned above, we ultimately want to use our function above like a fold. So we need enough arguments to reduce it to:</p>
<pre><code class="lang-haskell">ImageMap -&gt; Coord2 -&gt; m ImageMap</code></pre>
<p>Then we can start with an empty image map, and loop through every coordinate. So let's make sure we include the decoder map, the original image, and the &quot;outside bit&quot; in our type signature to ensure we have all the processing arguments.</p>
<pre><code class="lang-haskell">expandImage :: (MonadLogger m) =&gt; DecoderMap -&gt; ImageMap -&gt; Bit -&gt; m ImageMap
expandImage decoderMap image outsideBit = ...</code></pre>
<p>Our chief task is to determine the coordinates to loop through. We can't just use the coordinates from the original image though. We have to expand by 1 in each direction so that the outside pixels can come into play. After adding 1, we use <code>Data.Ix.range</code> to interpolate all the coordinates in between our minimum and maximum.</p>
<pre><code class="lang-haskell">expandImage decoderMap image outsideBit = ...
  where
    (minRow, minCol) = minimum (HM.keys image)
    (maxRow, maxCol) = maximum (HM.keys image)
    newBounds = ((minRow - 1, minCol - 1), (maxRow + 1, maxCol + 1))
    allCoords = range newBounds</code></pre>
<p>And now we have all the ingredients for our fold! We partially apply <code>decoderMap</code>, <code>image</code>, and <code>outsideBit</code>, and then use a fresh empty image and the coordinates.</p>
<pre><code class="lang-haskell">expandImage decoderMap image outsideBit = foldM
  (processPixel decoderMap image outsideBit)
  HM.empty
  allCoords
  where
    (minRow, minCol) = minimum (HM.keys image)
    (maxRow, maxCol) = maximum (HM.keys image)
    newBounds = ((minRow - 1, minCol - 1), (maxRow + 1, maxCol + 1))
    allCoords = range newBounds</code></pre>
<h2 id="running-the-expansion">Running the Expansion</h2>
<p>Now that we can expand the image once, we just have to zoom out one more layer, and run the expansion a certain number of times. We'll write a recursive function that uses the decoder map, the initial image, and an integer argument for our current step count. This will return the total number of pixels that are lit in the final image.</p>
<pre><code class="lang-haskell">runExpand :: (MonadLogger m) =&gt; DecoderMap -&gt; ImageMap -&gt; Int -&gt; m Int</code></pre>
<p>The base case occurs when we have 0 steps remaining. We'll just count the number of elements that have the <code>One</code> bit in our current image.</p>
<pre><code class="lang-haskell">runExpand _ image 0 = return $ countWhere (== One) (HM.elems image)</code></pre>
<p>The only trick with the recursive case is that we have to determine the &quot;outside bit&quot;. If the element corresponding to <code>0</code> in the decoder map is <code>One</code>, then all the outside bits will flip back and forth. So we need to check this bit, as well as the step count. For even step counts, we'll use <code>Zero</code> for the outside bits. And of course, if the decoder head is 0, then there's no flipping at all, so we always get <code>Zero</code>.</p>
<pre><code class="lang-haskell">runExpand _ image 0 = return $ countWhere (== One) (HM.elems image)
runExpand decoderMap initialImage stepCount = do
  ...
  where
    outsideBit = if decoderMap HM.! 0 == Zero || even stepCount
      then Zero
      else One</code></pre>
<p>Now we have all the arguments we need for our <code>expandImage</code> call! So let's get that new image and recurse using <code>runExpand</code>, with a reduced step count.</p>
<pre><code class="lang-haskell">runExpand _ image 0 = return $ countWhere (== One) (HM.elems image)
runExpand decoderMap initialImage stepCount = do
  finalImage &lt;- expandImage decoderMap initialImage outsideBit
  runExpand decoderMap finalImage (stepCount - 1)
  where
    outsideBit = if decoderMap HM.! 0 == Zero || even stepCount then Zero else One</code></pre>
<h2 id="solving-the-problem">Solving the Problem</h2>
<p>Now we're well positioned to solve the problem. We'll parse the input into the decoder map and the first image with another old standby, <code>parseFile</code>. Then we'll run the expansion for 2 steps and return the number of lit pixels.</p>
<pre><code class="lang-haskell">solveDay20Easy :: String -&gt; IO (Maybe Int)
solveDay20Easy fp = runStdoutLoggingT $ do
  (decoderMap, initialImage) &lt;- parseFile parseInput fp
  pixelsLit &lt;- runExpand decoderMap initialImage 2
  return $ Just pixelsLit</code></pre>
<p>The hard part is virtually identical, just increasing the number of steps up to 50.</p>
<pre><code class="lang-haskell">solveDay20Hard :: String -&gt; IO (Maybe Int)
solveDay20Hard fp = runStdoutLoggingT $ do
  (decoderMap, initialImage) &lt;- parseFile parseInput fp
  pixelsLit &lt;- runExpand decoderMap initialImage 50
  return $ Just pixelsLit</code></pre>
<p>And we're done!</p>
<h2 id="conclusion">Conclusion</h2>
<p>Later this week we'll have the video walkthrough! If you want to see the complete code in action, you can take a look <a href="https://github.com/MondayMorningHaskell/AdventOfCode/blob/main/src/Day20.hs">on GitHub</a>.</p>
<p>If you <a href="https://www.mmhaskell.com/subscribe">subscribe</a> to our monthly newsletter, you'll get all the latest news and offers from Monday Morning Haskell, as well as access to our <a href="https://www.mmhaskell.com/resources">subscriber resources</a>!</p></div>
    </summary>
    <updated>2022-11-07T15:30:00Z</updated>
    <published>2022-11-07T15:30:00Z</published>
    <author>
      <name>James Bowen</name>
    </author>
    <source>
      <id>https://mmhaskell.com/blog/</id>
      <link href="https://mmhaskell.com/blog/" rel="alternate" type="text/html">
      <link href="https://mmhaskell.com/blog?format=rss" rel="self" type="application/rss+xml">
      <title>Blog - Monday Morning Haskell</title>
      <updated>2022-11-17T02:30:51Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://haskell.org/ghc/blog/20221107-ghc-9.2.5-released.html</id>
    <link href="http://haskell.org/ghc/blog/20221107-ghc-9.2.5-released.html" rel="alternate" type="text/html">
    <title>GHC 9.2.5 is now available</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><h1>GHC 9.2.5 is now available</h1>
<h4 class="text-muted">Zubin Duggal - 2022-11-07</h4>

<p>The GHC developers are happy to announce the availability of GHC 9.2.5. Binary
distributions, source distributions, and documentation are available at
<a href="https://downloads.haskell.org/ghc/9.2.5">downloads.haskell.org</a>.</p>
<p>This release is primarily a bugfix release addressing a few issues
found in 9.2.4. These include:</p>
<ul>
<li>Code generation issues in the AArch64 native code generator backend
resulting in incorrect runtime results in some circumstances (<a href="https://gitlab.haskell.org/ghc/ghc/issues/22282">#22282</a>, <a href="https://gitlab.haskell.org/ghc/ghc/issues/21964">#21964</a>)</li>
<li>Fixes for a number of issues with the simplifier leading to core lint
errors and suboptimal performance (<a href="https://gitlab.haskell.org/ghc/ghc/issues/21694">#21694</a>, <a href="https://gitlab.haskell.org/ghc/ghc/issues/21755">#21755</a>, <a href="https://gitlab.haskell.org/ghc/ghc/issues/22114">#22114</a>)</li>
<li>A long-standing interface-file determinism issue where full paths would leak
into the interface file (<a href="https://gitlab.haskell.org/ghc/ghc/issues/22162">#22162</a>)</li>
<li>A runtime system bug where creating empty mutable arrays resulted in a crash
(<a href="https://gitlab.haskell.org/ghc/ghc/issues/21962">#21962</a>)</li>
<li>â€¦ and a few more. See the <a href="https://downloads.haskell.org/~ghc/9.2.5/docs/html/users_guide/9.2.5-notes.html">release notes</a> for a full accounting.</li>
</ul>
<p>As some of the fixed issues do affect correctness users are encouraged to
upgrade promptly.</p>
<p>We would like to thank Microsoft Azure, GitHub, IOG, the Zw3rk stake pool,
Well-Typed, Tweag I/O, Serokell, Equinix, SimSpace, Haskell Foundation, and
other anonymous contributors whose on-going financial and in-kind support has
facilitated GHC maintenance and release management over the years. Finally,
this release would not have been possible without the hundreds of open-source
contributors whose work comprise this release.</p>
<p>As always, do give this release a try and open a <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/new">ticket</a> if you see
anything amiss.</p>
<p>Happy compiling,</p>
<ul>
<li>Zubin</li>
</ul></div>
    </summary>
    <updated>2022-11-07T00:00:00Z</updated>
    <published>2022-11-07T00:00:00Z</published>
    <author>
      <name>ghc-devs</name>
    </author>
    <source>
      <id>http://haskell.org/ghc</id>
      <link href="http://haskell.org/ghc" rel="alternate" type="text/html">
      <link href="http://haskell.org/ghc/rss.xml" rel="self" type="application/rss+xml">
      <title>GHC Developer blog</title>
      <updated>2022-11-07T00:00:00Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:,2022:/prog/haskell/numbers</id>
    <link href="https://blog.plover.com/prog/haskell/numbers.html" rel="alternate" type="text/html">
    <title>A map of Haskell's numeric types</title>
    <content type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p>I keep getting lost in the maze of Haskell's numeric types.  Here's
the map I drew to help myself out.  (I think there might have been something like
this in the original Haskell 1998 report.)</p>

<p><a href="https://pic.blog.plover.com/prog/haskell/numbers/haskell-numbers-1.1.svg"><img class="center" src="https://pic.blog.plover.com/prog/haskell/numbers/haskell-numbers-1.1.svg"></a></p>

<div style="font-size: small;"> <a href="https://pic.blog.plover.com/prog/haskell/numbers/haskell-numbers-1.1.png">(PNG version)</a> <a href="https://pic.blog.plover.com/prog/haskell/numbers/haskell-numbers.dot">(Original DOT file</a> (The SVG
above is hand-edited <a href="https://graphviz.org/">graphviz</a>
output))</div>

<p>Ovals are typeclasses.  Rectangles are types.  Black mostly-straight
arrows show instance relationships.  Most of the defined functions
have straightforward types like <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24%5calpha%5cto%5calpha%24"> or
<img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24%5calpha%5cto%5calpha%5cto%5calpha%24"> or <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24%5calpha%5cto%5calpha%5cto%5ctext%7bBool%7d%24">.
The few exceptions are shown by wiggly colored arrows.</p>

<h2>Basic plan</h2>

<p>After I had meditated for a while on this picture I began to
understand the underlying organization.  All numbers support <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24%3d%24"> and
<img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24%5cneq%24">.  And there are three important properties numbers might
additionally have:</p>

<ul>
<li><code>Ord</code> : ordered; supports <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24%5clt%5cleqslant%5cgeqslant%5cgt%24"> etc.</li>
<li><code>Fractional</code> : supports division</li>
<li><code>Enum</code>: supports ‘pred’ and ‘succ’ </li>
</ul>

<p><code>Integral</code> types are both <code>Ord</code> and <code>Enum</code>, but they are not
<code>Fractional</code> because integers aren't closed under division.</p>

<p>Floating-point and rational types are <code>Ord</code> and <code>Fractional</code> but not
<code>Enum</code> because there's no notion of the ‘next’ or ‘previous’ rational
number.</p>

<p>Complex numbers are numbers but not <code>Ord</code> because they don't admit a
total ordering.  That's why <code>Num</code> plus <code>Ord</code> is called <code>Real</code>: it's
‘real’ as constrasted with ‘complex’.</p>

<h2>More stuff</h2>

<p>That's the basic scheme.   There are some less-important elaborations:</p>

<p><code>Real</code> plus <code>Fractional</code> is called <code>RealFrac</code>.</p>

<p>Fractional numbers can be represented as exact rationals or as
floating point.  In the latter case they are instances of
<code>Floating</code>. The <code>Floating</code> types are required to support a large
family of functions like <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24%5clog%2c%20%5csin%2c%24"> and π.</p>

<p>You can construct a <code>Ratio a</code> type for any <code>a</code>; that's a fraction
whose numerators and denominators are values of type <code>a</code>.  If you do this, the
<code>Ratio a</code> that you get is a <code>Fractional</code>, even if <code>a</code> wasn't one.  In particular,
<code>Ratio Integer</code> is called <code>Rational</code> and is (of course) <code>Fractional</code>.</p>

<h2>Shuff that don't work so good</h2>

<p><code>Complex Int</code> and <code>Complex Rational</code> look like they should exist, but
they don't really. <code>Complex a</code> is only an instance of <code>Num</code> when <code>a</code>
is floating-point.  This means you can't even do <code>3 :: Complex
Int</code> — there's no definition of <code>fromInteger</code>.
You can construct values of type <code>Complex Int</code>, but you can't do
anything with them, not even addition and subtraction.  I think the
root of the problem  is that <code>Num</code> requires an <code>abs</code>
function, and for complex numbers you need the <code>sqrt</code> function to be
able to compute <code>abs</code>.</p>

<p><code>Complex Int</code> could in principle support most of the functions
required by <code>Integral</code> (such as <code>div</code> and <code>mod</code>) but Haskell
forecloses this too because its definition of <code>Integral</code> requires
<code>Real</code> as a prerequisite.</p>

<p>You are only allowed to construct <code>Ratio a</code> if <code>a</code> is <em>integral</em>.
Mathematically this is a bit odd.  There is a generic construction,
called the <a href="https://en.wikipedia.org/wiki/Field_of_quotients">field of quotients</a>, which takes
a ring and turns it into a field, essentially by considering all the
formal fractions <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24%5cfrac%20ab%24"> (where <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24b%5cne%200%24">), and with <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24%5c%5cfrac%20ab%24">
considered equivalent to <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24%5cfrac%7ba%27%7d%7bb%27%7d%24"> exactly when <img src="https://chart.apis.google.com/chart?chf=bg,s,00000000&amp;cht=tx&amp;chl=%24ab%27%20%3d%20a%27b%24">.
If you do this with the integers, you get the rational numbers; if you
do it with a ring of polynomials, you get a field of rational functions, and
so on.  If you do it to a ring that's already a field, it still
works, and the field you get is trivially isomorphic to the original
one.  But Haskell doesn't allow it.</p>

<p>I had another couple of pages written about yet more ways in which the
numeric class hierarchy is a mess (the draft title of this article was
&quot;Haskell's numbers are a hot mess&quot;) but I'm going to cut the scroll
here and leave the hot mess for another time.</p>

<p>[ Addendum: Updated SVG and PNG to version 1.1. ]</p></div>
    </content>
    <updated>2022-11-05T01:12:00Z</updated>
    <published>2022-11-05T01:12:00Z</published>
    <category term="/prog/haskell"/>
    <author>
      <name>Mark Dominus</name>
      <email>mjd@plover.com</email>
      <uri>http://www.plover.com/</uri>
    </author>
    <source>
      <id>tag:,2005:/</id>
      <icon>http://perl.plover.com/favicon.ico</icon>
      <link href="https://blog.plover.com/index.atom" rel="self" type="application/atom+xml">
      <link href="https://blog.plover.com" rel="alternate" type="text/html">
      <subtitle>The Universe of Discourse (Mark Dominus Blog)</subtitle>
      <title>The Universe of Discourse</title>
      <updated>2022-11-08T23:34:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-US">
    <id>584219d403596e3099e0ee9b:58462c0e15d5db6feba171c0:635ed90a89ec3e1569daa5e4</id>
    <link href="https://mmhaskell.com/blog/2022/11/3/binary-packet-video-walkthrough" rel="alternate" type="text/html">
    <title>Binary Packet Video Walkthrough</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p class="">Here’s our 4th video walkthrough of some problems from last year’s Advent of Code. We had an <a href="https://www.mmhaskell.com/blog/2022/10/31/binary-packet-parsing">in-depth code writeup</a> back on Monday that you can check out. The video is <a href="https://youtu.be/JdUiFSroCA8">here on YouTube</a>, and you can also take a look at the <a href="https://github.com/MondayMorningHaskell/AdventOfCode/blob/main/src/Day16.hs">code on GitHub</a>!</p><p class="">If you’re enjoying this content, make sure to <a href="https://www.mmhaskell.com/subscribe">subscribe</a> to our monthly newsletter! We’ll have some special offers coming out this month that you won’t want to miss!</p></div>
    </summary>
    <updated>2022-11-03T14:45:00Z</updated>
    <published>2022-11-03T14:45:00Z</published>
    <author>
      <name>James Bowen</name>
    </author>
    <source>
      <id>https://mmhaskell.com/blog/</id>
      <link href="https://mmhaskell.com/blog/" rel="alternate" type="text/html">
      <link href="https://mmhaskell.com/blog?format=rss" rel="self" type="application/rss+xml">
      <title>Blog - Monday Morning Haskell</title>
      <updated>2022-11-17T02:30:51Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://tweag.io/blog/2022-11-03-blog_recompilation/</id>
    <link href="https://tweag.io/blog/2022-11-03-blog_recompilation/" rel="alternate" type="text/html">
    <title>Recompilation avoidance in rules_haskell</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>When one is programming, they may compile the same project dozens of times per day,
often after making only small modifications.
Recompiling all the modules each time would be extremely time-consuming and disrupt the programmer’s workflow.
Therefore, build tools are careful to avoid recompiling files if they
know the result would be identical to what is already built. This is
sometimes called <em>recompilation avoidance</em>.</p>
<p><a href="https://bazel.build/">Bazel</a> is an open-source tool to build and test projects.
It is particularly well-suited for multilingual monorepos. As such,
Bazel has a strategy for recompilation avoidance.
Bazel tracks the inputs and outputs of build actions precisely in
order to decide what files need to be recompiled after a change.
The exact mechanism is out of scope for this article, but well described in <a href="https://sluongng.hashnode.dev/series/bazel-caching-explained">this blog series</a>.
The simplified version is: Bazel will only rerun an action if it hasn’t been run with the same inputs before.</p>
<p>One could think that, since Bazel provides such a mechanism to prevent superfluous recompilation,
then developers of Bazel rules would
not have to worry about recompilation avoidance.</p>
<p>Well, the story in this blog post would be quite uninteresting if things were so simple.</p>
<p>In this blog post I explain how I improved recompilation avoidance in
<a href="https://haskell.build/"><code class="language-text">rules_haskell</code></a>, a Bazel rule set to build Haskell code.</p>
<p>When GHC compiles a Haskell module,
it needs the source code of the module and the interface files of all its dependencies<sup id="fnref-1"><a class="footnote-ref" href="https://www.tweag.io/rss.xml#fn-1">1</a></sup>.
Hence, those files are given as inputs to the Bazel actions compiling a Haskell module.
Since the interface file of a module contains all its dependencies hashes,
any modification would trigger the recompilation of all the modules transitively depending on it.
That was the case in version 0.15 of <code class="language-text">rules_haskell</code>, before the improvements discussed here.</p>
<h2 id="how-ghc-deals-with-recompilation-avoidance"><a class="anchor before" href="https://www.tweag.io/rss.xml#how-ghc-deals-with-recompilation-avoidance"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>How GHC deals with recompilation avoidance</h2>
<p>When compiling a module (<code class="language-text">A.hs</code>), in addition to the object file (<code class="language-text">A.o</code>),
GHC generates an <a href="https://gitlab.haskell.org/ghc/ghc/-/wikis/commentary/compiler/iface-files">interface file</a> (<code class="language-text">A.hi</code>).
This file is used for sharing inter-module information that would otherwise be difficult to extract from a compiled object file.</p>
<p>These files contain various information, useful in different contexts, including:</p>
<ul>
<li>The list of symbols it exports, including the type of all symbols and the hash of their implementation,</li>
<li>Implementations of inlinable functions,</li>
<li>The list of modules and external packages it depends on,</li>
<li>The list of orphan instances.</li>
</ul>
<p>This file is used to determine if a module which depends on <code class="language-text">A</code> should be recompiled after <code class="language-text">A.hs</code> has been modified.
However, to determine if recompilation is required,
not all the information mentioned is useful.
For instance, the list of packages a module depends on
is not relevant information when determining if its dependency should be recompiled.
Similarly, the precise implementation of functions only matters if the module is compiled with inlining turned on.</p>
<p>The relevant bits for the recompilation avoidance mechanism are summarised in an ABI (Application Binary Interface) hash, as explained in the <a href="https://gitlab.haskell.org/ghc/ghc/-/wikis/commentary/compiler/recompilation-avoidance">GHC Wiki</a>:</p>
<blockquote>
<p>When considering whether or not a module’s dependent modules need to be recompiled due to changes in the current module,
a changed ABI hash is a necessary but not sufficient condition for recompilation<sup id="fnref-2"><a class="footnote-ref" href="https://www.tweag.io/rss.xml#fn-2">2</a></sup>.</p>
</blockquote>
<h2 id="example"><a class="anchor before" href="https://www.tweag.io/rss.xml#example"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Example</h2>
<p>To illustrate the mechanism, let us consider 3 simple files:</p>

<section id="file-container">
<div class="gatsby-highlight"><pre class="language-haskell"><code class="language-haskell"><span class="token keyword">module</span> <span class="token constant">A</span> <span class="token punctuation">(</span><span class="token builtin">const</span><span class="token punctuation">,</span> <span class="token hvariable">change_T0</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token hvariable">not_imported</span><span class="token punctuation">)</span> <span class="token keyword">where</span>

<span class="token keyword">data</span> <span class="token constant">T</span> <span class="token operator">=</span> <span class="token constant">T0</span> <span class="token operator">|</span> <span class="token constant">T1</span>

<span class="token hvariable">not_imported</span> <span class="token operator">::</span> <span class="token constant">T</span>
<span class="token hvariable">not_imported</span> <span class="token operator">=</span> <span class="token constant">T1</span>

<span class="token builtin">const</span> <span class="token operator">::</span> <span class="token hvariable">a</span> <span class="token operator">-&gt;</span> <span class="token hvariable">b</span> <span class="token operator">-&gt;</span> <span class="token hvariable">a</span>
<span class="token builtin">const</span> <span class="token hvariable">x</span> <span class="token hvariable">y</span> <span class="token operator">=</span> <span class="token hvariable">x</span>

<span class="token hvariable">change_T0</span> <span class="token operator">::</span> <span class="token constant">T</span> <span class="token operator">-&gt;</span> <span class="token constant">T</span>
<span class="token hvariable">change_T0</span> <span class="token constant">T0</span> <span class="token operator">=</span> <span class="token hvariable">not_imported</span>
<span class="token hvariable">change_T0</span> <span class="token constant">T1</span> <span class="token operator">=</span> <span class="token constant">T1</span></code></pre></div>
<div class="gatsby-highlight"><pre class="language-haskell"><code class="language-haskell"><span class="token keyword">module</span> <span class="token constant">B</span> <span class="token keyword">where</span>

<span class="token import-statement"><span class="token keyword">import</span> A</span> <span class="token punctuation">(</span><span class="token builtin">const</span><span class="token punctuation">,</span> <span class="token hvariable">change_T0</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token punctuation">)</span>

<span class="token hvariable">aux</span> <span class="token operator">::</span> <span class="token constant">A<span class="token punctuation">.</span>T</span> <span class="token operator">-&gt;</span> <span class="token constant">A<span class="token punctuation">.</span>T</span>
<span class="token hvariable">aux</span> <span class="token hvariable">x</span> <span class="token operator">=</span> <span class="token constant">A</span><span class="token punctuation">.</span><span class="token builtin">const</span> <span class="token punctuation">(</span><span class="token hvariable">A<span class="token punctuation">.</span>change_T0</span> <span class="token hvariable">x</span><span class="token punctuation">)</span> <span class="token hvariable">x</span>

<span class="token hvariable">const3</span> <span class="token operator">::</span> <span class="token hvariable">a</span> <span class="token operator">-&gt;</span> <span class="token hvariable">a</span> <span class="token operator">-&gt;</span> <span class="token hvariable">a</span> <span class="token operator">-&gt;</span> <span class="token hvariable">a</span>
<span class="token hvariable">const3</span> <span class="token hvariable">x</span> <span class="token hvariable">y</span> <span class="token operator">=</span> <span class="token constant">A</span><span class="token punctuation">.</span><span class="token builtin">const</span> <span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">.</span><span class="token builtin">const</span> <span class="token hvariable">x</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">.</span><span class="token builtin">const</span> <span class="token hvariable">y</span><span class="token punctuation">)</span></code></pre></div>
<div class="gatsby-highlight"><pre class="language-haskell"><code class="language-haskell"><span class="token keyword">module</span> <span class="token constant">C</span> <span class="token keyword">where</span>

<span class="token import-statement"><span class="token keyword">import</span> <span class="token keyword">qualified</span> B</span>

<span class="token keyword">data</span> <span class="token constant">N</span> <span class="token operator">=</span> <span class="token constant">Z</span> <span class="token operator">|</span> <span class="token constant">S</span> <span class="token constant">N</span>

<span class="token hvariable">const_bis</span> <span class="token operator">::</span> <span class="token hvariable">a</span> <span class="token operator">-&gt;</span> <span class="token hvariable">a</span> <span class="token operator">-&gt;</span> <span class="token hvariable">a</span>
<span class="token hvariable">const_bis</span> <span class="token hvariable">x</span> <span class="token operator">=</span> <span class="token hvariable">B<span class="token punctuation">.</span>const3</span> <span class="token hvariable">x</span> <span class="token hvariable">x</span></code></pre></div>
</section>
<p>There are many changes one can make to <code class="language-text">A.hs</code> which would change the interface file <code class="language-text">B.hi</code>,
but do not affect the ABI hash of <code class="language-text">B</code>, thus avoiding triggering the recompilation of <code class="language-text">C.hs</code>.</p>
<p>Changing the export list of <code class="language-text">A</code>:</p>
<div class="gatsby-highlight"><pre class="language-diff"><code class="language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span> module A (const, change_T0, T, not_imported) where
</span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span> module A (const, change_T0, T) where</span></code></pre></div>
<p>Mark a function as always being inlined:</p>
<div class="gatsby-highlight"><pre class="language-diff"><code class="language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span> {-# INLINE const #-}
</span>const :: a -&gt; b -&gt; a</code></pre></div>
<p>These 2 changes affect the exports of module <code class="language-text">A</code>,
hence the ABI hash of <code class="language-text">A</code> is affected.
However, these changes only impact the imports of <code class="language-text">B</code>,
so the section on dependencies of <code class="language-text">B.hi</code> is modified,
but not the ABI hash, which only hashes the exports and declarations of <code class="language-text">B</code>.</p>
<p>Modify the import list of <code class="language-text">B</code>:</p>
<div class="gatsby-highlight"><pre class="language-diff"><code class="language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span> import A (const, change_T0, T)
</span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span> import A (const, change_T0, T, not_imported)</span></code></pre></div>
<p>Modifying the import list of <code class="language-text">B</code> simply adds one symbol to the section regarding its imports,
but does not affect the part on exports, hence does not modify the ABI hash.</p>
<p>If <code class="language-text">B.hs</code> is compiled without exposing the unfoldings of the symbols it declares<sup id="fnref-3"><a class="footnote-ref" href="https://www.tweag.io/rss.xml#fn-3">3</a></sup>,
then one could make more modifications to the code, without modifying the ABI hash of <code class="language-text">B</code>.</p>
<p>One can not only change the definiton of a function of <code class="language-text">A</code>, but also change its type:</p>
<div class="gatsby-highlight"><pre class="language-diff"><code class="language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span> const :: a -&gt; b -&gt; a
<span class="token prefix deleted">-</span> const x y = x
</span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span> const :: a -&gt; b -&gt; b
<span class="token prefix inserted">+</span> const x y = y</span></code></pre></div>
<p>Modifying the type of <code class="language-text">A.const</code> changes the ABI of <code class="language-text">A</code>, no matter if <code class="language-text">A.hs</code> was compiled with unfoldings exposed or not.
Then the modifications to <code class="language-text">B</code> are limited to its import and the implementation of functions,
but since no types in <code class="language-text">B</code> are affected, if the unfoldings of <code class="language-text">B</code> are not exposed,
then the ABI hash of <code class="language-text">B</code> remains the same.</p>
<p>One can also modify the definition of a symbol in <code class="language-text">B</code> (but not its type):</p>
<div class="gatsby-highlight"><pre class="language-diff"><code class="language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span> const3 x y = A.const (A.const x) (A.const y)
</span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span> const3 x y = id</span></code></pre></div>
<p>All those modifications affect the part of the interface file of <code class="language-text">B</code> regarding imports, hence it changes <code class="language-text">B.hi</code>.
So, with version 0.15 of <code class="language-text">rules_haskell</code>, <code class="language-text">C</code>, which depends on <code class="language-text">B</code>, would have been recompiled.
However, those changes do not impact the ABI stored in <code class="language-text">B.hi</code>,
Hence <code class="language-text">C</code> is not recompiled, when using <code class="language-text">ghc --make</code> or the most recent version of <code class="language-text">rules_haskell</code>,
since it is not impacted by those changes.</p>
<h2 id="mimicking-this-behaviour"><a class="anchor before" href="https://www.tweag.io/rss.xml#mimicking-this-behaviour"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Mimicking this behaviour</h2>
<p>Now that we have understood the mechanism used by GHC to decide if recompilation is required,
we want to teach Bazel to use it.</p>
<h3 id="abi-files"><a class="anchor before" href="https://www.tweag.io/rss.xml#abi-files"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>ABI files</h3>
<p>Since the relevant information to know if recompilation is required is the ABI hash nested inside the interface file,
and files are the unit considered by Bazel to detect modifications,
one has to first extract this hash and put it in its own file.</p>
<p>The strategy chosen for this is to first generate the human-readable version of the interface file
(using <code class="language-text">ghc --show-iface A.hi</code>) and then store only the line containing the ABI hash into a file <code class="language-text">A.abi</code>.</p>
<h3 id="tweak-the-caching-mechanism-with-unused_inputs_list"><a class="anchor before" href="https://www.tweag.io/rss.xml#tweak-the-caching-mechanism-with-unused_inputs_list"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Tweak the caching mechanism with <code class="language-text">unused_inputs_list</code></h3>
<p>This new file <code class="language-text">A.abi</code> is then added to the list of inputs required to compile the modules importing <code class="language-text">A</code>.
However, it cannot completely replace the <code class="language-text">A.hi</code> file,
since whenever the modification of <code class="language-text">A.hs</code> is important enough to affect the ABI hash,
the whole interface file is required by GHC to compile the other modules.</p>
<p>As Bazel’s caching mechanism inspects all the inputs to know if the recompilation rule should be executed,
adding a new file to the list of inputs can only cause recompilation to occur more often than in the previous state.</p>
<p>This is exactly the opposite of our goal,
hence we have to somehow teach Bazel to not inspect all the inputs when deciding if a “target” should be regenerated.
Fortunately, there is a mechanism in Bazel which has exactly this effect:
declaring some inputs as “unused”.</p>
<p>When an input occurs in the <code class="language-text">unused_inputs_list</code>,
it is not considered in the set of inputs used to decide if regeneration of a target is required.
Hence declaring all the interface files as “unused inputs” allows us to instruct the Bazel caching mechanism not to inspect the interface files,
but only the associated ABI files<sup id="fnref-4"><a class="footnote-ref" href="https://www.tweag.io/rss.xml#fn-4">4</a></sup>, when deciding which targets to regenerate.
Furthermore, since the interface files are still in the input list,
when recompilation is needed Bazel will use them,
despite us tagging them as “unused”.</p>
<p>It must be noted that Bazel documentation on <code class="language-text">unused_inputs_list</code> is <a href="https://bazel.build/rules/lib/actions#run">pretty light</a>,
but mentions that “Any change in those files must not affect in any way the outputs of the action”.
Hence, the non-consideration of the inputs listed in this field when computing the hash for caching is quite expected.
However, it is not clear from the documentation that Bazel can use those inputs when recompiling.</p>
<h2 id="benchmark"><a class="anchor before" href="https://www.tweag.io/rss.xml#benchmark"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Benchmark</h2>
<p>I tested this feature on Symbiont’s code base, where I modified a file which was a leaf in the dependency graph,
where I added a dummy field to a record.</p>
<p>This change seemed fitting to me, since modifying a record type very
deep in the dependency tree affected a lot of modules transitively,
but not all actually need recompiling. This makes the benchmark long
enough to observe an improvement.</p>
<h3 id="results"><a class="anchor before" href="https://www.tweag.io/rss.xml#results"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Results</h3>
<ul>
<li>
<p>When running <code class="language-text">bazel build</code> with the version 0.15 of <code class="language-text">rules_haskell</code> (using the <code class="language-text">haskell_module</code>, but not the ABI files): <br>
153 targets built in 7min 38</p>
</li>
<li>
<p>When running <code class="language-text">bazel build</code> with the new version of <code class="language-text">rules_haskell</code>:<br>
131 targets built in 6min 41</p>
</li>
</ul>
<p>This looks like a non-negligible enhancement.
However, it is hard to say more without a reference.
Hence I also built the project with <code class="language-text">stack</code>,
a widely used build system in the Haskell ecosystem:</p>
<ul>
<li>When running <code class="language-text">stack build --no-run-tests</code>:<br>
125 modules compiled in 6min 07</li>
</ul>
<p>We can see that our enhancement correctly avoided 22 of the 26 avoidable recompilation targets;
an accuracy of 80%.</p>
<p>It is not on par with tools using the native recompilation avoidance mechanism of GHC (like <code class="language-text">stack</code>)
because there are more criteria used by GHC than just a change of the ABI hash, which is only a necessary condition.
More on the precise condition used by GHC can be found in the <a href="https://gitlab.haskell.org/ghc/ghc/-/wikis/commentary/compiler/recompilation-avoidance">GHC Wiki</a> and
an example of unnecessary recompilation despite a change in the ABI hash of a dependency was sent to the <a href="https://mail.haskell.org/pipermail/ghc-devs/2022-August/020896.html">Haskell mailing list</a></p>
<h2 id="closing-remarks"><a class="anchor before" href="https://www.tweag.io/rss.xml#closing-remarks"><svg height="16" version="1.1" viewBox="0 0 16 16" width="16"><path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"/></svg></a>Closing Remarks</h2>
<p>This project was possible thanks to the generous funding from <a href="https://symbiont.io/">Symbiont</a>.
Currently, the optimisation presented in this post is only applied to modules built using <a href="https://62f52b001e02e10edef0675d--tweag-www.netlify.app/blog/2022-06-23-haskell-module/"><code class="language-text">haskell_modules</code></a>.</p>
<p>In this post, I presented a technique to declare some inputs as “irrelevant” when Bazel decides if recompilation is required,
applied to the specific case of the GHC compiler.
Since this problem seems quite common (recompilation avoidance is a problem that every language has),
I expect it to find other applications soon.
Especially, I hope this post to raise awareness in the Bazel community about how useful “irrelevant for caching” inputs are,
and would lead to a clarification of the purpose of <code class="language-text">unused_inputs_list</code>.</p>

<div class="footnotes">
<hr>
<ol>
<li id="fn-1">If the module uses Template Haskell or a plugin,
this is not sufficient, as explained in next footnote.<a class="footnote-backref" href="https://www.tweag.io/rss.xml#fnref-1">↩</a></li>
<li id="fn-2">This does not apply if the importing modules use Template Haskell or a plugin,
since in this case the result of compiling a module can depend on the implementation of imported modules,
not just their interfaces.
In both cases, to decide if a recompilation should be performed,
GHC simply relies on the hash of the generated object file rather than just the interface file.<a class="footnote-backref" href="https://www.tweag.io/rss.xml#fnref-2">↩</a></li>
<li id="fn-3">Unfoldings of functions defined in a module <code class="language-text">X</code> are exposed to the other modules
if optimisations are turned on (using <code class="language-text">ghc -O</code>) and the compiler decides that they should be included in the interface file
(either because the definition is quite short and might be useful to enable further optimisations,
or because the programmer added a pragma regarding inlining).<a class="footnote-backref" href="https://www.tweag.io/rss.xml#fnref-3">↩</a></li>
<li id="fn-4">Even if the target module uses Template Haskell or a plugin,
it is safe to hide the interface files from Bazel’s caching mechanism.
As mentioned in previous notes, in those cases, it could happen that recompilation is required whereas no ABI hash changed.
But the object files of all the modules it depends on is given as input to the Bazel rule compiling this kind of module.
Hence any modification affecting an object file will trigger recompilation,
no matter its impact on the ABI hash.<a class="footnote-backref" href="https://www.tweag.io/rss.xml#fnref-4">↩</a></li>
</ol>
</div></div>
    </summary>
    <updated>2022-11-03T00:00:00Z</updated>
    <published>2022-11-03T00:00:00Z</published>
    <source>
      <id>https://tweag.io</id>
      <author>
        <name>Tweag I/O</name>
      </author>
      <link href="https://tweag.io" rel="alternate" type="text/html">
      <link href="http://www.tweag.io/rss.xml" rel="self" type="application/rss+xml">
      <subtitle>Scale your engineering power. We enable deep-tech startups to achieve
their vision, from research to product delivery.</subtitle>
      <title>Tweag - Engineering blog</title>
      <updated>2022-11-17T06:35:57Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://haskell.org/ghc/blog/20221103-ghc-9.4.3-released.html</id>
    <link href="http://haskell.org/ghc/blog/20221103-ghc-9.4.3-released.html" rel="alternate" type="text/html">
    <title>GHC 9.4.3 released</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><h1>GHC 9.4.3 released</h1>
<h4 class="text-muted">bgamari - 2022-11-03</h4>

<p>The GHC developers are happy to announce the availability of GHC 9.4.3. Binary
distributions, source distributions, and documentation are available at
<a href="https://downloads.haskell.org/ghc/9.4.3">downloads.haskell.org</a>.</p>
<p>This release is primarily a bugfix release addressing a few issues
found in 9.4.2. These include:</p>
<ul>
<li>An issue where recursively calls could be speculatively evaluated, resulting
in non-termination (<a href="https://gitlab.haskell.org/ghc/ghc/issues/20836">#20836</a>)</li>
<li>A code generation issue in the AArch64 native code generator backend
resulting in incorrect runtime results in some circumstances (<a href="https://gitlab.haskell.org/ghc/ghc/issues/22282">#22282</a>)</li>
<li>A crash on Darwin when running executables compiled with IPE support (<a href="https://gitlab.haskell.org/ghc/ghc/issues/22080">#22080</a>)</li>
<li>A long-standing interface-file determinism issue where full paths would leak
into the interface file (<a href="https://gitlab.haskell.org/ghc/ghc/issues/22162">#22162</a>)</li>
<li>A bug in the <code>process</code> library where file handles specified as <code>NoStream</code> would
still be usable in the child (<a href="https://github.com/haskell/process/issues/251">process</a><a href="https://gitlab.haskell.org/ghc/ghc/issues/251">#251</a>)</li>
</ul>
<p>Note that, as GHC 9.4 is the first release series where the release artifacts
are all generated by our new Hadrian build system, it is possible that there
will be packaging issues. If you enounter trouble while using a binary
distribution, please open a <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/new">ticket</a>. Likewise, if you are a downstream
packager, do consider migrating to <a href="https://gitlab.haskell.org/ghc/ghc/-/blob/e2520df3fffa0cf22fb19c5fb872832d11c07d35/hadrian">Hadrian</a> to run your build; the Hadrian
build system can be built using <code>cabal-install</code>, <code>stack</code>, or the in-tree
<a href="https://gitlab.haskell.org/ghc/ghc/-/blob/e2520df3fffa0cf22fb19c5fb872832d11c07d35/hadrian/bootstrap/README.md">bootstrap script</a>. See the accompanying <a href="https://www.haskell.org/ghc/blog/20220805-make-to-hadrian.html">blog post</a> for details on
migrating packaging to Hadrian.</p>
<p>We would also like to emphasize that GHC 9.4 must be used in conjunction with
Cabal-3.8 or later. This is particularly important for Windows users due to
changes in GHCâ€™s Windows toolchain.</p>
<p>We would like to thank Microsoft Azure, GitHub, IOG, the Zw3rk stake pool,
Well-Typed, Tweag I/O, Serokell, Equinix, SimSpace, Haskell Foundation, and
other anonymous contributors whose on-going financial and in-kind support has
facilitated GHC maintenance and release management over the years. Finally,
this release would not have been possible without the hundreds of open-source
contributors whose work comprise this release.</p>
<p>As always, do give this release a try and open a <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/new">ticket</a> if you see
anything amiss.</p>
<p>Happy Haskelling,</p>
<ul>
<li>Ben</li>
</ul></div>
    </summary>
    <updated>2022-11-03T00:00:00Z</updated>
    <published>2022-11-03T00:00:00Z</published>
    <author>
      <name>ghc-devs</name>
    </author>
    <source>
      <id>http://haskell.org/ghc</id>
      <link href="http://haskell.org/ghc" rel="alternate" type="text/html">
      <link href="http://haskell.org/ghc/rss.xml" rel="self" type="application/rss+xml">
      <title>GHC Developer blog</title>
      <updated>2022-11-07T00:00:00Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://www.parsonsmatt.org/2022/11/02/break-gently-pattern-syn.html</id>
    <link href="https://www.parsonsmatt.org/2022/11/02/break-gently-pattern-syn.html" rel="alternate" type="text/html">
    <title>Break Gently with Pattern Synonyms</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This is a really brief post to call out a nice trick for providing users a nice migration message when you delete a constructor in a sum type.</p>

<h1 id="the-problem">The Problem</h1>

<p>You have a sum type, and you want to delete a redundant constructor to refactor things.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">data</span> <span class="kt">Foo</span> 
    <span class="o">=</span> <span class="kt">Bar</span> <span class="kt">Int</span> 
    <span class="o">|</span> <span class="kt">Baz</span> <span class="kt">Char</span>
    <span class="o">|</span> <span class="kt">Quux</span> <span class="kt">Double</span>
</code></pre></div></div>

<p>That <code class="language-plaintext highlighter-rouge">Quux</code> is double trouble.
But if we simply delete it, then users will get a <code class="language-plaintext highlighter-rouge">Constructor not found: Quux</code>.
This isn’t super helpful.
They’ll have to go find where <code class="language-plaintext highlighter-rouge">Quux</code> came from, what package defined it, and then go see if there’s a Changelog.
If not, then they’ll have to dig through the Git history to see what’s going on.
This isn’t a fun workflow.</p>

<p>But, let’s say you <em>really need end users to migrate off <code class="language-plaintext highlighter-rouge">Quux</code></em>.
So we’re interested in giving a compile error that has more information than <code class="language-plaintext highlighter-rouge">Constructor not in scope</code>.</p>

<p>Here’s what some calling code looks like:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">blah</span> <span class="o">::</span> <span class="kt">Foo</span> <span class="o">-&gt;</span> <span class="kt">Int</span>
<span class="n">blah</span> <span class="n">x</span> <span class="o">=</span> <span class="kr">case</span> <span class="n">x</span> <span class="kr">of</span>
    <span class="kt">Bar</span> <span class="n">i</span> <span class="o">-&gt;</span> <span class="n">i</span>
    <span class="kt">Baz</span> <span class="n">c</span> <span class="o">-&gt;</span> <span class="n">fromEnum</span> <span class="n">c</span>
    <span class="kt">Quux</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="mi">3</span>
</code></pre></div></div>

<p>will give the output:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">matt</span><span class="o">/</span><span class="n">patsyn</span><span class="o">.</span><span class="n">hs</span><span class="o">:</span><span class="mi">24</span><span class="o">:</span><span class="mi">5</span><span class="o">:</span> <span class="n">error</span><span class="o">:</span>
    <span class="kt">Not</span> <span class="kr">in</span> <span class="n">scope</span><span class="o">:</span> <span class="kr">data</span> <span class="n">constructor</span> <span class="err">‘</span><span class="kt">Quux</span><span class="err">’</span>
   <span class="o">|</span>
<span class="mi">24</span> <span class="o">|</span>     <span class="kt">Quux</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="mi">3</span>
   <span class="o">|</span>     <span class="o">^^^^</span>
<span class="kt">Failed</span><span class="p">,</span> <span class="n">no</span> <span class="n">modules</span> <span class="n">loaded</span><span class="o">.</span>
</code></pre></div></div>

<p>Fortunately, we can make this nicer.</p>

<p>GHC gives us a neat trick called <a href="https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/pattern_synonyms.html"><code class="language-plaintext highlighter-rouge">PatternSynonyms</code></a>.
They create constructor-like things that we can match on and construct with, but that are a bit smarter.</p>

<h2 id="matching">Matching</h2>

<p>Let’s redefine <code class="language-plaintext highlighter-rouge">Quux</code> as a pattern synonym on <code class="language-plaintext highlighter-rouge">Foo</code>.
We’ll also export it as part of the datatype definition.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{-# language PatternSynonyms, ViewPatterns #-}</span>

<span class="kr">module</span> <span class="nn">Wow</span> <span class="p">(</span><span class="kt">Foo</span> <span class="p">(</span><span class="o">..</span><span class="p">,</span> <span class="kt">Quux</span><span class="p">))</span> <span class="kr">where</span>

<span class="kr">data</span> <span class="kt">Foo</span>
    <span class="o">=</span> <span class="kt">Bar</span> <span class="kt">Int</span>
    <span class="o">|</span> <span class="kt">Baz</span> <span class="kt">Char</span>

<span class="n">pattern</span> <span class="kt">Quux</span> <span class="o">::</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">Foo</span>
<span class="n">pattern</span> <span class="kt">Quux</span> <span class="n">i</span> <span class="o">&lt;-</span> <span class="p">(</span><span class="n">const</span> <span class="kt">Nothing</span> <span class="o">-&gt;</span> <span class="kt">Just</span> <span class="n">i</span><span class="p">)</span>
</code></pre></div></div>

<p>This does something tricky: we always throw away the input with the <code class="language-plaintext highlighter-rouge">ViewPattern</code>, and we can summon whatever we want in the left hand side.
This allows us to provide whatever <code class="language-plaintext highlighter-rouge">a</code> is needed to satisfy the type.
This match will <em>never</em> succeed - so <code class="language-plaintext highlighter-rouge">Quux</code> behavior will never happen.</p>

<p>Now, we get a warning for the match:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1 of 1] Compiling Main             ( /home/matt/patsyn.hs, interpreted )

/home/matt/patsyn.hs:25:5: warning: [-Woverlapping-patterns]
    Pattern match is redundant
    In a case alternative: Quux a -&gt; ...
   |
25 |     Quux a -&gt; 3
   |     ^^^^^^^^^^^
Ok, one module loaded.
</code></pre></div></div>

<p>But an error for constructing:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1 of 1] Compiling Main             ( /home/matt/patsyn.hs, interpreted )

/home/matt/patsyn.hs:28:10: error:
    • non-bidirectional pattern synonym ‘Quux’ used in an expression
    • In the expression: Quux 3
      In an equation for ‘blargh’: blargh = Quux 3
   |
28 | blargh = Quux 3
   |          ^^^^
Failed, no modules loaded.
</code></pre></div></div>

<p>So we need to construct with it, too.
We can modify the pattern synonym by providing a <code class="language-plaintext highlighter-rouge">where</code>, and specifying how to construct with it.
Since we’re intending to prevent folks from using it, we’ll just use <code class="language-plaintext highlighter-rouge">undefined</code>.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pattern</span> <span class="kt">Quux</span> <span class="o">::</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">Foo</span>
<span class="n">pattern</span> <span class="kt">Quux</span> <span class="n">i</span> <span class="o">&lt;-</span> <span class="p">(</span><span class="n">const</span> <span class="kt">Nothing</span> <span class="o">-&gt;</span> <span class="kt">Just</span> <span class="n">i</span><span class="p">)</span> <span class="kr">where</span>
    <span class="kt">Quux</span> <span class="kr">_</span> <span class="o">=</span> <span class="n">undefined</span>
</code></pre></div></div>

<p>With this, we get just the warning about a redundant pattern match.
Now it’s time to step up our game by providing a message to the end user.</p>

<h1 id="warnings">Warnings</h1>

<p>GHC gives us the ability to write <code class="language-plaintext highlighter-rouge">{-# WARNING Quux &quot;migrate me pls&quot; #-}</code>.
This can make sense if we expect that the runtime behavior of a program won’t be changed by our pattern synonym.</p>

<p>So let’s write a warning:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pattern</span> <span class="kt">Quux</span> <span class="o">::</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">Foo</span>
<span class="n">pattern</span> <span class="kt">Quux</span> <span class="n">i</span> <span class="o">&lt;-</span> <span class="p">(</span><span class="n">const</span> <span class="kt">Nothing</span> <span class="o">-&gt;</span> <span class="kt">Just</span> <span class="n">i</span><span class="p">)</span> <span class="kr">where</span>
    <span class="kt">Quux</span> <span class="kr">_</span> <span class="o">=</span> <span class="n">undefined</span>

<span class="cp">{-# WARNING 
  Quux 
    &quot;Please migrate away from Quux in some cool manner. \
    \See X resource for migration tips.&quot; 
  #-}</span>

</code></pre></div></div>

<p>Now, when compiling, we’ll see the warnings:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/home/matt/patsynimp.hs:11:5: warning: [-Wdeprecations]
    In the use of data constructor ‘Quux’ (imported from PatSyn):
    &quot;Please migrate away from Quux in some cool manner. See X resource for migration tips.&quot;
   |
11 |     Quux _ -&gt; 3
   |     ^^^^

/home/matt/patsynimp.hs:11:5: warning: [-Woverlapping-patterns]
    Pattern match is redundant
    In a case alternative: Quux _ -&gt; ...
   |
11 |     Quux _ -&gt; 3
   |     ^^^^^^^^^^^

/home/matt/patsynimp.hs:14:10: warning: [-Wdeprecations]
    In the use of data constructor ‘Quux’ (imported from PatSyn):
    &quot;Please migrate away from Quux in some cool manner. See X resource for migration tips.&quot;
   |
14 | blargh = Quux (3 :: Int)
   |          ^^^^

</code></pre></div></div>

<p>But this may not be good enough.
We may want to give them an error, so they can’t build.</p>

<h1 id="typeerror"><code class="language-plaintext highlighter-rouge">TypeError</code></h1>

<p><a href="https://www.stackage.org/haddock/lts-19.31/base-4.15.1.0/GHC-TypeLits.html#t:TypeError"><code class="language-plaintext highlighter-rouge">base</code> defines a type <code class="language-plaintext highlighter-rouge">TypeError</code></a>, which GHC treats specially - it raises a type error.
This isn’t generally useful, but can be great for marking branches of a <code class="language-plaintext highlighter-rouge">type family</code> or type class <code class="language-plaintext highlighter-rouge">instance</code> as “impossible.”
The error message can be fantastic for guiding folks towards writing correct code.</p>

<p><code class="language-plaintext highlighter-rouge">PatternSynonym</code>s can have two sets of constraints: the first is <em>required</em> when constructing, and the second is <em>provided</em> when matching.
So let’s just put an error in the first and see what happens:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pattern</span> <span class="kt">Quux</span>
    <span class="o">::</span> <span class="p">(</span><span class="kt">TypeError</span> <span class="p">(</span><span class="kt">'Text</span> <span class="s">&quot;please migrate ...&quot;</span><span class="p">))</span>
    <span class="o">=&gt;</span> <span class="nb">()</span>
    <span class="o">=&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">Foo</span>
<span class="n">pattern</span> <span class="kt">Quux</span> <span class="n">i</span> <span class="o">&lt;-</span> <span class="p">(</span><span class="n">const</span> <span class="kt">Nothing</span> <span class="o">-&gt;</span> <span class="kt">Just</span> <span class="n">i</span><span class="p">)</span> <span class="kr">where</span>
    <span class="kt">Quux</span> <span class="kr">_</span> <span class="o">=</span> <span class="n">undefined</span>
</code></pre></div></div>

<p>Unfortunately, GHC blows up immediately while compiling the synonym!</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1 of 2] Compiling PatSyn           ( PatSyn.hs, interpreted )

PatSyn.hs:20:1: error: please migrate ...
   |
20 | pattern Quux
   | ^^^^^^^^^^^^...
Failed, no modules loaded.
</code></pre></div></div>

<p>We can’t even <code class="language-plaintext highlighter-rouge">-fdefer-type-errors</code> this one. Are we hosed?</p>

<p>What about the second position?
Same problem. We can’t put a bare <code class="language-plaintext highlighter-rouge">TypeError</code> in there at all.</p>

<p>Fortunately, we can have a lil’ bit of laziness by introducing it as a <em>constraint</em>.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">class</span> <span class="kt">DeferredError</span>
<span class="kr">instance</span> <span class="p">(</span><span class="kt">TypeError</span> <span class="p">(</span><span class="kt">'Text</span> <span class="s">&quot;please migrate ...&quot;</span><span class="p">))</span> <span class="o">=&gt;</span> <span class="kt">DeferredError</span>

<span class="n">pattern</span> <span class="kt">Quux</span>
    <span class="o">::</span> <span class="kt">DeferredError</span>
    <span class="o">=&gt;</span> <span class="kt">DeferredError</span>
    <span class="o">=&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">Foo</span>
<span class="n">pattern</span> <span class="kt">Quux</span> <span class="n">i</span> <span class="o">&lt;-</span> <span class="p">(</span><span class="n">const</span> <span class="kt">Nothing</span> <span class="o">-&gt;</span> <span class="kt">Just</span> <span class="n">i</span><span class="p">)</span> <span class="kr">where</span>
    <span class="kt">Quux</span> <span class="kr">_</span> <span class="o">=</span> <span class="n">undefined</span>
</code></pre></div></div>

<p>This actually <em>does</em> give us a warning now - at the <code class="language-plaintext highlighter-rouge">const Nothing -&gt; Just i</code> line, we have a deferred type error.</p>

<p>This gives us the error behavior we want!</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/home/matt/patsynimp.hs:14:10: error:
    • please migrate ...
    • In the expression: Quux (3 :: Int)
      In an equation for ‘blargh’: blargh = Quux (3 :: Int)
   |
14 | blargh = Quux (3 :: Int)
   |          ^^^^^^^^^^^^^^^
Failed, one module loaded.
</code></pre></div></div>

<p>We only get the one error - but if we delete it, we can see the other error:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[2 of 2] Compiling Main             ( /home/matt/patsynimp.hs, interpreted )

/home/matt/patsynimp.hs:11:5: error:
    • please migrate ...
    • In the pattern: Quux _
      In a case alternative: Quux _ -&gt; 3
      In the expression:
        case x of
          Bar i -&gt; i
          Baz c -&gt; fromEnum c
          Quux _ -&gt; 3
   |
11 |     Quux _ -&gt; 3
   |     ^^^^^^
Failed, one module loaded.
</code></pre></div></div>

<p>What’s fun is that we can actually provide <em>two</em> different messages.
Constructing something will give both error messages, and pattern matching only uses the “required” constraint.</p>

<p>This should make it <em>much</em> easier for end users to migrate to new versions of your library.</p>

<h1 id="final-code-and-errors">Final Code and Errors</h1>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{-# language PatternSynonyms #-}</span>
<span class="cp">{-# language KindSignatures #-}</span>
<span class="cp">{-# language FlexibleContexts #-}</span>
<span class="cp">{-# language FlexibleInstances #-}</span>
<span class="cp">{-# language ViewPatterns #-}</span>
<span class="cp">{-# language MultiParamTypeClasses #-}</span>
<span class="cp">{-# language UndecidableInstances #-}</span>
<span class="cp">{-# language DataKinds #-}</span>

<span class="cp">{-# OPTIONS_GHC -fdefer-type-errors #-}</span>

<span class="kr">module</span> <span class="nn">PatSyn</span> <span class="kr">where</span>

<span class="kr">import</span> <span class="nn">Prelude</span>
<span class="kr">import</span> <span class="nn">GHC.Exts</span>
<span class="kr">import</span> <span class="nn">GHC.TypeLits</span>

<span class="kr">data</span> <span class="kt">Foo</span>
    <span class="o">=</span> <span class="kt">Bar</span> <span class="kt">Int</span>
    <span class="o">|</span> <span class="kt">Baz</span> <span class="kt">Char</span>

<span class="kr">class</span> <span class="kt">DeferredError</span> <span class="p">(</span><span class="n">a</span> <span class="o">::</span> <span class="kt">ErrorMessage</span><span class="p">)</span>
<span class="kr">instance</span> <span class="p">(</span><span class="kt">TypeError</span> <span class="n">a</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="kt">DeferredError</span> <span class="n">a</span>

<span class="n">pattern</span> <span class="kt">Quux</span>
    <span class="o">::</span> <span class="kt">DeferredError</span> <span class="p">(</span><span class="kt">'Text</span> <span class="s">&quot;please migrate (required constraint)&quot;</span><span class="p">)</span>
    <span class="o">=&gt;</span> <span class="kt">DeferredError</span> <span class="p">(</span><span class="kt">'Text</span> <span class="s">&quot;please migrate (provided constraint)&quot;</span><span class="p">)</span>
    <span class="o">=&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">Foo</span>
<span class="n">pattern</span> <span class="kt">Quux</span> <span class="n">i</span> <span class="o">&lt;-</span> <span class="p">(</span><span class="n">const</span> <span class="kt">Nothing</span> <span class="o">-&gt;</span> <span class="kt">Just</span> <span class="n">i</span><span class="p">)</span> <span class="kr">where</span>
    <span class="kt">Quux</span> <span class="kr">_</span> <span class="o">=</span> <span class="n">undefined</span>
</code></pre></div></div>

<p>Matching a constructor:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[2 of 2] Compiling Main             ( /home/matt/patsynimp.hs, interpreted )

/home/matt/patsynimp.hs:11:5: error:
    • please migrate (required constraint)
    • In the pattern: Quux _
      In a case alternative: Quux _ -&gt; 3
      In the expression:
        case x of
          Bar i -&gt; i
          Baz c -&gt; fromEnum c
          Quux _ -&gt; 3
   |
11 |     Quux _ -&gt; 3
   |     ^^^^^^
Failed, one module loaded.

</code></pre></div></div>

<p>Using a constructor:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[2 of 2] Compiling Main             ( /home/matt/patsynimp.hs, interpreted )

/home/matt/patsynimp.hs:14:10: error:
    • please migrate (required constraint)
    • In the expression: Quux (3 :: Int)
      In an equation for ‘blargh’: blargh = Quux (3 :: Int)
   |
14 | blargh = Quux (3 :: Int)
   |          ^^^^^^^^^^^^^^^

/home/matt/patsynimp.hs:14:10: error:
    • please migrate (provided constraint)
    • In the expression: Quux (3 :: Int)
      In an equation for ‘blargh’: blargh = Quux (3 :: Int)
   |
14 | blargh = Quux (3 :: Int)
   |          ^^^^^^^^^^^^^^^
Failed, one module loaded.
</code></pre></div></div></div>
    </summary>
    <updated>2022-11-02T00:00:00Z</updated>
    <published>2022-11-02T00:00:00Z</published>
    <source>
      <id>https://www.parsonsmatt.org</id>
      <author>
        <name>Matt Parsons</name>
      </author>
      <link href="https://www.parsonsmatt.org" rel="alternate" type="text/html">
      <link href="https://www.parsonsmatt.org/feed.xml" rel="self" type="application/rss+xml">
      <title>Overcoming Software</title>
      <updated>2022-11-02T19:03:33Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:,2022:/history/presidential-emoji</id>
    <link href="https://blog.plover.com/history/presidential-emoji.html" rel="alternate" type="text/html">
    <title>Emoji for U.S. presidents</title>
    <content type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p>Content warning: something here to offend almost everyone</p>

<p>A while back I complained that there were no emoji portraits of
U.S. presidents.  Not that there a
ChesterÂ A. Arthur portrait would see a lot of use.  But some of the
others might come in handy.</p>

<p>I couldn't figure them all out.  I have no idea what a Chester Arthur
emoji would look like.  And I assigned 
ğŸ§”ğŸ�» 
to all three of Garfield,
Harrison, and Hayes, which I guess is ambiguous but do you really need to be able
to tell the difference between Garfield, Harrison, and Hayes?  I don't
think you do.  But I'm pretty happy with most of the rest.</p>

<table align="center">
<tbody><tr><td align="right">    George Washington  </td><td>ğŸ’µ
</td></tr><tr><td align="right">    John Adams  </td><td>
</td></tr><tr><td align="right">    Thomas Jefferson  </td><td>ğŸ“œ
</td></tr><tr><td align="right">    James Madison  </td><td>
</td></tr><tr><td align="right">    James Monroe  </td><td>
</td></tr><tr><td align="right">    John Quincy Adams  </td><td>ğŸ��
</td></tr><tr><td align="right">    Andrew Jackson  </td><td>
</td></tr><tr><td align="right">    Martin Van Buren  </td><td>ğŸŒ·
</td></tr><tr><td align="right">    William Henry Harrison  </td><td>ğŸª¦
</td></tr><tr><td align="right">    John Tyler  </td><td>
</td></tr><tr><td align="right">    James K. Polk  </td><td>
</td></tr><tr><td align="right">    Zachary Taylor  </td><td>
</td></tr><tr><td align="right">    Millard Fillmore  </td><td>â›½
</td></tr><tr><td align="right">    Franklin Pierce  </td><td>
</td></tr><tr><td align="right">    James Buchanan  </td><td>
</td></tr><tr><td align="right">    Abraham Lincoln  </td><td>ğŸ�­
</td></tr><tr><td align="right">    Andrew Johnson  </td><td>ğŸ’©
</td></tr><tr><td align="right">    Ulysses S. Grant  </td><td>ğŸ�¸
</td></tr><tr><td align="right">    Rutherford B. Hayes  </td><td>ğŸ§”ğŸ�»
</td></tr><tr><td align="right">    James Garfield  </td><td>ğŸ§”ğŸ�»
</td></tr><tr><td align="right">    Chester A. Arthur  </td><td>
</td></tr><tr><td align="right">    Grover Cleveland  </td><td>ğŸ”‚
</td></tr><tr><td align="right">    Benjamin Harrison  </td><td>ğŸ§”ğŸ�»
</td></tr><tr><td align="right">    Grover Cleveland  </td><td>ğŸ”‚
</td></tr><tr><td align="right">    William McKinley  </td><td>
</td></tr><tr><td align="right">    Theodore Roosevelt  </td><td>ğŸ§¸
</td></tr><tr><td align="right">    William Howard Taft  </td><td>ğŸ›�
</td></tr><tr><td align="right">    Woodrow Wilson  </td><td>ğŸ�“
</td></tr><tr><td align="right">    Warren G. Harding  </td><td><a href="https://en.wikipedia.org/wiki/Teapot_Dome_scandal">ğŸ«–</a>
</td></tr><tr><td align="right">    Calvin Coolidge  </td><td>ğŸ™Š
</td></tr><tr><td align="right">    Herbert Hoover  </td><td><a href="https://en.wikipedia.org/wiki/Hooverville">â›º</a>
</td></tr><tr><td align="right">    Franklin D. Roosevelt  </td><td>ğŸ‘¨â€�ğŸ¦½
</td></tr><tr><td align="right">    Harry S. Truman  </td><td>ğŸ�„
</td></tr><tr><td align="right">    Dwight D. Eisenhower  </td><td>ğŸª–
</td></tr><tr><td align="right">    John F. Kennedy  </td><td>ğŸ�†
</td></tr><tr><td align="right">    Lyndon B. Johnson  </td><td><a href="https://en.wikipedia.org/wiki/Box_13_scandal">ğŸ—³ï¸�</a>
</td></tr><tr><td align="right">    Richard M. Nixon  </td><td>ğŸ�›
</td></tr><tr><td align="right">    Gerald R. Ford  </td><td>ğŸ�ˆ
</td></tr><tr><td align="right">    Jimmy Carter  </td><td>ğŸ¥œ
</td></tr><tr><td align="right">    Ronald Reagan  </td><td>ğŸ’¸
</td></tr><tr><td align="right">    George H. W. Bush  </td><td>ğŸ‘»
</td></tr><tr><td align="right">    William J. Clinton  </td><td>ğŸ�·
</td></tr><tr><td align="right">    George W. Bush  </td><td><a href="https://en.wikipedia.org/wiki/George_W%2e_Bush_shoeing_incident">ğŸ‘�</a>
</td></tr><tr><td align="right">    Barack Obama  </td><td>ğŸ‡°ğŸ‡ª
</td></tr><tr><td align="right">    Donald J. Trump  </td><td>ğŸ�Š
</td></tr><tr><td align="right">    Joseph R. Biden </td><td>ğŸ•¶ï¸�
</td></tr></tbody></table>

<p>Honorable mention: Benjamin Franklin ğŸª�</p>

<p>Dishonorable mention: J. Edgar Hoover ğŸ‘š</p>

<p>If anyone has better suggestions I'm glad to hear them.  Note that I
considered, and rejected ğŸ�© for Lincoln because it doesn't look like
his actual hat.  And I thought maybe McKinley should be ğŸ�”ï¸� but since
they changed the name of the mountain back I decided to save it in
case we ever elect a President Denali.</p>

<p>(Thanks to Liam Damewood for suggesting Harding, and to Colton Jang
for Clinton's saxophone.)</p>

<p>[ Addendum 20221106: Twitter user Simon suggests <a href="https://nitter.net/SmoLurks/status/1587388314109321218">emoji for UK prime ministers</a>.Â ]</p>

<p>[ Addendum 20221108: Rasmus Villemoes makes a good suggestion of ğŸ˜¼ for Garfield. 
I had
considered this angle, but abandoned it because there was no way to be
sure that the cat would be orange, overweight, or grouchy.
Also the 
ğŸ§”ğŸ�»
thing is funnier the more it is used.
But I had been unaware that there is CAT FACE WITH WRY SMILE until M.Â Villemoes
brought it to my attention, so maybe.
(Had there been an emoji resembling a lasagna I would have chosen it instantly.)Â ]</p>

<p>[ Addendum 20221108: January First-of-May has suggested ğŸŒ· 
for Maarten van Buren, a Dutch-American whose first language was
not English but Dutch.  Let it be so!Â ]</p></div>
    </content>
    <updated>2022-10-31T21:50:00Z</updated>
    <published>2022-10-31T21:50:00Z</published>
    <category term="/history"/>
    <author>
      <name>Mark Dominus</name>
      <email>mjd@plover.com</email>
      <uri>http://www.plover.com/</uri>
    </author>
    <source>
      <id>tag:,2005:/</id>
      <icon>http://perl.plover.com/favicon.ico</icon>
      <link href="https://blog.plover.com/index.atom" rel="self" type="application/atom+xml">
      <link href="https://blog.plover.com" rel="alternate" type="text/html">
      <subtitle>The Universe of Discourse (Mark Dominus Blog)</subtitle>
      <title>The Universe of Discourse</title>
      <updated>2022-11-08T23:34:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-US">
    <id>584219d403596e3099e0ee9b:58462c0e15d5db6feba171c0:635b6a2d227cca7a1354a637</id>
    <link href="https://mmhaskell.com/blog/2022/10/31/binary-packet-parsing" rel="alternate" type="text/html">
    <title>Binary Packet Parsing</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Today we're back with a new problem walkthrough, this time from <a href="https://adventofcode.com/2021/day/16">Day 16</a> of last year's Advent of Code. In some sense, the parsing section for this problem is very easy - there's not much data to read from the file. In another sense, it's actually rather hard! This problem is about parsing a binary format, similar in some sense to how network packets work. It's a good exercise in handling a few different kinds of recursive cases.</p>
<p>As with the previous parts of this series, you can take a look at the code on <a href="https://github.com/MondayMorningHaskell/AdventOfCode/blob/main/src/Day16.hs">GitHub here</a>. This problem also has quite a few utilities, so you can <a href="https://github.com/MondayMorningHaskell/AdventOfCode/blob/c6ea509bb1b2b6ce42d4ab46c4b5e8e8a06f0953/src/Utils.hs#L202-L260">observe those as well</a>. This article is a deep-dive code walkthrough, so having the code handy to look at might be a good idea!</p>
<h2 id="problem-description">Problem Description</h2>
<p>For this problem, we're decoding a binary packet. The packet is initially given as a hexadecimal string.</p>
<pre><code>A0016C880162017C3686B18A3D4780</code></pre><p>But we'll turn it into binary and start working strictly with ones and zeros. However, the decoding process gets complicated because the packet is structured in a recursive way. But let's go over some of the rules.</p>
<h3 id="packet-header">Packet Header</h3>
<p>Every packet has a six-bit header. The first three bits give a &quot;version number&quot; for the packet. The next three bits give a &quot;type ID&quot;. That part's easy.</p>
<p>Then there are a series of rules about the rest of the information in the packet.</p>
<h3 id="literals">Literals</h3>
<p>If the type ID is 4, the packet is a &quot;literal&quot;. We then parse the remainder of the packet in 5-bit chunks. The first bit tells us if it is the last chunk of the packet (0 means yes, 1 means there are more chunks). The four other bits in the chunk are used to construct the binary number that forms the &quot;value&quot; of the literal. The more chunks, the higher the number can be.</p>
<h3 id="operator-sizes">Operator Sizes</h3>
<p>Packets that aren't literals are <em>operators</em>. This means they contain a variable number of subpackets.</p>
<p>Operators have one bit (after the 6-bit header) giving a &quot;length&quot; type. A length type of &quot;1&quot; tells us that the following 11 bits give the <em>number of subpackets</em>. If the length bit is &quot;0&quot;, then the next 15 bits give the <strong>length</strong> of all the subpackets in bits.</p>
<h3 id="the-packet-structure">The Packet Structure</h3>
<p>We'll see how these work out as we parse them. But with this structure in mind, one thing we can immediately do is come up with a recursive data type for a packet. I ended up calling this <code>PacketNode</code> since I thought of each as a node in a tree. It's pretty easy to see how to do this. We start with a base constructor for a <code>Literal</code> packet that only stores the version and the packet value. Then we just add an <code>Operator</code> constructor that will have a list of subpackets as well as a field for the operator type.</p>
<pre><code class="lang-haskell">data PacketNode =
  Literal Word8 Word64 |
  Operator Word8 Word8 [PacketNode]
  deriving (Show)</code></pre>
<p>Once we've parsed the packet, the &quot;questions to answer&quot; are, for the easy part, to take the sum of all the packet versions in our packet, and then to actually calculate the packet value recursively for the hard part. When we get to that part, we'll see how we use the operators to determine the value.</p>
<h2 id="solution-approach">Solution Approach</h2>
<p>The initial &quot;parsing&quot; part of this problem is actually quite easy. But we can observe that even after we have our binary values, it's still a parsing problem! We'll have an easy enough time answering the question once we've parsed our input into a <code>PacketNode</code>. So the core of the problem is parsing the ones and zeros into our <code>PacketNode</code>.</p>
<p>Since this is a parsing problem, we can actually use <code>Megaparsec</code> for the second part, instead of only for getting the input out of the file. Here's a possible signature for our core function:</p>
<pre><code class="lang-haskell">-- More on this type later
data Bit = One | Zero

parsePacketNode :: (MonadLogger m) =&gt; ParsecT Void [Bit] m PacketNode</code></pre>
<p>Whereas we normally use <code>Text</code> as the second type parameter to <code>ParsecT</code>, we can also use any list type, and the library will know what to do! With this function, we'll eventually be able to break our solution into its different parts. But first, we should start with some useful helpers for all our binary parsing.</p>
<h2 id="binary-utilities">Binary Utilities</h2>
<p>Binary logic comes up fairly often in Advent of Code, and there are quite a few different utilities we would want to use with these ones and zeros. We start with a data type to represent a single bit. For maximum efficiency, we'd want to use a <code>BitVector</code>, but we aren't too worried about that. So we'll make a simple type with two constructors.</p>
<pre><code class="lang-haskell">data Bit = Zero | One
  deriving (Eq, Ord)

instance Show Bit where
  show Zero = &quot;0&quot;
  show One = &quot;1&quot;</code></pre>
<p>Our first order of business is turning a hexadecimal character into a list of bits. Hexadecimal numbers encapsulate 4 bits. So, for example, <code>0</code> should be <code>[Zero, Zero, Zero, Zero]</code>, <code>1</code> should be <code>[Zero, Zero, Zero, One]</code>, and <code>F</code> should be <code>[One, One, One, One]</code>. This is a simple pattern match, but we'll also have a failure case.</p>
<pre><code class="lang-haskell">parseHexChar :: (MonadLogger m) =&gt; Char -&gt; MaybeT m [Bit]
parseHexChar '0' = return [Zero, Zero, Zero, Zero]
parseHexChar '1' = return [Zero, Zero, Zero, One]
parseHexChar '2' = return [Zero, Zero, One, Zero]
parseHexChar '3' = return [Zero, Zero, One, One]
parseHexChar '4' = return [Zero, One, Zero, Zero]
parseHexChar '5' = return [Zero, One, Zero, One]
parseHexChar '6' = return [Zero, One, One, Zero]
parseHexChar '7' = return [Zero, One, One, One]
parseHexChar '8' = return [One, Zero, Zero, Zero]
parseHexChar '9' = return [One, Zero, Zero, One]
parseHexChar 'A' = return [One, Zero, One, Zero]
parseHexChar 'B' = return [One, Zero, One, One]
parseHexChar 'C' = return [One, One, Zero, Zero]
parseHexChar 'D' = return [One, One, Zero, One]
parseHexChar 'E' = return [One, One, One, Zero]
parseHexChar 'F' = return [One, One, One, One]
parseHexChar c = logErrorN (&quot;Invalid Hex Char: &quot; &lt;&gt; pack [c]) &gt;&gt; mzero</code></pre>
<p>If we wanted, we could also include lowercase, but this problem doesn't require it.</p>
<p>We also want to be able to turn a list of bits into a decimal number. We'll do this for a couple different sizes of numbers. For smaller numbers (8 bits or below), we might want to return a <code>Word8</code>. For larger numbers we can do <code>Word64</code>. Calculating the decimal number is a tail recursive process, where we track the accumulated sum and the current power of 2.</p>
<pre><code class="lang-haskell">bitsToDecimal8 :: [Bit] -&gt; Word8
bitsToDecimal8 bits = if length bits &gt; 8
  then error (&quot;Too long! Use bitsToDecimal64! &quot; ++ show bits)
  else btd8 0 1 (reverse bits)
    where
      btd8 :: Word8 -&gt; Word8 -&gt; [Bit] -&gt; Word8
      btd8 accum _ [] = accum
      btd8 accum mult (b : rest) = case b of
        Zero -&gt; btd8 accum (mult * 2) rest
        One -&gt; btd8 (accum + mult) (mult * 2) rest

bitsToDecimal64 :: [Bit] -&gt; Word64
bitsToDecimal64 bits = if length bits &gt; 64
  then error (&quot;Too long! Use bitsToDecimalInteger! &quot; ++ (show $ bits))
  else btd64 0 1 (reverse bits)
    where
      btd64 :: Word64 -&gt; Word64 -&gt; [Bit] -&gt; Word64
      btd64 accum _ [] = accum
      btd64 accum mult (b : rest) = case b of
        Zero -&gt; btd64 accum (mult * 2) rest
        One -&gt; btd64 (accum + mult) (mult * 2) rest</code></pre>
<p>Last of all, we should write a parser for reading a hexadecimal string from our file. This is easy, because Megaparsec already has a parser for a single hexadecimal character.</p>
<pre><code class="lang-haskell">parseHexadecimal :: (MonadLogger m) =&gt; ParsecT Void Text m String
parseHexadecimal = some hexDigitChar</code></pre>
<h2 id="basic-bit-parsing">Basic Bit Parsing</h2>
<p>With all these utilities in place, we can get started with parsing our list of bits. As mentioned above, we want a function that generally looks like this:</p>
<pre><code class="lang-haskell">parsePacketNode :: (MonadLogger m) =&gt; ParsecT Void [Bit] m PacketNode</code></pre>
<p>However, we need one extra nuance. Because we have one layer that will parse several consecutive packets based on the number of bits parsed, we should also return this number as part of our function. In this way, we'll be able to determine if we're done with the subpackets of an operator packet.</p>
<pre><code class="lang-haskell">parsePacketNode :: (MonadLogger m) =&gt; ParsecT Void [Bit] m (PacketNode, Word64)</code></pre>
<p>We'll also want a wrapper around this function so we can call it from a normal context with the list of bits as the input. This looks a lot like the existing utilities (e.g. for parsing a whole file). We use <code>runParserT</code> from Megaparsec and do a case-branch on the result.</p>
<pre><code class="lang-haskell">parseBits :: (MonadLogger m) =&gt; [Bit] -&gt; MaybeT m PacketNode
parseBits bits = do
  result &lt;- runParserT parsePacketNode &quot;Utils.hs&quot; bits
  case result of
    Left e -&gt; logErrorN (&quot;Failed to parse: &quot; &lt;&gt; (pack . show $ e)) &gt;&gt; mzero
    Right (packet, _) -&gt; return packet</code></pre>
<p>We ignore the &quot;size&quot; of the parsed packet in the primary case, but we'll use its result in the recursive calls to <code>parsePacketNode</code>!</p>
<p>Having done this, we can now start writing basic parser functions. To parse a single bit, we'll just wrap the <code>anySingle</code> combinator from Megaparsec.</p>
<pre><code class="lang-haskell">parseBit :: ParsecT Void [Bit] m Bit
parseBit = anySingle</code></pre>
<p>If we want to parse a certain number of bits, we'll want to use the monadic <code>count</code> combinator. Let's write a function that parses three bits and turns it into a <code>Word8</code>, since we'll need this for the packet version and type ID.</p>
<pre><code class="lang-haskell">parse3Bit :: ParsecT Void [Bit] m Word8
parse3Bit = bitsToDecimal8 &lt;$&gt; count 3 parseBit</code></pre>
<p>We can then immediately use this to start filling in our parsing function!</p>
<pre><code class="lang-haskell">parsePacketNode :: (MonadLogger m) =&gt; ParsecT Void [Bit] m (PacketNode, Word64)
parsePacketNode = do
  packetVersion &lt;- parse3Bit
  packetTypeId &lt;- parse3Bit
  ...</code></pre>
<p>Then the rest of the function will depend upon the different cases we might parse.</p>
<h2 id="parsing-a-literal">Parsing a Literal</h2>
<p>We can start with the &quot;literal&quot; case. This parses the &quot;value&quot; contained within the packet. We need to track the number of bits we parse so we can use this result in our parent function!</p>
<pre><code class="lang-haskell">parseLiteral :: ParsecT Void [Bit] m (Word64, Word64)</code></pre>
<p>As explained above, we examine chunks 5 bits at a time, and we end the packet once we have a chunk that starts with 0. This is a &quot;while&quot; loop pattern, which suggests tail recursion as our solution!</p>
<p>We'll have two accumulator arguments. First, the series of bits that contribute to our literal value. Second, the number of bits we've parsed so far (which must include the signal bit).</p>
<pre><code class="lang-haskell">parseLiteral :: ParsecT Void [Bit] m (Word64, Word64)
parseLiteral = parseLiteralTail [] 0
  where
    parseLiteralTail :: [Bit] -&gt; Word64 -&gt; ParsecT Void [Bit] m (Word64, Word64)
    parseLiteralTail accumBits numBits = do
      ...</code></pre>
<p>First, we'll parse the leading bit, followed by the four bits in the chunk value. We append these to our previously accumulated bits, and add 5 to the number of bits parsed:</p>
<pre><code class="lang-haskell">parseLiteral :: ParsecT Void [Bit] m (Word64, Word64)
parseLiteral = parseLiteralTail [] 0
  where
    parseLiteralTail :: [Bit] -&gt; Word64 -&gt; ParsecT Void [Bit] m (Word64, Word64)
    parseLiteralTail accumBits numBits = do
      leadingBit &lt;- parseBit
      nextBits &lt;- count 4 parseBit
      let accum' = accumBits ++ nextBits
      let numBits' = numBits + 5
      ...</code></pre>
<p>If the leading bit is 0, we're done! We can return our value by converting our accumulated bits to decimal. Otherwise, we recurse with our new values.</p>
<pre><code class="lang-haskell">parseLiteral :: ParsecT Void [Bit] m (Word64, Word64)
parseLiteral = parseLiteralTail [] 0
  where
    parseLiteralTail :: [Bit] -&gt; Word64 -&gt; ParsecT Void [Bit] m (Word64, Word64)
    parseLiteralTail accumBits numBits = do
      leadingBit &lt;- parseBit
      nextBits &lt;- count 4 parseBit
      let accum' = accumBits ++ nextBits
      let numBits' = numBits + 5
      if leadingBit == Zero
        then return (bitsToDecimal64 accum', numBits')
        else parseLiteralTail accum' numBits'</code></pre>
<p>Then it's very easy to incorporate this into our primary function. We check the type ID, and if it's &quot;4&quot; (for a literal), we call this function, and return with the <code>Literal</code> packet constructor.</p>
<pre><code class="lang-haskell">parsePacketNode :: (MonadLogger m) =&gt; ParsecT Void [Bit] m (PacketNode, Word64)
parsePacketNode = do
  packetVersion &lt;- parse3Bit
  packetTypeId &lt;- parse3Bit
  if packetTypeId == 4
    then do
      (literalValue, literalBits) &lt;- parseLiteral
      return (Literal packetVersion literalValue, literalBits + 6)
    else
      ...</code></pre>
<p>Now we need to consider the &quot;operator&quot; cases and their subpackets.</p>
<h2 id="parsing-from-number-of-packets">Parsing from Number of Packets</h2>
<p>We'll start with the simpler of these two cases, which is when we are parsing a specific number of subpackets. The first step, of course, is to parse the length type bit.</p>
<pre><code class="lang-haskell">parsePacketNode :: (MonadLogger m) =&gt; ParsecT Void [Bit] m (PacketNode, Word64)
parsePacketNode = do
  packetVersion &lt;- parse3Bit
  packetTypeId &lt;- parse3Bit
  if packetTypeId == 4
    then do
      (literalValue, literalBits) &lt;- parseLiteral
      return (Literal packetVersion literalValue, literalBits + 6)
    else do
      lengthTypeId &lt;- parseBit
      if lengthTypeId == One
        then do
        ...</code></pre>
<p>First, we have to count out 11 bits and use that to determine the number of subpackets. Once we have this number, we just have to recursively call the <code>parsePacketNode</code> function the given number of times.</p>
<pre><code class="lang-haskell">parsePacketNode :: (MonadLogger m) =&gt; ParsecT Void [Bit] m (PacketNode, Word64)
parsePacketNode = do
 ...
  if packetTypeId == 4
    then ...
    else do
      lengthTypeId &lt;- parseBit
      if lengthTypeId == One
        then do
          numberOfSubpackets &lt;- bitsToDecimal64 &lt;$&gt; count 11 parseBit
          subPacketsWithLengths &lt;- replicateM (fromIntegral numberOfSubpackets) parsePacketNode
         ...</code></pre>
<p>We'll unzip these results to get our list of packets and the lengths. To get our final packet length, we take the sum of the sizes, but we can't forget to add the header bits and the length type bit (7 bits), and the bits from the number of subpackets (11).</p>
<pre><code class="lang-haskell">parsePacketNode :: (MonadLogger m) =&gt; ParsecT Void [Bit] m (PacketNode, Word64)
parsePacketNode = do
 ...
  if packetTypeId == 4
    then ...
    else do
      lengthTypeId &lt;- parseBit
      if lengthTypeId == One
        then do
          numberOfSubpackets &lt;- bitsToDecimal64 &lt;$&gt; count 11 parseBit
          subPacketsWithLengths &lt;- replicateM (fromIntegral numberOfSubpackets) parsePacketNode
         let (subPackets, lengths) = unzip subPacketsWithLengths
          return (Operator packetVersion packetTypeId subPackets, sum lengths + 7 + 11)
        else</code></pre>
<h2 id="parsing-from-number-of-bits">Parsing from Number of Bits</h2>
<p>Parsing based on the number of bits in all the subpackets is a little more complicated, because we have more state to track. As we loop through the different subpackets, we need to keep track of how many bits we still have to parse. So we'll make a separate helper function.</p>
<pre><code class="lang-haskell">parseForPacketLength :: (MonadLogger m) =&gt; Int -&gt; Word64 -&gt; [PacketNode] -&gt; ParsecT Void [Bit] m ([PacketNode], Word64)
parseForPacketLength remainingBits accumBits prevPackets = ...</code></pre>
<p>The base case comes when we have 0 bits remaining. Ideally, this occurs with exactly 0 bits. If it's a negative number, this is a problem. But if it's successful, we'll reverse the accumulated packets and return the number of bits we've accumulated.</p>
<pre><code class="lang-haskell">parseForPacketLength :: (MonadLogger m) =&gt; Int -&gt; Word64 -&gt; [PacketNode] -&gt; ParsecT Void [Bit] m ([PacketNode], Word64)
parseForPacketLength remainingBits accumBits prevPackets = if remainingBits &lt;= 0
  then do
    if remainingBits &lt; 0
      then error &quot;Failing&quot;
      else return (reverse prevPackets, accumBits)
  else ...</code></pre>
<p>In the recursive case, we make one new call to <code>parsePacketNode</code> (the original function, not this helper). This gives us a new packet, and some more bits that we've parsed (this is why we've been tracking that number the whole time). So we can subtract the size from the remaining bits, and add it to the accumulated bits. And then we'll make the actual recursive call to this helper function.</p>
<pre><code class="lang-haskell">parseForPacketLength :: (MonadLogger m) =&gt; Int -&gt; Word64 -&gt; [PacketNode] -&gt; ParsecT Void [Bit] m ([PacketNode], Word64)
parseForPacketLength remainingBits accumBits prevPackets = if remainingBits &lt;= 0
  then do
    if remainingBits &lt; 0
      then error &quot;Failing&quot;
      else return (reverse prevPackets, accumBits)
  else do
    (newPacket, size) &lt;- parsePacketNode
    parseForPacketLength (remainingBits - fromIntegral size) (accumBits + fromIntegral size) (newPacket : prevPackets)</code></pre>
<p>And that's all! All our different pieces fit together now and we're able to parse our packet!</p>
<h2 id="solving-the-problems">Solving the Problems</h2>
<p>Now that we've parsed the packet into our structure, the rest of the problem is actually quite easy and fun! We've created a straightforward recursive structure, and so we can loop through it in a straightforward recursive way. We'll just always use the <code>Literal</code> as the base case, and then loop through the list of packets for the base case.</p>
<p>Let's start with summing the packet versions. This will return a <code>Word64</code> since we could be adding a lot of package versions. With a <code>Literal</code> package, we just immediately return the version.</p>
<pre><code class="lang-haskell">sumPacketVersions :: PacketNode -&gt; Word64
sumPacketVersions (Literal v _) = fromIntegral v
...</code></pre>
<p>Then with operator packets, we just map over the sub-packets, take the sum of their versions, and then add the original packet's version.</p>
<pre><code class="lang-haskell">sumPacketVersions :: PacketNode -&gt; Word64
sumPacketVersions (Literal v _) = fromIntegral v
sumPacketVersions (Operator v _ packets) = fromIntegral v +
  sum (map sumPacketVersions packets)</code></pre>
<p>Now, for calculating the final packet value, we again start with the <code>Literal</code> case, since we'll just return its value. Note that we'll do this monadically, since we'll have some failure conditions in the later parts.</p>
<pre><code class="lang-haskell">calculatePacketValue :: MonadLogger m =&gt; PacketNode -&gt; MaybeT m Word64
calculatePacketValue (Literal _ x) = return x</code></pre>
<p>Now, for the first time in the problem, we actually have to care what the operators mean! Here's a summary of the first few operators:</p>
<pre><code>0 = Sum of all subpackets
1 = Product of all subpackets
2 = Minimum of all subpackets
3 = Maximum of all subpackets</code></pre><p>There are three other operators following the same basic pattern. They expect exactly two subpackets and perform a binary, boolean operator. If it is true, the value is 1. If the operation is false, the packet value is 0.</p>
<pre><code>5 = Greater than operator (&lt;)
6 = Less than operator (&gt;)
7 = Equals operator (==)</code></pre><p>For the first set of operations, we can recursively calculate the value of the sub-packets, and take the appropriate aggregate function over the list.</p>
<pre><code class="lang-haskell">calculatePacketValue :: MonadLogger m =&gt; PacketNode -&gt; MaybeT m Word64
calculatePacketValue (Literal _ x) = return x
calculatePacketValue (Operator _ 0 packets) = sum &lt;$&gt; mapM calculatePacketValue packets
calculatePacketValue (Operator _ 1 packets) = product &lt;$&gt; mapM calculatePacketValue packets
calculatePacketValue (Operator _ 2 packets) = minimum &lt;$&gt; mapM calculatePacketValue packets
calculatePacketValue (Operator _ 3 packets) = maximum &lt;$&gt; mapM calculatePacketValue packets
...</code></pre>
<p>For the binary operations, we first have to verify that there are only two packets.</p>
<pre><code class="lang-haskell">calculatePacketValue :: MonadLogger m =&gt; PacketNode -&gt; MaybeT m Word64
...
calculatePacketValue (Operator _ 5 packets) = do
  if length packets /= 2
    then logErrorN &quot;&gt; operator '5' must have two packets!&quot; &gt;&gt; mzero
    else ...</code></pre>
<p>Then we just de-structure the packets, calculate each value, compare them, and then return the appropriate value.</p>
<pre><code class="lang-haskell">calculatePacketValue :: MonadLogger m =&gt; PacketNode -&gt; MaybeT m Word64
...
calculatePacketValue (Operator _ 5 packets) = do
  if length packets /= 2
    then logErrorN &quot;&gt; operator '5' must have two packets!&quot; &gt;&gt; mzero
    else do
      let [p1, p2] = packets
      v1 &lt;- calculatePacketValue p1
      v2 &lt;- calculatePacketValue p2
      return (if v1 &gt; v2 then 1 else 0)
calculatePacketValue (Operator _ 6 packets) = do
  if length packets /= 2
    then logErrorN &quot;&lt; operator '6' must have two packets!&quot; &gt;&gt; mzero
    else do
      let [p1, p2] = packets
      v1 &lt;- calculatePacketValue p1
      v2 &lt;- calculatePacketValue p2
      return (if v1 &lt; v2 then 1 else 0)
calculatePacketValue (Operator _ 7 packets) = do
  if length packets /= 2
    then logErrorN &quot;== operator '7' must have two packets!&quot; &gt;&gt; mzero
    else do
      let [p1, p2] = packets
      v1 &lt;- calculatePacketValue p1
      v2 &lt;- calculatePacketValue p2
      return (if v1 == v2 then 1 else 0)
calculatePacketValue p = do
  logErrorN (&quot;Invalid packet! &quot; &lt;&gt; (pack . show $ p))
  mzero</code></pre>
<h2 id="concluding-code">Concluding Code</h2>
<p>To tie everything together, we just follow the steps.</p>
<ol>
<li>Parse the hexadecimal from the file</li>
<li>Transform the hexadecimal string into a list of bits</li>
<li>Parse the packet</li>
<li>Answer the question</li>
</ol>
<p>For the first part, we use <code>sumPacketVersions</code> on the resulting packet.</p>
<pre><code class="lang-haskell">solveDay16Easy :: String -&gt; IO (Maybe Int)
solveDay16Easy fp = runStdoutLoggingT $ do
  hexLine &lt;- parseFile parseHexadecimal fp
  result &lt;- runMaybeT $ do
    bitLine &lt;- concatMapM parseHexChar hexLine
    packet &lt;- parseBits bitLine
    return $ sumPacketVersions packet
  return (fromIntegral &lt;$&gt; result)</code></pre>
<p>And the &quot;hard&quot; solution is the same, except we use <code>calculatePacketValue</code> instead.</p>
<pre><code class="lang-haskell">solveDay16Hard :: String -&gt; IO (Maybe Int)
solveDay16Hard fp = runStdoutLoggingT $ do
  hexLine &lt;- parseFile parseHexadecimal fp
  result &lt;- runMaybeT $ do
    bitLine &lt;- concatMapM parseHexChar hexLine
    packet &lt;- parseBits bitLine
    calculatePacketValue packet
  return (fromIntegral &lt;$&gt; result)</code></pre>
<p>And we're done!</p>
<h2 id="conclusion">Conclusion</h2>
<p>That's all for this solution! As always, you can take a look at the <a href="https://github.com/MondayMorningHaskell/AdventOfCode/blob/main/src/Day16.hs">code on GitHub</a>. Later this week I'll have the video walkthrough as well. To keep up with all the latest news, make sure to <a href="https://www.mmhaskell.com/subscribe">subscribe</a> to our monthly newsletter! Subscribing will give you access to our <a href="https://www.mmhaskell.com/resources">subscriber resources</a>, like our <a href="https://www.mmhaskell.com/beginners-checklist">Beginners Checklist</a> and our <a href="https://www.mmhaskell.com/production-checklist">Production Checklist</a>.</p></div>
    </summary>
    <updated>2022-10-31T14:30:00Z</updated>
    <published>2022-10-31T14:30:00Z</published>
    <author>
      <name>James Bowen</name>
    </author>
    <source>
      <id>https://mmhaskell.com/blog/</id>
      <link href="https://mmhaskell.com/blog/" rel="alternate" type="text/html">
      <link href="https://mmhaskell.com/blog?format=rss" rel="self" type="application/rss+xml">
      <title>Blog - Monday Morning Haskell</title>
      <updated>2022-11-17T02:30:51Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:,2022:/lang/poutine-3</id>
    <link href="https://blog.plover.com/lang/poutine-3.html" rel="alternate" type="text/html">
    <title>Trollopes</title>
    <content type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://blog.plover.com/lang/poutine-3.html">A while back</a>, discussing Vladimir Putin
(not <em>putain</em>) I said</p>

<blockquote>
  <p>In English we don't seem to be so quivery.
  <a href="https://en.wikipedia.org/wiki/Hoare">Plenty of people are named “Hoare”</a>.
  If someone makes a joke about the homophone, people will just
  conclude that they're a boor.</p>
</blockquote>

<p>Today I remembered <a href="https://en.wikipedia.org/wiki/Frances_Trollope">Frances Trollope</a> and her
son <a href="https://en.wikipedia.org/wiki/Anthony_Trollope">Anthony Trollope</a>. Where does the name
come from?  Surely it's not occupational?</p>

<p>Happily no, just another coincidence.
<a href="https://en.wikipedia.org/wiki/Trollope">According to Wikipedia</a> it is a toponym, referring to
a place called Troughburn in Northumberland, which was originally
known as <em>Trolhop</em>, “troll valley”.
<a href="https://en.wikipedia.org/wiki/Anfrew_Trollope">Sir Andrew Trollope</a> is known to have had the
name as long ago as 1461.</p>

<p><a href="https://www.thetimes.co.uk/article/the-times-diary-tms-alex-salmonds-yo-yo-dieting-baroness-trumpingtons-autobiography-and-is-nigel-farage-hague-mark-ii-lddd5q9g77j">According to the <em>Times</em> of London</a>,
<a href="https://en.wikipedia.org/wiki/Joanna_Trollope">Joanna Trollope</a>, a 6th-generation descendant
of Frances, once recalled</p>

<blockquote>
  <p>a night out with a “very prim and proper” friend who had the surname
  Hoare. The friend was dismayed by the amusement she caused in the
  taxi office when she phoned to book a car for Hoare and Trollope. </p>
</blockquote>

<p>I guess the common name &quot;<a href="https://en.wikipedia.org/wiki/Hooker_%28surname%29">Hooker</a>&quot; <em>is</em>
occupational, perhaps originally referring to a fisherman.</p>

<p>[ Frances Trollope previously on this blog: <a href="https://blog.plover.com/book/almighty-dollar.html">[1]</a>
 <a href="https://blog.plover.com/book/Trollope.html">[2]</a> ]</p>

<p>[ Addendum: (Wiktionary says that <em>Hooker</em> is occupational, a person who makes hooks.  I find it surprising that this would be a separate occupattion.  And what kind of hooks?  I will try to look into this later. ]</p></div>
    </content>
    <updated>2022-10-30T17:05:00Z</updated>
    <published>2022-10-30T17:05:00Z</published>
    <category term="/lang"/>
    <author>
      <name>Mark Dominus</name>
      <email>mjd@plover.com</email>
      <uri>http://www.plover.com/</uri>
    </author>
    <source>
      <id>tag:,2005:/</id>
      <icon>http://perl.plover.com/favicon.ico</icon>
      <link href="https://blog.plover.com/index.atom" rel="self" type="application/atom+xml">
      <link href="https://blog.plover.com" rel="alternate" type="text/html">
      <subtitle>The Universe of Discourse (Mark Dominus Blog)</subtitle>
      <title>The Universe of Discourse</title>
      <updated>2022-11-08T23:34:00Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://www.parsonsmatt.org/2022/10/29/spooky_masks_and_async_exceptions.html</id>
    <link href="https://www.parsonsmatt.org/2022/10/29/spooky_masks_and_async_exceptions.html" rel="alternate" type="text/html">
    <title>Spooky Masks and Async Exceptions</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Everyone loves Haskell because it makes concurrent programming so easy!
<code class="language-plaintext highlighter-rouge">forkIO</code> is great, and you’ve got <code class="language-plaintext highlighter-rouge">STM</code> and <code class="language-plaintext highlighter-rouge">MVar</code> and other fun tools that are pleasant to use.</p>

<p>Well, then you learn about asynchronous exceptions.
The world seems a little scarier - an exception could be lurking around any corner!
Anyone with your <code class="language-plaintext highlighter-rouge">ThreadId</code> could blast you with a <code class="language-plaintext highlighter-rouge">killThread</code> or <code class="language-plaintext highlighter-rouge">throwTo</code> and you would have no idea what happened.</p>

<p>The <code class="language-plaintext highlighter-rouge">async</code> library hides a lot of this from you by managing the <code class="language-plaintext highlighter-rouge">forkIO</code> and <code class="language-plaintext highlighter-rouge">throwTo</code> stuff for you.
It also makes it easy to wait on a thread to finish, and receive exceptions that the forked thread died with.
Consider how nice the implementation of <code class="language-plaintext highlighter-rouge">timeout</code> is here:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">timeout</span> <span class="o">::</span> <span class="kt">Int</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="p">(</span><span class="kt">Maybe</span> <span class="n">a</span><span class="p">)</span>
<span class="n">timeout</span> <span class="n">microseconds</span> <span class="n">action</span> <span class="o">=</span> <span class="kr">do</span>
  <span class="n">withAsync</span> <span class="p">(</span><span class="kt">Just</span> <span class="o">&lt;$&gt;</span> <span class="n">action</span><span class="p">)</span> <span class="o">$</span> <span class="nf">\</span><span class="n">a0</span> <span class="o">-&gt;</span>
  <span class="n">withAsync</span> <span class="p">(</span><span class="kt">Nothing</span> <span class="o">&lt;$</span> <span class="n">threadDelay</span> <span class="n">microseconds</span><span class="p">)</span> <span class="o">$</span> <span class="nf">\</span><span class="n">a1</span> <span class="o">-&gt;</span>
      <span class="n">either</span> <span class="n">id</span> <span class="n">id</span> <span class="o">&lt;$&gt;</span> <span class="n">waitEither</span> <span class="n">a0</span> <span class="n">a1</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">async</code> library uses asynchronous exceptions to signal that a thread <em>must die</em>.
The <code class="language-plaintext highlighter-rouge">withAsync</code> function guarantees that the forked thread is killed off when the inner action is complete.
So <code class="language-plaintext highlighter-rouge">timeout</code> will fork a thread to run <code class="language-plaintext highlighter-rouge">Just &lt;$&gt; action</code>, and then fork another thread to <code class="language-plaintext highlighter-rouge">threadDelay</code>.
<code class="language-plaintext highlighter-rouge">waitEither</code> accepts an <code class="language-plaintext highlighter-rouge">Async a</code> and an <code class="language-plaintext highlighter-rouge">Async b</code> and returns an <code class="language-plaintext highlighter-rouge">IO (Either a b)</code> - whichever one finishes first determines the return type.
If <code class="language-plaintext highlighter-rouge">threadDelay</code> finishes first, then we get a <code class="language-plaintext highlighter-rouge">Right Nothing</code> as the return, and exits.
This spells doom for the <code class="language-plaintext highlighter-rouge">action</code> thread.</p>

<p>But if our brave hero is able to escape before the deadline, it’s the <code class="language-plaintext highlighter-rouge">threadDelay</code> that gets killed!</p>

<p>Indeed, this is a specialization of <code class="language-plaintext highlighter-rouge">race :: IO a -&gt; IO b -&gt; IO (Either a b)</code>, which runs two <code class="language-plaintext highlighter-rouge">IO</code> actions in separate threads.
The first to complete returns the value, and the remaining thread is sacrificed to unspeakable horrors.</p>

<p>But, you really shouldn’t <code class="language-plaintext highlighter-rouge">catch</code> or <code class="language-plaintext highlighter-rouge">handle</code> async exceptions yourself.
GHC uses them to indicate “you really need to shut down extremely quickly, please handle your shit <em>right now</em>.”
<code class="language-plaintext highlighter-rouge">ThreadKilled</code> is used to end a thread’s execution, and <code class="language-plaintext highlighter-rouge">UserInterrupt</code> means that you got a <code class="language-plaintext highlighter-rouge">SIGINT</code> signal and need to stop gracefully.
The <code class="language-plaintext highlighter-rouge">async</code> package uses <code class="language-plaintext highlighter-rouge">AsyncCancelled</code> to, well, cancel threads.
However, the <code class="language-plaintext highlighter-rouge">base</code> package’s <code class="language-plaintext highlighter-rouge">Control.Exception</code> has a footgun: if you catch-all-exceptions by matching on <code class="language-plaintext highlighter-rouge">SomeException</code>, then you’ll catch these async exceptions too!</p>

<p>Now, you should <em>pretty much never</em> be catching <code class="language-plaintext highlighter-rouge">SomeException</code>, unless you really <em>really</em> know what you’re doing.
But I see it all the time:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">import</span> <span class="nn">Control.Exception</span> <span class="p">(</span><span class="nf">catch</span><span class="p">)</span>

<span class="n">blah</span> <span class="o">=</span> 
    <span class="kt">Just</span> <span class="o">&lt;$&gt;</span> <span class="n">coolThing</span> 
        <span class="p">`</span><span class="n">catch</span><span class="p">`</span> <span class="nf">\</span><span class="p">(</span><span class="kt">SomeException</span> <span class="n">e</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kr">do</span>
            <span class="n">reportException</span> <span class="n">e</span>
            <span class="n">pure</span> <span class="kt">Nothing</span>
</code></pre></div></div>

<p>If <code class="language-plaintext highlighter-rouge">coolThing</code> receives a <code class="language-plaintext highlighter-rouge">ThreadKilled</code> or an <code class="language-plaintext highlighter-rouge">AsyncCancelled</code> or <code class="language-plaintext highlighter-rouge">UserInterrupt</code> or anything else from <code class="language-plaintext highlighter-rouge">throwTo</code>, it’ll catch it, report it, and then your program will continue running.
Then the <em>second</em> <code class="language-plaintext highlighter-rouge">Ctrl-C</code> comes from the user, and your program halts immediately without running any cleanup.
This is pretty dang bad!
You really want your <code class="language-plaintext highlighter-rouge">finally</code> calls to run.</p>

<p>You search for a bit, and you find the <a href="https://hackage.haskell.org/package/safe-exceptions"><code class="language-plaintext highlighter-rouge">safe-exceptions</code></a> package.
It promises to make things a lot nicer by <em>not</em> catching async exceptions by default.
So our prior code block, with just a change in import, becomes much safer:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">import</span> <span class="nn">Control.Exception.Safe</span> <span class="p">(</span><span class="nf">catch</span><span class="p">)</span>

<span class="n">blah</span> <span class="o">=</span> 
    <span class="kt">Just</span> <span class="o">&lt;$&gt;</span> <span class="n">coolThing</span> 
        <span class="p">`</span><span class="n">catch</span><span class="p">`</span> <span class="nf">\</span><span class="p">(</span><span class="kt">SomeException</span> <span class="n">e</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kr">do</span>
            <span class="n">reportException</span> <span class="n">e</span>
            <span class="n">pure</span> <span class="kt">Nothing</span>
</code></pre></div></div>

<p>This code will no longer catch and report an async exception.
However, the blocks in your <code class="language-plaintext highlighter-rouge">finally</code> and <code class="language-plaintext highlighter-rouge">bracket</code> for cleanup <em>will</em> run!</p>

<p>Unfortunately, the <code class="language-plaintext highlighter-rouge">safe-exceptions</code> library (and the <code class="language-plaintext highlighter-rouge">unliftio</code> package which uses the same behavior), have a dark secret…</p>

<p><code class="language-plaintext highlighter-rouge">*thunder claps in the distance, as rain begins to fall*</code></p>

<p>… they wear <em>spooky masks</em> while cleaning! WowowoOOOoOoOooOooOOooOooOOo</p>

<p>No, really, they do something like this:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bracket</span> <span class="n">provide</span> <span class="n">cleanup</span> <span class="n">action</span> <span class="o">=</span> 
    <span class="kt">Control</span><span class="o">.</span><span class="kt">Exception</span><span class="o">.</span><span class="n">bracket</span>
        <span class="n">provide</span>
        <span class="p">(</span><span class="nf">\</span><span class="n">a</span> <span class="o">-&gt;</span> 
            <span class="kt">Control</span><span class="o">.</span><span class="kt">Exception</span><span class="o">.</span><span class="n">uninterruptibleMask_</span> <span class="o">$</span> 
                <span class="n">cleanup</span> <span class="n">a</span><span class="p">)</span>
        <span class="n">action</span>
</code></pre></div></div>

<p>This code looks pretty innocuous.
It even says that it’s good! 
“Your cleanup function is guaranteed not to be interrupted by an asynchronous exception.”
So if you’re cleaning things up, and <strong>BAMM</strong> a vampire <code class="language-plaintext highlighter-rouge">ThreadKill</code>s you, you’ll finish your cleanup before rethrowing.
This might just be all you need to make it out of the dungeon alive.</p>

<p>Behind the sweet smile and innocent demeanor of the <code class="language-plaintext highlighter-rouge">safe-exceptions</code> package, though, is a dark mystery - and a vendetta <em>for blood</em>.
Well, maybe not blood, but I guess “intercompatibility of default expectations”?</p>

<h1 id="a-nightmare-scenario-night-of-the-living-deadlock">A Nightmare Scenario: Night of the Living Deadlock</h1>

<p>Once, a brave detective tried to understand how slow the database was.
But in her studies, she accidentally caused the <em>the entire app to deadlock and become an unkillable zombie?!</em></p>

<p>There are three actors in this horror mystery.
Mr DA, the prime suspect.
Alice, our detective.
And Bob, the unassuming janitor.</p>

<h2 id="mr-database-acquisition">Mr Database Acquisition</h2>

<p>One of the suspected villains is Mr. Database Acquisition, a known rogue.
Usually, Mr. Database Acquisition works quickly and effectively, but sometimes everything stops and he’s nowhere to be found.
We’re already recording how long he takes by measuring the job <em>completion</em> time, but if the job never finishes, we don’t know anything.</p>

<p>The database connection is provided from a <code class="language-plaintext highlighter-rouge">resource-pool</code> <code class="language-plaintext highlighter-rouge">Pool</code>, which is supposed to be thread safe and guarantee resource allocation.
But something seems shady about it…</p>

<h2 id="alice">Alice</h2>

<p>Alice is a performance engineer and lead detective.
She’s interested in making the codebase faster, and to do so, she sets up inspection points to log how long things are taking.</p>

<p>Alice cleverly sets up a phantom detective - a forked thread that occasionally checks in on Mr Database.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">withAcquisitionTimer</span>
    <span class="o">::</span> <span class="p">(</span><span class="kt">IO</span> <span class="nb">()</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="n">r</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="n">r</span>
<span class="n">withAcquisitionTimer</span> <span class="n">action</span> <span class="o">=</span> <span class="kr">do</span>
    <span class="n">timeSpent</span> <span class="o">&lt;-</span> <span class="n">newIORef</span> <span class="mi">0</span>
    <span class="kr">let</span> <span class="n">tracker</span> <span class="o">=</span> 
            <span class="n">forever</span> <span class="o">$</span> <span class="kr">do</span>
                <span class="n">threadDelay</span> <span class="mi">1000</span>
                <span class="n">timeSpent</span> <span class="o">&lt;-</span> <span class="n">atomicModifyIORef'</span> <span class="n">timeSpent</span> <span class="p">(</span><span class="nf">\</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="mi">1000</span><span class="p">,</span> <span class="n">a</span><span class="o">+</span><span class="mi">1000</span><span class="p">))</span>
                <span class="n">recordMetric</span> <span class="n">runningWait</span> <span class="n">timeSpent</span>

        <span class="n">report</span> <span class="o">=</span> <span class="kr">do</span>
            <span class="n">elapsed</span> <span class="o">&lt;-</span> <span class="n">readIORef</span> <span class="n">timeSpent</span>
            <span class="n">recordMetric</span> <span class="n">totalWait</span> <span class="n">elapsed</span>

    <span class="n">withAsync</span> <span class="p">(</span><span class="n">tracker</span> <span class="p">`</span><span class="n">finally</span><span class="p">`</span> <span class="n">report</span><span class="p">)</span> <span class="o">$</span> <span class="nf">\</span><span class="n">a</span> <span class="o">-&gt;</span>
        <span class="n">action</span> <span class="p">(</span><span class="n">cancel</span> <span class="n">a</span><span class="p">)</span>
</code></pre></div></div>

<p>The actual implementation is a bit more robust and sensible, but this gets the gist across.
Pretend we’re in a campy low budget horror movie.</p>

<p>The <code class="language-plaintext highlighter-rouge">tracker</code> thread wakes up every millisecond to record how long we’re waiting, and continues running until the thread is finally cancelled, or killed with an async exception, or the <code class="language-plaintext highlighter-rouge">action</code> finishes successfully, or if a regular exception causes <code class="language-plaintext highlighter-rouge">action</code> to exit early.
<code class="language-plaintext highlighter-rouge">withAsync</code> will <code class="language-plaintext highlighter-rouge">cancel</code> the tracker thread, ensuring that we don’t leak threads.
Part of <code class="language-plaintext highlighter-rouge">cancel</code>’s API is that it doesn’t return until the thread is totally, completely, certainly dead - so when <code class="language-plaintext highlighter-rouge">withAsync</code> returns, you’re <em>guaranteed</em> that the thread is dead.</p>

<p>Alice sets the tracker up for every database acquisition, and waits to see what’s really going on.</p>

<h2 id="bob-the-janitor">Bob, the Janitor</h2>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">theSceneOfTheCrime</span> <span class="o">=</span>
    <span class="n">bracket</span> 
        <span class="p">(</span><span class="n">runDB</span> <span class="n">startProcess</span><span class="p">)</span> 
        <span class="p">(</span><span class="nf">\</span><span class="n">processId</span> <span class="o">-&gt;</span> <span class="n">runDB</span> <span class="p">(</span><span class="n">closeProcess</span> <span class="n">processId</span><span class="p">))</span> 
        <span class="o">$</span> <span class="nf">\</span><span class="n">processId</span> <span class="o">-&gt;</span> <span class="kr">do</span>
            <span class="n">doWorkWith</span> <span class="n">processId</span>
            <span class="cm">{- ... snip ... -}</span>
</code></pre></div></div>

<p>There’s a great big mess - it appears that someone was thrown from a high building!
Foul play is suspected from the initial detective work.
But after the excitement dies down, the janitor, Bob, is left to clean up the mess.</p>

<p>One of the perks of being a janitor is <em>protection from all sorts of evil</em>.
While you’re cleaning stuff up, nothing spooky can harm you - no async exceptions are allowd.
You might expect there’s a loophole here, but it’s fool proof.
It’s such a strong protection that the janitor is even able to bestow it upon anyone that works for him to help clean up.</p>

<p>Bob begins cleaning up by recording the work he’s doing in the database.
To do this, he requests a database connection from Mr Database.
However, this provides Mr Database with the same protections: no one can kill him, <em>or anyone that works for him</em>!</p>

<p>Now, by the particular and odd rules of this protection magic, you don’t have to <em>know</em> that someone is working for you.
So the <em>phantom tracker</em> that Alice set up is similarly extended this protection.</p>

<p>Mr Database provides the database connection to Bob in a prompt manner, and Bob completes his task.
However, when Bob attempts to <em>release</em> the database back, he can’t!
The database connection is permanently stuck to his hand.
Mr Database can’t accept it back and put it in the pool, and he can’t continue to his next job.
The entire application comes grinding to a halt, as no one can access the database.</p>

<p>What kind of bizarre curse is this?</p>

<h1 id="the-gift-of-safety">The Gift of Safety</h1>

<p><code class="language-plaintext highlighter-rouge">withAsync</code> wants to be safe - it wants to guarantee that the forked thread is killed when the block exits.
It accomplishes this by effectively doing:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">withAsync</span> <span class="n">thread</span> <span class="n">action</span> <span class="o">=</span> 
    <span class="n">bracket</span>
        <span class="p">(</span><span class="n">async</span> <span class="n">thread</span><span class="p">)</span>
        <span class="n">uninterruptibleCancel</span>
        <span class="n">action</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">async</code> forks the thread and prepares the <code class="language-plaintext highlighter-rouge">Async</code>:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">async</span> <span class="n">action</span> <span class="o">=</span> <span class="kr">do</span>
   <span class="n">var</span> <span class="o">&lt;-</span> <span class="n">newEmptyTMVarIO</span>
   <span class="n">threadId</span> <span class="o">&lt;-</span> <span class="n">mask</span> <span class="o">$</span> <span class="nf">\</span><span class="n">restore</span> <span class="o">-&gt;</span>
          <span class="n">forkIO</span> <span class="o">$</span> <span class="n">try</span> <span class="p">(</span><span class="n">restore</span> <span class="n">action</span><span class="p">)</span> <span class="o">&gt;&gt;=</span> <span class="n">atomically</span> <span class="o">.</span> <span class="n">putTMVar</span> <span class="n">var</span>
   <span class="n">return</span> <span class="kt">Async</span> 
      <span class="p">{</span> <span class="n">asyncThreadId</span> <span class="o">=</span> <span class="n">threadId</span> 
      <span class="p">,</span> <span class="n">_asyncWait</span> <span class="o">=</span> <span class="n">readTMVar</span> <span class="n">var</span>
      <span class="p">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">async</code> is careful to <code class="language-plaintext highlighter-rouge">mask</code> the <code class="language-plaintext highlighter-rouge">forkIO</code> call, which ensures that the forked thread is <code class="language-plaintext highlighter-rouge">mask</code>ed.
That allows <code class="language-plaintext highlighter-rouge">action</code> to receive async exceptions, but <em>outside</em> of <code class="language-plaintext highlighter-rouge">action</code>, it’s guaranteed that if <code class="language-plaintext highlighter-rouge">try</code> succeeds, then the <code class="language-plaintext highlighter-rouge">atomically . putTMVar var</code> also succeeds.
Since <code class="language-plaintext highlighter-rouge">try</code> will catch async exceptions, this means that the async exception will <em>definitely</em> be registered in the <code class="language-plaintext highlighter-rouge">putTMVar</code> call.</p>

<p><code class="language-plaintext highlighter-rouge">uninterruptibleCancel</code> cancels the thread in an uninterruptible state.
<code class="language-plaintext highlighter-rouge">cancel</code> waits for the thread to complete - either with an exception or a real value.</p>

<p>Meanwhile, <code class="language-plaintext highlighter-rouge">bracket</code> is <em>also</em> cursed with safety:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">module</span> <span class="nn">UnliftIO.Exception</span> <span class="kr">where</span>

<span class="n">bracket</span> <span class="n">make</span> <span class="n">clean</span> <span class="n">action</span> <span class="o">=</span> 
    <span class="n">withRunInIO</span> <span class="o">$</span> <span class="nf">\</span><span class="n">runInIO</span> <span class="o">-&gt;</span>
        <span class="kt">Control</span><span class="o">.</span><span class="kt">Exception</span><span class="o">.</span><span class="n">bracket</span>
            <span class="p">(</span><span class="n">runInIO</span> <span class="n">make</span><span class="p">)</span>
            <span class="p">(</span><span class="nf">\</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="n">uninterruptibleMask_</span> <span class="o">$</span> <span class="n">runInIO</span> <span class="o">$</span> <span class="n">clean</span> <span class="n">a</span><span class="p">)</span>
            <span class="p">(</span><span class="nf">\</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="n">runInIO</span> <span class="o">$</span> <span class="n">action</span> <span class="n">a</span><span class="p">)</span>
</code></pre></div></div>

<h1 id="the-curse-of-two-gifts">The Curse of Two Gifts</h1>

<p>Unspeakable magical rules dictate that <em>two</em> gifts form a curse, under the usual laws for associativity and commutativity.</p>

<p>To understand what’s going on, we start by inlining the bracket.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">crimeSceneCleanedUp</span> <span class="o">=</span>
    <span class="n">withRunInIO</span> <span class="o">$</span> <span class="nf">\</span><span class="n">runInIO</span> <span class="o">-&gt;</span>
    <span class="n">bracket</span>
        <span class="p">(</span><span class="n">runInIO</span> <span class="o">$</span> <span class="n">runDB</span> <span class="n">createProcess</span><span class="p">)</span>
        <span class="p">(</span><span class="nf">\</span><span class="n">pid</span> <span class="o">-&gt;</span> 
            <span class="n">uninterruptibleMask_</span> <span class="o">$</span> <span class="kr">do</span>
                <span class="n">runInIO</span> <span class="o">$</span> <span class="n">runDB</span> <span class="o">$</span> <span class="kr">do</span>
                    <span class="n">closeProcess</span> <span class="n">pid</span>
        <span class="p">)</span>
        <span class="n">_stuff</span>
</code></pre></div></div>

<p>We know that the <code class="language-plaintext highlighter-rouge">make</code> and <code class="language-plaintext highlighter-rouge">action</code> managed to complete, so we’re interested in the cleanup.
Let’s expand <code class="language-plaintext highlighter-rouge">runDB</code> annd omit some noise:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">crimeSceneCleanedUp</span> <span class="o">=</span>
    <span class="n">withRunInIO</span> <span class="o">$</span> <span class="nf">\</span><span class="n">runInIO</span> <span class="o">-&gt;</span>
           
                                       
                 
            <span class="n">uninterruptibleMask_</span> <span class="o">$</span> <span class="kr">do</span>
                <span class="n">runInIO</span> <span class="o">$</span> <span class="kr">do</span>
                    <span class="n">sqlPool</span> <span class="o">&lt;-</span> <span class="n">getSqlPool</span>
                    <span class="n">withAcquisitionTimer</span> <span class="o">$</span> <span class="nf">\</span><span class="n">stop</span> <span class="o">-&gt;</span>
                        <span class="n">flip</span> <span class="n">runSqlPool</span> <span class="n">sqlPool</span> <span class="o">$</span> <span class="kr">do</span>
                            <span class="n">stop</span> 
                            <span class="n">closeProcess</span> <span class="n">pid</span>
</code></pre></div></div>

<p>Hmm! That <code class="language-plaintext highlighter-rouge">withAcqusitionTimer</code> is new!
Enhance!!</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">crimeSceneCleanedUp</span> <span class="o">=</span>
    <span class="n">withRunInIO</span> <span class="o">$</span> <span class="nf">\</span><span class="n">runInIO</span> <span class="o">-&gt;</span>
           
                                       
                 
            <span class="n">uninterruptibleMask_</span> <span class="o">$</span> <span class="kr">do</span>
                <span class="n">runInIO</span> <span class="o">$</span> <span class="kr">do</span>
                    <span class="n">sqlPool</span> <span class="o">&lt;-</span> <span class="n">getSqlPool</span>
                    
                    <span class="n">withAsync</span> <span class="p">(</span><span class="n">task</span> <span class="p">`</span><span class="n">finally</span><span class="p">`</span> <span class="n">record</span><span class="p">)</span> <span class="o">$</span> <span class="nf">\</span><span class="n">async</span> <span class="o">-&gt;</span>
                        <span class="n">flip</span> <span class="n">runSqlPool</span> <span class="n">sqlPool</span> <span class="o">$</span> <span class="kr">do</span>
                        <span class="n">cancel</span> <span class="n">async</span> 
                        <span class="n">closeProcess</span> <span class="n">pid</span>
</code></pre></div></div>

<p>Uh oh.
Let’s zoom in on <code class="language-plaintext highlighter-rouge">withAsync</code> (and get rid of some indentation):</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">crimeSceneCleanedUp</span> <span class="o">=</span>
    <span class="n">uninterruptibleMask_</span> <span class="o">$</span> <span class="kr">do</span>
        <span class="n">sqlPool</span> <span class="o">&lt;-</span> <span class="n">getSqlPool</span>
        
        <span class="n">bracket</span> 
            <span class="p">(</span><span class="n">async</span> <span class="p">(</span><span class="n">task</span> <span class="p">`</span><span class="n">finally</span><span class="p">`</span> <span class="n">record</span><span class="p">))</span>
            <span class="p">(</span><span class="n">uninterruptibleCancel</span><span class="p">)</span>
            <span class="o">$</span> <span class="nf">\</span><span class="n">async</span> <span class="o">-&gt;</span>
            <span class="n">flip</span> <span class="n">runSqlPool</span> <span class="n">sqlPool</span> <span class="o">$</span> <span class="kr">do</span>
                <span class="n">cancel</span> <span class="n">async</span> 
                <span class="n">closeProcess</span> <span class="n">pid</span>
</code></pre></div></div>

<p>One more level!</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">crimeSceneCleanedUp</span> <span class="o">=</span>
    <span class="n">uninterruptibleMask_</span> <span class="o">$</span> <span class="kr">do</span>
        <span class="n">sqlPool</span> <span class="o">&lt;-</span> <span class="n">getSqlPool</span>
        
        <span class="n">bracket</span> 
            <span class="p">(</span><span class="kr">do</span>
                <span class="n">var</span> <span class="o">&lt;-</span> <span class="n">newEmptyTMVarIO</span>
                <span class="n">threadId</span> <span class="o">&lt;-</span> <span class="n">mask</span> <span class="o">$</span> <span class="nf">\</span><span class="n">restore</span> <span class="o">-&gt;</span>
                    <span class="n">forkIO</span> <span class="o">$</span> <span class="kr">do</span>
                        <span class="n">eres</span> <span class="o">&lt;-</span> <span class="n">try</span> <span class="o">$</span> <span class="n">restore</span> <span class="o">$</span> 
                            <span class="n">task</span> <span class="p">`</span><span class="n">finally</span><span class="p">`</span> <span class="n">record</span> 
                        <span class="n">atomically</span> <span class="o">$</span> <span class="n">putTMVar</span> <span class="n">var</span> <span class="n">eres</span>
                <span class="n">return</span> <span class="kt">Async</span> 
                    <span class="p">{</span> <span class="n">asyncThreadId</span> <span class="o">=</span> <span class="n">threadId</span> 
                    <span class="p">,</span> <span class="n">_asyncWait</span> <span class="o">=</span> <span class="n">readTMVar</span> <span class="n">var</span>
                    <span class="p">}</span>
            <span class="n">uninterruptibleCancel</span>
            <span class="o">$</span> <span class="nf">\</span><span class="n">async</span> <span class="o">-&gt;</span>
            <span class="n">flip</span> <span class="n">runSqlPool</span> <span class="n">sqlPool</span> <span class="o">$</span> <span class="kr">do</span>
                <span class="n">cancel</span> <span class="n">async</span> 
                <span class="n">closeProcess</span> <span class="n">pid</span>
</code></pre></div></div>

<p>Uh oh.
<code class="language-plaintext highlighter-rouge">forkIO</code> inherits the masking state from the parent thread.
This means that <code class="language-plaintext highlighter-rouge">uninterruptibleMask_</code> state, set by <code class="language-plaintext highlighter-rouge">bracket</code>’s <code class="language-plaintext highlighter-rouge">cleanup</code>, is inherited by our <code class="language-plaintext highlighter-rouge">forkIO</code>.</p>

<p>Let’s zoom back out on that <code class="language-plaintext highlighter-rouge">async</code> call and inline the <code class="language-plaintext highlighter-rouge">task</code>…</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">crimeSceneCleanedUp</span> <span class="o">=</span>
    <span class="n">uninterruptibleMask_</span> <span class="o">$</span> <span class="kr">do</span>
        <span class="n">withAsync</span> 
            <span class="p">(</span><span class="kr">do</span>
                <span class="n">forever</span> <span class="o">$</span> <span class="kr">do</span>
                    <span class="n">threadDelay</span> <span class="mi">1000</span>
                    <span class="cm">{- hmm -}</span>
             <span class="p">`</span><span class="n">finally</span><span class="p">`</span> <span class="n">record</span><span class="p">)</span> <span class="o">$</span> <span class="nf">\</span><span class="n">async</span> <span class="o">-&gt;</span>
            <span class="cm">{- snip -}</span>
</code></pre></div></div>

<p>Ah!
That’s the zombie.
Reducing it to it’s most basic nature, we have:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">zombie</span> <span class="o">::</span> <span class="kt">IO</span> <span class="p">(</span><span class="kt">Async</span> <span class="n">a</span><span class="p">)</span>
<span class="n">zombie</span> <span class="o">=</span>
    <span class="n">uninterruptibleMask_</span> <span class="o">$</span>
        <span class="n">async</span> <span class="o">$</span> 
            <span class="n">forever</span> <span class="o">$</span> 
                <span class="n">threadDelay</span> <span class="mi">1000</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">uninteruptibleMask_</code> means “I cannot be killed by async exceptions.”
<code class="language-plaintext highlighter-rouge">async</code> allows the forked thread to inherit the masking state of the parent.
But about half of the API of <code class="language-plaintext highlighter-rouge">async</code> <em>requires</em> that the forked thread can be killed by async exceptions.
<code class="language-plaintext highlighter-rouge">race</code> is completely broken with unkillable <code class="language-plaintext highlighter-rouge">Async</code>s.</p>

<p>The solution is to use <code class="language-plaintext highlighter-rouge">withAsyncWithUnmask</code>:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">safeWithAsync</span> <span class="n">thread</span> <span class="n">action</span> <span class="o">=</span>
    <span class="n">withAsyncWithUnmask</span> <span class="p">(</span><span class="nf">\</span><span class="n">unmask</span> <span class="o">-&gt;</span> <span class="n">unmask</span> <span class="n">thread</span><span class="p">)</span> <span class="n">action</span>
</code></pre></div></div>

<p>This unmasks the child thread, revealing it to be an imposter all along.</p>

<blockquote>
  <p>And I would have ~gotten away with it~ never exited and consumed all resources, if it weren’t for you danged kids!!!</p>
</blockquote>

<p>The unmasked phantom thread, free from it’s curse of safety, was killed and returned to the phantom aether to be called upon in other sorcery.</p></div>
    </summary>
    <updated>2022-10-29T00:00:00Z</updated>
    <published>2022-10-29T00:00:00Z</published>
    <source>
      <id>https://www.parsonsmatt.org</id>
      <author>
        <name>Matt Parsons</name>
      </author>
      <link href="https://www.parsonsmatt.org" rel="alternate" type="text/html">
      <link href="https://www.parsonsmatt.org/feed.xml" rel="self" type="application/rss+xml">
      <title>Overcoming Software</title>
      <updated>2022-11-02T19:03:32Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://www.well-typed.com/blog/2022/10/ghc-2022-08-2022-09</id>
    <link href="https://well-typed.com/blog/2022/10/ghc-2022-08-2022-09" rel="alternate" type="text/html">
    <title>GHC activities report: August-September 2022</title>
    <summary>This is the fourteenth edition of our GHC activities report, which
describes the work on GHC and related projects that we are doing at
Well-Typed. The current edition covers roughly the months of August and
September 2022. You can find the previous editions collected under the
ghc-activities-report tag. [...]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This is the fourteenth edition of our GHC activities report, which describes the work on GHC and related projects that we are doing at Well-Typed. The current edition covers roughly the months of August and September 2022. You can find the previous editions collected under the <a href="https://well-typed.com/blog/tags/ghc-activities-report">ghc-activities-report tag</a>.</p>
<p>A bit of background: One aspect of our work at Well-Typed is to support GHC and the Haskell core infrastructure. Several companies, including IOHK and GitHub via the Haskell Foundation, are providing us with funding to do this work. We are also working with Hasura on <a href="https://well-typed.com/blog/2022/05/hasura-supports-haskell-tooling">better debugging tools and improvements to HLS</a>. We are very grateful on behalf of the whole Haskell community for the support these companies provide.</p>
<p>If you are interested in also contributing funding to ensure we can continue or even scale up this kind of work, please <a href="mailto:info@well-typed.com">get in touch</a>.</p>
<p>Of course, GHC is a large community effort, and Well-Typed’s contributions are just a small part of this. This report does not aim to give an exhaustive picture of <em>all</em> GHC work that is ongoing, and there are many fantastic features currently being worked on that are omitted here simply because none of us are currently involved in them in any way. Furthermore, the aspects we <em>do</em> mention are still the work of many people. In many cases, we have just been helping with the last few steps of integration. We are immensely grateful to everyone contributing to GHC!</p>

<h2 id="team">Team</h2>
<p>The current GHC team consists of <a href="https://well-typed.com/people/ben">Ben Gamari</a>, <a href="https://well-typed.com/people/andreask">Andreas Klebinger</a>, <a href="https://well-typed.com/people/matthew">Matthew Pickering</a>, <a href="https://well-typed.com/people/zubin">Zubin Duggal</a> and <a href="https://well-typed.com/people/sam">Sam Derbyshire</a>. Many others within Well-Typed are contributing to GHC more occasionally.</p>
<h2 id="releases">Releases</h2>
<ul>
<li><p>August and September were quiet months due to holidays and now our attention is turning to the forthcoming 9.4.3, 9.2.5 releases and 9.6 branch.</p></li>
<li><p>Zubin has been preparing GHC 9.2.5 and backporting critical runtime performance fixes like <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21755">#21755</a> to the branch.</p></li>
</ul>
<h2 id="driver">Driver</h2>
<ul>
<li><p>Matt finished an extension to interface files which allows the whole core program to be stored in an interface file. This improves restart times of GHCi and can massively improve compilation times of projects involving many Template Haskell splices. (<a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7502">!7502</a>)</p></li>
<li><p>Matt investigated a number of issues to do with interface file determinism and added some CI jobs to try to check that we are producing deterministic interfaces. (<a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/8895">!8895</a>)</p></li>
</ul>
<h2 id="compiler-performance">Compiler performance</h2>
<ul>
<li><p>Andreas investigated the benefit of being less aggressive in pruning specializations in <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/18532">#18532</a>, where it turned out the current behaviour is already optimal.</p></li>
<li><p>Andreas investigated GHC and core lint performance in <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/22200">#22200</a>. This resulted in <a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/9055">!9055</a> where a few key improvements improved compile times for builds using <code>-dcore-lint</code> by ~15% in the common case and ~30% in edge cases.</p></li>
<li><p>Matt did another round of space usage investigation and fixed a number of leaks in the simplifier. These changes are most obvious when compiling very large modules. The fixes focused on making sure we didn’t retain old bindings across simplifier passes. (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/22102">#22102</a>, <a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/8896">!8896</a>)</p></li>
</ul>
<h2 id="typechecker">Typechecker</h2>
<ul>
<li>Sam improved how GHC picks Given quantified constraints when trying to solve a Wanted constraint, by picking the quantified constraint with the weakest precondition (if one exists). This fixes <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/22216">#22216</a> and <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/22223">#22223</a>.</li>
</ul>
<h2 id="error-messages">Error messages</h2>
<ul>
<li>Sam finalised and landed a patch adding error codes to error messages (<a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/8849">!8849</a>). All errors and warnings that GHC emits using the new diagnostic infrastructure now come with an associated unique code, e.g. <code>error:   [GHC-53633] Pattern match is redundant</code>. These can then be used for looking up documentation, for example in the <a href="https://errors.haskell.org/">Haskell Error Index</a>. This is part of a <a href="https://github.com/haskellfoundation/tech-proposals/blob/main/proposals/accepted/024-error-messages.md">Haskell Foundation proposal</a>.</li>
</ul>
<h2 id="code-generation">Code generation</h2>
<ul>
<li><p>Andreas changed the tag inference pass to apply in a few more situations in <a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/8747">!8747</a>. In particular, code returning variables that are statically known to be properly tagged, as well as <code>dataToTag</code>, benefit from this change and will produce more efficient code.</p></li>
<li><p>Ben and Andreas fixed code generation bug <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21968">#21968</a> which sometimes caused incorrect results when compiling without optimization.</p></li>
<li><p>Andreas fixed <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/22042">#22042</a> where GHC sometimes produced invalid bytecode inside GHCi.</p></li>
<li><p>Ben fixed a bug in code generation for <code>intMulMayOflo#</code> on AArch64 (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21624">#21624</a>) and updated <code>test-primops</code> to exercise the affected codepath.</p></li>
<li><p>Ben fixed a bug in code generation on x86_64 (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21968">#21968</a>) where under some conditions a switch discriminator could clobber a live value.</p></li>
<li><p>Ben fixed a bug in the LLVM code generator which would break GHC-generated initializers. (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/22019">#22019</a>)</p></li>
</ul>
<h2 id="core-to-core-pipeline">Core-to-Core pipeline</h2>
<ul>
<li><p>Andreas investigated <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21960">#21960</a> about regressions in the 9.2/9.4 point releases. They were tracked back to the simple fix for <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21694">#21694</a>. Simon Peyton Jones provided a more robust solution in <a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/8862">!8862</a>.</p></li>
<li><p>Andreas identified <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/22075">#22075</a> where GHC would sometimes enter a infinite loop while compiling a program involving recursive top level bindings which Simon Peyton Jones then fixed in <a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/8905">!8905</a>.</p></li>
</ul>
<h2 id="runtime-system">Runtime system</h2>
<ul>
<li>Ben fixed an bug in <code>newArrayArray#</code> in 9.2 where zero-sized arrays would integer underflow when initializing the card array. (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21962">#21962</a>)</li>
<li>Ben continued work in teaching the runtime linker about constructor/deconstructor priorities, improving reliability of interoperation with C++ code. (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21947">#21947</a>)</li>
<li>Ben diagnosed and fixed a bug in the nonmoving collector where objects could be inappropriately scavenged. (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21885">#21885</a>)</li>
</ul>
<h2 id="profiling">Profiling</h2>
<ul>
<li>Ben reworked GHC’s handling of IPE information, significantly reducing the on-disk size and improving initialization efficiency. (<a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/8868">!8868</a>)</li>
</ul>
<h2 id="libraries">Libraries</h2>
<ul>
<li>Ben finished and merged his thread introspection branch, allowing user programs to enumerate the threads of a program and query the label, state, and stack of each. (<a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/2816">!2816</a>)</li>
<li>Ben reworked the <a href="https://github.com/ghc-proposals/ghc-proposals/pull/330">exception provenance proposal</a> and rewrote his prototype implementation.</li>
</ul>
<h2 id="packaging">Packaging</h2>
<ul>
<li><p>Ben fixed a number of packaging issues (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21901">#21901</a>, <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21965">#21965</a>, <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21713">#21713</a>, <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21974">#21974</a>, <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21506">#21506</a>, <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21956">#21956</a>, <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21988">#21988</a>, <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21976">#21976</a>, <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21974">#21974</a>) and worked to improve CI to ensure that such regressions are caught in the future.</p></li>
<li><p>Matt fixed a number of packaging issues to do with Hackage documentation and added CI jobs which generate documentation suitable for upload to Hackage. (<a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/8846">!8846</a>, <a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/8841">!8841</a>)</p></li>
</ul>
<h2 id="hadrian">Hadrian</h2>
<ul>
<li>Matt improved Hadrian build times by increasing the amount of parallelism available. On a full build the total time is 75% of the time before these patches. (<a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/8879">!8879</a>)</li>
<li>Sam made some improvements to Hadrian bootstrapping on Windows.</li>
</ul>
<h2 id="infrastructure">Infrastructure</h2>
<ul>
<li>Ben worked to fix various CI issues (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21986">#21986</a>) and began work on testing cross-compilers under CI. (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/21480">#21480</a>)</li>
<li>Ben finished his work removing the <code>make</code> build system from GHC’s source tree, dropping over 10kLoC from the repository. (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/17527">#17527</a>)</li>
<li>Ben looked into the feasibility of notarizing macOS binary distributions. (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/17418">#17418</a>)</li>
</ul></div>
    </content>
    <updated>2022-10-27T00:00:00Z</updated>
    <published>2022-10-27T00:00:00Z</published>
    <category term="well-typed"/>
    <category term="ghc"/>
    <category term="community"/>
    <category term="ghc-activities-report"/>
    <author>
      <name>ben, andreask, matthew, zubin, sam</name>
    </author>
    <source>
      <id>https://well-typed.com/blog/</id>
      <logo>https://well-typed.com/img/wtnlogoplain.svg</logo>
      <link href="https://well-typed.com/blog/rss2.xml" rel="self" type="application/rss+xml">
      <link href="https://well-typed.com/blog/" rel="alternate" type="text/html">
      <subtitle>Because Well-Typed Programs Don't Go Wrong</subtitle>
      <title>Well-Typed Blog</title>
      <updated>2022-10-27T00:00:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://comonad.com/reader/?p=994</id>
    <link href="http://comonad.com/reader/2015/domains-sets-traversals-and-applicatives/" rel="alternate" type="text/html">
    <link href="http://comonad.com/reader/2015/domains-sets-traversals-and-applicatives/#comments" rel="replies" type="text/html">
    <link href="http://comonad.com/reader/2015/domains-sets-traversals-and-applicatives/feed/atom/" rel="replies" type="application/atom+xml">
    <title xml:lang="en">Domains, Sets, Traversals and Applicatives</title>
    <summary xml:lang="en">Last time I looked at free monoids, and noticed that in Haskell lists don't really cut it. This is a consequence of laziness and general recursion. To model a language with those properties, one needs to use domains and monotone, continuous maps, rather than sets and total functions (a call-by-value language with general recursion would [...]</summary>
    <content type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p>Last time I looked at free monoids, and noticed that in Haskell lists don't really cut it. This is a consequence of laziness and general recursion. To model a language with those properties, one needs to use domains and monotone, continuous maps, rather than sets and total functions (a call-by-value language with general recursion would use domains and strict maps instead).</p>
<p>This time I'd like to talk about some other examples of this, and point out how doing so can (perhaps) resolve some disagreements that people have about the specific cases.</p>
<p>The first example is not one that I came up with: induction. It's sometimes said that Haskell does not have inductive types at all, or that we cannot reason about functions on its data types by induction. However, I think this is (techincally) inaccurate. What's true is that we cannot simply pretend that that our types are sets and use the induction principles for sets to reason about Haskell programs.  Instead, one has to figure out what inductive domains would be, and what their proof principles are.</p>
<p>Fortunately, there are some papers about doing this. The most recent (that I'm aware of) is <a href="http://arxiv.org/pdf/1206.0357.pdf">Generic Fibrational Induction</a>. I won't get too into the details, but it shows how one can talk about induction in a general setting, where one has a category that roughly corresponds to the type theory/programming language, and a second category of proofs that is 'indexed' by the first category's objects. Importantly, it is not required that the second category is somehow 'part of' the type theory being reasoned about, as is often the case with dependent types, although that is also a special case of their construction.</p>
<p>One of the results of the paper is that this framework can be used to talk about induction principles for types that don't make sense as sets. Specifically:</p>
<pre class="haskell"> 
<span style="color: #06c; font-weight: bold;">newtype</span> Hyp = Hyp <span style="color: green;">(</span><span style="color: green;">(</span>Hyp -&gt; <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int"><span style="background-color: #efefbf; font-weight: bold;">Int</span></a><span style="color: green;">)</span> -&gt; <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int"><span style="background-color: #efefbf; font-weight: bold;">Int</span></a><span style="color: green;">)</span>
 </pre>
<p>the type of &quot;hyperfunctions&quot;. Instead of interpreting this type as a set, where it would effectively require a set that is isomorphic to the power set of its power set, they interpret it in the category of domains and strict functions mentioned earlier. They then construct the proof category in a similar way as one would for sets, except instead of talking about predicates as sub<i>sets</i>, we talk about sub-<i>domains</i> instead. Once this is done, their framework gives a notion of induction for this type.</p>
<p>This example is suitable for ML (and suchlike), due to the strict functions, and sort of breaks the idea that we can really get away with only thinking about sets, even there. Sets are good enough for some simple examples (like flat domains where we don't care about âŠ¥), but in general we have to generalize induction itself to apply to all types in the 'good' language.</p>
<p>While I haven't worked out how the generic induction would work out for Haskell, I have little doubt that it would, because ML actually contains all of Haskell's data types (and vice versa). So the fact that the framework gives meaning to induction for ML implies that it does so for Haskell. If one wants to know what induction for Haskell's 'lazy naturals' looks like, they can study the ML analogue of:</p>
<pre class="haskell"> 
<span style="color: #06c; font-weight: bold;">data</span> LNat = Zero | Succ <span style="color: green;">(</span><span style="color: green;">(</span><span style="color: green;">)</span> -&gt; LNat<span style="color: green;">)</span>
 </pre>
<p>because function spaces lift their codomain, and make things 'lazy'.</p>
<p>----</p>
<p>The other example I'd like to talk about hearkens back to the previous article.  I explained how <code>foldMap</code> is the proper fundamental method of the <code>Foldable</code> class, because it can be massaged to look like:</p>
<pre class="haskell"> 
foldMap :: Foldable f =&gt; f a -&gt; FreeMonoid a
 </pre>
<p>and lists are not the free monoid, because they do not work properly for various infinite cases.</p>
<p>I also mentioned that <code>foldMap</code> looks a lot like <code>traverse</code>: </p>
<pre class="haskell"> 
foldMap  :: <span style="color: green;">(</span>Foldable t   , Monoid m<span style="color: green;">)</span>      =&gt; <span style="color: green;">(</span>a -&gt; m<span style="color: green;">)</span>   -&gt; t a -&gt; m
traverse :: <span style="color: green;">(</span>Traversable t, Applicative f<span style="color: green;">)</span> =&gt; <span style="color: green;">(</span>a -&gt; f b<span style="color: green;">)</span> -&gt; t a -&gt; f <span style="color: green;">(</span>t b<span style="color: green;">)</span>
 </pre>
<p>And of course, we have <code>Monoid m =&gt; Applicative (Const m)</code>, and the functions are expected to agree in this way when applicable.</p>
<p>Now, people like to get in arguments about whether traversals are allowed to be infinite. I know Ed Kmett likes to argue that they can be, because he has lots of examples. But, not everyone agrees, and especially people who have papers proving things about traversals tend to side with the finite-only side. I've heard this includes one of the inventors of <code>Traversable</code>, Conor McBride.</p>
<p>In my opinion, the above disagreement is just another example of a situation where we have a generic notion instantiated in two different ways, and intuition about one does not quite transfer to the other. If you are working in a language like Agda or Coq (for proving), you will be thinking about traversals in the context of sets and total functions. And there, traversals are finite. But in Haskell, there are infinitary cases to consider, and they should work out all right when thinking about domains instead of sets. But I should probably put forward some argument for this position (and even if I don't need to, it leads somewhere else interesting).</p>
<p>One example that people like to give about finitary traversals is that they can be done via lists. Given a finite traversal, we can traverse to get the elements (using <code>Const [a]</code>), traverse the list, then put them back where we got them by traversing again (using <code>State [a]</code>). Usually when you see this, though, there's some subtle cheating in relying on the list to be exactly the right length for the second traversal. It will be, because we got it from a traversal of the same structure, but I would expect that proving the function is actually total to be a lot of work. Thus, I'll use this as an excuse to do my own cheating later.</p>
<p>Now, the above uses lists, but why are we using lists when we're in Haskell? We know they're deficient in certain ways. It turns out that we can give a lot of the same relevant structure to the better free monoid type:</p>
<pre class="haskell"> 
<span style="color: #06c; font-weight: bold;">newtype</span> FM a = FM <span style="color: green;">(</span><span style="color: #06c; font-weight: bold;">forall</span> m. Monoid m =&gt; <span style="color: green;">(</span>a -&gt; m<span style="color: green;">)</span> -&gt; m<span style="color: green;">)</span> <span style="color: #06c; font-weight: bold;">deriving</span> <span style="color: green;">(</span><a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Functor"><span style="background-color: #efefbf; font-weight: bold;">Functor</span></a><span style="color: green;">)</span>
 
<span style="color: #06c; font-weight: bold;">instance</span> Applicative FM <span style="color: #06c; font-weight: bold;">where</span>
  pure x = FM <span style="color: green;">(</span>$ x<span style="color: green;">)</span>
  FM ef &lt; *&gt; FM ex = FM $ \k -&gt; ef $ \f -&gt; ex $ \x -&gt; k <span style="color: green;">(</span>f x<span style="color: green;">)</span>
 
<span style="color: #06c; font-weight: bold;">instance</span> Monoid <span style="color: green;">(</span>FM a<span style="color: green;">)</span> <span style="color: #06c; font-weight: bold;">where</span>
  mempty = FM $ \_ -&gt; mempty
  mappend <span style="color: green;">(</span>FM l<span style="color: green;">)</span> <span style="color: green;">(</span>FM r<span style="color: green;">)</span> = FM $ \k -&gt; l k &lt;&gt; r k
 
<span style="color: #06c; font-weight: bold;">instance</span> Foldable FM <span style="color: #06c; font-weight: bold;">where</span>
  foldMap f <span style="color: green;">(</span>FM e<span style="color: green;">)</span> = e f
 
<span style="color: #06c; font-weight: bold;">newtype</span> Ap f b = Ap <span style="color: green;">{</span> unAp :: f b <span style="color: green;">}</span>
 
<span style="color: #06c; font-weight: bold;">instance</span> <span style="color: green;">(</span>Applicative f, Monoid b<span style="color: green;">)</span> =&gt; Monoid <span style="color: green;">(</span>Ap f b<span style="color: green;">)</span> <span style="color: #06c; font-weight: bold;">where</span>
  mempty = Ap $ pure mempty
  mappend <span style="color: green;">(</span>Ap l<span style="color: green;">)</span> <span style="color: green;">(</span>Ap r<span style="color: green;">)</span> = Ap $ <span style="color: green;">(</span>&lt;&gt;<span style="color: green;">)</span> &lt; $&gt; l &lt; *&gt; r
 
<span style="color: #06c; font-weight: bold;">instance</span> Traversable FM <span style="color: #06c; font-weight: bold;">where</span>
  traverse f <span style="color: green;">(</span>FM e<span style="color: green;">)</span> = unAp . e $ Ap . <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap"><span style="font-weight: bold;">fmap</span></a> pure . f
 </pre>
<p>So, free monoids are <code>Monoids</code> (of course), <code>Foldable</code>, and even <code>Traversable</code>. At least, we can define something with the right type that wouldn't bother anyone if it were written in a total language with the right features, but in Haskell it happens to allow various infinite things that people don't like.</p>
<p>Now it's time to cheat. First, let's define a function that can take any <code>Traversable</code> to our free monoid:</p>
<pre class="haskell"> 
toFreeMonoid :: Traversable t =&gt; t a -&gt; FM a
toFreeMonoid f = FM $ \k -&gt; getConst $ traverse <span style="color: green;">(</span>Const . k<span style="color: green;">)</span> f
 </pre>
<p>Now let's define a <code>Monoid</code> that's not a monoid:</p>
<pre class="haskell"> 
<span style="color: #06c; font-weight: bold;">data</span> Cheat a = Empty | Single a | Append <span style="color: green;">(</span>Cheat a<span style="color: green;">)</span> <span style="color: green;">(</span>Cheat a<span style="color: green;">)</span>
 
<span style="color: #06c; font-weight: bold;">instance</span> Monoid <span style="color: green;">(</span>Cheat a<span style="color: green;">)</span> <span style="color: #06c; font-weight: bold;">where</span>
  mempty = Empty
  mappend = Append
 </pre>
<p>You may recognize this as the data version of the free monoid from the previous article, where we get the real free monoid by taking a quotient. using this, we can define an <code>Applicative</code> that's not valid:</p>
<pre class="haskell"> 
<span style="color: #06c; font-weight: bold;">newtype</span> Cheating b a =
  Cheating <span style="color: green;">{</span> prosper :: Cheat b -&gt; a <span style="color: green;">}</span> <span style="color: #06c; font-weight: bold;">deriving</span> <span style="color: green;">(</span><a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Functor"><span style="background-color: #efefbf; font-weight: bold;">Functor</span></a><span style="color: green;">)</span>
 
<span style="color: #06c; font-weight: bold;">instance</span> Applicative <span style="color: green;">(</span>Cheating b<span style="color: green;">)</span> <span style="color: #06c; font-weight: bold;">where</span>
  pure x = Cheating $ \_ -&gt; x
 
  Cheating f &lt; *&gt; Cheating x = Cheating $ \c -&gt; <span style="color: #06c; font-weight: bold;">case</span> c <span style="color: #06c; font-weight: bold;">of</span>
    Append l r -&gt; f l <span style="color: green;">(</span>x r<span style="color: green;">)</span>
 </pre>
<p>Given these building blocks, we can define a function to relabel a traversable using a free monoid:</p>
<pre class="haskell"> 
relabel :: Traversable t =&gt; t a -&gt; FM b -&gt; t b
relabel t <span style="color: green;">(</span>FM m<span style="color: green;">)</span> = propser <span style="color: green;">(</span>traverse <span style="color: green;">(</span><a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:const"><span style="font-weight: bold;">const</span></a> hope<span style="color: green;">)</span> t<span style="color: green;">)</span> <span style="color: green;">(</span>m Single<span style="color: green;">)</span>
 <span style="color: #06c; font-weight: bold;">where</span>
 hope = Cheating $ \c -&gt; <span style="color: #06c; font-weight: bold;">case</span> c <span style="color: #06c; font-weight: bold;">of</span>
   Single x -&gt; x
 </pre>
<p>And we can implement any traversal by taking a trip through the free monoid:</p>
<pre class="haskell"> 
slowTraverse
  :: <span style="color: green;">(</span>Applicative f, Traversable t<span style="color: green;">)</span> =&gt; <span style="color: green;">(</span>a -&gt; f b<span style="color: green;">)</span> -&gt; t a -&gt; f <span style="color: green;">(</span>t b<span style="color: green;">)</span>
slowTraverse f t = <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap"><span style="font-weight: bold;">fmap</span></a> <span style="color: green;">(</span>relabel t<span style="color: green;">)</span> . traverse f . toFreeMonoid $ t
 </pre>
<p>And since we got our free monoid via traversing, all the partiality I hid in the above won't blow up in practice, rather like the case with lists and finite traversals.</p>
<p>Arguably, this is worse cheating. It relies on the exact association structure to work out, rather than just number of elements. The reason is that for infinitary cases, you cannot flatten things out, and there's really no way to detect when you have something infinitary. The finitary traversals have the luxury of being able to reassociate everything to a canonical form, while the infinite cases force us to not do any reassociating at all. So this might be somewhat unsatisfying.</p>
<p>But, what if we didn't have to cheat at all? We can get the free monoid by tweaking <code>foldMap</code>, and it looks like <code>traverse</code>, so what happens if we do the same manipulation to the latter?</p>
<p>It turns out that lens has a type for this purpose, a slight specialization of which is:</p>
<pre class="haskell"> 
<span style="color: #06c; font-weight: bold;">newtype</span> Bazaar a b t =
  Bazaar <span style="color: green;">{</span> runBazaar :: <span style="color: #06c; font-weight: bold;">forall</span> f. Applicative f =&gt; <span style="color: green;">(</span>a -&gt; f b<span style="color: green;">)</span> -&gt; f t <span style="color: green;">}</span>
 </pre>
<p>Using this type, we can reorder <code>traverse</code> to get:</p>
<pre class="haskell"> 
howBizarre :: Traversable t =&gt; t a -&gt; Bazaar a b <span style="color: green;">(</span>t b<span style="color: green;">)</span>
howBizarre t = Bazaar $ \k -&gt; traverse k t
 </pre>
<p>But now, what do we do with this? And what even is it? [1]</p>
<p>If we continue drawing on intuition from <code>Foldable</code>, we know that <code>foldMap</code> is related to the free monoid. <code>Traversable</code> has more indexing, and instead of <code>Monoid</code> uses <code>Applicative</code>. But the latter are actually related to the former; <code>Applicative</code>s are monoidal (closed) functors. And it turns out, <code>Bazaar</code> has to do with free <code>Applicative</code>s.</p>
<p>If we want to construct free <code>Applicative</code>s, we can use our universal property encoding trick:</p>
<pre class="haskell"> 
<span style="color: #06c; font-weight: bold;">newtype</span> Free p f a =
  Free <span style="color: green;">{</span> gratis :: <span style="color: #06c; font-weight: bold;">forall</span> g. p g =&gt; <span style="color: green;">(</span><span style="color: #06c; font-weight: bold;">forall</span> x. f x -&gt; g x<span style="color: green;">)</span> -&gt; g a <span style="color: green;">}</span>
 </pre>
<p>This is a higher-order version of the free <code>p</code>, where we parameterize over the constraint we want to use to represent structures. So <code>Free Applicative f</code> is the free <code>Applicative</code> over a type constructor <code>f</code>. I'll leave the instances as an exercise.</p>
<p>Since free monoid is a monad, we'd expect <code>Free p</code> to be a monad, too.  In this case, it is a McBride style indexed monad, as seen in <a href="https://personal.cis.strath.ac.uk/conor.mcbride/Kleisli.pdf">The Kleisli Arrows of Outrageous Fortune</a>.</p>
<pre class="haskell"> 
<span style="color: #06c; font-weight: bold;">type</span> f ~&gt; g = <span style="color: #06c; font-weight: bold;">forall</span> x. f x -&gt; g x
 
embed :: f ~&gt; Free p f
embed fx = Free $ \k -&gt; k fx
 
translate :: <span style="color: green;">(</span>f ~&gt; g<span style="color: green;">)</span> -&gt; Free p f ~&gt; Free p g
translate tr <span style="color: green;">(</span>Free e<span style="color: green;">)</span> = Free $ \k -&gt; e <span style="color: green;">(</span>k . tr<span style="color: green;">)</span>
 
collapse :: Free p <span style="color: green;">(</span>Free p f<span style="color: green;">)</span> ~&gt; Free p f
collapse <span style="color: green;">(</span>Free e<span style="color: green;">)</span> = Free $ \k -&gt; e $ \<span style="color: green;">(</span>Free e'<span style="color: green;">)</span> -&gt; e' k
 </pre>
<p>That paper explains how these are related to Atkey style indexed monads:</p>
<pre class="haskell"> 
<span style="color: #06c; font-weight: bold;">data</span> At key i j <span style="color: #06c; font-weight: bold;">where</span>
  At :: key -&gt; At key i i
 
<span style="color: #06c; font-weight: bold;">type</span> Atkey m i j a = m <span style="color: green;">(</span>At a j<span style="color: green;">)</span> i
 
ireturn :: IMonad m =&gt; a -&gt; Atkey m i i a
ireturn = ...
 
ibind :: IMonad m =&gt; Atkey m i j a -&gt; <span style="color: green;">(</span>a -&gt; Atkey m j k b<span style="color: green;">)</span> -&gt; Atkey m i k b
ibind = ...
 </pre>
<p>It turns out, <code>Bazaar</code> is exactly the Atkey indexed monad derived from the <code>Free Applicative</code> indexed monad (with some arguments shuffled) [2]:</p>
<pre class="haskell"> 
hence :: Bazaar a b t -&gt; Atkey <span style="color: green;">(</span>Free Applicative<span style="color: green;">)</span> t b a
hence bz = Free $ \tr -&gt; runBazaar bz $ tr . At
 
forth :: Atkey <span style="color: green;">(</span>Free Applicative<span style="color: green;">)</span> t b a -&gt; Bazaar a b t
forth fa = Bazaar $ \g -&gt; gratis fa $ \<span style="color: green;">(</span>At a<span style="color: green;">)</span> -&gt; g a
 
imap :: <span style="color: green;">(</span>a -&gt; b<span style="color: green;">)</span> -&gt; Bazaar a i j -&gt; Bazaar b i j
imap f <span style="color: green;">(</span>Bazaar e<span style="color: green;">)</span> = Bazaar $ \k -&gt; e <span style="color: green;">(</span>k . f<span style="color: green;">)</span>
 
ipure :: a -&gt; Bazaar a i i
ipure x = Bazaar <span style="color: green;">(</span>$ x<span style="color: green;">)</span>
 
<span style="color: green;">(</span>&gt;&gt;&gt;=<span style="color: green;">)</span> :: Bazaar a j i -&gt; <span style="color: green;">(</span>a -&gt; Bazaar b k j<span style="color: green;">)</span> -&gt; Bazaar b k i
Bazaar e &gt;&gt;&gt;= f = Bazaar $ \k -&gt; e $ \x -&gt; runBazaar <span style="color: green;">(</span>f x<span style="color: green;">)</span> k
 
<span style="color: green;">(</span>&gt;==&gt;<span style="color: green;">)</span> :: <span style="color: green;">(</span>s -&gt; Bazaar i o t<span style="color: green;">)</span> -&gt; <span style="color: green;">(</span>i -&gt; Bazaar a b o<span style="color: green;">)</span> -&gt; s -&gt; Bazaar a b t
<span style="color: green;">(</span>f &gt;==&gt; g<span style="color: green;">)</span> x = f x &gt;&gt;&gt;= g
 </pre>
<p>As an aside, <code>Bazaar</code> is also an (Atkey) indexed comonad, and the one that characterizes traversals, similar to how indexed store characterizes lenses. A <code>Lens s t a b</code> is equivalent to a coalgebra <code>s -&gt; Store a b t</code>. A traversal is a similar <code>Bazaar</code> coalgebra:</p>
<pre class="haskell"> 
  s -&gt; Bazaar a b t
    ~
  s -&gt; <span style="color: #06c; font-weight: bold;">forall</span> f. Applicative f =&gt; <span style="color: green;">(</span>a -&gt; f b<span style="color: green;">)</span> -&gt; f t
    ~
  <span style="color: #06c; font-weight: bold;">forall</span> f. Applicative f =&gt; <span style="color: green;">(</span>a -&gt; f b<span style="color: green;">)</span> -&gt; s -&gt; f t
 </pre>
<p>It so happens that Kleisli composition of the Atkey indexed monad above <code>(&gt;==&gt;)</code> is traversal composition.</p>
<p>Anyhow, <code>Bazaar</code> also inherits <code>Applicative</code> structure from <code>Free Applicative</code>:</p>
<pre class="haskell"> 
<span style="color: #06c; font-weight: bold;">instance</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Functor"><span style="background-color: #efefbf; font-weight: bold;">Functor</span></a> <span style="color: green;">(</span>Bazaar a b<span style="color: green;">)</span> <span style="color: #06c; font-weight: bold;">where</span>
  <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap"><span style="font-weight: bold;">fmap</span></a> f <span style="color: green;">(</span>Bazaar e<span style="color: green;">)</span> = Bazaar $ \k -&gt; <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap"><span style="font-weight: bold;">fmap</span></a> f <span style="color: green;">(</span>e k<span style="color: green;">)</span>
 
<span style="color: #06c; font-weight: bold;">instance</span> Applicative <span style="color: green;">(</span>Bazaar a b<span style="color: green;">)</span> <span style="color: #06c; font-weight: bold;">where</span>
  pure x = Bazaar $ \_ -&gt; pure x
  Bazaar ef &lt; *&gt; Bazaar ex = Bazaar $ \k -&gt; ef k &lt; *&gt; ex k
 </pre>
<p>This is actually analogous to the <code>Monoid</code> instance for the free monoid; we just delegate to the underlying structure.</p>
<p>The more exciting thing is that we can fold and traverse over the first argument of <code>Bazaar</code>, just like we can with the free monoid:</p>
<pre class="haskell"> 
bfoldMap :: Monoid m =&gt; <span style="color: green;">(</span>a -&gt; m<span style="color: green;">)</span> -&gt; Bazaar a b t -&gt; m
bfoldMap f <span style="color: green;">(</span>Bazaar e<span style="color: green;">)</span> = getConst $ e <span style="color: green;">(</span>Const . f<span style="color: green;">)</span>
 
<span style="color: #06c; font-weight: bold;">newtype</span> Comp g f a = Comp <span style="color: green;">{</span> getComp :: g <span style="color: green;">(</span>f a<span style="color: green;">)</span> <span style="color: green;">}</span> <span style="color: #06c; font-weight: bold;">deriving</span> <span style="color: green;">(</span><a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Functor"><span style="background-color: #efefbf; font-weight: bold;">Functor</span></a><span style="color: green;">)</span>
 
<span style="color: #06c; font-weight: bold;">instance</span> <span style="color: green;">(</span>Applicative f, Applicative g<span style="color: green;">)</span> =&gt; Applicative <span style="color: green;">(</span>Comp g f<span style="color: green;">)</span> <span style="color: #06c; font-weight: bold;">where</span>
  pure = Comp . pure . pure
  Comp f &lt; *&gt; Comp x = Comp $ liftA2 <span style="color: green;">(</span>&lt; *&gt;<span style="color: green;">)</span> f x
 
btraverse
  :: <span style="color: green;">(</span>Applicative f<span style="color: green;">)</span> =&gt; <span style="color: green;">(</span>a -&gt; f a'<span style="color: green;">)</span> -&gt; Bazaar a b t -&gt; Bazaar a' b t
btraverse f <span style="color: green;">(</span>Bazaar e<span style="color: green;">)</span> = getComp $ e <span style="color: green;">(</span>c . <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap"><span style="font-weight: bold;">fmap</span></a> ipure . f<span style="color: green;">)</span>
 </pre>
<p>This is again analogous to the free monoid code. <code>Comp</code> is the analogue of <code>Ap</code>, and we use <code>ipure</code> in <code>traverse</code>. I mentioned that <code>Bazaar</code> is a comonad:</p>
<pre class="haskell"> 
<a href="http://comonad.com/haskell/category-extras/dist/doc/html/category-extras/Control-Comonad.html#v:extract"><span style="font-weight: bold;">extract</span></a> :: Bazaar b b t -&gt; t
<a href="http://comonad.com/haskell/category-extras/dist/doc/html/category-extras/Control-Comonad.html#v:extract"><span style="font-weight: bold;">extract</span></a> <span style="color: green;">(</span>Bazaar e<span style="color: green;">)</span> = runIdentity $ e Identity
 </pre>
<p>And now we are finally prepared to not cheat:</p>
<pre class="haskell"> 
honestTraverse
  :: <span style="color: green;">(</span>Applicative f, Traversable t<span style="color: green;">)</span> =&gt; <span style="color: green;">(</span>a -&gt; f b<span style="color: green;">)</span> -&gt; t a -&gt; f <span style="color: green;">(</span>t b<span style="color: green;">)</span>
honestTraverse f = <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap"><span style="font-weight: bold;">fmap</span></a> <a href="http://comonad.com/haskell/category-extras/dist/doc/html/category-extras/Control-Comonad.html#v:extract"><span style="font-weight: bold;">extract</span></a> . btraverse f . howBizarre
 </pre>
<p>So, we can traverse by first turning out <code>Traversable</code> into some structure that's kind of like the free monoid, except having to do with <code>Applicative</code>, traverse that, and then pull a result back out. <code>Bazaar</code> retains the information that we're eventually building back the same type of structure, so we don't need any cheating.</p>
<p>To pull this back around to domains, there's nothing about this code to object to if done in a total language. But, if we think about our free <code>Applicative</code>-ish structure, in Haskell, it will naturally allow infinitary expressions composed of the <code>Applicative</code> operations, just like the free monoid will allow infinitary monoid expressions. And this is okay, because <i>some</i> <code>Applicative</code>s can make sense of those, so throwing them away would make the type not free, in the same way that even finite lists are not the free monoid in Haskell. And this, I think, is compelling enough to say that infinite traversals are right for Haskell, just as they are wrong for Agda.</p>
<p>For those who wish to see executable code for all this, I've put a files <a href="http://code.haskell.org/~dolio/haskell-share/FMon.hs">here</a> and <a href="http://code.haskell.org/~dolio/haskell-share/Libre.hs">here</a>. The latter also contains some extra goodies at the end that I may talk about in further installments.</p>
<p>[1] Truth be told, I'm not exactly sure.</p>
<p>[2] It turns out, you can generalize <code>Bazaar</code> to have a correspondence for every choice of <code>p</code></p>
<pre class="haskell"> 
<span style="color: #06c; font-weight: bold;">newtype</span> Bizarre p a b t =
  Bizarre <span style="color: green;">{</span> bizarre :: <span style="color: #06c; font-weight: bold;">forall</span> f. p f =&gt; <span style="color: green;">(</span>a -&gt; f b<span style="color: green;">)</span> -&gt; f t <span style="color: green;">}</span>
 </pre>
<p><code>hence</code> and <code>forth</code> above go through with the more general types. This can be seen <a href="http://code.haskell.org/~dolio/haskell-share/Libre.hs">here</a>.</p></div>
    </content>
    <updated>2022-10-24T17:47:25Z</updated>
    <published>2015-04-29T07:36:19Z</published>
    <category scheme="http://comonad.com/reader" term="Category Theory"/>
    <category scheme="http://comonad.com/reader" term="Comonads"/>
    <category scheme="http://comonad.com/reader" term="Data Structures"/>
    <category scheme="http://comonad.com/reader" term="Haskell"/>
    <category scheme="http://comonad.com/reader" term="Mathematics"/>
    <category scheme="http://comonad.com/reader" term="Monads"/>
    <author>
      <name>Dan Doel</name>
    </author>
    <source>
      <id>http://comonad.com/reader/feed/atom/</id>
      <link href="http://comonad.com/reader" rel="alternate" type="text/html">
      <link href="http://comonad.com/reader/feed/atom/" rel="self" type="application/atom+xml">
      <subtitle xml:lang="en">types, (co)monads, substructural logic</subtitle>
      <title xml:lang="en">The Comonad.Reader</title>
      <updated>2022-10-24T17:48:27Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://comonad.com/reader/?p=977</id>
    <link href="http://comonad.com/reader/2015/free-monoids-in-haskell/" rel="alternate" type="text/html">
    <link href="http://comonad.com/reader/2015/free-monoids-in-haskell/#comments" rel="replies" type="text/html">
    <link href="http://comonad.com/reader/2015/free-monoids-in-haskell/feed/atom/" rel="replies" type="application/atom+xml">
    <title xml:lang="en">Free Monoids in Haskell</title>
    <summary xml:lang="en">It is often stated that Foldable is effectively the toList class. However, this turns out to be wrong. The real fundamental member of Foldable is foldMap (which should look suspiciously like traverse, incidentally). To understand exactly why this is, it helps to understand another surprising fact: lists are not free monoids in Haskell.
This latter fact [...]</summary>
    <content type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p>It is often stated that <code>Foldable</code> is effectively the <code>toList</code> class. However, this turns out to be wrong. The real fundamental member of <code>Foldable</code> is <code>foldMap</code> (which should look suspiciously like <code>traverse</code>, incidentally). To understand exactly why this is, it helps to understand another surprising fact: lists are not free monoids in Haskell.</p>
<p>This latter fact can be seen relatively easily by considering another list-like type:</p>
<pre class="haskell"> 
<span style="color: #06c; font-weight: bold;">data</span> SL a = Empty | SL a :&gt; a
 
<span style="color: #06c; font-weight: bold;">instance</span> Monoid <span style="color: green;">(</span>SL a<span style="color: green;">)</span> <span style="color: #06c; font-weight: bold;">where</span>
  mempty = Empty
  mappend ys Empty = ys
  mappend ys <span style="color: green;">(</span>xs :&gt; x<span style="color: green;">)</span> = <span style="color: green;">(</span>mappend ys xs<span style="color: green;">)</span> :&gt; x
 
single :: a -&gt; SL a
single x = Empty :&gt; x
 </pre>
<p>So, we have a type <code>SL a</code> of snoc lists, which are a monoid, and a function that embeds <code>a</code> into <code>SL a</code>. If (ordinary) lists were the free monoid, there would be a unique monoid homomorphism from lists to snoc lists. Such a homomorphism (call it <code>h</code>) would have the following properties:</p>
<pre class="haskell"> 
h <span style="color: green;">[</span><span style="color: green;">]</span> = Empty
h <span style="color: green;">(</span>xs &lt;&gt; ys<span style="color: green;">)</span> = h xs &lt;&gt; h ys
h <span style="color: green;">[</span>x<span style="color: green;">]</span> = single x
 </pre>
<p>And in fact, this (together with some general facts about Haskell functions) should be enough to define <code>h</code> for our purposes (or any purposes, really).  So, let's consider its behavior on two values:</p>
<pre class="haskell"> 
h <span style="color: green;">[</span><span style="color: red;">1</span><span style="color: green;">]</span> = single <span style="color: red;">1</span>
 
h <span style="color: green;">[</span><span style="color: red;">1</span>,<span style="color: red;">1</span>..<span style="color: green;">]</span> = h <span style="color: green;">(</span><span style="color: green;">[</span><span style="color: red;">1</span><span style="color: green;">]</span> &lt;&gt; <span style="color: green;">[</span><span style="color: red;">1</span>,<span style="color: red;">1</span>..<span style="color: green;">]</span><span style="color: green;">)</span> <span style="color: #5d478b; font-style: italic;">-- [1,1..] is an infinite list of 1s</span>
          = h <span style="color: green;">[</span><span style="color: red;">1</span><span style="color: green;">]</span> &lt;&gt; h <span style="color: green;">[</span><span style="color: red;">1</span>,<span style="color: red;">1</span>..<span style="color: green;">]</span>
 </pre>
<p>This second equation can tell us what the value of <code>h</code> is at this infinite value, since we can consider it the definition of a possibly infinite value:</p>
<pre class="haskell"> 
x = h <span style="color: green;">[</span><span style="color: red;">1</span><span style="color: green;">]</span> &lt;&gt; x = fix <span style="color: green;">(</span>single <span style="color: red;">1</span> &lt;&gt;<span style="color: green;">)</span>
h <span style="color: green;">[</span><span style="color: red;">1</span>,<span style="color: red;">1</span>..<span style="color: green;">]</span> = x
 </pre>
<p><code>(single 1 <code>)</code> is a strict function, so the fixed point theorem tells us that <code>x = ⊥</code>.</code></p><code>
<p>This is a problem, though. Considering some additional equations:</p>
<pre class="haskell"> 
<span style="color: green;">[</span><span style="color: red;">1</span>,<span style="color: red;">1</span>..<span style="color: green;">]</span> &lt;&gt; <span style="color: green;">[</span>n<span style="color: green;">]</span> = <span style="color: green;">[</span><span style="color: red;">1</span>,<span style="color: red;">1</span>..<span style="color: green;">]</span> <span style="color: #5d478b; font-style: italic;">-- true for all n</span>
h <span style="color: green;">[</span><span style="color: red;">1</span>,<span style="color: red;">1</span>..<span style="color: green;">]</span> = ⊥
h <span style="color: green;">(</span><span style="color: green;">[</span><span style="color: red;">1</span>,<span style="color: red;">1</span>..<span style="color: green;">]</span> &lt;&gt; <span style="color: green;">[</span><span style="color: red;">1</span><span style="color: green;">]</span><span style="color: green;">)</span> = h <span style="color: green;">[</span><span style="color: red;">1</span>,<span style="color: red;">1</span>..<span style="color: green;">]</span> &lt;&gt; h <span style="color: green;">[</span><span style="color: red;">1</span><span style="color: green;">]</span>
                   = ⊥ &lt;&gt; single <span style="color: red;">1</span>
                   = ⊥ :&gt; <span style="color: red;">1</span>
                   ≠ ⊥
 </pre>
<p>So, our requirements for <code>h</code> are contradictory, and no such homomorphism can exist.</p>
<p>The issue is that Haskell types are domains. They contain these extra partially defined values and infinite values. The monoid structure on (cons) lists  has infinite lists absorbing all right-hand sides, while the snoc lists are just the opposite.  </p>
<p>This also means that finite lists (or any method of implementing finite sequences) are not free monoids in Haskell. They, as domains, still contain the additional bottom element, and it absorbs all other elements, which is incorrect behavior for the free monoid: </p>
<pre class="haskell"> 
pure x &lt;&gt; ⊥ = ⊥
h ⊥ = ⊥
h <span style="color: green;">(</span>pure x &lt;&gt; ⊥<span style="color: green;">)</span> = <span style="color: green;">[</span>x<span style="color: green;">]</span> &lt;&gt; h ⊥
                = <span style="color: green;">[</span>x<span style="color: green;">]</span> ++ ⊥
                = x:⊥
                ≠ ⊥
 </pre>
<p>So, what is the free monoid? In a sense, it can't be written down at all in Haskell, because we cannot enforce value-level equations, and because we don't have quotients. But, if conventions are good enough, there is a way. First, suppose we have a free monoid type <code>FM a</code>. Then for any other monoid <code>m</code> and embedding <code>a -&gt; m</code>, there must be a monoid homomorphism from <code>FM a</code> to <code>m</code>. We can model this as a Haskell type:</p>
<pre class="haskell"> 
<span style="color: #06c; font-weight: bold;">forall</span> a m. Monoid m =&gt; <span style="color: green;">(</span>a -&gt; m<span style="color: green;">)</span> -&gt; FM a -&gt; m
 </pre>
<p>Where we consider the <code>Monoid m</code> constraint to be enforcing that <code>m</code> actually has valid monoid structure. Now, a trick is to recognize that this sort of universal property can be used to <em>define</em> types in Haskell (or, GHC at least), due to polymorphic types being first class; we just rearrange the arguments and quantifiers, and take <code>FM a</code> to be the polymorphic type:</p>
<pre class="haskell"> 
<span style="color: #06c; font-weight: bold;">newtype</span> FM a = FM <span style="color: green;">{</span> unFM :: <span style="color: #06c; font-weight: bold;">forall</span> m. Monoid m =&gt; <span style="color: green;">(</span>a -&gt; m<span style="color: green;">)</span> -&gt; m <span style="color: green;">}</span>
 </pre>
<p>Types defined like this are automatically universal in the right sense. <a href="http://comonad.com/reader/2015/free-monoids-in-haskell/#footnote-1">[1]</a> The only thing we have to check  is that <code>FM a</code> is actually a monoid over <code>a</code>. But that turns out to be easily witnessed:</p>
<pre class="haskell"> 
embed :: a -&gt; FM a
embed x = FM $ \k -&gt; k x
 
<span style="color: #06c; font-weight: bold;">instance</span> Monoid <span style="color: green;">(</span>FM a<span style="color: green;">)</span> <span style="color: #06c; font-weight: bold;">where</span>
  mempty = FM $ \_ -&gt; mempty
  mappend <span style="color: green;">(</span>FM e1<span style="color: green;">)</span> <span style="color: green;">(</span>FM e2<span style="color: green;">)</span> = FM $ \k -&gt; e1 k &lt;&gt; e2 k
 </pre>
<p>Demonstrating that the above is a proper monoid delegates to instances of <code>Monoid</code> being proper monoids. So as long as we trust that convention, we have a free monoid.</p>
<p>However, one might wonder what a free monoid would look like as something closer to a traditional data type. To construct that, first ignore the required equations, and consider only the generators; we get:</p>
<pre class="haskell"> 
<span style="color: #06c; font-weight: bold;">data</span> FMG a = None | Single a | FMG a :&lt;&gt; FMG a
 </pre>
<p>Now, the proper <code>FM a</code> is the quotient of this by the equations:</p>
<pre class="haskell"> 
None :&lt;&gt; x = x = x :&lt;&gt; None
x :&lt;&gt; <span style="color: green;">(</span>y :&lt;&gt; z<span style="color: green;">)</span> = <span style="color: green;">(</span>x :&lt;&gt; y<span style="color: green;">)</span> :&lt;&gt; z
 </pre>
<p>One way of mimicking this in Haskell is to hide the implementation in a module, and only allow elimination into <code>Monoid</code>s (again, using the convention that <code>Monoid</code> ensures actual monoid structure) using the function:</p>
<pre class="haskell"> 
unFMG :: <span style="color: #06c; font-weight: bold;">forall</span> a m. Monoid m =&gt; FMG a -&gt; <span style="color: green;">(</span>a -&gt; m<span style="color: green;">)</span> -&gt; m
unFMG None _ = mempty
unFMG <span style="color: green;">(</span>Single x<span style="color: green;">)</span> k = k x
unFMG <span style="color: green;">(</span>x :&lt;&gt; y<span style="color: green;">)</span> k = unFMG x k &lt;&gt; unFMG y k
 </pre>
<p>This is actually how quotients can be thought of in richer languages; the quotient does not eliminate any of the generated structure internally, it just restricts the way in which the values can be consumed. Those richer languages just allow us to prove equations, and enforce properties by proof obligations, rather than conventions and structure hiding. Also, one should note that the above should look pretty similar to our encoding of <code>FM a</code> using universal quantification earlier.</p>
<p>Now, one might look at the above and have some objections. For one, we'd normally think that the quotient of the above type is just <code>[a]</code>. Second, it seems like the type is revealing something about the associativity of the operations, because defining recursive values via left nesting is different from right nesting, and this difference is observable by extracting into different monoids. But aren't monoids supposed to remove associativity as a concern? For instance:</p>
<pre class="haskell"> 
ones1 = embed <span style="color: red;">1</span> &lt;&gt; ones1
ones2 = ones2 &lt;&gt; embed <span style="color: red;">1</span>
 </pre>
<p>Shouldn't we be able to prove these are the same, becuase of an argument like:</p>
<pre class="haskell"> 
ones1 = embed <span style="color: red;">1</span> &lt;&gt; <span style="color: green;">(</span>embed <span style="color: red;">1</span> &lt;&gt; ...<span style="color: green;">)</span>
      ... reassociate ...
      = <span style="color: green;">(</span>... &lt;&gt; embed <span style="color: red;">1</span><span style="color: green;">)</span> &lt;&gt; embed <span style="color: red;">1</span>
      = ones2
 </pre>
<p>The answer is that the equation we have only specifies the behavior of associating three values:</p>
<pre class="haskell"> 
x &lt;&gt; <span style="color: green;">(</span>y &lt;&gt; z<span style="color: green;">)</span> = <span style="color: green;">(</span>x &lt;&gt; y<span style="color: green;">)</span> &lt;&gt; z
 </pre>
<p>And while this is sufficient to nail down the behavior of <em>finite</em> values, and <em>finitary</em> reassociating, it does not tell us that <em>infinitary</em> reassociating yields the same value back. And the &quot;... reassociate ...&quot; step in the argument above was decidedly infinitary. And while the rules tell us that we can peel any finite number of copies of <code>embed 1</code> to the front of <code>ones1</code> or the end of <code>ones2</code>, it does not tell us that <code>ones1 = ones2</code>. And in fact it is vital for <code>FM a</code> to have distinct values for these two things; it is what makes it the free monoid when we're dealing with domains of lazy values.</p>
<p>Finally, we can come back to <code>Foldable</code>. If we look at <code>foldMap</code>:</p>
<pre class="haskell"> 
foldMap :: <span style="color: green;">(</span>Foldable f, Monoid m<span style="color: green;">)</span> =&gt; <span style="color: green;">(</span>a -&gt; m<span style="color: green;">)</span> -&gt; f a -&gt; m
 </pre>
<p>we can rearrange things a bit, and get the type:</p>
<pre class="haskell"> 
Foldable f =&gt; f a -&gt; <span style="color: green;">(</span><span style="color: #06c; font-weight: bold;">forall</span> m. Monoid m =&gt; <span style="color: green;">(</span>a -&gt; m<span style="color: green;">)</span> -&gt; m<span style="color: green;">)</span>
 </pre>
<p>And thus, the most fundamental operation of <code>Foldable</code> is not <code>toList</code>, but <code>toFreeMonoid</code>, and lists are not free monoids in Haskell.</p>
</code><p><code><a name="footnote-1">[1]</a>: What we are doing here is noting that (co)limits are objects that internalize natural transformations, but the natural transformations expressible by quantification in GHC are already automatically internalized using quantifiers. However, one has to be careful that the quantifiers are actually enforcing the relevant naturality conditions. In many simple cases they are.</code></p></div>
    </content>
    <updated>2022-10-24T17:47:25Z</updated>
    <published>2015-02-21T23:00:55Z</published>
    <category scheme="http://comonad.com/reader" term="Category Theory"/>
    <category scheme="http://comonad.com/reader" term="Haskell"/>
    <category scheme="http://comonad.com/reader" term="Mathematics"/>
    <author>
      <name>Dan Doel</name>
    </author>
    <source>
      <id>http://comonad.com/reader/feed/atom/</id>
      <link href="http://comonad.com/reader" rel="alternate" type="text/html">
      <link href="http://comonad.com/reader/feed/atom/" rel="self" type="application/atom+xml">
      <subtitle xml:lang="en">types, (co)monads, substructural logic</subtitle>
      <title xml:lang="en">The Comonad.Reader</title>
      <updated>2022-10-24T17:48:27Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://comonad.com/reader/?p=956</id>
    <link href="http://comonad.com/reader/2014/fast-circular-substitution/" rel="alternate" type="text/html">
    <link href="http://comonad.com/reader/2014/fast-circular-substitution/#comments" rel="replies" type="text/html">
    <link href="http://comonad.com/reader/2014/fast-circular-substitution/feed/atom/" rel="replies" type="application/atom+xml">
    <title xml:lang="en">Fast Circular Substitution</title>
    <summary xml:lang="en">Emil Axelsson and Koen Claessen wrote a functional pearl last year about Using Circular Programs for Higher-Order Syntax.
About 6 months ago I had an opportunity to play with this approach in earnest, and realized we can speed it up a great deal. This has kept coming up in conversation ever since, so I've decided to [...]</summary>
    <content type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p>Emil Axelsson and Koen Claessen wrote a functional pearl last year about <a href="http://www.cse.chalmers.se/~emax/documents/axelsson2013using.pdf">Using Circular Programs for Higher-Order Syntax</a>.</p>
<p>About 6 months ago I had an opportunity to play with this approach in earnest, and realized we can speed it up a great deal. This has kept coming up in conversation ever since, so I've decided to write up an article here.</p>
<p>In my <a href="http://hackage.haskell.org/package/bound">bound</a> library I exploit the fact that monads are about substitution to make a monad transformer that manages substitution for me.</p>
<p>Here I'm going to take a more coupled approach.</p>
<p>To have a type system with enough complexity to be worth examining, I'll adapt Dan Doel's <a href="http://hub.darcs.net/dolio/upts">UPTS</a>, which is a pure type system with universe polymorphism. I won't finish the implementation here, but from where we get it should be obvious how to finish the job.</p>
<p><span id="more-956"></span></p>
<p>Unlike Axelsson and Claessen I'm not going to bother to abstract over my name representation.</p>
<p>To avoid losing the original name from the source, we'll just track names as strings with an integer counting the number of times it has been 'primed'. The name is purely for expository purposes, the real variable identifier is the number. We'll follow the Axelsson and Claessen convention of having the identifier assigned to each binder be larger than any one bound inside of it. If you don't need he original source names you can cull them from the representation, but they can be useful if you are representing a syntax tree for something you parsed and/or that you plan to pretty print later.</p>
<pre class="haskell"> 
<span style="color: #06c; font-weight: bold;">data</span> Name = Name <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String"><span style="background-color: #efefbf; font-weight: bold;">String</span></a> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int"><span style="background-color: #efefbf; font-weight: bold;">Int</span></a>
   <span style="color: #06c; font-weight: bold;">deriving</span> <span style="color: green;">(</span><a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show"><span style="background-color: #efefbf; font-weight: bold;">Show</span></a>,<a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Read"><span style="background-color: #efefbf; font-weight: bold;">Read</span></a><span style="color: green;">)</span>
 
hint :: Name -&gt; <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String"><span style="background-color: #efefbf; font-weight: bold;">String</span></a>
hint <span style="color: green;">(</span>Name n _<span style="color: green;">)</span> = n
 
nameId :: Name -&gt; <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int"><span style="background-color: #efefbf; font-weight: bold;">Int</span></a>
nameId <span style="color: green;">(</span>Name _ i<span style="color: green;">)</span> = i
 
<span style="color: #06c; font-weight: bold;">instance</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Eq"><span style="background-color: #efefbf; font-weight: bold;">Eq</span></a> Name <span style="color: #06c; font-weight: bold;">where</span>
  <span style="color: green;">(</span>==<span style="color: green;">)</span> = <span style="color: green;">(</span>==<span style="color: green;">)</span> `on` nameId
 
<span style="color: #06c; font-weight: bold;">instance</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord"><span style="background-color: #efefbf; font-weight: bold;">Ord</span></a> Name <span style="color: #06c; font-weight: bold;">where</span>
  <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:compare"><span style="font-weight: bold;">compare</span></a> = <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:compare"><span style="font-weight: bold;">compare</span></a> `on` nameId
 
prime :: <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String"><span style="background-color: #efefbf; font-weight: bold;">String</span></a> -&gt; <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int"><span style="background-color: #efefbf; font-weight: bold;">Int</span></a> -&gt; Name
prime n i = Name n <span style="color: green;">(</span>i + <span style="color: red;">1</span><span style="color: green;">)</span>
 </pre>
<p>So what is the language I want to work with?</p>
<pre class="haskell"> 
<span style="color: #06c; font-weight: bold;">type</span> Level = <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int"><span style="background-color: #efefbf; font-weight: bold;">Int</span></a>
 
<span style="color: #06c; font-weight: bold;">data</span> Constant
  = Level
  | LevelLiteral <span style="color: #5d478b; font-style: italic;">{-# UNPACK #-}</span> !Level
  | Omega
  <span style="color: #06c; font-weight: bold;">deriving</span> <span style="color: green;">(</span><a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Eq"><span style="background-color: #efefbf; font-weight: bold;">Eq</span></a>,<a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord"><span style="background-color: #efefbf; font-weight: bold;">Ord</span></a>,<a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show"><span style="background-color: #efefbf; font-weight: bold;">Show</span></a>,<a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Read"><span style="background-color: #efefbf; font-weight: bold;">Read</span></a>,Typeable<span style="color: green;">)</span>
 
<span style="color: #06c; font-weight: bold;">data</span> Term a
  = Free a
  | Bound <span style="color: #5d478b; font-style: italic;">{-# UNPACK #-}</span> !Name
  | Constant !Constant
  | Term a :+ <span style="color: #5d478b; font-style: italic;">{-# UNPACK #-}</span> !Level
  | Max  <span style="color: green;">[</span>Term a<span style="color: green;">]</span>
  | Type !<span style="color: green;">(</span>Term a<span style="color: green;">)</span>
  | Lam   <span style="color: #5d478b; font-style: italic;">{-# UNPACK #-}</span> !Name !<span style="color: green;">(</span>Term a<span style="color: green;">)</span> !<span style="color: green;">(</span>Term a<span style="color: green;">)</span>
  | Pi    <span style="color: #5d478b; font-style: italic;">{-# UNPACK #-}</span> !Name !<span style="color: green;">(</span>Term a<span style="color: green;">)</span> !<span style="color: green;">(</span>Term a<span style="color: green;">)</span>
  | Sigma <span style="color: #5d478b; font-style: italic;">{-# UNPACK #-}</span> !Name !<span style="color: green;">(</span>Term a<span style="color: green;">)</span> !<span style="color: green;">(</span>Term a<span style="color: green;">)</span>
  | App !<span style="color: green;">(</span>Term a<span style="color: green;">)</span> !<span style="color: green;">(</span>Term a<span style="color: green;">)</span>
  | Fst !<span style="color: green;">(</span>Term a<span style="color: green;">)</span>
  | Snd !<span style="color: green;">(</span>Term a<span style="color: green;">)</span>
  | Pair !<span style="color: green;">(</span>Term a<span style="color: green;">)</span> !<span style="color: green;">(</span>Term a<span style="color: green;">)</span> !<span style="color: green;">(</span>Term a<span style="color: green;">)</span>
  <span style="color: #06c; font-weight: bold;">deriving</span> <span style="color: green;">(</span><a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show"><span style="background-color: #efefbf; font-weight: bold;">Show</span></a>,<a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Read"><span style="background-color: #efefbf; font-weight: bold;">Read</span></a>,<a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Eq"><span style="background-color: #efefbf; font-weight: bold;">Eq</span></a>,<a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord"><span style="background-color: #efefbf; font-weight: bold;">Ord</span></a>,<a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Functor"><span style="background-color: #efefbf; font-weight: bold;">Functor</span></a>,Foldable,Traversable,Typeable<span style="color: green;">)</span>
 </pre>
<p>That is perhaps a bit paranoid about remaining strict, but it seemed like a good idea at the time.</p>
<p>We can define capture avoiding substitution on terms:</p>
<pre class="haskell"> 
subst :: <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Eq"><span style="background-color: #efefbf; font-weight: bold;">Eq</span></a> a =&gt; a -&gt; Term a -&gt; Term a -&gt; Term a
subst a x y = y &gt;&gt;= \a' -&gt;
  <span style="color: #06c; font-weight: bold;">if</span> a == a'
    <span style="color: #06c; font-weight: bold;">then</span> x
    <span style="color: #06c; font-weight: bold;">else</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return"><span style="font-weight: bold;">return</span></a> a'
 </pre>
<p>Now we finally need to implement Axelsson and Claessen's circular programming trick. Here we'll abstract over terms that allow us to find the highest bound value within them:</p>
<pre class="haskell"> 
<span style="color: #06c; font-weight: bold;">class</span> Bindable t <span style="color: #06c; font-weight: bold;">where</span>
  bound :: t -&gt; <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int"><span style="background-color: #efefbf; font-weight: bold;">Int</span></a>
 </pre>
<p>and instantiate it for our <code>Term</code> type</p>
<pre class="haskell"> 
<span style="color: #06c; font-weight: bold;">instance</span> Bindable <span style="color: green;">(</span>Term a<span style="color: green;">)</span> <span style="color: #06c; font-weight: bold;">where</span>
  bound Free<span style="color: green;">{</span><span style="color: green;">}</span>        = <span style="color: red;">0</span>
  bound Bound<span style="color: green;">{</span><span style="color: green;">}</span>       = <span style="color: red;">0</span> <span style="color: #5d478b; font-style: italic;">-- intentional!</span>
  bound Constant<span style="color: green;">{</span><span style="color: green;">}</span>    = <span style="color: red;">0</span>
  bound <span style="color: green;">(</span>a :+ _<span style="color: green;">)</span>      = bound a
  bound <span style="color: green;">(</span>Max xs<span style="color: green;">)</span>      = <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldr"><span style="font-weight: bold;">foldr</span></a> <span style="color: green;">(</span>\a r -&gt; bound a `<a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:max"><span style="font-weight: bold;">max</span></a>` r<span style="color: green;">)</span> <span style="color: red;">0</span> xs
  bound <span style="color: green;">(</span>Type t<span style="color: green;">)</span>      = bound t
  bound <span style="color: green;">(</span>Lam b t _<span style="color: green;">)</span>   = nameId b `<a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:max"><span style="font-weight: bold;">max</span></a>` bound t
  bound <span style="color: green;">(</span>Pi b t _<span style="color: green;">)</span>    = nameId b `<a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:max"><span style="font-weight: bold;">max</span></a>` bound t
  bound <span style="color: green;">(</span>Sigma b t _<span style="color: green;">)</span> = nameId b `<a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:max"><span style="font-weight: bold;">max</span></a>` bound t
  bound <span style="color: green;">(</span>App x y<span style="color: green;">)</span>     = bound x `<a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:max"><span style="font-weight: bold;">max</span></a>`  bound y
  bound <span style="color: green;">(</span>Fst t<span style="color: green;">)</span>       = bound t
  bound <span style="color: green;">(</span>Snd t<span style="color: green;">)</span>       = bound t
  bound <span style="color: green;">(</span>Pair t x y<span style="color: green;">)</span>  = bound t `<a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:max"><span style="font-weight: bold;">max</span></a>` bound x `<a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:max"><span style="font-weight: bold;">max</span></a>` bound y
 </pre>
<p>As in the original pearl we avoid traversing into the body of the binders, hence the _'s in the code above.</p>
<p>Now we can abstract over the pattern used to create a binder in the functional pearl, since we have multiple binder types in this syntax tree, and the code would get repetitive.</p>
<pre class="haskell"> 
binder :: Bindable t =&gt;
  <span style="color: green;">(</span>Name -&gt; t<span style="color: green;">)</span> -&gt;
  <span style="color: green;">(</span>Name -&gt; t -&gt; r<span style="color: green;">)</span> -&gt;
  <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String"><span style="background-color: #efefbf; font-weight: bold;">String</span></a> -&gt; <span style="color: green;">(</span>t -&gt; t<span style="color: green;">)</span> -&gt; r
binder bd c n e = c b body <span style="color: #06c; font-weight: bold;">where</span>
  body = e <span style="color: green;">(</span>bd b<span style="color: green;">)</span>
  b = prime n <span style="color: green;">(</span>bound body<span style="color: green;">)</span>
 
lam, <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:pi"><span style="font-weight: bold;">pi</span></a>, sigma :: <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String"><span style="background-color: #efefbf; font-weight: bold;">String</span></a> -&gt; Term a -&gt; <span style="color: green;">(</span>Term a -&gt; Term a<span style="color: green;">)</span> -&gt; Term a
lam s t   = binder Bound <span style="color: green;">(</span>`Lam` t<span style="color: green;">)</span> s
<a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:pi"><span style="font-weight: bold;">pi</span></a> s t    = binder Bound <span style="color: green;">(</span>`Pi` t<span style="color: green;">)</span> s
sigma s t = binder Bound <span style="color: green;">(</span>`Sigma` t<span style="color: green;">)</span> s
 </pre>
<p>We may not always want to give names to the variables we capture, so let's define:</p>
<pre>lam_, pi_, sigma_ :: Term a -&gt; (Term a -&gt; Term a) -&gt; Term a
lam_   = lam &quot;_&quot;
pi_    = pi &quot;_&quot;
sigma_ = sigma &quot;_&quot;
</pre>
<p>Now, here's the interesting part. The problem with Axelsson and Claessen's original trick is that every substitution is being handled separately. This means that if you were to write a monad for doing substitution with it, it'd actually be quite slow. You have to walk the syntax tree over and over and over.</p>
<p>We can fuse these together by making a single pass:</p>
<pre class="haskell"> 
instantiate :: Name -&gt; t -&gt; IntMap t -&gt; IntMap t
instantiate = IntMap.insert . nameId
 
rebind :: IntMap <span style="color: green;">(</span>Term b<span style="color: green;">)</span> -&gt; Term a -&gt; <span style="color: green;">(</span>a -&gt; Term b<span style="color: green;">)</span> -&gt; Term b
rebind env xs0 f = go xs0 <span style="color: #06c; font-weight: bold;">where</span>
  go = \<span style="color: #06c; font-weight: bold;">case</span>
    Free a       -&gt; f a
    Bound b      -&gt; env IntMap.! nameId b
    Constant c   -&gt; Constant c
    m :+ n       -&gt; go m :+ n
    Type t       -&gt; Type <span style="color: green;">(</span>go t<span style="color: green;">)</span>
    Max xs       -&gt; Max <span style="color: green;">(</span><a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap"><span style="font-weight: bold;">fmap</span></a> go xs<span style="color: green;">)</span>
    Lam b t e    -&gt; lam   <span style="color: green;">(</span>hint b<span style="color: green;">)</span> <span style="color: green;">(</span>go t<span style="color: green;">)</span> $ \v -&gt;
      rebind <span style="color: green;">(</span>instantiate b v env<span style="color: green;">)</span> e f
    Pi b t e     -&gt; <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:pi"><span style="font-weight: bold;">pi</span></a>    <span style="color: green;">(</span>hint b<span style="color: green;">)</span> <span style="color: green;">(</span>go t<span style="color: green;">)</span> $ \v -&gt;
      rebind <span style="color: green;">(</span>instantiate b v env<span style="color: green;">)</span> e f
    Sigma b t e  -&gt; sigma <span style="color: green;">(</span>hint b<span style="color: green;">)</span> <span style="color: green;">(</span>go t<span style="color: green;">)</span> $ \v -&gt;
      rebind <span style="color: green;">(</span>instantiate b v env<span style="color: green;">)</span> e f
    App x y      -&gt; App <span style="color: green;">(</span>go x<span style="color: green;">)</span> <span style="color: green;">(</span>go y<span style="color: green;">)</span>
    Fst x        -&gt; Fst <span style="color: green;">(</span>go x<span style="color: green;">)</span>
    Snd x        -&gt; Snd <span style="color: green;">(</span>go x<span style="color: green;">)</span>
    Pair t x y   -&gt; Pair <span style="color: green;">(</span>go t<span style="color: green;">)</span> <span style="color: green;">(</span>go x<span style="color: green;">)</span> <span style="color: green;">(</span>go y<span style="color: green;">)</span>
 </pre>
<p>Note that the <code>Lam</code>, <code>Pi</code> and <code>Sigma</code> cases just extend the current environment.</p>
<p>With that now we can upgrade the pearl's encoding to allow for an actual Monad in the same sense as <code>bound</code>.</p>
<pre class="haskell"> 
<span style="color: #06c; font-weight: bold;">instance</span> Applicative Term <span style="color: #06c; font-weight: bold;">where</span>
  pure = Free
  <span style="color: green;">(</span>&lt; *&gt;<span style="color: green;">)</span> = ap
 
<span style="color: #06c; font-weight: bold;">instance</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad"><span style="background-color: #efefbf; font-weight: bold;">Monad</span></a> Term <span style="color: #06c; font-weight: bold;">where</span>
  <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return"><span style="font-weight: bold;">return</span></a> = Free
  <span style="color: green;">(</span>&gt;&gt;=<span style="color: green;">)</span> = rebind IntMap.empty
 </pre>
<p>To show that we can work with this syntax tree representation, let's write an evaluator from it to weak head normal form:</p>
<p>First we'll need some helpers:</p>
<pre class="haskell"> 
apply :: Term a -&gt; <span style="color: green;">[</span>Term a<span style="color: green;">]</span> -&gt; Term a
apply = <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldl"><span style="font-weight: bold;">foldl</span></a> App
 
rwhnf :: IntMap <span style="color: green;">(</span>Term a<span style="color: green;">)</span> -&gt;
  <span style="color: green;">[</span>Term a<span style="color: green;">]</span> -&gt; Term a -&gt; Term a
rwhnf env stk     <span style="color: green;">(</span>App f x<span style="color: green;">)</span>
  = rwhnf env <span style="color: green;">(</span>rebind env x Free:stk<span style="color: green;">)</span> f
rwhnf env <span style="color: green;">(</span>x:stk<span style="color: green;">)</span> <span style="color: green;">(</span>Lam b _ e<span style="color: green;">)</span>
  = rwhnf <span style="color: green;">(</span>instantiate b x env<span style="color: green;">)</span> stk e
rwhnf env stk <span style="color: green;">(</span>Fst e<span style="color: green;">)</span>
  = <span style="color: #06c; font-weight: bold;">case</span> rwhnf env <span style="color: green;">[</span><span style="color: green;">]</span> e <span style="color: #06c; font-weight: bold;">of</span>
  Pair _ e' _ -&gt; rwhnf env stk e'
  e'          -&gt; Fst e'
rwhnf env stk <span style="color: green;">(</span>Snd e<span style="color: green;">)</span>
  = <span style="color: #06c; font-weight: bold;">case</span> rwhnf env <span style="color: green;">[</span><span style="color: green;">]</span> e <span style="color: #06c; font-weight: bold;">of</span>
  Pair _ _ e' -&gt; rwhnf env stk e'
  e'          -&gt; Snd e'
rwhnf env stk e
  = apply <span style="color: green;">(</span>rebind env e Free<span style="color: green;">)</span> stk
 </pre>
<p>Then we can start off the <code>whnf</code> by calling our helper with an initial starting environment:</p>
<pre class="haskell"> 
whnf :: Term a -&gt; Term a
whnf = rwhnf IntMap.empty <span style="color: green;">[</span><span style="color: green;">]</span>
 </pre>
<p>So what have we given up? Well, <code>bound</code> automatically lets you compare terms for alpha equivalence by quotienting out the placement of &quot;F&quot; terms in the syntax tree. Here we have a problem in that the identifiers we get assigned aren't necessarily canonical.</p>
<p>But we can get the same identifiers out by just using the monad above:</p>
<pre class="haskell"> 
alphaEq :: <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Eq"><span style="background-color: #efefbf; font-weight: bold;">Eq</span></a> a =&gt; Term a -&gt; Term a -&gt; <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool"><span style="background-color: #efefbf; font-weight: bold;">Bool</span></a>
alphaEq = <span style="color: green;">(</span>==<span style="color: green;">)</span> `on` liftM <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:id"><span style="font-weight: bold;">id</span></a>
 </pre>
<p>It makes me a bit uncomfortable that our monad is only up to alpha equivalence and that <code>liftM</code> swaps out the identifiers used throughout the entire syntax tree, and we've also lost the ironclad protection against exotic terms.</p>
<p>But overall, this is a much faster version of Axelsson and Claessen's trick and it can be used as a drop-in replacement for something like <code>bound</code> in many cases, and unlike bound, it lets you use HOAS-style syntax for constructing <code>lam</code>, <code>pi</code> and <code>sigma</code> terms.</p>
<p>With pattern synonyms you can prevent the user from doing bad things as well. Once 7.10 ships you'd be able to use a bidirectional pattern synonym for <code>Pi</code>, <code>Sigma</code> and <code>Lam</code> to hide the real constructors behind. I'm not yet sure of the &quot;best practices&quot; in this area.</p>
<p>Here's the code all in one place:</p>
<p>[<a href="http://comonad.com/reader/wp-content/uploads/2014/12/Circular.hs">Download Circular.hs</a>]</p>
<p>Happy Holidays,<br>
-Edward</p></div>
    </content>
    <updated>2022-10-24T17:47:25Z</updated>
    <published>2014-12-30T19:47:45Z</published>
    <category scheme="http://comonad.com/reader" term="Algorithms"/>
    <category scheme="http://comonad.com/reader" term="Haskell"/>
    <category scheme="http://comonad.com/reader" term="Type Theory"/>
    <category scheme="http://comonad.com/reader" term="circular substitution"/>
    <category scheme="http://comonad.com/reader" term="functional programming"/>
    <category scheme="http://comonad.com/reader" term="HOAS"/>
    <category scheme="http://comonad.com/reader" term="syntax trees"/>
    <author>
      <name>Edward Kmett</name>
      <uri>http://comonad.com/</uri>
    </author>
    <source>
      <id>http://comonad.com/reader/feed/atom/</id>
      <link href="http://comonad.com/reader" rel="alternate" type="text/html">
      <link href="http://comonad.com/reader/feed/atom/" rel="self" type="application/atom+xml">
      <subtitle xml:lang="en">types, (co)monads, substructural logic</subtitle>
      <title xml:lang="en">The Comonad.Reader</title>
      <updated>2022-10-24T17:48:27Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://comonad.com/reader/?p=1056</id>
    <link href="http://comonad.com/reader/2015/on-the-unsafety-of-interleaved-io/" rel="alternate" type="text/html">
    <link href="http://comonad.com/reader/2015/on-the-unsafety-of-interleaved-io/#comments" rel="replies" type="text/html">
    <link href="http://comonad.com/reader/2015/on-the-unsafety-of-interleaved-io/feed/atom/" rel="replies" type="application/atom+xml">
    <title xml:lang="en">On the unsafety of interleaved I/O</title>
    <summary xml:lang="en">One area where I'm at odds with the prevailing winds in Haskell is lazy I/O. It's often said that lazy I/O is evil, scary and confusing, and it breaks things like referential transparency. Having a soft spot for it, and not liking most of the alternatives, I end up on the opposite side when the [...]</summary>
    <content type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p>One area where I'm at odds with the prevailing winds in Haskell is lazy I/O. It's often said that lazy I/O is evil, scary and confusing, and it breaks things like referential transparency. Having a soft spot for it, and not liking most of the alternatives, I end up on the opposite side when the topic comes up, if I choose to pick the fight. I usually don't feel like I come away from such arguments having done much good at giving lazy I/O its justice. So, I thought perhaps it would be good to spell out my whole position, so that I can give the best defense I can give, and people can continue to ignore it, without costing me as much time in the future. :)</p>
<p>So, what's the argument that lazy I/O, or <code>unsafeInterleaveIO</code> on which it's based, breaks referential transparency? It usually looks something like this:</p>
<pre class="haskell"> 
swap <span style="color: green;">(</span>x, y<span style="color: green;">)</span> = <span style="color: green;">(</span>y, x<span style="color: green;">)</span>
 
setup = <span style="color: #06c; font-weight: bold;">do</span>
  r1 &lt; - newIORef <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:True"><span style="font-weight: bold;">True</span></a>
  r2 &lt;- newIORef <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:True"><span style="font-weight: bold;">True</span></a>
  v1 &lt;- unsafeInterleaveIO $ <span style="color: #06c; font-weight: bold;">do</span> writeIORef r2 <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:False"><span style="font-weight: bold;">False</span></a> ; readIORef r1
  v2 &lt;- unsafeInterleaveIO $ <span style="color: #06c; font-weight: bold;">do</span> writeIORef r1 <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:False"><span style="font-weight: bold;">False</span></a> ; readIORef r2
  <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return"><span style="font-weight: bold;">return</span></a> <span style="color: green;">(</span>v1, v2<span style="color: green;">)</span>
 
main = <span style="color: #06c; font-weight: bold;">do</span>
  p1 &lt;- setup
  p2 &lt;- setup
  <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print"><span style="font-weight: bold;">print</span></a> p1
  <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print"><span style="font-weight: bold;">print</span></a> . swap $ p2
 </pre>
<p>I ran this, and got:</p>

<pre>(True, False)
(True, False)
</pre>
<p>So this is supposed to demonstrate that the pure values depend on evaluation order, and we have broken a desirable property of Haskell.</p>
<p>First a digression. Personally I distinguish the terms, &quot;referential transparency,&quot; and, &quot;purity,&quot; and use them to identify two desirable properties of Haskell. The first I use for the property that allows you to factor your program by introducing (or eliminating) named subexpressions. So, instead of:</p>
<pre class="haskell"> 
f e e
 </pre>
<p>we are free to write:</p>
<pre class="haskell"> 
<span style="color: #06c; font-weight: bold;">let</span> x = e <span style="color: #06c; font-weight: bold;">in</span> f x x
 </pre>
<p>or some variation. I have no argument for this meaning, other than it's what I thought it meant when I first heard the term used with respect to Haskell, it's a useful property, and it's the best name I can think of for the property. I also (of course) think it's better than some of the other explanations you'll find for what people mean when they say Haskell has referential transparency, since it doesn't mention functions or &quot;values&quot;. It's just about equivalence of expressions.</p>
<p>Anyhow, for me, the above example is in no danger of violating referential transparency. There is no factoring operation that will change the meaning of the program. I can even factor out <code>setup</code> (or inline it, since it's already named):</p>
<pre class="haskell"> 
main = <span style="color: #06c; font-weight: bold;">let</span> m = setup
        <span style="color: #06c; font-weight: bold;">in</span> <span style="color: #06c; font-weight: bold;">do</span> p1 &lt; - m
              p2 &lt;- m
              <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print"><span style="font-weight: bold;">print</span></a> p1
              <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print"><span style="font-weight: bold;">print</span></a> . swap $ p2
 </pre>
<p>This is the way in which <code>IO</code> preserves referential transparency, unlike side effects, in my view (note: the embedded language represented by <code>IO</code> does not have this property, since otherwise <code>p1</code> could be used in lieu of <code>p2</code>; this is why you shouldn't spend much time writing <code>IO</code> stuff, because it's a bad language embedded in a good one).</p>
<p>The other property, &quot;purity,&quot; I pull from Amr Sabry's paper, <a href="http://www.cs.indiana.edu/~sabry/papers/purelyFunctional.ps">What is a Purely Functional Language?</a> There he argues that a functional language should be considered &quot;pure&quot; if it is an extension of the lambda calculus in which there are no contexts which observe differences in evaluation order. Effectively, evaluation order must only determine whether or not you get an answer, not change the answer you get.</p>
<p>This is slightly different from my definition of referential transparency earlier, but it's also a useful property to have. Referential transparency tells us that we can freely refactor, and purity tells us that we can change the order things are evaluated, both without changing the meaning of our programs.</p>
<p>Now, it would seem that the original interleaving example violates purity.  Depending on the order that the values are evaluated, opponents of lazy I/O say, the values change. However, this argument doesn't impress me, because I think the proper way to think about <code>unsafeInterleaveIO</code> is as concurrency, and in that case, it isn't very strange that the results of running it would be non-deterministic. And in that case, there's not much you can do to prove that the evaluation order is affecting results, and that you aren't simply very unlucky and always observing results that happen to correspond to evaluation order.</p>
<p>In fact, there's something I didn't tell you. I didn't use the <code>unsafeInterleaveIO</code> from base. I wrote my own. It looks like this:</p>

<pre class="haskell"> 
unsafeInterleaveIO :: <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO"><span style="background-color: #efefbf; font-weight: bold;">IO</span></a> a -&gt; <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO"><span style="background-color: #efefbf; font-weight: bold;">IO</span></a> a
unsafeInterleaveIO action = <span style="color: #06c; font-weight: bold;">do</span>
  iv &lt; - new
  forkIO $
    randomRIO <span style="color: green;">(</span><span style="color: red;">1</span>,<span style="color: red;">5</span><span style="color: green;">)</span> &gt;&gt;= threadDelay . <span style="color: green;">(</span>*<span style="color: red;">1000</span><span style="color: green;">)</span> &gt;&gt;
    action &gt;&gt;= write iv
  <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return"><span style="font-weight: bold;">return</span></a> . <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:read"><span style="font-weight: bold;">read</span></a> $ iv
 </pre>
<p><code>iv</code> is an <code>IVar</code> (I used <a href="https://hackage.haskell.org/package/ivar-simple">ivar-simple</a>). The pertinent operations on them are:</p>
<pre class="haskell"> 
new :: <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO"><span style="background-color: #efefbf; font-weight: bold;">IO</span></a> <span style="color: green;">(</span>IVar a<span style="color: green;">)</span>
write :: IVar a -&gt; a -&gt; <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO"><span style="background-color: #efefbf; font-weight: bold;">IO</span></a> <span style="color: green;">(</span><span style="color: green;">)</span>
<a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:read"><span style="font-weight: bold;">read</span></a> :: IVar a -&gt; a
 </pre>
<p><code>new</code> creates an empty <code>IVar</code>, and we can <code>write</code> to one only once; trying to write a second time will throw an exception. But this is no problem for me, because I obviously only attempt to write once. <code>read</code> will block until its argument is actually is set, and since that can only happen once, it is considered safe for <code>read</code> to not require <code>IO</code>. [1]</p>
<p>Using this and <code>forkIO</code>, one can easily write something like <code>unsafeInterleaveIO</code>, which accepts an <code>IO a</code> argument and yields an <code>IO a</code> whose result is guaranteed to be the result of running the argument at some time in the future. The only difference is that the real <code>unsafeInterleaveIO</code> schedules things just in time, whereas mine schedules them in a relatively random order (I'll admit I had to try a few times before I got the 'expected' lazy IO answer).</p>
<p>But, we could even take this to be the specification of interleaving. It runs <code>IO</code> actions concurrently, and you will be fine as long as you aren't attempting to depend on the exact scheduling order (or whether things get scheduled at all in some cases).</p>
<p>In fact, thinking of lazy I/O as concurrency turns most spooky examples into threading problems that I would expect most people to consider rather basic. For instance:</p>
<ul>
<li>Don't pass a handle to another thread and close it in the original.</li>
<li>Don't fork more file-reading threads than you have file descriptors.</li>
<li>Don't fork threads to handle files if you're concerned about the files being closed deterministically.</li>
<li>Don't read from the same handle in multiple threads (unless you don't care about each thread seeing a random subsequence of the stream).</li>
</ul>
<p>And of course, the original example in this article is just non-determinism introduced by concurrency, but not of a sort that requires fundamentally different explanation than fork. The main pitfall, in my biased opinion, is that the scheduling for interleaving is explained in a way that encourages people to try to guess exactly what it will do. But the presumption of purity (and the reordering GHC actually does based on it) actually means that you cannot assume that much more about the scheduling than you can about my scheduler, at least in general.</p>
<p>This isn't to suggest that lazy I/O is appropriate for every situation. Sometimes the above advice means that it is not appropriate to use concurrency. However, in my opinion, people are over eager to ban lazy I/O even for simple uses where it is the nicest solution, and justify it based on the 'evil' and 'confusing' ascriptions. But, personally, I don't think this is justified, unless one does the same for pretty much all concurrency.</p>
<p>I suppose the only (leading) question left to ask is which should be declared unsafe, fork or ivars, since together they allow you to construct a(n even less deterministic) <code>unsafeInterleaveIO</code>?</p>
<p>[1] Note that there are other implementations of <code>IVar</code>. I'd expect the most popular to be in <a href="https://hackage.haskell.org/package/monad-par">monad-par</a> by Simon Marlow. That allows one to construct an operation like <code>read</code>, but it is actually <em>less</em> deterministic in my construction, because it seems that it will not block unless perhaps you write and read within a single 'transaction,' so to speak.</p>
<p>In fact, this actually breaks referential transparency in conjunction with <code>forkIO</code>:</p>
<pre class="haskell"> 
deref = runPar . get
 
randomDelay = randomRIO <span style="color: green;">(</span><span style="color: red;">1</span>,<span style="color: red;">10</span><span style="color: green;">)</span> &gt;&gt;= threadDelay . <span style="color: green;">(</span><span style="color: red;">1000</span>*<span style="color: green;">)</span>
 
myHandle m = m `<a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:catch"><span style="font-weight: bold;">catch</span></a>` \<span style="color: green;">(</span>_ :: SomeExpression<span style="color: green;">)</span> -&gt; <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn"><span style="font-weight: bold;">putStrLn</span></a> <span style="color: #3c7331;">&quot;Bombed&quot;</span>
 
mySpawn :: <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO"><span style="background-color: #efefbf; font-weight: bold;">IO</span></a> a -&gt; <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO"><span style="background-color: #efefbf; font-weight: bold;">IO</span></a> <span style="color: green;">(</span>IVar a<span style="color: green;">)</span>
mySpawn action = <span style="color: #06c; font-weight: bold;">do</span>
  iv &lt; - runParIO new
  forkIO $ randomDelay &gt;&gt; action &gt;&gt;= runParIO . put_ iv
  <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return"><span style="font-weight: bold;">return</span></a> iv
 
main = <span style="color: #06c; font-weight: bold;">do</span>
  iv &lt; - mySpawn <span style="color: green;">(</span><a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return"><span style="font-weight: bold;">return</span></a> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:True"><span style="font-weight: bold;">True</span></a><span style="color: green;">)</span>
  myHandle . <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print"><span style="font-weight: bold;">print</span></a> $ deref iv
  randomDelay
  myHandle . <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print"><span style="font-weight: bold;">print</span></a> $ deref iv
 </pre>
<p>Sometimes this will print &quot;Bombed&quot; twice, and sometimes it will print &quot;Bombed&quot; followed by &quot;True&quot;. The latter will never happen if we factor out the <code>deref iv</code> however. The blocking behavior is essential to <code>deref</code> maintaining referential transparency, and it seems like monad-par only blocks within a single <code>runPar</code>, not across multiples. Using ivar-simple in this example always results in &quot;True&quot; being printed twice.</p>
<p>It is also actually possible for <code>unsafeInterleaveIO</code> to break referential transparency if it is implemented incorrectly (or if the optimizer mucks with the internals in some bad way). But I haven't seen an example that couldn't be considered a bug in the implementation rather than some fundamental misbehavior. And my reference implementation here (with a suboptimal scheduler) suggests that there is no break that isn't just a bug.</p></div>
    </content>
    <updated>2022-10-24T17:47:25Z</updated>
    <published>2015-07-22T15:29:59Z</published>
    <category scheme="http://comonad.com/reader" term="Haskell"/>
    <author>
      <name>Dan Doel</name>
    </author>
    <source>
      <id>http://comonad.com/reader/feed/atom/</id>
      <link href="http://comonad.com/reader" rel="alternate" type="text/html">
      <link href="http://comonad.com/reader/feed/atom/" rel="self" type="application/atom+xml">
      <subtitle xml:lang="en">types, (co)monads, substructural logic</subtitle>
      <title xml:lang="en">The Comonad.Reader</title>
      <updated>2022-10-24T17:48:27Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://comonad.com/reader/?p=1037</id>
    <link href="http://comonad.com/reader/2015/categories-of-structures-in-haskell/" rel="alternate" type="text/html">
    <link href="http://comonad.com/reader/2015/categories-of-structures-in-haskell/#comments" rel="replies" type="text/html">
    <link href="http://comonad.com/reader/2015/categories-of-structures-in-haskell/feed/atom/" rel="replies" type="application/atom+xml">
    <title xml:lang="en">Categories of Structures in Haskell</title>
    <summary xml:lang="en">In the last couple posts I've used some 'free' constructions, and not remarked too much on how they arise. In this post, I'd like to explore them more. This is going to be something of a departure from the previous posts, though, since I'm not going to worry about thinking precisely about bottom/domains. This is [...]</summary>
    <content type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p>In the last couple posts I've used some 'free' constructions, and not remarked too much on how they arise. In this post, I'd like to explore them more. This is going to be something of a departure from the previous posts, though, since I'm not going to worry about thinking precisely about bottom/domains. This is more an exercise in applying some category theory to Haskell, &quot;fast and loose&quot;.</p>
<p>(Advance note: for some continuous code to look at see <a href="http://code.haskell.org/~dolio/haskell-share/categories-of-structures/COS.hs">this file</a>.)</p>
<p>First, it'll help to talk about how some categories can work in Haskell. For any kind <code>k</code> made of <code>*</code> and <code>(-&gt;)</code>, [0] we can define a category of type constructors. Objects of the category will be first-class [1] types of that kind, and arrows will be defined by the following type family:</p>
<pre class="haskell"> 
<span style="color: #06c; font-weight: bold;">newtype</span> Transformer f g = Transform <span style="color: green;">{</span> <span style="color: green;">(</span>$$<span style="color: green;">)</span> :: <span style="color: #06c; font-weight: bold;">forall</span> i. f i ~&gt; g i <span style="color: green;">}</span>
 
<span style="color: #06c; font-weight: bold;">type</span> family <span style="color: green;">(</span>~&gt;<span style="color: green;">)</span> :: k -&gt; k -&gt; * <span style="color: #06c; font-weight: bold;">where</span>
  <span style="color: green;">(</span>~&gt;<span style="color: green;">)</span> = <span style="color: green;">(</span>-&gt;<span style="color: green;">)</span>
  <span style="color: green;">(</span>~&gt;<span style="color: green;">)</span> = Transformer
 
<span style="color: #06c; font-weight: bold;">type</span> a &lt; -&gt; b = <span style="color: green;">(</span>a -&gt; b, b -&gt; a<span style="color: green;">)</span>
<span style="color: #06c; font-weight: bold;">type</span> a &lt; ~&gt; b = <span style="color: green;">(</span>a ~&gt; b, b ~&gt; a<span style="color: green;">)</span>
 </pre>
<p>So, for a base case, * has monomorphic functions as arrows, and categories for higher kinds have polymorphic functions that saturate the constructor:</p>
<pre class="haskell"> 
  <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int"><span style="background-color: #efefbf; font-weight: bold;">Int</span></a> ~&gt; <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char"><span style="background-color: #efefbf; font-weight: bold;">Char</span></a> = <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int"><span style="background-color: #efefbf; font-weight: bold;">Int</span></a> -&gt; <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char"><span style="background-color: #efefbf; font-weight: bold;">Char</span></a>
  <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe"><span style="background-color: #efefbf; font-weight: bold;">Maybe</span></a> ~&gt; <span style="color: green;">[</span><span style="color: green;">]</span> = <span style="color: #06c; font-weight: bold;">forall</span> a. <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe"><span style="background-color: #efefbf; font-weight: bold;">Maybe</span></a> a -&gt; <span style="color: green;">[</span>a<span style="color: green;">]</span>
  <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Either"><span style="background-color: #efefbf; font-weight: bold;">Either</span></a> ~&gt; <span style="color: green;">(</span>,<span style="color: green;">)</span> = <span style="color: #06c; font-weight: bold;">forall</span> a b. <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Either"><span style="background-color: #efefbf; font-weight: bold;">Either</span></a> a b -&gt; <span style="color: green;">(</span>a, b<span style="color: green;">)</span>
  StateT ~&gt; ReaderT = <span style="color: #06c; font-weight: bold;">forall</span> s m a. StateT s m a -&gt; ReaderT s m a
 </pre>
<p>We can of course define identity and composition for these, and it will be handy to do so:</p>
<pre class="haskell"> 
<span style="color: #06c; font-weight: bold;">class</span> Morph <span style="color: green;">(</span>p :: k -&gt; k -&gt; *<span style="color: green;">)</span> <span style="color: #06c; font-weight: bold;">where</span>
  <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:id"><span style="font-weight: bold;">id</span></a> :: p a a
  <span style="color: green;">(</span>.<span style="color: green;">)</span> :: p b c -&gt; p a b -&gt; p a c
 
<span style="color: #06c; font-weight: bold;">instance</span> Morph <span style="color: green;">(</span>-&gt;<span style="color: green;">)</span> <span style="color: #06c; font-weight: bold;">where</span>
  <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:id"><span style="font-weight: bold;">id</span></a> x = x
  <span style="color: green;">(</span>g . f<span style="color: green;">)</span> x = g <span style="color: green;">(</span>f x<span style="color: green;">)</span>
 
<span style="color: #06c; font-weight: bold;">instance</span> Morph <span style="color: green;">(</span><span style="color: green;">(</span>~&gt;<span style="color: green;">)</span> :: k -&gt; k -&gt; *<span style="color: green;">)</span>
      =&gt; Morph <span style="color: green;">(</span>Transformer :: <span style="color: green;">(</span>i -&gt; k<span style="color: green;">)</span> -&gt; <span style="color: green;">(</span>i -&gt; k<span style="color: green;">)</span> -&gt; *<span style="color: green;">)</span> <span style="color: #06c; font-weight: bold;">where</span>
  <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:id"><span style="font-weight: bold;">id</span></a> = Transform <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:id"><span style="font-weight: bold;">id</span></a>
  Transform f . Transform g = Transform $ f . g
 </pre>
<p>These categories can be looked upon as the most basic substrates in Haskell. For instance, every type of kind <code>* -&gt; *</code> is an object of the relevant category, even if it's a GADT or has other structure that prevents it from being nicely functorial.</p>
<p>The category for * is of course just the normal category of types and functions we usually call Hask, and it is fairly analogous to the category of sets. One common activity in category theory is to study categories of sets equipped with extra structure, and it turns out we can do this in Haskell, as well. And it even makes some sense to study categories of structures over any of these type categories.</p>
<p>When we equip our types with structure, we often use type classes, so that's how I'll do things here. Classes have a special status socially in that we expect people to only define instances that adhere to certain equational rules. This will take the place of equations that we are not able to state in the Haskell type system, because it doesn't have dependent types. So using classes will allow us to define more structures that we normally would, if only by convention.</p>
<p>So, if we have a kind <code>k</code>, then a corresponding structure will be <code>σ :: k -&gt; Constraint</code>. We can then define the category <code>(k,σ)</code> as having objects <code>t :: k</code> such that there is an instance <code>σ t</code>. Arrows are then taken to be <code>f :: t ~&gt; u</code> such that <code>f</code> &quot;respects&quot; the operations of <code>σ</code>.</p>
<p>As a simple example, we have:</p>
<pre class="haskell"> 
  k = *
  σ = Monoid :: * -&gt; Constraint
 
  Sum <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer"><span style="background-color: #efefbf; font-weight: bold;">Integer</span></a>, Product <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer"><span style="background-color: #efefbf; font-weight: bold;">Integer</span></a>, <span style="color: green;">[</span><a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer"><span style="background-color: #efefbf; font-weight: bold;">Integer</span></a><span style="color: green;">]</span> :: <span style="color: green;">(</span>*, Monoid<span style="color: green;">)</span>
 
  f :: <span style="color: green;">(</span>Monoid m, Monoid n<span style="color: green;">)</span> =&gt; m -&gt; n
    <span style="color: #06c; font-weight: bold;">if</span> f mempty = mempty
       f <span style="color: green;">(</span>m &lt;&gt; n<span style="color: green;">)</span> = f m &lt;&gt; f n
 </pre>
<p>This is just the category of monoids in Haskell.</p>
<p>As a side note, we will sometimes be wanting to quantify over these &quot;categories of structures&quot;. There isn't really a good way to package together a kind and a structure such that they work as a unit, but we can just add a constraint to the quantification. So, to quantify over all <code>Monoid</code>s, we'll use '<code>forall m. Monoid m =&gt; ...</code>'.</p>
<p>Now, once we have these categories of structures, there is an obvious forgetful functor back into the unadorned category. We can then look for free and cofree functors as adjoints to this. More symbolically:</p>
<pre class="haskell"> 
  Forget σ :: <span style="color: green;">(</span>k,σ<span style="color: green;">)</span> -&gt; k
  Free   σ :: k -&gt; <span style="color: green;">(</span>k,σ<span style="color: green;">)</span>
  Cofree σ :: k -&gt; <span style="color: green;">(</span>k,σ<span style="color: green;">)</span>
 
  Free σ ⊣ Forget σ ⊣ Cofree σ
 </pre>
<p>However, what would be nicer (for some purposes) than having to look for these is being able to construct them all systematically, without having to think much about the structure <code>σ</code>.</p>
<p>Category theory gives a hint at this, too, in the form of Kan extensions. In category terms they look like:</p>
<pre>  p : C -&gt; C'
  f : C -&gt; D
  Ran p f : C' -&gt; D
  Lan p f : C' -&gt; D

  Ran p f c' = end (c : C). Hom_C'(c', p c) ⇒ f c
  Lan p f c' = coend (c : c). Hom_C'(p c, c') ⊗ f c
</pre>
<p>where <code>⇒</code> is a &quot;power&quot; and <code>⊗</code> is a copower, which are like being able to take exponentials and products by sets (or whatever the objects of the hom category are), instead of other objects within the category. Ends and coends are like universal and existential quantifiers (as are limits and colimits, but ends and coends involve mixed-variance).</p>
<p>Some handy theorems relate Kan extensions and adjoint functors:</p>
<pre>  if L ⊣ R
  then L = Ran R Id and R = Lan L Id

  if Ran R Id exists and is absolute
  then Ran R Id ⊣ R

  if Lan L Id exists and is absolute
  then L ⊣ Lan L Id

  Kan P F is absolute iff forall G. (G . Kan P F) ~= Kan P (G . F)
</pre>
<p>It turns out we can write down Kan extensions fairly generally in Haskell. Our restricted case is:</p>
<pre class="haskell"> 
  p = Forget σ :: <span style="color: green;">(</span>k,σ<span style="color: green;">)</span> -&gt; k
  f = Id :: <span style="color: green;">(</span>k,σ<span style="color: green;">)</span> -&gt; <span style="color: green;">(</span>k,σ<span style="color: green;">)</span>
 
  Free   σ = <a href="http://comonad.com/haskell/category-extras/dist/doc/html/category-extras/Control-Functor-KanExtension.html#t:Ran"><span style="background-color: #efefbf; font-weight: bold;">Ran</span></a> <span style="color: green;">(</span>Forget σ<span style="color: green;">)</span> Id :: k -&gt; <span style="color: green;">(</span>k,σ<span style="color: green;">)</span>
  Cofree σ = <a href="http://comonad.com/haskell/category-extras/dist/doc/html/category-extras/Control-Functor-KanExtension.html#t:Lan"><span style="background-color: #efefbf; font-weight: bold;">Lan</span></a> <span style="color: green;">(</span>Forget σ<span style="color: green;">)</span> Id :: k -&gt; <span style="color: green;">(</span>k,σ<span style="color: green;">)</span>
 
  g :: <span style="color: green;">(</span>k,σ<span style="color: green;">)</span> -&gt; j
  g . Free   σ = <a href="http://comonad.com/haskell/category-extras/dist/doc/html/category-extras/Control-Functor-KanExtension.html#t:Ran"><span style="background-color: #efefbf; font-weight: bold;">Ran</span></a> <span style="color: green;">(</span>Forget σ<span style="color: green;">)</span> g
  g . Cofree σ = <a href="http://comonad.com/haskell/category-extras/dist/doc/html/category-extras/Control-Functor-KanExtension.html#t:Lan"><span style="background-color: #efefbf; font-weight: bold;">Lan</span></a> <span style="color: green;">(</span>Forget σ<span style="color: green;">)</span> g
 </pre>
<p>As long as the final category is like one of our type constructor categories, ends are universal quantifiers, powers are function types, coends are existential quantifiers and copowers are product spaces. This only breaks down for our purposes when <code>g</code> is contravariant, in which case they are flipped.  For higher kinds, these constructions occur point-wise. So, we can break things down into four general cases, each with cases for each arity:</p>
<pre class="haskell"> 
<span style="color: #06c; font-weight: bold;">newtype</span> Ran0 σ p <span style="color: green;">(</span>f :: k -&gt; *<span style="color: green;">)</span> a =
  Ran0 <span style="color: green;">{</span> ran0 :: <span style="color: #06c; font-weight: bold;">forall</span> r. σ r =&gt; <span style="color: green;">(</span>a ~&gt; p r<span style="color: green;">)</span> -&gt; f r <span style="color: green;">}</span>
 
<span style="color: #06c; font-weight: bold;">newtype</span> Ran1 σ p <span style="color: green;">(</span>f :: k -&gt; j -&gt; *<span style="color: green;">)</span> a b =
  Ran1 <span style="color: green;">{</span> ran1 :: <span style="color: #06c; font-weight: bold;">forall</span> r. σ r =&gt; <span style="color: green;">(</span>a ~&gt; p r<span style="color: green;">)</span> -&gt; f r b <span style="color: green;">}</span>
 
<span style="color: #5d478b; font-style: italic;">-- ...</span>
 
<span style="color: #06c; font-weight: bold;">data</span> RanOp0 σ p <span style="color: green;">(</span>f :: k -&gt; *<span style="color: green;">)</span> a =
  <span style="color: #06c; font-weight: bold;">forall</span> e. σ e =&gt; RanOp0 <span style="color: green;">(</span>a ~&gt; p e<span style="color: green;">)</span> <span style="color: green;">(</span>f e<span style="color: green;">)</span>
 
<span style="color: #5d478b; font-style: italic;">-- ...</span>
 
<span style="color: #06c; font-weight: bold;">data</span> Lan0 σ p <span style="color: green;">(</span>f :: k -&gt; *<span style="color: green;">)</span> a =
  <span style="color: #06c; font-weight: bold;">forall</span> e. σ e =&gt; Lan0 <span style="color: green;">(</span>p e ~&gt; a<span style="color: green;">)</span> <span style="color: green;">(</span>f e<span style="color: green;">)</span>
 
<span style="color: #06c; font-weight: bold;">data</span> Lan1 σ p <span style="color: green;">(</span>f :: k -&gt; j -&gt; *<span style="color: green;">)</span> a b =
  <span style="color: #06c; font-weight: bold;">forall</span> e. σ e =&gt; Lan1 <span style="color: green;">(</span>p e ~&gt; a<span style="color: green;">)</span> <span style="color: green;">(</span>f e b<span style="color: green;">)</span>
 
<span style="color: #5d478b; font-style: italic;">-- ...</span>
 
<span style="color: #06c; font-weight: bold;">data</span> LanOp0 σ p <span style="color: green;">(</span>f :: k -&gt; *<span style="color: green;">)</span> a =
  LanOp0 <span style="color: green;">{</span> lan0 :: <span style="color: #06c; font-weight: bold;">forall</span> r. σ r =&gt; <span style="color: green;">(</span>p r -&gt; a<span style="color: green;">)</span> -&gt; f r <span style="color: green;">}</span>
 
<span style="color: #5d478b; font-style: italic;">-- ...</span>
 </pre>
<p>The more specific proposed (co)free definitions are:</p>
<pre class="haskell"> 
<span style="color: #06c; font-weight: bold;">type</span> family Free   :: <span style="color: green;">(</span>k -&gt; Constraint<span style="color: green;">)</span> -&gt; k -&gt; k
<span style="color: #06c; font-weight: bold;">type</span> family Cofree :: <span style="color: green;">(</span>k -&gt; Constraint<span style="color: green;">)</span> -&gt; k -&gt; k
 
<span style="color: #06c; font-weight: bold;">newtype</span> Free0 σ a = Free0 <span style="color: green;">{</span> gratis0 :: <span style="color: #06c; font-weight: bold;">forall</span> r. σ r =&gt; <span style="color: green;">(</span>a ~&gt; r<span style="color: green;">)</span> -&gt; r <span style="color: green;">}</span>
<span style="color: #06c; font-weight: bold;">type</span> <span style="color: #06c; font-weight: bold;">instance</span> Free = Free0
 
<span style="color: #06c; font-weight: bold;">newtype</span> Free1 σ f a = Free1 <span style="color: green;">{</span> gratis1 :: <span style="color: #06c; font-weight: bold;">forall</span> g. σ g =&gt; <span style="color: green;">(</span>f ~&gt; g<span style="color: green;">)</span> -&gt; g a <span style="color: green;">}</span>
<span style="color: #06c; font-weight: bold;">type</span> <span style="color: #06c; font-weight: bold;">instance</span> Free = Free1
 
<span style="color: #5d478b; font-style: italic;">-- ...</span>
 
<span style="color: #06c; font-weight: bold;">data</span> Cofree0 σ a = <span style="color: #06c; font-weight: bold;">forall</span> e. σ e =&gt; Cofree0 <span style="color: green;">(</span>e ~&gt; a<span style="color: green;">)</span> e
<span style="color: #06c; font-weight: bold;">type</span> <span style="color: #06c; font-weight: bold;">instance</span> Cofree = Cofree0
 
<span style="color: #06c; font-weight: bold;">data</span> Cofree1 σ f a = <span style="color: #06c; font-weight: bold;">forall</span> g. σ g =&gt; Cofree1 <span style="color: green;">(</span>g ~&gt; f<span style="color: green;">)</span> <span style="color: green;">(</span>g a<span style="color: green;">)</span>
<span style="color: #06c; font-weight: bold;">type</span> <span style="color: #06c; font-weight: bold;">instance</span> Cofree = Cofree1
 
<span style="color: #5d478b; font-style: italic;">-- ...</span>
 </pre>
<p>We can define some handly classes and instances for working with these types, several of which generalize existing Haskell concepts:</p>
<pre class="haskell"> 
<span style="color: #06c; font-weight: bold;">class</span> Covariant <span style="color: green;">(</span>f :: i -&gt; j<span style="color: green;">)</span> <span style="color: #06c; font-weight: bold;">where</span>
  comap :: <span style="color: green;">(</span>a ~&gt; b<span style="color: green;">)</span> -&gt; <span style="color: green;">(</span>f a ~&gt; f b<span style="color: green;">)</span>
 
<span style="color: #06c; font-weight: bold;">class</span> Contravariant f <span style="color: #06c; font-weight: bold;">where</span>
  contramap :: <span style="color: green;">(</span>b ~&gt; a<span style="color: green;">)</span> -&gt; <span style="color: green;">(</span>f a ~&gt; f b<span style="color: green;">)</span>
 
<span style="color: #06c; font-weight: bold;">class</span> Covariant m =&gt; <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad"><span style="background-color: #efefbf; font-weight: bold;">Monad</span></a> <span style="color: green;">(</span>m :: i -&gt; i<span style="color: green;">)</span> <span style="color: #06c; font-weight: bold;">where</span>
  pure :: a ~&gt; m a
  join :: m <span style="color: green;">(</span>m a<span style="color: green;">)</span> ~&gt; m a
 
<span style="color: #06c; font-weight: bold;">class</span> Covariant w =&gt; <a href="http://comonad.com/haskell/category-extras/dist/doc/html/category-extras/Control-Comonad.html#t:Comonad"><span style="background-color: #efefbf; font-weight: bold;">Comonad</span></a> <span style="color: green;">(</span>w :: i -&gt; i<span style="color: green;">)</span> <span style="color: #06c; font-weight: bold;">where</span>
  <a href="http://comonad.com/haskell/category-extras/dist/doc/html/category-extras/Control-Comonad.html#v:extract"><span style="font-weight: bold;">extract</span></a> :: w a ~&gt; a
  split :: w a ~&gt; w <span style="color: green;">(</span>w a<span style="color: green;">)</span>
 
<span style="color: #06c; font-weight: bold;">class</span> Couniversal σ f | f -&gt; σ <span style="color: #06c; font-weight: bold;">where</span>
  couniversal :: σ r =&gt; <span style="color: green;">(</span>a ~&gt; r<span style="color: green;">)</span> -&gt; <span style="color: green;">(</span>f a ~&gt; r<span style="color: green;">)</span>
 
<span style="color: #06c; font-weight: bold;">class</span> Universal σ f | f -&gt; σ <span style="color: #06c; font-weight: bold;">where</span>
  universal :: σ e =&gt; <span style="color: green;">(</span>e ~&gt; a<span style="color: green;">)</span> -&gt; <span style="color: green;">(</span>e ~&gt; f a<span style="color: green;">)</span>
 
<span style="color: #06c; font-weight: bold;">instance</span> Covariant <span style="color: green;">(</span>Free0 σ<span style="color: green;">)</span> <span style="color: #06c; font-weight: bold;">where</span>
  comap f <span style="color: green;">(</span>Free0 e<span style="color: green;">)</span> = Free0 <span style="color: green;">(</span>e . <span style="color: green;">(</span>.f<span style="color: green;">)</span><span style="color: green;">)</span>
 
<span style="color: #06c; font-weight: bold;">instance</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad"><span style="background-color: #efefbf; font-weight: bold;">Monad</span></a> <span style="color: green;">(</span>Free0 σ<span style="color: green;">)</span> <span style="color: #06c; font-weight: bold;">where</span>
  pure x = Free0 $ \k -&gt; k x
  join <span style="color: green;">(</span>Free0 e<span style="color: green;">)</span> = Free0 $ \k -&gt; e $ \<span style="color: green;">(</span>Free0 e<span style="color: green;">)</span> -&gt; e k
 
<span style="color: #06c; font-weight: bold;">instance</span> Couniversal σ <span style="color: green;">(</span>Free0 σ<span style="color: green;">)</span> <span style="color: #06c; font-weight: bold;">where</span>
  couniversal h <span style="color: green;">(</span>Free0 e<span style="color: green;">)</span> = e h
 
<span style="color: #5d478b; font-style: italic;">-- ...</span>
 </pre>
<p>The only unfamiliar classes here should be <code>(Co)Universal</code>. They are for witnessing the adjunctions that make <code>Free σ</code> the initial <code>σ</code> and <code>Cofree σ</code> the final <code>σ</code> in the relevant way. Only one direction is given, since the opposite is very easy to construct with the (co)monad structure.</p>
<p><code>Free σ</code> is a monad and couniversal, <code>Cofree σ</code> is a comonad and universal.</p>
<p>We can now try to convince ourselves that <code>Free σ</code> and <code>Cofree σ</code> are absolute Here are some examples:</p>
<pre class="haskell"> 
free0Absolute0 :: <span style="color: #06c; font-weight: bold;">forall</span> g σ a. <span style="color: green;">(</span>Covariant g, σ <span style="color: green;">(</span>Free σ a<span style="color: green;">)</span><span style="color: green;">)</span>
               =&gt; g <span style="color: green;">(</span>Free0 σ a<span style="color: green;">)</span> &lt; -&gt; <a href="http://comonad.com/haskell/category-extras/dist/doc/html/category-extras/Control-Functor-KanExtension.html#t:Ran"><span style="background-color: #efefbf; font-weight: bold;">Ran</span></a> σ Forget g a
free0Absolute0 = <span style="color: green;">(</span>l, r<span style="color: green;">)</span>
 <span style="color: #06c; font-weight: bold;">where</span>
 l :: g <span style="color: green;">(</span>Free σ a<span style="color: green;">)</span> -&gt; <a href="http://comonad.com/haskell/category-extras/dist/doc/html/category-extras/Control-Functor-KanExtension.html#t:Ran"><span style="background-color: #efefbf; font-weight: bold;">Ran</span></a> σ Forget g a
 l g = Ran0 $ \k -&gt; comap <span style="color: green;">(</span>couniversal $ remember0 . k<span style="color: green;">)</span> g
 
 r :: <a href="http://comonad.com/haskell/category-extras/dist/doc/html/category-extras/Control-Functor-KanExtension.html#t:Ran"><span style="background-color: #efefbf; font-weight: bold;">Ran</span></a> σ Forget g a -&gt; g <span style="color: green;">(</span>Free σ a<span style="color: green;">)</span>
 r <span style="color: green;">(</span>Ran0 e<span style="color: green;">)</span> = e $ Forget0 . pure
 
free0Absolute1 :: <span style="color: #06c; font-weight: bold;">forall</span> <span style="color: green;">(</span>g :: * -&gt; * -&gt; *<span style="color: green;">)</span> σ a x. <span style="color: green;">(</span>Covariant g, σ <span style="color: green;">(</span>Free σ a<span style="color: green;">)</span><span style="color: green;">)</span>
               =&gt; g <span style="color: green;">(</span>Free0 σ a<span style="color: green;">)</span> x &lt; -&gt; <a href="http://comonad.com/haskell/category-extras/dist/doc/html/category-extras/Control-Functor-KanExtension.html#t:Ran"><span style="background-color: #efefbf; font-weight: bold;">Ran</span></a> σ Forget g a x
free0Absolute1 = <span style="color: green;">(</span>l, r<span style="color: green;">)</span>
 <span style="color: #06c; font-weight: bold;">where</span>
 l :: g <span style="color: green;">(</span>Free σ a<span style="color: green;">)</span> x -&gt; <a href="http://comonad.com/haskell/category-extras/dist/doc/html/category-extras/Control-Functor-KanExtension.html#t:Ran"><span style="background-color: #efefbf; font-weight: bold;">Ran</span></a> σ Forget g a x
 l g = Ran1 $ \k -&gt; comap <span style="color: green;">(</span>couniversal $ remember0 . k<span style="color: green;">)</span> $$ g
 
 r :: <a href="http://comonad.com/haskell/category-extras/dist/doc/html/category-extras/Control-Functor-KanExtension.html#t:Ran"><span style="background-color: #efefbf; font-weight: bold;">Ran</span></a> σ Forget g a x -&gt; g <span style="color: green;">(</span>Free σ a<span style="color: green;">)</span> x
 r <span style="color: green;">(</span>Ran1 e<span style="color: green;">)</span> = e $ Forget0 . pure
 
free0Absolute0Op :: <span style="color: #06c; font-weight: bold;">forall</span> g σ a. <span style="color: green;">(</span>Contravariant g, σ <span style="color: green;">(</span>Free σ a<span style="color: green;">)</span><span style="color: green;">)</span>
                 =&gt; g <span style="color: green;">(</span>Free0 σ a<span style="color: green;">)</span> &lt; -&gt; RanOp σ Forget g a
free0Absolute0Op = <span style="color: green;">(</span>l, r<span style="color: green;">)</span>
 <span style="color: #06c; font-weight: bold;">where</span>
 l :: g <span style="color: green;">(</span>Free σ a<span style="color: green;">)</span> -&gt; RanOp σ Forget g a
 l = RanOp0 $ Forget0 . pure
 
 r :: RanOp σ Forget g a -&gt; g <span style="color: green;">(</span>Free σ a<span style="color: green;">)</span>
 r <span style="color: green;">(</span>RanOp0 h g<span style="color: green;">)</span> = contramap <span style="color: green;">(</span>couniversal $ remember0 . h<span style="color: green;">)</span> g
 
<span style="color: #5d478b; font-style: italic;">-- ...</span>
 </pre>
<p>As can be seen, the definitions share a lot of structure. I'm quite confident that with the right building blocks these could be defined once for each of the four types of Kan extensions, with types like:</p>
<pre class="haskell"> 
freeAbsolute
  :: <span style="color: #06c; font-weight: bold;">forall</span> g σ a. <span style="color: green;">(</span>Covariant g, σ <span style="color: green;">(</span>Free σ a<span style="color: green;">)</span><span style="color: green;">)</span>
  =&gt; g <span style="color: green;">(</span>Free σ a<span style="color: green;">)</span> &lt; ~&gt; <a href="http://comonad.com/haskell/category-extras/dist/doc/html/category-extras/Control-Functor-KanExtension.html#t:Ran"><span style="background-color: #efefbf; font-weight: bold;">Ran</span></a> σ Forget g a
 
cofreeAbsolute
  :: <span style="color: #06c; font-weight: bold;">forall</span> g σ a. <span style="color: green;">(</span>Covariant g, σ <span style="color: green;">(</span>Cofree σ a<span style="color: green;">)</span><span style="color: green;">)</span>
  =&gt; g <span style="color: green;">(</span>Cofree σ a<span style="color: green;">)</span> &lt; ~&gt; <a href="http://comonad.com/haskell/category-extras/dist/doc/html/category-extras/Control-Functor-KanExtension.html#t:Lan"><span style="background-color: #efefbf; font-weight: bold;">Lan</span></a> σ Forget g a
 
freeAbsoluteOp
  :: <span style="color: #06c; font-weight: bold;">forall</span> g σ a. <span style="color: green;">(</span>Contravariant g, σ <span style="color: green;">(</span>Free σ a<span style="color: green;">)</span><span style="color: green;">)</span>
  =&gt; g <span style="color: green;">(</span>Free σ a<span style="color: green;">)</span> &lt; ~&gt; RanOp σ Forget g a
 
cofreeAbsoluteOp
  :: <span style="color: #06c; font-weight: bold;">forall</span> g σ a. <span style="color: green;">(</span>Contravariant g, σ <span style="color: green;">(</span>Cofree σ a<span style="color: green;">)</span><span style="color: green;">)</span>
  =&gt; g <span style="color: green;">(</span>Cofree σ a<span style="color: green;">)</span> &lt; ~&gt; LanOp σ Forget g a
 </pre>
<p>However, it seems quite difficult to structure things in a way such that GHC will accept the definitions. I've successfully written <code>freeAbsolute</code> using some axioms, but turning those axioms into class definitions and the like seems impossible.</p>
<p>Anyhow, the punchline is that we can prove absoluteness using only the premise that there is a valid <code>σ</code> instance for <code>Free σ</code> and <code>Cofree σ</code>. This tends to be quite easy; we just borrow the structure of the type we are quantifying over. This means that in all these cases, we are justified in saying that <code>Free σ ⊣ Forget σ ⊣ Cofree σ</code>, and we have a very generic presentations of (co)free structures in Haskell. So let's look at some.</p>
<p>We've already seen <code>Free Monoid</code>, and last time we talked about <code>Free Applicative</code>, and its relation to traversals. But, <code>Applicative</code> is to traversal as <code>Functor</code> is to lens, so it may be interesting to consider constructions on that. Both <code>Free Functor</code> and <code>Cofree Functor</code> make <code>Functor</code>s:</p>
<pre class="haskell"> 
<span style="color: #06c; font-weight: bold;">instance</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Functor"><span style="background-color: #efefbf; font-weight: bold;">Functor</span></a> <span style="color: green;">(</span>Free1 <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Functor"><span style="background-color: #efefbf; font-weight: bold;">Functor</span></a> f<span style="color: green;">)</span> <span style="color: #06c; font-weight: bold;">where</span>
  <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap"><span style="font-weight: bold;">fmap</span></a> f <span style="color: green;">(</span>Free1 e<span style="color: green;">)</span> = Free1 $ <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap"><span style="font-weight: bold;">fmap</span></a> f . e
 
<span style="color: #06c; font-weight: bold;">instance</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Functor"><span style="background-color: #efefbf; font-weight: bold;">Functor</span></a> <span style="color: green;">(</span>Cofree1 <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Functor"><span style="background-color: #efefbf; font-weight: bold;">Functor</span></a> f<span style="color: green;">)</span> <span style="color: #06c; font-weight: bold;">where</span>
  <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap"><span style="font-weight: bold;">fmap</span></a> f <span style="color: green;">(</span>Cofree1 h e<span style="color: green;">)</span> = Cofree1 h <span style="color: green;">(</span><a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap"><span style="font-weight: bold;">fmap</span></a> f e<span style="color: green;">)</span>
 </pre>
<p>And of course, they are (co)monads, covariant functors and (co)universal among <code>Functor</code>s. But, it happens that I know some other types with these properties:</p>
<pre class="haskell"> 
<span style="color: #06c; font-weight: bold;">data</span> CoYo f a = <span style="color: #06c; font-weight: bold;">forall</span> e. CoYo <span style="color: green;">(</span>e -&gt; a<span style="color: green;">)</span> <span style="color: green;">(</span>f e<span style="color: green;">)</span>
 
<span style="color: #06c; font-weight: bold;">instance</span> Covariant CoYo <span style="color: #06c; font-weight: bold;">where</span>
  comap f = Transform $ \<span style="color: green;">(</span>CoYo h e<span style="color: green;">)</span> -&gt; CoYo h <span style="color: green;">(</span>f $$ e<span style="color: green;">)</span>
 
<span style="color: #06c; font-weight: bold;">instance</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad"><span style="background-color: #efefbf; font-weight: bold;">Monad</span></a> CoYo <span style="color: #06c; font-weight: bold;">where</span>
  pure = Transform $ CoYo <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:id"><span style="font-weight: bold;">id</span></a>
  join = Transform $ \<span style="color: green;">(</span>CoYo h <span style="color: green;">(</span>CoYo h' e<span style="color: green;">)</span><span style="color: green;">)</span> -&gt; CoYo <span style="color: green;">(</span>h . h'<span style="color: green;">)</span> e
 
<span style="color: #06c; font-weight: bold;">instance</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Functor"><span style="background-color: #efefbf; font-weight: bold;">Functor</span></a> <span style="color: green;">(</span>CoYo f<span style="color: green;">)</span> <span style="color: #06c; font-weight: bold;">where</span>
  <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap"><span style="font-weight: bold;">fmap</span></a> f <span style="color: green;">(</span>CoYo h e<span style="color: green;">)</span> = CoYo <span style="color: green;">(</span>f . h<span style="color: green;">)</span> e
 
<span style="color: #06c; font-weight: bold;">instance</span> Couniversal <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Functor"><span style="background-color: #efefbf; font-weight: bold;">Functor</span></a> CoYo <span style="color: #06c; font-weight: bold;">where</span>
  couniversal tr = Transform $ \<span style="color: green;">(</span>CoYo h e<span style="color: green;">)</span> -&gt; <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap"><span style="font-weight: bold;">fmap</span></a> h <span style="color: green;">(</span>tr $$ e<span style="color: green;">)</span>
 
<span style="color: #06c; font-weight: bold;">newtype</span> Yo f a = Yo <span style="color: green;">{</span> oy :: <span style="color: #06c; font-weight: bold;">forall</span> r. <span style="color: green;">(</span>a -&gt; r<span style="color: green;">)</span> -&gt; f r <span style="color: green;">}</span>
 
<span style="color: #06c; font-weight: bold;">instance</span> Covariant Yo <span style="color: #06c; font-weight: bold;">where</span>
  comap f = Transform $ \<span style="color: green;">(</span>Yo e<span style="color: green;">)</span> -&gt; Yo $ <span style="color: green;">(</span>f $$<span style="color: green;">)</span> . e
 
<span style="color: #06c; font-weight: bold;">instance</span> <a href="http://comonad.com/haskell/category-extras/dist/doc/html/category-extras/Control-Comonad.html#t:Comonad"><span style="background-color: #efefbf; font-weight: bold;">Comonad</span></a> Yo <span style="color: #06c; font-weight: bold;">where</span>
  <a href="http://comonad.com/haskell/category-extras/dist/doc/html/category-extras/Control-Comonad.html#v:extract"><span style="font-weight: bold;">extract</span></a> = Transform $ \<span style="color: green;">(</span>Yo e<span style="color: green;">)</span> -&gt; e <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:id"><span style="font-weight: bold;">id</span></a>
  split = Transform $ \<span style="color: green;">(</span>Yo e<span style="color: green;">)</span> -&gt; Yo $ \k -&gt; Yo $ \k' -&gt; e $ k' . k
 
<span style="color: #06c; font-weight: bold;">instance</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Functor"><span style="background-color: #efefbf; font-weight: bold;">Functor</span></a> <span style="color: green;">(</span>Yo f<span style="color: green;">)</span> <span style="color: #06c; font-weight: bold;">where</span>
  <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap"><span style="font-weight: bold;">fmap</span></a> f <span style="color: green;">(</span>Yo e<span style="color: green;">)</span> = Yo $ \k -&gt; e <span style="color: green;">(</span>k . f<span style="color: green;">)</span>
 
<span style="color: #06c; font-weight: bold;">instance</span> Universal <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Functor"><span style="background-color: #efefbf; font-weight: bold;">Functor</span></a> Yo <span style="color: #06c; font-weight: bold;">where</span>
  universal tr = Transform $ \e -&gt; Yo $ \k -&gt; tr $$ <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap"><span style="font-weight: bold;">fmap</span></a> k e
 </pre>
<p>These are the types involved in the (co-)Yoneda lemma. <code>CoYo</code> is a monad, couniversal among functors, and <code>CoYo f</code> is a <code>Functor</code>. <code>Yo</code> is a comonad, universal among functors, and is always a <code>Functor</code>. So, are these equivalent types?</p>
<pre class="haskell"> 
coyoIso :: CoYo &lt; ~&gt; Free <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Functor"><span style="background-color: #efefbf; font-weight: bold;">Functor</span></a>
coyoIso = <span style="color: green;">(</span>Transform $ couniversal pure, Transform $ couniversal pure<span style="color: green;">)</span>
 
yoIso :: Yo &lt; ~&gt; Cofree <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Functor"><span style="background-color: #efefbf; font-weight: bold;">Functor</span></a>
yoIso = <span style="color: green;">(</span>Transform $ universal <a href="http://comonad.com/haskell/category-extras/dist/doc/html/category-extras/Control-Comonad.html#v:extract"><span style="font-weight: bold;">extract</span></a>, Transform $ universal <a href="http://comonad.com/haskell/category-extras/dist/doc/html/category-extras/Control-Comonad.html#v:extract"><span style="font-weight: bold;">extract</span></a><span style="color: green;">)</span>
 </pre>
<p>Indeed they are. And similar identities hold for the contravariant versions of these constructions.</p>
<p>I don't have much of a use for this last example. I suppose to be perfectly precise, I should point out that these uses of <code>(Co)Yo</code> are not actually part of the (co-)Yoneda lemma. They are two different constructions.  The (co-)Yoneda lemma can be given in terms of Kan extensions as:</p>
<pre class="haskell"> 
yoneda :: <a href="http://comonad.com/haskell/category-extras/dist/doc/html/category-extras/Control-Functor-KanExtension.html#t:Ran"><span style="background-color: #efefbf; font-weight: bold;">Ran</span></a> Id f &lt; ~&gt; f
 
coyoneda :: <a href="http://comonad.com/haskell/category-extras/dist/doc/html/category-extras/Control-Functor-KanExtension.html#t:Lan"><span style="background-color: #efefbf; font-weight: bold;">Lan</span></a> Id f &lt; ~&gt; f
 </pre>
<p>But, the use of <code>(Co)Yo</code> to make <code>Functor</code>s out of things that aren't necessarily is properly thought of in other terms. In short, we have some kind of category of Haskell types with only identity arrows---it is discrete. Then any type constructor, even non-functorial ones, is certainly a functor from said category (call it Haskrete) into the normal one (Hask). And there is an inclusion functor from Haskrete into Hask:</p>
<pre>             F
 Haskrete -----&gt; Hask
      |        /|
      |       /
      |      /
Incl  |     /
      |    /  Ran/Lan Incl F
      |   /
      |  /
      v /
    Hask
</pre>
<p>So, <code>(Co)Free Functor</code> can also be thought of in terms of these Kan extensions involving the discrete category.</p>
<p>To see more fleshed out, loadable versions of the code in this post, see <a href="http://code.haskell.org/~dolio/haskell-share/categories-of-structures/COS.hs">this file</a>. I may also try a similar Agda development at a later date, as it may admit the more general absoluteness constructions easier.</p>
<p>[0]: The reason for restricting ourselves to kinds involving only <code>*</code> and <code>(-&gt;)</code> is that they work much more simply than data kinds. Haskell values can't depend on type-level entities without using type classes. For *, this is natural, but for something like <code>Bool -&gt; *</code>, it is more natural for transformations to be able to inspect the booleans, and so should be something more like <code>forall b. InspectBool b =&gt; f b -&gt; g b</code>.</p>
<p>[1]: First-class types are what you get by removing type families and synonyms from consideration. The reason for doing so is that these can't be used properly as parameters and the like, except in cases where they reduce to some other type that is first-class. For example, if we define:</p>
<pre class="haskell"> 
<span style="color: #06c; font-weight: bold;">type</span> I a = a
 </pre>
<p>even though GHC will report <code>I :: * -&gt; *</code>, it is not legal to write <code>Transform I I</code>.</p></div>
    </content>
    <updated>2022-10-24T17:47:25Z</updated>
    <published>2015-05-26T01:32:49Z</published>
    <category scheme="http://comonad.com/reader" term="Category Theory"/>
    <category scheme="http://comonad.com/reader" term="Comonads"/>
    <category scheme="http://comonad.com/reader" term="Data Structures"/>
    <category scheme="http://comonad.com/reader" term="Haskell"/>
    <category scheme="http://comonad.com/reader" term="Kan Extensions"/>
    <category scheme="http://comonad.com/reader" term="Mathematics"/>
    <category scheme="http://comonad.com/reader" term="Monads"/>
    <category scheme="http://comonad.com/reader" term="Type Hackery"/>
    <category scheme="http://comonad.com/reader" term="Uncategorized"/>
    <author>
      <name>Dan Doel</name>
    </author>
    <source>
      <id>http://comonad.com/reader/feed/atom/</id>
      <link href="http://comonad.com/reader" rel="alternate" type="text/html">
      <link href="http://comonad.com/reader/feed/atom/" rel="self" type="application/atom+xml">
      <subtitle xml:lang="en">types, (co)monads, substructural logic</subtitle>
      <title xml:lang="en">The Comonad.Reader</title>
      <updated>2022-10-24T17:48:27Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-1777990983847811806.post-7096293096571919933</id>
    <link href="https://www.haskellforall.com/feeds/7096293096571919933/comments/default" rel="replies" title="Post Comments" type="application/atom+xml">
    <link href="https://www.haskellforall.com/2022/10/how-to-correctly-cache-build-time.html#comment-form" rel="replies" title="0 Comments" type="text/html">
    <link href="https://www.blogger.com/feeds/1777990983847811806/posts/default/7096293096571919933" rel="edit" type="application/atom+xml">
    <link href="https://www.blogger.com/feeds/1777990983847811806/posts/default/7096293096571919933" rel="self" type="application/atom+xml">
    <link href="https://www.haskellforall.com/2022/10/how-to-correctly-cache-build-time.html" rel="alternate" title="How to correctly cache build-time dependencies using Nix" type="text/html">
    <title>How to correctly cache build-time dependencies using Nix</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">caching    <p>Professional Nix users often create a shared cache of Nix build products so that they can reuse build products created by continuous integration (CI). For example, CI might build Nix products for each main development branch of their project or even for every pull request and it would be nice if those build products could be shared with all developers via a cache.</p><p>However, uploading build products to a cache is a little non-trivial if you donâ€™t already know the â€œbestâ€� solution, which is the subject of this post.</p><p>The solution described in this post is:</p><ul><li><p>Simple</p><p>It only takes a few lines of Bash code because we use the Nix command-line interface idiomatically</p></li><li><p>Efficient</p><p>It is very cheap to compute which build products to upload and requires no additional builds nor an exorbitant amount of disk space</p></li><li><p>Accurate</p><p>It uploads the build products that most people would intuitively want to upload</p></li></ul><blockquote><p>Note: Throughout this post I will be using the newer Nix command-line interface and flakes, which requires either adding this line to your <code>nix.conf</code> file:</p><pre><code>extra-experimental-features = nix-command flakes</code></pre><p>â€¦ and restarting your Nix daemon (if you have a multi-user Nix installation), or alternatively adding these flags to the beginning of all <code>nix</code> commands throughout this post:</p><div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-1" tabindex="-1"></a><span class="ex">$</span> nix <span class="at">--option</span> extra-experimental-features <span class="st">'nix-command flakes'</span> â€¦</span></code></pre></div></blockquote><h4 id="wrong-solution-0">Wrong solution #0</h4><p>As a running example, suppose that our CI builds a top-level build product using a command like this:</p><div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb3-1" tabindex="-1"></a><span class="ex">$</span> nix build .#example</span></code></pre></div><p>The naÃ¯ve way to upload that to the cache would be:</p><div class="sourceCode" id="cb4"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb4-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb4-1" tabindex="-1"></a><span class="ex">$</span> nix store sign <span class="at">--key-file</span> <span class="st">&quot;</span><span class="va">${KEY_FILE}</span><span class="st">&quot;</span> <span class="at">--recursive</span> .#example</span><br><span id="cb4-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb4-2" tabindex="-1"></a></span><br><span id="cb4-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb4-3" tabindex="-1"></a><span class="ex">$</span> nix copy <span class="at">--to</span> s3://cache.example.com .#example</span></code></pre></div><blockquote><p>Note: You will need to generate a <code>KEY_FILE</code> using the <code>nix-store --generate-binary-cache-key</code> command if you havenâ€™t already. For more details, see the following documentation from the manual:</p><details>Click to expand to see the documentation <pre><code>Operation --generate-binary-cache-key<br>   Synopsis<br>       nix-store --generate-binary-cache-key key-name secret-key-file<br>       public-key-file<br><br>   Description<br>       This command generates an Ed25519 key pair (http://ed25519.cr.yp.to/)<br>       that can be used to create a signed binary cache. It takes three<br>       mandatory parameters:<br><br>       1.     A key name, such as cache.example.org-1, that is used to look up<br>              keys on the client when it verifies signatures. It can be<br>              anything, but itâ€™s suggested to use the host name of your cache<br>              (e.g.  cache.example.org) with a suffix denoting the number of the<br>              key (to be incremented every time you need to revoke a key).<br><br>       2.     The file name where the secret key is to be stored.<br><br>       3.     The file name where the public key is to be stored.</code></pre></details></blockquote><p>That seems like a perfectly reasonable thing to do, right? However, the problem with that is that it is <em>incomplete</em>, meaning that the cache would still be missing several useful build products that developers would expect to be there.</p><p>Specifically, the above command only copies the â€œrun-timeâ€� dependencies of our build product whereas most developers expect the cache to also include â€œbuild-timeâ€� dependencies, and Iâ€™ll explain the distinction between the two.</p><h4 id="run-time-vs.-build-time">Run-time vs.Â Build-time</h4><p>Many paths in the <code>/nix/store</code> are not â€œvalidâ€� in isolation. They typically depend on other paths within the <code>/nix/store</code>.</p><p>For example, suppose that I build the GNU <code>hello</code> package, like this:</p><div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb6-1" tabindex="-1"></a><span class="op">$</span> nix build nixpkgs<span class="op">#</span>hello</span></code></pre></div><p>I can query all of the other paths within the <code>/nix/store</code>that the <code>hello</code> package transitively depends on <em>at run-time</em> using this command:</p><div class="sourceCode" id="cb7"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb7-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-1" tabindex="-1"></a><span class="ex">$</span> nix-store <span class="at">--query</span> <span class="at">--requisites</span> ./result</span><br><span id="cb7-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-2" tabindex="-1"></a><span class="ex">/nix/store/jzid7pfrhv6gpiwqbx6763v0g9c3bdzb-libobjc-11.0.0</span></span><br><span id="cb7-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-3" tabindex="-1"></a><span class="ex">/nix/store/9rb5qaba71mkgfgd8wfqg03cmi46xarg-apple-framework-CoreFoundation-11.0</span><span class="op">&gt;</span></span><br><span id="cb7-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-4" tabindex="-1"></a><span class="ex">/nix/store/akjp4x41jjx5hzgzrschwqzr8qfsdpys-hello-2.12.1</span></span></code></pre></div><p>â€¦ or I can print the same information in tree form like this:</p><div class="sourceCode" id="cb8"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb8-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb8-1" tabindex="-1"></a><span class="ex">$</span> nix-store <span class="at">--query</span> <span class="at">--tree</span> ./result</span><br><span id="cb8-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb8-2" tabindex="-1"></a><span class="ex">/nix/store/akjp4x41jjx5hzgzrschwqzr8qfsdpys-hello-2.12.1</span></span><br><span id="cb8-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb8-3" tabindex="-1"></a><span class="ex">â””â”€â”€â”€/nix/store/9rb5qaba71mkgfgd8wfqg03cmi46xarg-apple-framework-CoreFoundation-11.0.0</span></span><br><span id="cb8-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb8-4" tabindex="-1"></a>    <span class="ex">â””â”€â”€â”€/nix/store/jzid7pfrhv6gpiwqbx6763v0g9c3bdzb-libobjc-11.0.0</span></span></code></pre></div><p>On my macOS machine, it has two run-time dependencies (other than itself) within the <code>/nix/store</code>: <code>libobjc</code> and <code>apple-framework-CoreFoundation-11.0</code>.</p><blockquote><p>Note: there might be other run-time dependencies, because I believe Nixpkgs support for macOS requires some impure system dependencies, but Iâ€™m not an expert on this so I could be wrong.</p></blockquote><p>These are called â€œrun-timeâ€� dependencies because we cannot run our <code>hello</code> executable without them.</p><p>Nix prevents us from getting into situations where a <code>/nix/store</code> path is missing its run-time dependencies. For example, if I were to <code>nix copy</code> the <code>hello</code> build product to any cache, then Nix would perform the following steps, in order:</p><ul><li><p>Copy <code>libobjc</code> to the cache</p><p>â€¦ since that has no dependencies</p></li><li><p>Copy <code>apple-framework-CoreFoundation</code> to the cache</p><p>â€¦ since its <code>libobjc</code> dependency is now satisfied within the cache</p></li><li><p>Copy <code>hello</code> to the cache</p><p>â€¦ since its <code>apple-framework-CoreFoundation</code> dependency is now satisfied within the cache</p></li></ul><p>However, Nix also has a separate notion of â€œbuild-timeâ€� dependencies, which are dependencies that we need to in order to build the <code>hello</code> package.</p><blockquote><p>Note: The reason weâ€™re interested in build-time dependencies for our project is that we want developers to be able to rebuild the project if they make any changes to the source code. If we were to only cache the run-time dependencies of our project that wouldnâ€™t cache the development environment that developers need.</p></blockquote><p>In order to query these dependencies I need to first get the â€œderivationâ€� (<code>.drv</code> file) for <code>hello</code>:</p><div class="sourceCode" id="cb9"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb9-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb9-1" tabindex="-1"></a><span class="ex">$</span> DERIVATION=<span class="st">&quot;</span><span class="va">$(</span><span class="ex">nix</span> path-info <span class="at">--derivation</span> nixpkgs#hello<span class="va">)</span><span class="st">&quot;</span></span><br><span id="cb9-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb9-2" tabindex="-1"></a></span><br><span id="cb9-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb9-3" tabindex="-1"></a><span class="ex">$</span> declare <span class="at">-p</span> DERIVATION</span><br><span id="cb9-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb9-4" tabindex="-1"></a><span class="bu">typeset</span> <span class="va">DERIVATION</span><span class="op">=</span>/nix/store/4a78f0s4p5h2sbcrrzayl5xas2i7zq1m-hello-2.12.1.drv</span></code></pre></div><p>You can think of a derivation file as a build recipe that contains instructions for how to build the corresponding build product (the <code>hello</code> package in this case).</p><p>I can query the direct dependencies of that derivation using this command:</p><div class="sourceCode" id="cb10"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb10-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb10-1" tabindex="-1"></a><span class="ex">$</span> nix-store <span class="at">--query</span> <span class="at">--references</span> <span class="st">&quot;</span><span class="va">${DERIVATION}</span><span class="st">&quot;</span></span><br><span id="cb10-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb10-2" tabindex="-1"></a><span class="ex">/nix/store/9krlzvny65gdc8s7kpb6lkx8cd02c25b-default-builder.sh</span></span><br><span id="cb10-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb10-3" tabindex="-1"></a><span class="ex">/nix/store/labgzlb16svs1z7z9a6f49b5zi8hb11s-bash-5.1-p16.drv</span></span><br><span id="cb10-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb10-4" tabindex="-1"></a><span class="ex">/nix/store/cdk3pz11mvhqpphr0197wwmzhqppn7rl-stdenv-darwin.drv</span></span><br><span id="cb10-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb10-5" tabindex="-1"></a><span class="ex">/nix/store/hwymznwkd1kgf5ldcldjl9bnc1wz2azb-hello-2.12.1.tar.gz.drv</span></span></code></pre></div><p>Many of these dependencies are themselves derivations (<code>.drv</code> files), meaning that they represent other packages that Nix might have to build or fetch from a cache.</p><blockquote><p>Note: the <code>.drv</code> files are actually not the build-time dependencies, but rather the instructions for building them. You can convert any <code>.drv</code> file to the matching product it is supposed to build using the same <code>nix build</code> command, like this:</p><div class="sourceCode" id="cb11"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb11-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb11-1" tabindex="-1"></a><span class="ex">$</span> nix build /nix/store/labgzlb16svs1z7z9a6f49b5zi8hb11s-bash-5.1-p16.drv</span></code></pre></div></blockquote><p>Does that mean that these build-time dependencies are on our machine if we built <code>nixpkgs#hello</code>? Not necessarily. In fact, in all likelihood the <code>nixpkgs#hello</code> build was cached, meaning that <code>nix build nixpkgs#hello</code> only downloaded <code>hello</code>and its run-time dependencies and no build-time dependencies were required nor installed by Nix.</p><p>However, I could in principle force Nix to build the <code>hello</code> package instead of downloading it from a cache, like this:</p><div class="sourceCode" id="cb12"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb12-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb12-1" tabindex="-1"></a><span class="ex">$</span> nix build nixpkgs#hello <span class="at">--rebuild</span></span></code></pre></div><p>â€¦ and that would download the direct build-time dependencies of the <code>hello</code> package in order to rebuild the package.</p><h4 id="wrong-solution-1">Wrong solution #1</h4><p>By this point you might suppose that you have enough information to come up with a better set of <code>/nix/store</code> paths to cache. Your solution might look like this:</p><ul><li><p>Get the derivation for the top-level build product</p></li><li><p>Get the direct build-time dependencies of that derivation</p></li><li><p>Build the top-level build product and its direct build-time dependencies</p></li><li><p>Cache the top-level build product and its direct build-time dependencies</p></li></ul><p>In other words, something like this Nix code:</p><div class="sourceCode" id="cb13"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb13-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb13-1" tabindex="-1"></a><span class="ex">$</span> DERIVATION=<span class="st">&quot;</span><span class="va">$(</span><span class="ex">nix</span> path-info <span class="at">--derivation</span> <span class="st">&quot;</span><span class="va">${BUILD}</span><span class="st">&quot;</span><span class="va">)</span><span class="st">&quot;</span></span><br><span id="cb13-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb13-2" tabindex="-1"></a></span><br><span id="cb13-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb13-3" tabindex="-1"></a><span class="ex">$</span> DEPENDENCIES=<span class="er">(</span><span class="va">$(</span><span class="ex">nix-store</span> <span class="at">--query</span> <span class="at">--references</span> <span class="st">&quot;</span><span class="va">${DERIVATION}</span><span class="st">&quot;</span><span class="va">)</span><span class="kw">)</span></span><br><span id="cb13-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb13-4" tabindex="-1"></a></span><br><span id="cb13-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb13-5" tabindex="-1"></a><span class="ex">$</span> nix build <span class="st">&quot;</span><span class="va">${BUILD}</span><span class="st">&quot;</span> <span class="st">&quot;</span><span class="va">${DEPENDENCIES</span><span class="op">[@]</span><span class="va">}</span><span class="st">&quot;</span></span><br><span id="cb13-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb13-6" tabindex="-1"></a></span><br><span id="cb13-7"><a href="https://www.haskellforall.com/feeds/posts/default#cb13-7" tabindex="-1"></a><span class="ex">$</span> nix store sign <span class="at">--key-file</span> <span class="st">&quot;</span><span class="va">${KEY_FILE}</span><span class="st">&quot;</span> <span class="at">--recursive</span> <span class="st">&quot;</span><span class="va">${BUILD}</span><span class="st">&quot;</span> <span class="st">&quot;</span><span class="va">${DEPENDENCIES</span><span class="op">[@]</span><span class="va">}</span><span class="st">&quot;</span></span><br><span id="cb13-8"><a href="https://www.haskellforall.com/feeds/posts/default#cb13-8" tabindex="-1"></a></span><br><span id="cb13-9"><a href="https://www.haskellforall.com/feeds/posts/default#cb13-9" tabindex="-1"></a><span class="ex">$</span> nix copy <span class="at">--to</span> <span class="st">&quot;</span><span class="va">${CACHE}</span><span class="st">&quot;</span> <span class="st">&quot;</span><span class="va">${BUILD}</span><span class="st">&quot;</span> <span class="st">&quot;</span><span class="va">${DEPENDENCIES</span><span class="op">[@]</span><span class="va">}</span><span class="st">&quot;</span></span></code></pre></div><p>This is better, but still not good enough!</p><p>The problem with this solution is that it only works well if your dependencies never change and you only modify your top-level project. If you upgrade or patch any of your direct build-time dependencies then you need to have <em>their</em> build-time dependencies cached so that you can quickly rebuild them.</p><p>In fact, going two layers deep is still not enough; in practice you canâ€™t easily anticipate in advance how deep in the build-time dependency tree you might need to patch or upgrade things. For example, you might need to patch or upgrade your compiler, which is really deep in your build-time dependency tree.</p><h4 id="wrong-solution-2">Wrong solution #2</h4><p>Okay, so maybe we can try to build and cache <em>all</em> of our build-time dependencies?</p><p>Wrong again. There are way too many of them. You can query them by replacing <code>--references</code> with <code>--requisites</code> and youâ€™ll a giant list of results, even for â€œsmallâ€� packages. For example:</p><div class="sourceCode" id="cb14"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb14-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb14-1" tabindex="-1"></a><span class="ex">$</span> DERIVATION=<span class="va">$(</span><span class="ex">nix</span> path-info <span class="at">--derivation</span> nixpkgs#hello<span class="va">)</span></span><br><span id="cb14-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb14-2" tabindex="-1"></a></span><br><span id="cb14-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb14-3" tabindex="-1"></a><span class="ex">$</span> nix-store <span class="at">--query</span> <span class="at">--requisites</span> <span class="st">&quot;</span><span class="va">${DERIVATION}</span><span class="st">&quot;</span></span><br><span id="cb14-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb14-4" tabindex="-1"></a><span class="ex">/nix/store/8djp1rizc1dblv8svnb0mpa0c3lwvc17-drop-comments.patch</span></span><br><span id="cb14-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb14-5" tabindex="-1"></a><span class="ex">/nix/store/9krlzvny65gdc8s7kpb6lkx8cd02c25b-default-builder.sh</span></span><br><span id="cb14-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb14-6" tabindex="-1"></a><span class="ex">/nix/store/3glray2y14jpk1h6i599py7jdn3j2vns-mkdir.drv</span></span><br><span id="cb14-7"><a href="https://www.haskellforall.com/feeds/posts/default#cb14-7" tabindex="-1"></a><span class="ex">/nix/store/50ql5q0raqkcydmpi6wqvnhs9hpdgg5f-cpio.drv</span></span><br><span id="cb14-8"><a href="https://www.haskellforall.com/feeds/posts/default#cb14-8" tabindex="-1"></a><span class="ex">/nix/store/81xahsrhpn9mbaslgi5sz7gsqra747d4-unpack-bootstrap-tools-aarch64.sh</span></span><br><span id="cb14-9"><a href="https://www.haskellforall.com/feeds/posts/default#cb14-9" tabindex="-1"></a><span class="ex">/nix/store/fzbk4fnbjqhr0l1scx5fspsx5najbrbm-bootstrap-tools.cpio.bz2.drv</span></span><br><span id="cb14-10"><a href="https://www.haskellforall.com/feeds/posts/default#cb14-10" tabindex="-1"></a><span class="ex">/nix/store/gxzl4vmccqj89yh7kz62frkxzgdpkxmp-sh.drv</span></span><br><span id="cb14-11"><a href="https://www.haskellforall.com/feeds/posts/default#cb14-11" tabindex="-1"></a><span class="ex">â€¦</span> ğŸŒº 500+ derivations later ğŸŒº â€¦</span><br><span id="cb14-12"><a href="https://www.haskellforall.com/feeds/posts/default#cb14-12" tabindex="-1"></a><span class="ex">/nix/store/i0zc5mm4vpj3lviyydb9s73j53mypkrg-nghttp2-1.49.0.drv</span></span><br><span id="cb14-13"><a href="https://www.haskellforall.com/feeds/posts/default#cb14-13" tabindex="-1"></a><span class="ex">/nix/store/w37b5s734m53gxnzqyb5v0v98mhdfg2i-coreutils-9.1.drv</span></span><br><span id="cb14-14"><a href="https://www.haskellforall.com/feeds/posts/default#cb14-14" tabindex="-1"></a><span class="ex">/nix/store/mmsrbggvzn6rwlx1ijw90sw3wvhzj18j-openssl-3.0.5.drv</span></span><br><span id="cb14-15"><a href="https://www.haskellforall.com/feeds/posts/default#cb14-15" tabindex="-1"></a><span class="ex">/nix/store/n7iibs6b818v402j0yczf4mgy73sbzpv-libssh2-1.10.0.drv</span></span><br><span id="cb14-16"><a href="https://www.haskellforall.com/feeds/posts/default#cb14-16" tabindex="-1"></a><span class="ex">/nix/store/z074ki54p77r7db3wsgxh9p18f67xnv8-curl-7.85.0.drv</span></span><br><span id="cb14-17"><a href="https://www.haskellforall.com/feeds/posts/default#cb14-17" tabindex="-1"></a><span class="ex">/nix/store/hwymznwkd1kgf5ldcldjl9bnc1wz2azb-hello-2.12.1.tar.gz.drv</span></span><br><span id="cb14-18"><a href="https://www.haskellforall.com/feeds/posts/default#cb14-18" tabindex="-1"></a><span class="ex">/nix/store/4a78f0s4p5h2sbcrrzayl5xas2i7zq1m-hello-2.12.1.drv</span></span></code></pre></div><details>Click to expand and see the full list of build-time dependencies <pre><code>/nix/store/8djp1rizc1dblv8svnb0mpa0c3lwvc17-drop-comments.patch<br>/nix/store/9krlzvny65gdc8s7kpb6lkx8cd02c25b-default-builder.sh<br>/nix/store/3glray2y14jpk1h6i599py7jdn3j2vns-mkdir.drv<br>/nix/store/50ql5q0raqkcydmpi6wqvnhs9hpdgg5f-cpio.drv<br>/nix/store/81xahsrhpn9mbaslgi5sz7gsqra747d4-unpack-bootstrap-tools-aarch64.sh<br>/nix/store/fzbk4fnbjqhr0l1scx5fspsx5najbrbm-bootstrap-tools.cpio.bz2.drv<br>/nix/store/gxzl4vmccqj89yh7kz62frkxzgdpkxmp-sh.drv<br>/nix/store/pjbpvdy0gais8nc4sj3kwpniq8mgkb42-bzip2.drv<br>/nix/store/7kcayxwk8khycxw1agmcyfm9vpsqpw4s-bootstrap-tools.drv<br>/nix/store/1i5y55x4b4m9qkx5dqbmr1r6bvrqbanw-multiple-outputs.sh<br>/nix/store/59jmzisg8fkm9c125fw384dqq1np602l-move-docs.sh<br>/nix/store/bnj8d7mvbkg3vdb07yz74yhl3g107qq5-patch-shebangs.sh<br>/nix/store/cickvswrvann041nqxb0rxilc46svw1n-prune-libtool-files.sh<br>/nix/store/ckzrg0f0bdyx8rf703nc61r3hz5yys9q-builder.sh<br>/nix/store/fyaryjvghbkpfnsyw97hb3lyb37s1pd6-move-lib64.sh<br>/nix/store/g8xg0i02aqwhgxwd2vnp5ax3d6lrkg1v-strip.sh<br>/nix/store/jngr4r80x5jn482ckqrfh08ljrx1k86f-setup.sh<br>/nix/store/kd4xwxjpjxi71jkm6ka0np72if9rm3y0-move-sbin.sh<br>/nix/store/kxw6q8v6isaqjm702d71n2421cxamq68-make-symlinks-relative.sh<br>/nix/store/m54bmrhj6fqz8nds5zcj97w9s9bckc9v-compress-man-pages.sh<br>/nix/store/ngg1cv31c8c7bcm2n8ww4g06nq7s4zhm-set-source-date-epoch-to-latest.sh<br>/nix/store/wlwcf1nw2b21m4gghj70hbg1v7x53ld8-reproducible-builds.sh<br>/nix/store/nbxwxwqwcr9rrmxb6gb532f18102815x-bootstrap-stage0-stdenv-darwin.drv<br>/nix/store/ycwm35msmsdi2qgjax1slmjffsmwy8am-write-mirror-list.sh<br>/nix/store/i65va14cylqc74y80ksgnrsaixk39mmh-mirrors-list.drv<br>/nix/store/lphxcbw5wqsjskipaw1fb8lcf6pm6ri6-builder.sh<br>/nix/store/bgp77z9z42x35vmwyfywqaiqsmnb3ffa-patchutils-0.3.3.tar.xz.drv<br>/nix/store/3lhw0v2wyzimzl96xfsk6psfmzh38irh-bash51-007.drv<br>/nix/store/3p62kw9mpkcp0grhirfn46i9afhqf0c9-bash51-015.drv<br>/nix/store/3za6mykjk49sr616w80lvmy5xcmbkrp3-bash51-006.drv<br>/nix/store/5lv0fbn6ajwdzw04nz88cc0qqrgrvnp1-bash51-016.drv<br>/nix/store/4dq81yma6drk9701h17h64zx47r7p5n8-utils.sh<br>/nix/store/ds0q1li2i96dy7yp6n8zkbakz7m7d5l8-bootstrap-stage0-stdenv-darwin.drv<br>/nix/store/vcbpmcxpir9nyy480vx5sxb4pm2v0dps-bootstrap-stage0-sigtool.drv<br>/nix/store/5xk8j72a1dddq1gxh39amgifknwb0lvm-signing-utils.drv<br>/nix/store/fmd71yqpgwrkdbidzxwmfasqp39zzf8r-CLTools_macOSNMOS_SDK.pkg.drv<br>/nix/store/ijdrwgv6kv4k17qb5jvqkbs1ccqrlalb-bootstrap-stage0-pbzx.drv<br>/nix/store/z727aawh6imz3hpmviqyf4zlgprfn8zf-bootstrap-stage0-cpio.drv<br>/nix/store/fbhkqzn4wc69pa4rvndin5h4b8k02f5c-MacOSX-SDK-11.0.0.drv<br>/nix/store/72fl7wcbnl6srm5dxb7xbnn20zr07011-libobjc-11.0.0.drv<br>/nix/store/93n8xmgm6x65mh88amw15wps3h18yqn8-bootstrap-stage0-libcxx.drv<br>/nix/store/cyk47lyfswsxgn7z2qnhkp0919nhdd3b-config.sub?id=6faca61810d335c7837f320733fe8e15a1431fc2.drv<br>/nix/store/lmdwlh09b7g3kzga0i2hprcfxszg3ghz-config.guess?id=6faca61810d335c7837f320733fe8e15a1431fc2.drv<br>/nix/store/9vh7qbpb8chmx5r5cswrix00hngy7vky-gnu-config-2021-01-25.drv<br>/nix/store/2idjp2xdckqyrdk3hd8msp4cfdi6b8if-utils.bash<br>/nix/store/47gspvwaxra868q4rsmva0g5nz7zac6p-add-clang-cc-cflags-before.sh<br>/nix/store/797k3249lr4rx8wslf7kcsa3hv6fis3x-role.bash<br>/nix/store/bybz12bxjbk94hm58zc70sc0xhj2dxif-add-darwin-ldflags-before.sh<br>/nix/store/c1vmxz359mfljs3cdimhd2fr6fw0n99s-add-hardening.sh<br>/nix/store/civvq4xh4p0mj04l7k73p1xbsq1rs9bc-darwin-install_name_tool-wrapper.sh<br>/nix/store/dk3ly72kiv27srcj1mjr5n4112vx2hfk-setup-hook.sh<br>/nix/store/khkfggnk4h14f2spsjcjrxlf8himd4vj-bootstrap-stage0-rewrite-tbd.drv<br>/nix/store/ff3yqdllxmlp1r8mfkfgjf671r8flf8j-libSystem-11.0.0.drv<br>/nix/store/gvr0mz9wfz4g0z9w6477ikywmcivk1mh-bootstrap-stage0-coreutils.drv<br>/nix/store/jravmbdjn0md7cnn6rbqwf3aflw72msb-post-link-sign-hook.drv<br>/nix/store/js1lic1bmif60d4mlffkpbvz5jim34n3-darwin-strip-wrapper.sh<br>/nix/store/m0ww06j4y2v3jdsabrr8n0y9d4nnvqn3-bootstrap-stage0-gnugrep.drv<br>/nix/store/mrzpfh0ml9k07sw019ydagbb2z1q4sxz-add-flags.sh<br>/nix/store/vicx6qnvvxb96y0iwnya977viira2apc-ld-wrapper.sh<br>/nix/store/dj5xngrf61x9isyp2r5d84h3i43wg65l-bootstrap-stage0-binutils-wrapper-.drv<br>/nix/store/gn1b4gh07byi8xnahgc800jznyarqin0-bootstrap-stage0-clang.drv<br>/nix/store/hc3z14jhqg35x5286hw5wmc3injg62fa-add-hardening.sh<br>/nix/store/ji2yrl1na00bwav65hh1vr0nc0s1xzvz-add-flags.sh<br>/nix/store/lck6bijpq64zjvmkwdi081v6wm2r8nyx-bootstrap-stage0-libcxxabi.drv<br>/nix/store/li62b4bvg51zikbni9xadg08za340k71-cc-wrapper.sh<br>/nix/store/nc4bvrgb8jxh4k1fq2zgzh4mmxqavp54-setup-hook.sh<br>/nix/store/xbfsjb46np040h2aph1k76iybq9rzd7x-bootstrap-stage0-compiler-rt.drv<br>/nix/store/cz1x2bgvnzi0qc39hjwm0ppdvqwkfybl-bootstrap-stage0-clang-wrapper-11.1.0.drv<br>/nix/store/00qr10y7z2fcvrp9b2m46710nkjvj55z-update-autotools-gnu-config-scripts.sh<br>/nix/store/qzvw98z9qwv3vasfc9lwcq0d1sgfin6v-hook.drv<br>/nix/store/vp49i9krzqf282vj6bqr6rxs96d2a1fv-apple-framework-CoreFoundation-11.0.0.drv<br>/nix/store/lkjwmgmnm4f7d3iiglxglrgll1c8vdkf-bootstrap-stage1-stdenv-darwin.drv<br>/nix/store/r09r8wpshjqdkx0xwkin79km812nbgp3-m4-1.4.19.tar.bz2.drv<br>/nix/store/7rxh71ny4xrckw1ip50hv44mylpxpd5v-gnum4-1.4.19.drv<br>/nix/store/h1s43lrwjjf98dmfhayn6cmax2h19qz9-bison-3.8.2.tar.gz.drv<br>/nix/store/85f1q5rm0qzqay7fk3935h6kvzfqdcfv-http-tiny-verify-ssl-by-default.patch<br>/nix/store/dm81j9qdcdr4c458pqbc9wvq9ymgzk4m-setup-hook.sh<br>/nix/store/mb381gpm9k5wdl37l5ad5pp8w11qzhjg-no-sys-dirs-5.31.patch<br>/nix/store/n315a3g9bcxlypqzbm36nzrrg40h6lcj-cpp-precomp.patch<br>/nix/store/ppbkcbhzwzwpqaad6whhr9qgxjvj82gj-perl-5.36.0.tar.gz.drv<br>/nix/store/0phjl3yzr4m1gady21l21h4brn140hjm-CVE-2022-37434.patch<br>/nix/store/jw5f744vn0nv6q0ms6s5q0w0kkml2a8v-fix-configure-issue-cross.patch<br>/nix/store/mg7z3nsc96864cfkx2jwda7wmpdn71dl-zlib-1.2.12.tar.gz.drv<br>/nix/store/xniqbx8mh8lx06bw267g6hkfkp2c79kn-comprehensive-crc-validation-for-wrong-implementations.patch<br>/nix/store/vblzwf77rk1mxxk6qjhgaqp43z36j992-zlib-1.2.12.drv<br>/nix/store/x0ll5lnagy6lg7hgvqb26il3qnmsqisd-sw_vers.patch<br>/nix/store/m9h3rw3jlzf8hapgiw29i5fjyzw7r9v4-perl-5.36.0.drv<br>/nix/store/5nxxxmzb23y9pzp673grmfs95jrx14rx-bison-3.8.2.drv<br>/nix/store/13i5k09s5g6gdkaj731rqsi1qc70khka-bootstrap-stage1-stdenv-darwin.drv<br>/nix/store/jik02mkz72r2f6hhxnlhp6h5f0fi89gw-expand-response-params.c<br>/nix/store/g9h3q3y44p4ycn8vdai1s9aw1f0s7icy-expand-response-params.drv<br>/nix/store/734l1nlc4d2zbksafqvp5436ynp26z3g-bash51-014.drv<br>/nix/store/crar8b49gsplly9x0v279bibvixmj9gc-bash51-003.drv<br>/nix/store/d7i8a7c8mb0qmsb1c3rj8g38m071vmaf-bash51-004.drv<br>/nix/store/gapa7v6rz1gzjsn1kckpb4fj07pmznw6-bash-5.1.tar.gz.drv<br>/nix/store/ig7d802vp43ap4ga26r2vd174h2c1bk7-bash51-010.drv<br>/nix/store/jj3jm1bjqnlwz4yassc9h70mwmrxy442-bash51-008.drv<br>/nix/store/krhwn1440gxvry5gw4wmzk6y83fm4bdw-bash51-001.drv<br>/nix/store/n92wsf556wqp4dbf0rxwx1b175m0vwyn-bash51-013.drv<br>/nix/store/nkzvvyvmckwv4a8r84iwyfbivvw05nvc-bash51-009.drv<br>/nix/store/nm5946y3ffkynrz67vz47ik0ygvg6byn-pgrp-pipe-5.1.patch<br>/nix/store/pkd2vxq8w5fhrfk6k89hi29d5ldbbj29-bash51-005.drv<br>/nix/store/q6jpdv2j5dh4nbsbmkzy6za1vfpb2l30-bash51-011.drv<br>/nix/store/w8q9jdvb96sayxyi25amd27yki283zg9-bash51-002.drv<br>/nix/store/wg9gacyfgldnwh3gc23nr49n4j0b58sv-bash51-012.drv<br>/nix/store/4kpfa2fhfdb6r9icym3q8n3w1s8mfv6z-bash-5.1-p16.drv<br>/nix/store/k9bkzj7nhqxnvbmz5vk8pmzxpmym0qa6-file-5.43.tar.gz.drv<br>/nix/store/hgps4nk9p01z9zngmbnbv42pqmzg9nhg-file-5.43.drv<br>/nix/store/4cmjzk8yr6i5vls5d2050p653zzdvmvp-setup-hook.sh<br>/nix/store/4hcdpxjmr4nh625ry840g70xp00vdf5a-2.71-fix-race.patch<br>/nix/store/kxdvjnq8cl9jd5g9jndhhl5a17h2xbih-autoconf-2.71.tar.xz.drv<br>/nix/store/irpqw60zcy00lj3hjia8gr15z984x9xn-texinfo-6.8.tar.xz.drv<br>/nix/store/19ndr8g629l0xzzs1x7xz4z0fbkwpgcj-xz-5.2.6.tar.bz2.drv<br>/nix/store/kas3n4g0jyrz3rhl1znjcxqmpyddk8sw-xz-5.2.6.drv<br>/nix/store/5pj1w63j668yqssrxb4dykpzpm1yhx9q-libiconv-50.tar.gz.drv<br>/nix/store/xrvbfm0ahaiik1vlxzn3vsp5gyhksy2n-setup-hook.sh<br>/nix/store/5xx3gba361rf696b27r3jfa0q7rmlyh9-libiconv-50.drv<br>/nix/store/ny42y6hs4p294rvnrwbmrpwzqghw2816-gettext-setup-hook.sh<br>/nix/store/p2fp6i7hjx9af1wbwr32k217wp2dxmiw-absolute-paths.diff<br>/nix/store/sihz0cdcajckxnhjm8n4p652sbd5xwxd-gettext-0.21.tar.gz.drv<br>/nix/store/ri729qz1iq3iqr9bdvb406izklj1fpfa-gettext-0.21.drv<br>/nix/store/yl6g04fsr6p9lkvccqjjl8q1xnnmw49s-fix-glibc-2.34.patch<br>/nix/store/v94cwmp6hs6dvrw6v4jmqk9jwl0ik75q-texinfo-6.8.drv<br>/nix/store/ih062232k706fpydng4xlk75fpzraxmn-autoconf-2.71.drv<br>/nix/store/r5kd1di71n7xk9kjvrgyy75cz0c0skay-automake-1.16.5.tar.xz.drv<br>/nix/store/hqf9nllss9z0i3gmi8sv9kjcm9qhvf8q-automake-1.16.5.drv<br>/nix/store/ipdgmqcfn56mhgmq3hv3yy5xj2kj2ri7-libtool-2.4.7.tar.gz.drv<br>/nix/store/06nfwja5j8c36n780jvlwjv8gs2m7i3m-gettext-1.07.tar.gz.drv<br>/nix/store/qf3mzpvsmkrw963xchbivcci06078n13-builder.sh<br>/nix/store/j7jrmh8zz3jjcdsa050f1ja19nm07vz7-perl5.36.0-gettext-1.07.drv<br>/nix/store/lac4y6zxaqqhyf4r60p3ag68k3ckifvv-help2man-1.49.2.tar.xz.drv<br>/nix/store/k9223a4j2ar7j76zpjs8fmlfl9q76a76-help2man-1.49.2.drv<br>/nix/store/9gns0vpn7fajyzm3w2rsdbcz9pqgfsrm-libtool-2.4.7.drv<br>/nix/store/ghdamd4hl6yi7jysh1x3436fj1v9yvjb-autoreconf.sh<br>/nix/store/8byqd66k9p5zbiggz2a9frki47xqy28r-hook.drv<br>/nix/store/ing5qg4q87wdvm1h455c3xn889m2bbj0-coreutils-9.1.tar.xz.drv<br>/nix/store/66ayp7hm682rxhlxd061fvprrmf2zx3c-gmp-6.2.1.tar.bz2.drv<br>/nix/store/h96aykl4imzhfapnmavplr49v43c8apx-6.2.1-CVE-2021-43618.patch<br>/nix/store/k49s9lr0lw5zhwsz4ni4rf2643byqrak-gmp-with-cxx-6.2.1.drv<br>/nix/store/jp5jbqfxjazf38w63bipqf68h7hyq4v0-coreutils-9.1.drv<br>/nix/store/322332kbmj7ig7ii3cwlfjcg4mf5xgz6-grep-3.7.tar.xz.drv<br>/nix/store/m2qc8a9c4yr5xmqck50fpzzwzpqggbbw-stacksize-detection.patch<br>/nix/store/qk3pnajspb378zx6c8g0anj2d7z31a88-pcre-8.45.tar.bz2.drv<br>/nix/store/pgzgn3knxdn335qci805a49bvlnl4ppa-pcre-8.45.drv<br>/nix/store/l2bbsavfww8zv5a9ncldh83c9vsz3y01-gnugrep-3.7.drv<br>/nix/store/1igs2sr5j99180z801426ivzzbikxi7q-CVE-2019-13232-2.patch.drv<br>/nix/store/1k1wn8807yizgz3ghnbd4k6zsc0dzfkr-CVE-2014-9913.patch<br>/nix/store/2cq4hsc1v8ylccspw8351r72s56w1fia-CVE-2015-7697.diff<br>/nix/store/6np2acjv1nxcg0xzsv9a76wyrpxznkna-CVE-2014-8141.diff<br>/nix/store/6zqn6w9rwkgfa6z1hpagnh5xhz2dag6m-CVE-2015-7696.diff<br>/nix/store/97d26l91h0db8h0qkmhxwi5d8shrilv6-CVE-2016-9844.patch<br>/nix/store/p67r2s04xw8plqs0552rc5qyj5016wxb-bzip2-1.0.8.tar.gz.drv<br>/nix/store/ra4ikm6b0nxgi0sil4mk3ikkingm80x0-bzip2-1.0.6.2-autoconfiscated.patch.drv<br>/nix/store/awrvprhqr5j0n6n8zqss2i5cyv25wis3-bzip2-1.0.8.drv<br>/nix/store/bqwhj80hz1z49365miaqcxp4c2mzsfp3-unzip60.tar.gz.drv<br>/nix/store/cciw7lgkldvx25d77cxpjhh1iw4xghd9-setup-hook.sh<br>/nix/store/d9b2qrrq32jzdsdx4y33inzrra5n5z5n-CVE-2014-8140.diff<br>/nix/store/ly8k93l59mlzlgnq679vcp54nqpi4sdc-06-initialize-the-symlink-flag.patch.drv<br>/nix/store/mwkywhh9wvym79lzlk8gsanw5swhfb8w-CVE-2019-13232-3.patch.drv<br>/nix/store/p46prhgmv7ibjh9igfkbc6zfxbbi6sk5-dont-hardcode-cc.patch<br>/nix/store/p55a764pi2f4kkx3adb43bxb2dnb4z6r-CVE-2018-18384.patch<br>/nix/store/pdcj2chp5c2gvm2jc3shbajfc62kbx1i-CVE-2014-9636.diff<br>/nix/store/rdkdki1f24q8mqgnbsyk7gmh28c027ks-CVE-2014-8139.diff<br>/nix/store/wx62rx7078a86mpimgg5gfsiisx3qk5l-CVE-2019-13232-1.patch.drv<br>/nix/store/zxpjddlgb46cdynbgbgq41i6k9a40wfg-unzip-6.0.drv<br>/nix/store/cnds925pfnac943p1f516pxwrbqy0gdi-source.drv<br>/nix/store/2cqnhs2ds0gn7xrq0zcwbj7gsv6l5xr7-use-etc-ssl-certs-darwin.patch<br>/nix/store/2yk6ab4c6j9y00g3x3cixqgi9jmgiwzd-openssl-3.0.5.tar.gz.drv<br>/nix/store/6hyy4ngzkxdsg71zmryvy3xkw0ydag21-openssl-disable-kernel-detection.patch<br>/nix/store/sq4h6bqjx12v9whvm65pjss25hg1538q-nix-ssl-cert-file.patch<br>/nix/store/imc07k6kg26rcam012pkgxba3mj0c0xq-openssl-3.0.5.drv<br>/nix/store/1ksmnsr3m6paw8gs7jp9b623agzdrqi2-add-flags.sh<br>/nix/store/9whvblgb7bgnmqsv7y5xqs1w8xv9aa1d-pkg-config-wrapper.sh<br>/nix/store/c4akajrb4jg50k72jw7zfbyv8z139ri0-setup-hook.sh<br>/nix/store/f4bvwqvj0y3z6blvh0knz71a8yq1c45p-requires-private.patch<br>/nix/store/qycyfzgf92i96ygij2b5bz27ll6mkyyw-pkg-config-0.29.2.tar.gz.drv<br>/nix/store/dq5y5c22p6ixswcqaxb6s0ymvi2bwmlm-pkg-config-0.29.2.drv<br>/nix/store/ssvy1s8p78q1jfy7bap0kl49sm8ad0m3-pkg-config-wrapper-0.29.2.drv<br>/nix/store/xz6rbdix12jn1bd3lydd1cagnvr94yf4-sigtool-0.1.2.drv<br>/nix/store/gp50m2w3aab5w1pgx9h18yky5x5jzzyq-signing-utils.drv<br>/nix/store/gz78khbgfz3rh5phvq1bavdp4v0bcimn-post-link-sign-hook.drv<br>/nix/store/zp333xdrvsgn3mjicwcbfiqd259ix6gd-MacOSX-SDK-11.0.0.drv<br>/nix/store/x3wxdzi7f36fnb1sryr1ifgafsycasks-libSystem-11.0.0.drv<br>/nix/store/v77imik30yacsdbfqkkdv0djyk1hsdgh-bootstrap-stage0-binutils-wrapper-.drv<br>/nix/store/6cqn1ln7v306ymslgmvcy77pbq30pjy1-bootstrap-stage0-clang-wrapper-11.1.0.drv<br>/nix/store/3inq067xw7bic7dy828bgjjzx54kav9v-install-shell-files.sh<br>/nix/store/70pf3jk5jc64jc82hqck1jx6z5l42xj3-install-shell-files.drv<br>/nix/store/zwlzlqvh3x2nw1421cvx2210bzz3xgfn-libev-4.33.tar.gz.drv<br>/nix/store/gn80i99rcc85d7l687d1jdmcm0yl51yv-libev-4.33.drv<br>/nix/store/h60a8qk9wqy8gbdvl9sf0qcnz63by9w4-nghttp2-1.49.0.tar.bz2.drv<br>/nix/store/09ba5xcaaaybqdsvljh5skzzl6blmmw4-c-ares-1.18.1.tar.gz.drv<br>/nix/store/l0niywhmkdqv97i8rlxzr1yqbn9k7sc1-c-ares-1.18.1.drv<br>/nix/store/36rbachr8ra090v3m6s86603sfp382k4-nghttp2-1.49.0.drv<br>/nix/store/fgr4mizzn2y712bqlk895lk8wpws27ir-dyld-433.5.tar.gz.drv<br>/nix/store/7c2sh9fyqz113rrpx5mdnmkk8mdrhb47-dyld-433.5.drv<br>/nix/store/81gwh57vnrm6qpw3gxmdmrjsp26dxi7p-find-xml-catalogs.sh<br>/nix/store/1vaq58n8rvn8bbr9mcm3k30zkr63480d-hook.drv<br>/nix/store/68bzcamhirzd95vsh05wilz8p8vfvyb6-expat-2.4.9.tar.xz.drv<br>/nix/store/0vyw0ywxhng31zvxqia2y23ljjmzsdj6-expat-2.4.9.drv<br>/nix/store/345r2zz7pgiyk91j89qlf7mhs95jrv6f-no-ldconfig.patch<br>/nix/store/zi0m9pfmvy5lw89x7a8x674rm99i8qiq-setup-hook.sh<br>/nix/store/4aakllhrfd3r87a67g0hb6r37nk4ahqf-python-setup-hook.sh.drv<br>/nix/store/4j7gbzbahn5by6vvck1gcpjc95k6vpz6-Python-3.10.7.tar.xz.drv<br>/nix/store/9m54l1bi5814x9cqznwlga7yfs5ipi6h-nuke-refs.sh<br>/nix/store/pm08hy0dzswr0wj3n7nczm5pbzzjxdh6-darwin-sign-fixup.sh<br>/nix/store/4qmyys335vfbmyx2q8ii3md77yaswsim-nuke-references.drv<br>/nix/store/57kclla9vza2n87xgwg1ap54d20cz6lb-fix-finding-headers-when-cross-compiling.patch<br>/nix/store/aafa965mg7grhivxa01mmbqksz6c3w77-python-3.x-distutils-C++.patch<br>/nix/store/cv1ynpzvjjr0s72jkbblbzz3ymr87lpi-0001-On-all-posix-systems-not-just-Darwin-set-LDSHARED-if.patch<br>/nix/store/dkb2rjyj7lwmvsn4zzwx85kx8r61nk9w-darwin-libutil.patch<br>/nix/store/w7hflmy5kddj6p1kvbkgag7qjs44217d-libffi-3.4.3.tar.gz.drv<br>/nix/store/nv7ln6adf9vv2c81rw1rv8sarp2w3dbp-libffi-3.4.3.drv<br>/nix/store/r112dk8w7zvdjipki58ch00m825li7fq-virtualenv-permissions.patch<br>/nix/store/x6aiw4vay2b63slqz5byimn0alhg5b1s-darwin-tcl-tk.patch<br>/nix/store/70zdg3iypjrxjyvj602ai92j36j8l4rp-python3-minimal-3.10.7.drv<br>/nix/store/1qrnbw8xsww3vydd71lwfp32ylgx9i8g-make-wrapper.sh<br>/nix/store/819fzxfwzp7zhhi4wy5nkapimkb1bsx5-die.sh<br>/nix/store/csphakh9ck533qnjfqmrh5ybg7amwvwv-hook.drv<br>/nix/store/scgakk3jkkkqfzxp5v9575163dj03c2y-hook.drv<br>/nix/store/8p4sgrqajxwzcm9l02m45qvpg6ncr0h9-patchutils-0.3.3.drv<br>/nix/store/baz2nahq7z7xxya1gi7in6a4msmvkbly-5b2d07a72670513e41b481a9d922c983a64027ca.patch.drv<br>/nix/store/frr6f2hq56j6b4wc0bsklaqskjsagqc0-utf8-xmlErrorFuncHandler.patch<br>/nix/store/vyh448kgn8qx2frx4g42f64b1akic218-libxml2-2.10.0.tar.xz.drv<br>/nix/store/lyl7058saady3i75h1w0177qfzfr1zf0-ncurses-6.3-20220507.tgz.drv<br>/nix/store/wy5amsi09scnbxgsbm1fzzq9963zlg9m-ncurses-6.3-p20220507.drv<br>/nix/store/x1fa0bns4szjkbb7f8bsflcxmzas41h0-4ad71c2d72beef0d10cf75aa417db10d77846f75.patch.drv<br>/nix/store/9gql9xbn6mfd56lxxchd0q7qzyf7cdby-libxml2-2.10.0.drv<br>/nix/store/1nv6k9zyc7pj74yshdzm4bmjfv6k86l9-source.drv<br>/nix/store/34qn4by9lqrri323ahm5vizv6bgsbhfn-006-darwin-always-set-runtime-c-flag.diff<br>/nix/store/chhz1kdhnql7gshwrns13lawgm75an7c-adv_cmds-119.tar.gz.drv<br>/nix/store/bylhfm7hj9sm4qb5n9mnsvj71xhmi6rx-flex-2.6.4.tar.gz.drv<br>/nix/store/vila3sxd48ha6r4yhdbfzqlvfl1jn2bw-glibc-2.26.patch.drv<br>/nix/store/lnb1468vfblvbc6lqgpigypspa4lzl68-flex-2.6.4.drv<br>/nix/store/6s064qz2lzpi1ml9z4vx0ajmk7fwafv6-bsdmake-24.tar.gz.drv<br>/nix/store/pps2jxig0cgkz81qwhy9gqar360mbbdb-bsdmake-24.drv<br>/nix/store/x1dh5wnl7pf81iq0gx0gqj6i9vnz89vv-source.drv<br>/nix/store/icl9b9dikbnwsrb5agnjmfryxyjnfp1n-adv_cmds-119.drv<br>/nix/store/6wbmq1k5x7q9lchs986bjq2qf1ip7b41-ps-adv_cmds-119.drv<br>/nix/store/7qslhycy1d0ag13xn4rfxfwdm8f7afb1-001-search-path.diff<br>/nix/store/ar1p4gcvlqf8dwbkfrcb01srbywinaj5-check-pc-files-hook.sh<br>/nix/store/ha21dnn4nw858g8d0wrkvhyvp7zmqgnz-setup-hook.sh<br>/nix/store/jmif3w9zsykc13zrhw4y8pynnnxg27zn-cmake-3.24.2.tar.gz.drv<br>/nix/store/k845qxmkbra9fc4628lpi0q8yjmc1sx9-005-remove-systemconfiguration-dep.diff<br>/nix/store/ri7qddqm02y0w2g43zqqz8lzy2pbdgrk-002-application-services.diff<br>/nix/store/rq41inv92jszcs5x62nc5cci5hapbjpw-003-libuv-application-services.diff<br>/nix/store/23dflh1nkw215df7bfyy9ml3jd5ranrw-cmake-boot-3.24.2.drv<br>/nix/store/c14fh88kpi7gc627s1l19gdlipfrwd59-brotli-1.0.9.drv<br>/nix/store/rv3w6kch2d0l70r6h3kk2r5d8ca216hz-libobjc-11.0.0.drv<br>/nix/store/f07bc31w87jm2rjk8zap5xyf92ach79p-apple-framework-CoreFoundation-11.0.0.drv<br>/nix/store/k8xvsl4226pzy73ywglgx46h7scffpjq-gnu-config-2021-01-25.drv<br>/nix/store/h9gslm9dppn38plwa811yr5c03s5lw9w-ICU-66108.tar.gz.drv<br>/nix/store/mqvcwr74dcsqlib5crdcawk16dmdgj9h-ICU-66108.drv<br>/nix/store/rkr3wamhhf9ha9n89yimjwyazvf3ar6j-hook.drv<br>/nix/store/f0qv4kz20212qcnd9wsck36zk3r8isl9-curl-7.85.0.tar.bz2.drv<br>/nix/store/gdqnvkbp6nnrvww108adb7nvjgrpdxzb-7.79.1-darwin-no-systemconfiguration.patch<br>/nix/store/3bld52y6l8fg58gaj9b937qg6m7zbm16-krb5-1.20.tar.gz.drv<br>/nix/store/3xk9ps0qz073k641b88swpa4fgx3hzwg-nix-ssl-cert-file.patch<br>/nix/store/n3vnxwsnf75gz250yayipdga4ziidwpi-openssl-1.1.1q.tar.gz.drv<br>/nix/store/82cq1qadbgv5d6gxb11zgkxl530wvzxj-openssl-1.1.1q.drv<br>/nix/store/18vddqgdxg6xcv5iws1vv7fd152rag04-bootstrap_cmds-121.tar.gz.drv<br>/nix/store/jyci5k74rnj58fkalyil3pj28x7xnr3m-bootstrap_cmds-121.drv<br>/nix/store/hj7zxy2r8ib6s6fa669kr6hqdiv4l6s1-libkrb5-1.20.drv<br>/nix/store/z3h1d8wp61892ydalxldvb496ar0hiz6-libssh2-1.10.0.tar.gz.drv<br>/nix/store/zrh6il3gp9xa58ldg40d57kwgsvljyb1-openssl_add_support_for_libressl_3_5.patch<br>/nix/store/yf97cpb80lyvqgd0lnq82c4qkx7kpb9f-libssh2-1.10.0.drv<br>/nix/store/w5683845xkfzwlp8sgbax0farj5fzhpv-curl-7.85.0.drv<br>/nix/store/9rkj0y4cl1sbbzndzg01crdamv4813pg-bootstrap-stage2-stdenv-darwin.drv<br>/nix/store/labgzlb16svs1z7z9a6f49b5zi8hb11s-bash-5.1-p16.drv<br>/nix/store/hvl8g8b6n8m8dk16bdavvpg31g8zmk96-bootstrap-stage2-stdenv-darwin.drv<br>/nix/store/9lzpvga5gm5klwg28iv1hgf01g0hpfaa-hook.drv<br>/nix/store/96fgzfyknjaj6fc85ai2n68qfndbps02-hook.drv<br>/nix/store/6wky968nz63ndx7z6kppcada8cdj4hg8-bsdmake-24.drv<br>/nix/store/0w9k3ah3f9c0j7k4vxka74pi07x01bbv-adv_cmds-119.drv<br>/nix/store/2n3wbbh9sk778vkl1lsz58inmyvk2g3r-file-5.43.drv<br>/nix/store/bcv1p9lpghn2l1zcw21z7401qc8fnmvr-gnu-config-2021-01-25.drv<br>/nix/store/47msbw943yjc7hm6d13r9jl5cz0ih9x9-hook.drv<br>/nix/store/24a06br9jvy87sbanym8hijfq4j2dsqm-no-threads.patch<br>/nix/store/4a0sl25fn3ymdmaalxwvjk6a2xajy3cb-libcxxabi-11.1.0.src.tar.xz.drv<br>/nix/store/ccf2fg1l77aqbw3v8hiql7a4c54dr8lh-bootstrap-stage0-clang-wrapper-11.1.0.drv<br>/nix/store/bhmp58x5m3lkscnxs9zwscc4rxbz7fc4-bootstrap-stage2-stdenv-darwin.drv<br>/nix/store/db7hhqin9klk8qx344r2b3dhb4xrfiq6-llvm-11.1.0.src.tar.xz.drv<br>/nix/store/il3mvxijf7cc9ys09pcblff47ia93kk2-gnu-install-dirs.patch<br>/nix/store/z3pj61rk5h9ffbj5anhwbp3ah2qysvqf-libcxx-11.1.0.src.tar.xz.drv<br>/nix/store/fg68n6bycig5c23sw8yfn7nmgbj85v6x-libcxxabi-11.1.0.drv<br>/nix/store/wjgikzdk0fcbldspzlkyh0dvd8wa2say-patchutils-0.3.3.drv<br>/nix/store/3v9a47xl4w8kc8bff4daxvbg50008imh-19bc9ea480b60b607a3e303f20c7a3a2ea553369.patch.drv<br>/nix/store/c9w69kl4caarcs2j84hck0icrdj9jqr6-fix-darwin-dylib-names.sh<br>/nix/store/g958ikb42h89wl8rgx597l5h6k9n2cfx-fix-darwin-dylib-names-hook.drv<br>/nix/store/ym4y16msxvvpbcsc0s829has6v8mxg56-gnu-install-dirs.patch<br>/nix/store/hhn96pp2rk2bq1hipcr147hqfrgh80gk-libcxx-11.1.0.drv<br>/nix/store/rizgpw7ndpwy12kyr03mnlhhkfwzk75a-pcre-8.45.drv<br>/nix/store/m1pm94jj46gsmks3d11p44qdhqml9inm-gnugrep-3.7.drv<br>/nix/store/r2mi8209hbvfhyhjcxy6qqvyawf8s4k3-expand-response-params.drv<br>/nix/store/6yjiri44dy8c8lnjn0f14w8nvgs2fhf0-bootstrap-stage3-stdenv-darwin.drv<br>/nix/store/dlm9y4dfkjmcqrysf37kxfhlds9r9jng-hook.drv<br>/nix/store/q6x1zg4xsbzw7qv3qdcq2rny1n4pr5xk-hook.drv<br>/nix/store/iraif23i0p01sx6qq6jkry21v7g84wvi-bootstrap-stage0-clang-wrapper-11.1.0.drv<br>/nix/store/wpni47ni5xf8qms83in475fyn8z2ikf6-bootstrap-stage3-stdenv-darwin.drv<br>/nix/store/40ri4k2mfvs5wjwry47iqv30587p1jh0-patchutils-0.3.3.drv<br>/nix/store/0w90wllxcb2wyjbkxjacm0m3q2wfz702-uops-CMOV16rm-noreg.diff.drv<br>/nix/store/09q0yxa6ixb030mkw96j2za7h8dpbpc7-dejagnu-1.6.3.tar.gz.drv<br>/nix/store/fk7p458jm8ra2d6zf2y4nw1ykckvmnrr-tcl8.6.11-src.tar.gz.drv<br>/nix/store/5z49kw0iq4qyga5zxmmhw1fh2l6jiwjz-tcl-8.6.11.drv<br>/nix/store/g4c3jbhc8ag6db5py0xk2sicfy0hrpmw-tcl-package-hook.sh<br>/nix/store/a1ipqs2qcpbqyfmxgk6yi3yyl2f6pd62-tcl-package-hook.drv<br>/nix/store/4vq3350zc6sqnibkqpgic2d6cvi1r9hq-substitute-all.sh<br>/nix/store/5241l4i852qd9imqz3jgv9rv9gv701gk-fix-cross-compilation.patch<br>/nix/store/dhba38jjxia0b5snjrhvcl9dbjbdb3k0-fix-cross-compilation.patch.drv<br>/nix/store/gdag5rjmiv9iwgj8gnibcvzic5f1kwbp-0001-enable-cross-compilation.patch.drv<br>/nix/store/qcmyh5mgqv62zip6gkp2xjriklpbm0xv-expect5.45.4.tar.gz.drv<br>/nix/store/xpdirxij63a69jk43pgajjrgmv7gaajd-hook.drv<br>/nix/store/iag2icih50jb6wxn15a71jy9pix7jd15-expect-5.45.4.drv<br>/nix/store/nharms54shj3rhwzw2ywk4alfrgm5k1m-dejagnu-1.6.3.drv<br>/nix/store/2hc51kpv7vkbfpifjq28jbhm49wlphzw-libffi-3.4.3.drv<br>/nix/store/6wv8acdd7bm7npixgr3rk86mf55fj47c-llvm-config-link-static.patch<br>/nix/store/9fcwwdr92g5wzpj2wxf86f0zy5mn0h1v-zlib-1.2.12.drv<br>/nix/store/9fd3xdcfv1dw93y99a18lw735fx8kvgy-gnu-install-dirs.patch<br>/nix/store/g05jynqyglkf9if6y70822l2r6y3nkj5-ncurses-6.3-p20220507.drv<br>/nix/store/2mys4xnihsf6r5y0sbby0y3qcn22ggjw-4ad71c2d72beef0d10cf75aa417db10d77846f75.patch.drv<br>/nix/store/2nyygvchsc258gkqymnbzmh741wsizrf-libiconv-50.drv<br>/nix/store/i68qy2hwsvqx3haf36smqi3n4lg1wavm-5b2d07a72670513e41b481a9d922c983a64027ca.patch.drv<br>/nix/store/w8ma9ddjcfc3l3z4ng6rlwljxiw85fhv-hook.drv<br>/nix/store/j4h65frq4nx4kpl06sj5c3cz2lc9fdrz-libxml2-2.10.0.drv<br>/nix/store/kl8l1ci2ycc6y23vkxvjhlbz2p93zp3z-polly-11.1.0.src.tar.xz.drv<br>/nix/store/n1sl525i7qanfd75l8s1bbqn32fasma0-dfaemitter-gcc-12.patch.drv<br>/nix/store/qcb7ljbcrmgdf6xv0irgvdv6rivgj3md-nvptx-gcc-12.patch.drv<br>/nix/store/yzac3dpyb5cyndxjl0d9nrpwqmcz18dk-b498303066a63a203d24f739b2d2e0e56dca70d1.patch.drv<br>/nix/store/8vqfrpgwki8j8nk9j08g04vh1iqcm9bw-llvm-11.1.0.drv<br>/nix/store/2jlsizsg3hsj6p10cm11fx9rshsjwwri-clang-tools-extra-11.1.0.src.tar.xz.drv<br>/nix/store/34zhl915l308dpa7v2786z3xgbvy6398-purity.patch<br>/nix/store/akc6qlr586k4r5lwmj70i0mbb8wxz709-clang-11.1.0.src.tar.xz.drv<br>/nix/store/v2az1r12rfivd43pvq2s0brp60n54mqa-clang-11-12-LLVMgold-path.patch<br>/nix/store/bhdlpz3fgkzcrh94rsp76m0n0gwb6fxx-clang-11-12-LLVMgold-path.patch.drv<br>/nix/store/f91k74rxz9c8miqg843jf6dfq35jhpka-fix-darwin-dylib-names-hook.drv<br>/nix/store/yrskcbyfm56qm4vs9dnacg8mqpqx7qwx-gnu-install-dirs.patch<br>/nix/store/arqis7aqh6b9p3a90idcjnr21fp1d0c4-clang-11.1.0.drv<br>/nix/store/79xln4yb0zql3j1zvc72yfi1y6333crl-disable-rpath.patch<br>/nix/store/dvdql179kllliqznwkd307bvdny2h96h-source.drv<br>/nix/store/5ks4wyqmh20wzz3i2yyqky7g0g8jhmsk-libtapi-1100.0.11.drv<br>/nix/store/aipzgrzywrh1qgw2l3bigbnnwpyr61kn-source.drv<br>/nix/store/fz56qb3cymbf2acghsqmdgjwwklc411f-install-shell-files.drv<br>/nix/store/r9iy2wdkq3w0n1hbyg92c2sqg3vcbkhl-ld-ignore-rpath-link.patch<br>/nix/store/3jjd65b6nyg7g30ixszjcsgb08j5mmhn-0001-Add-useless-descriptions-to-AC_DEFINE.patch<br>/nix/store/f3ygraph3msfdkyrqg91j7smx1c78qnd-bzip2-1.0.8.drv<br>/nix/store/j3frsgc0zsrg2pg7w9pqmxjh6qd01aqs-0002-Use-pkg-config-for-libxml2.patch<br>/nix/store/y26ic2b9n1g1cng3s68753qcxd6fvqrq-xz-5.2.6.drv<br>/nix/store/yqdd6m0r80c5pn3z7wc1mhn1wqmyli4i-xar-1.6.1.tar.gz.drv<br>/nix/store/1m30bskfc8z8r4dhb2qv9sd7jyl92srx-xar-1.6.1.drv<br>/nix/store/7vs1bbfsk0w6p6n5c4bqs3mp7q6n9lyd-source.drv<br>/nix/store/paybkfdbyh40jzyv6l5ywsbaabqy1sav-pbzx-1.0.2.drv<br>/nix/store/vwlpvn89jh6h45dj8q9nin0iv7rw85qb-MacOSX-SDK-11.0.0.drv<br>/nix/store/vb56s92027cg2c6573dahs6830fhz9xk-libobjc-11.0.0.drv<br>/nix/store/zr59kiajvksmks3vl1hja2ybix9z2zqk-ld-rpath-nonfinal.patch<br>/nix/store/ldj50kzrjbzh8dzcb7mqqa5gqsmc33v9-cctools-port-949.0.1.drv<br>/nix/store/0df8rz15sp4ai6md99q5qy9lf0srji5z-0001-Revert-libtool.m4-fix-nm-BSD-flag-detection.patch<br>/nix/store/k1cgpjsl77c8wfaq0w7n6k1i7fvxr5p8-gas-dwarf-zero-PR29451.patch<br>/nix/store/lgniihp1bk6mkd5nn9y5ikfim2ignr52-0001-libtool.m4-update-macos-version-detection-block.patch<br>/nix/store/pa83jbilxjpv5d4f62l3as4wg2fri7r7-always-search-rpath.patch<br>/nix/store/dqgzlxvbzq4dih9ska9k0y91sc1kv7d9-autoconf-2.69.tar.xz.drv<br>/nix/store/s8wb99pw1w8yspcz26zfadsy0j1k70ww-autoconf-2.69.drv<br>/nix/store/sqbhaaayam0xw3a3164ks1vvbrdhl9vq-deterministic.patch<br>/nix/store/xrw086zw3xqsvy9injgil8n2qdkvkpff-0001-Revert-libtool.m4-fix-the-NM-nm-over-here-B-option-w.patch<br>/nix/store/zbdl2p9amxdkr9cqjq0yv6h0mr55lm3l-binutils-2.39.tar.bz2.drv<br>/nix/store/zki7kfvf2f0xdksq9hp004xz1hsxklz3-texinfo-6.8.drv<br>/nix/store/q1kz46q80wj4bfc314g5p3sylpilpv0i-binutils-2.39.drv<br>/nix/store/00fij0grbvf9svcxvyk5ys51qcpmk7sa-cctools-binutils-darwin-949.0.1.drv<br>/nix/store/17agldwh525770zc3w11sdkpdxq8xwjy-gnu-config-2021-01-25.drv<br>/nix/store/0kkx3whrs8zb85qwwvl42ax99hmk0xpz-pcre-8.45.drv<br>/nix/store/3qkad2sv1xwngyn4gmx473mzrjhs2jx8-gnugrep-3.7.drv<br>/nix/store/xn8bjkw4fmyr2xvk9higd54g9s7q2kdz-gmp-with-cxx-6.2.1.drv<br>/nix/store/hbby7876a2qhk93hlx5ppr3jpgm1lwkl-coreutils-9.1.drv<br>/nix/store/vj0ai85srlbfn0yvd6mdql2nxan24naa-post-link-sign-hook.drv<br>/nix/store/vsd7hdcfnzn5n4q44flcdiaa2lv58d6d-signing-utils.drv<br>/nix/store/z4gcxwcrzc0mkx0zgha8k4jr506kgns7-expand-response-params.drv<br>/nix/store/vnxdn7rjmsm0naz6sgb98flh437iff1g-cctools-binutils-darwin-wrapper-949.0.1.drv<br>/nix/store/5gm6pb695hmb0q26cyvmm0ish0p5yig0-clang-wrapper-11.1.0.drv<br>/nix/store/2cw54rrcb7plvq6v5hxsm3sb42kq6fk5-bootstrap-stage3-stdenv-darwin.drv<br>/nix/store/3ic95d8vv23cdj4vq7634zh5zcdsda1p-normalize-var.patch<br>/nix/store/3m53ki7pr92hacq8mghsldg1wc4wrifm-codesign.patch<br>/nix/store/706qcmh667cmjwffc4vbjs9c745c7hs0-gnu-install-dirs.patch<br>/nix/store/skwzly3754w50q8mzdpadz8bsfmn6hs8-compiler-rt-11.1.0.src.tar.xz.drv<br>/nix/store/y87vwjq5v1fi0d077xqrsnkqrax3p4iz-libsanitizer-no-cyclades-11.patch<br>/nix/store/ylv0v02l6panidz2hkh756fz363yc68h-X86-support-extension.patch<br>/nix/store/1ffkl3b9gb1qyvmz2r1633vzkhd5bxn2-compiler-rt-libc-11.1.0.drv<br>/nix/store/9k3fqaqk3k7m510nn57ynd4ngx2x4rxs-clang-wrapper-11.1.0.drv<br>/nix/store/mmdgxk0mpsq2lzlja8g6mrdjzxpc3wmq-hook.drv<br>/nix/store/s9rdswvsx68yjwfk57vlw5a34hbjsl2v-source.drv<br>/nix/store/hrp64mrc7ss3zz8gfl36jfq8fj8qwk2b-libyaml-0.2.5.drv<br>/nix/store/y7wqq0qnhnhd6hr5d2hxl967fjssfrny-source.drv<br>/nix/store/vy20n6yc3nd8d1yk0sqa6cah7dpyhv9s-rewrite-tbd-20201114.drv<br>/nix/store/sn11j0j89hflj7snivdlxvxawvrpzp01-apple-framework-CoreFoundation-11.0.0.drv<br>/nix/store/aawhsgywk753j170584pf3r6rlismpi6-bootstrap-stage4-stdenv-darwin.drv<br>/nix/store/qwxrck5ibwhhhsgyblc711vnvw5rx2ib-bootstrap-stage4-stdenv-darwin.drv<br>/nix/store/bs639bs7frzx60c8bh3nyzmak49zbc3k-hook.drv<br>/nix/store/cfkvf8l9jw3vrvkss3c5i1ccgnp86nv6-hook.drv<br>/nix/store/skm4ysx9pk4nnwx75fpk9vghzc130887-perl-5.36.0.drv<br>/nix/store/ma5p31xpqrcyk0z70l14m7cklw2zkb5s-patchutils-0.3.3.drv<br>/nix/store/lapsha9pivk9wvrwlrc482i2biq06gw5-CVE-2021-38185-2.patch.drv<br>/nix/store/ncfbi3qgbflyph4x2ngcnz2584kykzqa-CVE-2021-38185-1.patch.drv<br>/nix/store/pklid951p82izlw5f06w5yvpps1zwgxw-CVE-2021-38185-3.patch.drv<br>/nix/store/sp2alvzdl09796wpg2wdf68akiha4d4g-fno-common-fix.patch.drv<br>/nix/store/zmadr12vmal7mwlgy1w4w4x70lss6j73-cpio-2.13.tar.bz2.drv<br>/nix/store/d54hwx5g50niakv2lpb9lkp1jjk910q1-cpio-2.13.drv<br>/nix/store/4yn89klg688jxj8sidmzc84hl7ndcwkm-pkg-config-0.29.2.drv<br>/nix/store/416vhsxki7508q1ijs8n415fqmvjxyky-pkg-config-wrapper-0.29.2.drv<br>/nix/store/a736nzx1nigikprmk4ignqzndmz7ls0m-gettext-0.21.drv<br>/nix/store/2szis9v9c9dzazajlflfdc9jl3b0pihg-gnum4-1.4.19.drv<br>/nix/store/gbznai4iy45kxmlnrn56fn5m0x2rlspc-texinfo-6.8.drv<br>/nix/store/f33p3mlclvl3hhnnjsnzw70bshn7criz-autoconf-2.71.drv<br>/nix/store/dw19klga9vppaq2f6lzj9h7bl4c29mga-automake-1.16.5.drv<br>/nix/store/hizv414b6ky026kw5f4hwgm2lbxzh08y-perl5.36.0-gettext-1.07.drv<br>/nix/store/ccwg6bkak9j236lc6k0n713iyn12k996-help2man-1.49.2.drv<br>/nix/store/jx8mci3vwqi9qv1wkbrfpjya00nl285j-file-5.43.drv<br>/nix/store/lahdhba85rpm60wxmhxanq1dqi8sa5kb-libtool-2.4.7.drv<br>/nix/store/g69zz30gq1rb85b6kdz5iidxxbwp1bda-hook.drv<br>/nix/store/hb2yk99cw015si2ry1l1fygp365as523-openssl-3.0.5.drv<br>/nix/store/cv65milx0bs2fk1xikgrgrhvkafkpqdk-xar-1.6.1.drv<br>/nix/store/9wfpm5alc542isr7232gg4qg5njdsgdq-unzip-6.0.drv<br>/nix/store/ggp35l799v2ggwsk73sz61y7wg3kpqy1-source.drv<br>/nix/store/msvf870j9sr6lwzakv6m263gk0r7126z-pbzx-1.0.2.drv<br>/nix/store/0b2hxys6lxyh567j82addkw2k36qjzgz-MacOSX-SDK-11.0.0.drv<br>/nix/store/0c1ijhg1cq01zcrvnhg24vhm5qn47kwd-libev-4.33.drv<br>/nix/store/0fqp7dz3rlrrhqjfc69wkmii3j5y0g7d-make-4.3.tar.gz.drv<br>/nix/store/bqlikyzhzhsjfirhzgmps9p99mhvn9az-bison-3.8.2.drv<br>/nix/store/c3kdwmns3lyigqqm6c4czisv0n226dy7-source.drv<br>/nix/store/hp3krbr0v290hwgrcskls6kk545virpz-flex-2.6.4.drv<br>/nix/store/mdihpwmpbkv1wg4yw03d7wy3fbs0l45w-bsdmake-24.drv<br>/nix/store/ln3xll7z1avhm03k3m8cdllln7wdgrrk-adv_cmds-119.drv<br>/nix/store/gs103r2mxcsjs3sw0ibvlnsv54qcw9q6-ps-adv_cmds-119.drv<br>/nix/store/94y4s4a30p8qqfg8bxr9rgwkdc9m3610-cmake-boot-3.24.2.drv<br>/nix/store/n91acyjrlchm0snw0w16i4683pf788ax-playtests-darwin.patch<br>/nix/store/vfb2ll7c9aq63mlkkvmvfq4ibiinq5nh-source.drv<br>/nix/store/vhp9nf4r8328m91l9l5c8fd9wlmb4bnd-fix-darwin-dylib-names-hook.drv<br>/nix/store/0w2r0sw68fwxqqki50mqx83iz1q6clgq-zstd-1.5.2.drv<br>/nix/store/4rj3r6gga5ipdfkiw9ahmrj9yr411ry6-libobjc-11.0.0.drv<br>/nix/store/vc3jlishkiy0qsw95smzzzr9vcgafi56-source.drv<br>/nix/store/jhs384scb8wk3sn9dw92khjpay91x9mg-libtapi-1100.0.11.drv<br>/nix/store/ylsnxqqfn3gpp0wr133z4ksj2bhklrg7-source.drv<br>/nix/store/z8gyza1abwd7jh3pv10r6kcrgphi2h2r-install-shell-files.drv<br>/nix/store/0xwx3m2lvpw92w4j45n1772f3aimskxg-cctools-port-949.0.1.drv<br>/nix/store/0y5flakfvnf813cwrr8rygf1jnk0gfnc-CVE-2019-13636.patch<br>/nix/store/4r8s8hcwyvvvnpcncps09zscqkh5qapx-no-install-statedir.patch<br>/nix/store/bljrd66ff2vp1zqikdfrz5x0k90kaw81-findutils-4.9.0.tar.xz.drv<br>/nix/store/10zrhmiqirncfbxyac8xrjg6p8mqf30k-findutils-4.9.0.drv<br>/nix/store/53d5wfhiifvxzgj847fva6q6py02m1g1-expand-response-params.drv<br>/nix/store/c2yrfg597pjcl1867pyir9jiq4fw3jl4-source.drv<br>/nix/store/9h8631c24qp90y7w0fvsl3c0dv8pv6pi-sigtool-0.1.2.drv<br>/nix/store/anpnd9wprrqhf1fdcwy96j66vb5fcsii-signing-utils.drv<br>/nix/store/5xzxmr5xpnqx0b0ar0kpy7kw0282a1jc-autoconf-2.69.drv<br>/nix/store/a921f1jk651ahri5f05gca9rwdiq3rlz-binutils-2.39.drv<br>/nix/store/laack7baw4rfxgvyqfrfydbn1v8zz9b6-clang-11-12-LLVMgold-path.patch.drv<br>/nix/store/d7h3zix26zzgdp0rzsyb19hrif8cbzmz-clang-11.1.0.drv<br>/nix/store/jxpxgb5hph4lw3s12g7lyqz0ci8a37ra-cctools-binutils-darwin-949.0.1.drv<br>/nix/store/w3hhid4crxafa1j03iq4a1y30d8p0sk2-post-link-sign-hook.drv<br>/nix/store/5w0k8f3ialhwr7p5g0y94zny3j74ryzn-cctools-binutils-darwin-wrapper-949.0.1.drv<br>/nix/store/74fhpxplxsc5qg1c67hb5picw88flx3d-libssh2-1.10.0.drv<br>/nix/store/76nc36kgrvhx8n9m8jz7ywrrqbcdkr48-gnu-config-2021-01-25.drv<br>/nix/store/9wyqdma0i671db7l4m0a3qbp6jpza2vi-tar-1.34.tar.xz.drv<br>/nix/store/90phqk429ip6kbi5jlm0lcg4h2xxaq2k-gnutar-1.34.drv<br>/nix/store/2j0fmwgm5ybgnc8jprc4ypcxw6s4r2nv-Allow_input_files_to_be_missing_for_ed-style_patches.patch<br>/nix/store/7mq3l9rhjbmpf06fwnrp51q6sy1l6g9j-patch-2.7.6.tar.xz.drv<br>/nix/store/8p3z4jsrxr5ck92iasc9bc7bmapb5mmg-CVE-2018-6951.patch<br>/nix/store/h2fcbw7ghgn3i4qadszdp272w4dab7ln-lzip-setup-hook.sh<br>/nix/store/vvciv7wkw3z9x0bj4jszb31crk0lix8y-lzip-1.23.tar.gz.drv<br>/nix/store/6gj38dbipcd2vbjcsv028jmpnn6bv1sz-lzip-1.23.drv<br>/nix/store/bv0xxgk72g693vdgs3w2w3d252hlxys9-ed-1.18.tar.lz.drv<br>/nix/store/lmssb21nd3zkv5gssngmk92bdf0q4h1w-ed-1.18.drv<br>/nix/store/npqvgz8c8w9kpj1gdma5bbn0pdkisyzp-CVE-2018-6952.patch<br>/nix/store/rxgi2l6jrgd5xmrrsbcv5cwi558lb36m-CVE-2019-13638-and-CVE-2018-20969.patch<br>/nix/store/sz6rhpf50kqh75fhqwl75q6dm6fr9xyd-CVE-2018-1000156.patch<br>/nix/store/aqmy225ay8m4yg51mib0bkpz3r1w2z7j-patch-2.7.6.drv<br>/nix/store/2k52bklbjhhq47dn35gm833vlh06fgfn-0001-No-impure-bin-sh.patch<br>/nix/store/6cc64ayl3fd2nc28ffw47cqsqi2bg1sn-0002-remove-impure-dirs.patch<br>/nix/store/avhna3r651j0frjk7jhy771za84mlh4j-gnumake-4.3.drv<br>/nix/store/b7mkkj1kbaxpihqh3k12s4a3viz9pdvk-hook.drv<br>/nix/store/dy63w31j33lknbd95fl81f24sndlgf35-source.drv<br>/nix/store/bl8jncx9dy4rr54cn8p1vwpf3wa01yyj-brotli-1.0.9.drv<br>/nix/store/rp4wqqv22pjl2235ra7ag3nb7yy0b5kr-diffutils-3.8.tar.xz.drv<br>/nix/store/d554acfihg4ssgij79ybd6ls0ww1p14x-diffutils-3.8.drv<br>/nix/store/szfjhkhmsxfyc289vz39882d3l866888-fix-error-darwin.patch<br>/nix/store/z8912zv98rl5yv104mf99j3k72xva3nr-libidn2-2.3.2.tar.gz.drv<br>/nix/store/qhs49gbxssyr8im8h2xc058gh4kdndv6-libunistring-1.0.tar.gz.drv<br>/nix/store/zipavm2mq94fsw09kx9mw7pi5n8xhkp4-libunistring-1.0.drv<br>/nix/store/gzy4kvn6djdm9b631fcm3g76pijsvvq7-libidn2-2.3.2.drv<br>/nix/store/hvp22x3rmpwfj6kcf0hj9dcv8lrkd4hs-clang-wrapper-11.1.0.drv<br>/nix/store/xhmwfi4xij5ryg9x2j0n6067ki55dscr-c-ares-1.18.1.drv<br>/nix/store/qpsbvsn7dl8gmlsmh474m2h9gmh8mg7i-nghttp2-1.49.0.drv<br>/nix/store/lwhmzpa1py1k244hfd3l026kc7r7b6ib-sed-4.8.tar.xz.drv<br>/nix/store/rvq62srcss99303nbgr94bq4av9kjv8q-gnused-4.8.drv<br>/nix/store/pid9is7y02wzdplvk6jcw2n0vfdh2y32-openssl-1.1.1q.drv<br>/nix/store/pz4hlrs0xa3q9knmn83v8v3wpf88iigz-bootstrap_cmds-121.drv<br>/nix/store/6m3w5kmj2m73nj3pakh6kaqjs2k64p5m-libkrb5-1.20.drv<br>/nix/store/sa6lxl61bh1wmr9rbpbyiq5wg2y5kbf2-curl-7.85.0.drv<br>/nix/store/vff2y41m68f5garsjmjxc0xfjrvw9pfm-setup-hook.drv<br>/nix/store/w99jp1rsykvc8rb09hr03c0rakw2dgzc-gzip-1.12.tar.xz.drv<br>/nix/store/swj6qdzryq4ln3h172s4h45wf0ks7g4j-gzip-1.12.drv<br>/nix/store/v994hjy8kmwi7g5li2lrpss92ldj0a54-ICU-66108.drv<br>/nix/store/pmxi9k28qls2yr7jhfnz3qp1fjchy64m-gawk-5.1.1.tar.xz.drv<br>/nix/store/x9ndmqlkrngf4jdy4zmvmal9ma7gh3z0-gawk-5.1.1.drv<br>/nix/store/5pfijbmkmy5kc81yzp0lpm4gpm2aq5rk-source.drv<br>/nix/store/zf7v9n0hxgb302wf08y762s0rhsbnqd2-source.drv<br>/nix/store/qr3r1g7n6xppyxb88726z7yr6r246nzd-libyaml-0.2.5.drv<br>/nix/store/91bfp6zivp9jq9sqq6iqq7vdpghdaffa-rewrite-tbd-20201114.drv<br>/nix/store/ya29pfy418vy1l0i5symnyprdb80c8ha-apple-framework-CoreFoundation-11.0.0.drv<br>/nix/store/cdk3pz11mvhqpphr0197wwmzhqppn7rl-stdenv-darwin.drv<br>/nix/store/26z459l0k3znhr99dsshkzj0il8dhwxx-perl-5.36.0.drv<br>/nix/store/sbcibnd6hym9c2rlbfnyhrbmlvgmsa59-stdenv-darwin.drv<br>/nix/store/sr9iyw9n2awaikjzvjfgwhvvn6vimf5w-pkg-config-0.29.2.drv<br>/nix/store/3zmkapnjbnajncxw7cix0lmj1fbspwa0-pkg-config-wrapper-0.29.2.drv<br>/nix/store/7dlkjg6cyd8d47qwiamxi77hld2z5360-mirrors-list.drv<br>/nix/store/i0zc5mm4vpj3lviyydb9s73j53mypkrg-nghttp2-1.49.0.drv<br>/nix/store/w37b5s734m53gxnzqyb5v0v98mhdfg2i-coreutils-9.1.drv<br>/nix/store/mmsrbggvzn6rwlx1ijw90sw3wvhzj18j-openssl-3.0.5.drv<br>/nix/store/n7iibs6b818v402j0yczf4mgy73sbzpv-libssh2-1.10.0.drv<br>/nix/store/z074ki54p77r7db3wsgxh9p18f67xnv8-curl-7.85.0.drv<br>/nix/store/hwymznwkd1kgf5ldcldjl9bnc1wz2azb-hello-2.12.1.tar.gz.drv<br>/nix/store/4a78f0s4p5h2sbcrrzayl5xas2i7zq1m-hello-2.12.1.drv</code></pre></details><p>The above command not only lists the build-time dependencies for the <code>hello</code> package, but also their transitive build-time dependencies. In other words, these are all the derivations needed to build the <code>hello</code> package â€œfrom scratchâ€� in the absence of any cache products. We can see the complete tree of build-time dependencies like this:</p><div class="sourceCode" id="cb16"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb16-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb16-1" tabindex="-1"></a><span class="ex">$</span> nix-store <span class="at">--query</span> <span class="at">--tree</span> <span class="st">&quot;</span><span class="va">${DERIVATION}</span><span class="st">&quot;</span></span><br><span id="cb16-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb16-2" tabindex="-1"></a><span class="ex">/nix/store/4a78f0s4p5h2sbcrrzayl5xas2i7zq1m-hello-2.12.1.drv</span></span><br><span id="cb16-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb16-3" tabindex="-1"></a><span class="ex">â”œâ”€â”€â”€/nix/store/9krlzvny65gdc8s7kpb6lkx8cd02c25b-default-builder.sh</span></span><br><span id="cb16-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb16-4" tabindex="-1"></a><span class="ex">â”œâ”€â”€â”€/nix/store/labgzlb16svs1z7z9a6f49b5zi8hb11s-bash-5.1-p16.drv</span></span><br><span id="cb16-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb16-5" tabindex="-1"></a><span class="ex">â”‚</span>   â”œâ”€â”€â”€/nix/store/7kcayxwk8khycxw1agmcyfm9vpsqpw4s-bootstrap-tools.drv</span><br><span id="cb16-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb16-6" tabindex="-1"></a><span class="ex">â”‚</span>   â”‚   â”œâ”€â”€â”€/nix/store/3glray2y14jpk1h6i599py7jdn3j2vns-mkdir.drv</span><br><span id="cb16-7"><a href="https://www.haskellforall.com/feeds/posts/default#cb16-7" tabindex="-1"></a><span class="ex">â”‚</span>   â”‚   â”œâ”€â”€â”€/nix/store/50ql5q0raqkcydmpi6wqvnhs9hpdgg5f-cpio.drv</span><br><span id="cb16-8"><a href="https://www.haskellforall.com/feeds/posts/default#cb16-8" tabindex="-1"></a><span class="ex">â”‚</span>   â”‚   â”œâ”€â”€â”€/nix/store/81xahsrhpn9mbaslgi5sz7gsqra747d4-unpack-bootstrap-tools-<span class="op">&gt;</span></span><br><span id="cb16-9"><a href="https://www.haskellforall.com/feeds/posts/default#cb16-9" tabindex="-1"></a><span class="ex">â”‚</span>   â”‚   â”œâ”€â”€â”€/nix/store/fzbk4fnbjqhr0l1scx5fspsx5najbrbm-bootstrap-tools.cpio.bz<span class="op">&gt;</span></span><br><span id="cb16-10"><a href="https://www.haskellforall.com/feeds/posts/default#cb16-10" tabindex="-1"></a><span class="ex">â”‚</span>   â”‚   â”œâ”€â”€â”€/nix/store/gxzl4vmccqj89yh7kz62frkxzgdpkxmp-sh.drv</span><br><span id="cb16-11"><a href="https://www.haskellforall.com/feeds/posts/default#cb16-11" tabindex="-1"></a><span class="ex">â”‚</span>   â”‚   â””â”€â”€â”€/nix/store/pjbpvdy0gais8nc4sj3kwpniq8mgkb42-bzip2.drv</span><br><span id="cb16-12"><a href="https://www.haskellforall.com/feeds/posts/default#cb16-12" tabindex="-1"></a><span class="ex">â”‚</span>   â”œâ”€â”€â”€/nix/store/3lhw0v2wyzimzl96xfsk6psfmzh38irh-bash51-007.drv</span><br><span id="cb16-13"><a href="https://www.haskellforall.com/feeds/posts/default#cb16-13" tabindex="-1"></a><span class="ex">â”‚</span>   â”‚   â”œâ”€â”€â”€/nix/store/7kcayxwk8khycxw1agmcyfm9vpsqpw4s-bootstrap-tools.drv [..<span class="op">&gt;</span></span><br><span id="cb16-14"><a href="https://www.haskellforall.com/feeds/posts/default#cb16-14" tabindex="-1"></a><span class="ex">â”‚</span>   â”‚   â”œâ”€â”€â”€/nix/store/nbxwxwqwcr9rrmxb6gb532f18102815x-bootstrap-stage0-stdenv<span class="op">&gt;</span></span><br><span id="cb16-15"><a href="https://www.haskellforall.com/feeds/posts/default#cb16-15" tabindex="-1"></a><span class="ex">â”‚</span>   â”‚   â”‚   â”œâ”€â”€â”€/nix/store/1i5y55x4b4m9qkx5dqbmr1r6bvrqbanw-multiple-outputs.sh</span><br><span id="cb16-16"><a href="https://www.haskellforall.com/feeds/posts/default#cb16-16" tabindex="-1"></a><span class="ex">â”‚</span>   â”‚   â”‚   â”œâ”€â”€â”€/nix/store/59jmzisg8fkm9c125fw384dqq1np602l-move-docs.sh</span><br><span id="cb16-17"><a href="https://www.haskellforall.com/feeds/posts/default#cb16-17" tabindex="-1"></a><span class="ex">â”‚</span>   â”‚   â”‚   â”œâ”€â”€â”€/nix/store/7kcayxwk8khycxw1agmcyfm9vpsqpw4s-bootstrap-tools.drv<span class="op">&gt;</span></span><br><span id="cb16-18"><a href="https://www.haskellforall.com/feeds/posts/default#cb16-18" tabindex="-1"></a><span class="ex">â”‚</span>   â”‚   â”‚   â”œâ”€â”€â”€/nix/store/bnj8d7mvbkg3vdb07yz74yhl3g107qq5-patch-shebangs.sh</span><br><span id="cb16-19"><a href="https://www.haskellforall.com/feeds/posts/default#cb16-19" tabindex="-1"></a><span class="ex">â”‚</span>   â”‚   â”‚   â”œâ”€â”€â”€/nix/store/cickvswrvann041nqxb0rxilc46svw1n-prune-libtool-files<span class="op">&gt;</span></span><br><span id="cb16-20"><a href="https://www.haskellforall.com/feeds/posts/default#cb16-20" tabindex="-1"></a><span class="ex">â”‚</span>   â”‚   â”‚   â”œâ”€â”€â”€/nix/store/ckzrg0f0bdyx8rf703nc61r3hz5yys9q-builder.sh</span><br><span id="cb16-21"><a href="https://www.haskellforall.com/feeds/posts/default#cb16-21" tabindex="-1"></a><span class="ex">â”‚</span>   â”‚   â”‚   â”œâ”€â”€â”€/nix/store/fyaryjvghbkpfnsyw97hb3lyb37s1pd6-move-lib64.sh</span><br><span id="cb16-22"><a href="https://www.haskellforall.com/feeds/posts/default#cb16-22" tabindex="-1"></a><span class="ex">â”‚</span>   â”‚   â”‚   â”œâ”€â”€â”€/nix/store/g8xg0i02aqwhgxwd2vnp5ax3d6lrkg1v-strip.sh</span><br><span id="cb16-23"><a href="https://www.haskellforall.com/feeds/posts/default#cb16-23" tabindex="-1"></a><span class="ex">â”‚</span>   â”‚   â”‚   â”œâ”€â”€â”€/nix/store/jngr4r80x5jn482ckqrfh08ljrx1k86f-setup.sh</span><br><span id="cb16-24"><a href="https://www.haskellforall.com/feeds/posts/default#cb16-24" tabindex="-1"></a><span class="ex">â”‚</span>   â”‚   â”‚   â”œâ”€â”€â”€/nix/store/kd4xwxjpjxi71jkm6ka0np72if9rm3y0-move-sbin.sh</span><br><span id="cb16-25"><a href="https://www.haskellforall.com/feeds/posts/default#cb16-25" tabindex="-1"></a><span class="ex">â”‚</span>   â”‚   â”‚   â”œâ”€â”€â”€/nix/store/kxw6q8v6isaqjm702d71n2421cxamq68-make-symlinks-relat<span class="op">&gt;</span></span><br><span id="cb16-26"><a href="https://www.haskellforall.com/feeds/posts/default#cb16-26" tabindex="-1"></a><span class="ex">â”‚</span>   â”‚   â”‚   â”œâ”€â”€â”€/nix/store/m54bmrhj6fqz8nds5zcj97w9s9bckc9v-compress-man-pages.<span class="op">&gt;</span></span><br><span id="cb16-27"><a href="https://www.haskellforall.com/feeds/posts/default#cb16-27" tabindex="-1"></a><span class="ex">â”‚</span>   â”‚   â”‚   â”œâ”€â”€â”€/nix/store/ngg1cv31c8c7bcm2n8ww4g06nq7s4zhm-set-source-date-epo<span class="op">&gt;</span></span><br><span id="cb16-28"><a href="https://www.haskellforall.com/feeds/posts/default#cb16-28" tabindex="-1"></a><span class="ex">â”‚</span>   â”‚   â”‚   â””â”€â”€â”€/nix/store/wlwcf1nw2b21m4gghj70hbg1v7x53ld8-reproducible-builds<span class="op">&gt;</span></span><br><span id="cb16-29"><a href="https://www.haskellforall.com/feeds/posts/default#cb16-29" tabindex="-1"></a><span class="ex">â”‚</span>   â”‚   â”œâ”€â”€â”€/nix/store/i65va14cylqc74y80ksgnrsaixk39mmh-mirrors-list.drv</span><br><span id="cb16-30"><a href="https://www.haskellforall.com/feeds/posts/default#cb16-30" tabindex="-1"></a><span class="ex">â”‚</span>   â”‚   â”‚   â”œâ”€â”€â”€/nix/store/7kcayxwk8khycxw1agmcyfm9vpsqpw4s-bootstrap-tools.drv<span class="op">&gt;</span></span><br><span id="cb16-31"><a href="https://www.haskellforall.com/feeds/posts/default#cb16-31" tabindex="-1"></a><span class="ex">â”‚</span>   â”‚   â”‚   â”œâ”€â”€â”€/nix/store/nbxwxwqwcr9rrmxb6gb532f18102815x-bootstrap-stage0-st<span class="op">&gt;</span></span><br><span id="cb16-32"><a href="https://www.haskellforall.com/feeds/posts/default#cb16-32" tabindex="-1"></a><span class="ex">â”‚</span>   â”‚   â”‚   â””â”€â”€â”€/nix/store/ycwm35msmsdi2qgjax1slmjffsmwy8am-write-mirror-list.sh</span><br><span id="cb16-33"><a href="https://www.haskellforall.com/feeds/posts/default#cb16-33" tabindex="-1"></a><span class="ex">â”‚</span>   â”‚   â””â”€â”€â”€/nix/store/lphxcbw5wqsjskipaw1fb8lcf6pm6ri6-builder.sh</span><br><span id="cb16-34"><a href="https://www.haskellforall.com/feeds/posts/default#cb16-34" tabindex="-1"></a><span class="ex">â€¦</span></span></code></pre></div><p>If we were to build and cache all of these build-time dependencies then our local <code>/nix/store</code> and cache would explode in size. Also, we do <em>not</em> need to do this because there is a better solution â€¦</p><h4 id="correct-solution">Correct solution</h4><p>The solution that provides the best value is to cache all transitive build-time dependencies <em>that are present within the current <code>/nix/store</code></em> after building the top-level build product. In other words, donâ€™t bother to predict which build-time dependencies we need; instead, empirically infer which ones to cache based on which ones Nix installed and used along the way.</p><p>This is not only more accurate, but itâ€™s also more efficient: we donâ€™t need to build or download anything new because weâ€™re only caching things we already locally installed.</p><p>As a matter of fact, the <code>nix-store</code> command already supports this use case quite well. If you consult the documentation for the <code>--requisites</code> flag, youâ€™ll find this gem:</p><pre><code>       â€¢ --requisites; -R<br>         Prints out the closure (../glossary.md) of the store path paths.<br><br>         This query has one option:<br><br><br>         â€¢ --include-outputs Also include the existing output paths of store<br>           derivations, and their closures.<br><br>         This query can be used to implement various kinds of deployment. A<br>         source deployment is obtained by distributing the closure of a store<br>         derivation. A binary deployment is obtained by distributing the closure<br>         of an output path. A cache deployment (combined source/binary<br>         deployment, including binaries of build-time-only dependencies) is<br>         obtained by distributing the closure of a store derivation and<br>         specifying the option --include-outputs.</code></pre><p>Weâ€™re specifically interested in a â€œcache deploymentâ€�, so weâ€™re going to do exactly what the documentation says and use the <code>--include-outputs</code> flag in conjunction with the <code>--requisites</code> flag. In other words, the <code>--include-outputs</code> flag was expressly created for this use case!</p><p>So here is the simplest, but least robust, version of the script for computing the set of build-time dependencies to cache, as a Bash array:</p><div class="sourceCode" id="cb18"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb18-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb18-1" tabindex="-1"></a><span class="ex">$</span> <span class="co"># Continue reading before using this code; there's a more robust version later</span></span><br><span id="cb18-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb18-2" tabindex="-1"></a></span><br><span id="cb18-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb18-3" tabindex="-1"></a><span class="ex">$</span> <span class="co"># Optional: Perform the build if you haven't already</span></span><br><span id="cb18-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb18-4" tabindex="-1"></a><span class="ex">$</span> nix build <span class="st">&quot;</span><span class="va">${BUILD}</span><span class="st">&quot;</span></span><br><span id="cb18-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb18-5" tabindex="-1"></a></span><br><span id="cb18-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb18-6" tabindex="-1"></a><span class="ex">$</span> DERIVATION=<span class="st">&quot;</span><span class="va">$(</span><span class="ex">nix</span> path-info <span class="at">--derivation</span> <span class="st">&quot;</span><span class="va">${BUILD}</span><span class="st">&quot;</span><span class="va">)</span><span class="st">&quot;</span></span><br><span id="cb18-7"><a href="https://www.haskellforall.com/feeds/posts/default#cb18-7" tabindex="-1"></a></span><br><span id="cb18-8"><a href="https://www.haskellforall.com/feeds/posts/default#cb18-8" tabindex="-1"></a><span class="ex">$</span> DEPENDENCIES=<span class="er">(</span><span class="va">$(</span><span class="ex">nix-store</span> <span class="at">--query</span> <span class="at">--requisites</span> <span class="at">--include-outputs</span> <span class="st">&quot;</span><span class="va">${DERIVATION}</span><span class="st">&quot;</span><span class="va">)</span><span class="kw">)</span></span><br><span id="cb18-9"><a href="https://www.haskellforall.com/feeds/posts/default#cb18-9" tabindex="-1"></a></span><br><span id="cb18-10"><a href="https://www.haskellforall.com/feeds/posts/default#cb18-10" tabindex="-1"></a><span class="ex">$</span> nix store sign <span class="at">--key-file</span> <span class="st">&quot;</span><span class="va">${KEY_FILE}</span><span class="st">&quot;</span> <span class="at">--recursive</span> <span class="st">&quot;</span><span class="va">${DEPENDENCIES</span><span class="op">[@]</span><span class="va">}</span><span class="st">&quot;</span></span><br><span id="cb18-11"><a href="https://www.haskellforall.com/feeds/posts/default#cb18-11" tabindex="-1"></a></span><br><span id="cb18-12"><a href="https://www.haskellforall.com/feeds/posts/default#cb18-12" tabindex="-1"></a><span class="ex">$</span> nix copy <span class="at">--to</span> <span class="st">&quot;</span><span class="va">${CACHE}</span><span class="st">&quot;</span> <span class="st">&quot;</span><span class="va">${DEPENDENCIES</span><span class="op">[@]</span><span class="va">}</span><span class="st">&quot;</span></span></code></pre></div><p>The above code is simple and clear enough to illustrate the idea, but weâ€™re going to make a few adjustments to make this code more robust.</p><p>Specifically, weâ€™re going to:</p><ul><li><p>Change the code to support an array of build targets</p><p>i.e.Â <code>BUILDS</code> instead of <code>BUILD</code></p></li><li><p>Use <code>mapfile</code> instead of <code>($(â€¦))</code> to create intermediate arrays</p><p>See: <a href="https://www.shellcheck.net/wiki/SC2207"><code>SC2207</code></a></p></li><li><p>Use <code>xargs</code> to handle command line length limits</p></li></ul><p>â€¦ which gives us:</p><div class="sourceCode" id="cb19"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb19-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb19-1" tabindex="-1"></a><span class="ex">$</span> <span class="co"># Optional: Perform the build if you haven't already</span></span><br><span id="cb19-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb19-2" tabindex="-1"></a><span class="ex">$</span> echo <span class="st">&quot;</span><span class="va">${BUILDS</span><span class="op">[@]</span><span class="va">}</span><span class="st">&quot;</span> <span class="kw">|</span> <span class="fu">xargs</span> nix build</span><br><span id="cb19-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb19-3" tabindex="-1"></a></span><br><span id="cb19-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb19-4" tabindex="-1"></a><span class="ex">$</span> mapfile <span class="at">-t</span> DERIVATIONS <span class="op">&lt;</span> <span class="op">&lt;(</span><span class="bu">echo</span> <span class="st">&quot;</span><span class="va">${BUILDS</span><span class="op">[@]</span><span class="va">}</span><span class="st">&quot;</span> <span class="kw">|</span> <span class="fu">xargs</span> nix path-info <span class="at">--derivation</span><span class="op">)</span></span><br><span id="cb19-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb19-5" tabindex="-1"></a></span><br><span id="cb19-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb19-6" tabindex="-1"></a><span class="ex">$</span> mapfile <span class="at">-t</span> DEPENDENCIES <span class="op">&lt;</span> <span class="op">&lt;(</span><span class="bu">echo</span> <span class="st">&quot;</span><span class="va">${DERIVATIONS</span><span class="op">[@]</span><span class="va">}</span><span class="st">&quot;</span> <span class="kw">|</span> <span class="fu">xargs</span> nix-store <span class="at">--query</span> <span class="at">--requisites</span> <span class="at">--include-outputs</span><span class="op">)</span></span><br><span id="cb19-7"><a href="https://www.haskellforall.com/feeds/posts/default#cb19-7" tabindex="-1"></a></span><br><span id="cb19-8"><a href="https://www.haskellforall.com/feeds/posts/default#cb19-8" tabindex="-1"></a><span class="ex">$</span> echo <span class="st">&quot;</span><span class="va">${DEPENDENCIES</span><span class="op">[@]</span><span class="va">}</span><span class="st">&quot;</span> <span class="kw">|</span> <span class="fu">xargs</span> nix store sign <span class="at">--key-file</span> <span class="st">&quot;</span><span class="va">${KEY_FILE}</span><span class="st">&quot;</span> <span class="at">--recursive</span></span><br><span id="cb19-9"><a href="https://www.haskellforall.com/feeds/posts/default#cb19-9" tabindex="-1"></a></span><br><span id="cb19-10"><a href="https://www.haskellforall.com/feeds/posts/default#cb19-10" tabindex="-1"></a><span class="ex">$</span> echo <span class="st">&quot;</span><span class="va">${DEPENDENCIES</span><span class="op">[@]</span><span class="va">}</span><span class="st">&quot;</span> <span class="kw">|</span> <span class="fu">xargs</span> nix copy <span class="at">--to</span> <span class="st">&quot;</span><span class="va">${CACHE}</span><span class="st">&quot;</span></span></code></pre></div><p>â€¦ where you:</p><ul><li><p>replace <code>BUILDS</code> with a Bash array containing what you want to build</p><p>e.g.Â <code>.#example</code> or <code>nixpkgs#hello</code></p></li><li><p>replace <code>CACHE</code> with whatever store you use as your cache</p><p>e.g.Â <code>s3://cache.example.com</code></p></li><li><p>replace <code>KEY_FILE</code> with the path to your cache signing key</p></li></ul><h4 id="conclusion">Conclusion</h4><p>That last script is the pedantically robust way to do this in Bash if you want to be super paranoid. The above script might not work in other shells, but hopefully this post was sufficiently clear that you can adapt the script to your needs.</p><p>If I made any mistakes in the above post, let me know and I can fix them.</p></div>
    </content>
    <updated>2022-10-24T12:26:45Z</updated>
    <published>2022-10-24T12:26:00Z</published>
    <author>
      <name>Gabriella Gonzalez</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/01917800488530923694</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-1777990983847811806</id>
      <author>
        <name>Gabriella Gonzalez</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/01917800488530923694</uri>
      </author>
      <link href="https://www.haskellforall.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml">
      <link href="https://www.blogger.com/feeds/1777990983847811806/posts/default" rel="self" type="application/atom+xml">
      <link href="https://www.haskellforall.com/" rel="alternate" type="text/html">
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html">
      <link href="https://www.blogger.com/feeds/1777990983847811806/posts/default?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml">
      <title>Haskell for all</title>
      <updated>2022-11-14T19:18:39Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:,2022:/prog/interval-search-2</id>
    <link href="https://blog.plover.com/prog/interval-search-2.html" rel="alternate" type="text/html">
    <title>This search algorithm is usually called &quot;group testing&quot;</title>
    <content type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p>Yesterday <a href="https://blog.plover.com/prog/interval-search.html">I described an algorithm</a>
that locates the ‘bad’ items among a set of items, and asked:</p>

<blockquote>
  <p>does this technique have a name?
  If I wanted to tell someone to use it, what would I say?</p>
</blockquote>

<p>The answer is: this is <a href="https://en.wikipedia.org/wiki/group_testing">group testing</a>, or, more
exactly, the “binary splitting” version of <em>adaptive</em> group testing,
in which we are allowed to adjust the testing strategy as we go along.
There is also <em>non-adaptive</em> group testing in which we come up with a
plan ahead of time for which tests we will perform.</p>

<p>I felt kinda dumb when this was pointed out, because:</p>

<ul>
<li>A typical application (and indeed the historically first application) is for
disease testing</li>
<li>My previous job was working for a company doing high-throughput
disease testing</li>
<li>I found out about the job when one of
the senior engineers there happened to overhear me musing about group testing</li>
<li>Not only did I not remember any of this when I wrote the blog post, I even
forgot about the disease testing application while I was writing the
post!</li>
</ul>

<p>Oh well.  Thanks to everyone who wrote in to help me!  Let's see,
that's Drew Samnick, Shreevatsa R., Matt Post, Matt Heilige, Eric
Harley, Renan Gross, and David Eppstein. (Apologies if I left out your
name, it was entirely unintentional.)</p>

<p>I also asked:</p>

<blockquote>
  <p>Is the history of this algorithm lost in time, or do we know who first
  invented it, or at least wrote it down? </p>
</blockquote>

<p>Wikipedia is quite confident about this:</p>

<blockquote>
  <p>The concept of group testing was first introduced by Robert Dorfman in
  1943 in a short report published in the Notes section of Annals of
  Mathematical Statistics.  Dorfman's report – as with all the
  early work on group testing – focused on the probabilistic problem,
  and aimed to use the novel idea of group testing to reduce the
  expected number of tests needed to weed out all syphilitic men in a
  given pool of soldiers.</p>
</blockquote>

<p>Eric Harley said: </p>

<blockquote>
  <p>[It] doesn't date back as far as you might think, which then makes me
  wonder about the history of those coin weighing puzzles.</p>
</blockquote>

<p>Yeah, now I wonder too.  Surely there must be some coin-weighing
puzzles in
<a href="https://archive.org/details/samloydscycloped00saml">Sam Loyd</a> or
H.E. Dudeney that predate Dorfman?</p>

<p>Dorfman's original algorithm is not the one I described.  He divides
the items into fixed-size groups of <em>n</em> each, and if a group of <em>n</em>
contains a bad item, he tests the <em>n</em> items individually.  My proposal
was to always split the group in half.  Dorfman's two-pass approach is
much more practical than mine for disease testing, where the test
material is a body fluid sample that may involve a blood draw or
sticking a swab in someone's nose, where the amount of material may be
limited, and where each test offers a chance to contaminate the sample.</p>

<p><a href="https://en.wikipedia.org/wiki/Group_testing%23Generalised_binary%2dsplitting_algorithm">Wikipedia has an article about a more sophisticated of the binary-splitting algorithm I described</a>.
The theory is really interesting, and there are many ingenious
methods.</p>

<p>Thanks to everyone who wrote in.  Also to everyone who did not.
You're all winners.</p>

<p>[ Addendum 20221108: January First-of-May has brought to my attention
<a href="https://www.puzzlemuseum.com/singma/singma6/SOURCES/singma-sources-edn8-2004-03-19.htm#_Toc69533862">section 5c of David Singmaster's <em>Sources in Recreational Mathematics</em></a>,
which has notes on the known history of coin-weighing puzzles.
To my surprise, there is nothing there from Dudeney or Loyd; the
earliest references are from the <em>American Mathematical Monthly</em>
in 1945.  I am sure that many people would be interested in further
news about this. ]</p></div>
    </content>
    <updated>2022-10-23T16:25:00Z</updated>
    <published>2022-10-23T16:25:00Z</published>
    <category term="/prog"/>
    <author>
      <name>Mark Dominus</name>
      <email>mjd@plover.com</email>
      <uri>http://www.plover.com/</uri>
    </author>
    <source>
      <id>tag:,2005:/</id>
      <icon>http://perl.plover.com/favicon.ico</icon>
      <link href="https://blog.plover.com/index.atom" rel="self" type="application/atom+xml">
      <link href="https://blog.plover.com" rel="alternate" type="text/html">
      <subtitle>The Universe of Discourse (Mark Dominus Blog)</subtitle>
      <title>The Universe of Discourse</title>
      <updated>2022-11-08T23:34:00Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-1777990983847811806.post-5833984871945391183</id>
    <link href="https://www.haskellforall.com/feeds/5833984871945391183/comments/default" rel="replies" title="Post Comments" type="application/atom+xml">
    <link href="https://www.haskellforall.com/2022/10/what-does-isomorphic-mean-in-haskell.html#comment-form" rel="replies" title="2 Comments" type="text/html">
    <link href="https://www.blogger.com/feeds/1777990983847811806/posts/default/5833984871945391183" rel="edit" type="application/atom+xml">
    <link href="https://www.blogger.com/feeds/1777990983847811806/posts/default/5833984871945391183" rel="self" type="application/atom+xml">
    <link href="https://www.haskellforall.com/2022/10/what-does-isomorphic-mean-in-haskell.html" rel="alternate" title="What does &quot;isomorphic&quot; mean (in Haskell)?" type="text/html">
    <title>What does &quot;isomorphic&quot; mean (in Haskell)?</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">What does &quot;isomorphic&quot; mean (in Haskell)    <p>Sometimes youâ€™ll hear someone describe two things as being â€œisomorphicâ€� to one another and I wanted to explain what that means.</p><p>You might have already guessed that â€œisomorphicâ€� is a synonym for â€œequivalentâ€�, and that would have been a pretty good guess. Really, the main difference between the two words is that â€œisomorphicâ€� has a more precise and more general definition than â€œequivalentâ€�.</p><p>In this post I will introduce a more precise definition of â€œisomorphicâ€�, using Haskell code. This definition wonâ€™t be the fully general definition, but I still hope to give you some taste of how â€œisomorphicâ€� can denote something more than just â€œequivalentâ€�.</p><h4 id="the-simple-version">The simple version</h4><p>The simplest and least general definition of â€œisomorphicâ€� (in Haskell) is:</p><blockquote><p>Two types, <code>A</code>, and <code>B</code>, are isomorphic if there exist two functions, <code>forward</code> and <code>backward</code> of the following types:</p><div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb1-1" tabindex="-1"></a><span class="ot">forward ::</span> <span class="dt">A</span> <span class="ot">-&gt;</span> <span class="dt">B</span></span><br><span id="cb1-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb1-2" tabindex="-1"></a></span><br><span id="cb1-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb1-3" tabindex="-1"></a><span class="ot">backward ::</span> <span class="dt">B</span> <span class="ot">-&gt;</span> <span class="dt">A</span></span></code></pre></div><p>â€¦ such that the following two equations (which I will refer to as the â€œisomorphism lawsâ€�) are true:</p><div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-1" tabindex="-1"></a>forward <span class="op">.</span> backward <span class="ot">=</span> <span class="fu">id</span></span><br><span id="cb2-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-2" tabindex="-1"></a></span><br><span id="cb2-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-3" tabindex="-1"></a>backward <span class="op">.</span> forward <span class="ot">=</span> <span class="fu">id</span></span></code></pre></div></blockquote><p><code>id</code> here is the identity function from Haskellâ€™s Prelude, defined like this:</p><div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb3-1" tabindex="-1"></a><span class="fu">id</span><span class="ot"> ::</span> a <span class="ot">-&gt;</span> a</span><br><span id="cb3-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb3-2" tabindex="-1"></a><span class="fu">id</span> x <span class="ot">=</span> x</span></code></pre></div><p>â€¦ and <code>(.)</code> is the function composition operator (also from Haskellâ€™s Prelude), defined like this:</p><div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb4-1" tabindex="-1"></a><span class="ot">(.) ::</span> (b <span class="ot">-&gt;</span> c) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> c)</span><br><span id="cb4-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb4-2" tabindex="-1"></a>(f <span class="op">.</span> g) x <span class="ot">=</span> f (g x)</span></code></pre></div><p>According to the above definition, the types <code>Bool -&gt; a</code> and <code>(a, a)</code> are isomorphic, because we can define two functions:</p><div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb5-1" tabindex="-1"></a><span class="ot">forward ::</span> (<span class="dt">Bool</span> <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> (a, a)</span><br><span id="cb5-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb5-2" tabindex="-1"></a>forward function <span class="ot">=</span> (function <span class="dt">False</span>, function <span class="dt">True</span>)</span><br><span id="cb5-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb5-3" tabindex="-1"></a></span><br><span id="cb5-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb5-4" tabindex="-1"></a><span class="ot">backward ::</span> (a, a) <span class="ot">-&gt;</span> (<span class="dt">Bool</span> <span class="ot">-&gt;</span> a)</span><br><span id="cb5-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb5-5" tabindex="-1"></a>backward (first, second) <span class="dt">False</span> <span class="ot">=</span> first</span><br><span id="cb5-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb5-6" tabindex="-1"></a>backward (first, second) <span class="dt">True</span>  <span class="ot">=</span> second</span></code></pre></div><p>â€¦ and we can prove that those two functions satisfy the isomorphism laws using <a href="https://www.haskellforall.com/2013/12/equational-reasoning.html">equational reasoning</a>.</p><details>Proof of the isomorphism laws (click to expand) <p>Hereâ€™s the proof of the first isomorphism law:</p><div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb6-1" tabindex="-1"></a>forward <span class="op">.</span> backward</span><br><span id="cb6-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb6-2" tabindex="-1"></a></span><br><span id="cb6-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb6-3" tabindex="-1"></a><span class="co">-- (f . g) = \x -&gt; f (g x)</span></span><br><span id="cb6-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb6-4" tabindex="-1"></a><span class="co">--</span></span><br><span id="cb6-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb6-5" tabindex="-1"></a><span class="co">-- â€¦ where:</span></span><br><span id="cb6-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb6-6" tabindex="-1"></a><span class="co">--</span></span><br><span id="cb6-7"><a href="https://www.haskellforall.com/feeds/posts/default#cb6-7" tabindex="-1"></a><span class="co">-- f = forward</span></span><br><span id="cb6-8"><a href="https://www.haskellforall.com/feeds/posts/default#cb6-8" tabindex="-1"></a><span class="co">-- g = backward</span></span><br><span id="cb6-9"><a href="https://www.haskellforall.com/feeds/posts/default#cb6-9" tabindex="-1"></a><span class="ot">=</span> \x <span class="ot">-&gt;</span> forward (backward x)</span><br><span id="cb6-10"><a href="https://www.haskellforall.com/feeds/posts/default#cb6-10" tabindex="-1"></a></span><br><span id="cb6-11"><a href="https://www.haskellforall.com/feeds/posts/default#cb6-11" tabindex="-1"></a><span class="co">-- x = (first, second)</span></span><br><span id="cb6-12"><a href="https://www.haskellforall.com/feeds/posts/default#cb6-12" tabindex="-1"></a><span class="ot">=</span> \(first, second) <span class="ot">-&gt;</span> forward (backward (first, second))</span><br><span id="cb6-13"><a href="https://www.haskellforall.com/feeds/posts/default#cb6-13" tabindex="-1"></a></span><br><span id="cb6-14"><a href="https://www.haskellforall.com/feeds/posts/default#cb6-14" tabindex="-1"></a><span class="co">-- forward function = (function False, function True)</span></span><br><span id="cb6-15"><a href="https://www.haskellforall.com/feeds/posts/default#cb6-15" tabindex="-1"></a><span class="ot">=</span> \(first, second) <span class="ot">-&gt;</span></span><br><span id="cb6-16"><a href="https://www.haskellforall.com/feeds/posts/default#cb6-16" tabindex="-1"></a>    (backward (first, second) <span class="dt">False</span>, backward (first, second) <span class="dt">True</span>)</span><br><span id="cb6-17"><a href="https://www.haskellforall.com/feeds/posts/default#cb6-17" tabindex="-1"></a></span><br><span id="cb6-18"><a href="https://www.haskellforall.com/feeds/posts/default#cb6-18" tabindex="-1"></a><span class="co">-- backward (first, second) False = first</span></span><br><span id="cb6-19"><a href="https://www.haskellforall.com/feeds/posts/default#cb6-19" tabindex="-1"></a><span class="co">-- backward (first, second) True  = second</span></span><br><span id="cb6-20"><a href="https://www.haskellforall.com/feeds/posts/default#cb6-20" tabindex="-1"></a><span class="ot">=</span> \(first, second) <span class="ot">-&gt;</span> (first, second)</span><br><span id="cb6-21"><a href="https://www.haskellforall.com/feeds/posts/default#cb6-21" tabindex="-1"></a></span><br><span id="cb6-22"><a href="https://www.haskellforall.com/feeds/posts/default#cb6-22" tabindex="-1"></a><span class="co">-- x = (first, second)</span></span><br><span id="cb6-23"><a href="https://www.haskellforall.com/feeds/posts/default#cb6-23" tabindex="-1"></a><span class="co">--</span></span><br><span id="cb6-24"><a href="https://www.haskellforall.com/feeds/posts/default#cb6-24" tabindex="-1"></a><span class="co">-- â€¦ in reverse</span></span><br><span id="cb6-25"><a href="https://www.haskellforall.com/feeds/posts/default#cb6-25" tabindex="-1"></a><span class="ot">=</span> \x <span class="ot">-&gt;</span> x</span><br><span id="cb6-26"><a href="https://www.haskellforall.com/feeds/posts/default#cb6-26" tabindex="-1"></a></span><br><span id="cb6-27"><a href="https://www.haskellforall.com/feeds/posts/default#cb6-27" tabindex="-1"></a><span class="co">-- id x = x</span></span><br><span id="cb6-28"><a href="https://www.haskellforall.com/feeds/posts/default#cb6-28" tabindex="-1"></a><span class="co">--</span></span><br><span id="cb6-29"><a href="https://www.haskellforall.com/feeds/posts/default#cb6-29" tabindex="-1"></a><span class="co">-- â€¦ in reverse</span></span><br><span id="cb6-30"><a href="https://www.haskellforall.com/feeds/posts/default#cb6-30" tabindex="-1"></a><span class="ot">=</span> \x <span class="ot">-&gt;</span> <span class="fu">id</span> x</span><br><span id="cb6-31"><a href="https://www.haskellforall.com/feeds/posts/default#cb6-31" tabindex="-1"></a></span><br><span id="cb6-32"><a href="https://www.haskellforall.com/feeds/posts/default#cb6-32" tabindex="-1"></a><span class="co">-- Î·-reduction</span></span><br><span id="cb6-33"><a href="https://www.haskellforall.com/feeds/posts/default#cb6-33" tabindex="-1"></a><span class="ot">=</span> <span class="fu">id</span></span></code></pre></div><p>â€¦ and here is the proof of the second isomorphism law:</p><div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-1" tabindex="-1"></a>backward <span class="op">.</span> forward</span><br><span id="cb7-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-2" tabindex="-1"></a></span><br><span id="cb7-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-3" tabindex="-1"></a><span class="co">-- (f . g) = \x -&gt; f (g x)</span></span><br><span id="cb7-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-4" tabindex="-1"></a><span class="co">--</span></span><br><span id="cb7-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-5" tabindex="-1"></a><span class="co">-- â€¦ where:</span></span><br><span id="cb7-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-6" tabindex="-1"></a><span class="co">--</span></span><br><span id="cb7-7"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-7" tabindex="-1"></a><span class="co">-- f = backward</span></span><br><span id="cb7-8"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-8" tabindex="-1"></a><span class="co">-- g = forward</span></span><br><span id="cb7-9"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-9" tabindex="-1"></a><span class="co">-- x = function</span></span><br><span id="cb7-10"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-10" tabindex="-1"></a><span class="ot">=</span> \function <span class="ot">-&gt;</span> backward (forward function)</span><br><span id="cb7-11"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-11" tabindex="-1"></a></span><br><span id="cb7-12"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-12" tabindex="-1"></a><span class="co">-- forward function = (function False, function True)</span></span><br><span id="cb7-13"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-13" tabindex="-1"></a><span class="ot">=</span> \function <span class="ot">-&gt;</span> backward (function <span class="dt">False</span>, function <span class="dt">True</span>)</span><br><span id="cb7-14"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-14" tabindex="-1"></a></span><br><span id="cb7-15"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-15" tabindex="-1"></a><span class="co">-- Î·-expand</span></span><br><span id="cb7-16"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-16" tabindex="-1"></a><span class="ot">=</span> \function bool <span class="ot">-&gt;</span> backward (function <span class="dt">False</span>, function <span class="dt">True</span>) bool</span><br><span id="cb7-17"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-17" tabindex="-1"></a></span><br><span id="cb7-18"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-18" tabindex="-1"></a><span class="co">-- There are two possible cases:</span></span><br><span id="cb7-19"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-19" tabindex="-1"></a><span class="co">--</span></span><br><span id="cb7-20"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-20" tabindex="-1"></a><span class="co">-- Case #0: bool = False</span></span><br><span id="cb7-21"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-21" tabindex="-1"></a><span class="co">-- Case #1: bool = True</span></span><br><span id="cb7-22"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-22" tabindex="-1"></a></span><br><span id="cb7-23"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-23" tabindex="-1"></a><span class="co">-- Proof for case #0: bool = False</span></span><br><span id="cb7-24"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-24" tabindex="-1"></a>  <span class="ot">=</span> \function bool <span class="ot">-&gt;</span> backward (function <span class="dt">False</span>, function <span class="dt">True</span>) <span class="dt">False</span></span><br><span id="cb7-25"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-25" tabindex="-1"></a></span><br><span id="cb7-26"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-26" tabindex="-1"></a>  <span class="co">-- backward (first, second) False = first</span></span><br><span id="cb7-27"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-27" tabindex="-1"></a>  <span class="co">--</span></span><br><span id="cb7-28"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-28" tabindex="-1"></a>  <span class="co">-- â€¦ where:</span></span><br><span id="cb7-29"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-29" tabindex="-1"></a>  <span class="co">--</span></span><br><span id="cb7-30"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-30" tabindex="-1"></a>  <span class="co">-- first  = function False</span></span><br><span id="cb7-31"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-31" tabindex="-1"></a>  <span class="co">-- second = function True</span></span><br><span id="cb7-32"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-32" tabindex="-1"></a>  <span class="ot">=</span> \function bool <span class="ot">-&gt;</span> function <span class="dt">False</span></span><br><span id="cb7-33"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-33" tabindex="-1"></a></span><br><span id="cb7-34"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-34" tabindex="-1"></a>  <span class="co">-- bool = False</span></span><br><span id="cb7-35"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-35" tabindex="-1"></a>  <span class="co">--</span></span><br><span id="cb7-36"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-36" tabindex="-1"></a>  <span class="co">-- â€¦ in reverse</span></span><br><span id="cb7-37"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-37" tabindex="-1"></a>  <span class="ot">=</span> \function bool <span class="ot">-&gt;</span> function bool</span><br><span id="cb7-38"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-38" tabindex="-1"></a></span><br><span id="cb7-39"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-39" tabindex="-1"></a>  <span class="co">-- Î·-reduction</span></span><br><span id="cb7-40"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-40" tabindex="-1"></a>  <span class="ot">=</span> \function <span class="ot">-&gt;</span> function</span><br><span id="cb7-41"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-41" tabindex="-1"></a></span><br><span id="cb7-42"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-42" tabindex="-1"></a>  <span class="co">-- id x = x</span></span><br><span id="cb7-43"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-43" tabindex="-1"></a>  <span class="co">--</span></span><br><span id="cb7-44"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-44" tabindex="-1"></a>  <span class="co">-- â€¦ in reverse</span></span><br><span id="cb7-45"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-45" tabindex="-1"></a>  <span class="ot">=</span> \function <span class="ot">-&gt;</span> <span class="fu">id</span> function</span><br><span id="cb7-46"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-46" tabindex="-1"></a></span><br><span id="cb7-47"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-47" tabindex="-1"></a>  <span class="co">-- Î·-reduction</span></span><br><span id="cb7-48"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-48" tabindex="-1"></a>  <span class="ot">=</span> <span class="fu">id</span></span><br><span id="cb7-49"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-49" tabindex="-1"></a></span><br><span id="cb7-50"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-50" tabindex="-1"></a><span class="co">-- Proof for case #1: bool = True</span></span><br><span id="cb7-51"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-51" tabindex="-1"></a>  <span class="ot">=</span> \function bool <span class="ot">-&gt;</span> backward (function <span class="dt">False</span>, function <span class="dt">True</span>) <span class="dt">True</span></span><br><span id="cb7-52"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-52" tabindex="-1"></a></span><br><span id="cb7-53"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-53" tabindex="-1"></a>  <span class="co">-- backward (first, second) True = second</span></span><br><span id="cb7-54"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-54" tabindex="-1"></a>  <span class="co">--</span></span><br><span id="cb7-55"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-55" tabindex="-1"></a>  <span class="co">-- â€¦ where:</span></span><br><span id="cb7-56"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-56" tabindex="-1"></a>  <span class="co">--</span></span><br><span id="cb7-57"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-57" tabindex="-1"></a>  <span class="co">-- first  = function False</span></span><br><span id="cb7-58"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-58" tabindex="-1"></a>  <span class="co">-- second = function True</span></span><br><span id="cb7-59"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-59" tabindex="-1"></a>  <span class="ot">=</span> \function bool <span class="ot">-&gt;</span> function <span class="dt">True</span></span><br><span id="cb7-60"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-60" tabindex="-1"></a></span><br><span id="cb7-61"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-61" tabindex="-1"></a>  <span class="co">-- b = True</span></span><br><span id="cb7-62"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-62" tabindex="-1"></a>  <span class="co">--</span></span><br><span id="cb7-63"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-63" tabindex="-1"></a>  <span class="co">-- â€¦ in reverse</span></span><br><span id="cb7-64"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-64" tabindex="-1"></a>  <span class="ot">=</span> \function bool <span class="ot">-&gt;</span> function bool</span><br><span id="cb7-65"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-65" tabindex="-1"></a></span><br><span id="cb7-66"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-66" tabindex="-1"></a>  <span class="co">-- Î·-reduction</span></span><br><span id="cb7-67"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-67" tabindex="-1"></a>  <span class="ot">=</span> \function <span class="ot">-&gt;</span> function</span><br><span id="cb7-68"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-68" tabindex="-1"></a></span><br><span id="cb7-69"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-69" tabindex="-1"></a>  <span class="co">-- id x = x</span></span><br><span id="cb7-70"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-70" tabindex="-1"></a>  <span class="co">--</span></span><br><span id="cb7-71"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-71" tabindex="-1"></a>  <span class="co">-- â€¦ in reverse</span></span><br><span id="cb7-72"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-72" tabindex="-1"></a>  <span class="ot">=</span> \function <span class="ot">-&gt;</span> <span class="fu">id</span> function</span><br><span id="cb7-73"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-73" tabindex="-1"></a></span><br><span id="cb7-74"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-74" tabindex="-1"></a>  <span class="co">-- Î·-reduction</span></span><br><span id="cb7-75"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-75" tabindex="-1"></a>  <span class="ot">=</span> <span class="fu">id</span></span></code></pre></div></details><p>Weâ€™ll use the notation <code>A â‰… B</code> as a short-hand for â€œ<code>A</code> is isomorphic to <code>B</code>â€�, so we can also write:</p><div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb8-1" tabindex="-1"></a><span class="dt">Bool</span> <span class="ot">-&gt;</span> a â‰… (a, a)</span></code></pre></div><p>Whenever we declare that two types are isomorphic we need to actually specify what the <code>forward</code> and <code>backward</code>conversion functions are and prove that they satisfy isomorphism laws. The existence of <code>forward</code> and <code>backward</code>functions of the correct input and output types is not enough to establish that the two types are isomorphic.</p><p>For example, suppose we changed the definition of <code>forward</code> to:</p><div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb9-1" tabindex="-1"></a><span class="ot">forward ::</span> (<span class="dt">Bool</span> <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> (a, a)</span><br><span id="cb9-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb9-2" tabindex="-1"></a>forward function <span class="ot">=</span> (function <span class="dt">True</span>, function <span class="dt">False</span>)</span></code></pre></div><p>Then <code>forward . backward</code> and <code>backward . forward</code> would still type-check and have the right type, but they would no longer be equal to <code>id</code>.</p><p>In other words, when discussing isomorphic types, itâ€™s technically not enough that the two types are equivalent. The <em>way</em> in which they are equivalent matters, too, if we want to be pedantic. In practice, though, if thereâ€™s only one way to implement the two conversion functions then people wonâ€™t bother to explicitly specify them.</p><p>The reason why this is important is because an isomorphism also gives us an explicit way to convert between the two types.  We're not just declaring that they're equivalent, but we're spelling out exactly how to transform each type into the other type, which is very useful!</p><h4 id="more-examples">More examples</h4><p>Letâ€™s speedrun through a few more examples of isomorphic types, which all parallel the rules of arithmetic:</p><div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb10-1" tabindex="-1"></a><span class="co">-- 0 + a = a</span></span><br><span id="cb10-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb10-2" tabindex="-1"></a><span class="dt">Either</span> <span class="dt">Void</span> a â‰… a</span><br><span id="cb10-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb10-3" tabindex="-1"></a></span><br><span id="cb10-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb10-4" tabindex="-1"></a><span class="co">-- a + (b + c) = (a + b) + c</span></span><br><span id="cb10-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb10-5" tabindex="-1"></a><span class="dt">Either</span> a (<span class="dt">Either</span> b c) <span class="ot">=</span> <span class="dt">Either</span> (<span class="dt">Either</span> a b) c</span><br><span id="cb10-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb10-6" tabindex="-1"></a></span><br><span id="cb10-7"><a href="https://www.haskellforall.com/feeds/posts/default#cb10-7" tabindex="-1"></a><span class="co">-- 1 Ã— a = a</span></span><br><span id="cb10-8"><a href="https://www.haskellforall.com/feeds/posts/default#cb10-8" tabindex="-1"></a>((), a) â‰… a</span><br><span id="cb10-9"><a href="https://www.haskellforall.com/feeds/posts/default#cb10-9" tabindex="-1"></a></span><br><span id="cb10-10"><a href="https://www.haskellforall.com/feeds/posts/default#cb10-10" tabindex="-1"></a><span class="co">-- a Ã— (b Ã— c) = (a Ã— b) Ã— c</span></span><br><span id="cb10-11"><a href="https://www.haskellforall.com/feeds/posts/default#cb10-11" tabindex="-1"></a>(a, (b, c)) â‰… ((a, b), c)</span><br><span id="cb10-12"><a href="https://www.haskellforall.com/feeds/posts/default#cb10-12" tabindex="-1"></a></span><br><span id="cb10-13"><a href="https://www.haskellforall.com/feeds/posts/default#cb10-13" tabindex="-1"></a><span class="co">-- 0 Ã— a = 0</span></span><br><span id="cb10-14"><a href="https://www.haskellforall.com/feeds/posts/default#cb10-14" tabindex="-1"></a>(<span class="dt">Void</span>, a) â‰… <span class="dt">Void</span></span><br><span id="cb10-15"><a href="https://www.haskellforall.com/feeds/posts/default#cb10-15" tabindex="-1"></a></span><br><span id="cb10-16"><a href="https://www.haskellforall.com/feeds/posts/default#cb10-16" tabindex="-1"></a><span class="co">-- a Ã— (b + c) = (a Ã— b) + (a Ã— c)</span></span><br><span id="cb10-17"><a href="https://www.haskellforall.com/feeds/posts/default#cb10-17" tabindex="-1"></a>(a, <span class="dt">Either</span> b c) â‰… <span class="dt">Either</span> (a, b) (a, c)</span><br><span id="cb10-18"><a href="https://www.haskellforall.com/feeds/posts/default#cb10-18" tabindex="-1"></a></span><br><span id="cb10-19"><a href="https://www.haskellforall.com/feeds/posts/default#cb10-19" tabindex="-1"></a><span class="co">-- a ^ 1 = a</span></span><br><span id="cb10-20"><a href="https://www.haskellforall.com/feeds/posts/default#cb10-20" tabindex="-1"></a>() <span class="ot">-&gt;</span> a â‰… a</span><br><span id="cb10-21"><a href="https://www.haskellforall.com/feeds/posts/default#cb10-21" tabindex="-1"></a></span><br><span id="cb10-22"><a href="https://www.haskellforall.com/feeds/posts/default#cb10-22" tabindex="-1"></a><span class="co">-- a ^ 0 = 1</span></span><br><span id="cb10-23"><a href="https://www.haskellforall.com/feeds/posts/default#cb10-23" tabindex="-1"></a><span class="dt">Void</span> <span class="ot">-&gt;</span> a â‰… ()</span><br><span id="cb10-24"><a href="https://www.haskellforall.com/feeds/posts/default#cb10-24" tabindex="-1"></a></span><br><span id="cb10-25"><a href="https://www.haskellforall.com/feeds/posts/default#cb10-25" tabindex="-1"></a><span class="co">-- (c ^ b) ^ a = (c ^ a) ^ b</span></span><br><span id="cb10-26"><a href="https://www.haskellforall.com/feeds/posts/default#cb10-26" tabindex="-1"></a>a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> c â‰… b <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> c</span><br><span id="cb10-27"><a href="https://www.haskellforall.com/feeds/posts/default#cb10-27" tabindex="-1"></a></span><br><span id="cb10-28"><a href="https://www.haskellforall.com/feeds/posts/default#cb10-28" tabindex="-1"></a><span class="co">-- (c ^ b) ^ a = c ^ (a Ã— b)</span></span><br><span id="cb10-29"><a href="https://www.haskellforall.com/feeds/posts/default#cb10-29" tabindex="-1"></a>a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> c â‰… (a, b) <span class="ot">-&gt;</span> c</span></code></pre></div><p><strong>Exercise:</strong> implement the <code>forward</code> and <code>backward</code> functions for some of the above types and prove the isomorphism laws for each pair of functions. It will probably be very tedious to prove all of the above examples, so pick the ones that interest you the most.</p><h4 id="intermediate-tricks">Intermediate tricks</h4><p>This section will introduce some more advanced tricks for proving that two types are isomorphic.</p><p>First, letâ€™s start with a few ground rules for working with all isomorphisms:</p><ul><li><p>Reflexivity: <code>a â‰… a</code></p></li><li><p>Symmetry: If <code>a â‰… b</code> then <code>b â‰… a</code></p></li><li><p>Transitivity: If <code>a â‰… b</code> and <code>b â‰… c</code> then <code>a â‰… c</code></p></li></ul><p>Now letâ€™s get into some Haskell-specific rules:</p><blockquote><p>a <code>newtype</code> in Haskell is isomorphic to the underlying type if the <code>newtype</code> constructor is public.</p></blockquote><p>For example, if we were to define:</p><div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb11-1" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">Name</span> <span class="ot">=</span> <span class="dt">Name</span> {<span class="ot"> getName ::</span> <span class="dt">String</span> }</span></code></pre></div><p>â€¦ then <code>Name</code> and <code>String</code> would be isomorphic (<code>Name â‰… String</code>), where:</p><div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb12-1" tabindex="-1"></a><span class="ot">forward ::</span> <span class="dt">Name</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span><br><span id="cb12-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb12-2" tabindex="-1"></a>forward <span class="ot">=</span> getName</span><br><span id="cb12-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb12-3" tabindex="-1"></a></span><br><span id="cb12-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb12-4" tabindex="-1"></a><span class="ot">backward ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Name</span></span><br><span id="cb12-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb12-5" tabindex="-1"></a>backward <span class="ot">=</span> <span class="dt">Name</span></span></code></pre></div><p>One such <code>newtype</code> that shows up pretty often when reasoning about isomorphic types is the <a href="https://hackage.haskell.org/package/base/docs/Data-Functor-Identity.html#t:Identity"><code>Identity</code></a>type constructor from <a href="https://hackage.haskell.org/package/base/docs/Data-Functor-Identity.html"><code>Data.Functor.Identity</code></a>:</p><div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb13-1" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">Identity</span> a <span class="ot">=</span> <span class="dt">Identity</span> {<span class="ot"> runIdentity ::</span> a }</span></code></pre></div><p>â€¦ where <code>Identity a â‰… a</code>.</p><p>To see why <code>Identity</code> is useful, consider the following two types:</p><div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb14-1" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">State</span> s a <span class="ot">=</span> <span class="dt">State</span> {<span class="ot"> runState ::</span> s <span class="ot">-&gt;</span> (a, s) }</span><br><span id="cb14-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb14-2" tabindex="-1"></a></span><br><span id="cb14-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb14-3" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">StateT</span> s m a <span class="ot">=</span> <span class="dt">StateT</span> {<span class="ot"> runStateT ::</span> s <span class="ot">-&gt;</span> m (a, s) }</span></code></pre></div><p>The latter <code>newtype</code> is from the <code>transformers</code>package, which is how we layer on the â€œstateâ€� effect within a monad transformer stack. If you donâ€™t understand what that means, thatâ€™s okay; itâ€™s not that relevant to the point.</p><p>However, the <code>transformers</code> package doesnâ€™t define <code>State</code> as above. Instead, the <code>transformers</code>package defines <code>State</code> like this:</p><div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb15-1" tabindex="-1"></a><span class="kw">type</span> <span class="dt">State</span> s <span class="ot">=</span> <span class="dt">StateT</span> s <span class="dt">Identity</span></span></code></pre></div><p>The latter <code>type</code> synonym definition for <code>State</code> is equivalent (â€œisomorphicâ€�) to the <code>newtype</code> definition for <code>State</code> I provided above. In order to prove that though Iâ€™ll need to distinguish between the two <code>State</code> type constructors, so Iâ€™ll use a numeric subscript to distinguish them:</p><div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb16-1" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.Functor.Identity</span> (<span class="dt">Identity</span>)</span><br><span id="cb16-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb16-2" tabindex="-1"></a></span><br><span id="cb16-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb16-3" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">State</span>â‚€ s a <span class="ot">=</span> <span class="dt">State</span>â‚€ {<span class="ot"> runState ::</span> s <span class="ot">-&gt;</span> (a, s) }</span><br><span id="cb16-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb16-4" tabindex="-1"></a></span><br><span id="cb16-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb16-5" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">StateT</span> s m a <span class="ot">=</span> <span class="dt">StateT</span> {<span class="ot"> runStateT ::</span> s <span class="ot">-&gt;</span> m (a, s) }</span><br><span id="cb16-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb16-6" tabindex="-1"></a></span><br><span id="cb16-7"><a href="https://www.haskellforall.com/feeds/posts/default#cb16-7" tabindex="-1"></a><span class="kw">type</span> <span class="dt">State</span>â‚� s <span class="ot">=</span> <span class="dt">StateT</span> s <span class="dt">Identity</span></span></code></pre></div><p>â€¦ and then we can prove that <code>Stateâ‚€</code> is isomorphic to <code>Stateâ‚�</code> like this:</p><ul><li><p><code>Stateâ‚€ s a â‰… s -&gt; (a, s)</code></p><p>â€¦ because the <code>Stateâ‚€</code> <code>newtype</code> is isomorphic to the underlying type</p></li><li><p><code>s -&gt; (a, s) â‰… s -&gt; Identity (a, s)</code></p><p>â€¦ because the <code>Identity</code> newtype is isomorphic to the underlying type</p></li><li><p><code>s -&gt; Identity (a, s) â‰… StateT s Identity a</code></p><p>â€¦ because the <code>StateT</code> newtype is isomorphic to the underlying type</p></li><li><p><code>StateT s Identity a = Stateâ‚� s a</code></p><p>â€¦ because of how the <code>Stateâ‚�</code> type synonym is defined.</p></li></ul><p>Therefore, by transitivity, we can conclude:</p><ul><li><code>Stateâ‚€ s a â‰… Stateâ‚� s a</code></li></ul><p>Okay, now letâ€™s introduce an <strong>extremely useful</strong> rule related to isomorphic types:</p><blockquote><p>If <code>f</code> is a <code>Functor</code> then <code>forall r . (a -&gt; r) -&gt; f r</code> is isomorphic to <code>f a</code>.</p></blockquote><p>Or in other words:</p><div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb17-1" tabindex="-1"></a><span class="dt">Functor</span> f <span class="ot">=&gt;</span> (<span class="kw">forall</span> r <span class="op">.</span> (a <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> f r) â‰… f a</span></code></pre></div><p>â€¦ and here are the two conversion functions:</p><div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb18-1" tabindex="-1"></a><span class="ot">{-# LANGUAGE RankNTypes #-}</span></span><br><span id="cb18-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb18-2" tabindex="-1"></a></span><br><span id="cb18-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb18-3" tabindex="-1"></a><span class="ot">forward ::</span> <span class="dt">Functor</span> f <span class="ot">=&gt;</span> (<span class="kw">forall</span> r <span class="op">.</span> (a <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> f r) <span class="ot">-&gt;</span> f a</span><br><span id="cb18-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb18-4" tabindex="-1"></a>forward f <span class="ot">=</span> f <span class="fu">id</span></span><br><span id="cb18-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb18-5" tabindex="-1"></a></span><br><span id="cb18-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb18-6" tabindex="-1"></a><span class="ot">backward ::</span> <span class="dt">Functor</span> f <span class="ot">=&gt;</span> f a <span class="ot">-&gt;</span> (<span class="kw">forall</span> r <span class="op">.</span> (a <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> f r)</span><br><span id="cb18-7"><a href="https://www.haskellforall.com/feeds/posts/default#cb18-7" tabindex="-1"></a>backward fa k <span class="ot">=</span> <span class="fu">fmap</span> k fa</span></code></pre></div><p>This is essentially the <a href="https://en.wikipedia.org/wiki/Yoneda_lemma">Yoneda lemma</a> in Haskell form, which is actually a bit tricky to prove. If you donâ€™t believe me, try proving the isomorphism laws for the above <code>forward</code> and <code>backward</code> functions and see how far you get. Itâ€™s much easier to rely on the fact that someone else already did the hard work of proving those isomorphism laws for us.</p><p>Hereâ€™s a concrete example of the Yoneda lemma in action. Suppose that I want to prove that there is only one implementation of the identity function, <code>id</code>. I can do so by proving that the type of the identity function (<code>forall a . a -&gt; a</code>) is isomorphic to the <code>()</code> type (a type inhabited by exactly one value):</p><div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb19-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb19-1" tabindex="-1"></a>(<span class="kw">forall</span> a <span class="op">.</span> a <span class="ot">-&gt;</span> a) â‰… ()</span></code></pre></div><p>Hereâ€™s how you prove that by chaining together several isomorphic types:</p><div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb20-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-1" tabindex="-1"></a>  (<span class="kw">forall</span> a <span class="op">.</span> a <span class="ot">-&gt;</span> a)</span><br><span id="cb20-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-2" tabindex="-1"></a>  <span class="co">-- a â‰… () -&gt; a</span></span><br><span id="cb20-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-3" tabindex="-1"></a>â‰… (<span class="kw">forall</span> a <span class="op">.</span> (() <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> a)</span><br><span id="cb20-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-4" tabindex="-1"></a>  <span class="co">-- a â‰… Identity a</span></span><br><span id="cb20-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-5" tabindex="-1"></a>â‰… (<span class="kw">forall</span> a <span class="op">.</span> (() <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> <span class="dt">Identity</span> a)</span><br><span id="cb20-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-6" tabindex="-1"></a>  <span class="co">-- âœ¨ Yoneda lemma (where f = Identity) âœ¨</span></span><br><span id="cb20-7"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-7" tabindex="-1"></a>â‰… <span class="dt">Identity</span> ()</span><br><span id="cb20-8"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-8" tabindex="-1"></a>â‰… ()</span></code></pre></div><p>â€¦ so since the <code>()</code> type is inhabited by exactly one value (the <code>()</code> term) and the <code>()</code> type is isomorphic to the type of <code>id</code>, then there is exactly one way to implement <code>id</code> (which is <code>id x = x</code>).</p><blockquote><p>Note: To be totally pedantic, there is exactly one way to implement <code>id</code> â€œup to isomorphismâ€�. This is how we say that there might be several syntactically different ways of implementing <code>id</code>, such as:</p><div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb21-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb21-1" tabindex="-1"></a><span class="fu">id</span> x <span class="ot">=</span> x</span><br><span id="cb21-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb21-2" tabindex="-1"></a></span><br><span id="cb21-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb21-3" tabindex="-1"></a><span class="fu">id</span> y <span class="ot">=</span> y</span><br><span id="cb21-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb21-4" tabindex="-1"></a></span><br><span id="cb21-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb21-5" tabindex="-1"></a><span class="fu">id</span> <span class="ot">=</span> \x <span class="ot">-&gt;</span> x</span><br><span id="cb21-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb21-6" tabindex="-1"></a></span><br><span id="cb21-7"><a href="https://www.haskellforall.com/feeds/posts/default#cb21-7" tabindex="-1"></a><span class="fu">id</span> x <span class="ot">=</span> y</span><br><span id="cb21-8"><a href="https://www.haskellforall.com/feeds/posts/default#cb21-8" tabindex="-1"></a>  <span class="kw">where</span></span><br><span id="cb21-9"><a href="https://www.haskellforall.com/feeds/posts/default#cb21-9" tabindex="-1"></a>    y <span class="ot">=</span> x</span></code></pre></div><p>â€¦ but all of those ways of implementing <code>id</code> are isomorphic to one another (in a slightly different sense that I have not covered), so there is essentially only one way of implementing <code>id.</code></p></blockquote><p>Similarly, we can prove that there are exactly two ways to implement a function of type <code>forall a . a -&gt; a -&gt; a</code> by showing that such a type is isomorphic to <code>Bool</code> (a type inhabited by exactly two values):</p><div class="sourceCode" id="cb22"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb22-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-1" tabindex="-1"></a>  (<span class="kw">forall</span> a <span class="op">.</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a)</span><br><span id="cb22-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-2" tabindex="-1"></a>  <span class="co">-- a -&gt; b -&gt; c â‰… (a, b) -&gt; c</span></span><br><span id="cb22-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-3" tabindex="-1"></a>â‰… (<span class="kw">forall</span> a <span class="op">.</span> (a, a) <span class="ot">-&gt;</span> a)</span><br><span id="cb22-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-4" tabindex="-1"></a>  <span class="co">-- (a, a) â‰… Bool -&gt; a</span></span><br><span id="cb22-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-5" tabindex="-1"></a>â‰… (<span class="kw">forall</span> a <span class="op">.</span> (<span class="dt">Bool</span> <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> a)</span><br><span id="cb22-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-6" tabindex="-1"></a>  <span class="co">-- a â‰… Identity a</span></span><br><span id="cb22-7"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-7" tabindex="-1"></a>â‰… (<span class="kw">forall</span> a <span class="op">.</span> (<span class="dt">Bool</span> <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> <span class="dt">Identity</span> a)</span><br><span id="cb22-8"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-8" tabindex="-1"></a>  <span class="co">-- âœ¨ Yoneda lemma (where f = Identity) âœ¨</span></span><br><span id="cb22-9"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-9" tabindex="-1"></a>â‰… <span class="dt">Identity</span> <span class="dt">Bool</span></span><br><span id="cb22-10"><a href="https://www.haskellforall.com/feeds/posts/default#cb22-10" tabindex="-1"></a>â‰… <span class="dt">Bool</span></span></code></pre></div><p>â€¦ and in case youâ€™re curious, here are the only two possible ways to implement that type (up to isomorphism):</p><div class="sourceCode" id="cb23"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb23-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-1" tabindex="-1"></a><span class="ot">{-# LANGUAGE ExplicitForAll #-}</span></span><br><span id="cb23-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-2" tabindex="-1"></a></span><br><span id="cb23-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-3" tabindex="-1"></a><span class="ot">false ::</span> <span class="kw">forall</span> a <span class="op">.</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a</span><br><span id="cb23-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-4" tabindex="-1"></a>false f t <span class="ot">=</span> f</span><br><span id="cb23-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-5" tabindex="-1"></a></span><br><span id="cb23-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-6" tabindex="-1"></a><span class="ot">true ::</span> <span class="kw">forall</span> a <span class="op">.</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a</span><br><span id="cb23-7"><a href="https://www.haskellforall.com/feeds/posts/default#cb23-7" tabindex="-1"></a>true f t <span class="ot">=</span> t</span></code></pre></div><p>Hereâ€™s one last example of using the Yoneda lemma to prove that:</p><div class="sourceCode" id="cb24"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb24-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb24-1" tabindex="-1"></a>(<span class="kw">forall</span> r <span class="op">.</span> (a <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> r) â‰… a</span></code></pre></div><p>â€¦ which you can prove like this:</p><div class="sourceCode" id="cb25"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb25-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb25-1" tabindex="-1"></a>  (<span class="kw">forall</span> r <span class="op">.</span> (a <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> r)</span><br><span id="cb25-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb25-2" tabindex="-1"></a>  <span class="co">-- Identity r â‰… r</span></span><br><span id="cb25-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb25-3" tabindex="-1"></a>â‰… (<span class="kw">forall</span> r <span class="op">.</span> (a <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> <span class="dt">Identity</span> r)</span><br><span id="cb25-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb25-4" tabindex="-1"></a>  <span class="co">-- âœ¨ Yoneda lemma (where f = Identity) âœ¨</span></span><br><span id="cb25-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb25-5" tabindex="-1"></a>â‰… <span class="dt">Identity</span> a</span><br><span id="cb25-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb25-6" tabindex="-1"></a>â‰… a</span></code></pre></div><p><strong>Exercise:</strong> Prove that these two types are isomorphic:</p><div class="sourceCode" id="cb26"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb26-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb26-1" tabindex="-1"></a>(<span class="kw">forall</span> r <span class="op">.</span> (b <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> r)) â‰… a <span class="ot">-&gt;</span> b</span></code></pre></div><details>Solution (click to expand) <div class="sourceCode" id="cb27"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb27-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb27-1" tabindex="-1"></a>  (<span class="kw">forall</span> r <span class="op">.</span> (b <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> r))</span><br><span id="cb27-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb27-2" tabindex="-1"></a>  <span class="co">-- a -&gt; b -&gt; c â‰… b -&gt; a -&gt; c</span></span><br><span id="cb27-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb27-3" tabindex="-1"></a>â‰… (<span class="kw">forall</span> r <span class="op">.</span> a <span class="ot">-&gt;</span> (b <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> r)</span><br><span id="cb27-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb27-4" tabindex="-1"></a>  <span class="co">-- r â‰… Identity r</span></span><br><span id="cb27-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb27-5" tabindex="-1"></a>â‰… (<span class="kw">forall</span> r <span class="op">.</span> a <span class="ot">-&gt;</span> (b <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> <span class="dt">Identity</span> r)</span><br><span id="cb27-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb27-6" tabindex="-1"></a>  <span class="co">-- âœ¨ Yoneda lemma (where f = Identity) âœ¨</span></span><br><span id="cb27-7"><a href="https://www.haskellforall.com/feeds/posts/default#cb27-7" tabindex="-1"></a>â‰… a <span class="ot">-&gt;</span> <span class="dt">Identity</span> b</span><br><span id="cb27-8"><a href="https://www.haskellforall.com/feeds/posts/default#cb27-8" tabindex="-1"></a>  <span class="co">-- Identity b â‰… b</span></span><br><span id="cb27-9"><a href="https://www.haskellforall.com/feeds/posts/default#cb27-9" tabindex="-1"></a>â‰… a <span class="ot">-&gt;</span> b</span></code></pre></div></details><h4 id="isomorphism">Isomorphism</h4><p>So far weâ€™ve only used the word â€œisomorphicâ€� but there is a related word we should cover: â€œisomorphismâ€�.</p><p>In Haskell, if the types <code>A</code> and <code>B</code> are â€œisomorphicâ€� then an â€œisomorphismâ€� between them is the corresponding pair of functions converting between them (i.e.Â <code>forward</code> and <code>backward</code>).</p><p>The easiest way to explain this is to actually define an isomorphism type in Haskell:</p><div class="sourceCode" id="cb28"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb28-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb28-1" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Isomorphism</span> a b <span class="ot">=</span> <span class="dt">Isomorphism</span></span><br><span id="cb28-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb28-2" tabindex="-1"></a>    {<span class="ot"> forward  ::</span> a <span class="ot">-&gt;</span> b</span><br><span id="cb28-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb28-3" tabindex="-1"></a>    ,<span class="ot"> backward ::</span> b <span class="ot">-&gt;</span> a</span><br><span id="cb28-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb28-4" tabindex="-1"></a>    }</span></code></pre></div><p>For example:</p><div class="sourceCode" id="cb29"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb29-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb29-1" tabindex="-1"></a><span class="ot">exampleIsomorphism ::</span> <span class="dt">Isomorphism</span> ((a, b) <span class="ot">-&gt;</span> c) (a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> c)</span><br><span id="cb29-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb29-2" tabindex="-1"></a>exampleIsomorphism <span class="ot">=</span> <span class="dt">Isomorphism</span>{ forward <span class="ot">=</span> <span class="fu">curry</span>, backward <span class="ot">=</span> <span class="fu">uncurry</span> }</span></code></pre></div><p>However, this is not the only way we can encode an isomorphism in Haskell. For example, the <code>lens</code> package has an <code>Iso</code> type which can also represent an isomorphism:</p><div class="sourceCode" id="cb30"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb30-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb30-1" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Control.Lens</span> (<span class="dt">Iso'</span>, iso)</span><br><span id="cb30-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb30-2" tabindex="-1"></a></span><br><span id="cb30-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb30-3" tabindex="-1"></a><span class="ot">exampleIso ::</span> <span class="dt">Iso'</span> ((a, b) <span class="ot">-&gt;</span> c) (a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> c)</span><br><span id="cb30-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb30-4" tabindex="-1"></a>exampleIso <span class="ot">=</span> iso <span class="fu">curry</span> <span class="fu">uncurry</span></span></code></pre></div><p>These two types are equivalent. In fact, you might even say they are â€¦ isomorphic ğŸ‘€.</p><div class="sourceCode" id="cb31"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb31-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb31-1" tabindex="-1"></a><span class="ot">{-# LANGUAGE NamedFieldPuns #-}</span></span><br><span id="cb31-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb31-2" tabindex="-1"></a></span><br><span id="cb31-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb31-3" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Control.Lens</span> (<span class="dt">AnIso'</span>, <span class="dt">Iso'</span>, cloneIso, iso, review, view)</span><br><span id="cb31-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb31-4" tabindex="-1"></a></span><br><span id="cb31-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb31-5" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Isomorphism</span> a b <span class="ot">=</span> <span class="dt">Isomorphism</span></span><br><span id="cb31-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb31-6" tabindex="-1"></a>    {<span class="ot"> forward  ::</span> a <span class="ot">-&gt;</span> b</span><br><span id="cb31-7"><a href="https://www.haskellforall.com/feeds/posts/default#cb31-7" tabindex="-1"></a>    ,<span class="ot"> backward ::</span> b <span class="ot">-&gt;</span> a</span><br><span id="cb31-8"><a href="https://www.haskellforall.com/feeds/posts/default#cb31-8" tabindex="-1"></a>    }</span><br><span id="cb31-9"><a href="https://www.haskellforall.com/feeds/posts/default#cb31-9" tabindex="-1"></a></span><br><span id="cb31-10"><a href="https://www.haskellforall.com/feeds/posts/default#cb31-10" tabindex="-1"></a><span class="co">-- | We have to use `AnIso'` here instead of `Iso'` for reasons I won't go into</span></span><br><span id="cb31-11"><a href="https://www.haskellforall.com/feeds/posts/default#cb31-11" tabindex="-1"></a><span class="ot">isomorphismIsomorphism ::</span> <span class="dt">Isomorphism</span> (<span class="dt">Isomorphism</span> a b) (<span class="dt">AnIso'</span> a b)</span><br><span id="cb31-12"><a href="https://www.haskellforall.com/feeds/posts/default#cb31-12" tabindex="-1"></a>isomorphismIsomorphism <span class="ot">=</span> <span class="dt">Isomorphism</span>{ forward, backward }</span><br><span id="cb31-13"><a href="https://www.haskellforall.com/feeds/posts/default#cb31-13" tabindex="-1"></a>  <span class="kw">where</span></span><br><span id="cb31-14"><a href="https://www.haskellforall.com/feeds/posts/default#cb31-14" tabindex="-1"></a><span class="ot">    forward ::</span> <span class="dt">Isomorphism</span> a b <span class="ot">-&gt;</span> <span class="dt">AnIso'</span> a b</span><br><span id="cb31-15"><a href="https://www.haskellforall.com/feeds/posts/default#cb31-15" tabindex="-1"></a>    forward (<span class="dt">Isomorphism</span> f b) <span class="ot">=</span> iso f b</span><br><span id="cb31-16"><a href="https://www.haskellforall.com/feeds/posts/default#cb31-16" tabindex="-1"></a></span><br><span id="cb31-17"><a href="https://www.haskellforall.com/feeds/posts/default#cb31-17" tabindex="-1"></a><span class="ot">    backward ::</span> <span class="dt">AnIso'</span> a b <span class="ot">-&gt;</span> <span class="dt">Isomorphism</span> a b</span><br><span id="cb31-18"><a href="https://www.haskellforall.com/feeds/posts/default#cb31-18" tabindex="-1"></a>    backward iso <span class="ot">=</span></span><br><span id="cb31-19"><a href="https://www.haskellforall.com/feeds/posts/default#cb31-19" tabindex="-1"></a>        <span class="dt">Isomorphism</span></span><br><span id="cb31-20"><a href="https://www.haskellforall.com/feeds/posts/default#cb31-20" tabindex="-1"></a>            { forward  <span class="ot">=</span> view (cloneIso iso)</span><br><span id="cb31-21"><a href="https://www.haskellforall.com/feeds/posts/default#cb31-21" tabindex="-1"></a>            , backward <span class="ot">=</span> review (cloneIso iso)</span><br><span id="cb31-22"><a href="https://www.haskellforall.com/feeds/posts/default#cb31-22" tabindex="-1"></a>            }</span></code></pre></div><h4 id="generalized-isomorphisms">Generalized isomorphisms</h4><p>I mentioned earlier that the isomorphism definition we began with was not the fully general definition. In this section weâ€™ll slightly generalize the definition, while still sticking to something ergonomic to express within Haskell:</p><blockquote><p>Two types, <code>A</code>, and <code>B</code>, are isomorphic if there exist two morphisms, <code>forward</code> and <code>backward</code> of the following types:</p><div class="sourceCode" id="cb32"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb32-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-1" tabindex="-1"></a><span class="ot">forward ::</span> cat <span class="dt">A</span> <span class="dt">B</span></span><br><span id="cb32-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-2" tabindex="-1"></a></span><br><span id="cb32-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-3" tabindex="-1"></a><span class="ot">backward ::</span> cat <span class="dt">B</span> <span class="dt">A</span></span></code></pre></div><p>â€¦ such that <code>cat</code> is an instance of the <code>Category</code> type class and the following two equations (which I will refer to as the â€œisomorphism lawsâ€�) are true:</p><div class="sourceCode" id="cb33"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb33-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb33-1" tabindex="-1"></a>forward <span class="op">.</span> backward <span class="ot">=</span> <span class="fu">id</span></span><br><span id="cb33-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb33-2" tabindex="-1"></a></span><br><span id="cb33-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb33-3" tabindex="-1"></a>backward <span class="op">.</span> forward <span class="ot">=</span> <span class="fu">id</span></span></code></pre></div><p>â€¦ where <code>(.)</code> and <code>id</code> are the methods of the <code>Category</code> type class and not necessarily the <code>(.)</code> and <code>id</code> from the Prelude.</p></blockquote><p>This definition is based on the <a href="https://hackage.haskell.org/package/base/docs/Control-Category.html#t:Category"><code>Category</code></a>type class from the <a href="https://hackage.haskell.org/package/base/docs/Control-Category.html"><code>Control.Category</code></a>module, which is defined like this:</p><div class="sourceCode" id="cb34"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb34-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb34-1" tabindex="-1"></a><span class="kw">class</span> <span class="dt">Category</span> cat <span class="kw">where</span></span><br><span id="cb34-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb34-2" tabindex="-1"></a>    <span class="co">-- | the identity morphism</span></span><br><span id="cb34-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb34-3" tabindex="-1"></a><span class="ot">    id ::</span> cat a a</span><br><span id="cb34-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb34-4" tabindex="-1"></a></span><br><span id="cb34-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb34-5" tabindex="-1"></a>    <span class="co">-- | morphism composition</span></span><br><span id="cb34-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb34-6" tabindex="-1"></a><span class="ot">    (.) ::</span> cat b c <span class="ot">-&gt;</span> cat a b <span class="ot">-&gt;</span> cat a c</span></code></pre></div><p>â€¦ and all instance of the <code>Category</code> class must satisfy the following three â€œcategory lawsâ€�:</p><div class="sourceCode" id="cb35"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb35-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb35-1" tabindex="-1"></a>(f <span class="op">.</span> g) <span class="op">.</span> h <span class="ot">=</span> f <span class="op">.</span> (g <span class="op">.</span> h)</span><br><span id="cb35-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb35-2" tabindex="-1"></a></span><br><span id="cb35-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb35-3" tabindex="-1"></a>f <span class="op">.</span> <span class="fu">id</span> <span class="ot">=</span> f</span><br><span id="cb35-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb35-4" tabindex="-1"></a></span><br><span id="cb35-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb35-5" tabindex="-1"></a><span class="fu">id</span> <span class="op">.</span> f <span class="ot">=</span> f</span></code></pre></div><p>In other words, you can think of the <code>Category</code> class as generalizing our notion of functions to become â€œmorphismsâ€� so that we replace values of type <code>a -&gt; b</code> (functions) with values of type <code>cat a b</code> (â€œmorphismsâ€�). When we generalize our notion of functions to morphisms then we can similarly generalize our notion of isomorphisms.</p><p>Of course, Haskell functions are one instance of this <code>Category</code> class:</p><div class="sourceCode" id="cb36"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb36-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb36-1" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Category</span> (<span class="ot">-&gt;</span>) <span class="kw">where</span></span><br><span id="cb36-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb36-2" tabindex="-1"></a>    <span class="fu">id</span> <span class="ot">=</span> Prelude.id</span><br><span id="cb36-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb36-3" tabindex="-1"></a></span><br><span id="cb36-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb36-4" tabindex="-1"></a>    (<span class="op">.</span>) <span class="ot">=</span> (<span class="op">Prelude..</span>)</span></code></pre></div><p>â€¦ so if we take our more general definition of isomorphisms and replace <code>cat</code> with <code>(-&gt;)</code> then we get back the less general definition of isomorphisms that we started with.</p><p>However, things other than functions can be instances of this <code>Category</code> class, too. For example, â€œmonadicâ€� functions of type <code>Monad m =&gt; a -&gt; m b</code> can implement <code>Category</code>, too, if we wrap them in a newtype:</p><div class="sourceCode" id="cb37"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb37-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb37-1" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Control.Category</span> (<span class="dt">Category</span>(..))</span><br><span id="cb37-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb37-2" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Control.Monad</span> ((&lt;=&lt;))</span><br><span id="cb37-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb37-3" tabindex="-1"></a></span><br><span id="cb37-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb37-4" tabindex="-1"></a><span class="co">-- Note: This type and instance already exists in the `Control.Arrow` module</span></span><br><span id="cb37-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb37-5" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">Kleisli</span> m a b <span class="ot">=</span> <span class="dt">Kleisli</span>{<span class="ot"> runKleisli ::</span> a <span class="ot">-&gt;</span> m b }</span><br><span id="cb37-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb37-6" tabindex="-1"></a></span><br><span id="cb37-7"><a href="https://www.haskellforall.com/feeds/posts/default#cb37-7" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Monad</span> m <span class="ot">=&gt;</span> <span class="dt">Category</span> (<span class="dt">Kleisli</span> m) <span class="kw">where</span></span><br><span id="cb37-8"><a href="https://www.haskellforall.com/feeds/posts/default#cb37-8" tabindex="-1"></a>    <span class="fu">id</span> <span class="ot">=</span> <span class="dt">Kleisli</span> <span class="fu">return</span></span><br><span id="cb37-9"><a href="https://www.haskellforall.com/feeds/posts/default#cb37-9" tabindex="-1"></a></span><br><span id="cb37-10"><a href="https://www.haskellforall.com/feeds/posts/default#cb37-10" tabindex="-1"></a>    <span class="dt">Kleisli</span> f <span class="op">.</span> <span class="dt">Kleisli</span> g <span class="ot">=</span> <span class="dt">Kleisli</span> (f <span class="op">&lt;=&lt;</span> g)</span></code></pre></div><p>â€¦ and that satisfies the category laws because:</p><div class="sourceCode" id="cb38"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb38-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb38-1" tabindex="-1"></a>(f <span class="op">&lt;=&lt;</span> g) <span class="op">&lt;=&lt;</span> h <span class="ot">=</span> f <span class="op">&lt;=&lt;</span> (g <span class="op">&lt;=&lt;</span> h)</span><br><span id="cb38-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb38-2" tabindex="-1"></a></span><br><span id="cb38-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb38-3" tabindex="-1"></a>f <span class="op">&lt;=&lt;</span> <span class="fu">return</span> <span class="ot">=</span> f</span><br><span id="cb38-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb38-4" tabindex="-1"></a></span><br><span id="cb38-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb38-5" tabindex="-1"></a><span class="fu">return</span> <span class="op">&lt;=&lt;</span> f <span class="ot">=</span> f</span></code></pre></div><blockquote><p>Fun fact: The above category laws for the <code>Kleisli</code> type constructor are isomorphic to the monad laws (in a different sense of the world &quot;isomorphic&quot; that I have not covered).</p></blockquote><p>Once we begin to use <code>Category</code> instances other than functions we can begin to explore more interesting types of â€œmorphismsâ€� and â€œisomorphismsâ€�. However, in order to do so we need to generalize our <code>Isomorphism</code> type like this:</p><div class="sourceCode" id="cb39"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb39-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb39-1" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Isomorphism</span> cat a b <span class="ot">=</span> <span class="dt">Isomorphism</span></span><br><span id="cb39-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb39-2" tabindex="-1"></a>    {<span class="ot"> forward  ::</span> cat a b</span><br><span id="cb39-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb39-3" tabindex="-1"></a>    ,<span class="ot"> backward ::</span> cat b a</span><br><span id="cb39-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb39-4" tabindex="-1"></a>    }</span></code></pre></div><p>â€¦ so that we can store morphisms that are not necessarily functions.</p><p>With that generalized <code>Isomorphism</code> type in hand we can now create a sample <code>Isomorphism</code> in a <code>Kleisli</code><code>Category</code>:</p><div class="sourceCode" id="cb40"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb40-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb40-1" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.Monoid</span> (<span class="dt">Sum</span>(..))</span><br><span id="cb40-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb40-2" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Control.Monad.Writer</span> (<span class="dt">Writer</span>)</span><br><span id="cb40-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb40-3" tabindex="-1"></a></span><br><span id="cb40-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb40-4" tabindex="-1"></a><span class="ot">writerIsomorphism ::</span> <span class="dt">Isomorphism</span> (<span class="dt">Kleisli</span> (<span class="dt">Writer</span> (<span class="dt">Sum</span> <span class="dt">Integer</span>))) () ()</span><br><span id="cb40-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb40-5" tabindex="-1"></a>writerIsomorphism <span class="ot">=</span> <span class="dt">Isomorphism</span>{ forward, backward }</span><br><span id="cb40-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb40-6" tabindex="-1"></a>  <span class="kw">where</span></span><br><span id="cb40-7"><a href="https://www.haskellforall.com/feeds/posts/default#cb40-7" tabindex="-1"></a><span class="ot">    forward ::</span> <span class="dt">Kleisli</span> (<span class="dt">Writer</span> (<span class="dt">Sum</span> <span class="dt">Integer</span>)) () ()</span><br><span id="cb40-8"><a href="https://www.haskellforall.com/feeds/posts/default#cb40-8" tabindex="-1"></a>    forward <span class="ot">=</span> <span class="dt">Kleisli</span> (\_ <span class="ot">-&gt;</span> tell (<span class="dt">Sum</span> <span class="dv">1</span>))</span><br><span id="cb40-9"><a href="https://www.haskellforall.com/feeds/posts/default#cb40-9" tabindex="-1"></a></span><br><span id="cb40-10"><a href="https://www.haskellforall.com/feeds/posts/default#cb40-10" tabindex="-1"></a><span class="ot">    backward ::</span> <span class="dt">Kleisli</span> (<span class="dt">Writer</span> (<span class="dt">Sum</span> <span class="dt">Integer</span>)) () ()</span><br><span id="cb40-11"><a href="https://www.haskellforall.com/feeds/posts/default#cb40-11" tabindex="-1"></a>    backward <span class="ot">=</span> <span class="dt">Kleisli</span> (\_ <span class="ot">-&gt;</span> tell (<span class="dt">Sum</span> (<span class="op">-</span><span class="dv">1</span>)))</span></code></pre></div><p>Like before, we still require that:</p><div class="sourceCode" id="cb41"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb41-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb41-1" tabindex="-1"></a>forward <span class="op">.</span> backward <span class="ot">=</span> <span class="fu">id</span></span><br><span id="cb41-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb41-2" tabindex="-1"></a></span><br><span id="cb41-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb41-3" tabindex="-1"></a>backward <span class="op">.</span> forward <span class="ot">=</span> <span class="fu">id</span></span></code></pre></div><p>â€¦ but in this case the <code>(.)</code> and <code>id</code> in these two isomorphism laws will be the ones for our <code>Kleisli</code> type instead of the ones for functions.</p><details>Proof of isomorphism laws (click to expand) <p>Iâ€™ll skip over several steps for this proof to highlight the relevant parts:</p><div class="sourceCode" id="cb42"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb42-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb42-1" tabindex="-1"></a>forward <span class="op">.</span> backward</span><br><span id="cb42-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb42-2" tabindex="-1"></a></span><br><span id="cb42-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb42-3" tabindex="-1"></a><span class="ot">=</span> <span class="dt">Kleisli</span> (\_ <span class="ot">-&gt;</span> tell (<span class="dt">Sum</span> <span class="dv">1</span>)) <span class="op">.</span> <span class="dt">Kleisli</span> (\_ <span class="ot">-&gt;</span> tell (<span class="dt">Sum</span> (<span class="op">-</span><span class="dv">1</span>)))</span><br><span id="cb42-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb42-4" tabindex="-1"></a></span><br><span id="cb42-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb42-5" tabindex="-1"></a><span class="ot">=</span> <span class="dt">Kleisli</span> ((\_ <span class="ot">-&gt;</span> tell (<span class="dt">Sum</span> <span class="dv">1</span>)) <span class="op">&lt;=&lt;</span> (\_ <span class="ot">-&gt;</span> tell (<span class="dt">Sum</span> (<span class="op">-</span><span class="dv">1</span>))))</span><br><span id="cb42-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb42-6" tabindex="-1"></a></span><br><span id="cb42-7"><a href="https://www.haskellforall.com/feeds/posts/default#cb42-7" tabindex="-1"></a><span class="ot">=</span> <span class="dt">Kleisli</span> (\_ <span class="ot">-&gt;</span> tell (<span class="dt">Sum</span> <span class="dv">0</span>))</span><br><span id="cb42-8"><a href="https://www.haskellforall.com/feeds/posts/default#cb42-8" tabindex="-1"></a></span><br><span id="cb42-9"><a href="https://www.haskellforall.com/feeds/posts/default#cb42-9" tabindex="-1"></a><span class="ot">=</span> <span class="dt">Kleisli</span> <span class="fu">return</span></span><br><span id="cb42-10"><a href="https://www.haskellforall.com/feeds/posts/default#cb42-10" tabindex="-1"></a></span><br><span id="cb42-11"><a href="https://www.haskellforall.com/feeds/posts/default#cb42-11" tabindex="-1"></a><span class="ot">=</span> <span class="fu">id</span></span></code></pre></div>The proof of <code>backward . forward = id</code> is essentially the same thing, except flipped. </details><p>Note our <code>Isomorphism</code> effectively says that the type <code>()</code> is isomorphic to the type <code>()</code> within this <code>Kleisli (Writer (Sum Integer))</code> <code>Category</code>, which is not a very interesting conclusion. Rather, for this <code>Isomorphism</code> the (slightly more) interesting bit is in the â€œmorphismsâ€� (the <code>forward</code> and <code>backward</code>definitions), which are inverses of one another.</p><p>Here is one last example of a non-trivial <code>Category</code>instance with an example isomorphism:</p><div class="sourceCode" id="cb43"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb43-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-1" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Prelude</span> <span class="kw">hiding</span> ((.), id)</span><br><span id="cb43-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-2" tabindex="-1"></a></span><br><span id="cb43-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-3" tabindex="-1"></a><span class="co">-- Note: This is not how the lens package works, but it's still a useful example</span></span><br><span id="cb43-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-4" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Lens</span> a b <span class="ot">=</span> <span class="dt">Lens</span>{<span class="ot"> view ::</span> a <span class="ot">-&gt;</span> b,<span class="ot"> over ::</span> (b <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> a) }</span><br><span id="cb43-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-5" tabindex="-1"></a></span><br><span id="cb43-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-6" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Category</span> <span class="dt">Lens</span> <span class="kw">where</span></span><br><span id="cb43-7"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-7" tabindex="-1"></a>    <span class="fu">id</span> <span class="ot">=</span> <span class="dt">Lens</span>{ view <span class="ot">=</span> <span class="fu">id</span>, over <span class="ot">=</span> <span class="fu">id</span> }</span><br><span id="cb43-8"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-8" tabindex="-1"></a></span><br><span id="cb43-9"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-9" tabindex="-1"></a>    <span class="dt">Lens</span>{ view <span class="ot">=</span> viewL, over <span class="ot">=</span> overL } <span class="op">.</span> <span class="dt">Lens</span>{ view <span class="ot">=</span> viewR, over <span class="ot">=</span> overR } <span class="ot">=</span></span><br><span id="cb43-10"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-10" tabindex="-1"></a>        <span class="dt">Lens</span>{ view <span class="ot">=</span> viewL <span class="op">.</span> viewR, over <span class="ot">=</span> overR <span class="op">.</span> overL }</span><br><span id="cb43-11"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-11" tabindex="-1"></a></span><br><span id="cb43-12"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-12" tabindex="-1"></a><span class="ot">lensIsomorphism ::</span> <span class="dt">Isomorphism</span> <span class="dt">Lens</span> <span class="dt">Bool</span> <span class="dt">Bool</span></span><br><span id="cb43-13"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-13" tabindex="-1"></a>lensIsomorphism <span class="ot">=</span> <span class="dt">Isomorphism</span>{ forward, backward }</span><br><span id="cb43-14"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-14" tabindex="-1"></a>  <span class="kw">where</span></span><br><span id="cb43-15"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-15" tabindex="-1"></a><span class="ot">    forward ::</span> <span class="dt">Lens</span> <span class="dt">Bool</span> <span class="dt">Bool</span></span><br><span id="cb43-16"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-16" tabindex="-1"></a>    forward <span class="ot">=</span> <span class="dt">Lens</span>{ view <span class="ot">=</span> <span class="fu">not</span>, over <span class="ot">=</span> \f <span class="ot">-&gt;</span> <span class="fu">not</span> <span class="op">.</span> f <span class="op">.</span> <span class="fu">not</span> }</span><br><span id="cb43-17"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-17" tabindex="-1"></a></span><br><span id="cb43-18"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-18" tabindex="-1"></a>    <span class="co">-- There is no rule that the two morphisms can't be the same</span></span><br><span id="cb43-19"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-19" tabindex="-1"></a><span class="ot">    backward ::</span> <span class="dt">Lens</span> <span class="dt">Bool</span> <span class="dt">Bool</span></span><br><span id="cb43-20"><a href="https://www.haskellforall.com/feeds/posts/default#cb43-20" tabindex="-1"></a>    backward <span class="ot">=</span> forward</span></code></pre></div><p>Again, itâ€™s not very interesting to say that <code>Bool</code> is isomorphic to <code>Bool</code>, but it is more to note that the <code>forward</code> lens is essentially its own inverse.</p><p>Thereâ€™s one last category I want to quickly mention, which is â€¦ <code>Isomorphism</code>!</p><p>Yes, the <code>Isomorphism</code> type we introduced is itself an instance of the <code>Category</code> class:</p><div class="sourceCode" id="cb44"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb44-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb44-1" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Category</span> cat <span class="ot">=&gt;</span> <span class="dt">Category</span> (<span class="dt">Isomorphism</span> cat) <span class="kw">where</span></span><br><span id="cb44-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb44-2" tabindex="-1"></a>    <span class="dt">Isomorphism</span> forwardL backwardL <span class="op">.</span> <span class="dt">Isomorphism</span> forwardR backwardR <span class="ot">=</span></span><br><span id="cb44-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb44-3" tabindex="-1"></a>        <span class="dt">Isomorphism</span> (forwardL <span class="op">.</span> forwardR) (backwardR <span class="op">.</span> backwardL)</span><br><span id="cb44-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb44-4" tabindex="-1"></a></span><br><span id="cb44-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb44-5" tabindex="-1"></a>    <span class="fu">id</span> <span class="ot">=</span> <span class="dt">Isomorphism</span> <span class="fu">id</span> <span class="fu">id</span></span></code></pre></div><p>You might even say that an â€œisomorphismâ€� is a â€œmorphismâ€� in the above <code>Category</code>. An â€œisoâ€�-â€œmorphismâ€�, if you will (where â€œisoâ€� means â€œsameâ€�).</p><p>Furthermore, we can create an example <code>Isomorphism</code> in this <code>Category</code> of <code>Isomorphism</code>s:</p><div class="sourceCode" id="cb45"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb45-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb45-1" tabindex="-1"></a><span class="ot">nestedIsomorphism ::</span> <span class="dt">Isomorphism</span> (<span class="dt">Isomorphism</span> (<span class="ot">-&gt;</span>)) <span class="dt">Integer</span> <span class="dt">Integer</span></span><br><span id="cb45-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb45-2" tabindex="-1"></a>nestedIsomorphism <span class="ot">=</span></span><br><span id="cb45-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb45-3" tabindex="-1"></a>    <span class="dt">Isomorphism</span></span><br><span id="cb45-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb45-4" tabindex="-1"></a>        { forward  <span class="ot">=</span> <span class="dt">Isomorphism</span>{ forward <span class="ot">=</span> (<span class="op">+</span> <span class="dv">1</span>), backward <span class="ot">=</span> <span class="fu">subtract</span> <span class="dv">1</span> }</span><br><span id="cb45-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb45-5" tabindex="-1"></a>        , backward <span class="ot">=</span> <span class="dt">Isomorphism</span>{ forward <span class="ot">=</span> <span class="fu">subtract</span> <span class="dv">1</span>, backward <span class="ot">=</span> (<span class="op">+</span> <span class="dv">1</span>) }</span><br><span id="cb45-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb45-6" tabindex="-1"></a>        }</span></code></pre></div><p>Okay, perhaps thatâ€™s going a bit too far, but I just wanted to end this post with a cute example of how you can keep chaining these ideas together in new ways.</p><h4 id="conclusion">Conclusion</h4><p>In my experience, the more you train your ability to reason formally about isomorphisms the more you broaden your ability to recognize disparate things as equivalent and draw interesting connections between them.</p><p>For example, fluency with many common isomorphisms is a useful skill for API design because often there might be a way to take an API which is not very ergonomic and refactor it into an equivalent (isomorphic) API which is more ergonomic to use.</p></div>
    </content>
    <updated>2022-10-22T20:12:19Z</updated>
    <published>2022-10-20T14:31:00Z</published>
    <author>
      <name>Gabriella Gonzalez</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/01917800488530923694</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-1777990983847811806</id>
      <author>
        <name>Gabriella Gonzalez</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/01917800488530923694</uri>
      </author>
      <link href="https://www.haskellforall.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml">
      <link href="https://www.blogger.com/feeds/1777990983847811806/posts/default" rel="self" type="application/atom+xml">
      <link href="https://www.haskellforall.com/" rel="alternate" type="text/html">
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html">
      <link href="https://www.blogger.com/feeds/1777990983847811806/posts/default?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml">
      <title>Haskell for all</title>
      <updated>2022-11-14T19:18:39Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://doisinkidney.com/posts/2022-10-17-lazy-group-on.html</id>
    <link href="https://doisinkidney.com/posts/2022-10-17-lazy-group-on.html" rel="alternate" type="text/html">
    <title>Lazily Grouping in Haskell</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div class="info">
    Posted on October 17, 2022
</div>
<div class="info">
    
</div>
<div class="info">
    
        Tags: <a href="https://doisinkidney.com/tags/Haskell.html" title="All pages tagged 'Haskell'.">Haskell</a>
    
</div>

<p>Hereâ€™s a cool trick:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="https://doisinkidney.com/rss.xml#cb1-1"></a><span class="fu">minimum</span><span class="ot"> ::</span> <span class="dt">Ord</span> a <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span> a</span>
<span id="cb1-2"><a href="https://doisinkidney.com/rss.xml#cb1-2"></a><span class="fu">minimum</span> <span class="ot">=</span> <span class="fu">head</span> <span class="op">.</span> <span class="fu">sort</span></span></code></pre></div>
<p>This is <math display="inline">&lt;semantics&gt;<mrow><mstyle mathvariant="script"><mi>ğ�’ª</mi></mstyle><mo form="prefix" stretchy="false">(</mo><mi>n</mi><mo form="postfix" stretchy="false">)</mo></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\mathcal{O}(n)&lt;/annotation&gt;&lt;/semantics&gt;</math> in Haskell, not <math display="inline">&lt;semantics&gt;<mrow><mstyle mathvariant="script"><mi>ğ�’ª</mi></mstyle><mo form="prefix" stretchy="false">(</mo><mi>n</mi><mo>log</mo><mi>n</mi><mo form="postfix" stretchy="false">)</mo></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\mathcal{O}(n \log n)&lt;/annotation&gt;&lt;/semantics&gt;</math> as you might expect. And this isnâ€™t because Haskell is using some weird linear-time sorting algorithm; indeed, the following is <math display="inline">&lt;semantics&gt;<mrow><mstyle mathvariant="script"><mi>ğ�’ª</mi></mstyle><mo form="prefix" stretchy="false">(</mo><mi>n</mi><mo>log</mo><mi>n</mi><mo form="postfix" stretchy="false">)</mo></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\mathcal{O}(n \log n)&lt;/annotation&gt;&lt;/semantics&gt;</math>:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="https://doisinkidney.com/rss.xml#cb2-1"></a><span class="fu">maximum</span><span class="ot"> ::</span> <span class="dt">Ord</span> a <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span> a</span>
<span id="cb2-2"><a href="https://doisinkidney.com/rss.xml#cb2-2"></a><span class="fu">maximum</span> <span class="ot">=</span> <span class="fu">last</span> <span class="op">.</span> <span class="fu">sort</span></span></code></pre></div>
<p>No: since the implementation of <code>minimum</code> above only demands the first element of the list, and since <code>sort</code> has been carefully implemented, only a linear amount of work will be done to retrieve it.</p>
<p>Itâ€™s not easy to structure programs to have the same property as <code>sort</code> does above: to be maximally lazy, such that unnecessary work is not performed. Today I was working on a maximally lazy implementation of the following program:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="https://doisinkidney.com/rss.xml#cb3-1"></a><span class="ot">groupOn ::</span> <span class="dt">Eq</span> k <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> k) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> [(k,[a])]</span>
<span id="cb3-2"><a href="https://doisinkidney.com/rss.xml#cb3-2"></a>groupOn <span class="ot">=</span> <span class="op">...</span></span>
<span id="cb3-3"><a href="https://doisinkidney.com/rss.xml#cb3-3"></a></span>
<span id="cb3-4"><a href="https://doisinkidney.com/rss.xml#cb3-4"></a><span class="op">&gt;&gt;&gt;</span> groupOn (<span class="ot">`rem`</span> <span class="dv">2</span>) [<span class="dv">1</span><span class="op">..</span><span class="dv">5</span>]</span>
<span id="cb3-5"><a href="https://doisinkidney.com/rss.xml#cb3-5"></a>[(<span class="dv">1</span>,[<span class="dv">1</span>,<span class="dv">3</span>,<span class="dv">5</span>]),(<span class="dv">0</span>,[<span class="dv">2</span>,<span class="dv">4</span>])]</span>
<span id="cb3-6"><a href="https://doisinkidney.com/rss.xml#cb3-6"></a></span>
<span id="cb3-7"><a href="https://doisinkidney.com/rss.xml#cb3-7"></a><span class="op">&gt;&gt;&gt;</span> groupOn (<span class="ot">`rem`</span> <span class="dv">3</span>) [<span class="dv">5</span>,<span class="dv">8</span>,<span class="dv">3</span>,<span class="dv">6</span>,<span class="dv">2</span>]</span>
<span id="cb3-8"><a href="https://doisinkidney.com/rss.xml#cb3-8"></a>[(<span class="dv">2</span>,[<span class="dv">5</span>,<span class="dv">8</span>,<span class="dv">2</span>]),(<span class="dv">0</span>,[<span class="dv">3</span>,<span class="dv">6</span>])]</span></code></pre></div>
<p>This function groups the elements of a list according to some key function. The desired behaviour here is a little subtle: we donâ€™t want to just group adjacent elements, for instance.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="https://doisinkidney.com/rss.xml#cb4-1"></a>groupOn (<span class="ot">`rem`</span> <span class="dv">3</span>) [<span class="dv">5</span>,<span class="dv">8</span>,<span class="dv">3</span>,<span class="dv">6</span>,<span class="dv">2</span>] â‰¢ [(<span class="dv">2</span>,[<span class="dv">5</span>,<span class="dv">8</span>]),(<span class="dv">0</span>,[<span class="dv">3</span>,<span class="dv">6</span>]),(<span class="dv">2</span>,[<span class="dv">2</span>])]</span></code></pre></div>
<p>And we donâ€™t want to reorder the elements of the list by the keys:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="https://doisinkidney.com/rss.xml#cb5-1"></a>groupOn (<span class="ot">`rem`</span> <span class="dv">3</span>) [<span class="dv">5</span>,<span class="dv">8</span>,<span class="dv">3</span>,<span class="dv">6</span>,<span class="dv">2</span>] â‰¢ [(<span class="dv">0</span>,[<span class="dv">3</span>,<span class="dv">6</span>]),(<span class="dv">2</span>,[<span class="dv">5</span>,<span class="dv">8</span>,<span class="dv">2</span>])]</span></code></pre></div>
<p>These constraints make it especially tricky to make this function lazy. In fact, at first glance, it seems impossible. What should, for instance, <code>groupOn id [1..]</code> return? It canâ€™t even fill out the first group, since it will never find another <code>1</code>. However, it <em>can</em> fill out the first key. And, in fact, the second. And it can fill out the first element of the first group. Precisely:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="https://doisinkidney.com/rss.xml#cb6-1"></a>groupOn <span class="fu">id</span> [<span class="dv">1</span><span class="op">..</span>] â‰¡ [(<span class="dv">1</span>,<span class="dv">1</span><span class="op">:</span>âŠ¥), (<span class="dv">2</span>,<span class="dv">2</span><span class="op">:</span>âŠ¥), (<span class="dv">3</span>,<span class="dv">3</span><span class="op">:</span>âŠ¥), <span class="op">...</span></span></code></pre></div>
<p>Another example is <code>groupOn id (repeat 1)</code>, or <code>groupOn id (cycle [1,2,3])</code>. These each have partially-defined answers:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="https://doisinkidney.com/rss.xml#cb7-1"></a>groupOn <span class="fu">id</span> (<span class="fu">repeat</span> <span class="dv">1</span>)      â‰¡ (<span class="dv">1</span>,<span class="fu">repeat</span> <span class="dv">1</span>)<span class="op">:</span>âŠ¥</span>
<span id="cb7-2"><a href="https://doisinkidney.com/rss.xml#cb7-2"></a></span>
<span id="cb7-3"><a href="https://doisinkidney.com/rss.xml#cb7-3"></a>groupOn <span class="fu">id</span> (<span class="fu">cycle</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>]) â‰¡ (<span class="dv">1</span>,<span class="fu">repeat</span> <span class="dv">1</span>)<span class="op">:</span>(<span class="dv">2</span>,<span class="fu">repeat</span> <span class="dv">2</span>)<span class="op">:</span>(<span class="dv">3</span>,<span class="fu">repeat</span> <span class="dv">3</span>)<span class="op">:</span>âŠ¥</span></code></pre></div>
<p>So there is some kind of well-defined lazy semantics for this function. The puzzle I was interested in was defining an efficient implementation for these semantics.</p>
<h1 id="the-slow-case">The Slow Case</h1>
<p>The first approximation to a solution I could think of is the following:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="https://doisinkidney.com/rss.xml#cb8-1"></a><span class="ot">groupOn ::</span> <span class="dt">Ord</span> k <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> k) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> [(k, [a])]</span>
<span id="cb8-2"><a href="https://doisinkidney.com/rss.xml#cb8-2"></a>groupOn k <span class="ot">=</span> Map.toList <span class="op">.</span> Map.fromListWith (<span class="op">++</span>) <span class="op">.</span> <span class="fu">map</span> (\x <span class="ot">-&gt;</span> (k x, [x]))</span></code></pre></div>
<p>In fact, if you donâ€™t care about laziness, this is probably the best solution: itâ€™s <math display="inline">&lt;semantics&gt;<mrow><mstyle mathvariant="script"><mi>ğ�’ª</mi></mstyle><mo form="prefix" stretchy="false">(</mo><mi>n</mi><mo>log</mo><mi>n</mi><mo form="postfix" stretchy="false">)</mo></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\mathcal{O}(n \log n)&lt;/annotation&gt;&lt;/semantics&gt;</math>, it performs well (practically as well as asymptotically), and it has the expected results.</p>
<p>However, there are problems. Primarily this solution cares about ordering, which we donâ€™t want. We want to emit the results in the same order that they were in the original list, and we donâ€™t necessarily want to require an ordering on the elements (for the efficient solution we will relax this last constraint).</p>
<p>Instead, letâ€™s implement our own â€œmapâ€� type that is inefficient, but more general.</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="https://doisinkidney.com/rss.xml#cb9-1"></a><span class="kw">type</span> <span class="dt">Map</span> a b <span class="ot">=</span> [(a,b)]</span>
<span id="cb9-2"><a href="https://doisinkidney.com/rss.xml#cb9-2"></a></span>
<span id="cb9-3"><a href="https://doisinkidney.com/rss.xml#cb9-3"></a><span class="ot">insertWith ::</span> <span class="dt">Eq</span> a <span class="ot">=&gt;</span> (b <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> <span class="dt">Map</span> a b <span class="ot">-&gt;</span> <span class="dt">Map</span> a b</span>
<span id="cb9-4"><a href="https://doisinkidney.com/rss.xml#cb9-4"></a>insertWith f k v [] <span class="ot">=</span> [(k,v)]</span>
<span id="cb9-5"><a href="https://doisinkidney.com/rss.xml#cb9-5"></a>insertWith f k v ((k',v')<span class="op">:</span>xs)</span>
<span id="cb9-6"><a href="https://doisinkidney.com/rss.xml#cb9-6"></a>  <span class="op">|</span> k <span class="op">==</span> k'   <span class="ot">=</span> (k',f v v') <span class="op">:</span> xs</span>
<span id="cb9-7"><a href="https://doisinkidney.com/rss.xml#cb9-7"></a>  <span class="op">|</span> <span class="fu">otherwise</span> <span class="ot">=</span> (k',v') <span class="op">:</span> insertWith f k v xs</span>
<span id="cb9-8"><a href="https://doisinkidney.com/rss.xml#cb9-8"></a></span>
<span id="cb9-9"><a href="https://doisinkidney.com/rss.xml#cb9-9"></a><span class="ot">groupOn ::</span> <span class="dt">Eq</span> k <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> k) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> [(k, [a])]</span>
<span id="cb9-10"><a href="https://doisinkidney.com/rss.xml#cb9-10"></a>groupOn k <span class="ot">=</span> <span class="fu">foldr</span> (<span class="fu">uncurry</span> (insertWith (<span class="op">++</span>))) [] <span class="op">.</span> <span class="fu">map</span> (\x <span class="ot">-&gt;</span> (k x, [x]))</span></code></pre></div>
<p>The problem here is that itâ€™s not lazy enough. <code>insertWith</code> is strict in its last argument, which means that using <code>foldr</code> doesnâ€™t gain us anything laziness-wise.</p>
<p>There is some extra information we can use to drive the result: we know that the result will have keys that are in the same order as they appear in the list, with duplicates removed:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="https://doisinkidney.com/rss.xml#cb10-1"></a><span class="ot">groupOn ::</span> <span class="dt">Eq</span> k <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> k) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> [(k, [a])]</span>
<span id="cb10-2"><a href="https://doisinkidney.com/rss.xml#cb10-2"></a>groupOn k xs <span class="ot">=</span> <span class="fu">map</span> _ ks</span>
<span id="cb10-3"><a href="https://doisinkidney.com/rss.xml#cb10-3"></a>  <span class="kw">where</span></span>
<span id="cb10-4"><a href="https://doisinkidney.com/rss.xml#cb10-4"></a>    ks <span class="ot">=</span> <span class="fu">map</span> k xs</span></code></pre></div>
<p>From here, we can get what the values should be from each key by filtering the original list:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="https://doisinkidney.com/rss.xml#cb11-1"></a><span class="ot">groupOn ::</span> <span class="dt">Eq</span> k <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> k) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> [(k,[a])]</span>
<span id="cb11-2"><a href="https://doisinkidney.com/rss.xml#cb11-2"></a>groupOn key xs <span class="ot">=</span> <span class="fu">map</span> (\k <span class="ot">-&gt;</span> (k, <span class="fu">filter</span> ((k<span class="op">==</span>) <span class="op">.</span> key) xs)) (nub (<span class="fu">map</span> key xs))</span></code></pre></div>
<p>Using a kind of <a href="https://en.wikipedia.org/wiki/Schwartzian_transform">Schwartzian transform</a> yields the following slight improvement:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="https://doisinkidney.com/rss.xml#cb12-1"></a><span class="ot">groupOn ::</span> <span class="dt">Eq</span> k <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> k) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> [(k,[a])]</span>
<span id="cb12-2"><a href="https://doisinkidney.com/rss.xml#cb12-2"></a>groupOn key xs <span class="ot">=</span> <span class="fu">map</span> (\k <span class="ot">-&gt;</span> (k , <span class="fu">map</span> <span class="fu">snd</span> (<span class="fu">filter</span> ((k<span class="op">==</span>) <span class="op">.</span> <span class="fu">fst</span>) ks))) (nub (<span class="fu">map</span> <span class="fu">fst</span> ks))</span>
<span id="cb12-3"><a href="https://doisinkidney.com/rss.xml#cb12-3"></a>  <span class="kw">where</span></span>
<span id="cb12-4"><a href="https://doisinkidney.com/rss.xml#cb12-4"></a>    ks <span class="ot">=</span> <span class="fu">map</span> (\x <span class="ot">-&gt;</span> (key x, x)) xs</span></code></pre></div>
<p>But this traverses the same list multiple times unnecessarily. The problem is that weâ€™re repeating a lot of work between <code>nub</code> and the rest of the algorithm.</p>
<p>The following is much better:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="https://doisinkidney.com/rss.xml#cb13-1"></a><span class="ot">groupOn ::</span> <span class="dt">Eq</span> k <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> k) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> [(k,[a])]</span>
<span id="cb13-2"><a href="https://doisinkidney.com/rss.xml#cb13-2"></a>groupOn key <span class="ot">=</span> go <span class="op">.</span> <span class="fu">map</span> (\x <span class="ot">-&gt;</span> (key x, x)) </span>
<span id="cb13-3"><a href="https://doisinkidney.com/rss.xml#cb13-3"></a>  <span class="kw">where</span></span>
<span id="cb13-4"><a href="https://doisinkidney.com/rss.xml#cb13-4"></a>    go [] <span class="ot">=</span> []</span>
<span id="cb13-5"><a href="https://doisinkidney.com/rss.xml#cb13-5"></a>    go ((k,x)<span class="op">:</span>xs) <span class="ot">=</span> (k,x<span class="op">:</span><span class="fu">map</span> <span class="fu">snd</span> y) <span class="op">:</span> go ys</span>
<span id="cb13-6"><a href="https://doisinkidney.com/rss.xml#cb13-6"></a>      <span class="kw">where</span></span>
<span id="cb13-7"><a href="https://doisinkidney.com/rss.xml#cb13-7"></a>        (y,ys) <span class="ot">=</span> partition ((k<span class="op">==</span>)<span class="op">.</span><span class="fu">fst</span>) xs</span></code></pre></div>
<p>First, we perform the Schwartzian transform optimisation. The work of the algorithm is done in the <code>go</code> helper. The idea is to filter out duplicates as we encounter them: when we encounter <code>(k,x)</code> we can keep it immediately, but then we split the rest of the list into the components that have the same key as this element, and the ones that differ. The ones that have the same key can form the collection for this key, and those that differ are what we recurse on.</p>
<p>This partitioning also avoids re-traversing elements we know to be already accounted for in a previous group. I think that this is the most efficient (modulo some inlining and strictness improvements) algorithm that can do <code>groupOn</code> with just an <code>Eq</code> constraint.</p>
<h1 id="a-faster-version">A Faster Version</h1>
<p>The reason that the <code>groupOn</code> above is slow is that every element returned has to traverse the entire rest of the list to remove duplicates. This is a classic pattern of quadratic behaviour: we can improve it by using the same trick as quick sort, by partitioning the list into lesser and greater elements on every call.</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="https://doisinkidney.com/rss.xml#cb14-1"></a><span class="ot">groupOnOrd ::</span> <span class="dt">Ord</span> k <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> k) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> [(k,[a])]</span>
<span id="cb14-2"><a href="https://doisinkidney.com/rss.xml#cb14-2"></a>groupOnOrd key <span class="ot">=</span> go <span class="op">.</span> <span class="fu">map</span> (\x <span class="ot">-&gt;</span> (key x, x)) </span>
<span id="cb14-3"><a href="https://doisinkidney.com/rss.xml#cb14-3"></a>  <span class="kw">where</span></span>
<span id="cb14-4"><a href="https://doisinkidney.com/rss.xml#cb14-4"></a>    go [] <span class="ot">=</span> []</span>
<span id="cb14-5"><a href="https://doisinkidney.com/rss.xml#cb14-5"></a>    go ((k,x)<span class="op">:</span>xs) <span class="ot">=</span> (k,x<span class="op">:</span>e) <span class="op">:</span> go lt <span class="op">++</span> go gt</span>
<span id="cb14-6"><a href="https://doisinkidney.com/rss.xml#cb14-6"></a>      <span class="kw">where</span></span>
<span id="cb14-7"><a href="https://doisinkidney.com/rss.xml#cb14-7"></a>        (e,lt,gt) <span class="ot">=</span> <span class="fu">foldr</span> split ([],[],[]) xs</span>
<span id="cb14-8"><a href="https://doisinkidney.com/rss.xml#cb14-8"></a>        split ky<span class="op">@</span>(k',y) <span class="op">~</span>(e,lt,gt) <span class="ot">=</span> <span class="kw">case</span> <span class="fu">compare</span> k' k <span class="kw">of</span></span>
<span id="cb14-9"><a href="https://doisinkidney.com/rss.xml#cb14-9"></a>          <span class="dt">LT</span> <span class="ot">-&gt;</span> (e, ky<span class="op">:</span>lt, gt)</span>
<span id="cb14-10"><a href="https://doisinkidney.com/rss.xml#cb14-10"></a>          <span class="dt">EQ</span> <span class="ot">-&gt;</span> (y<span class="op">:</span>e, lt, gt)</span>
<span id="cb14-11"><a href="https://doisinkidney.com/rss.xml#cb14-11"></a>          <span class="dt">GT</span> <span class="ot">-&gt;</span> (e, lt, ky<span class="op">:</span>gt)</span></code></pre></div>
<p>While this is <math display="inline">&lt;semantics&gt;<mrow><mstyle mathvariant="script"><mi>ğ�’ª</mi></mstyle><mo form="prefix" stretchy="false">(</mo><mi>n</mi><mo>log</mo><mi>n</mi><mo form="postfix" stretchy="false">)</mo></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\mathcal{O}(n \log n)&lt;/annotation&gt;&lt;/semantics&gt;</math>, and it does group elements, it also reorders the underlying list. Letâ€™s fix that by tagging the incoming elements with their positions, and then using those positions to order them back into their original configuration:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="https://doisinkidney.com/rss.xml#cb15-1"></a><span class="ot">groupOnOrd ::</span> <span class="dt">Ord</span> k <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> k) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> [(k,[a])]</span>
<span id="cb15-2"><a href="https://doisinkidney.com/rss.xml#cb15-2"></a>groupOnOrd k <span class="ot">=</span> <span class="fu">map</span> (\(_,k,xs) <span class="ot">-&gt;</span> (k,xs)) <span class="op">.</span> go <span class="op">.</span> <span class="fu">zipWith</span> (\i x <span class="ot">-&gt;</span> (i, k x, x)) [<span class="dv">0</span><span class="op">..</span>]</span>
<span id="cb15-3"><a href="https://doisinkidney.com/rss.xml#cb15-3"></a>  <span class="kw">where</span></span>
<span id="cb15-4"><a href="https://doisinkidney.com/rss.xml#cb15-4"></a>    go [] <span class="ot">=</span> []</span>
<span id="cb15-5"><a href="https://doisinkidney.com/rss.xml#cb15-5"></a>    go ((i, k, x)<span class="op">:</span>xs) <span class="ot">=</span> (i, k, x <span class="op">:</span> e) <span class="op">:</span> merge (go l) (go g)</span>
<span id="cb15-6"><a href="https://doisinkidney.com/rss.xml#cb15-6"></a>      <span class="kw">where</span> </span>
<span id="cb15-7"><a href="https://doisinkidney.com/rss.xml#cb15-7"></a>        (e, l, g) <span class="ot">=</span> <span class="fu">foldr</span> split ([],[],[]) xs</span>
<span id="cb15-8"><a href="https://doisinkidney.com/rss.xml#cb15-8"></a>        </span>
<span id="cb15-9"><a href="https://doisinkidney.com/rss.xml#cb15-9"></a>        split ky<span class="op">@</span>(_,k',y) <span class="op">~</span>(e, l, g) <span class="ot">=</span> <span class="kw">case</span> <span class="fu">compare</span> k' k <span class="kw">of</span></span>
<span id="cb15-10"><a href="https://doisinkidney.com/rss.xml#cb15-10"></a>          <span class="dt">LT</span> <span class="ot">-&gt;</span> (e  , ky <span class="op">:</span> l,      g)</span>
<span id="cb15-11"><a href="https://doisinkidney.com/rss.xml#cb15-11"></a>          <span class="dt">EQ</span> <span class="ot">-&gt;</span> (y<span class="op">:</span>e,      l,      g)</span>
<span id="cb15-12"><a href="https://doisinkidney.com/rss.xml#cb15-12"></a>          <span class="dt">GT</span> <span class="ot">-&gt;</span> (e  ,      l, ky <span class="op">:</span> g)</span>
<span id="cb15-13"><a href="https://doisinkidney.com/rss.xml#cb15-13"></a>          </span>
<span id="cb15-14"><a href="https://doisinkidney.com/rss.xml#cb15-14"></a>    merge [] gt <span class="ot">=</span> gt</span>
<span id="cb15-15"><a href="https://doisinkidney.com/rss.xml#cb15-15"></a>    merge lt [] <span class="ot">=</span> lt</span>
<span id="cb15-16"><a href="https://doisinkidney.com/rss.xml#cb15-16"></a>    merge (l<span class="op">@</span>(i,_,_)<span class="op">:</span>lt) (g<span class="op">@</span>(j,_,_)<span class="op">:</span>gt)</span>
<span id="cb15-17"><a href="https://doisinkidney.com/rss.xml#cb15-17"></a>      <span class="op">|</span> i <span class="op">&lt;=</span> j    <span class="ot">=</span> l <span class="op">:</span> merge lt (g<span class="op">:</span>gt)</span>
<span id="cb15-18"><a href="https://doisinkidney.com/rss.xml#cb15-18"></a>      <span class="op">|</span> <span class="fu">otherwise</span> <span class="ot">=</span> g <span class="op">:</span> merge (l<span class="op">:</span>lt) gt</span></code></pre></div>
<p>This is close, but still not right. This isnâ€™t yet <em>lazy</em>. The <code>merge</code> function is strict in both arguments.</p>
<p>However, we have all the information we need to unshuffle the lists without having to inspect them. In <code>split</code>, we know which direction we put each element: we can store that info without using indices.</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="https://doisinkidney.com/rss.xml#cb16-1"></a><span class="ot">groupOnOrd ::</span> <span class="dt">Ord</span> k <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> k) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> [(k,[a])]</span>
<span id="cb16-2"><a href="https://doisinkidney.com/rss.xml#cb16-2"></a>groupOnOrd k <span class="ot">=</span> catMaybes <span class="op">.</span> go <span class="op">.</span> <span class="fu">map</span> (\x <span class="ot">-&gt;</span> (k x, x))</span>
<span id="cb16-3"><a href="https://doisinkidney.com/rss.xml#cb16-3"></a>  <span class="kw">where</span></span>
<span id="cb16-4"><a href="https://doisinkidney.com/rss.xml#cb16-4"></a>    go [] <span class="ot">=</span> []</span>
<span id="cb16-5"><a href="https://doisinkidney.com/rss.xml#cb16-5"></a>    go ((k,x)<span class="op">:</span>xs) <span class="ot">=</span> <span class="dt">Just</span> (k, x <span class="op">:</span> e) <span class="op">:</span> merge m (go l) (go g)</span>
<span id="cb16-6"><a href="https://doisinkidney.com/rss.xml#cb16-6"></a>      <span class="kw">where</span> </span>
<span id="cb16-7"><a href="https://doisinkidney.com/rss.xml#cb16-7"></a>        (e, m, l, g) <span class="ot">=</span> <span class="fu">foldr</span> split ([],[],[],[]) xs</span>
<span id="cb16-8"><a href="https://doisinkidney.com/rss.xml#cb16-8"></a>        </span>
<span id="cb16-9"><a href="https://doisinkidney.com/rss.xml#cb16-9"></a>        split ky<span class="op">@</span>(k',y) <span class="op">~</span>(e, m, l, g) <span class="ot">=</span> <span class="kw">case</span> <span class="fu">compare</span> k' k <span class="kw">of</span></span>
<span id="cb16-10"><a href="https://doisinkidney.com/rss.xml#cb16-10"></a>          <span class="dt">LT</span> <span class="ot">-&gt;</span> (  e, <span class="dt">LT</span> <span class="op">:</span> m, ky <span class="op">:</span> l,      g)</span>
<span id="cb16-11"><a href="https://doisinkidney.com/rss.xml#cb16-11"></a>          <span class="dt">EQ</span> <span class="ot">-&gt;</span> (y<span class="op">:</span>e, <span class="dt">EQ</span> <span class="op">:</span> m,      l,      g)</span>
<span id="cb16-12"><a href="https://doisinkidney.com/rss.xml#cb16-12"></a>          <span class="dt">GT</span> <span class="ot">-&gt;</span> (  e, <span class="dt">GT</span> <span class="op">:</span> m,      l, ky <span class="op">:</span> g)</span>
<span id="cb16-13"><a href="https://doisinkidney.com/rss.xml#cb16-13"></a>          </span>
<span id="cb16-14"><a href="https://doisinkidney.com/rss.xml#cb16-14"></a>    merge []        lt     gt     <span class="ot">=</span> []</span>
<span id="cb16-15"><a href="https://doisinkidney.com/rss.xml#cb16-15"></a>    merge (<span class="dt">EQ</span> <span class="op">:</span> xs) lt     gt     <span class="ot">=</span> <span class="dt">Nothing</span> <span class="op">:</span> merge xs lt gt</span>
<span id="cb16-16"><a href="https://doisinkidney.com/rss.xml#cb16-16"></a>    merge (<span class="dt">LT</span> <span class="op">:</span> xs) (l<span class="op">:</span>lt) gt     <span class="ot">=</span> l       <span class="op">:</span> merge xs lt gt</span>
<span id="cb16-17"><a href="https://doisinkidney.com/rss.xml#cb16-17"></a>    merge (<span class="dt">GT</span> <span class="op">:</span> xs) lt     (g<span class="op">:</span>gt) <span class="ot">=</span> g       <span class="op">:</span> merge xs lt gt</span></code></pre></div>
<p>What we generate here is a <code>[Ordering]</code>: this list tells us the result of all the compare operations on the input list. Then, in <code>merge</code>, we invert the action of <code>split</code>, rebuilding the original list without inspecting either <code>lt</code> or <code>gt</code>.</p>
<p>And this solution works! Itâ€™s <math display="inline">&lt;semantics&gt;<mrow><mstyle mathvariant="script"><mi>ğ�’ª</mi></mstyle><mo form="prefix" stretchy="false">(</mo><mi>n</mi><mo>log</mo><mi>n</mi><mo form="postfix" stretchy="false">)</mo></mrow>&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\mathcal{O}(n \log n)&lt;/annotation&gt;&lt;/semantics&gt;</math>, and fully lazy.</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="https://doisinkidney.com/rss.xml#cb17-1"></a><span class="op">&gt;&gt;&gt;</span> <span class="fu">map</span> <span class="fu">fst</span> <span class="op">.</span> groupOnOrd <span class="fu">id</span> <span class="op">$</span> [<span class="dv">1</span><span class="op">..</span>]</span>
<span id="cb17-2"><a href="https://doisinkidney.com/rss.xml#cb17-2"></a>[<span class="dv">1</span><span class="op">..</span>]</span>
<span id="cb17-3"><a href="https://doisinkidney.com/rss.xml#cb17-3"></a></span>
<span id="cb17-4"><a href="https://doisinkidney.com/rss.xml#cb17-4"></a><span class="op">&gt;&gt;&gt;</span> groupOnOrd <span class="fu">id</span> <span class="op">$</span> <span class="fu">cycle</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>]</span>
<span id="cb17-5"><a href="https://doisinkidney.com/rss.xml#cb17-5"></a>(<span class="dv">1</span>,<span class="fu">repeat</span> <span class="dv">1</span>)<span class="op">:</span>(<span class="dv">2</span>,<span class="fu">repeat</span> <span class="dv">2</span>)<span class="op">:</span>(<span class="dv">3</span>,<span class="fu">repeat</span> <span class="dv">3</span>)<span class="op">:</span>âŠ¥</span>
<span id="cb17-6"><a href="https://doisinkidney.com/rss.xml#cb17-6"></a></span>
<span id="cb17-7"><a href="https://doisinkidney.com/rss.xml#cb17-7"></a><span class="op">&gt;&gt;&gt;</span> groupOnOrd (<span class="ot">`rem`</span> <span class="dv">3</span>) [<span class="dv">1</span><span class="op">..</span>]</span>
<span id="cb17-8"><a href="https://doisinkidney.com/rss.xml#cb17-8"></a>(<span class="dv">1</span>,[<span class="dv">1</span>,<span class="dv">4</span><span class="op">..</span>])<span class="op">:</span>(<span class="dv">2</span>,[<span class="dv">2</span>,<span class="dv">5</span><span class="op">..</span>])<span class="op">:</span>(<span class="dv">0</span>,[<span class="dv">3</span>,<span class="dv">6</span><span class="op">..</span>])<span class="op">:</span>âŠ¥</span></code></pre></div>
<p>The finished version of these two functions, along with some benchmarks, is available <a href="https://gist.github.com/oisdk/0822477aaced58a5ba937c3d11c19639">here</a>.</p></div>
    </summary>
    <updated>2022-10-17T00:00:00Z</updated>
    <published>2022-10-17T00:00:00Z</published>
    <author>
      <name>Donnacha Oisín Kidney</name>
    </author>
    <source>
      <id>https://doisinkidney.com</id>
      <link href="https://doisinkidney.com" rel="alternate" type="text/html">
      <link href="https://doisinkidney.com/rss.xml" rel="self" type="application/rss+xml">
      <subtitle>Mainly writing about programming</subtitle>
      <title>Donnacha Oisín Kidney's Blog</title>
      <updated>2022-10-17T00:00:00Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-6757805.post-7725163179070485498</id>
    <link href="http://kenta.blogspot.com/feeds/7725163179070485498/comments/default" rel="replies" title="Post Comments" type="application/atom+xml">
    <link href="http://www.blogger.com/comment.g?blogID=6757805&amp;postID=7725163179070485498&amp;isPopup=true" rel="replies" title="0 Comments" type="text/html">
    <link href="http://www.blogger.com/feeds/6757805/posts/default/7725163179070485498" rel="edit" type="application/atom+xml">
    <link href="http://www.blogger.com/feeds/6757805/posts/default/7725163179070485498" rel="self" type="application/atom+xml">
    <link href="http://kenta.blogspot.com/2022/10/ykoqomhu-summing-reciprocals-minimizing.html" rel="alternate" title="[ykoqomhu] summing reciprocals minimizing round-off error" type="text/html">
    <title>[ykoqomhu] summing reciprocals minimizing round-off error</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>to decrease round-off error when summing a collection of positive floating-point numbers, sum numbers from smallest to largest.  however, it is not as simple as just first sorting the input list: a partial sum could become large compared to the next number to be added.  better is to put all the numbers in a priority queue (heap), then repeatedly pop off the two smallest numbers, add them, and push them back into the priority queue.  (increased precision comes at the cost of a factor of log n time.)  we demonstrate this in Haskell, using Data.PQueue.Min in the <a href="https://hackage.haskell.org/package/pqueue">pqueue package</a> as our priority queue.  we sum exact Rational numbers for simplicity, and we keep track of what got added to what in an expression tree.</p><p>future work: keep track of roundoff error.</p>  <p>(related work, not implemented here: Kahan summation is another way to decrease round-off error.  Kahan was previously mentioned in the context of <a href="http://kenta.blogspot.com/2019/08/zlpvwetn-summer-triangle-angles.html">trying to avoid catastrophic loss of precision when doing trigonometry</a>.)</p>  <p><a href="https://web.mit.edu/kenta/www/three/sum-reciprocal/ykoqomhu/">source code.</a></p>  <p>here is the tail-recursive function that sums the contents of a priority queue.</p>  <p>reduceto1 :: Pqueue.MinQueue Expr -&gt; Expr;<br>  reduceto1 q = let {<br>    (a::Expr, q2) = Pqueue.deleteFindMin q<br>  } in case Pqueue.minView q2 of {<br>    Nothing -&gt; a;<br>    Just(b::Expr, q3) -&gt; reduceto1 $ flip Pqueue.insert q3 $ Plus a b; -- smaller number on the left side of the plus sign<br>  };</p>  <p>first, we demonstrate adding the first N reciprocals of integers (partial sums of the harmonic series).</p>  <p>1: 1/1</p>  <p>2: (1/2 + 1/1)</p>  <p>3: ((1/3 + 1/2) + 1/1)</p>  <p>4: (1/1 + (1/2 + (1/4 + 1/3)))</p>  <p>5: (1/1 + (1/2 + (1/3 + (1/5 + 1/4))))</p>  <p>6: (1/1 + ((1/4 + 1/3) + ((1/6 + 1/5) + 1/2)))</p>  <p>7: (1/1 + (((1/7 + 1/6) + 1/3) + ((1/5 + 1/4) + 1/2)))</p>  <p>8: ((1/2 + (1/4 + (1/8 + 1/7))) + ((1/3 + (1/6 + 1/5)) + 1/1))</p>  <p>9: ((1/2 + (1/4 + (1/7 + 1/6))) + ((1/3 + (1/5 + (1/9 + 1/8))) + 1/1))</p>  <p>10: ((1/2 + ((1/8 + 1/7) + 1/3)) + (((1/6 + 1/5) + ((1/10 + 1/9) + 1/4)) + 1/1))</p>  <p>11: ((1/2 + ((1/7 + 1/6) + 1/3)) + ((((1/11 + 1/10) + 1/5) + ((1/9 + 1/8) + 1/4)) + 1/1))</p>  <p>12: (((1/4 + (1/8 + 1/7)) + (1/3 + (1/6 + (1/12 + 1/11)))) + (((1/5 + (1/10 + 1/9)) + 1/2) + 1/1))</p>  <p>13: (((1/4 + (1/7 + (1/13 + 1/12))) + (1/3 + (1/6 + (1/11 + 1/10)))) + (((1/5 + (1/9 + 1/8)) + 1/2) + 1/1))</p>  <p>14: ((((1/8 + 1/7) + ((1/14 + 1/13) + 1/6)) + (1/3 + ((1/12 + 1/11) + 1/5))) + ((((1/10 + 1/9) + 1/4) + 1/2) + 1/1))</p>  <p>15: (((((1/15 + 1/14) + 1/7) + ((1/13 + 1/12) + 1/6)) + (1/3 + ((1/11 + 1/10) + 1/5))) + ((((1/9 + 1/8) + 1/4) + 1/2) + 1/1))</p>  <p>16: ((((1/7 + (1/14 + 1/13)) + 1/3) + ((1/6 + (1/12 + 1/11)) + (1/5 + (1/10 + 1/9)))) + (1/1 + (1/2 + (1/4 + (1/8 + (1/16 + 1/15))))))</p>  <p>17: ((((1/7 + (1/13 + 1/12)) + 1/3) + ((1/6 + (1/11 + 1/10)) + (1/5 + (1/9 + (1/17 + 1/16))))) + (1/1 + (1/2 + (1/4 + (1/8 + (1/15 + 1/14))))))</p>  <p>18: (((((1/14 + 1/13) + 1/6) + 1/3) + (((1/12 + 1/11) + 1/5) + ((1/10 + 1/9) + ((1/18 + 1/17) + 1/8)))) + (1/1 + (1/2 + (1/4 + ((1/16 + 1/15) + 1/7)))))</p>  <p>19: (((((1/13 + 1/12) + 1/6) + 1/3) + (((1/11 + 1/10) + 1/5) + (((1/19 + 1/18) + 1/9) + ((1/17 + 1/16) + 1/8)))) + (1/1 + (1/2 + (1/4 + ((1/15 + 1/14) + 1/7)))))</p>  <p>20: (((1/3 + (1/6 + (1/12 + 1/11))) + ((1/5 + (1/10 + (1/20 + 1/19))) + ((1/9 + (1/18 + 1/17)) + 1/4))) + (1/1 + (1/2 + ((1/8 + (1/16 + 1/15)) + (1/7 + (1/14 + 1/13))))))</p>  <p>21: (((1/3 + (1/6 + (1/11 + (1/21 + 1/20)))) + ((1/5 + (1/10 + (1/19 + 1/18))) + ((1/9 + (1/17 + 1/16)) + 1/4))) + (1/1 + (1/2 + ((1/8 + (1/15 + 1/14)) + (1/7 + (1/13 + 1/12))))))</p>  <p>22: (((1/3 + ((1/12 + 1/11) + ((1/22 + 1/21) + 1/10))) + ((1/5 + ((1/20 + 1/19) + 1/9)) + (((1/18 + 1/17) + 1/8) + 1/4))) + (1/1 + (1/2 + (((1/16 + 1/15) + 1/7) + ((1/14 + 1/13) + 1/6)))))</p>  <p>23: (((1/3 + (((1/23 + 1/22) + 1/11) + ((1/21 + 1/20) + 1/10))) + ((1/5 + ((1/19 + 1/18) + 1/9)) + (((1/17 + 1/16) + 1/8) + 1/4))) + (1/1 + (1/2 + (((1/15 + 1/14) + 1/7) + ((1/13 + 1/12) + 1/6)))))</p>  <p>24: ((((1/6 + (1/12 + (1/24 + 1/23))) + ((1/11 + (1/22 + 1/21)) + 1/5)) + (((1/10 + (1/20 + 1/19)) + (1/9 + (1/18 + 1/17))) + 1/2)) + (1/1 + ((1/4 + (1/8 + (1/16 + 1/15))) + ((1/7 + (1/14 + 1/13)) + 1/3))))</p>  <p>25: ((((1/6 + (1/12 + (1/23 + 1/22))) + ((1/11 + (1/21 + 1/20)) + 1/5)) + (((1/10 + (1/19 + 1/18)) + (1/9 + (1/17 + 1/16))) + 1/2)) + (1/1 + ((1/4 + (1/8 + (1/15 + 1/14))) + ((1/7 + (1/13 + (1/25 + 1/24))) + 1/3))))</p>  <p>26: ((((1/6 + ((1/24 + 1/23) + 1/11)) + (((1/22 + 1/21) + 1/10) + 1/5)) + ((((1/20 + 1/19) + 1/9) + ((1/18 + 1/17) + 1/8)) + 1/2)) + (1/1 + ((1/4 + ((1/16 + 1/15) + 1/7)) + (((1/14 + 1/13) + ((1/26 + 1/25) + 1/12)) + 1/3))))</p>  <p>27: ((((1/6 + ((1/23 + 1/22) + 1/11)) + (((1/21 + 1/20) + 1/10) + 1/5)) + ((((1/19 + 1/18) + 1/9) + ((1/17 + 1/16) + 1/8)) + 1/2)) + (1/1 + ((1/4 + ((1/15 + 1/14) + 1/7)) + ((((1/27 + 1/26) + 1/13) + ((1/25 + 1/24) + 1/12)) + 1/3))))</p>  <p>28: (((((1/12 + (1/24 + 1/23)) + (1/11 + (1/22 + 1/21))) + (1/5 + (1/10 + (1/20 + 1/19)))) + (((1/9 + (1/18 + 1/17)) + 1/4) + 1/2)) + (1/1 + (((1/8 + (1/16 + 1/15)) + (1/7 + (1/14 + (1/28 + 1/27)))) + (((1/13 + (1/26 + 1/25)) + 1/6) + 1/3))))</p>  <p>29: (((((1/12 + (1/23 + 1/22)) + (1/11 + (1/21 + 1/20))) + (1/5 + (1/10 + (1/19 + 1/18)))) + (((1/9 + (1/17 + 1/16)) + 1/4) + 1/2)) + (1/1 + (((1/8 + (1/15 + (1/29 + 1/28))) + (1/7 + (1/14 + (1/27 + 1/26)))) + (((1/13 + (1/25 + 1/24)) + 1/6) + 1/3))))</p>  <p>30: ((((((1/24 + 1/23) + 1/11) + ((1/22 + 1/21) + 1/10)) + (1/5 + ((1/20 + 1/19) + 1/9))) + ((((1/18 + 1/17) + 1/8) + 1/4) + 1/2)) + (1/1 + ((((1/16 + 1/15) + ((1/30 + 1/29) + 1/14)) + (1/7 + ((1/28 + 1/27) + 1/13))) + ((((1/26 + 1/25) + 1/12) + 1/6) + 1/3))))</p>  <p>31: ((((((1/23 + 1/22) + 1/11) + ((1/21 + 1/20) + 1/10)) + (1/5 + ((1/19 + 1/18) + 1/9))) + ((((1/17 + 1/16) + 1/8) + 1/4) + 1/2)) + (1/1 + (((((1/31 + 1/30) + 1/15) + ((1/29 + 1/28) + 1/14)) + (1/7 + ((1/27 + 1/26) + 1/13))) + ((((1/25 + 1/24) + 1/12) + 1/6) + 1/3))))</p>  <p>32: (((((1/11 + (1/22 + 1/21)) + 1/5) + ((1/10 + (1/20 + 1/19)) + (1/9 + (1/18 + 1/17)))) + 1/1) + ((1/2 + (1/4 + (1/8 + (1/16 + (1/32 + 1/31))))) + ((((1/15 + (1/30 + 1/29)) + 1/7) + ((1/14 + (1/28 + 1/27)) + (1/13 + (1/26 + 1/25)))) + (1/3 + (1/6 + (1/12 + (1/24 + 1/23)))))))</p>  <p>33: (((((1/11 + (1/21 + 1/20)) + 1/5) + ((1/10 + (1/19 + 1/18)) + (1/9 + (1/17 + (1/33 + 1/32))))) + 1/1) + ((1/2 + (1/4 + (1/8 + (1/16 + (1/31 + 1/30))))) + ((((1/15 + (1/29 + 1/28)) + 1/7) + ((1/14 + (1/27 + 1/26)) + (1/13 + (1/25 + 1/24)))) + (1/3 + (1/6 + (1/12 + (1/23 + 1/22)))))))</p>  <p>34: ((((((1/22 + 1/21) + 1/10) + 1/5) + (((1/20 + 1/19) + 1/9) + ((1/18 + 1/17) + ((1/34 + 1/33) + 1/16)))) + 1/1) + ((1/2 + (1/4 + (1/8 + ((1/32 + 1/31) + 1/15)))) + (((((1/30 + 1/29) + 1/14) + 1/7) + (((1/28 + 1/27) + 1/13) + ((1/26 + 1/25) + 1/12))) + (1/3 + (1/6 + ((1/24 + 1/23) + 1/11))))))</p>  <p>35: ((((((1/21 + 1/20) + 1/10) + 1/5) + (((1/19 + 1/18) + 1/9) + (((1/35 + 1/34) + 1/17) + ((1/33 + 1/32) + 1/16)))) + 1/1) + ((1/2 + (1/4 + (1/8 + ((1/31 + 1/30) + 1/15)))) + (((((1/29 + 1/28) + 1/14) + 1/7) + (((1/27 + 1/26) + 1/13) + ((1/25 + 1/24) + 1/12))) + (1/3 + (1/6 + ((1/23 + 1/22) + 1/11))))))</p>  <p>36: ((((1/5 + (1/10 + (1/20 + 1/19))) + ((1/9 + (1/18 + (1/36 + 1/35))) + ((1/17 + (1/34 + 1/33)) + 1/8))) + 1/1) + ((1/2 + (1/4 + ((1/16 + (1/32 + 1/31)) + (1/15 + (1/30 + 1/29))))) + (((1/7 + (1/14 + (1/28 + 1/27))) + ((1/13 + (1/26 + 1/25)) + 1/6)) + (1/3 + ((1/12 + (1/24 + 1/23)) + (1/11 + (1/22 + 1/21)))))))</p>  <p>37: ((((1/5 + (1/10 + (1/19 + (1/37 + 1/36)))) + ((1/9 + (1/18 + (1/35 + 1/34))) + ((1/17 + (1/33 + 1/32)) + 1/8))) + 1/1) + ((1/2 + (1/4 + ((1/16 + (1/31 + 1/30)) + (1/15 + (1/29 + 1/28))))) + (((1/7 + (1/14 + (1/27 + 1/26))) + ((1/13 + (1/25 + 1/24)) + 1/6)) + (1/3 + ((1/12 + (1/23 + 1/22)) + (1/11 + (1/21 + 1/20)))))))</p>  <p>38: ((((1/5 + ((1/20 + 1/19) + ((1/38 + 1/37) + 1/18))) + ((1/9 + ((1/36 + 1/35) + 1/17)) + (((1/34 + 1/33) + 1/16) + 1/8))) + 1/1) + ((1/2 + (1/4 + (((1/32 + 1/31) + 1/15) + ((1/30 + 1/29) + 1/14)))) + (((1/7 + ((1/28 + 1/27) + 1/13)) + (((1/26 + 1/25) + 1/12) + 1/6)) + (1/3 + (((1/24 + 1/23) + 1/11) + ((1/22 + 1/21) + 1/10))))))</p>  <p>39: ((((1/5 + (((1/39 + 1/38) + 1/19) + ((1/37 + 1/36) + 1/18))) + ((1/9 + ((1/35 + 1/34) + 1/17)) + (((1/33 + 1/32) + 1/16) + 1/8))) + 1/1) + ((1/2 + (1/4 + (((1/31 + 1/30) + 1/15) + ((1/29 + 1/28) + 1/14)))) + (((1/7 + ((1/27 + 1/26) + 1/13)) + (((1/25 + 1/24) + 1/12) + 1/6)) + (1/3 + (((1/23 + 1/22) + 1/11) + ((1/21 + 1/20) + 1/10))))))</p>  <p>40: (((((1/10 + (1/20 + (1/40 + 1/39))) + ((1/19 + (1/38 + 1/37)) + 1/9)) + (((1/18 + (1/36 + 1/35)) + (1/17 + (1/34 + 1/33))) + 1/4)) + 1/1) + ((1/2 + ((1/8 + (1/16 + (1/32 + 1/31))) + ((1/15 + (1/30 + 1/29)) + 1/7))) + ((((1/14 + (1/28 + 1/27)) + (1/13 + (1/26 + 1/25))) + 1/3) + ((1/6 + (1/12 + (1/24 + 1/23))) + ((1/11 + (1/22 + 1/21)) + 1/5)))))</p>  <p>next, sums of the reciprocals of the primes up to N.  like the harmonic series, sum diverges when taken over all primes.</p>  <p>2: 1/2</p>  <p>3: (1/3 + 1/2)</p>  <p>5: (1/2 + (1/5 + 1/3))</p>  <p>7: (1/2 + (1/3 + (1/7 + 1/5)))</p>  <p>11: (1/2 + (1/3 + (1/5 + (1/11 + 1/7))))</p>  <p>13: ((1/5 + (1/7 + (1/13 + 1/11))) + (1/3 + 1/2))</p>  <p>17: (((1/11 + (1/17 + 1/13)) + 1/3) + ((1/7 + 1/5) + 1/2))</p>  <p>19: ((((1/19 + 1/17) + 1/7) + 1/3) + (((1/13 + 1/11) + 1/5) + 1/2))</p>  <p>23: ((((1/17 + 1/13) + 1/7) + 1/3) + (((1/11 + (1/23 + 1/19)) + 1/5) + 1/2))</p>  <p>29: (((1/7 + (1/13 + (1/29 + 1/23))) + 1/3) + ((1/5 + (1/11 + (1/19 + 1/17))) + 1/2))</p>  <p>31: (((1/7 + (1/13 + 1/11)) + 1/3) + ((1/5 + ((1/23 + 1/19) + (1/17 + (1/31 + 1/29)))) + 1/2))</p>  <p>37: (((1/7 + ((1/29 + 1/23) + 1/11)) + 1/3) + ((1/5 + ((1/19 + 1/17) + ((1/37 + 1/31) + 1/13))) + 1/2))</p>  <p>41: (((((1/31 + 1/29) + 1/13) + (1/11 + (1/23 + (1/41 + 1/37)))) + 1/3) + ((1/5 + ((1/19 + 1/17) + 1/7)) + 1/2))</p>  <p>43: ((1/3 + ((1/13 + (1/29 + 1/23)) + (1/11 + ((1/43 + 1/41) + 1/19)))) + ((1/5 + ((1/17 + (1/37 + 1/31)) + 1/7)) + 1/2))</p>  <p>47: ((1/3 + ((1/13 + (1/23 + (1/47 + 1/43))) + (1/11 + ((1/41 + 1/37) + 1/19)))) + ((1/5 + ((1/17 + (1/31 + 1/29)) + 1/7)) + 1/2))</p>  <p>53: ((1/3 + ((1/13 + 1/11) + 1/5)) + ((((1/23 + (1/43 + 1/41)) + (1/19 + 1/17)) + (((1/37 + 1/31) + (1/29 + (1/53 + 1/47))) + 1/7)) + 1/2))</p>  <p>59: ((1/3 + ((((1/59 + 1/53) + 1/23) + 1/11) + 1/5)) + (((((1/47 + 1/43) + (1/41 + 1/37)) + (1/19 + 1/17)) + (1/7 + ((1/31 + 1/29) + 1/13))) + 1/2))</p>  <p>61: ((1/3 + ((((1/53 + 1/47) + 1/23) + 1/11) + 1/5)) + (1/2 + ((((1/43 + 1/41) + 1/19) + (1/17 + (1/37 + 1/31))) + (1/7 + (((1/61 + 1/59) + 1/29) + 1/13)))))</p>  <p>67: ((1/3 + (((1/23 + (1/47 + 1/43)) + 1/11) + 1/5)) + (1/2 + ((((1/41 + 1/37) + 1/19) + (1/17 + ((1/67 + 1/61) + 1/31))) + (1/7 + ((1/29 + (1/59 + 1/53)) + 1/13)))))</p>  <p>71: ((1/3 + ((1/11 + (1/23 + (1/43 + 1/41))) + 1/5)) + (1/2 + (((1/19 + (1/37 + (1/71 + 1/67))) + (1/17 + (1/31 + (1/61 + 1/59)))) + (1/7 + ((1/29 + (1/53 + 1/47)) + 1/13)))))</p>  <p>73: ((1/3 + ((1/11 + ((1/47 + 1/43) + (1/41 + 1/37))) + 1/5)) + (1/2 + (((1/19 + 1/17) + (((1/73 + 1/71) + (1/67 + 1/61)) + (1/31 + 1/29))) + (1/7 + (1/13 + ((1/59 + 1/53) + 1/23))))))</p>  <p>79: ((1/3 + ((1/11 + ((1/43 + 1/41) + 1/19)) + 1/5)) + (1/2 + (((((1/79 + 1/73) + 1/37) + 1/17) + (((1/71 + 1/67) + 1/31) + ((1/61 + 1/59) + 1/29))) + (1/7 + (1/13 + ((1/53 + 1/47) + 1/23))))))</p>  <p>83: ((1/3 + ((1/11 + ((1/41 + (1/83 + 1/79)) + 1/19)) + 1/5)) + (1/2 + ((((1/37 + (1/73 + 1/71)) + 1/17) + (((1/67 + 1/61) + 1/31) + (1/29 + (1/59 + 1/53)))) + (1/7 + (1/13 + (1/23 + (1/47 + 1/43)))))))</p>  <p>89: ((1/3 + ((1/11 + ((1/41 + (1/79 + 1/73)) + 1/19)) + 1/5)) + (1/2 + ((((1/37 + (1/71 + 1/67)) + 1/17) + ((1/31 + (1/61 + 1/59)) + (1/29 + (1/53 + 1/47)))) + (1/7 + (1/13 + (1/23 + (1/43 + (1/89 + 1/83))))))))</p>  <p>97: ((1/3 + (((1/23 + (1/43 + 1/41)) + (((1/83 + 1/79) + 1/37) + 1/19)) + 1/5)) + (1/2 + (((1/17 + ((1/73 + 1/71) + (1/67 + 1/61))) + 1/7) + (((1/31 + 1/29) + 1/13) + (((1/59 + 1/53) + (1/47 + (1/97 + 1/89))) + 1/11)))))</p>  <p>101: ((1/3 + ((((1/47 + 1/43) + ((1/89 + 1/83) + 1/41)) + (1/19 + ((1/79 + 1/73) + 1/37))) + 1/5)) + (1/2 + (((1/17 + ((1/71 + 1/67) + 1/31)) + 1/7) + ((((1/61 + 1/59) + 1/29) + 1/13) + (((1/53 + (1/101 + 1/97)) + 1/23) + 1/11)))))</p>  <p>103: ((1/3 + (1/5 + ((((1/97 + 1/89) + 1/43) + (1/41 + (1/83 + 1/79))) + (1/19 + (1/37 + (1/73 + 1/71)))))) + (1/2 + (((1/17 + ((1/67 + 1/61) + 1/31)) + 1/7) + (((1/29 + (1/59 + 1/53)) + 1/13) + ((((1/103 + 1/101) + 1/47) + 1/23) + 1/11)))))</p>  <p>107: ((1/3 + (1/5 + (((1/43 + (1/89 + 1/83)) + (1/41 + (1/79 + 1/73))) + (1/19 + (1/37 + (1/71 + 1/67)))))) + (1/2 + (((1/17 + (1/31 + (1/61 + 1/59))) + 1/7) + (((1/29 + (1/53 + (1/107 + 1/103))) + 1/13) + ((((1/101 + 1/97) + 1/47) + 1/23) + 1/11)))))</p>  <p>109: ((1/3 + (1/5 + (((1/43 + 1/41) + ((1/83 + 1/79) + 1/37)) + (1/19 + 1/17)))) + (1/2 + (((((1/73 + 1/71) + (1/67 + 1/61)) + (1/31 + 1/29)) + 1/7) + ((((1/59 + (1/109 + 1/107)) + (1/53 + (1/103 + 1/101))) + 1/13) + (((1/47 + (1/97 + 1/89)) + 1/23) + 1/11)))))</p>  <p>113: ((1/3 + (1/5 + ((((1/89 + 1/83) + 1/41) + 1/19) + (((1/79 + 1/73) + 1/37) + 1/17)))) + (1/2 + (((((1/71 + 1/67) + 1/31) + ((1/61 + 1/59) + 1/29)) + 1/7) + (((((1/113 + 1/109) + 1/53) + ((1/107 + 1/103) + (1/101 + 1/97))) + 1/13) + ((1/23 + (1/47 + 1/43)) + 1/11)))))</p>  <p>127: ((((1/13 + (((1/109 + 1/107) + 1/53) + ((1/103 + 1/101) + 1/47))) + ((1/23 + ((1/97 + 1/89) + 1/43)) + 1/11)) + (1/5 + (((1/41 + (1/83 + 1/79)) + 1/19) + ((1/37 + (1/73 + 1/71)) + 1/17)))) + (1/2 + (((((1/67 + 1/61) + 1/31) + (((1/127 + 1/113) + 1/59) + 1/29)) + 1/7) + 1/3)))</p>  <p>131: ((((1/13 + ((1/53 + (1/107 + 1/103)) + ((1/101 + 1/97) + 1/47))) + ((1/23 + (1/43 + (1/89 + 1/83))) + 1/11)) + (1/5 + (((1/41 + (1/79 + 1/73)) + 1/19) + ((1/37 + (1/71 + 1/67)) + 1/17)))) + (1/2 + ((((((1/131 + 1/127) + 1/61) + 1/31) + (1/29 + (1/59 + (1/113 + 1/109)))) + 1/7) + 1/3)))</p>  <p>137: ((((1/13 + ((1/53 + (1/103 + 1/101)) + (1/47 + (1/97 + 1/89)))) + (1/11 + (1/23 + (1/43 + 1/41)))) + (1/5 + ((((1/83 + 1/79) + 1/37) + 1/19) + (((1/73 + 1/71) + (1/67 + (1/137 + 1/131))) + 1/17)))) + (1/2 + ((((1/31 + (1/61 + (1/127 + 1/113))) + (1/29 + (1/59 + (1/109 + 1/107)))) + 1/7) + 1/3)))</p>  <p>139: ((((1/13 + (((1/107 + 1/103) + (1/101 + 1/97)) + 1/23)) + (1/11 + ((1/47 + 1/43) + ((1/89 + 1/83) + 1/41)))) + (1/5 + ((1/19 + ((1/79 + 1/73) + 1/37)) + (1/17 + ((1/71 + (1/139 + 1/137)) + (1/67 + (1/131 + 1/127))))))) + (1/2 + ((((1/31 + (1/61 + 1/59)) + (1/29 + ((1/113 + 1/109) + 1/53))) + 1/7) + 1/3)))</p>  <p>149: ((((1/13 + (((1/103 + 1/101) + 1/47) + 1/23)) + (1/11 + (((1/97 + 1/89) + 1/43) + (1/41 + (1/83 + 1/79))))) + (1/5 + ((1/19 + (1/37 + (1/73 + (1/149 + 1/139)))) + (1/17 + ((1/71 + 1/67) + ((1/137 + 1/131) + 1/61)))))) + (1/2 + ((((1/31 + ((1/127 + 1/113) + 1/59)) + (1/29 + ((1/109 + 1/107) + 1/53))) + 1/7) + 1/3)))</p>  <p>151: ((((1/13 + (((1/101 + 1/97) + 1/47) + 1/23)) + (1/11 + ((1/43 + (1/89 + 1/83)) + (1/41 + (1/79 + (1/151 + 1/149)))))) + (1/5 + ((1/19 + (1/37 + (1/73 + 1/71))) + (1/17 + (((1/139 + 1/137) + 1/67) + ((1/131 + 1/127) + 1/61)))))) + (1/2 + ((((1/31 + 1/29) + ((1/59 + (1/113 + 1/109)) + (1/53 + (1/107 + 1/103)))) + 1/7) + 1/3)))</p>  <p>157: ((((1/13 + ((1/47 + (1/97 + 1/89)) + 1/23)) + (1/11 + ((1/43 + 1/41) + ((1/83 + 1/79) + ((1/157 + 1/151) + 1/73))))) + (1/5 + ((1/19 + (1/37 + ((1/149 + 1/139) + 1/71))) + (1/17 + ((1/67 + (1/137 + 1/131)) + 1/31))))) + (1/2 + (((((1/61 + (1/127 + 1/113)) + 1/29) + ((1/59 + (1/109 + 1/107)) + (1/53 + (1/103 + 1/101)))) + 1/7) + 1/3)))</p>  <p>163: ((((1/13 + (1/23 + (1/47 + 1/43))) + (1/11 + (((1/89 + 1/83) + 1/41) + (((1/163 + 1/157) + 1/79) + 1/37)))) + (1/5 + ((1/19 + (((1/151 + 1/149) + 1/73) + (1/71 + (1/139 + 1/137)))) + (1/17 + ((1/67 + (1/131 + 1/127)) + 1/31))))) + (1/2 + ((1/7 + (((1/61 + 1/59) + 1/29) + (((1/113 + 1/109) + 1/53) + ((1/107 + 1/103) + (1/101 + 1/97))))) + 1/3)))</p>  <p>167: (((((((1/109 + 1/107) + 1/53) + ((1/103 + 1/101) + 1/47)) + (1/23 + ((1/97 + 1/89) + 1/43))) + (1/11 + (((1/83 + (1/167 + 1/163)) + 1/41) + 1/19))) + (1/5 + ((((1/79 + (1/157 + 1/151)) + 1/37) + ((1/73 + (1/149 + 1/139)) + (1/71 + 1/67))) + (1/17 + (((1/137 + 1/131) + 1/61) + 1/31))))) + (1/2 + ((1/7 + ((((1/127 + 1/113) + 1/59) + 1/29) + 1/13)) + 1/3)))</p>  <p>173: ((((((1/53 + (1/107 + 1/103)) + ((1/101 + 1/97) + 1/47)) + (1/23 + ((1/89 + (1/173 + 1/167)) + 1/43))) + (1/11 + ((1/41 + (1/83 + (1/163 + 1/157))) + 1/19))) + (1/5 + ((((1/79 + (1/151 + 1/149)) + 1/37) + ((1/73 + 1/71) + ((1/139 + 1/137) + 1/67))) + (1/17 + (((1/131 + 1/127) + 1/61) + 1/31))))) + (1/2 + ((1/7 + ((1/29 + (1/59 + (1/113 + 1/109))) + 1/13)) + 1/3)))</p>  <p>do these expression trees have any rhyme or reason?  the parenthesized representation is not good for seeing structural patterns.  future work: draw them as trees.</p><p>the expression trees define a unique binary tree for each integer, or for each prime.</p></div>
    </content>
    <updated>2022-10-14T23:16:11Z</updated>
    <published>2022-10-14T23:16:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="cs"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="haskell"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="teach"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-6757805</id>
      <category term="cs"/>
      <category term="soc"/>
      <category term="plot"/>
      <category term="game"/>
      <category term="crypto"/>
      <category term="geom"/>
      <category term="sci"/>
      <category term="ui"/>
      <category term="wr"/>
      <category term="time"/>
      <category term="sex"/>
      <category term="speech"/>
      <category term="teach"/>
      <category term="haskell"/>
      <category term="edu"/>
      <category term="prod"/>
      <category term="transport"/>
      <category term="et"/>
      <category term="dance"/>
      <category term="ai"/>
      <category term="done"/>
      <category term="qi"/>
      <category term="answer"/>
      <category term="jour"/>
      <category term="food"/>
      <author>
        <name>Unknown</name>
        <email>noreply@blogger.com</email>
      </author>
      <link href="http://kenta.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml">
      <link href="http://www.blogger.com/feeds/6757805/posts/default/-/haskell" rel="self" type="application/atom+xml">
      <link href="http://kenta.blogspot.com/search/label/haskell" rel="alternate" type="text/html">
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html">
      <link href="http://www.blogger.com/feeds/6757805/posts/default/-/haskell/-/haskell?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml">
      <subtitle>mostly on computers and mathematics</subtitle>
      <title>Ken's blog</title>
      <updated>2022-11-16T04:48:39Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://www.joachim-breitner.de/blog/796-rec-def__Minesweeper_case_study</id>
    <link href="http://www.joachim-breitner.de/blog/796-rec-def__Minesweeper_case_study" rel="alternate" type="text/html">
    <title xml:lang="en">rec-def: Minesweeper case study</title>
    <summary type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p>Iâ€™m on the train back from <a href="https://munihac.de/2022.html">MuniHac</a>, where I gave a talk about the <a href="https://hackage.haskell.org/package/rec-def"><code>rec-def</code> library</a> that I have excessively blogged about recently (<a href="https://www.joachim-breitner.de/blog/792-More_recursive_definitions">here</a>, <a href="https://www.joachim-breitner.de/blog/793-rec-def__Behind_the_scenes">here</a>, <a href="https://www.joachim-breitner.de/blog/794-rec-def__Program_analysis_case_study">here</a> and <a href="https://www.joachim-breitner.de/blog/795-rec-def__Dominators_case_study">here</a>). I got quite flattering comments about that talk, so if you want to see if they were sincere, I suggest you watch <a href="https://www.youtube.com/watch?v=UsihVM5CxsQ&amp;list=PL4FcLyLhO9ji92Pl-RDTP9ht_AH59iopv&amp;index=23&amp;t=1955s">the recording of â€œGetting recursive definitions off their bottomsâ€�</a> (but itâ€™s not necessary for the following).</p>
<p>After the talk, Franz Thoma approached me and told me a story of how we was once implementing the game Minesweeper in Haskell, and in particular the part of the logic where, after the user has uncovered a field, the game would automatically uncover all fields that are next to a â€œneutralâ€� field, i.e.Â one with zero adjacent bombs. He was using a comonadic data structure, which makes a â€œcontext-dependent parallel computationâ€� such as uncovering one field quite natural, and was hoping that using a suitable fix-point operator, he can elegantly obtain not just the next step, but directly the result of recursively uncovering all these fields. But, much to his disappointment, that did not work out: Due to the recursion inherent in that definition, a knot-tying fixed-point operator will lead to a cyclic definition.</p>
<figure>
<img alt="Microsoft Minesweeper" src="https://www.joachim-breitner.de/various/minesweeper-screenshot.jpg">
<figcaption>Microsoft Minesweeper</figcaption>
</figure>
<p>He was wondering if the <code>rec-def</code> library could have helped him, and we sat down to find out, and this is the tale of this blog post. I will avoid the comonadic abstractions and program it more naively, though, to not lose too many readers along the way. Maybe read <a href="https://chrispenner.ca/posts/conways-game-of-life">Chris Pennerâ€™s blog post</a> and Finchâ€™s <a href="https://github.com/plaidfinch/GQFC">functional pearl â€œGetting a Quick Fix on Comonadsâ€�</a> if you are curious about that angle.</p>
<h3 id="minesweeper-setup">Minesweeper setup</h3>
<p>Letâ€™s start with defining a suitable data type for the grid of the minesweeper board. Iâ€™ll use the <code>Array</code> data type, itâ€™s <code>Ix</code>-based indexing is quite useful for grids:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-1" tabindex="-1"><span class="kw">import</span> <span class="dt">Data.Array</span></a></span><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-1" tabindex="-1">
<span id="cb1-2"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-2" tabindex="-1">
<span id="cb1-3"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-3" tabindex="-1"><span class="kw">type</span> <span class="dt">C</span> <span class="ot">=</span> (<span class="dt">Int</span>,<span class="dt">Int</span>)
<span id="cb1-4"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-4" tabindex="-1"><span class="kw">type</span> <span class="dt">Grid</span> a <span class="ot">=</span> <span class="dt">Array</span> <span class="dt">C</span> a</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-4" tabindex="-1">
<p>The library lacks a function to generate an array from a generating function, but it is easy to add:</p>
</a><div class="sourceCode" id="cb2"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-4" tabindex="-1"></a><pre class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-4" tabindex="-1"><code class="sourceCode haskell"><span id="cb2-1"></span></code></a><code class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-1" tabindex="-1"><span class="ot">genArray ::</span> <span class="dt">Ix</span> i <span class="ot">=&gt;</span> (i,i) <span class="ot">-&gt;</span> (i <span class="ot">-&gt;</span> e) <span class="ot">-&gt;</span> <span class="dt">Array</span> i e
<span id="cb2-2"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-2" tabindex="-1">genArray r f <span class="ot">=</span> listArray r <span class="op">$</span> <span class="fu">map</span> f <span class="op">$</span> <span class="fu">range</span> r</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-2" tabindex="-1">
<p>Letâ€™s also fix the size of the board, as a pair of lower and upper bounds (this is the format that the <code>Ix</code> type class needs):</p>
</a><div class="sourceCode" id="cb3"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-2" tabindex="-1"></a><pre class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-2" tabindex="-1"><code class="sourceCode haskell"><span id="cb3-1"></span></code></a><code class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-1" tabindex="-1"><span class="ot">size ::</span> (<span class="dt">C</span>,<span class="dt">C</span>)
<span id="cb3-2"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-2" tabindex="-1">size <span class="ot">=</span> ((<span class="dv">0</span>,<span class="dv">0</span>), (<span class="dv">3</span>,<span class="dv">3</span>))</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-2" tabindex="-1">
<p>Now board is simply a grid of boolean values, with <code>True</code> indicating that a bomb is there:</p>
</a><div class="sourceCode" id="cb4"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-2" tabindex="-1"></a><pre class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-2" tabindex="-1"><code class="sourceCode haskell"><span id="cb4-1"></span></code></a><code class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-1" tabindex="-1"><span class="kw">type</span> <span class="dt">Board</span> <span class="ot">=</span> <span class="dt">Grid</span> <span class="dt">Bool</span>
<span id="cb4-2"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-2" tabindex="-1">
<span id="cb4-3"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-3" tabindex="-1"><span class="ot">board1 ::</span> <span class="dt">Board</span>
<span id="cb4-4"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-4" tabindex="-1">board1 <span class="ot">=</span> listArray size
<span id="cb4-5"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-5" tabindex="-1">  [ <span class="dt">False</span>, <span class="dt">False</span>, <span class="dt">False</span>, <span class="dt">False</span>
<span id="cb4-6"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-6" tabindex="-1">  , <span class="dt">True</span>,  <span class="dt">False</span>, <span class="dt">False</span>, <span class="dt">False</span>
<span id="cb4-7"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-7" tabindex="-1">  , <span class="dt">True</span>,  <span class="dt">False</span>, <span class="dt">False</span>, <span class="dt">False</span>
<span id="cb4-8"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-8" tabindex="-1">  , <span class="dt">False</span>, <span class="dt">False</span>, <span class="dt">False</span>, <span class="dt">False</span>
<span id="cb4-9"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-9" tabindex="-1">  ]</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-9" tabindex="-1">
<p>It would be nice to be able to see these board in a nicer way. So let us write A function that prints a grid, including a frame, given a function that prints something for each coordinate. Together with a function that prints a bomb (as <code>*</code>), we can print the board:</p>
</a><div class="sourceCode" id="cb5"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-9" tabindex="-1"></a><pre class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-9" tabindex="-1"><code class="sourceCode haskell"><span id="cb5-1"></span></code></a><code class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-1" tabindex="-1"><span class="ot">pGrid ::</span> (<span class="dt">C</span> <span class="ot">-&gt;</span> <span class="dt">String</span>) <span class="ot">-&gt;</span> <span class="dt">String</span>
<span id="cb5-2"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-2" tabindex="-1">pGrid p <span class="ot">=</span> <span class="fu">unlines</span>
<span id="cb5-3"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-3" tabindex="-1">    [ <span class="fu">concat</span> [ p' (y,x) <span class="op">|</span> x <span class="ot">&lt;-</span> [lx<span class="op">-</span><span class="dv">1</span> <span class="op">..</span> ux<span class="op">+</span><span class="dv">1</span>] ]
<span id="cb5-4"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-4" tabindex="-1">    <span class="op">|</span> y  <span class="ot">&lt;-</span> [ly<span class="op">-</span><span class="dv">1</span> <span class="op">..</span> uy<span class="op">+</span><span class="dv">1</span>] ]
<span id="cb5-5"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-5" tabindex="-1">  <span class="kw">where</span>
<span id="cb5-6"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-6" tabindex="-1">    ((lx,ly),(ux,uy)) <span class="ot">=</span> size
<span id="cb5-7"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-7" tabindex="-1">
<span id="cb5-8"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-8" tabindex="-1">    p' c <span class="op">|</span> <span class="fu">inRange</span> size c <span class="ot">=</span> p c
<span id="cb5-9"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-9" tabindex="-1">    p'  _ <span class="ot">=</span> <span class="st">&quot;#&quot;</span>
<span id="cb5-10"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-10" tabindex="-1">
<span id="cb5-11"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-11" tabindex="-1"><span class="ot">pBombs ::</span> <span class="dt">Board</span> <span class="ot">-&gt;</span> <span class="dt">String</span>
<span id="cb5-12"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-12" tabindex="-1">pBombs b <span class="ot">=</span> pGrid <span class="op">$</span> \c <span class="ot">-&gt;</span> <span class="kw">if</span> b <span class="op">!</span> c <span class="kw">then</span> <span class="st">&quot;*&quot;</span> <span class="kw">else</span> <span class="st">&quot; &quot;</span></a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-12" tabindex="-1">
<p>The expression <code>b ! c</code> looks up a the coordinate in the array, and is <code>True</code> when there is a bomb at that coordinate.</p>
<p>So here is our board, with two bombs:</p>
<pre><code>ghci&gt; putStrLn $ pBombs board1
######
#    #
#*   #
#*   #
#    #
######</code></pre>
</a><p><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-12" tabindex="-1">But thatâ€™s not what we want to show to the user: Every field should have have a number that indicates the number of bombs in the surrounding fields. To that end, we first define a function that takes a coordinate, and returns all adjacent coordinates. This also takes care of the border, using </a><a href="https://hackage.haskell.org/package/base-4.13.0.0/docs/Data-Ix.html#v:inRange"><code>inRange</code></a>:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-1" tabindex="-1"><span class="ot">neighbors ::</span> <span class="dt">C</span> <span class="ot">-&gt;</span> [<span class="dt">C</span>]</a></span><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-1" tabindex="-1">
<span id="cb7-2"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-2" tabindex="-1">neighbors (x,y) <span class="ot">=</span>
<span id="cb7-3"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-3" tabindex="-1">    [ c
<span id="cb7-4"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-4" tabindex="-1">    <span class="op">|</span> (dx, dy) <span class="ot">&lt;-</span> <span class="fu">range</span> ((<span class="op">-</span><span class="dv">1</span>,<span class="op">-</span><span class="dv">1</span>), (<span class="dv">1</span>,<span class="dv">1</span>))
<span id="cb7-5"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-5" tabindex="-1">    , (dx, dy) <span class="op">/=</span> (<span class="dv">0</span>,<span class="dv">0</span>)
<span id="cb7-6"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-6" tabindex="-1">    , <span class="kw">let</span> c <span class="ot">=</span> (x <span class="op">+</span> dx, y <span class="op">+</span> dy)
<span id="cb7-7"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-7" tabindex="-1">    , <span class="fu">inRange</span> size c
<span id="cb7-8"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-8" tabindex="-1">    ]</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-8" tabindex="-1">
<p>With that, we can calculate what to display in each cell â€“ a bomb, or a number:</p>
</a><div class="sourceCode" id="cb8"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-8" tabindex="-1"></a><pre class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-8" tabindex="-1"><code class="sourceCode haskell"><span id="cb8-1"></span></code></a><code class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-1" tabindex="-1"><span class="kw">data</span> <span class="dt">H</span> <span class="ot">=</span> <span class="dt">Bomb</span> <span class="op">|</span> <span class="dt">Hint</span> <span class="dt">Int</span> <span class="kw">deriving</span> <span class="dt">Eq</span>
<span id="cb8-2"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-2" tabindex="-1">
<span id="cb8-3"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-3" tabindex="-1"><span class="ot">hint ::</span> <span class="dt">Board</span> <span class="ot">-&gt;</span> <span class="dt">C</span> <span class="ot">-&gt;</span> <span class="dt">H</span>
<span id="cb8-4"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-4" tabindex="-1">hint b c <span class="op">|</span> b <span class="op">!</span> c <span class="ot">=</span> <span class="dt">Bomb</span>
<span id="cb8-5"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-5" tabindex="-1">hint b c <span class="ot">=</span> <span class="dt">Hint</span> <span class="op">$</span> <span class="fu">sum</span> [ <span class="dv">1</span> <span class="op">|</span> c' <span class="ot">&lt;-</span> neighbors c, b <span class="op">!</span> c' ]</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-5" tabindex="-1">
<p>With a suitable printing function, we can now see the full board:</p>
</a><div class="sourceCode" id="cb9"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-5" tabindex="-1"></a><pre class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-5" tabindex="-1"><code class="sourceCode haskell"><span id="cb9-1"></span></code></a><code class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb9-1" tabindex="-1"><span class="ot">hint ::</span> <span class="dt">Board</span> <span class="ot">-&gt;</span> <span class="dt">C</span> <span class="ot">-&gt;</span> <span class="dt">H</span>
<span id="cb9-2"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb9-2" tabindex="-1">hint b c <span class="op">|</span> b <span class="op">!</span> c <span class="ot">=</span> <span class="dt">Bomb</span>
<span id="cb9-3"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb9-3" tabindex="-1">hint b c <span class="ot">=</span> <span class="dt">Hint</span> <span class="op">$</span> <span class="fu">sum</span> [ <span class="dv">1</span> <span class="op">|</span> c' <span class="ot">&lt;-</span> neighbors c, b <span class="op">!</span> c' ]
<span id="cb9-4"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb9-4" tabindex="-1">
<span id="cb9-5"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb9-5" tabindex="-1"><span class="ot">pCell ::</span> <span class="dt">Board</span> <span class="ot">-&gt;</span> <span class="dt">C</span> <span class="ot">-&gt;</span> <span class="dt">String</span>
<span id="cb9-6"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb9-6" tabindex="-1">pCell b c <span class="ot">=</span> <span class="kw">case</span> hint b c <span class="kw">of</span>
<span id="cb9-7"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb9-7" tabindex="-1">    <span class="dt">Bomb</span> <span class="ot">-&gt;</span> <span class="st">&quot;*&quot;</span>
<span id="cb9-8"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb9-8" tabindex="-1">    <span class="dt">Hint</span> <span class="dv">0</span> <span class="ot">-&gt;</span> <span class="st">&quot; &quot;</span>
<span id="cb9-9"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb9-9" tabindex="-1">    <span class="dt">Hint</span> n <span class="ot">-&gt;</span> <span class="fu">show</span> n
<span id="cb9-10"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb9-10" tabindex="-1">
<span id="cb9-11"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb9-11" tabindex="-1"><span class="ot">pBoard ::</span> <span class="dt">Board</span> <span class="ot">-&gt;</span> <span class="dt">String</span>
<span id="cb9-12"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb9-12" tabindex="-1">pBoard b <span class="ot">=</span> pGrid (pCell b)</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb9-12" tabindex="-1">
<p>And here it is:</p>
<pre><code>ghci&gt; putStrLn $ pBoard board1
######
#11  #
#*2  #
#*2  #
#11  #
######</code></pre>
<p>Next we have to add masks: We need to keep track of which fields the user already sees. We again use a grid of booleans, and define a function to print a board with the masked fields hidden behind <code>?</code>:</p>
</a><div class="sourceCode" id="cb11"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb9-12" tabindex="-1"></a><pre class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb9-12" tabindex="-1"><code class="sourceCode haskell"><span id="cb11-1"></span></code></a><code class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb11-1" tabindex="-1"><span class="kw">type</span> <span class="dt">Mask</span> <span class="ot">=</span> <span class="dt">Grid</span> <span class="dt">Bool</span>
<span id="cb11-2"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb11-2" tabindex="-1">
<span id="cb11-3"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb11-3" tabindex="-1"><span class="ot">mask1 ::</span> <span class="dt">Mask</span>
<span id="cb11-4"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb11-4" tabindex="-1">mask1 <span class="ot">=</span> listArray size
<span id="cb11-5"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb11-5" tabindex="-1">  [ <span class="dt">True</span>,  <span class="dt">True</span>,  <span class="dt">True</span>,  <span class="dt">False</span>
<span id="cb11-6"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb11-6" tabindex="-1">  , <span class="dt">False</span>, <span class="dt">False</span>, <span class="dt">False</span>, <span class="dt">False</span>
<span id="cb11-7"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb11-7" tabindex="-1">  , <span class="dt">False</span>, <span class="dt">False</span>, <span class="dt">False</span>, <span class="dt">False</span>
<span id="cb11-8"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb11-8" tabindex="-1">  , <span class="dt">False</span>, <span class="dt">False</span>, <span class="dt">False</span>, <span class="dt">False</span>
<span id="cb11-9"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb11-9" tabindex="-1">  ]
<span id="cb11-10"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb11-10" tabindex="-1">
<span id="cb11-11"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb11-11" tabindex="-1"><span class="ot">pMasked ::</span> <span class="dt">Board</span> <span class="ot">-&gt;</span> <span class="dt">Mask</span> <span class="ot">-&gt;</span> <span class="dt">String</span>
<span id="cb11-12"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb11-12" tabindex="-1">pMasked b m <span class="ot">=</span> pGrid <span class="op">$</span> \c <span class="ot">-&gt;</span> <span class="kw">if</span> m <span class="op">!</span> c <span class="kw">then</span> pCell b c <span class="kw">else</span> <span class="st">&quot;?&quot;</span></a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb11-12" tabindex="-1">
<p>So this is what the user would see</p>
<pre><code>ghci&gt; putStrLn $ pMasked board1 mask1
######
#11 ?#
#????#
#????#
#????#
######</code></pre>
<h3 id="uncovering-some-fields">Uncovering some fields</h3>
<p>With that setup in place, we now implement the piece of logic we care about: Uncovering all fields that are next to a neutral field. Here is the first attempt:</p>
</a><div class="sourceCode" id="cb13"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb11-12" tabindex="-1"></a><pre class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb11-12" tabindex="-1"><code class="sourceCode haskell"><span id="cb13-1"></span></code></a><code class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb13-1" tabindex="-1"><span class="ot">solve0 ::</span> <span class="dt">Board</span> <span class="ot">-&gt;</span> <span class="dt">Mask</span> <span class="ot">-&gt;</span> <span class="dt">Mask</span>
<span id="cb13-2"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb13-2" tabindex="-1">solve0 b m0 <span class="ot">=</span> m1
<span id="cb13-3"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb13-3" tabindex="-1">  <span class="kw">where</span>
<span id="cb13-4"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb13-4" tabindex="-1"><span class="ot">    m1 ::</span> <span class="dt">Mask</span>
<span id="cb13-5"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb13-5" tabindex="-1">    m1 <span class="ot">=</span> genArray size <span class="op">$</span> \c <span class="ot">-&gt;</span>
<span id="cb13-6"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb13-6" tabindex="-1">      m0 <span class="op">!</span> c <span class="op">||</span> <span class="fu">or</span> [ m0 <span class="op">!</span> c' <span class="op">|</span> c' <span class="ot">&lt;-</span> neighbors c, hint b c' <span class="op">==</span> <span class="dt">Hint</span> <span class="dv">0</span> ]</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb13-6" tabindex="-1">
<p>The idea is that we calculate the new mask <code>m1</code> from the old one <code>m0</code> by the following logic: A field is visible if it was visible before (<code>m0 ! c</code>), or if any of its neighboring, neutral fields are visible.</p>
<p>This works so far: I uncovered the three fields next to the one neutral visible field:</p>
<pre><code>ghci&gt; putStrLn $ pMasked board1 $ solve0 board1 mask1
######
#11  #
#?2  #
#????#
#????#
######</code></pre>
<p>But thatâ€™s not quite what we want: We want to keep doing that to uncover <em>all</em> fields.</p>
<h3 id="uncovering-all-fields">Uncovering all fields</h3>
<p>So what happens if we change the logic to: A field is visible if it was visible before (<code>m0 ! c</code>), or if any of its neighboring, neutral fields <em>will be</em> visible.</p>
<p>In the code, this is just a single character change: Instead of looking at <code>m0</code> to see if a neighbor is visible, we look at <code>m1</code>:</p>
</a><div class="sourceCode" id="cb15"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb13-6" tabindex="-1"></a><pre class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb13-6" tabindex="-1"><code class="sourceCode haskell"><span id="cb15-1"></span></code></a><code class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb15-1" tabindex="-1"><span class="ot">solve1 ::</span> <span class="dt">Board</span> <span class="ot">-&gt;</span> <span class="dt">Mask</span> <span class="ot">-&gt;</span> <span class="dt">Mask</span>
<span id="cb15-2"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb15-2" tabindex="-1">solve1 b m0 <span class="ot">=</span> m1
<span id="cb15-3"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb15-3" tabindex="-1">  <span class="kw">where</span>
<span id="cb15-4"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb15-4" tabindex="-1"><span class="ot">    m1 ::</span> <span class="dt">Mask</span>
<span id="cb15-5"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb15-5" tabindex="-1">    m1 <span class="ot">=</span> genArray size <span class="op">$</span> \c <span class="ot">-&gt;</span>
<span id="cb15-6"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb15-6" tabindex="-1">      m0 <span class="op">!</span> c <span class="op">||</span> <span class="fu">or</span> [ m1 <span class="op">!</span> c' <span class="op">|</span> c' <span class="ot">&lt;-</span> neighbors c, hint b c' <span class="op">==</span> <span class="dt">Hint</span> <span class="dv">0</span> ]</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb15-6" tabindex="-1">
</a><p><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb15-6" tabindex="-1">(This is roughly what happened when Franz started to use </a><a href="https://hackage.haskell.org/package/comonad-5.0.8/docs/Control-Comonad.html#v:kfix">the <code>kfix</code> comonadic fixed-point operator</a> in his code, I believe.)</p>
<p>Does it work? It seems so:</p>
<pre><code>ghci&gt; putStrLn $ pMasked board1 $ solve1 board1 mask1
######
#11  #
#?2  #
#?2  #
#?1  #
######</code></pre>
<p>Amazing, isnâ€™t it!</p>
<p>Unfortunately, it seems to work by accident. If I start with a different mask:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb17-1" tabindex="-1"><span class="ot">mask2 ::</span> <span class="dt">Mask</span></a></span><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb17-1" tabindex="-1">
<span id="cb17-2"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb17-2" tabindex="-1">mask2 <span class="ot">=</span> listArray size
<span id="cb17-3"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb17-3" tabindex="-1">  [ <span class="dt">True</span>,  <span class="dt">True</span>,  <span class="dt">False</span>, <span class="dt">False</span>
<span id="cb17-4"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb17-4" tabindex="-1">  , <span class="dt">False</span>, <span class="dt">False</span>, <span class="dt">False</span>, <span class="dt">False</span>
<span id="cb17-5"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb17-5" tabindex="-1">  , <span class="dt">False</span>, <span class="dt">False</span>, <span class="dt">False</span>, <span class="dt">False</span>
<span id="cb17-6"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb17-6" tabindex="-1">  , <span class="dt">False</span>, <span class="dt">False</span>, <span class="dt">False</span>, <span class="dt">True</span>
<span id="cb17-7"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb17-7" tabindex="-1">  ]</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb17-7" tabindex="-1">
<p>which looks as follows:</p>
<pre><code>ghci&gt; putStrLn $ pMasked board1 mask2
######
#11??#
#????#
#????#
#??? #
######</code></pre>
<p>Then our <code>solve1</code> function does not work, and just sits there:</p>
<pre><code>ghci&gt; putStrLn $ pMasked board1 $ solve1 board1 mask2
######
#11^CInterrupted.</code></pre>
<p>Why did it work before, but now now?</p>
<p>It fails to work because as the code tries to figure out if a field, it needs to know if the next field will be uncovered. But to figure that out, it needs to know if the present field will be uncovered. With the normal boolean connectives (<code>||</code> and <code>or</code>), this does not make progress.</p>
<p>It worked with <code>mask1</code> more or less by accident: None of the fields on in the first column donâ€™t have neutral neighbors, so nothing happens there. And for all the fields in the third and forth column, the code will know for sure that they will be uncovered based on their upper neighbors, which come first in the <code>neighbors</code> list, and due to the short-circuting properties of <code>||</code>, it doesnâ€™t have to look at the later cells, and the vicious cycle is avoided.</p>
<h3 id="rec-def-to-the-rescue">rec-def to the rescue</h3>
<p>This is where <code>rec-def</code> comes in: By using the <code>RBool</code> type in <code>m1</code> instead of plain <code>Bool</code>, the recursive self-reference is not a problem, and it simply works:</p>
</a><div class="sourceCode" id="cb20"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb17-7" tabindex="-1"></a><pre class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb17-7" tabindex="-1"><code class="sourceCode haskell"><span id="cb20-1"></span></code></a><code class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb20-1" tabindex="-1"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Recursive.Bool</span> <span class="kw">as</span> <span class="dt">RB</span>
<span id="cb20-2"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb20-2" tabindex="-1">
<span id="cb20-3"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb20-3" tabindex="-1"><span class="ot">solve2 ::</span> <span class="dt">Board</span> <span class="ot">-&gt;</span> <span class="dt">Mask</span> <span class="ot">-&gt;</span> <span class="dt">Mask</span>
<span id="cb20-4"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb20-4" tabindex="-1">solve2 b m0 <span class="ot">=</span> <span class="fu">fmap</span> RB.get m1
<span id="cb20-5"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb20-5" tabindex="-1">  <span class="kw">where</span>
<span id="cb20-6"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb20-6" tabindex="-1"><span class="ot">    m1 ::</span> <span class="dt">Grid</span> <span class="dt">RB.RBool</span>
<span id="cb20-7"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb20-7" tabindex="-1">    m1 <span class="ot">=</span> genArray size <span class="op">$</span> \c <span class="ot">-&gt;</span>
<span id="cb20-8"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb20-8" tabindex="-1">      RB.mk (m0 <span class="op">!</span> c) <span class="op">RB.||</span> RB.or [ m1 <span class="op">!</span> c' <span class="op">|</span> c' <span class="ot">&lt;-</span> neighbors c, hint b c' <span class="op">==</span> <span class="dt">Hint</span> <span class="dv">0</span> ]</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb20-8" tabindex="-1">
<p>Note that I did not change the algorithm, or the self-reference through <code>m1</code>; I just replaced <code>Bool</code> with <code>RBool</code>, <code>||</code> with <code>RB.||</code> and <code>or</code> with <code>RB.or</code>. And used <code>RB.get</code> at the end to get a normal boolean out. And ğŸ¥�, here we go:</p>
<pre><code>ghci&gt; putStrLn $ pMasked board1 $ solve2 board1 mask2
######
#11  #
#?2  #
#?2  #
#?1  #
######</code></pre>
</a><p><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb20-8" tabindex="-1">Thatâ€™s the end of this repetition of â€œletâ€™s look at a tying-the-knot-problem and see how <code>rec-def</code> helpsâ€�, which always end up a bit anti-climatic because it â€œjust worksâ€�, at least in these cases. Hope you enjoyed it nevertheless.</a></p></div>
    </summary>
    <updated>2022-10-10T08:22:29Z</updated>
    <published>2022-10-10T08:22:29Z</published>
    <author>
      <name>Joachim Breitner</name>
      <email>mail@joachim-breitner.de</email>
    </author>
    <source>
      <id>http://www.joachim-breitner.de//blog</id>
      <logo>http://joachim-breitner.de/avatars/avatar_128.png</logo>
      <link href="http://www.joachim-breitner.de//blog" rel="alternate" type="text/html">
      <link href="http://www.joachim-breitner.de/blog_feed.rss" rel="self" type="application/rss+xml">
      <subtitle xml:lang="en">Joachim Breitners Denkblogade</subtitle>
      <title xml:lang="en">nomeataâ€™s mind shares</title>
      <updated>2022-11-04T10:00:57Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://oleg.fi/gists/posts/2022-10-08-simplex.lagda.html</id>
    <link href="https://oleg.fi/gists/posts/2022-10-08-simplex.lagda.html" rel="alternate" type="text/html">
    <title>Simple(r?) simplices</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div class="info">
    Posted on 2022-10-08
    
        by Oleg Grenrus
    

    <a href="https://oleg.fi/tags/agda.html" title="All pages tagged 'agda'.">agda</a>
</div>

<p>This post is a literate Agda file, where I try to define a category Δ of finite ordinals and monotone maps. Reed Mullanix <a href="https://totbwf.github.io/posts/simple-simplices.html">wrote a post &quot;Simple Simplices&quot;</a> around year and half ago about the topic suggesting an option.</p>
<p>That option, called <code>Δ⇒</code> is implemented in <code>agda-categories</code> package in <a href="https://agda.github.io/agda-categories/Categories.Category.Instance.Simplex.html"><code>Categories.Category.Instance.Simplex</code></a> module.</p>
<p>Reed asks for a decomposition:</p>
<pre class="plain"><code>decompose : (Fin m → Fin n) → (m Δ⇒ n)</code></pre>
<p>I think I got it.</p>
<div id="toc"></div>
<h2 id="agda-setup">Agda setup</h2>
<div class="sourceCode" id="cb2"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb2-1"><a href="https://oleg.fi/gists/atom.xml#cb2-1"></a><span class="kw">module</span> 2022-10-08-simplex <span class="kw">where</span></span></code></pre></div>
<div class="sourceCode" id="cb3"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb3-1"><a href="https://oleg.fi/gists/atom.xml#cb3-1"></a><span class="kw">import</span> Data<span class="ot">.</span>Nat as ℕ</span>
<span id="cb3-2"><a href="https://oleg.fi/gists/atom.xml#cb3-2"></a></span>
<span id="cb3-3"><a href="https://oleg.fi/gists/atom.xml#cb3-3"></a><span class="kw">open</span> ℕ <span class="kw">using</span> <span class="ot">(</span>ℕ<span class="ot">;</span> zero<span class="ot">;</span> suc<span class="ot">;</span> z≤n<span class="ot">;</span> s≤s<span class="ot">;</span> <span class="ot">_</span>∸<span class="ot">_)</span></span>
<span id="cb3-4"><a href="https://oleg.fi/gists/atom.xml#cb3-4"></a><span class="kw">open</span> <span class="kw">import</span> Data<span class="ot">.</span>Nat<span class="ot">.</span>Properties <span class="kw">using</span> <span class="ot">(</span>≤-refl<span class="ot">;</span> ≤-trans<span class="ot">)</span></span>
<span id="cb3-5"><a href="https://oleg.fi/gists/atom.xml#cb3-5"></a><span class="kw">open</span> <span class="kw">import</span> Data<span class="ot">.</span>Fin <span class="kw">using</span> <span class="ot">(</span>Fin<span class="ot">;</span> zero<span class="ot">;</span> suc<span class="ot">;</span> <span class="ot">_</span>≤<span class="ot">_;</span> <span class="ot">_</span>&lt;<span class="ot">_;</span> toℕ<span class="ot">)</span></span>
<span id="cb3-6"><a href="https://oleg.fi/gists/atom.xml#cb3-6"></a><span class="kw">open</span> <span class="kw">import</span> Data<span class="ot">.</span>Product <span class="kw">using</span> <span class="ot">(</span>Σ<span class="ot">;</span> <span class="ot">_</span>×<span class="ot">_;</span> <span class="ot">_</span>,<span class="ot">_;</span> proj₁<span class="ot">;</span> proj₂<span class="ot">;</span> map<span class="ot">)</span></span>
<span id="cb3-7"><a href="https://oleg.fi/gists/atom.xml#cb3-7"></a><span class="kw">open</span> <span class="kw">import</span> Data<span class="ot">.</span>Fin<span class="ot">.</span>Properties <span class="kw">using</span> <span class="ot">(</span>suc-injective<span class="ot">;</span> toℕ&lt;n<span class="ot">)</span></span>
<span id="cb3-8"><a href="https://oleg.fi/gists/atom.xml#cb3-8"></a><span class="kw">open</span> <span class="kw">import</span> Relation<span class="ot">.</span>Binary<span class="ot">.</span>PropositionalEquality</span>
<span id="cb3-9"><a href="https://oleg.fi/gists/atom.xml#cb3-9"></a>  <span class="kw">using</span> <span class="ot">(_</span>≡<span class="ot">_;</span> refl<span class="ot">;</span> cong<span class="ot">;</span> sym<span class="ot">;</span> trans<span class="ot">)</span></span>
<span id="cb3-10"><a href="https://oleg.fi/gists/atom.xml#cb3-10"></a></span>
<span id="cb3-11"><a href="https://oleg.fi/gists/atom.xml#cb3-11"></a><span class="kw">open</span> Relation<span class="ot">.</span>Binary<span class="ot">.</span>PropositionalEquality<span class="ot">.</span>≡-Reasoning</span>
<span id="cb3-12"><a href="https://oleg.fi/gists/atom.xml#cb3-12"></a></span>
<span id="cb3-13"><a href="https://oleg.fi/gists/atom.xml#cb3-13"></a><span class="kw">variable</span></span>
<span id="cb3-14"><a href="https://oleg.fi/gists/atom.xml#cb3-14"></a>  n m p <span class="ot">:</span> ℕ</span></code></pre></div>
<h2 id="monotone-maps">Monotone maps</h2>
<p>Reed mentions two options for implementing simplex category</p>
<ol>
<li>Define Δ as the category of finite ordinals and monotone maps.</li>
<li>Define Δ as a free category generated by face and degeneracy maps, quotient by the simplicial identities.</li>
</ol>
<p>Second one is just awful.</p>
<p>I assume the first option goes something like:</p>
<p>First we define the <code>isMonotone</code> predicate on <code>Fin n → Fin m</code> functions.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb4-1"><a href="https://oleg.fi/gists/atom.xml#cb4-1"></a>isMonotone <span class="ot">:</span> <span class="ot">(</span>Fin n <span class="ot">→</span> Fin m<span class="ot">)</span> <span class="ot">→</span> <span class="dt">Set</span></span>
<span id="cb4-2"><a href="https://oleg.fi/gists/atom.xml#cb4-2"></a>isMonotone f <span class="ot">=</span> <span class="ot">∀</span> i j <span class="ot">→</span> i ≤ j <span class="ot">→</span> f i ≤ f j</span></code></pre></div>
<p>Then a monotone function is a function together with a proof it is monotone</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb5-1"><a href="https://oleg.fi/gists/atom.xml#cb5-1"></a>Monotone <span class="ot">:</span> ℕ <span class="ot">→</span> ℕ <span class="ot">→</span> <span class="dt">Set</span></span>
<span id="cb5-2"><a href="https://oleg.fi/gists/atom.xml#cb5-2"></a>Monotone n m <span class="ot">=</span> Σ <span class="ot">(</span>Fin n <span class="ot">→</span> Fin m<span class="ot">)</span> isMonotone</span></code></pre></div>
<p>And because it's a function in (ordinary) Agda we need to define an equality:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb6-1"><a href="https://oleg.fi/gists/atom.xml#cb6-1"></a><span class="ot">_</span>≐<span class="ot">_</span> <span class="ot">:</span> Monotone n m <span class="ot">→</span> Monotone n m <span class="ot">→</span> <span class="dt">Set</span></span>
<span id="cb6-2"><a href="https://oleg.fi/gists/atom.xml#cb6-2"></a><span class="ot">(</span>f , <span class="ot">_)</span> ≐ <span class="ot">(</span>g , <span class="ot">_)</span> <span class="ot">=</span> <span class="ot">∀</span> i <span class="ot">→</span> f i ≡ g i</span></code></pre></div>
<p>The pointwise equality works well, and we don't actually care about <code>isMonotone</code> proof. (Though I think it can be shown that it is hProp. so this is justified).</p>
<p>Reed mentions that this formulation is nice, except that we want to be able to define simplicial sets by how they act on the face and degeneracy maps, not some random monotonic map!</p>
<p>I actually don't know anything about face and boundary maps, but I trust others on that. (E.g. <a href="https://ncatlab.org/nlab/show/simplex+category">nLab</a> also says that all morphism are generated by face and degeneracy maps)</p>
<p>Reed then proceed to define a <em>third</em> variant, which resembles free category definition, yet he doesn't quotient by simplicial identities, but instead he defines equality using the semantics (i.e. pointwise on a function &quot;applying&quot; his description to finite ordinal).</p>
<h2 id="fourth-formulation">Fourth formulation</h2>
<p>... but there is fourth (?) option to encode monotone maps.</p>
<p>And it is very simple! (It does resemble <a href="https://oleg.fi/gists/2022-09-30-thinnings.lagda.html">thinnings</a> I wrote recently above, more on them below).</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb7-1"><a href="https://oleg.fi/gists/atom.xml#cb7-1"></a><span class="kw">data</span> Mono <span class="ot">:</span> ℕ <span class="ot">→</span> ℕ <span class="ot">→</span> <span class="dt">Set</span> <span class="kw">where</span></span>
<span id="cb7-2"><a href="https://oleg.fi/gists/atom.xml#cb7-2"></a>  base <span class="ot">:</span>                  Mono zero    zero</span>
<span id="cb7-3"><a href="https://oleg.fi/gists/atom.xml#cb7-3"></a>  skip <span class="ot">:</span> Mono n m       <span class="ot">→</span> Mono n       <span class="ot">(</span>suc m<span class="ot">)</span></span>
<span id="cb7-4"><a href="https://oleg.fi/gists/atom.xml#cb7-4"></a>  edge <span class="ot">:</span> Mono n <span class="ot">(</span>suc m<span class="ot">)</span> <span class="ot">→</span> Mono <span class="ot">(</span>suc n<span class="ot">)</span> <span class="ot">(</span>suc m<span class="ot">)</span></span></code></pre></div>
<p>The <code>base</code> and <code>skip</code> constructors are similar as in thinnings, but <code>edge</code> as different then <code>keep</code>. Where <code>keep</code> always introduced a new &quot;output&quot;, <code>edge</code> requires there to be an element and maps new input to that same element.</p>
<p>So if we have a <code>Mono</code> which looks like:</p>
<p><svg height="66.7191pt" style="vertical-align: 4.725200pt;" version="1.1" viewBox="4.7814 -71.4443 80.5746 66.7191" width="80.5746pt">
<title>\begin{tikzpicture}   \node[circle, draw, fill=black, inner sep=0pt, minimum width=4pt] (A) at (0,0.00) {};   \node[circle, draw, fill=black, inner sep=0pt, minimum width=4pt] (B) at (0,0.50) {};   \node[circle, draw, fill=black, inner sep=0pt, minimum width=4pt] (C) at (0,1.00) {};   \node[circle, draw, fill=black, inner sep=0pt, minimum width=4pt] (D) at (0,1.50) {};   \node[anchor=east] at (A) {$0$};   \node[anchor=east] at (B) {$1$};   \node[anchor=east] at (C) {$2$};   \node[anchor=east] at (D) {$3$};    \node[circle, draw, fill=black, inner sep=0pt, minimum width=4pt] (X) at (2,0.00) {};   \node[circle, draw, fill=black, inner sep=0pt, minimum width=4pt] (Y) at (2,0.50) {};   \node[circle, draw, fill=black, inner sep=0pt, minimum width=4pt] (Z) at (2,1.00) {};   \node[circle, draw,             inner sep=0pt, minimum width=4pt] (U) at (2,1.50) {};   \node[circle, draw, fill=black, inner sep=0pt, minimum width=4pt] (V) at (2,2.00) {};   \node[anchor=west] at (X) {$0$};   \node[anchor=west] at (Y) {$1$};   \node[anchor=west] at (Z) {$2$};   \node[anchor=west] at (U) {$3$};   \node[anchor=west] at (V) {$4$};    \draw[-] (A) -- (X);   \draw[-] (B) -- (Y);   \draw[-] (C) -- (Z);   \draw[-] (D) -- (V); \end{tikzpicture}</title>
<defs/>
<g>
<path d="M18.9297 -9.79687C18.9297 -10.8945 18.0352 -11.7891 16.9336 -11.7891C15.8359 -11.7891 14.9414 -10.8945 14.9414 -9.79687C14.9414 -8.69531 15.8359 -7.80469 16.9336 -7.80469C18.0352 -7.80469 18.9297 -8.69531 18.9297 -9.79687Z">
<path d="M18.9297 -9.79687C18.9297 -10.8945 18.0352 -11.7891 16.9336 -11.7891C15.8359 -11.7891 14.9414 -10.8945 14.9414 -9.79687C14.9414 -8.69531 15.8359 -7.80469 16.9336 -7.80469C18.0352 -7.80469 18.9297 -8.69531 18.9297 -9.79687Z" fill="none" stroke="#000000" stroke-miterlimit="10.0375" stroke-width="0.399994">
<path d="M18.9297 -23.9688C18.9297 -25.0704 18.0352 -25.961 16.9336 -25.961C15.8359 -25.961 14.9414 -25.0704 14.9414 -23.9688C14.9414 -22.8672 15.8359 -21.9766 16.9336 -21.9766C18.0352 -21.9766 18.9297 -22.8672 18.9297 -23.9688Z">
<path d="M18.9297 -23.9688C18.9297 -25.0704 18.0352 -25.961 16.9336 -25.961C15.8359 -25.961 14.9414 -25.0704 14.9414 -23.9688C14.9414 -22.8672 15.8359 -21.9766 16.9336 -21.9766C18.0352 -21.9766 18.9297 -22.8672 18.9297 -23.9688Z" fill="none" stroke="#000000" stroke-miterlimit="10.0375" stroke-width="0.399994">
<path d="M18.9297 -38.1407C18.9297 -39.2422 18.0352 -40.1367 16.9336 -40.1367C15.8359 -40.1367 14.9414 -39.2422 14.9414 -38.1407C14.9414 -37.0429 15.8359 -36.1485 16.9336 -36.1485C18.0352 -36.1485 18.9297 -37.0429 18.9297 -38.1407Z">
<path d="M18.9297 -38.1407C18.9297 -39.2422 18.0352 -40.1367 16.9336 -40.1367C15.8359 -40.1367 14.9414 -39.2422 14.9414 -38.1407C14.9414 -37.0429 15.8359 -36.1485 16.9336 -36.1485C18.0352 -36.1485 18.9297 -37.0429 18.9297 -38.1407Z" fill="none" stroke="#000000" stroke-miterlimit="10.0375" stroke-width="0.399994">
<path d="M18.9297 -52.3165C18.9297 -53.418 18.0352 -54.3086 16.9336 -54.3086C15.8359 -54.3086 14.9414 -53.418 14.9414 -52.3165C14.9414 -51.2149 15.8359 -50.3242 16.9336 -50.3242C18.0352 -50.3242 18.9297 -51.2149 18.9297 -52.3165Z">
<path d="M18.9297 -52.3165C18.9297 -53.418 18.0352 -54.3086 16.9336 -54.3086C15.8359 -54.3086 14.9414 -53.418 14.9414 -52.3165C14.9414 -51.2149 15.8359 -50.3242 16.9336 -50.3242C18.0352 -50.3242 18.9297 -51.2149 18.9297 -52.3165Z" fill="none" stroke="#000000" stroke-miterlimit="10.0375" stroke-width="0.399994">
<g transform="matrix(1 0 0 1 -12.154 4.78447)">
<path d="M20.6944 -19.6431C18.479 -19.6431 17.3499 -17.8851 17.3499 -14.4263C17.3499 -12.754 17.6501 -11.3105 18.1503 -10.6101S19.4509 -9.5096 20.3371 -9.5096C22.4953 -9.5096 23.5815 -11.3676 23.5815 -15.0265C23.5815 -18.1566 22.6525 -19.6431 20.6944 -19.6431ZM20.4371 -19.1428C21.8235 -19.1428 22.3809 -17.7421 22.3809 -14.3119C22.3809 -11.2676 21.8378 -10.0098 20.5229 -10.0098C19.1365 -10.0098 18.5505 -11.4534 18.5505 -14.9408C18.5505 -17.9565 19.0793 -19.1428 20.4371 -19.1428Z">
</path></g>
<g transform="matrix(1 0 0 1 -12.154 -9.20955)">
<path d="M17.893 -17.7278H18.036L19.8797 -18.5568C19.894 -18.5711 19.9083 -18.5711 19.9226 -18.5711C20.0083 -18.5711 20.0369 -18.4425 20.0369 -18.0995V-11.1675C20.0369 -10.4243 19.8797 -10.2671 19.1079 -10.2242L18.3075 -10.1814V-9.75257C20.5086 -9.79545 20.5086 -9.79545 20.6658 -9.79545C20.8516 -9.79545 21.166 -9.79545 21.652 -9.78116C21.8235 -9.76687 22.3237 -9.76687 22.9097 -9.75257V-10.1814L22.1665 -10.2242C21.3804 -10.2671 21.2375 -10.4243 21.2375 -11.1675V-19.6431L21.0374 -19.7145C20.1084 -19.2286 19.0936 -18.7998 17.793 -18.3424L17.893 -17.7278Z">
</path></g>
<g transform="matrix(1 0 0 1 -12.154 -23.4905)">
<path d="M17.1641 -10.1242V-9.75257C19.8368 -9.79545 19.8368 -9.79545 20.3514 -9.79545S20.8659 -9.79545 23.6244 -9.75257C23.5958 -10.0527 23.5958 -10.1956 23.5958 -10.3957C23.5958 -10.5815 23.5958 -10.7245 23.6244 -11.0389C21.9807 -10.9674 21.3233 -10.9532 18.6791 -10.896L21.2804 -13.6545C22.6668 -15.1266 23.0955 -15.9127 23.0955 -16.9846C23.0955 -18.6283 21.9807 -19.6431 20.1656 -19.6431C19.1365 -19.6431 18.4362 -19.3572 17.7358 -18.6426L17.4929 -16.6988H17.9073L18.0931 -17.3562C18.3218 -18.1852 18.8364 -18.5425 19.794 -18.5425C21.0231 -18.5425 21.8092 -17.7707 21.8092 -16.5558C21.8092 -15.4839 21.2089 -14.4263 19.5939 -12.7111L17.1641 -10.1242Z">
</path></g>
<g transform="matrix(1 0 0 1 -12.154 -37.7357)">
<path d="M17.55 -16.9132H17.9931L18.2504 -17.7136C18.4076 -18.1995 19.308 -18.6854 20.0512 -18.6854C20.9802 -18.6854 21.7378 -17.9279 21.7378 -17.0275C21.7378 -15.9556 20.8945 -15.0551 19.8797 -15.0551C19.7654 -15.0551 19.6082 -15.0694 19.4224 -15.0837L19.208 -15.098L19.0365 -14.3405L19.1365 -14.2547C19.6796 -14.4977 19.9512 -14.5692 20.3371 -14.5692C21.5234 -14.5692 22.2094 -13.8117 22.2094 -12.511C22.2094 -11.0532 21.3376 -10.0956 20.0083 -10.0956C19.3509 -10.0956 18.7649 -10.31 18.3361 -10.7102C17.9931 -11.0246 17.8073 -11.3533 17.5357 -12.1251L17.1498 -11.9822C17.45 -11.1104 17.5643 -10.5958 17.6501 -9.88121C18.4076 -9.62394 19.0365 -9.5096 19.5653 -9.5096C20.7087 -9.5096 22.0236 -10.1528 22.8097 -11.1104C23.2956 -11.6964 23.5386 -12.3252 23.5386 -12.997C23.5386 -13.683 23.2528 -14.2833 22.7382 -14.6406C22.3809 -14.8979 22.0522 -15.0122 21.3376 -15.1409C22.481 -16.027 22.9097 -16.6845 22.9097 -17.5277C22.9097 -18.7998 21.8521 -19.6431 20.2656 -19.6431C19.2937 -19.6431 18.6506 -19.3715 17.9645 -18.6854L17.55 -16.9132Z">
</path></g>
<path d="M75.6211 -9.79687C75.6211 -10.8945 74.7305 -11.7891 73.6289 -11.7891S71.6367 -10.8945 71.6367 -9.79687C71.6367 -8.69531 72.5273 -7.80469 73.6289 -7.80469S75.6211 -8.69531 75.6211 -9.79687Z">
<path d="M75.6211 -9.79687C75.6211 -10.8945 74.7305 -11.7891 73.6289 -11.7891S71.6367 -10.8945 71.6367 -9.79687C71.6367 -8.69531 72.5273 -7.80469 73.6289 -7.80469S75.6211 -8.69531 75.6211 -9.79687Z" fill="none" stroke="#000000" stroke-miterlimit="10.0375" stroke-width="0.399994">
<path d="M75.6211 -23.9688C75.6211 -25.0704 74.7305 -25.961 73.6289 -25.961S71.6367 -25.0704 71.6367 -23.9688C71.6367 -22.8672 72.5273 -21.9766 73.6289 -21.9766S75.6211 -22.8672 75.6211 -23.9688Z">
<path d="M75.6211 -23.9688C75.6211 -25.0704 74.7305 -25.961 73.6289 -25.961S71.6367 -25.0704 71.6367 -23.9688C71.6367 -22.8672 72.5273 -21.9766 73.6289 -21.9766S75.6211 -22.8672 75.6211 -23.9688Z" fill="none" stroke="#000000" stroke-miterlimit="10.0375" stroke-width="0.399994">
<path d="M75.6211 -38.1407C75.6211 -39.2422 74.7305 -40.1367 73.6289 -40.1367S71.6367 -39.2422 71.6367 -38.1407C71.6367 -37.0429 72.5273 -36.1485 73.6289 -36.1485S75.6211 -37.0429 75.6211 -38.1407Z">
<path d="M75.6211 -38.1407C75.6211 -39.2422 74.7305 -40.1367 73.6289 -40.1367S71.6367 -39.2422 71.6367 -38.1407C71.6367 -37.0429 72.5273 -36.1485 73.6289 -36.1485S75.6211 -37.0429 75.6211 -38.1407Z" fill="none" stroke="#000000" stroke-miterlimit="10.0375" stroke-width="0.399994">
<path d="M75.6211 -52.3165C75.6211 -53.418 74.7305 -54.3086 73.6289 -54.3086S71.6367 -53.418 71.6367 -52.3165C71.6367 -51.2149 72.5273 -50.3242 73.6289 -50.3242S75.6211 -51.2149 75.6211 -52.3165Z" fill="none" stroke="#000000" stroke-miterlimit="10.0375" stroke-width="0.399994">
<path d="M75.6211 -66.4882C75.6211 -67.5898 74.7305 -68.4805 73.6289 -68.4805S71.6367 -67.5898 71.6367 -66.4882C71.6367 -65.3867 72.5273 -64.496 73.6289 -64.496S75.6211 -65.3867 75.6211 -66.4882Z">
<path d="M75.6211 -66.4882C75.6211 -67.5898 74.7305 -68.4805 73.6289 -68.4805S71.6367 -67.5898 71.6367 -66.4882C71.6367 -65.3867 72.5273 -64.496 73.6289 -64.496S75.6211 -65.3867 75.6211 -66.4882Z" fill="none" stroke="#000000" stroke-miterlimit="10.0375" stroke-width="0.399994">
<g transform="matrix(1 0 0 1 61.6745 4.78447)">
<path d="M20.6944 -19.6431C18.479 -19.6431 17.3499 -17.8851 17.3499 -14.4263C17.3499 -12.754 17.6501 -11.3105 18.1503 -10.6101S19.4509 -9.5096 20.3371 -9.5096C22.4953 -9.5096 23.5815 -11.3676 23.5815 -15.0265C23.5815 -18.1566 22.6525 -19.6431 20.6944 -19.6431ZM20.4371 -19.1428C21.8235 -19.1428 22.3809 -17.7421 22.3809 -14.3119C22.3809 -11.2676 21.8378 -10.0098 20.5229 -10.0098C19.1365 -10.0098 18.5505 -11.4534 18.5505 -14.9408C18.5505 -17.9565 19.0793 -19.1428 20.4371 -19.1428Z">
</path></g>
<g transform="matrix(1 0 0 1 61.6745 -9.20955)">
<path d="M17.893 -17.7278H18.036L19.8797 -18.5568C19.894 -18.5711 19.9083 -18.5711 19.9226 -18.5711C20.0083 -18.5711 20.0369 -18.4425 20.0369 -18.0995V-11.1675C20.0369 -10.4243 19.8797 -10.2671 19.1079 -10.2242L18.3075 -10.1814V-9.75257C20.5086 -9.79545 20.5086 -9.79545 20.6658 -9.79545C20.8516 -9.79545 21.166 -9.79545 21.652 -9.78116C21.8235 -9.76687 22.3237 -9.76687 22.9097 -9.75257V-10.1814L22.1665 -10.2242C21.3804 -10.2671 21.2375 -10.4243 21.2375 -11.1675V-19.6431L21.0374 -19.7145C20.1084 -19.2286 19.0936 -18.7998 17.793 -18.3424L17.893 -17.7278Z">
</path></g>
<g transform="matrix(1 0 0 1 61.6745 -23.4905)">
<path d="M17.1641 -10.1242V-9.75257C19.8368 -9.79545 19.8368 -9.79545 20.3514 -9.79545S20.8659 -9.79545 23.6244 -9.75257C23.5958 -10.0527 23.5958 -10.1956 23.5958 -10.3957C23.5958 -10.5815 23.5958 -10.7245 23.6244 -11.0389C21.9807 -10.9674 21.3233 -10.9532 18.6791 -10.896L21.2804 -13.6545C22.6668 -15.1266 23.0955 -15.9127 23.0955 -16.9846C23.0955 -18.6283 21.9807 -19.6431 20.1656 -19.6431C19.1365 -19.6431 18.4362 -19.3572 17.7358 -18.6426L17.4929 -16.6988H17.9073L18.0931 -17.3562C18.3218 -18.1852 18.8364 -18.5425 19.794 -18.5425C21.0231 -18.5425 21.8092 -17.7707 21.8092 -16.5558C21.8092 -15.4839 21.2089 -14.4263 19.5939 -12.7111L17.1641 -10.1242Z">
</path></g>
<g transform="matrix(1 0 0 1 61.6745 -37.7357)">
<path d="M17.55 -16.9132H17.9931L18.2504 -17.7136C18.4076 -18.1995 19.308 -18.6854 20.0512 -18.6854C20.9802 -18.6854 21.7378 -17.9279 21.7378 -17.0275C21.7378 -15.9556 20.8945 -15.0551 19.8797 -15.0551C19.7654 -15.0551 19.6082 -15.0694 19.4224 -15.0837L19.208 -15.098L19.0365 -14.3405L19.1365 -14.2547C19.6796 -14.4977 19.9512 -14.5692 20.3371 -14.5692C21.5234 -14.5692 22.2094 -13.8117 22.2094 -12.511C22.2094 -11.0532 21.3376 -10.0956 20.0083 -10.0956C19.3509 -10.0956 18.7649 -10.31 18.3361 -10.7102C17.9931 -11.0246 17.8073 -11.3533 17.5357 -12.1251L17.1498 -11.9822C17.45 -11.1104 17.5643 -10.5958 17.6501 -9.88121C18.4076 -9.62394 19.0365 -9.5096 19.5653 -9.5096C20.7087 -9.5096 22.0236 -10.1528 22.8097 -11.1104C23.2956 -11.6964 23.5386 -12.3252 23.5386 -12.997C23.5386 -13.683 23.2528 -14.2833 22.7382 -14.6406C22.3809 -14.8979 22.0522 -15.0122 21.3376 -15.1409C22.481 -16.027 22.9097 -16.6845 22.9097 -17.5277C22.9097 -18.7998 21.8521 -19.6431 20.2656 -19.6431C19.2937 -19.6431 18.6506 -19.3715 17.9645 -18.6854L17.55 -16.9132Z">
</path></g>
<g transform="matrix(1 0 0 1 61.6745 -51.7297)">
<path d="M20.9374 -12.3824V-11.3105C20.9374 -10.4529 20.7801 -10.2528 20.0798 -10.2242L19.1937 -10.1814V-9.75257C21.0946 -9.79545 21.0946 -9.79545 21.4376 -9.79545S21.7806 -9.79545 23.6815 -9.75257V-10.1814L22.9955 -10.2242C22.2952 -10.2671 22.1379 -10.4529 22.1379 -11.3105V-12.3824C22.9812 -12.3824 23.2814 -12.3681 23.6815 -12.3252V-13.34C23.0098 -13.2828 22.7382 -13.2828 22.5238 -13.2971H22.481H22.1379V-15.2838C22.1379 -17.8279 22.1665 -19.0571 22.238 -19.6431L22.0665 -19.7145L21.0088 -19.3286L16.964 -12.7111L17.1212 -12.3824H20.9374ZM20.9374 -13.2971H17.8645L20.9374 -18.3281V-13.2971Z">
</path></g>
<path d="M19.1289 -9.79687H71.4375" fill="none" stroke="#000000" stroke-miterlimit="10.0375" stroke-width="0.399994">
<path d="M19.1289 -23.9688H71.4375" fill="none" stroke="#000000" stroke-miterlimit="10.0375" stroke-width="0.399994">
<path d="M19.1289 -38.1407H71.4375" fill="none" stroke="#000000" stroke-miterlimit="10.0375" stroke-width="0.399994">
<path d="M19.0625 -52.8477L71.5039 -65.957" fill="none" stroke="#000000" stroke-miterlimit="10.0375" stroke-width="0.399994">
</path></path></path></path></path></path></path></path></path></path></path></path></path></path></path></path></path></path></path></path></path></g>
</svg></p>
<p>We can add a new edge which goes to already existing output with <code>edge</code>:</p>
<p><svg height="66.7191pt" style="vertical-align: 4.725200pt;" version="1.1" viewBox="4.7814 -71.4443 80.5746 66.7191" width="80.5746pt">
<title>\begin{tikzpicture}   \node[circle, draw, fill=black, inner sep=0pt, minimum width=4pt] (A) at (0,0.00) {};   \node[circle, draw, fill=black, inner sep=0pt, minimum width=4pt] (B) at (0,0.50) {};   \node[circle, draw, fill=black, inner sep=0pt, minimum width=4pt] (C) at (0,1.00) {};   \node[circle, draw, fill=black, inner sep=0pt, minimum width=4pt] (D) at (0,1.50) {};   \node[circle, draw, red, fill=red, inner sep=0pt, minimum width=4pt] (E) at (0,2.00) {};   \node[anchor=east] at (A) {$0$};   \node[anchor=east] at (B) {$1$};   \node[anchor=east] at (C) {$2$};   \node[anchor=east] at (D) {$3$};   \node[anchor=east] at (E) {$4$};    \node[circle, draw, fill=black, inner sep=0pt, minimum width=4pt] (X) at (2,0.00) {};   \node[circle, draw, fill=black, inner sep=0pt, minimum width=4pt] (Y) at (2,0.50) {};   \node[circle, draw, fill=black, inner sep=0pt, minimum width=4pt] (Z) at (2,1.00) {};   \node[circle, draw,             inner sep=0pt, minimum width=4pt] (U) at (2,1.50) {};   \node[circle, draw, fill=black, inner sep=0pt, minimum width=4pt] (V) at (2,2.00) {};   \node[anchor=west] at (X) {$0$};   \node[anchor=west] at (Y) {$1$};   \node[anchor=west] at (Z) {$2$};   \node[anchor=west] at (U) {$3$};   \node[anchor=west] at (V) {$4$};    \draw[-] (A) -- (X);   \draw[-] (B) -- (Y);   \draw[-] (C) -- (Z);   \draw[-] (D) -- (V);   \draw[red,-] (E) -- (V); \end{tikzpicture}</title>
<defs/>
<g>
<path d="M18.9297 -9.79687C18.9297 -10.8945 18.0352 -11.7891 16.9336 -11.7891C15.8359 -11.7891 14.9414 -10.8945 14.9414 -9.79687C14.9414 -8.69531 15.8359 -7.80469 16.9336 -7.80469C18.0352 -7.80469 18.9297 -8.69531 18.9297 -9.79687Z">
<path d="M18.9297 -9.79687C18.9297 -10.8945 18.0352 -11.7891 16.9336 -11.7891C15.8359 -11.7891 14.9414 -10.8945 14.9414 -9.79687C14.9414 -8.69531 15.8359 -7.80469 16.9336 -7.80469C18.0352 -7.80469 18.9297 -8.69531 18.9297 -9.79687Z" fill="none" stroke="#000000" stroke-miterlimit="10.0375" stroke-width="0.399994">
<path d="M18.9297 -23.9688C18.9297 -25.0704 18.0352 -25.961 16.9336 -25.961C15.8359 -25.961 14.9414 -25.0704 14.9414 -23.9688C14.9414 -22.8672 15.8359 -21.9766 16.9336 -21.9766C18.0352 -21.9766 18.9297 -22.8672 18.9297 -23.9688Z">
<path d="M18.9297 -23.9688C18.9297 -25.0704 18.0352 -25.961 16.9336 -25.961C15.8359 -25.961 14.9414 -25.0704 14.9414 -23.9688C14.9414 -22.8672 15.8359 -21.9766 16.9336 -21.9766C18.0352 -21.9766 18.9297 -22.8672 18.9297 -23.9688Z" fill="none" stroke="#000000" stroke-miterlimit="10.0375" stroke-width="0.399994">
<path d="M18.9297 -38.1407C18.9297 -39.2422 18.0352 -40.1367 16.9336 -40.1367C15.8359 -40.1367 14.9414 -39.2422 14.9414 -38.1407C14.9414 -37.0429 15.8359 -36.1485 16.9336 -36.1485C18.0352 -36.1485 18.9297 -37.0429 18.9297 -38.1407Z">
<path d="M18.9297 -38.1407C18.9297 -39.2422 18.0352 -40.1367 16.9336 -40.1367C15.8359 -40.1367 14.9414 -39.2422 14.9414 -38.1407C14.9414 -37.0429 15.8359 -36.1485 16.9336 -36.1485C18.0352 -36.1485 18.9297 -37.0429 18.9297 -38.1407Z" fill="none" stroke="#000000" stroke-miterlimit="10.0375" stroke-width="0.399994">
<path d="M18.9297 -52.3165C18.9297 -53.418 18.0352 -54.3086 16.9336 -54.3086C15.8359 -54.3086 14.9414 -53.418 14.9414 -52.3165C14.9414 -51.2149 15.8359 -50.3242 16.9336 -50.3242C18.0352 -50.3242 18.9297 -51.2149 18.9297 -52.3165Z">
<path d="M18.9297 -52.3165C18.9297 -53.418 18.0352 -54.3086 16.9336 -54.3086C15.8359 -54.3086 14.9414 -53.418 14.9414 -52.3165C14.9414 -51.2149 15.8359 -50.3242 16.9336 -50.3242C18.0352 -50.3242 18.9297 -51.2149 18.9297 -52.3165Z" fill="none" stroke="#000000" stroke-miterlimit="10.0375" stroke-width="0.399994">
<path d="M18.9297 -66.4882C18.9297 -67.5898 18.0352 -68.4805 16.9336 -68.4805C15.8359 -68.4805 14.9414 -67.5898 14.9414 -66.4882C14.9414 -65.3867 15.8359 -64.496 16.9336 -64.496C18.0352 -64.496 18.9297 -65.3867 18.9297 -66.4882Z" fill="#ff0000">
<path d="M18.9297 -66.4882C18.9297 -67.5898 18.0352 -68.4805 16.9336 -68.4805C15.8359 -68.4805 14.9414 -67.5898 14.9414 -66.4882C14.9414 -65.3867 15.8359 -64.496 16.9336 -64.496C18.0352 -64.496 18.9297 -65.3867 18.9297 -66.4882Z" fill="none" stroke="#ff0000" stroke-miterlimit="10.0375" stroke-width="0.399994">
<g transform="matrix(1 0 0 1 -12.154 4.78447)">
<path d="M20.6944 -19.6431C18.479 -19.6431 17.3499 -17.8851 17.3499 -14.4263C17.3499 -12.754 17.6501 -11.3105 18.1503 -10.6101S19.4509 -9.5096 20.3371 -9.5096C22.4953 -9.5096 23.5815 -11.3676 23.5815 -15.0265C23.5815 -18.1566 22.6525 -19.6431 20.6944 -19.6431ZM20.4371 -19.1428C21.8235 -19.1428 22.3809 -17.7421 22.3809 -14.3119C22.3809 -11.2676 21.8378 -10.0098 20.5229 -10.0098C19.1365 -10.0098 18.5505 -11.4534 18.5505 -14.9408C18.5505 -17.9565 19.0793 -19.1428 20.4371 -19.1428Z">
</path></g>
<g transform="matrix(1 0 0 1 -12.154 -9.20955)">
<path d="M17.893 -17.7278H18.036L19.8797 -18.5568C19.894 -18.5711 19.9083 -18.5711 19.9226 -18.5711C20.0083 -18.5711 20.0369 -18.4425 20.0369 -18.0995V-11.1675C20.0369 -10.4243 19.8797 -10.2671 19.1079 -10.2242L18.3075 -10.1814V-9.75257C20.5086 -9.79545 20.5086 -9.79545 20.6658 -9.79545C20.8516 -9.79545 21.166 -9.79545 21.652 -9.78116C21.8235 -9.76687 22.3237 -9.76687 22.9097 -9.75257V-10.1814L22.1665 -10.2242C21.3804 -10.2671 21.2375 -10.4243 21.2375 -11.1675V-19.6431L21.0374 -19.7145C20.1084 -19.2286 19.0936 -18.7998 17.793 -18.3424L17.893 -17.7278Z">
</path></g>
<g transform="matrix(1 0 0 1 -12.154 -23.4905)">
<path d="M17.1641 -10.1242V-9.75257C19.8368 -9.79545 19.8368 -9.79545 20.3514 -9.79545S20.8659 -9.79545 23.6244 -9.75257C23.5958 -10.0527 23.5958 -10.1956 23.5958 -10.3957C23.5958 -10.5815 23.5958 -10.7245 23.6244 -11.0389C21.9807 -10.9674 21.3233 -10.9532 18.6791 -10.896L21.2804 -13.6545C22.6668 -15.1266 23.0955 -15.9127 23.0955 -16.9846C23.0955 -18.6283 21.9807 -19.6431 20.1656 -19.6431C19.1365 -19.6431 18.4362 -19.3572 17.7358 -18.6426L17.4929 -16.6988H17.9073L18.0931 -17.3562C18.3218 -18.1852 18.8364 -18.5425 19.794 -18.5425C21.0231 -18.5425 21.8092 -17.7707 21.8092 -16.5558C21.8092 -15.4839 21.2089 -14.4263 19.5939 -12.7111L17.1641 -10.1242Z">
</path></g>
<g transform="matrix(1 0 0 1 -12.154 -37.7357)">
<path d="M17.55 -16.9132H17.9931L18.2504 -17.7136C18.4076 -18.1995 19.308 -18.6854 20.0512 -18.6854C20.9802 -18.6854 21.7378 -17.9279 21.7378 -17.0275C21.7378 -15.9556 20.8945 -15.0551 19.8797 -15.0551C19.7654 -15.0551 19.6082 -15.0694 19.4224 -15.0837L19.208 -15.098L19.0365 -14.3405L19.1365 -14.2547C19.6796 -14.4977 19.9512 -14.5692 20.3371 -14.5692C21.5234 -14.5692 22.2094 -13.8117 22.2094 -12.511C22.2094 -11.0532 21.3376 -10.0956 20.0083 -10.0956C19.3509 -10.0956 18.7649 -10.31 18.3361 -10.7102C17.9931 -11.0246 17.8073 -11.3533 17.5357 -12.1251L17.1498 -11.9822C17.45 -11.1104 17.5643 -10.5958 17.6501 -9.88121C18.4076 -9.62394 19.0365 -9.5096 19.5653 -9.5096C20.7087 -9.5096 22.0236 -10.1528 22.8097 -11.1104C23.2956 -11.6964 23.5386 -12.3252 23.5386 -12.997C23.5386 -13.683 23.2528 -14.2833 22.7382 -14.6406C22.3809 -14.8979 22.0522 -15.0122 21.3376 -15.1409C22.481 -16.027 22.9097 -16.6845 22.9097 -17.5277C22.9097 -18.7998 21.8521 -19.6431 20.2656 -19.6431C19.2937 -19.6431 18.6506 -19.3715 17.9645 -18.6854L17.55 -16.9132Z">
</path></g>
<g transform="matrix(1 0 0 1 -12.154 -51.7297)">
<path d="M20.9374 -12.3824V-11.3105C20.9374 -10.4529 20.7801 -10.2528 20.0798 -10.2242L19.1937 -10.1814V-9.75257C21.0946 -9.79545 21.0946 -9.79545 21.4376 -9.79545S21.7806 -9.79545 23.6815 -9.75257V-10.1814L22.9955 -10.2242C22.2952 -10.2671 22.1379 -10.4529 22.1379 -11.3105V-12.3824C22.9812 -12.3824 23.2814 -12.3681 23.6815 -12.3252V-13.34C23.0098 -13.2828 22.7382 -13.2828 22.5238 -13.2971H22.481H22.1379V-15.2838C22.1379 -17.8279 22.1665 -19.0571 22.238 -19.6431L22.0665 -19.7145L21.0088 -19.3286L16.964 -12.7111L17.1212 -12.3824H20.9374ZM20.9374 -13.2971H17.8645L20.9374 -18.3281V-13.2971Z">
</path></g>
<path d="M75.6211 -9.79687C75.6211 -10.8945 74.7305 -11.7891 73.6289 -11.7891S71.6367 -10.8945 71.6367 -9.79687C71.6367 -8.69531 72.5273 -7.80469 73.6289 -7.80469S75.6211 -8.69531 75.6211 -9.79687Z">
<path d="M75.6211 -9.79687C75.6211 -10.8945 74.7305 -11.7891 73.6289 -11.7891S71.6367 -10.8945 71.6367 -9.79687C71.6367 -8.69531 72.5273 -7.80469 73.6289 -7.80469S75.6211 -8.69531 75.6211 -9.79687Z" fill="none" stroke="#000000" stroke-miterlimit="10.0375" stroke-width="0.399994">
<path d="M75.6211 -23.9688C75.6211 -25.0704 74.7305 -25.961 73.6289 -25.961S71.6367 -25.0704 71.6367 -23.9688C71.6367 -22.8672 72.5273 -21.9766 73.6289 -21.9766S75.6211 -22.8672 75.6211 -23.9688Z">
<path d="M75.6211 -23.9688C75.6211 -25.0704 74.7305 -25.961 73.6289 -25.961S71.6367 -25.0704 71.6367 -23.9688C71.6367 -22.8672 72.5273 -21.9766 73.6289 -21.9766S75.6211 -22.8672 75.6211 -23.9688Z" fill="none" stroke="#000000" stroke-miterlimit="10.0375" stroke-width="0.399994">
<path d="M75.6211 -38.1407C75.6211 -39.2422 74.7305 -40.1367 73.6289 -40.1367S71.6367 -39.2422 71.6367 -38.1407C71.6367 -37.0429 72.5273 -36.1485 73.6289 -36.1485S75.6211 -37.0429 75.6211 -38.1407Z">
<path d="M75.6211 -38.1407C75.6211 -39.2422 74.7305 -40.1367 73.6289 -40.1367S71.6367 -39.2422 71.6367 -38.1407C71.6367 -37.0429 72.5273 -36.1485 73.6289 -36.1485S75.6211 -37.0429 75.6211 -38.1407Z" fill="none" stroke="#000000" stroke-miterlimit="10.0375" stroke-width="0.399994">
<path d="M75.6211 -52.3165C75.6211 -53.418 74.7305 -54.3086 73.6289 -54.3086S71.6367 -53.418 71.6367 -52.3165C71.6367 -51.2149 72.5273 -50.3242 73.6289 -50.3242S75.6211 -51.2149 75.6211 -52.3165Z" fill="none" stroke="#000000" stroke-miterlimit="10.0375" stroke-width="0.399994">
<path d="M75.6211 -66.4882C75.6211 -67.5898 74.7305 -68.4805 73.6289 -68.4805S71.6367 -67.5898 71.6367 -66.4882C71.6367 -65.3867 72.5273 -64.496 73.6289 -64.496S75.6211 -65.3867 75.6211 -66.4882Z">
<path d="M75.6211 -66.4882C75.6211 -67.5898 74.7305 -68.4805 73.6289 -68.4805S71.6367 -67.5898 71.6367 -66.4882C71.6367 -65.3867 72.5273 -64.496 73.6289 -64.496S75.6211 -65.3867 75.6211 -66.4882Z" fill="none" stroke="#000000" stroke-miterlimit="10.0375" stroke-width="0.399994">
<g transform="matrix(1 0 0 1 61.6745 4.78447)">
<path d="M20.6944 -19.6431C18.479 -19.6431 17.3499 -17.8851 17.3499 -14.4263C17.3499 -12.754 17.6501 -11.3105 18.1503 -10.6101S19.4509 -9.5096 20.3371 -9.5096C22.4953 -9.5096 23.5815 -11.3676 23.5815 -15.0265C23.5815 -18.1566 22.6525 -19.6431 20.6944 -19.6431ZM20.4371 -19.1428C21.8235 -19.1428 22.3809 -17.7421 22.3809 -14.3119C22.3809 -11.2676 21.8378 -10.0098 20.5229 -10.0098C19.1365 -10.0098 18.5505 -11.4534 18.5505 -14.9408C18.5505 -17.9565 19.0793 -19.1428 20.4371 -19.1428Z">
</path></g>
<g transform="matrix(1 0 0 1 61.6745 -9.20955)">
<path d="M17.893 -17.7278H18.036L19.8797 -18.5568C19.894 -18.5711 19.9083 -18.5711 19.9226 -18.5711C20.0083 -18.5711 20.0369 -18.4425 20.0369 -18.0995V-11.1675C20.0369 -10.4243 19.8797 -10.2671 19.1079 -10.2242L18.3075 -10.1814V-9.75257C20.5086 -9.79545 20.5086 -9.79545 20.6658 -9.79545C20.8516 -9.79545 21.166 -9.79545 21.652 -9.78116C21.8235 -9.76687 22.3237 -9.76687 22.9097 -9.75257V-10.1814L22.1665 -10.2242C21.3804 -10.2671 21.2375 -10.4243 21.2375 -11.1675V-19.6431L21.0374 -19.7145C20.1084 -19.2286 19.0936 -18.7998 17.793 -18.3424L17.893 -17.7278Z">
</path></g>
<g transform="matrix(1 0 0 1 61.6745 -23.4905)">
<path d="M17.1641 -10.1242V-9.75257C19.8368 -9.79545 19.8368 -9.79545 20.3514 -9.79545S20.8659 -9.79545 23.6244 -9.75257C23.5958 -10.0527 23.5958 -10.1956 23.5958 -10.3957C23.5958 -10.5815 23.5958 -10.7245 23.6244 -11.0389C21.9807 -10.9674 21.3233 -10.9532 18.6791 -10.896L21.2804 -13.6545C22.6668 -15.1266 23.0955 -15.9127 23.0955 -16.9846C23.0955 -18.6283 21.9807 -19.6431 20.1656 -19.6431C19.1365 -19.6431 18.4362 -19.3572 17.7358 -18.6426L17.4929 -16.6988H17.9073L18.0931 -17.3562C18.3218 -18.1852 18.8364 -18.5425 19.794 -18.5425C21.0231 -18.5425 21.8092 -17.7707 21.8092 -16.5558C21.8092 -15.4839 21.2089 -14.4263 19.5939 -12.7111L17.1641 -10.1242Z">
</path></g>
<g transform="matrix(1 0 0 1 61.6745 -37.7357)">
<path d="M17.55 -16.9132H17.9931L18.2504 -17.7136C18.4076 -18.1995 19.308 -18.6854 20.0512 -18.6854C20.9802 -18.6854 21.7378 -17.9279 21.7378 -17.0275C21.7378 -15.9556 20.8945 -15.0551 19.8797 -15.0551C19.7654 -15.0551 19.6082 -15.0694 19.4224 -15.0837L19.208 -15.098L19.0365 -14.3405L19.1365 -14.2547C19.6796 -14.4977 19.9512 -14.5692 20.3371 -14.5692C21.5234 -14.5692 22.2094 -13.8117 22.2094 -12.511C22.2094 -11.0532 21.3376 -10.0956 20.0083 -10.0956C19.3509 -10.0956 18.7649 -10.31 18.3361 -10.7102C17.9931 -11.0246 17.8073 -11.3533 17.5357 -12.1251L17.1498 -11.9822C17.45 -11.1104 17.5643 -10.5958 17.6501 -9.88121C18.4076 -9.62394 19.0365 -9.5096 19.5653 -9.5096C20.7087 -9.5096 22.0236 -10.1528 22.8097 -11.1104C23.2956 -11.6964 23.5386 -12.3252 23.5386 -12.997C23.5386 -13.683 23.2528 -14.2833 22.7382 -14.6406C22.3809 -14.8979 22.0522 -15.0122 21.3376 -15.1409C22.481 -16.027 22.9097 -16.6845 22.9097 -17.5277C22.9097 -18.7998 21.8521 -19.6431 20.2656 -19.6431C19.2937 -19.6431 18.6506 -19.3715 17.9645 -18.6854L17.55 -16.9132Z">
</path></g>
<g transform="matrix(1 0 0 1 61.6745 -51.7297)">
<path d="M20.9374 -12.3824V-11.3105C20.9374 -10.4529 20.7801 -10.2528 20.0798 -10.2242L19.1937 -10.1814V-9.75257C21.0946 -9.79545 21.0946 -9.79545 21.4376 -9.79545S21.7806 -9.79545 23.6815 -9.75257V-10.1814L22.9955 -10.2242C22.2952 -10.2671 22.1379 -10.4529 22.1379 -11.3105V-12.3824C22.9812 -12.3824 23.2814 -12.3681 23.6815 -12.3252V-13.34C23.0098 -13.2828 22.7382 -13.2828 22.5238 -13.2971H22.481H22.1379V-15.2838C22.1379 -17.8279 22.1665 -19.0571 22.238 -19.6431L22.0665 -19.7145L21.0088 -19.3286L16.964 -12.7111L17.1212 -12.3824H20.9374ZM20.9374 -13.2971H17.8645L20.9374 -18.3281V-13.2971Z">
</path></g>
<path d="M19.1289 -9.79687H71.4375" fill="none" stroke="#000000" stroke-miterlimit="10.0375" stroke-width="0.399994">
<path d="M19.1289 -23.9688H71.4375" fill="none" stroke="#000000" stroke-miterlimit="10.0375" stroke-width="0.399994">
<path d="M19.1289 -38.1407H71.4375" fill="none" stroke="#000000" stroke-miterlimit="10.0375" stroke-width="0.399994">
<path d="M19.0625 -52.8477L71.5039 -65.957" fill="none" stroke="#000000" stroke-miterlimit="10.0375" stroke-width="0.399994">
<path d="M19.1289 -66.4882H71.4375" fill="none" stroke="#ff0000" stroke-miterlimit="10.0375" stroke-width="0.399994">
</path></path></path></path></path></path></path></path></path></path></path></path></path></path></path></path></path></path></path></path></path></path></path></path></g>
</svg></p>
<p>It took some time to get this right.</p>
<p><code>keep</code> as in thinnings can be define as first adding a new output with <code>skip</code> and then connecting an <code>edge</code> there:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb8-1"><a href="https://oleg.fi/gists/atom.xml#cb8-1"></a><span class="kw">pattern</span> keep f <span class="ot">=</span> edge <span class="ot">(</span>skip f<span class="ot">)</span></span></code></pre></div>
<p>We can define identity morphism and composition:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb9-1"><a href="https://oleg.fi/gists/atom.xml#cb9-1"></a>id <span class="ot">:</span> Mono n n</span>
<span id="cb9-2"><a href="https://oleg.fi/gists/atom.xml#cb9-2"></a>id <span class="ot">{</span>zero<span class="ot">}</span> <span class="ot">=</span> base</span>
<span id="cb9-3"><a href="https://oleg.fi/gists/atom.xml#cb9-3"></a>id <span class="ot">{</span>suc n<span class="ot">}</span> <span class="ot">=</span> keep id</span>
<span id="cb9-4"><a href="https://oleg.fi/gists/atom.xml#cb9-4"></a></span>
<span id="cb9-5"><a href="https://oleg.fi/gists/atom.xml#cb9-5"></a><span class="co">-- I'm rebel, using ⨟ for the composition</span></span>
<span id="cb9-6"><a href="https://oleg.fi/gists/atom.xml#cb9-6"></a><span class="ot">_</span>⨟<span class="ot">_</span> <span class="ot">:</span> Mono n m <span class="ot">→</span> Mono m p <span class="ot">→</span> Mono n p</span>
<span id="cb9-7"><a href="https://oleg.fi/gists/atom.xml#cb9-7"></a>base ⨟ g <span class="ot">=</span> g</span>
<span id="cb9-8"><a href="https://oleg.fi/gists/atom.xml#cb9-8"></a>skip f ⨟ skip g <span class="ot">=</span> skip <span class="ot">(</span>skip f ⨟ g<span class="ot">)</span></span>
<span id="cb9-9"><a href="https://oleg.fi/gists/atom.xml#cb9-9"></a>skip f ⨟ edge g <span class="ot">=</span> f ⨟ g</span>
<span id="cb9-10"><a href="https://oleg.fi/gists/atom.xml#cb9-10"></a>edge f ⨟ skip g <span class="ot">=</span> skip <span class="ot">(</span>edge f ⨟ g<span class="ot">)</span></span>
<span id="cb9-11"><a href="https://oleg.fi/gists/atom.xml#cb9-11"></a>edge f ⨟ edge g <span class="ot">=</span> edge <span class="ot">(</span>f ⨟ edge g<span class="ot">)</span></span></code></pre></div>
<p>I leave as an exercise to prove that category laws are satisfied.</p>
<p>Next we can define the semantics, i.e. how <code>Mono</code> maps finite ordinals: The definition is simple, encoding the graphical intuition from above.</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb10-1"><a href="https://oleg.fi/gists/atom.xml#cb10-1"></a>apply <span class="ot">:</span> Mono n m <span class="ot">→</span> Fin n <span class="ot">→</span> Fin m</span>
<span id="cb10-2"><a href="https://oleg.fi/gists/atom.xml#cb10-2"></a>apply <span class="ot">(</span>skip f<span class="ot">)</span> i       <span class="ot">=</span> suc <span class="ot">(</span>apply f i<span class="ot">)</span></span>
<span id="cb10-3"><a href="https://oleg.fi/gists/atom.xml#cb10-3"></a>apply <span class="ot">(</span>edge f<span class="ot">)</span> zero    <span class="ot">=</span> zero</span>
<span id="cb10-4"><a href="https://oleg.fi/gists/atom.xml#cb10-4"></a>apply <span class="ot">(</span>edge f<span class="ot">)</span> <span class="ot">(</span>suc i<span class="ot">)</span> <span class="ot">=</span> apply f i</span></code></pre></div>
<p>We can show that <code>apply</code>, <code>id</code> and <code>⨟</code> work together as expected.</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb11-1"><a href="https://oleg.fi/gists/atom.xml#cb11-1"></a>apply-id <span class="ot">:</span> <span class="ot">(</span>i <span class="ot">:</span> Fin n<span class="ot">)</span> <span class="ot">→</span> apply id i ≡ i</span>
<span id="cb11-2"><a href="https://oleg.fi/gists/atom.xml#cb11-2"></a>apply-id zero    <span class="ot">=</span> refl</span>
<span id="cb11-3"><a href="https://oleg.fi/gists/atom.xml#cb11-3"></a>apply-id <span class="ot">(</span>suc i<span class="ot">)</span> <span class="ot">=</span> cong suc <span class="ot">(</span>apply-id i<span class="ot">)</span></span>
<span id="cb11-4"><a href="https://oleg.fi/gists/atom.xml#cb11-4"></a></span>
<span id="cb11-5"><a href="https://oleg.fi/gists/atom.xml#cb11-5"></a>apply-⨟ <span class="ot">:</span> <span class="ot">(</span>f <span class="ot">:</span> Mono n m<span class="ot">)</span> <span class="ot">(</span>g <span class="ot">:</span> Mono m p<span class="ot">)</span> <span class="ot">(</span>i <span class="ot">:</span> Fin n<span class="ot">)</span></span>
<span id="cb11-6"><a href="https://oleg.fi/gists/atom.xml#cb11-6"></a>        <span class="ot">→</span> apply g <span class="ot">(</span>apply f i<span class="ot">)</span> ≡ apply <span class="ot">(</span>f ⨟ g<span class="ot">)</span> i</span>
<span id="cb11-7"><a href="https://oleg.fi/gists/atom.xml#cb11-7"></a>apply-⨟ <span class="ot">(</span>skip f<span class="ot">)</span> <span class="ot">(</span>skip g<span class="ot">)</span> i       <span class="ot">=</span> cong suc <span class="ot">(</span>apply-⨟ <span class="ot">(</span>skip f<span class="ot">)</span> g i<span class="ot">)</span></span>
<span id="cb11-8"><a href="https://oleg.fi/gists/atom.xml#cb11-8"></a>apply-⨟ <span class="ot">(</span>skip f<span class="ot">)</span> <span class="ot">(</span>edge g<span class="ot">)</span> i       <span class="ot">=</span> apply-⨟ f g i</span>
<span id="cb11-9"><a href="https://oleg.fi/gists/atom.xml#cb11-9"></a>apply-⨟ <span class="ot">(</span>edge f<span class="ot">)</span> <span class="ot">(</span>skip g<span class="ot">)</span> i       <span class="ot">=</span> cong suc <span class="ot">(</span>apply-⨟ <span class="ot">(</span>edge f<span class="ot">)</span> g i<span class="ot">)</span></span>
<span id="cb11-10"><a href="https://oleg.fi/gists/atom.xml#cb11-10"></a>apply-⨟ <span class="ot">(</span>edge f<span class="ot">)</span> <span class="ot">(</span>edge g<span class="ot">)</span> zero    <span class="ot">=</span> refl</span>
<span id="cb11-11"><a href="https://oleg.fi/gists/atom.xml#cb11-11"></a>apply-⨟ <span class="ot">(</span>edge f<span class="ot">)</span> <span class="ot">(</span>edge g<span class="ot">)</span> <span class="ot">(</span>suc i<span class="ot">)</span> <span class="ot">=</span> apply-⨟ f <span class="ot">(</span>edge g<span class="ot">)</span> i</span></code></pre></div>
<p>Mono has a very nice property: <em>it uniquely represents a monotone map</em> In other words, if there are two <code>Mono n m</code>, but for all <code>i : Fin n</code>, they act the same, then <code>f</code> and <code>g</code> are propositionally equal:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb12-1"><a href="https://oleg.fi/gists/atom.xml#cb12-1"></a>apply-inj <span class="ot">:</span> <span class="ot">(</span>f g <span class="ot">:</span> Mono n m<span class="ot">)</span> <span class="ot">→</span> <span class="ot">(∀</span> i <span class="ot">→</span> apply f i ≡ apply g i<span class="ot">)</span> <span class="ot">→</span> f ≡ g</span>
<span id="cb12-2"><a href="https://oleg.fi/gists/atom.xml#cb12-2"></a>apply-inj base     base     p <span class="ot">=</span> refl</span>
<span id="cb12-3"><a href="https://oleg.fi/gists/atom.xml#cb12-3"></a>apply-inj <span class="ot">(</span>skip f<span class="ot">)</span> <span class="ot">(</span>skip g<span class="ot">)</span> p <span class="ot">=</span></span>
<span id="cb12-4"><a href="https://oleg.fi/gists/atom.xml#cb12-4"></a>  cong skip <span class="ot">(</span>apply-inj f g <span class="ot">λ</span> i <span class="ot">→</span> suc-injective <span class="ot">(</span>p i<span class="ot">))</span></span>
<span id="cb12-5"><a href="https://oleg.fi/gists/atom.xml#cb12-5"></a>apply-inj <span class="ot">(</span>skip f<span class="ot">)</span> <span class="ot">(</span>edge g<span class="ot">)</span> p <span class="kw">with</span> p zero</span>
<span id="cb12-6"><a href="https://oleg.fi/gists/atom.xml#cb12-6"></a><span class="ot">...</span> <span class="ot">|</span> <span class="ot">()</span></span>
<span id="cb12-7"><a href="https://oleg.fi/gists/atom.xml#cb12-7"></a>apply-inj <span class="ot">(</span>edge f<span class="ot">)</span> <span class="ot">(</span>skip g<span class="ot">)</span> p <span class="kw">with</span> p zero</span>
<span id="cb12-8"><a href="https://oleg.fi/gists/atom.xml#cb12-8"></a><span class="ot">...</span> <span class="ot">|</span> <span class="ot">()</span></span>
<span id="cb12-9"><a href="https://oleg.fi/gists/atom.xml#cb12-9"></a>apply-inj <span class="ot">(</span>edge f<span class="ot">)</span> <span class="ot">(</span>edge g<span class="ot">)</span> p <span class="ot">=</span> cong edge <span class="ot">(</span>apply-inj f g <span class="ot">λ</span> i <span class="ot">→</span> p  <span class="ot">(</span>suc i<span class="ot">)</span> <span class="ot">)</span></span></code></pre></div>
<p>As a sanity check, <code>apply f</code> is indeed monotone:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb13-1"><a href="https://oleg.fi/gists/atom.xml#cb13-1"></a>isMonotone-apply <span class="ot">:</span> <span class="ot">(</span>f <span class="ot">:</span> Mono n m<span class="ot">)</span> <span class="ot">→</span> isMonotone <span class="ot">(</span>apply f<span class="ot">)</span></span>
<span id="cb13-2"><a href="https://oleg.fi/gists/atom.xml#cb13-2"></a>isMonotone-apply <span class="ot">(</span>skip f<span class="ot">)</span> i       j       i≤j       <span class="ot">=</span> s≤s <span class="ot">(</span>isMonotone-apply f i j i≤j<span class="ot">)</span></span>
<span id="cb13-3"><a href="https://oleg.fi/gists/atom.xml#cb13-3"></a>isMonotone-apply <span class="ot">(</span>edge f<span class="ot">)</span> zero    j       0≤j       <span class="ot">=</span> z≤n</span>
<span id="cb13-4"><a href="https://oleg.fi/gists/atom.xml#cb13-4"></a>isMonotone-apply <span class="ot">(</span>edge f<span class="ot">)</span> <span class="ot">(</span>suc i<span class="ot">)</span> <span class="ot">(</span>suc j<span class="ot">)</span> <span class="ot">(</span>s≤s i≤j<span class="ot">)</span> <span class="ot">=</span> isMonotone-apply f i j i≤j</span></code></pre></div>
<p>Combining the previous, we can map from <code>Mono</code> (data) to <code>Monotone</code> (Agda function).</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb14-1"><a href="https://oleg.fi/gists/atom.xml#cb14-1"></a>Mono→Monotone <span class="ot">:</span> Mono n m <span class="ot">→</span> Monotone n m</span>
<span id="cb14-2"><a href="https://oleg.fi/gists/atom.xml#cb14-2"></a>Mono→Monotone f <span class="ot">=</span> apply f , isMonotone-apply f</span></code></pre></div>
<h2 id="from-agda-function-to-data">From Agda function to data</h2>
<p>Because the <code>Mono</code> definition is so simple, we should try to convert back. The code in this section can be improved, but for now we only need the final result.</p>
<p>First we define &quot;subtraction&quot; and &quot;addition&quot; of finite ordinals. The <code>∸</code> is <em>monus</em> on natural numbers (i.e. safe subtraction, defaulting to zero). In the same vein, <code>lower</code> doesn't require <code>i ≤ j</code> proof.</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb15-1"><a href="https://oleg.fi/gists/atom.xml#cb15-1"></a><span class="co">-- kind of j - i, no i ≤ j requirement, &quot;monus&quot;</span></span>
<span id="cb15-2"><a href="https://oleg.fi/gists/atom.xml#cb15-2"></a>lower <span class="ot">:</span> <span class="ot">(</span>i j <span class="ot">:</span> Fin <span class="ot">(</span>suc m<span class="ot">))</span> <span class="ot">→</span> Fin <span class="ot">(</span>suc <span class="ot">(</span>m ∸ toℕ i<span class="ot">))</span></span>
<span id="cb15-3"><a href="https://oleg.fi/gists/atom.xml#cb15-3"></a>lower             zero    j       <span class="ot">=</span> j</span>
<span id="cb15-4"><a href="https://oleg.fi/gists/atom.xml#cb15-4"></a>lower <span class="ot">{</span>m <span class="ot">=</span> suc m<span class="ot">}</span> <span class="ot">(</span>suc i<span class="ot">)</span> zero    <span class="ot">=</span> zero  <span class="co">-- extra case, here i≤j</span></span>
<span id="cb15-5"><a href="https://oleg.fi/gists/atom.xml#cb15-5"></a>lower <span class="ot">{</span>m <span class="ot">=</span> suc m<span class="ot">}</span> <span class="ot">(</span>suc i<span class="ot">)</span> <span class="ot">(</span>suc j<span class="ot">)</span> <span class="ot">=</span> lower i j</span>
<span id="cb15-6"><a href="https://oleg.fi/gists/atom.xml#cb15-6"></a></span>
<span id="cb15-7"><a href="https://oleg.fi/gists/atom.xml#cb15-7"></a>raise <span class="ot">:</span> <span class="ot">(</span>i <span class="ot">:</span> Fin <span class="ot">(</span>suc m<span class="ot">))</span> <span class="ot">→</span> Fin <span class="ot">(</span>suc <span class="ot">(</span>m ∸ toℕ i<span class="ot">))</span> <span class="ot">→</span> Fin <span class="ot">(</span>suc m<span class="ot">)</span></span>
<span id="cb15-8"><a href="https://oleg.fi/gists/atom.xml#cb15-8"></a>raise             zero    j <span class="ot">=</span> j</span>
<span id="cb15-9"><a href="https://oleg.fi/gists/atom.xml#cb15-9"></a>raise <span class="ot">{</span>m <span class="ot">=</span> suc m<span class="ot">}</span> <span class="ot">(</span>suc i<span class="ot">)</span> j <span class="ot">=</span> suc <span class="ot">(</span>raise i j<span class="ot">)</span></span></code></pre></div>
<p>We can show that raise and lower cancel out, here we need <code>j ≤ i</code> proof. (I noticed that I'm not consistent with <code>i</code> and <code>j</code> variables, but hopefully you get along).</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb16-1"><a href="https://oleg.fi/gists/atom.xml#cb16-1"></a>raise∘lower≡id <span class="ot">:</span> <span class="ot">(</span>i j <span class="ot">:</span> Fin <span class="ot">(</span>suc m<span class="ot">))</span> <span class="ot">(</span>j≤i <span class="ot">:</span> j ≤ i<span class="ot">)</span> <span class="ot">→</span> i ≡ raise j <span class="ot">(</span>lower j i<span class="ot">)</span></span>
<span id="cb16-2"><a href="https://oleg.fi/gists/atom.xml#cb16-2"></a>raise∘lower≡id i zero j≤i <span class="ot">=</span> refl</span>
<span id="cb16-3"><a href="https://oleg.fi/gists/atom.xml#cb16-3"></a>raise∘lower≡id <span class="ot">{</span>m <span class="ot">=</span> suc m<span class="ot">}</span> <span class="ot">(</span>suc i<span class="ot">)</span> <span class="ot">(</span>suc j<span class="ot">)</span> <span class="ot">(</span>s≤s j≤i<span class="ot">)</span> <span class="ot">=</span></span>
<span id="cb16-4"><a href="https://oleg.fi/gists/atom.xml#cb16-4"></a>  cong suc <span class="ot">(</span>raise∘lower≡id i j j≤i<span class="ot">)</span></span></code></pre></div>
<p>Then we need a handful of lemmas.</p>
<p><code>lower</code> for fixed <code>k</code> is monotone:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb17-1"><a href="https://oleg.fi/gists/atom.xml#cb17-1"></a>isMonotone-lower <span class="ot">:</span> <span class="ot">∀</span> <span class="ot">(</span>k <span class="ot">:</span> Fin <span class="ot">(</span>suc m<span class="ot">))</span> <span class="ot">→</span> isMonotone <span class="ot">(</span>lower k<span class="ot">)</span></span>
<span id="cb17-2"><a href="https://oleg.fi/gists/atom.xml#cb17-2"></a>isMonotone-lower             zero    i       j       i≤j       <span class="ot">=</span> i≤j</span>
<span id="cb17-3"><a href="https://oleg.fi/gists/atom.xml#cb17-3"></a>isMonotone-lower <span class="ot">{</span>m <span class="ot">=</span> suc m<span class="ot">}</span> <span class="ot">(</span>suc k<span class="ot">)</span> zero    j       z≤0       <span class="ot">=</span> z≤n <span class="co">-- redundant case</span></span>
<span id="cb17-4"><a href="https://oleg.fi/gists/atom.xml#cb17-4"></a>isMonotone-lower <span class="ot">{</span>m <span class="ot">=</span> suc m<span class="ot">}</span> <span class="ot">(</span>suc k<span class="ot">)</span> <span class="ot">(</span>suc i<span class="ot">)</span> <span class="ot">(</span>suc j<span class="ot">)</span> <span class="ot">(</span>s≤s i≤j<span class="ot">)</span> <span class="ot">=</span> isMonotone-lower k i j i≤j</span></code></pre></div>
<p>We can raise the <code>Mono</code>, so we can commute <code>raise</code> and <code>apply</code></p>
<div class="sourceCode" id="cb18"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb18-1"><a href="https://oleg.fi/gists/atom.xml#cb18-1"></a>raise-mono' <span class="ot">:</span> <span class="ot">∀</span> p <span class="ot">→</span> Mono n <span class="ot">(</span>suc <span class="ot">(</span>m ∸ p<span class="ot">))</span> <span class="ot">→</span> Mono n <span class="ot">(</span>suc m<span class="ot">)</span></span>
<span id="cb18-2"><a href="https://oleg.fi/gists/atom.xml#cb18-2"></a>raise-mono'             zero    f <span class="ot">=</span> f</span>
<span id="cb18-3"><a href="https://oleg.fi/gists/atom.xml#cb18-3"></a>raise-mono' <span class="ot">{</span>m <span class="ot">=</span> zero<span class="ot">}</span>  <span class="ot">(</span>suc p<span class="ot">)</span> f <span class="ot">=</span> f</span>
<span id="cb18-4"><a href="https://oleg.fi/gists/atom.xml#cb18-4"></a>raise-mono' <span class="ot">{</span>m <span class="ot">=</span> suc m<span class="ot">}</span> <span class="ot">(</span>suc p<span class="ot">)</span> f <span class="ot">=</span> skip <span class="ot">(</span>raise-mono' p f<span class="ot">)</span></span>
<span id="cb18-5"><a href="https://oleg.fi/gists/atom.xml#cb18-5"></a></span>
<span id="cb18-6"><a href="https://oleg.fi/gists/atom.xml#cb18-6"></a>raise-mono <span class="ot">:</span> <span class="ot">∀</span> <span class="ot">(</span>k <span class="ot">:</span> Fin <span class="ot">(</span>suc m<span class="ot">))</span> <span class="ot">→</span> Mono n <span class="ot">(</span>suc <span class="ot">(</span>m ∸ toℕ k<span class="ot">))</span> <span class="ot">→</span> Mono n <span class="ot">(</span>suc m<span class="ot">)</span></span>
<span id="cb18-7"><a href="https://oleg.fi/gists/atom.xml#cb18-7"></a>raise-mono k <span class="ot">=</span> raise-mono' <span class="ot">(</span>toℕ k<span class="ot">)</span></span></code></pre></div>
<p>Then the idea is to define <code>Monotone</code> to <code>Mono</code> conversion by looking at <code>f zero</code> input, and trimming <code>f</code> using <code>lower</code>.</p>
<p>For the lack of better name I call this new function <code>next</code>:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb19-1"><a href="https://oleg.fi/gists/atom.xml#cb19-1"></a>next-f <span class="ot">:</span> <span class="ot">(</span>f <span class="ot">:</span> Fin <span class="ot">(</span>suc n<span class="ot">)</span> <span class="ot">→</span> Fin <span class="ot">(</span>suc m<span class="ot">))</span> <span class="ot">→</span> isMonotone f</span>
<span id="cb19-2"><a href="https://oleg.fi/gists/atom.xml#cb19-2"></a>     <span class="ot">→</span> Fin n <span class="ot">→</span> Fin <span class="ot">(</span>suc <span class="ot">(</span>m ∸ toℕ <span class="ot">(</span>f zero<span class="ot">)))</span></span>
<span id="cb19-3"><a href="https://oleg.fi/gists/atom.xml#cb19-3"></a>next-f f f-mono i <span class="ot">=</span> lower <span class="ot">(</span>f zero<span class="ot">)</span> <span class="ot">(</span>f <span class="ot">(</span>suc i<span class="ot">))</span></span></code></pre></div>
<p>And <code>next-f f</code> is monotone if <code>f</code> is:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb20-1"><a href="https://oleg.fi/gists/atom.xml#cb20-1"></a>next-mono <span class="ot">:</span> <span class="ot">(</span>f <span class="ot">:</span> Fin <span class="ot">(</span>suc n<span class="ot">)</span> <span class="ot">→</span> Fin <span class="ot">(</span>suc m<span class="ot">))</span> <span class="ot">(</span>f-mono <span class="ot">:</span> isMonotone f<span class="ot">)</span></span>
<span id="cb20-2"><a href="https://oleg.fi/gists/atom.xml#cb20-2"></a>          <span class="ot">→</span> isMonotone <span class="ot">(</span>next-f f f-mono<span class="ot">)</span></span>
<span id="cb20-3"><a href="https://oleg.fi/gists/atom.xml#cb20-3"></a>next-mono f f-mono i j i≤j <span class="ot">=</span> isMonotone-lower</span>
<span id="cb20-4"><a href="https://oleg.fi/gists/atom.xml#cb20-4"></a>  <span class="ot">(</span>f zero<span class="ot">)</span></span>
<span id="cb20-5"><a href="https://oleg.fi/gists/atom.xml#cb20-5"></a>  <span class="ot">(</span>f <span class="ot">(</span>suc i<span class="ot">))</span></span>
<span id="cb20-6"><a href="https://oleg.fi/gists/atom.xml#cb20-6"></a>  <span class="ot">(</span>f <span class="ot">(</span>suc j<span class="ot">))</span></span>
<span id="cb20-7"><a href="https://oleg.fi/gists/atom.xml#cb20-7"></a>  <span class="ot">(</span>f-mono <span class="ot">(</span>suc i<span class="ot">)</span> <span class="ot">(</span>suc j<span class="ot">)</span> <span class="ot">(</span>s≤s i≤j<span class="ot">))</span></span>
<span id="cb20-8"><a href="https://oleg.fi/gists/atom.xml#cb20-8"></a></span>
<span id="cb20-9"><a href="https://oleg.fi/gists/atom.xml#cb20-9"></a>next <span class="ot">:</span> <span class="ot">(</span>f <span class="ot">:</span> Monotone <span class="ot">(</span>suc n<span class="ot">)</span> <span class="ot">(</span>suc m<span class="ot">))</span></span>
<span id="cb20-10"><a href="https://oleg.fi/gists/atom.xml#cb20-10"></a>     <span class="ot">→</span> Monotone n <span class="ot">(</span>suc <span class="ot">(</span>m ∸ toℕ <span class="ot">(</span>proj₁ f zero<span class="ot">)))</span></span>
<span id="cb20-11"><a href="https://oleg.fi/gists/atom.xml#cb20-11"></a>next <span class="ot">(</span>f , f-mono<span class="ot">)</span> <span class="ot">=</span> next-f f f-mono , next-mono f f-mono</span></code></pre></div>
<p>Now we have (almost) all the ingredients to define <code>Monotone→Mono</code> function:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb21-1"><a href="https://oleg.fi/gists/atom.xml#cb21-1"></a>absurd <span class="ot">:</span> Mono zero n</span>
<span id="cb21-2"><a href="https://oleg.fi/gists/atom.xml#cb21-2"></a>absurd <span class="ot">{</span>zero<span class="ot">}</span> <span class="ot">=</span> base</span>
<span id="cb21-3"><a href="https://oleg.fi/gists/atom.xml#cb21-3"></a>absurd <span class="ot">{</span>suc n<span class="ot">}</span> <span class="ot">=</span> skip absurd</span>
<span id="cb21-4"><a href="https://oleg.fi/gists/atom.xml#cb21-4"></a></span>
<span id="cb21-5"><a href="https://oleg.fi/gists/atom.xml#cb21-5"></a>Monotone→Mono' <span class="ot">:</span> <span class="ot">(</span>f <span class="ot">:</span> Fin n <span class="ot">→</span> Fin m<span class="ot">)</span> <span class="ot">→</span> isMonotone f <span class="ot">→</span> Mono n m</span>
<span id="cb21-6"><a href="https://oleg.fi/gists/atom.xml#cb21-6"></a>Monotone→Mono' <span class="ot">{</span>zero<span class="ot">}</span>         f f-mono <span class="ot">=</span> absurd</span>
<span id="cb21-7"><a href="https://oleg.fi/gists/atom.xml#cb21-7"></a>Monotone→Mono' <span class="ot">{</span>suc n<span class="ot">}</span> <span class="ot">{</span>zero<span class="ot">}</span> f f-mono <span class="kw">with</span> f zero</span>
<span id="cb21-8"><a href="https://oleg.fi/gists/atom.xml#cb21-8"></a><span class="ot">...</span> <span class="ot">|</span> <span class="ot">()</span></span>
<span id="cb21-9"><a href="https://oleg.fi/gists/atom.xml#cb21-9"></a>Monotone→Mono' <span class="ot">{</span>suc n<span class="ot">}</span> <span class="ot">{</span>suc m<span class="ot">}</span> f f-mono <span class="ot">=</span> raise-mono <span class="ot">(</span>f zero<span class="ot">)</span></span>
<span id="cb21-10"><a href="https://oleg.fi/gists/atom.xml#cb21-10"></a>  <span class="ot">(</span>edge <span class="ot">(</span>Monotone→Mono' <span class="ot">(</span>next-f f f-mono<span class="ot">)</span> <span class="ot">(</span>next-mono f f-mono<span class="ot">)))</span></span></code></pre></div>
<p>And <code>Monotone→Mono</code> just packages that:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb22-1"><a href="https://oleg.fi/gists/atom.xml#cb22-1"></a>Monotone→Mono <span class="ot">:</span> Monotone n m <span class="ot">→</span> Mono n m</span>
<span id="cb22-2"><a href="https://oleg.fi/gists/atom.xml#cb22-2"></a>Monotone→Mono <span class="ot">(</span>f , f-mono<span class="ot">)</span> <span class="ot">=</span> Monotone→Mono' f f-mono</span></code></pre></div>
<h3>Monotone ↔ Mono isomorphism</h3>
<p><code>Monotone→Mono</code> and <code>Mono→Monotone</code> are each others inverse.</p>
<p>First two lemmas, showing that <code>raise</code> and <code>apply</code> &quot;commute&quot; in a special case we need:</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb23-1"><a href="https://oleg.fi/gists/atom.xml#cb23-1"></a>raise-edge-apply-zero <span class="ot">:</span> <span class="ot">(</span>j <span class="ot">:</span> Fin <span class="ot">(</span>suc m<span class="ot">))</span></span>
<span id="cb23-2"><a href="https://oleg.fi/gists/atom.xml#cb23-2"></a>                      <span class="ot">→</span> <span class="ot">(</span>f <span class="ot">:</span> Mono n <span class="ot">(</span>suc <span class="ot">(</span>m ∸ toℕ j<span class="ot">)))</span></span>
<span id="cb23-3"><a href="https://oleg.fi/gists/atom.xml#cb23-3"></a>                      <span class="ot">→</span> j ≡ apply <span class="ot">(</span>raise-mono j <span class="ot">(</span>edge f<span class="ot">))</span> zero</span>
<span id="cb23-4"><a href="https://oleg.fi/gists/atom.xml#cb23-4"></a>raise-edge-apply-zero zero                f <span class="ot">=</span> refl</span>
<span id="cb23-5"><a href="https://oleg.fi/gists/atom.xml#cb23-5"></a>raise-edge-apply-zero <span class="ot">{</span>m <span class="ot">=</span> suc m<span class="ot">}</span> <span class="ot">(</span>suc j<span class="ot">)</span> f <span class="ot">=</span></span>
<span id="cb23-6"><a href="https://oleg.fi/gists/atom.xml#cb23-6"></a>  cong suc <span class="ot">(</span>raise-edge-apply-zero j f<span class="ot">)</span></span>
<span id="cb23-7"><a href="https://oleg.fi/gists/atom.xml#cb23-7"></a></span>
<span id="cb23-8"><a href="https://oleg.fi/gists/atom.xml#cb23-8"></a>raise-edge-apply-suc <span class="ot">:</span> <span class="ot">(</span>j <span class="ot">:</span> Fin <span class="ot">(</span>suc m<span class="ot">))</span></span>
<span id="cb23-9"><a href="https://oleg.fi/gists/atom.xml#cb23-9"></a>                     <span class="ot">→</span> <span class="ot">(</span>i <span class="ot">:</span> Fin n<span class="ot">)</span></span>
<span id="cb23-10"><a href="https://oleg.fi/gists/atom.xml#cb23-10"></a>                     <span class="ot">→</span> <span class="ot">(</span>f <span class="ot">:</span> Mono n <span class="ot">(</span>suc <span class="ot">(</span>m ∸ toℕ j<span class="ot">)))</span></span>
<span id="cb23-11"><a href="https://oleg.fi/gists/atom.xml#cb23-11"></a>                     <span class="ot">→</span> raise j <span class="ot">(</span>apply f i<span class="ot">)</span></span>
<span id="cb23-12"><a href="https://oleg.fi/gists/atom.xml#cb23-12"></a>                     ≡ apply <span class="ot">(</span>raise-mono j <span class="ot">(</span>edge f<span class="ot">))</span> <span class="ot">(</span>suc i<span class="ot">)</span></span>
<span id="cb23-13"><a href="https://oleg.fi/gists/atom.xml#cb23-13"></a>raise-edge-apply-suc             zero    i f <span class="ot">=</span> refl</span>
<span id="cb23-14"><a href="https://oleg.fi/gists/atom.xml#cb23-14"></a>raise-edge-apply-suc <span class="ot">{</span>m <span class="ot">=</span> suc m<span class="ot">}</span> <span class="ot">(</span>suc j<span class="ot">)</span> i f <span class="ot">=</span></span>
<span id="cb23-15"><a href="https://oleg.fi/gists/atom.xml#cb23-15"></a>  cong suc <span class="ot">(</span>raise-edge-apply-suc j i f<span class="ot">)</span></span></code></pre></div>
<p>Using which we can show that <code>apply ∘ Monotone→Mono</code> is the identity function: (Agda proofs are wide, layout of my blog looks horrible with those, I'm sorry).</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb24-1"><a href="https://oleg.fi/gists/atom.xml#cb24-1"></a>apply-Monotone→Mono <span class="ot">:</span> <span class="ot">(</span>f <span class="ot">:</span> Monotone n m<span class="ot">)</span></span>
<span id="cb24-2"><a href="https://oleg.fi/gists/atom.xml#cb24-2"></a>                    <span class="ot">→</span> <span class="ot">(</span>i <span class="ot">:</span> Fin n<span class="ot">)</span></span>
<span id="cb24-3"><a href="https://oleg.fi/gists/atom.xml#cb24-3"></a>                    <span class="ot">→</span> proj₁ f i ≡ apply <span class="ot">(</span>Monotone→Mono f<span class="ot">)</span> i</span>
<span id="cb24-4"><a href="https://oleg.fi/gists/atom.xml#cb24-4"></a>apply-Monotone→Mono <span class="ot">{</span>suc n<span class="ot">}</span> <span class="ot">{</span>zero<span class="ot">}</span> f i <span class="kw">with</span> proj₁ f zero</span>
<span id="cb24-5"><a href="https://oleg.fi/gists/atom.xml#cb24-5"></a><span class="ot">...</span> <span class="ot">|</span> <span class="ot">()</span></span>
<span id="cb24-6"><a href="https://oleg.fi/gists/atom.xml#cb24-6"></a>apply-Monotone→Mono <span class="ot">{</span>suc n<span class="ot">}</span> <span class="ot">{</span>suc m<span class="ot">}</span> f zero <span class="ot">=</span> begin</span>
<span id="cb24-7"><a href="https://oleg.fi/gists/atom.xml#cb24-7"></a>  proj₁ f zero                                                   ≡⟨ raise-edge-apply-zero <span class="ot">(</span>proj₁ f zero<span class="ot">)</span> <span class="ot">(</span>Monotone→Mono <span class="ot">(</span>next f<span class="ot">))</span> ⟩</span>
<span id="cb24-8"><a href="https://oleg.fi/gists/atom.xml#cb24-8"></a>  apply <span class="ot">(</span>Monotone→Mono f<span class="ot">)</span> zero                                   ∎</span>
<span id="cb24-9"><a href="https://oleg.fi/gists/atom.xml#cb24-9"></a>apply-Monotone→Mono <span class="ot">{</span>suc n<span class="ot">}</span> <span class="ot">{</span>suc m<span class="ot">}</span> f <span class="ot">(</span>suc i<span class="ot">)</span> <span class="ot">=</span> begin</span>
<span id="cb24-10"><a href="https://oleg.fi/gists/atom.xml#cb24-10"></a>  proj₁ f <span class="ot">(</span>suc i<span class="ot">)</span>                                                ≡⟨ raise∘lower≡id <span class="ot">(</span>proj₁ f <span class="ot">(</span>suc i<span class="ot">))</span> <span class="ot">(</span>proj₁ f zero<span class="ot">)</span> <span class="ot">(</span>proj₂ f zero <span class="ot">(</span>suc i<span class="ot">)</span> z≤n<span class="ot">)</span> ⟩</span>
<span id="cb24-11"><a href="https://oleg.fi/gists/atom.xml#cb24-11"></a>  raise <span class="ot">(</span>proj₁ f zero<span class="ot">)</span> <span class="ot">(</span>lower <span class="ot">(</span>proj₁ f zero<span class="ot">)</span> <span class="ot">(</span>proj₁ f <span class="ot">(</span>suc i<span class="ot">)))</span>  ≡⟨ cong <span class="ot">(</span>raise <span class="ot">(</span>proj₁ f zero<span class="ot">))</span> <span class="ot">(</span>apply-Monotone→Mono <span class="ot">(</span>next f<span class="ot">)</span> i<span class="ot">)</span> ⟩</span>
<span id="cb24-12"><a href="https://oleg.fi/gists/atom.xml#cb24-12"></a>  raise <span class="ot">(</span>proj₁ f zero<span class="ot">)</span> <span class="ot">(</span>apply <span class="ot">(</span>Monotone→Mono <span class="ot">(</span>next f<span class="ot">))</span> i<span class="ot">)</span>        ≡⟨ raise-edge-apply-suc <span class="ot">(</span>proj₁ f zero<span class="ot">)</span> i <span class="ot">_</span> ⟩</span>
<span id="cb24-13"><a href="https://oleg.fi/gists/atom.xml#cb24-13"></a>  apply <span class="ot">(</span>Monotone→Mono f<span class="ot">)</span> <span class="ot">(</span>suc i<span class="ot">)</span>                                ∎</span></code></pre></div>
<p>And that is the same as saying that we can convert <code>Monotone</code> to <code>Mono</code> and back, and we get what we started with (in <code>≐</code> sense):</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb25-1"><a href="https://oleg.fi/gists/atom.xml#cb25-1"></a>Monotone→Mono→Monotone <span class="ot">:</span> <span class="ot">(</span>f <span class="ot">:</span> Monotone n m<span class="ot">)</span></span>
<span id="cb25-2"><a href="https://oleg.fi/gists/atom.xml#cb25-2"></a>                       <span class="ot">→</span> f ≐ Mono→Monotone <span class="ot">(</span>Monotone→Mono f<span class="ot">)</span></span>
<span id="cb25-3"><a href="https://oleg.fi/gists/atom.xml#cb25-3"></a>Monotone→Mono→Monotone <span class="ot">=</span> apply-Monotone→Mono</span></code></pre></div>
<p>The other direction, i.e. starting with <code>Mono</code> is simple to show as well using <code>apply-inj</code> lemma, which is the benefit of <code>Mono</code> having unique representation:</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb26-1"><a href="https://oleg.fi/gists/atom.xml#cb26-1"></a>Monotone→Mono→Mono <span class="ot">:</span> <span class="ot">(</span>f <span class="ot">:</span> Mono n m<span class="ot">)</span></span>
<span id="cb26-2"><a href="https://oleg.fi/gists/atom.xml#cb26-2"></a>                   <span class="ot">→</span> f ≡ Monotone→Mono <span class="ot">(</span>Mono→Monotone f<span class="ot">)</span></span>
<span id="cb26-3"><a href="https://oleg.fi/gists/atom.xml#cb26-3"></a>Monotone→Mono→Mono f <span class="ot">=</span> apply-inj</span>
<span id="cb26-4"><a href="https://oleg.fi/gists/atom.xml#cb26-4"></a>  f</span>
<span id="cb26-5"><a href="https://oleg.fi/gists/atom.xml#cb26-5"></a>  <span class="ot">(</span>Monotone→Mono <span class="ot">(</span>Mono→Monotone f<span class="ot">))</span></span>
<span id="cb26-6"><a href="https://oleg.fi/gists/atom.xml#cb26-6"></a>  <span class="ot">(</span>apply-Monotone→Mono <span class="ot">(</span>Mono→Monotone f<span class="ot">))</span></span></code></pre></div>
<p>In this section we have shown that <code>Mono</code> and <code>Monotone</code> types are isomorphic. Great news!</p>
<h2 id="interlude-thinnings-and-contractions">Interlude: Thinnings and contractions</h2>
<p>Recall thinnings:</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb27-1"><a href="https://oleg.fi/gists/atom.xml#cb27-1"></a><span class="kw">data</span> Thin <span class="ot">:</span> ℕ <span class="ot">→</span> ℕ <span class="ot">→</span> <span class="dt">Set</span> <span class="kw">where</span></span>
<span id="cb27-2"><a href="https://oleg.fi/gists/atom.xml#cb27-2"></a>  baseₜ <span class="ot">:</span> Thin zero zero</span>
<span id="cb27-3"><a href="https://oleg.fi/gists/atom.xml#cb27-3"></a>  skipₜ <span class="ot">:</span> Thin n m <span class="ot">→</span> Thin n <span class="ot">(</span>suc m<span class="ot">)</span></span>
<span id="cb27-4"><a href="https://oleg.fi/gists/atom.xml#cb27-4"></a>  keepₜ <span class="ot">:</span> Thin n m <span class="ot">→</span> Thin <span class="ot">(</span>suc n<span class="ot">)</span> <span class="ot">(</span>suc m<span class="ot">)</span></span>
<span id="cb27-5"><a href="https://oleg.fi/gists/atom.xml#cb27-5"></a></span>
<span id="cb27-6"><a href="https://oleg.fi/gists/atom.xml#cb27-6"></a>applyₜ <span class="ot">:</span> Thin n m <span class="ot">→</span> Fin n <span class="ot">→</span> Fin m</span>
<span id="cb27-7"><a href="https://oleg.fi/gists/atom.xml#cb27-7"></a>applyₜ <span class="ot">(</span>skipₜ f<span class="ot">)</span> i       <span class="ot">=</span> suc <span class="ot">(</span>applyₜ f i<span class="ot">)</span></span>
<span id="cb27-8"><a href="https://oleg.fi/gists/atom.xml#cb27-8"></a>applyₜ <span class="ot">(</span>keepₜ f<span class="ot">)</span> zero    <span class="ot">=</span> zero</span>
<span id="cb27-9"><a href="https://oleg.fi/gists/atom.xml#cb27-9"></a>applyₜ <span class="ot">(</span>keepₜ f<span class="ot">)</span> <span class="ot">(</span>suc i<span class="ot">)</span> <span class="ot">=</span> suc <span class="ot">(</span>applyₜ f i<span class="ot">)</span></span></code></pre></div>
<p>These are strictly monotone functions:</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb28-1"><a href="https://oleg.fi/gists/atom.xml#cb28-1"></a>isStrictlyMonotone <span class="ot">:</span> <span class="ot">(</span>Fin n <span class="ot">→</span> Fin m<span class="ot">)</span> <span class="ot">→</span> <span class="dt">Set</span></span>
<span id="cb28-2"><a href="https://oleg.fi/gists/atom.xml#cb28-2"></a>isStrictlyMonotone f <span class="ot">=</span> <span class="ot">∀</span> i j <span class="ot">→</span> i &lt; j <span class="ot">→</span> f i &lt; f j</span>
<span id="cb28-3"><a href="https://oleg.fi/gists/atom.xml#cb28-3"></a></span>
<span id="cb28-4"><a href="https://oleg.fi/gists/atom.xml#cb28-4"></a>isStrictlyMonotone-applyₜ <span class="ot">:</span> <span class="ot">(</span>f <span class="ot">:</span> Thin n m<span class="ot">)</span> <span class="ot">→</span> isStrictlyMonotone <span class="ot">(</span>applyₜ f<span class="ot">)</span></span>
<span id="cb28-5"><a href="https://oleg.fi/gists/atom.xml#cb28-5"></a>isStrictlyMonotone-applyₜ <span class="ot">(</span>skipₜ f<span class="ot">)</span> i       j       i&lt;j       <span class="ot">=</span> s≤s <span class="ot">(</span>isStrictlyMonotone-applyₜ f i j i&lt;j<span class="ot">)</span></span>
<span id="cb28-6"><a href="https://oleg.fi/gists/atom.xml#cb28-6"></a>isStrictlyMonotone-applyₜ <span class="ot">(</span>keepₜ f<span class="ot">)</span> zero    <span class="ot">(</span>suc j<span class="ot">)</span> <span class="ot">(</span>s≤s i&lt;j<span class="ot">)</span> <span class="ot">=</span> s≤s z≤n</span>
<span id="cb28-7"><a href="https://oleg.fi/gists/atom.xml#cb28-7"></a>isStrictlyMonotone-applyₜ <span class="ot">(</span>keepₜ f<span class="ot">)</span> <span class="ot">(</span>suc i<span class="ot">)</span> <span class="ot">(</span>suc j<span class="ot">)</span> <span class="ot">(</span>s≤s i&lt;j<span class="ot">)</span> <span class="ot">=</span> s≤s <span class="ot">(</span>isStrictlyMonotone-applyₜ f i j i&lt;j<span class="ot">)</span></span></code></pre></div>
<p>Similarly: unique representation</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb29-1"><a href="https://oleg.fi/gists/atom.xml#cb29-1"></a>applyₜ-inj <span class="ot">:</span> <span class="ot">(</span>f g <span class="ot">:</span> Thin n m<span class="ot">)</span> <span class="ot">→</span> <span class="ot">(∀</span> i <span class="ot">→</span> applyₜ f i ≡ applyₜ g i<span class="ot">)</span> <span class="ot">→</span> f ≡ g</span>
<span id="cb29-2"><a href="https://oleg.fi/gists/atom.xml#cb29-2"></a>applyₜ-inj baseₜ     baseₜ     p <span class="ot">=</span> refl</span>
<span id="cb29-3"><a href="https://oleg.fi/gists/atom.xml#cb29-3"></a>applyₜ-inj <span class="ot">(</span>skipₜ f<span class="ot">)</span> <span class="ot">(</span>skipₜ g<span class="ot">)</span> p <span class="ot">=</span></span>
<span id="cb29-4"><a href="https://oleg.fi/gists/atom.xml#cb29-4"></a>  cong skipₜ <span class="ot">(</span>applyₜ-inj f g <span class="ot">λ</span> i <span class="ot">→</span> suc-injective <span class="ot">(</span>p i<span class="ot">))</span></span>
<span id="cb29-5"><a href="https://oleg.fi/gists/atom.xml#cb29-5"></a>applyₜ-inj <span class="ot">(</span>skipₜ f<span class="ot">)</span> <span class="ot">(</span>keepₜ g<span class="ot">)</span> p <span class="kw">with</span> p zero</span>
<span id="cb29-6"><a href="https://oleg.fi/gists/atom.xml#cb29-6"></a><span class="ot">...</span> <span class="ot">|</span> <span class="ot">()</span></span>
<span id="cb29-7"><a href="https://oleg.fi/gists/atom.xml#cb29-7"></a>applyₜ-inj <span class="ot">(</span>keepₜ f<span class="ot">)</span> <span class="ot">(</span>skipₜ g<span class="ot">)</span> p <span class="kw">with</span> p zero</span>
<span id="cb29-8"><a href="https://oleg.fi/gists/atom.xml#cb29-8"></a><span class="ot">...</span> <span class="ot">|</span> <span class="ot">()</span></span>
<span id="cb29-9"><a href="https://oleg.fi/gists/atom.xml#cb29-9"></a>applyₜ-inj <span class="ot">(</span>keepₜ f<span class="ot">)</span> <span class="ot">(</span>keepₜ g<span class="ot">)</span> p <span class="ot">=</span></span>
<span id="cb29-10"><a href="https://oleg.fi/gists/atom.xml#cb29-10"></a>  cong keepₜ <span class="ot">(</span>applyₜ-inj f g <span class="ot">λ</span> i <span class="ot">→</span> suc-injective <span class="ot">(</span>p <span class="ot">(</span>suc i<span class="ot">)))</span></span></code></pre></div>
<p>But <code>applyₜ f</code> maps are also injective, i.e. map different <code>Fin n</code>s to to different <code>Fin m</code>s:</p>
<div class="sourceCode" id="cb30"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb30-1"><a href="https://oleg.fi/gists/atom.xml#cb30-1"></a>applyₜ-inj₂ <span class="ot">:</span> <span class="ot">(</span>f <span class="ot">:</span> Thin n m<span class="ot">)</span> <span class="ot">(</span>i j <span class="ot">:</span> Fin n<span class="ot">)</span> <span class="ot">→</span> applyₜ f i ≡ applyₜ f j <span class="ot">→</span> i ≡ j</span>
<span id="cb30-2"><a href="https://oleg.fi/gists/atom.xml#cb30-2"></a>applyₜ-inj₂ <span class="ot">(</span>skipₜ f<span class="ot">)</span> i       j       p <span class="ot">=</span> applyₜ-inj₂ f i j <span class="ot">(</span>suc-injective p<span class="ot">)</span></span>
<span id="cb30-3"><a href="https://oleg.fi/gists/atom.xml#cb30-3"></a>applyₜ-inj₂ <span class="ot">(</span>keepₜ f<span class="ot">)</span> zero    zero    p <span class="ot">=</span> refl</span>
<span id="cb30-4"><a href="https://oleg.fi/gists/atom.xml#cb30-4"></a>applyₜ-inj₂ <span class="ot">(</span>keepₜ f<span class="ot">)</span> <span class="ot">(</span>suc i<span class="ot">)</span> <span class="ot">(</span>suc j<span class="ot">)</span> p <span class="ot">=</span> cong suc <span class="ot">(</span>applyₜ-inj₂ f i j <span class="ot">(</span>suc-injective p<span class="ot">))</span></span></code></pre></div>
<p>Thinnings can be converted to <code>Mono</code>:</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb31-1"><a href="https://oleg.fi/gists/atom.xml#cb31-1"></a>Thin→Mono <span class="ot">:</span> Thin n m <span class="ot">→</span> Mono n m</span>
<span id="cb31-2"><a href="https://oleg.fi/gists/atom.xml#cb31-2"></a>Thin→Mono baseₜ     <span class="ot">=</span> base</span>
<span id="cb31-3"><a href="https://oleg.fi/gists/atom.xml#cb31-3"></a>Thin→Mono <span class="ot">(</span>skipₜ f<span class="ot">)</span> <span class="ot">=</span> skip <span class="ot">(</span>Thin→Mono f<span class="ot">)</span></span>
<span id="cb31-4"><a href="https://oleg.fi/gists/atom.xml#cb31-4"></a>Thin→Mono <span class="ot">(</span>keepₜ f<span class="ot">)</span> <span class="ot">=</span> keep <span class="ot">(</span>Thin→Mono f<span class="ot">)</span></span></code></pre></div>
<p><code>Thin</code>s are injective monotonic maps. Can we represent the surjective ones? Yes! This look very similar:</p>
<div class="sourceCode" id="cb32"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb32-1"><a href="https://oleg.fi/gists/atom.xml#cb32-1"></a><span class="kw">data</span> Cntr <span class="ot">:</span> ℕ <span class="ot">→</span> ℕ <span class="ot">→</span> <span class="dt">Set</span> <span class="kw">where</span></span>
<span id="cb32-2"><a href="https://oleg.fi/gists/atom.xml#cb32-2"></a>  baseₖ <span class="ot">:</span> Cntr zero zero</span>
<span id="cb32-3"><a href="https://oleg.fi/gists/atom.xml#cb32-3"></a>  edgeₖ <span class="ot">:</span> Cntr n <span class="ot">(</span>suc m<span class="ot">)</span> <span class="ot">→</span> Cntr <span class="ot">(</span>suc n<span class="ot">)</span> <span class="ot">(</span>suc m<span class="ot">)</span></span>
<span id="cb32-4"><a href="https://oleg.fi/gists/atom.xml#cb32-4"></a>  keepₖ <span class="ot">:</span> Cntr n m <span class="ot">→</span> Cntr <span class="ot">(</span>suc n<span class="ot">)</span> <span class="ot">(</span>suc m<span class="ot">)</span></span>
<span id="cb32-5"><a href="https://oleg.fi/gists/atom.xml#cb32-5"></a></span>
<span id="cb32-6"><a href="https://oleg.fi/gists/atom.xml#cb32-6"></a>edgeₖ' <span class="ot">:</span> Cntr <span class="ot">(</span>suc n<span class="ot">)</span> m <span class="ot">→</span> Cntr <span class="ot">(</span>suc <span class="ot">(</span>suc n<span class="ot">))</span> m</span>
<span id="cb32-7"><a href="https://oleg.fi/gists/atom.xml#cb32-7"></a>edgeₖ' <span class="ot">(</span>edgeₖ f<span class="ot">)</span> <span class="ot">=</span> edgeₖ <span class="ot">(</span>edgeₖ f<span class="ot">)</span></span>
<span id="cb32-8"><a href="https://oleg.fi/gists/atom.xml#cb32-8"></a>edgeₖ' <span class="ot">(</span>keepₖ f<span class="ot">)</span> <span class="ot">=</span> edgeₖ <span class="ot">(</span>keepₖ f<span class="ot">)</span></span>
<span id="cb32-9"><a href="https://oleg.fi/gists/atom.xml#cb32-9"></a></span>
<span id="cb32-10"><a href="https://oleg.fi/gists/atom.xml#cb32-10"></a>applyₖ <span class="ot">:</span> Cntr n m <span class="ot">→</span> Fin n <span class="ot">→</span> Fin m</span>
<span id="cb32-11"><a href="https://oleg.fi/gists/atom.xml#cb32-11"></a>applyₖ <span class="ot">(</span>edgeₖ f<span class="ot">)</span> zero    <span class="ot">=</span> zero</span>
<span id="cb32-12"><a href="https://oleg.fi/gists/atom.xml#cb32-12"></a>applyₖ <span class="ot">(</span>edgeₖ f<span class="ot">)</span> <span class="ot">(</span>suc i<span class="ot">)</span> <span class="ot">=</span> applyₖ f i</span>
<span id="cb32-13"><a href="https://oleg.fi/gists/atom.xml#cb32-13"></a>applyₖ <span class="ot">(</span>keepₖ f<span class="ot">)</span> zero    <span class="ot">=</span> zero</span>
<span id="cb32-14"><a href="https://oleg.fi/gists/atom.xml#cb32-14"></a>applyₖ <span class="ot">(</span>keepₖ f<span class="ot">)</span> <span class="ot">(</span>suc i<span class="ot">)</span> <span class="ot">=</span> suc <span class="ot">(</span>applyₖ f i<span class="ot">)</span></span>
<span id="cb32-15"><a href="https://oleg.fi/gists/atom.xml#cb32-15"></a></span>
<span id="cb32-16"><a href="https://oleg.fi/gists/atom.xml#cb32-16"></a>isMonotone-applyₖ <span class="ot">:</span> <span class="ot">(</span>f <span class="ot">:</span> Cntr n m<span class="ot">)</span> <span class="ot">→</span> isMonotone <span class="ot">(</span>applyₖ f<span class="ot">)</span></span>
<span id="cb32-17"><a href="https://oleg.fi/gists/atom.xml#cb32-17"></a>isMonotone-applyₖ <span class="ot">(</span>edgeₖ f<span class="ot">)</span> zero    j        0≤j      <span class="ot">=</span> z≤n</span>
<span id="cb32-18"><a href="https://oleg.fi/gists/atom.xml#cb32-18"></a>isMonotone-applyₖ <span class="ot">(</span>edgeₖ f<span class="ot">)</span> <span class="ot">(</span>suc i<span class="ot">)</span> <span class="ot">(</span>suc j<span class="ot">)</span> <span class="ot">(</span>s≤s i≤j<span class="ot">)</span> <span class="ot">=</span> isMonotone-applyₖ f i j i≤j</span>
<span id="cb32-19"><a href="https://oleg.fi/gists/atom.xml#cb32-19"></a>isMonotone-applyₖ <span class="ot">(</span>keepₖ f<span class="ot">)</span> zero    j       0≤j       <span class="ot">=</span> z≤n</span>
<span id="cb32-20"><a href="https://oleg.fi/gists/atom.xml#cb32-20"></a>isMonotone-applyₖ <span class="ot">(</span>keepₖ f<span class="ot">)</span> <span class="ot">(</span>suc i<span class="ot">)</span> <span class="ot">(</span>suc j<span class="ot">)</span> <span class="ot">(</span>s≤s i≤j<span class="ot">)</span> <span class="ot">=</span> s≤s <span class="ot">(</span>isMonotone-applyₖ f i j i≤j<span class="ot">)</span></span>
<span id="cb32-21"><a href="https://oleg.fi/gists/atom.xml#cb32-21"></a></span>
<span id="cb32-22"><a href="https://oleg.fi/gists/atom.xml#cb32-22"></a>applyₖ-surjective <span class="ot">:</span> <span class="ot">(</span>f <span class="ot">:</span> Cntr n m<span class="ot">)</span> <span class="ot">(</span>j <span class="ot">:</span> Fin m<span class="ot">)</span> <span class="ot">→</span> Σ <span class="ot">(</span>Fin n<span class="ot">)</span> <span class="ot">λ</span> i <span class="ot">→</span> applyₖ f i ≡ j</span>
<span id="cb32-23"><a href="https://oleg.fi/gists/atom.xml#cb32-23"></a>applyₖ-surjective <span class="ot">(</span>edgeₖ f<span class="ot">)</span> j <span class="kw">with</span> applyₖ-surjective f j</span>
<span id="cb32-24"><a href="https://oleg.fi/gists/atom.xml#cb32-24"></a><span class="ot">...</span> <span class="ot">|</span> i , p <span class="ot">=</span> suc i , p</span>
<span id="cb32-25"><a href="https://oleg.fi/gists/atom.xml#cb32-25"></a>applyₖ-surjective <span class="ot">(</span>keepₖ f<span class="ot">)</span> zero    <span class="ot">=</span> zero , refl</span>
<span id="cb32-26"><a href="https://oleg.fi/gists/atom.xml#cb32-26"></a>applyₖ-surjective <span class="ot">(</span>keepₖ f<span class="ot">)</span> <span class="ot">(</span>suc j<span class="ot">)</span> <span class="kw">with</span> applyₖ-surjective f j</span>
<span id="cb32-27"><a href="https://oleg.fi/gists/atom.xml#cb32-27"></a><span class="ot">...</span> <span class="ot">|</span> i , p <span class="ot">=</span> suc i , cong suc p</span>
<span id="cb32-28"><a href="https://oleg.fi/gists/atom.xml#cb32-28"></a></span>
<span id="cb32-29"><a href="https://oleg.fi/gists/atom.xml#cb32-29"></a>Cntr→Mono <span class="ot">:</span> Cntr n m <span class="ot">→</span> Mono n m</span>
<span id="cb32-30"><a href="https://oleg.fi/gists/atom.xml#cb32-30"></a>Cntr→Mono baseₖ <span class="ot">=</span> base</span>
<span id="cb32-31"><a href="https://oleg.fi/gists/atom.xml#cb32-31"></a>Cntr→Mono <span class="ot">(</span>edgeₖ f<span class="ot">)</span> <span class="ot">=</span> edge <span class="ot">(</span>Cntr→Mono f<span class="ot">)</span></span>
<span id="cb32-32"><a href="https://oleg.fi/gists/atom.xml#cb32-32"></a>Cntr→Mono <span class="ot">(</span>keepₖ f<span class="ot">)</span> <span class="ot">=</span> keep <span class="ot">(</span>Cntr→Mono f<span class="ot">)</span></span></code></pre></div>
<p>We can show that <code>Mono</code> can be decomposed into composition of <code>Cntr</code> and <code>Thin</code>.</p>
<p>We can define the type and smart constructors:</p>
<div class="sourceCode" id="cb33"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb33-1"><a href="https://oleg.fi/gists/atom.xml#cb33-1"></a>Cntr×Thin <span class="ot">:</span> ℕ <span class="ot">→</span> ℕ <span class="ot">→</span> <span class="dt">Set</span></span>
<span id="cb33-2"><a href="https://oleg.fi/gists/atom.xml#cb33-2"></a>Cntr×Thin n m <span class="ot">=</span> Σ ℕ <span class="ot">λ</span> p <span class="ot">→</span> Cntr n p × Thin p m</span>
<span id="cb33-3"><a href="https://oleg.fi/gists/atom.xml#cb33-3"></a></span>
<span id="cb33-4"><a href="https://oleg.fi/gists/atom.xml#cb33-4"></a>baseₖₜ <span class="ot">:</span> Cntr×Thin zero zero</span>
<span id="cb33-5"><a href="https://oleg.fi/gists/atom.xml#cb33-5"></a>baseₖₜ <span class="ot">=</span> <span class="dv">0</span> , baseₖ , baseₜ</span>
<span id="cb33-6"><a href="https://oleg.fi/gists/atom.xml#cb33-6"></a></span>
<span id="cb33-7"><a href="https://oleg.fi/gists/atom.xml#cb33-7"></a>skipₖₜ <span class="ot">:</span> Cntr×Thin n m <span class="ot">→</span> Cntr×Thin n <span class="ot">(</span>suc m<span class="ot">)</span></span>
<span id="cb33-8"><a href="https://oleg.fi/gists/atom.xml#cb33-8"></a>skipₖₜ <span class="ot">(</span>p , f , g<span class="ot">)</span> <span class="ot">=</span> p , f , skipₜ g</span>
<span id="cb33-9"><a href="https://oleg.fi/gists/atom.xml#cb33-9"></a></span>
<span id="cb33-10"><a href="https://oleg.fi/gists/atom.xml#cb33-10"></a>edgeₖₜ <span class="ot">:</span> Cntr×Thin n <span class="ot">(</span>suc m<span class="ot">)</span> <span class="ot">→</span> Cntr×Thin <span class="ot">(</span>suc n<span class="ot">)</span> <span class="ot">(</span>suc m<span class="ot">)</span></span>
<span id="cb33-11"><a href="https://oleg.fi/gists/atom.xml#cb33-11"></a>edgeₖₜ <span class="ot">(</span>p , f , skipₜ g<span class="ot">)</span> <span class="ot">=</span> suc p , keepₖ f , keepₜ g</span>
<span id="cb33-12"><a href="https://oleg.fi/gists/atom.xml#cb33-12"></a>edgeₖₜ <span class="ot">(</span>p , f , keepₜ g<span class="ot">)</span> <span class="ot">=</span> p , edgeₖ f , keepₜ g</span></code></pre></div>
<p>Then conversion from <code>Mono</code> is trivial to define:</p>
<div class="sourceCode" id="cb34"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb34-1"><a href="https://oleg.fi/gists/atom.xml#cb34-1"></a>Mono→Cntr×Thin <span class="ot">:</span> <span class="ot">(</span>f <span class="ot">:</span> Mono n m<span class="ot">)</span> <span class="ot">→</span> Cntr×Thin n  m</span>
<span id="cb34-2"><a href="https://oleg.fi/gists/atom.xml#cb34-2"></a>Mono→Cntr×Thin base     <span class="ot">=</span> baseₖₜ</span>
<span id="cb34-3"><a href="https://oleg.fi/gists/atom.xml#cb34-3"></a>Mono→Cntr×Thin <span class="ot">(</span>skip f<span class="ot">)</span> <span class="ot">=</span> skipₖₜ <span class="ot">(</span>Mono→Cntr×Thin f<span class="ot">)</span></span>
<span id="cb34-4"><a href="https://oleg.fi/gists/atom.xml#cb34-4"></a>Mono→Cntr×Thin <span class="ot">(</span>edge f<span class="ot">)</span> <span class="ot">=</span> edgeₖₜ <span class="ot">(</span>Mono→Cntr×Thin f<span class="ot">)</span></span></code></pre></div>
<p>Other direction isn't tricky either:</p>
<div class="sourceCode" id="cb35"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb35-1"><a href="https://oleg.fi/gists/atom.xml#cb35-1"></a>Cntr×Thin→Mono <span class="ot">:</span> Cntr×Thin n m <span class="ot">→</span> Mono n m</span>
<span id="cb35-2"><a href="https://oleg.fi/gists/atom.xml#cb35-2"></a>Cntr×Thin→Mono <span class="ot">(_</span> , f , g<span class="ot">)</span> <span class="ot">=</span> Cntr→Mono f ⨟ Thin→Mono g</span></code></pre></div>
<p>We can show that starting from <code>Mono</code> we can convert to a pair of <code>Cntr</code> and <code>Thin</code>, and if we convert back, we get what we started with:</p>
<div class="sourceCode" id="cb36"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb36-1"><a href="https://oleg.fi/gists/atom.xml#cb36-1"></a>skip-⨟ <span class="ot">:</span> <span class="ot">(</span>f <span class="ot">:</span> Mono n m<span class="ot">)</span> <span class="ot">(</span>g <span class="ot">:</span> Mono m p<span class="ot">)</span> <span class="ot">→</span> f ⨟ skip g ≡ skip <span class="ot">(</span>f ⨟ g<span class="ot">)</span></span>
<span id="cb36-2"><a href="https://oleg.fi/gists/atom.xml#cb36-2"></a>skip-⨟ base     g <span class="ot">=</span> refl</span>
<span id="cb36-3"><a href="https://oleg.fi/gists/atom.xml#cb36-3"></a>skip-⨟ <span class="ot">(</span>skip f<span class="ot">)</span> g <span class="ot">=</span> refl</span>
<span id="cb36-4"><a href="https://oleg.fi/gists/atom.xml#cb36-4"></a>skip-⨟ <span class="ot">(</span>edge f<span class="ot">)</span> g <span class="ot">=</span> refl</span>
<span id="cb36-5"><a href="https://oleg.fi/gists/atom.xml#cb36-5"></a></span>
<span id="cb36-6"><a href="https://oleg.fi/gists/atom.xml#cb36-6"></a>skip-pres <span class="ot">:</span> <span class="ot">(</span>f <span class="ot">:</span> Cntr×Thin n m<span class="ot">)</span> <span class="ot">→</span> Cntr×Thin→Mono <span class="ot">(</span>skipₖₜ f<span class="ot">)</span> ≡ skip <span class="ot">(</span>Cntr×Thin→Mono f<span class="ot">)</span></span>
<span id="cb36-7"><a href="https://oleg.fi/gists/atom.xml#cb36-7"></a>skip-pres <span class="ot">(</span>p , f , g<span class="ot">)</span> <span class="ot">=</span> skip-⨟ <span class="ot">(</span>Cntr→Mono f<span class="ot">)</span> <span class="ot">(</span>Thin→Mono g<span class="ot">)</span></span>
<span id="cb36-8"><a href="https://oleg.fi/gists/atom.xml#cb36-8"></a></span>
<span id="cb36-9"><a href="https://oleg.fi/gists/atom.xml#cb36-9"></a>edge-pres <span class="ot">:</span> <span class="ot">(</span>f <span class="ot">:</span> Cntr×Thin n <span class="ot">(</span>suc m<span class="ot">))</span> <span class="ot">→</span> Cntr×Thin→Mono <span class="ot">(</span>edgeₖₜ f<span class="ot">)</span> ≡ edge <span class="ot">(</span>Cntr×Thin→Mono f<span class="ot">)</span></span>
<span id="cb36-10"><a href="https://oleg.fi/gists/atom.xml#cb36-10"></a>edge-pres <span class="ot">(</span>p     , f , skipₜ g<span class="ot">)</span> <span class="ot">=</span> refl</span>
<span id="cb36-11"><a href="https://oleg.fi/gists/atom.xml#cb36-11"></a>edge-pres <span class="ot">(</span>suc p , f , keepₜ g<span class="ot">)</span> <span class="ot">=</span> refl</span>
<span id="cb36-12"><a href="https://oleg.fi/gists/atom.xml#cb36-12"></a></span>
<span id="cb36-13"><a href="https://oleg.fi/gists/atom.xml#cb36-13"></a>Mono→CT→Mono <span class="ot">:</span> <span class="ot">(</span>f <span class="ot">:</span> Mono n m<span class="ot">)</span> <span class="ot">→</span> Cntr×Thin→Mono <span class="ot">(</span>Mono→Cntr×Thin f<span class="ot">)</span> ≡ f</span>
<span id="cb36-14"><a href="https://oleg.fi/gists/atom.xml#cb36-14"></a>Mono→CT→Mono base <span class="ot">=</span> refl</span>
<span id="cb36-15"><a href="https://oleg.fi/gists/atom.xml#cb36-15"></a>Mono→CT→Mono <span class="ot">(</span>skip f<span class="ot">)</span> <span class="ot">=</span> trans <span class="ot">(</span>skip-pres <span class="ot">(</span>Mono→Cntr×Thin f<span class="ot">))</span> <span class="ot">(</span>cong skip <span class="ot">(</span>Mono→CT→Mono f<span class="ot">))</span></span>
<span id="cb36-16"><a href="https://oleg.fi/gists/atom.xml#cb36-16"></a>Mono→CT→Mono <span class="ot">(</span>edge f<span class="ot">)</span> <span class="ot">=</span> trans <span class="ot">(</span>edge-pres <span class="ot">(</span>Mono→Cntr×Thin f<span class="ot">))</span> <span class="ot">(</span>cong edge <span class="ot">(</span>Mono→CT→Mono f<span class="ot">))</span></span></code></pre></div>
<p>This is an example of factoring a function into a composition of a surjective function followed by an injective one.</p>
<h2 id="isomorphism-with-reeds-formulation">Isomorphism with Reed's formulation</h2>
<p>Reed's &quot;Simple Simplices&quot; blog post ended with a challenge writing</p>
<pre class="plain"><code>decompose : (Fin m → Fin n) → (m Δ⇒ n)</code></pre>
<p>function.</p>
<p>As we can convert <code>Monotone</code> to <code>Mono</code>, maybe we can get close?</p>
<p>Let's try.</p>
<div class="sourceCode" id="cb38"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb38-1"><a href="https://oleg.fi/gists/atom.xml#cb38-1"></a><span class="kw">open</span> <span class="kw">import</span> Categories<span class="ot">.</span>Category<span class="ot">.</span>Instance<span class="ot">.</span>Simplex</span></code></pre></div>
<p>The other direction, from <code>Δ⇒</code> to <code>Mono</code> can be defined in systematic way. We define <code>faceₘ</code> and <code>degenₘ</code> and show that they behave like <code>face</code> and <code>degen</code> maps:</p>
<div class="sourceCode" id="cb39"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb39-1"><a href="https://oleg.fi/gists/atom.xml#cb39-1"></a>faceₘ <span class="ot">:</span> Fin <span class="ot">(</span>suc n<span class="ot">)</span> <span class="ot">→</span> Mono n <span class="ot">(</span>suc n<span class="ot">)</span></span>
<span id="cb39-2"><a href="https://oleg.fi/gists/atom.xml#cb39-2"></a>faceₘ             zero    <span class="ot">=</span> skip id</span>
<span id="cb39-3"><a href="https://oleg.fi/gists/atom.xml#cb39-3"></a>faceₘ <span class="ot">{</span>n <span class="ot">=</span> suc n<span class="ot">}</span> <span class="ot">(</span>suc i<span class="ot">)</span> <span class="ot">=</span> keep <span class="ot">(</span>faceₘ i<span class="ot">)</span></span>
<span id="cb39-4"><a href="https://oleg.fi/gists/atom.xml#cb39-4"></a></span>
<span id="cb39-5"><a href="https://oleg.fi/gists/atom.xml#cb39-5"></a>apply-faceₘ <span class="ot">:</span> <span class="ot">(</span>i <span class="ot">:</span> Fin <span class="ot">(</span>suc n<span class="ot">))</span> <span class="ot">(</span>j <span class="ot">:</span> Fin n<span class="ot">)</span> <span class="ot">→</span> face i j ≡ apply <span class="ot">(</span>faceₘ i<span class="ot">)</span> j</span>
<span id="cb39-6"><a href="https://oleg.fi/gists/atom.xml#cb39-6"></a>apply-faceₘ zero    j       <span class="ot">=</span> cong suc <span class="ot">(</span>sym <span class="ot">(</span>apply-id j<span class="ot">))</span></span>
<span id="cb39-7"><a href="https://oleg.fi/gists/atom.xml#cb39-7"></a>apply-faceₘ <span class="ot">(</span>suc i<span class="ot">)</span> zero    <span class="ot">=</span> refl</span>
<span id="cb39-8"><a href="https://oleg.fi/gists/atom.xml#cb39-8"></a>apply-faceₘ <span class="ot">(</span>suc i<span class="ot">)</span> <span class="ot">(</span>suc j<span class="ot">)</span> <span class="ot">=</span> cong suc <span class="ot">(</span>apply-faceₘ i j<span class="ot">)</span></span>
<span id="cb39-9"><a href="https://oleg.fi/gists/atom.xml#cb39-9"></a></span>
<span id="cb39-10"><a href="https://oleg.fi/gists/atom.xml#cb39-10"></a>degenₘ <span class="ot">:</span> Fin n <span class="ot">→</span> Mono <span class="ot">(</span>suc n<span class="ot">)</span> n</span>
<span id="cb39-11"><a href="https://oleg.fi/gists/atom.xml#cb39-11"></a>degenₘ zero    <span class="ot">=</span> edge id</span>
<span id="cb39-12"><a href="https://oleg.fi/gists/atom.xml#cb39-12"></a>degenₘ <span class="ot">(</span>suc i<span class="ot">)</span> <span class="ot">=</span> keep <span class="ot">(</span>degenₘ i<span class="ot">)</span></span>
<span id="cb39-13"><a href="https://oleg.fi/gists/atom.xml#cb39-13"></a></span>
<span id="cb39-14"><a href="https://oleg.fi/gists/atom.xml#cb39-14"></a>apply-degenₘ <span class="ot">:</span> <span class="ot">(</span>i <span class="ot">:</span> Fin n<span class="ot">)</span> <span class="ot">(</span>j <span class="ot">:</span> Fin <span class="ot">(</span>suc n<span class="ot">))</span> <span class="ot">→</span> degen i j ≡ apply <span class="ot">(</span>degenₘ i<span class="ot">)</span> j</span>
<span id="cb39-15"><a href="https://oleg.fi/gists/atom.xml#cb39-15"></a>apply-degenₘ <span class="ot">{</span>suc n<span class="ot">}</span> zero    zero    <span class="ot">=</span> refl</span>
<span id="cb39-16"><a href="https://oleg.fi/gists/atom.xml#cb39-16"></a>apply-degenₘ <span class="ot">{</span>suc n<span class="ot">}</span> zero    <span class="ot">(</span>suc j<span class="ot">)</span> <span class="ot">=</span> sym <span class="ot">(</span>apply-id j<span class="ot">)</span></span>
<span id="cb39-17"><a href="https://oleg.fi/gists/atom.xml#cb39-17"></a>apply-degenₘ <span class="ot">{</span>suc n<span class="ot">}</span> <span class="ot">(</span>suc i<span class="ot">)</span> zero    <span class="ot">=</span> refl</span>
<span id="cb39-18"><a href="https://oleg.fi/gists/atom.xml#cb39-18"></a>apply-degenₘ <span class="ot">{</span>suc n<span class="ot">}</span> <span class="ot">(</span>suc i<span class="ot">)</span> <span class="ot">(</span>suc j<span class="ot">)</span> <span class="ot">=</span> cong suc <span class="ot">(</span>apply-degenₘ i j<span class="ot">)</span></span></code></pre></div>
<p>That is enough to define <code>Δ→Mono</code> map. As we already showed that identity and composition respect <code>apply</code>, We can show that so does respect <code>Δ→Mono</code>.</p>
<div class="sourceCode" id="cb40"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb40-1"><a href="https://oleg.fi/gists/atom.xml#cb40-1"></a>Δ→Mono <span class="ot">:</span> n Δ⇒ m <span class="ot">→</span> Mono n m</span>
<span id="cb40-2"><a href="https://oleg.fi/gists/atom.xml#cb40-2"></a>Δ→Mono ε       <span class="ot">=</span> id</span>
<span id="cb40-3"><a href="https://oleg.fi/gists/atom.xml#cb40-3"></a>Δ→Mono <span class="ot">(</span>δ i<span class="ot">)</span>   <span class="ot">=</span> faceₘ i</span>
<span id="cb40-4"><a href="https://oleg.fi/gists/atom.xml#cb40-4"></a>Δ→Mono <span class="ot">(</span>σ j<span class="ot">)</span>   <span class="ot">=</span> degenₘ j</span>
<span id="cb40-5"><a href="https://oleg.fi/gists/atom.xml#cb40-5"></a>Δ→Mono <span class="ot">(</span>f ⊚ g<span class="ot">)</span> <span class="ot">=</span> Δ→Mono g ⨟ Δ→Mono f</span>
<span id="cb40-6"><a href="https://oleg.fi/gists/atom.xml#cb40-6"></a></span>
<span id="cb40-7"><a href="https://oleg.fi/gists/atom.xml#cb40-7"></a>apply-Δ→Mono <span class="ot">:</span> <span class="ot">(</span>f <span class="ot">:</span> n Δ⇒ m<span class="ot">)</span> <span class="ot">(</span>i <span class="ot">:</span> Fin n<span class="ot">)</span> <span class="ot">→</span> apply <span class="ot">(</span>Δ→Mono f<span class="ot">)</span> i ≡ ⟦ f ⟧ i</span>
<span id="cb40-8"><a href="https://oleg.fi/gists/atom.xml#cb40-8"></a>apply-Δ→Mono ε       j <span class="ot">=</span> apply-id j</span>
<span id="cb40-9"><a href="https://oleg.fi/gists/atom.xml#cb40-9"></a>apply-Δ→Mono <span class="ot">(</span>δ i<span class="ot">)</span>   j <span class="ot">=</span> sym <span class="ot">(</span>apply-faceₘ i j<span class="ot">)</span></span>
<span id="cb40-10"><a href="https://oleg.fi/gists/atom.xml#cb40-10"></a>apply-Δ→Mono <span class="ot">(</span>σ i<span class="ot">)</span>   j <span class="ot">=</span> sym <span class="ot">(</span>apply-degenₘ i j<span class="ot">)</span></span>
<span id="cb40-11"><a href="https://oleg.fi/gists/atom.xml#cb40-11"></a>apply-Δ→Mono <span class="ot">(</span>f ⊚ g<span class="ot">)</span> j <span class="ot">=</span> begin</span>
<span id="cb40-12"><a href="https://oleg.fi/gists/atom.xml#cb40-12"></a>  apply <span class="ot">(</span>Δ→Mono <span class="ot">(</span>f ⊚ g<span class="ot">))</span> j                ≡⟨ sym <span class="ot">(</span>apply-⨟ <span class="ot">(</span>Δ→Mono g<span class="ot">)</span> <span class="ot">(</span>Δ→Mono f<span class="ot">)</span> j<span class="ot">)</span> ⟩</span>
<span id="cb40-13"><a href="https://oleg.fi/gists/atom.xml#cb40-13"></a>  apply <span class="ot">(</span>Δ→Mono f<span class="ot">)</span> <span class="ot">(</span>apply <span class="ot">(</span>Δ→Mono g<span class="ot">)</span> j<span class="ot">)</span>   ≡⟨ cong <span class="ot">(</span>apply <span class="ot">(</span>Δ→Mono f<span class="ot">))</span> <span class="ot">(</span>apply-Δ→Mono g j<span class="ot">)</span> ⟩</span>
<span id="cb40-14"><a href="https://oleg.fi/gists/atom.xml#cb40-14"></a>  apply <span class="ot">(</span>Δ→Mono f<span class="ot">)</span> <span class="ot">(</span>⟦ g ⟧ j<span class="ot">)</span>              ≡⟨ apply-Δ→Mono f <span class="ot">(</span>⟦ g ⟧ j<span class="ot">)</span> ⟩</span>
<span id="cb40-15"><a href="https://oleg.fi/gists/atom.xml#cb40-15"></a>  ⟦ f ⊚ g ⟧ j                             ∎</span></code></pre></div>
<p>The actual direction we are interested in is similar. We define smart constructors, and then proceed by structural induction.</p>
<p>First smart constructor is (maybe surprisingly) <code>keepₚ</code>:</p>
<p>Note: it doesn't make <code>Δ⇒</code> any bigger, it still has the same structure and as many face and degen maps.</p>
<div class="sourceCode" id="cb41"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb41-1"><a href="https://oleg.fi/gists/atom.xml#cb41-1"></a>keepₚ <span class="ot">:</span> n Δ⇒ m <span class="ot">→</span> suc n Δ⇒ suc m</span>
<span id="cb41-2"><a href="https://oleg.fi/gists/atom.xml#cb41-2"></a>keepₚ ε       <span class="ot">=</span> ε</span>
<span id="cb41-3"><a href="https://oleg.fi/gists/atom.xml#cb41-3"></a>keepₚ <span class="ot">(</span>δ i<span class="ot">)</span>   <span class="ot">=</span> δ <span class="ot">(</span>suc i<span class="ot">)</span></span>
<span id="cb41-4"><a href="https://oleg.fi/gists/atom.xml#cb41-4"></a>keepₚ <span class="ot">(</span>σ j<span class="ot">)</span>   <span class="ot">=</span> σ <span class="ot">(</span>suc j<span class="ot">)</span></span>
<span id="cb41-5"><a href="https://oleg.fi/gists/atom.xml#cb41-5"></a>keepₚ <span class="ot">(</span>f ⊚ g<span class="ot">)</span> <span class="ot">=</span> keepₚ f ⊚ keepₚ g</span>
<span id="cb41-6"><a href="https://oleg.fi/gists/atom.xml#cb41-6"></a></span>
<span id="cb41-7"><a href="https://oleg.fi/gists/atom.xml#cb41-7"></a>keepₚ-apply-zero <span class="ot">:</span> <span class="ot">(</span>f <span class="ot">:</span> n Δ⇒ m<span class="ot">)</span> <span class="ot">→</span> ⟦ keepₚ f ⟧ zero ≡ zero</span>
<span id="cb41-8"><a href="https://oleg.fi/gists/atom.xml#cb41-8"></a>keepₚ-apply-zero ε <span class="ot">=</span> refl</span>
<span id="cb41-9"><a href="https://oleg.fi/gists/atom.xml#cb41-9"></a>keepₚ-apply-zero <span class="ot">(</span>δ i<span class="ot">)</span> <span class="ot">=</span> refl</span>
<span id="cb41-10"><a href="https://oleg.fi/gists/atom.xml#cb41-10"></a>keepₚ-apply-zero <span class="ot">(</span>σ j<span class="ot">)</span> <span class="ot">=</span> refl</span>
<span id="cb41-11"><a href="https://oleg.fi/gists/atom.xml#cb41-11"></a>keepₚ-apply-zero <span class="ot">(</span>f ⊚ g<span class="ot">)</span> <span class="ot">=</span> trans <span class="ot">(</span>cong ⟦ keepₚ f ⟧ <span class="ot">(</span>keepₚ-apply-zero g<span class="ot">))</span> <span class="ot">(</span>keepₚ-apply-zero f<span class="ot">)</span></span>
<span id="cb41-12"><a href="https://oleg.fi/gists/atom.xml#cb41-12"></a></span>
<span id="cb41-13"><a href="https://oleg.fi/gists/atom.xml#cb41-13"></a>keepₚ-apply-suc <span class="ot">:</span> <span class="ot">(</span>f <span class="ot">:</span> n Δ⇒ m<span class="ot">)</span> <span class="ot">(</span>i <span class="ot">:</span> Fin n<span class="ot">)</span> <span class="ot">→</span> ⟦ keepₚ f ⟧ <span class="ot">(</span>suc i<span class="ot">)</span> ≡ suc <span class="ot">(</span>⟦ f ⟧ i<span class="ot">)</span></span>
<span id="cb41-14"><a href="https://oleg.fi/gists/atom.xml#cb41-14"></a>keepₚ-apply-suc ε       j <span class="ot">=</span> refl</span>
<span id="cb41-15"><a href="https://oleg.fi/gists/atom.xml#cb41-15"></a>keepₚ-apply-suc <span class="ot">(</span>δ i<span class="ot">)</span>   j <span class="ot">=</span> refl</span>
<span id="cb41-16"><a href="https://oleg.fi/gists/atom.xml#cb41-16"></a>keepₚ-apply-suc <span class="ot">(</span>σ i<span class="ot">)</span>   j <span class="ot">=</span> refl</span>
<span id="cb41-17"><a href="https://oleg.fi/gists/atom.xml#cb41-17"></a>keepₚ-apply-suc <span class="ot">(</span>f ⊚ g<span class="ot">)</span> j <span class="ot">=</span> trans <span class="ot">(</span>cong ⟦ keepₚ f ⟧ <span class="ot">(</span>keepₚ-apply-suc g j<span class="ot">))</span> <span class="ot">(</span>keepₚ-apply-suc f <span class="ot">(</span>⟦ g ⟧ j<span class="ot">)</span> <span class="ot">)</span></span></code></pre></div>
<p>Base case is simple:</p>
<div class="sourceCode" id="cb42"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb42-1"><a href="https://oleg.fi/gists/atom.xml#cb42-1"></a>baseₚ <span class="ot">:</span> zero Δ⇒ zero</span>
<span id="cb42-2"><a href="https://oleg.fi/gists/atom.xml#cb42-2"></a>baseₚ <span class="ot">=</span> ε</span></code></pre></div>
<p>Skip is using face map:</p>
<div class="sourceCode" id="cb43"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb43-1"><a href="https://oleg.fi/gists/atom.xml#cb43-1"></a>skipₚ <span class="ot">:</span> n Δ⇒ m <span class="ot">→</span> n Δ⇒ suc m</span>
<span id="cb43-2"><a href="https://oleg.fi/gists/atom.xml#cb43-2"></a>skipₚ f <span class="ot">=</span> δ zero ⊚ f</span>
<span id="cb43-3"><a href="https://oleg.fi/gists/atom.xml#cb43-3"></a></span>
<span id="cb43-4"><a href="https://oleg.fi/gists/atom.xml#cb43-4"></a>skipₚ-apply <span class="ot">:</span> <span class="ot">(</span>f <span class="ot">:</span> n Δ⇒ m<span class="ot">)</span> <span class="ot">(</span>i <span class="ot">:</span> Fin n<span class="ot">)</span> <span class="ot">→</span> ⟦ skipₚ f ⟧ i ≡ suc <span class="ot">(</span>⟦ f ⟧ i<span class="ot">)</span></span>
<span id="cb43-5"><a href="https://oleg.fi/gists/atom.xml#cb43-5"></a>skipₚ-apply f i <span class="ot">=</span> refl</span></code></pre></div>
<p>And edge is using degen map:</p>
<div class="sourceCode" id="cb44"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb44-1"><a href="https://oleg.fi/gists/atom.xml#cb44-1"></a>edgeₚ <span class="ot">:</span> n Δ⇒ suc m <span class="ot">→</span> suc n Δ⇒ suc m</span>
<span id="cb44-2"><a href="https://oleg.fi/gists/atom.xml#cb44-2"></a>edgeₚ f <span class="ot">=</span> σ zero ⊚ keepₚ f</span>
<span id="cb44-3"><a href="https://oleg.fi/gists/atom.xml#cb44-3"></a></span>
<span id="cb44-4"><a href="https://oleg.fi/gists/atom.xml#cb44-4"></a>edgeₚ-apply-zero <span class="ot">:</span> <span class="ot">(</span>f <span class="ot">:</span> n Δ⇒ suc m<span class="ot">)</span> <span class="ot">→</span> ⟦ edgeₚ f ⟧ zero ≡ zero</span>
<span id="cb44-5"><a href="https://oleg.fi/gists/atom.xml#cb44-5"></a>edgeₚ-apply-zero f <span class="ot">=</span> cong <span class="ot">(</span>degen zero<span class="ot">)</span> <span class="ot">(</span>keepₚ-apply-zero f<span class="ot">)</span></span>
<span id="cb44-6"><a href="https://oleg.fi/gists/atom.xml#cb44-6"></a></span>
<span id="cb44-7"><a href="https://oleg.fi/gists/atom.xml#cb44-7"></a>edgeₚ-apply-suc <span class="ot">:</span> <span class="ot">(</span>f <span class="ot">:</span> n Δ⇒ suc m<span class="ot">)</span> <span class="ot">(</span>i <span class="ot">:</span> Fin n<span class="ot">)</span> <span class="ot">→</span> ⟦ edgeₚ f ⟧ <span class="ot">(</span>suc i<span class="ot">)</span> ≡ ⟦ f ⟧ i</span>
<span id="cb44-8"><a href="https://oleg.fi/gists/atom.xml#cb44-8"></a>edgeₚ-apply-suc f i <span class="ot">=</span> cong <span class="ot">(</span>degen zero<span class="ot">)</span> <span class="ot">(</span>keepₚ-apply-suc f i<span class="ot">)</span></span></code></pre></div>
<p>Conversion from <code>Mono</code> to <code>Δ⇒</code> is then easy when you have the pieces. The size of <code>Δ⇒</code> is <code>n</code> face maps and <code>m</code> degen maps, even for identity map. Thus it's not minimal in any sense, but it isn't enormous either.</p>
<div class="sourceCode" id="cb45"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb45-1"><a href="https://oleg.fi/gists/atom.xml#cb45-1"></a>Mono→Δ <span class="ot">:</span> Mono n m <span class="ot">→</span> n Δ⇒ m</span>
<span id="cb45-2"><a href="https://oleg.fi/gists/atom.xml#cb45-2"></a>Mono→Δ base     <span class="ot">=</span> baseₚ</span>
<span id="cb45-3"><a href="https://oleg.fi/gists/atom.xml#cb45-3"></a>Mono→Δ <span class="ot">(</span>skip f<span class="ot">)</span> <span class="ot">=</span> skipₚ <span class="ot">(</span>Mono→Δ f<span class="ot">)</span></span>
<span id="cb45-4"><a href="https://oleg.fi/gists/atom.xml#cb45-4"></a>Mono→Δ <span class="ot">(</span>edge f<span class="ot">)</span> <span class="ot">=</span> edgeₚ <span class="ot">(</span>Mono→Δ f<span class="ot">)</span></span></code></pre></div>
<p>Finally we can show that <code>Mono→Δ</code> and <code>Δ→Mono</code> for an isomorphism:</p>
<div class="sourceCode" id="cb46"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb46-1"><a href="https://oleg.fi/gists/atom.xml#cb46-1"></a>apply-Mono→Δ <span class="ot">:</span> <span class="ot">(</span>f <span class="ot">:</span> Mono n m<span class="ot">)</span> <span class="ot">(</span>i <span class="ot">:</span> Fin n<span class="ot">)</span> <span class="ot">→</span> ⟦ Mono→Δ f ⟧ i ≡ apply f i</span>
<span id="cb46-2"><a href="https://oleg.fi/gists/atom.xml#cb46-2"></a>apply-Mono→Δ <span class="ot">(</span>skip f<span class="ot">)</span> i       <span class="ot">=</span> trans <span class="ot">(</span>skipₚ-apply <span class="ot">(</span>Mono→Δ f<span class="ot">)</span> i<span class="ot">)</span> <span class="ot">(</span>cong suc <span class="ot">(</span>apply-Mono→Δ f i<span class="ot">))</span></span>
<span id="cb46-3"><a href="https://oleg.fi/gists/atom.xml#cb46-3"></a>apply-Mono→Δ <span class="ot">(</span>edge f<span class="ot">)</span> zero    <span class="ot">=</span> edgeₚ-apply-zero <span class="ot">(</span>Mono→Δ f<span class="ot">)</span></span>
<span id="cb46-4"><a href="https://oleg.fi/gists/atom.xml#cb46-4"></a>apply-Mono→Δ <span class="ot">(</span>edge f<span class="ot">)</span> <span class="ot">(</span>suc i<span class="ot">)</span> <span class="ot">=</span> trans <span class="ot">(</span>edgeₚ-apply-suc <span class="ot">(</span>Mono→Δ f<span class="ot">)</span> i<span class="ot">)</span> <span class="ot">(</span>apply-Mono→Δ f i<span class="ot">)</span></span>
<span id="cb46-5"><a href="https://oleg.fi/gists/atom.xml#cb46-5"></a></span>
<span id="cb46-6"><a href="https://oleg.fi/gists/atom.xml#cb46-6"></a>Mono→Δ→Mono <span class="ot">:</span> <span class="ot">(</span>f <span class="ot">:</span> Mono n m<span class="ot">)</span> <span class="ot">→</span> Δ→Mono <span class="ot">(</span>Mono→Δ f<span class="ot">)</span> ≡ f</span>
<span id="cb46-7"><a href="https://oleg.fi/gists/atom.xml#cb46-7"></a>Mono→Δ→Mono f <span class="ot">=</span> apply-inj <span class="ot">(</span>Δ→Mono <span class="ot">(</span>Mono→Δ f<span class="ot">))</span> f <span class="ot">λ</span> i <span class="ot">→</span> trans <span class="ot">(</span>apply-Δ→Mono <span class="ot">(</span>Mono→Δ f<span class="ot">)</span> i<span class="ot">)</span> <span class="ot">(</span>apply-Mono→Δ f i<span class="ot">)</span></span>
<span id="cb46-8"><a href="https://oleg.fi/gists/atom.xml#cb46-8"></a></span>
<span id="cb46-9"><a href="https://oleg.fi/gists/atom.xml#cb46-9"></a>Δ→Mono→Δ' <span class="ot">:</span> <span class="ot">(</span>f <span class="ot">:</span> n Δ⇒ m<span class="ot">)</span> <span class="ot">(</span>i <span class="ot">:</span> Fin n<span class="ot">)</span> <span class="ot">→</span> ⟦ Mono→Δ <span class="ot">(</span>Δ→Mono f<span class="ot">)</span> ⟧ i ≡ ⟦ f ⟧ i</span>
<span id="cb46-10"><a href="https://oleg.fi/gists/atom.xml#cb46-10"></a>Δ→Mono→Δ' f i <span class="ot">=</span> trans <span class="ot">(</span>apply-Mono→Δ <span class="ot">(</span>Δ→Mono f<span class="ot">)</span> i<span class="ot">)</span> <span class="ot">(</span>apply-Δ→Mono f i<span class="ot">)</span></span>
<span id="cb46-11"><a href="https://oleg.fi/gists/atom.xml#cb46-11"></a></span>
<span id="cb46-12"><a href="https://oleg.fi/gists/atom.xml#cb46-12"></a>Δ→Mono→Δ <span class="ot">:</span> <span class="ot">(</span>f <span class="ot">:</span> n Δ⇒ m<span class="ot">)</span> <span class="ot">→</span> Mono→Δ <span class="ot">(</span>Δ→Mono f<span class="ot">)</span> ≗ f</span>
<span id="cb46-13"><a href="https://oleg.fi/gists/atom.xml#cb46-13"></a>Δ→Mono→Δ f <span class="ot">=</span> Δ-eq <span class="ot">λ</span> <span class="ot">{</span>i<span class="ot">}</span> <span class="ot">→</span> Δ→Mono→Δ' f i</span></code></pre></div>
<p>Using this result, and iso between <code>Mono</code> and <code>Monotone</code> we can define conversion from <code>Monotone</code> to <code>Δ⇒</code>:</p>
<div class="sourceCode" id="cb47"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb47-1"><a href="https://oleg.fi/gists/atom.xml#cb47-1"></a>Monotone→Δ <span class="ot">:</span> Monotone n m <span class="ot">→</span> n Δ⇒ m</span>
<span id="cb47-2"><a href="https://oleg.fi/gists/atom.xml#cb47-2"></a>Monotone→Δ f <span class="ot">=</span> Mono→Δ <span class="ot">(</span>Monotone→Mono f<span class="ot">)</span></span>
<span id="cb47-3"><a href="https://oleg.fi/gists/atom.xml#cb47-3"></a></span>
<span id="cb47-4"><a href="https://oleg.fi/gists/atom.xml#cb47-4"></a>Monotone→Δ-correct <span class="ot">:</span> <span class="ot">(</span>f <span class="ot">:</span> Monotone n m<span class="ot">)</span> <span class="ot">(</span>i <span class="ot">:</span> Fin n<span class="ot">)</span></span>
<span id="cb47-5"><a href="https://oleg.fi/gists/atom.xml#cb47-5"></a>                   <span class="ot">→</span> proj₁ f i ≡ ⟦ Monotone→Δ f ⟧ i</span>
<span id="cb47-6"><a href="https://oleg.fi/gists/atom.xml#cb47-6"></a>Monotone→Δ-correct f i <span class="ot">=</span> begin</span>
<span id="cb47-7"><a href="https://oleg.fi/gists/atom.xml#cb47-7"></a>  proj₁ f i                  ≡⟨ apply-Monotone→Mono f i ⟩</span>
<span id="cb47-8"><a href="https://oleg.fi/gists/atom.xml#cb47-8"></a>  apply <span class="ot">(</span>Monotone→Mono f<span class="ot">)</span> i  ≡⟨ sym <span class="ot">(</span>apply-Mono→Δ <span class="ot">(</span>Monotone→Mono f<span class="ot">)</span> i<span class="ot">)</span> ⟩</span>
<span id="cb47-9"><a href="https://oleg.fi/gists/atom.xml#cb47-9"></a>  ⟦ Monotone→Δ f ⟧ i         ∎</span></code></pre></div>
<p>The <code>Monotone→Δ</code> is almost the <code>decompose</code> Reed was asking about. We need to know that argument is also monotonic to do the conversion. I think it's possible to define</p>
<pre class="plain"><code>postulate
  monotonise : (Fin m → Fin n) → Monotone m n</code></pre>
<p>such that it is involutive on monotonic maps:</p>
<pre class="plain"><code>postulate
  monotonise-inv : (f : Monotone n m) → f ≐ monotonise (proj₁ f)</code></pre>
<p>But if we have <code>monotonise</code>, then we can define</p>
<pre class="plain"><code>decompose : (Fin n → Fin m) → n Δ⇒ m
decompose f = Monotone→Δ (monotonise f)</code></pre>
<h2 id="decompose">Decompose</h2>
<p>First the maximum function, and few lemmas:</p>
<div class="sourceCode" id="cb51"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb51-1"><a href="https://oleg.fi/gists/atom.xml#cb51-1"></a><span class="kw">infix</span> <span class="dv">5</span> <span class="ot">_</span>∨<span class="ot">_</span></span>
<span id="cb51-2"><a href="https://oleg.fi/gists/atom.xml#cb51-2"></a></span>
<span id="cb51-3"><a href="https://oleg.fi/gists/atom.xml#cb51-3"></a><span class="ot">_</span>∨<span class="ot">_</span> <span class="ot">:</span> Fin n <span class="ot">→</span> Fin n <span class="ot">→</span> Fin n</span>
<span id="cb51-4"><a href="https://oleg.fi/gists/atom.xml#cb51-4"></a>zero  ∨ j      <span class="ot">=</span> j</span>
<span id="cb51-5"><a href="https://oleg.fi/gists/atom.xml#cb51-5"></a>suc i ∨ zero   <span class="ot">=</span> suc i</span>
<span id="cb51-6"><a href="https://oleg.fi/gists/atom.xml#cb51-6"></a>suc i ∨ suc j  <span class="ot">=</span> suc <span class="ot">(</span>i ∨ j<span class="ot">)</span></span>
<span id="cb51-7"><a href="https://oleg.fi/gists/atom.xml#cb51-7"></a></span>
<span id="cb51-8"><a href="https://oleg.fi/gists/atom.xml#cb51-8"></a>i≤j∨i <span class="ot">:</span> <span class="ot">(</span>i j <span class="ot">:</span> Fin n<span class="ot">)</span> <span class="ot">→</span> i ≤ j ∨ i</span>
<span id="cb51-9"><a href="https://oleg.fi/gists/atom.xml#cb51-9"></a>i≤j∨i zero    j       <span class="ot">=</span> z≤n</span>
<span id="cb51-10"><a href="https://oleg.fi/gists/atom.xml#cb51-10"></a>i≤j∨i <span class="ot">(</span>suc i<span class="ot">)</span> zero    <span class="ot">=</span> ≤-refl</span>
<span id="cb51-11"><a href="https://oleg.fi/gists/atom.xml#cb51-11"></a>i≤j∨i <span class="ot">(</span>suc i<span class="ot">)</span> <span class="ot">(</span>suc j<span class="ot">)</span> <span class="ot">=</span> s≤s <span class="ot">(</span>i≤j∨i i j<span class="ot">)</span></span>
<span id="cb51-12"><a href="https://oleg.fi/gists/atom.xml#cb51-12"></a></span>
<span id="cb51-13"><a href="https://oleg.fi/gists/atom.xml#cb51-13"></a>i≤i∨j <span class="ot">:</span> <span class="ot">(</span>i j <span class="ot">:</span> Fin n<span class="ot">)</span> <span class="ot">→</span> i ≤ i ∨ j</span>
<span id="cb51-14"><a href="https://oleg.fi/gists/atom.xml#cb51-14"></a>i≤i∨j zero    j       <span class="ot">=</span> z≤n</span>
<span id="cb51-15"><a href="https://oleg.fi/gists/atom.xml#cb51-15"></a>i≤i∨j <span class="ot">(</span>suc i<span class="ot">)</span> zero    <span class="ot">=</span> ≤-refl</span>
<span id="cb51-16"><a href="https://oleg.fi/gists/atom.xml#cb51-16"></a>i≤i∨j <span class="ot">(</span>suc i<span class="ot">)</span> <span class="ot">(</span>suc j<span class="ot">)</span> <span class="ot">=</span> s≤s <span class="ot">(</span>i≤i∨j i j<span class="ot">)</span></span>
<span id="cb51-17"><a href="https://oleg.fi/gists/atom.xml#cb51-17"></a></span>
<span id="cb51-18"><a href="https://oleg.fi/gists/atom.xml#cb51-18"></a>i≤j→i∨k≤i∨k <span class="ot">:</span> <span class="ot">(</span>i j k <span class="ot">:</span> Fin n<span class="ot">)</span> <span class="ot">→</span> i ≤ j <span class="ot">→</span> i ∨ k ≤ j ∨ k</span>
<span id="cb51-19"><a href="https://oleg.fi/gists/atom.xml#cb51-19"></a>i≤j→i∨k≤i∨k zero    j       k       0≤j       <span class="ot">=</span> i≤j∨i k j</span>
<span id="cb51-20"><a href="https://oleg.fi/gists/atom.xml#cb51-20"></a>i≤j→i∨k≤i∨k <span class="ot">(</span>suc i<span class="ot">)</span> <span class="ot">(</span>suc j<span class="ot">)</span> zero    i≤j       <span class="ot">=</span> i≤j</span>
<span id="cb51-21"><a href="https://oleg.fi/gists/atom.xml#cb51-21"></a>i≤j→i∨k≤i∨k <span class="ot">(</span>suc i<span class="ot">)</span> <span class="ot">(</span>suc j<span class="ot">)</span> <span class="ot">(</span>suc k<span class="ot">)</span> <span class="ot">(</span>s≤s i≤j<span class="ot">)</span> <span class="ot">=</span> s≤s <span class="ot">(</span>i≤j→i∨k≤i∨k i j k i≤j<span class="ot">)</span></span>
<span id="cb51-22"><a href="https://oleg.fi/gists/atom.xml#cb51-22"></a></span>
<span id="cb51-23"><a href="https://oleg.fi/gists/atom.xml#cb51-23"></a>i≤j→j≡j∨i <span class="ot">:</span> <span class="ot">(</span>i j <span class="ot">:</span> Fin n<span class="ot">)</span> <span class="ot">→</span> i ≤ j <span class="ot">→</span> j ≡ j ∨ i</span>
<span id="cb51-24"><a href="https://oleg.fi/gists/atom.xml#cb51-24"></a>i≤j→j≡j∨i zero    zero    0≤0       <span class="ot">=</span> refl</span>
<span id="cb51-25"><a href="https://oleg.fi/gists/atom.xml#cb51-25"></a>i≤j→j≡j∨i zero    <span class="ot">(</span>suc j<span class="ot">)</span> i&lt;j       <span class="ot">=</span> refl</span>
<span id="cb51-26"><a href="https://oleg.fi/gists/atom.xml#cb51-26"></a>i≤j→j≡j∨i <span class="ot">(</span>suc i<span class="ot">)</span> <span class="ot">(</span>suc j<span class="ot">)</span> <span class="ot">(</span>s≤s i≤j<span class="ot">)</span> <span class="ot">=</span> cong suc <span class="ot">(</span>i≤j→j≡j∨i i j i≤j<span class="ot">)</span></span></code></pre></div>
<p>Then we can write an algorithm to make arbitrary <code>f</code> monotone:</p>
<p>The idea is to raise the floor for larger inputs:</p>
<div class="sourceCode" id="cb52"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb52-1"><a href="https://oleg.fi/gists/atom.xml#cb52-1"></a>monotonise-f' <span class="ot">:</span> <span class="ot">(</span>Fin <span class="ot">(</span>suc n<span class="ot">)</span> <span class="ot">→</span> Fin m<span class="ot">)</span> <span class="ot">→</span> <span class="ot">(</span>Fin n <span class="ot">→</span> Fin m<span class="ot">)</span></span>
<span id="cb52-2"><a href="https://oleg.fi/gists/atom.xml#cb52-2"></a>monotonise-f' f k <span class="ot">=</span> f <span class="ot">(</span>suc k<span class="ot">)</span> ∨ f zero</span>
<span id="cb52-3"><a href="https://oleg.fi/gists/atom.xml#cb52-3"></a></span>
<span id="cb52-4"><a href="https://oleg.fi/gists/atom.xml#cb52-4"></a>monotonise-f <span class="ot">:</span> <span class="ot">(</span>Fin n <span class="ot">→</span> Fin m<span class="ot">)</span> <span class="ot">→</span> <span class="ot">(</span>Fin n <span class="ot">→</span> Fin m<span class="ot">)</span></span>
<span id="cb52-5"><a href="https://oleg.fi/gists/atom.xml#cb52-5"></a>monotonise-f f zero    <span class="ot">=</span> f zero</span>
<span id="cb52-6"><a href="https://oleg.fi/gists/atom.xml#cb52-6"></a>monotonise-f f <span class="ot">(</span>suc i<span class="ot">)</span> <span class="ot">=</span> monotonise-f <span class="ot">(</span>monotonise-f' f<span class="ot">)</span> i</span></code></pre></div>
<p>The monotonised <code>f</code> is greater then just <code>f</code>:</p>
<div class="sourceCode" id="cb53"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb53-1"><a href="https://oleg.fi/gists/atom.xml#cb53-1"></a>monotonise-f-≤ <span class="ot">:</span> <span class="ot">(</span>f <span class="ot">:</span> Fin n <span class="ot">→</span> Fin m<span class="ot">)</span> <span class="ot">(</span>i j <span class="ot">:</span> Fin n<span class="ot">)</span></span>
<span id="cb53-2"><a href="https://oleg.fi/gists/atom.xml#cb53-2"></a>               <span class="ot">→</span> i ≤ j</span>
<span id="cb53-3"><a href="https://oleg.fi/gists/atom.xml#cb53-3"></a>               <span class="ot">→</span> f i ≤ monotonise-f f j</span>
<span id="cb53-4"><a href="https://oleg.fi/gists/atom.xml#cb53-4"></a>monotonise-f-≤ f zero zero i≤j <span class="ot">=</span> ≤-refl</span>
<span id="cb53-5"><a href="https://oleg.fi/gists/atom.xml#cb53-5"></a>monotonise-f-≤ <span class="ot">{</span>n <span class="ot">=</span> suc <span class="ot">(</span>suc n<span class="ot">)}</span> f zero <span class="ot">(</span>suc j<span class="ot">)</span> i≤1+j <span class="ot">=</span> ≤-trans</span>
<span id="cb53-6"><a href="https://oleg.fi/gists/atom.xml#cb53-6"></a>  <span class="ot">(</span>i≤j∨i <span class="ot">(</span>f zero<span class="ot">)</span> <span class="ot">(</span>f <span class="ot">(</span>suc zero<span class="ot">)))</span></span>
<span id="cb53-7"><a href="https://oleg.fi/gists/atom.xml#cb53-7"></a>  <span class="ot">(</span>monotonise-f-≤ <span class="ot">(</span>monotonise-f' f<span class="ot">)</span> zero j z≤n<span class="ot">)</span></span>
<span id="cb53-8"><a href="https://oleg.fi/gists/atom.xml#cb53-8"></a>monotonise-f-≤ f <span class="ot">(</span>suc i<span class="ot">)</span> <span class="ot">(</span>suc j<span class="ot">)</span> <span class="ot">(</span>s≤s i≤j<span class="ot">)</span> <span class="ot">=</span> ≤-trans</span>
<span id="cb53-9"><a href="https://oleg.fi/gists/atom.xml#cb53-9"></a>  <span class="ot">(</span>i≤i∨j <span class="ot">(</span>f <span class="ot">(</span>suc i<span class="ot">))</span> <span class="ot">(</span>f zero<span class="ot">))</span></span>
<span id="cb53-10"><a href="https://oleg.fi/gists/atom.xml#cb53-10"></a>  <span class="ot">(</span>monotonise-f-≤ <span class="ot">(</span>monotonise-f' f<span class="ot">)</span> i j i≤j<span class="ot">)</span></span></code></pre></div>
<p>And the result is indeed monotone:</p>
<div class="sourceCode" id="cb54"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb54-1"><a href="https://oleg.fi/gists/atom.xml#cb54-1"></a>monotonise-mono <span class="ot">:</span> <span class="ot">(</span>f <span class="ot">:</span> Fin n <span class="ot">→</span> Fin m<span class="ot">)</span> <span class="ot">→</span> isMonotone <span class="ot">(</span>monotonise-f f<span class="ot">)</span></span>
<span id="cb54-2"><a href="https://oleg.fi/gists/atom.xml#cb54-2"></a>monotonise-mono f zero    zero    0≤0       <span class="ot">=</span> ≤-refl</span>
<span id="cb54-3"><a href="https://oleg.fi/gists/atom.xml#cb54-3"></a>monotonise-mono f zero    <span class="ot">(</span>suc j<span class="ot">)</span> 0≤j       <span class="ot">=</span> monotonise-f-≤ f zero <span class="ot">(</span>suc j<span class="ot">)</span> z≤n</span>
<span id="cb54-4"><a href="https://oleg.fi/gists/atom.xml#cb54-4"></a>monotonise-mono f <span class="ot">(</span>suc i<span class="ot">)</span> <span class="ot">(</span>suc j<span class="ot">)</span> <span class="ot">(</span>s≤s i≤j<span class="ot">)</span> <span class="ot">=</span> monotonise-mono <span class="ot">(</span>monotonise-f' f<span class="ot">)</span> i j i≤j</span></code></pre></div>
<p>So we can convert an arbitrary function to <code>Monotone n m</code>:</p>
<div class="sourceCode" id="cb55"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb55-1"><a href="https://oleg.fi/gists/atom.xml#cb55-1"></a>monotonise <span class="ot">:</span> <span class="ot">(</span>Fin n <span class="ot">→</span> Fin m<span class="ot">)</span> <span class="ot">→</span> Monotone n m</span>
<span id="cb55-2"><a href="https://oleg.fi/gists/atom.xml#cb55-2"></a>monotonise f <span class="ot">=</span> monotonise-f f , monotonise-mono f</span></code></pre></div>
<p>Finally we can prove that <code>monotonise</code> is &quot;involutive&quot; when applied</p>
<div class="sourceCode" id="cb56"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb56-1"><a href="https://oleg.fi/gists/atom.xml#cb56-1"></a>monotonise-f'-mono <span class="ot">:</span> <span class="ot">(</span>f <span class="ot">:</span> Fin <span class="ot">(</span>suc n<span class="ot">)</span> <span class="ot">→</span> Fin m<span class="ot">)</span></span>
<span id="cb56-2"><a href="https://oleg.fi/gists/atom.xml#cb56-2"></a>                   <span class="ot">→</span> isMonotone f</span>
<span id="cb56-3"><a href="https://oleg.fi/gists/atom.xml#cb56-3"></a>                   <span class="ot">→</span> isMonotone <span class="ot">(</span>monotonise-f' f<span class="ot">)</span></span>
<span id="cb56-4"><a href="https://oleg.fi/gists/atom.xml#cb56-4"></a>monotonise-f'-mono f f-mono i j i≤j <span class="ot">=</span> i≤j→i∨k≤i∨k</span>
<span id="cb56-5"><a href="https://oleg.fi/gists/atom.xml#cb56-5"></a>  <span class="ot">(</span>f <span class="ot">(</span>suc i<span class="ot">))</span></span>
<span id="cb56-6"><a href="https://oleg.fi/gists/atom.xml#cb56-6"></a>  <span class="ot">(</span>f <span class="ot">(</span>suc j<span class="ot">))</span></span>
<span id="cb56-7"><a href="https://oleg.fi/gists/atom.xml#cb56-7"></a>  <span class="ot">(</span>f zero<span class="ot">)</span></span>
<span id="cb56-8"><a href="https://oleg.fi/gists/atom.xml#cb56-8"></a>  <span class="ot">(</span>f-mono <span class="ot">(</span>suc i<span class="ot">)</span> <span class="ot">(</span>suc j<span class="ot">)</span> <span class="ot">(</span>s≤s i≤j<span class="ot">))</span></span>
<span id="cb56-9"><a href="https://oleg.fi/gists/atom.xml#cb56-9"></a></span>
<span id="cb56-10"><a href="https://oleg.fi/gists/atom.xml#cb56-10"></a>monotonise-inv' <span class="ot">:</span> <span class="ot">(</span>f <span class="ot">:</span> Fin n <span class="ot">→</span> Fin m<span class="ot">)</span> <span class="ot">→</span> isMonotone f <span class="ot">→</span> <span class="ot">∀</span> i <span class="ot">→</span> f i ≡ monotonise-f f i</span>
<span id="cb56-11"><a href="https://oleg.fi/gists/atom.xml#cb56-11"></a>monotonise-inv' f f-mono zero    <span class="ot">=</span> refl</span>
<span id="cb56-12"><a href="https://oleg.fi/gists/atom.xml#cb56-12"></a>monotonise-inv' f f-mono <span class="ot">(</span>suc i<span class="ot">)</span> <span class="ot">=</span> begin</span>
<span id="cb56-13"><a href="https://oleg.fi/gists/atom.xml#cb56-13"></a>  f <span class="ot">(</span>suc i<span class="ot">)</span>                           ≡⟨ i≤j→j≡j∨i <span class="ot">(</span>f zero<span class="ot">)</span> <span class="ot">(</span>f <span class="ot">(</span>suc i<span class="ot">))</span> <span class="ot">(</span>f-mono zero <span class="ot">(</span>suc i<span class="ot">)</span> z≤n<span class="ot">)</span> ⟩</span>
<span id="cb56-14"><a href="https://oleg.fi/gists/atom.xml#cb56-14"></a>  monotonise-f' f i                   ≡⟨ monotonise-inv' <span class="ot">(</span>monotonise-f' f<span class="ot">)</span> <span class="ot">(</span>monotonise-f'-mono f f-mono<span class="ot">)</span> i ⟩</span>
<span id="cb56-15"><a href="https://oleg.fi/gists/atom.xml#cb56-15"></a>  monotonise-f <span class="ot">(</span>monotonise-f' f<span class="ot">)</span> i    ∎</span>
<span id="cb56-16"><a href="https://oleg.fi/gists/atom.xml#cb56-16"></a></span>
<span id="cb56-17"><a href="https://oleg.fi/gists/atom.xml#cb56-17"></a>monotonise-inv <span class="ot">:</span> <span class="ot">(</span>f <span class="ot">:</span> Monotone n m<span class="ot">)</span> <span class="ot">→</span> f ≐ monotonise <span class="ot">(</span>proj₁ f<span class="ot">)</span></span>
<span id="cb56-18"><a href="https://oleg.fi/gists/atom.xml#cb56-18"></a>monotonise-inv <span class="ot">(</span>f , f-mono<span class="ot">)</span> <span class="ot">=</span> monotonise-inv' f f-mono</span></code></pre></div>
<p>And finally we can define decompose!</p>
<div class="sourceCode" id="cb57"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb57-1"><a href="https://oleg.fi/gists/atom.xml#cb57-1"></a>decompose <span class="ot">:</span> <span class="ot">(</span>Fin n <span class="ot">→</span> Fin m<span class="ot">)</span> <span class="ot">→</span> n Δ⇒ m</span>
<span id="cb57-2"><a href="https://oleg.fi/gists/atom.xml#cb57-2"></a>decompose f <span class="ot">=</span> Monotone→Δ <span class="ot">(</span>monotonise f<span class="ot">)</span></span></code></pre></div></div>
    </summary>
    <updated>2022-10-08T00:00:00Z</updated>
    <published>2022-10-08T00:00:00Z</published>
    <source>
      <id>https://oleg.fi/gists/atom.xml</id>
      <author>
        <name>Oleg Grenrus</name>
        <email>oleg.grenrus@iki.fi</email>
      </author>
      <link href="https://oleg.fi/gists/atom.xml" rel="self" type="application/atom+xml">
      <link href="https://oleg.fi/gists" rel="alternate" type="text/html">
      <title>Oleg's gists</title>
      <updated>2022-10-08T00:00:00Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://www.parsonsmatt.org/2022/10/07/femoroacetabular_impingement.html</id>
    <link href="https://www.parsonsmatt.org/2022/10/07/femoroacetabular_impingement.html" rel="alternate" type="text/html">
    <title>Femoroacetabular Impingement</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Apparently, I’ve spent my entire life with a condition called “femoracetabular impingement.”
The bones in my hips are deformed - the femoral neck is too thick and mis-shapen, and I have a “pincer” on my acetabum which restricts range of motion even further.</p>

<p>As a result, I wasn’t able to internally rotate my hips almost at all - I had a single degree range of motion (normal for the population is 45 degrees).
I can get my knee to about 90 degrees, but that’s it - for my knees to come up any further, I need to flex my low back.
This makes sitting, cycling, weightlifting, yoga, and, uh, pretty much everything a painful and difficult experience.</p>

<p>For a long time, I thought I just had “tight hamstrings,” and would occasionally get really into mobility exercises and stretching to try and improve it.
Nothing ever worked.
In fact, all of that stretching and mobilization was <em>really</em> stretching my <em>low back</em>, not my hamstrings, because the joint was already fully flexed - bone-on-bone contact.</p>

<p>And, yeah, bone-on-bone.
From squatting, deadlifting, sitting in a chair and programming, and cycling, I’ve pretty much shredded the labrum on each side of my hip.
Turns out, the weird aching pains in the front of my legs are <em>hip arthritis</em>.</p>

<p>I found out about all of this in such a roundabout way.
Last year, my girlfriend wanted to join a bike racing team.
She found a team ride/race for No Ride Around, which happened to be the team for my favorite local bike shop.
I love cycling and wanted to support her, so I joined too, even though racing isn’t really my thing.</p>

<p>Being on a race team, especially a really supportive one, is a fantastic motivation.
The team leader recommended Denver Fit Loft for a race bike fit.
Charles Van Atta, the fitter, was surprised at my limited range of motion, and recommended that I consult an orthopedic surgeon for hip impingement.</p>

<p>Fortunately, Denver has a really great sports medicine scene.
In my Google research, I found Dr. James Genuario, a world leading expert in exactly this sort of thing.
Within a few weeks of the bicycle fitting, I had X-rays confirming a severe case of hip impingement.
In a normal hip, there’s a number called the “alpha angle” that describes how round the femoral head is.
A normal alpha angle is 45 degrees, and <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5005062/">50-55 degrees is considered “pathological”</a> and warrants surgical intervention.
My alpha angle is 69 degrees.
Based on my current hip condition, I was looking at a total hip replacement in 5-15 years if I didn’t act quick.</p>

<p>Yet another fortunate coincidence - another member of my race team worked in medical device support, and knew many of the surgeons in the area.
He gave me a bunch of advice, and spoke very well of Dr. Genuario.</p>

<p>I spent six weeks going to PT twice a week.
Lots of weird stretches and exercises did - well, nothing at all.
Insurance companies require six weeks of PT before they’ll pay for the MRI and CT scans required for surgery, much less the surgery itself.
Apparently, about half of the folks that initially report these problems can resolve with stretching.
Given my seriously messed up bone anatomy, I wish we could have skipped that step.</p>

<p>After six weeks, I got my MRI scan - and fortunately my connective tissue is good enough to warrant corrective surgery.
A month of waiting, and I was able to get the CT scan, which provides a highly detailed 3D picture of my hip.
The CT scan goes to Germany, where they construct (in software) a 3D model of a “healthy” version of my hip.
This is the blueprint.
The surgeon will use that to trim my bones to the right shape.
What’s fun is that I found <a href="https://www.youtube.com/watch?v=CKgNr5cl0rs">a video of this procedure on YouTube</a>.
They literally use a fancy dremel tool to shave the bone down.</p>

<p>On September 22nd, I received my first surgery.
The doctor said that he wasn’t sure if he could repair the labrum, and I may need a reconstruction - which is a fancy way of saying “get a dead person’s labrum and stitch it in there.”
Once I signed all the consent forms, they gave me a Valium, and started hooking me up to an IV.
The nurse was jovial as I was being wheeled away - “we got you on the good drugs, it’s party time.”
To which my drugged out self responded - “double fisting valium and whatever this is.”
That’s my last memory before going under.</p>

<p>On waking up, the doctor said that he couldn’t repair the existing labrum - something about it looking like “crab meat.”
Given that I was still high on the anesthesia, I said “hell yeah i’m part zombie.”</p>

<p>I was in a fog all that day, and for two days afterward, I was taking narcotics.
I weaned myself off pretty quick, since I dislike the side effects, and they don’t work that great on me anyway.
After a few days, my hip was feeling totally fine, but every single medication I was on otherwise had “constipation” as a side effect, <em>including the anti-nausea medications</em>.
So when my stomach started to feel bad, I took all the nausea meds, which only made things worse.
The 29th (my birthday) was the hardest day - I was completely laid up in bed.
Once I determined the real cause of the stomach discomfort, it was pretty easy to manage.</p>

<p>I’m at two weeks post-op right now, and recovery is great.
Dr. Genuario’s skill as a surgeon is remarkable - he was able to bring my alpha angle to 45 degrees.
Despite removing so much bone, there is no pain at this point.
I’m supposed to be weaning off of crutches starting next week, but truth be told, I’m only using a single crutch most of the time anyway.
The range of motion in my operative leg is <em>much</em> better than the</p>

<p>My second surgery is scheduled for November 3rd.
Another three weeks in crutches, and I’ll be able to walk unassisted for Thanksgiving.
Another three weeks of recovery and PT, and I’ll be able to ride a bike outside - hopefully in time for the winter solstice (would hate to lose my Solstice Century streak).
I should be back to full strength and regular activity by April.</p>

<p>I’m incredibly grateful for everyone involved in the process.
But the person who has helped the most is my partner.
She’s supported me through all of this, helped me with my physical therapy, and changed my wound dressings.</p></div>
    </summary>
    <updated>2022-10-07T00:00:00Z</updated>
    <published>2022-10-07T00:00:00Z</published>
    <source>
      <id>https://www.parsonsmatt.org</id>
      <author>
        <name>Matt Parsons</name>
      </author>
      <link href="https://www.parsonsmatt.org" rel="alternate" type="text/html">
      <link href="https://www.parsonsmatt.org/feed.xml" rel="self" type="application/rss+xml">
      <title>Overcoming Software</title>
      <updated>2022-11-02T19:03:34Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://www.parsonsmatt.org/2022/10/07/femoracetabular_impingement.html</id>
    <link href="https://www.parsonsmatt.org/2022/10/07/femoracetabular_impingement.html" rel="alternate" type="text/html">
    <title>Femoracetabular Impingement</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Apparently, I’ve spent my entire life with a condition called “femoracetabular impingement.”
The bones in my hips are deformed - the femoral neck is too thick and mis-shapen, and I have a “pincer” on my acetabum which restricts range of motion even further.</p>

<p>As a result, I wasn’t able to internally rotate my hips almost at all - I had a single degree range of motion (normal for the population is 45 degrees).
I can get my knee to about 90 degrees, but that’s it - for my knees to come up any further, I need to flex my low back.
This makes sitting, cycling, weightlifting, yoga, and, uh, pretty much everything a painful and difficult experience.</p>

<p>For a long time, I thought I just had “tight hamstrings,” and would occasionally get really into mobility exercises and stretching to try and improve it.
Nothing ever worked.
In fact, all of that stretching and mobilization was <em>really</em> stretching my <em>low back</em>, not my hamstrings, because the joint was already fully flexed - bone-on-bone contact.</p>

<p>And, yeah, bone-on-bone.
From squatting, deadlifting, sitting in a chair and programming, and cycling, I’ve pretty much shredded the labrum on each side of my hip.
Turns out, the weird aching pains in the front of my legs are <em>hip arthritis</em>.</p>

<p>I found out about all of this in such a roundabout way.
Last year, my girlfriend wanted to join a bike racing team.
She found a team ride/race for No Ride Around, which happened to be the team for my favorite local bike shop.
I love cycling and wanted to support her, so I joined too, even though racing isn’t really my thing.</p>

<p>Being on a race team, especially a really supportive one, is a fantastic motivation.
The team leader recommended Denver Fit Loft for a race bike fit.
Charles Van Atta, the fitter, was surprised at my limited range of motion, and recommended that I consult an orthopedic surgeon for hip impingement.</p>

<p>Fortunately, Denver has a really great sports medicine scene.
In my Google research, I found Dr. James Genuario, a world leading expert in exactly this sort of thing.
Within a few weeks of the bicycle fitting, I had X-rays confirming a severe case of hip impingement.
In a normal hip, there’s a number called the “alpha angle” that describes how round the femoral head is.
A normal alpha angle is 45 degrees, and <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5005062/">50-55 degrees is considered “pathological”</a> and warrants surgical intervention.
My alpha angle is 69 degrees.
Based on my current hip condition, I was looking at a total hip replacement in 5-15 years if I didn’t act quick.</p>

<p>Yet another fortunate coincidence - another member of my race team worked in medical device support, and knew many of the surgeons in the area.
He gave me a bunch of advice, and spoke very well of Dr. Genuario.</p>

<p>I spent six weeks going to PT twice a week.
Lots of weird stretches and exercises did - well, nothing at all.
Insurance companies require six weeks of PT before they’ll pay for the MRI and CT scans required for surgery, much less the surgery itself.
Apparently, about half of the folks that initially report these problems can resolve with stretching.
Given my seriously messed up bone anatomy, I wish we could have skipped that step.</p>

<p>After six weeks, I got my MRI scan - and fortunately my connective tissue is good enough to warrant corrective surgery.
A month of waiting, and I was able to get the CT scan, which provides a highly detailed 3D picture of my hip.
The CT scan goes to Germany, where they construct (in software) a 3D model of a “healthy” version of my hip.
This is the blueprint.
The surgeon will use that to trim my bones to the right shape.
What’s fun is that I found <a href="https://www.youtube.com/watch?v=CKgNr5cl0rs">a video of this procedure on YouTube</a>.
They literally use a fancy dremel tool to shave the bone down.</p>

<p>On September 22nd, I received my first surgery.
The doctor said that he wasn’t sure if he could repair the labrum, and I may need a reconstruction - which is a fancy way of saying “get a dead person’s labrum and stitch it in there.”
Once I signed all the consent forms, they gave me a Valium, and started hooking me up to an IV.
The nurse was jovial as I was being wheeled away - “we got you on the good drugs, it’s party time.”
To which my drugged out self responded - “double fisting valium and whatever this is.”
That’s my last memory before going under.</p>

<p>On waking up, the doctor said that he couldn’t repair the existing labrum - something about it looking like “crab meat.”
Given that I was still high on the anesthesia, I said “hell yeah i’m part zombie.”</p>

<p>I was in a fog all that day, and for two days afterward, I was taking narcotics.
I weaned myself off pretty quick, since I dislike the side effects, and they don’t work that great on me anyway.
After a few days, my hip was feeling totally fine, but every single medication I was on otherwise had “constipation” as a side effect, <em>including the anti-nausea medications</em>.
So when my stomach started to feel bad, I took all the nausea meds, which only made things worse.
The 29th (my birthday) was the hardest day - I was completely laid up in bed.
Once I determined the real cause of the stomach discomfort, it was pretty easy to manage.</p>

<p>I’m at two weeks post-op right now, and recovery is great.
Dr. Genuario’s skill as a surgeon is remarkable - he was able to bring my alpha angle to 45 degrees.
Despite removing so much bone, there is no pain at this point.
I’m supposed to be weaning off of crutches starting next week, but truth be told, I’m only using a single crutch most of the time anyway.
The range of motion in my operative leg is <em>much</em> better than the</p>

<p>My second surgery is scheduled for November 3rd.
Another three weeks in crutches, and I’ll be able to walk unassisted for Thanksgiving.
Another three weeks of recovery and PT, and I’ll be able to ride a bike outside - hopefully in time for the winter solstice (would hate to lose my Solstice Century streak).
I should be back to full strength and regular activity by April.</p></div>
    </summary>
    <updated>2022-10-07T00:00:00Z</updated>
    <published>2022-10-07T00:00:00Z</published>
    <source>
      <id>https://www.parsonsmatt.org</id>
      <author>
        <name>Matt Parsons</name>
      </author>
      <link href="https://www.parsonsmatt.org" rel="alternate" type="text/html">
      <link href="https://www.parsonsmatt.org/feed.xml" rel="self" type="application/rss+xml">
      <title>Overcoming Software</title>
      <updated>2022-10-07T18:03:30Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://byorgey.wordpress.com/?p=2474</id>
    <link href="https://byorgey.wordpress.com/2022/10/06/swarm-alpha-release/" rel="alternate" type="text/html">
    <link href="https://byorgey.wordpress.com/2022/10/06/swarm-alpha-release/#comments" rel="replies" type="text/html">
    <link href="https://byorgey.wordpress.com/2022/10/06/swarm-alpha-release/feed/atom/" rel="replies" type="application/atom+xml">
    <title xml:lang="en">Swarm alpha release!</title>
    <summary type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml">The Swarm development team is very proud to announce the very first alpha release of the game. There are still many missing features (for example, saving games is not yet possible) and known bugs, but at this point itâ€™s quite … <a href="https://byorgey.wordpress.com/2022/10/06/swarm-alpha-release/">Continue reading <span class="meta-nav">→</span></a></div>
    </summary>
    <content type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p>The <a href="https://github.com/swarm-game/swarm/">Swarm</a> development team is very proud to announce the very first alpha release of the game. There are still many missing features (for example, <a href="https://github.com/swarm-game/swarm/issues/50">saving games is not yet possible</a>) and <a href="https://github.com/swarm-game/swarm/issues?q=is%3Aissue+is%3Aopen+label%3ABug+">known bugs</a>, but at this point it’s quite playable (and, dare we say, fun!) and ready for some intrepid souls to try it out and give us some feedback.</p>
<div style="text-align: center;">
<p><img src="https://byorgey.files.wordpress.com/2022/10/log.png?w=640"></p>
</div>
<div style="text-align: center;">
<p><img src="https://byorgey.files.wordpress.com/2022/10/tree_harvest.png?w=640"></p>
</div>
<h2 id="what-is-it">What is it?</h2>
<p>Swarm is a 2D, open-world programming and resource gathering game with a strongly-typed, functional programming language and a unique upgrade system. Unlocking language features is tied to collecting resources, making it an interesting challenge to bootstrap your way into the use of the full language.</p>
<p>Notable changes since the <a href="https://byorgey.wordpress.com/2022/06/20/swarm-status-report/">last progress update</a> include:</p>
<ul>
<li>An all-new in-game tutorial consisting of a sequence of guided challenges</li>
<li>Several new challenge scenarios (mazes! towers of hanoi!), and documentation on how to make your own</li>
<li>Lots more in-game help and info, including help on currently available commands + recipes, and a dialog showing all live robots</li>
<li>Many more entities, recipes, and language features to explore and collect</li>
<li>Better mouse support</li>
<li>Backwards incremental search and tab completion in the REPL</li>
<li>Many, many small bug fixes and improvements!</li>
</ul>
<h2 id="give-it-a-try">Give it a try!</h2>
<p>To install, check out the <a href="https://github.com/swarm-game/swarm#installing">installation instructions</a>: you can download a <a href="https://github.com/swarm-game/swarm/releases">binary release</a> (for now, Linux only, but MacOS binaries should be on the horizon), or <a href="https://hackage.haskell.org/package/swarm">install from Hackage</a>. Give it a try and send us your feedback, either <a href="https://github.com/swarm-game/swarm/issues/new/choose">via a github issue</a> or <a href="https://web.libera.chat/?channels=#swarm">via IRC</a>!</p>
<h2 id="future-plans-getting-involved">Future plans &amp; getting involved</h2>
<p>We’re still hard at work on the game, and will next turn our attention to some big features, such as:</p>
<ul>
<li><a href="https://github.com/swarm-game/swarm/issues/50">Saving and loading games</a></li>
<li>New world features like aliens and <a href="https://github.com/swarm-game/swarm/issues/112">cities</a></li>
<li>New language features like <a href="https://github.com/swarm-game/swarm/issues/154">recursive types</a>, <a href="https://github.com/swarm-game/swarm/issues/98">arrays</a>, <a href="https://github.com/swarm-game/swarm/issues/94">inter-robot communication</a>, and <a href="https://github.com/swarm-game/swarm/issues/495">a proper <code>import</code> construct</a></li>
</ul>
<p>Of course, there are also <a href="https://github.com/swarm-game/swarm/issues?q=is%3Aissue+is%3Aopen+label%3A%22C-Low+Hanging+Fruit%22">tons of small things that need fixing and polishing</a> too! If you’re interested in getting involved, check out our <a href="https://github.com/swarm-game/swarm/blob/main/CONTRIBUTING.md">contribution guide</a>, come <a href="https://web.libera.chat/?channels=#swarm">join us on IRC</a> (<code>#swarm</code> on Libera.Chat), or take a look at the list of <a href="https://github.com/swarm-game/swarm/issues?q=is%3Aissue+is%3Aopen+label%3A%22C-Low+Hanging+Fruit%22">issues marked “low-hanging fruit”</a>.</p>
<p>Brought to you by the Swarm development team:</p>
<ul>
<li>Brent Yorgey</li>
<li>Ondřej Šebek</li>
<li>Tristan de Cacqueray</li>
</ul>
<p>With contributions from:</p>
<ul>
<li>Alexander Block</li>
<li>Daniel Díaz Carrete</li>
<li>Huw Campbell</li>
<li>Ishan Bhanuka</li>
<li>Jacob</li>
<li>Jens Petersen</li>
<li>José Rafael Vieira</li>
<li>Joshua Price</li>
<li>lsmor</li>
<li>Noah Yorgey</li>
<li>Norbert Dzikowski</li>
<li>Paul Brauner</li>
<li>Ryan Yates</li>
<li>Sam Tay</li>
</ul>
<p>…not to mention many others who gave valuable suggestions and feedback. Want to see your name listed here in the next release? <a href="https://github.com/swarm-game/swarm/blob/main/CONTRIBUTING.md">See how you can contribute!</a></p></div>
    </content>
    <updated>2022-10-06T20:01:34Z</updated>
    <published>2022-10-06T20:01:34Z</published>
    <category scheme="https://byorgey.wordpress.com" term="haskell"/>
    <category scheme="https://byorgey.wordpress.com" term="projects"/>
    <category scheme="https://byorgey.wordpress.com" term="game"/>
    <category scheme="https://byorgey.wordpress.com" term="programming"/>
    <category scheme="https://byorgey.wordpress.com" term="resource"/>
    <category scheme="https://byorgey.wordpress.com" term="robot"/>
    <category scheme="https://byorgey.wordpress.com" term="Swarm"/>
    <author>
      <name>Brent</name>
      <uri>http://ozark.hendrix.edu/~yorgey/</uri>
    </author>
    <source>
      <id>http://byorgey.wordpress.com/feed/atom/</id>
      <link href="https://byorgey.wordpress.com" rel="alternate" type="text/html">
      <link href="https://byorgey.wordpress.com/feed/atom/" rel="self" type="application/atom+xml">
      <link href="https://byorgey.wordpress.com/osd.xml" rel="search" title="blog :: Brent -&gt; [String]" type="application/opensearchdescription+xml">
      <link href="https://s1.wp.com/opensearch.xml" rel="search" title="WordPress.com" type="application/opensearchdescription+xml">
      <link href="https://byorgey.wordpress.com/?pushpress=hub" rel="hub" type="text/html">
      <title xml:lang="en">blog :: Brent -&gt; [String]</title>
      <updated>2022-10-06T20:01:34Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://oleg.fi/gists/posts/2022-09-30-thinnings.lagda.html</id>
    <link href="https://oleg.fi/gists/posts/2022-09-30-thinnings.lagda.html" rel="alternate" type="text/html">
    <title>Three different thinnings</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div class="info">
    Posted on 2022-09-30
    
        by Oleg Grenrus
    

    <a href="https://oleg.fi/tags/agda.html" title="All pages tagged 'agda'.">agda</a>
</div>

<p>I was lately again thinking about thinnings.</p>
<p>Thinnings are a weaker form of renamings, which we use in well-scoped or well-typed implementations of programming languages. (Their proper name is <em>order-preserving embeddings</em>, mathematicians may know them as morphism in <em>augmented simplex category</em> Δ₊)</p>
<p>There is one well known and used implementation implementation for them. It's simple to use and write proofs about. However it's not super great. Especially it's not great in Haskell, as it cannot be given <code>Category</code> instance. (Though you almost never need thinnings in Haskell, so the reason is a bit moot).</p>
<p>I'll show two other implementations, and show that they are equivalent, using <em>Cubical Agda</em> to state the equivalences. Before we dive in, Agda module prologue:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb1-1"><a href="https://oleg.fi/gists/atom.xml#cb1-1"></a><span class="pp">{-# OPTIONS --cubical --safe #-}</span></span>
<span id="cb1-2"><a href="https://oleg.fi/gists/atom.xml#cb1-2"></a><span class="kw">module</span> 2022-09-30-thinnings <span class="kw">where</span></span>
<span id="cb1-3"><a href="https://oleg.fi/gists/atom.xml#cb1-3"></a></span>
<span id="cb1-4"><a href="https://oleg.fi/gists/atom.xml#cb1-4"></a><span class="kw">open</span> <span class="kw">import</span> Cubical<span class="ot">.</span>Core<span class="ot">.</span>Everything</span>
<span id="cb1-5"><a href="https://oleg.fi/gists/atom.xml#cb1-5"></a><span class="kw">open</span> <span class="kw">import</span> Cubical<span class="ot">.</span>Foundations<span class="ot">.</span>Prelude</span>
<span id="cb1-6"><a href="https://oleg.fi/gists/atom.xml#cb1-6"></a><span class="kw">open</span> <span class="kw">import</span> Cubical<span class="ot">.</span>Foundations<span class="ot">.</span>Isomorphism</span>
<span id="cb1-7"><a href="https://oleg.fi/gists/atom.xml#cb1-7"></a><span class="kw">open</span> <span class="kw">import</span> Cubical<span class="ot">.</span>Data<span class="ot">.</span>Nat</span>
<span id="cb1-8"><a href="https://oleg.fi/gists/atom.xml#cb1-8"></a><span class="kw">open</span> <span class="kw">import</span> Cubical<span class="ot">.</span>Data<span class="ot">.</span>Empty</span>
<span id="cb1-9"><a href="https://oleg.fi/gists/atom.xml#cb1-9"></a><span class="kw">open</span> <span class="kw">import</span> Cubical<span class="ot">.</span>Data<span class="ot">.</span>Sigma</span>
<span id="cb1-10"><a href="https://oleg.fi/gists/atom.xml#cb1-10"></a><span class="kw">open</span> <span class="kw">import</span> Cubical<span class="ot">.</span>Relation<span class="ot">.</span>Nullary</span></code></pre></div>
<p>I will show only a well-scoped thinnings. So the context are simply natural numbers. As there are plenty of them, let us define few common variables.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb2-1"><a href="https://oleg.fi/gists/atom.xml#cb2-1"></a><span class="kw">variable</span></span>
<span id="cb2-2"><a href="https://oleg.fi/gists/atom.xml#cb2-2"></a>  n m p r <span class="ot">:</span> ℕ</span></code></pre></div>
<h2 id="orthodox-thinnings">Orthodox thinnings</h2>
<p>For the sake of this post, I call well known thinnings <em>orthodox</em>, and use ₒ subscript to indicate that.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb3-1"><a href="https://oleg.fi/gists/atom.xml#cb3-1"></a><span class="kw">data</span> <span class="ot">_</span>⊑ₒ<span class="ot">_</span> <span class="ot">:</span> ℕ <span class="ot">→</span> ℕ <span class="ot">→</span> Type <span class="kw">where</span></span>
<span id="cb3-2"><a href="https://oleg.fi/gists/atom.xml#cb3-2"></a>  nilₒ   <span class="ot">:</span>           zero   ⊑ₒ zero</span>
<span id="cb3-3"><a href="https://oleg.fi/gists/atom.xml#cb3-3"></a>  skipₒ  <span class="ot">:</span> n ⊑ₒ m <span class="ot">→</span>  n      ⊑ₒ suc m</span>
<span id="cb3-4"><a href="https://oleg.fi/gists/atom.xml#cb3-4"></a>  keepₒ  <span class="ot">:</span> n ⊑ₒ m <span class="ot">→</span>  suc n  ⊑ₒ suc m</span>
<span id="cb3-5"><a href="https://oleg.fi/gists/atom.xml#cb3-5"></a></span>
<span id="cb3-6"><a href="https://oleg.fi/gists/atom.xml#cb3-6"></a>Orth <span class="ot">=</span> <span class="ot">_</span>⊑ₒ<span class="ot">_</span></span></code></pre></div>
<p>An example thinning is like</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb4-1"><a href="https://oleg.fi/gists/atom.xml#cb4-1"></a>exₒ <span class="ot">:</span> <span class="dv">5</span> ⊑ₒ <span class="dv">7</span></span>
<span id="cb4-2"><a href="https://oleg.fi/gists/atom.xml#cb4-2"></a>exₒ <span class="ot">=</span> keepₒ <span class="ot">(</span>skipₒ <span class="ot">(</span>keepₒ <span class="ot">(</span>skipₒ <span class="ot">(</span>keepₒ <span class="ot">(</span>keepₒ <span class="ot">(</span>keepₒ nilₒ<span class="ot">))))))</span></span></code></pre></div>
<p>Which would look like:</p>
<p><svg height="95.1739pt" style="vertical-align: 4.725100pt;" version="1.1" viewBox="4.7814 -99.899 80.5746 95.1739" width="80.5746pt">
<title>\begin{tikzpicture}   \node[circle, draw, fill=black, inner sep=0pt, minimum width=4pt] (A) at (0,0.00) {};   \node[circle, draw, fill=black, inner sep=0pt, minimum width=4pt] (B) at (0,0.50) {};   \node[circle, draw, fill=black, inner sep=0pt, minimum width=4pt] (C) at (0,1.00) {};   \node[circle, draw, fill=black, inner sep=0pt, minimum width=4pt] (D) at (0,2.00) {};   \node[circle, draw, fill=black, inner sep=0pt, minimum width=4pt] (E) at (0,3.00) {};   \node[anchor=east] at (A) {$0$};   \node[anchor=east] at (B) {$1$};   \node[anchor=east] at (C) {$2$};   \node[anchor=east] at (D) {$3$};   \node[anchor=east] at (E) {$4$};      \node[circle, draw, fill=black, inner sep=0pt, minimum width=4pt] (X) at (2,0.00) {};   \node[circle, draw, fill=black, inner sep=0pt, minimum width=4pt] (Y) at (2,0.50) {};   \node[circle, draw, fill=black, inner sep=0pt, minimum width=4pt] (Z) at (2,1.00) {};   \node[circle, draw,             inner sep=0pt, minimum width=4pt] (U) at (2,1.50) {};   \node[circle, draw, fill=black, inner sep=0pt, minimum width=4pt] (V) at (2,2.00) {};   \node[circle, draw,             inner sep=0pt, minimum width=4pt] (W) at (2,2.50) {};   \node[circle, draw, fill=black, inner sep=0pt, minimum width=4pt] (Q) at (2,3.00) {};   \node[anchor=west] at (X) {$0$};   \node[anchor=west] at (Y) {$1$};   \node[anchor=west] at (Z) {$2$};   \node[anchor=west] at (U) {$3$};   \node[anchor=west] at (V) {$4$};   \node[anchor=west] at (W) {$5$};   \node[anchor=west] at (Q) {$6$};    \draw[-] (A) -- (X);   \draw[-] (B) -- (Y);   \draw[-] (C) -- (Z);   \draw[-] (D) -- (V);   \draw[-] (E) -- (Q); \end{tikzpicture}</title>
<defs/>
<g>
<path d="M18.9297 -9.79687C18.9297 -10.8945 18.0352 -11.7891 16.9336 -11.7891C15.8359 -11.7891 14.9414 -10.8945 14.9414 -9.79687C14.9414 -8.69531 15.8359 -7.80469 16.9336 -7.80469C18.0352 -7.80469 18.9297 -8.69531 18.9297 -9.79687Z">
<path d="M18.9297 -9.79687C18.9297 -10.8945 18.0352 -11.7891 16.9336 -11.7891C15.8359 -11.7891 14.9414 -10.8945 14.9414 -9.79687C14.9414 -8.69531 15.8359 -7.80469 16.9336 -7.80469C18.0352 -7.80469 18.9297 -8.69531 18.9297 -9.79687Z" fill="none" stroke="#000000" stroke-miterlimit="10.0375" stroke-width="0.399994">
<path d="M18.9297 -23.9688C18.9297 -25.0704 18.0352 -25.961 16.9336 -25.961C15.8359 -25.961 14.9414 -25.0704 14.9414 -23.9688C14.9414 -22.8672 15.8359 -21.9766 16.9336 -21.9766C18.0352 -21.9766 18.9297 -22.8672 18.9297 -23.9688Z">
<path d="M18.9297 -23.9688C18.9297 -25.0704 18.0352 -25.961 16.9336 -25.961C15.8359 -25.961 14.9414 -25.0704 14.9414 -23.9688C14.9414 -22.8672 15.8359 -21.9766 16.9336 -21.9766C18.0352 -21.9766 18.9297 -22.8672 18.9297 -23.9688Z" fill="none" stroke="#000000" stroke-miterlimit="10.0375" stroke-width="0.399994">
<path d="M18.9297 -38.1407C18.9297 -39.2422 18.0352 -40.1367 16.9336 -40.1367C15.8359 -40.1367 14.9414 -39.2422 14.9414 -38.1407C14.9414 -37.0429 15.8359 -36.1485 16.9336 -36.1485C18.0352 -36.1485 18.9297 -37.0429 18.9297 -38.1407Z">
<path d="M18.9297 -38.1407C18.9297 -39.2422 18.0352 -40.1367 16.9336 -40.1367C15.8359 -40.1367 14.9414 -39.2422 14.9414 -38.1407C14.9414 -37.0429 15.8359 -36.1485 16.9336 -36.1485C18.0352 -36.1485 18.9297 -37.0429 18.9297 -38.1407Z" fill="none" stroke="#000000" stroke-miterlimit="10.0375" stroke-width="0.399994">
<path d="M18.9297 -66.4882C18.9297 -67.5898 18.0352 -68.4805 16.9336 -68.4805C15.8359 -68.4805 14.9414 -67.5898 14.9414 -66.4882C14.9414 -65.3867 15.8359 -64.496 16.9336 -64.496C18.0352 -64.496 18.9297 -65.3867 18.9297 -66.4882Z">
<path d="M18.9297 -66.4882C18.9297 -67.5898 18.0352 -68.4805 16.9336 -68.4805C15.8359 -68.4805 14.9414 -67.5898 14.9414 -66.4882C14.9414 -65.3867 15.8359 -64.496 16.9336 -64.496C18.0352 -64.496 18.9297 -65.3867 18.9297 -66.4882Z" fill="none" stroke="#000000" stroke-miterlimit="10.0375" stroke-width="0.399994">
<path d="M18.9297 -94.8359C18.9297 -95.9376 18.0352 -96.8282 16.9336 -96.8282C15.8359 -96.8282 14.9414 -95.9376 14.9414 -94.8359C14.9414 -93.7344 15.8359 -92.8438 16.9336 -92.8438C18.0352 -92.8438 18.9297 -93.7344 18.9297 -94.8359Z">
<path d="M18.9297 -94.8359C18.9297 -95.9376 18.0352 -96.8282 16.9336 -96.8282C15.8359 -96.8282 14.9414 -95.9376 14.9414 -94.8359C14.9414 -93.7344 15.8359 -92.8438 16.9336 -92.8438C18.0352 -92.8438 18.9297 -93.7344 18.9297 -94.8359Z" fill="none" stroke="#000000" stroke-miterlimit="10.0375" stroke-width="0.399994">
<g transform="matrix(1 0 0 1 -12.154 4.78447)">
<path d="M20.6944 -19.6431C18.479 -19.6431 17.3499 -17.8851 17.3499 -14.4263C17.3499 -12.754 17.6501 -11.3105 18.1503 -10.6101S19.4509 -9.5096 20.3371 -9.5096C22.4953 -9.5096 23.5815 -11.3676 23.5815 -15.0265C23.5815 -18.1566 22.6525 -19.6431 20.6944 -19.6431ZM20.4371 -19.1428C21.8235 -19.1428 22.3809 -17.7421 22.3809 -14.3119C22.3809 -11.2676 21.8378 -10.0098 20.5229 -10.0098C19.1365 -10.0098 18.5505 -11.4534 18.5505 -14.9408C18.5505 -17.9565 19.0793 -19.1428 20.4371 -19.1428Z">
</path></g>
<g transform="matrix(1 0 0 1 -12.154 -9.20955)">
<path d="M17.893 -17.7278H18.036L19.8797 -18.5568C19.894 -18.5711 19.9083 -18.5711 19.9226 -18.5711C20.0083 -18.5711 20.0369 -18.4425 20.0369 -18.0995V-11.1675C20.0369 -10.4243 19.8797 -10.2671 19.1079 -10.2242L18.3075 -10.1814V-9.75257C20.5086 -9.79545 20.5086 -9.79545 20.6658 -9.79545C20.8516 -9.79545 21.166 -9.79545 21.652 -9.78116C21.8235 -9.76687 22.3237 -9.76687 22.9097 -9.75257V-10.1814L22.1665 -10.2242C21.3804 -10.2671 21.2375 -10.4243 21.2375 -11.1675V-19.6431L21.0374 -19.7145C20.1084 -19.2286 19.0936 -18.7998 17.793 -18.3424L17.893 -17.7278Z">
</path></g>
<g transform="matrix(1 0 0 1 -12.154 -23.4905)">
<path d="M17.1641 -10.1242V-9.75257C19.8368 -9.79545 19.8368 -9.79545 20.3514 -9.79545S20.8659 -9.79545 23.6244 -9.75257C23.5958 -10.0527 23.5958 -10.1956 23.5958 -10.3957C23.5958 -10.5815 23.5958 -10.7245 23.6244 -11.0389C21.9807 -10.9674 21.3233 -10.9532 18.6791 -10.896L21.2804 -13.6545C22.6668 -15.1266 23.0955 -15.9127 23.0955 -16.9846C23.0955 -18.6283 21.9807 -19.6431 20.1656 -19.6431C19.1365 -19.6431 18.4362 -19.3572 17.7358 -18.6426L17.4929 -16.6988H17.9073L18.0931 -17.3562C18.3218 -18.1852 18.8364 -18.5425 19.794 -18.5425C21.0231 -18.5425 21.8092 -17.7707 21.8092 -16.5558C21.8092 -15.4839 21.2089 -14.4263 19.5939 -12.7111L17.1641 -10.1242Z">
</path></g>
<g transform="matrix(1 0 0 1 -12.154 -51.9091)">
<path d="M17.55 -16.9132H17.9931L18.2504 -17.7136C18.4076 -18.1995 19.308 -18.6854 20.0512 -18.6854C20.9802 -18.6854 21.7378 -17.9279 21.7378 -17.0275C21.7378 -15.9556 20.8945 -15.0551 19.8797 -15.0551C19.7654 -15.0551 19.6082 -15.0694 19.4224 -15.0837L19.208 -15.098L19.0365 -14.3405L19.1365 -14.2547C19.6796 -14.4977 19.9512 -14.5692 20.3371 -14.5692C21.5234 -14.5692 22.2094 -13.8117 22.2094 -12.511C22.2094 -11.0532 21.3376 -10.0956 20.0083 -10.0956C19.3509 -10.0956 18.7649 -10.31 18.3361 -10.7102C17.9931 -11.0246 17.8073 -11.3533 17.5357 -12.1251L17.1498 -11.9822C17.45 -11.1104 17.5643 -10.5958 17.6501 -9.88121C18.4076 -9.62394 19.0365 -9.5096 19.5653 -9.5096C20.7087 -9.5096 22.0236 -10.1528 22.8097 -11.1104C23.2956 -11.6964 23.5386 -12.3252 23.5386 -12.997C23.5386 -13.683 23.2528 -14.2833 22.7382 -14.6406C22.3809 -14.8979 22.0522 -15.0122 21.3376 -15.1409C22.481 -16.027 22.9097 -16.6845 22.9097 -17.5277C22.9097 -18.7998 21.8521 -19.6431 20.2656 -19.6431C19.2937 -19.6431 18.6506 -19.3715 17.9645 -18.6854L17.55 -16.9132Z">
</path></g>
<g transform="matrix(1 0 0 1 -12.154 -80.0765)">
<path d="M20.9374 -12.3824V-11.3105C20.9374 -10.4529 20.7801 -10.2528 20.0798 -10.2242L19.1937 -10.1814V-9.75257C21.0946 -9.79545 21.0946 -9.79545 21.4376 -9.79545S21.7806 -9.79545 23.6815 -9.75257V-10.1814L22.9955 -10.2242C22.2952 -10.2671 22.1379 -10.4529 22.1379 -11.3105V-12.3824C22.9812 -12.3824 23.2814 -12.3681 23.6815 -12.3252V-13.34C23.0098 -13.2828 22.7382 -13.2828 22.5238 -13.2971H22.481H22.1379V-15.2838C22.1379 -17.8279 22.1665 -19.0571 22.238 -19.6431L22.0665 -19.7145L21.0088 -19.3286L16.964 -12.7111L17.1212 -12.3824H20.9374ZM20.9374 -13.2971H17.8645L20.9374 -18.3281V-13.2971Z">
</path></g>
<path d="M75.6211 -9.79687C75.6211 -10.8945 74.7305 -11.7891 73.6289 -11.7891S71.6367 -10.8945 71.6367 -9.79687C71.6367 -8.69531 72.5273 -7.80469 73.6289 -7.80469S75.6211 -8.69531 75.6211 -9.79687Z">
<path d="M75.6211 -9.79687C75.6211 -10.8945 74.7305 -11.7891 73.6289 -11.7891S71.6367 -10.8945 71.6367 -9.79687C71.6367 -8.69531 72.5273 -7.80469 73.6289 -7.80469S75.6211 -8.69531 75.6211 -9.79687Z" fill="none" stroke="#000000" stroke-miterlimit="10.0375" stroke-width="0.399994">
<path d="M75.6211 -23.9688C75.6211 -25.0704 74.7305 -25.961 73.6289 -25.961S71.6367 -25.0704 71.6367 -23.9688C71.6367 -22.8672 72.5273 -21.9766 73.6289 -21.9766S75.6211 -22.8672 75.6211 -23.9688Z">
<path d="M75.6211 -23.9688C75.6211 -25.0704 74.7305 -25.961 73.6289 -25.961S71.6367 -25.0704 71.6367 -23.9688C71.6367 -22.8672 72.5273 -21.9766 73.6289 -21.9766S75.6211 -22.8672 75.6211 -23.9688Z" fill="none" stroke="#000000" stroke-miterlimit="10.0375" stroke-width="0.399994">
<path d="M75.6211 -38.1407C75.6211 -39.2422 74.7305 -40.1367 73.6289 -40.1367S71.6367 -39.2422 71.6367 -38.1407C71.6367 -37.0429 72.5273 -36.1485 73.6289 -36.1485S75.6211 -37.0429 75.6211 -38.1407Z">
<path d="M75.6211 -38.1407C75.6211 -39.2422 74.7305 -40.1367 73.6289 -40.1367S71.6367 -39.2422 71.6367 -38.1407C71.6367 -37.0429 72.5273 -36.1485 73.6289 -36.1485S75.6211 -37.0429 75.6211 -38.1407Z" fill="none" stroke="#000000" stroke-miterlimit="10.0375" stroke-width="0.399994">
<path d="M75.6211 -52.3165C75.6211 -53.418 74.7305 -54.3086 73.6289 -54.3086S71.6367 -53.418 71.6367 -52.3165C71.6367 -51.2149 72.5273 -50.3242 73.6289 -50.3242S75.6211 -51.2149 75.6211 -52.3165Z" fill="none" stroke="#000000" stroke-miterlimit="10.0375" stroke-width="0.399994">
<path d="M75.6211 -66.4882C75.6211 -67.5898 74.7305 -68.4805 73.6289 -68.4805S71.6367 -67.5898 71.6367 -66.4882C71.6367 -65.3867 72.5273 -64.496 73.6289 -64.496S75.6211 -65.3867 75.6211 -66.4882Z">
<path d="M75.6211 -66.4882C75.6211 -67.5898 74.7305 -68.4805 73.6289 -68.4805S71.6367 -67.5898 71.6367 -66.4882C71.6367 -65.3867 72.5273 -64.496 73.6289 -64.496S75.6211 -65.3867 75.6211 -66.4882Z" fill="none" stroke="#000000" stroke-miterlimit="10.0375" stroke-width="0.399994">
<path d="M75.6211 -80.6641C75.6211 -81.7618 74.7305 -82.6562 73.6289 -82.6562S71.6367 -81.7618 71.6367 -80.6641C71.6367 -79.5626 72.5273 -78.668 73.6289 -78.668S75.6211 -79.5626 75.6211 -80.6641Z" fill="none" stroke="#000000" stroke-miterlimit="10.0375" stroke-width="0.399994">
<path d="M75.6211 -94.8359C75.6211 -95.9376 74.7305 -96.8282 73.6289 -96.8282S71.6367 -95.9376 71.6367 -94.8359C71.6367 -93.7344 72.5273 -92.8438 73.6289 -92.8438S75.6211 -93.7344 75.6211 -94.8359Z">
<path d="M75.6211 -94.8359C75.6211 -95.9376 74.7305 -96.8282 73.6289 -96.8282S71.6367 -95.9376 71.6367 -94.8359C71.6367 -93.7344 72.5273 -92.8438 73.6289 -92.8438S75.6211 -93.7344 75.6211 -94.8359Z" fill="none" stroke="#000000" stroke-miterlimit="10.0375" stroke-width="0.399994">
<g transform="matrix(1 0 0 1 61.6745 4.78447)">
<path d="M20.6944 -19.6431C18.479 -19.6431 17.3499 -17.8851 17.3499 -14.4263C17.3499 -12.754 17.6501 -11.3105 18.1503 -10.6101S19.4509 -9.5096 20.3371 -9.5096C22.4953 -9.5096 23.5815 -11.3676 23.5815 -15.0265C23.5815 -18.1566 22.6525 -19.6431 20.6944 -19.6431ZM20.4371 -19.1428C21.8235 -19.1428 22.3809 -17.7421 22.3809 -14.3119C22.3809 -11.2676 21.8378 -10.0098 20.5229 -10.0098C19.1365 -10.0098 18.5505 -11.4534 18.5505 -14.9408C18.5505 -17.9565 19.0793 -19.1428 20.4371 -19.1428Z">
</path></g>
<g transform="matrix(1 0 0 1 61.6745 -9.20955)">
<path d="M17.893 -17.7278H18.036L19.8797 -18.5568C19.894 -18.5711 19.9083 -18.5711 19.9226 -18.5711C20.0083 -18.5711 20.0369 -18.4425 20.0369 -18.0995V-11.1675C20.0369 -10.4243 19.8797 -10.2671 19.1079 -10.2242L18.3075 -10.1814V-9.75257C20.5086 -9.79545 20.5086 -9.79545 20.6658 -9.79545C20.8516 -9.79545 21.166 -9.79545 21.652 -9.78116C21.8235 -9.76687 22.3237 -9.76687 22.9097 -9.75257V-10.1814L22.1665 -10.2242C21.3804 -10.2671 21.2375 -10.4243 21.2375 -11.1675V-19.6431L21.0374 -19.7145C20.1084 -19.2286 19.0936 -18.7998 17.793 -18.3424L17.893 -17.7278Z">
</path></g>
<g transform="matrix(1 0 0 1 61.6745 -23.4905)">
<path d="M17.1641 -10.1242V-9.75257C19.8368 -9.79545 19.8368 -9.79545 20.3514 -9.79545S20.8659 -9.79545 23.6244 -9.75257C23.5958 -10.0527 23.5958 -10.1956 23.5958 -10.3957C23.5958 -10.5815 23.5958 -10.7245 23.6244 -11.0389C21.9807 -10.9674 21.3233 -10.9532 18.6791 -10.896L21.2804 -13.6545C22.6668 -15.1266 23.0955 -15.9127 23.0955 -16.9846C23.0955 -18.6283 21.9807 -19.6431 20.1656 -19.6431C19.1365 -19.6431 18.4362 -19.3572 17.7358 -18.6426L17.4929 -16.6988H17.9073L18.0931 -17.3562C18.3218 -18.1852 18.8364 -18.5425 19.794 -18.5425C21.0231 -18.5425 21.8092 -17.7707 21.8092 -16.5558C21.8092 -15.4839 21.2089 -14.4263 19.5939 -12.7111L17.1641 -10.1242Z">
</path></g>
<g transform="matrix(1 0 0 1 61.6745 -37.7357)">
<path d="M17.55 -16.9132H17.9931L18.2504 -17.7136C18.4076 -18.1995 19.308 -18.6854 20.0512 -18.6854C20.9802 -18.6854 21.7378 -17.9279 21.7378 -17.0275C21.7378 -15.9556 20.8945 -15.0551 19.8797 -15.0551C19.7654 -15.0551 19.6082 -15.0694 19.4224 -15.0837L19.208 -15.098L19.0365 -14.3405L19.1365 -14.2547C19.6796 -14.4977 19.9512 -14.5692 20.3371 -14.5692C21.5234 -14.5692 22.2094 -13.8117 22.2094 -12.511C22.2094 -11.0532 21.3376 -10.0956 20.0083 -10.0956C19.3509 -10.0956 18.7649 -10.31 18.3361 -10.7102C17.9931 -11.0246 17.8073 -11.3533 17.5357 -12.1251L17.1498 -11.9822C17.45 -11.1104 17.5643 -10.5958 17.6501 -9.88121C18.4076 -9.62394 19.0365 -9.5096 19.5653 -9.5096C20.7087 -9.5096 22.0236 -10.1528 22.8097 -11.1104C23.2956 -11.6964 23.5386 -12.3252 23.5386 -12.997C23.5386 -13.683 23.2528 -14.2833 22.7382 -14.6406C22.3809 -14.8979 22.0522 -15.0122 21.3376 -15.1409C22.481 -16.027 22.9097 -16.6845 22.9097 -17.5277C22.9097 -18.7998 21.8521 -19.6431 20.2656 -19.6431C19.2937 -19.6431 18.6506 -19.3715 17.9645 -18.6854L17.55 -16.9132Z">
</path></g>
<g transform="matrix(1 0 0 1 61.6745 -51.7297)">
<path d="M20.9374 -12.3824V-11.3105C20.9374 -10.4529 20.7801 -10.2528 20.0798 -10.2242L19.1937 -10.1814V-9.75257C21.0946 -9.79545 21.0946 -9.79545 21.4376 -9.79545S21.7806 -9.79545 23.6815 -9.75257V-10.1814L22.9955 -10.2242C22.2952 -10.2671 22.1379 -10.4529 22.1379 -11.3105V-12.3824C22.9812 -12.3824 23.2814 -12.3681 23.6815 -12.3252V-13.34C23.0098 -13.2828 22.7382 -13.2828 22.5238 -13.2971H22.481H22.1379V-15.2838C22.1379 -17.8279 22.1665 -19.0571 22.238 -19.6431L22.0665 -19.7145L21.0088 -19.3286L16.964 -12.7111L17.1212 -12.3824H20.9374ZM20.9374 -13.2971H17.8645L20.9374 -18.3281V-13.2971Z">
</path></g>
<g transform="matrix(1 0 0 1 61.6745 -66.0825)">
<path d="M18.7506 -18.4425C20.5943 -18.3853 21.3947 -18.371 23.1098 -18.371L23.1813 -18.4425C23.1527 -18.6997 23.1527 -18.8141 23.1527 -18.9999C23.1527 -19.2 23.1527 -19.3143 23.1813 -19.5716L23.1098 -19.6431C22.0379 -19.5859 21.3947 -19.5716 20.6229 -19.5716C19.8368 -19.5716 19.208 -19.5859 18.136 -19.6431L18.0646 -19.5716C18.0788 -18.6997 18.0931 -18.0709 18.0931 -17.6135C18.0931 -16.3986 18.0503 -15.0265 18.0074 -14.3977L18.2932 -14.3119C18.965 -14.9837 19.3509 -15.1838 20.0512 -15.1838C21.4233 -15.1838 22.2809 -14.2119 22.2809 -12.6683C22.2809 -11.0818 21.3661 -10.1528 19.8083 -10.1528C19.0365 -10.1528 18.3218 -10.41 18.1217 -10.7816L17.4643 -11.9536L17.1212 -11.7535C17.45 -10.9389 17.6215 -10.4815 17.8216 -9.85262C18.2218 -9.63823 18.7935 -9.5096 19.4081 -9.5096C20.3657 -9.5096 21.3804 -9.92408 22.1665 -10.6101C23.0384 -11.3819 23.4957 -12.3538 23.4957 -13.4115C23.4957 -15.0265 22.338 -16.1699 20.7087 -16.1699C20.0226 -16.1699 19.5081 -15.9841 18.622 -15.4553L18.7506 -18.4425Z">
</path></g>
<g transform="matrix(1 0 0 1 61.6745 -80.2559)">
<path d="M22.8812 -19.4001L22.3523 -19.6431C20.9802 -19.1857 20.3942 -18.8998 19.6653 -18.271C18.1932 -17.0275 17.3928 -15.2838 17.3928 -13.3257C17.3928 -10.9674 18.5362 -9.5096 20.38 -9.5096C22.238 -9.5096 23.6244 -10.9817 23.6244 -12.9255C23.6244 -14.5692 22.6382 -15.6411 21.1232 -15.6411C20.4085 -15.6411 19.9798 -15.4553 19.1365 -14.7836C18.9793 -14.6549 18.965 -14.6406 18.8078 -14.5263C19.1079 -17.1133 20.3085 -18.5139 22.8812 -19.2857V-19.4001ZM20.5801 -14.7836C21.6663 -14.7836 22.3952 -13.8403 22.3952 -12.4253C22.3952 -10.9389 21.6663 -9.98125 20.5658 -9.98125C19.3509 -9.98125 18.6934 -11.0246 18.6934 -12.9398C18.6934 -13.4401 18.7506 -13.7116 18.9078 -13.9546C19.2223 -14.4405 19.894 -14.7836 20.5801 -14.7836Z">
</path></g>
<path d="M19.1289 -9.79687H71.4375" fill="none" stroke="#000000" stroke-miterlimit="10.0375" stroke-width="0.399994">
<path d="M19.1289 -23.9688H71.4375" fill="none" stroke="#000000" stroke-miterlimit="10.0375" stroke-width="0.399994">
<path d="M19.1289 -38.1407H71.4375" fill="none" stroke="#000000" stroke-miterlimit="10.0375" stroke-width="0.399994">
<path d="M19.1289 -66.4882H71.4375" fill="none" stroke="#000000" stroke-miterlimit="10.0375" stroke-width="0.399994">
<path d="M19.1289 -94.8359H71.4375" fill="none" stroke="#000000" stroke-miterlimit="10.0375" stroke-width="0.399994">
</path></path></path></path></path></path></path></path></path></path></path></path></path></path></path></path></path></path></path></path></path></path></path></path></path></path></path></g>
</svg></p>
<p>We can define identity thinning:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb5-1"><a href="https://oleg.fi/gists/atom.xml#cb5-1"></a>idₒ <span class="ot">:</span> n ⊑ₒ n</span>
<span id="cb5-2"><a href="https://oleg.fi/gists/atom.xml#cb5-2"></a>idₒ <span class="ot">{</span>zero<span class="ot">}</span>   <span class="ot">=</span> nilₒ</span>
<span id="cb5-3"><a href="https://oleg.fi/gists/atom.xml#cb5-3"></a>idₒ <span class="ot">{</span>suc n<span class="ot">}</span>  <span class="ot">=</span> keepₒ idₒ</span></code></pre></div>
<p>Note how it pattern matches on the size (of the context). That what makes it impossible to defined <code>Category</code> instance in Haskell.</p>
<p>We can also define composition, and weakening on top of the context</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb6-1"><a href="https://oleg.fi/gists/atom.xml#cb6-1"></a><span class="ot">_</span>⦂ₒ<span class="ot">_</span> <span class="ot">:</span> n ⊑ₒ m <span class="ot">→</span> m ⊑ₒ p <span class="ot">→</span> n ⊑ₒ p</span>
<span id="cb6-2"><a href="https://oleg.fi/gists/atom.xml#cb6-2"></a>δ₁        ⦂ₒ nilₒ      <span class="ot">=</span> δ₁</span>
<span id="cb6-3"><a href="https://oleg.fi/gists/atom.xml#cb6-3"></a>δ₁        ⦂ₒ skipₒ δ₂  <span class="ot">=</span> skipₒ <span class="ot">(</span>δ₁ ⦂ₒ δ₂<span class="ot">)</span></span>
<span id="cb6-4"><a href="https://oleg.fi/gists/atom.xml#cb6-4"></a>keepₒ δ₁  ⦂ₒ keepₒ δ₂  <span class="ot">=</span> keepₒ <span class="ot">(</span>δ₁ ⦂ₒ δ₂<span class="ot">)</span></span>
<span id="cb6-5"><a href="https://oleg.fi/gists/atom.xml#cb6-5"></a>skipₒ δ₁  ⦂ₒ keepₒ δ₂  <span class="ot">=</span> skipₒ <span class="ot">(</span>δ₁ ⦂ₒ δ₂<span class="ot">)</span></span>
<span id="cb6-6"><a href="https://oleg.fi/gists/atom.xml#cb6-6"></a></span>
<span id="cb6-7"><a href="https://oleg.fi/gists/atom.xml#cb6-7"></a>wkₒ <span class="ot">:</span> n ⊑ₒ suc n</span>
<span id="cb6-8"><a href="https://oleg.fi/gists/atom.xml#cb6-8"></a>wkₒ <span class="ot">=</span> skipₒ idₒ</span></code></pre></div>
<p>As said, the proofs about this formulation are simple. Plenty of equalities hold definitionally:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb7-1"><a href="https://oleg.fi/gists/atom.xml#cb7-1"></a>keep-id≡idₒ <span class="ot">:</span> keepₒ idₒ ≡ idₒ <span class="ot">{</span>suc n<span class="ot">}</span></span>
<span id="cb7-2"><a href="https://oleg.fi/gists/atom.xml#cb7-2"></a>keep-id≡idₒ <span class="ot">=</span> refl</span></code></pre></div>
<h2 id="separate-thinning">Separate thinning</h2>
<p>As mentioned in previous section the orthodox thinning is not very efficient. For example when implementing <em>normalization by evaluation</em> (NbE) we run into problems. There we need identity thinning when evaluating every application, so we will pay a price proportional to the size of the current context!</p>
<p>In his work Andras Kovacs makes a variant swapping <code>nilₒ</code> for <code>idₒ</code>. However then thinnings won't have unique representation anymore and proofs become more inconvenient to write.</p>
<p>We can make a special case for identity thinning without sacrificing unique representation for the cost of slightly more complicated definition. We just need to consider identity thinning and non-identity ones separately.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb8-1"><a href="https://oleg.fi/gists/atom.xml#cb8-1"></a><span class="kw">data</span> <span class="ot">_</span>⊏ₛ<span class="ot">_</span> <span class="ot">:</span> ℕ <span class="ot">→</span> ℕ <span class="ot">→</span> Type <span class="kw">where</span></span>
<span id="cb8-2"><a href="https://oleg.fi/gists/atom.xml#cb8-2"></a>  wkₛ    <span class="ot">:</span>           n      ⊏ₛ suc n</span>
<span id="cb8-3"><a href="https://oleg.fi/gists/atom.xml#cb8-3"></a>  keepₛ  <span class="ot">:</span> n ⊏ₛ m <span class="ot">→</span>  suc n  ⊏ₛ suc m</span>
<span id="cb8-4"><a href="https://oleg.fi/gists/atom.xml#cb8-4"></a>  skipₛ  <span class="ot">:</span> n ⊏ₛ m <span class="ot">→</span>  n      ⊏ₛ suc m</span>
<span id="cb8-5"><a href="https://oleg.fi/gists/atom.xml#cb8-5"></a></span>
<span id="cb8-6"><a href="https://oleg.fi/gists/atom.xml#cb8-6"></a><span class="kw">data</span> <span class="ot">_</span>⊑ₙ<span class="ot">_</span> <span class="ot">:</span> ℕ <span class="ot">→</span> ℕ <span class="ot">→</span> Type <span class="kw">where</span></span>
<span id="cb8-7"><a href="https://oleg.fi/gists/atom.xml#cb8-7"></a>  idₙ <span class="ot">:</span>              n ⊑ₙ n</span>
<span id="cb8-8"><a href="https://oleg.fi/gists/atom.xml#cb8-8"></a>  strict <span class="ot">:</span> n ⊏ₛ m <span class="ot">→</span>  n ⊑ₙ m</span>
<span id="cb8-9"><a href="https://oleg.fi/gists/atom.xml#cb8-9"></a></span>
<span id="cb8-10"><a href="https://oleg.fi/gists/atom.xml#cb8-10"></a>Strict <span class="ot">=</span> <span class="ot">_</span>⊏ₛ<span class="ot">_</span></span>
<span id="cb8-11"><a href="https://oleg.fi/gists/atom.xml#cb8-11"></a>NonStr <span class="ot">=</span> <span class="ot">_</span>⊑ₙ<span class="ot">_</span></span></code></pre></div>
<p>We can implement most operations without much problems. Note that also <code>wkₙ</code> has a small, context-size independent, representation.</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb9-1"><a href="https://oleg.fi/gists/atom.xml#cb9-1"></a>nilₙ <span class="ot">:</span> zero ⊑ₙ zero</span>
<span id="cb9-2"><a href="https://oleg.fi/gists/atom.xml#cb9-2"></a>nilₙ <span class="ot">=</span> idₙ</span>
<span id="cb9-3"><a href="https://oleg.fi/gists/atom.xml#cb9-3"></a></span>
<span id="cb9-4"><a href="https://oleg.fi/gists/atom.xml#cb9-4"></a>wkₙ <span class="ot">:</span> <span class="ot">∀</span> <span class="ot">{</span>n<span class="ot">}</span> <span class="ot">→</span> n ⊑ₙ suc n</span>
<span id="cb9-5"><a href="https://oleg.fi/gists/atom.xml#cb9-5"></a>wkₙ <span class="ot">=</span> strict wkₛ</span>
<span id="cb9-6"><a href="https://oleg.fi/gists/atom.xml#cb9-6"></a></span>
<span id="cb9-7"><a href="https://oleg.fi/gists/atom.xml#cb9-7"></a>skipₙ <span class="ot">:</span> n ⊑ₙ m <span class="ot">→</span> n ⊑ₙ suc m</span>
<span id="cb9-8"><a href="https://oleg.fi/gists/atom.xml#cb9-8"></a>skipₙ idₙ         <span class="ot">=</span> wkₙ</span>
<span id="cb9-9"><a href="https://oleg.fi/gists/atom.xml#cb9-9"></a>skipₙ <span class="ot">(</span>strict x<span class="ot">)</span>  <span class="ot">=</span> strict <span class="ot">(</span>skipₛ x<span class="ot">)</span></span>
<span id="cb9-10"><a href="https://oleg.fi/gists/atom.xml#cb9-10"></a></span>
<span id="cb9-11"><a href="https://oleg.fi/gists/atom.xml#cb9-11"></a>keepₙ <span class="ot">:</span> n ⊑ₙ m <span class="ot">→</span> suc n ⊑ₙ suc m</span>
<span id="cb9-12"><a href="https://oleg.fi/gists/atom.xml#cb9-12"></a>keepₙ idₙ         <span class="ot">=</span> idₙ</span>
<span id="cb9-13"><a href="https://oleg.fi/gists/atom.xml#cb9-13"></a>keepₙ <span class="ot">(</span>strict δ<span class="ot">)</span>  <span class="ot">=</span> strict <span class="ot">(</span>keepₛ δ<span class="ot">)</span></span>
<span id="cb9-14"><a href="https://oleg.fi/gists/atom.xml#cb9-14"></a></span>
<span id="cb9-15"><a href="https://oleg.fi/gists/atom.xml#cb9-15"></a>keep-id≡idₙ <span class="ot">:</span> keepₙ idₙ ≡ idₙ <span class="ot">{</span>suc n<span class="ot">}</span></span>
<span id="cb9-16"><a href="https://oleg.fi/gists/atom.xml#cb9-16"></a>keep-id≡idₙ <span class="ot">=</span> refl</span></code></pre></div>
<p>Composition is a bit more complicated then for orthodox variant, but not considerably:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb10-1"><a href="https://oleg.fi/gists/atom.xml#cb10-1"></a><span class="ot">_</span>⦂ₛ<span class="ot">_</span> <span class="ot">:</span> n ⊏ₛ m <span class="ot">→</span> m ⊏ₛ p <span class="ot">→</span> n ⊏ₛ p</span>
<span id="cb10-2"><a href="https://oleg.fi/gists/atom.xml#cb10-2"></a>δ₁        ⦂ₛ wkₛ       <span class="ot">=</span> skipₛ δ₁</span>
<span id="cb10-3"><a href="https://oleg.fi/gists/atom.xml#cb10-3"></a>δ₁        ⦂ₛ skipₛ δ₂  <span class="ot">=</span> skipₛ <span class="ot">(</span>δ₁ ⦂ₛ δ₂<span class="ot">)</span></span>
<span id="cb10-4"><a href="https://oleg.fi/gists/atom.xml#cb10-4"></a>wkₛ       ⦂ₛ keepₛ δ₂  <span class="ot">=</span> skipₛ δ₂</span>
<span id="cb10-5"><a href="https://oleg.fi/gists/atom.xml#cb10-5"></a>keepₛ δ₁  ⦂ₛ keepₛ δ₂  <span class="ot">=</span> keepₛ <span class="ot">(</span>δ₁ ⦂ₛ δ₂<span class="ot">)</span></span>
<span id="cb10-6"><a href="https://oleg.fi/gists/atom.xml#cb10-6"></a>skipₛ δ₁  ⦂ₛ keepₛ δ₂  <span class="ot">=</span> skipₛ <span class="ot">(</span>δ₁ ⦂ₛ δ₂<span class="ot">)</span></span>
<span id="cb10-7"><a href="https://oleg.fi/gists/atom.xml#cb10-7"></a></span>
<span id="cb10-8"><a href="https://oleg.fi/gists/atom.xml#cb10-8"></a><span class="ot">_</span>⦂ₙ<span class="ot">_</span> <span class="ot">:</span> n ⊑ₙ m <span class="ot">→</span> m ⊑ₙ p <span class="ot">→</span> n ⊑ₙ p</span>
<span id="cb10-9"><a href="https://oleg.fi/gists/atom.xml#cb10-9"></a>δ₁         ⦂ₙ idₙ         <span class="ot">=</span> δ₁</span>
<span id="cb10-10"><a href="https://oleg.fi/gists/atom.xml#cb10-10"></a>idₙ        ⦂ₙ strict δ₂        <span class="ot">=</span> strict δ₂</span>
<span id="cb10-11"><a href="https://oleg.fi/gists/atom.xml#cb10-11"></a>strict δ₁  ⦂ₙ strict δ₂  <span class="ot">=</span> strict <span class="ot">(</span>δ₁ ⦂ₛ δ₂<span class="ot">)</span></span></code></pre></div>
<p><strong>Are these orthodox and this thinning the same?</strong></p>
<p>Are <code>⊑ₒ</code> and <code>⊑ₙ</code> the same? We can construct an isomorphism between them to answer that question positively.</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb11-1"><a href="https://oleg.fi/gists/atom.xml#cb11-1"></a>Orth→NonStr <span class="ot">:</span> n ⊑ₒ m <span class="ot">→</span> n ⊑ₙ m</span>
<span id="cb11-2"><a href="https://oleg.fi/gists/atom.xml#cb11-2"></a>Orth→NonStr nilₒ        <span class="ot">=</span> nilₙ</span>
<span id="cb11-3"><a href="https://oleg.fi/gists/atom.xml#cb11-3"></a>Orth→NonStr <span class="ot">(</span>keepₒ δ<span class="ot">)</span>   <span class="ot">=</span> keepₙ <span class="ot">(</span>Orth→NonStr δ<span class="ot">)</span></span>
<span id="cb11-4"><a href="https://oleg.fi/gists/atom.xml#cb11-4"></a>Orth→NonStr <span class="ot">(</span>skipₒ δ<span class="ot">)</span>   <span class="ot">=</span> skipₙ <span class="ot">(</span>Orth→NonStr δ<span class="ot">)</span></span>
<span id="cb11-5"><a href="https://oleg.fi/gists/atom.xml#cb11-5"></a></span>
<span id="cb11-6"><a href="https://oleg.fi/gists/atom.xml#cb11-6"></a>Strict→Orth <span class="ot">:</span> n ⊏ₛ m <span class="ot">→</span> n ⊑ₒ m</span>
<span id="cb11-7"><a href="https://oleg.fi/gists/atom.xml#cb11-7"></a>Strict→Orth wkₛ         <span class="ot">=</span> wkₒ</span>
<span id="cb11-8"><a href="https://oleg.fi/gists/atom.xml#cb11-8"></a>Strict→Orth <span class="ot">(</span>keepₛ δ<span class="ot">)</span>   <span class="ot">=</span> keepₒ <span class="ot">(</span>Strict→Orth δ<span class="ot">)</span></span>
<span id="cb11-9"><a href="https://oleg.fi/gists/atom.xml#cb11-9"></a>Strict→Orth <span class="ot">(</span>skipₛ δ<span class="ot">)</span>   <span class="ot">=</span> skipₒ <span class="ot">(</span>Strict→Orth δ<span class="ot">)</span></span>
<span id="cb11-10"><a href="https://oleg.fi/gists/atom.xml#cb11-10"></a></span>
<span id="cb11-11"><a href="https://oleg.fi/gists/atom.xml#cb11-11"></a>NonStr→Orth <span class="ot">:</span> n ⊑ₙ m <span class="ot">→</span> n ⊑ₒ m</span>
<span id="cb11-12"><a href="https://oleg.fi/gists/atom.xml#cb11-12"></a>NonStr→Orth idₙ         <span class="ot">=</span> idₒ</span>
<span id="cb11-13"><a href="https://oleg.fi/gists/atom.xml#cb11-13"></a>NonStr→Orth <span class="ot">(</span>strict δ<span class="ot">)</span>  <span class="ot">=</span> Strict→Orth δ</span></code></pre></div>
<p>It is not enough to define conversion functions we also need to show that they cancel out. Luckily this is not difficult, we need few auxiliary homomorphism lemmas.</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb12-1"><a href="https://oleg.fi/gists/atom.xml#cb12-1"></a>NonStr→Orth-keepₒ <span class="ot">:</span> <span class="ot">(</span>δ <span class="ot">:</span> n ⊑ₙ m<span class="ot">)</span> <span class="ot">→</span> NonStr→Orth <span class="ot">(</span>keepₙ δ<span class="ot">)</span> ≡ keepₒ <span class="ot">(</span>NonStr→Orth δ<span class="ot">)</span></span>
<span id="cb12-2"><a href="https://oleg.fi/gists/atom.xml#cb12-2"></a>NonStr→Orth-skipₒ <span class="ot">:</span> <span class="ot">(</span>δ <span class="ot">:</span> n ⊑ₙ m<span class="ot">)</span> <span class="ot">→</span> NonStr→Orth <span class="ot">(</span>skipₙ δ<span class="ot">)</span> ≡ skipₒ <span class="ot">(</span>NonStr→Orth δ<span class="ot">)</span></span>
<span id="cb12-3"><a href="https://oleg.fi/gists/atom.xml#cb12-3"></a>Orth→NonStr-id≡id <span class="ot">:</span> <span class="ot">∀</span> n <span class="ot">→</span> Orth→NonStr idₒ ≡ idₙ <span class="ot">{</span>n<span class="ot">}</span></span></code></pre></div>
<div class="sourceCode" id="cb13"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb13-1"><a href="https://oleg.fi/gists/atom.xml#cb13-1"></a>NonStr→Orth-keepₒ idₙ         <span class="ot">=</span> refl</span>
<span id="cb13-2"><a href="https://oleg.fi/gists/atom.xml#cb13-2"></a>NonStr→Orth-keepₒ <span class="ot">(</span>strict <span class="ot">_)</span>  <span class="ot">=</span> refl</span>
<span id="cb13-3"><a href="https://oleg.fi/gists/atom.xml#cb13-3"></a></span>
<span id="cb13-4"><a href="https://oleg.fi/gists/atom.xml#cb13-4"></a>NonStr→Orth-skipₒ idₙ         <span class="ot">=</span> refl</span>
<span id="cb13-5"><a href="https://oleg.fi/gists/atom.xml#cb13-5"></a>NonStr→Orth-skipₒ <span class="ot">(</span>strict <span class="ot">_)</span>  <span class="ot">=</span> refl</span>
<span id="cb13-6"><a href="https://oleg.fi/gists/atom.xml#cb13-6"></a></span>
<span id="cb13-7"><a href="https://oleg.fi/gists/atom.xml#cb13-7"></a>Orth→NonStr-id≡id zero    <span class="ot">=</span> refl</span>
<span id="cb13-8"><a href="https://oleg.fi/gists/atom.xml#cb13-8"></a>Orth→NonStr-id≡id <span class="ot">(</span>suc n<span class="ot">)</span> <span class="ot">=</span> cong keepₙ <span class="ot">(</span>Orth→NonStr-id≡id n<span class="ot">)</span></span></code></pre></div>
<p>And finally we can show that <code>Orth→NonStr</code> <code>NonStr→Orth</code> are each others inverses.</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb14-1"><a href="https://oleg.fi/gists/atom.xml#cb14-1"></a>Orth→NonStr→Orth    <span class="ot">:</span> <span class="ot">(</span>δ <span class="ot">:</span> n ⊑ₒ m<span class="ot">)</span> <span class="ot">→</span> NonStr→Orth <span class="ot">(</span>Orth→NonStr δ<span class="ot">)</span> ≡ δ</span>
<span id="cb14-2"><a href="https://oleg.fi/gists/atom.xml#cb14-2"></a>Strict→Orth→NonStr  <span class="ot">:</span> <span class="ot">(</span>δ <span class="ot">:</span> n ⊏ₛ m<span class="ot">)</span> <span class="ot">→</span> Orth→NonStr <span class="ot">(</span>Strict→Orth δ<span class="ot">)</span> ≡ strict δ</span>
<span id="cb14-3"><a href="https://oleg.fi/gists/atom.xml#cb14-3"></a>NonStr→Orth→NonStr  <span class="ot">:</span> <span class="ot">(</span>δ <span class="ot">:</span> n ⊑ₙ m<span class="ot">)</span> <span class="ot">→</span> Orth→NonStr <span class="ot">(</span>NonStr→Orth δ<span class="ot">)</span> ≡ δ</span></code></pre></div>
<div class="sourceCode" id="cb15"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb15-1"><a href="https://oleg.fi/gists/atom.xml#cb15-1"></a>Orth→NonStr→Orth nilₒ       <span class="ot">=</span> refl</span>
<span id="cb15-2"><a href="https://oleg.fi/gists/atom.xml#cb15-2"></a>Orth→NonStr→Orth <span class="ot">(</span>keepₒ δ<span class="ot">)</span>  <span class="ot">=</span> NonStr→Orth-keepₒ <span class="ot">(</span>Orth→NonStr δ<span class="ot">)</span> ∙ cong keepₒ <span class="ot">(</span>Orth→NonStr→Orth δ<span class="ot">)</span></span>
<span id="cb15-3"><a href="https://oleg.fi/gists/atom.xml#cb15-3"></a>Orth→NonStr→Orth <span class="ot">(</span>skipₒ δ<span class="ot">)</span>  <span class="ot">=</span> NonStr→Orth-skipₒ <span class="ot">(</span>Orth→NonStr δ<span class="ot">)</span> ∙ cong skipₒ <span class="ot">(</span>Orth→NonStr→Orth δ<span class="ot">)</span></span>
<span id="cb15-4"><a href="https://oleg.fi/gists/atom.xml#cb15-4"></a></span>
<span id="cb15-5"><a href="https://oleg.fi/gists/atom.xml#cb15-5"></a>Strict→Orth→NonStr wkₛ        <span class="ot">=</span> cong skipₙ <span class="ot">(</span>Orth→NonStr-id≡id <span class="ot">_)</span></span>
<span id="cb15-6"><a href="https://oleg.fi/gists/atom.xml#cb15-6"></a>Strict→Orth→NonStr <span class="ot">(</span>keepₛ δ<span class="ot">)</span>  <span class="ot">=</span> cong keepₙ <span class="ot">(</span>Strict→Orth→NonStr δ<span class="ot">)</span></span>
<span id="cb15-7"><a href="https://oleg.fi/gists/atom.xml#cb15-7"></a>Strict→Orth→NonStr <span class="ot">(</span>skipₛ δ<span class="ot">)</span>  <span class="ot">=</span> cong skipₙ <span class="ot">(</span>Strict→Orth→NonStr δ<span class="ot">)</span></span>
<span id="cb15-8"><a href="https://oleg.fi/gists/atom.xml#cb15-8"></a></span>
<span id="cb15-9"><a href="https://oleg.fi/gists/atom.xml#cb15-9"></a>NonStr→Orth→NonStr idₙ         <span class="ot">=</span> Orth→NonStr-id≡id <span class="ot">_</span></span>
<span id="cb15-10"><a href="https://oleg.fi/gists/atom.xml#cb15-10"></a>NonStr→Orth→NonStr <span class="ot">(</span>strict δ<span class="ot">)</span>  <span class="ot">=</span> Strict→Orth→NonStr δ</span></code></pre></div>
<p>In <em>Cubical Agda</em> we can promote the above isomorphism to an equality.</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb16-1"><a href="https://oleg.fi/gists/atom.xml#cb16-1"></a>Orth≡NonStr-pointwise <span class="ot">:</span> <span class="ot">(</span>n ⊑ₒ m<span class="ot">)</span> ≡ <span class="ot">(</span>n ⊑ₙ m<span class="ot">)</span></span>
<span id="cb16-2"><a href="https://oleg.fi/gists/atom.xml#cb16-2"></a>Orth≡NonStr-pointwise <span class="ot">=</span> isoToPath</span>
<span id="cb16-3"><a href="https://oleg.fi/gists/atom.xml#cb16-3"></a>  <span class="ot">(</span>iso Orth→NonStr NonStr→Orth NonStr→Orth→NonStr Orth→NonStr→Orth<span class="ot">)</span></span>
<span id="cb16-4"><a href="https://oleg.fi/gists/atom.xml#cb16-4"></a></span>
<span id="cb16-5"><a href="https://oleg.fi/gists/atom.xml#cb16-5"></a>Orth≡NonStr <span class="ot">:</span> Orth ≡ NonStr</span>
<span id="cb16-6"><a href="https://oleg.fi/gists/atom.xml#cb16-6"></a>Orth≡NonStr i n m <span class="ot">=</span> Orth≡NonStr-pointwise <span class="ot">{</span>n<span class="ot">}</span> <span class="ot">{</span>m<span class="ot">}</span> i</span></code></pre></div>
<p>But are they still the same?</p>
<p>Even the types are the same, are the operations we defined on them the same? We still need to show that the operations give the same results.</p>
<p>I'll define a simplified &quot;category operations&quot; type, with an identity and a composition:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb17-1"><a href="https://oleg.fi/gists/atom.xml#cb17-1"></a>CatOps <span class="ot">:</span> <span class="ot">(</span>ℕ <span class="ot">→</span> ℕ <span class="ot">→</span> Type<span class="ot">)</span> <span class="ot">→</span> Type</span>
<span id="cb17-2"><a href="https://oleg.fi/gists/atom.xml#cb17-2"></a>CatOps <span class="ot">_</span>↝<span class="ot">_</span></span>
<span id="cb17-3"><a href="https://oleg.fi/gists/atom.xml#cb17-3"></a>  <span class="ot">=</span> <span class="ot">(∀</span> <span class="ot">{</span>n<span class="ot">}</span> <span class="ot">→</span> n ↝ n<span class="ot">)</span>                       <span class="co">-- identity</span></span>
<span id="cb17-4"><a href="https://oleg.fi/gists/atom.xml#cb17-4"></a>  × <span class="ot">(∀</span> <span class="ot">{</span>n m p<span class="ot">}</span> <span class="ot">→</span> n ↝ m <span class="ot">→</span> m ↝ p <span class="ot">→</span> n ↝ p <span class="ot">)</span>  <span class="co">-- composition</span></span></code></pre></div>
<p>Orthodox category ops are:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb18-1"><a href="https://oleg.fi/gists/atom.xml#cb18-1"></a>CatOps-Orth <span class="ot">:</span> CatOps Orth</span>
<span id="cb18-2"><a href="https://oleg.fi/gists/atom.xml#cb18-2"></a>CatOps-Orth <span class="ot">=</span> idₒ , <span class="ot">_</span>⦂ₒ<span class="ot">_</span></span></code></pre></div>
<p>And NonStr ops are:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb19-1"><a href="https://oleg.fi/gists/atom.xml#cb19-1"></a>CatOps-NonStr <span class="ot">:</span> CatOps NonStr</span>
<span id="cb19-2"><a href="https://oleg.fi/gists/atom.xml#cb19-2"></a>CatOps-NonStr <span class="ot">=</span> idₙ , <span class="ot">_</span>⦂ₙ<span class="ot">_</span></span></code></pre></div>
<p>And we can show transport orthodox ops along <code>Orth≡NonStr</code> to get other variant</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb20-1"><a href="https://oleg.fi/gists/atom.xml#cb20-1"></a>CatOps-NonStrₜ <span class="ot">:</span> CatOps NonStr</span>
<span id="cb20-2"><a href="https://oleg.fi/gists/atom.xml#cb20-2"></a>CatOps-NonStrₜ <span class="ot">=</span> subst CatOps Orth≡NonStr CatOps-Orth</span></code></pre></div>
<p>The goal is to show that all these are equal.</p>
<p>First We can construct a path between two <code>CatOps NonStr</code> structures,</p>
<p>For identity part we need identity homomorphism:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb21-1"><a href="https://oleg.fi/gists/atom.xml#cb21-1"></a>Orth→NonStr-id <span class="ot">:</span> Orth→NonStr idₒ ≡ idₙ <span class="ot">{</span>n<span class="ot">}</span></span>
<span id="cb21-2"><a href="https://oleg.fi/gists/atom.xml#cb21-2"></a>Orth→NonStr-id <span class="ot">{</span>zero<span class="ot">}</span>  <span class="ot">=</span> refl</span>
<span id="cb21-3"><a href="https://oleg.fi/gists/atom.xml#cb21-3"></a>Orth→NonStr-id <span class="ot">{</span>suc n<span class="ot">}</span> <span class="ot">=</span> cong keepₙ <span class="ot">(</span>Orth→NonStr-id <span class="ot">{</span>n<span class="ot">})</span></span></code></pre></div>
<p>Then we can extract the transported identity, and show it is the same as <code>idₙ</code>:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb22-1"><a href="https://oleg.fi/gists/atom.xml#cb22-1"></a>idₙₜ <span class="ot">:</span> n ⊑ₙ n</span>
<span id="cb22-2"><a href="https://oleg.fi/gists/atom.xml#cb22-2"></a>idₙₜ <span class="ot">=</span> fst CatOps-NonStrₜ</span>
<span id="cb22-3"><a href="https://oleg.fi/gists/atom.xml#cb22-3"></a></span>
<span id="cb22-4"><a href="https://oleg.fi/gists/atom.xml#cb22-4"></a>idₙₜ≡idₙ <span class="ot">:</span> idₙₜ ≡ idₙ <span class="ot">{</span>n<span class="ot">}</span></span>
<span id="cb22-5"><a href="https://oleg.fi/gists/atom.xml#cb22-5"></a>idₙₜ≡idₙ <span class="ot">=</span> transportRefl <span class="ot">(</span>Orth→NonStr idₒ<span class="ot">)</span> ∙ Orth→NonStr-id</span></code></pre></div>
<p>The composition is slightly more complicated.</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb23-1"><a href="https://oleg.fi/gists/atom.xml#cb23-1"></a>skip-⦂ₙ <span class="ot">:</span> <span class="ot">(</span>δ₁ <span class="ot">:</span> n ⊑ₙ m<span class="ot">)</span> <span class="ot">→</span> <span class="ot">(</span>δ₂ <span class="ot">:</span> m ⊑ₙ p<span class="ot">)</span></span>
<span id="cb23-2"><a href="https://oleg.fi/gists/atom.xml#cb23-2"></a>        <span class="ot">→</span> skipₙ <span class="ot">(</span>δ₁ ⦂ₙ δ₂<span class="ot">)</span> ≡ <span class="ot">(</span>δ₁ ⦂ₙ skipₙ δ₂<span class="ot">)</span></span>
<span id="cb23-3"><a href="https://oleg.fi/gists/atom.xml#cb23-3"></a>skip-⦂ₙ idₙ         idₙ         <span class="ot">=</span> refl</span>
<span id="cb23-4"><a href="https://oleg.fi/gists/atom.xml#cb23-4"></a>skip-⦂ₙ <span class="ot">(</span>strict <span class="ot">_)</span>  idₙ         <span class="ot">=</span> refl</span>
<span id="cb23-5"><a href="https://oleg.fi/gists/atom.xml#cb23-5"></a>skip-⦂ₙ idₙ         <span class="ot">(</span>strict <span class="ot">_)</span>  <span class="ot">=</span> refl</span>
<span id="cb23-6"><a href="https://oleg.fi/gists/atom.xml#cb23-6"></a>skip-⦂ₙ <span class="ot">(</span>strict <span class="ot">_)</span>  <span class="ot">(</span>strict <span class="ot">_)</span>  <span class="ot">=</span> refl</span>
<span id="cb23-7"><a href="https://oleg.fi/gists/atom.xml#cb23-7"></a></span>
<span id="cb23-8"><a href="https://oleg.fi/gists/atom.xml#cb23-8"></a>skip-keep-⦂ₙ <span class="ot">:</span> <span class="ot">(</span>δ₁ <span class="ot">:</span> n ⊑ₙ m<span class="ot">)</span> <span class="ot">(</span>δ₂ <span class="ot">:</span> m ⊑ₙ p<span class="ot">)</span></span>
<span id="cb23-9"><a href="https://oleg.fi/gists/atom.xml#cb23-9"></a>             <span class="ot">→</span> skipₙ <span class="ot">(</span>δ₁ ⦂ₙ δ₂<span class="ot">)</span> ≡ <span class="ot">(</span>skipₙ δ₁ ⦂ₙ keepₙ δ₂<span class="ot">)</span></span>
<span id="cb23-10"><a href="https://oleg.fi/gists/atom.xml#cb23-10"></a>skip-keep-⦂ₙ δ₁          idₙ         <span class="ot">=</span> refl</span>
<span id="cb23-11"><a href="https://oleg.fi/gists/atom.xml#cb23-11"></a>skip-keep-⦂ₙ idₙ         <span class="ot">(</span>strict <span class="ot">_)</span>  <span class="ot">=</span> refl</span>
<span id="cb23-12"><a href="https://oleg.fi/gists/atom.xml#cb23-12"></a>skip-keep-⦂ₙ <span class="ot">(</span>strict <span class="ot">_)</span>  <span class="ot">(</span>strict <span class="ot">_)</span>  <span class="ot">=</span> refl</span>
<span id="cb23-13"><a href="https://oleg.fi/gists/atom.xml#cb23-13"></a></span>
<span id="cb23-14"><a href="https://oleg.fi/gists/atom.xml#cb23-14"></a>keep-keep-⦂ₙ <span class="ot">:</span> <span class="ot">(</span>δ₁ <span class="ot">:</span> n ⊑ₙ m<span class="ot">)</span> <span class="ot">(</span>δ₂ <span class="ot">:</span> m ⊑ₙ p<span class="ot">)</span></span>
<span id="cb23-15"><a href="https://oleg.fi/gists/atom.xml#cb23-15"></a>             <span class="ot">→</span> keepₙ <span class="ot">(</span>δ₁ ⦂ₙ δ₂<span class="ot">)</span> ≡ <span class="ot">(</span>keepₙ δ₁ ⦂ₙ keepₙ δ₂<span class="ot">)</span></span>
<span id="cb23-16"><a href="https://oleg.fi/gists/atom.xml#cb23-16"></a>keep-keep-⦂ₙ δ₁          idₙ         <span class="ot">=</span> refl</span>
<span id="cb23-17"><a href="https://oleg.fi/gists/atom.xml#cb23-17"></a>keep-keep-⦂ₙ idₙ         <span class="ot">(</span>strict x<span class="ot">)</span>  <span class="ot">=</span> refl</span>
<span id="cb23-18"><a href="https://oleg.fi/gists/atom.xml#cb23-18"></a>keep-keep-⦂ₙ <span class="ot">(</span>strict <span class="ot">_)</span>  <span class="ot">(</span>strict <span class="ot">_)</span>  <span class="ot">=</span> refl</span></code></pre></div>
<p>We can show that <code>Orth→NonStr</code> preserves composition.</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb24-1"><a href="https://oleg.fi/gists/atom.xml#cb24-1"></a>Orth→NonStr-⦂ <span class="ot">:</span> <span class="ot">(</span>δ₁ <span class="ot">:</span> n ⊑ₒ m<span class="ot">)</span> <span class="ot">(</span>δ₂ <span class="ot">:</span> m ⊑ₒ p<span class="ot">)</span></span>
<span id="cb24-2"><a href="https://oleg.fi/gists/atom.xml#cb24-2"></a>              <span class="ot">→</span> Orth→NonStr <span class="ot">(</span>δ₁ ⦂ₒ δ₂<span class="ot">)</span> ≡ Orth→NonStr δ₁ ⦂ₙ Orth→NonStr δ₂</span>
<span id="cb24-3"><a href="https://oleg.fi/gists/atom.xml#cb24-3"></a>Orth→NonStr-⦂ δ₁          nilₒ        <span class="ot">=</span> refl</span>
<span id="cb24-4"><a href="https://oleg.fi/gists/atom.xml#cb24-4"></a>Orth→NonStr-⦂ δ₁          <span class="ot">(</span>skipₒ δ₂<span class="ot">)</span>  <span class="ot">=</span> cong skipₙ <span class="ot">(</span>Orth→NonStr-⦂ δ₁ δ₂<span class="ot">)</span> ∙ skip-⦂ₙ <span class="ot">(</span>Orth→NonStr δ₁<span class="ot">)</span> <span class="ot">(</span>Orth→NonStr δ₂<span class="ot">)</span></span>
<span id="cb24-5"><a href="https://oleg.fi/gists/atom.xml#cb24-5"></a>Orth→NonStr-⦂ <span class="ot">(</span>skipₒ δ₁<span class="ot">)</span>  <span class="ot">(</span>keepₒ δ₂<span class="ot">)</span>  <span class="ot">=</span> cong skipₙ <span class="ot">(</span>Orth→NonStr-⦂ δ₁ δ₂<span class="ot">)</span> ∙ skip-keep-⦂ₙ <span class="ot">(</span>Orth→NonStr δ₁<span class="ot">)</span> <span class="ot">(</span>Orth→NonStr δ₂<span class="ot">)</span></span>
<span id="cb24-6"><a href="https://oleg.fi/gists/atom.xml#cb24-6"></a>Orth→NonStr-⦂ <span class="ot">(</span>keepₒ δ₁<span class="ot">)</span>  <span class="ot">(</span>keepₒ δ₂<span class="ot">)</span>  <span class="ot">=</span> cong keepₙ <span class="ot">(</span>Orth→NonStr-⦂ δ₁ δ₂<span class="ot">)</span> ∙ keep-keep-⦂ₙ <span class="ot">(</span>Orth→NonStr δ₁<span class="ot">)</span> <span class="ot">(</span>Orth→NonStr δ₂<span class="ot">)</span></span></code></pre></div>
<p>Using the above fact, we can show that  and  are pointwise equal. The proof looks complicated, but is pretty straightforward in the end.</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb25-1"><a href="https://oleg.fi/gists/atom.xml#cb25-1"></a><span class="ot">_</span>⦂ₙₜ<span class="ot">_</span> <span class="ot">:</span> n ⊑ₙ m <span class="ot">→</span> m ⊑ₙ p <span class="ot">→</span> n ⊑ₙ p</span>
<span id="cb25-2"><a href="https://oleg.fi/gists/atom.xml#cb25-2"></a><span class="ot">_</span>⦂ₙₜ<span class="ot">_</span> <span class="ot">=</span> snd CatOps-NonStrₜ</span>
<span id="cb25-3"><a href="https://oleg.fi/gists/atom.xml#cb25-3"></a></span>
<span id="cb25-4"><a href="https://oleg.fi/gists/atom.xml#cb25-4"></a>⦂ₙₜ≡⦂ₙ <span class="ot">:</span> <span class="ot">(</span>δ₁ <span class="ot">:</span> n ⊑ₙ m<span class="ot">)</span> <span class="ot">(</span>δ₂ <span class="ot">:</span> m ⊑ₙ p<span class="ot">)</span> <span class="ot">→</span> δ₁ ⦂ₙₜ δ₂ ≡ δ₁ ⦂ₙ δ₂</span>
<span id="cb25-5"><a href="https://oleg.fi/gists/atom.xml#cb25-5"></a>⦂ₙₜ≡⦂ₙ <span class="ot">{</span>n<span class="ot">}</span> <span class="ot">{</span>m<span class="ot">}</span> <span class="ot">{</span>p<span class="ot">}</span> δ₁ δ₂ <span class="ot">=</span></span>
<span id="cb25-6"><a href="https://oleg.fi/gists/atom.xml#cb25-6"></a>  transport refl expr₁  ≡⟨ transportRefl expr₁ ⟩</span>
<span id="cb25-7"><a href="https://oleg.fi/gists/atom.xml#cb25-7"></a>  expr₁                 ≡⟨ expr₁≡expr₂ ⟩</span>
<span id="cb25-8"><a href="https://oleg.fi/gists/atom.xml#cb25-8"></a>  expr₂                 ≡⟨ Orth→NonStr-⦂ <span class="ot">(</span>NonStr→Orth δ₁<span class="ot">)</span> <span class="ot">(</span>NonStr→Orth δ₂<span class="ot">)</span> ⟩</span>
<span id="cb25-9"><a href="https://oleg.fi/gists/atom.xml#cb25-9"></a>  expr₃                 ≡⟨ <span class="ot">(λ</span> i <span class="ot">→</span> NonStr→Orth→NonStr δ₁ i ⦂ₙ</span>
<span id="cb25-10"><a href="https://oleg.fi/gists/atom.xml#cb25-10"></a>                                  NonStr→Orth→NonStr δ₂ i<span class="ot">)</span> ⟩</span>
<span id="cb25-11"><a href="https://oleg.fi/gists/atom.xml#cb25-11"></a>  δ₁ ⦂ₙ δ₂ ∎</span>
<span id="cb25-12"><a href="https://oleg.fi/gists/atom.xml#cb25-12"></a>  <span class="kw">where</span></span>
<span id="cb25-13"><a href="https://oleg.fi/gists/atom.xml#cb25-13"></a>    expr₁ <span class="ot">=</span> Orth→NonStr <span class="ot">(</span>NonStr→Orth <span class="ot">(</span>transport refl δ₁<span class="ot">)</span> ⦂ₒ</span>
<span id="cb25-14"><a href="https://oleg.fi/gists/atom.xml#cb25-14"></a>                         NonStr→Orth <span class="ot">(</span>transport refl δ₂<span class="ot">))</span></span>
<span id="cb25-15"><a href="https://oleg.fi/gists/atom.xml#cb25-15"></a>    expr₂ <span class="ot">=</span> Orth→NonStr <span class="ot">(</span>NonStr→Orth δ₁ ⦂ₒ NonStr→Orth δ₂<span class="ot">)</span></span>
<span id="cb25-16"><a href="https://oleg.fi/gists/atom.xml#cb25-16"></a>    expr₃ <span class="ot">=</span> Orth→NonStr <span class="ot">(</span>NonStr→Orth δ₁<span class="ot">)</span> ⦂ₙ Orth→NonStr <span class="ot">(</span>NonStr→Orth δ₂<span class="ot">)</span></span>
<span id="cb25-17"><a href="https://oleg.fi/gists/atom.xml#cb25-17"></a></span>
<span id="cb25-18"><a href="https://oleg.fi/gists/atom.xml#cb25-18"></a>    expr₁≡expr₂ <span class="ot">:</span> expr₁ ≡ expr₂</span>
<span id="cb25-19"><a href="https://oleg.fi/gists/atom.xml#cb25-19"></a>    expr₁≡expr₂ i <span class="ot">=</span> Orth→NonStr <span class="ot">(</span>NonStr→Orth <span class="ot">(</span>transportRefl δ₁ i<span class="ot">)</span> ⦂ₒ</span>
<span id="cb25-20"><a href="https://oleg.fi/gists/atom.xml#cb25-20"></a>                                 NonStr→Orth <span class="ot">(</span>transportRefl δ₂ i<span class="ot">))</span></span></code></pre></div>
<p>And finally we can state that first equality:</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb26-1"><a href="https://oleg.fi/gists/atom.xml#cb26-1"></a>CatOps-NonStr≡ <span class="ot">:</span> CatOps-NonStrₜ ≡ CatOps-NonStr</span>
<span id="cb26-2"><a href="https://oleg.fi/gists/atom.xml#cb26-2"></a>CatOps-NonStr≡ i <span class="ot">=</span> idₙₜ≡idₙ i , <span class="ot">λ</span> δ₁ δ₂ <span class="ot">→</span> ⦂ₙₜ≡⦂ₙ δ₁ δ₂ i</span></code></pre></div>
<p>and the quality we actually wanted to say, that <code>CatOps-Orth</code> and <code>CatOps-NonStr</code> are equal (if we equate their types by <code>Orth≡NonStr</code>)!!!</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb27-1"><a href="https://oleg.fi/gists/atom.xml#cb27-1"></a>CatOps-Orth≡NonStr <span class="ot">:</span> <span class="ot">(λ</span> i <span class="ot">→</span> CatOps <span class="ot">(</span>Orth≡NonStr i<span class="ot">))</span></span>
<span id="cb27-2"><a href="https://oleg.fi/gists/atom.xml#cb27-2"></a>  [ CatOps-Orth ≡ CatOps-NonStr ]</span>
<span id="cb27-3"><a href="https://oleg.fi/gists/atom.xml#cb27-3"></a>CatOps-Orth≡NonStr <span class="ot">=</span> toPathP CatOps-NonStr≡</span></code></pre></div>
<h2 id="higher-inductive-type">Higher-inductive type</h2>
<p><em>Cubical Agda</em> also supports <em>higher inductive types</em> (HITs), i.e. types with additional equalities. We can formalize Andras better performing thinning as a HIT, by throwing in an additional equality. <em>Agda</em> will then ensure that we always respect it.</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb28-1"><a href="https://oleg.fi/gists/atom.xml#cb28-1"></a><span class="kw">data</span> <span class="ot">_</span>⊑ₕ<span class="ot">_</span> <span class="ot">:</span> ℕ <span class="ot">→</span> ℕ <span class="ot">→</span> Type <span class="kw">where</span></span>
<span id="cb28-2"><a href="https://oleg.fi/gists/atom.xml#cb28-2"></a>  idₕ    <span class="ot">:</span>           n      ⊑ₕ n</span>
<span id="cb28-3"><a href="https://oleg.fi/gists/atom.xml#cb28-3"></a>  keepₕ  <span class="ot">:</span> n ⊑ₕ m <span class="ot">→</span>  suc n  ⊑ₕ suc m</span>
<span id="cb28-4"><a href="https://oleg.fi/gists/atom.xml#cb28-4"></a>  skipₕ  <span class="ot">:</span> n ⊑ₕ m <span class="ot">→</span>  n      ⊑ₕ suc m</span>
<span id="cb28-5"><a href="https://oleg.fi/gists/atom.xml#cb28-5"></a></span>
<span id="cb28-6"><a href="https://oleg.fi/gists/atom.xml#cb28-6"></a>  <span class="co">-- it is what it says: keep idₕ ≡ idₕ</span></span>
<span id="cb28-7"><a href="https://oleg.fi/gists/atom.xml#cb28-7"></a>  keep-id≡idₕ <span class="ot">:</span> <span class="ot">∀</span> n <span class="ot">→</span> keepₕ <span class="ot">(</span>idₕ <span class="ot">{</span>n <span class="ot">=</span> n<span class="ot">})</span> ≡ idₕ <span class="ot">{</span>n <span class="ot">=</span> suc n<span class="ot">}</span></span>
<span id="cb28-8"><a href="https://oleg.fi/gists/atom.xml#cb28-8"></a></span>
<span id="cb28-9"><a href="https://oleg.fi/gists/atom.xml#cb28-9"></a>HIT <span class="ot">=</span> <span class="ot">_</span>⊑ₕ<span class="ot">_</span></span></code></pre></div>
<p>Composition for HIT-thinning looks very similar to the orthodox version...</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb29-1"><a href="https://oleg.fi/gists/atom.xml#cb29-1"></a><span class="ot">_</span>⦂ₕ<span class="ot">_</span> <span class="ot">:</span> n ⊑ₕ m <span class="ot">→</span> m ⊑ₕ p <span class="ot">→</span> n ⊑ₕ p</span>
<span id="cb29-2"><a href="https://oleg.fi/gists/atom.xml#cb29-2"></a>δ₁        ⦂ₕ idₕ       <span class="ot">=</span> δ₁</span>
<span id="cb29-3"><a href="https://oleg.fi/gists/atom.xml#cb29-3"></a>δ₁        ⦂ₕ skipₕ δ₂  <span class="ot">=</span> skipₕ <span class="ot">(</span>δ₁ ⦂ₕ δ₂<span class="ot">)</span></span>
<span id="cb29-4"><a href="https://oleg.fi/gists/atom.xml#cb29-4"></a>idₕ       ⦂ₕ keepₕ δ₂  <span class="ot">=</span> keepₕ δ₂</span>
<span id="cb29-5"><a href="https://oleg.fi/gists/atom.xml#cb29-5"></a>keepₕ δ₁  ⦂ₕ keepₕ δ₂  <span class="ot">=</span> keepₕ <span class="ot">(</span>δ₁ ⦂ₕ δ₂<span class="ot">)</span></span>
<span id="cb29-6"><a href="https://oleg.fi/gists/atom.xml#cb29-6"></a>skipₕ δ₁  ⦂ₕ keepₕ δ₂  <span class="ot">=</span> skipₕ <span class="ot">(</span>δ₁ ⦂ₕ δ₂<span class="ot">)</span></span></code></pre></div>
<p>... except that we have extra cases which deal with an extra equality we threw in.</p>
<p>We have to show that equations are consistent with <code>keep-id≡idₕ</code> equality. The goals may be obfuscated, but relatively easy to fill.</p>
<div class="sourceCode" id="cb30"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb30-1"><a href="https://oleg.fi/gists/atom.xml#cb30-1"></a>keep-id≡idₕ n i ⦂ₕ keepₕ δ₂ <span class="ot">=</span> goal i</span>
<span id="cb30-2"><a href="https://oleg.fi/gists/atom.xml#cb30-2"></a>  <span class="kw">where</span></span>
<span id="cb30-3"><a href="https://oleg.fi/gists/atom.xml#cb30-3"></a>  lemma <span class="ot">:</span> <span class="ot">∀</span> <span class="ot">{</span>n m<span class="ot">}</span> <span class="ot">→</span> <span class="ot">(</span>δ <span class="ot">:</span> HIT n m<span class="ot">)</span> <span class="ot">→</span> idₕ ⦂ₕ δ ≡ δ</span>
<span id="cb30-4"><a href="https://oleg.fi/gists/atom.xml#cb30-4"></a>  lemma idₕ <span class="ot">=</span> refl</span>
<span id="cb30-5"><a href="https://oleg.fi/gists/atom.xml#cb30-5"></a>  lemma <span class="ot">(</span>keepₕ δ<span class="ot">)</span> <span class="ot">=</span> refl</span>
<span id="cb30-6"><a href="https://oleg.fi/gists/atom.xml#cb30-6"></a>  lemma <span class="ot">(</span>skipₕ δ<span class="ot">)</span> <span class="ot">=</span> cong skipₕ <span class="ot">(</span>lemma δ<span class="ot">)</span></span>
<span id="cb30-7"><a href="https://oleg.fi/gists/atom.xml#cb30-7"></a>  lemma <span class="ot">(</span>keep-id≡idₕ n i<span class="ot">)</span> j <span class="ot">=</span> keep-id≡idₕ n i</span>
<span id="cb30-8"><a href="https://oleg.fi/gists/atom.xml#cb30-8"></a></span>
<span id="cb30-9"><a href="https://oleg.fi/gists/atom.xml#cb30-9"></a>  goal <span class="ot">:</span> keepₕ <span class="ot">(</span>idₕ ⦂ₕ δ₂<span class="ot">)</span> ≡ keepₕ δ₂</span>
<span id="cb30-10"><a href="https://oleg.fi/gists/atom.xml#cb30-10"></a>  goal i <span class="ot">=</span> keepₕ <span class="ot">(</span>lemma δ₂ i<span class="ot">)</span></span>
<span id="cb30-11"><a href="https://oleg.fi/gists/atom.xml#cb30-11"></a></span>
<span id="cb30-12"><a href="https://oleg.fi/gists/atom.xml#cb30-12"></a>idₕ               ⦂ₕ keep-id≡idₕ n i <span class="ot">=</span> keep-id≡idₕ n i</span>
<span id="cb30-13"><a href="https://oleg.fi/gists/atom.xml#cb30-13"></a>keepₕ δ₁          ⦂ₕ keep-id≡idₕ n i <span class="ot">=</span> keepₕ δ₁</span>
<span id="cb30-14"><a href="https://oleg.fi/gists/atom.xml#cb30-14"></a>skipₕ δ₁          ⦂ₕ keep-id≡idₕ n i <span class="ot">=</span> skipₕ δ₁</span>
<span id="cb30-15"><a href="https://oleg.fi/gists/atom.xml#cb30-15"></a>keep-id≡idₕ <span class="ot">.</span>n i  ⦂ₕ keep-id≡idₕ n j <span class="ot">=</span> goal i j</span>
<span id="cb30-16"><a href="https://oleg.fi/gists/atom.xml#cb30-16"></a>  <span class="kw">where</span></span>
<span id="cb30-17"><a href="https://oleg.fi/gists/atom.xml#cb30-17"></a>   goal <span class="ot">:</span> Square refl <span class="ot">(</span>keep-id≡idₕ n<span class="ot">)</span> refl <span class="ot">(</span>keep-id≡idₕ n<span class="ot">)</span></span>
<span id="cb30-18"><a href="https://oleg.fi/gists/atom.xml#cb30-18"></a>   goal i j <span class="ot">=</span> keep-id≡idₕ n <span class="ot">(</span>i ∧ j<span class="ot">)</span></span></code></pre></div>
<p>We can try to prove that the HIT variant is the same as orthodox one. The conversion functions are extremely simple, because the data-type is almost the same:</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb31-1"><a href="https://oleg.fi/gists/atom.xml#cb31-1"></a>Orth→HIT <span class="ot">:</span> n ⊑ₒ m <span class="ot">→</span> n ⊑ₕ m</span>
<span id="cb31-2"><a href="https://oleg.fi/gists/atom.xml#cb31-2"></a>Orth→HIT nilₒ      <span class="ot">=</span> idₕ</span>
<span id="cb31-3"><a href="https://oleg.fi/gists/atom.xml#cb31-3"></a>Orth→HIT <span class="ot">(</span>keepₒ δ<span class="ot">)</span> <span class="ot">=</span> keepₕ <span class="ot">(</span>Orth→HIT δ<span class="ot">)</span></span>
<span id="cb31-4"><a href="https://oleg.fi/gists/atom.xml#cb31-4"></a>Orth→HIT <span class="ot">(</span>skipₒ δ<span class="ot">)</span> <span class="ot">=</span> skipₕ <span class="ot">(</span>Orth→HIT δ<span class="ot">)</span></span>
<span id="cb31-5"><a href="https://oleg.fi/gists/atom.xml#cb31-5"></a></span>
<span id="cb31-6"><a href="https://oleg.fi/gists/atom.xml#cb31-6"></a>HIT→Orth <span class="ot">:</span> n ⊑ₕ m <span class="ot">→</span> n ⊑ₒ m</span>
<span id="cb31-7"><a href="https://oleg.fi/gists/atom.xml#cb31-7"></a>HIT→Orth idₕ                <span class="ot">=</span> idₒ</span>
<span id="cb31-8"><a href="https://oleg.fi/gists/atom.xml#cb31-8"></a>HIT→Orth <span class="ot">(</span>keepₕ δ<span class="ot">)</span>          <span class="ot">=</span> keepₒ <span class="ot">(</span>HIT→Orth δ<span class="ot">)</span></span>
<span id="cb31-9"><a href="https://oleg.fi/gists/atom.xml#cb31-9"></a>HIT→Orth <span class="ot">(</span>skipₕ δ<span class="ot">)</span>          <span class="ot">=</span> skipₒ <span class="ot">(</span>HIT→Orth δ<span class="ot">)</span></span>
<span id="cb31-10"><a href="https://oleg.fi/gists/atom.xml#cb31-10"></a>HIT→Orth <span class="ot">(</span>keep-id≡idₕ n i<span class="ot">)</span>  <span class="ot">=</span> keep-id≡idₒ <span class="ot">{</span>n<span class="ot">}</span> i</span></code></pre></div>
<p>Converting orthodox representation to HIT and back doesn't change the thinning. The proof is straightforward structural induction.</p>
<div class="sourceCode" id="cb32"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb32-1"><a href="https://oleg.fi/gists/atom.xml#cb32-1"></a>Orth→HIT→Orth <span class="ot">:</span> <span class="ot">(</span>δ <span class="ot">:</span> Orth n m<span class="ot">)</span> <span class="ot">→</span> HIT→Orth <span class="ot">(</span>Orth→HIT δ<span class="ot">)</span> ≡ δ</span>
<span id="cb32-2"><a href="https://oleg.fi/gists/atom.xml#cb32-2"></a>Orth→HIT→Orth nilₒ       <span class="ot">=</span> refl</span>
<span id="cb32-3"><a href="https://oleg.fi/gists/atom.xml#cb32-3"></a>Orth→HIT→Orth <span class="ot">(</span>keepₒ δ<span class="ot">)</span>  <span class="ot">=</span> cong keepₒ <span class="ot">(</span>Orth→HIT→Orth δ<span class="ot">)</span></span>
<span id="cb32-4"><a href="https://oleg.fi/gists/atom.xml#cb32-4"></a>Orth→HIT→Orth <span class="ot">(</span>skipₒ δ<span class="ot">)</span>  <span class="ot">=</span> cong skipₒ <span class="ot">(</span>Orth→HIT→Orth δ<span class="ot">)</span></span></code></pre></div>
<p>On the other hand the opposite direction is tricky.</p>
<p>Easy part is to show that <code>Orth→HIT</code> preserves the identity, that will show that <code>idₕ</code> roundtrips.</p>
<div class="sourceCode" id="cb33"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb33-1"><a href="https://oleg.fi/gists/atom.xml#cb33-1"></a>Orth→HIT-id <span class="ot">:</span> <span class="ot">∀</span> n <span class="ot">→</span> Orth→HIT idₒ ≡ idₕ <span class="ot">{</span>n<span class="ot">}</span></span>
<span id="cb33-2"><a href="https://oleg.fi/gists/atom.xml#cb33-2"></a>Orth→HIT-id zero     <span class="ot">=</span> refl</span>
<span id="cb33-3"><a href="https://oleg.fi/gists/atom.xml#cb33-3"></a>Orth→HIT-id <span class="ot">(</span>suc n<span class="ot">)</span>  <span class="ot">=</span> cong keepₕ <span class="ot">(</span>Orth→HIT-id n<span class="ot">)</span> ∙ keep-id≡idₕ n</span></code></pre></div>
<p>We also have to show that <code>keep-id≡idₕ</code> roundtrips. This is considerably more challenging. Luckily if you squint enough (and are familiar with <code>cubical</code> library), you notice the pattern:</p>
<div class="sourceCode" id="cb34"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb34-1"><a href="https://oleg.fi/gists/atom.xml#cb34-1"></a>lemma <span class="ot">:</span> <span class="ot">∀</span> n <span class="ot">→</span> Square</span>
<span id="cb34-2"><a href="https://oleg.fi/gists/atom.xml#cb34-2"></a>  <span class="ot">(</span>cong keepₕ <span class="ot">(</span>Orth→HIT-id n<span class="ot">))</span></span>
<span id="cb34-3"><a href="https://oleg.fi/gists/atom.xml#cb34-3"></a>  <span class="ot">(</span>cong keepₕ <span class="ot">(</span>Orth→HIT-id n<span class="ot">)</span> ∙ keep-id≡idₕ n<span class="ot">)</span></span>
<span id="cb34-4"><a href="https://oleg.fi/gists/atom.xml#cb34-4"></a>  <span class="ot">(</span>refl <span class="ot">{</span>x <span class="ot">=</span> keepₕ <span class="ot">(</span>Orth→HIT idₒ<span class="ot">)})</span></span>
<span id="cb34-5"><a href="https://oleg.fi/gists/atom.xml#cb34-5"></a>  <span class="ot">(</span>keep-id≡idₕ n<span class="ot">)</span></span>
<span id="cb34-6"><a href="https://oleg.fi/gists/atom.xml#cb34-6"></a>lemma n <span class="ot">=</span> compPath-filler</span>
<span id="cb34-7"><a href="https://oleg.fi/gists/atom.xml#cb34-7"></a>  <span class="ot">{</span>x <span class="ot">=</span> keepₕ <span class="ot">(</span>Orth→HIT idₒ<span class="ot">)}</span></span>
<span id="cb34-8"><a href="https://oleg.fi/gists/atom.xml#cb34-8"></a>  <span class="ot">(</span>cong keepₕ <span class="ot">(</span>Orth→HIT-id n<span class="ot">))</span></span>
<span id="cb34-9"><a href="https://oleg.fi/gists/atom.xml#cb34-9"></a>  <span class="ot">(</span>keep-id≡idₕ n<span class="ot">)</span></span></code></pre></div>
<p>(In general, proving the equalities about equalities in Cubical Agda, i.e. filling squares and cubes feels to be black magic).</p>
<p>Using these lemmas we can finish the equality proof:</p>
<div class="sourceCode" id="cb35"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb35-1"><a href="https://oleg.fi/gists/atom.xml#cb35-1"></a>HIT→Orth→HIT <span class="ot">:</span> <span class="ot">(</span>δ <span class="ot">:</span> HIT n m<span class="ot">)</span> <span class="ot">→</span> Orth→HIT <span class="ot">(</span>HIT→Orth δ<span class="ot">)</span> ≡ δ</span>
<span id="cb35-2"><a href="https://oleg.fi/gists/atom.xml#cb35-2"></a>HIT→Orth→HIT idₕ                  <span class="ot">=</span> Orth→HIT-id <span class="ot">_</span></span>
<span id="cb35-3"><a href="https://oleg.fi/gists/atom.xml#cb35-3"></a>HIT→Orth→HIT <span class="ot">(</span>keepₕ δ<span class="ot">)</span>            <span class="ot">=</span> cong keepₕ <span class="ot">(</span>HIT→Orth→HIT δ<span class="ot">)</span></span>
<span id="cb35-4"><a href="https://oleg.fi/gists/atom.xml#cb35-4"></a>HIT→Orth→HIT <span class="ot">(</span>skipₕ δ<span class="ot">)</span>            <span class="ot">=</span> cong skipₕ <span class="ot">(</span>HIT→Orth→HIT δ<span class="ot">)</span></span>
<span id="cb35-5"><a href="https://oleg.fi/gists/atom.xml#cb35-5"></a>HIT→Orth→HIT <span class="ot">(</span>keep-id≡idₕ n i<span class="ot">)</span> j  <span class="ot">=</span> lemma n i j</span>
<span id="cb35-6"><a href="https://oleg.fi/gists/atom.xml#cb35-6"></a></span>
<span id="cb35-7"><a href="https://oleg.fi/gists/atom.xml#cb35-7"></a>Orth≡HIT-pointwise <span class="ot">:</span> n ⊑ₒ m ≡ n ⊑ₕ m</span>
<span id="cb35-8"><a href="https://oleg.fi/gists/atom.xml#cb35-8"></a>Orth≡HIT-pointwise <span class="ot">=</span></span>
<span id="cb35-9"><a href="https://oleg.fi/gists/atom.xml#cb35-9"></a>  isoToPath <span class="ot">(</span>iso Orth→HIT HIT→Orth HIT→Orth→HIT Orth→HIT→Orth<span class="ot">)</span></span>
<span id="cb35-10"><a href="https://oleg.fi/gists/atom.xml#cb35-10"></a></span>
<span id="cb35-11"><a href="https://oleg.fi/gists/atom.xml#cb35-11"></a>Orth≡HIT <span class="ot">:</span> Orth ≡ HIT</span>
<span id="cb35-12"><a href="https://oleg.fi/gists/atom.xml#cb35-12"></a>Orth≡HIT i n m <span class="ot">=</span> Orth≡HIT-pointwise <span class="ot">{</span>n<span class="ot">}</span> <span class="ot">{</span>m<span class="ot">}</span> i</span></code></pre></div>
<p>And we can show that this thinning identity and composition behave as the orthodox one. The identity homomorphism we have already proven, composition is trivial as the HIT structure resembles the structure orthodox thinning:</p>
<div class="sourceCode" id="cb36"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb36-1"><a href="https://oleg.fi/gists/atom.xml#cb36-1"></a>Orth→HIT-⦂ <span class="ot">:</span> <span class="ot">∀</span> <span class="ot">{</span>n m p<span class="ot">}</span> <span class="ot">(</span>δ₁ <span class="ot">:</span> Orth n m<span class="ot">)</span> <span class="ot">(</span>δ₂ <span class="ot">:</span> Orth m p<span class="ot">)</span></span>
<span id="cb36-2"><a href="https://oleg.fi/gists/atom.xml#cb36-2"></a>  <span class="ot">→</span> Orth→HIT <span class="ot">(</span>δ₁ ⦂ₒ δ₂<span class="ot">)</span> ≡ Orth→HIT δ₁ ⦂ₕ Orth→HIT δ₂</span>
<span id="cb36-3"><a href="https://oleg.fi/gists/atom.xml#cb36-3"></a>Orth→HIT-⦂ δ₁           nilₒ       <span class="ot">=</span> refl</span>
<span id="cb36-4"><a href="https://oleg.fi/gists/atom.xml#cb36-4"></a>Orth→HIT-⦂ δ₁          <span class="ot">(</span>skipₒ δ₂<span class="ot">)</span>  <span class="ot">=</span> cong skipₕ <span class="ot">(</span>Orth→HIT-⦂ δ₁ δ₂<span class="ot">)</span></span>
<span id="cb36-5"><a href="https://oleg.fi/gists/atom.xml#cb36-5"></a>Orth→HIT-⦂ <span class="ot">(</span>keepₒ δ₁<span class="ot">)</span>  <span class="ot">(</span>keepₒ δ₂<span class="ot">)</span>  <span class="ot">=</span> cong keepₕ <span class="ot">(</span>Orth→HIT-⦂ δ₁ δ₂<span class="ot">)</span></span>
<span id="cb36-6"><a href="https://oleg.fi/gists/atom.xml#cb36-6"></a>Orth→HIT-⦂ <span class="ot">(</span>skipₒ δ₁<span class="ot">)</span>  <span class="ot">(</span>keepₒ δ₂<span class="ot">)</span>  <span class="ot">=</span> cong skipₕ <span class="ot">(</span>Orth→HIT-⦂ δ₁ δ₂<span class="ot">)</span></span></code></pre></div>
<p>Then we can repeat what we did with previous thinning.</p>
<div class="sourceCode" id="cb37"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb37-1"><a href="https://oleg.fi/gists/atom.xml#cb37-1"></a>CatOps-HIT <span class="ot">:</span> CatOps HIT</span>
<span id="cb37-2"><a href="https://oleg.fi/gists/atom.xml#cb37-2"></a>CatOps-HIT <span class="ot">=</span> idₕ , <span class="ot">_</span>⦂ₕ<span class="ot">_</span></span>
<span id="cb37-3"><a href="https://oleg.fi/gists/atom.xml#cb37-3"></a></span>
<span id="cb37-4"><a href="https://oleg.fi/gists/atom.xml#cb37-4"></a>CatOps-HITₜ <span class="ot">:</span> CatOps HIT</span>
<span id="cb37-5"><a href="https://oleg.fi/gists/atom.xml#cb37-5"></a>CatOps-HITₜ <span class="ot">=</span> subst CatOps Orth≡HIT CatOps-Orth</span></code></pre></div>
<p>Identities are equal:</p>
<div class="sourceCode" id="cb38"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb38-1"><a href="https://oleg.fi/gists/atom.xml#cb38-1"></a>idₕₜ <span class="ot">:</span> n ⊑ₕ n</span>
<span id="cb38-2"><a href="https://oleg.fi/gists/atom.xml#cb38-2"></a>idₕₜ <span class="ot">=</span> fst CatOps-HITₜ</span>
<span id="cb38-3"><a href="https://oleg.fi/gists/atom.xml#cb38-3"></a></span>
<span id="cb38-4"><a href="https://oleg.fi/gists/atom.xml#cb38-4"></a>idₕₜ≡idₕ <span class="ot">:</span> idₕₜ ≡ idₕ <span class="ot">{</span>n<span class="ot">}</span></span>
<span id="cb38-5"><a href="https://oleg.fi/gists/atom.xml#cb38-5"></a>idₕₜ≡idₕ <span class="ot">=</span> transportRefl <span class="ot">(</span>Orth→HIT idₒ<span class="ot">)</span> ∙ Orth→HIT-id <span class="ot">_</span></span></code></pre></div>
<p>and composition (literally the same code as in previous section, it can be automated but it's not worth for a blog post)</p>
<div class="sourceCode" id="cb39"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb39-1"><a href="https://oleg.fi/gists/atom.xml#cb39-1"></a><span class="ot">_</span>⦂ₕₜ<span class="ot">_</span> <span class="ot">:</span> n ⊑ₕ m <span class="ot">→</span> m ⊑ₕ p <span class="ot">→</span> n ⊑ₕ p</span>
<span id="cb39-2"><a href="https://oleg.fi/gists/atom.xml#cb39-2"></a><span class="ot">_</span>⦂ₕₜ<span class="ot">_</span> <span class="ot">=</span> snd CatOps-HITₜ</span>
<span id="cb39-3"><a href="https://oleg.fi/gists/atom.xml#cb39-3"></a></span>
<span id="cb39-4"><a href="https://oleg.fi/gists/atom.xml#cb39-4"></a>⦂ₕₜ≡⦂ₕ <span class="ot">:</span> <span class="ot">(</span>δ₁ <span class="ot">:</span> n ⊑ₕ m<span class="ot">)</span> <span class="ot">(</span>δ₂ <span class="ot">:</span> m ⊑ₕ p<span class="ot">)</span> <span class="ot">→</span> δ₁ ⦂ₕₜ δ₂ ≡ δ₁ ⦂ₕ δ₂</span>
<span id="cb39-5"><a href="https://oleg.fi/gists/atom.xml#cb39-5"></a>⦂ₕₜ≡⦂ₕ <span class="ot">{</span>n<span class="ot">}</span> <span class="ot">{</span>m<span class="ot">}</span> <span class="ot">{</span>p<span class="ot">}</span> δ₁ δ₂ <span class="ot">=</span></span>
<span id="cb39-6"><a href="https://oleg.fi/gists/atom.xml#cb39-6"></a>  transport refl expr₁  ≡⟨ transportRefl expr₁ ⟩</span>
<span id="cb39-7"><a href="https://oleg.fi/gists/atom.xml#cb39-7"></a>  expr₁                 ≡⟨ expr₁≡expr₂ ⟩</span>
<span id="cb39-8"><a href="https://oleg.fi/gists/atom.xml#cb39-8"></a>  expr₂                 ≡⟨ Orth→HIT-⦂ <span class="ot">(</span>HIT→Orth δ₁<span class="ot">)</span> <span class="ot">(</span>HIT→Orth δ₂<span class="ot">)</span> ⟩</span>
<span id="cb39-9"><a href="https://oleg.fi/gists/atom.xml#cb39-9"></a>  expr₃                 ≡⟨ <span class="ot">(λ</span> i <span class="ot">→</span> HIT→Orth→HIT δ₁ i ⦂ₕ HIT→Orth→HIT δ₂ i<span class="ot">)</span> ⟩</span>
<span id="cb39-10"><a href="https://oleg.fi/gists/atom.xml#cb39-10"></a>  δ₁ ⦂ₕ δ₂ ∎</span>
<span id="cb39-11"><a href="https://oleg.fi/gists/atom.xml#cb39-11"></a>  <span class="kw">where</span></span>
<span id="cb39-12"><a href="https://oleg.fi/gists/atom.xml#cb39-12"></a>    expr₁ <span class="ot">=</span> Orth→HIT <span class="ot">(</span>HIT→Orth <span class="ot">(</span>transport refl δ₁<span class="ot">)</span> ⦂ₒ</span>
<span id="cb39-13"><a href="https://oleg.fi/gists/atom.xml#cb39-13"></a>                      HIT→Orth <span class="ot">(</span>transport refl δ₂<span class="ot">))</span></span>
<span id="cb39-14"><a href="https://oleg.fi/gists/atom.xml#cb39-14"></a>    expr₂ <span class="ot">=</span> Orth→HIT <span class="ot">(</span>HIT→Orth δ₁ ⦂ₒ HIT→Orth δ₂<span class="ot">)</span></span>
<span id="cb39-15"><a href="https://oleg.fi/gists/atom.xml#cb39-15"></a>    expr₃ <span class="ot">=</span> Orth→HIT <span class="ot">(</span>HIT→Orth δ₁<span class="ot">)</span> ⦂ₕ Orth→HIT <span class="ot">(</span>HIT→Orth δ₂<span class="ot">)</span></span>
<span id="cb39-16"><a href="https://oleg.fi/gists/atom.xml#cb39-16"></a></span>
<span id="cb39-17"><a href="https://oleg.fi/gists/atom.xml#cb39-17"></a>    expr₁≡expr₂ <span class="ot">:</span> expr₁ ≡ expr₂</span>
<span id="cb39-18"><a href="https://oleg.fi/gists/atom.xml#cb39-18"></a>    expr₁≡expr₂ i <span class="ot">=</span> Orth→HIT <span class="ot">(</span>HIT→Orth <span class="ot">(</span>transportRefl δ₁ i<span class="ot">)</span> ⦂ₒ</span>
<span id="cb39-19"><a href="https://oleg.fi/gists/atom.xml#cb39-19"></a>                              HIT→Orth <span class="ot">(</span>transportRefl δ₂ i<span class="ot">))</span></span></code></pre></div>
<p>And the equalities of <code>CatOps</code>:</p>
<div class="sourceCode" id="cb40"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb40-1"><a href="https://oleg.fi/gists/atom.xml#cb40-1"></a>CatOps-HIT≡ <span class="ot">:</span> CatOps-HITₜ ≡ CatOps-HIT</span>
<span id="cb40-2"><a href="https://oleg.fi/gists/atom.xml#cb40-2"></a>CatOps-HIT≡ i <span class="ot">=</span> idₕₜ≡idₕ i , <span class="ot">λ</span> δ₁ δ₂ <span class="ot">→</span> ⦂ₕₜ≡⦂ₕ δ₁ δ₂ i</span>
<span id="cb40-3"><a href="https://oleg.fi/gists/atom.xml#cb40-3"></a></span>
<span id="cb40-4"><a href="https://oleg.fi/gists/atom.xml#cb40-4"></a>CatOps-Orth≡HIT <span class="ot">:</span> <span class="ot">(λ</span> i <span class="ot">→</span> CatOps <span class="ot">(</span>Orth≡HIT i<span class="ot">))</span> [ CatOps-Orth ≡ CatOps-HIT ]</span>
<span id="cb40-5"><a href="https://oleg.fi/gists/atom.xml#cb40-5"></a>CatOps-Orth≡HIT <span class="ot">=</span> toPathP CatOps-HIT≡</span></code></pre></div>
<h2 id="conclusion">Conclusion</h2>
<p>We have seen three definitions of thinnings. Orthodox one, one with identity constructor yet unique representation and variant using additional equality. Using Cubical Agda we verified that these three definitions are equal, and their identity and composition behave the same.</p>
<p>What we can learn from it?</p>
<p>Well. It is morally correct to define</p>
<div class="sourceCode" id="cb41"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb41-1"><a href="https://oleg.fi/gists/atom.xml#cb41-1"></a><span class="kw">data</span> <span class="dt">Thin</span> n m <span class="kw">where</span></span>
<span id="cb41-2"><a href="https://oleg.fi/gists/atom.xml#cb41-2"></a>  <span class="dt">ThinId</span><span class="ot">   ::</span>             <span class="dt">Thin</span>    n     n</span>
<span id="cb41-3"><a href="https://oleg.fi/gists/atom.xml#cb41-3"></a>  <span class="dt">ThinSkip</span><span class="ot"> ::</span> <span class="dt">Thin</span> n m <span class="ot">-&gt;</span> <span class="dt">Thin</span>    n  (<span class="dt">S</span> m)</span>
<span id="cb41-4"><a href="https://oleg.fi/gists/atom.xml#cb41-4"></a>  <span class="dt">ThinKeep</span><span class="ot"> ::</span> <span class="dt">Thin</span> n m <span class="ot">-&gt;</span> <span class="dt">Thin</span> (<span class="dt">S</span> n) (<span class="dt">S</span> m)</span></code></pre></div>
<p>as long as you pay attention to not differentiate between <code>ThinKeep ThinId</code> and <code>ThinId</code>, you are safe. GHC won't point you if you wrote something inconsistent.</p>
<p>For example checking whether the thinning is an identity:</p>
<div class="sourceCode" id="cb42"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb42-1"><a href="https://oleg.fi/gists/atom.xml#cb42-1"></a><span class="ot">isThinId ::</span> <span class="dt">Thin</span> n m <span class="ot">-&gt;</span> <span class="dt">Maybe</span> (n <span class="op">:~:</span> m)</span>
<span id="cb42-2"><a href="https://oleg.fi/gists/atom.xml#cb42-2"></a>isThinId <span class="dt">ThinId</span> <span class="ot">=</span> <span class="dt">Just</span> <span class="dt">Refl</span></span>
<span id="cb42-3"><a href="https://oleg.fi/gists/atom.xml#cb42-3"></a>isThinId _      <span class="ot">=</span> <span class="dt">Nothing</span></span></code></pre></div>
<p>is not correct, but will be accepted by GHC. (Won't be by Cubical Agda).</p>
<p>But if you don't trust yourself, you can go for slightly more complicated</p>
<div class="sourceCode" id="cb43"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb43-1"><a href="https://oleg.fi/gists/atom.xml#cb43-1"></a><span class="kw">data</span> <span class="dt">Thin</span> n m <span class="kw">where</span></span>
<span id="cb43-2"><a href="https://oleg.fi/gists/atom.xml#cb43-2"></a>  <span class="dt">ThinId</span><span class="ot"> ::</span>              <span class="dt">Thin</span> n n</span>
<span id="cb43-3"><a href="https://oleg.fi/gists/atom.xml#cb43-3"></a>  <span class="dt">Thin'</span><span class="ot">  ::</span> <span class="dt">Thin'</span> n m <span class="ot">-&gt;</span> <span class="dt">Thin</span> n m</span>
<span id="cb43-4"><a href="https://oleg.fi/gists/atom.xml#cb43-4"></a></span>
<span id="cb43-5"><a href="https://oleg.fi/gists/atom.xml#cb43-5"></a><span class="kw">data</span> <span class="dt">Thin'</span> n m <span class="kw">where</span></span>
<span id="cb43-6"><a href="https://oleg.fi/gists/atom.xml#cb43-6"></a>  <span class="dt">ThinWk</span><span class="ot">   ::</span>              <span class="dt">Thin'</span>    n  (<span class="dt">S</span> n)</span>
<span id="cb43-7"><a href="https://oleg.fi/gists/atom.xml#cb43-7"></a>  <span class="dt">ThinSkip</span><span class="ot"> ::</span> <span class="dt">Thin'</span> n m <span class="ot">-&gt;</span> <span class="dt">Thin'</span>    n  (<span class="dt">S</span> m)</span>
<span id="cb43-8"><a href="https://oleg.fi/gists/atom.xml#cb43-8"></a>  <span class="dt">ThinKeep</span><span class="ot"> ::</span> <span class="dt">Thin'</span> n m <span class="ot">-&gt;</span> <span class="dt">Thin'</span> (<span class="dt">S</span> n) (<span class="dt">S</span> m)</span></code></pre></div>
<p>In either case you will be able to write <code>Category</code> instance:</p>
<div class="sourceCode" id="cb44"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb44-1"><a href="https://oleg.fi/gists/atom.xml#cb44-1"></a><span class="kw">instance</span> <span class="dt">Category</span> <span class="dt">Thin</span> <span class="kw">where</span></span>
<span id="cb44-2"><a href="https://oleg.fi/gists/atom.xml#cb44-2"></a>  <span class="fu">id</span> <span class="ot">=</span> <span class="dt">ThinId</span></span>
<span id="cb44-3"><a href="https://oleg.fi/gists/atom.xml#cb44-3"></a>  (<span class="op">.</span>) <span class="ot">=</span> _look_above_in_the_Agda_Code</span></code></pre></div>
<p>which is not possible with an orthodox thinning definition.</p>
<h2 id="extras">Extras</h2>
<div class="sourceCode" id="cb45"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb45-1"><a href="https://oleg.fi/gists/atom.xml#cb45-1"></a><span class="kw">open</span> <span class="kw">import</span> Cubical<span class="ot">.</span>Data<span class="ot">.</span>Nat<span class="ot">.</span>Order</span>
<span id="cb45-2"><a href="https://oleg.fi/gists/atom.xml#cb45-2"></a></span>
<span id="cb45-3"><a href="https://oleg.fi/gists/atom.xml#cb45-3"></a><span class="co">-- thinnings can be converted to less-than-or-equal-to relation:</span></span>
<span id="cb45-4"><a href="https://oleg.fi/gists/atom.xml#cb45-4"></a>⊑ₕ→≤ <span class="ot">:</span> n ⊑ₕ m <span class="ot">→</span> n ≤ m</span>
<span id="cb45-5"><a href="https://oleg.fi/gists/atom.xml#cb45-5"></a>⊑ₕ→≤ idₕ <span class="ot">=</span> <span class="dv">0</span> , refl</span>
<span id="cb45-6"><a href="https://oleg.fi/gists/atom.xml#cb45-6"></a>⊑ₕ→≤ <span class="ot">(</span>keepₕ δ<span class="ot">)</span> <span class="kw">with</span> ⊑ₕ→≤ δ</span>
<span id="cb45-7"><a href="https://oleg.fi/gists/atom.xml#cb45-7"></a><span class="ot">...</span> <span class="ot">|</span> n , p <span class="ot">=</span> n  , +-suc n <span class="ot">_</span> ∙ cong suc p</span>
<span id="cb45-8"><a href="https://oleg.fi/gists/atom.xml#cb45-8"></a>⊑ₕ→≤ <span class="ot">(</span>skipₕ δ<span class="ot">)</span> <span class="kw">with</span> ⊑ₕ→≤ δ</span>
<span id="cb45-9"><a href="https://oleg.fi/gists/atom.xml#cb45-9"></a><span class="ot">...</span> <span class="ot">|</span> n , p <span class="ot">=</span> suc n , cong suc p</span>
<span id="cb45-10"><a href="https://oleg.fi/gists/atom.xml#cb45-10"></a>⊑ₕ→≤ <span class="ot">(</span>keep-id≡idₕ n i<span class="ot">)</span> <span class="ot">=</span> lemma' i <span class="kw">where</span></span>
<span id="cb45-11"><a href="https://oleg.fi/gists/atom.xml#cb45-11"></a>  lemma' <span class="ot">:</span> ⊑ₕ→≤ <span class="ot">(</span>keepₕ idₕ<span class="ot">)</span> ≡ ⊑ₕ→≤ <span class="ot">(</span>idₕ <span class="ot">{</span>suc n<span class="ot">})</span></span>
<span id="cb45-12"><a href="https://oleg.fi/gists/atom.xml#cb45-12"></a>  lemma' <span class="ot">=</span> Σ≡Prop <span class="ot">(λ</span> m  <span class="ot">→</span> isSetℕ <span class="ot">(</span>m + suc n<span class="ot">)</span> <span class="ot">(</span>suc n<span class="ot">))</span> <span class="ot">(</span>refl <span class="ot">{</span>x <span class="ot">=</span> <span class="dv">0</span><span class="ot">})</span></span>
<span id="cb45-13"><a href="https://oleg.fi/gists/atom.xml#cb45-13"></a></span>
<span id="cb45-14"><a href="https://oleg.fi/gists/atom.xml#cb45-14"></a><span class="co">-- Then we can check whether thinning is an identity.</span></span>
<span id="cb45-15"><a href="https://oleg.fi/gists/atom.xml#cb45-15"></a><span class="co">-- Agda forces us to not cheat.</span></span>
<span id="cb45-16"><a href="https://oleg.fi/gists/atom.xml#cb45-16"></a><span class="co">-- (Well, and also → Dec (n ≡ m))</span></span>
<span id="cb45-17"><a href="https://oleg.fi/gists/atom.xml#cb45-17"></a>isThinId <span class="ot">:</span> n ⊑ₕ m <span class="ot">→</span> Dec <span class="ot">(</span>n ≡ m<span class="ot">)</span></span>
<span id="cb45-18"><a href="https://oleg.fi/gists/atom.xml#cb45-18"></a>isThinId idₕ <span class="ot">=</span> yes refl</span>
<span id="cb45-19"><a href="https://oleg.fi/gists/atom.xml#cb45-19"></a>isThinId <span class="ot">(</span>keepₕ δ<span class="ot">)</span> <span class="kw">with</span> isThinId δ</span>
<span id="cb45-20"><a href="https://oleg.fi/gists/atom.xml#cb45-20"></a><span class="ot">...</span> <span class="ot">|</span> yes p <span class="ot">=</span> yes <span class="ot">(</span>cong suc p<span class="ot">)</span></span>
<span id="cb45-21"><a href="https://oleg.fi/gists/atom.xml#cb45-21"></a><span class="ot">...</span> <span class="ot">|</span> no ¬p <span class="ot">=</span> no <span class="ot">λ</span> p <span class="ot">→</span> ¬p <span class="ot">(</span>injSuc p<span class="ot">)</span></span>
<span id="cb45-22"><a href="https://oleg.fi/gists/atom.xml#cb45-22"></a>isThinId <span class="ot">{</span>n<span class="ot">}</span> <span class="ot">{</span>m<span class="ot">}</span> <span class="ot">(</span>skipₕ δ<span class="ot">)</span> <span class="kw">with</span> ⊑ₕ→≤ δ</span>
<span id="cb45-23"><a href="https://oleg.fi/gists/atom.xml#cb45-23"></a><span class="ot">...</span> <span class="ot">|</span>  <span class="ot">(</span>r , p<span class="ot">)</span> <span class="ot">=</span> no <span class="ot">λ</span> q <span class="ot">→</span> ¬m+n&lt;m <span class="ot">{</span>m <span class="ot">=</span> n<span class="ot">}</span> <span class="ot">{</span>n <span class="ot">=</span> <span class="dv">0</span><span class="ot">}</span></span>
<span id="cb45-24"><a href="https://oleg.fi/gists/atom.xml#cb45-24"></a>  <span class="ot">(</span>r , <span class="ot">(</span>r + suc <span class="ot">(</span>n + <span class="dv">0</span><span class="ot">)</span>    ≡⟨ +-suc r <span class="ot">(</span>n + <span class="dv">0</span><span class="ot">)</span> ⟩</span>
<span id="cb45-25"><a href="https://oleg.fi/gists/atom.xml#cb45-25"></a>        suc <span class="ot">(</span>r + <span class="ot">(</span>n + <span class="dv">0</span><span class="ot">))</span>  ≡⟨ cong <span class="ot">(λ</span> x <span class="ot">→</span> suc <span class="ot">(</span>r + x<span class="ot">))</span> <span class="ot">(</span>+-zero n<span class="ot">)</span> ⟩</span>
<span id="cb45-26"><a href="https://oleg.fi/gists/atom.xml#cb45-26"></a>        suc <span class="ot">(</span>r + n<span class="ot">)</span>        ≡⟨ cong suc p ⟩</span>
<span id="cb45-27"><a href="https://oleg.fi/gists/atom.xml#cb45-27"></a>        suc <span class="ot">_</span>              ≡⟨ sym q ⟩</span>
<span id="cb45-28"><a href="https://oleg.fi/gists/atom.xml#cb45-28"></a>        n                  ∎<span class="ot">))</span></span>
<span id="cb45-29"><a href="https://oleg.fi/gists/atom.xml#cb45-29"></a></span>
<span id="cb45-30"><a href="https://oleg.fi/gists/atom.xml#cb45-30"></a>isThinId <span class="ot">(</span>keep-id≡idₕ n i<span class="ot">)</span> <span class="ot">=</span> yes <span class="ot">(λ</span> <span class="ot">_</span> <span class="ot">→</span> suc n<span class="ot">)</span></span>
<span id="cb45-31"><a href="https://oleg.fi/gists/atom.xml#cb45-31"></a></span>
<span id="cb45-32"><a href="https://oleg.fi/gists/atom.xml#cb45-32"></a><span class="co">-- Same for orthodox</span></span>
<span id="cb45-33"><a href="https://oleg.fi/gists/atom.xml#cb45-33"></a>⊑ₒ→≤ <span class="ot">:</span> n ⊑ₒ m <span class="ot">→</span> n ≤ m</span>
<span id="cb45-34"><a href="https://oleg.fi/gists/atom.xml#cb45-34"></a>⊑ₒ→≤ nilₒ <span class="ot">=</span> <span class="dv">0</span> , refl</span>
<span id="cb45-35"><a href="https://oleg.fi/gists/atom.xml#cb45-35"></a>⊑ₒ→≤ <span class="ot">(</span>skipₒ δ<span class="ot">)</span> <span class="kw">with</span> ⊑ₒ→≤ δ</span>
<span id="cb45-36"><a href="https://oleg.fi/gists/atom.xml#cb45-36"></a><span class="ot">...</span> <span class="ot">|</span> n , p <span class="ot">=</span> suc n , cong suc p</span>
<span id="cb45-37"><a href="https://oleg.fi/gists/atom.xml#cb45-37"></a>⊑ₒ→≤ <span class="ot">(</span>keepₒ δ<span class="ot">)</span> <span class="kw">with</span> ⊑ₒ→≤ δ</span>
<span id="cb45-38"><a href="https://oleg.fi/gists/atom.xml#cb45-38"></a><span class="ot">...</span> <span class="ot">|</span> n , p <span class="ot">=</span> n  , +-suc n <span class="ot">_</span> ∙ cong suc p</span>
<span id="cb45-39"><a href="https://oleg.fi/gists/atom.xml#cb45-39"></a></span>
<span id="cb45-40"><a href="https://oleg.fi/gists/atom.xml#cb45-40"></a><span class="co">-- if indices match, δ is idₒ</span></span>
<span id="cb45-41"><a href="https://oleg.fi/gists/atom.xml#cb45-41"></a>⊥-elim <span class="ot">:</span> <span class="ot">{</span>A <span class="ot">:</span> Type<span class="ot">}</span> <span class="ot">→</span> ⊥ <span class="ot">→</span> A</span>
<span id="cb45-42"><a href="https://oleg.fi/gists/atom.xml#cb45-42"></a>⊥-elim <span class="ot">()</span></span>
<span id="cb45-43"><a href="https://oleg.fi/gists/atom.xml#cb45-43"></a></span>
<span id="cb45-44"><a href="https://oleg.fi/gists/atom.xml#cb45-44"></a>idₒ-unique <span class="ot">:</span> <span class="ot">(</span>δ <span class="ot">:</span> n ⊑ₒ n<span class="ot">)</span> <span class="ot">→</span> δ ≡ idₒ</span>
<span id="cb45-45"><a href="https://oleg.fi/gists/atom.xml#cb45-45"></a>idₒ-unique nilₒ      <span class="ot">=</span> refl</span>
<span id="cb45-46"><a href="https://oleg.fi/gists/atom.xml#cb45-46"></a>idₒ-unique <span class="ot">(</span>skipₒ δ<span class="ot">)</span> <span class="ot">=</span> ⊥-elim <span class="ot">(</span>¬m&lt;m <span class="ot">(</span>⊑ₒ→≤ δ<span class="ot">))</span></span>
<span id="cb45-47"><a href="https://oleg.fi/gists/atom.xml#cb45-47"></a>idₒ-unique <span class="ot">(</span>keepₒ δ<span class="ot">)</span> <span class="ot">=</span> cong keepₒ <span class="ot">(</span>idₒ-unique δ<span class="ot">)</span></span>
<span id="cb45-48"><a href="https://oleg.fi/gists/atom.xml#cb45-48"></a></span>
<span id="cb45-49"><a href="https://oleg.fi/gists/atom.xml#cb45-49"></a><span class="co">-- or idₕ, for which direct proof is trickier.</span></span>
<span id="cb45-50"><a href="https://oleg.fi/gists/atom.xml#cb45-50"></a>idₕ-unique <span class="ot">:</span> <span class="ot">(</span>δ <span class="ot">:</span> n ⊑ₕ n<span class="ot">)</span> <span class="ot">→</span> δ ≡ idₕ</span>
<span id="cb45-51"><a href="https://oleg.fi/gists/atom.xml#cb45-51"></a>idₕ-unique <span class="ot">{</span>n<span class="ot">}</span> <span class="ot">=</span> subst <span class="ot">{</span>A <span class="ot">=</span> Σ <span class="ot">_</span> CatOps<span class="ot">}</span></span>
<span id="cb45-52"><a href="https://oleg.fi/gists/atom.xml#cb45-52"></a>  <span class="ot">(λ</span> <span class="ot">{</span> <span class="ot">(_</span>⊑<span class="ot">_</span> , <span class="ot">(</span>id , <span class="ot">_</span>⦂<span class="ot">_))</span> <span class="ot">→</span> <span class="ot">(</span>δ <span class="ot">:</span> n ⊑ n<span class="ot">)</span> <span class="ot">→</span> δ ≡ id<span class="ot">})</span></span>
<span id="cb45-53"><a href="https://oleg.fi/gists/atom.xml#cb45-53"></a>  <span class="ot">(λ</span> i <span class="ot">→</span> Orth≡HIT i , CatOps-Orth≡HIT i<span class="ot">)</span></span>
<span id="cb45-54"><a href="https://oleg.fi/gists/atom.xml#cb45-54"></a>  idₒ-unique</span></code></pre></div>
<h2 id="more-extras">More extras</h2>
<p>The most important operation thinning support is their action on variables.</p>
<div class="sourceCode" id="cb46"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb46-1"><a href="https://oleg.fi/gists/atom.xml#cb46-1"></a><span class="kw">data</span> Var <span class="ot">:</span> ℕ <span class="ot">→</span> Type <span class="kw">where</span></span>
<span id="cb46-2"><a href="https://oleg.fi/gists/atom.xml#cb46-2"></a>  vz <span class="ot">:</span>         Var <span class="ot">(</span>suc n<span class="ot">)</span></span>
<span id="cb46-3"><a href="https://oleg.fi/gists/atom.xml#cb46-3"></a>  vs <span class="ot">:</span> Var n <span class="ot">→</span> Var <span class="ot">(</span>suc n<span class="ot">)</span></span></code></pre></div>
<p>Using each of the variants let us define the action:</p>
<div class="sourceCode" id="cb47"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb47-1"><a href="https://oleg.fi/gists/atom.xml#cb47-1"></a>thinₒ <span class="ot">:</span> n ⊑ₒ m <span class="ot">→</span> Var n <span class="ot">→</span> Var m</span>
<span id="cb47-2"><a href="https://oleg.fi/gists/atom.xml#cb47-2"></a>thinₒ nilₒ      <span class="ot">()</span></span>
<span id="cb47-3"><a href="https://oleg.fi/gists/atom.xml#cb47-3"></a>thinₒ <span class="ot">(</span>skipₒ δ<span class="ot">)</span> x      <span class="ot">=</span> vs <span class="ot">(</span>thinₒ δ x<span class="ot">)</span></span>
<span id="cb47-4"><a href="https://oleg.fi/gists/atom.xml#cb47-4"></a>thinₒ <span class="ot">(</span>keepₒ δ<span class="ot">)</span> vz     <span class="ot">=</span> vz</span>
<span id="cb47-5"><a href="https://oleg.fi/gists/atom.xml#cb47-5"></a>thinₒ <span class="ot">(</span>keepₒ δ<span class="ot">)</span> <span class="ot">(</span>vs x<span class="ot">)</span> <span class="ot">=</span> vs <span class="ot">(</span>thinₒ δ x<span class="ot">)</span></span>
<span id="cb47-6"><a href="https://oleg.fi/gists/atom.xml#cb47-6"></a></span>
<span id="cb47-7"><a href="https://oleg.fi/gists/atom.xml#cb47-7"></a>thinₛ <span class="ot">:</span> n ⊏ₛ m <span class="ot">→</span> Var n <span class="ot">→</span> Var m</span>
<span id="cb47-8"><a href="https://oleg.fi/gists/atom.xml#cb47-8"></a>thinₛ wkₛ       x      <span class="ot">=</span> vs x</span>
<span id="cb47-9"><a href="https://oleg.fi/gists/atom.xml#cb47-9"></a>thinₛ <span class="ot">(</span>skipₛ δ<span class="ot">)</span> x      <span class="ot">=</span> vs <span class="ot">(</span>thinₛ δ x<span class="ot">)</span></span>
<span id="cb47-10"><a href="https://oleg.fi/gists/atom.xml#cb47-10"></a>thinₛ <span class="ot">(</span>keepₛ δ<span class="ot">)</span> vz     <span class="ot">=</span> vz</span>
<span id="cb47-11"><a href="https://oleg.fi/gists/atom.xml#cb47-11"></a>thinₛ <span class="ot">(</span>keepₛ δ<span class="ot">)</span> <span class="ot">(</span>vs x<span class="ot">)</span> <span class="ot">=</span> vs <span class="ot">(</span>thinₛ δ x<span class="ot">)</span></span>
<span id="cb47-12"><a href="https://oleg.fi/gists/atom.xml#cb47-12"></a></span>
<span id="cb47-13"><a href="https://oleg.fi/gists/atom.xml#cb47-13"></a>thinₙ <span class="ot">:</span> n ⊑ₙ m <span class="ot">→</span> Var n <span class="ot">→</span> Var m</span>
<span id="cb47-14"><a href="https://oleg.fi/gists/atom.xml#cb47-14"></a>thinₙ idₙ        x <span class="ot">=</span> x</span>
<span id="cb47-15"><a href="https://oleg.fi/gists/atom.xml#cb47-15"></a>thinₙ <span class="ot">(</span>strict δ<span class="ot">)</span> x <span class="ot">=</span> thinₛ δ x</span></code></pre></div>
<p>It's worth noticing that HIT forces to take into account the <code>keep≡id≡idₕ</code> equality, so we cannot do silly stuff in <code>keepₕ</code> cases.</p>
<div class="sourceCode" id="cb48"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb48-1"><a href="https://oleg.fi/gists/atom.xml#cb48-1"></a>thinₕ <span class="ot">:</span> n ⊑ₕ m <span class="ot">→</span> Var n <span class="ot">→</span> Var m</span>
<span id="cb48-2"><a href="https://oleg.fi/gists/atom.xml#cb48-2"></a>thinₕ idₕ       x      <span class="ot">=</span> x</span>
<span id="cb48-3"><a href="https://oleg.fi/gists/atom.xml#cb48-3"></a>thinₕ <span class="ot">(</span>skipₕ δ<span class="ot">)</span> x      <span class="ot">=</span> vs <span class="ot">(</span>thinₕ δ x<span class="ot">)</span></span>
<span id="cb48-4"><a href="https://oleg.fi/gists/atom.xml#cb48-4"></a>thinₕ <span class="ot">(</span>keepₕ δ<span class="ot">)</span> vz     <span class="ot">=</span> vz</span>
<span id="cb48-5"><a href="https://oleg.fi/gists/atom.xml#cb48-5"></a>thinₕ <span class="ot">(</span>keepₕ δ<span class="ot">)</span> <span class="ot">(</span>vs x<span class="ot">)</span> <span class="ot">=</span> vs <span class="ot">(</span>thinₕ δ x<span class="ot">)</span></span>
<span id="cb48-6"><a href="https://oleg.fi/gists/atom.xml#cb48-6"></a></span>
<span id="cb48-7"><a href="https://oleg.fi/gists/atom.xml#cb48-7"></a>thinₕ <span class="ot">(</span>keep-id≡idₕ n i<span class="ot">)</span> vz     <span class="ot">=</span> vz</span>
<span id="cb48-8"><a href="https://oleg.fi/gists/atom.xml#cb48-8"></a>thinₕ <span class="ot">(</span>keep-id≡idₕ n i<span class="ot">)</span> <span class="ot">(</span>vs x<span class="ot">)</span> <span class="ot">=</span> vs x</span></code></pre></div>
<p>Let us prove that these definitions are compatible. First we need a simple lemma, that <code>thinₒ idₒ</code> is an identity function.</p>
<div class="sourceCode" id="cb49"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb49-1"><a href="https://oleg.fi/gists/atom.xml#cb49-1"></a>thin-idₒ <span class="ot">:</span> <span class="ot">(</span>x <span class="ot">:</span> Var n<span class="ot">)</span> <span class="ot">→</span> thinₒ idₒ x ≡ x</span>
<span id="cb49-2"><a href="https://oleg.fi/gists/atom.xml#cb49-2"></a>thin-idₒ <span class="ot">{</span>suc n<span class="ot">}</span> vz     <span class="ot">=</span> refl</span>
<span id="cb49-3"><a href="https://oleg.fi/gists/atom.xml#cb49-3"></a>thin-idₒ <span class="ot">{</span>suc n<span class="ot">}</span> <span class="ot">(</span>vs x<span class="ot">)</span> <span class="ot">=</span> cong vs <span class="ot">(</span>thin-idₒ x<span class="ot">)</span></span></code></pre></div>
<div class="sourceCode" id="cb50"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb50-1"><a href="https://oleg.fi/gists/atom.xml#cb50-1"></a>Action <span class="ot">:</span> ℕ <span class="ot">→</span> ℕ <span class="ot">→</span> <span class="ot">(</span>ℕ <span class="ot">→</span> ℕ <span class="ot">→</span> Type<span class="ot">)</span> <span class="ot">→</span> Type</span>
<span id="cb50-2"><a href="https://oleg.fi/gists/atom.xml#cb50-2"></a>Action n m <span class="ot">_</span>⊑<span class="ot">_</span> <span class="ot">=</span> n ⊑ m <span class="ot">→</span> Var n <span class="ot">→</span> Var m</span>
<span id="cb50-3"><a href="https://oleg.fi/gists/atom.xml#cb50-3"></a></span>
<span id="cb50-4"><a href="https://oleg.fi/gists/atom.xml#cb50-4"></a>thinₙₜ <span class="ot">:</span> n ⊑ₙ m <span class="ot">→</span> Var n <span class="ot">→</span> Var m</span>
<span id="cb50-5"><a href="https://oleg.fi/gists/atom.xml#cb50-5"></a>thinₙₜ <span class="ot">{</span>n<span class="ot">}</span> <span class="ot">{</span>m<span class="ot">}</span> <span class="ot">=</span> subst <span class="ot">(</span>Action n m<span class="ot">)</span> Orth≡NonStr thinₒ</span>
<span id="cb50-6"><a href="https://oleg.fi/gists/atom.xml#cb50-6"></a></span>
<span id="cb50-7"><a href="https://oleg.fi/gists/atom.xml#cb50-7"></a>Strict→Orth-thin <span class="ot">:</span> <span class="ot">(</span>δ <span class="ot">:</span> n ⊏ₛ m<span class="ot">)</span> <span class="ot">(</span>x <span class="ot">:</span> Var n<span class="ot">)</span> <span class="ot">→</span> thinₒ <span class="ot">(</span>Strict→Orth δ<span class="ot">)</span> x ≡ thinₛ δ x</span>
<span id="cb50-8"><a href="https://oleg.fi/gists/atom.xml#cb50-8"></a>Strict→Orth-thin wkₛ       x      <span class="ot">=</span> cong vs <span class="ot">(</span>thin-idₒ x<span class="ot">)</span></span>
<span id="cb50-9"><a href="https://oleg.fi/gists/atom.xml#cb50-9"></a>Strict→Orth-thin <span class="ot">(</span>skipₛ δ<span class="ot">)</span> x      <span class="ot">=</span> cong vs <span class="ot">(</span>Strict→Orth-thin δ x<span class="ot">)</span></span>
<span id="cb50-10"><a href="https://oleg.fi/gists/atom.xml#cb50-10"></a>Strict→Orth-thin <span class="ot">(</span>keepₛ δ<span class="ot">)</span> vz     <span class="ot">=</span> refl</span>
<span id="cb50-11"><a href="https://oleg.fi/gists/atom.xml#cb50-11"></a>Strict→Orth-thin <span class="ot">(</span>keepₛ δ<span class="ot">)</span> <span class="ot">(</span>vs x<span class="ot">)</span> <span class="ot">=</span> cong vs <span class="ot">(</span>Strict→Orth-thin δ x<span class="ot">)</span></span>
<span id="cb50-12"><a href="https://oleg.fi/gists/atom.xml#cb50-12"></a></span>
<span id="cb50-13"><a href="https://oleg.fi/gists/atom.xml#cb50-13"></a>NonStr→Orth-thin <span class="ot">:</span> <span class="ot">(</span>δ <span class="ot">:</span> n ⊑ₙ m<span class="ot">)</span> <span class="ot">(</span>x <span class="ot">:</span> Var n<span class="ot">)</span> <span class="ot">→</span> thinₒ <span class="ot">(</span>NonStr→Orth δ<span class="ot">)</span> x ≡ thinₙ δ x</span>
<span id="cb50-14"><a href="https://oleg.fi/gists/atom.xml#cb50-14"></a>NonStr→Orth-thin idₙ        x <span class="ot">=</span> thin-idₒ x</span>
<span id="cb50-15"><a href="https://oleg.fi/gists/atom.xml#cb50-15"></a>NonStr→Orth-thin <span class="ot">(</span>strict δ<span class="ot">)</span> x <span class="ot">=</span> Strict→Orth-thin δ x</span>
<span id="cb50-16"><a href="https://oleg.fi/gists/atom.xml#cb50-16"></a></span>
<span id="cb50-17"><a href="https://oleg.fi/gists/atom.xml#cb50-17"></a>thinₙₜ≡thinₙ-pointwise <span class="ot">:</span> <span class="ot">(</span>δ <span class="ot">:</span> n ⊑ₙ m<span class="ot">)</span> <span class="ot">(</span>x <span class="ot">:</span> Var n<span class="ot">)</span> <span class="ot">→</span> thinₙₜ δ x ≡ thinₙ δ x</span>
<span id="cb50-18"><a href="https://oleg.fi/gists/atom.xml#cb50-18"></a>thinₙₜ≡thinₙ-pointwise <span class="ot">{</span>n<span class="ot">}</span> <span class="ot">{</span>m<span class="ot">}</span> δ x</span>
<span id="cb50-19"><a href="https://oleg.fi/gists/atom.xml#cb50-19"></a>  <span class="ot">=</span> transportRefl <span class="ot">(</span>thinₒ <span class="ot">(</span>NonStr→Orth <span class="ot">(</span>transp <span class="ot">(λ</span> i <span class="ot">→</span> n ⊑ₙ m<span class="ot">)</span> i0 δ<span class="ot">))</span> <span class="ot">(</span>transp <span class="ot">(λ</span> j <span class="ot">→</span> Var n<span class="ot">)</span> i0 x<span class="ot">))</span></span>
<span id="cb50-20"><a href="https://oleg.fi/gists/atom.xml#cb50-20"></a>  ∙ cong₂ thinₒ <span class="ot">(</span>cong NonStr→Orth <span class="ot">(</span>transportRefl δ<span class="ot">))</span> <span class="ot">(</span>transportRefl x<span class="ot">)</span></span>
<span id="cb50-21"><a href="https://oleg.fi/gists/atom.xml#cb50-21"></a>  ∙ NonStr→Orth-thin δ x</span>
<span id="cb50-22"><a href="https://oleg.fi/gists/atom.xml#cb50-22"></a></span>
<span id="cb50-23"><a href="https://oleg.fi/gists/atom.xml#cb50-23"></a>thinₙₜ≡thinₙ <span class="ot">:</span> <span class="ot">(</span>thinₙₜ <span class="ot">{</span>n<span class="ot">}</span> <span class="ot">{</span>m<span class="ot">})</span> ≡ thinₙ</span>
<span id="cb50-24"><a href="https://oleg.fi/gists/atom.xml#cb50-24"></a>thinₙₜ≡thinₙ i δ x <span class="ot">=</span> thinₙₜ≡thinₙ-pointwise δ x i</span>
<span id="cb50-25"><a href="https://oleg.fi/gists/atom.xml#cb50-25"></a></span>
<span id="cb50-26"><a href="https://oleg.fi/gists/atom.xml#cb50-26"></a>thinₒ≡thinₙ <span class="ot">:</span> <span class="ot">(λ</span> i <span class="ot">→</span> Action n m <span class="ot">(</span>Orth≡NonStr i<span class="ot">))</span> [ thinₒ ≡ thinₙ ]</span>
<span id="cb50-27"><a href="https://oleg.fi/gists/atom.xml#cb50-27"></a>thinₒ≡thinₙ <span class="ot">=</span> toPathP thinₙₜ≡thinₙ</span></code></pre></div>
<p>The HIT version is not much trickier, if any.</p>
<div class="sourceCode" id="cb51"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb51-1"><a href="https://oleg.fi/gists/atom.xml#cb51-1"></a>thinₕₜ <span class="ot">:</span> n ⊑ₕ m <span class="ot">→</span> Var n <span class="ot">→</span> Var m</span>
<span id="cb51-2"><a href="https://oleg.fi/gists/atom.xml#cb51-2"></a>thinₕₜ <span class="ot">{</span>n<span class="ot">}</span> <span class="ot">{</span>m<span class="ot">}</span> <span class="ot">=</span> subst <span class="ot">(</span>Action n m<span class="ot">)</span> Orth≡HIT thinₒ</span>
<span id="cb51-3"><a href="https://oleg.fi/gists/atom.xml#cb51-3"></a></span>
<span id="cb51-4"><a href="https://oleg.fi/gists/atom.xml#cb51-4"></a>HIT→Orth-thin <span class="ot">:</span> <span class="ot">(</span>δ <span class="ot">:</span> n ⊑ₕ m<span class="ot">)</span> <span class="ot">(</span>x <span class="ot">:</span> Var n<span class="ot">)</span> <span class="ot">→</span> thinₒ <span class="ot">(</span>HIT→Orth δ<span class="ot">)</span> x ≡ thinₕ δ x</span>
<span id="cb51-5"><a href="https://oleg.fi/gists/atom.xml#cb51-5"></a>HIT→Orth-thin idₕ       x      <span class="ot">=</span> thin-idₒ x</span>
<span id="cb51-6"><a href="https://oleg.fi/gists/atom.xml#cb51-6"></a>HIT→Orth-thin <span class="ot">(</span>skipₕ δ<span class="ot">)</span> x      <span class="ot">=</span> cong vs <span class="ot">(</span>HIT→Orth-thin δ x<span class="ot">)</span></span>
<span id="cb51-7"><a href="https://oleg.fi/gists/atom.xml#cb51-7"></a>HIT→Orth-thin <span class="ot">(</span>keepₕ δ<span class="ot">)</span> vz     <span class="ot">=</span> refl</span>
<span id="cb51-8"><a href="https://oleg.fi/gists/atom.xml#cb51-8"></a>HIT→Orth-thin <span class="ot">(</span>keepₕ δ<span class="ot">)</span> <span class="ot">(</span>vs x<span class="ot">)</span> <span class="ot">=</span> cong vs <span class="ot">(</span>HIT→Orth-thin δ x<span class="ot">)</span></span>
<span id="cb51-9"><a href="https://oleg.fi/gists/atom.xml#cb51-9"></a></span>
<span id="cb51-10"><a href="https://oleg.fi/gists/atom.xml#cb51-10"></a>HIT→Orth-thin <span class="ot">(</span>keep-id≡idₕ n i<span class="ot">)</span> vz     <span class="ot">=</span> refl</span>
<span id="cb51-11"><a href="https://oleg.fi/gists/atom.xml#cb51-11"></a>HIT→Orth-thin <span class="ot">(</span>keep-id≡idₕ n i<span class="ot">)</span> <span class="ot">(</span>vs x<span class="ot">)</span> <span class="ot">=</span> cong vs <span class="ot">(</span>thin-idₒ x<span class="ot">)</span></span>
<span id="cb51-12"><a href="https://oleg.fi/gists/atom.xml#cb51-12"></a></span>
<span id="cb51-13"><a href="https://oleg.fi/gists/atom.xml#cb51-13"></a>thinₕₜ≡thinₕ-pointwise <span class="ot">:</span> <span class="ot">(</span>δ <span class="ot">:</span> n ⊑ₕ m<span class="ot">)</span> <span class="ot">(</span>x <span class="ot">:</span> Var n<span class="ot">)</span> <span class="ot">→</span> thinₕₜ δ x ≡ thinₕ δ x</span>
<span id="cb51-14"><a href="https://oleg.fi/gists/atom.xml#cb51-14"></a>thinₕₜ≡thinₕ-pointwise <span class="ot">{</span>n<span class="ot">}</span> <span class="ot">{</span>m<span class="ot">}</span> δ x</span>
<span id="cb51-15"><a href="https://oleg.fi/gists/atom.xml#cb51-15"></a>  <span class="ot">=</span> transportRefl <span class="ot">(</span>thinₒ <span class="ot">(</span>HIT→Orth <span class="ot">(</span>transp <span class="ot">(λ</span> i <span class="ot">→</span> n ⊑ₕ m<span class="ot">)</span> i0 δ<span class="ot">))</span> <span class="ot">(</span>transp <span class="ot">(λ</span> j <span class="ot">→</span> Var n<span class="ot">)</span> i0 x<span class="ot">))</span></span>
<span id="cb51-16"><a href="https://oleg.fi/gists/atom.xml#cb51-16"></a>  ∙ cong₂ thinₒ <span class="ot">(</span>cong HIT→Orth <span class="ot">(</span>transportRefl δ<span class="ot">))</span> <span class="ot">(</span>transportRefl x<span class="ot">)</span></span>
<span id="cb51-17"><a href="https://oleg.fi/gists/atom.xml#cb51-17"></a>  ∙ HIT→Orth-thin δ x</span>
<span id="cb51-18"><a href="https://oleg.fi/gists/atom.xml#cb51-18"></a></span>
<span id="cb51-19"><a href="https://oleg.fi/gists/atom.xml#cb51-19"></a>thinₕₜ≡thinₕ <span class="ot">:</span> <span class="ot">(</span>thinₕₜ <span class="ot">{</span>n<span class="ot">}</span> <span class="ot">{</span>m<span class="ot">})</span> ≡ thinₕ</span>
<span id="cb51-20"><a href="https://oleg.fi/gists/atom.xml#cb51-20"></a>thinₕₜ≡thinₕ i δ x <span class="ot">=</span> thinₕₜ≡thinₕ-pointwise δ x i</span>
<span id="cb51-21"><a href="https://oleg.fi/gists/atom.xml#cb51-21"></a></span>
<span id="cb51-22"><a href="https://oleg.fi/gists/atom.xml#cb51-22"></a>thinₒ≡thinₕ <span class="ot">:</span> <span class="ot">(λ</span> i <span class="ot">→</span> Action n m <span class="ot">(</span>Orth≡HIT i<span class="ot">))</span> [ thinₒ ≡ thinₕ ]</span>
<span id="cb51-23"><a href="https://oleg.fi/gists/atom.xml#cb51-23"></a>thinₒ≡thinₕ <span class="ot">=</span> toPathP thinₕₜ≡thinₕ</span></code></pre></div>
<p>At the end we have three variants of thinnings with identity and composition, and which act on variables the same way.</p>
<p>Now, if we prove properties of these operations, e.g. identity laws, composition associativity, or that composition and action commute, it would be enough to prove these for the orthodox implementation, then we can simply transport the proofs.</p>
<p>In other words, whatever we prove about one structure will hold for two others, like <code>idₕ-unique</code> in previous section.</p>
<p>Some proofs are simple:</p>
<div class="sourceCode" id="cb52"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb52-1"><a href="https://oleg.fi/gists/atom.xml#cb52-1"></a>thin-idₕ <span class="ot">:</span> <span class="ot">(</span>x <span class="ot">:</span> Var n<span class="ot">)</span> <span class="ot">→</span> thinₕ idₕ x ≡ x</span>
<span id="cb52-2"><a href="https://oleg.fi/gists/atom.xml#cb52-2"></a>thin-idₕ x <span class="ot">=</span> refl</span></code></pre></div>
<p>but we can get them through the equality anyway:</p>
<div class="sourceCode" id="cb53"><pre class="sourceCode agda"><code class="sourceCode agda"><span id="cb53-1"><a href="https://oleg.fi/gists/atom.xml#cb53-1"></a>thin-idₕ' <span class="ot">:</span> <span class="ot">(</span>x <span class="ot">:</span> Var n<span class="ot">)</span> <span class="ot">→</span> thinₕ idₕ x ≡ x</span>
<span id="cb53-2"><a href="https://oleg.fi/gists/atom.xml#cb53-2"></a>thin-idₕ' <span class="ot">{</span>n<span class="ot">}</span> x <span class="ot">=</span> subst</span>
<span id="cb53-3"><a href="https://oleg.fi/gists/atom.xml#cb53-3"></a>  <span class="ot">{</span>A <span class="ot">=</span> Σ <span class="ot">_</span> <span class="ot">(λ</span> <span class="ot">_</span>⊑<span class="ot">_</span> <span class="ot">→</span> Action n n <span class="ot">_</span>⊑<span class="ot">_</span> × <span class="ot">(</span>n ⊑ n<span class="ot">))}</span>                <span class="co">-- structure</span></span>
<span id="cb53-4"><a href="https://oleg.fi/gists/atom.xml#cb53-4"></a>  <span class="ot">(λ</span> <span class="ot">{</span> <span class="ot">(_</span>⊑<span class="ot">_</span> , thin , id<span class="ot">)</span> <span class="ot">→</span> thin id x ≡ x <span class="ot">})</span>                   <span class="co">-- motif</span></span>
<span id="cb53-5"><a href="https://oleg.fi/gists/atom.xml#cb53-5"></a>  <span class="ot">(λ</span> i <span class="ot">→</span> Orth≡HIT i , thinₒ≡thinₕ i , CatOps-Orth≡HIT i <span class="ot">.</span>fst<span class="ot">)</span> <span class="co">-- proof that structures are equal</span></span>
<span id="cb53-6"><a href="https://oleg.fi/gists/atom.xml#cb53-6"></a>  <span class="ot">(</span>thin-idₒ x<span class="ot">)</span>                                                <span class="co">-- proof to transport</span></span></code></pre></div></div>
    </summary>
    <updated>2022-09-30T00:00:00Z</updated>
    <published>2022-09-30T00:00:00Z</published>
    <source>
      <id>https://oleg.fi/gists/atom.xml</id>
      <author>
        <name>Oleg Grenrus</name>
        <email>oleg.grenrus@iki.fi</email>
      </author>
      <link href="https://oleg.fi/gists/atom.xml" rel="self" type="application/atom+xml">
      <link href="https://oleg.fi/gists" rel="alternate" type="text/html">
      <title>Oleg's gists</title>
      <updated>2022-10-08T00:00:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>https://wellquite.org/posts/complexity/</id>
    <link href="https://wellquite.org/posts/complexity/" rel="alternate" type="text/html">
    <title>Complexity and software engineering</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>OK, it’s definitely not just the software industry. If you’ve seen the
film <a href="https://en.wikipedia.org/wiki/The_Big_Short_(film)">The Big
Short</a> you may
remember the seemingly endless secondary markets, adding complexity
that led to no one understanding what risks they were exposed to. The
motivation there seemed to be purely making money.</p>

<p>Look at the food on your plate at dinner, and try thinking about the
complexity of where all the ingredients came from to make that
meal. If you have meat on your plate it might have been grown in the
same country as you, but maybe not for the food the animal ate.
You’re probably also eating animal antibiotics (or the remains of
them). Where were they made? How can you start to get a hold on the
incredible complexity of the human food chain? The motivation here
seems also to be to make money: if you can make the same product as
your competitors, but cheaper, then you can undercut your competitors
a little, have bigger margins, and make more money. Who cares if it
requires enormous environmental damage, right? Products are sure as
hell not priced to reflect the damage done to the environment to
create, maintain, or dispose of them.</p>

<p>As an aside, have you ever marvelled at how incredible plants are?
They literally convert dirt, sunlight, water, and a few minerals, into
food. Ultimately we’re all just the result of dirt, sunlight, water,
and a few minerals. Bonkers.</p>

<p>Software does seem a little different though. We seem to utterly
fetishize complexity, mostly for bragging rights. I’ve certainly been
guilty in the past (and I suspect in the future too), of building far
more complicated things than necessary, <em>because I can</em>. In a number
of cases I could concoct a benchmark which showed the new code was
faster, thus justifying the increased complexity of the code, and the
consequence of a more difficult code-base to maintain. I definitely
get a buzz from making a complex thing work, and I suspect this is
quite common. I’ve been told that at Amazon, promotion requires being
able to demonstrate that you’ve built or maintained complex
systems. Well I love hearing about unintended 2nd-order effects. The
consequence here is pretty obvious: a whole bunch of systems get built
in ludicrously complex ways just so that people can apply for
promotion. I guess the motivation there is money too.</p>

<p>As I say, when building something complex, it can be rewarding when it
works. Six months later I’ve often come to regret it, when the
complexity is directly opposed to being able to fix a bug that’s
surfaced. It can cause silos by creating “domain experts” (i.e. a ball
and chain around your feet). I’ve had cases where I’ve had to build
enormously complex bits of code in order to work around equally
bonkers levels of tech-debt, which can’t be removed because of
“business reasons”. The result is unnecessary complexity on top of
unnecessary complexity. No single person can understand how the whole
thing works (much less write down some semantics, or any invariants)
because the code-base is now too large, too complex, and riddled with
remote couplings, broken abstractions, poor design, and invalid
assumptions. Certain areas of the code-base become feared, and more
code gets added to avoid confronting the complexity. Developer
velocity slows to an absolute crawl, developers get frustrated and
head for the door. No one is left who understands much. With some time
and space since that particular situation, it’s now easy for me to sit
here and declare that sort of thing a red-flag, and that I should have
run away from it sooner. Who knows what’ll happen next time?</p>

<p>I find it easy to convince myself that complexity I’ve built, or claim
to understand, is acceptable, whilst complexity I don’t understand is
abhorrent.</p>

<p>As an industry we seem to love to kid ourselves that we’re all solving
the same problems as Google, Facebook, or Amazon etc. At no job I’ve
ever worked do I believe the complexity that comes from use of
<a href="https://kubernetes.io/">Kubernetes</a> is justified, and yet it seems to
have become “best practice”, which I find baffling. On a recent
project I decided to rent a single (virtual) server, and I deploy
everything with a single <code>nixos-rebuild --target-host myhost
switch</code>. Because everything on the server is running under <code>systemd</code>,
and because of the way <code>nixos</code> restarts services, downtime is less
than 2 seconds and is only visible to long-lived connections
(WebSockets in this case): <code>systemd</code> can <a href="https://www.freedesktop.org/software/systemd/man/systemd.socket.html">manage listening-sockets
itself</a>
and pass them to the new executable, maintaining any backlog of
pending connections.</p>

<p>To me, this “simplicity” is preferable than trying to achieve 100%
service availability. I’m not going to lose any money because of 2
seconds of downtime, even if that happens several times a day. It’s
much more valuable to me to be able to get code changes deployed
quickly. Is this really simpler than using something like Kubernetes?
Maybe: there are certainly fewer moving parts and all the <code>nixos</code>
stuff is only involved when deploying updates. Nevertheless, it’s not
exactly simple; but I believe I understand enough of it to be happy to
build, use, and rely on it.</p>

<hr>

<p>I was recently reading Nick Cameron’s blog post on <a href="https://www.ncameron.org/blog/ten-challenges-for-rust/">10 challenges for
Rust</a>. The
<a href="https://www.ncameron.org/blog/ten-challenges-for-rust/#9-big-compiler-changes">9th</a>
point made me think about the difficulty of maintaining the ability to
make big changes to any large software project. We probably all know
to say the right words about avoiding hidden or tight couplings, but
evidence doesn’t seem to suggest that it’s possible in large
sophisticated software projects.</p>

<p>We are taught to fear the “big rewrite” project, citing
<a href="https://en.wikipedia.org/wiki/Second-system_effect">2nd-system-syndrome</a>,
though the definition of that seems to be about erroneously replacing
“small, elegant, and successful systems”. It’s not about replacing
giant, bug riddled, badly understood and engineered systems (to be
super clear, I’m talking about this in general, not about the Rust
compiler which I know nothing about). I do think we are often mistaken
to fear rebuilding systems: I suspect we look at the size of the
existing system and estimate the difficulty of recreating it. But of
course we don’t want to recreate all those problems. We’ve learnt from
them and can carry that knowledge forwards (assuming you manage to
stop an employee exodus). There’s no desire to recreate the mountains
of code that stem from outdated assumptions, inevitable mistakes in
code design, unnecessary and accidental complexity, tech-debt, and its
workarounds.</p>

<p>I’ve been thinking about parallels in other industries. Given the
current price of energy in the UK and how essential it is to improve
the heating efficiency of our homes, it’s often cheaper to knock down
existing awful housing and rebuild from scratch. No fear of
2nd-system-syndrome here: it’s pretty unarguable that a lot of housing
in the UK is dreadful, both from the point of view of how we use rooms
these days, and energy efficiency. Retrofitting can often end up being
more expensive, less effective, slower, and addresses only a few
problems. But incremental improvement doesn’t require as much up-front
capital.</p>

<p>If you look at the creative arts, artists, authors, and composers all
create a piece of work and then it’s pretty much <em>done</em>. Yes, there
are plenty of examples of composers going back and revising works
after they’ve been performed (Bruckner and Sibelius for example),
sometimes for slightly odd reasons such as establishing or extending
copyright (for example Stravinsky). But a piece of art is not built by
a slowly changing team over a period of 10 years (film may be an
interesting exception to this). When it’s time to start a new piece of
art, well, it’s time. Knowledge, style, preferences, techniques: these
are carried forwards. Shostakovich always sounds unmistakably like
Shostakovich. But his fifth symphony is not his fourth with a few bug
fixes.</p>

<p>At the other end of the spectrum, take the economic philosophy known
as <a href="https://en.wikipedia.org/wiki/Georgism">Georgism</a>. From what I can
gather, no serious economist on the left or right believes it would be
a bad idea to implement, and it seems like it would have a great many
benefits. But large landowners (people who own a lot of land, not
people who own any amount of land and happen to be large) would
probably have to pay more tax. Large landowners tend to currently have
a lot of political power. Consequently Georgism never gets implemented
in the West. So despite it being almost universally accepted as a good
idea, because we can’t “start again”, we’re never going to have
it. From what I can see, literally the only chance would be a
successful violent uprising.</p>

<p>Finally, recently I came across <a href="https://papers.ssrn.com/sol3/papers.cfm?abstract_id=4015530">“When Do Startups Scale? Large-scale
Evidence from Job
Postings”</a>
by Lee and Kim. Now this paper isn’t specifically looking at software,
and they use the word “experiment” to mean changing the product the
company is creating in order to find the best fit for their market –
they’re not talking about experimenting with software. Nevertheless:</p>

<blockquote>
<p>We find that startups that begin scaling within the first 12 months
of their founding are 20 to 40% more likely to fail. Our results
show that this positive correlation between scaling early and firm
failure is negated for startups that engage in experimentation
through A/B testing.</p>
</blockquote>

<p>It’s definitely a big stretch, but in the case of software this could
be evidence that delaying writing lots of code, for as long as
possible, is beneficial. Avoid complexity; continue to experiment with
prototypes and throw-away code and treat nothing as sacrosanct for as
long as possible. Do not acquiesce to complexity: give it an inch and
it’ll take a mile before you even realise what’s happened.</p>

<hr>

<p>So what to do? I’ve sometimes thought that say, once a month,
companies should run some git queries and identify the oldest code in
their code-bases. This code hasn’t been touched for years. The authors
have long since left. It may be that no one understands what it even
does. What happens if we delete it? Now in many ways (probably <em>all</em>
ways) this is a completely mad idea: if it ain’t broke, don’t fix it,
and why waste engineering resources on recreating code and
functionality that no one had a problem with?</p>

<p>But at the same time, if this was the culture across the entire
company and was priced in, then it might enable some positive things:</p>

<ul>
<li><p>There would be more eyes on, and understanding of, ancient
code. Thus less ancient code, and more understanding in general.</p></li>

<li><p>This ancient code may well embody terribly outdated assumptions
about what the product does. Can it be updated with the current
ideas and assumptions?</p></li>

<li><p>This ancient code may also encode invariants about the product which
are no longer true. There may be a way to change or relax them. By
doing so you might be able to delete various workarounds and
tech-debt that exists higher up.</p></li>
</ul>

<p>Now because I would guess a lot of ancient code is quite foundational,
changing it may very well be quite dangerous. One fix could very
quickly demand another, and before you know it you’ve embarked upon
rewriting the whole thing. Maybe that’s the goal: maybe you should aim
to be able to rewrite huge sections of the product within a month if
it is judged to be beneficial to the code-base. But of course this
requires such ideas to be taken seriously and valued right across the
company. For the engineering team to have a strong voice at the top
table. And really is this so different from just keeping a list of
areas of the code that no one likes and dedicating time to fixing
those? I guess if nothing else, it might give a starting point for
making such a list.</p>

<p>Unnecessary complexity in software seems endemic, and is frequently
worshipped. This, and a fear of experiments to rewrite, blunts the
drive to simplify. Yet the benefits of a smaller and simpler code-base
are unarguable: with greater understanding of how the product works, a
small team can move much faster.</p></div>
    </summary>
    <updated>2022-09-26T16:01:09Z</updated>
    <published>2022-09-26T16:01:09Z</published>
    <source>
      <id>https://wellquite.org/</id>
      <logo>https://wellquite.org/android-chrome-512x512.png</logo>
      <author>
        <name>Matthew Sackman</name>
      </author>
      <link href="https://wellquite.org/" rel="alternate" type="text/html">
      <link href="https://wellquite.org/index.xml" rel="self" type="application/rss+xml">
      <rights>Copyright Â© 2022, Matthew Sackman</rights>
      <subtitle>Recent content on Well, quite.</subtitle>
      <title>Well, quite.</title>
      <updated>2022-09-26T13:42:44Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-9757377.post-1591410635265113001</id>
    <link href="https://www.angryreviewer.com/" rel="related" title="Angry Reviewer" type="text/html">
    <link href="https://wadler.blogspot.com/feeds/1591410635265113001/comments/default" rel="replies" title="Post Comments" type="application/atom+xml">
    <link href="https://www.blogger.com/comment.g?blogID=9757377&amp;postID=1591410635265113001" rel="replies" title="0 Comments" type="text/html">
    <link href="https://www.blogger.com/feeds/9757377/posts/default/1591410635265113001" rel="edit" type="application/atom+xml">
    <link href="https://www.blogger.com/feeds/9757377/posts/default/1591410635265113001" rel="self" type="application/atom+xml">
    <link href="https://wadler.blogspot.com/2022/09/angry-reviewer.html" rel="alternate" title="Angry Reviewer" type="text/html">
    <title>Angry Reviewer</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Â </p><div class="separator" style="clear: both; text-align: center;"><a href="https://blogger.googleusercontent.com/img/a/AVvXsEhTozqid_KsnQIUBPwJFxJ7kTrZBc3s7uTmh2ym81sf9X-ajjT6jji0t0LdmOuJRDS4RMX1If2hwLvhfmTSVJTYqg4iaiGfH8uNvxHnMYnbQ7MwFZYXJAsGp58tposy_FP9O8Vs8mRMDWI806FyJJAMABcroBBTupcD_WepWXm-jQReO2lAOQ" style="margin-left: 1em; margin-right: 1em;"><img alt="" height="410" src="https://blogger.googleusercontent.com/img/a/AVvXsEhTozqid_KsnQIUBPwJFxJ7kTrZBc3s7uTmh2ym81sf9X-ajjT6jji0t0LdmOuJRDS4RMX1If2hwLvhfmTSVJTYqg4iaiGfH8uNvxHnMYnbQ7MwFZYXJAsGp58tposy_FP9O8Vs8mRMDWI806FyJJAMABcroBBTupcD_WepWXm-jQReO2lAOQ=w640-h410" width="640"></a></div><a href="https://www.angryreviewer.com/">Angry Reviewer</a> is a tool to provide feedback on your writing. I look forward to trying it out.<p></p></div>
    </content>
    <updated>2022-09-26T12:08:25Z</updated>
    <published>2022-09-26T12:08:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="Academia"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="Writing"/>
    <author>
      <name>Philip Wadler</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/12009347515095774366</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-9757377</id>
      <category term="Politics"/>
      <category term="Functional Programming"/>
      <category term="Programming Languages"/>
      <category term="Scotland"/>
      <category term="Computing"/>
      <category term="Independence"/>
      <category term="Yes!"/>
      <category term="Haskell"/>
      <category term="Academia"/>
      <category term="UK"/>
      <category term="Edinburgh"/>
      <category term="Cycling"/>
      <category term="Graphics"/>
      <category term="Mathematics"/>
      <category term="Science"/>
      <category term="Types"/>
      <category term="Logic"/>
      <category term="US"/>
      <category term="Covid-19"/>
      <category term="Security"/>
      <category term="Web"/>
      <category term="EU"/>
      <category term="Comics"/>
      <category term="Theory"/>
      <category term="Climate Change"/>
      <category term="Israel"/>
      <category term="Blockchain"/>
      <category term="Education"/>
      <category term="IOHK"/>
      <category term="Cryptocurrency"/>
      <category term="Internet"/>
      <category term="SIGPLAN"/>
      <category term="Scala"/>
      <category term="Status"/>
      <category term="University"/>
      <category term="Writing"/>
      <category term="ACM"/>
      <category term="Comedy"/>
      <category term="Concurrency"/>
      <category term="DSL"/>
      <category term="Databases"/>
      <category term="Dynamic and Static Typing"/>
      <category term="F#"/>
      <category term="Green"/>
      <category term="JavaScript"/>
      <category term="Lego"/>
      <category term="Privacy"/>
      <category term="Recursion"/>
      <category term="Session Types"/>
      <category term="Strange Loop"/>
      <category term="Agda"/>
      <category term="Category Theory"/>
      <category term="Developers"/>
      <category term="Formal Methods"/>
      <category term="Java"/>
      <category term="Object-Oriented"/>
      <category term="Technology"/>
      <category term="Architecture"/>
      <category term="Copyright"/>
      <category term="Distributed Computing"/>
      <category term="Europe"/>
      <category term="Productivity"/>
      <category term="Racket"/>
      <category term="Science Fiction"/>
      <category term="BLM"/>
      <category term="Brexit"/>
      <category term="DRM"/>
      <category term="Environment"/>
      <category term="Erlang"/>
      <category term="Finance"/>
      <category term="Gender"/>
      <category term="Theatre"/>
      <category term="BDS"/>
      <category term="Books"/>
      <category term="Cinema"/>
      <category term="Communication"/>
      <category term="Japan"/>
      <category term="Net Neutrality"/>
      <category term="Open Access"/>
      <category term="Palestine"/>
      <category term="Pyret"/>
      <category term="Scheme"/>
      <category term="Sweden"/>
      <author>
        <name>Philip Wadler</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/12009347515095774366</uri>
      </author>
      <link href="https://wadler.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml">
      <link href="https://www.blogger.com/feeds/9757377/posts/default?alt=atom" rel="self" type="application/atom+xml">
      <link href="https://wadler.blogspot.com/" rel="alternate" type="text/html">
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html">
      <link href="https://www.blogger.com/feeds/9757377/posts/default?alt=atom&amp;start-index=26&amp;max-results=25" rel="next" type="application/atom+xml">
      <title>Wadler's Blog</title>
      <updated>2022-11-12T12:12:37Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://magnus.therning.org/2022-09-24-annotate-projects-in-emacs.html</id>
    <link href="https://magnus.therning.org/2022-09-24-annotate-projects-in-emacs.html" rel="alternate" type="text/html">
    <title>Annotate projects in Emacs</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>
Every now and then I've wished to write comments on files in a project, but I've
never found a good way to do that. <a href="https://www.emacswiki.org/emacs/Annotate">annotate.el</a> and <a href="https://www.emacswiki.org/emacs/OrgAnnotateFile">org-annotate-file</a> both
collect annotations in a central place (in my <code>$HOME</code>), while <a href="https://www.emacswiki.org/emacs/Marginalia">marginalia</a> puts
annotations in files next to the source files but in a format that's rather
cryptic and tends to be messed up when attached to multiple lines. None of them
is ideal, I'd like the format to be org-mode, but not in a central file. At the
same time having one annotation file per source file is simply too much.
</p>

<p>
I tried wrapping <code>org-annotate-file</code>, setting <code>org-annotate-file-storage-file</code>
and taking advantage of elisp's dynamic binding. However, it opens the
annotation file in the current window, and I'd really like to split the window
and open the annotations the right. Rather than trying to sort of &quot;work it out
backwards&quot; I decided to write a small package and use as much of the
functionality in <code>org-annotate-file.el</code> as possible.
</p>

<p>
First off I decided that I want the annotation file to be called
<code>projectile-annotations.org</code>.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span class="org-rainbow-delimiters-depth-1">(</span><span class="org-keyword">defvar</span> <span class="org-variable-name">org-projectile-annotate-file-name</span> <span class="org-string">&quot;projectile-annotations.org&quot;</span>
  <span class="org-doc">&quot;The name of the file to store project annotations.&quot;</span><span class="org-rainbow-delimiters-depth-1">)</span>
</pre>
</div>

<p>
Then I wanted a slightly modified version of <code>org-annotate-file-show-section</code>, I
wanted it to respect the root of the project.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span class="org-rainbow-delimiters-depth-1">(</span><span class="org-keyword">defun</span> <span class="org-function-name">org-projectile-annotate--file-show-section</span> <span class="org-rainbow-delimiters-depth-2">(</span>storage-file<span class="org-rainbow-delimiters-depth-2">)</span>
  <span class="org-doc">&quot;Add or show annotation entry in STORAGE-FILE and return the buffer.&quot;</span>
  <span class="org-comment-delimiter">;; </span><span class="org-comment">modified version of org-annotate-file-show-section</span>
  <span class="org-rainbow-delimiters-depth-2">(</span><span class="org-keyword">let*</span> <span class="org-rainbow-delimiters-depth-3">(</span><span class="org-rainbow-delimiters-depth-4">(</span>proj-root <span class="org-rainbow-delimiters-depth-5">(</span>projectile-project-root<span class="org-rainbow-delimiters-depth-5">)</span><span class="org-rainbow-delimiters-depth-4">)</span>
         <span class="org-rainbow-delimiters-depth-4">(</span>filename <span class="org-rainbow-delimiters-depth-5">(</span>file-relative-name buffer-file-name proj-root<span class="org-rainbow-delimiters-depth-5">)</span><span class="org-rainbow-delimiters-depth-4">)</span>
         <span class="org-rainbow-delimiters-depth-4">(</span>line <span class="org-rainbow-delimiters-depth-5">(</span>buffer-substring-no-properties <span class="org-rainbow-delimiters-depth-6">(</span>point-at-bol<span class="org-rainbow-delimiters-depth-6">)</span> <span class="org-rainbow-delimiters-depth-6">(</span>point-at-eol<span class="org-rainbow-delimiters-depth-6">)</span><span class="org-rainbow-delimiters-depth-5">)</span><span class="org-rainbow-delimiters-depth-4">)</span>
         <span class="org-rainbow-delimiters-depth-4">(</span>annotation-buffer <span class="org-rainbow-delimiters-depth-5">(</span>find-file-noselect storage-file<span class="org-rainbow-delimiters-depth-5">)</span><span class="org-rainbow-delimiters-depth-4">)</span><span class="org-rainbow-delimiters-depth-3">)</span>
    <span class="org-rainbow-delimiters-depth-3">(</span><span class="org-keyword">with-current-buffer</span> annotation-buffer
      <span class="org-rainbow-delimiters-depth-4">(</span>org-annotate-file-annotate filename line<span class="org-rainbow-delimiters-depth-4">)</span><span class="org-rainbow-delimiters-depth-3">)</span>
    annotation-buffer<span class="org-rainbow-delimiters-depth-2">)</span><span class="org-rainbow-delimiters-depth-1">)</span>
</pre>
</div>

<p>
The main function can then simply work out where the file with annotations
should be located and call <code>org-projectile-annotate--file-show-section</code>.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span class="org-rainbow-delimiters-depth-1">(</span><span class="org-keyword">defun</span> <span class="org-function-name">org-projectile-annotate</span> <span class="org-rainbow-delimiters-depth-2">()</span>
  <span class="org-rainbow-delimiters-depth-2">(</span><span class="org-keyword">interactive</span><span class="org-rainbow-delimiters-depth-2">)</span>
  <span class="org-rainbow-delimiters-depth-2">(</span><span class="org-keyword">let</span> <span class="org-rainbow-delimiters-depth-3">(</span><span class="org-rainbow-delimiters-depth-4">(</span>annot-fn <span class="org-rainbow-delimiters-depth-5">(</span>file-name-concat <span class="org-rainbow-delimiters-depth-6">(</span>projectile-project-root<span class="org-rainbow-delimiters-depth-6">)</span>
                                    org-projectile-annotate-file-name<span class="org-rainbow-delimiters-depth-5">)</span><span class="org-rainbow-delimiters-depth-4">)</span><span class="org-rainbow-delimiters-depth-3">)</span>
    <span class="org-rainbow-delimiters-depth-3">(</span>set-window-buffer <span class="org-rainbow-delimiters-depth-4">(</span>split-window-right<span class="org-rainbow-delimiters-depth-4">)</span>
                       <span class="org-rainbow-delimiters-depth-4">(</span>org-projectile-annotate--file-show-section annot-fn<span class="org-rainbow-delimiters-depth-4">)</span><span class="org-rainbow-delimiters-depth-3">)</span><span class="org-rainbow-delimiters-depth-2">)</span><span class="org-rainbow-delimiters-depth-1">)</span>
</pre>
</div>

<p>
When testing it all out I noticed that <code>org-store-link</code> makes a link with a
search text. In my case it would be much better to have links with line numbers.
I found there's a hook to modify the behaviour of <code>org-store-link</code>,
<code>org-create-file-search-functions</code>. So I wrote a function to get the kind of
links I want, but only when the project annotation file is open in a buffer.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span class="org-rainbow-delimiters-depth-1">(</span><span class="org-keyword">defun</span> <span class="org-function-name">org-projectile-annotate-file-search-func</span> <span class="org-rainbow-delimiters-depth-2">()</span>
  <span class="org-doc">&quot;A function returning the current line number when called in a</span>
<span class="org-doc">project while the project annotation file is open.</span>

<span class="org-doc">This function is designed for use in the hook</span>
<span class="org-doc">'</span><span class="org-doc"><span class="org-constant">org-create-file-search-functions</span></span><span class="org-doc">'. It changes the behaviour of</span>
<span class="org-doc">'</span><span class="org-doc"><span class="org-constant">org-store-link</span></span><span class="org-doc">' so it constructs a link with a line number</span>
<span class="org-doc">instead of a search string.&quot;</span>
  <span class="org-comment-delimiter">;; </span><span class="org-comment"><span class="custom">TODO:</span></span><span class="org-comment"> find a way to make the link description nicer</span>
  <span class="org-rainbow-delimiters-depth-2">(</span><span class="org-keyword">when</span> <span class="org-rainbow-delimiters-depth-3">(</span><span class="org-keyword">and</span> <span class="org-rainbow-delimiters-depth-4">(</span>projectile-project-p<span class="org-rainbow-delimiters-depth-4">)</span>
             <span class="org-rainbow-delimiters-depth-4">(</span>get-buffer-window org-projectile-annotate-file-name<span class="org-rainbow-delimiters-depth-4">)</span><span class="org-rainbow-delimiters-depth-3">)</span>
    <span class="org-rainbow-delimiters-depth-3">(</span>number-to-string <span class="org-rainbow-delimiters-depth-4">(</span>line-number-at-pos<span class="org-rainbow-delimiters-depth-4">)</span><span class="org-rainbow-delimiters-depth-3">)</span><span class="org-rainbow-delimiters-depth-2">)</span><span class="org-rainbow-delimiters-depth-1">)</span>
</pre>
</div>

<p>
That's it, now I only have to wait until the next time I want to comment on a
project to see if it improves my way of working.
</p>
<div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-emacs.html">emacs</a> <a href="https://magnus.therning.org/tag-org-mode.html">org-mode</a></div></div>
    </summary>
    <updated>2022-09-24T20:42:00Z</updated>
    <published>2022-09-24T20:42:00Z</published>
    <category term="emacs"/>
    <category term="org-mode"/>
    <source>
      <id>https://magnus.therning.org/</id>
      <author>
        <name>Magnus Therning</name>
      </author>
      <link href="https://magnus.therning.org/" rel="alternate" type="text/html">
      <link href="https://magnus.therning.org/feed.xml" rel="self" type="application/rss+xml">
      <subtitle>Magnus web site</subtitle>
      <title>Magnus web site</title>
      <updated>2022-09-24T21:45:55Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://blog.poisson.chat/posts/2022-09-21-quantified-constraint-trick.html</id>
    <link href="https://blog.poisson.chat/posts/2022-09-21-quantified-constraint-trick.html" rel="alternate" type="text/html">
    <title>The quantified constraint trick</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>My favorite Haskell trick is how to use quantified constraints with type families.
<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/14860#note_188736">Kudos to <em>Iceland_jack</em> for coming up with it.</a></p>
<h2 id="quantified-constraints-and-type-families">Quantified constraints and type families</h2>
<p><code>QuantifiedConstraints</code> is an extension from GHC 8.6 that lets us
use <code>forall</code> in constraints.</p>
<p>It lets us express constraints for instances of higher-kinded types like <code>Fix</code>:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="https://blog.poisson.chat/rss.xml#cb1-1" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">Fix</span> <span class="fu">f</span> <span class="ot">=</span> <span class="dt">Fix</span> (<span class="fu">f</span> (<span class="dt">Fix</span> <span class="fu">f</span>))</span>
<span id="cb1-2"><a href="https://blog.poisson.chat/rss.xml#cb1-2" tabindex="-1"></a></span>
<span id="cb1-3"><a href="https://blog.poisson.chat/rss.xml#cb1-3" tabindex="-1"></a><span class="kw">deriving</span> <span class="kw">instance</span> (<span class="kw">forall</span> <span class="fu">a</span><span class="op">.</span> <span class="dt">Eq</span> <span class="fu">a</span> <span class="ot">=&gt;</span> <span class="dt">Eq</span> (<span class="fu">f</span> <span class="fu">a</span>)) <span class="ot">=&gt;</span> <span class="dt">Eq</span> (<span class="dt">Fix</span> <span class="fu">f</span>)</span></code></pre></div>
<p>Other solutions existed previously, but they’re less elegant:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="https://blog.poisson.chat/rss.xml#cb2-1" tabindex="-1"></a><span class="kw">deriving</span> <span class="kw">instance</span> <span class="dt">Eq</span> (<span class="fu">f</span> (<span class="dt">Fix</span> <span class="fu">f</span>)) <span class="ot">=&gt;</span> <span class="dt">Eq</span> (<span class="dt">Fix</span> <span class="fu">f</span>)</span>
<span id="cb2-2"><a href="https://blog.poisson.chat/rss.xml#cb2-2" tabindex="-1"></a></span>
<span id="cb2-3"><a href="https://blog.poisson.chat/rss.xml#cb2-3" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Eq1</span> <span class="fu">f</span> <span class="ot">=&gt;</span> <span class="dt">Eq</span> (<span class="dt">Fix</span> <span class="fu">f</span>) <span class="kw">where</span> <span class="op">...</span></span></code></pre></div>
<p>It also lets us say that a monad transformer indeed transforms monads:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="https://blog.poisson.chat/rss.xml#cb3-1" tabindex="-1"></a><span class="kw">class</span> (<span class="kw">forall</span> <span class="fu">m</span><span class="op">.</span> <span class="dt">Monad</span> <span class="fu">m</span> <span class="ot">=&gt;</span> <span class="dt">Monad</span> (<span class="fu">t</span> <span class="fu">m</span>)) <span class="ot">=&gt;</span> <span class="dt">MonadTrans</span> <span class="fu">t</span> <span class="kw">where</span></span>
<span id="cb3-2"><a href="https://blog.poisson.chat/rss.xml#cb3-2" tabindex="-1"></a>  <span class="fu">lift</span> <span class="ot">::</span> <span class="fu">m</span> <span class="fu">a</span> <span class="ot">-&gt;</span> <span class="fu">t</span> <span class="fu">m</span> <span class="fu">a</span></span></code></pre></div>
<p>(Examples lifted from <a href="https://downloads.haskell.org/ghc/latest/docs/users_guide/exts/quantified_constraints.html">the GHC User Guide on <code>QuantifiedConstraints</code></a>, section Motivation.)</p>
<p>One restriction is that the conclusion of a quantified constraint cannot
mention a type family.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="https://blog.poisson.chat/rss.xml#cb4-1" tabindex="-1"></a><span class="kw">type</span> <span class="kw">family</span> <span class="dt">F</span> <span class="fu">a</span></span>
<span id="cb4-2"><a href="https://blog.poisson.chat/rss.xml#cb4-2" tabindex="-1"></a></span>
<span id="cb4-3"><a href="https://blog.poisson.chat/rss.xml#cb4-3" tabindex="-1"></a><span class="co">-- (forall a. C (F a))  -- Illegal type family application in a quantified constraint</span></span></code></pre></div>
<p>A quantified constraint can be thought of as providing a local instance,
and they are subject to a similar restriction on the shape of instance heads
so that instance resolution may try to match required constraints with
the head of existing instances.</p>
<p>Type families are not matchable: we cannot determine whether an applied
type family <code>F a</code> matches a type constructor <code>T</code> in a manner satisfying the
properties required by instance resolution (“coherence”). So type families
can’t be in the conclusion of a type family.</p>
<h2 id="the-quantified-constraint-trick">The quantified constraint trick</h2>
<h3 id="step-1">Step 1</h3>
<p>To legalize type families in quantified constraints,
all we need is a <em>class synonym</em>:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="https://blog.poisson.chat/rss.xml#cb5-1" tabindex="-1"></a><span class="kw">class</span>    <span class="dt">C</span> (<span class="dt">F</span> <span class="fu">a</span>) <span class="ot">=&gt;</span> <span class="dt">CF</span> <span class="fu">a</span></span>
<span id="cb5-2"><a href="https://blog.poisson.chat/rss.xml#cb5-2" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">C</span> (<span class="dt">F</span> <span class="fu">a</span>) <span class="ot">=&gt;</span> <span class="dt">CF</span> <span class="fu">a</span></span></code></pre></div>
<p>That <code>CF a</code> is equivalent to <code>C (F a)</code>, and <code>forall a. CF a</code> is legal.</p>
<h3 id="step-2">Step 2?</h3>
<p>Since GHC 9.2, Step 1 alone solves the problem. It Just Works™.
<a href="https://mail.haskell.org/pipermail/haskell-cafe/2022-September/135571.html">And I don’t know why.</a></p>
<p>Before that, for GHC 9.0 and prior,
we also needed to hold the compiler’s hand and tell it how
to instantiate the quantified constraint.</p>
<p>Indeed, now functions may have constraints of the form <code>forall a. CF a</code>,
which should imply <code>C (F x)</code> for any <code>x</code>.
Although <code>CF</code> and <code>C (F x)</code> are logically related, when <code>C (F x)</code> is required,
that triggers a search for instances of the class <code>C</code>, and not the <code>CF</code> which
is provided by the quantified constraint.
The search would fail unless some hint is provided to the compiler.</p>
<p>When you require a constraint <code>C (F x)</code>, insert a type annotation mentioning
the <code>CF x</code> constraint (using the <code>CF</code> class instead of <code>C</code>).</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="https://blog.poisson.chat/rss.xml#cb6-1" tabindex="-1"></a><span class="fu">_</span> <span class="co">{- C (F x) available here -}</span> <span class="ot">::</span> <span class="dt">CF</span> <span class="fu">x</span> <span class="ot">=&gt;</span> <span class="fu">_</span></span></code></pre></div>
<p>Inside the annotation (to the left of <code>::</code>), we are given <code>CF x</code>, from which <code>C (F x)</code> is inferred as a superclass. Outside the annotation, we are requiring <code>CF x</code>,
which is trivially solved by the quantified constraint <code>forall a. CF a</code>.</p>
<h3 id="recap">Recap</h3>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="https://blog.poisson.chat/rss.xml#cb7-1" tabindex="-1"></a><span class="co">-- Mixing quantified constraints with type families --</span></span>
<span id="cb7-2"><a href="https://blog.poisson.chat/rss.xml#cb7-2" tabindex="-1"></a></span>
<span id="cb7-3"><a href="https://blog.poisson.chat/rss.xml#cb7-3" tabindex="-1"></a><span class="kw">class</span> <span class="dt">C</span> <span class="fu">a</span></span>
<span id="cb7-4"><a href="https://blog.poisson.chat/rss.xml#cb7-4" tabindex="-1"></a><span class="kw">type</span> <span class="kw">family</span> <span class="dt">F</span> <span class="fu">a</span></span>
<span id="cb7-5"><a href="https://blog.poisson.chat/rss.xml#cb7-5" tabindex="-1"></a></span>
<span id="cb7-6"><a href="https://blog.poisson.chat/rss.xml#cb7-6" tabindex="-1"></a><span class="co">-- forall a. C (F a)  -- Nope.</span></span>
<span id="cb7-7"><a href="https://blog.poisson.chat/rss.xml#cb7-7" tabindex="-1"></a></span>
<span id="cb7-8"><a href="https://blog.poisson.chat/rss.xml#cb7-8" tabindex="-1"></a><span class="kw">class</span>    <span class="dt">C</span> (<span class="dt">F</span> <span class="fu">a</span>) <span class="ot">=&gt;</span> <span class="dt">CF</span> <span class="fu">a</span>  <span class="co">-- Class synonym</span></span>
<span id="cb7-9"><a href="https://blog.poisson.chat/rss.xml#cb7-9" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">C</span> (<span class="dt">F</span> <span class="fu">a</span>) <span class="ot">=&gt;</span> <span class="dt">CF</span> <span class="fu">a</span></span>
<span id="cb7-10"><a href="https://blog.poisson.chat/rss.xml#cb7-10" tabindex="-1"></a></span>
<span id="cb7-11"><a href="https://blog.poisson.chat/rss.xml#cb7-11" tabindex="-1"></a><span class="co">-- forall a. CF a     -- Yup.</span></span>
<span id="cb7-12"><a href="https://blog.poisson.chat/rss.xml#cb7-12" tabindex="-1"></a></span>
<span id="cb7-13"><a href="https://blog.poisson.chat/rss.xml#cb7-13" tabindex="-1"></a><span class="co">-- Some provided function we want to call.</span></span>
<span id="cb7-14"><a href="https://blog.poisson.chat/rss.xml#cb7-14" tabindex="-1"></a><span class="fu">f</span> <span class="ot">::</span> <span class="dt">C</span> (<span class="dt">F</span> <span class="fu">t</span>) <span class="ot">=&gt;</span> <span class="fu">t</span></span>
<span id="cb7-15"><a href="https://blog.poisson.chat/rss.xml#cb7-15" tabindex="-1"></a></span>
<span id="cb7-16"><a href="https://blog.poisson.chat/rss.xml#cb7-16" tabindex="-1"></a><span class="co">-- A function we want to implement using f.</span></span>
<span id="cb7-17"><a href="https://blog.poisson.chat/rss.xml#cb7-17" tabindex="-1"></a><span class="fu">g</span> <span class="ot">::</span> (<span class="kw">forall</span> <span class="fu">a</span><span class="op">.</span> <span class="dt">CF</span> <span class="fu">a</span>) <span class="ot">=&gt;</span> <span class="fu">t</span></span>
<span id="cb7-18"><a href="https://blog.poisson.chat/rss.xml#cb7-18" tabindex="-1"></a><span class="fu">g</span> <span class="ot">=</span> <span class="fu">f</span>               <span class="co">-- OK on GHC &gt;= 9.2</span></span>
<span id="cb7-19"><a href="https://blog.poisson.chat/rss.xml#cb7-19" tabindex="-1"></a><span class="fu">g</span> <span class="ot">=</span> <span class="fu">f</span> <span class="ot">::</span> <span class="dt">CF</span> <span class="fu">t</span> <span class="ot">=&gt;</span> <span class="fu">t</span>  <span class="co">-- Annotation needed on GHC &lt;= 9.0</span></span></code></pre></div>
<p>The part of that type annotation that really matters
is the constraint. The rest of the type to the right of the arrow
is redundant. Another way to write only the constraint uses the following
identity function with a fancy type:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="https://blog.poisson.chat/rss.xml#cb8-1" tabindex="-1"></a><span class="fu">with</span> <span class="ot">::</span> <span class="kw">forall</span> <span class="fu">c</span> <span class="fu">r</span><span class="op">.</span> (<span class="fu">c</span> <span class="ot">=&gt;</span> <span class="fu">r</span>) <span class="ot">-&gt;</span> (<span class="fu">c</span> <span class="ot">=&gt;</span> <span class="fu">r</span>)</span>
<span id="cb8-2"><a href="https://blog.poisson.chat/rss.xml#cb8-2" tabindex="-1"></a><span class="fu">with</span> <span class="fu">x</span> <span class="ot">=</span> <span class="fu">x</span></span></code></pre></div>
<p>So you can supply the hint like this instead:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="https://blog.poisson.chat/rss.xml#cb9-1" tabindex="-1"></a><span class="fu">g</span> <span class="ot">::</span> <span class="kw">forall</span> <span class="fu">t</span><span class="op">.</span> (<span class="kw">forall</span> <span class="fu">a</span><span class="op">.</span> <span class="dt">CF</span> <span class="fu">a</span>) <span class="ot">=&gt;</span> <span class="fu">t</span></span>
<span id="cb9-2"><a href="https://blog.poisson.chat/rss.xml#cb9-2" tabindex="-1"></a><span class="fu">g</span> <span class="ot">=</span> <span class="fu">with</span> <span class="op">@</span>(<span class="dt">CF</span> <span class="fu">t</span>) <span class="fu">f</span></span></code></pre></div>
<h2 id="application-generic-functor">Application: <em>generic-functor</em></h2>
<p>What do I need that trick for? It comes up in generic metaprogramming.</p>
<p>Imagine deriving <code>Functor</code> for <code>Generic</code> types (no <code>Generic1</code>, which is not as
general as you might hope). One way is to implement the following class on
generic representations:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="https://blog.poisson.chat/rss.xml#cb10-1" tabindex="-1"></a><span class="kw">class</span> <span class="dt">RepFmap</span> <span class="fu">a</span> <span class="fu">a'</span> <span class="fu">rep</span> <span class="fu">rep'</span> <span class="kw">where</span></span>
<span id="cb10-2"><a href="https://blog.poisson.chat/rss.xml#cb10-2" tabindex="-1"></a>  <span class="fu">repFmap</span> <span class="ot">::</span> (<span class="fu">a</span> <span class="ot">-&gt;</span> <span class="fu">a'</span>) <span class="ot">-&gt;</span> <span class="fu">rep</span> <span class="ot">-&gt;</span> <span class="fu">rep'</span></span></code></pre></div>
<p>A type constructor <code>f :: Type -&gt; Type</code> will be a <code>Functor</code> when its
generic representation (<code>Rep</code>) implements <code>RepFmap a a'</code>…
for all <code>a</code>, <code>a'</code>.</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="https://blog.poisson.chat/rss.xml#cb11-1" tabindex="-1"></a><span class="co">-- Class synonym for generically derivable functors</span></span>
<span id="cb11-2"><a href="https://blog.poisson.chat/rss.xml#cb11-2" tabindex="-1"></a><span class="kw">class</span>    (<span class="kw">forall</span> <span class="fu">a</span><span class="op">.</span> <span class="dt">Generic</span> (<span class="fu">f</span> <span class="fu">a</span>), <span class="kw">forall</span> <span class="fu">a</span> <span class="fu">a'</span><span class="op">.</span> <span class="dt">RepFmap</span> <span class="fu">a</span> <span class="fu">a'</span> (<span class="dt">Rep</span> (<span class="fu">f</span> <span class="fu">a</span>) ()) (<span class="dt">Rep</span> (<span class="fu">f</span> <span class="fu">a'</span>) ())) <span class="ot">=&gt;</span> <span class="dt">GFunctor</span> <span class="fu">f</span></span>
<span id="cb11-3"><a href="https://blog.poisson.chat/rss.xml#cb11-3" tabindex="-1"></a><span class="kw">instance</span> <span class="op">...</span>   <span class="co">-- idem (class synonym)</span></span>
<span id="cb11-4"><a href="https://blog.poisson.chat/rss.xml#cb11-4" tabindex="-1"></a></span>
<span id="cb11-5"><a href="https://blog.poisson.chat/rss.xml#cb11-5" tabindex="-1"></a><span class="co">-- Wait a second...</span></span></code></pre></div>
<p>But that is illegal, because the type family <code>Rep</code> occurs in the conclusion of
a quantified constraint.</p>
<p>Time for the trick! We give a new name to the conclusion:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="https://blog.poisson.chat/rss.xml#cb12-1" tabindex="-1"></a><span class="kw">class</span>    <span class="dt">RepFmap</span> <span class="fu">a</span> <span class="fu">a'</span> (<span class="dt">Rep</span> (<span class="fu">f</span> <span class="fu">a</span>) ()) (<span class="dt">Rep</span> (<span class="fu">f</span> <span class="fu">a'</span>) ()) <span class="ot">=&gt;</span> <span class="dt">RepFmapRep</span> <span class="fu">a</span> <span class="fu">a'</span> <span class="fu">f</span></span>
<span id="cb12-2"><a href="https://blog.poisson.chat/rss.xml#cb12-2" tabindex="-1"></a><span class="kw">instance</span> <span class="op">...</span>  <span class="co">-- idem (class synonym)</span></span></code></pre></div>
<p>And we can use it in a quantified constraint:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="https://blog.poisson.chat/rss.xml#cb13-1" tabindex="-1"></a><span class="co">-- Now this works!</span></span>
<span id="cb13-2"><a href="https://blog.poisson.chat/rss.xml#cb13-2" tabindex="-1"></a><span class="kw">class</span>    (<span class="kw">forall</span> <span class="fu">a</span><span class="op">.</span> <span class="dt">Generic</span> (<span class="fu">f</span> <span class="fu">a</span>), <span class="kw">forall</span> <span class="fu">a</span> <span class="fu">a'</span><span class="op">.</span> <span class="dt">RepFmapRep</span> <span class="fu">a</span> <span class="fu">a'</span> <span class="fu">f</span>) <span class="ot">=&gt;</span> <span class="dt">GFunctor</span> <span class="fu">f</span></span>
<span id="cb13-3"><a href="https://blog.poisson.chat/rss.xml#cb13-3" tabindex="-1"></a><span class="kw">instance</span> <span class="op">...</span>   <span class="co">-- idem (class synonym)</span></span></code></pre></div>
<p>To obtain the final generic implementation of <code>fmap</code>, we wrap <code>repFmap</code> between <code>to</code> and <code>from</code>.</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="https://blog.poisson.chat/rss.xml#cb14-1" tabindex="-1"></a><span class="fu">gfmap</span> <span class="ot">::</span> <span class="kw">forall</span> <span class="fu">f</span> <span class="fu">a</span> <span class="fu">a'</span><span class="op">.</span> <span class="dt">GFunctor</span> <span class="fu">f</span> <span class="ot">=&gt;</span> (<span class="fu">a</span> <span class="ot">-&gt;</span> <span class="fu">a'</span>) <span class="ot">-&gt;</span> <span class="fu">f</span> <span class="fu">a</span> <span class="ot">-&gt;</span> <span class="fu">f</span> <span class="fu">a'</span></span>
<span id="cb14-2"><a href="https://blog.poisson.chat/rss.xml#cb14-2" tabindex="-1"></a><span class="fu">gfmap</span> <span class="fu">f</span> <span class="ot">=</span></span>
<span id="cb14-3"><a href="https://blog.poisson.chat/rss.xml#cb14-3" tabindex="-1"></a>  <span class="fu">with</span> <span class="op">@</span>(<span class="dt">RepFmapRep</span> <span class="fu">a</span> <span class="fu">a'</span> <span class="fu">f</span>)             <span class="co">-- Hand-holding for GHC &lt;= 9.0</span></span>
<span id="cb14-4"><a href="https://blog.poisson.chat/rss.xml#cb14-4" tabindex="-1"></a>    (<span class="fu">to</span> <span class="op">@</span><span class="fu">_</span> <span class="op">@</span>() <span class="op">.</span> <span class="fu">repFmap</span> <span class="fu">f</span> <span class="op">.</span> <span class="fu">from</span> <span class="op">@</span><span class="fu">_</span> <span class="op">@</span>())</span></code></pre></div>
<p>Et voilà.</p>
<p><a href="https://gist.github.com/Lysxia/7714c19ef9c17b487a46c804694fc0f9">(Gist of this example)</a></p>
<hr>
<h2 id="appendix-couldnt-we-do-this-instead">Appendix: Couldn’t we do this instead?</h2>
<p>If you’ve followed all of that, there’s one other way you might try defining
<code>gfmap</code> without <code>QuantifiedConstraints</code>, by just listing the three constraints
actually needed in the body of the function.</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="https://blog.poisson.chat/rss.xml#cb15-1" tabindex="-1"></a><span class="co">-- Dangerous gfmap!</span></span>
<span id="cb15-2"><a href="https://blog.poisson.chat/rss.xml#cb15-2" tabindex="-1"></a><span class="fu">gfmap</span> <span class="ot">::</span></span>
<span id="cb15-3"><a href="https://blog.poisson.chat/rss.xml#cb15-3" tabindex="-1"></a>  <span class="dt">Generic</span> (<span class="fu">f</span> <span class="fu">a</span>) <span class="ot">=&gt;</span></span>
<span id="cb15-4"><a href="https://blog.poisson.chat/rss.xml#cb15-4" tabindex="-1"></a>  <span class="dt">Generic</span> (<span class="fu">f</span> <span class="fu">a'</span>) <span class="ot">=&gt;</span></span>
<span id="cb15-5"><a href="https://blog.poisson.chat/rss.xml#cb15-5" tabindex="-1"></a>  <span class="dt">RepFmap</span> <span class="fu">a</span> <span class="fu">a'</span> (<span class="dt">Rep</span> (<span class="fu">f</span> <span class="fu">a</span>) ()) (<span class="dt">Rep</span> (<span class="fu">f</span> <span class="fu">a'</span>) ()) <span class="ot">=&gt;</span></span>
<span id="cb15-6"><a href="https://blog.poisson.chat/rss.xml#cb15-6" tabindex="-1"></a>  (<span class="fu">a</span> <span class="ot">-&gt;</span> <span class="fu">a'</span>) <span class="ot">-&gt;</span> <span class="fu">f</span> <span class="fu">a</span> <span class="ot">-&gt;</span> <span class="fu">f</span> <span class="fu">a'</span></span>
<span id="cb15-7"><a href="https://blog.poisson.chat/rss.xml#cb15-7" tabindex="-1"></a><span class="fu">gfmap</span> <span class="fu">f</span> <span class="ot">=</span> <span class="fu">to</span> <span class="op">@</span><span class="fu">_</span> <span class="op">@</span>() <span class="op">.</span> <span class="fu">repFmap</span> <span class="fu">f</span> <span class="op">.</span> <span class="fu">from</span> <span class="op">@</span><span class="fu">_</span> <span class="op">@</span>()</span></code></pre></div>
<p>This is okay as long as it is only ever used to implement <code>fmap</code> as in:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="https://blog.poisson.chat/rss.xml#cb16-1" tabindex="-1"></a><span class="fu">fmap</span> <span class="ot">=</span> <span class="fu">gfmap</span></span></code></pre></div>
<p>Any other use voids a guarantee you didn’t know you expected.</p>
<p>The thing I haven’t told you is that <code>RepFmap</code> is implemented with…
incoherent instances!<a class="footnote-ref" href="https://blog.poisson.chat/rss.xml#fn1" id="fnref1"><sup>1</sup></a> In fact, this <code>gfmap</code> may behave differently
depending on how it is instantiated <em>at compile time</em>.</p>
<p>For example, for a functor with a field of constant type:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="https://blog.poisson.chat/rss.xml#cb17-1" tabindex="-1"></a><span class="kw">data</span> <span class="dt">T</span> <span class="fu">a</span> <span class="fu">b</span> <span class="ot">=</span> <span class="dt">C</span> <span class="dt">Int</span> <span class="fu">a</span> <span class="fu">b</span></span>
<span id="cb17-2"><a href="https://blog.poisson.chat/rss.xml#cb17-2" tabindex="-1"></a>  <span class="kw">deriving</span> <span class="dt">Generic</span></span></code></pre></div>
<p><code>gfmap @(T a) @b @b'</code> where <code>a</code>, <code>b</code> and <code>b'</code> are distinct type variables
behaves like <code>fmap</code> should. But <code>gfmap @(T Int) @Int @Int</code>
will unexpectedly apply its argument function to every field.
They all have type <code>Int</code>, so a function <code>Int -&gt; Int</code> can and will be applied to
all fields.</p>
<p>I could demonstrate this if I had implemented <code>RepFmap</code>…
Luckily, there is a more general version of this “dangerous <code>gfmap</code>” readily
available in my library
<a href="https://hackage.haskell.org/package/generic-functor"><em>generic-functor</em></a>.
It can be very incoherent, but if you follow some rules, it can also be very
fun to use.</p>
<h3 id="playing-with-fire">Playing with fire</h3>
<p><code>gsolomap</code><a class="footnote-ref" href="https://blog.poisson.chat/rss.xml#fn2" id="fnref2"><sup>2</sup></a> is a function from <em>generic-functor</em> that can implement
<code>fmap</code>, and much more.</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="https://blog.poisson.chat/rss.xml#cb18-1" tabindex="-1"></a><span class="fu">fmapT</span> <span class="ot">::</span> (<span class="fu">b</span> <span class="ot">-&gt;</span> <span class="fu">b'</span>) <span class="ot">-&gt;</span> <span class="dt">T</span> <span class="fu">a</span> <span class="fu">b</span> <span class="ot">-&gt;</span> <span class="dt">T</span> <span class="fu">a</span> <span class="fu">b'</span></span>
<span id="cb18-2"><a href="https://blog.poisson.chat/rss.xml#cb18-2" tabindex="-1"></a><span class="fu">fmapT</span> <span class="ot">=</span> <span class="fu">gsolomap</span></span></code></pre></div>
<p>Map over the first parameter if you prefer:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb19-1"><a href="https://blog.poisson.chat/rss.xml#cb19-1" tabindex="-1"></a><span class="fu">firstT</span> <span class="ot">::</span> (<span class="fu">a</span> <span class="ot">-&gt;</span> <span class="fu">a'</span>) <span class="ot">-&gt;</span> <span class="dt">T</span> <span class="fu">a</span> <span class="fu">b</span> <span class="ot">-&gt;</span> <span class="dt">T</span> <span class="fu">a'</span> <span class="fu">b</span></span>
<span id="cb19-2"><a href="https://blog.poisson.chat/rss.xml#cb19-2" tabindex="-1"></a><span class="fu">firstT</span> <span class="ot">=</span> <span class="fu">gsolomap</span></span></code></pre></div>
<p>Or map over both type parameters at once:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb20-1"><a href="https://blog.poisson.chat/rss.xml#cb20-1" tabindex="-1"></a><span class="fu">bothT</span> <span class="ot">::</span> (<span class="fu">a</span> <span class="ot">-&gt;</span> <span class="fu">a'</span>) <span class="ot">-&gt;</span> <span class="dt">T</span> <span class="fu">a</span> <span class="fu">a</span> <span class="ot">-&gt;</span> <span class="dt">T</span> <span class="fu">a'</span> <span class="fu">a'</span></span>
<span id="cb20-2"><a href="https://blog.poisson.chat/rss.xml#cb20-2" tabindex="-1"></a><span class="fu">bothT</span> <span class="ot">=</span> <span class="fu">gsolomap</span></span></code></pre></div>
<p>I don’t know what to call this, but <code>gsolomap</code> also does what you might guess
from this type:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb21-1"><a href="https://blog.poisson.chat/rss.xml#cb21-1" tabindex="-1"></a><span class="fu">watT</span> <span class="ot">::</span></span>
<span id="cb21-2"><a href="https://blog.poisson.chat/rss.xml#cb21-2" tabindex="-1"></a>  (<span class="fu">a</span> <span class="ot">-&gt;</span> <span class="fu">a'</span>) <span class="ot">-&gt;</span></span>
<span id="cb21-3"><a href="https://blog.poisson.chat/rss.xml#cb21-3" tabindex="-1"></a>  <span class="dt">T</span> (<span class="fu">a</span> , <span class="fu">a</span> ) ((<span class="fu">a</span>  <span class="ot">-&gt;</span> <span class="fu">a'</span>) <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="fu">a</span> ) <span class="ot">-&gt;</span></span>
<span id="cb21-4"><a href="https://blog.poisson.chat/rss.xml#cb21-4" tabindex="-1"></a>  <span class="dt">T</span> (<span class="fu">a'</span>, <span class="fu">a'</span>) ((<span class="fu">a'</span> <span class="ot">-&gt;</span> <span class="fu">a</span> ) <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="fu">a'</span>) </span>
<span id="cb21-5"><a href="https://blog.poisson.chat/rss.xml#cb21-5" tabindex="-1"></a><span class="fu">watT</span> <span class="ot">=</span> <span class="fu">gsolomap</span></span></code></pre></div>
<p>It’s important to specialize <code>gsolomap</code> with <em>distinct type variables</em>
(<code>a</code> and <code>a'</code>).
You cannot refactor code by inlining a function if its body uses <code>gsolomap</code>,
as it risks breaking that requirement.</p>
<h3 id="witnessing-incoherence">Witnessing incoherence</h3>
<p>For an example of surprising result caused by incoherence, apply the <code>fmapT</code>
defined above to some concrete arguments. See how the result changes then you
replace <code>fmapT</code> with its definition, <code>gsolomap</code>.</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb22-1"><a href="https://blog.poisson.chat/rss.xml#cb22-1" tabindex="-1"></a><span class="fu">fmapT</span>    ((<span class="op">+</span><span class="dv">1</span>) <span class="ot">::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span>) (<span class="dt">C</span> <span class="dv">0</span> <span class="dv">0</span> <span class="dv">0</span>) <span class="op">==</span> <span class="dt">C</span> <span class="dv">0</span> <span class="dv">0</span> <span class="dv">1</span> <span class="ot">::</span> <span class="dt">T</span> <span class="dt">Int</span> <span class="dt">Int</span></span>
<span id="cb22-2"><a href="https://blog.poisson.chat/rss.xml#cb22-2" tabindex="-1"></a><span class="fu">gsolomap</span> ((<span class="op">+</span><span class="dv">1</span>) <span class="ot">::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span>) (<span class="dt">C</span> <span class="dv">0</span> <span class="dv">0</span> <span class="dv">0</span>) <span class="op">==</span> <span class="dt">C</span> <span class="dv">1</span> <span class="dv">1</span> <span class="dv">1</span> <span class="ot">::</span> <span class="dt">T</span> <span class="dt">Int</span> <span class="dt">Int</span>  <span class="co">-- Noooooo...</span></span></code></pre></div>
<p><a href="https://gist.github.com/Lysxia/a83b16c992d9945576fbff3611ab8f3a">(Gist of those <code>gsolomap</code> (counter)examples)</a></p>
<p>This is why <code>gfmap</code>’s signature should use quantified constraints:
this guarantees that when the <code>RepFmap</code> constraint is solved,
the first two parameters are going to be <em>distinct type variables</em>,
thanks to the universal quantification (<code>forall a a'</code>).
Thus, incoherence is hidden away.</p>
<p>Following that recipe, <em>generic-functor</em> contains <em>safe</em> implementations of
<code>Functor</code>, <code>Foldable</code>, <code>Traversable</code>, <code>Bifunctor</code>, and <code>Bitraversable</code>.</p>
<p>In particular, the type of <code>gfmap</code> guarantees that it has a unique
inhabitant satisfying <code>gfmap id = id</code>, and this property is quite
straightforward to check by visual inspection of the implementation.</p>
<p>After all, <code>gfmap</code> will essentially do one of three things:
(1) it will be <code>id</code> on types that don’t mention the type parameters
in its function argument <code>a -&gt; a'</code>, (2) it will apply the provided function
<code>f</code>, or (3) it will <code>fmap</code> (or <code>bimap</code>, or <code>dimap</code>) itself through a type
constructor. In all cases (with some inductive reasoning for (3)),
if <code>f = id</code>, then <code>gfmap f = id</code>.</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb23-1"><a href="https://blog.poisson.chat/rss.xml#cb23-1" tabindex="-1"></a><span class="fu">gfmap</span> <span class="fu">f</span> <span class="ot">=</span> <span class="fu">id</span></span>
<span id="cb23-2"><a href="https://blog.poisson.chat/rss.xml#cb23-2" tabindex="-1"></a><span class="fu">gfmap</span> <span class="fu">f</span> <span class="ot">=</span> <span class="fu">f</span></span>
<span id="cb23-3"><a href="https://blog.poisson.chat/rss.xml#cb23-3" tabindex="-1"></a><span class="fu">gfmap</span> <span class="fu">f</span> <span class="ot">=</span> <span class="fu">fmap</span> (<span class="fu">gfmap</span> <span class="fu">f</span>)</span></code></pre></div>
<p>The dangerous <code>gfmap</code> (without <code>QuantifiedConstraints</code>) or <code>gsolomap</code> fail this
property, because the extra occurrences of <code>a</code> and <code>a'</code> in its constraint make
their signatures have a different “shape” from <code>fmap</code>.</p>
<p>The trade-off is that those safe functions can’t do the same crazy things
as <code>gsolomap</code> above.</p>
<section class="footnotes footnotes-end-of-document" id="footnotes">
<hr>
<ol>
<li id="fn1"><p>AFAICT there is no way around that with <code>GHC.Generics</code>.
Incoherent instances can be avoided with <em>kind-generics</em>.<a class="footnote-back" href="https://blog.poisson.chat/rss.xml#fnref1">↩︎</a></p></li>
<li id="fn2"><p><code>gsolomap</code> accepts one function parameter. There is also
<code>gmultimap</code> which accepts arbitrarily many functions.<a class="footnote-back" href="https://blog.poisson.chat/rss.xml#fnref2">↩︎</a></p></li>
</ol>
</section></div>
    </summary>
    <updated>2022-09-21T00:00:00Z</updated>
    <published>2022-09-21T00:00:00Z</published>
    <author>
      <name>Lysxia</name>
    </author>
    <source>
      <id>https://blog.poisson.chat</id>
      <logo>https://blog.poisson.chat/favicon.png</logo>
      <link href="https://blog.poisson.chat" rel="alternate" type="text/html">
      <link href="https://blog.poisson.chat/rss.xml" rel="self" type="application/rss+xml">
      <subtitle>A blog about functional programming and stuff</subtitle>
      <title>Lysxia's blog</title>
      <updated>2022-09-21T00:00:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://www.joachim-breitner.de/blog/795-rec-def__Dominators_case_study</id>
    <link href="http://www.joachim-breitner.de/blog/795-rec-def__Dominators_case_study" rel="alternate" type="text/html">
    <title xml:lang="en">rec-def: Dominators case study</title>
    <summary type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p>More ICFP-inspired experiments using the <a href="https://hackage.haskell.org/package/rec-def"><code>rec-def</code></a> library: In <a href="https://icfp22.sigplan.org/details/icfp-2022-papers/1/Beyond-Relooper-Recursive-Translation-of-Unstructured-Control-Flow-to-Structured-Con">Norman Ramsey’s very nice talk</a> about his Functional Pearl “<a href="https://doi.org/10.1145/3547621">Beyond Relooper: Recursive Translation of Unstructured Control Flow to Structured Control Flow</a>”, he had the following slide showing the equation for the dominators of a node in a graph:</p>
<figure>
<img alt="Norman Ramsey shows a formula" src="https://www.joachim-breitner.de/various/norman-ramsey-dominator.jpg">
<figcaption>Norman Ramsey shows a formula</figcaption>
</figure>
<p>He said “it’s ICFP and I wanted to say the dominance relation has a beautiful set of equations … you can read all these algorithms how to compute this, but the concept is simple”.</p>
<p>This made me wonder: If the concept is simple and this formula is beautiful – shouldn’t this be sufficient for the Haskell programmer to obtain the dominator relation, <em>without</em> reading all those algorithms?</p>
<p>Before we start, we have to clarify the formula a bit: If a node is an entry node (no predecessors) then the big intersection is over the empty set, and that is not a well-defined concept. For these nodes, we need that big intersection to return the <em>empty</em> set, as entry nodes are not dominated by any other node. (Let’s assume that the entry nodes are exactly those with no predecessors.)</p>
<p>Let’s try, first using plain Haskell data structures. We begin by implementing this big intersection operator on <code>Data.Set</code>, and also a function to find the predecessors of a node in a graph:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-1" tabindex="-1"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Set</span> <span class="kw">as</span> <span class="dt">S</span></a></span><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-1" tabindex="-1">
<span id="cb1-2"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-2" tabindex="-1"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Map</span> <span class="kw">as</span> <span class="dt">M</span>
<span id="cb1-3"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-3" tabindex="-1">
<span id="cb1-4"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-4" tabindex="-1"><span class="ot">intersections ::</span> [<span class="dt">S.Set</span> <span class="dt">Int</span>] <span class="ot">-&gt;</span> <span class="dt">S.Set</span> <span class="dt">Int</span>
<span id="cb1-5"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-5" tabindex="-1">intersections [] <span class="ot">=</span> S.empty
<span id="cb1-6"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-6" tabindex="-1">intersections xs <span class="ot">=</span> <span class="fu">foldl1</span> S.intersection xs
<span id="cb1-7"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-7" tabindex="-1">
<span id="cb1-8"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-8" tabindex="-1"><span class="ot">preds ::</span> [(<span class="dt">Int</span>,<span class="dt">Int</span>)] <span class="ot">-&gt;</span> <span class="dt">M.Map</span> <span class="dt">Int</span> [<span class="dt">Int</span>]
<span id="cb1-9"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-9" tabindex="-1">preds edges <span class="ot">=</span> M.fromListWith (<span class="op">&lt;&gt;</span>) <span class="op">$</span>
<span id="cb1-10"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-10" tabindex="-1">    [ (v1, [])   <span class="op">|</span> (v1, _) <span class="ot">&lt;-</span> edges ] <span class="op">++</span> <span class="co">-- to make the map total</span>
<span id="cb1-11"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-11" tabindex="-1">    [ (v2, [v1]) <span class="op">|</span> (v1, v2) <span class="ot">&lt;-</span> edges ]</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-11" tabindex="-1">
<p>Now we can write down the formula that Norman gave, quite elegantly:</p>
</a><div class="sourceCode" id="cb2"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-11" tabindex="-1"></a><pre class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-11" tabindex="-1"><code class="sourceCode haskell"><span id="cb2-1"></span></code></a><code class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-1" tabindex="-1"><span class="ot">domintors1 ::</span> [(<span class="dt">Int</span>,<span class="dt">Int</span>)] <span class="ot">-&gt;</span> <span class="dt">M.Map</span> <span class="dt">Int</span> [<span class="dt">Int</span>]
<span id="cb2-2"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-2" tabindex="-1">domintors1 edges <span class="ot">=</span> <span class="fu">fmap</span> S.toList doms
<span id="cb2-3"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-3" tabindex="-1">  <span class="kw">where</span>
<span id="cb2-4"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-4" tabindex="-1"><span class="ot">    doms ::</span> <span class="dt">M.Map</span> <span class="dt">Int</span> (<span class="dt">S.Set</span> <span class="dt">Int</span>)
<span id="cb2-5"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-5" tabindex="-1">    doms <span class="ot">=</span> M.mapWithKey
<span id="cb2-6"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-6" tabindex="-1">        (\v vs <span class="ot">-&gt;</span> S.insert v (intersections [ doms <span class="op">M.!</span> v' <span class="op">|</span> v' <span class="ot">&lt;-</span> vs]))
<span id="cb2-7"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-7" tabindex="-1">        (preds edges)</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-7" tabindex="-1">
<p>Does this work? It seems it does:</p>
</a><div class="sourceCode" id="cb3"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-7" tabindex="-1"></a><pre class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-7" tabindex="-1"><code class="sourceCode haskell"><span id="cb3-1"></span></code></a><code class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-1" tabindex="-1">ghci<span class="op">&gt;</span> domintors1 []
<span id="cb3-2"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-2" tabindex="-1">fromList []
<span id="cb3-3"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-3" tabindex="-1">ghci<span class="op">&gt;</span> domintors1 [(<span class="dv">1</span>,<span class="dv">2</span>)]
<span id="cb3-4"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-4" tabindex="-1">fromList [(<span class="dv">1</span>,[<span class="dv">1</span>]),(<span class="dv">2</span>,[<span class="dv">1</span>,<span class="dv">2</span>])]
<span id="cb3-5"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-5" tabindex="-1">ghci<span class="op">&gt;</span> domintors1 [(<span class="dv">1</span>,<span class="dv">2</span>),(<span class="dv">1</span>,<span class="dv">3</span>),(<span class="dv">2</span>,<span class="dv">4</span>),(<span class="dv">3</span>,<span class="dv">4</span>)]
<span id="cb3-6"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-6" tabindex="-1">fromList [(<span class="dv">1</span>,[<span class="dv">1</span>]),(<span class="dv">2</span>,[<span class="dv">1</span>,<span class="dv">2</span>]),(<span class="dv">3</span>,[<span class="dv">1</span>,<span class="dv">3</span>]),(<span class="dv">4</span>,[<span class="dv">1</span>,<span class="dv">4</span>])]</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-6" tabindex="-1">
<p>But – not surprising if you have read my previous blog posts – it falls over once we have recursion:</p>
</a><div class="sourceCode" id="cb4"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-6" tabindex="-1"></a><pre class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-6" tabindex="-1"><code class="sourceCode haskell"><span id="cb4-1"></span></code></a><code class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-1" tabindex="-1">ghci<span class="op">&gt;</span> domintors1 [(<span class="dv">1</span>,<span class="dv">2</span>),(<span class="dv">1</span>,<span class="dv">3</span>),(<span class="dv">2</span>,<span class="dv">4</span>),(<span class="dv">3</span>,<span class="dv">4</span>),(<span class="dv">4</span>,<span class="dv">3</span>)]
<span id="cb4-2"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-2" tabindex="-1">fromList [(<span class="dv">1</span>,[<span class="dv">1</span>]),(<span class="dv">2</span>,[<span class="dv">1</span>,<span class="dv">2</span>]),(<span class="dv">3</span>,<span class="op">^</span><span class="dt">CInterrupted</span><span class="op">.</span></a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-2" tabindex="-1">
</a><p><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-2" tabindex="-1">So let us reimplement it with </a><a href="https://hackage.haskell.org/package/rec-def-0.1/docs/Data-Recursive-Set.html"><code>Data.Recursive.Set</code></a>.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-1" tabindex="-1"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Recursive.Set</span> <span class="kw">as</span> <span class="dt">RS</span></a></span><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-1" tabindex="-1">
<span id="cb5-2"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-2" tabindex="-1">
<span id="cb5-3"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-3" tabindex="-1"><span class="ot">intersections ::</span> [<span class="dt">RS.RSet</span> <span class="dt">Int</span>] <span class="ot">-&gt;</span> <span class="dt">RS.RSet</span> <span class="dt">Int</span>
<span id="cb5-4"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-4" tabindex="-1">intersections [] <span class="ot">=</span> RS.empty
<span id="cb5-5"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-5" tabindex="-1">intersections xs <span class="ot">=</span> <span class="fu">foldl1</span> RS.intersection xs
<span id="cb5-6"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-6" tabindex="-1">
<span id="cb5-7"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-7" tabindex="-1"><span class="ot">domintors2 ::</span> [(<span class="dt">Int</span>,<span class="dt">Int</span>)] <span class="ot">-&gt;</span> <span class="dt">M.Map</span> <span class="dt">Int</span> [<span class="dt">Int</span>]
<span id="cb5-8"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-8" tabindex="-1">domintors2 edges <span class="ot">=</span> <span class="fu">fmap</span> (S.toList <span class="op">.</span> RS.get) doms
<span id="cb5-9"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-9" tabindex="-1">  <span class="kw">where</span>
<span id="cb5-10"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-10" tabindex="-1"><span class="ot">    doms ::</span> <span class="dt">M.Map</span> <span class="dt">Int</span> (<span class="dt">RS.RSet</span> <span class="dt">Int</span>)
<span id="cb5-11"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-11" tabindex="-1">    doms <span class="ot">=</span> M.mapWithKey
<span id="cb5-12"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-12" tabindex="-1">        (\v vs <span class="ot">-&gt;</span> RS.insert v (intersections [ doms <span class="op">M.!</span> v' <span class="op">|</span> v' <span class="ot">&lt;-</span> vs]))
<span id="cb5-13"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-13" tabindex="-1">        (preds edges)</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-13" tabindex="-1">
<p>The hope is that we can simply replace the operations, and that now it can suddenly handle cyclic graphs as well. Let’s see:</p>
</a><div class="sourceCode" id="cb6"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-13" tabindex="-1"></a><pre class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-13" tabindex="-1"><code class="sourceCode haskell"><span id="cb6-1"></span></code></a><code class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb6-1" tabindex="-1">ghci<span class="op">&gt;</span> domintors2 [(<span class="dv">1</span>,<span class="dv">2</span>),(<span class="dv">1</span>,<span class="dv">3</span>),(<span class="dv">2</span>,<span class="dv">4</span>),(<span class="dv">3</span>,<span class="dv">4</span>),(<span class="dv">4</span>,<span class="dv">3</span>)]
<span id="cb6-2"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb6-2" tabindex="-1">fromList [(<span class="dv">1</span>,[<span class="dv">1</span>]),(<span class="dv">2</span>,[<span class="dv">1</span>,<span class="dv">2</span>]),(<span class="dv">3</span>,[<span class="dv">3</span>]),(<span class="dv">4</span>,[<span class="dv">4</span>])]</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb6-2" tabindex="-1">
<p>It does! Well, it does return a result… but it looks strange. Clearly node 3 and 4 are also dominated by 1, but the result does not reflect that.</p>
<p>But the result <em>is</em> a solution to Norman’s equation. Was the equation wrong? No, but we failed to notice that the desired solution is the <em>largest</em>, not the <em>smallest</em>. And <code>Data.Recursive.Set</code> calculates, as documented, the least fixed point.</p>
<p>What now? Until the library has code for <code>RDualSet a</code>, we can work around this by using the <em>dual</em> formula to calculate the non-dominators. To do this, we</p>
<ul>
<li>use union instead of intersection</li>
<li>delete instead of insert,</li>
<li><code>S.empty</code>, use the set of all nodes (which requires some extra plumbing)</li>
<li>subtract the result from the set of all nodes to get the dominators</li>
</ul>
<p>and thus the code turns into:</p>
</a><div class="sourceCode" id="cb7"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb6-2" tabindex="-1"></a><pre class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb6-2" tabindex="-1"><code class="sourceCode haskell"><span id="cb7-1"></span></code></a><code class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-1" tabindex="-1"><span class="ot">unions' ::</span> <span class="dt">S.Set</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> [<span class="dt">RS.RSet</span> <span class="dt">Int</span>] <span class="ot">-&gt;</span> <span class="dt">RS.RSet</span> <span class="dt">Int</span>
<span id="cb7-2"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-2" tabindex="-1">unions' univ [] <span class="ot">=</span> mkR univ
<span id="cb7-3"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-3" tabindex="-1">unions' _ xs <span class="ot">=</span> <span class="fu">foldl1</span> RS.union xs
<span id="cb7-4"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-4" tabindex="-1">
<span id="cb7-5"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-5" tabindex="-1"><span class="ot">domintors3 ::</span> [(<span class="dt">Int</span>,<span class="dt">Int</span>)] <span class="ot">-&gt;</span> <span class="dt">M.Map</span> <span class="dt">Int</span> [<span class="dt">Int</span>]
<span id="cb7-6"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-6" tabindex="-1">domintors3 edges <span class="ot">=</span> <span class="fu">fmap</span> (S.toList <span class="op">.</span> S.difference nodes <span class="op">.</span> RS.get) nonDoms
<span id="cb7-7"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-7" tabindex="-1">  <span class="kw">where</span>
<span id="cb7-8"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-8" tabindex="-1">    nodes <span class="ot">=</span> S.fromList [v <span class="op">|</span> (v1,v2) <span class="ot">&lt;-</span> edges, v <span class="ot">&lt;-</span> [v1,v2]]
<span id="cb7-9"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-9" tabindex="-1"><span class="ot">    nonDoms ::</span> <span class="dt">M.Map</span> <span class="dt">Int</span> (<span class="dt">RS.RSet</span> <span class="dt">Int</span>)
<span id="cb7-10"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-10" tabindex="-1">    nonDoms <span class="ot">=</span> M.mapWithKey
<span id="cb7-11"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-11" tabindex="-1">        (\v vs <span class="ot">-&gt;</span> RS.delete v (unions' nodes [ nonDoms <span class="op">M.!</span> v' <span class="op">|</span> v' <span class="ot">&lt;-</span> vs]))
<span id="cb7-12"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-12" tabindex="-1">        (preds edges)</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-12" tabindex="-1">
<p>And with this, now we do get the correct result:</p>
<pre><code>ghci&gt; domintors3 [(1,2),(1,3),(2,4),(3,4),(4,3)]
fromList [(1,[1]),(2,[1,2]),(3,[1,3]),(4,[1,4])]</code></pre>
</a><p><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-12" tabindex="-1">We worked a little bit on how to express the “beautiful formula” to Haskell, but at no point did we have to think about how to solve it. To me, this is the essence of declarative programming.</a></p></div>
    </summary>
    <updated>2022-09-15T08:27:19Z</updated>
    <published>2022-09-15T08:27:19Z</published>
    <author>
      <name>Joachim Breitner</name>
      <email>mail@joachim-breitner.de</email>
    </author>
    <source>
      <id>http://www.joachim-breitner.de//blog</id>
      <logo>http://joachim-breitner.de/avatars/avatar_128.png</logo>
      <link href="http://www.joachim-breitner.de//blog" rel="alternate" type="text/html">
      <link href="http://www.joachim-breitner.de/blog_feed.rss" rel="self" type="application/rss+xml">
      <subtitle xml:lang="en">Joachim Breitners Denkblogade</subtitle>
      <title xml:lang="en">nomeataâ€™s mind shares</title>
      <updated>2022-11-04T10:00:56Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://www.joachim-breitner.de/blog/794-rec-def__Program_analysis_case_study</id>
    <link href="http://www.joachim-breitner.de/blog/794-rec-def__Program_analysis_case_study" rel="alternate" type="text/html">
    <title xml:lang="en">rec-def: Program analysis case study</title>
    <summary type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p>At this week’s <a href="https://icfp22.sigplan.org/">International Conference on Functional Programming</a> I showed my <a href="https://hackage.haskell.org/package/rec-def"><code>rec-def</code></a> Haskell library to a few people. As this crowd appreciates writing compilers, and example from the realm of program analysis is quite compelling.</p>
<h3 id="to-throw-or-not-to-throw">To Throw or not to throw</h3>
<p>Here is our little toy language to analyze: It has variables, lambdas and applications, non-recursive (lazy) let bindings and, so that we have something to analyze, a way to throw and to catch exceptions:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-1" tabindex="-1"><span class="kw">type</span> <span class="dt">Var</span> <span class="ot">=</span> <span class="dt">String</span></a></span><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-1" tabindex="-1">
<span id="cb1-2"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-2" tabindex="-1">
<span id="cb1-3"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-3" tabindex="-1"><span class="kw">data</span> <span class="dt">Exp</span>
<span id="cb1-4"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-4" tabindex="-1">  <span class="ot">=</span> <span class="dt">Var</span> <span class="dt">Var</span>
<span id="cb1-5"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-5" tabindex="-1">  <span class="op">|</span> <span class="dt">Throw</span>
<span id="cb1-6"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-6" tabindex="-1">  <span class="op">|</span> <span class="dt">Catch</span> <span class="dt">Exp</span>
<span id="cb1-7"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-7" tabindex="-1">  <span class="op">|</span> <span class="dt">Lam</span> <span class="dt">Var</span> <span class="dt">Exp</span>
<span id="cb1-8"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-8" tabindex="-1">  <span class="op">|</span> <span class="dt">App</span> <span class="dt">Exp</span> <span class="dt">Exp</span>
<span id="cb1-9"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-9" tabindex="-1">  <span class="op">|</span> <span class="dt">Let</span> <span class="dt">Var</span> <span class="dt">Exp</span> <span class="dt">Exp</span></a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-9" tabindex="-1">
<p>Given such an expression, we would like to know whether it might throw an exception. Such an analysis is easy to write: We traverse the syntax tree, remembering in the <code>env</code> which of the variables may throw an exception:</p>
</a><div class="sourceCode" id="cb2"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-9" tabindex="-1"></a><pre class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-9" tabindex="-1"><code class="sourceCode haskell"><span id="cb2-1"></span></code></a><code class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-1" tabindex="-1"><span class="ot">canThrow1 ::</span> <span class="dt">Exp</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span>
<span id="cb2-2"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-2" tabindex="-1">canThrow1 <span class="ot">=</span> go M.empty
<span id="cb2-3"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-3" tabindex="-1">  <span class="kw">where</span>
<span id="cb2-4"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-4" tabindex="-1"><span class="ot">    go ::</span> <span class="dt">M.Map</span> <span class="dt">Var</span> <span class="dt">Bool</span> <span class="ot">-&gt;</span> <span class="dt">Exp</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span>
<span id="cb2-5"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-5" tabindex="-1">    go env (<span class="dt">Var</span> v)       <span class="ot">=</span> env <span class="op">M.!</span> v
<span id="cb2-6"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-6" tabindex="-1">    go env <span class="dt">Throw</span>         <span class="ot">=</span> <span class="dt">True</span>
<span id="cb2-7"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-7" tabindex="-1">    go env (<span class="dt">Catch</span> e)     <span class="ot">=</span> <span class="dt">False</span>
<span id="cb2-8"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-8" tabindex="-1">    go env (<span class="dt">Lam</span> v e)     <span class="ot">=</span> go (M.insert v <span class="dt">False</span> env) e
<span id="cb2-9"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-9" tabindex="-1">    go env (<span class="dt">App</span> e1 e2)   <span class="ot">=</span> go env e1 <span class="op">||</span> go env e2
<span id="cb2-10"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-10" tabindex="-1">    go env (<span class="dt">Let</span> v e1 e2) <span class="ot">=</span> go env' e2
<span id="cb2-11"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-11" tabindex="-1">      <span class="kw">where</span>
<span id="cb2-12"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-12" tabindex="-1">        env_bind <span class="ot">=</span> M.singleton v (go env e1)
<span id="cb2-13"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-13" tabindex="-1">        env' <span class="ot">=</span> M.union env_bind env</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-13" tabindex="-1">
<p>The most interesting case is the one for <code>Let</code>, where we extend the environment <code>env</code> with the information about the additional variable <code>env_bind</code>, which is calculated from analyzing the right-hand side <code>e1</code>.</p>
<p>So far so good:</p>
<pre><code>ghci&gt; someVal = Lam &quot;y&quot; (Var &quot;y&quot;)
ghci&gt; canThrow1 $ Throw
True
ghci&gt; canThrow1 $ Let &quot;x&quot; Throw someVal
False
ghci&gt; canThrow1 $ Let &quot;x&quot; Throw (App (Var &quot;x&quot;) someVal)
True</code></pre>
<h3 id="let-it-rec">Let it rec</h3>
<p>To spice things up, let us add a <em>recursive</em> let to the language:</p>
</a><div class="sourceCode" id="cb4"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-13" tabindex="-1"></a><pre class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-13" tabindex="-1"><code class="sourceCode haskell"><span id="cb4-1"></span></code></a><code class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-1" tabindex="-1"><span class="kw">data</span> <span class="dt">Exp</span>
<span id="cb4-2"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-2" tabindex="-1">  …
<span id="cb4-3"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-3" tabindex="-1">  <span class="op">|</span> <span class="dt">LetRec</span> [(<span class="dt">Var</span>, <span class="dt">Exp</span>)] <span class="dt">Exp</span></a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-3" tabindex="-1">
<p>How can we support this new constructor in <code>canThrow1</code>? Let use naively follow the pattern used for <code>Let</code>: Calculate the analysis information for the variables in <code>env_bind</code>, extend the environment with that, and pass it down:</p>
</a><div class="sourceCode" id="cb5"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-3" tabindex="-1"></a><pre class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-3" tabindex="-1"><code class="sourceCode haskell"><span id="cb5-1"></span></code></a><code class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-1" tabindex="-1">    go env (<span class="dt">LetRec</span> binds e) <span class="ot">=</span> go env' e
<span id="cb5-2"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-2" tabindex="-1">      <span class="kw">where</span>
<span id="cb5-3"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-3" tabindex="-1">        env_bind <span class="ot">=</span> M.fromList [ (v, go env' e) <span class="op">|</span> (v,e) <span class="ot">&lt;-</span> binds ]
<span id="cb5-4"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-4" tabindex="-1">        env' <span class="ot">=</span> M.union env_bind env</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-4" tabindex="-1">
<p>Note that, crucially, we use <code>env'</code>, and not just <code>env</code>, when analyzing the right-hand sides. It has to be that way, as all the variables are in scope in all the right-hand sides.</p>
<p>In a strict language, such a mutually recursive definition, where <code>env_bind</code> uses <code>env'</code> which uses <code>env_bind</code> is basically unthinkable. But in a lazy language like Haskell, it might just work.</p>
<p>Unfortunately, it works only as long as the recursive bindings are <em>not actually recursive</em>, or if they are recursive, they are not used:</p>
<pre><code>ghci&gt; canThrow1 $ LetRec [(&quot;x&quot;, Throw)] (Var &quot;x&quot;)
True
ghci&gt; canThrow1 $ LetRec [(&quot;x&quot;, App (Var &quot;y&quot;) someVal), (&quot;y&quot;, Throw)] (Var &quot;x&quot;)
True
ghci&gt; canThrow1 $ LetRec [(&quot;x&quot;, App (Var &quot;x&quot;) someVal), (&quot;y&quot;, Throw)] (Var &quot;y&quot;)
True</code></pre>
<p>But with genuine recursion, it does not work, and simply goes into a recursive cycle:</p>
<pre><code>ghci&gt; canThrow1 $ LetRec [(&quot;x&quot;, App (Var &quot;x&quot;) someVal), (&quot;y&quot;, Throw)] (Var &quot;x&quot;)
^CInterrupted.</code></pre>
<p>That is disappointing! Do we really have to toss that code and somehow do an explicit fixed-point calculation here? Obscuring our nice declarative code? And possibly having to repeat work (such as traversing the syntax tree) many times that we should only have to do once?</p>
<h3 id="rec-def-to-the-rescue">rec-def to the rescue</h3>
</a><p><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-4" tabindex="-1">Not with rec-def! Using <code>RBool</code> from </a><a href="https://hackage.haskell.org/package/rec-def-0.1/docs/Data-Recursive-Bool.html"><code>Data.Recursive.Bool</code></a> instead of <code>Bool</code>, we can write the exact same code, as follows:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-1" tabindex="-1"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Recursive.Bool</span> <span class="kw">as</span> <span class="dt">RB</span></a></span><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-1" tabindex="-1">
<span id="cb8-2"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-2" tabindex="-1">
<span id="cb8-3"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-3" tabindex="-1"><span class="ot">canThrow2 ::</span> <span class="dt">Exp</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span>
<span id="cb8-4"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-4" tabindex="-1">canThrow2 <span class="ot">=</span> RB.get <span class="op">.</span> go M.empty
<span id="cb8-5"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-5" tabindex="-1">  <span class="kw">where</span>
<span id="cb8-6"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-6" tabindex="-1"><span class="ot">    go ::</span> <span class="dt">M.Map</span> <span class="dt">Var</span> <span class="dt">RBool</span> <span class="ot">-&gt;</span> <span class="dt">Exp</span> <span class="ot">-&gt;</span> <span class="dt">R</span> <span class="dt">Bool</span>
<span id="cb8-7"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-7" tabindex="-1">    go env (<span class="dt">Var</span> v)       <span class="ot">=</span> env <span class="op">M.!</span> v
<span id="cb8-8"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-8" tabindex="-1">    go env <span class="dt">Throw</span>         <span class="ot">=</span> RB.true
<span id="cb8-9"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-9" tabindex="-1">    go env (<span class="dt">Catch</span> e)     <span class="ot">=</span> RB.false
<span id="cb8-10"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-10" tabindex="-1">    go env (<span class="dt">Lam</span> v e)     <span class="ot">=</span> go (M.insert v RB.false env) e
<span id="cb8-11"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-11" tabindex="-1">    go env (<span class="dt">App</span> e1 e2)   <span class="ot">=</span> go env e1 <span class="op">RB.||</span> go env e2
<span id="cb8-12"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-12" tabindex="-1">    go env (<span class="dt">Let</span> v e1 e2) <span class="ot">=</span> go env' e2
<span id="cb8-13"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-13" tabindex="-1">      <span class="kw">where</span>
<span id="cb8-14"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-14" tabindex="-1">        env_bind <span class="ot">=</span> M.singleton v (go env e1)
<span id="cb8-15"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-15" tabindex="-1">        env' <span class="ot">=</span> M.union env_bind env
<span id="cb8-16"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-16" tabindex="-1">    go env (<span class="dt">LetRec</span> binds e) <span class="ot">=</span> go env' e
<span id="cb8-17"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-17" tabindex="-1">      <span class="kw">where</span>
<span id="cb8-18"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-18" tabindex="-1">        env_bind <span class="ot">=</span> M.fromList [ (v, go env' e) <span class="op">|</span> (v,e) <span class="ot">&lt;-</span> binds ]
<span id="cb8-19"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-19" tabindex="-1">        env' <span class="ot">=</span> M.union env_bind env</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-19" tabindex="-1">
<p>And it works!</p>
<pre><code>ghci&gt; canThrow2 $ LetRec [(&quot;x&quot;, App (Var &quot;x&quot;) someVal), (&quot;y&quot;, Throw)] (Var &quot;x&quot;)
False
ghci&gt; canThrow2 $ LetRec [(&quot;x&quot;, App (Var &quot;x&quot;) Throw), (&quot;y&quot;, Throw)] (Var &quot;x&quot;)
True</code></pre>
<p>I find this much more pleasing than the explicit naive fix-pointing you might do otherwise, where you stabilize the result at each <code>LetRec</code> independently: Not only is all that extra work hidden from the programmer, but now also a <em>single</em> traversal of the syntax tree creates, thanks to the laziness, a graph of <code>RBool</code> values, which are then solved “under the hood”.</p>
<h3 id="the-issue-with-xx">The issue with x=x</h3>
<p>There is one downside worth mentioning: <code>canThrow2</code> fails to produce a result in case we hit <code>x=x</code>:</p>
<pre><code>ghci&gt; canThrow2 $ LetRec [(&quot;x&quot;, Var &quot;x&quot;)] (Var &quot;x&quot;)
^CInterrupted.</code></pre>
<p>This is, after all the syntax tree has been processed and all the map lookups have been resolved, equivalent to</p>
<pre><code>ghci&gt; let x = x in RB.get (x :: RBool)
^CInterrupted.</code></pre>
</a><p><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-19" tabindex="-1">which also does not work. The <code>rec-def</code> machinery can only kick in if at least one of its function is used on any such cycle, even if it is just a form of identity (which I ~ought to add to the library~ since have </a><a href="https://hackage.haskell.org/package/rec-def-0.2/docs/Data-Recursive-Bool.html#v:id">added to the library</a>):</p>
<pre><code>ghci&gt; idR x = RB.false ||| x
ghci&gt; let x = idR x in getR (x :: R Bool)
False</code></pre>
<p>And indeed, if I insert a call to <code>idR</code> in the line</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb13-1" tabindex="-1">        env_bind <span class="ot">=</span> M.fromList [ (v, idR (go env' e)) <span class="op">|</span> (v,e) <span class="ot">&lt;-</span> binds ]</a></span></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb13-1" tabindex="-1">
<p>then our analyzer will no longer stumble over these nasty recursive equations:</p>
<pre><code>ghci&gt; canThrow2 $ LetRec [(&quot;x&quot;, Var &quot;x&quot;)] (Var &quot;x&quot;)
False</code></pre>
</a><p><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb13-1" tabindex="-1">It is a bit disappointing to have to do that, but I do not see a better way yet. I guess the <code>def-rec</code> library expects the programmer to have a similar level of sophistication as other tie-the-know tricks with laziness (where you also have to ensure that your definitions are productive and that the sharing is not accidentally lost).</a></p></div>
    </summary>
    <updated>2022-09-14T21:53:37Z</updated>
    <published>2022-09-14T21:53:37Z</published>
    <author>
      <name>Joachim Breitner</name>
      <email>mail@joachim-breitner.de</email>
    </author>
    <source>
      <id>http://www.joachim-breitner.de//blog</id>
      <logo>http://joachim-breitner.de/avatars/avatar_128.png</logo>
      <link href="http://www.joachim-breitner.de//blog" rel="alternate" type="text/html">
      <link href="http://www.joachim-breitner.de/blog_feed.rss" rel="self" type="application/rss+xml">
      <subtitle xml:lang="en">Joachim Breitners Denkblogade</subtitle>
      <title xml:lang="en">nomeataâ€™s mind shares</title>
      <updated>2022-11-04T10:00:56Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://www.joachim-breitner.de/blog/793-rec-def__Behind_the_scenes</id>
    <link href="http://www.joachim-breitner.de/blog/793-rec-def__Behind_the_scenes" rel="alternate" type="text/html">
    <title xml:lang="en">rec-def: Behind the scenes</title>
    <summary type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p>A week ago I wrote about the <a href="https://hackage.haskell.org/package/rec-def"><code>rec-def</code></a> Haskell library, which allows you to write <a href="https://www.joachim-breitner.de/blog/792-More_recursive_definitions">more recursive definitions</a>, such as in this small example:</p>
<pre><code>let s1 = RS.insert 23 s2
    s2 = RS.insert 42 s1
in RS.get s1</code></pre>
<p>This will not loop (as it would if you’d just used <code>Data.Set</code>), but rather correctly return the set <code>S.fromList [23,42]</code>. See the previous blog post for more examples and discussion of the user-facing side of this.</p>
<p>For quick reference, these are the types of the functions involved here:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-1" tabindex="-1"><span class="ot">insert ::</span> <span class="dt">Ord</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">RSet</span> a <span class="ot">-&gt;</span> <span class="dt">RSet</span> a</a></span><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-1" tabindex="-1">
<span id="cb2-2"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-2" tabindex="-1"><span class="ot">get ::</span> <span class="dt">RSet</span> a <span class="ot">-&gt;</span> <span class="dt">Set</span> a</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-2" tabindex="-1">
<p>The type of <code>s1</code> and <code>s2</code> above is not <code>Set Int</code>, but rather <code>RSet Int</code>, and in this post I’ll explain how <code>RSet</code> works internally.</p>
<h3 id="propagators-in-general">Propagators, in general</h3>
<p>The conceptual model behind an recursive equation like above is</p>
<ul>
<li>There are a multiple <em>cells</em> that can hold values of an underlying type (here <code>Set</code>)</li>
<li>These cells have <em>relations</em> that explain how the values in the cells should relate to each other</li>
<li>After registering all the relations, some form of <em>solving</em> happens.</li>
<li>If the solving succeeds, we can read off the values from the cells, and they should satisfy the registered relation.</li>
</ul>
<p>This is sometimes called a <em>propagator network</em>, and is a quite general model that can support different kind of relations (e.g. equalities, inequalities, functions), there can be various solving strategies (iterative fixed-points, algebraic solution, unification, etc.) and information can flow on along the edges (and hyper-edges) possibly in multiple directions.</p>
<p>For our purposes, we only care about propagator networks where all relations are <em>functional</em>, so they have a single output cell that is declared to be a function of multiple (possibly zero) input cells, without affecting these input cells. Furthermore, every cell is the output of exactly one such relation.</p>
<h3 id="io-infested-propagator-interfaces">IO-infested propagator interfaces</h3>
<p>This suggests that an implementation of such a propagator network could provide an interface with the following three operations:</p>
<ul>
<li>Functions to declare cells</li>
<li>Functions to declare relations</li>
<li>Functions to read values off cells</li>
</ul>
<p>This is clearly an imperative interface, so we’ll see monads, and we’ll simply use <code>IO</code>. So concretely for our small example above, we might expect</p>
</a><div class="sourceCode" id="cb3"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-2" tabindex="-1"></a><pre class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-2" tabindex="-1"><code class="sourceCode haskell"><span id="cb3-1"></span></code></a><code class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-1" tabindex="-1"><span class="kw">data</span> <span class="dt">Cell</span> a
<span id="cb3-2"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-2" tabindex="-1"><span class="ot">newCell ::</span> <span class="dt">IO</span> (<span class="dt">Cell</span> a)
<span id="cb3-3"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-3" tabindex="-1"><span class="co">-- declareInsert x c1 c2 declares that the value of c1 ought to be S.insert x c2</span>
<span id="cb3-4"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-4" tabindex="-1"><span class="ot">declareInsert ::</span> <span class="dt">Ord</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Cell</span> a <span class="ot">-&gt;</span> <span class="dt">Cell</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> ()
<span id="cb3-5"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-5" tabindex="-1"><span class="ot">getCell ::</span> <span class="dt">Cell</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> (<span class="dt">Set</span> a)</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-5" tabindex="-1">
<p>There is no need for an explicit “solve” function: solving can happen when <code>declareInsert</code> or <code>getCell</code> is called – as a User I do not care about that.</p>
<p>You might be curious about the implementation of <code>newCell</code>, <code>declareInsert</code> and <code>getCell</code>, but I have to disappoint you: This is not the topic of this article. Instead, I want to discuss how to turn this IO-infested interface into the pure interface seen above?</p>
<h3 id="pure-but-too-strict">Pure, but too strict</h3>
<p>Obviously, we have to get rid of the <code>IO</code> somehow, and have to use <code>unsafePerformIO :: IO a -&gt; a</code> somehow. This dangerous function creates a pure-looking value that, when used the first time, will run the IO-action and turn into that action’s result.</p>
<p>So maybe we can simply write the following:</p>
</a><div class="sourceCode" id="cb4"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-5" tabindex="-1"></a><pre class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-5" tabindex="-1"><code class="sourceCode haskell"><span id="cb4-1"></span></code></a><code class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-1" tabindex="-1"><span class="kw">type</span> <span class="dt">RSet</span> a <span class="ot">=</span> <span class="dt">Cell</span> a
<span id="cb4-2"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-2" tabindex="-1">insert x c2 <span class="ot">=</span> unsafePerformIO <span class="op">$</span> <span class="kw">do</span>
<span id="cb4-3"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-3" tabindex="-1">  c1 <span class="ot">&lt;-</span> newCell
<span id="cb4-4"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-4" tabindex="-1">  declareInsert x c1 c2
<span id="cb4-5"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-5" tabindex="-1">  <span class="fu">return</span> c1
<span id="cb4-6"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-6" tabindex="-1">get c <span class="ot">=</span> unsafePerformIO <span class="op">$</span>
<span id="cb4-7"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-7" tabindex="-1">  getCell c</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-7" tabindex="-1">
<p>Indeed, the types line up, but if we try to use that code, nothing will happen. Our <code>insert</code> is <em>too strict</em> to be used recursively: It requires the value of <code>c2</code> (as it is passed to <code>declareInsert</code>, which we assume to be strict in its arguments) before it can return <code>c1</code>, so the recursive example at the top of this post will not make any progress.</p>
<h3 id="pure-lazy-but-forgetful">Pure, lazy, but forgetful</h3>
<p>To work around this, maybe it suffices if we do not run <code>declareInsert</code> right away, but just remember that we have to do it eventually? So let’s introduce a new data type for <code>RSet a</code> that contains not just the cell (<code>Cell a</code>), but also an action that we still have to run before getting a value:</p>
</a><div class="sourceCode" id="cb5"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-7" tabindex="-1"></a><pre class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-7" tabindex="-1"><code class="sourceCode haskell"><span id="cb5-1"></span></code></a><code class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-1" tabindex="-1"><span class="kw">data</span> <span class="dt">RSet</span> a <span class="ot">=</span> <span class="dt">RSet</span> (<span class="dt">Cell</span> a) (<span class="dt">IO</span> ())
<span id="cb5-2"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-2" tabindex="-1">insert x r2 <span class="ot">=</span> unsafePerformIO <span class="op">$</span> <span class="kw">do</span>
<span id="cb5-3"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-3" tabindex="-1">  c1 <span class="ot">&lt;-</span> newCell
<span id="cb5-4"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-4" tabindex="-1">  <span class="kw">let</span> todo <span class="ot">=</span> <span class="kw">do</span>
<span id="cb5-5"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-5" tabindex="-1">        <span class="kw">let</span> (<span class="dt">RSet</span> c2 _) <span class="ot">=</span> r2
<span id="cb5-6"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-6" tabindex="-1">        declareInsert x c1 c2
<span id="cb5-7"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-7" tabindex="-1">  <span class="fu">return</span> (<span class="dt">RSet</span> c1 todo)
<span id="cb5-8"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-8" tabindex="-1">get (<span class="dt">RSet</span> c todo) <span class="ot">=</span> unsafePerformIO <span class="op">$</span> <span class="kw">do</span>
<span id="cb5-9"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-9" tabindex="-1">  todo
<span id="cb5-10"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-10" tabindex="-1">  getCell c</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-10" tabindex="-1">
<p>This is better: <code>insert</code> is now lazy in its arguments (for this it is crucial to pattern-match on <code>RSet</code> only inside the <code>todo</code> code, <em>not</em> in the pattern of <code>insert</code>!) This means that our recursive code above does not get stuck right away.</p>
<h3 id="pure-lazy-but-runs-in-circles">Pure, lazy, but runs in circles</h3>
<p>But it is still pretty bad: Note that we do not run <code>get s2</code> in the example above, so that cell’s <code>todo</code>, which would <code>declareInsert 42</code>, will never run. This cannot work! We have to (eventually) run the declaration code from <em>all</em> involved cells before we can use <code>getCell</code>!</p>
<p>We can try to run the todo action of all the dependencies as part of a cell’s todo action:</p>
</a><div class="sourceCode" id="cb6"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-10" tabindex="-1"></a><pre class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-10" tabindex="-1"><code class="sourceCode haskell"><span id="cb6-1"></span></code></a><code class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb6-1" tabindex="-1"><span class="kw">data</span> <span class="dt">RSet</span> a <span class="ot">=</span> <span class="dt">RSet</span> (<span class="dt">Cell</span> a) (<span class="dt">IO</span> ())
<span id="cb6-2"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb6-2" tabindex="-1">insert x r2 <span class="ot">=</span> unsafePerformIO <span class="op">$</span> <span class="kw">do</span>
<span id="cb6-3"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb6-3" tabindex="-1">  c1 <span class="ot">&lt;-</span> newCell
<span id="cb6-4"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb6-4" tabindex="-1">  <span class="kw">let</span> todo <span class="ot">=</span> <span class="kw">do</span>
<span id="cb6-5"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb6-5" tabindex="-1">        <span class="kw">let</span> (<span class="dt">RSet</span> c2 todo2) <span class="ot">=</span> r2
<span id="cb6-6"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb6-6" tabindex="-1">        declareInsert x c1 c2
<span id="cb6-7"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb6-7" tabindex="-1">        todo2
<span id="cb6-8"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb6-8" tabindex="-1">  <span class="fu">return</span> (<span class="dt">RSet</span> c1 todo)
<span id="cb6-9"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb6-9" tabindex="-1">get (<span class="dt">RSet</span> c todo) <span class="ot">=</span> unsafePerformIO <span class="op">$</span> <span class="kw">do</span>
<span id="cb6-10"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb6-10" tabindex="-1">  todo
<span id="cb6-11"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb6-11" tabindex="-1">  getCell c</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb6-11" tabindex="-1">
<p>Now we certainly won’t forget to run the second cell’s todo action, so that is good. But that cell’s todo action will run the first cell’s todo action, and that again the second cell’s, and so on.</p>
<h3 id="pure-lazy-terminating-but-not-thread-safe">Pure, lazy, terminating, but not thread safe</h3>
<p>This is silly: We only need (and should!) run that code once! So let’s keep track of whether we ran it already:</p>
</a><div class="sourceCode" id="cb7"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb6-11" tabindex="-1"></a><pre class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb6-11" tabindex="-1"><code class="sourceCode haskell"><span id="cb7-1"></span></code></a><code class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-1" tabindex="-1"><span class="kw">data</span> <span class="dt">RSet</span> a <span class="ot">=</span> <span class="dt">RSet</span> (<span class="dt">Cell</span> a) (<span class="dt">IO</span> ()) (<span class="dt">IORef</span> <span class="dt">Bool</span>)
<span id="cb7-2"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-2" tabindex="-1">insert x r2 <span class="ot">=</span> unsafePerformIO <span class="op">$</span> <span class="kw">do</span>
<span id="cb7-3"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-3" tabindex="-1">  c1 <span class="ot">&lt;-</span> newCell
<span id="cb7-4"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-4" tabindex="-1">  done <span class="ot">&lt;-</span> newIORef <span class="dt">False</span>
<span id="cb7-5"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-5" tabindex="-1">  <span class="kw">let</span> todo <span class="ot">=</span> <span class="kw">do</span>
<span id="cb7-6"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-6" tabindex="-1">        is_done <span class="ot">&lt;-</span> readIORef done
<span id="cb7-7"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-7" tabindex="-1">        unless is_done <span class="op">$</span> <span class="kw">do</span>
<span id="cb7-8"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-8" tabindex="-1">          writeIORef done <span class="dt">True</span>
<span id="cb7-9"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-9" tabindex="-1">          <span class="kw">let</span> (<span class="dt">RSet</span> c2 todo2 _) <span class="ot">=</span> r2
<span id="cb7-10"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-10" tabindex="-1">          declareInsert x c1 c2
<span id="cb7-11"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-11" tabindex="-1">          todo2
<span id="cb7-12"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-12" tabindex="-1">  <span class="fu">return</span> (<span class="dt">RSet</span> c1 todo done)
<span id="cb7-13"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-13" tabindex="-1">get (<span class="dt">RSet</span> c todo _) <span class="ot">=</span> unsafePerformIO <span class="op">$</span> <span class="kw">do</span>
<span id="cb7-14"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-14" tabindex="-1">  todo
<span id="cb7-15"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-15" tabindex="-1">  getCell c</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-15" tabindex="-1">
<p>Ah, much better: It works! Our call to <code>get c1</code> will trigger the first cell’s todo action, which will mark it as done <em>before</em> calling the second cell’s todo action. When that now invokes the first cell’s todo action, it is already marked done and we break the cycle, and by the time we reach <code>getCell</code>, all relations have been correctly registered.</p>
<p>In a single-threaded world, this would be all good and fine, but we have to worry about multiple threads running <code>get</code> concurrently, on the same or on different cells.</p>
<p>In fact, because we use <code>unsafePerformIO</code>, we have to worry about this even when the program is not using threads.</p>
<p>And the above code has problems. Imagine a second call to <code>get c1</code> while the first one has already marked it as done, but has not finished processing all the dependencies yet: It will call <code>getCell</code> before all relations are registered, which is bad.</p>
<h3 id="recursive-do-once-io-actions">Recursive do-once IO actions</h3>
</a><p><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-15" tabindex="-1">Making this thread-safe seems to be possible, but would clutter both the code and this blog post. So let’s hide that problem behind a nice and clean interface. Maybe there will be a separate blog post about its implementation (let me know if you are curious), or you can inspect the code in </a><a href="https://hackage.haskell.org/package/rec-def-0.2/docs/System-IO-RecThunk.html"><code>System.IO.RecThunk</code> module</a> yourself). The interface is simply</p>
<pre><code>data Thunk
thunk :: IO [Thunk] -&gt; IO Thunk
force :: Thunk -&gt; IO ()</code></pre>
<p>and the idea is that <code>thunk act</code> will defer the action <code>act</code> until the thunk is passed to <code>force</code> for the first time, and <code>force</code> will not return until the action has been performed (possibly waiting if another thread is doing that at the moment), and also until the actions of all the thunks returned by <code>act</code> have performed, recursively, without running into cycles.</p>
<p>We can use this in our definition of <code>RSet</code> and get to the final, working solution:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb9-1" tabindex="-1"><span class="kw">data</span> <span class="dt">RSet</span> a <span class="ot">=</span> <span class="dt">RSet</span> (<span class="dt">Cell</span> a) <span class="dt">Thunk</span></a></span><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb9-1" tabindex="-1">
<span id="cb9-2"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb9-2" tabindex="-1">insert x r2 <span class="ot">=</span> unsafePerformIO <span class="op">$</span> <span class="kw">do</span>
<span id="cb9-3"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb9-3" tabindex="-1">  c1 <span class="ot">&lt;-</span> newCell
<span id="cb9-4"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb9-4" tabindex="-1">  t1 <span class="ot">&lt;-</span> thunk <span class="op">$</span> <span class="kw">do</span>
<span id="cb9-5"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb9-5" tabindex="-1">    <span class="kw">let</span> (<span class="dt">RSet</span> c2 t2) <span class="ot">=</span> r2
<span id="cb9-6"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb9-6" tabindex="-1">    declareInsert x c1 c2
<span id="cb9-7"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb9-7" tabindex="-1">    <span class="fu">return</span> [t2]
<span id="cb9-8"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb9-8" tabindex="-1">  <span class="fu">return</span> (<span class="dt">RSet</span> c1 t1)
<span id="cb9-9"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb9-9" tabindex="-1">get (<span class="dt">RSet</span> c t) <span class="ot">=</span> unsafePerformIO <span class="op">$</span> <span class="kw">do</span>
<span id="cb9-10"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb9-10" tabindex="-1">  force t
<span id="cb9-11"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb9-11" tabindex="-1">  getCell c</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb9-11" tabindex="-1">
<p>This snippet captures the essential ideas behind <code>rec-def</code>:</p>
<ul>
<li>Use laziness to allow recursive definition to describe the propagator graph naturally</li>
<li>Use a form of “explicit thunk” to register the propagator graph relations at the right time (not too early/strict, not too late)</li>
</ul>
<h3 id="and-thats-all">And that’s all?</h3>
<p>The actual implementation in <code>rec-def</code> has a few more moving parts.</p>
</a><p><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb9-11" tabindex="-1">In particular, it tries to support different value types (not just sets), possibly with different implementations, and even mixing them (e.g. in </a><a href="https://hackage.haskell.org/package/rec-def-0.2/docs/Data-Recursive-Set.html#v:rMember"><code>member :: Ord a =&gt; a -&gt; RSet a -&gt; RBool</code></a>), so the generic code is in <a href="https://hackage.haskell.org/package/rec-def-0.2/docs/Data-Propagator-Purify.html"><code>Data.Propagator.Purify</code></a>, and supports various propagators underneath. The type <code>RSet</code> is then just a newtype around that, defined in <a href="https://hackage.haskell.org/package/rec-def-0.2/docs/Data-Recursive-Internal.html"><code>Data.Recursive.Internal</code></a> to maintain the safety of the abstraction,</p>
<p>I went back and forth on a few variants of the design here, including one where there was a generic <code>R</code> type constructor (<code>R (Set a)</code>, <code>R Bool</code> etc.), but then monomorphic interface seems simpler.</p>
<h3 id="does-it-really-work">Does it really work?</h3>
<p>The big remaining question is certainly: Is this really safe and pure? Does it still behave like Haskell?</p>
<p>The answer to these questions certainly depends on the underlying propagator implementation. But it also depends on what we actually mean by “safe and pure”? For example, do we expect the Static Argument Transformation be semantics preserving? Or is it allowed to turn undefined values into defined ones (as it does here)?</p>
<p>I am unsure myself yet, so I’ll defer this discussion to a separate blog post, after I hopefully had good discussions about this here at ICFP 2022 in Ljubljana. If you are around and want to discuss, please hit me up!</p></div>
    </summary>
    <updated>2022-09-10T09:08:24Z</updated>
    <published>2022-09-10T09:08:24Z</published>
    <author>
      <name>Joachim Breitner</name>
      <email>mail@joachim-breitner.de</email>
    </author>
    <source>
      <id>http://www.joachim-breitner.de//blog</id>
      <logo>http://joachim-breitner.de/avatars/avatar_128.png</logo>
      <link href="http://www.joachim-breitner.de//blog" rel="alternate" type="text/html">
      <link href="http://www.joachim-breitner.de/blog_feed.rss" rel="self" type="application/rss+xml">
      <subtitle xml:lang="en">Joachim Breitners Denkblogade</subtitle>
      <title xml:lang="en">nomeataâ€™s mind shares</title>
      <updated>2022-11-04T10:00:56Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://www.well-typed.com/blog/2022/09/lockstep-with-quickcheck-dynamic</id>
    <link href="https://well-typed.com/blog/2022/09/lockstep-with-quickcheck-dynamic" rel="alternate" type="text/html">
    <title>Lockstep-style testing with quickcheck-dynamic</title>
    <summary>Recently IOG and QuviQ released a new library for testing stateful
systems called quickcheck-dynamic. In this blog post we will take a look
at this library, and how it relates to quickcheck-state-machine. We will
focus on the state machine testing aspect; quickcheck-dynamic also has
support for dynamic [...]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Recently <a href="https://iog.io/">IOG</a> and <a href="http://www.quviq.com/">QuviQ</a> released a new library for testing stateful systems called <a href="https://hackage.haskell.org/package/quickcheck-dynamic"><code>quickcheck-dynamic</code></a>. In this blog post we will take a look at this library, and how it relates to <a href="https://hackage.haskell.org/package/quickcheck-state-machine"><code>quickcheck-state-machine</code></a>. We will focus on the state machine testing aspect; <code>quickcheck-dynamic</code> also has support for dynamic logic, but we will not discuss that here.</p>
<p>Specifically, we will consider how we might do lockstep-style testing with <code>quickcheck-dynamic</code>. This is a particular approach to testing that we described in great detail in an earlier blog post, <a href="https://well-typed.com/blog/2019/01/qsm-in-depth/">An in-depth look at quickcheck-state-machine</a>. We will recap the general philosophy in this new blog post, but we will focus here on the <em>hows</em>, not necessarily the <em>whys</em>; it might be helpful to be familiar with the previous blog post to understand the larger context of what we’re trying to achieve.</p>
<p>We have developed a library called <a href="https://github.com/well-typed/quickcheck-lockstep"><code>quickcheck-lockstep</code></a> which builds on top of <code>quickcheck-dynamic</code> to provide an abstraction called <code>InLockstep</code> which provides support for lockstep-style testing. In this blog post we will describe this library in two parts:</p>
<ol type="1">
<li>In the first half we will show a test author’s perspective of how to <em>use</em> the abstraction.</li>
<li>In the second half we show how we can <em>implement</em> the abstraction on top of <code>quickcheck-dynamic</code>.</li>
</ol>
<p>Part one will suffice for users who simply want to use <code>quickcheck-lockstep</code>. Part two serves two purposes:</p>
<ul>
<li>It will give an illustrated example of how to use <code>quickcheck-dynamic</code> for state based testing. We will use most of the core features of the library to implement our abstraction on top of it.</li>
<li>Since the goal is to provide the end user with a very similar style of testing that we previously provided for <code>quickcheck-state-machine</code> (see specifically <a href="https://hackage.haskell.org/package/quickcheck-state-machine/docs/Test-StateMachine-Lockstep-NAry.html">Test.StateMachine.Lockstep.NAry</a>), the implementation will serve as a good test testbed for comparing the two libraries.</li>
</ul>

<p>NOTE: <code>quickcheck-lockstep</code> currently depends on an as-yet unreleased version of <code>quickcheck-dynamic</code>. Once this is released, we will also make a Hackage release of <code>quickcheck-lockstep</code>; at the moment, please refer to the <a href="https://github.com/well-typed/quickcheck-lockstep">GitHub repository</a> instead. The example that we discuss in part 1 is also available in that repository, as an example use case.</p>
<h2 id="part-1-lockstep-style-testing">Part 1: Lockstep-style testing</h2>
<p>In this section we will show how we can do lockstep-style testing using a new abstraction called <code>InLockstep</code>. In Part 2 we will see how we can <em>implement</em> this new abstraction.</p>
<h3 id="testing-philosophy">Testing philosophy</h3>
<p>Lockstep-style testing of stateful systems is quite simple:</p>
<ul>
<li>We have a stateful API that we want to test; this could be a database, a file system, etc.</li>
<li>We will <em>reify</em> that stateful API as a datatype with constructors for each of the API calls.</li>
<li>We then write two interpreters for this API: one against the system we want to test, and one against a <em>model</em>.</li>
<li>We regard the system as a <em>block box</em>: we cannot see the internal state of the database, the contents of the file system, etc. The <em>only</em> thing we can see is the results of the API calls.</li>
<li>Here is why we call this <em>lockstep</em> testing: to test the system, we generate an arbitrary sequence of commands, then execute those against the system under test and against the model. The only thing we check at each point is that both systems return the same results, modulo observability.</li>
<li>We cannot insist on <em>exactly</em> the same results: for example, opening a file might result in a file handle, which the model cannot reproduce. The model must be allowed to have its own type for “model handles” that is different from real handles, and we do not want to try and compare those to real handles. If the system somehow returns the “wrong” handle, then this will become evident later in the test when we <em>use</em> that handle.</li>
</ul>
<h3 id="running-example">Running example</h3>
<p>Our running example will be a file system: it will be precisely <a href="https://well-typed.com/blog/2019/01/qsm-in-depth/">the same example we used previously when discussing <code>quickcheck-state-machine</code></a>: same API, same model, same properties we want to test, same considerations regarding labelling tests and shrinking them—but a different testing framework. If you want to follow along, the <a href="https://github.com/well-typed/qsm-in-depth/blob/master/src/UsingQD.hs">code is available on GitHub</a>.</p>
<p>The model is a simple model for a file system. It consists of the following functions:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="https://well-typed.com/blog/rss2.xml#cb1-1" tabindex="-1"></a><span class="ot">mMkDir ::</span> <span class="dt">Dir</span>               <span class="ot">-&gt;</span> <span class="dt">Mock</span> <span class="ot">-&gt;</span> (<span class="dt">Either</span> <span class="dt">Err</span> ()      , <span class="dt">Mock</span>)</span>
<span id="cb1-2"><a href="https://well-typed.com/blog/rss2.xml#cb1-2" tabindex="-1"></a><span class="ot">mOpen  ::</span> <span class="dt">File</span>              <span class="ot">-&gt;</span> <span class="dt">Mock</span> <span class="ot">-&gt;</span> (<span class="dt">Either</span> <span class="dt">Err</span> <span class="dt">MHandle</span> , <span class="dt">Mock</span>)</span>
<span id="cb1-3"><a href="https://well-typed.com/blog/rss2.xml#cb1-3" tabindex="-1"></a><span class="ot">mWrite ::</span> <span class="dt">MHandle</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Mock</span> <span class="ot">-&gt;</span> (<span class="dt">Either</span> <span class="dt">Err</span> ()      , <span class="dt">Mock</span>)</span>
<span id="cb1-4"><a href="https://well-typed.com/blog/rss2.xml#cb1-4" tabindex="-1"></a><span class="ot">mClose ::</span> <span class="dt">MHandle</span>           <span class="ot">-&gt;</span> <span class="dt">Mock</span> <span class="ot">-&gt;</span> (<span class="dt">Either</span> <span class="dt">Err</span> ()      , <span class="dt">Mock</span>)</span>
<span id="cb1-5"><a href="https://well-typed.com/blog/rss2.xml#cb1-5" tabindex="-1"></a><span class="ot">mRead  ::</span> <span class="dt">File</span>              <span class="ot">-&gt;</span> <span class="dt">Mock</span> <span class="ot">-&gt;</span> (<span class="dt">Either</span> <span class="dt">Err</span> <span class="dt">String</span>  , <span class="dt">Mock</span>)</span></code></pre></div>
<h3 id="statemodel-implementation"><code>StateModel</code> implementation</h3>
<p><code>StateModel</code> is the central class in <code>quickcheck-dynamic</code> for stateful testing. Instances of <code>StateModel</code> define the datatype that describes the API, how to generate values of that datatype, how to interpret it, etc. When using the <code>InLockstep</code> infrastructure however, we only define the API datatype; everything else is delegated to <code>InLockstep</code>.</p>
<p>We will define the type of our model as</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="https://well-typed.com/blog/rss2.xml#cb2-1" tabindex="-1"></a><span class="kw">data</span> <span class="dt">FsState</span> <span class="ot">=</span> <span class="dt">FsState</span> <span class="dt">Mock</span> <span class="dt">Stats</span></span>
<span id="cb2-2"><a href="https://well-typed.com/blog/rss2.xml#cb2-2" tabindex="-1"></a></span>
<span id="cb2-3"><a href="https://well-typed.com/blog/rss2.xml#cb2-3" tabindex="-1"></a><span class="ot">initState ::</span> <span class="dt">FsState</span></span>
<span id="cb2-4"><a href="https://well-typed.com/blog/rss2.xml#cb2-4" tabindex="-1"></a>initState <span class="ot">=</span> <span class="dt">FsState</span> Mock.emptyMock initStats</span></code></pre></div>
<p>Here, <code>Mock</code> is the mock file system implementation, and <code>Stats</code> keeps some statistics about the running test. We will see why we need this statistics when we discuss labelling.</p>
<p>Let’s now define two type synonyms. First, one of the type of actions:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="https://well-typed.com/blog/rss2.xml#cb3-1" tabindex="-1"></a><span class="kw">type</span> <span class="dt">FsAct</span> a <span class="ot">=</span> <span class="dt">Action</span> (<span class="dt">Lockstep</span> <span class="dt">FsState</span>) (<span class="dt">Either</span> <span class="dt">Err</span> a)</span></code></pre></div>
<p>Here, <code>Action</code> is the associated data type from <code>StateModel</code>, and <code>Lockstep</code> is an opaque datatype from the lockstep infrastructure. All our actions can return errors, and we want to make sure that the model and the real system agree on what those errors are. So, the result of an <code>FsAct</code> is always of the form <code>Either Err a</code>, where <code>Err</code> is also defined in the model.</p>
<p>Secondly, the type of <em>variables</em>:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="https://well-typed.com/blog/rss2.xml#cb4-1" tabindex="-1"></a><span class="kw">type</span> <span class="dt">FsVar</span> a <span class="ot">=</span> <span class="dt">ModelVar</span> <span class="dt">FsState</span> a</span></code></pre></div>
<p>Variables are an essential part of stateful testing: a variable allows us to refer back to the result of a previously executed command. For example, if we want to write to a file, we need to generate an action that says “write this string to the handle that you got when you opened that file a while ago.” <code>ModelVar</code> are a special kind of variables provided by the lockstep infrastructure; we will discuss them in more detail later.</p>
<p>We can now give the <code>StateModel</code> instance:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="https://well-typed.com/blog/rss2.xml#cb5-1" tabindex="-1"></a><span class="kw">type</span> <span class="dt">FsVar</span> a <span class="ot">=</span> <span class="dt">ModelVar</span> <span class="dt">FsState</span> a</span>
<span id="cb5-2"><a href="https://well-typed.com/blog/rss2.xml#cb5-2" tabindex="-1"></a><span class="kw">type</span> <span class="dt">FsAct</span> a <span class="ot">=</span> <span class="dt">Action</span> (<span class="dt">Lockstep</span> <span class="dt">FsState</span>) (<span class="dt">Either</span> <span class="dt">Err</span> a)</span>
<span id="cb5-3"><a href="https://well-typed.com/blog/rss2.xml#cb5-3" tabindex="-1"></a></span>
<span id="cb5-4"><a href="https://well-typed.com/blog/rss2.xml#cb5-4" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">StateModel</span> (<span class="dt">Lockstep</span> <span class="dt">FsState</span>) <span class="kw">where</span></span>
<span id="cb5-5"><a href="https://well-typed.com/blog/rss2.xml#cb5-5" tabindex="-1"></a>  <span class="kw">data</span> <span class="dt">Action</span> (<span class="dt">Lockstep</span> <span class="dt">FsState</span>) a <span class="kw">where</span></span>
<span id="cb5-6"><a href="https://well-typed.com/blog/rss2.xml#cb5-6" tabindex="-1"></a>    <span class="dt">MkDir</span><span class="ot"> ::</span> <span class="dt">Dir</span>                        <span class="ot">-&gt;</span> <span class="dt">FsAct</span> ()</span>
<span id="cb5-7"><a href="https://well-typed.com/blog/rss2.xml#cb5-7" tabindex="-1"></a>    <span class="dt">Open</span><span class="ot">  ::</span> <span class="dt">File</span>                       <span class="ot">-&gt;</span> <span class="dt">FsAct</span> (<span class="dt">IO</span><span class="op">.</span><span class="dt">Handle</span>, <span class="dt">File</span>)</span>
<span id="cb5-8"><a href="https://well-typed.com/blog/rss2.xml#cb5-8" tabindex="-1"></a>    <span class="dt">Write</span><span class="ot"> ::</span> <span class="dt">FsVar</span> <span class="dt">IO</span><span class="op">.</span><span class="dt">Handle</span>  <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">FsAct</span> ()</span>
<span id="cb5-9"><a href="https://well-typed.com/blog/rss2.xml#cb5-9" tabindex="-1"></a>    <span class="dt">Close</span><span class="ot"> ::</span> <span class="dt">FsVar</span> <span class="dt">IO</span><span class="op">.</span><span class="dt">Handle</span>            <span class="ot">-&gt;</span> <span class="dt">FsAct</span> ()</span>
<span id="cb5-10"><a href="https://well-typed.com/blog/rss2.xml#cb5-10" tabindex="-1"></a>    <span class="dt">Read</span><span class="ot">  ::</span> <span class="dt">Either</span> (<span class="dt">FsVar</span> <span class="dt">File</span>) <span class="dt">File</span>   <span class="ot">-&gt;</span> <span class="dt">FsAct</span> <span class="dt">String</span></span>
<span id="cb5-11"><a href="https://well-typed.com/blog/rss2.xml#cb5-11" tabindex="-1"></a></span>
<span id="cb5-12"><a href="https://well-typed.com/blog/rss2.xml#cb5-12" tabindex="-1"></a>  initialState    <span class="ot">=</span> Lockstep.initialState initState</span>
<span id="cb5-13"><a href="https://well-typed.com/blog/rss2.xml#cb5-13" tabindex="-1"></a>  nextState       <span class="ot">=</span> Lockstep.nextState</span>
<span id="cb5-14"><a href="https://well-typed.com/blog/rss2.xml#cb5-14" tabindex="-1"></a>  precondition    <span class="ot">=</span> Lockstep.precondition</span>
<span id="cb5-15"><a href="https://well-typed.com/blog/rss2.xml#cb5-15" tabindex="-1"></a>  arbitraryAction <span class="ot">=</span> Lockstep.arbitraryAction</span>
<span id="cb5-16"><a href="https://well-typed.com/blog/rss2.xml#cb5-16" tabindex="-1"></a>  shrinkAction    <span class="ot">=</span> Lockstep.shrinkAction</span></code></pre></div>
<p>Some comments:</p>
<ul>
<li><code>Write</code> and <code>Close</code> both take a <em>variable</em> to a handle, rather than an actual handle. This is what enables us to refer the handles that we got from previous commands.</li>
<li>In both cases, the type of that variable is <code>FsVar IO.Handle</code>, but the model implementation requires mock handles instead; we will see how that is resolved in the next section when we discuss relating results from the real system to model results.</li>
<li><code>Open</code> returns the file path of the file it just opened along with the handle, and <code>Read</code> takes either a concrete file path as an argument or a variable <em>to</em> such a file path (e.g., one that might have been returned by <code>Open</code>). This allows us to express “read from the same file that you opened previously in the test”; see the section on <a href="https://well-typed.com/blog/2019/01/qsm-in-depth/#dependencies-between-commands">Dependencies between commands</a> from the previous post why this can lead to better (more minimal) counter examples.</li>
<li>The lockstep infrastructure provides default implementation for the methods of <code>StateModel</code>. In many cases you can just them as-is, like we did here, but of course you don’t <em>have</em> to. For example, the default precondition isn’t always strong enough.</li>
</ul>
<h3 id="from-real-results-to-model-results">From real results to model results</h3>
<p>When we open a file in the real file system, we get an <code>IO.Handle</code>, or possibly an exception. In the model however we have</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="https://well-typed.com/blog/rss2.xml#cb6-1" tabindex="-1"></a><span class="ot">mOpen ::</span> <span class="dt">File</span> <span class="ot">-&gt;</span> <span class="dt">Mock</span> <span class="ot">-&gt;</span> (<span class="dt">Either</span> <span class="dt">Err</span> <span class="dt">MHandle</span>, <span class="dt">Mock</span>)</span></code></pre></div>
<p>We can map the exception to an <code>Err</code>, so that’s not a problem, but we cannot map an <code>IO.Handle</code> to an <code>MHandle</code> or vice versa: we want to allow the model to return something of a different type here.</p>
<p>The <code>Action</code> datatype from <code>quickcheck-dynamic</code> is a GADT, where the type index describes the <em>result</em> of the action. For example, consider this method from the <code>StateModel</code> class:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="https://well-typed.com/blog/rss2.xml#cb7-1" tabindex="-1"></a><span class="ot">postcondition ::</span> (state, state) <span class="ot">-&gt;</span> <span class="dt">Action</span> state a <span class="ot">-&gt;</span> <span class="dt">LookUp</span> m <span class="ot">-&gt;</span> <span class="dt">Realized</span> m a <span class="ot">-&gt;</span> m <span class="dt">Bool</span></span></code></pre></div>
<p>This method is the check that <code>quickcheck-dynamic</code> does every after action. It has the following parameters:</p>
<ol type="1">
<li>The before and after state of the model</li>
<li>The action that was executed</li>
<li>A way to look up the values of any variables in those actions</li>
<li>The result of the action in the system under test</li>
</ol>
<p>The type of the result is <code>Realized m a</code>; this is an abstraction introduced in <code>quickcheck-dynamic</code> 2.0 which allows to run the same tests with different test execution backends; for example, we might run our tests in the real IO monad, or in an <a href="https://github.com/input-output-hk/io-sim">IO monad simulator</a>. This is orthogonal to the abstractions provided by <code>InLockstep</code>: no matter the test execution backend, we will always run against the same model. For our purposes (and this will be true for most lockstep-style tests<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn1" id="fnref1"><sup>1</sup></a>), we will exclusively run our tests in <code>ReaderT r IO</code>, where <code>quickcheck-dynamic</code> already defines for us that</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="https://well-typed.com/blog/rss2.xml#cb8-1" tabindex="-1"></a><span class="dt">Realized</span> (<span class="dt">ReaderT</span> r <span class="dt">IO</span>) a <span class="ot">=</span> a</span></code></pre></div>
<p>So for the purposes of this blogpost, whenever you see <code>Realized m a</code>, you can translate that to simply <code>a</code> in your head.</p>
<p>In lockstep-style testing, we want to compare that result of type <code>a</code> to the response from the model but, as we saw, the model might return something of a slightly different type. The <code>InLockstep</code> class therefore introduces an associated data type called <code>ModelValue</code>; the idea is that whenever the system under test returns something of type <code>a</code> (technically, <code>Realized m a</code>), we expect the model to return a result of type <code>ModelValue a</code>.</p>
<p>As before, we will define a type synonym:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="https://well-typed.com/blog/rss2.xml#cb9-1" tabindex="-1"></a><span class="kw">type</span> <span class="dt">FsVal</span> a <span class="ot">=</span> <span class="dt">ModelValue</span> <span class="dt">FsState</span> a</span></code></pre></div>
<p>Here’s the definition for <code>FsState</code>:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="https://well-typed.com/blog/rss2.xml#cb10-1" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">InLockstep</span> <span class="dt">FsState</span> <span class="kw">where</span></span>
<span id="cb10-2"><a href="https://well-typed.com/blog/rss2.xml#cb10-2" tabindex="-1"></a>  <span class="kw">data</span> <span class="dt">ModelValue</span> <span class="dt">FsState</span> a <span class="kw">where</span></span>
<span id="cb10-3"><a href="https://well-typed.com/blog/rss2.xml#cb10-3" tabindex="-1"></a>    <span class="dt">MHandle</span><span class="ot"> ::</span> <span class="dt">Mock.MHandle</span> <span class="ot">-&gt;</span> <span class="dt">FsVal</span> <span class="dt">IO</span><span class="op">.</span><span class="dt">Handle</span></span>
<span id="cb10-4"><a href="https://well-typed.com/blog/rss2.xml#cb10-4" tabindex="-1"></a></span>
<span id="cb10-5"><a href="https://well-typed.com/blog/rss2.xml#cb10-5" tabindex="-1"></a>    <span class="co">-- Rest is regular:</span></span>
<span id="cb10-6"><a href="https://well-typed.com/blog/rss2.xml#cb10-6" tabindex="-1"></a></span>
<span id="cb10-7"><a href="https://well-typed.com/blog/rss2.xml#cb10-7" tabindex="-1"></a>    <span class="dt">MErr</span><span class="ot">    ::</span> <span class="dt">Err</span>    <span class="ot">-&gt;</span> <span class="dt">FsVal</span> <span class="dt">Err</span></span>
<span id="cb10-8"><a href="https://well-typed.com/blog/rss2.xml#cb10-8" tabindex="-1"></a>    <span class="dt">MFile</span><span class="ot">   ::</span> <span class="dt">File</span>   <span class="ot">-&gt;</span> <span class="dt">FsVal</span> <span class="dt">File</span></span>
<span id="cb10-9"><a href="https://well-typed.com/blog/rss2.xml#cb10-9" tabindex="-1"></a>    <span class="dt">MString</span><span class="ot"> ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">FsVal</span> <span class="dt">String</span></span>
<span id="cb10-10"><a href="https://well-typed.com/blog/rss2.xml#cb10-10" tabindex="-1"></a>    <span class="dt">MUnit</span><span class="ot">   ::</span> ()     <span class="ot">-&gt;</span> <span class="dt">FsVal</span> ()</span>
<span id="cb10-11"><a href="https://well-typed.com/blog/rss2.xml#cb10-11" tabindex="-1"></a></span>
<span id="cb10-12"><a href="https://well-typed.com/blog/rss2.xml#cb10-12" tabindex="-1"></a>    <span class="dt">MEither</span><span class="ot"> ::</span> <span class="dt">Either</span> (<span class="dt">FsVal</span> a) (<span class="dt">FsVal</span> b) <span class="ot">-&gt;</span> <span class="dt">FsVal</span> (<span class="dt">Either</span> a b)</span>
<span id="cb10-13"><a href="https://well-typed.com/blog/rss2.xml#cb10-13" tabindex="-1"></a>    <span class="dt">MPair</span><span class="ot">   ::</span> (<span class="dt">FsVal</span> a, <span class="dt">FsVal</span> b)         <span class="ot">-&gt;</span> <span class="dt">FsVal</span> (a, b)</span>
<span id="cb10-14"><a href="https://well-typed.com/blog/rss2.xml#cb10-14" tabindex="-1"></a></span>
<span id="cb10-15"><a href="https://well-typed.com/blog/rss2.xml#cb10-15" tabindex="-1"></a>  <span class="co">-- .. other members of InLockstep elided</span></span></code></pre></div>
<p>We see that an <code>FsVal a</code> is just a wrapper around an <code>a</code>, <em>unless</em> that <code>a</code> is an <code>IO.Handle</code> in which case <code>FsVal IO.Handle</code> instead wraps a <code>Mock.MHandle</code>.</p>
<p>Recall that we defined</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="https://well-typed.com/blog/rss2.xml#cb11-1" tabindex="-1"></a><span class="kw">type</span> <span class="dt">FsVar</span> a <span class="ot">=</span> <span class="dt">ModelVar</span> <span class="dt">FsState</span> a</span></code></pre></div>
<p>We can now be more precise: a <code>ModelVar s a</code> is a variable to a <code>ModelValue s a</code>.</p>
<h3 id="comparing-values">Comparing values</h3>
<p><code>ModelValue</code> allows the model to return something of a different type than the implementation, but when we <em>compare</em> the two, we need something of the <em>same</em> type.<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn2" id="fnref2"><sup>2</sup></a> <code>InLockstep</code> therefore defines a second associated type <code>Observable</code>, which is the <em>observable</em> result. The definition is similar but a bit simpler:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="https://well-typed.com/blog/rss2.xml#cb12-1" tabindex="-1"></a><span class="kw">type</span> <span class="dt">FsObs</span> a <span class="ot">=</span> <span class="dt">Observable</span> <span class="dt">FsState</span> a</span>
<span id="cb12-2"><a href="https://well-typed.com/blog/rss2.xml#cb12-2" tabindex="-1"></a></span>
<span id="cb12-3"><a href="https://well-typed.com/blog/rss2.xml#cb12-3" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">InLockstep</span> <span class="dt">FsState</span> <span class="kw">where</span></span>
<span id="cb12-4"><a href="https://well-typed.com/blog/rss2.xml#cb12-4" tabindex="-1"></a>  <span class="kw">data</span> <span class="dt">Observable</span> <span class="dt">FsState</span> a <span class="kw">where</span></span>
<span id="cb12-5"><a href="https://well-typed.com/blog/rss2.xml#cb12-5" tabindex="-1"></a>    <span class="dt">OHandle</span><span class="ot"> ::</span> <span class="dt">FsObs</span> <span class="dt">IO</span><span class="op">.</span><span class="dt">Handle</span></span>
<span id="cb12-6"><a href="https://well-typed.com/blog/rss2.xml#cb12-6" tabindex="-1"></a>    <span class="dt">OId</span><span class="ot">     ::</span> (<span class="op">..</span>) <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">FsObs</span> a</span>
<span id="cb12-7"><a href="https://well-typed.com/blog/rss2.xml#cb12-7" tabindex="-1"></a>    <span class="dt">OEither</span><span class="ot"> ::</span> <span class="dt">Either</span> (<span class="dt">FsObs</span> a) (<span class="dt">FsObs</span> b) <span class="ot">-&gt;</span> <span class="dt">FsObs</span> (<span class="dt">Either</span> a b)</span>
<span id="cb12-8"><a href="https://well-typed.com/blog/rss2.xml#cb12-8" tabindex="-1"></a>    <span class="dt">OPair</span><span class="ot">   ::</span> (<span class="dt">FsObs</span> a, <span class="dt">FsObs</span> b) <span class="ot">-&gt;</span> <span class="dt">FsObs</span> (a, b)</span>
<span id="cb12-9"><a href="https://well-typed.com/blog/rss2.xml#cb12-9" tabindex="-1"></a></span>
<span id="cb12-10"><a href="https://well-typed.com/blog/rss2.xml#cb12-10" tabindex="-1"></a>  <span class="co">-- .. other members of InLockstep elided</span></span></code></pre></div>
<p>This follows a similar structure as <code>ModelValue</code>, with two differences:</p>
<ul>
<li>In the case of a handle, we don’t observe <em>anything</em>. If the system (or the model) returns the wrong handle, we cannot notice this when the open a file; we will only notice it later when we try to read <em>from</em> that file.</li>
<li>In the case of <code>ModelValue</code>, we need a guarantee that if we have a value of <code>FsVal IO.Handle</code>, that this is really an <code>Mock.MHandle</code>. We do not need that guarantee for <code>Observable</code>, and so it suffices to define a single constructor <code>OId</code> that can be used for <em>any</em> type at all where the model and the system have a result of the same type.</li>
</ul>
<p>We also have to explain how to translate from mock results to observable results:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="https://well-typed.com/blog/rss2.xml#cb13-1" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">InLockstep</span> <span class="dt">FsState</span> <span class="kw">where</span></span>
<span id="cb13-2"><a href="https://well-typed.com/blog/rss2.xml#cb13-2" tabindex="-1"></a><span class="ot">  observeModel ::</span> <span class="dt">FsVal</span> a <span class="ot">-&gt;</span> <span class="dt">FsObs</span> a</span>
<span id="cb13-3"><a href="https://well-typed.com/blog/rss2.xml#cb13-3" tabindex="-1"></a>  observeModel <span class="ot">=</span> \<span class="kw">case</span></span>
<span id="cb13-4"><a href="https://well-typed.com/blog/rss2.xml#cb13-4" tabindex="-1"></a>      <span class="dt">MHandle</span> _ <span class="ot">-&gt;</span> <span class="dt">OHandle</span></span>
<span id="cb13-5"><a href="https://well-typed.com/blog/rss2.xml#cb13-5" tabindex="-1"></a>      <span class="dt">MErr</span>    x <span class="ot">-&gt;</span> <span class="dt">OId</span> x</span>
<span id="cb13-6"><a href="https://well-typed.com/blog/rss2.xml#cb13-6" tabindex="-1"></a>      <span class="dt">MString</span> x <span class="ot">-&gt;</span> <span class="dt">OId</span> x</span>
<span id="cb13-7"><a href="https://well-typed.com/blog/rss2.xml#cb13-7" tabindex="-1"></a>      <span class="dt">MUnit</span>   x <span class="ot">-&gt;</span> <span class="dt">OId</span> x</span>
<span id="cb13-8"><a href="https://well-typed.com/blog/rss2.xml#cb13-8" tabindex="-1"></a>      <span class="dt">MFile</span>   x <span class="ot">-&gt;</span> <span class="dt">OId</span> x</span>
<span id="cb13-9"><a href="https://well-typed.com/blog/rss2.xml#cb13-9" tabindex="-1"></a>      <span class="dt">MEither</span> x <span class="ot">-&gt;</span> <span class="dt">OEither</span> <span class="op">$</span> bimap observeModel observeModel x</span>
<span id="cb13-10"><a href="https://well-typed.com/blog/rss2.xml#cb13-10" tabindex="-1"></a>      <span class="dt">MPair</span>   x <span class="ot">-&gt;</span> <span class="dt">OPair</span>   <span class="op">$</span> bimap observeModel observeModel x</span>
<span id="cb13-11"><a href="https://well-typed.com/blog/rss2.xml#cb13-11" tabindex="-1"></a></span>
<span id="cb13-12"><a href="https://well-typed.com/blog/rss2.xml#cb13-12" tabindex="-1"></a>  <span class="co">-- .. other members of InLockstep elided</span></span></code></pre></div>
<p>We have to do the same for results from the system under test, but we will see that when we discuss actually running the tests. This is a bit of boilerplate, but not difficult to write.</p>
<h3 id="interpreter-for-the-model">Interpreter for the model</h3>
<p>We can now write the interpreter for the model: a function that takes a valid from our reified API, calls the corresponding functions from the model, and then wraps the result in the appropriate constructors of <code>ModelValue</code>:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="https://well-typed.com/blog/rss2.xml#cb14-1" tabindex="-1"></a><span class="ot">runMock ::</span></span>
<span id="cb14-2"><a href="https://well-typed.com/blog/rss2.xml#cb14-2" tabindex="-1"></a>     <span class="dt">ModelLookUp</span> <span class="dt">FsState</span></span>
<span id="cb14-3"><a href="https://well-typed.com/blog/rss2.xml#cb14-3" tabindex="-1"></a>  <span class="ot">-&gt;</span> <span class="dt">Action</span> (<span class="dt">Lockstep</span> <span class="dt">FsState</span>) a</span>
<span id="cb14-4"><a href="https://well-typed.com/blog/rss2.xml#cb14-4" tabindex="-1"></a>  <span class="ot">-&gt;</span> <span class="dt">Mock</span> <span class="ot">-&gt;</span> (<span class="dt">FsVal</span> a, <span class="dt">Mock</span>)</span>
<span id="cb14-5"><a href="https://well-typed.com/blog/rss2.xml#cb14-5" tabindex="-1"></a>runMock lookUp <span class="ot">=</span> \<span class="kw">case</span></span>
<span id="cb14-6"><a href="https://well-typed.com/blog/rss2.xml#cb14-6" tabindex="-1"></a>    <span class="dt">MkDir</span> d   <span class="ot">-&gt;</span> wrap <span class="dt">MUnit</span>     <span class="op">.</span> Mock.mMkDir d</span>
<span id="cb14-7"><a href="https://well-typed.com/blog/rss2.xml#cb14-7" tabindex="-1"></a>    <span class="dt">Open</span> f    <span class="ot">-&gt;</span> wrap (mOpen f) <span class="op">.</span> Mock.mOpen f</span>
<span id="cb14-8"><a href="https://well-typed.com/blog/rss2.xml#cb14-8" tabindex="-1"></a>    <span class="dt">Write</span> h s <span class="ot">-&gt;</span> wrap <span class="dt">MUnit</span>     <span class="op">.</span> Mock.mWrite (getHandle <span class="op">$</span> lookUp h) s</span>
<span id="cb14-9"><a href="https://well-typed.com/blog/rss2.xml#cb14-9" tabindex="-1"></a>    <span class="dt">Close</span> h   <span class="ot">-&gt;</span> wrap <span class="dt">MUnit</span>     <span class="op">.</span> Mock.mClose (getHandle <span class="op">$</span> lookUp h)</span>
<span id="cb14-10"><a href="https://well-typed.com/blog/rss2.xml#cb14-10" tabindex="-1"></a>    <span class="dt">Read</span> f    <span class="ot">-&gt;</span> wrap <span class="dt">MString</span>   <span class="op">.</span> Mock.mRead (<span class="fu">either</span> (getFile <span class="op">.</span> lookUp) <span class="fu">id</span> f)</span>
<span id="cb14-11"><a href="https://well-typed.com/blog/rss2.xml#cb14-11" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb14-12"><a href="https://well-typed.com/blog/rss2.xml#cb14-12" tabindex="-1"></a><span class="ot">    wrap ::</span> (a <span class="ot">-&gt;</span> <span class="dt">FsVal</span> b) <span class="ot">-&gt;</span> (<span class="dt">Either</span> <span class="dt">Err</span> a, <span class="dt">Mock</span>) <span class="ot">-&gt;</span> (<span class="dt">FsVal</span> (<span class="dt">Either</span> <span class="dt">Err</span> b), <span class="dt">Mock</span>)</span>
<span id="cb14-13"><a href="https://well-typed.com/blog/rss2.xml#cb14-13" tabindex="-1"></a>    wrap f <span class="ot">=</span> first (<span class="dt">MEither</span> <span class="op">.</span> bimap <span class="dt">MErr</span> f)</span>
<span id="cb14-14"><a href="https://well-typed.com/blog/rss2.xml#cb14-14" tabindex="-1"></a></span>
<span id="cb14-15"><a href="https://well-typed.com/blog/rss2.xml#cb14-15" tabindex="-1"></a><span class="ot">    mOpen ::</span> <span class="dt">File</span> <span class="ot">-&gt;</span> <span class="dt">Mock.MHandle</span> <span class="ot">-&gt;</span> <span class="dt">FsVal</span> (<span class="dt">IO</span><span class="op">.</span><span class="dt">Handle</span>, <span class="dt">File</span>)</span>
<span id="cb14-16"><a href="https://well-typed.com/blog/rss2.xml#cb14-16" tabindex="-1"></a>    mOpen f h <span class="ot">=</span> <span class="dt">MPair</span> (<span class="dt">MHandle</span> h, <span class="dt">MFile</span> f)</span>
<span id="cb14-17"><a href="https://well-typed.com/blog/rss2.xml#cb14-17" tabindex="-1"></a></span>
<span id="cb14-18"><a href="https://well-typed.com/blog/rss2.xml#cb14-18" tabindex="-1"></a><span class="ot">    getHandle ::</span> <span class="dt">ModelValue</span> <span class="dt">FsState</span> <span class="dt">IO</span><span class="op">.</span><span class="dt">Handle</span> <span class="ot">-&gt;</span> <span class="dt">Mock.MHandle</span></span>
<span id="cb14-19"><a href="https://well-typed.com/blog/rss2.xml#cb14-19" tabindex="-1"></a><span class="ot">    getFile   ::</span> <span class="dt">ModelValue</span> <span class="dt">FsState</span> <span class="dt">File</span>      <span class="ot">-&gt;</span> <span class="dt">File</span></span>
<span id="cb14-20"><a href="https://well-typed.com/blog/rss2.xml#cb14-20" tabindex="-1"></a></span>
<span id="cb14-21"><a href="https://well-typed.com/blog/rss2.xml#cb14-21" tabindex="-1"></a>    getHandle (<span class="dt">MHandle</span> h) <span class="ot">=</span> h</span>
<span id="cb14-22"><a href="https://well-typed.com/blog/rss2.xml#cb14-22" tabindex="-1"></a>    getFile   (<span class="dt">MFile</span>   f) <span class="ot">=</span> f</span></code></pre></div>
<p>The only slightly non-trivial thing here is that when we encounter a command with variables, we need to <em>resolve</em> those variables. <code>InLockstep</code> gives us a function of type <code>ModelLookUp FsState</code>, which allows us to resolve any variable we see (the default <code>InLockstep</code> precondition guarantees that this resolution must always succeed). The result of looking up a variable of type <code>a</code> will be a value of type <code>FsVal a</code>; we then need to match on that to extract the wrapped value. In <code>getHandle</code> we see why it’s so important that a <code>FsVal IO.Handle</code> <em>must</em> contain a mock handle, rather than an <code>IO.Handle</code>.</p>
<p>With the interpreter defined, we can complete the next method definition of <code>InLockstep</code>:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="https://well-typed.com/blog/rss2.xml#cb15-1" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">InLockstep</span> <span class="dt">FsState</span> <span class="kw">where</span></span>
<span id="cb15-2"><a href="https://well-typed.com/blog/rss2.xml#cb15-2" tabindex="-1"></a><span class="ot">  modelNextState ::</span> <span class="kw">forall</span> a<span class="op">.</span></span>
<span id="cb15-3"><a href="https://well-typed.com/blog/rss2.xml#cb15-3" tabindex="-1"></a>       <span class="dt">LockstepAction</span> <span class="dt">FsState</span> a</span>
<span id="cb15-4"><a href="https://well-typed.com/blog/rss2.xml#cb15-4" tabindex="-1"></a>    <span class="ot">-&gt;</span> <span class="dt">ModelLookUp</span> <span class="dt">FsState</span></span>
<span id="cb15-5"><a href="https://well-typed.com/blog/rss2.xml#cb15-5" tabindex="-1"></a>    <span class="ot">-&gt;</span> <span class="dt">FsState</span> <span class="ot">-&gt;</span> (<span class="dt">FsVal</span> a, <span class="dt">FsState</span>)</span>
<span id="cb15-6"><a href="https://well-typed.com/blog/rss2.xml#cb15-6" tabindex="-1"></a>  modelNextState action lookUp (<span class="dt">FsState</span> mock stats) <span class="ot">=</span></span>
<span id="cb15-7"><a href="https://well-typed.com/blog/rss2.xml#cb15-7" tabindex="-1"></a>      auxStats <span class="op">$</span> runMock lookUp action mock</span>
<span id="cb15-8"><a href="https://well-typed.com/blog/rss2.xml#cb15-8" tabindex="-1"></a>    <span class="kw">where</span></span>
<span id="cb15-9"><a href="https://well-typed.com/blog/rss2.xml#cb15-9" tabindex="-1"></a><span class="ot">      auxStats ::</span> (<span class="dt">FsVal</span> a, <span class="dt">Mock</span>) <span class="ot">-&gt;</span> (<span class="dt">FsVal</span> a, <span class="dt">FsState</span>)</span>
<span id="cb15-10"><a href="https://well-typed.com/blog/rss2.xml#cb15-10" tabindex="-1"></a>      auxStats (result, state') <span class="ot">=</span></span>
<span id="cb15-11"><a href="https://well-typed.com/blog/rss2.xml#cb15-11" tabindex="-1"></a>          (result, <span class="dt">FsState</span> state' <span class="op">$</span> updateStats action result stats)</span>
<span id="cb15-12"><a href="https://well-typed.com/blog/rss2.xml#cb15-12" tabindex="-1"></a></span>
<span id="cb15-13"><a href="https://well-typed.com/blog/rss2.xml#cb15-13" tabindex="-1"></a>  <span class="co">-- .. other members of InLockstep elided</span></span></code></pre></div>
<p>All we do here is call the interpreter we just wrote, and then additionally update the statistics (discussed below).</p>
<h3 id="variables">Variables</h3>
<p>As discussed above, variables allow us to refer back to the results of previously executed commands. We have been glossing over an important detail, however. Recall the types of <code>Open</code> and <code>Close</code> (with the <code>FsAct</code> type synonym expanded):</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="https://well-typed.com/blog/rss2.xml#cb16-1" tabindex="-1"></a><span class="dt">Open</span><span class="ot">  ::</span> <span class="dt">File</span>            <span class="ot">-&gt;</span> <span class="dt">Action</span> <span class="op">..</span> (<span class="dt">Either</span> <span class="dt">Err</span> (<span class="dt">IO</span><span class="op">.</span><span class="dt">Handle</span>, <span class="dt">File</span>))</span>
<span id="cb16-2"><a href="https://well-typed.com/blog/rss2.xml#cb16-2" tabindex="-1"></a><span class="dt">Close</span><span class="ot"> ::</span> <span class="dt">FsVar</span> <span class="dt">IO</span><span class="op">.</span><span class="dt">Handle</span> <span class="ot">-&gt;</span> <span class="dt">Action</span> <span class="op">..</span> (<span class="dt">Either</span> <span class="dt">Err</span> (<span class="dt">IO</span><span class="op">.</span><span class="dt">Handle</span>, ()))</span></code></pre></div>
<p>The result of opening a file is either an error, or else a pair of a handle and a filepath. In <code>quickcheck-dynamic</code>, we get a <em>single</em> variable for the execution of each command, and this is (therefore) true also for the lockstep infrastructure.<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn3" id="fnref3"><sup>3</sup></a> So, after opening a file, we have a variable of type <code>Either Err (IO.Handle, File)</code>, but we don’t want a variable of that type as the argument to <code>Close</code>: instead, we want a variable to a <code>IO.Handle</code>. Most importantly, we want to rule out the possibility of trying to a close a file that we never managed to open in the first place; such a test would be nonsensical.<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn4" id="fnref4"><sup>4</sup></a></p>
<p>One of the most important features that the lockstep infrastructure adds on top of core <code>quickcheck-dynamic</code> is a concept of variables with a <code>Functor</code>-esque structure: they support an operation that allows us to change the type of that variable.<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn5" id="fnref5"><sup>5</sup></a> The key datatype is a “generalized variable” <code>GVar</code>; the intuition is that a <code>GVar</code> of type <code>y</code> is actually a <code>Var</code> of some other type <code>x</code>, bundled with a function<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn6" id="fnref6"><sup>6</sup></a> from <code>x -&gt; Maybe y</code>:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="https://well-typed.com/blog/rss2.xml#cb17-1" tabindex="-1"></a><span class="kw">data</span> <span class="dt">GVar</span><span class="ot"> ::</span> <span class="dt">Type</span> <span class="ot">-&gt;</span> <span class="dt">Type</span> <span class="kw">where</span> <span class="co">-- not the real definition</span></span>
<span id="cb17-2"><a href="https://well-typed.com/blog/rss2.xml#cb17-2" tabindex="-1"></a>  <span class="dt">GVar</span><span class="ot"> ::</span> <span class="dt">Typeable</span> x <span class="ot">=&gt;</span> <span class="dt">Var</span> x <span class="ot">-&gt;</span> (x <span class="ot">-&gt;</span> <span class="dt">Maybe</span> y) <span class="ot">-&gt;</span> <span class="dt">GVar</span> y</span></code></pre></div>
<p>For technical reasons,<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn7" id="fnref7"><sup>7</sup></a> this doesn’t quite work. Instead of that function <code>x -&gt; Maybe y</code>, we instead have essentially a small DSL for defining such functions:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="https://well-typed.com/blog/rss2.xml#cb18-1" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Op</span> a b <span class="kw">where</span></span>
<span id="cb18-2"><a href="https://well-typed.com/blog/rss2.xml#cb18-2" tabindex="-1"></a>  <span class="dt">OpId</span><span class="ot">    ::</span> <span class="dt">Op</span> a a</span>
<span id="cb18-3"><a href="https://well-typed.com/blog/rss2.xml#cb18-3" tabindex="-1"></a>  <span class="dt">OpFst</span><span class="ot">   ::</span> <span class="dt">Op</span> (a, b) a</span>
<span id="cb18-4"><a href="https://well-typed.com/blog/rss2.xml#cb18-4" tabindex="-1"></a>  <span class="dt">OpSnd</span><span class="ot">   ::</span> <span class="dt">Op</span> (b, a) a</span>
<span id="cb18-5"><a href="https://well-typed.com/blog/rss2.xml#cb18-5" tabindex="-1"></a>  <span class="dt">OpLeft</span><span class="ot">  ::</span> <span class="dt">Op</span> (<span class="dt">Either</span> a b) a</span>
<span id="cb18-6"><a href="https://well-typed.com/blog/rss2.xml#cb18-6" tabindex="-1"></a>  <span class="dt">OpRight</span><span class="ot"> ::</span> <span class="dt">Op</span> (<span class="dt">Either</span> b a) a</span>
<span id="cb18-7"><a href="https://well-typed.com/blog/rss2.xml#cb18-7" tabindex="-1"></a>  <span class="dt">OpComp</span><span class="ot">  ::</span> <span class="dt">Op</span> b c <span class="ot">-&gt;</span> <span class="dt">Op</span> a b <span class="ot">-&gt;</span> <span class="dt">Op</span> a c</span></code></pre></div>
<p>This DSL can be used to extract the left or right coordinate of a pair, as well as to pattern match on an <code>Either</code>. This will suffice for many test cases but not all, so <code>GVar</code> generalizes over the exact choice of DSL:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb19-1"><a href="https://well-typed.com/blog/rss2.xml#cb19-1" tabindex="-1"></a><span class="kw">data</span> <span class="dt">GVar</span> op f <span class="kw">where</span></span>
<span id="cb19-2"><a href="https://well-typed.com/blog/rss2.xml#cb19-2" tabindex="-1"></a>  <span class="dt">GVar</span><span class="ot"> ::</span> <span class="dt">Typeable</span> x <span class="ot">=&gt;</span> <span class="dt">Var</span> x <span class="ot">-&gt;</span> op x y <span class="ot">-&gt;</span> <span class="dt">GVar</span> op y</span></code></pre></div>
<p><code>InLockstep</code> has an associated type family <code>ModelOp</code> which records the choice of DSL. It defaults to <code>Op</code>, which is just fine for our running example. We <em>do</em> have to specify how to execute this DSL against model values by giving an instance of this class:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb20-1"><a href="https://well-typed.com/blog/rss2.xml#cb20-1" tabindex="-1"></a><span class="kw">class</span> <span class="dt">Operation</span> op <span class="ot">=&gt;</span> <span class="dt">InterpretOp</span> op f <span class="kw">where</span></span>
<span id="cb20-2"><a href="https://well-typed.com/blog/rss2.xml#cb20-2" tabindex="-1"></a><span class="ot">  intOp ::</span> op a b <span class="ot">-&gt;</span> f a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> (f b)</span></code></pre></div>
<p>The instance for our <code>FsVal</code> is straightforward:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb21-1"><a href="https://well-typed.com/blog/rss2.xml#cb21-1" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">InterpretOp</span> <span class="dt">Op</span> (<span class="dt">ModelValue</span> <span class="dt">FsState</span>) <span class="kw">where</span></span>
<span id="cb21-2"><a href="https://well-typed.com/blog/rss2.xml#cb21-2" tabindex="-1"></a>  intOp <span class="dt">OpId</span>         <span class="ot">=</span> <span class="dt">Just</span></span>
<span id="cb21-3"><a href="https://well-typed.com/blog/rss2.xml#cb21-3" tabindex="-1"></a>  intOp <span class="dt">OpFst</span>        <span class="ot">=</span> \<span class="kw">case</span> <span class="dt">MPair</span>   x <span class="ot">-&gt;</span> <span class="dt">Just</span> (<span class="fu">fst</span> x)</span>
<span id="cb21-4"><a href="https://well-typed.com/blog/rss2.xml#cb21-4" tabindex="-1"></a>  intOp <span class="dt">OpSnd</span>        <span class="ot">=</span> \<span class="kw">case</span> <span class="dt">MPair</span>   x <span class="ot">-&gt;</span> <span class="dt">Just</span> (<span class="fu">snd</span> x)</span>
<span id="cb21-5"><a href="https://well-typed.com/blog/rss2.xml#cb21-5" tabindex="-1"></a>  intOp <span class="dt">OpLeft</span>       <span class="ot">=</span> \<span class="kw">case</span> <span class="dt">MEither</span> x <span class="ot">-&gt;</span> <span class="fu">either</span> <span class="dt">Just</span> (<span class="fu">const</span> <span class="dt">Nothing</span>) x</span>
<span id="cb21-6"><a href="https://well-typed.com/blog/rss2.xml#cb21-6" tabindex="-1"></a>  intOp <span class="dt">OpRight</span>      <span class="ot">=</span> \<span class="kw">case</span> <span class="dt">MEither</span> x <span class="ot">-&gt;</span> <span class="fu">either</span> (<span class="fu">const</span> <span class="dt">Nothing</span>) <span class="dt">Just</span> x</span>
<span id="cb21-7"><a href="https://well-typed.com/blog/rss2.xml#cb21-7" tabindex="-1"></a>  intOp (<span class="dt">OpComp</span> g f) <span class="ot">=</span> intOp g <span class="op">&lt;=&lt;</span> intOp f</span></code></pre></div>
<p>The other variable-related thing we need to do in our <code>InLockstep</code> instead is that we need to define which variables are used in all commands:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb22-1"><a href="https://well-typed.com/blog/rss2.xml#cb22-1" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">InLockstep</span> <span class="dt">FsState</span> <span class="kw">where</span></span>
<span id="cb22-2"><a href="https://well-typed.com/blog/rss2.xml#cb22-2" tabindex="-1"></a><span class="ot">  usedVars ::</span> <span class="dt">LockstepAction</span> <span class="dt">FsState</span> a <span class="ot">-&gt;</span> [<span class="dt">AnyGVar</span> (<span class="dt">ModelOp</span> <span class="dt">FsState</span>)]</span>
<span id="cb22-3"><a href="https://well-typed.com/blog/rss2.xml#cb22-3" tabindex="-1"></a>  usedVars <span class="ot">=</span> \<span class="kw">case</span></span>
<span id="cb22-4"><a href="https://well-typed.com/blog/rss2.xml#cb22-4" tabindex="-1"></a>      <span class="dt">MkDir</span>{}        <span class="ot">-&gt;</span> []</span>
<span id="cb22-5"><a href="https://well-typed.com/blog/rss2.xml#cb22-5" tabindex="-1"></a>      <span class="dt">Open</span>{}         <span class="ot">-&gt;</span> []</span>
<span id="cb22-6"><a href="https://well-typed.com/blog/rss2.xml#cb22-6" tabindex="-1"></a>      <span class="dt">Write</span> h _      <span class="ot">-&gt;</span> [<span class="dt">SomeGVar</span> h]</span>
<span id="cb22-7"><a href="https://well-typed.com/blog/rss2.xml#cb22-7" tabindex="-1"></a>      <span class="dt">Close</span> h        <span class="ot">-&gt;</span> [<span class="dt">SomeGVar</span> h]</span>
<span id="cb22-8"><a href="https://well-typed.com/blog/rss2.xml#cb22-8" tabindex="-1"></a>      <span class="dt">Read</span> (<span class="dt">Left</span> h)  <span class="ot">-&gt;</span> [<span class="dt">SomeGVar</span> h]</span>
<span id="cb22-9"><a href="https://well-typed.com/blog/rss2.xml#cb22-9" tabindex="-1"></a>      <span class="dt">Read</span> (<span class="dt">Right</span> _) <span class="ot">-&gt;</span> []</span>
<span id="cb22-10"><a href="https://well-typed.com/blog/rss2.xml#cb22-10" tabindex="-1"></a></span>
<span id="cb22-11"><a href="https://well-typed.com/blog/rss2.xml#cb22-11" tabindex="-1"></a>  <span class="co">-- .. other members of InLockstep elided</span></span></code></pre></div>
<p><code>SomeGVar</code> here is just a way to hide the type of the variable, so that we can have a list of variables of different types:</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb23-1"><a href="https://well-typed.com/blog/rss2.xml#cb23-1" tabindex="-1"></a><span class="kw">data</span> <span class="dt">AnyGVar</span> op <span class="kw">where</span></span>
<span id="cb23-2"><a href="https://well-typed.com/blog/rss2.xml#cb23-2" tabindex="-1"></a>  <span class="dt">SomeGVar</span><span class="ot"> ::</span> <span class="dt">GVar</span> op y <span class="ot">-&gt;</span> <span class="dt">AnyGVar</span> op</span></code></pre></div>
<p>Again, the definition of <code>usedVars</code> involves some boilerplate, but not difficult to write. It <em>is</em> important to get this function right; however. When a counter-example is found, <code>quickcheck-dynamic</code> will try to <em>shrink</em> the list of actions, to throw out any irrelevant detail. But if, say, a call to <code>Open</code> is removed, then any calls to <code>Close</code> which referenced that open should <em>also</em> be removed. This is done through preconditions, and the default precondition from <code>InLockstep</code> ensures that this will happen by staying that all <code>usedVars</code> must be defined. However, if <code>usedVars</code> misses some variables, the test will fail during shrinking with a confusing error message about undefined variables.</p>
<h3 id="generating-and-shrinking-actions">Generating and shrinking actions</h3>
<p>The type of the method for generating actions is</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb24-1"><a href="https://well-typed.com/blog/rss2.xml#cb24-1" tabindex="-1"></a><span class="kw">type</span> <span class="dt">ModelFindVariables</span> state <span class="ot">=</span> <span class="kw">forall</span> a<span class="op">.</span></span>
<span id="cb24-2"><a href="https://well-typed.com/blog/rss2.xml#cb24-2" tabindex="-1"></a>          <span class="dt">Typeable</span> a</span>
<span id="cb24-3"><a href="https://well-typed.com/blog/rss2.xml#cb24-3" tabindex="-1"></a>       <span class="ot">=&gt;</span> <span class="dt">Proxy</span> a <span class="ot">-&gt;</span> [<span class="dt">GVar</span> (<span class="dt">ModelOp</span> state) a]</span>
<span id="cb24-4"><a href="https://well-typed.com/blog/rss2.xml#cb24-4" tabindex="-1"></a></span>
<span id="cb24-5"><a href="https://well-typed.com/blog/rss2.xml#cb24-5" tabindex="-1"></a><span class="kw">class</span> (<span class="op">..</span>) <span class="ot">=&gt;</span> <span class="dt">InLockstep</span> state <span class="kw">where</span></span>
<span id="cb24-6"><a href="https://well-typed.com/blog/rss2.xml#cb24-6" tabindex="-1"></a><span class="ot">  arbitraryWithVars ::</span></span>
<span id="cb24-7"><a href="https://well-typed.com/blog/rss2.xml#cb24-7" tabindex="-1"></a>       <span class="dt">ModelFindVariables</span> state</span>
<span id="cb24-8"><a href="https://well-typed.com/blog/rss2.xml#cb24-8" tabindex="-1"></a>    <span class="ot">-&gt;</span> state</span>
<span id="cb24-9"><a href="https://well-typed.com/blog/rss2.xml#cb24-9" tabindex="-1"></a>    <span class="ot">-&gt;</span> <span class="dt">Gen</span> (<span class="dt">Any</span> (<span class="dt">LockstepAction</span> state))</span>
<span id="cb24-10"><a href="https://well-typed.com/blog/rss2.xml#cb24-10" tabindex="-1"></a></span>
<span id="cb24-11"><a href="https://well-typed.com/blog/rss2.xml#cb24-11" tabindex="-1"></a>  <span class="co">-- .. other members of InLockstep elided</span></span></code></pre></div>
<p>Thus, we need to generate an arbitrary action given the current state of the model and a way to find all available variables of a specified type. For example, if we previously executed an open command, then<code>ModelFindVariables</code> will tell us that we have a variable of type <code>Either Err (IO.Handle, File)</code>. If we have a such a variable, we can turn it into a variable of the type we need using:</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb25-1"><a href="https://well-typed.com/blog/rss2.xml#cb25-1" tabindex="-1"></a><span class="ot">handle ::</span> <span class="dt">GVar</span> <span class="dt">Op</span> (<span class="dt">Either</span> <span class="dt">Err</span> (<span class="dt">IO</span><span class="op">.</span><span class="dt">Handle</span>, <span class="dt">File</span>)) <span class="ot">-&gt;</span> <span class="dt">GVar</span> <span class="dt">Op</span> <span class="dt">IO</span><span class="op">.</span><span class="dt">Handle</span></span>
<span id="cb25-2"><a href="https://well-typed.com/blog/rss2.xml#cb25-2" tabindex="-1"></a>handle <span class="ot">=</span> mapGVar (\op <span class="ot">-&gt;</span> <span class="dt">OpFst</span> <span class="ot">`OpComp`</span> <span class="dt">OpRight</span> <span class="ot">`OpComp`</span> op)</span></code></pre></div>
<p>The situation for shrinking is very similar:</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb26-1"><a href="https://well-typed.com/blog/rss2.xml#cb26-1" tabindex="-1"></a><span class="kw">class</span> (<span class="op">..</span>) <span class="ot">=&gt;</span> <span class="dt">InLockstep</span> state <span class="kw">where</span></span>
<span id="cb26-2"><a href="https://well-typed.com/blog/rss2.xml#cb26-2" tabindex="-1"></a><span class="ot">  shrinkWithVars ::</span></span>
<span id="cb26-3"><a href="https://well-typed.com/blog/rss2.xml#cb26-3" tabindex="-1"></a>       <span class="dt">ModelFindVariables</span> state</span>
<span id="cb26-4"><a href="https://well-typed.com/blog/rss2.xml#cb26-4" tabindex="-1"></a>    <span class="ot">-&gt;</span> state</span>
<span id="cb26-5"><a href="https://well-typed.com/blog/rss2.xml#cb26-5" tabindex="-1"></a>    <span class="ot">-&gt;</span> <span class="dt">LockstepAction</span> state a</span>
<span id="cb26-6"><a href="https://well-typed.com/blog/rss2.xml#cb26-6" tabindex="-1"></a>    <span class="ot">-&gt;</span> [<span class="dt">Any</span> (<span class="dt">LockstepAction</span> state)]</span>
<span id="cb26-7"><a href="https://well-typed.com/blog/rss2.xml#cb26-7" tabindex="-1"></a></span>
<span id="cb26-8"><a href="https://well-typed.com/blog/rss2.xml#cb26-8" tabindex="-1"></a>  <span class="co">-- .. other members of InLockstep elided</span></span></code></pre></div>
<p>We will not show the full definition of the generator and the shrinker here. Apart from generating variables, they follow precisely the same lines as the <a href="https://well-typed.com/blog/2019/01/qsm-in-depth/">we showed previously with <code>quickcheck-state-machine</code></a>. You can find the full definition <a href="https://github.com/well-typed/quickcheck-lockstep/blob/main/test/Test/MockFS.hs">in the repository</a>.</p>
<h3 id="labelling">Labelling</h3>
<p>When we are testing with randomly generated test data, it is important that we understand what kind of data we are testing with. For example, we might want to verify that certain edge cases are being tested. Labelling is one way to do this: we label specific kind of test inputs, and then check that we see tests being executed with those labels.</p>
<p>For our running the example, the labels, or <em>tags</em>, that we <a href="https://well-typed.com/blog/2019/01/qsm-in-depth/">previously considered</a> were</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb27-1"><a href="https://well-typed.com/blog/rss2.xml#cb27-1" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Tag</span> <span class="ot">=</span> <span class="dt">OpenTwo</span> <span class="op">|</span> <span class="dt">SuccessfulRead</span></span></code></pre></div>
<p>The idea was that a test would be labelled with <code>OpenTwo</code> if it opens at least two different files, and with <code>SuccessfulRead</code> if it manages to execute at least one read successfully.</p>
<p>The abstraction that <code>InLockstep</code> provides for tagging is</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb28-1"><a href="https://well-typed.com/blog/rss2.xml#cb28-1" tabindex="-1"></a><span class="kw">class</span> (<span class="op">..</span>) <span class="ot">=&gt;</span> <span class="dt">InLockstep</span> state <span class="kw">where</span></span>
<span id="cb28-2"><a href="https://well-typed.com/blog/rss2.xml#cb28-2" tabindex="-1"></a><span class="ot">  tagStep ::</span></span>
<span id="cb28-3"><a href="https://well-typed.com/blog/rss2.xml#cb28-3" tabindex="-1"></a>       <span class="dt">Show</span> a</span>
<span id="cb28-4"><a href="https://well-typed.com/blog/rss2.xml#cb28-4" tabindex="-1"></a>    <span class="ot">=&gt;</span> (state, state)</span>
<span id="cb28-5"><a href="https://well-typed.com/blog/rss2.xml#cb28-5" tabindex="-1"></a>    <span class="ot">-&gt;</span> <span class="dt">LockstepAction</span> state a</span>
<span id="cb28-6"><a href="https://well-typed.com/blog/rss2.xml#cb28-6" tabindex="-1"></a>    <span class="ot">-&gt;</span> <span class="dt">ModelValue</span> state a</span>
<span id="cb28-7"><a href="https://well-typed.com/blog/rss2.xml#cb28-7" tabindex="-1"></a>    <span class="ot">-&gt;</span> [<span class="dt">String</span>]</span>
<span id="cb28-8"><a href="https://well-typed.com/blog/rss2.xml#cb28-8" tabindex="-1"></a></span>
<span id="cb28-9"><a href="https://well-typed.com/blog/rss2.xml#cb28-9" tabindex="-1"></a>  <span class="co">-- .. other members of InLockstep elided</span></span></code></pre></div>
<p>This enables us to take an action given the before and after state, the action, and its result; we do not see any previously executed actions.<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn8" id="fnref8"><sup>8</sup></a> This means that for our <code>OpenTwo</code> tag we need to record in the <code>state</code> how many different files have been opened. This is the purpose of the <code>Stats</code>:</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb29-1"><a href="https://well-typed.com/blog/rss2.xml#cb29-1" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Stats</span> <span class="ot">=</span> <span class="dt">Set</span> <span class="dt">File</span></span>
<span id="cb29-2"><a href="https://well-typed.com/blog/rss2.xml#cb29-2" tabindex="-1"></a></span>
<span id="cb29-3"><a href="https://well-typed.com/blog/rss2.xml#cb29-3" tabindex="-1"></a><span class="ot">initStats ::</span> <span class="dt">Stats</span></span>
<span id="cb29-4"><a href="https://well-typed.com/blog/rss2.xml#cb29-4" tabindex="-1"></a>initStats <span class="ot">=</span> Set.empty</span></code></pre></div>
<p>Updating the statistics is easy (recall that we used this function in <code>modelNextState</code> above). We just look at the action and its result: if the action is an <code>Open</code>, and the result is a <code>Right</code> value (indicating the <code>Open</code> was success), we insert the filename into the set:</p>
<div class="sourceCode" id="cb30"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb30-1"><a href="https://well-typed.com/blog/rss2.xml#cb30-1" tabindex="-1"></a><span class="ot">updateStats ::</span> <span class="dt">LockstepAction</span> <span class="dt">FsState</span> a <span class="ot">-&gt;</span> <span class="dt">FsVal</span> a <span class="ot">-&gt;</span> <span class="dt">Stats</span> <span class="ot">-&gt;</span> <span class="dt">Stats</span></span>
<span id="cb30-2"><a href="https://well-typed.com/blog/rss2.xml#cb30-2" tabindex="-1"></a>updateStats action result  <span class="ot">=</span></span>
<span id="cb30-3"><a href="https://well-typed.com/blog/rss2.xml#cb30-3" tabindex="-1"></a>   <span class="kw">case</span> (action, result) <span class="kw">of</span></span>
<span id="cb30-4"><a href="https://well-typed.com/blog/rss2.xml#cb30-4" tabindex="-1"></a>     (<span class="dt">Open</span> f, <span class="dt">MEither</span> (<span class="dt">Right</span> _)) <span class="ot">-&gt;</span> Set.insert f</span>
<span id="cb30-5"><a href="https://well-typed.com/blog/rss2.xml#cb30-5" tabindex="-1"></a>     _otherwise                  <span class="ot">-&gt;</span> <span class="fu">id</span></span></code></pre></div>
<p>Tagging is now equally easy. If it’s a <code>Read</code>, we check to see if the result was successful, and if so we add the <code>SuccessfulRead</code> tag. If it’s an <code>Open</code>, we look at the statistics to see if we have opened at least two files:</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb31-1"><a href="https://well-typed.com/blog/rss2.xml#cb31-1" tabindex="-1"></a><span class="ot">tagFsAction ::</span> <span class="dt">Stats</span> <span class="ot">-&gt;</span> <span class="dt">LockstepAction</span> <span class="dt">FsState</span> a <span class="ot">-&gt;</span> <span class="dt">FsVal</span> a <span class="ot">-&gt;</span> [<span class="dt">Tag</span>]</span>
<span id="cb31-2"><a href="https://well-typed.com/blog/rss2.xml#cb31-2" tabindex="-1"></a>tagFsAction openedFiles <span class="ot">=</span> \<span class="kw">case</span></span>
<span id="cb31-3"><a href="https://well-typed.com/blog/rss2.xml#cb31-3" tabindex="-1"></a>    <span class="dt">Read</span> _ <span class="ot">-&gt;</span> \v <span class="ot">-&gt;</span> [<span class="dt">SuccessfulRead</span> <span class="op">|</span> <span class="dt">MEither</span> (<span class="dt">Right</span> _) <span class="ot">&lt;-</span> [v]]</span>
<span id="cb31-4"><a href="https://well-typed.com/blog/rss2.xml#cb31-4" tabindex="-1"></a>    <span class="dt">Open</span> _ <span class="ot">-&gt;</span> \_ <span class="ot">-&gt;</span> [<span class="dt">OpenTwo</span>        <span class="op">|</span> Set.size openedFiles <span class="op">&gt;=</span> <span class="dv">2</span>]</span>
<span id="cb31-5"><a href="https://well-typed.com/blog/rss2.xml#cb31-5" tabindex="-1"></a>    _      <span class="ot">-&gt;</span> \_ <span class="ot">-&gt;</span> []</span></code></pre></div>
<h3 id="running-the-tests">Running the tests</h3>
<p>Before we can run any <code>quickcheck-dynamic</code> tests, we have to give an instance of the <code>RunModel</code> class. This class is somewhat confusingly named: it’s main method <code>perform</code> does not explain how to run the model, but rather how to run the system under test. Name aside, instances of <code>RunModel</code> are simple when using <code>quickcheck-lockstep</code>:</p>
<div class="sourceCode" id="cb32"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb32-1"><a href="https://well-typed.com/blog/rss2.xml#cb32-1" tabindex="-1"></a><span class="kw">type</span> <span class="dt">RealMonad</span> <span class="ot">=</span> <span class="dt">ReaderT</span> <span class="dt">FilePath</span> <span class="dt">IO</span></span>
<span id="cb32-2"><a href="https://well-typed.com/blog/rss2.xml#cb32-2" tabindex="-1"></a></span>
<span id="cb32-3"><a href="https://well-typed.com/blog/rss2.xml#cb32-3" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">RunModel</span> (<span class="dt">Lockstep</span> <span class="dt">FsState</span>) <span class="dt">RealMonad</span> <span class="kw">where</span></span>
<span id="cb32-4"><a href="https://well-typed.com/blog/rss2.xml#cb32-4" tabindex="-1"></a>  perform       <span class="ot">=</span> \_st <span class="ot">-&gt;</span> runIO</span>
<span id="cb32-5"><a href="https://well-typed.com/blog/rss2.xml#cb32-5" tabindex="-1"></a>  postcondition <span class="ot">=</span> Lockstep.postcondition</span>
<span id="cb32-6"><a href="https://well-typed.com/blog/rss2.xml#cb32-6" tabindex="-1"></a>  monitoring    <span class="ot">=</span> Lockstep.monitoring (<span class="dt">Proxy</span> <span class="op">@</span><span class="dt">RealMonad</span>)</span></code></pre></div>
<p>We have to choose a monad to run our system under test in; we choose <code>ReaderT FilePath IO</code>, where the <code>FilePath</code> is the root directory of the file system that we are simulating. The definitions of <code>postcondition</code> and <code>monitoring</code> come straight from <code>quickcheck-lockstep</code>; we just have to provide an interpreter for actions for the system under test:</p>
<div class="sourceCode" id="cb33"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb33-1"><a href="https://well-typed.com/blog/rss2.xml#cb33-1" tabindex="-1"></a><span class="ot">runIO ::</span> <span class="dt">LockstepAction</span> <span class="dt">FsState</span> a <span class="ot">-&gt;</span> <span class="dt">LookUp</span> <span class="dt">RealMonad</span> <span class="ot">-&gt;</span> <span class="dt">RealMonad</span> (<span class="dt">Realized</span> <span class="dt">RealMonad</span> a)</span></code></pre></div>
<p>Writing this interpreter is straight-forward and we will not show it here; the only minor wrinkle is that we need to turn the lookup function for <code>Var</code> that <code>quickcheck-dynamic</code> gives us into a lookup function for <code>GVar</code>; <code>quickcheck-lockstep</code> provides this functionality:<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn9" id="fnref9"><sup>9</sup></a></p>
<div class="sourceCode" id="cb34"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb34-1"><a href="https://well-typed.com/blog/rss2.xml#cb34-1" tabindex="-1"></a><span class="ot">lookUpGVar ::</span> (<span class="op">..</span>) <span class="ot">=&gt;</span> <span class="dt">Proxy</span> m <span class="ot">-&gt;</span> <span class="dt">LookUp</span> m <span class="ot">-&gt;</span> <span class="dt">GVar</span> op a <span class="ot">-&gt;</span> <span class="dt">Realized</span> m a</span></code></pre></div>
<p>The final thing we have to do is provide an instance of <code>RunLockstep</code>; this is a subclass of <code>InLockstep</code> with a single method <code>observeReal</code>; it is a separate class, because <code>RunLockstep</code> itself is not aware of the monad used to run the system under test:</p>
<div class="sourceCode" id="cb35"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb35-1"><a href="https://well-typed.com/blog/rss2.xml#cb35-1" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">RunLockstep</span> <span class="dt">FsState</span> <span class="dt">RealMonad</span> <span class="kw">where</span></span>
<span id="cb35-2"><a href="https://well-typed.com/blog/rss2.xml#cb35-2" tabindex="-1"></a>  observeReal _proxy <span class="ot">=</span> \<span class="kw">case</span></span>
<span id="cb35-3"><a href="https://well-typed.com/blog/rss2.xml#cb35-3" tabindex="-1"></a>      <span class="dt">MkDir</span>{} <span class="ot">-&gt;</span> <span class="dt">OEither</span> <span class="op">.</span> bimap <span class="dt">OId</span> <span class="dt">OId</span></span>
<span id="cb35-4"><a href="https://well-typed.com/blog/rss2.xml#cb35-4" tabindex="-1"></a>      <span class="dt">Open</span>{}  <span class="ot">-&gt;</span> <span class="dt">OEither</span> <span class="op">.</span> bimap <span class="dt">OId</span> (<span class="dt">OPair</span> <span class="op">.</span> bimap (<span class="fu">const</span> <span class="dt">OHandle</span>) <span class="dt">OId</span>)</span>
<span id="cb35-5"><a href="https://well-typed.com/blog/rss2.xml#cb35-5" tabindex="-1"></a>      <span class="dt">Write</span>{} <span class="ot">-&gt;</span> <span class="dt">OEither</span> <span class="op">.</span> bimap <span class="dt">OId</span> <span class="dt">OId</span></span>
<span id="cb35-6"><a href="https://well-typed.com/blog/rss2.xml#cb35-6" tabindex="-1"></a>      <span class="dt">Close</span>{} <span class="ot">-&gt;</span> <span class="dt">OEither</span> <span class="op">.</span> bimap <span class="dt">OId</span> <span class="dt">OId</span></span>
<span id="cb35-7"><a href="https://well-typed.com/blog/rss2.xml#cb35-7" tabindex="-1"></a>      <span class="dt">Read</span>{}  <span class="ot">-&gt;</span> <span class="dt">OEither</span> <span class="op">.</span> bimap <span class="dt">OId</span> <span class="dt">OId</span></span></code></pre></div>
<p>To actually run our tests, we can make use of this function provided by <code>quickcheck-lockstep</code>:</p>
<div class="sourceCode" id="cb36"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb36-1"><a href="https://well-typed.com/blog/rss2.xml#cb36-1" tabindex="-1"></a><span class="ot">runActionsBracket ::</span></span>
<span id="cb36-2"><a href="https://well-typed.com/blog/rss2.xml#cb36-2" tabindex="-1"></a>     <span class="dt">RunLockstep</span> state (<span class="dt">ReaderT</span> st <span class="dt">IO</span>)</span>
<span id="cb36-3"><a href="https://well-typed.com/blog/rss2.xml#cb36-3" tabindex="-1"></a>  <span class="ot">=&gt;</span> <span class="dt">Proxy</span> state</span>
<span id="cb36-4"><a href="https://well-typed.com/blog/rss2.xml#cb36-4" tabindex="-1"></a>  <span class="ot">-&gt;</span> <span class="dt">IO</span> st         <span class="co">-- ^ Initialisation</span></span>
<span id="cb36-5"><a href="https://well-typed.com/blog/rss2.xml#cb36-5" tabindex="-1"></a>  <span class="ot">-&gt;</span> (st <span class="ot">-&gt;</span> <span class="dt">IO</span> ()) <span class="co">-- ^ Cleanup</span></span>
<span id="cb36-6"><a href="https://well-typed.com/blog/rss2.xml#cb36-6" tabindex="-1"></a>  <span class="ot">-&gt;</span> <span class="dt">Actions</span> (<span class="dt">Lockstep</span> state) <span class="ot">-&gt;</span> <span class="dt">Property</span></span></code></pre></div>
<p>For example, if we have a bug in our mock system such that get a “does not exist” error message instead of an “already exists” error when we create a directory that already exists, the test output might look something like this:</p>
<pre><code>*** Failed! Assertion failed (after 7 tests and 4 shrinks):
Actions
 [Var 4 := MkDir (Dir [&quot;x&quot;]),
  Var 6 := MkDir (Dir [&quot;x&quot;])]
State: FsState {.. state1 elided ..}
State: FsState {.. state2 elided ..}
System under test returned: OEither (Left (OId AlreadyExists))
but model returned:         OEither (Left (OId DoesNotExist))</code></pre>
<p>(where we have elided some output) We see the state of the system after every action, as well as the final failed postcondition.</p>
<h3 id="generating-labelled-examples">Generating labelled examples</h3>
<p>For generating labelled examples, <code>quickcheck-lockstep</code> provides</p>
<div class="sourceCode" id="cb38"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb38-1"><a href="https://well-typed.com/blog/rss2.xml#cb38-1" tabindex="-1"></a><span class="ot">tagActions ::</span>  <span class="dt">InLockstep</span> state <span class="ot">=&gt;</span> <span class="dt">Proxy</span> state <span class="ot">-&gt;</span> <span class="dt">Actions</span> (<span class="dt">Lockstep</span> state) <span class="ot">-&gt;</span> <span class="dt">Property</span></span></code></pre></div>
<p>(This functionality is not provided by <code>quickcheck-dynamic</code>.<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn10" id="fnref10"><sup>10</sup></a>) We can use this with the <a href="https://hackage.haskell.org/package/QuickCheck/docs/Test-QuickCheck.html#v:labelledExamples">standard QuickCheck <code>labelledExamples</code> function</a>. As stated, this is very useful both for testing labelling, but also to test the shrinker, because QuickCheck will give us <em>minimal</em> labelled examples. For example, we might get the following minimal example for “successful read”</p>
<div class="sourceCode" id="cb39"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb39-1"><a href="https://well-typed.com/blog/rss2.xml#cb39-1" tabindex="-1"></a><span class="op">***</span> <span class="dt">Found</span> example <span class="kw">of</span> <span class="dt">Tags</span><span class="op">:</span> [<span class="st">&quot;SuccessfulRead&quot;</span>]</span>
<span id="cb39-2"><a href="https://well-typed.com/blog/rss2.xml#cb39-2" tabindex="-1"></a><span class="dt">Actions</span></span>
<span id="cb39-3"><a href="https://well-typed.com/blog/rss2.xml#cb39-3" tabindex="-1"></a> [<span class="dt">Var</span> <span class="dv">8</span> <span class="op">:=</span> <span class="dt">Open</span> (<span class="dt">File</span> {dir <span class="ot">=</span> <span class="dt">Dir</span> [], name <span class="ot">=</span> <span class="st">&quot;t0&quot;</span>}),</span>
<span id="cb39-4"><a href="https://well-typed.com/blog/rss2.xml#cb39-4" tabindex="-1"></a>  <span class="dt">Var</span> <span class="dv">9</span> <span class="op">:=</span> <span class="dt">Close</span> (<span class="dt">GVar</span> (<span class="dt">Var</span> <span class="dv">8</span>) (<span class="fu">fst</span> <span class="op">.</span> fromRight <span class="op">.</span> <span class="fu">id</span>)),</span>
<span id="cb39-5"><a href="https://well-typed.com/blog/rss2.xml#cb39-5" tabindex="-1"></a>  <span class="dt">Var</span> <span class="dv">51</span> <span class="op">:=</span> <span class="dt">Read</span> (<span class="dt">Left</span> (<span class="dt">GVar</span> (<span class="dt">Var</span> <span class="dv">8</span>) (<span class="fu">snd</span> <span class="op">.</span> fromRight <span class="op">.</span> <span class="fu">id</span>)))]</span></code></pre></div>
<p>The syntax might be a little difficult to read here, but we (1) open a file, then (2) close the file we opened in step (1), and finally (3) read the file that we opened in step (1).</p>
<h2 id="part-2-implementation">Part 2: Implementation</h2>
<p>Now that we have seen all the ingredients, let’s see how the lockstep abstraction is actually implemented. We will first describe which state we track, and then discuss all of the default implementations for the methods of <code>StateModel</code>; this will serve both as an explanation of the implementation, as well as an example of how to define <code>StateModel</code> instances. Fortunately, we have already seen most of the pieces; it’s just a matter of putting them together now.</p>
<h3 id="state">State</h3>
<p>During test execution, <code>quickcheck-dynamic</code> internally maintains a mapping from variables to the values as returned by the system under test:</p>
<div class="sourceCode" id="cb40"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb40-1"><a href="https://well-typed.com/blog/rss2.xml#cb40-1" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Env</span> m <span class="ot">=</span> [<span class="dt">EnvEntry</span> m]</span>
<span id="cb40-2"><a href="https://well-typed.com/blog/rss2.xml#cb40-2" tabindex="-1"></a></span>
<span id="cb40-3"><a href="https://well-typed.com/blog/rss2.xml#cb40-3" tabindex="-1"></a><span class="kw">data</span> <span class="dt">EnvEntry</span> m <span class="kw">where</span></span>
<span id="cb40-4"><a href="https://well-typed.com/blog/rss2.xml#cb40-4" tabindex="-1"></a><span class="ot">  (:==) ::</span> <span class="dt">Typeable</span> a <span class="ot">=&gt;</span> <span class="dt">Var</span> a <span class="ot">-&gt;</span> <span class="dt">Realized</span> m a <span class="ot">-&gt;</span> <span class="dt">EnvEntry</span> m</span></code></pre></div>
<p>Variables of different types are distinguished at runtime through dynamic typing; this is common for model testing libraries like this, and is not really visible to end users.</p>
<p>The state maintained by the lockstep infrastructure is the user defined model state, along with an environment similar to <code>Env</code>, but for the values returned by the <em>model</em>:</p>
<div class="sourceCode" id="cb41"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb41-1"><a href="https://well-typed.com/blog/rss2.xml#cb41-1" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Lockstep</span> state <span class="ot">=</span> <span class="dt">Lockstep</span> {</span>
<span id="cb41-2"><a href="https://well-typed.com/blog/rss2.xml#cb41-2" tabindex="-1"></a><span class="ot">      lockstepModel ::</span> state</span>
<span id="cb41-3"><a href="https://well-typed.com/blog/rss2.xml#cb41-3" tabindex="-1"></a>    ,<span class="ot"> lockstepEnv   ::</span> <span class="dt">EnvF</span> (<span class="dt">ModelValue</span> state)</span>
<span id="cb41-4"><a href="https://well-typed.com/blog/rss2.xml#cb41-4" tabindex="-1"></a>    }</span></code></pre></div>
<p>The definition of <code>EnvF</code> is similar to <code>Env</code>, but maps variables of type <code>a</code> to values of type <code>f a</code>:</p>
<div class="sourceCode" id="cb42"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb42-1"><a href="https://well-typed.com/blog/rss2.xml#cb42-1" tabindex="-1"></a><span class="kw">data</span> <span class="dt">EnvEntry</span> f <span class="kw">where</span></span>
<span id="cb42-2"><a href="https://well-typed.com/blog/rss2.xml#cb42-2" tabindex="-1"></a>  <span class="dt">EnvEntry</span><span class="ot"> ::</span> <span class="dt">Typeable</span> a <span class="ot">=&gt;</span> <span class="dt">Var</span> a <span class="ot">-&gt;</span> f a <span class="ot">-&gt;</span> <span class="dt">EnvEntry</span> f</span>
<span id="cb42-3"><a href="https://well-typed.com/blog/rss2.xml#cb42-3" tabindex="-1"></a></span>
<span id="cb42-4"><a href="https://well-typed.com/blog/rss2.xml#cb42-4" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">EnvF</span> f <span class="ot">=</span> <span class="dt">EnvF</span> [<span class="dt">EnvEntry</span> f]</span></code></pre></div>
<h3 id="initialising-and-stepping-the-state">Initialising and stepping the state</h3>
<p>State initialisation is simple:</p>
<div class="sourceCode" id="cb43"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb43-1"><a href="https://well-typed.com/blog/rss2.xml#cb43-1" tabindex="-1"></a><span class="ot">initialState ::</span> state <span class="ot">-&gt;</span> <span class="dt">Lockstep</span> state</span>
<span id="cb43-2"><a href="https://well-typed.com/blog/rss2.xml#cb43-2" tabindex="-1"></a>initialState state <span class="ot">=</span> <span class="dt">Lockstep</span> {</span>
<span id="cb43-3"><a href="https://well-typed.com/blog/rss2.xml#cb43-3" tabindex="-1"></a>      lockstepModel <span class="ot">=</span> state</span>
<span id="cb43-4"><a href="https://well-typed.com/blog/rss2.xml#cb43-4" tabindex="-1"></a>    , lockstepEnv   <span class="ot">=</span> EnvF.empty</span>
<span id="cb43-5"><a href="https://well-typed.com/blog/rss2.xml#cb43-5" tabindex="-1"></a>    }</span></code></pre></div>
<p><em>Stepping</em> the state (the implementation of <code>nextState</code>) is one of the functions at the heart of the abstraction, but we have actually already seen nearly all the ingredients:</p>
<div class="sourceCode" id="cb44"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb44-1"><a href="https://well-typed.com/blog/rss2.xml#cb44-1" tabindex="-1"></a><span class="ot">nextState ::</span> <span class="kw">forall</span> state a<span class="op">.</span></span>
<span id="cb44-2"><a href="https://well-typed.com/blog/rss2.xml#cb44-2" tabindex="-1"></a>     (<span class="dt">InLockstep</span> state, <span class="dt">Typeable</span> a)</span>
<span id="cb44-3"><a href="https://well-typed.com/blog/rss2.xml#cb44-3" tabindex="-1"></a>  <span class="ot">=&gt;</span> <span class="dt">Lockstep</span> state</span>
<span id="cb44-4"><a href="https://well-typed.com/blog/rss2.xml#cb44-4" tabindex="-1"></a>  <span class="ot">-&gt;</span> <span class="dt">LockstepAction</span> state a</span>
<span id="cb44-5"><a href="https://well-typed.com/blog/rss2.xml#cb44-5" tabindex="-1"></a>  <span class="ot">-&gt;</span> <span class="dt">Var</span> a</span>
<span id="cb44-6"><a href="https://well-typed.com/blog/rss2.xml#cb44-6" tabindex="-1"></a>  <span class="ot">-&gt;</span> <span class="dt">Lockstep</span> state</span>
<span id="cb44-7"><a href="https://well-typed.com/blog/rss2.xml#cb44-7" tabindex="-1"></a>nextState (<span class="dt">Lockstep</span> state env) action var <span class="ot">=</span></span>
<span id="cb44-8"><a href="https://well-typed.com/blog/rss2.xml#cb44-8" tabindex="-1"></a>    <span class="dt">Lockstep</span> state' <span class="op">$</span> EnvF.insert var modelResp env</span>
<span id="cb44-9"><a href="https://well-typed.com/blog/rss2.xml#cb44-9" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb44-10"><a href="https://well-typed.com/blog/rss2.xml#cb44-10" tabindex="-1"></a><span class="ot">    modelResp ::</span> <span class="dt">ModelValue</span> state a</span>
<span id="cb44-11"><a href="https://well-typed.com/blog/rss2.xml#cb44-11" tabindex="-1"></a><span class="ot">    state'    ::</span> state</span>
<span id="cb44-12"><a href="https://well-typed.com/blog/rss2.xml#cb44-12" tabindex="-1"></a>    (modelResp, state') <span class="ot">=</span> modelNextState (GVar.lookUpEnvF env) action state</span></code></pre></div>
<p>We are given the current state, an action to take, and a fresh variable to hold the result of this action, and must compute the result according to the model and new model state. The model result and the new model state come straight from the <code>modelNextState</code> method of <code>InLockstep</code>; the only other thing left to do is to add the variable binding to our environment.</p>
<h3 id="precondition-and-postcondition">Precondition and postcondition</h3>
<p>The only precondition that we have by default is that all variables must be well-defined. This means not only that they have a value, but also that the evaluation of the embedded <code>Op</code> will succeed too. This is verified by</p>
<div class="sourceCode" id="cb45"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb45-1"><a href="https://well-typed.com/blog/rss2.xml#cb45-1" tabindex="-1"></a><span class="ot">definedInEnvF ::</span> (<span class="op">..</span>) <span class="ot">=&gt;</span> <span class="dt">EnvF</span> f <span class="ot">-&gt;</span> <span class="dt">GVar</span> op a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span></code></pre></div>
<p>So the precondition is simply</p>
<div class="sourceCode" id="cb46"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb46-1"><a href="https://well-typed.com/blog/rss2.xml#cb46-1" tabindex="-1"></a><span class="ot">precondition ::</span></span>
<span id="cb46-2"><a href="https://well-typed.com/blog/rss2.xml#cb46-2" tabindex="-1"></a>     <span class="dt">InLockstep</span> state</span>
<span id="cb46-3"><a href="https://well-typed.com/blog/rss2.xml#cb46-3" tabindex="-1"></a>  <span class="ot">=&gt;</span> <span class="dt">Lockstep</span> state <span class="ot">-&gt;</span> <span class="dt">LockstepAction</span> state a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb46-4"><a href="https://well-typed.com/blog/rss2.xml#cb46-4" tabindex="-1"></a>precondition (<span class="dt">Lockstep</span> _ env) <span class="ot">=</span></span>
<span id="cb46-5"><a href="https://well-typed.com/blog/rss2.xml#cb46-5" tabindex="-1"></a>    <span class="fu">all</span> (\(<span class="dt">SomeGVar</span> var) <span class="ot">-&gt;</span> GVar.definedInEnvF env var) <span class="op">.</span> usedVars</span></code></pre></div>
<p>The postcondition is also simple: <code>quickcheck-dynamic</code> gives us the action and the result from the system under test; we (re)compute the result from the model and compare “up to observability,” as described above:</p>
<div class="sourceCode" id="cb47"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb47-1"><a href="https://well-typed.com/blog/rss2.xml#cb47-1" tabindex="-1"></a><span class="ot">checkResponse ::</span> <span class="kw">forall</span> m state a<span class="op">.</span></span>
<span id="cb47-2"><a href="https://well-typed.com/blog/rss2.xml#cb47-2" tabindex="-1"></a>     <span class="dt">RunLockstep</span> state m</span>
<span id="cb47-3"><a href="https://well-typed.com/blog/rss2.xml#cb47-3" tabindex="-1"></a>  <span class="ot">=&gt;</span> <span class="dt">Proxy</span> m</span>
<span id="cb47-4"><a href="https://well-typed.com/blog/rss2.xml#cb47-4" tabindex="-1"></a>  <span class="ot">-&gt;</span> <span class="dt">Lockstep</span> state <span class="ot">-&gt;</span> <span class="dt">LockstepAction</span> state a <span class="ot">-&gt;</span> <span class="dt">Realized</span> m a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">String</span></span>
<span id="cb47-5"><a href="https://well-typed.com/blog/rss2.xml#cb47-5" tabindex="-1"></a>checkResponse p (<span class="dt">Lockstep</span> state env) action a <span class="ot">=</span></span>
<span id="cb47-6"><a href="https://well-typed.com/blog/rss2.xml#cb47-6" tabindex="-1"></a>    compareEquality (observeReal p action a) (observeModel modelResp)</span>
<span id="cb47-7"><a href="https://well-typed.com/blog/rss2.xml#cb47-7" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb47-8"><a href="https://well-typed.com/blog/rss2.xml#cb47-8" tabindex="-1"></a><span class="ot">    modelResp ::</span> <span class="dt">ModelValue</span> state a</span>
<span id="cb47-9"><a href="https://well-typed.com/blog/rss2.xml#cb47-9" tabindex="-1"></a>    modelResp <span class="ot">=</span> <span class="fu">fst</span> <span class="op">$</span> modelNextState (GVar.lookUpEnvF env) action state</span>
<span id="cb47-10"><a href="https://well-typed.com/blog/rss2.xml#cb47-10" tabindex="-1"></a></span>
<span id="cb47-11"><a href="https://well-typed.com/blog/rss2.xml#cb47-11" tabindex="-1"></a><span class="ot">    compareEquality ::</span>  <span class="dt">Observable</span> state a <span class="ot">-&gt;</span> <span class="dt">Observable</span> state a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">String</span></span>
<span id="cb47-12"><a href="https://well-typed.com/blog/rss2.xml#cb47-12" tabindex="-1"></a>    compareEquality real mock</span>
<span id="cb47-13"><a href="https://well-typed.com/blog/rss2.xml#cb47-13" tabindex="-1"></a>      <span class="op">|</span> real <span class="op">==</span> mock <span class="ot">=</span> <span class="dt">Nothing</span></span>
<span id="cb47-14"><a href="https://well-typed.com/blog/rss2.xml#cb47-14" tabindex="-1"></a>      <span class="op">|</span> <span class="fu">otherwise</span>    <span class="ot">=</span> <span class="dt">Just</span> <span class="op">$</span> <span class="fu">concat</span> [</span>
<span id="cb47-15"><a href="https://well-typed.com/blog/rss2.xml#cb47-15" tabindex="-1"></a>            <span class="st">&quot;System under test returned: &quot;</span></span>
<span id="cb47-16"><a href="https://well-typed.com/blog/rss2.xml#cb47-16" tabindex="-1"></a>          , <span class="fu">show</span> real</span>
<span id="cb47-17"><a href="https://well-typed.com/blog/rss2.xml#cb47-17" tabindex="-1"></a>          , <span class="st">&quot;\nbut model returned:         &quot;</span></span>
<span id="cb47-18"><a href="https://well-typed.com/blog/rss2.xml#cb47-18" tabindex="-1"></a>          , <span class="fu">show</span> mock</span>
<span id="cb47-19"><a href="https://well-typed.com/blog/rss2.xml#cb47-19" tabindex="-1"></a>          ]</span>
<span id="cb47-20"><a href="https://well-typed.com/blog/rss2.xml#cb47-20" tabindex="-1"></a></span>
<span id="cb47-21"><a href="https://well-typed.com/blog/rss2.xml#cb47-21" tabindex="-1"></a><span class="ot">postcondition ::</span> <span class="kw">forall</span> m state a<span class="op">.</span></span>
<span id="cb47-22"><a href="https://well-typed.com/blog/rss2.xml#cb47-22" tabindex="-1"></a>     <span class="dt">RunLockstep</span> state m</span>
<span id="cb47-23"><a href="https://well-typed.com/blog/rss2.xml#cb47-23" tabindex="-1"></a>  <span class="ot">=&gt;</span> (<span class="dt">Lockstep</span> state, <span class="dt">Lockstep</span> state)</span>
<span id="cb47-24"><a href="https://well-typed.com/blog/rss2.xml#cb47-24" tabindex="-1"></a>  <span class="ot">-&gt;</span> <span class="dt">LockstepAction</span> state a</span>
<span id="cb47-25"><a href="https://well-typed.com/blog/rss2.xml#cb47-25" tabindex="-1"></a>  <span class="ot">-&gt;</span> <span class="dt">LookUp</span> m</span>
<span id="cb47-26"><a href="https://well-typed.com/blog/rss2.xml#cb47-26" tabindex="-1"></a>  <span class="ot">-&gt;</span> <span class="dt">Realized</span> m a</span>
<span id="cb47-27"><a href="https://well-typed.com/blog/rss2.xml#cb47-27" tabindex="-1"></a>  <span class="ot">-&gt;</span> m <span class="dt">Bool</span></span>
<span id="cb47-28"><a href="https://well-typed.com/blog/rss2.xml#cb47-28" tabindex="-1"></a>postcondition (before, _after) action _lookUp a <span class="ot">=</span></span>
<span id="cb47-29"><a href="https://well-typed.com/blog/rss2.xml#cb47-29" tabindex="-1"></a>    <span class="fu">pure</span> <span class="op">$</span> isNothing <span class="op">$</span> checkResponse (<span class="dt">Proxy</span> <span class="op">@</span>m) before action a</span></code></pre></div>
<p>Unlike <code>postcondition</code>, which can only return a boolean, <code>checkResponse</code> actually gives a user-friendly error message in case the postcondition is not satisfied. We will reuse this in <code>monitoring</code> below to ensure that this error message is included in the test output.</p>
<h3 id="generation-shrinking-and-monitoring">Generation, shrinking and monitoring</h3>
<p>The definitions of <code>arbitraryAction</code> and <code>shrinkAction</code> are thin wrappers around the corresponding methods from <code>InLockstep</code>: we just need to pass them a way to find out which variables are available:</p>
<div class="sourceCode" id="cb48"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb48-1"><a href="https://well-typed.com/blog/rss2.xml#cb48-1" tabindex="-1"></a><span class="ot">varsOfType ::</span></span>
<span id="cb48-2"><a href="https://well-typed.com/blog/rss2.xml#cb48-2" tabindex="-1"></a>     <span class="dt">InLockstep</span> state</span>
<span id="cb48-3"><a href="https://well-typed.com/blog/rss2.xml#cb48-3" tabindex="-1"></a>  <span class="ot">=&gt;</span> <span class="dt">EnvF</span> (<span class="dt">ModelValue</span> state) <span class="ot">-&gt;</span> <span class="dt">ModelFindVariables</span> state</span>
<span id="cb48-4"><a href="https://well-typed.com/blog/rss2.xml#cb48-4" tabindex="-1"></a>varsOfType env p <span class="ot">=</span> <span class="fu">map</span> GVar.fromVar <span class="op">$</span> EnvF.keysOfType p env</span></code></pre></div>
<p>This depends on</p>
<div class="sourceCode" id="cb49"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb49-1"><a href="https://well-typed.com/blog/rss2.xml#cb49-1" tabindex="-1"></a><span class="ot">keysOfType ::</span> <span class="dt">Typeable</span> a <span class="ot">=&gt;</span> <span class="dt">Proxy</span> a <span class="ot">-&gt;</span> <span class="dt">EnvF</span> f <span class="ot">-&gt;</span> [<span class="dt">Var</span> a]</span></code></pre></div>
<p>to find variables of the appropriate type. Action generation and shrinking are now trivial:</p>
<div class="sourceCode" id="cb50"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb50-1"><a href="https://well-typed.com/blog/rss2.xml#cb50-1" tabindex="-1"></a>arbitraryAction (<span class="dt">Lockstep</span> state env) <span class="ot">=</span> arbitraryWithVars (varsOfType env) state</span>
<span id="cb50-2"><a href="https://well-typed.com/blog/rss2.xml#cb50-2" tabindex="-1"></a>shrinkAction    (<span class="dt">Lockstep</span> state env) <span class="ot">=</span> shrinkWithVars    (varsOfType env) state</span></code></pre></div>
<p>Finally, <code>quickcheck-dynamic</code> allows us to “monitor” test execution: we can add additional information to running tests. We will use this both to label tests with inferred tags, as well as to add the state after every step and the result of <code>checkResponse</code> to the test-output in case there is a test failure:</p>
<div class="sourceCode" id="cb51"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb51-1"><a href="https://well-typed.com/blog/rss2.xml#cb51-1" tabindex="-1"></a><span class="ot">monitoring ::</span> <span class="kw">forall</span> m state a<span class="op">.</span></span>
<span id="cb51-2"><a href="https://well-typed.com/blog/rss2.xml#cb51-2" tabindex="-1"></a>     <span class="dt">RunLockstep</span> state m</span>
<span id="cb51-3"><a href="https://well-typed.com/blog/rss2.xml#cb51-3" tabindex="-1"></a>  <span class="ot">=&gt;</span> <span class="dt">Proxy</span> m</span>
<span id="cb51-4"><a href="https://well-typed.com/blog/rss2.xml#cb51-4" tabindex="-1"></a>  <span class="ot">-&gt;</span> (<span class="dt">Lockstep</span> state, <span class="dt">Lockstep</span> state)</span>
<span id="cb51-5"><a href="https://well-typed.com/blog/rss2.xml#cb51-5" tabindex="-1"></a>  <span class="ot">-&gt;</span> <span class="dt">LockstepAction</span> state a</span>
<span id="cb51-6"><a href="https://well-typed.com/blog/rss2.xml#cb51-6" tabindex="-1"></a>  <span class="ot">-&gt;</span> <span class="dt">LookUp</span> m</span>
<span id="cb51-7"><a href="https://well-typed.com/blog/rss2.xml#cb51-7" tabindex="-1"></a>  <span class="ot">-&gt;</span> <span class="dt">Realized</span> m a</span>
<span id="cb51-8"><a href="https://well-typed.com/blog/rss2.xml#cb51-8" tabindex="-1"></a>  <span class="ot">-&gt;</span> <span class="dt">Property</span> <span class="ot">-&gt;</span> <span class="dt">Property</span></span>
<span id="cb51-9"><a href="https://well-typed.com/blog/rss2.xml#cb51-9" tabindex="-1"></a>monitoring p (before, after) action _lookUp realResp <span class="ot">=</span></span>
<span id="cb51-10"><a href="https://well-typed.com/blog/rss2.xml#cb51-10" tabindex="-1"></a>      QC.counterexample (<span class="st">&quot;State: &quot;</span> <span class="op">++</span> <span class="fu">show</span> after)</span>
<span id="cb51-11"><a href="https://well-typed.com/blog/rss2.xml#cb51-11" tabindex="-1"></a>    <span class="op">.</span> <span class="fu">maybe</span> <span class="fu">id</span> QC.counterexample (checkResponse p before action realResp)</span>
<span id="cb51-12"><a href="https://well-typed.com/blog/rss2.xml#cb51-12" tabindex="-1"></a>    <span class="op">.</span> QC.tabulate <span class="st">&quot;Tags&quot;</span> tags</span>
<span id="cb51-13"><a href="https://well-typed.com/blog/rss2.xml#cb51-13" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb51-14"><a href="https://well-typed.com/blog/rss2.xml#cb51-14" tabindex="-1"></a><span class="ot">    tags ::</span> [<span class="dt">String</span>]</span>
<span id="cb51-15"><a href="https://well-typed.com/blog/rss2.xml#cb51-15" tabindex="-1"></a>    tags <span class="ot">=</span> tagStep (lockstepModel before, lockstepModel after) action modelResp</span>
<span id="cb51-16"><a href="https://well-typed.com/blog/rss2.xml#cb51-16" tabindex="-1"></a></span>
<span id="cb51-17"><a href="https://well-typed.com/blog/rss2.xml#cb51-17" tabindex="-1"></a><span class="ot">    modelResp ::</span> <span class="dt">ModelValue</span> state a</span>
<span id="cb51-18"><a href="https://well-typed.com/blog/rss2.xml#cb51-18" tabindex="-1"></a>    modelResp <span class="ot">=</span> <span class="fu">fst</span> <span class="op">$</span> modelNextState</span>
<span id="cb51-19"><a href="https://well-typed.com/blog/rss2.xml#cb51-19" tabindex="-1"></a>                        (GVar.lookUpEnvF <span class="op">$</span> lockstepEnv before)</span>
<span id="cb51-20"><a href="https://well-typed.com/blog/rss2.xml#cb51-20" tabindex="-1"></a>                        action</span>
<span id="cb51-21"><a href="https://well-typed.com/blog/rss2.xml#cb51-21" tabindex="-1"></a>                        (lockstepModel before)</span></code></pre></div>
<h2 id="conclusions">Conclusions</h2>
<p>The interface for stateful testing provided by <code>quickcheck-dynamic</code> is fairly minimal. The key methods that a test must implement are:</p>
<ul>
<li>The initial state of the model, and a way to step that state given an action.</li>
<li>A precondition which is checked during generation and (importantly) during shrinking to rule out nonsensical tests.</li>
<li>A postcondition which is checked after every action and determines whether or not a test is considered successful.</li>
<li>Generation and shrinking of actions.</li>
<li>Optionally, a way to add additional information to a test.</li>
</ul>
<p>Although it’s nice to have a minimal API, it leaves end users with a lot of different ways in which they might structure their tests. Sometimes that is useful, but for many situations a more streamlined approach is useful. In this blog post we described the <code>quickcheck-lockstep</code> library, which provides support for “lockstep-style” model testing on top of <code>quickcheck-dynamic</code>. The key difference here is that the <code>postcondition</code> is always the same: we insist that the system under test and the model must return the same results, “up to observability.” By default, the precondition is also always the same: we only insist that all variables are defined.</p>
<p>We previously implemented the same kind of infrastructure for <code>quickcheck-state-machine</code>, so implementing it now for <code>quickcheck-dynamic</code> provided a good comparison point between the two libraries.</p>
<ul>
<li>In terms of model based testing, the two libraries basically have feature parity: they provide the same core functionality.</li>
<li>In addition to this core functionality <code>quickcheck-dynamic</code> additionally offers support for dynamic logic, which is absent from <code>quickcheck-state-machine</code>. Conversely, <code>quickcheck-state-machine</code> offers support for <em>parallel</em> test execution, which is currently absent from <code>quickcheck-dynamic</code>. We have not talked about either topic in this blog post.</li>
</ul>
<p>The differences between the two libraries are mostly technical in nature:</p>
<ul>
<li>Probably the most important downside of <code>quickcheck-dynamic</code> is there is precisely <em>one</em> variable that records the result of an action.<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn11" id="fnref11"><sup>11</sup></a> This is not the case in <code>quickcheck-state-machine</code>, where the number of variables bound by an action is determined at runtime. We can use this to return <em>no</em> bound variables if the action failed, or indeed <em>multiple</em> bound variables if the action returned multiple values (such as our <code>Open</code> example). In <code>quickcheck-lockstep</code> we therefore provide the <code>GVar</code> abstraction, which provides a way to “map” over the type of variables. It might be useful to lift this abstraction into the main library at some point.</li>
<li>At the moment, <code>quickcheck-dynamic</code> does not provide explicit support for generating labelled examples. As we saw, we <em>can</em> implement this functionality on top of <code>quickcheck-dynamic</code> (<code>quickcheck-lockstep</code> offers it), but as with <code>GVar</code>, it might be useful to move (a version of) this functionality into to the main library.</li>
<li>In <code>quickcheck-state-machine</code> the types of variables are type-level arguments to actions and responses. This means that some functionality such as getting the list of variables used (<code>usedVars</code>) can be defined generically. Moreover, variables can be resolved by the framework, whereas in <code>quickcheck-dynamic</code> test authors are responsible for manually calling the <code>LookUp</code> function whenever necessary. However, we pay a price for this functionality in <code>quickcheck-state-machine</code>; especially when dealing with multiple types of variables, the required type-level machinery gets pretty sophisticated.</li>
<li>In <code>quickcheck-dynamic</code> the argument to tests is <code>Actions</code>, which is a list of steps where each step consists of a variable for that step and the action to execute. The corresponding datatype in <code>quickcheck-state-machine</code> is <code>Commands</code>; this is very similar, but in addition to the action, it also records the result of the action. This makes <code>Commands</code> a bit more useful for <code>Actions</code> for things like tagging commands, since we get the full history. In <code>quickcheck-dynamic</code>, <code>tagActions</code> must effectively re-run the full set of actions to construct the right test label.</li>
<li>Unlike <code>quickcheck-state-machine</code>, <code>quickcheck-dynamic</code> keeps the definition of the interpreter for <code>Action</code> (<code>RunModel</code>) separate from the <code>StateModel</code> class. This separation is useful, because running the test against the real system often needs some additional state (a database handle, for example) which is not necessary for many other parts of the test framework. In <code>quickcheck-state-machine</code> this can often lead to ugly <code>error &quot;state unused&quot;</code> calls.</li>
</ul>
<p>All in all, the libraries are quite similar in terms of the core state model testing functionality. For lockstep-style testing, however, <code>quickcheck-lockstep</code> is probably more user-friendly than <a href="https://hackage.haskell.org/package/quickcheck-state-machine/docs/Test-StateMachine-Lockstep-NAry.html">the corresponding functionality in quickcheck-state-machine</a> because there is less advanced type machinery required. The downside of the single-variable-per-command of <code>quickcheck-dynamic</code> is resolved by the <code>GVar</code> abstraction in <code>quickstep-lockstep</code>.</p>
<h5 id="footnotes">Footnotes</h5>
<section class="footnotes">
<hr>
<ol>
<li id="fn1"><p>If we wanted to execute lockstep-style tests against multiple execution backends, we would have to introduce another abstraction to ensure that we can compare model responses to system responses for all of those backends.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref1">↩︎</a></p></li>
<li id="fn2"><p><code>InLockstep</code> could alternatively require a function <code>compareResult :: a -&gt; ModelValue s a -&gt; Bool</code>, but writing such a function is often bit cumbersome, whereas equality for <code>Observable s</code> can be derived.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref2">↩︎</a></p></li>
<li id="fn3"><p>Core <code>quickcheck-dynamic</code> takes care of variables for the system under test, but not for the model.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref3">↩︎</a></p></li>
<li id="fn4"><p>For an <code>Action .. a</code>, all we see in <code>postcondition</code> is a value of type <code>Realized m a</code>. We want to ensure not just that the model and the system under test have the same behaviour when no exceptions are present, but also that they return the same errors. We <em>must</em> therefore reflect the possibility for an error in the result type of <code>Open</code>.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref4">↩︎</a></p></li>
<li id="fn5"><p>Perhaps some of this functionality can be merged with the main library; it certainly seems useful beyond lockstep-style testing.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref5">↩︎</a></p></li>
<li id="fn6"><p>This is closely related to <a href="https://hackage.haskell.org/package/kan-extensions/docs/Data-Functor-Coyoneda.html">Coyoneda</a>.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref6">↩︎</a></p></li>
<li id="fn7"><p>The <code>quickcheck-dynamic</code> infrastructure insists that actions have <code>Eq</code> and <code>Show</code> instances. Since variables occur in actions, the same must be true for <code>GVar</code>. Secondly, a function from <code>x -&gt; y</code> would not be enough; we would also need a second function of type <code>ModelValue s x -&gt; ModelValue s y</code>. The indirection through the DSL avoids both of these problems: operations have <code>Eq</code> and <code>Show</code> instances, and we can simply insist on two interpreters of <code>Op</code>: one for <code>Identity</code> and one for <code>ModelValue s</code>.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref7">↩︎</a></p></li>
<li id="fn8"><p>We use <code>tagStep</code> not just in <code>labelledExamples</code>, but also in the standard <code>StateModel</code> method <code>monitoring</code>, to tag tests as they are executed. While the <em>former</em> would in principle allow us to tag an entire list of actions, the latter does not.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref8">↩︎</a></p></li>
<li id="fn9"><p>The proxy argument is necessary because <code>Realized</code> is a non-injective type family; <code>quickcheck-dynamic</code> relies on <code>AllowAmbiguousTypes</code> instead.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref9">↩︎</a></p></li>
<li id="fn10"><p>In <code>StateModel</code> we have <code>monitoring</code>, but <code>monitoring</code> cannot really be used with <code>label</code>, as this would result in lots of calls to <code>label</code> as the test executes (once per action) and each of those calls would result in a separate table in the test output. We must therefore use <code>tabulate</code> instead, but this is not supported by QuickCheck’s <code>labelledExamples</code>. Moreover, the only way to turn a list of actions into a <code>PropertyM</code> in <code>quickcheck-dynamic</code> is <code>runActions</code>, which requires the <code>RunModel</code> argument; but <code>RunModel</code> should not be needed for creating labelled examples. In the lockstep infrastructure we provide instead a function <code>tagActions :: Actions (Lockstep state) -&gt; Property</code>, which basically executes all of the actions, collecting the tags as it goes, and then makes a <em>single</em> call to <code>label</code> with the final list of tags. This then works well with the standard <code>labelledExamples</code> functionality from QuickCheck.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref10">↩︎</a></p></li>
<li id="fn11"><p>The registry example from <code>quickcheck-dynamic</code> skirts around the problem: some actions fail, and some actions return new <code>ModelThreadId</code>, but there are no actions that can fail <em>or</em> return a new <code>ModelThreadId</code>.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref11">↩︎</a></p></li>
</ol>
</section></div>
    </content>
    <updated>2022-09-08T00:00:00Z</updated>
    <published>2022-09-08T00:00:00Z</published>
    <category term="coding"/>
    <category term="testing"/>
    <author>
      <name>edsko</name>
    </author>
    <source>
      <id>https://well-typed.com/blog/</id>
      <logo>https://well-typed.com/img/wtnlogoplain.svg</logo>
      <link href="https://well-typed.com/blog/rss2.xml" rel="self" type="application/rss+xml">
      <link href="https://well-typed.com/blog/" rel="alternate" type="text/html">
      <subtitle>Because Well-Typed Programs Don't Go Wrong</subtitle>
      <title>Well-Typed Blog</title>
      <updated>2022-10-27T00:00:00Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-1777990983847811806.post-8136329259991133570</id>
    <link href="https://www.haskellforall.com/feeds/8136329259991133570/comments/default" rel="replies" title="Post Comments" type="application/atom+xml">
    <link href="https://www.haskellforall.com/2022/09/nix-serve-ng-faster-more-reliable-drop.html#comment-form" rel="replies" title="0 Comments" type="text/html">
    <link href="https://www.blogger.com/feeds/1777990983847811806/posts/default/8136329259991133570" rel="edit" type="application/atom+xml">
    <link href="https://www.blogger.com/feeds/1777990983847811806/posts/default/8136329259991133570" rel="self" type="application/atom+xml">
    <link href="https://www.haskellforall.com/2022/09/nix-serve-ng-faster-more-reliable-drop.html" rel="alternate" title="nix-serve-ng: A faster, more reliable, drop-in replacement for nix-serve" type="text/html">
    <title>nix-serve-ng: A faster, more reliable, drop-in replacement for nix-serve</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">nix-serve-ng    <p>Our team at <a href="https://www.arista.com/en/">Arista Networks</a>is happy to announce nix-serve-ng, a backwards-compatible Haskell   rewrite of <a href="https://github.com/edolstra/nix-serve">nix-serve</a>  (a service for hosting a <code>/nix/store</code> as a binary cache). It provides better reliability and performance than nix-serve (ranging from ≈ 1.5× to 32× faster). We wrote nix-serve-ng to fix scaling bottlenecks in our cache and we expect other large-scale deployments might be interested in this project, too.</p><p>This post will focus more on the background behind the development process and comparisons to other Nix cache implementations. If you don’t care about any of that then you can get started by following the instructions in <a href="https://github.com/aristanetworks/nix-serve-ng#nix-serve-ng">the repository’s <code>README</code></a>.</p><h4 id="background">Background</h4><p>Before we began this project there were at least two other open source rewrites of <code>nix-serve-ng</code> that we could have adopted instead of <code>nix-serve</code>:</p><ul><li><p><a href="https://github.com/thoughtpolice/eris"><code>eris</code></a> - A Perl rewrite of <code>nix-serve</code></p><p>Note: the original <code>nix-serve</code> is implemented in Perl, and eris is also implemented in Perl using a different framework.</p></li><li><p><a href="https://github.com/helsinki-systems/harmonia"><code>harmonia</code></a>- A Rust rewrite of <code>nix-serve</code></p></li></ul><p>The main reason we did not go with these two alternatives is because they are not drop-in replacements for the original <code>nix-serve</code>. We could have fixed that, but given <a href="https://github.com/edolstra/nix-serve/blob/master/nix-serve.psgi">how simple <code>nix-serve</code> is</a> I figured that it would be simpler to just create our own. <code>nix-serve-ng</code> only took a couple of days for the initial version and maybe a week of follow-up fixes and performance tuning.</p><p>We did not evaluate the performance or reliability of <code>eris</code> or <code>harmonia</code> before embarking on our own <code>nix-serve</code> replacement. However, after <code>nix-serve-ng</code> was done we learned that it was significantly faster than the alternatives (see the <a href="https://www.haskellforall.com/feeds/posts/default#performance">Performance</a> section below). Some of those performance differences are probably fixable, especially for <code>harmonia</code>. That said, we are very happy with the quality of our solution.</p><h4 id="backwards-compatibility">Backwards compatibility</h4><p>One important design goal for this project is to be significantly backwards compatible with <code>nix-serve</code>. We went to great lengths to preserve compatibility, including:</p><ul><li><p>Naming the built executable <code>nix-serve</code></p><p>Yes, even though the project name is <code>nix-serve-ng</code>, the executable built by the project is named <code>nix-serve</code>.</p></li><li><p>Preserving most of the original command-line options, including legacy options</p><p>… even though some are unused.</p></li></ul><p>In most cases you can literally replace <code>pkgs.nix-serve</code>with <code>pkgs.nix-serve-ng</code> and it will “just work”. You can even continue to use the existing <code>services.nix-serve</code> NixOS options.</p><p>The biggest compatibility regression is that <code>nix-serve-ng</code> cannot be built on MacOS. It is extremely close to supporting MacOS save for this one bug in Haskell’s <code>hsc2hs</code> tool: <a href="https://github.com/haskell/hsc2hs/issues/26"><code>haskell/hsc2hs</code>- #26</a>. We left in all of the MacOS shims so that if that bug is ever fixed then we can get MacOS support easily.</p><p>For more details on the exact differences compared to <code>nix-serve</code>, see the <a href="https://github.com/aristanetworks/nix-serve-ng#results">Result / Backwards-compatibility</a> section of the <code>README</code>.</p><h4 id="performance">Performance</h4><p><code>nix-serve-ng</code> is faster than all of the alternatives according to both our formal benchmarks and also informal testing. The <a href="https://github.com/aristanetworks/nix-serve-ng#benchmarks">“Benchmarks” section of our <code>README</code></a> has the complete breakdown but the relevant part is this table:</p><p>Speedups (compared to <code>nix-serve</code>):<table><colgroup><col style="width: 28%;"><col style="width: 18%;"><col style="width: 18%;"><col style="width: 18%;"><col style="width: 18%;"></colgroup><thead><tr class="header"><th>Benchmark</th><th><code>nix-serve</code></th><th><code>eris</code></th><th><code>harmonia</code></th><th><code>nix-serve-ng</code></th></tr></thead><tbody><tr class="odd"><td>Fetch present NAR info ×10</td><td>1.0</td><td>0.05</td><td>1.33</td><td>1.58</td></tr><tr class="even"><td>Fetch absent NAR info ×1</td><td>1.0</td><td>0.06</td><td>1.53</td><td>1.84</td></tr><tr class="odd"><td>Fetch empty NAR ×10</td><td>1.0</td><td>0.67</td><td>0.59</td><td>31.80</td></tr><tr class="even"><td>Fetch 10 MB NAR ×10</td><td>1.0</td><td>0.64</td><td>0.60</td><td>3.35</td></tr></tbody></table></p><p>… which I can summarize like this:</p><ul><li><code>nix-serve-ng</code> is faster than all of the alternatives across all use cases</li><li><code>eris</code> is slower than the original <code>nix-serve</code>across all use cases</li><li><code>harmonia</code> is faster than the original <code>nix-serve</code> for NAR info lookups, but slower for fetching NARs</li></ul><p>These performance results were surprising for a few reasons:</p><ul><li><p>I was not expecting <code>eris</code> to be slower than the original <code>nix-serve</code> implementation</p><p>… especially not NAR info lookups to be ≈ 20× slower. This is significant because NAR info lookups typically dominate a Nix cache’s performance. In my (informal) experience, the majority of a Nix cache’s time is spent addressing failed cache lookups.</p></li><li><p>I was not expecting <code>harmonia</code> (the Rust rewrite) to be slower than the original <code>nix-serve</code> for fetching NARs</p><p>This seems like something that should be fixable. <code>harmonia</code> will probably eventually match our performance because Rust has a high performance ceiling.</p></li><li><p>I was not expecting a ≈ 30x speedup for <code>nix-serve-ng</code>fetching small NARs</p><p>I had to triple-check that neither <code>nix-serve-ng</code> nor the benchmark were broken when I saw this speedup.</p></li></ul><p>So I investigated these performance differences to help inform other implementations what to be mindful of.</p><h4 id="performance-insights">Performance insights</h4><p>We didn’t get these kinds of speed-ups by being completely oblivious to performance. Here are the things that we paid special attention to to keep things efficient, in order of lowest-hanging to highest-hanging fruit:</p><ul><li><p>Don’t read the secret key file on every NAR fetch</p><p>This is a silly thing that <a href="https://github.com/edolstra/nix-serve/blob/8501f2e44e7963eb1fb20146a055cfe7242a2ac4/nix-serve.psgi#L38-L40">the original <code>nix-serve</code> does</a> that is the easiest thing to fix.</p><p><code>eris</code> and <code>harmonia</code> also fix this, so this optimization is not unique to our rewrite.</p></li><li><p>We bind directly to the Nix C++ API for fetching NARs</p><p><code>nix-serve</code>, <code>eris</code>, and <code>harmonia</code>all shell out to a subprocess to fetch NARs, by invoking either <code>nix dump-path</code> or <code>nix-store --dump</code> to do the heavy lifting. In contrast, <code>nix-serve-ng</code> binds to the Nix C++ API for this purpose.</p><p>This would definitely explain some of the performance difference when fetching NARs. Creating a subprocess has a fixed overhead regardless of the size of the NAR, which explains why we see the largest performance difference when fetching tiny NARs since the overhead of creating a subprocess would dominate the response time.</p><p>This may also affect throughput for serving large NAR files, too, by adding unnecessary memory copies/buffering as part of streaming the subprocess output.</p></li><li><p>We minimize memory copies when fetching NARs</p><p>We go to great lengths to minimize the number of intermediate buffers and copies when streaming the contents of a NAR to a client. To do this, we exploit the fact that Haskell’s foreign function interface works in both directions: Haskell code can call C++ code but also C++ code can call Haskell code. This means that we can <a href="https://github.com/aristanetworks/nix-serve-ng/blob/ba2028f9d7fd2f93a04e1ca9677811f461fe6676/cbits/nix.cpp#L173-L185">create a Nix C++ streaming sink from a Haskell callback function</a> and this eliminates the need for intermediate buffers.</p><p>This likely also improves the throughput for serving NAR files. Only <code>nix-serve-ng</code> performs this optimization (since <code>nix-serve-ng</code> is the only one that uses the C++ API for streaming NAR contents).</p></li><li><p>Hand-write the API routing logic</p><p>We hand-write all of the API routing logic to prioritize and optimize the hot path (fetching NAR info).</p><p>For example, a really simple thing that the original <code>nix-serve</code> does inefficiently is to check if the path matches <code>/nix-cache-info</code> first, even though that is an extremely infrequently used path. In our API routing logic we move that check straight to the very end.</p><p>These optimizations likely improve the performance of NAR info requests. As far as I can tell, only <code>nix-serve-ng</code> performs these optimizations.</p></li></ul><p>I have not benchmarked the performance impact of each of these changes in isolation, though. These observations are purely based on my intuition.</p><h4 id="features">Features</h4><p><code>nix-serve-ng</code> is not all upsides. In particular, <code>nix-serve-ng</code> is missing features that some of the other rewrites provide, such as:</p><ul><li>Greater configurability</li><li>Improved authentication support</li><li>Monitoring/diagnostics/status APIs</li></ul><p>Our focus was entirely on scalability, so the primary reason to use <code>nix-serve-ng</code> is if you prioritize performance and uptime.</p><h4 id="conclusion">Conclusion</h4><p>We’ve been using <code>nix-serve-ng</code> long enough internally that we feel confident endorsing its use outside our company. We run a particularly large Nix deployment internally (which is why we needed this in the first place), so we have stress tested <code>nix-serve-ng</code> considerably under heavy and realistic usage patterns.</p><p>You can get started by following these <a href="https://github.com/aristanetworks/nix-serve-ng/blob/main/README.md#quick-start">these instructions</a> and let us know if you run into any issues or difficulties.</p><p>Also, I want to thank <a href="https://www.arista.com/en/">Arista Networks</a> for graciously sponsoring our team to work on and open source this project</p></div>
    </content>
    <updated>2022-09-07T15:56:33Z</updated>
    <published>2022-09-07T13:53:00Z</published>
    <author>
      <name>Gabriella Gonzalez</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/01917800488530923694</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-1777990983847811806</id>
      <author>
        <name>Gabriella Gonzalez</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/01917800488530923694</uri>
      </author>
      <link href="https://www.haskellforall.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml">
      <link href="https://www.blogger.com/feeds/1777990983847811806/posts/default" rel="self" type="application/atom+xml">
      <link href="https://www.haskellforall.com/" rel="alternate" type="text/html">
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html">
      <link href="https://www.blogger.com/feeds/1777990983847811806/posts/default?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml">
      <title>Haskell for all</title>
      <updated>2022-11-14T19:18:39Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-6757805.post-8163870137030553372</id>
    <link href="http://kenta.blogspot.com/feeds/8163870137030553372/comments/default" rel="replies" title="Post Comments" type="application/atom+xml">
    <link href="http://www.blogger.com/comment.g?blogID=6757805&amp;postID=8163870137030553372&amp;isPopup=true" rel="replies" title="0 Comments" type="text/html">
    <link href="http://www.blogger.com/feeds/6757805/posts/default/8163870137030553372" rel="edit" type="application/atom+xml">
    <link href="http://www.blogger.com/feeds/6757805/posts/default/8163870137030553372" rel="self" type="application/atom+xml">
    <link href="http://kenta.blogspot.com/2022/09/aybvgyej-prime-binary-truncations.html" rel="alternate" title="[aybvgyej] prime binary truncations" type="text/html">
    <title>[aybvgyej] prime binary truncations</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>consider a number N.  if N is odd, test whether N is prime.  if N is even, test whether N+1 is prime.  set N := floor(N/2) and repeat primality testing until N=0.  of all the bitwise right shifts, how may are prime?</p>  <p>for example, start at N := 1580011307924772.  N+1 is prime (1)<br>  N := floor(N/2) = 790005653962386.  N+1 is prime (2)<br>  N := floor(N/2) = 395002826981193.<br>  N := floor(N/2) = 197501413490596.  N+1 is prime (3)<br>  N := floor(N/2) = 98750706745298.<br>  N := floor(N/2) = 49375353372649.<br>  N := floor(N/2) = 24687676686324.<br>  N := floor(N/2) = 12343838343162.<br>  N := floor(N/2) = 6171919171581.<br>  N := floor(N/2) = 3085959585790.  N+1 is prime (4)<br>  N := floor(N/2) = 1542979792895.<br>  N := floor(N/2) = 771489896447.  N is prime (5)<br>  N := floor(N/2) = 385744948223.  N is prime (6)<br>  N := floor(N/2) = 192872474111.  N is prime (7)<br>  N := floor(N/2) = 96436237055.<br>  N := floor(N/2) = 48218118527.  N is prime (8)<br>  N := floor(N/2) = 24109059263.  N is prime (9)<br>  N := floor(N/2) = 12054529631.<br>  N := floor(N/2) = 6027264815.<br>  N := floor(N/2) = 3013632407.  N is prime (10)<br>  N := floor(N/2) = 1506816203.  N is prime (11)<br>  N := floor(N/2) = 753408101.  N is prime (12)<br>  N := floor(N/2) = 376704050.<br>  N := floor(N/2) = 188352025.<br>  N := floor(N/2) = 94176012.  N+1 is prime (13)<br>  N := floor(N/2) = 47088006.  N+1 is prime (14)<br>  N := floor(N/2) = 23544003.<br>  N := floor(N/2) = 11772001.<br>  N := floor(N/2) = 5886000.<br>  N := floor(N/2) = 2943000.  N+1 is prime (15)<br>  N := floor(N/2) = 1471500.  N+1 is prime (16)<br>  N := floor(N/2) = 735750.  N+1 is prime (17)<br>  N := floor(N/2) = 367875.<br>  N := floor(N/2) = 183937.<br>  N := floor(N/2) = 91968.  N+1 is prime (18)<br>  N := floor(N/2) = 45984.<br>  N := floor(N/2) = 22992.  N+1 is prime (19)<br>  N := floor(N/2) = 11496.  N+1 is prime (20)<br>  N := floor(N/2) = 5748.  N+1 is prime (21)<br>  N := floor(N/2) = 2874.<br>  N := floor(N/2) = 1437.<br>  N := floor(N/2) = 718.  N+1 is prime (22)<br>  N := floor(N/2) = 359.  N is prime (23)<br>  N := floor(N/2) = 179.  N is prime (24)<br>  N := floor(N/2) = 89.  N is prime (25)<br>  N := floor(N/2) = 44.<br>  N := floor(N/2) = 22.  N+1 is prime (26)<br>  N := floor(N/2) = 11.  N is prime (27)<br>  N := floor(N/2) = 5.  N is prime (28)<br>  N := floor(N/2) = 2.  N+1 is prime (29)<br>  N := floor(N/2) = 1.<br>  N := floor(N/2) = 0.</p>  <p>thus, the number produces 29 primes, which is the most (a record) among numbers up to that starting N.</p><p>when examining N=1, we've arbitrarily chosen not to count N+1 = 2 being prime.</p>  <p>previously, <a href="http://kenta.blogspot.com/2022/07/wohoromh-factoring-binary-square-root.html">factoring truncations of irrational numbers in binary</a>.</p> <p>the Pari/GP code below is brute force for pedagogical purposes:</p>  <p>countp(p)=my(numprimes=0); my(bitwidth=0); while(p&gt;0, if(p%2, if(isprime(p), numprimes+=1); p=(p-1)/2, if(isprime(p+1), numprimes+=1); p/=2); bitwidth+=1); [numprimes, bitwidth]</p>  <p>best=0; for(n=0,+oo, a=countp(n); if(a[1]&gt;best, best=a[1]; printbinary(n); print(&quot; &quot;,n,&quot; &quot;,a,&quot; &quot;,n+1)))</p> <p>here are starting N which set records of producing increasing number of primes.  we give the number in binary (using period to signify zero) (illustrating rich veins of primes which work for a while, peter out, and later revive), in decimal, the number of primes, starting bitwidth, and N+1 (which I think is always prime).</p>    <p><code>1. 2 [1, 2] 3
<br>1.. 4 [2, 3] 5
<br>1.1. 10 [3, 4] 11
<br>1.11. 22 [4, 5] 23
<br>1.111. 46 [5, 6] 47
<br>1.1..11. 166 [6, 8] 167
<br>1.11..11. 358 [7, 9] 359
<br>1.11..111. 718 [8, 10] 719
<br>1.11..1111. 1438 [9, 11] 1439
<br>1.11..11111. 2878 [10, 12] 2879
<br>1.11..1111111. 11518 [11, 14] 11519
<br>1.11..11111111. 23038 [12, 15] 23039
<br>1.11..11111111... 92152 [13, 17] 92153
<br>1.11..11111111..... 368608 [14, 19] 368609
<br>1.111111.1....1111.. 783420 [15, 20] 783421
<br>1.111111.1....1111..... 6267360 [16, 23] 6267361
<br>1.111111.1....1111...... 12534720 [17, 24] 12534721
<br>1.111111.1.....111.1111111. 100273918 [18, 27] 100273919
<br>1.11..11111111111111.1..11... 377487000 [19, 29] 377487001
<br>1.11..11111111111111.1..11.... 754974000 [20, 30] 754974001
<br>1.11..11111111111111.1..11...... 3019896000 [21, 32] 3019896001
<br>1.11..11111.1..11111...1.11.1111... 24147626872 [22, 35] 24147626873
<br>1.11..11111.1..11111...1.11.1111...1. 96590507490 [23, 37] 96590507491
<br>1.11..111.1......11....11..1.111111111. 385744948222 [24, 39] 385744948223
<br>1.11..111.1......11....11..1.1111111111. 771489896446 [25, 40] 771489896447
<br>1.11..111.1......11....11..1.111111111111. 3085959585790 [26, 42] 3085959585791
<br>1.11..111.1......11....11..1.1111111111111... 24687676686328 [27, 45] 24687676686329
<br>1.111111.1....11111....111..11..1.11..11..11111. 210298272002878 [28, 48] 210298272002879
<br>1.11..111.1......11....11..1.111111111111.1..1..1.. 1580011307924772 [29, 51] 1580011307924773
<br>1.11..111.1......11....11..1.1111111111111...1.1.1111. 12640090463400286 [30, 54] 12640090463400287
<br>1.111111.1....1111.......1111..11.1.1.11.11111..1..111. 26918107252899406 [31, 55] 26918107252899407
  </code></p>  <p>what is the asymptotic growth rate of the records?  it appears worse than O(2^n).</p>  <p>the later entries were calculated with a <a href="http://web.mit.edu/kenta/www/three/prime-binary-shr/aybvgyej/">Haskell program doing branch-and-bound</a>, which is much more efficient than brute force.  below is the key routine.  searching all binary numbers of a given bitwidth is equivalent to traversing a full binary tree of a given height.  because we are looking for records, we know what previous record we need to exceed.  when exploring a node in the middle of the tree, we know how many primes (or primes minus 1) we already have in the path back to the root.  the upper bound of the number of primes left, down to the leaf, is the height above the leaves.  these can be combined to yield an upper bound for the number of primes on this branch of the tree.  if the upper bound is less than the goal, we can prune, abandoning this branch (mzero).</p>  <p>binary numbers are represented as little-endian lists of Bool.  searching the False branch first searches smaller numbers first.  (future work: it's probably better to store the &quot;path so far&quot; as a bitstring.)</p>  <p>dosearch :: forall m . (MonadPlus m) =&gt; Integer -&gt; ([Bool], Integer) -&gt; Integer -&gt; m[Bool];<br>  dosearch goal (_, primessofar) numleft | primessofar+numleft &lt; goal = Monad.mzero;<br>  dosearch _ (pathsofar, _) 0 = return pathsofar;<br>  dosearch goal (pathsofar, primessofar) numleft = let {<br>    nextodd :: [Bool] = True:pathsofar;<br>    nextprimesofar :: Integer = if isPrime $ binarytointeger nextodd<br>     then 1+primessofar<br>     else primessofar;<br>    nextsearch :: [Bool] -&gt; m [Bool];<br>    nextsearch path = dosearch goal (path, nextprimesofar) (pred numleft);<br>  } in nextsearch (False:pathsofar) `Monad.mplus` nextsearch nextodd;</p>  <p><a href="http://kenta.blogspot.com/2022/07/pcljyxvx-infix-notation-decreases.html">(the infix application of mplus eliminates some parentheses.)</a></p>  <p>future work: parallelize, faster primality testing.</p>  <p>below is a list that includes numbers that tie (not necessarily exceed) the record number of primes.  these were found by brute force, so the list does not go as far as above.  the last number produces 21 primes.  no longer are all starting numbers prime or one less than a prime.</p>  <p>0 1 2 3 4 5 6 7 8 9 10 11 12 13 16 17 18 19 20 21 22 23 36 37 40 41 42 43 44 45 46 47 72 73 82 83 88 89 92 93 94 95 106 107 144 145 146 147 148 149 150 151 156 157 162 163 164 165 166 167 178 179 190 191 292 293 312 313 330 331 332 333 334 335 346 347 352 353 356 357 358 359 382 383 586 587 660 661 716 717 718 719 1320 1321 1432 1433 1436 1437 1438 1439 2876 2877 2878 2879 5756 5757 5758 5759 6120 6121 11278 11279 11496 11497 11512 11513 11514 11515 11516 11517 11518 11519 12240 12241 22992 22993 23026 23027 23028 23029 23036 23037 23038 23039 24480 24481 46072 46073 46076 46077 46078 46079 48960 48961 48962 48963 84718 84719 90238 90239 91968 91969 92040 92041 92106 92107 92110 92111 92118 92119 92144 92145 92146 92147 92152 92153 97926 97927 184080 184081 184290 184291 184304 184305 184306 184307 184308 184309 195852 195853 195854 195855 195862 195863 360946 360947 360952 360953 360958 360959 367878 367879 368160 368161 368162 368163 368398 368399 368442 368443 368446 368447 368578 368579 368580 368581 368582 368583 368608 368609 391710 391711 737158 737159 737216 737217 737218 737219 783412 783413 783420 783421 1474432 1474433 1474438 1474439 1566826 1566827 1566840 1566841 1566842 1566843 1566846 1566847 2943000 2943001 2948712 2948713 2948864 2948865 2948866 2948867 2948872 2948873 2948876 2948877 2948878 2948879 2949118 2949119 3133642 3133643 3133652 3133653 3133654 3133655 3133680 3133681 3133682 3133683 3133684 3133685 3133686 3133687 3133692 3133693 3133694 3133695 3136512 3136513 4864080 4864081 5775126 5775127 5775148 5775149 5775270 5775271 5775336 5775337 5886000 5886001 5886002 5886003 5886006 5886007 5890582 5890583 5890606 5890607 5895118 5895119 5895166 5895167 5895366 5895367 5895418 5895419 5897250 5897251 5897266 5897267 5897278 5897279 5897424 5897425 5897426 5897427 5897728 5897729 5897730 5897731 5897732 5897733 5897734 5897735 5897744 5897745 5897746 5897747 5897752 5897753 5897754 5897755 5897756 5897757 5897758 5897759 5897760 5897761 5897766 5897767 5897806 5897807 5897818 5897819 5897832 5897833 5897952 5897953 5898236 5898237 5898238 5898239 6237598 6237599 6259972 6259973 6266926 6266927 6267060 6267061 6267070 6267071 6267076 6267077 6267082 6267083 6267284 6267285 6267286 6267287 6267298 6267299 6267304 6267305 6267306 6267307 6267308 6267309 6267310 6267311 6267346 6267347 6267360 6267361 6267366 6267367 6267388 6267389 11550298 11550299 11550540 11550541 11781166 11781167 11795460 11795461 11795470 11795471 11795518 11795519 12534142 12534143 12534568 12534569 12534616 12534617 12534618 12534619 12534720 12534721 12534778 12534779 25068286 25068287 25069138 25069139 25069440 25069441 25069442 25069443 25069468 25069469 25069556 25069557 25069558 25069559 34214398 34214399 47124666 47124667 47124862 47124863 47161342 47161343 47178132 47178133 47178238 47178239 47181960 47181961 50136572 50136573 50136574 50136575 50136660 50136661 50136958 50136959 50138276 50138277 50138278 50138279 50138470 50138471 50138478 50138479 50138880 50138881 50138882 50138883 50138884 50138885 50138886 50138887 50138926 50138927 50138936 50138937 50138938 50138939 50139112 50139113 50139114 50139115 50139116 50139117 50139118 50139119 68428792 68428793 68428796 68428797 68428798 68428799 92402388 92402389 92404198 92404199 92404342 92404343 94176000 94176001 94176012 94176013 94176028 94176029 94176772 94176773 94176778 94176779 94249332 94249333 94249334 94249335 94249338 94249339 94249720 94249721 94249722 94249723 94249724 94249725 94249726 94249727 94321342 94321343 94322684 94322685 94322686 94322687 94325866 94325867 94326666 94326667 94326718 94326719 94356022 94356023 94356264 94356265 94356266 94356267 94356476 94356477 94356478 94356479 94356570 94356571 94358800 94358801 94358808 94358809 94358826 94358827 94363656 94363657 94363680 94363681 94363692 94363693 94363728 94363729 94363768 94363769 94363920 94363921 94363922 94363923 94364026 94364027 94365888 94365889 94365892 94365893 94371750 94371751 100273056 100273057 100273138 100273139 100273140 100273141 100273144 100273145 100273146 100273147 100273148 100273149 100273150 100273151 100273152 100273153 100273320 100273321 100273322 100273323 100273912 100273913 100273916 100273917 100273918 100273919 100277766 100277767 100277872 100277873 188353558 188353559 188727312 188727313 188727456 188727457 188731786 188731787 188743500 188743501 200546302 200546303 200546640 200546641 200547836 200547837 200547838 200547839 200553106 200553107 200553108 200553109 200555520 200555521 200555526 200555527 200555532 200555533 200555534 200555535 200555542 200555543 200555566 200555567 200555700 200555701 200555712 200555713 200555744 200555745 200555746 200555747 200555752 200555753 273715192 273715193 342841318 342841319 369616798 369616799 369617340 369617341 369621540 369621541 376704000 376704001 376704006 376704007 376707116 376707117 376707118 376707119 376707480 376707481 376997280 376997281 376997338 376997339 376997352 376997353 376998406 376998407 376998888 376998889 376998898 376998899 376998900 376998901 377289658 377289659 377303040 377303041 377303470 377303471 377303532 377303533 377306668 377306669 377425056 377425057 377425912 377425913 377426280 377426281 377454624 377454625 377454626 377454627 377454628 377454629 377454768 377454769 377454912 377454913 377454914 377454915 377454996 377454997 377455692 377455693 377456110 377456111 377463552 377463553 377463570 377463571 377463572 377463573 377463574 377463575 377487000 377487001 401111040 401111041 401111068 401111069 401111400 401111401 401111506 401111507 753408000 753408001 754613338 754613339 754850112 754850113 754851826 754851827 754852560 754852561 754909828 754909829 754927140 754927141 754974000 754974001 1509948000 1509948001 1509948002 1509948003 1604444220 1604444221 1604446026 1604446027 3013632406 3013632407 3018453358 3018453359 3019410240 3019410241 3019708566 3019708567 3019896000 3019896001 6036906718 6036906719 6039792000 6039792001 6039792002 6039792003 6039792006 6039792007 6417777072 6417777073 6417807238 6417807239 12073713072 12073713073 12073813436 12073813437 12073813438 12073813439 12077629236 12077629237 12078563326 12078563327 12078595558 12078595559 12078834268 12078834269 12079584000 12079584001 12079584002 12079584003 12079584004 12079584005 12079584006 12079584007 12079584012 12079584013 12079584014 12079584015 12079584016 12079584017 12079584028 12079584029 12079584046 12079584047 12079584052 12079584053 12834985258 12834985259 12835553760 12835553761 12835553770 12835553771 12835554144 12835554145 12835554146 12835554147 12835554232 12835554233 12835587846 12835587847 12835614476 12835614477 12835614478 12835614479</p></div>
    </content>
    <updated>2022-09-07T00:33:49Z</updated>
    <published>2022-09-07T00:33:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="cs"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="done"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="haskell"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-6757805</id>
      <category term="cs"/>
      <category term="soc"/>
      <category term="plot"/>
      <category term="game"/>
      <category term="crypto"/>
      <category term="geom"/>
      <category term="sci"/>
      <category term="ui"/>
      <category term="wr"/>
      <category term="time"/>
      <category term="sex"/>
      <category term="speech"/>
      <category term="teach"/>
      <category term="haskell"/>
      <category term="edu"/>
      <category term="prod"/>
      <category term="transport"/>
      <category term="et"/>
      <category term="dance"/>
      <category term="ai"/>
      <category term="done"/>
      <category term="qi"/>
      <category term="answer"/>
      <category term="jour"/>
      <category term="food"/>
      <author>
        <name>Unknown</name>
        <email>noreply@blogger.com</email>
      </author>
      <link href="http://kenta.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml">
      <link href="http://www.blogger.com/feeds/6757805/posts/default/-/haskell" rel="self" type="application/atom+xml">
      <link href="http://kenta.blogspot.com/search/label/haskell" rel="alternate" type="text/html">
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html">
      <link href="http://www.blogger.com/feeds/6757805/posts/default/-/haskell/-/haskell?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml">
      <subtitle>mostly on computers and mathematics</subtitle>
      <title>Ken's blog</title>
      <updated>2022-11-16T04:48:39Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://www.joachim-breitner.de/blog/792-More_recursive_definitions</id>
    <link href="http://www.joachim-breitner.de/blog/792-More_recursive_definitions" rel="alternate" type="text/html">
    <title xml:lang="en">More recursive definitions</title>
    <summary type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p>Haskell is a pure and lazy programming language, and the laziness allows us to write some algorithms very elegantly, by recursively referring to already calculated values. A typical example is the following definition of the Fibonacci numbers, as an infinite stream:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-1" tabindex="-1">fibs <span class="ot">=</span> <span class="dv">0</span> <span class="op">:</span> <span class="dv">1</span> <span class="op">:</span> <span class="fu">zipWith</span> (<span class="op">+</span>) fibs (<span class="fu">tail</span> fibs)</a></span></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-1" tabindex="-1">
<h3 id="elegant-graph-traversals">Elegant graph traversals</h3>
<p>A maybe more practical example is the following calculation of the transitive closure of a graph:</p>
</a><div class="sourceCode" id="cb2"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-1" tabindex="-1"></a><pre class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb1-1" tabindex="-1"><code class="sourceCode haskell"><span id="cb2-1"></span></code></a><code class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-1" tabindex="-1"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Set</span> <span class="kw">as</span> <span class="dt">S</span>
<span id="cb2-2"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-2" tabindex="-1"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Map</span> <span class="kw">as</span> <span class="dt">M</span>
<span id="cb2-3"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-3" tabindex="-1">
<span id="cb2-4"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-4" tabindex="-1"><span class="kw">type</span> <span class="dt">Graph</span> <span class="ot">=</span> <span class="dt">M.Map</span> <span class="dt">Int</span> [<span class="dt">Int</span>]
<span id="cb2-5"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-5" tabindex="-1">
<span id="cb2-6"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-6" tabindex="-1"><span class="ot">transitive1 ::</span> <span class="dt">Graph</span> <span class="ot">-&gt;</span> <span class="dt">Graph</span>
<span id="cb2-7"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-7" tabindex="-1">transitive1 g <span class="ot">=</span> M.map S.toList sets
<span id="cb2-8"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-8" tabindex="-1">  <span class="kw">where</span>
<span id="cb2-9"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-9" tabindex="-1"><span class="ot">    sets ::</span> <span class="dt">M.Map</span> <span class="dt">Int</span> (<span class="dt">S.Set</span> <span class="dt">Int</span>)
<span id="cb2-10"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-10" tabindex="-1">    sets <span class="ot">=</span> M.mapWithKey (\v vs <span class="ot">-&gt;</span> S.insert v (S.unions [ sets <span class="op">M.!</span> v' <span class="op">|</span> v' <span class="ot">&lt;-</span> vs ])) g</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-10" tabindex="-1">
<p>We represent graphs as maps from vertex to their successors vertex, and define the resulting map <code>sets</code> recursively: The set of reachable vertices from a vertex <code>v</code> is <code>v</code> itself, plus those reachable by its successors <code>vs</code>, for which we query <code>sets</code>.</p>
<p>And, despite this apparent self-referential recursion, it works!</p>
</a><div class="sourceCode" id="cb3"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-10" tabindex="-1"></a><pre class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb2-10" tabindex="-1"><code class="sourceCode haskell"><span id="cb3-1"></span></code></a><code class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-1" tabindex="-1">ghci<span class="op">&gt;</span> transitive1 <span class="op">$</span> M.fromList [(<span class="dv">1</span>,[<span class="dv">3</span>]),(<span class="dv">2</span>,[<span class="dv">1</span>,<span class="dv">3</span>]),(<span class="dv">3</span>,[])]
<span id="cb3-2"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-2" tabindex="-1">fromList [(<span class="dv">1</span>,[<span class="dv">1</span>,<span class="dv">3</span>]),(<span class="dv">2</span>,[<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>]),(<span class="dv">3</span>,[<span class="dv">3</span>])]</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-2" tabindex="-1">
<h3 id="cyclic-graphs-ruin-it-all">Cyclic graphs ruin it all</h3>
<p>These tricks can be very impressive … until someone tries to use it on a <em>cyclic</em> graph and the program just hangs until we abort it:</p>
</a><div class="sourceCode" id="cb4"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-2" tabindex="-1"></a><pre class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb3-2" tabindex="-1"><code class="sourceCode haskell"><span id="cb4-1"></span></code></a><code class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-1" tabindex="-1">ghci<span class="op">&gt;</span> transitive1 <span class="op">$</span> M.fromList [(<span class="dv">1</span>,[<span class="dv">2</span>,<span class="dv">3</span>]),(<span class="dv">2</span>,[<span class="dv">1</span>,<span class="dv">3</span>]),(<span class="dv">3</span>,[])]
<span id="cb4-2"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-2" tabindex="-1">fromList [(<span class="dv">1</span>,fromList <span class="op">^</span><span class="dt">CInterrupted</span><span class="op">.</span></a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-2" tabindex="-1">
<p>At this point we are thrown back to implement a more pedestrian graph traversal, typically keeping explicit track of vertices that we have seen already:</p>
</a><div class="sourceCode" id="cb5"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-2" tabindex="-1"></a><pre class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb4-2" tabindex="-1"><code class="sourceCode haskell"><span id="cb5-1"></span></code></a><code class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-1" tabindex="-1"><span class="ot">transitive2 ::</span> <span class="dt">Graph</span> <span class="ot">-&gt;</span> <span class="dt">Graph</span>
<span id="cb5-2"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-2" tabindex="-1">transitive2 g <span class="ot">=</span> M.fromList [ (v, S.toList (go S.empty [v])) <span class="op">|</span> v <span class="ot">&lt;-</span> M.keys g ]
<span id="cb5-3"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-3" tabindex="-1">  <span class="kw">where</span>
<span id="cb5-4"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-4" tabindex="-1"><span class="ot">    go ::</span> <span class="dt">S.Set</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> [<span class="dt">Int</span>] <span class="ot">-&gt;</span> <span class="dt">S.Set</span> <span class="dt">Int</span>
<span id="cb5-5"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-5" tabindex="-1">    go seen [] <span class="ot">=</span> seen
<span id="cb5-6"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-6" tabindex="-1">    go seen (v<span class="op">:</span>vs) <span class="op">|</span> v <span class="ot">`S.member`</span> seen <span class="ot">=</span> go seen vs
<span id="cb5-7"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-7" tabindex="-1">    go seen (v<span class="op">:</span>vs) <span class="ot">=</span> go (S.insert v seen) (g <span class="op">M.!</span> v <span class="op">++</span> vs)</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-7" tabindex="-1">
<p>I have written that <code>seen</code>/<code>todo</code> recursion idiom so often in the past, I can almost write it blindly And indeed, this code handles cyclic graphs just fine:</p>
<pre><code>ghci&gt; transitive2 $ M.fromList [(1,[2,3]),(2,[1,3]),(3,[])]
fromList [(1,[1,2,3]),(2,[1,2,3]),(3,[3])]</code></pre>
<p>But this is a bit anticlimactic – Haskell is supposed to be a declarative language, and <code>transitive1</code> declares my intent just fine!</p>
<h3 id="we-can-have-it-all">We can have it all</h3>
</a><p><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb5-7" tabindex="-1">It seems there actually is a way to write essentially the code in <code>transitive1</code>, and still get the right result in all cases, and I have just published a possible implementation as </a><a href="https://hackage.haskell.org/package/rec-def"><code>rec-def</code></a>. In the module <a href="https://hackage.haskell.org/package/rec-def-0.2/docs/Data-Recursive-Set.html"><code>Data.Recursive.Set</code></a> we find an API that resembles that of <code>Set</code>, with a type <code>RSet a</code>, and in addition to conversion functions from and to sets, we find the two operations that we needed in <code>transitive1</code>:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-1" tabindex="-1"><span class="ot">insert ::</span> <span class="dt">Ord</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">RSet</span> a <span class="ot">-&gt;</span> <span class="dt">RSet</span> a</a></span><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-1" tabindex="-1">
<span id="cb7-2"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-2" tabindex="-1"><span class="ot">unions ::</span> <span class="dt">Ord</span> a <span class="ot">=&gt;</span> [<span class="dt">RSet</span> a] <span class="ot">-&gt;</span> <span class="dt">RSet</span> a
<span id="cb7-3"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-3" tabindex="-1"><span class="ot">get ::</span> <span class="dt">RSet</span> a <span class="ot">-&gt;</span> <span class="dt">Set</span> a</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-3" tabindex="-1">
<p>Let’s try that:</p>
</a><div class="sourceCode" id="cb8"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-3" tabindex="-1"></a><pre class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb7-3" tabindex="-1"><code class="sourceCode haskell"><span id="cb8-1"></span></code></a><code class="sourceCode haskell"><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-1" tabindex="-1"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Recursive.Set</span> <span class="kw">as</span> <span class="dt">RS</span>
<span id="cb8-2"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-2" tabindex="-1">
<span id="cb8-3"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-3" tabindex="-1"><span class="ot">transitive2 ::</span> <span class="dt">Graph</span> <span class="ot">-&gt;</span> <span class="dt">Graph</span>
<span id="cb8-4"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-4" tabindex="-1">transitive2 g <span class="ot">=</span> M.map (S.toList <span class="op">.</span> RS.get) sets
<span id="cb8-5"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-5" tabindex="-1">  <span class="kw">where</span>
<span id="cb8-6"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-6" tabindex="-1"><span class="ot">    sets ::</span> <span class="dt">M.Map</span> <span class="dt">Int</span> (<span class="dt">RS.RSet</span> <span class="dt">Int</span>)
<span id="cb8-7"></span></a><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-7" tabindex="-1">    sets <span class="ot">=</span> M.mapWithKey (\v vs <span class="ot">-&gt;</span> RS.insert v (RS.unions [ sets <span class="op">M.!</span> v' <span class="op">|</span> v' <span class="ot">&lt;-</span> vs ])) g</a></code></pre></div><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-7" tabindex="-1">
<p>And indeed it works! Magic!</p>
<pre><code>ghci&gt; transitive2 $ M.fromList [(1,[3]),(2,[1,3]),(3,[])]
fromList [(1,[1,3]),(2,[1,2,3]),(3,[3])]
ghci&gt; transitive2 $ M.fromList [(1,[2,3]),(2,[1,3]),(3,[])]
fromList [(1,[1,2,3]),(2,[1,2,3]),(3,[3])]</code></pre>
<p>To show off some more, here are small examples:</p>
<pre><code>ghci&gt; let s = RS.insert 42 s in RS.get s
fromList [42]
ghci&gt; :{
  let s1 = RS.insert 23 s2
      s2 = RS.insert 42 s1
  in RS.get s1
 :}
fromList [23,42]</code></pre>
<h3 id="how-is-that-possible-is-it-still-haskell">How is that possible? Is it still Haskell?</h3>
<p>The internal workings of the <code>RSet a</code> type will be the topic of a future blog post; let me just briefly mention that it uses unsafe features under the hood, and just keeps applying the equations you gave until a fixed-point is reached. Because it starts with the empty set and all operations provided by <code>Data.Recursive.Set</code> are monotonous (e.g. no <code>difference</code>) it will eventually find the least fixed point.</p>
</a><p><a href="https://www.joachim-breitner.de/blog/tag/English_feed.rss.en#cb8-7" tabindex="-1">Despite the unsafe machinery under the hood, I claim that <code>Data.Recursive.Set</code> is itself nicely safe, and does not destroy Haskell’s nice properties like purity, referential transparency and equational reasoning. If you disagree, I’d like to hear about it (here, on </a><a href="https://mobile.twitter.com/nomeata/status/1566063939762458625">Twitter</a>, <a href="https://www.reddit.com/r/haskell/comments/x4v6x7/pure_recursively_defined_sets_without_looping/">Reddit</a> or <a href="https://discourse.haskell.org/t/solving-cyclic-boolean-implications-with-pure-code-and-laziness/4951/20?u=nomeata">Discourse</a>)! There is a brief discussion at the end of the <a href="https://hackage.haskell.org/package/rec-def-0.2/docs/Data-Recursive-Examples.html">tutorial in <code>Data.Recursive.Example</code></a>.</p>
<h3 id="more-than-sets">More than sets</h3>
<p>The library also provides <code>Data.Recursive.Bool</code> for recursive equations with booleans (preferring <code>False</code>) and <code>Data.Recursive.DualBool</code> (preferring <code>True</code>), and some operations like <code>member :: Ord a =&gt; a -&gt; RSet a -&gt; RBool</code> can actually connect different types. I plan to add other data types (natural numbers, maps, <code>Maybe</code>, with suitable orders) as demand arises and as I come across nice small example use-cases for the documentation (e.g. finding shortest paths in a graph).</p>
<p>I believe this idiom is practically useful in a wide range of applications (which of course all have some underlying graph structure – but then almost everything in Computer Science is a graph). My original motivation was a program analysis. Imagine you want to find out from where in your program you can run into a division by zero. As long as your program does not have recursion, you can simply keep track of a boolean flag while you traverse the program, keeping track a mapping from function names to whether they can divide by zero – all nice and elegant. But once you allow mutually recursive functions, things become tricky. Unless you use <code>RBool</code>! Simply use laziness, pass the analysis result down when analyzing the function’s right-hand sides, and it just works!</p></div>
    </summary>
    <updated>2022-09-03T12:31:51Z</updated>
    <published>2022-09-03T12:31:51Z</published>
    <author>
      <name>Joachim Breitner</name>
      <email>mail@joachim-breitner.de</email>
    </author>
    <source>
      <id>http://www.joachim-breitner.de//blog</id>
      <logo>http://joachim-breitner.de/avatars/avatar_128.png</logo>
      <link href="http://www.joachim-breitner.de//blog" rel="alternate" type="text/html">
      <link href="http://www.joachim-breitner.de/blog_feed.rss" rel="self" type="application/rss+xml">
      <subtitle xml:lang="en">Joachim Breitners Denkblogade</subtitle>
      <title xml:lang="en">nomeataâ€™s mind shares</title>
      <updated>2022-11-04T10:00:57Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://byorgey.wordpress.com/?p=2468</id>
    <link href="https://byorgey.wordpress.com/2022/09/01/competitive-programming-in-haskell-infinite-2d-array/" rel="alternate" type="text/html">
    <link href="https://byorgey.wordpress.com/2022/09/01/competitive-programming-in-haskell-infinite-2d-array/#comments" rel="replies" type="text/html">
    <link href="https://byorgey.wordpress.com/2022/09/01/competitive-programming-in-haskell-infinite-2d-array/feed/atom/" rel="replies" type="application/atom+xml">
    <title xml:lang="en">Competitive programming in Haskell: Infinite 2D array</title>
    <summary type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml">If you like number theory, combinatorics, and/or optimizing Haskell code, I challenge you to solve Infinite 2D Array using Haskell. Level 1: can you come up with a general formula to compute ? Level 2: In general, how can you … <a href="https://byorgey.wordpress.com/2022/09/01/competitive-programming-in-haskell-infinite-2d-array/">Continue reading <span class="meta-nav">→</span></a></div>
    </summary>
    <content type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p>If you like number theory, combinatorics, and/or optimizing Haskell code, I challenge you to solve <a href="https://open.kattis.com/problems/infinite2darray">Infinite 2D Array</a> using Haskell.</p>
<ul>
<li>Level 1: can you come up with a general formula to compute <img alt="F_{x,y}" class="latex" src="https://s0.wp.com/latex.php?latex=F_%7Bx%2Cy%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002">?</li>
<li>Level 2: In general, how can you efficiently compute <img alt="F_{x,y} \pmod {10^9 + 7}" class="latex" src="https://s0.wp.com/latex.php?latex=F_%7Bx%2Cy%7D+%5Cpmod+%7B10%5E9+%2B+7%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002">?</li>
<li>Level 3: Now implement the above ideas in Haskell so your solution actually fits within the 1 second time limit.</li>
</ul>
<p>I have solved it but it was definitely challenging. In a subsequent blog post Iâ€™ll talk about my solution and ask for other optimization ideas.</p></div>
    </content>
    <updated>2022-09-01T17:04:53Z</updated>
    <published>2022-09-01T17:04:53Z</published>
    <category scheme="https://byorgey.wordpress.com" term="competitive programming"/>
    <category scheme="https://byorgey.wordpress.com" term="haskell"/>
    <category scheme="https://byorgey.wordpress.com" term="Kattis"/>
    <category scheme="https://byorgey.wordpress.com" term="number"/>
    <author>
      <name>Brent</name>
      <uri>http://ozark.hendrix.edu/~yorgey/</uri>
    </author>
    <source>
      <id>http://byorgey.wordpress.com/feed/atom/</id>
      <link href="https://byorgey.wordpress.com" rel="alternate" type="text/html">
      <link href="https://byorgey.wordpress.com/feed/atom/" rel="self" type="application/atom+xml">
      <link href="https://byorgey.wordpress.com/osd.xml" rel="search" title="blog :: Brent -&gt; [String]" type="application/opensearchdescription+xml">
      <link href="https://s1.wp.com/opensearch.xml" rel="search" title="WordPress.com" type="application/opensearchdescription+xml">
      <link href="https://byorgey.wordpress.com/?pushpress=hub" rel="hub" type="text/html">
      <title xml:lang="en">blog :: Brent -&gt; [String]</title>
      <updated>2022-10-06T20:01:34Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-1777990983847811806.post-906620765110929969</id>
    <link href="https://www.haskellforall.com/feeds/906620765110929969/comments/default" rel="replies" title="Post Comments" type="application/atom+xml">
    <link href="https://www.haskellforall.com/2022/08/stop-calling-everything-nix.html#comment-form" rel="replies" title="0 Comments" type="text/html">
    <link href="https://www.blogger.com/feeds/1777990983847811806/posts/default/906620765110929969" rel="edit" type="application/atom+xml">
    <link href="https://www.blogger.com/feeds/1777990983847811806/posts/default/906620765110929969" rel="self" type="application/atom+xml">
    <link href="https://www.haskellforall.com/2022/08/stop-calling-everything-nix.html" rel="alternate" title="Stop calling everything &quot;Nix&quot;" type="text/html">
    <title>Stop calling everything &quot;Nix&quot;</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">nix-terminology    <p>One of my pet peeves is when people abuse the term “Nix” without qualification when trying to explain the various components of the Nix ecosystem.</p><p>As a concrete example, a person might say:</p><p>“I hate Nix’s syntax”</p><p>… and when you dig into this criticism you realize that they’re actually complaining about the Nixpkgs API, which is not the same thing as the syntax of the Nix expression language.</p><p>So one of the goals of this post is to introduce some unambiguous terminology that people can use to refer to the various abstraction layers of the Nix ecosystem in order to avoid confusion. I’ll introduce each abstraction layer from the lowest level abstractions to the highest level abstractions.</p><p>Another reason I explain “Nix” in terms of these abstraction layers is because this helps people consult the correct manual. The Nix ecosystem provides three manuals that you will commonly need to refer to in order to become more proficient:</p><ul><li>The <a href="https://nixos.org/manual/nix/stable/">Nix manual</a></li><li>The <a href="https://nixos.org/manual/nixpkgs/stable/">Nixpkgs manual</a></li><li>The <a href="https://nixos.org/manual/nixos/stable/">NixOS manual</a></li></ul><p>… and I hope by the end of this post it will be clearer which manual interests you for any given question.</p><p>Edit: <a href="https://twitter.com/domenkozar/status/1564241948319404032">Domen Kožar pointed out</a> that there is an ongoing effort to standardize terminology here:</p><ul><li><a href="https://github.com/NixOS/nix.dev/issues/275"><code>NixOS/nix.dev</code>#275 - establish nomenclature</a></li></ul><p>I’ll update the post to match the agreed-upon terminology when that is complete.</p><h4 id="layer-0-the-nix-store">Layer #0: The Nix store</h4><p>I use the term “Nix store” to mean essentially everything you can manage with the <code>nix-store</code> command-line tool.</p><p>That is the simplest definition, but to expand upon that, I mean the following files:</p><ul><li>Derivations: <code>/nix/store/*.drv</code></li><li>Build products: <code>/nix/store/*</code> without a <code>.drv</code> extension</li><li>Log files: <code>/nix/var/log/nix/drvs/**</code></li><li>Garbage collection roots: <code>/nix/var/nix/gcroots/**</code></li></ul><p>… and the following operations:</p><ul><li><p>Realizing a derivation</p><p>i.e. converting a <code>.drv</code> file to the corresponding build products using <code>nix-store --realise</code></p></li><li><p>Adding static files to the <code>/nix/store</code></p><p>i.e. <code>nix-store --add</code></p></li><li><p>Creating GC roots for build products</p><p>i.e. the <code>--add-root</code> option to <code>nix-store</code></p></li><li><p>Garbage collecting derivations not protected by a GC root</p><p>i.e. <code>nix-store --gc</code></p></li></ul><p>There are other things the Nix store supports (like profile management), but these are the most important operations.</p><p><strong>CAREFULLY NOTE:</strong> the “Nix store” is independent of the “Nix language” (which we’ll define below). In other words, you could replace the front-end Nix programming language with another language (e.g. Guile scheme, as Guix does). This is because the Nix derivation format (the <code>.drv</code> files) and the <code>nix-store</code>command-line interface are both agnostic of the Nix expression language. I have a talk which delves a bit more into this subject:</p><ul><li><a href="https://www.youtube.com/watch?v=GMQPzv3Sx58">Nix: Under the hood</a></li></ul><h4 id="layer-1-the-nix-language">Layer #1: The Nix language</h4><p>I use the term “Nix language” to encompass three things:</p><ul><li>The programming language: source code we typically store in <code>.nix</code> files</li><li>Instantiation: the interpretation of Nix code to generate <code>.drv</code> files</li><li><a href="https://nixos.wiki/wiki/Flakes">Flakes</a>: pure evaluation and instantiation caching</li></ul><p>To connect this with the previous section, the typical pipeline for converting Nix source code to a build product is:</p><pre><code>Nix source code (*.nix)            │ Nix language<br>      ↓ Instantiation              ├─────────────<br>Nix derivation (/nix/store/*.drv)  │<br>      ↓ Realization                │ Nix store<br>Nix build product (/nix/store/*)   │</code></pre><p>In isolation, the Nix language is “just” a purely functional programming language with simple language constructs. For example, here is a sample Nix REPL session:</p><pre class="nix"><code>nix-repl&gt; 2 + 2<br>4<br><br>nix-repl&gt; x = &quot;world&quot;   <br><br>nix-repl&gt; &quot;Hello, &quot; + x  <br>&quot;Hello, world&quot;<br><br>nix-repl&gt; r = { a = 1; b = true; }<br><br>nix-repl&gt; if r.b then r.a else 0<br>1</code></pre><p>However, as we go up the abstraction ladder the idiomatic Nix code we’ll encounter will begin to stray from that simple functional core.</p><p><strong>NOTE:</strong> Some people will disagree with my choice to include flakes at this abstraction layer since flakes are sometimes marketed as a dependency manager (similar to <code>niv</code>). I don’t view them in this way and I treat flakes as primarily as mechanism for purifying evaluation and caching instantiation, as outlined in this post:</p><ul><li><a href="https://www.tweag.io/blog/2020-06-25-eval-cache/">Nix Flakes, Part 2: Evaluation Caching</a></li></ul><p>… and if you view flakes in that capacity then they are a feature of the Nix language since evaluation/instantiation are the primary purpose of the programming language.</p><h4 id="layer-2-the-nix-build-tool">Layer #2: The Nix build tool</h4><p>This layer encompasses the command-line interface to both the “Nix store” and the “Nix language”.</p><p>This includes (but is not limited to):</p><ul><li><code>nix-store</code> (the command, not the underlying store)</li><li><code>nix-instantiate</code></li><li><code>nix-build</code></li><li><code>nix-shell</code></li><li><code>nix</code> subcommands, including: <ul><li><code>nix build</code></li><li><code>nix run</code></li><li><code>nix develop</code></li><li><code>nix log</code></li><li><code>nix flake</code></li></ul></li></ul><p>I make this distinction because the command-line interface enables some additional niceties that are not inherent to the underlying layers. For example, the <code>nix build</code> command has some flake integration so that you can say <code>nix build someFlake#somePackage</code> and this command-line API nicety is not necessarily inherent to flakes (in my view).</p><p>Also, many of these commands operate at both Layer 0 and Layer 1, which can blur the distinction between the two. For example the <code>nix-build</code> command can accept a layer 1 Nix program (i.e. a <code>.nix</code> file) or a layer 0 derivation (i.e. a <code>.drv</code> file).</p><p>Another thing that blurs the distinction is that the Nix manual covers all three of the layers introduced so far, ranging from the Nix store to the command-line interface. However, if you want to better understand these three layers then that is correct place to begin:</p><ul><li><a href="https://nixos.org/manual/nix/stable/introduction.html">Nix manual</a></li></ul><h4 id="layer-3-nixpkgs">Layer #3: Nixpkgs</h4><p>Nixpkgs is a software distribution (a.k.a. “distro”) for Nix. Specifically, all of the packaging logic for Nixpkgs is hosted on GitHub here:</p><ul><li><a href="https://github.com/NixOS/nixpkgs">GitHub - <code>NixOS/nix</code></a></li></ul><p>This repository contains a large number of Nix expressions for building packages across several platforms. If the “Nix language” is a programming language then “Nixpkgs” is a gigantic “library” authored within that language. There are other Nix “libraries” outside of Nixpkgs but Nixpkgs is the one you will interact with the most.</p><p>The Nixpkgs repository establishes several widespread idioms and conventions, including:</p><ul><li>The standard environment (a.k.a. <code>stdenv</code>) for authoring a package <ul><li>There are also language-specific standard-environments, too</li></ul></li><li>A domain-specific language for overriding individual packages or sets of packages</li></ul><p>When people complain about “Nix’s syntax”, most of the time they’re actually complaining about Nixpkgs and more specifically complaining about the Nixpkgs system for overriding packages. However, I can see how people might mistake the two.</p><p>The reason for the confusion is that the Nixpkgs support for overrides is essentially an embedded domain-specific language, meaning that you still express everything in the Nix language (layer 1), but the ways in which you express things is fundamentally different than if you were simply using low-level Nix language features.</p><p>As a contrived example, this “layer 1” Nix code:</p><pre class="nix"><code>let<br>  x = 1;<br><br>  y = x + 2;</code></pre><p>… would roughly correspond to the following “layer 3” Nixpkgs overlay:</p><pre class="nix"><code>self: super: {<br>  x = 1;<br><br>  y = self.x + 2;<br>}</code></pre><p>The reason why Nixpkgs doesn’t do the simpler “layer 1” thing is because Nixpkgs is designed to support “late binding” of expressions, meaning that everything can be overridden, even dependencies deep within the dependency tree. Moreover, this overriding is done in such a way that everything “downstream” of the overrride (i.e. all reverse dependencies) pick up the change correctly.</p><p>As a more realistic example, the following program:</p><pre class="nix"><code>let<br>  pkgs = import &lt;nixpkgs&gt; { };<br><br>  fast-tags =<br>    pkgs.haskell.lib.justStaticExecutables pkgs.haskellPackages.fast-tags;<br><br>  fast-tags-no-tests =<br>    pkgs.haskell.lib.dontCheck fast-tags;<br><br>in<br>  fast-tags-no-tests</code></pre><p>… is simpler, but is not an idiomatic use of Nixpkgs because it is not using the overlay system and therefore does not support late binding. The more idiomatic analog would be:</p><pre class="nix"><code>let<br>  overlay = self: super: {<br>    fast-tags =<br>      self.haskell.lib.justStaticExecutables self.haskellPackages.fast-tags;<br><br>    fast-tags-no-tests =<br>      self.haskell.lib.dontCheck self.fast-tags;<br>  };<br><br>  pkgs = import &lt;nixpkgs&gt; { overlays = [ overlay ]; };<br><br>in<br>  pkgs.fast-tags-no-tests</code></pre><p>You can learn more about this abstraction layer by consulting the Nixpkgs manual:</p><ul><li><a href="https://nixos.org/manual/nixpkgs/stable/">Nixpkgs manual</a></li></ul><h4 id="layer-4-nixos">Layer #4: NixOS</h4><p>NixOS is an operating system that is (literally) built on Nixpkgs. Specifically, there is a <code>./nixos/</code> subdirectory of the Nixpkgs repository for all of the NixOS-related logic.</p><p>NixOS is based on the NixOS module system, which is yet another embedded domain-specific language. In other words, you configure NixOS with Nix code, but the idioms of that Nix code depart even more wildly from straightforward “layer 1” Nix code.</p><p>NixOS modules were designed to look more like Terraform modules than Nix code, but they are still technically Nix code. For example, this is what the NixOS module for the <code>lorri</code> service looks like at the time of this writing:</p><pre class="nix"><code>{ config, lib, pkgs, ... }:<br><br>let<br>  cfg = config.services.lorri;<br>  socketPath = &quot;lorri/daemon.socket&quot;;<br>in {<br>  options = {<br>    services.lorri = {<br>      enable = lib.mkOption {<br>        default = false;<br>        type = lib.types.bool;<br>        description = lib.mdDoc ''<br>          Enables the daemon for `lorri`, a nix-shell replacement for project<br>          development. The socket-activated daemon starts on the first request<br>          issued by the `lorri` command.<br>        '';<br>      };<br>      package = lib.mkOption {<br>        default = pkgs.lorri;<br>        type = lib.types.package;<br>        description = lib.mdDoc ''<br>          The lorri package to use.<br>        '';<br>        defaultText = lib.literalExpression &quot;pkgs.lorri&quot;;<br>      };<br>    };<br>  };<br><br>  config = lib.mkIf cfg.enable {<br>    systemd.user.sockets.lorri = {<br>      description = &quot;Socket for Lorri Daemon&quot;;<br>      wantedBy = [ &quot;sockets.target&quot; ];<br>      socketConfig = {<br>        ListenStream = &quot;%t/${socketPath}&quot;;<br>        RuntimeDirectory = &quot;lorri&quot;;<br>      };<br>    };<br><br>    systemd.user.services.lorri = {<br>      description = &quot;Lorri Daemon&quot;;<br>      requires = [ &quot;lorri.socket&quot; ];<br>      after = [ &quot;lorri.socket&quot; ];<br>      path = with pkgs; [ config.nix.package git gnutar gzip ];<br>      serviceConfig = {<br>        ExecStart = &quot;${cfg.package}/bin/lorri daemon&quot;;<br>        PrivateTmp = true;<br>        ProtectSystem = &quot;strict&quot;;<br>        ProtectHome = &quot;read-only&quot;;<br>        Restart = &quot;on-failure&quot;;<br>      };<br>    };<br><br>    environment.systemPackages = [ cfg.package ];<br>  };<br>}</code></pre><p>You might wonder how NixOS relates to the underlying layers. For example, if Nix is a build system, then how do you “build” NixOS? I have another post which elaborates on that subject here:</p><ul><li><a href="https://www.haskellforall.com/2018/08/nixos-in-production.html">NixOS in production</a></li></ul><p>Also, you can learn more about this abstraction layer by consulting the NixOS manual:</p><ul><li><a href="https://nixos.org/manual/nixos/stable/">NixOS manual</a></li></ul><h4 id="nix-ecosystem">Nix ecosystem</h4><p>I use the term “Nix ecosystem” to describe all of the preceding layers and other stuff not mentioned so far (like <code>hydra</code>, the continuous integration service).</p><p>This is not a layer of its own, but I mention this because I prefer to use “Nix ecosystem” instead of “Nix” to avoid ambiguity, since the latter can easily be mistaken for an individual abstraction layer (especially the Nix language or the Nix build tool).</p><p>However, when I do hear people say “Nix”, then I generally understand it to mean the “Nix ecosystem” unless they clarify otherwise.</p><h4 id="conclusion">Conclusion</h4><p>Hopefully this passive aggressive post helps people express themselves a little more precisely when discussing the Nix ecosystem.</p><p>If you enjoy this post, you will probably also like this other post of mine:</p><ul><li><a href="https://www.haskellforall.com/2022/03/the-hard-part-of-type-checking-nix.html">The hard part of type-checking Nix</a></li></ul><p>… since that touches on the Nixpkgs and NixOS embedded domain-specific languages and how they confound the user experience.</p><p>I’ll conclude this post with the following obligatory joke:</p><blockquote><p>I’d just like to interject for a moment. What you’re refering to as Nix, is in fact, NixOS, or as I’ve recently taken to calling it, Nix plus OS. Nix is not an operating system unto itself, but rather another free component of a fully functioning ecosystem made useful by the Nix store, Nix language, and Nix build tool comprising a full OS as defined by POSIX.</p><p>Many Guix users run a modified version of the Nix ecosystem every day, without realizing it. Through a peculiar turn of events, the operating system based on Nix which is widely used today is often called Nix, and many of its users are not aware that it is basically the Nix ecosystem, developed by the NixOS foundation.</p><p>There really is a Nix, and these people are using it, but it is just a part of the system they use. Nix is the expression language: the program in the system that specifies the services and programs that you want to build and run. The language is an essential part of the operating system, but useless by itself; it can only function in the context of a complete operating system. Nix is normally used in combination with an operating system: the whole system is basically an operating system with Nix added, or NixOS. All the so-called Nix distributions are really distributions of NixOS!</p></blockquote></div>
    </content>
    <updated>2022-08-29T14:20:38Z</updated>
    <published>2022-08-29T13:16:00Z</published>
    <author>
      <name>Gabriella Gonzalez</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/01917800488530923694</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-1777990983847811806</id>
      <author>
        <name>Gabriella Gonzalez</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/01917800488530923694</uri>
      </author>
      <link href="https://www.haskellforall.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml">
      <link href="https://www.blogger.com/feeds/1777990983847811806/posts/default" rel="self" type="application/atom+xml">
      <link href="https://www.haskellforall.com/" rel="alternate" type="text/html">
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html">
      <link href="https://www.blogger.com/feeds/1777990983847811806/posts/default?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml">
      <title>Haskell for all</title>
      <updated>2022-11-14T19:18:39Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>https://www.fpcomplete.com/blog/partnership-portworx-pure-storage/</id>
    <link href="https://www.fpcomplete.com/blog/partnership-portworx-pure-storage/" rel="alternate" type="text/html">
    <title xml:lang="en">FP Complete Corporation Announces Partnership with Portworx by Pure Storage</title>
    <content type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p><strong>FP Complete Corporation Announces Partnership with Portworx by Pure Storage to Streamline World-Class DevOps Consulting Services with State-of-the-Art, End-To-End Storage and Data Management Solution for Kubernetes Projects.</strong></p>
<p><strong>Charlotte, North Carolina (August 31, 2022)</strong> – FP Complete Corporation, a global technology  partner that specializes in DevSecOps, Cloud Native Computing, and Advanced Server-Side Programming Languages today announced that it has partnered with Portworx by Pure Storage  to bring an integrated solution to customers seeking DevSecOps consulting services for the  management of persistent storage, data protection, disaster recovery, data security, and hybrid  data migrations.</p>
<p>The partnership between FP Complete Corporation and Portworx will be integral in providing FP  Complete's DevSecOps and Cloud Enablement clients with a data storage platform designed to  run in a container that supports any cloud physical storage on any Kubernetes distribution.</p>
<p>Portworx Enterprise gets right to the heart of what developers and Kubernetes admins want:  data to behave like a cloud service. Developers and Admins wish to request Storage based on  their requirements (capacity, performance level, resiliency level, security level, access,  protection level, and more) and let the data management layer figure out all the details.  Portworx PX-Backup adds enterprise-grade point-and-click backup and recovery for all  applications running on Kubernetes, even if they are stateless.</p>
<p>Portworx shortens development timelines and headaches for companies moving from on-prem to cloud. In addition, the integration between FP Complete Corporation and Portworx allows  the easy exchange of best practices information, so design and storage run in parallel.</p>
<p>Gartner predicts that by 2025, more than 85% of global organizations will be running  containerized applications in production, up from less than 35% in 2019<sup>1</sup>. As container  adoption increases and more applications are being deployed in the enterprise, these  organizations want more options to manage stateful and persistent data associated with these  modern applications.</p>
<p>&quot;It is my pleasure to announce that Pure Storage can now be utilized by our world-class  engineers needing a fully integrated, end-to-end storage and data management solution for our  DevSecOps clients with complicated Kubernetes projects. Pure Storage is known globally for its  strength in the storage industry, and this partnership offers strong support for our business,&quot; said Wes Crook, CEO of FP Complete Corporation.</p>
<p>“There can be zero doubt that most new cloud-native apps are built on containers and  orchestrated by Kubernetes. Unfortunately, the early development on containers resulted in  lots of data access and availability issues due to a lack of enterprise-grade persistent storage  data management and low data visibility. With Portworx and the aid of Kubernetes experts like FP Complete, we can offer customers a rock-solid, enterprise-class, cloud-native development  platform that delivers end-to-end application and data lifecycle management that significantly  lowers the risks and costs of operating cloud-native application infrastructure,” said Venkat  Ramakrishnan, VP, Engineering, Cloud Native Business Unit, Pure Storage.</p>
<div><u><strong>About FP Complete Corporation</strong></u></div>
Founded in 2012 by Aaron Contorer, former Microsoft executive, FP Complete Corporation is known globally as the one-stop, full-stack technology shop that delivers agile, reliable, repeatable, and highly secure software. In 2019, we launched our flagship platform, Kube360®, which is a fully managed enterprise Kubernetes-based DevOps ecosystem. With Kube360, FP Complete is now well positioned to provide a complete suite of products and solutions to our clients on their journey towards cloudification, containerization, and DevOps best practices. The Company's mission is to deliver superior software engineering to build great software for our clients. FP Complete Corporation serves over 200+ global clients and employs over 70 people worldwide. It has won many awards and made the Inc. 5000 list in 2020 for being one of the 5000 fastest-growing private companies in America. For more information about FP Complete Corporation, visit its website at [www.fpcomplete.com](https://www.fpcomplete.com/).
<p><sup>1</sup> <small>Arun Chandrasekaran, <a href="https://www.gartner.com/en/documents/3988395">Best Practices for Running Containers and Kubernetes in Production</a>, Gartner, August 2020</small></p></div>
    </content>
    <updated>2022-08-29T00:00:00Z</updated>
    <published>2022-08-29T00:00:00Z</published>
    <source>
      <id>https://www.fpcomplete.com/atom.xml</id>
      <author>
        <name>FP Complete</name>
      </author>
      <link href="https://www.fpcomplete.com/atom.xml" rel="self" type="application/atom+xml">
      <link href="https://www.fpcomplete.com" rel="alternate" type="text/html">
      <subtitle xml:lang="en">Blog posts from FP Complete, focusing on Rust, Haskell, and DevOps</subtitle>
      <title xml:lang="en">FP Complete Blog</title>
      <updated>2022-08-29T00:00:00Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-1777990983847811806.post-2613892908644813447</id>
    <link href="https://www.haskellforall.com/feeds/2613892908644813447/comments/default" rel="replies" title="Post Comments" type="application/atom+xml">
    <link href="https://www.haskellforall.com/2022/08/incrementally-package-haskell-program.html#comment-form" rel="replies" title="4 Comments" type="text/html">
    <link href="https://www.blogger.com/feeds/1777990983847811806/posts/default/2613892908644813447" rel="edit" type="application/atom+xml">
    <link href="https://www.blogger.com/feeds/1777990983847811806/posts/default/2613892908644813447" rel="self" type="application/atom+xml">
    <link href="https://www.haskellforall.com/2022/08/incrementally-package-haskell-program.html" rel="alternate" title="Incrementally package a Haskell program using Nix" type="text/html">
    <title>Incrementally package a Haskell program using Nix</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">incremental-nix    <p>This post walks through how to take a standalone Haskell file and progressively package the file using Nix. In other words, we will tour a spectrum of packaging options ranging from simple to fancy.</p><p>The running example will be the following standalone single-file Haskell program:</p><ul><li><a href="https://github.com/Gabriella439/spire/blob/5a35feb5629df27d9c973d36d9bf940dd85445eb/Spire.hs">GitHub - Gabriella439/spire - Spire.hs</a></li></ul><p>I won’t go into detail about what that program does, although you can study the program if you are curious. Essentially, I’m planning to deliver a talk based on that program at <a href="https://munihac.de/2022.html">this year’s MuniHac</a> and I wanted to package it up so that other people could collaborate on the program with me during the hackathon.</p><p>When I began writing this post, there was no packaging logic for this program; it’s a standalone Haskell file. However, this file has several dependencies outside of Haskell’s standard library, so up until now I needed some way to obtain those dependencies for development.</p><h4 id="stage-0-ghc.withpackages">Stage 0: <code>ghc.withPackages</code></h4><p>The most low-tech way that you can hack on a Haskell program using Nix is to use <code>nix-shell</code> to obtain a transient development environment (this is what I had done up until now).</p><p>Specifically, you can do something like this:</p><div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb1-1" tabindex="-1"></a><span class="ex">$</span> nix-shell <span class="at">--packages</span> <span class="st">'ghc.withPackages (pkgs: [ pkgs.mtl pkgs.MemoTrie pkgs.containers pkgs.pretty-show ])'</span></span></code></pre></div><p>… where <code>pkgs.mtl</code> and <code>pkgs.MemoTrie</code> indicate that I want to include the <code>mtl</code> and <code>MemoTrie</code>packages in my Haskell development environment.</p><p>Inside of that development environment I can build and run the file using <code>ghc</code>. For example, I can use <code>ghc -O</code> to build an executable to run:</p><div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-1" tabindex="-1"></a><span class="ex">[nix-shell]$</span> ghc <span class="at">-O</span> Spire.hs</span><br><span id="cb2-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-2" tabindex="-1"></a><span class="ex">[nix-shell]$</span> ./Spire</span><br><span id="cb2-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb2-3" tabindex="-1"></a><span class="ex">…</span></span></code></pre></div><p>… or if I don’t care about optimizations I can interpret the file using <code>runghc</code>:</p><div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb3-1" tabindex="-1"></a><span class="ex">$</span> runghc Spire.hs</span><br><span id="cb3-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb3-2" tabindex="-1"></a><span class="ex">…</span></span></code></pre></div><h4 id="stage-1-ide-support">Stage 1: IDE support</h4><p>Once I’m inside a Nix shell I can begin to take advantage of integrated development environment (IDE) support.</p><p>The two most common tools Haskell developers use for rapid feedback are <code>ghcid</code> and <code>haskell-language-server</code>:</p><ul><li><p><code>ghcid</code> provides a command-line interface for fast type-checking feedback but doesn’t provide other IDE-like features</p></li><li><p><code>haskell-language-server</code> is more of a proper IDE that you use in conjunction with some editor</p></li></ul><p>I can obtain either tool by exiting from the shell and creating a new shell that includes the desired tool.</p><p>For example, if I want to use <code>ghcid</code> then I recreate the <code>nix-shell</code> using the following command:</p><div class="sourceCode" id="cb4"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb4-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb4-1" tabindex="-1"></a><span class="ex">$</span> nix-shell <span class="at">--packages</span> ghcid <span class="st">'ghc.withPackages (pkgs: [ pkgs.mtl pkgs.MemoTrie pkgs.containers pkgs.pretty-show ])'</span></span></code></pre></div><p>… and then I can tell <code>ghcid</code> to continuously type-check my file using:</p><div class="sourceCode" id="cb5"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb5-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb5-1" tabindex="-1"></a><span class="ex">[nix-shell]$</span> ghcid Spire.hs</span><br><span id="cb5-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb5-2" tabindex="-1"></a><span class="ex">…</span></span></code></pre></div><p>If I want to use <code>haskell-language-server</code>, then I recreate the <code>nix-shell</code> using this command:</p><div class="sourceCode" id="cb6"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb6-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb6-1" tabindex="-1"></a><span class="ex">$</span> nix-shell <span class="at">--packages</span> haskell-language-server <span class="st">'ghc.withPackages (pkgs: [ pkgs.mtl pkgs.MemoTrie pkgs.containers pkgs.pretty-show ])'</span></span></code></pre></div><p>… and then I can explore the code in any editor that supports the language server protocol.</p><p>Note that if you use VSCode as your editor then you may need to install some additional plugins:</p><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=justusadam.language-haskell">Haskell Syntax Highlighting</a> plugin</li><li><a href="https://marketplace.visualstudio.com/items?itemName=haskell.haskell">Haskell</a>plugin</li></ul><p>… and the next section will show how to install VSCode and those plugins using Nix.</p><p>However, once you do install those plugins then you can open the file in VSCode from within the <code>nix-shell</code> using:</p><div class="sourceCode" id="cb7"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb7-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb7-1" tabindex="-1"></a><span class="ex">[nix-shell]$</span> code Spire.hs</span></code></pre></div><p>… and once you <a href="https://code.visualstudio.com/docs/editor/workspace-trust">trust the file</a> the IDE features will kick in.</p><h4 id="stage-2-global-development-environment">Stage 2: Global development environment</h4><p>Sometimes I like to globally install development tools that are commonly shared between projects. For example, if I use <code>ghcid</code> or <code>haskell-language-server</code> across all my projects then I don’t want to have to explicitly enumerate that tool in each project’s Nix shell.</p><p>Moreover, my tool preferences might not be shared by other developers. If I share my <code>nix-shell</code> with other developers for a project then I probably don’t want to add editors/IDEs or other command-line tools to that environment because then they have to download those tools regardless of whether they plan to use them.</p><p>However, I don’t want to globally install development tools like this:</p><div class="sourceCode" id="cb8"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb8-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb8-1" tabindex="-1"></a><span class="ex">$</span> nix-env <span class="at">--install</span> <span class="at">--file</span> <span class="st">'&lt;nixpkgs&gt;'</span> <span class="at">--attr</span> ghcid</span><br><span id="cb8-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb8-2" tabindex="-1"></a><span class="ex">$</span> nix-env <span class="at">--install</span> <span class="at">--file</span> <span class="st">'&lt;nixpkgs&gt;'</span> <span class="at">--attr</span> haskell-language-server</span></code></pre></div><p>Part of the reason I use Nix is to avoid imperatively managing my development environment. Fortunately, though, <code>nix-env</code>supports a more declarative way of managing dependencies.</p><p>What you can do instead is save a file like this to <code>~/default.nix</code>:</p><pre class="nix"><code>let<br>  # For VSCode<br>  config = { allowUnfree = true; };<br><br>  overlay = pkgsNew: pkgsOld: {<br>    # Here's an example of how to use Nix to install VSCode with plugins managed<br>    # by Nix, too<br>    vscode-with-extensions = pkgsOld.vscode-with-extensions.override {<br>      vscodeExtensions = [<br>        pkgsNew.vscode-extensions.haskell.haskell<br>        pkgsNew.vscode-extensions.justusadam.language-haskell<br>      ]; <br>    };<br>  };<br><br>  pkgs = import &lt;nixpkgs&gt; { inherit config; overlays = [ overlay ]; };<br><br>in      <br>  { inherit (pkgs)<br>      # I included some sample useful development tools for Haskell.  Feel free<br>      # to customize.<br>      cabal-install<br>      ghcid<br>      haskell-language-server<br>      stylish-haskell<br>      vscode-with-extensions <br>    ; <br>  }     </code></pre><p>… and once you create that file you have two options.</p><p>The first option is that you can set your global development environment to match the file by running:</p><div class="sourceCode" id="cb10"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb10-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb10-1" tabindex="-1"></a><span class="ex">$</span> nix-env <span class="at">--remove-all</span> <span class="at">--install</span> <span class="at">--file</span> ~/default.nix</span></code></pre></div><blockquote><p>NOTE: At the time of this writing you may also need to add <code>--system x86_64-darwin</code> if you are trying out these examples on an M1 Macbook. For more details, see:</p><ul><li><a href="https://evanrelf.com/building-x86-64-packages-with-nix-on-apple-silicon">Building x86-64 Packages With Nix on Apple Silicon</a></li></ul></blockquote><p>Carefully note the <code>--remove-all</code>, which resets your development environment to match the file, so that nothing from your old development environment is accidentally carried over into your new development environment. This makes our use of the <code>nix-env</code>command truly declarative.</p><p>The second option is that you can change the file to create a valid shell, like this:</p><pre class="nix"><code>let<br>  config = { allowUnfree = true; };<br><br>  overlay = pkgsNew: pkgsOld: {<br>    vscode-with-extensions = pkgsOld.vscode-with-extensions.override {<br>      vscodeExtensions = [<br>        pkgsNew.vscode-extensions.haskell.haskell<br>        pkgsNew.vscode-extensions.justusadam.language-haskell<br>      ];<br>    };<br>  };<br><br>  pkgs = import &lt;nixpkgs&gt; { inherit config; overlays = [ overlay ]; };<br><br>in<br>  pkgs.mkShell {<br>    packages = [<br>      pkgs.ghcid<br>      pkgs.haskell-language-server<br>      pkgs.stylish-haskell<br>      pkgs.vscode-with-extensions<br>      pkgs.cabal-install<br>    ];<br>  }</code></pre><p>… and then run:</p><div class="sourceCode" id="cb12"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb12-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb12-1" tabindex="-1"></a><span class="ex">$</span> nix-shell ~/default.nix</span></code></pre></div><p>Or, even better, you can rename the file to <code>~/shell.nix</code>and then if you’re already in your home directory (e.g. you just logged into your system), then you can run:</p><div class="sourceCode" id="cb13"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb13-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb13-1" tabindex="-1"></a><span class="ex">$</span> nix-shell</span></code></pre></div><p>… which will select <code>~/shell.nix</code> by default. This lets you get a completely transient development environment so that you never have to install anything development tools globally.</p><p>These <code>nix-shell</code> commands stack, so you can first run <code>nix-shell</code> to obtain your global development environment and then use <code>nix-shell</code> a second time to obtain project-specific dependencies.</p><p>My personal preference is to use the declarative <code>nix-env</code>trick for installing global development tools. In my opinion it’s just as elegant as <code>nix-shell</code> and slightly less hassle.</p><h4 id="stage-3-cabal">Stage 3: Cabal</h4><p>Anyway, enough about global development tools. Back to our Haskell project!</p><p>So <code>ghc.withPackages</code> is a great way to just start hacking on a standalone Haskell program when you don’t want to worry about packaging up the program. However, at some point you might want to share the program with the others or do a proper job of packaging if you’re trying to <a href="https://en.wiktionary.org/wiki/productionize">productionize</a>the code.</p><p>That brings us to the next step, which is packaging our Haskell program with a Cabal file (a Haskell package manifest). We’ll need the <code>cabal-install</code> command-line tool before we proceed further, so you’ll want to add that tool to your global development environment (see the previous section).</p><p>To create our <code>.cabal</code> file we can run the following command from the top-level directory of our Haskell project:</p><div class="sourceCode" id="cb14"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb14-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb14-1" tabindex="-1"></a><span class="ex">$</span> cabal init <span class="at">--interactive</span></span><br><span id="cb14-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb14-2" tabindex="-1"></a><span class="ex">Should</span> I generate a simple project with sensible defaults<span class="pp">?</span> [default: y] n</span><br><span id="cb14-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb14-3" tabindex="-1"></a><span class="ex">…</span></span></code></pre></div><p>… and follow the prompts to create a starting point for our <code>.cabal</code> file.</p><p>After completing those choices and trimming down the <code>.cabal</code> file (to keep the example simple), I get a file that looks like this:</p><pre class="cabal"><code>cabal-version:      2.4<br>name:               spire<br>version:            1.0.0<br>license:            BSD-3-Clause<br>license-file:       LICENSE<br><br>executable spire<br>    main-is:          Spire.hs<br>    build-depends:    base ^&gt;=4.14.3.0<br>    default-language: Haskell2010</code></pre><p>The only thing I’m going change for now is to add dependencies to the <code>build-depends</code> section and increase the upper bound on <code>base</code>::</p><pre class="cabal"><code>cabal-version:      2.4<br>name:               spire<br>version:            1.0.0<br>license:            BSD-3-Clause<br>license-file:       LICENSE<br><br>executable spire<br>    main-is:          Spire.hs<br>    build-depends:    base &gt;=4.14.3.0 &amp;&amp; &lt; 5<br>                    , MemoTrie<br>                    , containers<br>                    , mtl<br>                    , pretty-show<br>                    , transformers<br>    default-language: Haskell2010</code></pre><h4 id="stage-4-cabal2nix---shell">Stage 4: <code>cabal2nix --shell</code></h4><p>Adding a <code>.cabal</code> file suffices to share our Haskell package with other Haskell developers if they’re not using Nix. However, if we want to Nix-enable package our package then we have a few options.</p><p>The simplest option is to run the following command from the top-level of the Haskell project:</p><pre><code>$ cabal2nix --shell . &gt; shell.nix</code></pre><p>That will create something similar to the following <code>shell.nix</code> file:</p><pre class="nix"><code>{ nixpkgs ? import &lt;nixpkgs&gt; {}, compiler ? &quot;default&quot;, doBenchmark ? false }:<br><br>let<br><br>  inherit (nixpkgs) pkgs;<br><br>  f = { mkDerivation, base, containers, lib, MemoTrie, mtl<br>      , pretty-show, transformers<br>      }:<br>      mkDerivation {<br>        pname = &quot;spire&quot;;<br>        version = &quot;1.0.0&quot;;<br>        src = ./.;<br>        isLibrary = false;<br>        isExecutable = true;<br>        executableHaskellDepends = [<br>          base containers MemoTrie mtl pretty-show transformers<br>        ];<br>        license = lib.licenses.bsd3;<br>      };<br><br>  haskellPackages = if compiler == &quot;default&quot;<br>                       then pkgs.haskellPackages<br>                       else pkgs.haskell.packages.${compiler};<br><br>  variant = if doBenchmark then pkgs.haskell.lib.doBenchmark else pkgs.lib.id;<br><br>  drv = variant (haskellPackages.callPackage f {});<br><br>in<br><br>  if pkgs.lib.inNixShell then drv.env else drv</code></pre><p>… and if you run <code>nix-shell</code> within the same directory the shell environment will have the Haskell dependencies you need to build and run project using <code>cabal</code>:</p><div class="sourceCode" id="cb19"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb19-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb19-1" tabindex="-1"></a><span class="ex">$</span> nix-shell</span><br><span id="cb19-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb19-2" tabindex="-1"></a><span class="ex">[nix-shell]$</span> cabal run</span><br><span id="cb19-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb19-3" tabindex="-1"></a><span class="ex">…</span></span></code></pre></div><p>… and tools like <code>ghcid</code> and <code>haskell-language-server</code> will also work within this shell, too. The only difference is that <code>ghcid</code> now takes no arguments, since it will auto-detect the cabal project in the current directory:</p><div class="sourceCode" id="cb20"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb20-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb20-1" tabindex="-1"></a><span class="ex">[nix-shell]$</span> ghcid</span></code></pre></div><p>Note that this <code>nix-shell</code> will <strong>NOT</strong>include <code>cabal</code> by default. You will need to globally install <code>cabal</code> (see the prior section on “Global development environment”).</p><p>This <code>cabal2nix --shell</code> workflow is sufficiently lightweight that you can Nixify other people’s projects on the fly when hacking on them locally. A common thing I do if I need to make a change to a person’s project is to clone their repository, run:</p><div class="sourceCode" id="cb21"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb21-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb21-1" tabindex="-1"></a><span class="ex">$</span> cabal2nix <span class="at">--shell</span> . <span class="op">&gt;</span> shell.nix</span><br><span id="cb21-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb21-2" tabindex="-1"></a><span class="ex">$</span> nix-shell</span></code></pre></div><p>… and start hacking away. I don’t even need to upstream the <code>shell.nix</code> file I created in this way; I just keep it around locally for my own hacking.</p><p>In fact, I typically don’t want to upstream such a <code>shell.nix</code> file (even if the upstream author were receptive to Nix), because there are more robust Nix expressions we can upstream instead.</p><h4 id="stage-5-custom-shell.nix-file">Stage 5: Custom <code>shell.nix</code> file</h4><p>One disadvantage of <code>cabal2nix --shell</code> is that you have to re-run the command any time your dependencies change. However, if you’re willing to hand-write your own <code>shell.nix</code> file then you can create something more stable:</p><pre class="nix"><code>let<br>  overlay = pkgsNew: pkgsOld: {<br>    haskellPackages = pkgsOld.haskellPackages.override (old: {<br>      overrides = pkgsNew.haskell.lib.packageSourceOverrides {<br>        spire = ./.;<br>      };<br>    });<br>  };<br><br>  pkgs = import &lt;nixpkgs&gt; { overlays = [ overlay ]; };<br><br>in<br>  pkgs.haskellPackages.spire.env</code></pre><p>The <code>packageSourceOverrides</code> is the key bit. Under the hood, that essentially runs <code>cabal2nix</code> for you any time your project changes and then generates your development environment from the result. You can also use <code>packageSourceOverrides</code> to specify non-default versions of dependencies, too:</p><pre class="nix"><code>let<br>  overlay = pkgsNew: pkgsOld: {<br>    haskellPackages = pkgsOld.haskellPackages.override (old: {<br>      overrides = pkgsNew.haskell.lib.packageSourceOverrides {<br>        spire = ./.;<br><br>        # Example of how to pin a dependency to a non-defaul version<br>        pretty-show = &quot;1.9.5&quot;;<br>      };<br>    });<br>  };<br><br>  pkgs = import &lt;nixpkgs&gt; { overlays = [ overlay ]; };<br><br>in<br>  pkgs.haskellPackages.spire.env</code></pre><p>… although that will only work for packages that have been released prior to the version of Nixpkgs that you’re depending on.</p><p>If you want something a bit more robust, you can do something like this:</p><pre class="nix"><code>let<br>  overlay = pkgsNew: pkgsOld: {<br>    haskellPackages = pkgsOld.haskellPackages.override (old: {<br>      overrides =<br>        pkgsNew.lib.fold<br>          pkgsNew.lib.composeExtensions<br>          (old.overrides or (_: _: { }))<br>          [ (pkgsNew.haskell.lib.packageSourceOverrides {<br>              spire = ./.;<br>            })<br>            (pkgsNew.haskell.lib.packagesFromDirectory {<br>              directory = ./packages;<br>            })<br>          ];<br>    });<br>  };<br><br>  pkgs = import &lt;nixpkgs&gt; { overlays = [ overlay ]; };<br><br>in<br>  pkgs.haskellPackages.spire.env</code></pre><p>… and then you have the option to also depend on any dependency that <code>cabal2nix</code> knows how to generate:</p><div class="sourceCode" id="cb25"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb25-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb25-1" tabindex="-1"></a><span class="ex">$</span> mkdir packages</span><br><span id="cb25-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb25-2" tabindex="-1"></a></span><br><span id="cb25-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb25-3" tabindex="-1"></a><span class="ex">$</span> <span class="co"># Add the following file to version control to preserve the directory</span></span><br><span id="cb25-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb25-4" tabindex="-1"></a><span class="ex">$</span> touch packages/.gitkeep</span><br><span id="cb25-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb25-5" tabindex="-1"></a></span><br><span id="cb25-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb25-6" tabindex="-1"></a><span class="ex">$</span> cabal update</span><br><span id="cb25-7"><a href="https://www.haskellforall.com/feeds/posts/default#cb25-7" tabindex="-1"></a></span><br><span id="cb25-8"><a href="https://www.haskellforall.com/feeds/posts/default#cb25-8" tabindex="-1"></a><span class="ex">$</span> cabal2nix cabal://<span class="va">${PACKAGE_NAME}</span>-<span class="va">${VERSION}</span> <span class="op">&gt;</span> ./packages/<span class="va">${PACKAGE_NAME}</span>.nix</span></code></pre></div><p>… and that works even on bleeding-edge Haskell packages that Nixpkgs hasn’t picked up, yet.</p><h4 id="stage-6-pinning-nixpkgs">Stage 6: Pinning Nixpkgs</h4><p>All of the prior examples are “impure”, meaning that they depend on the ambient <code>nixpkgs</code> channel installed on the developer’s system. This <code>nixpkgs</code> channel might vary from system to system, meaning that each system might have different versions of <code>nixpkgs</code> installed, and then you run into issues reproducing each other’s builds.</p><p>For example, if you have a newer version of <code>nixpkgs</code>installed your Nix build for the above Haskell project might succeed, but then another developer might attempt to build your project with an older version of <code>nixpkgs</code>, which might select an older incompatible version of one of your Haskell dependencies.</p><p>Or, vice versa, the examples in this blog post might succeed at the time of this writing for the current version of <code>nixpkgs</code> but then as time goes on the examples might begin to fail for future versions of <code>nixpkgs</code>.</p><p>You can fix that by pinning Nixpkgs, which this post covers:</p><ul><li><a href="https://nixos.wiki/wiki/How_to_fetch_Nixpkgs_with_an_empty_NIX_PATH">How to fetch Nixpkgs with an empty <code>NIX_PATH</code></a></li></ul><p>For example, we could pin <code>nixpkgs</code> for our global <code>~/default.nix</code> like this:</p><pre class="nix"><code>let<br>  nixpkgs = builtins.fetchTarball {<br>    url    = &quot;https://github.com/NixOS/nixpkgs/archive/0ba2543f8c855d7be8e90ef6c8dc89c1617e8a08.tar.gz&quot;;<br>    sha256 = &quot;14ann7vz7qgfrw39ji1s19n1p0likyf2ag8h7rh8iwp3iv5lmprl&quot;;<br>  };<br><br>  config = { allowUnfree = true; };<br><br>  overlay = pkgsNew: pkgsOld: {<br>    vscode-with-extensions = pkgsOld.vscode-with-extensions.override {<br>      vscodeExtensions = [<br>        pkgsNew.vscode-extensions.haskell.haskell<br>        pkgsNew.vscode-extensions.justusadam.language-haskell<br>      ];<br>    };<br>  };<br><br>  pkgs = import nixpkgs { inherit config; overlays = [ overlay ]; };<br><br>in<br>  { inherit (pkgs)<br>      cabal-install<br>      ghcid<br>      haskell-language-server<br>      stylish-haskell<br>      vscode-with-extensions<br>    ;<br>  }</code></pre><p>… which pins us to the tip of the <code>release-22.05</code> branch at the time of this writing.</p><p>We can likewise pin <code>nixpkgs</code> for our project-local <code>shell.nix</code> like this:</p><pre class="nix"><code>let<br>  nixpkgs = builtins.fetchTarball {<br>    url    = &quot;https://github.com/NixOS/nixpkgs/archive/0ba2543f8c855d7be8e90ef6c8dc89c1617e8a08.tar.gz&quot;;<br>    sha256 = &quot;14ann7vz7qgfrw39ji1s19n1p0likyf2ag8h7rh8iwp3iv5lmprl&quot;;<br>  };<br><br>  overlay = pkgsNew: pkgsOld: {<br>    haskellPackages = pkgsOld.haskellPackages.override (old: {<br>      overrides = pkgsNew.haskell.lib.packageSourceOverrides {<br>        spire = ./.;<br>      };<br>    });<br>  };<br><br>  pkgs = import nixpkgs { overlays = [ overlay ]; };<br><br>in<br>  pkgs.haskellPackages.spire.env</code></pre><h4 id="flakes">Flakes</h4><p>The final improvement we can make is the most important one of all: we can convert our project into a Nix flake:</p><ul><li><a href="https://nixos.wiki/wiki/Flakes">NixOS Wiki - Flakes</a></li></ul><p>There are two main motivations for flake-enabling our project:</p><ul><li>To simplify managing inputs that we need to lock (e.g. <code>nixpkgs</code>)</li><li>To speed up our shell</li></ul><p>To flake-enable our project, we’ll save the following code to <code>flake.nix</code>:</p><pre class="nix"><code>{ inputs = {<br>    nixpkgs.url = github:NixOS/nixpkgs/release-22.05;<br><br>    utils.url = github:numtide/flake-utils;<br>  };<br><br>  outputs = { nixpkgs, utils, ... }:<br>    utils.lib.eachDefaultSystem (system:<br>      let<br>        config = { };<br><br>        overlay = pkgsNew: pkgsOld: {<br>          spire =<br>            pkgsNew.haskell.lib.justStaticExecutables<br>              pkgsNew.haskellPackages.spire;<br><br>          haskellPackages = pkgsOld.haskellPackages.override (old: {<br>            overrides = pkgsNew.haskell.lib.packageSourceOverrides {<br>              spire = ./.;<br>            };<br>          });<br>        };<br><br>        pkgs =<br>          import nixpkgs { inherit config system; overlays = [ overlay ]; };<br><br>      in<br>        rec {<br>          packages.default = pkgs.haskellPackages.spire;<br><br>          apps.default = {<br>            type = &quot;app&quot;;<br><br>            program = &quot;${pkgs.spire}/bin/spire&quot;;<br>          };<br><br>          devShells.default = pkgs.haskellPackages.spire.env;<br>        }<br>    );<br>}</code></pre><p>… and then we can delete our old <code>shell.nix</code> because we don’t need it anymore.</p><p>Now we can obtain a development environment by running:</p><div class="sourceCode" id="cb29"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb29-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb29-1" tabindex="-1"></a><span class="ex">$</span> nix develop</span></code></pre></div><p>… and the above flake also makes it possible to easily build and run the program, too:</p><div class="sourceCode" id="cb30"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb30-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb30-1" tabindex="-1"></a><span class="ex">$</span> nix run    <span class="co"># Run the program</span></span><br><span id="cb30-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb30-2" tabindex="-1"></a><span class="ex">$</span> nix build  <span class="co"># Build the project</span></span></code></pre></div><p>In fact, you can even run a flake without having to clone a repository. For example, you can run the example code from this blog post by typing:</p><div class="sourceCode" id="cb31"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb31-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb31-1" tabindex="-1"></a><span class="ex">$</span> nix run github:Gabriella439/spire</span></code></pre></div><p>Moreover, we no longer have to take care of managing hashes for, say, Nixpkgs. The flake machinery takes care of that automatically for you and generates a <code>flake.lock</code> file which you can then add to version control. For example, the lock file I got was:</p><div class="sourceCode" id="cb32"><pre class="sourceCode json"><code class="sourceCode json"><span id="cb32-1"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-1" tabindex="-1"></a><span class="fu">{</span></span><br><span id="cb32-2"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-2" tabindex="-1"></a>  <span class="dt">&quot;nodes&quot;</span><span class="fu">:</span> <span class="fu">{</span></span><br><span id="cb32-3"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-3" tabindex="-1"></a>    <span class="dt">&quot;nixpkgs&quot;</span><span class="fu">:</span> <span class="fu">{</span></span><br><span id="cb32-4"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-4" tabindex="-1"></a>      <span class="dt">&quot;locked&quot;</span><span class="fu">:</span> <span class="fu">{</span></span><br><span id="cb32-5"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-5" tabindex="-1"></a>        <span class="dt">&quot;lastModified&quot;</span><span class="fu">:</span> <span class="dv">1661617163</span><span class="fu">,</span></span><br><span id="cb32-6"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-6" tabindex="-1"></a>        <span class="dt">&quot;narHash&quot;</span><span class="fu">:</span> <span class="st">&quot;sha256-NN9Ky47j8ohgPhA9JZyfkYIbbAo6RJkGz+7h8/exVpE=&quot;</span><span class="fu">,</span></span><br><span id="cb32-7"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-7" tabindex="-1"></a>        <span class="dt">&quot;owner&quot;</span><span class="fu">:</span> <span class="st">&quot;NixOS&quot;</span><span class="fu">,</span></span><br><span id="cb32-8"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-8" tabindex="-1"></a>        <span class="dt">&quot;repo&quot;</span><span class="fu">:</span> <span class="st">&quot;nixpkgs&quot;</span><span class="fu">,</span></span><br><span id="cb32-9"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-9" tabindex="-1"></a>        <span class="dt">&quot;rev&quot;</span><span class="fu">:</span> <span class="st">&quot;0ba2543f8c855d7be8e90ef6c8dc89c1617e8a08&quot;</span><span class="fu">,</span></span><br><span id="cb32-10"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-10" tabindex="-1"></a>        <span class="dt">&quot;type&quot;</span><span class="fu">:</span> <span class="st">&quot;github&quot;</span></span><br><span id="cb32-11"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-11" tabindex="-1"></a>      <span class="fu">},</span></span><br><span id="cb32-12"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-12" tabindex="-1"></a>      <span class="dt">&quot;original&quot;</span><span class="fu">:</span> <span class="fu">{</span></span><br><span id="cb32-13"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-13" tabindex="-1"></a>        <span class="dt">&quot;owner&quot;</span><span class="fu">:</span> <span class="st">&quot;NixOS&quot;</span><span class="fu">,</span></span><br><span id="cb32-14"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-14" tabindex="-1"></a>        <span class="dt">&quot;ref&quot;</span><span class="fu">:</span> <span class="st">&quot;release-22.05&quot;</span><span class="fu">,</span></span><br><span id="cb32-15"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-15" tabindex="-1"></a>        <span class="dt">&quot;repo&quot;</span><span class="fu">:</span> <span class="st">&quot;nixpkgs&quot;</span><span class="fu">,</span></span><br><span id="cb32-16"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-16" tabindex="-1"></a>        <span class="dt">&quot;type&quot;</span><span class="fu">:</span> <span class="st">&quot;github&quot;</span></span><br><span id="cb32-17"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-17" tabindex="-1"></a>      <span class="fu">}</span></span><br><span id="cb32-18"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-18" tabindex="-1"></a>    <span class="fu">},</span></span><br><span id="cb32-19"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-19" tabindex="-1"></a>    <span class="dt">&quot;root&quot;</span><span class="fu">:</span> <span class="fu">{</span></span><br><span id="cb32-20"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-20" tabindex="-1"></a>      <span class="dt">&quot;inputs&quot;</span><span class="fu">:</span> <span class="fu">{</span></span><br><span id="cb32-21"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-21" tabindex="-1"></a>        <span class="dt">&quot;nixpkgs&quot;</span><span class="fu">:</span> <span class="st">&quot;nixpkgs&quot;</span><span class="fu">,</span></span><br><span id="cb32-22"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-22" tabindex="-1"></a>        <span class="dt">&quot;utils&quot;</span><span class="fu">:</span> <span class="st">&quot;utils&quot;</span></span><br><span id="cb32-23"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-23" tabindex="-1"></a>      <span class="fu">}</span></span><br><span id="cb32-24"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-24" tabindex="-1"></a>    <span class="fu">},</span></span><br><span id="cb32-25"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-25" tabindex="-1"></a>    <span class="dt">&quot;utils&quot;</span><span class="fu">:</span> <span class="fu">{</span></span><br><span id="cb32-26"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-26" tabindex="-1"></a>      <span class="dt">&quot;locked&quot;</span><span class="fu">:</span> <span class="fu">{</span></span><br><span id="cb32-27"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-27" tabindex="-1"></a>        <span class="dt">&quot;lastModified&quot;</span><span class="fu">:</span> <span class="dv">1659877975</span><span class="fu">,</span></span><br><span id="cb32-28"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-28" tabindex="-1"></a>        <span class="dt">&quot;narHash&quot;</span><span class="fu">:</span> <span class="st">&quot;sha256-zllb8aq3YO3h8B/U0/J1WBgAL8EX5yWf5pMj3G0NAmc=&quot;</span><span class="fu">,</span></span><br><span id="cb32-29"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-29" tabindex="-1"></a>        <span class="dt">&quot;owner&quot;</span><span class="fu">:</span> <span class="st">&quot;numtide&quot;</span><span class="fu">,</span></span><br><span id="cb32-30"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-30" tabindex="-1"></a>        <span class="dt">&quot;repo&quot;</span><span class="fu">:</span> <span class="st">&quot;flake-utils&quot;</span><span class="fu">,</span></span><br><span id="cb32-31"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-31" tabindex="-1"></a>        <span class="dt">&quot;rev&quot;</span><span class="fu">:</span> <span class="st">&quot;c0e246b9b83f637f4681389ecabcb2681b4f3af0&quot;</span><span class="fu">,</span></span><br><span id="cb32-32"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-32" tabindex="-1"></a>        <span class="dt">&quot;type&quot;</span><span class="fu">:</span> <span class="st">&quot;github&quot;</span></span><br><span id="cb32-33"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-33" tabindex="-1"></a>      <span class="fu">},</span></span><br><span id="cb32-34"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-34" tabindex="-1"></a>      <span class="dt">&quot;original&quot;</span><span class="fu">:</span> <span class="fu">{</span></span><br><span id="cb32-35"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-35" tabindex="-1"></a>        <span class="dt">&quot;owner&quot;</span><span class="fu">:</span> <span class="st">&quot;numtide&quot;</span><span class="fu">,</span></span><br><span id="cb32-36"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-36" tabindex="-1"></a>        <span class="dt">&quot;repo&quot;</span><span class="fu">:</span> <span class="st">&quot;flake-utils&quot;</span><span class="fu">,</span></span><br><span id="cb32-37"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-37" tabindex="-1"></a>        <span class="dt">&quot;type&quot;</span><span class="fu">:</span> <span class="st">&quot;github&quot;</span></span><br><span id="cb32-38"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-38" tabindex="-1"></a>      <span class="fu">}</span></span><br><span id="cb32-39"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-39" tabindex="-1"></a>    <span class="fu">}</span></span><br><span id="cb32-40"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-40" tabindex="-1"></a>  <span class="fu">},</span></span><br><span id="cb32-41"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-41" tabindex="-1"></a>  <span class="dt">&quot;root&quot;</span><span class="fu">:</span> <span class="st">&quot;root&quot;</span><span class="fu">,</span></span><br><span id="cb32-42"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-42" tabindex="-1"></a>  <span class="dt">&quot;version&quot;</span><span class="fu">:</span> <span class="dv">7</span></span><br><span id="cb32-43"><a href="https://www.haskellforall.com/feeds/posts/default#cb32-43" tabindex="-1"></a><span class="fu">}</span></span></code></pre></div><p>… and you can easily upgrade to, say, a newer revision of Nixpkgs if you need to.</p><p>Additionally, all of the Nix commands are now <em>faster</em>. Specifically, the first time you run a command Nix still needs to download and/or build dependencies, but subsequent runs are faster because Nix can skip the instantiation phase. For more details, see:</p><ul><li><a href="https://www.tweag.io/blog/2020-06-25-eval-cache/">Nix Flakes, Part 2: Evaluation Caching</a></li></ul><h4 id="conclusion">Conclusion</h4><p>Flakes are our final destination, so that’s as far as this post will go. There are technically some more ways that we can overengineer things, but in my experience the idioms highlighted in this post are the ones that provide the highest power-to-weight ratio.</p><p>The key thing to take away is that the Nixpkgs Haskell infrastructure lets you smoothly transition from simpler approaches to more powerful approaches, and even the final flake-enabled approach is actually not that complicated.</p></div>
    </content>
    <updated>2022-08-28T15:56:26Z</updated>
    <published>2022-08-28T15:23:00Z</published>
    <author>
      <name>Gabriella Gonzalez</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/01917800488530923694</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-1777990983847811806</id>
      <author>
        <name>Gabriella Gonzalez</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/01917800488530923694</uri>
      </author>
      <link href="https://www.haskellforall.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml">
      <link href="https://www.blogger.com/feeds/1777990983847811806/posts/default" rel="self" type="application/atom+xml">
      <link href="https://www.haskellforall.com/" rel="alternate" type="text/html">
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html">
      <link href="https://www.blogger.com/feeds/1777990983847811806/posts/default?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml">
      <title>Haskell for all</title>
      <updated>2022-11-14T19:18:39Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://byorgey.wordpress.com/?p=2453</id>
    <link href="https://byorgey.wordpress.com/2022/08/27/types-for-top-level-definitions/" rel="alternate" type="text/html">
    <link href="https://byorgey.wordpress.com/2022/08/27/types-for-top-level-definitions/#comments" rel="replies" type="text/html">
    <link href="https://byorgey.wordpress.com/2022/08/27/types-for-top-level-definitions/feed/atom/" rel="replies" type="application/atom+xml">
    <title xml:lang="en">Types for top-level definitions</title>
    <summary type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml">I’ve come up with idea for a type system for first-class (global) definitions, which can serve as a very lightweight alternative to a proper module system. I’m posting it here in the hopes of getting some feedback and pointers to … <a href="https://byorgey.wordpress.com/2022/08/27/types-for-top-level-definitions/">Continue reading <span class="meta-nav">→</span></a></div>
    </summary>
    <content type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><p>I’ve come up with idea for a type system for first-class (global) definitions, which can serve as a very lightweight alternative to a proper module system. I’m posting it here in the hopes of getting some feedback and pointers to related work.</p>
<h2 id="commands-and-expressions">Commands and expressions</h2>
<p>The programming language of <a href="https://github.com/swarm-game/swarm/">Swarm</a> (for lack of a better term I will hereafter refer to it as <em>Swarmlang</em>) has a bunch of imperative commands, and standard monadic sequencing constructs. For example,</p>
<pre><code>move; move</code></pre>
<p>does two <code>move</code> commands in sequence, and</p>
<pre><code>thing &lt;- grab; give friend thing</code></pre>
<p>first executes <code>grab</code>, binding the variable <code>thing</code> to the result, then executes <code>give friend thing</code>. Of course, there is also a rich language of pure expressions, with things like arithmetic, strings, lambdas and function application, pairs, sums, and so on.</p>
<p>Some languages make a syntactic distinction between statements and expressions, but Swarmlang does not: everything is an expression, and some expressions happen to have a command type. If <code>t</code> is a type, then <code>cmd t</code> is the type of an imperative command which, when executed, can have some effects and then returns a result of type <code>t</code>. (Of course this should feel very familiar to Haskell programmers; <code>cmd</code> has many similarities to <code>IO</code>.) This approach makes many things simpler and means that commands are first-class values.</p>
<h2 id="typechecking-definitions">Typechecking definitions</h2>
<p>Swarmlang has <em>definitions</em>, which are just expressions with a command type. If <code>e</code> is an expression, then</p>
<pre><code>def x = e end</code></pre>
<p>has type <code>cmd ()</code>. When executed, it should have the effect of binding the name <code>x</code> to the expression <code>e</code>, and bringing <code>x</code> into scope for all subsequent commands. Thus, it is valid to sequence this first definition with a second definition that mentions <code>x</code>, like so:</p>
<pre><code>def x = e end;
def y = foo bar x end</code></pre>
<p>Of course, this means that while typechecking the definition of <code>y</code>, we must be able to look up the type of <code>x</code>. However, the type of the first <code>def</code> command is simply <code>cmd ()</code>, which does not tell us anything about <code>x</code> or its type. Normally, the typing rule for sequencing of commands would be something like</p>
<div style="text-align: center;">
<p><img alt="\displaystyle \frac{\Gamma \vdash c_1 : \mathrm{cmd}\; \tau_1 \qquad \Gamma \vdash c_2 : \mathrm{cmd}\; \tau_2}{\Gamma \vdash c_1 ; c_2 : \mathrm{cmd}\;\tau_2}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle+%5Cfrac%7B%5CGamma+%5Cvdash+c_1+%3A+%5Cmathrm%7Bcmd%7D%5C%3B+%5Ctau_1+%5Cqquad+%5CGamma+%5Cvdash+c_2+%3A+%5Cmathrm%7Bcmd%7D%5C%3B+%5Ctau_2%7D%7B%5CGamma+%5Cvdash+c_1+%3B+c_2+%3A+%5Cmathrm%7Bcmd%7D%5C%3B%5Ctau_2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"></p>
</div>
<p>but this does not work for <code>def</code> commands, since it does not take into account the new names brought into scope. Up until now, I have dealt with this in a somewhat ad-hoc manner, with some special typechecking rules for <code>def</code> and some ad-hoc restrictions to ensure that <code>def</code> can only syntactically show up at the top level. However, I would <a href="https://github.com/swarm-game/swarm/issues/636">really like to put everything on a more solid theoretical basis</a> (which will hopefully simplify the code as well).</p>
<h2 id="decorating-command-types">Decorating command types</h2>
<p>The basic idea is to decorate the <img alt="\mathrm{cmd}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cmathrm%7Bcmd%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"> type with extra information about names bound by definitions. As usual, let <img alt="\Gamma" class="latex" src="https://s0.wp.com/latex.php?latex=%5CGamma&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"> denote a generic <em>context</em>, that is, a finite mapping from variable names to their types. Then we extend the <code>cmd</code> type by adding a context to it:</p>
<div style="text-align: center;">
<p><img alt="\mathrm{cmd}\; \tau \Rightarrow \Gamma" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cmathrm%7Bcmd%7D%5C%3B+%5Ctau+%5CRightarrow+%5CGamma&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"></p>
</div>
<p>is the type of a command which yields a result of type <img alt="\tau" class="latex" src="https://s0.wp.com/latex.php?latex=%5Ctau&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"> <em>and produces global bindings for some names whose types are recorded in <img alt="\Gamma" class="latex" src="https://s0.wp.com/latex.php?latex=%5CGamma&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"></em>. (Of course, we can continue to use <img alt="\mathrm{cmd}\; \tau" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cmathrm%7Bcmd%7D%5C%3B+%5Ctau&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"> as an abbreviation for <img alt="\mathrm{cmd}\; \tau \Rightarrow \varnothing" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cmathrm%7Bcmd%7D%5C%3B+%5Ctau+%5CRightarrow+%5Cvarnothing&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002">.) So, for example, <code>def x = 3 end</code> no longer has type <img alt="\mathrm{cmd}\; ()" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cmathrm%7Bcmd%7D%5C%3B+%28%29&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002">, but rather something like <img alt="\mathrm{cmd}\; () \Rightarrow \{x : \mathrm{int}\}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cmathrm%7Bcmd%7D%5C%3B+%28%29+%5CRightarrow+%5C%7Bx+%3A+%5Cmathrm%7Bint%7D%5C%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002">, representing the fact that although <code>def x = 3 end</code> does not result in an interesting value, it does bind a name, <code>x</code>, whose type is <code>int</code>.</p>
<p>This is slightly unusual in the fact that types and contexts are now mutually recursive, but that doesn’t seem like a big problem. We can now write down a proper typing rule for sequencing that takes definitions into account, something like this:</p>
<div style="text-align: center;">
<p><img alt="\displaystyle \frac{\Gamma \vdash c_1 : \mathrm{cmd} \; \tau_1 \Rightarrow \Gamma_1 \qquad \Gamma, \Gamma_1 \vdash c_2 : \mathrm{cmd} \; \tau_2 \Rightarrow \Gamma_2}{\Gamma \vdash c_1 ; c_2 : \mathrm{cmd} \; \tau_2 \Rightarrow \Gamma, \Gamma_1, \Gamma_2}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle+%5Cfrac%7B%5CGamma+%5Cvdash+c_1+%3A+%5Cmathrm%7Bcmd%7D+%5C%3B+%5Ctau_1+%5CRightarrow+%5CGamma_1+%5Cqquad+%5CGamma%2C+%5CGamma_1+%5Cvdash+c_2+%3A+%5Cmathrm%7Bcmd%7D+%5C%3B+%5Ctau_2+%5CRightarrow+%5CGamma_2%7D%7B%5CGamma+%5Cvdash+c_1+%3B+c_2+%3A+%5Cmathrm%7Bcmd%7D+%5C%3B+%5Ctau_2+%5CRightarrow+%5CGamma%2C+%5CGamma_1%2C+%5CGamma_2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"></p>
</div>
<p>And of course the typing rule for <code>def</code> looks like this:</p>
<div style="text-align: center;">
<p><img alt="\displaystyle \frac{\Gamma \vdash e : \tau}{\Gamma \vdash \texttt{def}\; x = e\; \texttt{end} : \mathrm{cmd}\; () \Rightarrow \{x : \tau\}}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle+%5Cfrac%7B%5CGamma+%5Cvdash+e+%3A+%5Ctau%7D%7B%5CGamma+%5Cvdash+%5Ctexttt%7Bdef%7D%5C%3B+x+%3D+e%5C%3B+%5Ctexttt%7Bend%7D+%3A+%5Cmathrm%7Bcmd%7D%5C%3B+%28%29+%5CRightarrow+%5C%7Bx+%3A+%5Ctau%5C%7D%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002"></p>
</div>
<p>These rules together can now correctly typecheck an expression like</p>
<pre><code>def x = 3 end;
def y = 2 + x end</code></pre>
<p>where the second definition refers to the name defined by the first. The whole thing would end up having type <img alt="\mathrm{cmd}\; () \Rightarrow \{ x : \mathrm{int}, y : \mathrm{int} \}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cmathrm%7Bcmd%7D%5C%3B+%28%29+%5CRightarrow+%5C%7B+x+%3A+%5Cmathrm%7Bint%7D%2C+y+%3A+%5Cmathrm%7Bint%7D+%5C%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002">.</p>
<h2 id="with-polymorphism">…with polymorphism?</h2>
<p>All this seems straightforward with only first-order types, as in my example typing rules above. But once you add parametric polymorphism my brain starts to hurt. Clearly, the context associated to a command type could bind variables to polytypes. For example, <code>def id = \x.x end</code> has type <img alt="\mathrm{cmd}\; () \Rightarrow \{id : \forall \alpha. \alpha \to \alpha\}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cmathrm%7Bcmd%7D%5C%3B+%28%29+%5CRightarrow+%5C%7Bid+%3A+%5Cforall+%5Calpha.+%5Calpha+%5Cto+%5Calpha%5C%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0&amp;c=20201002">. But should the context associated to a command type <em>always</em> contain polytypes, or only when the command type is itself a polytype? In other words, how do we deal with the associated contexts in the monotypes that show up during type inference? And what would it mean to <em>unify</em> two command types with their contexts (and would that ever even be necessary)? I hope it’s actually simple and I just need to think about it some more, but I haven’t wrapped my brain around it yet.</p>
<h2 id="ideas-and-pointers-welcome">Ideas and pointers welcome!</h2>
<p>I’d be very happy to hear anyone’s ideas, or (especially) pointers to published work that seems related or relevant! Feel free to comment either here, or <a href="https://github.com/swarm-game/swarm/issues/636">on the relevant github issue</a>.</p></div>
    </content>
    <updated>2022-08-27T12:47:50Z</updated>
    <published>2022-08-27T12:47:50Z</published>
    <category scheme="https://byorgey.wordpress.com" term="projects"/>
    <category scheme="https://byorgey.wordpress.com" term="context"/>
    <category scheme="https://byorgey.wordpress.com" term="definition"/>
    <category scheme="https://byorgey.wordpress.com" term="types"/>
    <author>
      <name>Brent</name>
      <uri>http://ozark.hendrix.edu/~yorgey/</uri>
    </author>
    <source>
      <id>http://byorgey.wordpress.com/feed/atom/</id>
      <link href="https://byorgey.wordpress.com" rel="alternate" type="text/html">
      <link href="https://byorgey.wordpress.com/feed/atom/" rel="self" type="application/atom+xml">
      <link href="https://byorgey.wordpress.com/osd.xml" rel="search" title="blog :: Brent -&gt; [String]" type="application/opensearchdescription+xml">
      <link href="https://s1.wp.com/opensearch.xml" rel="search" title="WordPress.com" type="application/opensearchdescription+xml">
      <link href="https://byorgey.wordpress.com/?pushpress=hub" rel="hub" type="text/html">
      <title xml:lang="en">blog :: Brent -&gt; [String]</title>
      <updated>2022-10-06T20:01:34Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-9757377.post-635673596498308069</id>
    <link href="https://wadler.blogspot.com/feeds/635673596498308069/comments/default" rel="replies" title="Post Comments" type="application/atom+xml">
    <link href="https://www.blogger.com/comment.g?blogID=9757377&amp;postID=635673596498308069" rel="replies" title="4 Comments" type="text/html">
    <link href="https://www.blogger.com/feeds/9757377/posts/default/635673596498308069" rel="edit" type="application/atom+xml">
    <link href="https://www.blogger.com/feeds/9757377/posts/default/635673596498308069" rel="self" type="application/atom+xml">
    <link href="https://wadler.blogspot.com/2022/08/help-please-do-you-know-any.html" rel="alternate" title="Help, please! Do you know any applications of my work?" type="text/html">
    <title>Help, please! Do you know any applications of my work?</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p></p><div class="separator" style="clear: both; text-align: center;"><a href="https://markallenassets.blob.core.windows.net/communitycare/2020/02/theory-practice.jpg" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="400" src="https://markallenassets.blob.core.windows.net/communitycare/2020/02/theory-practice.jpg" width="640"></a></div><br>When writing an application, it sometimes help if I can point out that monads and type classes, which my research contributed to, are used to process every post on Facebook. (Via <a href="https://hackage.haskell.org/package/haxl">Haxl</a>. Thanks, Simon Marlow!)<p></p><p>Do you know of other applications of my work? If so, please email me or list them in the comments. (You can find my email at the bottom of my <a href="https://homepages.inf.ed.ac.uk/wadler/">home page</a>.)</p><p>Possible example: I gather Twitter uses monads and implicits in Scala (where implicits were influenced by type classes), but it's hard to find confirmation online. Do you know whether they are used, and how heavily? (It's easier to find such confirmation for <a href="https://www.theguardian.com/info/developer-blog/2016/dec/22/parental-advisory-implicit-content">The Guardian</a>.)</p><p>Possible example: Do you make heavy use of generics in Java? I contributed to their design.</p><p>Possible example: I gather protocols in Swift are in part inspired by type classes, but it is hard to find confirmation online. Can you point me to confirmation?</p><p>There are many other possibilities. I hope you know some I haven't dreamed of!</p><p>Many thanks for your help. Answers are welcome at any time, but would be most useful if they can be provided by 2 September 2022.</p><p><br></p></div>
    </content>
    <updated>2022-08-26T13:25:46Z</updated>
    <published>2022-08-26T13:25:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="F#"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="Functional Programming"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="Gender"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="Haskell"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="Java"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="JavaScript"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="Lego"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="Object-Oriented"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="Programming Languages"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="Scala"/>
    <author>
      <name>Philip Wadler</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/12009347515095774366</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-9757377</id>
      <category term="Politics"/>
      <category term="Functional Programming"/>
      <category term="Programming Languages"/>
      <category term="Scotland"/>
      <category term="Computing"/>
      <category term="Independence"/>
      <category term="Yes!"/>
      <category term="Haskell"/>
      <category term="Academia"/>
      <category term="UK"/>
      <category term="Edinburgh"/>
      <category term="Cycling"/>
      <category term="Graphics"/>
      <category term="Mathematics"/>
      <category term="Science"/>
      <category term="Types"/>
      <category term="Logic"/>
      <category term="US"/>
      <category term="Covid-19"/>
      <category term="Security"/>
      <category term="Web"/>
      <category term="EU"/>
      <category term="Comics"/>
      <category term="Theory"/>
      <category term="Climate Change"/>
      <category term="Israel"/>
      <category term="Blockchain"/>
      <category term="Education"/>
      <category term="IOHK"/>
      <category term="Cryptocurrency"/>
      <category term="Internet"/>
      <category term="SIGPLAN"/>
      <category term="Scala"/>
      <category term="Status"/>
      <category term="University"/>
      <category term="Writing"/>
      <category term="ACM"/>
      <category term="Comedy"/>
      <category term="Concurrency"/>
      <category term="DSL"/>
      <category term="Databases"/>
      <category term="Dynamic and Static Typing"/>
      <category term="F#"/>
      <category term="Green"/>
      <category term="JavaScript"/>
      <category term="Lego"/>
      <category term="Privacy"/>
      <category term="Recursion"/>
      <category term="Session Types"/>
      <category term="Strange Loop"/>
      <category term="Agda"/>
      <category term="Category Theory"/>
      <category term="Developers"/>
      <category term="Formal Methods"/>
      <category term="Java"/>
      <category term="Object-Oriented"/>
      <category term="Technology"/>
      <category term="Architecture"/>
      <category term="Copyright"/>
      <category term="Distributed Computing"/>
      <category term="Europe"/>
      <category term="Productivity"/>
      <category term="Racket"/>
      <category term="Science Fiction"/>
      <category term="BLM"/>
      <category term="Brexit"/>
      <category term="DRM"/>
      <category term="Environment"/>
      <category term="Erlang"/>
      <category term="Finance"/>
      <category term="Gender"/>
      <category term="Theatre"/>
      <category term="BDS"/>
      <category term="Books"/>
      <category term="Cinema"/>
      <category term="Communication"/>
      <category term="Japan"/>
      <category term="Net Neutrality"/>
      <category term="Open Access"/>
      <category term="Palestine"/>
      <category term="Pyret"/>
      <category term="Scheme"/>
      <category term="Sweden"/>
      <author>
        <name>Philip Wadler</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/12009347515095774366</uri>
      </author>
      <link href="https://wadler.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml">
      <link href="https://www.blogger.com/feeds/9757377/posts/default?alt=atom" rel="self" type="application/atom+xml">
      <link href="https://wadler.blogspot.com/" rel="alternate" type="text/html">
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html">
      <link href="https://www.blogger.com/feeds/9757377/posts/default?alt=atom&amp;start-index=26&amp;max-results=25" rel="next" type="application/atom+xml">
      <title>Wadler's Blog</title>
      <updated>2022-11-12T12:12:37Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://www.well-typed.com/blog/2022/08/plutus-initial-conditions</id>
    <link href="https://well-typed.com/blog/2022/08/plutus-initial-conditions" rel="alternate" type="text/html">
    <title>Verifying initial conditions in Plutus</title>
    <summary>On a UTxO-style blockchain such as Cardano, transaction outputs are
normally to the (hash) of a public key; in order to spend such an
output, the spending transaction must be signed with the corresponding
private key as evidence that the party creating the transaction has the
right to spend the output. [...]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>On a UTxO-style blockchain such as Cardano, transaction outputs are normally to the (hash) of a public key; in order to spend such an output, the spending transaction must be signed with the corresponding private key as evidence that the party creating the transaction has the right to spend the output.</p>
<p>The <a href="https://iohk.io/en/research/library/papers/the-extended-utxo-model/">extended UTxO model</a> introduces a second kind of output: an output to a <em>smart contract</em>: a piece of code <code>f</code>. Along with the contract itself, the output also contains an additional argument <code>d</code>, known as the <em>datum</em>. When a transaction spends such an output, <code>f(d)</code> is executed; when <code>f</code> indicates that all is fine, the transaction is approved; otherwise, it is rejected.</p>
<p>An immediate consequence of this model is that outputs are only verified <em>when they are spent</em>, not when they are created. This can lead to some tricky-to-verify initial conditions. We will explore this problem in this blog post, and suggest some ways in which we can solve it. Along the way, we will recap some often misunderstood Plutus concepts.</p>
<p>This work was done as part of the development of <a href="https://www.be.exchange/">Be, a (smart) contract platform</a>.</p>

<h2 id="stage-restriction-datums-vs-parameters">Stage restriction: datums vs parameters</h2>
<p>Script outputs consist of three things: the value at the output, the hash of the script, and a datum or datum hash. We will ignore the value in the rest of this section.</p>
<p>We can think of a script hash and a datum as a pair of a function <code>f</code> and an argument datum <code>d</code>, which we might write as <code>f(d)</code>. Scripts often have arguments other than the datum too; we might write this as <code>f<sub>x1, .., xN</sub>(d)</code>. These additional arguments are commonly referred to as <em>parameters</em>.</p>
<p>The difference between parameters and the datum is one of <em>stage</em>: parameters are applied at the stage of script <em>compilation</em>, whereas the datum is applied at the stage of script <em>execution</em>. Let’s consider this from a few different angles.</p>
<ul>
<li><p>(Data) values<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn1" id="fnref1"><sup>1</sup></a> that must be computed off-chain should be parameters; values that must be computed on-chain should be in the datum.</p>
<p>For example, stateful scripts often have to compute their next state. Since this computation happens on-chain, this state must therefore live in the script’s datum.</p></li>
<li><p>From the on-chain code’s perspective, <code>f<sub>x</sub></code> and <code>f<sub>x’</sub></code> are different scripts with different hashes, whereas <code>f(d)</code> and <code>f(d')</code> look like the <em>same</em> script, applied to different datums.</p></li>
<li><p>Sometimes there are reasons to prefer that a particular value is a parameter rather than a datum: after all, datums are just values and cannot <em>a priori</em> be trusted (we will come back to this in detail later). In principle it’s not <em>impossible</em> to compute a parameter on-chain, but it’s difficult: we must have sufficient information on-chain to be able to compute, for a given <code>x</code>, the hash of <code>f<sub>x</sub></code> (that is, the hash of the serialised source code of <code>f<sub>x</sub></code>). In practice, on Cardano this is currently impossible, because the appropriate hashing algorithm is not available on-chain.<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn2" id="fnref2"><sup>2</sup></a></p></li>
<li><p>Conversely, sometimes we might prefer that a value is stored in the datum rather than is passed as a parameter. Off-chain code can easily recognize outputs to <code>f(d)</code> in the current UTxO set without needing to be aware of <code>d</code>; however, outputs to <code>f<sub>x</sub></code> cannot be recognized as such without <code>x</code>, since the hash of <code>f<sub>x</sub></code> is different for every <code>x</code>.</p></li>
</ul>
<h2 id="self-reference-direct-and-indirect-recursion">Self-reference: direct and indirect recursion</h2>
<p>Scripts often need to be aware of their own hash. For example, a script <code>f</code> may need to check that any transaction spending an output to <code>f</code> also contains an output back to <code>f</code>:</p>
<center>
<svg height="15.165619pt" version="1.1" viewBox="123.734816 -15.153664 139.892408 15.165619" width="139.892408pt">
<title>   (f, d, V) \xrightarrow{\mspace{30mu}\mathit{Tx}\mspace{30mu}}   (f, d&amp;39;, V&amp;39;) </title>
<defs/>
<g>
<path d="M127.620246-.083686C127.620246-.119552 127.620246-.143462 127.417008-.3467C126.221491-1.554172 125.552002-3.526775 125.552002-5.965629C125.552002-8.284932 126.113895-10.281445 127.500694-11.692154C127.620246-11.799751 127.620246-11.823661 127.620246-11.859527C127.620246-11.931258 127.56047-11.955168 127.51265-11.955168C127.357232-11.955168 126.376909-11.094396 125.791105-9.92279C125.181392-8.715318 124.906423-7.436115 124.906423-5.965629C124.906423-4.901619 125.073795-3.478954 125.695464-2.199751C126.400819-.765131 127.381143 .011955 127.51265 .011955C127.56047 .011955 127.620246-.011955 127.620246-.083686Z"/>
<path d="M133.619147-7.79477C133.858251-7.79477 133.953892-7.79477 133.953892-8.021918C133.953892-8.141469 133.858251-8.141469 133.643058-8.141469H132.674689C132.901837-9.372852 133.069209-10.221669 133.164851-10.604234C133.236582-10.891158 133.48764-11.166127 133.798475-11.166127C134.049533-11.166127 134.300592-11.058531 134.420143-10.950934C133.953892-10.903113 133.81043-10.556413 133.81043-10.353176C133.81043-10.114072 133.989757-9.97061 134.216906-9.97061C134.456009-9.97061 134.814664-10.173848 134.814664-10.628144C134.814664-11.130262 134.312547-11.40523 133.78652-11.40523C133.272447-11.40523 132.77033-11.022665 132.531227-10.556413C132.316034-10.137983 132.196482-9.707597 131.921513-8.141469H131.120517C130.893369-8.141469 130.773817-8.141469 130.773817-7.926276C130.773817-7.79477 130.845548-7.79477 131.084652-7.79477H131.849782C131.634589-6.682939 131.144427-3.981071 130.869459-2.701868C130.666221-1.661768 130.486893-.789041 129.889135-.789041C129.853269-.789041 129.506569-.789041 129.291376-1.016189C129.90109-1.06401 129.90109-1.590037 129.90109-1.601993C129.90109-1.841096 129.721762-1.984558 129.494614-1.984558C129.255511-1.984558 128.896856-1.78132 128.896856-1.327024C128.896856-.812951 129.422883-.549938 129.889135-.549938C131.108562-.549938 131.610679-2.737733 131.742186-3.335492C131.957379-4.25604 132.543182-7.436115 132.602958-7.79477H133.619147Z"/>
<path d="M137.014504-2.940971C137.014504-3.634371 136.787356-4.148443 136.297194-4.148443C135.914629-4.148443 135.723346-3.837609 135.723346-3.574595S135.902674-2.988792 136.309149-2.988792C136.464567-2.988792 136.596073-3.036613 136.70367-3.144209C136.72758-3.16812 136.739535-3.16812 136.751491-3.16812C136.775401-3.16812 136.775401-3.000747 136.775401-2.940971C136.775401-2.546451 136.70367-1.769365 136.01027-.992279C135.878763-.848817 135.878763-.824907 135.878763-.800996C135.878763-.74122 135.938539-.681445 135.998315-.681445C136.093956-.681445 137.014504-1.566127 137.014504-2.940971Z"/>
<path d="M145.940855-10.9868C145.95281-11.03462 145.97672-11.106351 145.97672-11.166127C145.97672-11.285679 145.857169-11.285679 145.833258-11.285679C145.821303-11.285679 145.2355-11.237858 145.175724-11.225903C144.972486-11.213948 144.793159-11.190037 144.577966-11.178082C144.279087-11.154172 144.1954-11.142217 144.1954-10.927024C144.1954-10.807472 144.291042-10.807472 144.458414-10.807472C145.044217-10.807472 145.056173-10.699875 145.056173-10.580324C145.056173-10.508593 145.032262-10.412951 145.020307-10.377086L144.291042-7.47198C144.159535-7.782814 143.836745-8.261021 143.215077-8.261021C141.864143-8.261021 140.405612-6.515567 140.405612-4.746202C140.405612-3.56264 141.099012-2.86924 141.911963-2.86924C142.569498-2.86924 143.13139-3.383313 143.466135-3.777833C143.585687-3.072478 144.14758-2.86924 144.506235-2.86924S145.151814-3.084433 145.367007-3.514819C145.55829-3.921295 145.725662-4.65056 145.725662-4.698381C145.725662-4.758157 145.677841-4.805978 145.60611-4.805978C145.498514-4.805978 145.486559-4.746202 145.438738-4.566874C145.25941-3.861519 145.032262-3.108344 144.5421-3.108344C144.1954-3.108344 144.17149-3.419178 144.17149-3.658281C144.17149-3.706102 144.17149-3.957161 144.255176-4.291905L145.940855-10.9868ZM143.525911-4.411457C143.466135-4.208219 143.466135-4.184309 143.298763-3.957161C143.035749-3.622416 142.509722-3.108344 141.947829-3.108344C141.457667-3.108344 141.182698-3.550685 141.182698-4.25604C141.182698-4.913574 141.553308-6.252553 141.780456-6.75467C142.186932-7.591532 142.748825-8.021918 143.215077-8.021918C144.004118-8.021918 144.159535-7.041594 144.159535-6.945953C144.159535-6.933998 144.123669-6.77858 144.111714-6.75467L143.525911-4.411457Z"/>
<path d="M148.341356-2.940971C148.341356-3.634371 148.114208-4.148443 147.624046-4.148443C147.241481-4.148443 147.050198-3.837609 147.050198-3.574595S147.229526-2.988792 147.636001-2.988792C147.791418-2.988792 147.922925-3.036613 148.030522-3.144209C148.054432-3.16812 148.066387-3.16812 148.078342-3.16812C148.102253-3.16812 148.102253-3.000747 148.102253-2.940971C148.102253-2.546451 148.030522-1.769365 147.337122-.992279C147.205615-.848817 147.205615-.824907 147.205615-.800996C147.205615-.74122 147.265391-.681445 147.325167-.681445C147.420808-.681445 148.341356-1.566127 148.341356-2.940971Z"/>
<path d="M158.654506-9.827148C159.060982-10.472727 159.431592-10.759651 160.041306-10.807472C160.160858-10.819427 160.256499-10.819427 160.256499-11.03462C160.256499-11.082441 160.232589-11.154172 160.124992-11.154172C159.909799-11.154172 159.395727-11.130262 159.180534-11.130262C158.833834-11.130262 158.475179-11.154172 158.140434-11.154172C158.044793-11.154172 157.925241-11.154172 157.925241-10.927024C157.925241-10.819427 158.032838-10.807472 158.080658-10.807472C158.522999-10.771606 158.57082-10.556413 158.57082-10.412951C158.57082-10.233624 158.403448-9.958655 158.391493-9.9467L154.63757-3.993026L153.800708-10.436862C153.800708-10.783562 154.422377-10.807472 154.553884-10.807472C154.733211-10.807472 154.840808-10.807472 154.840808-11.03462C154.840808-11.154172 154.709301-11.154172 154.673435-11.154172C154.470197-11.154172 154.231094-11.130262 154.027856-11.130262H153.358367C152.48564-11.130262 152.126985-11.154172 152.115029-11.154172C152.043298-11.154172 151.899836-11.154172 151.899836-10.938979C151.899836-10.807472 151.983523-10.807472 152.174805-10.807472C152.784519-10.807472 152.820384-10.699875 152.85625-10.400996L153.812663-3.024658C153.848529-2.773599 153.848529-2.737733 154.015901-2.737733C154.159363-2.737733 154.219139-2.773599 154.338691-2.964882L158.654506-9.827148Z"/>
<path d="M164.051294-5.965629C164.051294-6.874222 163.931742-8.356663 163.262253-9.743462C162.556898-11.178082 161.576574-11.955168 161.445067-11.955168C161.397246-11.955168 161.33747-11.931258 161.33747-11.859527C161.33747-11.823661 161.33747-11.799751 161.540708-11.596513C162.736225-10.389041 163.405715-8.416438 163.405715-5.977584C163.405715-3.658281 162.843822-1.661768 161.457022-.251059C161.33747-.143462 161.33747-.119552 161.33747-.083686C161.33747-.011955 161.397246 .011955 161.445067 .011955C161.600484 .011955 162.580808-.848817 163.166611-2.020423C163.776325-3.239851 164.051294-4.531009 164.051294-5.965629Z"/>
<path d="M189.845375-14.603726C189.909136-14.8508 189.964927-14.86674 190.020717-14.87471C190.076508-14.89065 190.323582-14.89065 190.475014-14.89065C191.256085-14.89065 191.566919-14.8508 191.566919-14.276952C191.566919-14.197251 191.558949-14.14146 191.550979-14.069729L191.487218-13.551671V-13.511821C191.487218-13.503851 191.495188-13.47994 191.487218-13.47197C191.479248-13.45603 191.463308-13.344449 191.63068-13.344449C191.766172-13.344449 191.774142-13.400239 191.790082-13.511821L192.013245-14.930501L192.021215-15.042082C192.021215-15.153664 191.917604-15.153664 191.798052-15.153664H187.454341C187.278999-15.153664 187.255088-15.153664 187.207268-15.010202L186.721091-13.591522C186.68124-13.487911 186.68124-13.47197 186.68124-13.45603C186.68124-13.344449 186.792822-13.344449 186.832673-13.344449C186.864553-13.344449 186.912374-13.344449 186.944254-13.368359C186.968164-13.384299 186.968164-13.400239 187.039895-13.615432C187.446371-14.763129 187.685475-14.89065 188.75347-14.89065C188.912872-14.89065 189.112125-14.89065 189.231676-14.87471C189.223706-14.763129 189.223706-14.739218 189.191826-14.619666L188.147741-10.435358C188.06804-10.116553 188.020219-10.028882 187.294939-10.028882H187.191328C187.047866-10.028882 186.952224-10.028882 186.952224-9.87745C186.952224-9.845569 186.968164-9.765868 187.087716-9.765868C187.39058-9.765868 187.701415-9.789779 188.012249-9.789779H188.594067C188.912872-9.789779 189.247616-9.765868 189.558451-9.765868C189.614242-9.765868 189.725823-9.765868 189.725823-9.9173C189.725823-10.028882 189.630182-10.028882 189.50266-10.028882H189.399049C189.263557-10.028882 189.136035-10.036852 189.000543-10.044822C188.80926-10.068732 188.75347-10.084673 188.75347-10.188284C188.75347-10.236105 188.77738-10.315806 188.77738-10.323776L189.845375-14.603726Z"/>
<path d="M193.336737-10.849803C193.265006-10.58679 193.097634-9.90933 192.595517-9.90933C192.420174-9.90933 192.284682-9.981061 192.236862-10.020912C192.396264-10.084673 192.515816-10.228135 192.515816-10.403477C192.515816-10.63461 192.324533-10.674461 192.236862-10.674461C192.005729-10.674461 191.830386-10.475208 191.830386-10.236105C191.830386-9.853539 192.236862-9.686167 192.587547-9.686167C192.946202-9.686167 193.209215-9.90933 193.400498-10.188284C193.53599-9.89339 193.838854-9.686167 194.22142-9.686167C195.050311-9.686167 195.528518-10.674461 195.528518-10.913564C195.528518-11.009206 195.408966-11.009206 195.377086-11.009206C195.273474-11.009206 195.241594-10.985295 195.217684-10.905594C194.96264-10.084673 194.468493-9.90933 194.23736-9.90933C193.990286-9.90933 193.822914-10.084673 193.822914-10.411447C193.822914-10.58679 193.918555-10.969355 193.990286-11.240339C194.069988-11.591024 194.157659-11.933739 194.24533-12.276454C194.372852-12.7706 194.643836-13.057525 194.9467-13.057525C195.153923-13.057525 195.289415-12.953913 195.305355-12.945943C195.233624-12.922033 195.026401-12.794511 195.026401-12.563378C195.026401-12.340214 195.201743-12.292394 195.305355-12.292394C195.456787-12.292394 195.703861-12.403975 195.703861-12.73075C195.703861-13.169106 195.217684-13.280688 194.95467-13.280688C194.627895-13.280688 194.356912-13.097375 194.141719-12.778571C194.046077-12.969853 193.806974-13.280688 193.320797-13.280688C192.483935-13.280688 192.013699-12.276454 192.013699-12.061261C192.013699-11.957649 192.11731-11.957649 192.165131-11.957649C192.268742-11.957649 192.292653-11.981559 192.316563-12.061261C192.563636-12.850302 193.041843-13.057525 193.304857-13.057525S193.719303-12.850302 193.719303-12.555407C193.719303-12.396005 193.679452-12.228633 193.591781-11.885918L193.336737-10.849803Z"/>
<path d="M176.431547-5.738481C176.634785-5.738481 176.849978-5.738481 176.849978-5.977584S176.634785-6.216687 176.431547-6.216687H169.963801C169.760563-6.216687 169.54537-6.216687 169.54537-5.977584S169.760563-5.738481 169.963801-5.738481H176.431547Z"/>
<path d="M180.093702-5.738481C180.29694-5.738481 180.512133-5.738481 180.512133-5.977584S180.29694-6.216687 180.093702-6.216687H173.625956C173.422718-6.216687 173.207525-6.216687 173.207525-5.977584S173.422718-5.738481 173.625956-5.738481H180.093702Z"/>
<path d="M186.735528-5.738481C186.938766-5.738481 187.153959-5.738481 187.153959-5.977584S186.938766-6.216687 186.735528-6.216687H180.267782C180.064544-6.216687 179.849351-6.216687 179.849351-5.977584S180.064544-5.738481 180.267782-5.738481H186.735528Z"/>
<path d="M193.377354-5.738481C193.580592-5.738481 193.795785-5.738481 193.795785-5.977584S193.580592-6.216687 193.377354-6.216687H186.909608C186.70637-6.216687 186.491177-6.216687 186.491177-5.977584S186.70637-5.738481 186.909608-5.738481H193.377354Z"/>
<path d="M200.01918-5.738481C200.222418-5.738481 200.437611-5.738481 200.437611-5.977584S200.222418-6.216687 200.01918-6.216687H193.551434C193.348196-6.216687 193.133003-6.216687 193.133003-5.977584S193.348196-5.738481 193.551434-5.738481H200.01918Z"/>
<path d="M206.661006-5.738481C206.864244-5.738481 207.079437-5.738481 207.079437-5.977584S206.864244-6.216687 206.661006-6.216687H200.19326C199.990022-6.216687 199.774829-6.216687 199.774829-5.977584S199.990022-5.738481 200.19326-5.738481H206.661006Z"/>
<path d="M212.415178-5.738481C211.757644-5.236364 211.434855-4.746202 211.339213-4.590785C210.801231-3.765878 210.705589-3.012702 210.705589-3.000747C210.705589-2.857285 210.849051-2.857285 210.944693-2.857285C211.147931-2.857285 211.159886-2.881196 211.207706-3.096389C211.482675-4.267995 212.18803-5.272229 213.538964-5.822167C213.682426-5.869988 213.718292-5.893898 213.718292-5.977584S213.646561-6.097136 213.62265-6.109091C213.096623-6.312329 211.650048-6.910087 211.195751-8.918555C211.159886-9.062017 211.147931-9.097883 210.944693-9.097883C210.849051-9.097883 210.705589-9.097883 210.705589-8.954421C210.705589-8.930511 210.813186-8.177335 211.315303-7.376339C211.554406-7.017684 211.901106-6.599253 212.415178-6.216687H203.532489C203.317295-6.216687 203.102102-6.216687 203.102102-5.977584S203.317295-5.738481 203.532489-5.738481H212.415178Z"/>
<path d="M221.606026-.083686C221.606026-.119552 221.606026-.143462 221.402788-.3467C220.207271-1.554172 219.537782-3.526775 219.537782-5.965629C219.537782-8.284932 220.099675-10.281445 221.486474-11.692154C221.606026-11.799751 221.606026-11.823661 221.606026-11.859527C221.606026-11.931258 221.54625-11.955168 221.498429-11.955168C221.343012-11.955168 220.362688-11.094396 219.776885-9.92279C219.167171-8.715318 218.892203-7.436115 218.892203-5.965629C218.892203-4.901619 219.059575-3.478954 219.681244-2.199751C220.386599-.765131 221.366922 .011955 221.498429 .011955C221.54625 .011955 221.606026-.011955 221.606026-.083686Z"/>
<path d="M227.604927-7.79477C227.84403-7.79477 227.939672-7.79477 227.939672-8.021918C227.939672-8.141469 227.84403-8.141469 227.628837-8.141469H226.660469C226.887617-9.372852 227.054989-10.221669 227.15063-10.604234C227.222361-10.891158 227.47342-11.166127 227.784254-11.166127C228.035313-11.166127 228.286371-11.058531 228.405923-10.950934C227.939672-10.903113 227.79621-10.556413 227.79621-10.353176C227.79621-10.114072 227.975537-9.97061 228.202685-9.97061C228.441789-9.97061 228.800444-10.173848 228.800444-10.628144C228.800444-11.130262 228.298327-11.40523 227.772299-11.40523C227.258227-11.40523 226.75611-11.022665 226.517007-10.556413C226.301814-10.137983 226.182262-9.707597 225.907293-8.141469H225.106297C224.879149-8.141469 224.759597-8.141469 224.759597-7.926276C224.759597-7.79477 224.831328-7.79477 225.070431-7.79477H225.835562C225.620369-6.682939 225.130207-3.981071 224.855238-2.701868C224.652-1.661768 224.472673-.789041 223.874914-.789041C223.839049-.789041 223.492349-.789041 223.277156-1.016189C223.88687-1.06401 223.88687-1.590037 223.88687-1.601993C223.88687-1.841096 223.707542-1.984558 223.480394-1.984558C223.24129-1.984558 222.882635-1.78132 222.882635-1.327024C222.882635-.812951 223.408663-.549938 223.874914-.549938C225.094342-.549938 225.596459-2.737733 225.727965-3.335492C225.943158-4.25604 226.528962-7.436115 226.588738-7.79477H227.604927Z"/>
<path d="M231.000284-2.940971C231.000284-3.634371 230.773136-4.148443 230.282974-4.148443C229.900409-4.148443 229.709126-3.837609 229.709126-3.574595S229.888453-2.988792 230.294929-2.988792C230.450346-2.988792 230.581853-3.036613 230.68945-3.144209C230.71336-3.16812 230.725315-3.16812 230.73727-3.16812C230.761181-3.16812 230.761181-3.000747 230.761181-2.940971C230.761181-2.546451 230.68945-1.769365 229.99605-.992279C229.864543-.848817 229.864543-.824907 229.864543-.800996C229.864543-.74122 229.924319-.681445 229.984095-.681445C230.079736-.681445 231.000284-1.566127 231.000284-2.940971Z"/>
<path d="M239.926635-10.9868C239.93859-11.03462 239.9625-11.106351 239.9625-11.166127C239.9625-11.285679 239.842948-11.285679 239.819038-11.285679C239.807083-11.285679 239.22128-11.237858 239.161504-11.225903C238.958266-11.213948 238.778938-11.190037 238.563745-11.178082C238.264866-11.154172 238.18118-11.142217 238.18118-10.927024C238.18118-10.807472 238.276821-10.807472 238.444194-10.807472C239.029997-10.807472 239.041952-10.699875 239.041952-10.580324C239.041952-10.508593 239.018042-10.412951 239.006087-10.377086L238.276821-7.47198C238.145315-7.782814 237.822525-8.261021 237.200856-8.261021C235.849922-8.261021 234.391392-6.515567 234.391392-4.746202C234.391392-3.56264 235.084792-2.86924 235.897743-2.86924C236.555277-2.86924 237.11717-3.383313 237.451915-3.777833C237.571466-3.072478 238.133359-2.86924 238.492014-2.86924S239.137594-3.084433 239.352787-3.514819C239.544069-3.921295 239.711442-4.65056 239.711442-4.698381C239.711442-4.758157 239.663621-4.805978 239.59189-4.805978C239.484293-4.805978 239.472338-4.746202 239.424518-4.566874C239.24519-3.861519 239.018042-3.108344 238.52788-3.108344C238.18118-3.108344 238.15727-3.419178 238.15727-3.658281C238.15727-3.706102 238.15727-3.957161 238.240956-4.291905L239.926635-10.9868ZM237.511691-4.411457C237.451915-4.208219 237.451915-4.184309 237.284542-3.957161C237.021529-3.622416 236.495501-3.108344 235.933608-3.108344C235.443447-3.108344 235.168478-3.550685 235.168478-4.25604C235.168478-4.913574 235.539088-6.252553 235.766236-6.75467C236.172712-7.591532 236.734605-8.021918 237.200856-8.021918C237.989897-8.021918 238.145315-7.041594 238.145315-6.945953C238.145315-6.933998 238.109449-6.77858 238.097494-6.75467L237.511691-4.411457Z"/>
<path d="M242.107958-11.702811C242.147808-11.806423 242.179689-11.862213 242.179689-11.941914C242.179689-12.204928 241.940585-12.380271 241.717422-12.380271C241.398618-12.380271 241.310947-12.101317 241.279066-11.989735L240.266862-8.554617C240.234981-8.458975 240.234981-8.435065 240.234981-8.427095C240.234981-8.355364 240.282802-8.339424 240.362503-8.315513C240.505965-8.251753 240.521905-8.251753 240.537846-8.251753C240.561756-8.251753 240.609577-8.251753 240.665367-8.387244L242.107958-11.702811Z"/>
<path d="M245.122212-2.940971C245.122212-3.634371 244.895063-4.148443 244.404901-4.148443C244.022336-4.148443 243.831053-3.837609 243.831053-3.574595S244.010381-2.988792 244.416857-2.988792C244.572274-2.988792 244.703781-3.036613 244.811377-3.144209C244.835288-3.16812 244.847243-3.16812 244.859198-3.16812C244.883108-3.16812 244.883108-3.000747 244.883108-2.940971C244.883108-2.546451 244.811377-1.769365 244.117977-.992279C243.986471-.848817 243.986471-.824907 243.986471-.800996C243.986471-.74122 244.046246-.681445 244.106022-.681445C244.201664-.681445 245.122212-1.566127 245.122212-2.940971Z"/>
<path d="M255.435362-9.827148C255.841837-10.472727 256.212448-10.759651 256.822161-10.807472C256.941713-10.819427 257.037354-10.819427 257.037354-11.03462C257.037354-11.082441 257.013444-11.154172 256.905847-11.154172C256.690654-11.154172 256.176582-11.130262 255.961389-11.130262C255.614689-11.130262 255.256034-11.154172 254.921289-11.154172C254.825648-11.154172 254.706096-11.154172 254.706096-10.927024C254.706096-10.819427 254.813693-10.807472 254.861514-10.807472C255.303855-10.771606 255.351676-10.556413 255.351676-10.412951C255.351676-10.233624 255.184303-9.958655 255.172348-9.9467L251.418425-3.993026L250.581563-10.436862C250.581563-10.783562 251.203232-10.807472 251.334739-10.807472C251.514067-10.807472 251.621663-10.807472 251.621663-11.03462C251.621663-11.154172 251.490156-11.154172 251.454291-11.154172C251.251053-11.154172 251.011949-11.130262 250.808712-11.130262H250.139222C249.266495-11.130262 248.90784-11.154172 248.895885-11.154172C248.824154-11.154172 248.680692-11.154172 248.680692-10.938979C248.680692-10.807472 248.764378-10.807472 248.955661-10.807472C249.565374-10.807472 249.60124-10.699875 249.637105-10.400996L250.593519-3.024658C250.629384-2.773599 250.629384-2.737733 250.796756-2.737733C250.940218-2.737733 250.999994-2.773599 251.119546-2.964882L255.435362-9.827148Z"/>
<path d="M259.572871-11.702811C259.612722-11.806423 259.644602-11.862213 259.644602-11.941914C259.644602-12.204928 259.405499-12.380271 259.182336-12.380271C258.863531-12.380271 258.77586-12.101317 258.74398-11.989735L257.731775-8.554617C257.699895-8.458975 257.699895-8.435065 257.699895-8.427095C257.699895-8.355364 257.747716-8.339424 257.827417-8.315513C257.970879-8.251753 257.986819-8.251753 258.002759-8.251753C258.02667-8.251753 258.07449-8.251753 258.130281-8.387244L259.572871-11.702811Z"/>
<path d="M263.627225-5.965629C263.627225-6.874222 263.507673-8.356663 262.838184-9.743462C262.132829-11.178082 261.152505-11.955168 261.020998-11.955168C260.973177-11.955168 260.913402-11.931258 260.913402-11.859527C260.913402-11.823661 260.913402-11.799751 261.116639-11.596513C262.312156-10.389041 262.981646-8.416438 262.981646-5.977584C262.981646-3.658281 262.419753-1.661768 261.032953-.251059C260.913402-.143462 260.913402-.119552 260.913402-.083686C260.913402-.011955 260.973177 .011955 261.020998 .011955C261.176415 .011955 262.156739-.848817 262.742542-2.020423C263.352256-3.239851 263.627225-4.531009 263.627225-5.965629Z"/>
</g>
</svg>
</center>
<p>Clearly, the source of <code>f</code> cannot <em>literally</em> contain the hash of that very same source code: the hash would be uncomputable. Scripts <em>must</em> therefore be <em>told</em> their own hash when they run. This has some important consequences.</p>
<p>For example, suppose we have a parameterized minting policy <code>π<sub>f</sub></code>, such that <code>π<sub>f</sub></code> only allows minting of tokens if those tokens are output to <code>f</code>. Suppose furthermore that <code>f</code> needs to check if particular inputs contain <code>π<sub>f</sub></code> tokens. In principle this should be fine: since <code>f</code> is told its own hash, it should be able to compute the hash of <code>π<sub>f</sub></code>. However, we run into the stage restriction discussed above: the script’s own hash is a run-time value, whereas the parameter to <code>π</code> must be provided at compile time. Again, it’s not in <em>principle</em> impossible to solve this problem<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn3" id="fnref3"><sup>3</sup></a>, but in practice it’s difficult, and as we saw, in fact currently impossible on Cardano for technical reasons.</p>
<p>We must therefore <em>tell</em> script <code>f</code> what the hash of <code>π<sub>f</sub></code> is. This cannot be a parameter, because this would lead to uncomputable self-referential hashes again. Indeed, even our notation would break down here:</p>
<center>
<svg height="27.146205pt" style="vertical-align: 0.996264pt;" version="1.1" viewBox="174.669072 -28.142469 35.237921 27.146205" width="35.237921pt">
<title> f_{\displaystyle \pi_{f_{\pi_{f_{\ddots}}}}} </title>
<defs/>
<g>
<path d="M180.001077-24.532008C180.240181-24.532008 180.335822-24.532008 180.335822-24.759156C180.335822-24.878708 180.240181-24.878708 180.024988-24.878708H179.056619C179.283767-26.11009 179.45114-26.958907 179.546781-27.341473C179.618512-27.628397 179.869571-27.903365 180.180405-27.903365C180.431463-27.903365 180.682522-27.795769 180.802074-27.688172C180.335822-27.640352 180.19236-27.293652 180.19236-27.090414C180.19236-26.851311 180.371688-26.707849 180.598836-26.707849C180.837939-26.707849 181.196594-26.911086 181.196594-27.365383C181.196594-27.8675 180.694477-28.142469 180.16845-28.142469C179.654378-28.142469 179.15226-27.759903 178.913157-27.293652C178.697964-26.875221 178.578412-26.444835 178.303444-24.878708H177.502447C177.275299-24.878708 177.155747-24.878708 177.155747-24.663515C177.155747-24.532008 177.227478-24.532008 177.466582-24.532008H178.231712C178.016519-23.420177 177.526358-20.718309 177.251389-19.439106C177.048151-18.399007 176.868823-17.52628 176.271065-17.52628C176.235199-17.52628 175.8885-17.52628 175.673307-17.753428C176.28302-17.801248 176.28302-18.327276 176.28302-18.339231C176.28302-18.578334 176.103693-18.721796 175.876544-18.721796C175.637441-18.721796 175.278786-18.518558 175.278786-18.064262C175.278786-17.55019 175.804813-17.287176 176.271065-17.287176C177.490492-17.287176 177.992609-19.474972 178.124116-20.07273C178.339309-20.993278 178.925112-24.173353 178.984888-24.532008H180.001077Z"/>
<path d="M183.535449-22.439866H184.886383C184.563594-21.100887 184.360356-20.22816 184.360356-19.271746C184.360356-19.104374 184.360356-17.813216 184.850518-17.813216C185.101576-17.813216 185.31677-18.040364 185.31677-18.243602C185.31677-18.303378 185.31677-18.327288 185.233083-18.506615C184.910294-19.331522 184.910294-20.359667 184.910294-20.443353C184.910294-20.515084 184.910294-21.363901 185.161352-22.439866H186.500331C186.655748-22.439866 187.050269-22.439866 187.050269-22.822431C187.050269-23.085445 186.823121-23.085445 186.607928-23.085445H182.674677C182.399708-23.085445 181.993233-23.085445 181.443295-22.499642C181.132461-22.152942 180.749895-21.519318 180.749895-21.447587S180.809671-21.351945 180.881402-21.351945C180.965088-21.351945 180.977043-21.387811 181.036819-21.459542C181.658488-22.439866 182.280157-22.439866 182.579036-22.439866H183.260481C182.997467-21.543228 182.698588-20.503129 181.718264-18.410974C181.622623-18.219691 181.622623-18.195781 181.622623-18.12405C181.622623-17.872992 181.837816-17.813216 181.945412-17.813216C182.292112-17.813216 182.387753-18.12405 182.531215-18.626167C182.722498-19.235881 182.722498-19.259791 182.84205-19.737998L183.535449-22.439866Z"/>
<path d="M190.131935-19.311609H190.873155C191.032557-19.311609 191.128199-19.311609 191.128199-19.463041C191.128199-19.574623 191.024587-19.574623 190.889095-19.574623H190.179755C190.307277-20.291933 190.386978-20.746229 190.46668-21.104884C190.49856-21.240376 190.52247-21.328047 190.642022-21.423689C190.745633-21.51136 190.809394-21.5273 190.897066-21.5273C191.016617-21.5273 191.144139-21.50339 191.247751-21.439629C191.2079-21.423689 191.160079-21.399778 191.120229-21.375868C190.984737-21.304137 190.889095-21.160675 190.889095-21.001273C190.889095-20.81796 191.032557-20.706379 191.2079-20.706379C191.439033-20.706379 191.654226-20.905631 191.654226-21.184585C191.654226-21.559181 191.271661-21.750463 190.889095-21.750463C190.618112-21.750463 190.115995-21.622941 189.860951-20.889691C189.78922-20.706379 189.78922-20.690438 189.574027-19.574623H188.976269C188.816866-19.574623 188.721225-19.574623 188.721225-19.423191C188.721225-19.311609 188.824836-19.311609 188.960328-19.311609H189.526206L188.952358-16.219205C188.800926-15.414224 188.681374-14.736765 188.258958-14.736765C188.235048-14.736765 188.067676-14.736765 187.916244-14.832406C188.282869-14.920077 188.282869-15.254822 188.282869-15.262792C188.282869-15.446105 188.139407-15.557686 187.964064-15.557686C187.748871-15.557686 187.517738-15.374374 187.517738-15.071509C187.517738-14.736765 187.860453-14.513601 188.258958-14.513601C188.745135-14.513601 189.07988-15.023689 189.183491-15.222941C189.470416-15.748969 189.653728-16.745233 189.669668-16.824934L190.131935-19.311609Z"/>
<path d="M193.179879-17.295171H193.915122C193.789593-16.769143 193.711884-16.3806 193.711884-15.992057C193.711884-15.6872 193.79557-15.083464 194.076517-15.083464C194.231934-15.083464 194.369418-15.226926 194.369418-15.358433C194.369418-15.412232 194.33953-15.460052 194.327575-15.48994C194.106405-15.884461 194.070539-16.267026 194.070539-16.571883C194.070539-16.667524 194.070539-16.930538 194.148248-17.295171H194.937289C195.00902-17.295171 195.266056-17.295171 195.266056-17.540252C195.266056-17.719579 195.098684-17.719579 194.997065-17.719579H192.617986C192.498434-17.719579 192.229443-17.719579 191.906654-17.4207C191.721349-17.24735 191.506156-16.960426 191.506156-16.90065C191.506156-16.816964 191.589842-16.816964 191.613752-16.816964C191.679505-16.816964 191.691461-16.828919 191.733304-16.882717C191.834923-17.026179 192.068048-17.295171 192.55821-17.295171H192.946753C192.743515-16.55395 192.33704-15.746976 192.259331-15.591559C192.205533-15.495918 192.127824-15.346478 192.127824-15.286702C192.127824-15.161173 192.223466-15.083464 192.343017-15.083464C192.552233-15.083464 192.623964-15.29268 192.689717-15.483963C192.809269-15.86055 192.809269-15.872506 192.892955-16.195295L193.179879-17.295171Z"/>
<path d="M198.067931-15.3883H198.677645C198.797196-15.3883 198.880882-15.3883 198.880882-15.53774C198.880882-15.627403 198.803174-15.627403 198.695577-15.627403H198.109774C198.289102-16.607727 198.289102-16.619682 198.313012-16.727279C198.3429-16.858786 198.354855-16.912584 198.444519-16.984315C198.51625-17.038113 198.570048-17.062024 198.659712-17.062024C198.755353-17.062024 198.850994-17.050068 198.934681-17.008225C198.815129-16.960405 198.707532-16.828898 198.707532-16.685436C198.707532-16.559906 198.809151-16.458288 198.952613-16.458288C199.108031-16.458288 199.293336-16.589794 199.293336-16.82292C199.293336-17.151687 198.922725-17.259284 198.659712-17.259284C198.39072-17.259284 197.984245-17.133755 197.804917-16.535996C197.757097-16.386557 197.739164-16.267005 197.697321-16.051812C197.667433-15.878462 197.655478-15.800753 197.619612-15.627403H197.12945C197.009899-15.627403 196.926212-15.627403 196.926212-15.477964C196.926212-15.3883 197.003921-15.3883 197.111517-15.3883H197.577769C197.344643-14.049321 197.260957-13.589047 197.237047-13.481451C197.051742-12.453306 197.021854-12.39353 196.968055-12.291911C196.884369-12.148449 196.78275-12.028898 196.633311-12.028898C196.597445-12.028898 196.465938-12.040853 196.370297-12.082696C196.489849-12.130517 196.597445-12.262024 196.597445-12.405486C196.597445-12.531015 196.495826-12.632634 196.352364-12.632634C196.196947-12.632634 196.011642-12.501127 196.011642-12.268001C196.011642-11.933256 196.38823-11.831637 196.627333-11.831637C196.9561-11.831637 197.189226-12.100629 197.296823-12.232136C197.559836-12.584813 197.685366-13.296146 197.697321-13.349944L198.067931-15.3883Z"/>
<path d="M201.706362-7.559651C201.706362-7.882441 201.431393-8.133499 201.132514-8.133499C200.785814-8.133499 200.546711-7.858531 200.546711-7.559651C200.546711-7.200996 200.84559-6.973848 201.120559-6.973848C201.443348-6.973848 201.706362-7.224907 201.706362-7.559651Z"/>
<path d="M205.806678-4.570859C205.806678-4.893649 205.531709-5.144707 205.23283-5.144707C204.88613-5.144707 204.647027-4.869738 204.647027-4.570859C204.647027-4.212204 204.945906-3.985056 205.220875-3.985056C205.543664-3.985056 205.806678-4.236115 205.806678-4.570859Z"/>
<path d="M209.906994-1.582067C209.906994-1.904857 209.632025-2.155915 209.333146-2.155915C208.986446-2.155915 208.747342-1.880946 208.747342-1.582067C208.747342-1.223412 209.046222-.996264 209.321191-.996264C209.64398-.996264 209.906994-1.247323 209.906994-1.582067Z"/>
</g>
</svg>
</center>
<p>We <em>can</em> put (the hash of) <code>π<sub>f</sub></code> in the datum <code>d</code> instead; <code>(f, (π<sub>f</sub>, d), V)</code> is unproblematic for hash computations, but now we have a different problem: <code>f</code> has no way of <em>verifying</em> that the datum contains the right hash. We will come back to back this point below.</p>
<p>It may also be possible to break the mutual dependency between <code>f</code> and <code>π<sub>f</sub></code> in different ways. For example, perhaps <code>f</code> has an associated <code>NFT<sub>o</sub></code>, so that we could parameterize both <code>f</code> and <code>π</code> by <code>NFT<sub>o</sub></code> instead. As we shall see, this is also not without problems.</p>
<h2 id="stateful-scripts">Stateful scripts</h2>
<p>In the EUTxO model, state is never actually updated; instead, old state is consumed and new state is created. Typically, this state resides in the datum of a script:</p>
<center>
<svg height="15.165619pt" version="1.1" viewBox="123.878565 -15.153664 139.604874 15.165619" width="139.604874pt">
<title>   (f, \; d_\mathit{old}) \xrightarrow{\mspace{30mu}\mathit{Tx}\mspace{30mu}}   (f, \; d_\mathit{new}) </title>
<defs/>
<g>
<path d="M127.763994-.083686C127.763994-.119552 127.763994-.143462 127.560756-.3467C126.365239-1.554172 125.69575-3.526775 125.69575-5.965629C125.69575-8.284932 126.257643-10.281445 127.644442-11.692154C127.763994-11.799751 127.763994-11.823661 127.763994-11.859527C127.763994-11.931258 127.704218-11.955168 127.656398-11.955168C127.50098-11.955168 126.520657-11.094396 125.934853-9.92279C125.32514-8.715318 125.050171-7.436115 125.050171-5.965629C125.050171-4.901619 125.217543-3.478954 125.839212-2.199751C126.544567-.765131 127.524891 .011955 127.656398 .011955C127.704218 .011955 127.763994-.011955 127.763994-.083686Z"/>
<path d="M133.762895-7.79477C134.001999-7.79477 134.09764-7.79477 134.09764-8.021918C134.09764-8.141469 134.001999-8.141469 133.786806-8.141469H132.818437C133.045585-9.372852 133.212958-10.221669 133.308599-10.604234C133.38033-10.891158 133.631388-11.166127 133.942223-11.166127C134.193281-11.166127 134.44434-11.058531 134.563892-10.950934C134.09764-10.903113 133.954178-10.556413 133.954178-10.353176C133.954178-10.114072 134.133505-9.97061 134.360654-9.97061C134.599757-9.97061 134.958412-10.173848 134.958412-10.628144C134.958412-11.130262 134.456295-11.40523 133.930268-11.40523C133.416195-11.40523 132.914078-11.022665 132.674975-10.556413C132.459782-10.137983 132.34023-9.707597 132.065261-8.141469H131.264265C131.037117-8.141469 130.917565-8.141469 130.917565-7.926276C130.917565-7.79477 130.989296-7.79477 131.2284-7.79477H131.99353C131.778337-6.682939 131.288175-3.981071 131.013207-2.701868C130.809969-1.661768 130.630641-.789041 130.032883-.789041C129.997017-.789041 129.650317-.789041 129.435124-1.016189C130.044838-1.06401 130.044838-1.590037 130.044838-1.601993C130.044838-1.841096 129.86551-1.984558 129.638362-1.984558C129.399259-1.984558 129.040604-1.78132 129.040604-1.327024C129.040604-.812951 129.566631-.549938 130.032883-.549938C131.25231-.549938 131.754427-2.737733 131.885934-3.335492C132.101127-4.25604 132.68693-7.436115 132.746706-7.79477H133.762895Z"/>
<path d="M137.158252-2.940971C137.158252-3.634371 136.931104-4.148443 136.440942-4.148443C136.058377-4.148443 135.867094-3.837609 135.867094-3.574595S136.046422-2.988792 136.452897-2.988792C136.608315-2.988792 136.739821-3.036613 136.847418-3.144209C136.871328-3.16812 136.883284-3.16812 136.895239-3.16812C136.919149-3.16812 136.919149-3.000747 136.919149-2.940971C136.919149-2.546451 136.847418-1.769365 136.154018-.992279C136.022511-.848817 136.022511-.824907 136.022511-.800996C136.022511-.74122 136.082287-.681445 136.142063-.681445C136.237704-.681445 137.158252-1.566127 137.158252-2.940971Z"/>
<path d="M149.405432-10.9868C149.417388-11.03462 149.441298-11.106351 149.441298-11.166127C149.441298-11.285679 149.321746-11.285679 149.297836-11.285679C149.285881-11.285679 148.700077-11.237858 148.640302-11.225903C148.437064-11.213948 148.257736-11.190037 148.042543-11.178082C147.743664-11.154172 147.659978-11.142217 147.659978-10.927024C147.659978-10.807472 147.755619-10.807472 147.922992-10.807472C148.508795-10.807472 148.52075-10.699875 148.52075-10.580324C148.52075-10.508593 148.49684-10.412951 148.484884-10.377086L147.755619-7.47198C147.624112-7.782814 147.301323-8.261021 146.679654-8.261021C145.32872-8.261021 143.87019-6.515567 143.87019-4.746202C143.87019-3.56264 144.563589-2.86924 145.376541-2.86924C146.034075-2.86924 146.595968-3.383313 146.930713-3.777833C147.050264-3.072478 147.612157-2.86924 147.970812-2.86924S148.616391-3.084433 148.831584-3.514819C149.022867-3.921295 149.190239-4.65056 149.190239-4.698381C149.190239-4.758157 149.142419-4.805978 149.070688-4.805978C148.963091-4.805978 148.951136-4.746202 148.903315-4.566874C148.723988-3.861519 148.49684-3.108344 148.006678-3.108344C147.659978-3.108344 147.636068-3.419178 147.636068-3.658281C147.636068-3.706102 147.636068-3.957161 147.719754-4.291905L149.405432-10.9868ZM146.990488-4.411457C146.930713-4.208219 146.930713-4.184309 146.76334-3.957161C146.500327-3.622416 145.974299-3.108344 145.412406-3.108344C144.922244-3.108344 144.647275-3.550685 144.647275-4.25604C144.647275-4.913574 145.017886-6.252553 145.245034-6.75467C145.65151-7.591532 146.213402-8.021918 146.679654-8.021918C147.468695-8.021918 147.624112-7.041594 147.624112-6.945953C147.624112-6.933998 147.588247-6.77858 147.576292-6.75467L146.990488-4.411457Z"/>
<path d="M153.778536-3.363399C153.778536-4.192291 153.220628-4.710348 152.503318-4.710348C151.475174-4.710348 150.391239-3.634383 150.391239-2.462777C150.391239-1.586064 150.988997-1.115828 151.658487-1.115828C152.718511-1.115828 153.778536-2.215703 153.778536-3.363399ZM151.666457-1.338991C151.363592-1.338991 150.988997-1.546214 150.988997-2.183823C150.988997-2.542478 151.156369-3.291668 151.411413-3.730025C151.754128-4.303873 152.224364-4.487185 152.495348-4.487185C152.877914-4.487185 153.180778-4.200261 153.180778-3.642353C153.180778-3.38731 153.061226-2.614209 152.734452-2.072241C152.479408-1.633885 152.049022-1.338991 151.666457-1.338991Z"/>
<path d="M156.325885-6.495654C156.333855-6.527534 156.349795-6.583325 156.349795-6.615205C156.349795-6.734757 156.222273-6.726787 156.134602-6.718817L155.30571-6.647086C155.194129-6.639116 155.106457-6.631145 155.106457-6.487683C155.106457-6.376102 155.202099-6.376102 155.31368-6.376102C155.696246-6.376102 155.696246-6.328281 155.696246-6.25655C155.696246-6.2167 155.672335-6.129028 155.664365-6.081208L154.676071-2.136002C154.636221-1.9766 154.636221-1.928779 154.636221-1.849078C154.636221-1.362901 155.002846-1.115828 155.369471-1.115828C155.536843-1.115828 155.783917-1.171619 155.98317-1.554184C156.126632-1.841108 156.238213-2.303375 156.238213-2.335255C156.238213-2.438866 156.126632-2.438866 156.086781-2.438866C155.959259-2.438866 155.951289-2.406986 155.919409-2.279464C155.807827-1.865018 155.672335-1.338991 155.385411-1.338991C155.162248-1.338991 155.162248-1.594035 155.162248-1.689676C155.162248-1.737497 155.162248-1.825168 155.186159-1.920809L156.325885-6.495654Z"/>
<path d="M160.687985-6.495654C160.695955-6.527534 160.711895-6.583325 160.711895-6.615205C160.711895-6.734757 160.584373-6.726787 160.496702-6.718817L159.66781-6.647086C159.556229-6.639116 159.468558-6.631145 159.468558-6.487683C159.468558-6.376102 159.564199-6.376102 159.67578-6.376102C160.058346-6.376102 160.058346-6.328281 160.058346-6.25655C160.058346-6.2167 160.034435-6.129028 160.026465-6.081208L159.572169-4.264022C159.404797-4.542976 159.173663-4.710348 158.838919-4.710348C157.898445-4.710348 156.934062-3.530772 156.934062-2.391046C156.934062-1.625915 157.388358-1.115828 157.986117-1.115828C158.456353-1.115828 158.846889-1.466513 159.014261-1.657795C159.085992-1.362901 159.349006-1.115828 159.731571-1.115828C160.018495-1.115828 160.209778-1.29117 160.34527-1.538244C160.512642-1.857048 160.616254-2.319315 160.616254-2.335255C160.616254-2.438866 160.504672-2.438866 160.464822-2.438866C160.32933-2.438866 160.32933-2.414956 160.281509-2.215703C160.130077-1.602005 159.962704-1.338991 159.747511-1.338991C159.524348-1.338991 159.524348-1.594035 159.524348-1.689676C159.524348-1.737497 159.524348-1.825168 159.548259-1.920809L160.687985-6.495654ZM159.070052-2.255554C159.006291-1.9766 158.480264-1.338991 158.010027-1.338991C157.635432-1.338991 157.51588-1.745467 157.51588-2.064271C157.51588-2.438866 157.747013-3.37934 157.946266-3.745965C158.265071-4.327783 158.615756-4.487185 158.838919-4.487185C159.341036-4.487185 159.428707-3.809726 159.428707-3.730025L159.404797-3.618443L159.070052-2.255554Z"/>
<path d="M165.06138-5.965629C165.06138-6.874222 164.941828-8.356663 164.272339-9.743462C163.566984-11.178082 162.58666-11.955168 162.455153-11.955168C162.407333-11.955168 162.347557-11.931258 162.347557-11.859527C162.347557-11.823661 162.347557-11.799751 162.550795-11.596513C163.746311-10.389041 164.415801-8.416438 164.415801-5.977584C164.415801-3.658281 163.853908-1.661768 162.467108-.251059C162.347557-.143462 162.347557-.119552 162.347557-.083686C162.347557-.011955 162.407333 .011955 162.455153 .011955C162.61057 .011955 163.590894-.848817 164.176697-2.020423C164.786411-3.239851 165.06138-4.531009 165.06138-5.965629Z"/>
<path d="M190.855461-14.603726C190.919222-14.8508 190.975013-14.86674 191.030804-14.87471C191.086594-14.89065 191.333668-14.89065 191.4851-14.89065C192.266171-14.89065 192.577005-14.8508 192.577005-14.276952C192.577005-14.197251 192.569035-14.14146 192.561065-14.069729L192.497304-13.551671V-13.511821C192.497304-13.503851 192.505274-13.47994 192.497304-13.47197C192.489334-13.45603 192.473394-13.344449 192.640766-13.344449C192.776258-13.344449 192.784228-13.400239 192.800168-13.511821L193.023332-14.930501L193.031302-15.042082C193.031302-15.153664 192.92769-15.153664 192.808139-15.153664H188.464427C188.289085-15.153664 188.265175-15.153664 188.217354-15.010202L187.731177-13.591522C187.691327-13.487911 187.691327-13.47197 187.691327-13.45603C187.691327-13.344449 187.802908-13.344449 187.842759-13.344449C187.874639-13.344449 187.92246-13.344449 187.95434-13.368359C187.978251-13.384299 187.978251-13.400239 188.049982-13.615432C188.456457-14.763129 188.695561-14.89065 189.763556-14.89065C189.922958-14.89065 190.122211-14.89065 190.241762-14.87471C190.233792-14.763129 190.233792-14.739218 190.201912-14.619666L189.157827-10.435358C189.078126-10.116553 189.030305-10.028882 188.305025-10.028882H188.201414C188.057952-10.028882 187.96231-10.028882 187.96231-9.87745C187.96231-9.845569 187.978251-9.765868 188.097802-9.765868C188.400667-9.765868 188.711501-9.789779 189.022335-9.789779H189.604154C189.922958-9.789779 190.257703-9.765868 190.568537-9.765868C190.624328-9.765868 190.735909-9.765868 190.735909-9.9173C190.735909-10.028882 190.640268-10.028882 190.512746-10.028882H190.409135C190.273643-10.028882 190.146121-10.036852 190.010629-10.044822C189.819347-10.068732 189.763556-10.084673 189.763556-10.188284C189.763556-10.236105 189.787466-10.315806 189.787466-10.323776L190.855461-14.603726Z"/>
<path d="M194.346823-10.849803C194.275092-10.58679 194.10772-9.90933 193.605603-9.90933C193.430261-9.90933 193.294769-9.981061 193.246948-10.020912C193.40635-10.084673 193.525902-10.228135 193.525902-10.403477C193.525902-10.63461 193.334619-10.674461 193.246948-10.674461C193.015815-10.674461 192.840472-10.475208 192.840472-10.236105C192.840472-9.853539 193.246948-9.686167 193.597633-9.686167C193.956288-9.686167 194.219302-9.90933 194.410584-10.188284C194.546076-9.89339 194.848941-9.686167 195.231506-9.686167C196.060398-9.686167 196.538604-10.674461 196.538604-10.913564C196.538604-11.009206 196.419053-11.009206 196.387172-11.009206C196.283561-11.009206 196.25168-10.985295 196.22777-10.905594C195.972726-10.084673 195.478579-9.90933 195.247446-9.90933C195.000373-9.90933 194.833-10.084673 194.833-10.411447C194.833-10.58679 194.928642-10.969355 195.000373-11.240339C195.080074-11.591024 195.167745-11.933739 195.255416-12.276454C195.382938-12.7706 195.653922-13.057525 195.956786-13.057525C196.164009-13.057525 196.299501-12.953913 196.315441-12.945943C196.24371-12.922033 196.036487-12.794511 196.036487-12.563378C196.036487-12.340214 196.21183-12.292394 196.315441-12.292394C196.466873-12.292394 196.713947-12.403975 196.713947-12.73075C196.713947-13.169106 196.22777-13.280688 195.964756-13.280688C195.637982-13.280688 195.366998-13.097375 195.151805-12.778571C195.056163-12.969853 194.81706-13.280688 194.330883-13.280688C193.494021-13.280688 193.023785-12.276454 193.023785-12.061261C193.023785-11.957649 193.127396-11.957649 193.175217-11.957649C193.278828-11.957649 193.302739-11.981559 193.326649-12.061261C193.573723-12.850302 194.051929-13.057525 194.314943-13.057525S194.729389-12.850302 194.729389-12.555407C194.729389-12.396005 194.689538-12.228633 194.601867-11.885918L194.346823-10.849803Z"/>
<path d="M177.441633-5.738481C177.644871-5.738481 177.860064-5.738481 177.860064-5.977584S177.644871-6.216687 177.441633-6.216687H170.973887C170.77065-6.216687 170.555456-6.216687 170.555456-5.977584S170.77065-5.738481 170.973887-5.738481H177.441633Z"/>
<path d="M181.103788-5.738481C181.307026-5.738481 181.522219-5.738481 181.522219-5.977584S181.307026-6.216687 181.103788-6.216687H174.636042C174.432805-6.216687 174.217611-6.216687 174.217611-5.977584S174.432805-5.738481 174.636042-5.738481H181.103788Z"/>
<path d="M187.745614-5.738481C187.948852-5.738481 188.164045-5.738481 188.164045-5.977584S187.948852-6.216687 187.745614-6.216687H181.277868C181.07463-6.216687 180.859437-6.216687 180.859437-5.977584S181.07463-5.738481 181.277868-5.738481H187.745614Z"/>
<path d="M194.38744-5.738481C194.590678-5.738481 194.805871-5.738481 194.805871-5.977584S194.590678-6.216687 194.38744-6.216687H187.919694C187.716456-6.216687 187.501263-6.216687 187.501263-5.977584S187.716456-5.738481 187.919694-5.738481H194.38744Z"/>
<path d="M201.029266-5.738481C201.232504-5.738481 201.447697-5.738481 201.447697-5.977584S201.232504-6.216687 201.029266-6.216687H194.56152C194.358282-6.216687 194.143089-6.216687 194.143089-5.977584S194.358282-5.738481 194.56152-5.738481H201.029266Z"/>
<path d="M207.671092-5.738481C207.87433-5.738481 208.089523-5.738481 208.089523-5.977584S207.87433-6.216687 207.671092-6.216687H201.203346C201.000108-6.216687 200.784915-6.216687 200.784915-5.977584S201.000108-5.738481 201.203346-5.738481H207.671092Z"/>
<path d="M213.425265-5.738481C212.76773-5.236364 212.444941-4.746202 212.3493-4.590785C211.811317-3.765878 211.715676-3.012702 211.715676-3.000747C211.715676-2.857285 211.859138-2.857285 211.954779-2.857285C212.158017-2.857285 212.169972-2.881196 212.217793-3.096389C212.492762-4.267995 213.198116-5.272229 214.54905-5.822167C214.692512-5.869988 214.728378-5.893898 214.728378-5.977584S214.656647-6.097136 214.632737-6.109091C214.106709-6.312329 212.660134-6.910087 212.205838-8.918555C212.169972-9.062017 212.158017-9.097883 211.954779-9.097883C211.859138-9.097883 211.715676-9.097883 211.715676-8.954421C211.715676-8.930511 211.823272-8.177335 212.325389-7.376339C212.564493-7.017684 212.911192-6.599253 213.425265-6.216687H204.542575C204.327382-6.216687 204.112189-6.216687 204.112189-5.977584S204.327382-5.738481 204.542575-5.738481H213.425265Z"/>
<path d="M222.616112-.083686C222.616112-.119552 222.616112-.143462 222.412874-.3467C221.217357-1.554172 220.547868-3.526775 220.547868-5.965629C220.547868-8.284932 221.109761-10.281445 222.49656-11.692154C222.616112-11.799751 222.616112-11.823661 222.616112-11.859527C222.616112-11.931258 222.556336-11.955168 222.508515-11.955168C222.353098-11.955168 221.372774-11.094396 220.786971-9.92279C220.177258-8.715318 219.902289-7.436115 219.902289-5.965629C219.902289-4.901619 220.069661-3.478954 220.69133-2.199751C221.396685-.765131 222.377009 .011955 222.508515 .011955C222.556336 .011955 222.616112-.011955 222.616112-.083686Z"/>
<path d="M228.615013-7.79477C228.854116-7.79477 228.949758-7.79477 228.949758-8.021918C228.949758-8.141469 228.854116-8.141469 228.638923-8.141469H227.670555C227.897703-9.372852 228.065075-10.221669 228.160717-10.604234C228.232448-10.891158 228.483506-11.166127 228.794341-11.166127C229.045399-11.166127 229.296458-11.058531 229.416009-10.950934C228.949758-10.903113 228.806296-10.556413 228.806296-10.353176C228.806296-10.114072 228.985623-9.97061 229.212771-9.97061C229.451875-9.97061 229.81053-10.173848 229.81053-10.628144C229.81053-11.130262 229.308413-11.40523 228.782385-11.40523C228.268313-11.40523 227.766196-11.022665 227.527093-10.556413C227.3119-10.137983 227.192348-9.707597 226.917379-8.141469H226.116383C225.889235-8.141469 225.769683-8.141469 225.769683-7.926276C225.769683-7.79477 225.841414-7.79477 226.080517-7.79477H226.845648C226.630455-6.682939 226.140293-3.981071 225.865324-2.701868C225.662087-1.661768 225.482759-.789041 224.885001-.789041C224.849135-.789041 224.502435-.789041 224.287242-1.016189C224.896956-1.06401 224.896956-1.590037 224.896956-1.601993C224.896956-1.841096 224.717628-1.984558 224.49048-1.984558C224.251377-1.984558 223.892722-1.78132 223.892722-1.327024C223.892722-.812951 224.418749-.549938 224.885001-.549938C226.104428-.549938 226.606545-2.737733 226.738052-3.335492C226.953245-4.25604 227.539048-7.436115 227.598824-7.79477H228.615013Z"/>
<path d="M232.01037-2.940971C232.01037-3.634371 231.783222-4.148443 231.29306-4.148443C230.910495-4.148443 230.719212-3.837609 230.719212-3.574595S230.89854-2.988792 231.305015-2.988792C231.460432-2.988792 231.591939-3.036613 231.699536-3.144209C231.723446-3.16812 231.735401-3.16812 231.747357-3.16812C231.771267-3.16812 231.771267-3.000747 231.771267-2.940971C231.771267-2.546451 231.699536-1.769365 231.006136-.992279C230.874629-.848817 230.874629-.824907 230.874629-.800996C230.874629-.74122 230.934405-.681445 230.994181-.681445C231.089822-.681445 232.01037-1.566127 232.01037-2.940971Z"/>
<path d="M244.25755-10.9868C244.269505-11.03462 244.293416-11.106351 244.293416-11.166127C244.293416-11.285679 244.173864-11.285679 244.149954-11.285679C244.137999-11.285679 243.552195-11.237858 243.492419-11.225903C243.289182-11.213948 243.109854-11.190037 242.894661-11.178082C242.595782-11.154172 242.512096-11.142217 242.512096-10.927024C242.512096-10.807472 242.607737-10.807472 242.775109-10.807472C243.360913-10.807472 243.372868-10.699875 243.372868-10.580324C243.372868-10.508593 243.348957-10.412951 243.337002-10.377086L242.607737-7.47198C242.47623-7.782814 242.153441-8.261021 241.531772-8.261021C240.180838-8.261021 238.722307-6.515567 238.722307-4.746202C238.722307-3.56264 239.415707-2.86924 240.228659-2.86924C240.886193-2.86924 241.448086-3.383313 241.78283-3.777833C241.902382-3.072478 242.464275-2.86924 242.82293-2.86924S243.468509-3.084433 243.683702-3.514819C243.874985-3.921295 244.042357-4.65056 244.042357-4.698381C244.042357-4.758157 243.994537-4.805978 243.922806-4.805978C243.815209-4.805978 243.803254-4.746202 243.755433-4.566874C243.576106-3.861519 243.348957-3.108344 242.858796-3.108344C242.512096-3.108344 242.488185-3.419178 242.488185-3.658281C242.488185-3.706102 242.488185-3.957161 242.571872-4.291905L244.25755-10.9868ZM241.842606-4.411457C241.78283-4.208219 241.78283-4.184309 241.615458-3.957161C241.352444-3.622416 240.826417-3.108344 240.264524-3.108344C239.774362-3.108344 239.499393-3.550685 239.499393-4.25604C239.499393-4.913574 239.870004-6.252553 240.097152-6.75467C240.503627-7.591532 241.06552-8.021918 241.531772-8.021918C242.320813-8.021918 242.47623-7.041594 242.47623-6.945953C242.47623-6.933998 242.440365-6.77858 242.428409-6.75467L241.842606-4.411457Z"/>
<path d="M246.446843-3.331519C246.486694-3.459041 246.733767-3.929277 246.980841-4.160411C247.227914-4.375604 247.482958-4.487185 247.761912-4.487185C248.072746-4.487185 248.168388-4.264022 248.168388-3.961158C248.168388-3.498891 247.833643-2.590299 247.682211-2.191793C247.62642-2.048331 247.578599-1.920809 247.578599-1.777347C247.578599-1.410722 247.841613-1.115828 248.248089-1.115828C249.005249-1.115828 249.339994-2.223673 249.339994-2.335255C249.339994-2.438866 249.228413-2.438866 249.188562-2.438866C249.06104-2.438866 249.05307-2.406986 249.01322-2.271494C248.869758-1.761407 248.606744-1.338991 248.264029-1.338991C248.112597-1.338991 248.088687-1.450573 248.088687-1.594035C248.088687-1.777347 248.152447-1.94472 248.208238-2.104122C248.36764-2.526538 248.694415-3.38731 248.694415-3.849576C248.694415-4.535006 248.224178-4.710348 247.785822-4.710348C247.108363-4.710348 246.733767-4.256052 246.582335-4.072739C246.534515-4.439365 246.239621-4.710348 245.849085-4.710348C245.578101-4.710348 245.386819-4.558916 245.227416-4.279962C245.083954-4.008979 244.964403-3.530772 244.964403-3.490921C244.964403-3.38731 245.068014-3.38731 245.115835-3.38731C245.243357-3.38731 245.251327-3.41122 245.299147-3.602503C245.418699-4.072739 245.562161-4.487185 245.833145-4.487185C246.056308-4.487185 246.056308-4.208231 246.056308-4.1365C246.056308-4.024919 246.040368-3.897397 246.008487-3.785815L245.426669-1.458543C245.410729-1.386812 245.402759-1.362901 245.402759-1.338991C245.402759-1.211469 245.50637-1.115828 245.641862-1.115828C245.896906-1.115828 245.944726-1.307111 246.016457-1.609975C246.072248-1.809228 246.151949-2.136002 246.1918-2.295404C246.23165-2.462777 246.23165-2.478717 246.319322-2.813462L246.446843-3.331519Z"/>
<path d="M251.240656-3.012715C251.55946-3.012715 253.049871-3.012715 253.049871-4.016949C253.049871-4.415454 252.699186-4.710348 252.157219-4.710348C251.296447-4.710348 250.08499-3.961158 250.08499-2.550448C250.08499-1.817198 250.499436-1.115828 251.344267-1.115828C252.491964-1.115828 253.137543-1.880959 253.137543-1.99254C253.137543-2.056301 253.033931-2.159913 252.97814-2.159913C252.93032-2.159913 252.92235-2.143972 252.850619-2.064271C252.420233-1.538244 251.790594-1.338991 251.352238-1.338991C250.8023-1.338991 250.674778-1.888929 250.674778-2.247584C250.674778-2.430896 250.730569-2.773611 250.78636-3.012715H251.240656ZM250.85012-3.235878C251.113134-4.224172 251.806534-4.487185 252.157219-4.487185C252.436173-4.487185 252.699186-4.335753 252.699186-4.016949C252.699186-3.235878 251.471789-3.235878 251.176895-3.235878H250.85012Z"/>
<path d="M256.299697-2.574358C256.243906-2.351195 256.243906-2.343225 256.235936-2.151942C256.227966-1.94472 256.092474-1.729526 256.012773-1.617945C255.869311-1.426662 255.717879-1.338991 255.534566-1.338991C255.207791-1.338991 254.920867-1.506363 254.920867-2.032391C254.920867-2.446837 255.144031-3.052565 255.335313-3.562652C255.438925-3.825666 255.462835-3.889427 255.462835-4.048829C255.462835-4.487185 255.13606-4.710348 254.801316-4.710348C254.036185-4.710348 253.70941-3.594533 253.70941-3.490921S253.813022-3.38731 253.860842-3.38731C253.988364-3.38731 253.996334-3.41122 254.028215-3.554682C254.171677-4.048829 254.434691-4.487185 254.785375-4.487185C254.928837-4.487185 254.960718-4.383574 254.960718-4.240112C254.960718-4.056799 254.896957-3.889427 254.825226-3.706114C254.474541-2.765641 254.39484-2.470747 254.39484-2.128032C254.39484-1.24335 255.12012-1.115828 255.518626-1.115828C255.741789-1.115828 256.036683-1.163649 256.339547-1.609975C256.56271-1.179589 257.056857-1.115828 257.303931-1.115828C257.774167-1.115828 258.140793-1.394782 258.435687-2.048331C258.69073-2.598269 258.969684-3.698144 258.969684-4.12853C258.969684-4.630647 258.730581-4.710348 258.611029-4.710348C258.443657-4.710348 258.220494-4.550946 258.220494-4.327783C258.220494-4.216201 258.276285-4.160411 258.324105-4.11259C258.483507-3.945218 258.539298-3.722055 258.539298-3.506861C258.539298-3.196027 258.292225-2.383076 258.156733-2.064271C257.98139-1.657795 257.726347-1.338991 257.335811-1.338991C256.769933-1.338991 256.769933-1.880959 256.769933-2.00848C256.769933-2.223673 256.793844-2.335255 256.913395-2.805492C256.977156-3.076475 257.048887-3.339489 257.112648-3.610473L257.22423-4.056799C257.25611-4.168381 257.303931-4.375604 257.303931-4.399514C257.303931-4.550946 257.192349-4.630647 257.064828-4.630647C256.809784-4.630647 256.746023-4.383574 256.730083-4.311843L256.299697-2.574358Z"/>
<path d="M263.483439-5.965629C263.483439-6.874222 263.363887-8.356663 262.694398-9.743462C261.989043-11.178082 261.008719-11.955168 260.877212-11.955168C260.829391-11.955168 260.769615-11.931258 260.769615-11.859527C260.769615-11.823661 260.769615-11.799751 260.972853-11.596513C262.16837-10.389041 262.83786-8.416438 262.83786-5.977584C262.83786-3.658281 262.275967-1.661768 260.889167-.251059C260.769615-.143462 260.769615-.119552 260.769615-.083686C260.769615-.011955 260.829391 .011955 260.877212 .011955C261.032629 .011955 262.012953-.848817 262.598756-2.020423C263.20847-3.239851 263.483439-4.531009 263.483439-5.965629Z"/>
</g>
</svg>
</center>
<h3 id="inductive-reasoning">Inductive reasoning</h3>
<p>When <code>Tx</code> is validated, <code>f</code> can verify the evolution of <code>d<sub>old</sub></code> to <code>d<sub>new</sub></code>, but it cannot verify <code>d<sub>old</sub></code>; instead, we want to reason inductively, and say that <code>f</code> must at some point have verified that previous state as well:</p>
<center>
<svg height="16.040086pt" version="1.1" viewBox="27.175953 -16.028131 333.010117 16.040086" width="333.010117pt">
<title>   \cdots \xrightarrow{\mspace{30mu}\mathit{Tx}_n\mspace{30mu}}   (f, \; d_n) \xrightarrow{\mspace{30mu}\mathit{Tx}_{n+1}\mspace{30mu}}   (f, \; d_{n+1}) \xrightarrow{\mspace{30mu}\mathit{Tx}_{n+2}\mspace{30mu}}   (f, \; d_{n+2}) </title>
<defs/>
<g>
<path d="M29.471345-5.977584C29.471345-6.324284 29.184421-6.611208 28.837721-6.611208S28.204097-6.324284 28.204097-5.977584S28.491021-5.34396 28.837721-5.34396S29.471345-5.630884 29.471345-5.977584Z"/>
<path d="M34.784733-5.977584C34.784733-6.324284 34.497809-6.611208 34.151109-6.611208S33.517485-6.324284 33.517485-5.977584S33.804409-5.34396 34.151109-5.34396S34.784733-5.630884 34.784733-5.977584Z"/>
<path d="M40.098121-5.977584C40.098121-6.324284 39.811197-6.611208 39.464497-6.611208S38.830873-6.324284 38.830873-5.977584S39.117797-5.34396 39.464497-5.34396S40.098121-5.630884 40.098121-5.977584Z"/>
<path d="M65.736731-14.603726C65.800492-14.8508 65.856283-14.86674 65.912074-14.87471C65.967865-14.89065 66.214938-14.89065 66.36637-14.89065C67.147441-14.89065 67.458276-14.8508 67.458276-14.276952C67.458276-14.197251 67.450305-14.14146 67.442335-14.069729L67.378574-13.551671V-13.511821C67.378574-13.503851 67.386545-13.47994 67.378574-13.47197C67.370604-13.45603 67.354664-13.344449 67.522037-13.344449C67.657528-13.344449 67.665499-13.400239 67.681439-13.511821L67.904602-14.930501L67.912572-15.042082C67.912572-15.153664 67.808961-15.153664 67.689409-15.153664H63.345698C63.170355-15.153664 63.146445-15.153664 63.098624-15.010202L62.612447-13.591522C62.572597-13.487911 62.572597-13.47197 62.572597-13.45603C62.572597-13.344449 62.684178-13.344449 62.724029-13.344449C62.755909-13.344449 62.80373-13.344449 62.835611-13.368359C62.859521-13.384299 62.859521-13.400239 62.931252-13.615432C63.337728-14.763129 63.576831-14.89065 64.644826-14.89065C64.804228-14.89065 65.003481-14.89065 65.123033-14.87471C65.115063-14.763129 65.115063-14.739218 65.083182-14.619666L64.039098-10.435358C63.959396-10.116553 63.911576-10.028882 63.186296-10.028882H63.082684C62.939222-10.028882 62.843581-10.028882 62.843581-9.87745C62.843581-9.845569 62.859521-9.765868 62.979073-9.765868C63.281937-9.765868 63.592771-9.789779 63.903606-9.789779H64.485424C64.804228-9.789779 65.138973-9.765868 65.449807-9.765868C65.505598-9.765868 65.61718-9.765868 65.61718-9.9173C65.61718-10.028882 65.521538-10.028882 65.394017-10.028882H65.290405C65.154913-10.028882 65.027391-10.036852 64.8919-10.044822C64.700617-10.068732 64.644826-10.084673 64.644826-10.188284C64.644826-10.236105 64.668736-10.315806 64.668736-10.323776L65.736731-14.603726Z"/>
<path d="M69.228094-10.849803C69.156363-10.58679 68.98899-9.90933 68.486873-9.90933C68.311531-9.90933 68.176039-9.981061 68.128218-10.020912C68.287621-10.084673 68.407172-10.228135 68.407172-10.403477C68.407172-10.63461 68.21589-10.674461 68.128218-10.674461C67.897085-10.674461 67.721743-10.475208 67.721743-10.236105C67.721743-9.853539 68.128218-9.686167 68.478903-9.686167C68.837558-9.686167 69.100572-9.90933 69.291855-10.188284C69.427347-9.89339 69.730211-9.686167 70.112776-9.686167C70.941668-9.686167 71.419875-10.674461 71.419875-10.913564C71.419875-11.009206 71.300323-11.009206 71.268442-11.009206C71.164831-11.009206 71.132951-10.985295 71.10904-10.905594C70.853997-10.084673 70.35985-9.90933 70.128716-9.90933C69.881643-9.90933 69.714271-10.084673 69.714271-10.411447C69.714271-10.58679 69.809912-10.969355 69.881643-11.240339C69.961344-11.591024 70.049015-11.933739 70.136687-12.276454C70.264208-12.7706 70.535192-13.057525 70.838056-13.057525C71.045279-13.057525 71.180771-12.953913 71.196711-12.945943C71.12498-12.922033 70.917758-12.794511 70.917758-12.563378C70.917758-12.340214 71.0931-12.292394 71.196711-12.292394C71.348144-12.292394 71.595217-12.403975 71.595217-12.73075C71.595217-13.169106 71.10904-13.280688 70.846026-13.280688C70.519252-13.280688 70.248268-13.097375 70.033075-12.778571C69.937434-12.969853 69.69833-13.280688 69.212154-13.280688C68.375292-13.280688 67.905055-12.276454 67.905055-12.061261C67.905055-11.957649 68.008667-11.957649 68.056487-11.957649C68.160099-11.957649 68.184009-11.981559 68.207919-12.061261C68.454993-12.850302 68.9332-13.057525 69.196213-13.057525S69.610659-12.850302 69.610659-12.555407C69.610659-12.396005 69.570809-12.228633 69.483137-11.885918L69.228094-10.849803Z"/>
<path d="M73.929662-10.837848C73.899774-11.292145 73.481343-11.405719 73.254195-11.405719S72.87163-11.268234 72.764033-11.076952C72.614594-10.831871 72.542863-10.515059 72.542863-10.491148C72.542863-10.425395 72.596661-10.401485 72.650459-10.401485C72.7461-10.401485 72.752078-10.443328 72.781966-10.538969C72.901518-11.017176 73.04498-11.208459 73.236262-11.208459C73.451455-11.208459 73.451455-10.963378 73.451455-10.903602C73.451455-10.80796 73.39168-10.568857 73.349836-10.401485C73.307993-10.24009 73.248217-9.995009 73.21833-9.863502C73.176486-9.714062 73.140621-9.558645 73.098778-9.409206C73.056935-9.241833 72.985204-8.942954 72.985204-8.907089C72.985204-8.775582 73.086823-8.709828 73.194419-8.709828S73.403635-8.781559 73.451455-8.871223C73.463411-8.907089 73.517209-9.116304 73.547097-9.235856L73.678604-9.773838C73.720447-9.929256 73.744357-10.036852 73.780222-10.174336C73.834021-10.377574 74.043236-10.694386 74.264407-10.915557C74.383958-11.029131 74.640995-11.208459 74.963784-11.208459C75.34635-11.208459 75.34635-10.903602 75.34635-10.790028C75.34635-10.43735 75.089313-9.797749 74.981717-9.528757C74.945851-9.427138 74.904008-9.331497 74.904008-9.229878C74.904008-8.925021 75.178977-8.709828 75.507744-8.709828C76.11148-8.709828 76.410359-9.498869 76.410359-9.630376C76.410359-9.642331 76.404382-9.714062 76.296785-9.714062C76.213099-9.714062 76.207122-9.684175 76.171256-9.5706C76.075615-9.253789 75.830534-8.907089 75.525677-8.907089C75.412103-8.907089 75.364282-8.996752 75.364282-9.122282C75.364282-9.241833 75.406125-9.343452 75.459924-9.468982C75.549587-9.702107 75.818579-10.377574 75.818579-10.712319C75.818579-11.202481 75.447968-11.405719 74.993672-11.405719C74.694793-11.405719 74.312227-11.310077 73.929662-10.837848Z"/>
<path d="M52.322904-5.738481C52.526141-5.738481 52.741334-5.738481 52.741334-5.977584S52.526141-6.216687 52.322904-6.216687H45.855158C45.65192-6.216687 45.436727-6.216687 45.436727-5.977584S45.65192-5.738481 45.855158-5.738481H52.322904Z"/>
<path d="M58.534519-5.738481C58.737757-5.738481 58.95295-5.738481 58.95295-5.977584S58.737757-6.216687 58.534519-6.216687H52.066773C51.863535-6.216687 51.648342-6.216687 51.648342-5.977584S51.863535-5.738481 52.066773-5.738481H58.534519Z"/>
<path d="M65.176345-5.738481C65.379583-5.738481 65.594776-5.738481 65.594776-5.977584S65.379583-6.216687 65.176345-6.216687H58.708599C58.505361-6.216687 58.290168-6.216687 58.290168-5.977584S58.505361-5.738481 58.708599-5.738481H65.176345Z"/>
<path d="M71.818171-5.738481C72.021409-5.738481 72.236602-5.738481 72.236602-5.977584S72.021409-6.216687 71.818171-6.216687H65.350425C65.147187-6.216687 64.931994-6.216687 64.931994-5.977584S65.147187-5.738481 65.350425-5.738481H71.818171Z"/>
<path d="M78.459997-5.738481C78.663235-5.738481 78.878428-5.738481 78.878428-5.977584S78.663235-6.216687 78.459997-6.216687H71.992251C71.789013-6.216687 71.57382-6.216687 71.57382-5.977584S71.789013-5.738481 71.992251-5.738481H78.459997Z"/>
<path d="M85.101823-5.738481C85.305061-5.738481 85.520254-5.738481 85.520254-5.977584S85.305061-6.216687 85.101823-6.216687H78.634077C78.430839-6.216687 78.215646-6.216687 78.215646-5.977584S78.430839-5.738481 78.634077-5.738481H85.101823Z"/>
<path d="M93.405441-5.738481C92.747907-5.236364 92.425117-4.746202 92.329476-4.590785C91.791493-3.765878 91.695852-3.012702 91.695852-3.000747C91.695852-2.857285 91.839314-2.857285 91.934955-2.857285C92.138193-2.857285 92.150148-2.881196 92.197969-3.096389C92.472938-4.267995 93.178293-5.272229 94.529227-5.822167C94.672689-5.869988 94.708554-5.893898 94.708554-5.977584S94.636823-6.097136 94.612913-6.109091C94.086885-6.312329 92.64031-6.910087 92.186014-8.918555C92.150148-9.062017 92.138193-9.097883 91.934955-9.097883C91.839314-9.097883 91.695852-9.097883 91.695852-8.954421C91.695852-8.930511 91.803448-8.177335 92.305565-7.376339C92.544669-7.017684 92.891369-6.599253 93.405441-6.216687H84.522751C84.307558-6.216687 84.092365-6.216687 84.092365-5.977584S84.307558-5.738481 84.522751-5.738481H93.405441Z"/>
<path d="M102.596288-.083686C102.596288-.119552 102.596288-.143462 102.39305-.3467C101.197533-1.554172 100.528044-3.526775 100.528044-5.965629C100.528044-8.284932 101.089937-10.281445 102.476736-11.692154C102.596288-11.799751 102.596288-11.823661 102.596288-11.859527C102.596288-11.931258 102.536512-11.955168 102.488692-11.955168C102.333274-11.955168 101.352951-11.094396 100.767147-9.92279C100.157434-8.715318 99.882465-7.436115 99.882465-5.965629C99.882465-4.901619 100.049837-3.478954 100.671506-2.199751C101.376861-.765131 102.357185 .011955 102.488692 .011955C102.536512 .011955 102.596288-.011955 102.596288-.083686Z"/>
<path d="M108.595189-7.79477C108.834293-7.79477 108.929934-7.79477 108.929934-8.021918C108.929934-8.141469 108.834293-8.141469 108.6191-8.141469H107.650731C107.877879-9.372852 108.045251-10.221669 108.140893-10.604234C108.212624-10.891158 108.463682-11.166127 108.774517-11.166127C109.025575-11.166127 109.276634-11.058531 109.396185-10.950934C108.929934-10.903113 108.786472-10.556413 108.786472-10.353176C108.786472-10.114072 108.965799-9.97061 109.192948-9.97061C109.432051-9.97061 109.790706-10.173848 109.790706-10.628144C109.790706-11.130262 109.288589-11.40523 108.762562-11.40523C108.248489-11.40523 107.746372-11.022665 107.507269-10.556413C107.292076-10.137983 107.172524-9.707597 106.897555-8.141469H106.096559C105.869411-8.141469 105.749859-8.141469 105.749859-7.926276C105.749859-7.79477 105.82159-7.79477 106.060694-7.79477H106.825824C106.610631-6.682939 106.120469-3.981071 105.845501-2.701868C105.642263-1.661768 105.462935-.789041 104.865177-.789041C104.829311-.789041 104.482611-.789041 104.267418-1.016189C104.877132-1.06401 104.877132-1.590037 104.877132-1.601993C104.877132-1.841096 104.697804-1.984558 104.470656-1.984558C104.231553-1.984558 103.872898-1.78132 103.872898-1.327024C103.872898-.812951 104.398925-.549938 104.865177-.549938C106.084604-.549938 106.586721-2.737733 106.718228-3.335492C106.933421-4.25604 107.519224-7.436115 107.579-7.79477H108.595189Z"/>
<path d="M111.990546-2.940971C111.990546-3.634371 111.763398-4.148443 111.273236-4.148443C110.890671-4.148443 110.699388-3.837609 110.699388-3.574595S110.878716-2.988792 111.285191-2.988792C111.440609-2.988792 111.572115-3.036613 111.679712-3.144209C111.703622-3.16812 111.715577-3.16812 111.727533-3.16812C111.751443-3.16812 111.751443-3.000747 111.751443-2.940971C111.751443-2.546451 111.679712-1.769365 110.986312-.992279C110.854805-.848817 110.854805-.824907 110.854805-.800996C110.854805-.74122 110.914581-.681445 110.974357-.681445C111.069998-.681445 111.990546-1.566127 111.990546-2.940971Z"/>
<path d="M124.237726-10.9868C124.249681-11.03462 124.273592-11.106351 124.273592-11.166127C124.273592-11.285679 124.15404-11.285679 124.13013-11.285679C124.118175-11.285679 123.532371-11.237858 123.472596-11.225903C123.269358-11.213948 123.09003-11.190037 122.874837-11.178082C122.575958-11.154172 122.492272-11.142217 122.492272-10.927024C122.492272-10.807472 122.587913-10.807472 122.755285-10.807472C123.341089-10.807472 123.353044-10.699875 123.353044-10.580324C123.353044-10.508593 123.329134-10.412951 123.317178-10.377086L122.587913-7.47198C122.456406-7.782814 122.133617-8.261021 121.511948-8.261021C120.161014-8.261021 118.702483-6.515567 118.702483-4.746202C118.702483-3.56264 119.395883-2.86924 120.208835-2.86924C120.866369-2.86924 121.428262-3.383313 121.763007-3.777833C121.882558-3.072478 122.444451-2.86924 122.803106-2.86924S123.448685-3.084433 123.663878-3.514819C123.855161-3.921295 124.022533-4.65056 124.022533-4.698381C124.022533-4.758157 123.974713-4.805978 123.902982-4.805978C123.795385-4.805978 123.78343-4.746202 123.735609-4.566874C123.556282-3.861519 123.329134-3.108344 122.838972-3.108344C122.492272-3.108344 122.468361-3.419178 122.468361-3.658281C122.468361-3.706102 122.468361-3.957161 122.552048-4.291905L124.237726-10.9868ZM121.822782-4.411457C121.763007-4.208219 121.763007-4.184309 121.595634-3.957161C121.33262-3.622416 120.806593-3.108344 120.2447-3.108344C119.754538-3.108344 119.479569-3.550685 119.479569-4.25604C119.479569-4.913574 119.85018-6.252553 120.077328-6.75467C120.483804-7.591532 121.045696-8.021918 121.511948-8.021918C122.300989-8.021918 122.456406-7.041594 122.456406-6.945953C122.456406-6.933998 122.420541-6.77858 122.408586-6.75467L121.822782-4.411457Z"/>
<path d="M125.900992-2.502627C125.924902-2.622179 126.004604-2.925043 126.028514-3.044595C126.140096-3.474981 126.140096-3.482951 126.323408-3.745965C126.586422-4.1365 126.961017-4.487185 127.495015-4.487185C127.781939-4.487185 127.949311-4.319813 127.949311-3.945218C127.949311-3.506861 127.614566-2.598269 127.463134-2.207733C127.359523-1.94472 127.359523-1.896899 127.359523-1.793287C127.359523-1.338991 127.734118-1.115828 128.076833-1.115828C128.857904-1.115828 129.184678-2.231644 129.184678-2.335255C129.184678-2.414956 129.120917-2.438866 129.065127-2.438866C128.969485-2.438866 128.953545-2.383076 128.929635-2.303375C128.738352-1.649825 128.403607-1.338991 128.100743-1.338991C127.973221-1.338991 127.90946-1.418692 127.90946-1.602005S127.973221-1.96066 128.052922-2.159913C128.172474-2.462777 128.523159-3.37934 128.523159-3.825666C128.523159-4.423424 128.108713-4.710348 127.534865-4.710348C126.889286-4.710348 126.47484-4.319813 126.243707-4.016949C126.187916-4.455305 125.837231-4.710348 125.430756-4.710348C125.143832-4.710348 124.944579-4.527036 124.817057-4.279962C124.625774-3.905367 124.546073-3.506861 124.546073-3.490921C124.546073-3.41919 124.601864-3.38731 124.665625-3.38731C124.769236-3.38731 124.777206-3.41919 124.832997-3.626413C124.928638-4.016949 125.072101-4.487185 125.406845-4.487185C125.614068-4.487185 125.661889-4.287932 125.661889-4.11259C125.661889-3.969128 125.622038-3.817696 125.558277-3.554682C125.542337-3.490921 125.422785-3.020685 125.390905-2.909103L125.096011-1.713586C125.06413-1.594035 125.01631-1.394782 125.01631-1.362901C125.01631-1.179589 125.167742-1.115828 125.271353-1.115828C125.414815-1.115828 125.534367-1.211469 125.590158-1.307111C125.614068-1.354931 125.677829-1.625915 125.71768-1.793287L125.900992-2.502627Z"/>
<path d="M133.314662-5.965629C133.314662-6.874222 133.19511-8.356663 132.525621-9.743462C131.820266-11.178082 130.839942-11.955168 130.708435-11.955168C130.660614-11.955168 130.600838-11.931258 130.600838-11.859527C130.600838-11.823661 130.600838-11.799751 130.804076-11.596513C131.999593-10.389041 132.669083-8.416438 132.669083-5.977584C132.669083-3.658281 132.10719-1.661768 130.72039-.251059C130.600838-.143462 130.600838-.119552 130.600838-.083686C130.600838-.011955 130.660614 .011955 130.708435 .011955C130.863852 .011955 131.844176-.848817 132.429979-2.020423C133.039693-3.239851 133.314662-4.531009 133.314662-5.965629Z"/>
<path d="M159.108743-15.478194C159.172504-15.725267 159.228295-15.741207 159.284085-15.749177C159.339876-15.765118 159.58695-15.765118 159.738382-15.765118C160.519453-15.765118 160.830287-15.725267 160.830287-15.151419C160.830287-15.071718 160.822317-15.015927 160.814347-14.944196L160.750586-14.426139V-14.386288C160.750586-14.378318 160.758556-14.354408 160.750586-14.346438C160.742616-14.330497 160.726676-14.218916 160.894048-14.218916C161.02954-14.218916 161.03751-14.274707 161.05345-14.386288L161.276613-15.804968L161.284583-15.91655C161.284583-16.028131 161.180972-16.028131 161.06142-16.028131H156.717709C156.542367-16.028131 156.518456-16.028131 156.470636-15.884669L155.984459-14.465989C155.944608-14.362378 155.944608-14.346438 155.944608-14.330497C155.944608-14.218916 156.05619-14.218916 156.096041-14.218916C156.127921-14.218916 156.175742-14.218916 156.207622-14.242826C156.231532-14.258766 156.231532-14.274707 156.303263-14.4899C156.709739-15.637596 156.948843-15.765118 158.016838-15.765118C158.17624-15.765118 158.375493-15.765118 158.495044-15.749177C158.487074-15.637596 158.487074-15.613685 158.455194-15.494134L157.411109-11.309825C157.331408-10.99102 157.283587-10.903349 156.558307-10.903349H156.454696C156.311234-10.903349 156.215592-10.903349 156.215592-10.751917C156.215592-10.720037 156.231532-10.640336 156.351084-10.640336C156.653948-10.640336 156.964783-10.664246 157.275617-10.664246H157.857435C158.17624-10.664246 158.510984-10.640336 158.821819-10.640336C158.87761-10.640336 158.989191-10.640336 158.989191-10.791768C158.989191-10.903349 158.89355-10.903349 158.766028-10.903349H158.662417C158.526925-10.903349 158.399403-10.911319 158.263911-10.919289C158.072628-10.9432 158.016838-10.95914 158.016838-11.062751C158.016838-11.110572 158.040748-11.190273 158.040748-11.198243L159.108743-15.478194Z"/>
<path d="M162.600105-11.724271C162.528374-11.461257 162.361002-10.783798 161.858885-10.783798C161.683542-10.783798 161.54805-10.855529 161.50023-10.895379C161.659632-10.95914 161.779184-11.102602 161.779184-11.277945C161.779184-11.509078 161.587901-11.548928 161.50023-11.548928C161.269097-11.548928 161.093754-11.349676 161.093754-11.110572C161.093754-10.728007 161.50023-10.560634 161.850915-10.560634C162.20957-10.560634 162.472583-10.783798 162.663866-11.062751C162.799358-10.767857 163.102222-10.560634 163.484788-10.560634C164.313679-10.560634 164.791886-11.548928 164.791886-11.788032C164.791886-11.883673 164.672334-11.883673 164.640454-11.883673C164.536842-11.883673 164.504962-11.859763 164.481052-11.780062C164.226008-10.95914 163.731861-10.783798 163.500728-10.783798C163.253654-10.783798 163.086282-10.95914 163.086282-11.285915C163.086282-11.461257 163.181923-11.843822 163.253654-12.114806C163.333356-12.465491 163.421027-12.808206 163.508698-13.150921C163.63622-13.645068 163.907204-13.931992 164.210068-13.931992C164.417291-13.931992 164.552783-13.82838 164.568723-13.82041C164.496992-13.7965 164.289769-13.668978 164.289769-13.437845C164.289769-13.214682 164.465111-13.166861 164.568723-13.166861C164.720155-13.166861 164.967229-13.278443 164.967229-13.605217C164.967229-14.043573 164.481052-14.155155 164.218038-14.155155C163.891263-14.155155 163.62028-13.971842 163.405087-13.653038C163.309445-13.844321 163.070342-14.155155 162.584165-14.155155C161.747303-14.155155 161.277067-13.150921 161.277067-12.935728C161.277067-12.832116 161.380678-12.832116 161.428499-12.832116C161.53211-12.832116 161.556021-12.856027 161.579931-12.935728C161.827004-13.724769 162.305211-13.931992 162.568225-13.931992S162.982671-13.724769 162.982671-13.429875C162.982671-13.270473 162.94282-13.1031 162.855149-12.760385L162.600105-11.724271Z"/>
<path d="M167.301674-11.601631C167.271786-12.055928 166.853355-12.169502 166.626207-12.169502S166.243641-12.032018 166.136045-11.840735C165.986605-11.595654 165.914874-11.278842 165.914874-11.254932C165.914874-11.189178 165.968672-11.165268 166.022471-11.165268C166.118112-11.165268 166.12409-11.207111 166.153977-11.302752C166.273529-11.780959 166.416991-11.972242 166.608274-11.972242C166.823467-11.972242 166.823467-11.727161 166.823467-11.667385C166.823467-11.571744 166.763691-11.33264 166.721848-11.165268C166.680005-11.003873 166.620229-10.758792 166.590341-10.627285C166.548498-10.477846 166.512632-10.322428 166.470789-10.172989C166.428946-10.005617 166.357215-9.706737 166.357215-9.670872C166.357215-9.539365 166.458834-9.473612 166.566431-9.473612S166.775646-9.545343 166.823467-9.635006C166.835422-9.670872 166.88922-9.880087 166.919108-9.999639L167.050615-10.537621C167.092458-10.693039 167.116368-10.800635 167.152234-10.93812C167.206032-11.141357 167.415248-11.458169 167.636418-11.67934C167.75597-11.792914 168.013006-11.972242 168.335796-11.972242C168.718361-11.972242 168.718361-11.667385 168.718361-11.553811C168.718361-11.201133 168.461325-10.561532 168.353728-10.292541C168.317863-10.190922 168.27602-10.09528 168.27602-9.993661C168.27602-9.688805 168.550989-9.473612 168.879756-9.473612C169.483492-9.473612 169.782371-10.262653 169.782371-10.394159C169.782371-10.406115 169.776393-10.477846 169.668797-10.477846C169.585111-10.477846 169.579133-10.447958 169.543268-10.334384C169.447626-10.017572 169.202545-9.670872 168.897689-9.670872C168.784114-9.670872 168.736294-9.760536 168.736294-9.886065C168.736294-10.005617 168.778137-10.107235 168.831935-10.232765C168.921599-10.46589 169.19059-11.141357 169.19059-11.476102C169.19059-11.966264 168.81998-12.169502 168.365684-12.169502C168.066804-12.169502 167.684239-12.073861 167.301674-11.601631Z"/>
<path d="M173.097978-10.872366H175.028737C175.112423-10.872366 175.261863-10.872366 175.261863-11.027783S175.112423-11.183201 175.028737-11.183201H173.097978V-13.119938C173.097978-13.203624 173.097978-13.353064 172.94256-13.353064S172.787143-13.203624 172.787143-13.119938V-11.183201H170.856383C170.772697-11.183201 170.623258-11.183201 170.623258-11.027783S170.772697-10.872366 170.856383-10.872366H172.787143V-8.935629C172.787143-8.851943 172.787143-8.702503 172.94256-8.702503S173.097978-8.851943 173.097978-8.935629V-10.872366Z"/>
<path d="M177.887074-13.329153C177.887074-13.508481 177.863163-13.508481 177.683836-13.508481C177.289315-13.125915 176.679602-13.125915 176.464409-13.125915V-12.89279C176.619826-12.89279 177.014346-12.89279 177.373002-13.060162V-10.041482C177.373002-9.844222 177.373002-9.766513 176.75731-9.766513H176.500274V-9.533387C176.829041-9.557298 177.295293-9.557298 177.630038-9.557298S178.431034-9.557298 178.759801-9.533387V-9.766513H178.502765C177.887074-9.766513 177.887074-9.844222 177.887074-10.041482V-13.329153Z"/>
<path d="M145.694915-5.738481C145.898153-5.738481 146.113346-5.738481 146.113346-5.977584S145.898153-6.216687 145.694915-6.216687H139.227169C139.023931-6.216687 138.808738-6.216687 138.808738-5.977584S139.023931-5.738481 139.227169-5.738481H145.694915Z"/>
<path d="M149.886199-5.738481C150.089436-5.738481 150.304629-5.738481 150.304629-5.977584S150.089436-6.216687 149.886199-6.216687H143.418453C143.215215-6.216687 143.000022-6.216687 143.000022-5.977584S143.215215-5.738481 143.418453-5.738481H149.886199Z"/>
<path d="M156.528024-5.738481C156.731262-5.738481 156.946455-5.738481 156.946455-5.977584S156.731262-6.216687 156.528024-6.216687H150.060279C149.857041-6.216687 149.641848-6.216687 149.641848-5.977584S149.857041-5.738481 150.060279-5.738481H156.528024Z"/>
<path d="M163.16985-5.738481C163.373088-5.738481 163.588281-5.738481 163.588281-5.977584S163.373088-6.216687 163.16985-6.216687H156.702104C156.498867-6.216687 156.283674-6.216687 156.283674-5.977584S156.498867-5.738481 156.702104-5.738481H163.16985Z"/>
<path d="M169.811676-5.738481C170.014914-5.738481 170.230107-5.738481 170.230107-5.977584S170.014914-6.216687 169.811676-6.216687H163.34393C163.140693-6.216687 162.9255-6.216687 162.9255-5.977584S163.140693-5.738481 163.34393-5.738481H169.811676Z"/>
<path d="M176.453502-5.738481C176.65674-5.738481 176.871933-5.738481 176.871933-5.977584S176.65674-6.216687 176.453502-6.216687H169.985756C169.782518-6.216687 169.567325-6.216687 169.567325-5.977584S169.782518-5.738481 169.985756-5.738481H176.453502Z"/>
<path d="M183.095328-5.738481C183.298566-5.738481 183.513759-5.738481 183.513759-5.977584S183.298566-6.216687 183.095328-6.216687H176.627582C176.424344-6.216687 176.209151-6.216687 176.209151-5.977584S176.424344-5.738481 176.627582-5.738481H183.095328Z"/>
<path d="M189.737154-5.738481C189.940392-5.738481 190.155585-5.738481 190.155585-5.977584S189.940392-6.216687 189.737154-6.216687H183.269408C183.06617-6.216687 182.850977-6.216687 182.850977-5.977584S183.06617-5.738481 183.269408-5.738481H189.737154Z"/>
<path d="M196.020455-5.738481C195.362921-5.236364 195.040131-4.746202 194.94449-4.590785C194.406507-3.765878 194.310866-3.012702 194.310866-3.000747C194.310866-2.857285 194.454328-2.857285 194.54997-2.857285C194.753207-2.857285 194.765163-2.881196 194.812983-3.096389C195.087952-4.267995 195.793307-5.272229 197.144241-5.822167C197.287703-5.869988 197.323569-5.893898 197.323569-5.977584S197.251838-6.097136 197.227927-6.109091C196.7019-6.312329 195.255324-6.910087 194.801028-8.918555C194.765163-9.062017 194.753207-9.097883 194.54997-9.097883C194.454328-9.097883 194.310866-9.097883 194.310866-8.954421C194.310866-8.930511 194.418463-8.177335 194.92058-7.376339C195.159683-7.017684 195.506383-6.599253 196.020455-6.216687H187.137765C186.922572-6.216687 186.707379-6.216687 186.707379-5.977584S186.922572-5.738481 187.137765-5.738481H196.020455Z"/>
<path d="M205.211302-.083686C205.211302-.119552 205.211302-.143462 205.008065-.3467C203.812548-1.554172 203.143058-3.526775 203.143058-5.965629C203.143058-8.284932 203.704951-10.281445 205.091751-11.692154C205.211302-11.799751 205.211302-11.823661 205.211302-11.859527C205.211302-11.931258 205.151527-11.955168 205.103706-11.955168C204.948289-11.955168 203.967965-11.094396 203.382162-9.92279C202.772448-8.715318 202.497479-7.436115 202.497479-5.965629C202.497479-4.901619 202.664852-3.478954 203.28652-2.199751C203.991875-.765131 204.972199 .011955 205.103706 .011955C205.151527 .011955 205.211302-.011955 205.211302-.083686Z"/>
<path d="M211.210204-7.79477C211.449307-7.79477 211.544948-7.79477 211.544948-8.021918C211.544948-8.141469 211.449307-8.141469 211.234114-8.141469H210.265745C210.492894-9.372852 210.660266-10.221669 210.755907-10.604234C210.827638-10.891158 211.078697-11.166127 211.389531-11.166127C211.64059-11.166127 211.891648-11.058531 212.0112-10.950934C211.544948-10.903113 211.401486-10.556413 211.401486-10.353176C211.401486-10.114072 211.580814-9.97061 211.807962-9.97061C212.047065-9.97061 212.40572-10.173848 212.40572-10.628144C212.40572-11.130262 211.903603-11.40523 211.377576-11.40523C210.863504-11.40523 210.361387-11.022665 210.122283-10.556413C209.90709-10.137983 209.787539-9.707597 209.51257-8.141469H208.711573C208.484425-8.141469 208.364874-8.141469 208.364874-7.926276C208.364874-7.79477 208.436605-7.79477 208.675708-7.79477H209.440839C209.225646-6.682939 208.735484-3.981071 208.460515-2.701868C208.257277-1.661768 208.07795-.789041 207.480191-.789041C207.444326-.789041 207.097626-.789041 206.882433-1.016189C207.492146-1.06401 207.492146-1.590037 207.492146-1.601993C207.492146-1.841096 207.312819-1.984558 207.085671-1.984558C206.846567-1.984558 206.487912-1.78132 206.487912-1.327024C206.487912-.812951 207.01394-.549938 207.480191-.549938C208.699618-.549938 209.201735-2.737733 209.333242-3.335492C209.548435-4.25604 210.134238-7.436115 210.194014-7.79477H211.210204Z"/>
<path d="M214.605561-2.940971C214.605561-3.634371 214.378413-4.148443 213.888251-4.148443C213.505685-4.148443 213.314403-3.837609 213.314403-3.574595S213.49373-2.988792 213.900206-2.988792C214.055623-2.988792 214.18713-3.036613 214.294726-3.144209C214.318637-3.16812 214.330592-3.16812 214.342547-3.16812C214.366457-3.16812 214.366457-3.000747 214.366457-2.940971C214.366457-2.546451 214.294726-1.769365 213.601327-.992279C213.46982-.848817 213.46982-.824907 213.46982-.800996C213.46982-.74122 213.529596-.681445 213.589371-.681445C213.685013-.681445 214.605561-1.566127 214.605561-2.940971Z"/>
<path d="M226.852741-10.9868C226.864696-11.03462 226.888606-11.106351 226.888606-11.166127C226.888606-11.285679 226.769055-11.285679 226.745144-11.285679C226.733189-11.285679 226.147386-11.237858 226.08761-11.225903C225.884372-11.213948 225.705045-11.190037 225.489852-11.178082C225.190972-11.154172 225.107286-11.142217 225.107286-10.927024C225.107286-10.807472 225.202928-10.807472 225.3703-10.807472C225.956103-10.807472 225.968058-10.699875 225.968058-10.580324C225.968058-10.508593 225.944148-10.412951 225.932193-10.377086L225.202928-7.47198C225.071421-7.782814 224.748631-8.261021 224.126962-8.261021C222.776028-8.261021 221.317498-6.515567 221.317498-4.746202C221.317498-3.56264 222.010898-2.86924 222.823849-2.86924C223.481383-2.86924 224.043276-3.383313 224.378021-3.777833C224.497573-3.072478 225.059466-2.86924 225.418121-2.86924S226.0637-3.084433 226.278893-3.514819C226.470175-3.921295 226.637548-4.65056 226.637548-4.698381C226.637548-4.758157 226.589727-4.805978 226.517996-4.805978C226.4104-4.805978 226.398444-4.746202 226.350624-4.566874C226.171296-3.861519 225.944148-3.108344 225.453986-3.108344C225.107286-3.108344 225.083376-3.419178 225.083376-3.658281C225.083376-3.706102 225.083376-3.957161 225.167062-4.291905L226.852741-10.9868ZM224.437797-4.411457C224.378021-4.208219 224.378021-4.184309 224.210649-3.957161C223.947635-3.622416 223.421607-3.108344 222.859715-3.108344C222.369553-3.108344 222.094584-3.550685 222.094584-4.25604C222.094584-4.913574 222.465194-6.252553 222.692342-6.75467C223.098818-7.591532 223.660711-8.021918 224.126962-8.021918C224.916003-8.021918 225.071421-7.041594 225.071421-6.945953C225.071421-6.933998 225.035555-6.77858 225.0236-6.75467L224.437797-4.411457Z"/>
<path d="M228.516007-2.502627C228.539917-2.622179 228.619618-2.925043 228.643528-3.044595C228.75511-3.474981 228.75511-3.482951 228.938423-3.745965C229.201436-4.1365 229.576031-4.487185 230.110029-4.487185C230.396953-4.487185 230.564325-4.319813 230.564325-3.945218C230.564325-3.506861 230.229581-2.598269 230.078149-2.207733C229.974537-1.94472 229.974537-1.896899 229.974537-1.793287C229.974537-1.338991 230.349132-1.115828 230.691847-1.115828C231.472918-1.115828 231.799693-2.231644 231.799693-2.335255C231.799693-2.414956 231.735932-2.438866 231.680141-2.438866C231.5845-2.438866 231.568559-2.383076 231.544649-2.303375C231.353366-1.649825 231.018622-1.338991 230.715757-1.338991C230.588236-1.338991 230.524475-1.418692 230.524475-1.602005S230.588236-1.96066 230.667937-2.159913C230.787489-2.462777 231.138173-3.37934 231.138173-3.825666C231.138173-4.423424 230.723728-4.710348 230.14988-4.710348C229.5043-4.710348 229.089855-4.319813 228.858721-4.016949C228.802931-4.455305 228.452246-4.710348 228.04577-4.710348C227.758846-4.710348 227.559593-4.527036 227.432071-4.279962C227.240789-3.905367 227.161088-3.506861 227.161088-3.490921C227.161088-3.41919 227.216878-3.38731 227.280639-3.38731C227.384251-3.38731 227.392221-3.41919 227.448012-3.626413C227.543653-4.016949 227.687115-4.487185 228.02186-4.487185C228.229083-4.487185 228.276903-4.287932 228.276903-4.11259C228.276903-3.969128 228.237053-3.817696 228.173292-3.554682C228.157352-3.490921 228.0378-3.020685 228.005919-2.909103L227.711025-1.713586C227.679145-1.594035 227.631324-1.394782 227.631324-1.362901C227.631324-1.179589 227.782756-1.115828 227.886368-1.115828C228.02983-1.115828 228.149381-1.211469 228.205172-1.307111C228.229083-1.354931 228.292843-1.625915 228.332694-1.793287L228.516007-2.502627Z"/>
<path d="M235.535155-3.004744H237.878368C237.98995-3.004744 238.165292-3.004744 238.165292-3.188057S237.98995-3.37137 237.878368-3.37137H235.535155V-5.722553C235.535155-5.834134 235.535155-6.009477 235.351843-6.009477S235.16853-5.834134 235.16853-5.722553V-3.37137H232.817347C232.705766-3.37137 232.530423-3.37137 232.530423-3.188057S232.705766-3.004744 232.817347-3.004744H235.16853V-.653561C235.16853-.54198 235.16853-.366637 235.351843-.366637S235.535155-.54198 235.535155-.653561V-3.004744Z"/>
<path d="M241.149308-6.27249C241.149308-6.487683 241.133368-6.495654 240.918175-6.495654C240.591401-6.176849 240.168985-5.985566 239.411824-5.985566V-5.722553C239.627017-5.722553 240.057403-5.722553 240.51967-5.937746V-1.849078C240.51967-1.554184 240.495759-1.458543 239.738599-1.458543H239.459645V-1.195529C239.786419-1.219439 240.471849-1.219439 240.830504-1.219439S241.882559-1.219439 242.209333-1.195529V-1.458543H241.930379C241.173219-1.458543 241.149308-1.554184 241.149308-1.849078V-6.27249Z"/>
<path d="M246.750366-5.965629C246.750366-6.874222 246.630814-8.356663 245.961324-9.743462C245.255969-11.178082 244.275646-11.955168 244.144139-11.955168C244.096318-11.955168 244.036542-11.931258 244.036542-11.859527C244.036542-11.823661 244.036542-11.799751 244.23978-11.596513C245.435297-10.389041 246.104786-8.416438 246.104786-5.977584C246.104786-3.658281 245.542894-1.661768 244.156094-.251059C244.036542-.143462 244.036542-.119552 244.036542-.083686C244.036542-.011955 244.096318 .011955 244.144139 .011955C244.299556 .011955 245.27988-.848817 245.865683-2.020423C246.475397-3.239851 246.750366-4.531009 246.750366-5.965629Z"/>
<path d="M272.544447-15.478194C272.608208-15.725267 272.663998-15.741207 272.719789-15.749177C272.77558-15.765118 273.022654-15.765118 273.174086-15.765118C273.955157-15.765118 274.265991-15.725267 274.265991-15.151419C274.265991-15.071718 274.258021-15.015927 274.250051-14.944196L274.18629-14.426139V-14.386288C274.18629-14.378318 274.19426-14.354408 274.18629-14.346438C274.17832-14.330497 274.16238-14.218916 274.329752-14.218916C274.465244-14.218916 274.473214-14.274707 274.489154-14.386288L274.712317-15.804968L274.720287-15.91655C274.720287-16.028131 274.616676-16.028131 274.497124-16.028131H270.153413C269.978071-16.028131 269.95416-16.028131 269.90634-15.884669L269.420163-14.465989C269.380312-14.362378 269.380312-14.346438 269.380312-14.330497C269.380312-14.218916 269.491894-14.218916 269.531744-14.218916C269.563625-14.218916 269.611446-14.218916 269.643326-14.242826C269.667236-14.258766 269.667236-14.274707 269.738967-14.4899C270.145443-15.637596 270.384546-15.765118 271.452541-15.765118C271.611944-15.765118 271.811196-15.765118 271.930748-15.749177C271.922778-15.637596 271.922778-15.613685 271.890898-15.494134L270.846813-11.309825C270.767112-10.99102 270.719291-10.903349 269.994011-10.903349H269.890399C269.746937-10.903349 269.651296-10.903349 269.651296-10.751917C269.651296-10.720037 269.667236-10.640336 269.786788-10.640336C270.089652-10.640336 270.400487-10.664246 270.711321-10.664246H271.293139C271.611944-10.664246 271.946688-10.640336 272.257523-10.640336C272.313314-10.640336 272.424895-10.640336 272.424895-10.791768C272.424895-10.903349 272.329254-10.903349 272.201732-10.903349H272.098121C271.962629-10.903349 271.835107-10.911319 271.699615-10.919289C271.508332-10.9432 271.452541-10.95914 271.452541-11.062751C271.452541-11.110572 271.476452-11.190273 271.476452-11.198243L272.544447-15.478194Z"/>
<path d="M276.035809-11.724271C275.964078-11.461257 275.796706-10.783798 275.294589-10.783798C275.119246-10.783798 274.983754-10.855529 274.935934-10.895379C275.095336-10.95914 275.214888-11.102602 275.214888-11.277945C275.214888-11.509078 275.023605-11.548928 274.935934-11.548928C274.7048-11.548928 274.529458-11.349676 274.529458-11.110572C274.529458-10.728007 274.935934-10.560634 275.286619-10.560634C275.645274-10.560634 275.908287-10.783798 276.09957-11.062751C276.235062-10.767857 276.537926-10.560634 276.920492-10.560634C277.749383-10.560634 278.22759-11.548928 278.22759-11.788032C278.22759-11.883673 278.108038-11.883673 278.076158-11.883673C277.972546-11.883673 277.940666-11.859763 277.916756-11.780062C277.661712-10.95914 277.167565-10.783798 276.936432-10.783798C276.689358-10.783798 276.521986-10.95914 276.521986-11.285915C276.521986-11.461257 276.617627-11.843822 276.689358-12.114806C276.769059-12.465491 276.856731-12.808206 276.944402-13.150921C277.071924-13.645068 277.342908-13.931992 277.645772-13.931992C277.852995-13.931992 277.988487-13.82838 278.004427-13.82041C277.932696-13.7965 277.725473-13.668978 277.725473-13.437845C277.725473-13.214682 277.900815-13.166861 278.004427-13.166861C278.155859-13.166861 278.402932-13.278443 278.402932-13.605217C278.402932-14.043573 277.916756-14.155155 277.653742-14.155155C277.326967-14.155155 277.055983-13.971842 276.84079-13.653038C276.745149-13.844321 276.506046-14.155155 276.019869-14.155155C275.183007-14.155155 274.712771-13.150921 274.712771-12.935728C274.712771-12.832116 274.816382-12.832116 274.864203-12.832116C274.967814-12.832116 274.991724-12.856027 275.015635-12.935728C275.262708-13.724769 275.740915-13.931992 276.003929-13.931992S276.418375-13.724769 276.418375-13.429875C276.418375-13.270473 276.378524-13.1031 276.290853-12.760385L276.035809-11.724271Z"/>
<path d="M280.737377-11.601631C280.70749-12.055928 280.289059-12.169502 280.06191-12.169502S279.679345-12.032018 279.571749-11.840735C279.422309-11.595654 279.350578-11.278842 279.350578-11.254932C279.350578-11.189178 279.404376-11.165268 279.458174-11.165268C279.553816-11.165268 279.559793-11.207111 279.589681-11.302752C279.709233-11.780959 279.852695-11.972242 280.043978-11.972242C280.259171-11.972242 280.259171-11.727161 280.259171-11.667385C280.259171-11.571744 280.199395-11.33264 280.157552-11.165268C280.115709-11.003873 280.055933-10.758792 280.026045-10.627285C279.984202-10.477846 279.948336-10.322428 279.906493-10.172989C279.86465-10.005617 279.792919-9.706737 279.792919-9.670872C279.792919-9.539365 279.894538-9.473612 280.002135-9.473612S280.21135-9.545343 280.259171-9.635006C280.271126-9.670872 280.324924-9.880087 280.354812-9.999639L280.486319-10.537621C280.528162-10.693039 280.552072-10.800635 280.587938-10.93812C280.641736-11.141357 280.850952-11.458169 281.072122-11.67934C281.191674-11.792914 281.44871-11.972242 281.7715-11.972242C282.154065-11.972242 282.154065-11.667385 282.154065-11.553811C282.154065-11.201133 281.897029-10.561532 281.789432-10.292541C281.753567-10.190922 281.711724-10.09528 281.711724-9.993661C281.711724-9.688805 281.986693-9.473612 282.31546-9.473612C282.919196-9.473612 283.218075-10.262653 283.218075-10.394159C283.218075-10.406115 283.212097-10.477846 283.104501-10.477846C283.020815-10.477846 283.014837-10.447958 282.978971-10.334384C282.88333-10.017572 282.638249-9.670872 282.333392-9.670872C282.219818-9.670872 282.171998-9.760536 282.171998-9.886065C282.171998-10.005617 282.213841-10.107235 282.267639-10.232765C282.357303-10.46589 282.626294-11.141357 282.626294-11.476102C282.626294-11.966264 282.255684-12.169502 281.801387-12.169502C281.502508-12.169502 281.119943-12.073861 280.737377-11.601631Z"/>
<path d="M286.533681-10.872366H288.464441C288.548127-10.872366 288.697567-10.872366 288.697567-11.027783S288.548127-11.183201 288.464441-11.183201H286.533681V-13.119938C286.533681-13.203624 286.533681-13.353064 286.378264-13.353064S286.222847-13.203624 286.222847-13.119938V-11.183201H284.292087C284.208401-11.183201 284.058962-11.183201 284.058962-11.027783S284.208401-10.872366 284.292087-10.872366H286.222847V-8.935629C286.222847-8.851943 286.222847-8.702503 286.378264-8.702503S286.533681-8.851943 286.533681-8.935629V-10.872366Z"/>
<path d="M292.392765-10.651196H292.171595C292.159639-10.567509 292.099864-10.172989 292.0102-10.107235C291.968357-10.07137 291.484172-10.07137 291.400486-10.07137H290.282678L291.047809-10.693039C291.251047-10.854433 291.783052-11.236999 291.968357-11.416326C292.147684-11.595654 292.392765-11.900511 292.392765-12.324919C292.392765-13.072117 291.717298-13.508481 290.916302-13.508481C290.145194-13.508481 289.607211-13.000386 289.607211-12.438493C289.607211-12.133636 289.864247-12.097771 289.930001-12.097771C290.07944-12.097771 290.25279-12.205367 290.25279-12.42056C290.25279-12.552067 290.175082-12.74335 289.912068-12.74335C290.049552-13.048207 290.414185-13.275355 290.826638-13.275355C291.454285-13.275355 291.789029-12.809103 291.789029-12.324919C291.789029-11.900511 291.508083-11.464147 291.089652-11.081582L289.672964-9.784446C289.613189-9.72467 289.607211-9.718692 289.607211-9.533387H292.20746L292.392765-10.651196Z"/>
<path d="M259.130619-5.738481C259.333857-5.738481 259.54905-5.738481 259.54905-5.977584S259.333857-6.216687 259.130619-6.216687H252.662873C252.459635-6.216687 252.244442-6.216687 252.244442-5.977584S252.459635-5.738481 252.662873-5.738481H259.130619Z"/>
<path d="M263.321902-5.738481C263.52514-5.738481 263.740333-5.738481 263.740333-5.977584S263.52514-6.216687 263.321902-6.216687H256.854156C256.650919-6.216687 256.435726-6.216687 256.435726-5.977584S256.650919-5.738481 256.854156-5.738481H263.321902Z"/>
<path d="M269.963728-5.738481C270.166966-5.738481 270.382159-5.738481 270.382159-5.977584S270.166966-6.216687 269.963728-6.216687H263.495982C263.292745-6.216687 263.077552-6.216687 263.077552-5.977584S263.292745-5.738481 263.495982-5.738481H269.963728Z"/>
<path d="M276.605554-5.738481C276.808792-5.738481 277.023985-5.738481 277.023985-5.977584S276.808792-6.216687 276.605554-6.216687H270.137808C269.93457-6.216687 269.719377-6.216687 269.719377-5.977584S269.93457-5.738481 270.137808-5.738481H276.605554Z"/>
<path d="M283.24738-5.738481C283.450618-5.738481 283.665811-5.738481 283.665811-5.977584S283.450618-6.216687 283.24738-6.216687H276.779634C276.576396-6.216687 276.361203-6.216687 276.361203-5.977584S276.576396-5.738481 276.779634-5.738481H283.24738Z"/>
<path d="M289.889206-5.738481C290.092444-5.738481 290.307637-5.738481 290.307637-5.977584S290.092444-6.216687 289.889206-6.216687H283.42146C283.218222-6.216687 283.003029-6.216687 283.003029-5.977584S283.218222-5.738481 283.42146-5.738481H289.889206Z"/>
<path d="M296.531032-5.738481C296.73427-5.738481 296.949463-5.738481 296.949463-5.977584S296.73427-6.216687 296.531032-6.216687H290.063286C289.860048-6.216687 289.644855-6.216687 289.644855-5.977584S289.860048-5.738481 290.063286-5.738481H296.531032Z"/>
<path d="M303.172858-5.738481C303.376096-5.738481 303.591289-5.738481 303.591289-5.977584S303.376096-6.216687 303.172858-6.216687H296.705112C296.501874-6.216687 296.286681-6.216687 296.286681-5.977584S296.501874-5.738481 296.705112-5.738481H303.172858Z"/>
<path d="M309.456159-5.738481C308.798625-5.236364 308.475835-4.746202 308.380194-4.590785C307.842211-3.765878 307.74657-3.012702 307.74657-3.000747C307.74657-2.857285 307.890032-2.857285 307.985673-2.857285C308.188911-2.857285 308.200866-2.881196 308.248687-3.096389C308.523656-4.267995 309.229011-5.272229 310.579945-5.822167C310.723407-5.869988 310.759272-5.893898 310.759272-5.977584S310.687541-6.097136 310.663631-6.109091C310.137604-6.312329 308.691028-6.910087 308.236732-8.918555C308.200866-9.062017 308.188911-9.097883 307.985673-9.097883C307.890032-9.097883 307.74657-9.097883 307.74657-8.954421C307.74657-8.930511 307.854167-8.177335 308.356284-7.376339C308.595387-7.017684 308.942087-6.599253 309.456159-6.216687H300.573469C300.358276-6.216687 300.143083-6.216687 300.143083-5.977584S300.358276-5.738481 300.573469-5.738481H309.456159Z"/>
<path d="M318.647006-.083686C318.647006-.119552 318.647006-.143462 318.443769-.3467C317.248252-1.554172 316.578762-3.526775 316.578762-5.965629C316.578762-8.284932 317.140655-10.281445 318.527455-11.692154C318.647006-11.799751 318.647006-11.823661 318.647006-11.859527C318.647006-11.931258 318.587231-11.955168 318.53941-11.955168C318.383993-11.955168 317.403669-11.094396 316.817866-9.92279C316.208152-8.715318 315.933183-7.436115 315.933183-5.965629C315.933183-4.901619 316.100556-3.478954 316.722224-2.199751C317.427579-.765131 318.407903 .011955 318.53941 .011955C318.587231 .011955 318.647006-.011955 318.647006-.083686Z"/>
<path d="M324.645907-7.79477C324.885011-7.79477 324.980652-7.79477 324.980652-8.021918C324.980652-8.141469 324.885011-8.141469 324.669818-8.141469H323.701449C323.928597-9.372852 324.09597-10.221669 324.191611-10.604234C324.263342-10.891158 324.514401-11.166127 324.825235-11.166127C325.076294-11.166127 325.327352-11.058531 325.446904-10.950934C324.980652-10.903113 324.83719-10.556413 324.83719-10.353176C324.83719-10.114072 325.016518-9.97061 325.243666-9.97061C325.482769-9.97061 325.841424-10.173848 325.841424-10.628144C325.841424-11.130262 325.339307-11.40523 324.81328-11.40523C324.299208-11.40523 323.797091-11.022665 323.557987-10.556413C323.342794-10.137983 323.223242-9.707597 322.948274-8.141469H322.147277C321.920129-8.141469 321.800577-8.141469 321.800577-7.926276C321.800577-7.79477 321.872308-7.79477 322.111412-7.79477H322.876543C322.66135-6.682939 322.171188-3.981071 321.896219-2.701868C321.692981-1.661768 321.513653-.789041 320.915895-.789041C320.88003-.789041 320.53333-.789041 320.318137-1.016189C320.92785-1.06401 320.92785-1.590037 320.92785-1.601993C320.92785-1.841096 320.748523-1.984558 320.521374-1.984558C320.282271-1.984558 319.923616-1.78132 319.923616-1.327024C319.923616-.812951 320.449643-.549938 320.915895-.549938C322.135322-.549938 322.637439-2.737733 322.768946-3.335492C322.984139-4.25604 323.569942-7.436115 323.629718-7.79477H324.645907Z"/>
<path d="M328.041265-2.940971C328.041265-3.634371 327.814116-4.148443 327.323955-4.148443C326.941389-4.148443 326.750106-3.837609 326.750106-3.574595S326.929434-2.988792 327.33591-2.988792C327.491327-2.988792 327.622834-3.036613 327.73043-3.144209C327.754341-3.16812 327.766296-3.16812 327.778251-3.16812C327.802161-3.16812 327.802161-3.000747 327.802161-2.940971C327.802161-2.546451 327.73043-1.769365 327.037031-.992279C326.905524-.848817 326.905524-.824907 326.905524-.800996C326.905524-.74122 326.965299-.681445 327.025075-.681445C327.120717-.681445 328.041265-1.566127 328.041265-2.940971Z"/>
<path d="M340.288445-10.9868C340.3004-11.03462 340.32431-11.106351 340.32431-11.166127C340.32431-11.285679 340.204758-11.285679 340.180848-11.285679C340.168893-11.285679 339.58309-11.237858 339.523314-11.225903C339.320076-11.213948 339.140748-11.190037 338.925555-11.178082C338.626676-11.154172 338.54299-11.142217 338.54299-10.927024C338.54299-10.807472 338.638631-10.807472 338.806004-10.807472C339.391807-10.807472 339.403762-10.699875 339.403762-10.580324C339.403762-10.508593 339.379852-10.412951 339.367897-10.377086L338.638631-7.47198C338.507125-7.782814 338.184335-8.261021 337.562666-8.261021C336.211732-8.261021 334.753202-6.515567 334.753202-4.746202C334.753202-3.56264 335.446602-2.86924 336.259553-2.86924C336.917087-2.86924 337.47898-3.383313 337.813725-3.777833C337.933277-3.072478 338.495169-2.86924 338.853824-2.86924S339.499404-3.084433 339.714597-3.514819C339.905879-3.921295 340.073252-4.65056 340.073252-4.698381C340.073252-4.758157 340.025431-4.805978 339.9537-4.805978C339.846103-4.805978 339.834148-4.746202 339.786328-4.566874C339.607-3.861519 339.379852-3.108344 338.88969-3.108344C338.54299-3.108344 338.51908-3.419178 338.51908-3.658281C338.51908-3.706102 338.51908-3.957161 338.602766-4.291905L340.288445-10.9868ZM337.873501-4.411457C337.813725-4.208219 337.813725-4.184309 337.646352-3.957161C337.383339-3.622416 336.857311-3.108344 336.295418-3.108344C335.805257-3.108344 335.530288-3.550685 335.530288-4.25604C335.530288-4.913574 335.900898-6.252553 336.128046-6.75467C336.534522-7.591532 337.096415-8.021918 337.562666-8.021918C338.351707-8.021918 338.507125-7.041594 338.507125-6.945953C338.507125-6.933998 338.471259-6.77858 338.459304-6.75467L337.873501-4.411457Z"/>
<path d="M341.95171-2.502627C341.975621-2.622179 342.055322-2.925043 342.079232-3.044595C342.190814-3.474981 342.190814-3.482951 342.374126-3.745965C342.63714-4.1365 343.011735-4.487185 343.545733-4.487185C343.832657-4.487185 344.000029-4.319813 344.000029-3.945218C344.000029-3.506861 343.665285-2.598269 343.513852-2.207733C343.410241-1.94472 343.410241-1.896899 343.410241-1.793287C343.410241-1.338991 343.784836-1.115828 344.127551-1.115828C344.908622-1.115828 345.235397-2.231644 345.235397-2.335255C345.235397-2.414956 345.171636-2.438866 345.115845-2.438866C345.020204-2.438866 345.004263-2.383076 344.980353-2.303375C344.78907-1.649825 344.454326-1.338991 344.151461-1.338991C344.02394-1.338991 343.960179-1.418692 343.960179-1.602005S344.02394-1.96066 344.103641-2.159913C344.223192-2.462777 344.573877-3.37934 344.573877-3.825666C344.573877-4.423424 344.159432-4.710348 343.585583-4.710348C342.940004-4.710348 342.525559-4.319813 342.294425-4.016949C342.238635-4.455305 341.88795-4.710348 341.481474-4.710348C341.19455-4.710348 340.995297-4.527036 340.867775-4.279962C340.676493-3.905367 340.596791-3.506861 340.596791-3.490921C340.596791-3.41919 340.652582-3.38731 340.716343-3.38731C340.819955-3.38731 340.827925-3.41919 340.883715-3.626413C340.979357-4.016949 341.122819-4.487185 341.457564-4.487185C341.664786-4.487185 341.712607-4.287932 341.712607-4.11259C341.712607-3.969128 341.672757-3.817696 341.608996-3.554682C341.593055-3.490921 341.473504-3.020685 341.441623-2.909103L341.146729-1.713586C341.114849-1.594035 341.067028-1.394782 341.067028-1.362901C341.067028-1.179589 341.21846-1.115828 341.322072-1.115828C341.465534-1.115828 341.585085-1.211469 341.640876-1.307111C341.664786-1.354931 341.728547-1.625915 341.768398-1.793287L341.95171-2.502627Z"/>
<path d="M348.970859-3.004744H351.314072C351.425654-3.004744 351.600996-3.004744 351.600996-3.188057S351.425654-3.37137 351.314072-3.37137H348.970859V-5.722553C348.970859-5.834134 348.970859-6.009477 348.787547-6.009477S348.604234-5.834134 348.604234-5.722553V-3.37137H346.253051C346.14147-3.37137 345.966127-3.37137 345.966127-3.188057S346.14147-3.004744 346.253051-3.004744H348.604234V-.653561C348.604234-.54198 348.604234-.366637 348.787547-.366637S348.970859-.54198 348.970859-.653561V-3.004744Z"/>
<path d="M354.329969-2.821432C354.457491-2.940984 354.792235-3.203997 354.919757-3.315579C355.413904-3.769875 355.884141-4.208231 355.884141-4.933512C355.884141-5.881955 355.087129-6.495654 354.090865-6.495654C353.134452-6.495654 352.504813-5.770373 352.504813-5.061033C352.504813-4.670498 352.815647-4.614707 352.927229-4.614707C353.094601-4.614707 353.341675-4.734259 353.341675-5.037123C353.341675-5.451569 352.943169-5.451569 352.847528-5.451569C353.078661-6.033387 353.612659-6.23264 354.003194-6.23264C354.744415-6.23264 355.12698-5.603001 355.12698-4.933512C355.12698-4.10462 354.545162-3.498891 353.604689-2.534508L352.600454-1.498393C352.504813-1.410722 352.504813-1.394782 352.504813-1.195529H355.653007L355.884141-2.622179H355.637067C355.613157-2.462777 355.549396-2.064271 355.453755-1.912839C355.405934-1.849078 354.800205-1.849078 354.672684-1.849078H353.254004L354.329969-2.821432Z"/>
<path d="M360.186069-5.965629C360.186069-6.874222 360.066518-8.356663 359.397028-9.743462C358.691673-11.178082 357.71135-11.955168 357.579843-11.955168C357.532022-11.955168 357.472246-11.931258 357.472246-11.859527C357.472246-11.823661 357.472246-11.799751 357.675484-11.596513C358.871001-10.389041 359.54049-8.416438 359.54049-5.977584C359.54049-3.658281 358.978597-1.661768 357.591798-.251059C357.472246-.143462 357.472246-.119552 357.472246-.083686C357.472246-.011955 357.532022 .011955 357.579843 .011955C357.73526 .011955 358.715584-.848817 359.301387-2.020423C359.911101-3.239851 360.186069-4.531009 360.186069-5.965629Z"/>
</g>
</svg>
</center>
<p>Unfortunately, this is an induction without a base case, because the <em>first</em> output to <code>f</code> is not verified by <code>f</code>:</p>
<center>
<svg height="15.209887pt" version="1.1" viewBox="19.540341 -15.197932 348.281341 15.209887" width="348.281341pt">
<title>   () \xrightarrow{\mspace{30mu}\mathit{Tx}_0\mspace{30mu}}   (f, d_0) \xrightarrow{\mspace{30mu}\mathit{Tx}_1\mspace{30mu}}   (f, d_1) \xrightarrow{\mspace{30mu}\mathit{Tx}_2\mspace{30mu}}   \cdots \xrightarrow{\mspace{30mu}\mathit{Tx}_n\mspace{30mu}}   (f, \; d_n) </title>
<defs/>
<g>
<path d="M23.42577-.083686C23.42577-.119552 23.42577-.143462 23.222532-.3467C22.027016-1.554172 21.357526-3.526775 21.357526-5.965629C21.357526-8.284932 21.919419-10.281445 23.306219-11.692154C23.42577-11.799751 23.42577-11.823661 23.42577-11.859527C23.42577-11.931258 23.365994-11.955168 23.318174-11.955168C23.162757-11.955168 22.182433-11.094396 21.59663-9.92279C20.986916-8.715318 20.711947-7.436115 20.711947-5.965629C20.711947-4.901619 20.879319-3.478954 21.500988-2.199751C22.206343-.765131 23.186667 .011955 23.318174 .011955C23.365994 .011955 23.42577-.011955 23.42577-.083686Z"/>
<path d="M27.464024-5.965629C27.464024-6.874222 27.344472-8.356663 26.674983-9.743462C25.969628-11.178082 24.989304-11.955168 24.857797-11.955168C24.809977-11.955168 24.750201-11.931258 24.750201-11.859527C24.750201-11.823661 24.750201-11.799751 24.953439-11.596513C26.148955-10.389041 26.818445-8.416438 26.818445-5.977584C26.818445-3.658281 26.256552-1.661768 24.869752-.251059C24.750201-.143462 24.750201-.119552 24.750201-.083686C24.750201-.011955 24.809977 .011955 24.857797 .011955C25.013214 .011955 25.993538-.848817 26.579341-2.020423C27.189055-3.239851 27.464024-4.531009 27.464024-5.965629Z"/>
<path d="M53.258105-14.647994C53.321866-14.895067 53.377657-14.911008 53.433448-14.918978C53.489238-14.934918 53.736312-14.934918 53.887744-14.934918C54.668815-14.934918 54.979649-14.895067 54.979649-14.321219C54.979649-14.241518 54.971679-14.185727 54.963709-14.113996L54.899948-13.595939V-13.556088C54.899948-13.548118 54.907918-13.524208 54.899948-13.516238C54.891978-13.500298 54.876038-13.388716 55.04341-13.388716C55.178902-13.388716 55.186872-13.444507 55.202812-13.556088L55.425976-14.974768L55.433946-15.08635C55.433946-15.197932 55.330334-15.197932 55.210783-15.197932H50.867071C50.691729-15.197932 50.667819-15.197932 50.619998-15.05447L50.133821-13.63579C50.093971-13.532178 50.093971-13.516238 50.093971-13.500298C50.093971-13.388716 50.205552-13.388716 50.245403-13.388716C50.277283-13.388716 50.325104-13.388716 50.356984-13.412626C50.380895-13.428567 50.380895-13.444507 50.452626-13.6597C50.859101-14.807396 51.098205-14.934918 52.1662-14.934918C52.325602-14.934918 52.524855-14.934918 52.644406-14.918978C52.636436-14.807396 52.636436-14.783486 52.604556-14.663934L51.560471-10.479625C51.48077-10.160821 51.432949-10.07315 50.707669-10.07315H50.604058C50.460596-10.07315 50.364954-10.07315 50.364954-9.921717C50.364954-9.889837 50.380895-9.810136 50.500446-9.810136C50.803311-9.810136 51.114145-9.834046 51.424979-9.834046H52.006798C52.325602-9.834046 52.660347-9.810136 52.971181-9.810136C53.026972-9.810136 53.138553-9.810136 53.138553-9.961568C53.138553-10.07315 53.042912-10.07315 52.91539-10.07315H52.811779C52.676287-10.07315 52.548765-10.08112 52.413273-10.08909C52.221991-10.113 52.1662-10.12894 52.1662-10.232552C52.1662-10.280372 52.19011-10.360074 52.19011-10.368044L53.258105-14.647994Z"/>
<path d="M56.749467-10.894071C56.677736-10.631057 56.510364-9.953598 56.008247-9.953598C55.832905-9.953598 55.697413-10.025329 55.649592-10.065179C55.808994-10.12894 55.928546-10.272402 55.928546-10.447745C55.928546-10.678878 55.737263-10.718729 55.649592-10.718729C55.418459-10.718729 55.243116-10.519476 55.243116-10.280372C55.243116-9.897807 55.649592-9.730435 56.000277-9.730435C56.358932-9.730435 56.621946-9.953598 56.813228-10.232552C56.94872-9.937658 57.251585-9.730435 57.63415-9.730435C58.463042-9.730435 58.941248-10.718729 58.941248-10.957832C58.941248-11.053473 58.821697-11.053473 58.789816-11.053473C58.686205-11.053473 58.654324-11.029563 58.630414-10.949862C58.37537-10.12894 57.881223-9.953598 57.65009-9.953598C57.403017-9.953598 57.235644-10.12894 57.235644-10.455715C57.235644-10.631057 57.331286-11.013623 57.403017-11.284607C57.482718-11.635291 57.570389-11.978006 57.65806-12.320721C57.785582-12.814868 58.056566-13.101792 58.35943-13.101792C58.566653-13.101792 58.702145-12.998181 58.718085-12.990211C58.646354-12.9663 58.439131-12.838778 58.439131-12.607645C58.439131-12.384482 58.614474-12.336661 58.718085-12.336661C58.869517-12.336661 59.116591-12.448243 59.116591-12.775018C59.116591-13.213374 58.630414-13.324955 58.3674-13.324955C58.040626-13.324955 57.769642-13.141643 57.554449-12.822838C57.458807-13.014121 57.219704-13.324955 56.733527-13.324955C55.896665-13.324955 55.426429-12.320721 55.426429-12.105528C55.426429-12.001917 55.53004-12.001917 55.577861-12.001917C55.681472-12.001917 55.705383-12.025827 55.729293-12.105528C55.976367-12.894569 56.454573-13.101792 56.717587-13.101792S57.132033-12.894569 57.132033-12.599675C57.132033-12.440273 57.092182-12.2729 57.004511-11.930186L56.749467-10.894071Z"/>
<path d="M62.987275-10.610037C62.987275-11.046401 62.987275-12.678281 61.522767-12.678281S60.058259-11.046401 60.058259-10.610037C60.058259-10.179651 60.058259-8.577658 61.522767-8.577658S62.987275-10.179651 62.987275-10.610037ZM61.522767-8.768941C61.271708-8.768941 60.865233-8.888493 60.721771-9.384632C60.626129-9.731332 60.626129-10.317135 60.626129-10.687746C60.626129-11.088244 60.626129-11.548518 60.709815-11.871307C60.859255-12.40929 61.313551-12.486998 61.522767-12.486998C61.797736-12.486998 62.192256-12.355491 62.323763-11.901195C62.413427-11.584383 62.419404-11.14802 62.419404-10.687746C62.419404-10.30518 62.419404-9.701444 62.317785-9.366699C62.150413-8.84665 61.720027-8.768941 61.522767-8.768941Z"/>
<path d="M39.844277-5.738481C40.047515-5.738481 40.262708-5.738481 40.262708-5.977584S40.047515-6.216687 39.844277-6.216687H33.376531C33.173294-6.216687 32.9581-6.216687 32.9581-5.977584S33.173294-5.738481 33.376531-5.738481H39.844277Z"/>
<path d="M45.581962-5.738481C45.7852-5.738481 46.000393-5.738481 46.000393-5.977584S45.7852-6.216687 45.581962-6.216687H39.114216C38.910978-6.216687 38.695785-6.216687 38.695785-5.977584S38.910978-5.738481 39.114216-5.738481H45.581962Z"/>
<path d="M52.223788-5.738481C52.427026-5.738481 52.642219-5.738481 52.642219-5.977584S52.427026-6.216687 52.223788-6.216687H45.756042C45.552804-6.216687 45.337611-6.216687 45.337611-5.977584S45.552804-5.738481 45.756042-5.738481H52.223788Z"/>
<path d="M58.865614-5.738481C59.068852-5.738481 59.284045-5.738481 59.284045-5.977584S59.068852-6.216687 58.865614-6.216687H52.397868C52.19463-6.216687 51.979437-6.216687 51.979437-5.977584S52.19463-5.738481 52.397868-5.738481H58.865614Z"/>
<path d="M65.50744-5.738481C65.710678-5.738481 65.925871-5.738481 65.925871-5.977584S65.710678-6.216687 65.50744-6.216687H59.039694C58.836456-6.216687 58.621263-6.216687 58.621263-5.977584S58.836456-5.738481 59.039694-5.738481H65.50744Z"/>
<path d="M72.149266-5.738481C72.352504-5.738481 72.567697-5.738481 72.567697-5.977584S72.352504-6.216687 72.149266-6.216687H65.68152C65.478282-6.216687 65.263089-6.216687 65.263089-5.977584S65.478282-5.738481 65.68152-5.738481H72.149266Z"/>
<path d="M79.978953-5.738481C79.321419-5.236364 78.998629-4.746202 78.902988-4.590785C78.365005-3.765878 78.269364-3.012702 78.269364-3.000747C78.269364-2.857285 78.412826-2.857285 78.508467-2.857285C78.711705-2.857285 78.72366-2.881196 78.771481-3.096389C79.04645-4.267995 79.751805-5.272229 81.102739-5.822167C81.246201-5.869988 81.282066-5.893898 81.282066-5.977584S81.210335-6.097136 81.186425-6.109091C80.660398-6.312329 79.213822-6.910087 78.759526-8.918555C78.72366-9.062017 78.711705-9.097883 78.508467-9.097883C78.412826-9.097883 78.269364-9.097883 78.269364-8.954421C78.269364-8.930511 78.37696-8.177335 78.879077-7.376339C79.118181-7.017684 79.464881-6.599253 79.978953-6.216687H71.096263C70.88107-6.216687 70.665877-6.216687 70.665877-5.977584S70.88107-5.738481 71.096263-5.738481H79.978953Z"/>
<path d="M89.1698-.083686C89.1698-.119552 89.1698-.143462 88.966562-.3467C87.771046-1.554172 87.101556-3.526775 87.101556-5.965629C87.101556-8.284932 87.663449-10.281445 89.050249-11.692154C89.1698-11.799751 89.1698-11.823661 89.1698-11.859527C89.1698-11.931258 89.110024-11.955168 89.062204-11.955168C88.906787-11.955168 87.926463-11.094396 87.34066-9.92279C86.730946-8.715318 86.455977-7.436115 86.455977-5.965629C86.455977-4.901619 86.623349-3.478954 87.245018-2.199751C87.950373-.765131 88.930697 .011955 89.062204 .011955C89.110024 .011955 89.1698-.011955 89.1698-.083686Z"/>
<path d="M95.168701-7.79477C95.407805-7.79477 95.503446-7.79477 95.503446-8.021918C95.503446-8.141469 95.407805-8.141469 95.192612-8.141469H94.224243C94.451391-9.372852 94.618764-10.221669 94.714405-10.604234C94.786136-10.891158 95.037195-11.166127 95.348029-11.166127C95.599087-11.166127 95.850146-11.058531 95.969698-10.950934C95.503446-10.903113 95.359984-10.556413 95.359984-10.353176C95.359984-10.114072 95.539312-9.97061 95.76646-9.97061C96.005563-9.97061 96.364218-10.173848 96.364218-10.628144C96.364218-11.130262 95.862101-11.40523 95.336074-11.40523C94.822001-11.40523 94.319884-11.022665 94.080781-10.556413C93.865588-10.137983 93.746036-9.707597 93.471067-8.141469H92.670071C92.442923-8.141469 92.323371-8.141469 92.323371-7.926276C92.323371-7.79477 92.395102-7.79477 92.634206-7.79477H93.399336C93.184143-6.682939 92.693982-3.981071 92.419013-2.701868C92.215775-1.661768 92.036447-.789041 91.438689-.789041C91.402823-.789041 91.056124-.789041 90.84093-1.016189C91.450644-1.06401 91.450644-1.590037 91.450644-1.601993C91.450644-1.841096 91.271317-1.984558 91.044168-1.984558C90.805065-1.984558 90.44641-1.78132 90.44641-1.327024C90.44641-.812951 90.972437-.549938 91.438689-.549938C92.658116-.549938 93.160233-2.737733 93.29174-3.335492C93.506933-4.25604 94.092736-7.436115 94.152512-7.79477H95.168701Z"/>
<path d="M98.564058-2.940971C98.564058-3.634371 98.33691-4.148443 97.846748-4.148443C97.464183-4.148443 97.2729-3.837609 97.2729-3.574595S97.452228-2.988792 97.858704-2.988792C98.014121-2.988792 98.145628-3.036613 98.253224-3.144209C98.277134-3.16812 98.28909-3.16812 98.301045-3.16812C98.324955-3.16812 98.324955-3.000747 98.324955-2.940971C98.324955-2.546451 98.253224-1.769365 97.559824-.992279C97.428318-.848817 97.428318-.824907 97.428318-.800996C97.428318-.74122 97.488093-.681445 97.547869-.681445C97.643511-.681445 98.564058-1.566127 98.564058-2.940971Z"/>
<path d="M107.490409-10.9868C107.502364-11.03462 107.526275-11.106351 107.526275-11.166127C107.526275-11.285679 107.406723-11.285679 107.382813-11.285679C107.370857-11.285679 106.785054-11.237858 106.725278-11.225903C106.522041-11.213948 106.342713-11.190037 106.12752-11.178082C105.828641-11.154172 105.744955-11.142217 105.744955-10.927024C105.744955-10.807472 105.840596-10.807472 106.007968-10.807472C106.593772-10.807472 106.605727-10.699875 106.605727-10.580324C106.605727-10.508593 106.581816-10.412951 106.569861-10.377086L105.840596-7.47198C105.709089-7.782814 105.3863-8.261021 104.764631-8.261021C103.413697-8.261021 101.955166-6.515567 101.955166-4.746202C101.955166-3.56264 102.648566-2.86924 103.461517-2.86924C104.119052-2.86924 104.680945-3.383313 105.015689-3.777833C105.135241-3.072478 105.697134-2.86924 106.055789-2.86924S106.701368-3.084433 106.916561-3.514819C107.107844-3.921295 107.275216-4.65056 107.275216-4.698381C107.275216-4.758157 107.227395-4.805978 107.155664-4.805978C107.048068-4.805978 107.036113-4.746202 106.988292-4.566874C106.808965-3.861519 106.581816-3.108344 106.091654-3.108344C105.744955-3.108344 105.721044-3.419178 105.721044-3.658281C105.721044-3.706102 105.721044-3.957161 105.80473-4.291905L107.490409-10.9868ZM105.075465-4.411457C105.015689-4.208219 105.015689-4.184309 104.848317-3.957161C104.585303-3.622416 104.059276-3.108344 103.497383-3.108344C103.007221-3.108344 102.732252-3.550685 102.732252-4.25604C102.732252-4.913574 103.102862-6.252553 103.330011-6.75467C103.736486-7.591532 104.298379-8.021918 104.764631-8.021918C105.553672-8.021918 105.709089-7.041594 105.709089-6.945953C105.709089-6.933998 105.673224-6.77858 105.661268-6.75467L105.075465-4.411457Z"/>
<path d="M111.457037-3.737995C111.457037-4.590797 111.369366-5.108854 111.106352-5.618941C110.755667-6.320311 110.110088-6.495654 109.671732-6.495654C108.667498-6.495654 108.300873-5.746463 108.189291-5.5233C107.902367-4.941482 107.886427-4.152441 107.886427-3.737995C107.886427-3.211967 107.910337-2.406986 108.292903-1.769377C108.659528-1.179589 109.249316-1.028157 109.671732-1.028157C110.054298-1.028157 110.739727-1.147708 111.138233-1.936749C111.433127-2.510597 111.457037-3.219937 111.457037-3.737995ZM109.671732-1.25132C109.400748-1.25132 108.850811-1.378842 108.683438-2.215703C108.595767-2.67 108.595767-3.41919 108.595767-3.833636C108.595767-4.383574 108.595767-4.941482 108.683438-5.379838C108.850811-6.192789 109.472479-6.27249 109.671732-6.27249C109.942716-6.27249 110.492654-6.136998 110.652056-5.411718C110.747697-4.973362 110.747697-4.375604 110.747697-3.833636C110.747697-3.363399 110.747697-2.646089 110.652056-2.199763C110.484684-1.362901 109.934746-1.25132 109.671732-1.25132Z"/>
<path d="M115.663325-5.965629C115.663325-6.874222 115.543773-8.356663 114.874284-9.743462C114.168929-11.178082 113.188605-11.955168 113.057098-11.955168C113.009277-11.955168 112.949502-11.931258 112.949502-11.859527C112.949502-11.823661 112.949502-11.799751 113.15274-11.596513C114.348256-10.389041 115.017746-8.416438 115.017746-5.977584C115.017746-3.658281 114.455853-1.661768 113.069053-.251059C112.949502-.143462 112.949502-.119552 112.949502-.083686C112.949502-.011955 113.009277 .011955 113.057098 .011955C113.212515 .011955 114.192839-.848817 114.778642-2.020423C115.388356-3.239851 115.663325-4.531009 115.663325-5.965629Z"/>
<path d="M141.457406-14.647994C141.521167-14.895067 141.576958-14.911008 141.632749-14.918978C141.688539-14.934918 141.935613-14.934918 142.087045-14.934918C142.868116-14.934918 143.17895-14.895067 143.17895-14.321219C143.17895-14.241518 143.17098-14.185727 143.16301-14.113996L143.099249-13.595939V-13.556088C143.099249-13.548118 143.107219-13.524208 143.099249-13.516238C143.091279-13.500298 143.075339-13.388716 143.242711-13.388716C143.378203-13.388716 143.386173-13.444507 143.402113-13.556088L143.625277-14.974768L143.633247-15.08635C143.633247-15.197932 143.529635-15.197932 143.410084-15.197932H139.066372C138.89103-15.197932 138.86712-15.197932 138.819299-15.05447L138.333122-13.63579C138.293272-13.532178 138.293272-13.516238 138.293272-13.500298C138.293272-13.388716 138.404853-13.388716 138.444704-13.388716C138.476584-13.388716 138.524405-13.388716 138.556285-13.412626C138.580196-13.428567 138.580196-13.444507 138.651927-13.6597C139.058402-14.807396 139.297506-14.934918 140.365501-14.934918C140.524903-14.934918 140.724156-14.934918 140.843707-14.918978C140.835737-14.807396 140.835737-14.783486 140.803857-14.663934L139.759772-10.479625C139.680071-10.160821 139.63225-10.07315 138.90697-10.07315H138.803359C138.659897-10.07315 138.564255-10.07315 138.564255-9.921717C138.564255-9.889837 138.580196-9.810136 138.699747-9.810136C139.002612-9.810136 139.313446-9.834046 139.62428-9.834046H140.206098C140.524903-9.834046 140.859648-9.810136 141.170482-9.810136C141.226273-9.810136 141.337854-9.810136 141.337854-9.961568C141.337854-10.07315 141.242213-10.07315 141.114691-10.07315H141.01108C140.875588-10.07315 140.748066-10.08112 140.612574-10.08909C140.421292-10.113 140.365501-10.12894 140.365501-10.232552C140.365501-10.280372 140.389411-10.360074 140.389411-10.368044L141.457406-14.647994Z"/>
<path d="M144.948768-10.894071C144.877037-10.631057 144.709665-9.953598 144.207548-9.953598C144.032206-9.953598 143.896714-10.025329 143.848893-10.065179C144.008295-10.12894 144.127847-10.272402 144.127847-10.447745C144.127847-10.678878 143.936564-10.718729 143.848893-10.718729C143.61776-10.718729 143.442417-10.519476 143.442417-10.280372C143.442417-9.897807 143.848893-9.730435 144.199578-9.730435C144.558233-9.730435 144.821247-9.953598 145.012529-10.232552C145.148021-9.937658 145.450886-9.730435 145.833451-9.730435C146.662343-9.730435 147.140549-10.718729 147.140549-10.957832C147.140549-11.053473 147.020998-11.053473 146.989117-11.053473C146.885506-11.053473 146.853625-11.029563 146.829715-10.949862C146.574671-10.12894 146.080524-9.953598 145.849391-9.953598C145.602318-9.953598 145.434945-10.12894 145.434945-10.455715C145.434945-10.631057 145.530587-11.013623 145.602318-11.284607C145.682019-11.635291 145.76969-11.978006 145.857361-12.320721C145.984883-12.814868 146.255867-13.101792 146.558731-13.101792C146.765954-13.101792 146.901446-12.998181 146.917386-12.990211C146.845655-12.9663 146.638432-12.838778 146.638432-12.607645C146.638432-12.384482 146.813775-12.336661 146.917386-12.336661C147.068818-12.336661 147.315892-12.448243 147.315892-12.775018C147.315892-13.213374 146.829715-13.324955 146.566701-13.324955C146.239927-13.324955 145.968943-13.141643 145.75375-12.822838C145.658108-13.014121 145.419005-13.324955 144.932828-13.324955C144.095966-13.324955 143.62573-12.320721 143.62573-12.105528C143.62573-12.001917 143.729341-12.001917 143.777162-12.001917C143.880773-12.001917 143.904684-12.025827 143.928594-12.105528C144.175668-12.894569 144.653874-13.101792 144.916888-13.101792S145.331334-12.894569 145.331334-12.599675C145.331334-12.440273 145.291483-12.2729 145.203812-11.930186L144.948768-10.894071Z"/>
<path d="M150.044857-12.498954C150.044857-12.678281 150.020947-12.678281 149.841619-12.678281C149.447099-12.295716 148.837385-12.295716 148.622192-12.295716V-12.06259C148.77761-12.06259 149.17213-12.06259 149.530785-12.229962V-9.211282C149.530785-9.014022 149.530785-8.936313 148.915094-8.936313H148.658058V-8.703188C148.986825-8.727098 149.453077-8.727098 149.787821-8.727098S150.588817-8.727098 150.917585-8.703188V-8.936313H150.660548C150.044857-8.936313 150.044857-9.014022 150.044857-9.211282V-12.498954Z"/>
<path d="M128.043578-5.738481C128.246816-5.738481 128.462009-5.738481 128.462009-5.977584S128.246816-6.216687 128.043578-6.216687H121.575832C121.372595-6.216687 121.157401-6.216687 121.157401-5.977584S121.372595-5.738481 121.575832-5.738481H128.043578Z"/>
<path d="M133.781263-5.738481C133.984501-5.738481 134.199694-5.738481 134.199694-5.977584S133.984501-6.216687 133.781263-6.216687H127.313517C127.110279-6.216687 126.895086-6.216687 126.895086-5.977584S127.110279-5.738481 127.313517-5.738481H133.781263Z"/>
<path d="M140.423089-5.738481C140.626327-5.738481 140.84152-5.738481 140.84152-5.977584S140.626327-6.216687 140.423089-6.216687H133.955343C133.752105-6.216687 133.536912-6.216687 133.536912-5.977584S133.752105-5.738481 133.955343-5.738481H140.423089Z"/>
<path d="M147.064915-5.738481C147.268153-5.738481 147.483346-5.738481 147.483346-5.977584S147.268153-6.216687 147.064915-6.216687H140.597169C140.393931-6.216687 140.178738-6.216687 140.178738-5.977584S140.393931-5.738481 140.597169-5.738481H147.064915Z"/>
<path d="M153.706741-5.738481C153.909979-5.738481 154.125172-5.738481 154.125172-5.977584S153.909979-6.216687 153.706741-6.216687H147.238995C147.035757-6.216687 146.820564-6.216687 146.820564-5.977584S147.035757-5.738481 147.238995-5.738481H153.706741Z"/>
<path d="M160.348567-5.738481C160.551805-5.738481 160.766998-5.738481 160.766998-5.977584S160.551805-6.216687 160.348567-6.216687H153.880821C153.677583-6.216687 153.46239-6.216687 153.46239-5.977584S153.677583-5.738481 153.880821-5.738481H160.348567Z"/>
<path d="M168.178254-5.738481C167.52072-5.236364 167.19793-4.746202 167.102289-4.590785C166.564306-3.765878 166.468665-3.012702 166.468665-3.000747C166.468665-2.857285 166.612127-2.857285 166.707768-2.857285C166.911006-2.857285 166.922961-2.881196 166.970782-3.096389C167.245751-4.267995 167.951106-5.272229 169.30204-5.822167C169.445502-5.869988 169.481367-5.893898 169.481367-5.977584S169.409636-6.097136 169.385726-6.109091C168.859699-6.312329 167.413123-6.910087 166.958827-8.918555C166.922961-9.062017 166.911006-9.097883 166.707768-9.097883C166.612127-9.097883 166.468665-9.097883 166.468665-8.954421C166.468665-8.930511 166.576261-8.177335 167.078378-7.376339C167.317482-7.017684 167.664182-6.599253 168.178254-6.216687H159.295564C159.080371-6.216687 158.865178-6.216687 158.865178-5.977584S159.080371-5.738481 159.295564-5.738481H168.178254Z"/>
<path d="M177.369101-.083686C177.369101-.119552 177.369101-.143462 177.165863-.3467C175.970347-1.554172 175.300857-3.526775 175.300857-5.965629C175.300857-8.284932 175.86275-10.281445 177.24955-11.692154C177.369101-11.799751 177.369101-11.823661 177.369101-11.859527C177.369101-11.931258 177.309325-11.955168 177.261505-11.955168C177.106088-11.955168 176.125764-11.094396 175.539961-9.92279C174.930247-8.715318 174.655278-7.436115 174.655278-5.965629C174.655278-4.901619 174.82265-3.478954 175.444319-2.199751C176.149674-.765131 177.129998 .011955 177.261505 .011955C177.309325 .011955 177.369101-.011955 177.369101-.083686Z"/>
<path d="M183.368002-7.79477C183.607106-7.79477 183.702747-7.79477 183.702747-8.021918C183.702747-8.141469 183.607106-8.141469 183.391913-8.141469H182.423544C182.650692-9.372852 182.818065-10.221669 182.913706-10.604234C182.985437-10.891158 183.236495-11.166127 183.54733-11.166127C183.798388-11.166127 184.049447-11.058531 184.168999-10.950934C183.702747-10.903113 183.559285-10.556413 183.559285-10.353176C183.559285-10.114072 183.738613-9.97061 183.965761-9.97061C184.204864-9.97061 184.563519-10.173848 184.563519-10.628144C184.563519-11.130262 184.061402-11.40523 183.535375-11.40523C183.021302-11.40523 182.519185-11.022665 182.280082-10.556413C182.064889-10.137983 181.945337-9.707597 181.670368-8.141469H180.869372C180.642224-8.141469 180.522672-8.141469 180.522672-7.926276C180.522672-7.79477 180.594403-7.79477 180.833507-7.79477H181.598637C181.383444-6.682939 180.893283-3.981071 180.618314-2.701868C180.415076-1.661768 180.235748-.789041 179.63799-.789041C179.602124-.789041 179.255425-.789041 179.040231-1.016189C179.649945-1.06401 179.649945-1.590037 179.649945-1.601993C179.649945-1.841096 179.470618-1.984558 179.243469-1.984558C179.004366-1.984558 178.645711-1.78132 178.645711-1.327024C178.645711-.812951 179.171738-.549938 179.63799-.549938C180.857417-.549938 181.359534-2.737733 181.491041-3.335492C181.706234-4.25604 182.292037-7.436115 182.351813-7.79477H183.368002Z"/>
<path d="M186.763359-2.940971C186.763359-3.634371 186.536211-4.148443 186.046049-4.148443C185.663484-4.148443 185.472201-3.837609 185.472201-3.574595S185.651529-2.988792 186.058005-2.988792C186.213422-2.988792 186.344929-3.036613 186.452525-3.144209C186.476435-3.16812 186.488391-3.16812 186.500346-3.16812C186.524256-3.16812 186.524256-3.000747 186.524256-2.940971C186.524256-2.546451 186.452525-1.769365 185.759125-.992279C185.627619-.848817 185.627619-.824907 185.627619-.800996C185.627619-.74122 185.687394-.681445 185.74717-.681445C185.842812-.681445 186.763359-1.566127 186.763359-2.940971Z"/>
<path d="M195.68971-10.9868C195.701665-11.03462 195.725576-11.106351 195.725576-11.166127C195.725576-11.285679 195.606024-11.285679 195.582114-11.285679C195.570158-11.285679 194.984355-11.237858 194.924579-11.225903C194.721342-11.213948 194.542014-11.190037 194.326821-11.178082C194.027942-11.154172 193.944256-11.142217 193.944256-10.927024C193.944256-10.807472 194.039897-10.807472 194.207269-10.807472C194.793073-10.807472 194.805028-10.699875 194.805028-10.580324C194.805028-10.508593 194.781117-10.412951 194.769162-10.377086L194.039897-7.47198C193.90839-7.782814 193.585601-8.261021 192.963932-8.261021C191.612998-8.261021 190.154467-6.515567 190.154467-4.746202C190.154467-3.56264 190.847867-2.86924 191.660818-2.86924C192.318353-2.86924 192.880246-3.383313 193.21499-3.777833C193.334542-3.072478 193.896435-2.86924 194.25509-2.86924S194.900669-3.084433 195.115862-3.514819C195.307145-3.921295 195.474517-4.65056 195.474517-4.698381C195.474517-4.758157 195.426696-4.805978 195.354965-4.805978C195.247369-4.805978 195.235414-4.746202 195.187593-4.566874C195.008266-3.861519 194.781117-3.108344 194.290955-3.108344C193.944256-3.108344 193.920345-3.419178 193.920345-3.658281C193.920345-3.706102 193.920345-3.957161 194.004031-4.291905L195.68971-10.9868ZM193.274766-4.411457C193.21499-4.208219 193.21499-4.184309 193.047618-3.957161C192.784604-3.622416 192.258577-3.108344 191.696684-3.108344C191.206522-3.108344 190.931553-3.550685 190.931553-4.25604C190.931553-4.913574 191.302163-6.252553 191.529312-6.75467C191.935787-7.591532 192.49768-8.021918 192.963932-8.021918C193.752973-8.021918 193.90839-7.041594 193.90839-6.945953C193.90839-6.933998 193.872525-6.77858 193.860569-6.75467L193.274766-4.411457Z"/>
<path d="M198.261569-6.27249C198.261569-6.487683 198.245629-6.495654 198.030435-6.495654C197.703661-6.176849 197.281245-5.985566 196.524084-5.985566V-5.722553C196.739277-5.722553 197.169663-5.722553 197.63193-5.937746V-1.849078C197.63193-1.554184 197.60802-1.458543 196.850859-1.458543H196.571905V-1.195529C196.89868-1.219439 197.584109-1.219439 197.942764-1.219439S198.994819-1.219439 199.321594-1.195529V-1.458543H199.04264C198.285479-1.458543 198.261569-1.554184 198.261569-1.849078V-6.27249Z"/>
<path d="M203.862626-5.965629C203.862626-6.874222 203.743074-8.356663 203.073585-9.743462C202.36823-11.178082 201.387906-11.955168 201.256399-11.955168C201.208578-11.955168 201.148803-11.931258 201.148803-11.859527C201.148803-11.823661 201.148803-11.799751 201.352041-11.596513C202.547557-10.389041 203.217047-8.416438 203.217047-5.977584C203.217047-3.658281 202.655154-1.661768 201.268354-.251059C201.148803-.143462 201.148803-.119552 201.148803-.083686C201.148803-.011955 201.208578 .011955 201.256399 .011955C201.411816 .011955 202.39214-.848817 202.977943-2.020423C203.587657-3.239851 203.862626-4.531009 203.862626-5.965629Z"/>
<path d="M229.656707-14.647994C229.720468-14.895067 229.776259-14.911008 229.83205-14.918978C229.88784-14.934918 230.134914-14.934918 230.286346-14.934918C231.067417-14.934918 231.378251-14.895067 231.378251-14.321219C231.378251-14.241518 231.370281-14.185727 231.362311-14.113996L231.29855-13.595939V-13.556088C231.29855-13.548118 231.30652-13.524208 231.29855-13.516238C231.29058-13.500298 231.27464-13.388716 231.442012-13.388716C231.577504-13.388716 231.585474-13.444507 231.601414-13.556088L231.824578-14.974768L231.832548-15.08635C231.832548-15.197932 231.728936-15.197932 231.609385-15.197932H227.265673C227.090331-15.197932 227.066421-15.197932 227.0186-15.05447L226.532423-13.63579C226.492573-13.532178 226.492573-13.516238 226.492573-13.500298C226.492573-13.388716 226.604154-13.388716 226.644005-13.388716C226.675885-13.388716 226.723706-13.388716 226.755586-13.412626C226.779497-13.428567 226.779497-13.444507 226.851228-13.6597C227.257703-14.807396 227.496807-14.934918 228.564802-14.934918C228.724204-14.934918 228.923457-14.934918 229.043008-14.918978C229.035038-14.807396 229.035038-14.783486 229.003158-14.663934L227.959073-10.479625C227.879372-10.160821 227.831551-10.07315 227.106271-10.07315H227.00266C226.859198-10.07315 226.763556-10.07315 226.763556-9.921717C226.763556-9.889837 226.779497-9.810136 226.899048-9.810136C227.201913-9.810136 227.512747-9.834046 227.823581-9.834046H228.405399C228.724204-9.834046 229.058949-9.810136 229.369783-9.810136C229.425574-9.810136 229.537155-9.810136 229.537155-9.961568C229.537155-10.07315 229.441514-10.07315 229.313992-10.07315H229.210381C229.074889-10.07315 228.947367-10.08112 228.811875-10.08909C228.620593-10.113 228.564802-10.12894 228.564802-10.232552C228.564802-10.280372 228.588712-10.360074 228.588712-10.368044L229.656707-14.647994Z"/>
<path d="M233.148069-10.894071C233.076338-10.631057 232.908966-9.953598 232.406849-9.953598C232.231507-9.953598 232.096015-10.025329 232.048194-10.065179C232.207596-10.12894 232.327148-10.272402 232.327148-10.447745C232.327148-10.678878 232.135865-10.718729 232.048194-10.718729C231.817061-10.718729 231.641718-10.519476 231.641718-10.280372C231.641718-9.897807 232.048194-9.730435 232.398879-9.730435C232.757534-9.730435 233.020548-9.953598 233.21183-10.232552C233.347322-9.937658 233.650186-9.730435 234.032752-9.730435C234.861644-9.730435 235.33985-10.718729 235.33985-10.957832C235.33985-11.053473 235.220299-11.053473 235.188418-11.053473C235.084807-11.053473 235.052926-11.029563 235.029016-10.949862C234.773972-10.12894 234.279825-9.953598 234.048692-9.953598C233.801619-9.953598 233.634246-10.12894 233.634246-10.455715C233.634246-10.631057 233.729888-11.013623 233.801619-11.284607C233.88132-11.635291 233.968991-11.978006 234.056662-12.320721C234.184184-12.814868 234.455168-13.101792 234.758032-13.101792C234.965255-13.101792 235.100747-12.998181 235.116687-12.990211C235.044956-12.9663 234.837733-12.838778 234.837733-12.607645C234.837733-12.384482 235.013076-12.336661 235.116687-12.336661C235.268119-12.336661 235.515193-12.448243 235.515193-12.775018C235.515193-13.213374 235.029016-13.324955 234.766002-13.324955C234.439228-13.324955 234.168244-13.141643 233.953051-12.822838C233.857409-13.014121 233.618306-13.324955 233.132129-13.324955C232.295267-13.324955 231.825031-12.320721 231.825031-12.105528C231.825031-12.001917 231.928642-12.001917 231.976463-12.001917C232.080074-12.001917 232.103985-12.025827 232.127895-12.105528C232.374969-12.894569 232.853175-13.101792 233.116189-13.101792S233.530635-12.894569 233.530635-12.599675C233.530635-12.440273 233.490784-12.2729 233.403113-11.930186L233.148069-10.894071Z"/>
<path d="M239.314146-9.820996H239.092975C239.08102-9.73731 239.021244-9.342789 238.93158-9.277036C238.889737-9.24117 238.405553-9.24117 238.321867-9.24117H237.204059L237.969189-9.862839C238.172427-10.024234 238.704432-10.406799 238.889737-10.586127C239.069065-10.765454 239.314146-11.070311 239.314146-11.494719C239.314146-12.241917 238.638679-12.678281 237.837683-12.678281C237.066574-12.678281 236.528592-12.170186 236.528592-11.608293C236.528592-11.303437 236.785628-11.267571 236.851381-11.267571C237.000821-11.267571 237.174171-11.375168 237.174171-11.590361C237.174171-11.721868 237.096462-11.91315 236.833448-11.91315C236.970933-12.218007 237.335566-12.445155 237.748019-12.445155C238.375665-12.445155 238.71041-11.978904 238.71041-11.494719C238.71041-11.070311 238.429463-10.633947 238.011033-10.251382L236.594345-8.954246C236.534569-8.89447 236.528592-8.888493 236.528592-8.703188H239.128841L239.314146-9.820996Z"/>
<path d="M216.242879-5.738481C216.446117-5.738481 216.66131-5.738481 216.66131-5.977584S216.446117-6.216687 216.242879-6.216687H209.775133C209.571895-6.216687 209.356702-6.216687 209.356702-5.977584S209.571895-5.738481 209.775133-5.738481H216.242879Z"/>
<path d="M221.980564-5.738481C222.183802-5.738481 222.398995-5.738481 222.398995-5.977584S222.183802-6.216687 221.980564-6.216687H215.512818C215.30958-6.216687 215.094387-6.216687 215.094387-5.977584S215.30958-5.738481 215.512818-5.738481H221.980564Z"/>
<path d="M228.62239-5.738481C228.825628-5.738481 229.040821-5.738481 229.040821-5.977584S228.825628-6.216687 228.62239-6.216687H222.154644C221.951406-6.216687 221.736213-6.216687 221.736213-5.977584S221.951406-5.738481 222.154644-5.738481H228.62239Z"/>
<path d="M235.264216-5.738481C235.467454-5.738481 235.682647-5.738481 235.682647-5.977584S235.467454-6.216687 235.264216-6.216687H228.79647C228.593232-6.216687 228.378039-6.216687 228.378039-5.977584S228.593232-5.738481 228.79647-5.738481H235.264216Z"/>
<path d="M241.906042-5.738481C242.10928-5.738481 242.324473-5.738481 242.324473-5.977584S242.10928-6.216687 241.906042-6.216687H235.438296C235.235058-6.216687 235.019865-6.216687 235.019865-5.977584S235.235058-5.738481 235.438296-5.738481H241.906042Z"/>
<path d="M248.547868-5.738481C248.751106-5.738481 248.966299-5.738481 248.966299-5.977584S248.751106-6.216687 248.547868-6.216687H242.080122C241.876884-6.216687 241.661691-6.216687 241.661691-5.977584S241.876884-5.738481 242.080122-5.738481H248.547868Z"/>
<path d="M256.377555-5.738481C255.720021-5.236364 255.397231-4.746202 255.30159-4.590785C254.763607-3.765878 254.667966-3.012702 254.667966-3.000747C254.667966-2.857285 254.811428-2.857285 254.907069-2.857285C255.110307-2.857285 255.122262-2.881196 255.170083-3.096389C255.445052-4.267995 256.150407-5.272229 257.501341-5.822167C257.644803-5.869988 257.680668-5.893898 257.680668-5.977584S257.608937-6.097136 257.585027-6.109091C257.059-6.312329 255.612424-6.910087 255.158128-8.918555C255.122262-9.062017 255.110307-9.097883 254.907069-9.097883C254.811428-9.097883 254.667966-9.097883 254.667966-8.954421C254.667966-8.930511 254.775562-8.177335 255.277679-7.376339C255.516783-7.017684 255.863483-6.599253 256.377555-6.216687H247.494865C247.279672-6.216687 247.064479-6.216687 247.064479-5.977584S247.279672-5.738481 247.494865-5.738481H256.377555Z"/>
<path d="M263.978365-5.977584C263.978365-6.324284 263.691441-6.611208 263.344741-6.611208S262.711117-6.324284 262.711117-5.977584S262.998041-5.34396 263.344741-5.34396S263.978365-5.630884 263.978365-5.977584Z"/>
<path d="M269.291753-5.977584C269.291753-6.324284 269.004829-6.611208 268.658129-6.611208S268.024505-6.324284 268.024505-5.977584S268.311429-5.34396 268.658129-5.34396S269.291753-5.630884 269.291753-5.977584Z"/>
<path d="M274.60514-5.977584C274.60514-6.324284 274.318216-6.611208 273.971517-6.611208S273.337893-6.324284 273.337893-5.977584S273.624817-5.34396 273.971517-5.34396S274.60514-5.630884 274.60514-5.977584Z"/>
<path d="M300.243751-14.603726C300.307512-14.8508 300.363303-14.86674 300.419094-14.87471C300.474885-14.89065 300.721958-14.89065 300.87339-14.89065C301.654461-14.89065 301.965295-14.8508 301.965295-14.276952C301.965295-14.197251 301.957325-14.14146 301.949355-14.069729L301.885594-13.551671V-13.511821C301.885594-13.503851 301.893564-13.47994 301.885594-13.47197C301.877624-13.45603 301.861684-13.344449 302.029056-13.344449C302.164548-13.344449 302.172518-13.400239 302.188459-13.511821L302.411622-14.930501L302.419592-15.042082C302.419592-15.153664 302.31598-15.153664 302.196429-15.153664H297.852718C297.677375-15.153664 297.653465-15.153664 297.605644-15.010202L297.119467-13.591522C297.079617-13.487911 297.079617-13.47197 297.079617-13.45603C297.079617-13.344449 297.191198-13.344449 297.231049-13.344449C297.262929-13.344449 297.31075-13.344449 297.34263-13.368359C297.366541-13.384299 297.366541-13.400239 297.438272-13.615432C297.844748-14.763129 298.083851-14.89065 299.151846-14.89065C299.311248-14.89065 299.510501-14.89065 299.630053-14.87471C299.622083-14.763129 299.622083-14.739218 299.590202-14.619666L298.546117-10.435358C298.466416-10.116553 298.418596-10.028882 297.693315-10.028882H297.589704C297.446242-10.028882 297.350601-10.028882 297.350601-9.87745C297.350601-9.845569 297.366541-9.765868 297.486092-9.765868C297.788957-9.765868 298.099791-9.789779 298.410625-9.789779H298.992444C299.311248-9.789779 299.645993-9.765868 299.956827-9.765868C300.012618-9.765868 300.1242-9.765868 300.1242-9.9173C300.1242-10.028882 300.028558-10.028882 299.901036-10.028882H299.797425C299.661933-10.028882 299.534411-10.036852 299.398919-10.044822C299.207637-10.068732 299.151846-10.084673 299.151846-10.188284C299.151846-10.236105 299.175756-10.315806 299.175756-10.323776L300.243751-14.603726Z"/>
<path d="M303.735114-10.849803C303.663383-10.58679 303.49601-9.90933 302.993893-9.90933C302.818551-9.90933 302.683059-9.981061 302.635238-10.020912C302.79464-10.084673 302.914192-10.228135 302.914192-10.403477C302.914192-10.63461 302.722909-10.674461 302.635238-10.674461C302.404105-10.674461 302.228762-10.475208 302.228762-10.236105C302.228762-9.853539 302.635238-9.686167 302.985923-9.686167C303.344578-9.686167 303.607592-9.90933 303.798875-10.188284C303.934366-9.89339 304.237231-9.686167 304.619796-9.686167C305.448688-9.686167 305.926894-10.674461 305.926894-10.913564C305.926894-11.009206 305.807343-11.009206 305.775462-11.009206C305.671851-11.009206 305.63997-10.985295 305.61606-10.905594C305.361016-10.084673 304.86687-9.90933 304.635736-9.90933C304.388663-9.90933 304.22129-10.084673 304.22129-10.411447C304.22129-10.58679 304.316932-10.969355 304.388663-11.240339C304.468364-11.591024 304.556035-11.933739 304.643706-12.276454C304.771228-12.7706 305.042212-13.057525 305.345076-13.057525C305.552299-13.057525 305.687791-12.953913 305.703731-12.945943C305.632-12.922033 305.424777-12.794511 305.424777-12.563378C305.424777-12.340214 305.60012-12.292394 305.703731-12.292394C305.855163-12.292394 306.102237-12.403975 306.102237-12.73075C306.102237-13.169106 305.61606-13.280688 305.353046-13.280688C305.026272-13.280688 304.755288-13.097375 304.540095-12.778571C304.444454-12.969853 304.20535-13.280688 303.719173-13.280688C302.882312-13.280688 302.412075-12.276454 302.412075-12.061261C302.412075-11.957649 302.515686-11.957649 302.563507-11.957649C302.667119-11.957649 302.691029-11.981559 302.714939-12.061261C302.962013-12.850302 303.440219-13.057525 303.703233-13.057525S304.117679-12.850302 304.117679-12.555407C304.117679-12.396005 304.077828-12.228633 303.990157-11.885918L303.735114-10.849803Z"/>
<path d="M308.436682-10.837848C308.406794-11.292145 307.988363-11.405719 307.761215-11.405719S307.37865-11.268234 307.271053-11.076952C307.121613-10.831871 307.049882-10.515059 307.049882-10.491148C307.049882-10.425395 307.103681-10.401485 307.157479-10.401485C307.25312-10.401485 307.259098-10.443328 307.288986-10.538969C307.408538-11.017176 307.552-11.208459 307.743282-11.208459C307.958475-11.208459 307.958475-10.963378 307.958475-10.903602C307.958475-10.80796 307.898699-10.568857 307.856856-10.401485C307.815013-10.24009 307.755237-9.995009 307.725349-9.863502C307.683506-9.714063 307.647641-9.558645 307.605798-9.409206C307.563955-9.241833 307.492224-8.942954 307.492224-8.907089C307.492224-8.775582 307.593843-8.709828 307.701439-8.709828S307.910655-8.781559 307.958475-8.871223C307.97043-8.907089 308.024229-9.116304 308.054117-9.235856L308.185623-9.773838C308.227467-9.929256 308.251377-10.036852 308.287242-10.174336C308.341041-10.377574 308.550256-10.694386 308.771427-10.915557C308.890978-11.029131 309.148014-11.208459 309.470804-11.208459C309.853369-11.208459 309.853369-10.903602 309.853369-10.790028C309.853369-10.43735 309.596333-9.797749 309.488737-9.528757C309.452871-9.427138 309.411028-9.331497 309.411028-9.229878C309.411028-8.925021 309.685997-8.709828 310.014764-8.709828C310.6185-8.709828 310.917379-9.498869 310.917379-9.630376C310.917379-9.642331 310.911402-9.714063 310.803805-9.714063C310.720119-9.714063 310.714141-9.684175 310.678276-9.5706C310.582635-9.253789 310.337554-8.907089 310.032697-8.907089C309.919123-8.907089 309.871302-8.996752 309.871302-9.122282C309.871302-9.241833 309.913145-9.343452 309.966943-9.468982C310.056607-9.702107 310.325599-10.377574 310.325599-10.712319C310.325599-11.202481 309.954988-11.405719 309.500692-11.405719C309.201813-11.405719 308.819247-11.310077 308.436682-10.837848Z"/>
<path d="M286.829923-5.738481C287.033161-5.738481 287.248354-5.738481 287.248354-5.977584S287.033161-6.216687 286.829923-6.216687H280.362178C280.15894-6.216687 279.943747-6.216687 279.943747-5.977584S280.15894-5.738481 280.362178-5.738481H286.829923Z"/>
<path d="M293.041539-5.738481C293.244777-5.738481 293.45997-5.738481 293.45997-5.977584S293.244777-6.216687 293.041539-6.216687H286.573793C286.370555-6.216687 286.155362-6.216687 286.155362-5.977584S286.370555-5.738481 286.573793-5.738481H293.041539Z"/>
<path d="M299.683365-5.738481C299.886603-5.738481 300.101796-5.738481 300.101796-5.977584S299.886603-6.216687 299.683365-6.216687H293.215619C293.012381-6.216687 292.797188-6.216687 292.797188-5.977584S293.012381-5.738481 293.215619-5.738481H299.683365Z"/>
<path d="M306.325191-5.738481C306.528429-5.738481 306.743622-5.738481 306.743622-5.977584S306.528429-6.216687 306.325191-6.216687H299.857445C299.654207-6.216687 299.439014-6.216687 299.439014-5.977584S299.654207-5.738481 299.857445-5.738481H306.325191Z"/>
<path d="M312.967017-5.738481C313.170255-5.738481 313.385448-5.738481 313.385448-5.977584S313.170255-6.216687 312.967017-6.216687H306.499271C306.296033-6.216687 306.08084-6.216687 306.08084-5.977584S306.296033-5.738481 306.499271-5.738481H312.967017Z"/>
<path d="M319.608843-5.738481C319.812081-5.738481 320.027274-5.738481 320.027274-5.977584S319.812081-6.216687 319.608843-6.216687H313.141097C312.937859-6.216687 312.722666-6.216687 312.722666-5.977584S312.937859-5.738481 313.141097-5.738481H319.608843Z"/>
<path d="M327.912461-5.738481C327.254926-5.236364 326.932137-4.746202 326.836496-4.590785C326.298513-3.765878 326.202872-3.012702 326.202872-3.000747C326.202872-2.857285 326.346334-2.857285 326.441975-2.857285C326.645213-2.857285 326.657168-2.881196 326.704989-3.096389C326.979958-4.267995 327.685312-5.272229 329.036246-5.822167C329.179708-5.869988 329.215574-5.893898 329.215574-5.977584S329.143843-6.097136 329.119933-6.109091C328.593905-6.312329 327.14733-6.910087 326.693034-8.918555C326.657168-9.062017 326.645213-9.097883 326.441975-9.097883C326.346334-9.097883 326.202872-9.097883 326.202872-8.954421C326.202872-8.930511 326.310468-8.177335 326.812585-7.376339C327.051689-7.017684 327.398388-6.599253 327.912461-6.216687H319.029771C318.814578-6.216687 318.599385-6.216687 318.599385-5.977584S318.814578-5.738481 319.029771-5.738481H327.912461Z"/>
<path d="M337.103308-.083686C337.103308-.119552 337.103308-.143462 336.90007-.3467C335.704553-1.554172 335.035064-3.526775 335.035064-5.965629C335.035064-8.284932 335.596957-10.281445 336.983756-11.692154C337.103308-11.799751 337.103308-11.823661 337.103308-11.859527C337.103308-11.931258 337.043532-11.955168 336.995711-11.955168C336.840294-11.955168 335.85997-11.094396 335.274167-9.92279C334.664454-8.715318 334.389485-7.436115 334.389485-5.965629C334.389485-4.901619 334.556857-3.478954 335.178526-2.199751C335.883881-.765131 336.864205 .011955 336.995711 .011955C337.043532 .011955 337.103308-.011955 337.103308-.083686Z"/>
<path d="M343.102209-7.79477C343.341312-7.79477 343.436954-7.79477 343.436954-8.021918C343.436954-8.141469 343.341312-8.141469 343.126119-8.141469H342.157751C342.384899-9.372852 342.552271-10.221669 342.647913-10.604234C342.719644-10.891158 342.970702-11.166127 343.281537-11.166127C343.532595-11.166127 343.783654-11.058531 343.903205-10.950934C343.436954-10.903113 343.293492-10.556413 343.293492-10.353176C343.293492-10.114072 343.472819-9.97061 343.699967-9.97061C343.939071-9.97061 344.297726-10.173848 344.297726-10.628144C344.297726-11.130262 343.795609-11.40523 343.269581-11.40523C342.755509-11.40523 342.253392-11.022665 342.014289-10.556413C341.799096-10.137983 341.679544-9.707597 341.404575-8.141469H340.603579C340.376431-8.141469 340.256879-8.141469 340.256879-7.926276C340.256879-7.79477 340.32861-7.79477 340.567713-7.79477H341.332844C341.117651-6.682939 340.627489-3.981071 340.35252-2.701868C340.149283-1.661768 339.969955-.789041 339.372197-.789041C339.336331-.789041 338.989631-.789041 338.774438-1.016189C339.384152-1.06401 339.384152-1.590037 339.384152-1.601993C339.384152-1.841096 339.204824-1.984558 338.977676-1.984558C338.738573-1.984558 338.379918-1.78132 338.379918-1.327024C338.379918-.812951 338.905945-.549938 339.372197-.549938C340.591624-.549938 341.093741-2.737733 341.225248-3.335492C341.440441-4.25604 342.026244-7.436115 342.08602-7.79477H343.102209Z"/>
<path d="M346.497566-2.940971C346.497566-3.634371 346.270418-4.148443 345.780256-4.148443C345.397691-4.148443 345.206408-3.837609 345.206408-3.574595S345.385736-2.988792 345.792211-2.988792C345.947628-2.988792 346.079135-3.036613 346.186732-3.144209C346.210642-3.16812 346.222597-3.16812 346.234552-3.16812C346.258463-3.16812 346.258463-3.000747 346.258463-2.940971C346.258463-2.546451 346.186732-1.769365 345.493332-.992279C345.361825-.848817 345.361825-.824907 345.361825-.800996C345.361825-.74122 345.421601-.681445 345.481377-.681445C345.577018-.681445 346.497566-1.566127 346.497566-2.940971Z"/>
<path d="M358.744746-10.9868C358.756701-11.03462 358.780612-11.106351 358.780612-11.166127C358.780612-11.285679 358.66106-11.285679 358.63715-11.285679C358.625195-11.285679 358.039391-11.237858 357.979615-11.225903C357.776378-11.213948 357.59705-11.190037 357.381857-11.178082C357.082978-11.154172 356.999292-11.142217 356.999292-10.927024C356.999292-10.807472 357.094933-10.807472 357.262305-10.807472C357.848109-10.807472 357.860064-10.699875 357.860064-10.580324C357.860064-10.508593 357.836153-10.412951 357.824198-10.377086L357.094933-7.47198C356.963426-7.782814 356.640637-8.261021 356.018968-8.261021C354.668034-8.261021 353.209503-6.515567 353.209503-4.746202C353.209503-3.56264 353.902903-2.86924 354.715855-2.86924C355.373389-2.86924 355.935282-3.383313 356.270026-3.777833C356.389578-3.072478 356.951471-2.86924 357.310126-2.86924S357.955705-3.084433 358.170898-3.514819C358.362181-3.921295 358.529553-4.65056 358.529553-4.698381C358.529553-4.758157 358.481733-4.805978 358.410001-4.805978C358.302405-4.805978 358.29045-4.746202 358.242629-4.566874C358.063302-3.861519 357.836153-3.108344 357.345992-3.108344C356.999292-3.108344 356.975381-3.419178 356.975381-3.658281C356.975381-3.706102 356.975381-3.957161 357.059067-4.291905L358.744746-10.9868ZM356.329802-4.411457C356.270026-4.208219 356.270026-4.184309 356.102654-3.957161C355.83964-3.622416 355.313613-3.108344 354.75172-3.108344C354.261558-3.108344 353.986589-3.550685 353.986589-4.25604C353.986589-4.913574 354.3572-6.252553 354.584348-6.75467C354.990823-7.591532 355.552716-8.021918 356.018968-8.021918C356.808009-8.021918 356.963426-7.041594 356.963426-6.945953C356.963426-6.933998 356.927561-6.77858 356.915605-6.75467L356.329802-4.411457Z"/>
<path d="M360.408012-2.502627C360.431922-2.622179 360.511623-2.925043 360.535534-3.044595C360.647115-3.474981 360.647115-3.482951 360.830428-3.745965C361.093442-4.1365 361.468037-4.487185 362.002034-4.487185C362.288958-4.487185 362.456331-4.319813 362.456331-3.945218C362.456331-3.506861 362.121586-2.598269 361.970154-2.207733C361.866543-1.94472 361.866543-1.896899 361.866543-1.793287C361.866543-1.338991 362.241138-1.115828 362.583853-1.115828C363.364924-1.115828 363.691698-2.231644 363.691698-2.335255C363.691698-2.414956 363.627937-2.438866 363.572147-2.438866C363.476505-2.438866 363.460565-2.383076 363.436655-2.303375C363.245372-1.649825 362.910627-1.338991 362.607763-1.338991C362.480241-1.338991 362.41648-1.418692 362.41648-1.602005S362.480241-1.96066 362.559942-2.159913C362.679494-2.462777 363.030179-3.37934 363.030179-3.825666C363.030179-4.423424 362.615733-4.710348 362.041885-4.710348C361.396306-4.710348 360.98186-4.319813 360.750727-4.016949C360.694936-4.455305 360.344251-4.710348 359.937775-4.710348C359.650851-4.710348 359.451599-4.527036 359.324077-4.279962C359.132794-3.905367 359.053093-3.506861 359.053093-3.490921C359.053093-3.41919 359.108884-3.38731 359.172645-3.38731C359.276256-3.38731 359.284226-3.41919 359.340017-3.626413C359.435658-4.016949 359.57912-4.487185 359.913865-4.487185C360.121088-4.487185 360.168909-4.287932 360.168909-4.11259C360.168909-3.969128 360.129058-3.817696 360.065297-3.554682C360.049357-3.490921 359.929805-3.020685 359.897925-2.909103L359.603031-1.713586C359.57115-1.594035 359.52333-1.394782 359.52333-1.362901C359.52333-1.179589 359.674762-1.115828 359.778373-1.115828C359.921835-1.115828 360.041387-1.211469 360.097178-1.307111C360.121088-1.354931 360.184849-1.625915 360.224699-1.793287L360.408012-2.502627Z"/>
<path d="M367.821681-5.965629C367.821681-6.874222 367.70213-8.356663 367.03264-9.743462C366.327285-11.178082 365.346962-11.955168 365.215455-11.955168C365.167634-11.955168 365.107858-11.931258 365.107858-11.859527C365.107858-11.823661 365.107858-11.799751 365.311096-11.596513C366.506613-10.389041 367.176102-8.416438 367.176102-5.977584C367.176102-3.658281 366.61421-1.661768 365.22741-.251059C365.107858-.143462 365.107858-.119552 365.107858-.083686C365.107858-.011955 365.167634 .011955 365.215455 .011955C365.370872 .011955 366.351196-.848817 366.936999-2.020423C367.546713-3.239851 367.821681-4.531009 367.821681-5.965629Z"/>
</g>
</svg>
</center>
<p>The critical transaction here is <code>Tx<sub>1</sub></code>: ideally it should not only verify that <code>d<sub>1</sub></code> is the correct next state after <code>d<sub>0</sub></code>, <em>but also the base case</em>: <code>d<sub>0</sub></code> should be the correct initial state.</p>
<p>Unfortunately, the fact that <code>d<sub>0</sub></code> should be the base case is deducible from <code>Tx<sub>0</sub></code>, but on Cardano that information is not reflected in <code>Tx<sub>1</sub></code>, and <code>Tx<sub>1</sub></code> is the only context available to <code>f</code> when it validates <code>d<sub>0</sub></code>. This means that contracts do not know when the base case should apply, and hence cannot <em>verify</em> their own base case.</p>
<p>There are two ways to solve this problem.</p>
<ul>
<li><p>Declare that it is the responsibility of the off-chain code to verify the base case. In rare cases it may be possible to verify this by inspecting the current datum, but in most cases it will mean looking through the chain history to find the original output (<code>Tx<sub>0</sub></code> in the diagram above).</p></li>
<li><p>We can solve the problem entirely on-chain through the clever use of NFTs. We will discuss this in detail below.</p></li>
</ul>
<h3 id="state-tokens">State tokens</h3>
<p>Often stateful scripts have an associated NFT, anchored at a random output <code>o</code>, which is included in the value of each script output:</p>
<center>
<svg height="15.165619pt" version="1.1" viewBox="57.603035 -15.153664 272.155995 15.165619" width="272.155995pt">
<title>   (f, \; d_\mathit{old}, \mathsf{NFT}_o \uplus V_\mathrm{old}) \xrightarrow{\mspace{30mu}\mathit{Tx}\mspace{30mu}}   (f, \; d_\mathit{new}, \mathsf{NFT}_o \uplus V_\mathrm{new}) </title>
<defs/>
<g>
<path d="M61.488464-.083686C61.488464-.119552 61.488464-.143462 61.285226-.3467C60.08971-1.554172 59.42022-3.526775 59.42022-5.965629C59.42022-8.284932 59.982113-10.281445 61.368913-11.692154C61.488464-11.799751 61.488464-11.823661 61.488464-11.859527C61.488464-11.931258 61.428688-11.955168 61.380868-11.955168C61.225451-11.955168 60.245127-11.094396 59.659324-9.92279C59.04961-8.715318 58.774641-7.436115 58.774641-5.965629C58.774641-4.901619 58.942013-3.478954 59.563682-2.199751C60.269037-.765131 61.249361 .011955 61.380868 .011955C61.428688 .011955 61.488464-.011955 61.488464-.083686Z"/>
<path d="M67.487365-7.79477C67.726469-7.79477 67.82211-7.79477 67.82211-8.021918C67.82211-8.141469 67.726469-8.141469 67.511276-8.141469H66.542907C66.770055-9.372852 66.937428-10.221669 67.033069-10.604234C67.1048-10.891158 67.355859-11.166127 67.666693-11.166127C67.917751-11.166127 68.16881-11.058531 68.288362-10.950934C67.82211-10.903113 67.678648-10.556413 67.678648-10.353176C67.678648-10.114072 67.857976-9.97061 68.085124-9.97061C68.324227-9.97061 68.682882-10.173848 68.682882-10.628144C68.682882-11.130262 68.180765-11.40523 67.654738-11.40523C67.140665-11.40523 66.638548-11.022665 66.399445-10.556413C66.184252-10.137983 66.0647-9.707597 65.789732-8.141469H64.988735C64.761587-8.141469 64.642035-8.141469 64.642035-7.926276C64.642035-7.79477 64.713766-7.79477 64.95287-7.79477H65.718C65.502807-6.682939 65.012646-3.981071 64.737677-2.701868C64.534439-1.661768 64.355111-.789041 63.757353-.789041C63.721487-.789041 63.374788-.789041 63.159595-1.016189C63.769308-1.06401 63.769308-1.590037 63.769308-1.601993C63.769308-1.841096 63.589981-1.984558 63.362832-1.984558C63.123729-1.984558 62.765074-1.78132 62.765074-1.327024C62.765074-.812951 63.291101-.549938 63.757353-.549938C64.97678-.549938 65.478897-2.737733 65.610404-3.335492C65.825597-4.25604 66.4114-7.436115 66.471176-7.79477H67.487365Z"/>
<path d="M70.882723-2.940971C70.882723-3.634371 70.655574-4.148443 70.165412-4.148443C69.782847-4.148443 69.591564-3.837609 69.591564-3.574595S69.770892-2.988792 70.177368-2.988792C70.332785-2.988792 70.464292-3.036613 70.571888-3.144209C70.595798-3.16812 70.607754-3.16812 70.619709-3.16812C70.643619-3.16812 70.643619-3.000747 70.643619-2.940971C70.643619-2.546451 70.571888-1.769365 69.878488-.992279C69.746982-.848817 69.746982-.824907 69.746982-.800996C69.746982-.74122 69.806757-.681445 69.866533-.681445C69.962175-.681445 70.882723-1.566127 70.882723-2.940971Z"/>
<path d="M83.129903-10.9868C83.141858-11.03462 83.165768-11.106351 83.165768-11.166127C83.165768-11.285679 83.046216-11.285679 83.022306-11.285679C83.010351-11.285679 82.424548-11.237858 82.364772-11.225903C82.161534-11.213948 81.982206-11.190037 81.767013-11.178082C81.468134-11.154172 81.384448-11.142217 81.384448-10.927024C81.384448-10.807472 81.480089-10.807472 81.647462-10.807472C82.233265-10.807472 82.24522-10.699875 82.24522-10.580324C82.24522-10.508593 82.22131-10.412951 82.209355-10.377086L81.480089-7.47198C81.348582-7.782814 81.025793-8.261021 80.404124-8.261021C79.05319-8.261021 77.59466-6.515567 77.59466-4.746202C77.59466-3.56264 78.288059-2.86924 79.101011-2.86924C79.758545-2.86924 80.320438-3.383313 80.655183-3.777833C80.774734-3.072478 81.336627-2.86924 81.695282-2.86924S82.340861-3.084433 82.556054-3.514819C82.747337-3.921295 82.914709-4.65056 82.914709-4.698381C82.914709-4.758157 82.866889-4.805978 82.795158-4.805978C82.687561-4.805978 82.675606-4.746202 82.627785-4.566874C82.448458-3.861519 82.22131-3.108344 81.731148-3.108344C81.384448-3.108344 81.360538-3.419178 81.360538-3.658281C81.360538-3.706102 81.360538-3.957161 81.444224-4.291905L83.129903-10.9868ZM80.714959-4.411457C80.655183-4.208219 80.655183-4.184309 80.48781-3.957161C80.224797-3.622416 79.698769-3.108344 79.136876-3.108344C78.646714-3.108344 78.371746-3.550685 78.371746-4.25604C78.371746-4.913574 78.742356-6.252553 78.969504-6.75467C79.37598-7.591532 79.937873-8.021918 80.404124-8.021918C81.193165-8.021918 81.348582-7.041594 81.348582-6.945953C81.348582-6.933998 81.312717-6.77858 81.300762-6.75467L80.714959-4.411457Z"/>
<path d="M87.503006-3.363399C87.503006-4.192291 86.945099-4.710348 86.227789-4.710348C85.199644-4.710348 84.115709-3.634383 84.115709-2.462777C84.115709-1.586064 84.713467-1.115828 85.382957-1.115828C86.442982-1.115828 87.503006-2.215703 87.503006-3.363399ZM85.390927-1.338991C85.088062-1.338991 84.713467-1.546214 84.713467-2.183823C84.713467-2.542478 84.88084-3.291668 85.135883-3.730025C85.478598-4.303873 85.948835-4.487185 86.219818-4.487185C86.602384-4.487185 86.905248-4.200261 86.905248-3.642353C86.905248-3.38731 86.785696-2.614209 86.458922-2.072241C86.203878-1.633885 85.773492-1.338991 85.390927-1.338991Z"/>
<path d="M90.050355-6.495654C90.058325-6.527534 90.074265-6.583325 90.074265-6.615205C90.074265-6.734757 89.946743-6.726787 89.859072-6.718817L89.03018-6.647086C88.918599-6.639116 88.830928-6.631145 88.830928-6.487683C88.830928-6.376102 88.926569-6.376102 89.03815-6.376102C89.420716-6.376102 89.420716-6.328281 89.420716-6.25655C89.420716-6.2167 89.396805-6.129028 89.388835-6.081208L88.400541-2.136002C88.360691-1.9766 88.360691-1.928779 88.360691-1.849078C88.360691-1.362901 88.727316-1.115828 89.093941-1.115828C89.261314-1.115828 89.508387-1.171619 89.70764-1.554184C89.851102-1.841108 89.962683-2.303375 89.962683-2.335255C89.962683-2.438866 89.851102-2.438866 89.811251-2.438866C89.68373-2.438866 89.675759-2.406986 89.643879-2.279464C89.532297-1.865018 89.396805-1.338991 89.109881-1.338991C88.886718-1.338991 88.886718-1.594035 88.886718-1.689676C88.886718-1.737497 88.886718-1.825168 88.910629-1.920809L90.050355-6.495654Z"/>
<path d="M94.412455-6.495654C94.420425-6.527534 94.436365-6.583325 94.436365-6.615205C94.436365-6.734757 94.308843-6.726787 94.221172-6.718817L93.39228-6.647086C93.280699-6.639116 93.193028-6.631145 93.193028-6.487683C93.193028-6.376102 93.288669-6.376102 93.400251-6.376102C93.782816-6.376102 93.782816-6.328281 93.782816-6.25655C93.782816-6.2167 93.758906-6.129028 93.750935-6.081208L93.296639-4.264022C93.129267-4.542976 92.898133-4.710348 92.563389-4.710348C91.622916-4.710348 90.658532-3.530772 90.658532-2.391046C90.658532-1.625915 91.112828-1.115828 91.710587-1.115828C92.180823-1.115828 92.571359-1.466513 92.738731-1.657795C92.810462-1.362901 93.073476-1.115828 93.456041-1.115828C93.742965-1.115828 93.934248-1.29117 94.06974-1.538244C94.237112-1.857048 94.340724-2.319315 94.340724-2.335255C94.340724-2.438866 94.229142-2.438866 94.189292-2.438866C94.0538-2.438866 94.0538-2.414956 94.005979-2.215703C93.854547-1.602005 93.687175-1.338991 93.471982-1.338991C93.248818-1.338991 93.248818-1.594035 93.248818-1.689676C93.248818-1.737497 93.248818-1.825168 93.272729-1.920809L94.412455-6.495654ZM92.794522-2.255554C92.730761-1.9766 92.204734-1.338991 91.734497-1.338991C91.359902-1.338991 91.24035-1.745467 91.24035-2.064271C91.24035-2.438866 91.471483-3.37934 91.670736-3.745965C91.989541-4.327783 92.340226-4.487185 92.563389-4.487185C93.065506-4.487185 93.153177-3.809726 93.153177-3.730025L93.129267-3.618443L92.794522-2.255554Z"/>
<path d="M97.74575-2.940971C97.74575-3.634371 97.518602-4.148443 97.02844-4.148443C96.645875-4.148443 96.454592-3.837609 96.454592-3.574595S96.63392-2.988792 97.040395-2.988792C97.195813-2.988792 97.327319-3.036613 97.434916-3.144209C97.458826-3.16812 97.470781-3.16812 97.482737-3.16812C97.506647-3.16812 97.506647-3.000747 97.506647-2.940971C97.506647-2.546451 97.434916-1.769365 96.741516-.992279C96.610009-.848817 96.610009-.824907 96.610009-.800996C96.610009-.74122 96.669785-.681445 96.729561-.681445C96.825202-.681445 97.74575-1.566127 97.74575-2.940971Z"/>
<path d="M103.217057-11.285679H101.746572V-2.988792H102.66712V-10.400996H102.679075C102.786671-10.161893 103.40834-8.870735 103.647443-8.392528L106.289536-2.988792H107.760021V-11.285679H106.839473V-3.873474H106.827518C106.719922-4.112578 106.098253-5.403736 105.85915-5.881943L103.217057-11.285679Z"/>
<path d="M114.518703-6.766625V-7.483935H110.968018V-10.520548H112.510235C112.653697-10.520548 112.797159-10.508593 112.940621-10.508593H115.008865V-11.261768H109.939874V-2.988792H110.968018V-6.766625H114.518703Z"/>
<path d="M120.019594-10.484682H121.071649C121.215111-10.484682 121.358573-10.472727 121.502035-10.472727H123.068162V-11.225903H115.930926V-10.472727H117.509008C117.652471-10.472727 117.795933-10.484682 117.939395-10.484682H118.991449V-2.988792H120.019594V-10.484682Z"/>
<path d="M127.465451-3.331519C127.465451-4.11259 126.907543-4.710348 126.078651-4.710348C124.946895-4.710348 123.84702-3.610473 123.84702-2.494657C123.84702-1.681706 124.420868-1.115828 125.233819-1.115828C126.373545-1.115828 127.465451-2.231644 127.465451-3.331519ZM125.241789-1.338991C124.962835-1.338991 124.492599-1.482453 124.492599-2.215703C124.492599-2.542478 124.644031-3.40325 125.026596-3.897397C125.417132-4.399514 125.855488-4.487185 126.070681-4.487185C126.397455-4.487185 126.819871-4.287932 126.819871-3.618443C126.819871-3.299639 126.676409-2.542478 126.373545-2.064271C126.078651-1.609975 125.640295-1.338991 125.241789-1.338991Z"/>
<path d="M134.964354-6.396015H136.661988C136.841315-6.396015 137.092374-6.396015 137.092374-6.635118S136.841315-6.874222 136.661988-6.874222H134.964354V-8.583811C134.964354-8.787049 134.964354-9.002242 134.725251-9.002242S134.486147-8.787049 134.486147-8.583811V-6.874222H132.788513C132.609186-6.874222 132.358127-6.874222 132.358127-6.635118S132.609186-6.396015 132.788513-6.396015H134.486147V-4.698381C134.486147-4.507098 134.486147-4.27995 134.725251-4.27995S134.964354-4.519054 134.964354-4.698381V-6.396015ZM138.048787-9.707597C138.048787-9.92279 138.048787-10.137983 137.809684-10.137983S137.570581-9.92279 137.570581-9.707597V-5.379826C137.570581-3.58655 135.621888-3.203985 134.725251-3.203985C134.187268-3.203985 133.434093-3.311582 132.800469-3.718057C131.879921-4.303861 131.879921-5.068991 131.879921-5.391781V-9.707597C131.879921-9.92279 131.879921-10.137983 131.640817-10.137983S131.401714-9.92279 131.401714-9.707597V-5.332005C131.401714-3.514819 133.230855-2.725778 134.725251-2.725778C136.279423-2.725778 138.048787-3.56264 138.048787-5.32005V-9.707597Z"/>
<path d="M148.771231-9.827148C149.177707-10.472727 149.548317-10.759651 150.15803-10.807472C150.277582-10.819427 150.373223-10.819427 150.373223-11.03462C150.373223-11.082441 150.349313-11.154172 150.241717-11.154172C150.026524-11.154172 149.512451-11.130262 149.297258-11.130262C148.950558-11.130262 148.591903-11.154172 148.257159-11.154172C148.161517-11.154172 148.041966-11.154172 148.041966-10.927024C148.041966-10.819427 148.149562-10.807472 148.197383-10.807472C148.639724-10.771606 148.687545-10.556413 148.687545-10.412951C148.687545-10.233624 148.520172-9.958655 148.508217-9.9467L144.754294-3.993026L143.917433-10.436862C143.917433-10.783562 144.539101-10.807472 144.670608-10.807472C144.849936-10.807472 144.957532-10.807472 144.957532-11.03462C144.957532-11.154172 144.826025-11.154172 144.79016-11.154172C144.586922-11.154172 144.347819-11.130262 144.144581-11.130262H143.475091C142.602364-11.130262 142.243709-11.154172 142.231754-11.154172C142.160023-11.154172 142.016561-11.154172 142.016561-10.938979C142.016561-10.807472 142.100247-10.807472 142.29153-10.807472C142.901243-10.807472 142.937109-10.699875 142.972974-10.400996L143.929388-3.024658C143.965253-2.773599 143.965253-2.737733 144.132626-2.737733C144.276088-2.737733 144.335864-2.773599 144.455415-2.964882L148.771231-9.827148Z"/>
<path d="M152.180388-2.893163C152.180388-3.889427 151.359466-4.750199 150.307412-4.750199S148.434435-3.889427 148.434435-2.893163S149.287237-1.115828 150.307412-1.115828C151.335556-1.115828 152.180388-1.896899 152.180388-2.893163ZM150.307412-1.362901C149.877025-1.362901 149.542281-1.570124 149.366938-1.849078C149.167685-2.175853 149.143775-2.566388 149.143775-2.964894C149.143775-3.267758 149.143775-3.745965 149.390849-4.08868C149.598072-4.367634 149.932816-4.527036 150.307412-4.527036C150.721857-4.527036 151.064572-4.327783 151.247885-4.048829C151.463078-3.714084 151.471048-3.283698 151.471048-2.964894C151.471048-2.598269 151.455108-2.159913 151.231945-1.825168C151.016751-1.506363 150.658096-1.362901 150.307412-1.362901Z"/>
<path d="M153.951806-6.726787L152.764259-6.639116V-6.376102C153.306227-6.376102 153.369988-6.320311 153.369988-5.929776V-1.817198C153.369988-1.458543 153.274347-1.458543 152.764259-1.458543V-1.195529C153.075094-1.219439 153.52142-1.219439 153.656912-1.219439C153.816314-1.219439 154.2467-1.219439 154.557535-1.195529V-1.458543C154.047447-1.458543 153.951806-1.458543 153.951806-1.817198V-6.726787Z"/>
<path d="M157.404005-6.639116V-6.376102C157.945973-6.376102 158.009734-6.320311 158.009734-5.929776V-4.248082C157.73078-4.550946 157.356185-4.710348 156.941739-4.710348C155.945475-4.710348 155.060792-3.937248 155.060792-2.909103C155.060792-1.928779 155.857804-1.115828 156.862038-1.115828C157.332274-1.115828 157.72281-1.338991 157.985824-1.617945V-1.115828L159.197281-1.195529V-1.458543C158.655313-1.458543 158.591552-1.514333 158.591552-1.904869V-6.726787L157.404005-6.639116ZM157.985824-2.183823C157.985824-2.040361 157.985824-2.00848 157.866272-1.849078C157.643109-1.530274 157.276484-1.338991 156.901888-1.338991C156.535263-1.338991 156.216459-1.530274 156.025176-1.825168C155.809983-2.136002 155.770132-2.526538 155.770132-2.901133C155.770132-3.363399 155.841863-3.690174 156.025176-3.969128C156.216459-4.264022 156.575114-4.487185 156.981589-4.487185C157.364155-4.487185 157.74672-4.295903 157.985824-3.881457V-2.183823Z"/>
<path d="M163.355975-5.965629C163.355975-6.874222 163.236424-8.356663 162.566934-9.743462C161.861579-11.178082 160.881256-11.955168 160.749749-11.955168C160.701928-11.955168 160.642152-11.931258 160.642152-11.859527C160.642152-11.823661 160.642152-11.799751 160.84539-11.596513C162.040907-10.389041 162.710396-8.416438 162.710396-5.977584C162.710396-3.658281 162.148504-1.661768 160.761704-.251059C160.642152-.143462 160.642152-.119552 160.642152-.083686C160.642152-.011955 160.701928 .011955 160.749749 .011955C160.905166 .011955 161.88549-.848817 162.471293-2.020423C163.081007-3.239851 163.355975-4.531009 163.355975-5.965629Z"/>
<path d="M189.150057-14.603726C189.213818-14.8508 189.269608-14.86674 189.325399-14.87471C189.38119-14.89065 189.628263-14.89065 189.779696-14.89065C190.560767-14.89065 190.871601-14.8508 190.871601-14.276952C190.871601-14.197251 190.863631-14.14146 190.855661-14.069729L190.7919-13.551671V-13.511821C190.7919-13.503851 190.79987-13.47994 190.7919-13.47197C190.78393-13.45603 190.76799-13.344449 190.935362-13.344449C191.070854-13.344449 191.078824-13.400239 191.094764-13.511821L191.317927-14.930501L191.325897-15.042082C191.325897-15.153664 191.222286-15.153664 191.102734-15.153664H186.759023C186.583681-15.153664 186.55977-15.153664 186.51195-15.010202L186.025773-13.591522C185.985922-13.487911 185.985922-13.47197 185.985922-13.45603C185.985922-13.344449 186.097504-13.344449 186.137354-13.344449C186.169235-13.344449 186.217056-13.344449 186.248936-13.368359C186.272846-13.384299 186.272846-13.400239 186.344577-13.615432C186.751053-14.763129 186.990156-14.89065 188.058151-14.89065C188.217554-14.89065 188.416806-14.89065 188.536358-14.87471C188.528388-14.763129 188.528388-14.739218 188.496508-14.619666L187.452423-10.435358C187.372722-10.116553 187.324901-10.028882 186.599621-10.028882H186.496009C186.352547-10.028882 186.256906-10.028882 186.256906-9.87745C186.256906-9.845569 186.272846-9.765868 186.392398-9.765868C186.695262-9.765868 187.006097-9.789779 187.316931-9.789779H187.898749C188.217554-9.789779 188.552298-9.765868 188.863133-9.765868C188.918924-9.765868 189.030505-9.765868 189.030505-9.9173C189.030505-10.028882 188.934864-10.028882 188.807342-10.028882H188.70373C188.568239-10.028882 188.440717-10.036852 188.305225-10.044822C188.113942-10.068732 188.058151-10.084673 188.058151-10.188284C188.058151-10.236105 188.082062-10.315806 188.082062-10.323776L189.150057-14.603726Z"/>
<path d="M192.641419-10.849803C192.569688-10.58679 192.402316-9.90933 191.900199-9.90933C191.724856-9.90933 191.589364-9.981061 191.541544-10.020912C191.700946-10.084673 191.820498-10.228135 191.820498-10.403477C191.820498-10.63461 191.629215-10.674461 191.541544-10.674461C191.31041-10.674461 191.135068-10.475208 191.135068-10.236105C191.135068-9.853539 191.541544-9.686167 191.892229-9.686167C192.250884-9.686167 192.513897-9.90933 192.70518-10.188284C192.840672-9.89339 193.143536-9.686167 193.526102-9.686167C194.354993-9.686167 194.8332-10.674461 194.8332-10.913564C194.8332-11.009206 194.713648-11.009206 194.681768-11.009206C194.578156-11.009206 194.546276-10.985295 194.522366-10.905594C194.267322-10.084673 193.773175-9.90933 193.542042-9.90933C193.294968-9.90933 193.127596-10.084673 193.127596-10.411447C193.127596-10.58679 193.223237-10.969355 193.294968-11.240339C193.374669-11.591024 193.462341-11.933739 193.550012-12.276454C193.677534-12.7706 193.948517-13.057525 194.251382-13.057525C194.458605-13.057525 194.594097-12.953913 194.610037-12.945943C194.538306-12.922033 194.331083-12.794511 194.331083-12.563378C194.331083-12.340214 194.506425-12.292394 194.610037-12.292394C194.761469-12.292394 195.008542-12.403975 195.008542-12.73075C195.008542-13.169106 194.522366-13.280688 194.259352-13.280688C193.932577-13.280688 193.661593-13.097375 193.4464-12.778571C193.350759-12.969853 193.111656-13.280688 192.625479-13.280688C191.788617-13.280688 191.318381-12.276454 191.318381-12.061261C191.318381-11.957649 191.421992-11.957649 191.469813-11.957649C191.573424-11.957649 191.597334-11.981559 191.621245-12.061261C191.868318-12.850302 192.346525-13.057525 192.609539-13.057525S193.023984-12.850302 193.023984-12.555407C193.023984-12.396005 192.984134-12.228633 192.896463-11.885918L192.641419-10.849803Z"/>
<path d="M175.736229-5.738481C175.939467-5.738481 176.15466-5.738481 176.15466-5.977584S175.939467-6.216687 175.736229-6.216687H169.268483C169.065245-6.216687 168.850052-6.216687 168.850052-5.977584S169.065245-5.738481 169.268483-5.738481H175.736229Z"/>
<path d="M179.398384-5.738481C179.601622-5.738481 179.816815-5.738481 179.816815-5.977584S179.601622-6.216687 179.398384-6.216687H172.930638C172.7274-6.216687 172.512207-6.216687 172.512207-5.977584S172.7274-5.738481 172.930638-5.738481H179.398384Z"/>
<path d="M186.04021-5.738481C186.243448-5.738481 186.458641-5.738481 186.458641-5.977584S186.243448-6.216687 186.04021-6.216687H179.572464C179.369226-6.216687 179.154033-6.216687 179.154033-5.977584S179.369226-5.738481 179.572464-5.738481H186.04021Z"/>
<path d="M192.682036-5.738481C192.885274-5.738481 193.100467-5.738481 193.100467-5.977584S192.885274-6.216687 192.682036-6.216687H186.21429C186.011052-6.216687 185.795859-6.216687 185.795859-5.977584S186.011052-5.738481 186.21429-5.738481H192.682036Z"/>
<path d="M199.323862-5.738481C199.5271-5.738481 199.742293-5.738481 199.742293-5.977584S199.5271-6.216687 199.323862-6.216687H192.856116C192.652878-6.216687 192.437685-6.216687 192.437685-5.977584S192.652878-5.738481 192.856116-5.738481H199.323862Z"/>
<path d="M205.965688-5.738481C206.168926-5.738481 206.384119-5.738481 206.384119-5.977584S206.168926-6.216687 205.965688-6.216687H199.497942C199.294704-6.216687 199.079511-6.216687 199.079511-5.977584S199.294704-5.738481 199.497942-5.738481H205.965688Z"/>
<path d="M211.71986-5.738481C211.062326-5.236364 210.739537-4.746202 210.643895-4.590785C210.105913-3.765878 210.010271-3.012702 210.010271-3.000747C210.010271-2.857285 210.153733-2.857285 210.249375-2.857285C210.452612-2.857285 210.464568-2.881196 210.512388-3.096389C210.787357-4.267995 211.492712-5.272229 212.843646-5.822167C212.987108-5.869988 213.022974-5.893898 213.022974-5.977584S212.951243-6.097136 212.927332-6.109091C212.401305-6.312329 210.95473-6.910087 210.500433-8.918555C210.464568-9.062017 210.452612-9.097883 210.249375-9.097883C210.153733-9.097883 210.010271-9.097883 210.010271-8.954421C210.010271-8.930511 210.117868-8.177335 210.619985-7.376339C210.859088-7.017684 211.205788-6.599253 211.71986-6.216687H202.83717C202.621977-6.216687 202.406784-6.216687 202.406784-5.977584S202.621977-5.738481 202.83717-5.738481H211.71986Z"/>
<path d="M220.910708-.083686C220.910708-.119552 220.910708-.143462 220.70747-.3467C219.511953-1.554172 218.842464-3.526775 218.842464-5.965629C218.842464-8.284932 219.404356-10.281445 220.791156-11.692154C220.910708-11.799751 220.910708-11.823661 220.910708-11.859527C220.910708-11.931258 220.850932-11.955168 220.803111-11.955168C220.647694-11.955168 219.66737-11.094396 219.081567-9.92279C218.471853-8.715318 218.196884-7.436115 218.196884-5.965629C218.196884-4.901619 218.364257-3.478954 218.985926-2.199751C219.69128-.765131 220.671604 .011955 220.803111 .011955C220.850932 .011955 220.910708-.011955 220.910708-.083686Z"/>
<path d="M226.909609-7.79477C227.148712-7.79477 227.244353-7.79477 227.244353-8.021918C227.244353-8.141469 227.148712-8.141469 226.933519-8.141469H225.96515C226.192299-9.372852 226.359671-10.221669 226.455312-10.604234C226.527043-10.891158 226.778102-11.166127 227.088936-11.166127C227.339995-11.166127 227.591053-11.058531 227.710605-10.950934C227.244353-10.903113 227.100891-10.556413 227.100891-10.353176C227.100891-10.114072 227.280219-9.97061 227.507367-9.97061C227.74647-9.97061 228.105126-10.173848 228.105126-10.628144C228.105126-11.130262 227.603008-11.40523 227.076981-11.40523C226.562909-11.40523 226.060792-11.022665 225.821688-10.556413C225.606495-10.137983 225.486944-9.707597 225.211975-8.141469H224.410979C224.18383-8.141469 224.064279-8.141469 224.064279-7.926276C224.064279-7.79477 224.13601-7.79477 224.375113-7.79477H225.140244C224.925051-6.682939 224.434889-3.981071 224.15992-2.701868C223.956682-1.661768 223.777355-.789041 223.179596-.789041C223.143731-.789041 222.797031-.789041 222.581838-1.016189C223.191551-1.06401 223.191551-1.590037 223.191551-1.601993C223.191551-1.841096 223.012224-1.984558 222.785076-1.984558C222.545972-1.984558 222.187317-1.78132 222.187317-1.327024C222.187317-.812951 222.713345-.549938 223.179596-.549938C224.399023-.549938 224.90114-2.737733 225.032647-3.335492C225.24784-4.25604 225.833644-7.436115 225.893419-7.79477H226.909609Z"/>
<path d="M230.304966-2.940971C230.304966-3.634371 230.077818-4.148443 229.587656-4.148443C229.20509-4.148443 229.013808-3.837609 229.013808-3.574595S229.193135-2.988792 229.599611-2.988792C229.755028-2.988792 229.886535-3.036613 229.994131-3.144209C230.018042-3.16812 230.029997-3.16812 230.041952-3.16812C230.065862-3.16812 230.065862-3.000747 230.065862-2.940971C230.065862-2.546451 229.994131-1.769365 229.300732-.992279C229.169225-.848817 229.169225-.824907 229.169225-.800996C229.169225-.74122 229.229001-.681445 229.288777-.681445C229.384418-.681445 230.304966-1.566127 230.304966-2.940971Z"/>
<path d="M242.552146-10.9868C242.564101-11.03462 242.588011-11.106351 242.588011-11.166127C242.588011-11.285679 242.46846-11.285679 242.444549-11.285679C242.432594-11.285679 241.846791-11.237858 241.787015-11.225903C241.583777-11.213948 241.40445-11.190037 241.189257-11.178082C240.890377-11.154172 240.806691-11.142217 240.806691-10.927024C240.806691-10.807472 240.902333-10.807472 241.069705-10.807472C241.655508-10.807472 241.667463-10.699875 241.667463-10.580324C241.667463-10.508593 241.643553-10.412951 241.631598-10.377086L240.902333-7.47198C240.770826-7.782814 240.448036-8.261021 239.826368-8.261021C238.475434-8.261021 237.016903-6.515567 237.016903-4.746202C237.016903-3.56264 237.710303-2.86924 238.523254-2.86924C239.180788-2.86924 239.742681-3.383313 240.077426-3.777833C240.196978-3.072478 240.758871-2.86924 241.117526-2.86924S241.763105-3.084433 241.978298-3.514819C242.16958-3.921295 242.336953-4.65056 242.336953-4.698381C242.336953-4.758157 242.289132-4.805978 242.217401-4.805978C242.109805-4.805978 242.097849-4.746202 242.050029-4.566874C241.870701-3.861519 241.643553-3.108344 241.153391-3.108344C240.806691-3.108344 240.782781-3.419178 240.782781-3.658281C240.782781-3.706102 240.782781-3.957161 240.866467-4.291905L242.552146-10.9868ZM240.137202-4.411457C240.077426-4.208219 240.077426-4.184309 239.910054-3.957161C239.64704-3.622416 239.121013-3.108344 238.55912-3.108344C238.068958-3.108344 237.793989-3.550685 237.793989-4.25604C237.793989-4.913574 238.164599-6.252553 238.391747-6.75467C238.798223-7.591532 239.360116-8.021918 239.826368-8.021918C240.615409-8.021918 240.770826-7.041594 240.770826-6.945953C240.770826-6.933998 240.73496-6.77858 240.723005-6.75467L240.137202-4.411457Z"/>
<path d="M244.741439-3.331519C244.78129-3.459041 245.028363-3.929277 245.275437-4.160411C245.52251-4.375604 245.777554-4.487185 246.056508-4.487185C246.367342-4.487185 246.462983-4.264022 246.462983-3.961158C246.462983-3.498891 246.128239-2.590299 245.976806-2.191793C245.921016-2.048331 245.873195-1.920809 245.873195-1.777347C245.873195-1.410722 246.136209-1.115828 246.542684-1.115828C247.299845-1.115828 247.63459-2.223673 247.63459-2.335255C247.63459-2.438866 247.523008-2.438866 247.483158-2.438866C247.355636-2.438866 247.347666-2.406986 247.307815-2.271494C247.164353-1.761407 246.901339-1.338991 246.558625-1.338991C246.407193-1.338991 246.383282-1.450573 246.383282-1.594035C246.383282-1.777347 246.447043-1.94472 246.502834-2.104122C246.662236-2.526538 246.989011-3.38731 246.989011-3.849576C246.989011-4.535006 246.518774-4.710348 246.080418-4.710348C245.402958-4.710348 245.028363-4.256052 244.876931-4.072739C244.82911-4.439365 244.534216-4.710348 244.143681-4.710348C243.872697-4.710348 243.681414-4.558916 243.522012-4.279962C243.37855-4.008979 243.258998-3.530772 243.258998-3.490921C243.258998-3.38731 243.36261-3.38731 243.41043-3.38731C243.537952-3.38731 243.545922-3.41122 243.593743-3.602503C243.713295-4.072739 243.856757-4.487185 244.12774-4.487185C244.350904-4.487185 244.350904-4.208231 244.350904-4.1365C244.350904-4.024919 244.334963-3.897397 244.303083-3.785815L243.721265-1.458543C243.705325-1.386812 243.697354-1.362901 243.697354-1.338991C243.697354-1.211469 243.800966-1.115828 243.936458-1.115828C244.191501-1.115828 244.239322-1.307111 244.311053-1.609975C244.366844-1.809228 244.446545-2.136002 244.486395-2.295404C244.526246-2.462777 244.526246-2.478717 244.613917-2.813462L244.741439-3.331519Z"/>
<path d="M249.535252-3.012715C249.854056-3.012715 251.344467-3.012715 251.344467-4.016949C251.344467-4.415454 250.993782-4.710348 250.451814-4.710348C249.591042-4.710348 248.379585-3.961158 248.379585-2.550448C248.379585-1.817198 248.794031-1.115828 249.638863-1.115828C250.786559-1.115828 251.432138-1.880959 251.432138-1.99254C251.432138-2.056301 251.328527-2.159913 251.272736-2.159913C251.224915-2.159913 251.216945-2.143972 251.145214-2.064271C250.714828-1.538244 250.085189-1.338991 249.646833-1.338991C249.096895-1.338991 248.969374-1.888929 248.969374-2.247584C248.969374-2.430896 249.025164-2.773611 249.080955-3.012715H249.535252ZM249.144716-3.235878C249.40773-4.224172 250.10113-4.487185 250.451814-4.487185C250.730768-4.487185 250.993782-4.335753 250.993782-4.016949C250.993782-3.235878 249.766385-3.235878 249.471491-3.235878H249.144716Z"/>
<path d="M254.594292-2.574358C254.538502-2.351195 254.538502-2.343225 254.530532-2.151942C254.522561-1.94472 254.387069-1.729526 254.307368-1.617945C254.163906-1.426662 254.012474-1.338991 253.829162-1.338991C253.502387-1.338991 253.215463-1.506363 253.215463-2.032391C253.215463-2.446837 253.438626-3.052565 253.629909-3.562652C253.73352-3.825666 253.757431-3.889427 253.757431-4.048829C253.757431-4.487185 253.430656-4.710348 253.095911-4.710348C252.330781-4.710348 252.004006-3.594533 252.004006-3.490921S252.107617-3.38731 252.155438-3.38731C252.28296-3.38731 252.29093-3.41122 252.32281-3.554682C252.466272-4.048829 252.729286-4.487185 253.079971-4.487185C253.223433-4.487185 253.255314-4.383574 253.255314-4.240112C253.255314-4.056799 253.191553-3.889427 253.119822-3.706114C252.769137-2.765641 252.689436-2.470747 252.689436-2.128032C252.689436-1.24335 253.414716-1.115828 253.813221-1.115828C254.036385-1.115828 254.331279-1.163649 254.634143-1.609975C254.857306-1.179589 255.351453-1.115828 255.598527-1.115828C256.068763-1.115828 256.435388-1.394782 256.730282-2.048331C256.985326-2.598269 257.26428-3.698144 257.26428-4.12853C257.26428-4.630647 257.025177-4.710348 256.905625-4.710348C256.738253-4.710348 256.515089-4.550946 256.515089-4.327783C256.515089-4.216201 256.57088-4.160411 256.618701-4.11259C256.778103-3.945218 256.833894-3.722055 256.833894-3.506861C256.833894-3.196027 256.58682-2.383076 256.451329-2.064271C256.275986-1.657795 256.020942-1.338991 255.630407-1.338991C255.064529-1.338991 255.064529-1.880959 255.064529-2.00848C255.064529-2.223673 255.088439-2.335255 255.207991-2.805492C255.271752-3.076475 255.343483-3.339489 255.407244-3.610473L255.518825-4.056799C255.550706-4.168381 255.598527-4.375604 255.598527-4.399514C255.598527-4.550946 255.486945-4.630647 255.359423-4.630647C255.10438-4.630647 255.040619-4.383574 255.024678-4.311843L254.594292-2.574358Z"/>
<path d="M260.737935-2.940971C260.737935-3.634371 260.510786-4.148443 260.020625-4.148443C259.638059-4.148443 259.446776-3.837609 259.446776-3.574595S259.626104-2.988792 260.03258-2.988792C260.187997-2.988792 260.319504-3.036613 260.4271-3.144209C260.451011-3.16812 260.462966-3.16812 260.474921-3.16812C260.498831-3.16812 260.498831-3.000747 260.498831-2.940971C260.498831-2.546451 260.4271-1.769365 259.733701-.992279C259.602194-.848817 259.602194-.824907 259.602194-.800996C259.602194-.74122 259.66197-.681445 259.721745-.681445C259.817387-.681445 260.737935-1.566127 260.737935-2.940971Z"/>
<path d="M266.209242-11.285679H264.738756V-2.988792H265.659304V-10.400996H265.671259C265.778856-10.161893 266.400524-8.870735 266.639628-8.392528L269.28172-2.988792H270.752206V-11.285679H269.831658V-3.873474H269.819702C269.712106-4.112578 269.090437-5.403736 268.851334-5.881943L266.209242-11.285679Z"/>
<path d="M277.510887-6.766625V-7.483935H273.960202V-10.520548H275.502419C275.645881-10.520548 275.789343-10.508593 275.932805-10.508593H278.001049V-11.261768H272.932058V-2.988792H273.960202V-6.766625H277.510887Z"/>
<path d="M283.011778-10.484682H284.063833C284.207295-10.484682 284.350757-10.472727 284.494219-10.472727H286.060346V-11.225903H278.923111V-10.472727H280.501193C280.644655-10.472727 280.788117-10.484682 280.931579-10.484682H281.983634V-2.988792H283.011778V-10.484682Z"/>
<path d="M290.457635-3.331519C290.457635-4.11259 289.899727-4.710348 289.070835-4.710348C287.939079-4.710348 286.839204-3.610473 286.839204-2.494657C286.839204-1.681706 287.413052-1.115828 288.226003-1.115828C289.365729-1.115828 290.457635-2.231644 290.457635-3.331519ZM288.233974-1.338991C287.95502-1.338991 287.484783-1.482453 287.484783-2.215703C287.484783-2.542478 287.636215-3.40325 288.018781-3.897397C288.409316-4.399514 288.847672-4.487185 289.062865-4.487185C289.38964-4.487185 289.812056-4.287932 289.812056-3.618443C289.812056-3.299639 289.668594-2.542478 289.365729-2.064271C289.070835-1.609975 288.632479-1.338991 288.233974-1.338991Z"/>
<path d="M297.956538-6.396015H299.654172C299.8335-6.396015 300.084558-6.396015 300.084558-6.635118S299.8335-6.874222 299.654172-6.874222H297.956538V-8.583811C297.956538-8.787049 297.956538-9.002242 297.717435-9.002242S297.478332-8.787049 297.478332-8.583811V-6.874222H295.780698C295.60137-6.874222 295.350312-6.874222 295.350312-6.635118S295.60137-6.396015 295.780698-6.396015H297.478332V-4.698381C297.478332-4.507098 297.478332-4.27995 297.717435-4.27995S297.956538-4.519054 297.956538-4.698381V-6.396015ZM301.040972-9.707597C301.040972-9.92279 301.040972-10.137983 300.801868-10.137983S300.562765-9.92279 300.562765-9.707597V-5.379826C300.562765-3.58655 298.614073-3.203985 297.717435-3.203985C297.179452-3.203985 296.426277-3.311582 295.792653-3.718057C294.872105-4.303861 294.872105-5.068991 294.872105-5.391781V-9.707597C294.872105-9.92279 294.872105-10.137983 294.633002-10.137983S294.393898-9.92279 294.393898-9.707597V-5.332005C294.393898-3.514819 296.223039-2.725778 297.717435-2.725778C299.271607-2.725778 301.040972-3.56264 301.040972-5.32005V-9.707597Z"/>
<path d="M311.763415-9.827148C312.169891-10.472727 312.540501-10.759651 313.150215-10.807472C313.269766-10.819427 313.365408-10.819427 313.365408-11.03462C313.365408-11.082441 313.341497-11.154172 313.233901-11.154172C313.018708-11.154172 312.504636-11.130262 312.289443-11.130262C311.942743-11.130262 311.584088-11.154172 311.249343-11.154172C311.153702-11.154172 311.03415-11.154172 311.03415-10.927024C311.03415-10.819427 311.141746-10.807472 311.189567-10.807472C311.631908-10.771606 311.679729-10.556413 311.679729-10.412951C311.679729-10.233624 311.512357-9.958655 311.500402-9.9467L307.746479-3.993026L306.909617-10.436862C306.909617-10.783562 307.531286-10.807472 307.662793-10.807472C307.84212-10.807472 307.949717-10.807472 307.949717-11.03462C307.949717-11.154172 307.81821-11.154172 307.782344-11.154172C307.579106-11.154172 307.340003-11.130262 307.136765-11.130262H306.467276C305.594548-11.130262 305.235893-11.154172 305.223938-11.154172C305.152207-11.154172 305.008745-11.154172 305.008745-10.938979C305.008745-10.807472 305.092431-10.807472 305.283714-10.807472C305.893428-10.807472 305.929293-10.699875 305.965159-10.400996L306.921572-3.024658C306.957438-2.773599 306.957438-2.737733 307.12481-2.737733C307.268272-2.737733 307.328048-2.773599 307.4476-2.964882L311.763415-9.827148Z"/>
<path d="M315.060991-3.610473C315.060991-4.279962 314.758126-4.710348 313.921265-4.710348C313.132223-4.710348 312.773568-4.1365 312.677927-3.945218H312.669957V-4.710348L311.514291-4.622677V-4.359663C312.056258-4.359663 312.120019-4.303873 312.120019-3.913337V-1.817198C312.120019-1.458543 312.024378-1.458543 311.514291-1.458543V-1.195529C311.857006-1.219439 312.20769-1.219439 312.422883-1.219439C312.654017-1.219439 312.988761-1.219439 313.331476-1.195529V-1.458543C312.821389-1.458543 312.725748-1.458543 312.725748-1.817198V-3.259788C312.725748-4.09665 313.363357-4.487185 313.849534-4.487185S314.455262-4.14447 314.455262-3.642353V-1.817198C314.455262-1.458543 314.359621-1.458543 313.849534-1.458543V-1.195529C314.192248-1.219439 314.542933-1.219439 314.758126-1.219439C314.98926-1.219439 315.324004-1.219439 315.666719-1.195529V-1.458543C315.156632-1.458543 315.060991-1.458543 315.060991-1.817198V-3.610473Z"/>
<path d="M319.18382-3.012715C319.359162-3.012715 319.406983-3.012715 319.406983-3.196027C319.406983-3.905367 319.016448-4.750199 317.892662-4.750199C316.904368-4.750199 316.131267-3.929277 316.131267-2.940984C316.131267-1.912839 316.992039-1.115828 317.996273-1.115828C319.008478-1.115828 319.406983-1.96863 319.406983-2.151942C319.406983-2.183823 319.383073-2.263524 319.279461-2.263524C319.19179-2.263524 319.17585-2.207733 319.15991-2.159913C318.872986-1.386812 318.187556-1.362901 318.044094-1.362901C317.685439-1.362901 317.318814-1.530274 317.07971-1.896899S316.840607-2.773611 316.840607-3.012715H319.18382ZM316.848577-3.219937C316.920308-4.335753 317.597768-4.527036 317.892662-4.527036C318.825165-4.527036 318.857045-3.40325 318.865016-3.219937H316.848577Z"/>
<path d="M324.916156-3.825666C324.987887-4.008979 325.123379-4.359663 325.593615-4.367634V-4.630647C325.330602-4.606737 325.314661-4.606737 324.971947-4.606737C324.716903-4.606737 324.50171-4.606737 324.246666-4.630647V-4.367634C324.597351-4.351693 324.685023-4.14447 324.685023-4.001008C324.685023-3.905367 324.661112-3.857546 324.645172-3.801756L323.888011-1.817198L323.06709-3.993038C323.027239-4.09665 323.027239-4.12056 323.027239-4.152441C323.027239-4.359663 323.282283-4.367634 323.473565-4.367634V-4.630647C323.162731-4.606737 322.740315-4.606737 322.660614-4.606737C322.485272-4.606737 322.158497-4.606737 321.919394-4.630647V-4.367634C322.40557-4.367634 322.421511-4.327783 322.572943-3.905367L321.839693-1.936749L321.050651-4.001008C321.042681-4.032889 321.010801-4.12056 321.010801-4.152441C321.010801-4.367634 321.313665-4.367634 321.457127-4.367634V-4.630647C321.114412-4.606737 320.755757-4.606737 320.604325-4.606737C320.460863-4.606737 320.054387-4.606737 319.823254-4.630647V-4.367634C320.22176-4.367634 320.301461-4.335753 320.389132-4.11259L321.457127-1.307111C321.504948-1.187559 321.528858-1.115828 321.65638-1.115828C321.791872-1.115828 321.823752-1.203499 321.863603-1.307111L322.708435-3.546712L323.553267-1.307111C323.593117-1.203499 323.624998-1.115828 323.76049-1.115828C323.888011-1.115828 323.919892-1.195529 323.951772-1.2832L324.916156-3.825666Z"/>
<path d="M329.759029-5.965629C329.759029-6.874222 329.639478-8.356663 328.969988-9.743462C328.264633-11.178082 327.28431-11.955168 327.152803-11.955168C327.104982-11.955168 327.045206-11.931258 327.045206-11.859527C327.045206-11.823661 327.045206-11.799751 327.248444-11.596513C328.443961-10.389041 329.11345-8.416438 329.11345-5.977584C329.11345-3.658281 328.551557-1.661768 327.164758-.251059C327.045206-.143462 327.045206-.119552 327.045206-.083686C327.045206-.011955 327.104982 .011955 327.152803 .011955C327.30822 .011955 328.288544-.848817 328.874347-2.020423C329.48406-3.239851 329.759029-4.531009 329.759029-5.965629Z"/>
</g>
</svg>
</center>
<p>Such NFT is useful to be able to uniquely <em>identify</em> the current script output.<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn4" id="fnref4"><sup>4</sup></a> However, the presence of such an NFT does not change the narrative above in any meaningful way. While it is true that <em>if</em> the NFT is minted in <code>Tx<sub>0</sub></code> (and <code>f</code> checks for the presence of the NFT as part of its checks), then <code>d<sub>0</sub></code> must indeed be the base case, but this is once again not visible from <code>Tx<sub>1</sub></code>.</p>
<p>Conversely, the presence of this kind of NFT in an input does not mean that that input spends a script output to <code>f</code>; this will only be true <em>once</em> the NFT is locked in the script (at which point <code>f</code> will validate that it will <em>remain</em> locked in the script). The base case <em>should</em> be that the NFT is locked in the contract immediately when it’s minted, but verifying this again involves checking the chain history.</p>
<h3 id="parameterized-nfts">Parameterized NFTs</h3>
<p>The NFT minting policy <code>NFT<sub>o</sub></code> simply checks that the enclosing transaction spends output <code>o</code>. Since outputs can only be spent once, this guarantees that the resulting token is indeed a singleton. If we additionally want the guarantee that the NFT is locked in some script <code>f</code> immediately upon minting, we can define an NFT minting policy which is parameterized by an output and a script it’s intended for: <code>NFT<sub>o, f</sub></code> would verify that the enclosing transaction spends <code>o</code>, <em>and</em> that the resulting token is locked in a script output to <code>f</code>.</p>
<p>Unfortunately, this leads to precisely the kind of mutual dependency between <code>f</code> and <code>NFT<sub>o, f</sub></code> that we discussed above: <code>f</code> needs to know the hash of <code>NFT<sub>o, f</sub></code> so that it can verify that the NFT <em>remains</em> locked in the script, and <code>NFT<sub>o, f</sub></code> needs to know the hash of <code>f</code> so that it can verify the NFT is locked in the script when it is first minted.</p>
<p>We must therefore store the hash of the NFT in the datum associated with <code>f</code>, but now <code>f</code> has no way of verifying that datum. It can verify that the hash never changes, but it has no way of verifying that the hash is correct. It’s another example of the base case problem discussed above, but in a sense even more severe: even <em>if</em> the script could tell <em>when</em> the base case should apply, it would <em>still</em> not know what the base case should <em>be</em>.</p>
<p>Fortunately, <em>if</em> we use an NFT to identify script outputs, we can solve the base case problem once and for all, by additionally parameterizing the NFT with the expected initial state. <code>NFT<sub>o, f, d</sub></code> will allow minting if the enclosing transaction</p>
<ul>
<li>spends <code>o</code></li>
<li>locks the resulting token in an output to script <code>f</code></li>
<li>the associated datum<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn5" id="fnref5"><sup>5</sup></a> is <code>(NFT<sub>o, f, d</sub>, d)</code></li>
</ul>
<p>This means that if we interact with a script through <code>NFT<sub>o, f, d</sub></code>, the NFT guarantees the inductive base case. Put another way: <em>we have encoded the base case right in the hash of the NFT</em>.<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn6" id="fnref6"><sup>6</sup></a></p>
<h2 id="stateful-minting-policies">Stateful minting policies</h2>
<p>A minting policy <code>π</code> is a script that determines whether a particular token is allowed to be minted or burned. Minting policies are stateless: they do not have associated datums (indeed, there are no outputs to a minting policy), nor can we somehow encode state in the hash of the minting policy itself, because we have no way of “evolving” that hash.</p>
<p>Many minting policies however do need some state. When this happens, the minting policy needs to be paired with a stateful script <code>f</code>. The minting policy <code>π</code> could then check the transaction for an input that spends a script output <code>(f, d)</code>, and then use the associated datum <code>d</code> as its state. This is unproblematic as long as the minting policy only needs to read the state, but does not need to <em>modify</em> it. In this case, <code>f</code> is still responsible for checking the state in the continuation output, as normal.</p>
<p>If however the minting policy <em>does</em> need to change the state, we have a problem.</p>
<ol type="1">
<li><p>We could attempt to set things up such that the minting policy <code>π</code> informs the regular script <code>f</code> that <code>π</code> will take over duties for verifying the continuation output, by having the minting policy verify that the redeemer<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn7" id="fnref7"><sup>7</sup></a> for <code>f</code> tells it not to check the continuation output. This is however not sound: a malicious user could create a transaction that <em>doesn’t</em> mint but <em>does</em> use that special redeemer value, and would then be able to change the state of <code>f</code> at will.</p></li>
<li><p><code>f</code> could check the transaction to see if it it burns or mints any <code>π</code> tokens, and delegate verification of the output datum to <code>π</code> when this is the case. This is sound but results in the same kind of mutual dependency problem that we already encountered above: <code>π</code> now needs the hash of <code>f</code> (to recognize outputs to <code>f</code>), and <code>f</code> needs the hash of <code>π</code> (to check whether or not any <code>π</code> tokens are minted).</p></li>
<li><p>Most stateful scripts use some state token <code>NFT<sub>o</sub></code>. It is tempting to think that we could break the cycle by having the minting policy <code>π</code> check for the input with <code>NFT<sub>o</sub></code> instead of the input spending a script output to <code>f</code>: now <code>π</code> no longer needs to know the hash of <code>f</code>. Unfortunately, as we saw, we are <em>only</em> guaranteed that the presence of the NFT implies that the input spends an output to <code>f</code> if we verify through other means that the NFT is locked in the script <code>f</code> immediately upon minting.<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn8" id="fnref8"><sup>8</sup></a></p></li>
<li><p>We must therefore store the hash of the minting policy in the datum of <code>f</code>. We can use the parameterized NFT we discussed above, and use <code>NFT<sub>o, f, (π<sub>f</sub>, d)</sub></code> to ensure that the initial value of the minting policy is correct<a class="footnote-ref" href="https://well-typed.com/blog/rss2.xml#fn9" id="fnref9"><sup>9</sup></a> (<code>f</code> itself must ensure that the hash never changes).</p></li>
</ol>
<h2 id="variable-base-case">Variable base case</h2>
<p>When we discussed inductive reasoning, we saw that scripts cannot verify their own base case. We will now consider what happens when the base case for one script is another script:</p>
<center>
<svg height="15.932079pt" version="1.1" viewBox="89.459388 -15.920124 208.572308 15.932079" width="208.572308pt">
<title>   (g, d&amp;39;, V&amp;39;) \xrightarrow{\mspace{30mu}\mathit{Tx&amp;39;}\mspace{30mu}}   (f, d, V) \xrightarrow{\mspace{30mu}\mathit{Tx}\mspace{30mu}}   \ldots </title>
<defs/>
<g>
<path d="M93.344818-.083686C93.344818-.119552 93.344818-.143462 93.14158-.3467C91.946063-1.554172 91.276574-3.526775 91.276574-5.965629C91.276574-8.284932 91.838467-10.281445 93.225266-11.692154C93.344818-11.799751 93.344818-11.823661 93.344818-11.859527C93.344818-11.931258 93.285042-11.955168 93.237221-11.955168C93.081804-11.955168 92.10148-11.094396 91.515677-9.92279C90.905963-8.715318 90.630995-7.436115 90.630995-5.965629C90.630995-4.901619 90.798367-3.478954 91.420036-2.199751C92.125391-.765131 93.105714 .011955 93.237221 .011955C93.285042 .011955 93.344818-.011955 93.344818-.083686Z"/>
<path d="M98.052561-4.507098C98.00474-4.315816 97.98083-4.267995 97.825413-4.088667C97.335251-3.455044 96.833134-3.227895 96.462523-3.227895C96.068003-3.227895 95.697393-3.53873 95.697393-4.363636C95.697393-4.99726 96.056048-6.336239 96.319061-6.874222C96.665761-7.543711 97.203744-8.021918 97.705861-8.021918C98.494902-8.021918 98.650319-7.041594 98.650319-6.969863L98.614454-6.802491L98.052561-4.507098ZM98.793781-7.47198C98.638364-7.81868 98.303619-8.261021 97.705861-8.261021C96.402748-8.261021 94.920307-6.623163 94.920307-4.841843C94.920307-3.598506 95.673482-2.988792 96.438613-2.988792C97.072237-2.988792 97.63413-3.490909 97.849323-3.730012L97.586309-2.654047C97.418937-1.996513 97.347206-1.697634 96.91682-1.279203C96.426658-.789041 95.972361-.789041 95.709348-.789041C95.350693-.789041 95.051814-.812951 94.752934-.908593C95.1355-1.016189 95.231141-1.350934 95.231141-1.482441C95.231141-1.673724 95.087679-1.865006 94.824665-1.865006C94.537741-1.865006 94.226907-1.625903 94.226907-1.231382C94.226907-.74122 94.717069-.549938 95.733258-.549938C97.275475-.549938 98.076471-1.542217 98.231888-2.187796L99.558912-7.543711C99.594777-7.687173 99.594777-7.711083 99.594777-7.734994C99.594777-7.902366 99.463271-8.033873 99.283943-8.033873C98.997019-8.033873 98.829647-7.79477 98.793781-7.47198Z"/>
<path d="M102.377228-2.940971C102.377228-3.634371 102.15008-4.148443 101.659918-4.148443C101.277353-4.148443 101.08607-3.837609 101.08607-3.574595S101.265397-2.988792 101.671873-2.988792C101.82729-2.988792 101.958797-3.036613 102.066394-3.144209C102.090304-3.16812 102.102259-3.16812 102.114214-3.16812C102.138125-3.16812 102.138125-3.000747 102.138125-2.940971C102.138125-2.546451 102.066394-1.769365 101.372994-.992279C101.241487-.848817 101.241487-.824907 101.241487-.800996C101.241487-.74122 101.301263-.681445 101.361039-.681445C101.45668-.681445 102.377228-1.566127 102.377228-2.940971Z"/>
<path d="M111.303579-10.9868C111.315534-11.03462 111.339444-11.106351 111.339444-11.166127C111.339444-11.285679 111.219892-11.285679 111.195982-11.285679C111.184027-11.285679 110.598224-11.237858 110.538448-11.225903C110.33521-11.213948 110.155882-11.190037 109.940689-11.178082C109.64181-11.154172 109.558124-11.142217 109.558124-10.927024C109.558124-10.807472 109.653765-10.807472 109.821138-10.807472C110.406941-10.807472 110.418896-10.699875 110.418896-10.580324C110.418896-10.508593 110.394986-10.412951 110.383031-10.377086L109.653765-7.47198C109.522259-7.782814 109.199469-8.261021 108.5778-8.261021C107.226866-8.261021 105.768336-6.515567 105.768336-4.746202C105.768336-3.56264 106.461736-2.86924 107.274687-2.86924C107.932221-2.86924 108.494114-3.383313 108.828859-3.777833C108.948411-3.072478 109.510303-2.86924 109.868958-2.86924S110.514538-3.084433 110.729731-3.514819C110.921013-3.921295 111.088386-4.65056 111.088386-4.698381C111.088386-4.758157 111.040565-4.805978 110.968834-4.805978C110.861237-4.805978 110.849282-4.746202 110.801462-4.566874C110.622134-3.861519 110.394986-3.108344 109.904824-3.108344C109.558124-3.108344 109.534214-3.419178 109.534214-3.658281C109.534214-3.706102 109.534214-3.957161 109.6179-4.291905L111.303579-10.9868ZM108.888635-4.411457C108.828859-4.208219 108.828859-4.184309 108.661486-3.957161C108.398473-3.622416 107.872445-3.108344 107.310552-3.108344C106.820391-3.108344 106.545422-3.550685 106.545422-4.25604C106.545422-4.913574 106.916032-6.252553 107.14318-6.75467C107.549656-7.591532 108.111549-8.021918 108.5778-8.021918C109.366841-8.021918 109.522259-7.041594 109.522259-6.945953C109.522259-6.933998 109.486393-6.77858 109.474438-6.75467L108.888635-4.411457Z"/>
<path d="M113.484902-11.702811C113.524752-11.806423 113.556633-11.862213 113.556633-11.941914C113.556633-12.204928 113.317529-12.380271 113.094366-12.380271C112.775562-12.380271 112.687891-12.101317 112.65601-11.989735L111.643806-8.554617C111.611925-8.458975 111.611925-8.435065 111.611925-8.427095C111.611925-8.355364 111.659746-8.339424 111.739447-8.315513C111.882909-8.251753 111.898849-8.251753 111.91479-8.251753C111.9387-8.251753 111.986521-8.251753 112.042311-8.387244L113.484902-11.702811Z"/>
<path d="M116.499156-2.940971C116.499156-3.634371 116.272007-4.148443 115.781845-4.148443C115.39928-4.148443 115.207997-3.837609 115.207997-3.574595S115.387325-2.988792 115.793801-2.988792C115.949218-2.988792 116.080725-3.036613 116.188321-3.144209C116.212232-3.16812 116.224187-3.16812 116.236142-3.16812C116.260052-3.16812 116.260052-3.000747 116.260052-2.940971C116.260052-2.546451 116.188321-1.769365 115.494921-.992279C115.363415-.848817 115.363415-.824907 115.363415-.800996C115.363415-.74122 115.42319-.681445 115.482966-.681445C115.578608-.681445 116.499156-1.566127 116.499156-2.940971Z"/>
<path d="M126.812306-9.827148C127.218781-10.472727 127.589392-10.759651 128.199105-10.807472C128.318657-10.819427 128.414298-10.819427 128.414298-11.03462C128.414298-11.082441 128.390388-11.154172 128.282791-11.154172C128.067598-11.154172 127.553526-11.130262 127.338333-11.130262C126.991633-11.130262 126.632978-11.154172 126.298233-11.154172C126.202592-11.154172 126.08304-11.154172 126.08304-10.927024C126.08304-10.819427 126.190637-10.807472 126.238458-10.807472C126.680799-10.771606 126.72862-10.556413 126.72862-10.412951C126.72862-10.233624 126.561247-9.958655 126.549292-9.9467L122.795369-3.993026L121.958507-10.436862C121.958507-10.783562 122.580176-10.807472 122.711683-10.807472C122.891011-10.807472 122.998607-10.807472 122.998607-11.03462C122.998607-11.154172 122.8671-11.154172 122.831235-11.154172C122.627997-11.154172 122.388893-11.130262 122.185656-11.130262H121.516166C120.643439-11.130262 120.284784-11.154172 120.272829-11.154172C120.201098-11.154172 120.057636-11.154172 120.057636-10.938979C120.057636-10.807472 120.141322-10.807472 120.332605-10.807472C120.942318-10.807472 120.978184-10.699875 121.014049-10.400996L121.970463-3.024658C122.006328-2.773599 122.006328-2.737733 122.1737-2.737733C122.317162-2.737733 122.376938-2.773599 122.49649-2.964882L126.812306-9.827148Z"/>
<path d="M130.949815-11.702811C130.989666-11.806423 131.021546-11.862213 131.021546-11.941914C131.021546-12.204928 130.782443-12.380271 130.55928-12.380271C130.240475-12.380271 130.152804-12.101317 130.120924-11.989735L129.108719-8.554617C129.076839-8.458975 129.076839-8.435065 129.076839-8.427095C129.076839-8.355364 129.12466-8.339424 129.204361-8.315513C129.347823-8.251753 129.363763-8.251753 129.379703-8.251753C129.403614-8.251753 129.451434-8.251753 129.507225-8.387244L130.949815-11.702811Z"/>
<path d="M135.004169-5.965629C135.004169-6.874222 134.884617-8.356663 134.215128-9.743462C133.509773-11.178082 132.529449-11.955168 132.397942-11.955168C132.350121-11.955168 132.290346-11.931258 132.290346-11.859527C132.290346-11.823661 132.290346-11.799751 132.493583-11.596513C133.6891-10.389041 134.35859-8.416438 134.35859-5.977584C134.35859-3.658281 133.796697-1.661768 132.409897-.251059C132.290346-.143462 132.290346-.119552 132.290346-.083686C132.290346-.011955 132.350121 .011955 132.397942 .011955C132.553359 .011955 133.533683-.848817 134.119486-2.020423C134.7292-3.239851 135.004169-4.531009 135.004169-5.965629Z"/>
<path d="M160.79825-14.603726C160.862011-14.8508 160.917802-14.86674 160.973592-14.87471C161.029383-14.89065 161.276457-14.89065 161.427889-14.89065C162.20896-14.89065 162.519794-14.8508 162.519794-14.276952C162.519794-14.197251 162.511824-14.14146 162.503854-14.069729L162.440093-13.551671V-13.511821C162.440093-13.503851 162.448063-13.47994 162.440093-13.47197C162.432123-13.45603 162.416183-13.344449 162.583555-13.344449C162.719047-13.344449 162.727017-13.400239 162.742957-13.511821L162.96612-14.930501L162.974091-15.042082C162.974091-15.153664 162.870479-15.153664 162.750927-15.153664H158.407216C158.231874-15.153664 158.207964-15.153664 158.160143-15.010202L157.673966-13.591522C157.634115-13.487911 157.634115-13.47197 157.634115-13.45603C157.634115-13.344449 157.745697-13.344449 157.785548-13.344449C157.817428-13.344449 157.865249-13.344449 157.897129-13.368359C157.92104-13.384299 157.92104-13.400239 157.992771-13.615432C158.399246-14.763129 158.63835-14.89065 159.706345-14.89065C159.865747-14.89065 160.065-14.89065 160.184551-14.87471C160.176581-14.763129 160.176581-14.739218 160.144701-14.619666L159.100616-10.435358C159.020915-10.116553 158.973094-10.028882 158.247814-10.028882H158.144203C158.000741-10.028882 157.905099-10.028882 157.905099-9.87745C157.905099-9.845569 157.92104-9.765868 158.040591-9.765868C158.343455-9.765868 158.65429-9.789779 158.965124-9.789779H159.546942C159.865747-9.789779 160.200492-9.765868 160.511326-9.765868C160.567117-9.765868 160.678698-9.765868 160.678698-9.9173C160.678698-10.028882 160.583057-10.028882 160.455535-10.028882H160.351924C160.216432-10.028882 160.08891-10.036852 159.953418-10.044822C159.762135-10.068732 159.706345-10.084673 159.706345-10.188284C159.706345-10.236105 159.730255-10.315806 159.730255-10.323776L160.79825-14.603726Z"/>
<path d="M164.289612-10.849803C164.217881-10.58679 164.050509-9.90933 163.548392-9.90933C163.373049-9.90933 163.237558-9.981061 163.189737-10.020912C163.349139-10.084673 163.468691-10.228135 163.468691-10.403477C163.468691-10.63461 163.277408-10.674461 163.189737-10.674461C162.958604-10.674461 162.783261-10.475208 162.783261-10.236105C162.783261-9.853539 163.189737-9.686167 163.540422-9.686167C163.899077-9.686167 164.162091-9.90933 164.353373-10.188284C164.488865-9.89339 164.791729-9.686167 165.174295-9.686167C166.003186-9.686167 166.481393-10.674461 166.481393-10.913564C166.481393-11.009206 166.361841-11.009206 166.329961-11.009206C166.22635-11.009206 166.194469-10.985295 166.170559-10.905594C165.915515-10.084673 165.421368-9.90933 165.190235-9.90933C164.943162-9.90933 164.775789-10.084673 164.775789-10.411447C164.775789-10.58679 164.87143-10.969355 164.943162-11.240339C165.022863-11.591024 165.110534-11.933739 165.198205-12.276454C165.325727-12.7706 165.596711-13.057525 165.899575-13.057525C166.106798-13.057525 166.24229-12.953913 166.25823-12.945943C166.186499-12.922033 165.979276-12.794511 165.979276-12.563378C165.979276-12.340214 166.154619-12.292394 166.25823-12.292394C166.409662-12.292394 166.656736-12.403975 166.656736-12.73075C166.656736-13.169106 166.170559-13.280688 165.907545-13.280688C165.58077-13.280688 165.309787-13.097375 165.094594-12.778571C164.998952-12.969853 164.759849-13.280688 164.273672-13.280688C163.43681-13.280688 162.966574-12.276454 162.966574-12.061261C162.966574-11.957649 163.070185-11.957649 163.118006-11.957649C163.221617-11.957649 163.245528-11.981559 163.269438-12.061261C163.516511-12.850302 163.994718-13.057525 164.257732-13.057525S164.672178-12.850302 164.672178-12.555407C164.672178-12.396005 164.632327-12.228633 164.544656-11.885918L164.289612-10.849803Z"/>
<path d="M169.11671-15.388119C169.158553-15.477782 169.170508-15.543536 169.170508-15.579401C169.170508-15.764706 169.003136-15.920124 168.805876-15.920124C168.566772-15.920124 168.495041-15.710908 168.471131-15.627222L167.634269-13.068816C167.622314-13.03295 167.604381-12.98513 167.604381-12.961219C167.604381-12.8596 167.843485-12.81178 167.849462-12.81178C167.90326-12.81178 167.927171-12.865578 167.951081-12.913399L169.11671-15.388119Z"/>
<path d="M147.384422-5.738481C147.58766-5.738481 147.802853-5.738481 147.802853-5.977584S147.58766-6.216687 147.384422-6.216687H140.916676C140.713438-6.216687 140.498245-6.216687 140.498245-5.977584S140.713438-5.738481 140.916676-5.738481H147.384422Z"/>
<path d="M152.388773-5.738481C152.592011-5.738481 152.807204-5.738481 152.807204-5.977584S152.592011-6.216687 152.388773-6.216687H145.921027C145.717789-6.216687 145.502596-6.216687 145.502596-5.977584S145.717789-5.738481 145.921027-5.738481H152.388773Z"/>
<path d="M159.030599-5.738481C159.233837-5.738481 159.44903-5.738481 159.44903-5.977584S159.233837-6.216687 159.030599-6.216687H152.562853C152.359615-6.216687 152.144422-6.216687 152.144422-5.977584S152.359615-5.738481 152.562853-5.738481H159.030599Z"/>
<path d="M165.672425-5.738481C165.875663-5.738481 166.090856-5.738481 166.090856-5.977584S165.875663-6.216687 165.672425-6.216687H159.204679C159.001441-6.216687 158.786248-6.216687 158.786248-5.977584S159.001441-5.738481 159.204679-5.738481H165.672425Z"/>
<path d="M172.314251-5.738481C172.517489-5.738481 172.732682-5.738481 172.732682-5.977584S172.517489-6.216687 172.314251-6.216687H165.846505C165.643267-6.216687 165.428074-6.216687 165.428074-5.977584S165.643267-5.738481 165.846505-5.738481H172.314251Z"/>
<path d="M178.956077-5.738481C179.159315-5.738481 179.374508-5.738481 179.374508-5.977584S179.159315-6.216687 178.956077-6.216687H172.488331C172.285093-6.216687 172.0699-6.216687 172.0699-5.977584S172.285093-5.738481 172.488331-5.738481H178.956077Z"/>
<path d="M186.05243-5.738481C185.394896-5.236364 185.072106-4.746202 184.976465-4.590785C184.438482-3.765878 184.342841-3.012702 184.342841-3.000747C184.342841-2.857285 184.486303-2.857285 184.581944-2.857285C184.785182-2.857285 184.797137-2.881196 184.844958-3.096389C185.119927-4.267995 185.825282-5.272229 187.176216-5.822167C187.319678-5.869988 187.355543-5.893898 187.355543-5.977584S187.283812-6.097136 187.259902-6.109091C186.733874-6.312329 185.287299-6.910087 184.833003-8.918555C184.797137-9.062017 184.785182-9.097883 184.581944-9.097883C184.486303-9.097883 184.342841-9.097883 184.342841-8.954421C184.342841-8.930511 184.450437-8.177335 184.952554-7.376339C185.191658-7.017684 185.538358-6.599253 186.05243-6.216687H177.16974C176.954547-6.216687 176.739354-6.216687 176.739354-5.977584S176.954547-5.738481 177.16974-5.738481H186.05243Z"/>
<path d="M195.243277-.083686C195.243277-.119552 195.243277-.143462 195.040039-.3467C193.844522-1.554172 193.175033-3.526775 193.175033-5.965629C193.175033-8.284932 193.736926-10.281445 195.123725-11.692154C195.243277-11.799751 195.243277-11.823661 195.243277-11.859527C195.243277-11.931258 195.183501-11.955168 195.135681-11.955168C194.980263-11.955168 193.99994-11.094396 193.414136-9.92279C192.804423-8.715318 192.529454-7.436115 192.529454-5.965629C192.529454-4.901619 192.696826-3.478954 193.318495-2.199751C194.02385-.765131 195.004174 .011955 195.135681 .011955C195.183501 .011955 195.243277-.011955 195.243277-.083686Z"/>
<path d="M201.242178-7.79477C201.481282-7.79477 201.576923-7.79477 201.576923-8.021918C201.576923-8.141469 201.481282-8.141469 201.266089-8.141469H200.29772C200.524868-9.372852 200.692241-10.221669 200.787882-10.604234C200.859613-10.891158 201.110671-11.166127 201.421506-11.166127C201.672564-11.166127 201.923623-11.058531 202.043175-10.950934C201.576923-10.903113 201.433461-10.556413 201.433461-10.353176C201.433461-10.114072 201.612788-9.97061 201.839937-9.97061C202.07904-9.97061 202.437695-10.173848 202.437695-10.628144C202.437695-11.130262 201.935578-11.40523 201.409551-11.40523C200.895478-11.40523 200.393361-11.022665 200.154258-10.556413C199.939065-10.137983 199.819513-9.707597 199.544544-8.141469H198.743548C198.5164-8.141469 198.396848-8.141469 198.396848-7.926276C198.396848-7.79477 198.468579-7.79477 198.707683-7.79477H199.472813C199.25762-6.682939 198.767458-3.981071 198.49249-2.701868C198.289252-1.661768 198.109924-.789041 197.512166-.789041C197.4763-.789041 197.1296-.789041 196.914407-1.016189C197.524121-1.06401 197.524121-1.590037 197.524121-1.601993C197.524121-1.841096 197.344793-1.984558 197.117645-1.984558C196.878542-1.984558 196.519887-1.78132 196.519887-1.327024C196.519887-.812951 197.045914-.549938 197.512166-.549938C198.731593-.549938 199.23371-2.737733 199.365217-3.335492C199.58041-4.25604 200.166213-7.436115 200.225989-7.79477H201.242178Z"/>
<path d="M204.637535-2.940971C204.637535-3.634371 204.410387-4.148443 203.920225-4.148443C203.53766-4.148443 203.346377-3.837609 203.346377-3.574595S203.525705-2.988792 203.93218-2.988792C204.087598-2.988792 204.219105-3.036613 204.326701-3.144209C204.350611-3.16812 204.362567-3.16812 204.374522-3.16812C204.398432-3.16812 204.398432-3.000747 204.398432-2.940971C204.398432-2.546451 204.326701-1.769365 203.633301-.992279C203.501794-.848817 203.501794-.824907 203.501794-.800996C203.501794-.74122 203.56157-.681445 203.621346-.681445C203.716987-.681445 204.637535-1.566127 204.637535-2.940971Z"/>
<path d="M213.563886-10.9868C213.575841-11.03462 213.599752-11.106351 213.599752-11.166127C213.599752-11.285679 213.4802-11.285679 213.45629-11.285679C213.444334-11.285679 212.858531-11.237858 212.798755-11.225903C212.595517-11.213948 212.41619-11.190037 212.200997-11.178082C211.902118-11.154172 211.818431-11.142217 211.818431-10.927024C211.818431-10.807472 211.914073-10.807472 212.081445-10.807472C212.667248-10.807472 212.679204-10.699875 212.679204-10.580324C212.679204-10.508593 212.655293-10.412951 212.643338-10.377086L211.914073-7.47198C211.782566-7.782814 211.459776-8.261021 210.838108-8.261021C209.487174-8.261021 208.028643-6.515567 208.028643-4.746202C208.028643-3.56264 208.722043-2.86924 209.534994-2.86924C210.192529-2.86924 210.754422-3.383313 211.089166-3.777833C211.208718-3.072478 211.770611-2.86924 212.129266-2.86924S212.774845-3.084433 212.990038-3.514819C213.181321-3.921295 213.348693-4.65056 213.348693-4.698381C213.348693-4.758157 213.300872-4.805978 213.229141-4.805978C213.121545-4.805978 213.10959-4.746202 213.061769-4.566874C212.882441-3.861519 212.655293-3.108344 212.165131-3.108344C211.818431-3.108344 211.794521-3.419178 211.794521-3.658281C211.794521-3.706102 211.794521-3.957161 211.878207-4.291905L213.563886-10.9868ZM211.148942-4.411457C211.089166-4.208219 211.089166-4.184309 210.921794-3.957161C210.65878-3.622416 210.132753-3.108344 209.57086-3.108344C209.080698-3.108344 208.805729-3.550685 208.805729-4.25604C208.805729-4.913574 209.176339-6.252553 209.403488-6.75467C209.809963-7.591532 210.371856-8.021918 210.838108-8.021918C211.627149-8.021918 211.782566-7.041594 211.782566-6.945953C211.782566-6.933998 211.7467-6.77858 211.734745-6.75467L211.148942-4.411457Z"/>
<path d="M215.964387-2.940971C215.964387-3.634371 215.737239-4.148443 215.247077-4.148443C214.864512-4.148443 214.673229-3.837609 214.673229-3.574595S214.852557-2.988792 215.259032-2.988792C215.41445-2.988792 215.545956-3.036613 215.653553-3.144209C215.677463-3.16812 215.689418-3.16812 215.701374-3.16812C215.725284-3.16812 215.725284-3.000747 215.725284-2.940971C215.725284-2.546451 215.653553-1.769365 214.960153-.992279C214.828646-.848817 214.828646-.824907 214.828646-.800996C214.828646-.74122 214.888422-.681445 214.948198-.681445C215.043839-.681445 215.964387-1.566127 215.964387-2.940971Z"/>
<path d="M226.277537-9.827148C226.684013-10.472727 227.054623-10.759651 227.664337-10.807472C227.783889-10.819427 227.87953-10.819427 227.87953-11.03462C227.87953-11.082441 227.85562-11.154172 227.748023-11.154172C227.53283-11.154172 227.018758-11.130262 226.803565-11.130262C226.456865-11.130262 226.09821-11.154172 225.763465-11.154172C225.667824-11.154172 225.548272-11.154172 225.548272-10.927024C225.548272-10.819427 225.655869-10.807472 225.703689-10.807472C226.146031-10.771606 226.193851-10.556413 226.193851-10.412951C226.193851-10.233624 226.026479-9.958655 226.014524-9.9467L222.260601-3.993026L221.423739-10.436862C221.423739-10.783562 222.045408-10.807472 222.176915-10.807472C222.356242-10.807472 222.463839-10.807472 222.463839-11.03462C222.463839-11.154172 222.332332-11.154172 222.296466-11.154172C222.093229-11.154172 221.854125-11.130262 221.650887-11.130262H220.981398C220.108671-11.130262 219.750016-11.154172 219.73806-11.154172C219.666329-11.154172 219.522867-11.154172 219.522867-10.938979C219.522867-10.807472 219.606554-10.807472 219.797836-10.807472C220.40755-10.807472 220.443415-10.699875 220.479281-10.400996L221.435694-3.024658C221.47156-2.773599 221.47156-2.737733 221.638932-2.737733C221.782394-2.737733 221.84217-2.773599 221.961722-2.964882L226.277537-9.827148Z"/>
<path d="M231.674325-5.965629C231.674325-6.874222 231.554773-8.356663 230.885284-9.743462C230.179929-11.178082 229.199605-11.955168 229.068098-11.955168C229.020277-11.955168 228.960502-11.931258 228.960502-11.859527C228.960502-11.823661 228.960502-11.799751 229.163739-11.596513C230.359256-10.389041 231.028746-8.416438 231.028746-5.977584C231.028746-3.658281 230.466853-1.661768 229.080053-.251059C228.960502-.143462 228.960502-.119552 228.960502-.083686C228.960502-.011955 229.020277 .011955 229.068098 .011955C229.223515 .011955 230.203839-.848817 230.789642-2.020423C231.399356-3.239851 231.674325-4.531009 231.674325-5.965629Z"/>
<path d="M257.468406-14.603726C257.532167-14.8508 257.587958-14.86674 257.643748-14.87471C257.699539-14.89065 257.946613-14.89065 258.098045-14.89065C258.879116-14.89065 259.18995-14.8508 259.18995-14.276952C259.18995-14.197251 259.18198-14.14146 259.17401-14.069729L259.110249-13.551671V-13.511821C259.110249-13.503851 259.118219-13.47994 259.110249-13.47197C259.102279-13.45603 259.086339-13.344449 259.253711-13.344449C259.389203-13.344449 259.397173-13.400239 259.413113-13.511821L259.636276-14.930501L259.644247-15.042082C259.644247-15.153664 259.540635-15.153664 259.421083-15.153664H255.077372C254.90203-15.153664 254.87812-15.153664 254.830299-15.010202L254.344122-13.591522C254.304271-13.487911 254.304271-13.47197 254.304271-13.45603C254.304271-13.344449 254.415853-13.344449 254.455704-13.344449C254.487584-13.344449 254.535405-13.344449 254.567285-13.368359C254.591195-13.384299 254.591195-13.400239 254.662927-13.615432C255.069402-14.763129 255.308506-14.89065 256.376501-14.89065C256.535903-14.89065 256.735156-14.89065 256.854707-14.87471C256.846737-14.763129 256.846737-14.739218 256.814857-14.619666L255.770772-10.435358C255.691071-10.116553 255.64325-10.028882 254.91797-10.028882H254.814359C254.670897-10.028882 254.575255-10.028882 254.575255-9.87745C254.575255-9.845569 254.591195-9.765868 254.710747-9.765868C255.013611-9.765868 255.324446-9.789779 255.63528-9.789779H256.217098C256.535903-9.789779 256.870648-9.765868 257.181482-9.765868C257.237273-9.765868 257.348854-9.765868 257.348854-9.9173C257.348854-10.028882 257.253213-10.028882 257.125691-10.028882H257.02208C256.886588-10.028882 256.759066-10.036852 256.623574-10.044822C256.432291-10.068732 256.376501-10.084673 256.376501-10.188284C256.376501-10.236105 256.400411-10.315806 256.400411-10.323776L257.468406-14.603726Z"/>
<path d="M260.959768-10.849803C260.888037-10.58679 260.720665-9.90933 260.218548-9.90933C260.043205-9.90933 259.907714-9.981061 259.859893-10.020912C260.019295-10.084673 260.138847-10.228135 260.138847-10.403477C260.138847-10.63461 259.947564-10.674461 259.859893-10.674461C259.62876-10.674461 259.453417-10.475208 259.453417-10.236105C259.453417-9.853539 259.859893-9.686167 260.210578-9.686167C260.569233-9.686167 260.832247-9.90933 261.023529-10.188284C261.159021-9.89339 261.461885-9.686167 261.844451-9.686167C262.673342-9.686167 263.151549-10.674461 263.151549-10.913564C263.151549-11.009206 263.031997-11.009206 263.000117-11.009206C262.896506-11.009206 262.864625-10.985295 262.840715-10.905594C262.585671-10.084673 262.091524-9.90933 261.860391-9.90933C261.613317-9.90933 261.445945-10.084673 261.445945-10.411447C261.445945-10.58679 261.541586-10.969355 261.613317-11.240339C261.693019-11.591024 261.78069-11.933739 261.868361-12.276454C261.995883-12.7706 262.266867-13.057525 262.569731-13.057525C262.776954-13.057525 262.912446-12.953913 262.928386-12.945943C262.856655-12.922033 262.649432-12.794511 262.649432-12.563378C262.649432-12.340214 262.824775-12.292394 262.928386-12.292394C263.079818-12.292394 263.326892-12.403975 263.326892-12.73075C263.326892-13.169106 262.840715-13.280688 262.577701-13.280688C262.250926-13.280688 261.979943-13.097375 261.76475-12.778571C261.669108-12.969853 261.430005-13.280688 260.943828-13.280688C260.106966-13.280688 259.63673-12.276454 259.63673-12.061261C259.63673-11.957649 259.740341-11.957649 259.788162-11.957649C259.891773-11.957649 259.915684-11.981559 259.939594-12.061261C260.186667-12.850302 260.664874-13.057525 260.927888-13.057525S261.342334-12.850302 261.342334-12.555407C261.342334-12.396005 261.302483-12.228633 261.214812-11.885918L260.959768-10.849803Z"/>
<path d="M244.054578-5.738481C244.257816-5.738481 244.473009-5.738481 244.473009-5.977584S244.257816-6.216687 244.054578-6.216687H237.586832C237.383594-6.216687 237.168401-6.216687 237.168401-5.977584S237.383594-5.738481 237.586832-5.738481H244.054578Z"/>
<path d="M247.716733-5.738481C247.919971-5.738481 248.135164-5.738481 248.135164-5.977584S247.919971-6.216687 247.716733-6.216687H241.248987C241.045749-6.216687 240.830556-6.216687 240.830556-5.977584S241.045749-5.738481 241.248987-5.738481H247.716733Z"/>
<path d="M254.358559-5.738481C254.561797-5.738481 254.77699-5.738481 254.77699-5.977584S254.561797-6.216687 254.358559-6.216687H247.890813C247.687575-6.216687 247.472382-6.216687 247.472382-5.977584S247.687575-5.738481 247.890813-5.738481H254.358559Z"/>
<path d="M261.000385-5.738481C261.203623-5.738481 261.418816-5.738481 261.418816-5.977584S261.203623-6.216687 261.000385-6.216687H254.532639C254.329401-6.216687 254.114208-6.216687 254.114208-5.977584S254.329401-5.738481 254.532639-5.738481H261.000385Z"/>
<path d="M267.642211-5.738481C267.845449-5.738481 268.060642-5.738481 268.060642-5.977584S267.845449-6.216687 267.642211-6.216687H261.174465C260.971227-6.216687 260.756034-6.216687 260.756034-5.977584S260.971227-5.738481 261.174465-5.738481H267.642211Z"/>
<path d="M274.284037-5.738481C274.487275-5.738481 274.702468-5.738481 274.702468-5.977584S274.487275-6.216687 274.284037-6.216687H267.816291C267.613053-6.216687 267.39786-6.216687 267.39786-5.977584S267.613053-5.738481 267.816291-5.738481H274.284037Z"/>
<path d="M280.038209-5.738481C279.380675-5.236364 279.057886-4.746202 278.962244-4.590785C278.424262-3.765878 278.32862-3.012702 278.32862-3.000747C278.32862-2.857285 278.472082-2.857285 278.567724-2.857285C278.770962-2.857285 278.782917-2.881196 278.830738-3.096389C279.105706-4.267995 279.811061-5.272229 281.161995-5.822167C281.305457-5.869988 281.341323-5.893898 281.341323-5.977584S281.269592-6.097136 281.245681-6.109091C280.719654-6.312329 279.273079-6.910087 278.818782-8.918555C278.782917-9.062017 278.770962-9.097883 278.567724-9.097883C278.472082-9.097883 278.32862-9.097883 278.32862-8.954421C278.32862-8.930511 278.436217-8.177335 278.938334-7.376339C279.177437-7.017684 279.524137-6.599253 280.038209-6.216687H271.15552C270.940327-6.216687 270.725134-6.216687 270.725134-5.977584S270.940327-5.738481 271.15552-5.738481H280.038209Z"/>
<path d="M287.543378-3.56264C287.543378-3.90934 287.256454-4.148443 286.96953-4.148443C286.62283-4.148443 286.383727-3.861519 286.383727-3.574595C286.383727-3.227895 286.670651-2.988792 286.957575-2.988792C287.304275-2.988792 287.543378-3.275716 287.543378-3.56264Z"/>
<path d="M292.787537-3.56264C292.787537-3.90934 292.500613-4.148443 292.213689-4.148443C291.866989-4.148443 291.627886-3.861519 291.627886-3.574595C291.627886-3.227895 291.91481-2.988792 292.201734-2.988792C292.548434-2.988792 292.787537-3.275716 292.787537-3.56264Z"/>
<path d="M298.031696-3.56264C298.031696-3.90934 297.744772-4.148443 297.457848-4.148443C297.111148-4.148443 296.872045-3.861519 296.872045-3.574595C296.872045-3.227895 297.158969-2.988792 297.445893-2.988792C297.792592-2.988792 298.031696-3.275716 298.031696-3.56264Z"/>
</g>
</svg>
</center>
<p>In this case there is no fixed base case for <code>f</code>; instead, the guarantee required by <code>f</code> is that <code>g</code> has verified <code>d</code>; as always, this guarantee must be derivable from information present in <code>Tx</code> only.</p>
<p>We can do this by defining a minting policy <code>Link<sub>g, f</sub></code>, which allows minting in a transaction <code>Tx'</code> if</p>
<ul>
<li><code>Tx'</code> spends an input to <code>g</code></li>
<li>The only <code>Link<sub>g, f</sub></code> tokens in the outputs of <code>Tx'</code> are locked in outputs to <code>f</code>.</li>
</ul>
<p>Scripts <code>g</code> and <code>f</code> then have the following responsibilities:</p>
<ul>
<li><code>g</code> must verify the datums in all outputs to <code>f</code> in <code>Tx'</code>.</li>
<li><code>f</code> must check for the presence of the <code>Link<sub>g, f</sub></code> token in the input it is verifying. It must also check that the only <em>outputs</em> of the <code>Link<sub>g, f</sub></code> token in transaction <code>Tx</code> are back to <code>f</code>.</li>
</ul>
<p>These tokens are not NFTs, and do not need to be. We just need to be make sure the tokens never ``leak’’ (which the rules above do ensure).</p>
<p>Once more we have to solve the problem of mutual dependencies between <code>f</code> and <code>Link<sub>g, f</sub></code> and between <code>g</code> and <code>Link<sub>g, f</sub></code>. First, we can assume without loss of generality that <code>g</code> is stateful; after all, if it wasn’t, then this setup provides no benefits over a setup with a fixed base case. We can therefore store the hash of <code>Link<sub>g, f</sub></code> in the state (datum) associated with <code>g</code>, and then rely on the <code>NFT<sub>o, g, (Link<sub>g, ; f</sub>, d’)</sub></code> to ensure that the hash is recorded correctly. We can use <code>g</code> to verify that the datum for <code>f</code> also records the correct hash of <code>Link<sub>g, f</sub></code>.</p>
<p>This also avoids any dependencies between <code>f</code> and <code>g</code> directly: <code>g</code> can identify outputs to <code>f</code> by looking for outputs that include a <code>Link<sub>g, f</sub></code> token, and <code>f</code> verifies that its inputs include that token.</p>
<h2 id="conclusions">Conclusions</h2>
<p>Stateful Plutus scripts can verify that the <em>evolution</em> of state happens according to the rules defined in the script, but cannot verify the <em>initial</em> state: they lack the context that would tell them when the base case applies.</p>
<p>Moreover, the lack of on-chain script hash computation (or, put another way, the strict stage separation between script parameters and the script datum) means that we must often include the hash of one script in the datum of another; these hashes cannot be verified at all, even if the script <em>could</em> know when a state should be initial.</p>
<p>Often the verification of these initial conditions are relegated to off-chain code instead, but this is unsatisfactory and dangerous. The same on-chain code could be interacted with by multiple off-chain applications; a single forgotten check in one of those off-chain applications could result in security vulnerabilities.</p>
<p>Stateful scripts often have an associated NFT, used to identify the current script output in a UTxO set. As it turns out, such NFTs are subject to their own unverified initial conditions. However, we showed that we can resolve all of these problems by defining an <code>NFT<sub>o, f, d</sub></code> which verifies that the NFT is locked in the script <code>f</code> immediately upon minting and that the initial datum is <code>d</code>. In addition, we saw that if the base case for one script <code>f</code> is another script <code>g</code>, we can use <code>NFT<sub>o, g, d</sub></code> to guarantee the base case for <code>g</code>, and a special token <code>Link<sub>g, f</sub></code> to verify the base case for <code>f</code>.</p>
<h5 id="footnotes">Footnotes</h5>
<section class="footnotes">
<hr>
<ol>
<li id="fn1"><p>Data values as opposed to currency values.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref1">↩︎</a></p></li>
<li id="fn2"><p>Script hashes use BLAKE-224; the available on-chain hashing algorithms are SHA2-256, SHA3-256, and BLAKE-256.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref2">↩︎</a></p></li>
<li id="fn3"><p>Specifically, <code>f</code> would need enough information to be able to compute <code>blake<sub>224</sub>(serialise(π<sub>f</sub>))</code>.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref3">↩︎</a></p></li>
<li id="fn4"><p>This can be useful off-chain, in order to figure out which output in the UTxO set corresponds to the current state of the contract we’re interacting with. It can also be useful on-chain, in case there could be multiple instances of <code>f</code> within a single transaction, and the script needs to figure out which output belongs to which input.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref4">↩︎</a></p></li>
<li id="fn5"><p>This latter check is unproblematic becauses scripts are told their own hash when they run.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref5">↩︎</a></p></li>
<li id="fn6"><p>It is true that the hash is carrying a lot of weight here; we are depending on that fixed size hash to encode a lot of information. However, this is no different from representing script outputs in the first place; we are comfortable with hashes representing <code>f<sub>x1, .., xN</sub></code>, in which case the hash is also encoding a lot of information: the definition of <code>f</code> as well as all parameters <code>x<sub>i</sub></code>.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref6">↩︎</a></p></li>
<li id="fn7"><p>As we saw earlier, a script output contains (the hash of) a function <code>f<sub>x1, .., xN</sub></code>, and a datum <code>d</code>. When a script output is <em>spent</em>, the spending input additionally provides a <em>redeemer</em> value <code>r</code>; the actual code that is run is then <code>f<sub>x1, .., xN</sub>(d, r)</code>. In Plutus V1 it in fact not possible for the minting policy to check the redeemer value for other scripts, as this information is not present in the <code>ScriptContext</code>; this is resolved in V2.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref7">↩︎</a></p></li>
<li id="fn8"><p>We cannot use <code>NFT<sub>o, f, d</sub></code>: this <em>is</em> guaranteed to be locked in the script immediately but, unlike <code>NFT<sub>o</sub></code>, <em>still</em> depends on <code>f</code>.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref8">↩︎</a></p></li>
<li id="fn9"><p><em>When</em> <code>π</code> tokens are minted, we could rely on <code>π</code> instead to verify that the right hash is recorded. However, this check will not happen until the first <code>π</code>-token is minted, and we wouldn’t know what happened before then.<a class="footnote-back" href="https://well-typed.com/blog/rss2.xml#fnref9">↩︎</a></p></li>
</ol>
</section></div>
    </content>
    <updated>2022-08-23T00:00:00Z</updated>
    <published>2022-08-23T00:00:00Z</published>
    <category term="plutus"/>
    <category term="blockchain"/>
    <category term="cardano"/>
    <author>
      <name>edsko, finley</name>
    </author>
    <source>
      <id>https://well-typed.com/blog/</id>
      <logo>https://well-typed.com/img/wtnlogoplain.svg</logo>
      <link href="https://well-typed.com/blog/rss2.xml" rel="self" type="application/rss+xml">
      <link href="https://well-typed.com/blog/" rel="alternate" type="text/html">
      <subtitle>Because Well-Typed Programs Don't Go Wrong</subtitle>
      <title>Well-Typed Blog</title>
      <updated>2022-10-27T00:00:00Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://haskell.org/ghc/blog/20220822-ghc-9.4.2-released.html</id>
    <link href="http://haskell.org/ghc/blog/20220822-ghc-9.4.2-released.html" rel="alternate" type="text/html">
    <title>GHC 9.4.2 released</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><h1>GHC 9.4.2 released</h1>
<h4 class="text-muted">bgamari - 2022-08-22</h4>

<p>The GHC developers are happy to announce the availability of GHC 9.4.2. Binary
distributions, source distributions, and documentation are available at
<a href="https://downloads.haskell.org/ghc/9.4.2">downloads.haskell.org</a>.</p>
<p>This release is primarily a bugfix release addressing a few packaging issues
found in 9.4.1. See the <a href="https://downloads.haskell.org/~ghc/9.4.2/docs/users_guide/9.4.2-notes.html">release notes</a> for a full accounting.</p>
<p>Note that, as GHC 9.4 is the first release series where the release artifacts
are all generated by our new Hadrian build system, it is possible that there
will be packaging issues. If you enounter trouble while using a binary
distribution, please open a <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/new">ticket</a>. Likewise, if you are a downstream
packager, do consider migrating to <a href="https://gitlab.haskell.org/ghc/ghc/-/blob/e2520df3fffa0cf22fb19c5fb872832d11c07d35/hadrian">Hadrian</a> to run your build; the Hadrian
build system can be built using <code>cabal-install</code>, <code>stack</code>, or the in-tree
<a href="https://gitlab.haskell.org/ghc/ghc/-/blob/e2520df3fffa0cf22fb19c5fb872832d11c07d35/hadrian/bootstrap/README.md">bootstrap script</a>. See the accompanying <a href="https://www.haskell.org/ghc/blog/20220805-make-to-hadrian.html">blog post</a> for details on
migrating packaging to Hadrian.</p>
<p>We would also like to emphasize that GHC 9.4 must be used in conjunction with
Cabal-3.8 or later. This is particularly important for Windows users due to
changes in GHCâ€™s Windows toolchain.</p>
<p>We would like to thank Microsoft Azure, GitHub, IOG, the Zw3rk stake pool,
Well-Typed, Tweag I/O, Serokell, Equinix, SimSpace, Haskell Foundation, and
other anonymous contributors whose on-going financial and in-kind support has
facilitated GHC maintenance and release management over the years. Finally,
this release would not have been possible without the hundreds of open-source
contributors whose work comprise this release.</p>
<p>As always, do give this release a try and open a <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/new">ticket</a> if you see
anything amiss.</p>
<p>Happy Haskelling,</p>
<ul>
<li>Ben</li>
</ul></div>
    </summary>
    <updated>2022-08-22T00:00:00Z</updated>
    <published>2022-08-22T00:00:00Z</published>
    <author>
      <name>ghc-devs</name>
    </author>
    <source>
      <id>http://haskell.org/ghc</id>
      <link href="http://haskell.org/ghc" rel="alternate" type="text/html">
      <link href="http://haskell.org/ghc/rss.xml" rel="self" type="application/rss+xml">
      <title>GHC Developer blog</title>
      <updated>2022-11-07T00:00:00Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://magnus.therning.org/2022-08-21-patching-in-nix.html</id>
    <link href="https://magnus.therning.org/2022-08-21-patching-in-nix.html" rel="alternate" type="text/html">
    <title>Patching in Nix</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>
Today I wanted to move one of my Haskell projects to GHC 9.2.4 and found that
<a href="https://hackage.haskell.org/package/envy-2.1.0.0">envy</a> didn't compile due to an upper bound on its dependency on <code>bytestring</code>, it
didn't allow <code>0.11.*</code>.
</p>

<p>
After creating a <a href="https://github.com/dmjio/envy/pull/49">PR</a> I decided I didn't want to wait for upstream so instead I
started looking into options for patching the source of a derivation of a
package from Hackage. In the past I've written about building <a href="https://magnus.therning.org/2020-11-30-1734-haskell__nix_and_using_packages_from_github.html">Haskell packages
from GitHub</a> and an older one were I used <code>callHackageDirect</code> to build <a href="https://magnus.therning.org/2020-02-02-000-my-ghcide-build-for-nix.html">Haskell
packages from Hackage</a>. I wasn't sure how to patch up a package from Hackage
though, but after a bit of digging through <a href="https://github.com/NixOS/nixpkgs/tree/master/pkgs/development/haskell-modules">haskell-modules</a> I found <a href="https://github.com/NixOS/nixpkgs/blob/master/pkgs/development/haskell-modules/lib/default.nix#L194">appendPatch</a>.
</p>

<p>
The patch wasn't too hard to put together once I recalled the name of the patch
queue tool I used regularly years ago, <a href="https://savannah.nongnu.org/projects/quilt/">quilt</a>. I put the resulting patch in the
<code>nix</code> folder I already had, and the full override ended up looking like this
</p>

<div class="org-src-container">
<pre class="src src-nix">...
<span class="org-nix-attribute">hl</span> = haskell.lib;
<span class="org-nix-attribute">hsPkgs</span> = haskell.packages.ghc924;

<span class="org-nix-attribute">extraHsPkgs</span> = hsPkgs.override <span class="org-rainbow-delimiters-depth-1">{</span>
  <span class="org-nix-attribute">overrides</span> = self: super: <span class="org-rainbow-delimiters-depth-2">{</span>
    <span class="org-nix-attribute">envy</span> = hl.appendPatch <span class="org-rainbow-delimiters-depth-3">(</span>self.callHackageDirect <span class="org-rainbow-delimiters-depth-4">{</span>
      <span class="org-nix-attribute">pkg</span> = <span class="org-string">&quot;envy&quot;</span>;
      <span class="org-nix-attribute">ver</span> = <span class="org-string">&quot;2.1.0.0&quot;</span>;
      <span class="org-nix-attribute">sha256</span> =
        <span class="org-string">&quot;sha256-yk8ARRyhTf9ImFJhDnVwaDiEQi3Rp4yBvswsWVVgurg=&quot;</span>;
    <span class="org-rainbow-delimiters-depth-4">}</span> <span class="org-rainbow-delimiters-depth-4">{</span> <span class="org-rainbow-delimiters-depth-4">}</span><span class="org-rainbow-delimiters-depth-3">)</span> <span class="org-nix-constant">./nix/envy-fix-deps.patch</span>;
  <span class="org-rainbow-delimiters-depth-2">}</span>;
<span class="org-rainbow-delimiters-depth-1">}</span>;
...
</pre>
</div>
<div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-haskell.html">haskell</a> <a href="https://magnus.therning.org/tag-nix.html">nix</a></div></div>
    </summary>
    <updated>2022-08-21T20:05:00Z</updated>
    <published>2022-08-21T20:05:00Z</published>
    <category term="haskell"/>
    <category term="nix"/>
    <source>
      <id>https://magnus.therning.org/</id>
      <author>
        <name>Magnus Therning</name>
      </author>
      <link href="https://magnus.therning.org/" rel="alternate" type="text/html">
      <link href="https://magnus.therning.org/feed.xml" rel="self" type="application/rss+xml">
      <subtitle>Magnus web site</subtitle>
      <title>Magnus web site</title>
      <updated>2022-09-24T21:45:55Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://www.parsonsmatt.org/2022/08/16/dynamic_exception_reporting_in_haskell.html</id>
    <link href="https://www.parsonsmatt.org/2022/08/16/dynamic_exception_reporting_in_haskell.html" rel="alternate" type="text/html">
    <title>Dynamic Exception Reporting in Haskell</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Exceptions kind of <em>suck</em> in Haskell.
You don’t get a stack trace.
They don’t show up in the types of functions.
They incorporate a subtyping mechanism that feels more like Java casting than typical Haskell programming.</p>

<p>A partial solution to the problem is <code class="language-plaintext highlighter-rouge">HasCallStack</code> - that gives us a <code class="language-plaintext highlighter-rouge">CallStack</code> which gets attached to <code class="language-plaintext highlighter-rouge">error</code> calls.
However, it <em>only</em> gets attached to <code class="language-plaintext highlighter-rouge">error</code> - so you can either have <code class="language-plaintext highlighter-rouge">String</code> error messages <em>and</em> a <code class="language-plaintext highlighter-rouge">CallStack</code>, or you can have richly typed exceptions with no location information.</p>

<p>A <code class="language-plaintext highlighter-rouge">CallStack</code> is a <em>static</em> piece of information about the code.
“You called <code class="language-plaintext highlighter-rouge">foo</code>, which called <code class="language-plaintext highlighter-rouge">bar</code>, which called <code class="language-plaintext highlighter-rouge">quuz</code>, which blew up with <code class="language-plaintext highlighter-rouge">Prelude.read: No parse</code>.”
The <code class="language-plaintext highlighter-rouge">CallStack</code> answers a single question: “Where did this go wrong?”</p>

<p>But there’s often <em>many</em> more interesting questions that simply “Where?”
You often want to know Who? When? How? in order to diagnose the big one: why did my code blow up?</p>

<p>In order to help answer these questions and develop robust exception reporting and diagnosing facilities, I created the <a href="https://hackage.haskell.org/package/annotated-exception"><code class="language-plaintext highlighter-rouge">annotated-exception</code></a> package.</p>

<h1 id="better-call-stacks">Better Call Stacks</h1>

<p><code class="language-plaintext highlighter-rouge">annotated-exception</code> provides a big improvement in static <code class="language-plaintext highlighter-rouge">CallStack</code> behavior.
To understand the improvement, let’s dig into the core problem:</p>

<h2 id="broken-chains-and-orphan-stacks">Broken Chains and Orphan Stacks</h2>

<p>If any function doesn’t include a <code class="language-plaintext highlighter-rouge">HasCallStack</code> constraint in your stack, then the chain is broken, and you only get the stack closest to the source.</p>

<p>Consider this trivial example, which has a few ways of blowing up:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">import</span> <span class="nn">GHC.Stack</span>

<span class="n">foo</span> <span class="o">::</span> <span class="kt">HasCallStack</span> <span class="o">=&gt;</span> <span class="kt">Int</span>
<span class="n">foo</span> <span class="o">=</span> <span class="n">error</span> <span class="s">&quot;foo&quot;</span>

<span class="n">bar</span> <span class="o">::</span> <span class="kt">HasCallStack</span> <span class="o">=&gt;</span> <span class="kt">Int</span>
<span class="n">bar</span> <span class="o">=</span> <span class="n">foo</span>

<span class="n">baz</span> <span class="o">::</span> <span class="kt">Int</span>
<span class="n">baz</span> <span class="o">=</span> <span class="n">foo</span>

<span class="n">quux</span> <span class="o">::</span> <span class="kt">HasCallStack</span> <span class="o">=&gt;</span> <span class="kt">Int</span>
<span class="n">quux</span> <span class="o">=</span> <span class="n">bar</span>

<span class="n">ohno</span> <span class="o">::</span> <span class="kt">HasCallStack</span> <span class="o">=&gt;</span> <span class="kt">Int</span>
<span class="n">ohno</span> <span class="o">=</span> <span class="n">baz</span>
</code></pre></div></div>

<p>If we call <code class="language-plaintext highlighter-rouge">foo</code> in GHCi, we get the immediate stack trace:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>λ&gt; foo
*** Exception: foo
CallStack (from HasCallStack):
  error, called at &lt;interactive&gt;:4:7 in interactive:Ghci1
    foo, called at &lt;interactive&gt;:14:1 in interactive:Ghci2
</code></pre></div></div>

<p>Since the <code class="language-plaintext highlighter-rouge">bar</code> term has the <code class="language-plaintext highlighter-rouge">HasCallStack</code> constraint, it will add it’s location to the mix:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>λ&gt; bar
*** Exception: foo
CallStack (from HasCallStack):
  error, called at &lt;interactive&gt;:4:7 in interactive:Ghci1
  foo, called at &lt;interactive&gt;:6:7 in interactive:Ghci1
  bar, called at &lt;interactive&gt;:15:1 in interactive:Ghci2
</code></pre></div></div>

<p>However, <code class="language-plaintext highlighter-rouge">baz</code> omits the constraint, which means that you won’t get that function in the stack:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>λ&gt; baz
*** Exception: foo
CallStack (from HasCallStack):
  error, called at &lt;interactive&gt;:4:7 in interactive:Ghci1
    foo, called at &lt;interactive&gt;:8:7 in interactive:Ghci1
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">quux</code> term has the call stack, so you get the whole story again:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>λ&gt; quux
*** Exception: foo
CallStack (from HasCallStack):
  error, called at &lt;interactive&gt;:4:7 in interactive:Ghci1
    foo, called at &lt;interactive&gt;:6:7 in interactive:Ghci1
      bar, called at &lt;interactive&gt;:10:8 in interactive:Ghci1
        quux, called at &lt;interactive&gt;:17:1 in interactive:Ghci2
</code></pre></div></div>

<p>But here’s the crappy thing - <code class="language-plaintext highlighter-rouge">ohno</code> <em>does</em> have a <code class="language-plaintext highlighter-rouge">HasCallStack</code> constraint.
You might expect that it would show up in the backtrace.
But it does not:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>λ&gt; ohno
*** Exception: foo
CallStack (from HasCallStack):
  error, called at &lt;interactive&gt;:4:7 in interactive:Ghci1
  foo, called at &lt;interactive&gt;:8:7 in interactive:Ghci1
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">CallStack</code> for <code class="language-plaintext highlighter-rouge">foo</code>, <code class="language-plaintext highlighter-rouge">baz</code>, and <code class="language-plaintext highlighter-rouge">ohno</code> are <em>indistinguishable</em>.
This makes diagnosing the failure difficult.</p>

<p>To avoid this problem, you must diligently place a <code class="language-plaintext highlighter-rouge">HasCallStack</code> constraint on <em>every function in your code base</em>.
This is pretty annoying! 
And if you have any library code that calls <em>your</em> code, the library’s lack of <code class="language-plaintext highlighter-rouge">HasCallStack</code> will break your chains for you.</p>

<h2 id="checkpoint-to-the-rescue"><code class="language-plaintext highlighter-rouge">checkpoint</code> to the rescue</h2>

<p><code class="language-plaintext highlighter-rouge">annotated-exception</code> introduces the idea of a <a href="https://hackage.haskell.org/package/annotated-exception-0.2.0.3/docs/src/Control.Exception.Annotated.html#checkpoint"><code class="language-plaintext highlighter-rouge">checkpoint</code></a>.
The simplest one is <code class="language-plaintext highlighter-rouge">checkpointCallStack</code>, which attaches the call-site to any exceptions thrown out of the action:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">checkpointCallStack</span>
    <span class="o">::</span> <span class="p">(</span><span class="kt">HasCallStack</span><span class="p">,</span> <span class="kt">MonadCatch</span> <span class="n">m</span><span class="p">)</span>
    <span class="o">=&gt;</span> <span class="n">m</span> <span class="n">a</span>
    <span class="o">-&gt;</span> <span class="n">m</span> <span class="n">a</span>
</code></pre></div></div>

<p>Let’s replicate the story from above.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">import</span> <span class="nn">Control.Exception.Annotated</span>

<span class="n">foo</span> <span class="o">::</span> <span class="kt">IO</span> <span class="kt">Int</span>
<span class="n">foo</span> <span class="o">=</span> <span class="n">throw</span> <span class="p">(</span><span class="n">userError</span> <span class="s">&quot;foo&quot;</span><span class="p">)</span>

<span class="c1">-- in GHCi, evaluate:</span>
<span class="c1">-- λ&gt; foo</span>
<span class="o">***</span> <span class="kt">Exception</span><span class="o">:</span> 
    <span class="kt">AnnotatedException</span> 
         <span class="p">{</span> <span class="n">annotations</span> <span class="o">=</span> 
             <span class="p">[</span> <span class="kt">Annotation</span> <span class="o">@</span><span class="kt">CallStack</span> 
                 <span class="p">[</span> <span class="p">(</span> <span class="s">&quot;throw&quot;</span>
                   <span class="p">,</span> <span class="kt">SrcLoc</span> 
                         <span class="p">{</span> <span class="n">srcLocPackage</span> <span class="o">=</span> <span class="s">&quot;interactive&quot;</span>
                         <span class="p">,</span> <span class="n">srcLocModule</span> <span class="o">=</span> <span class="s">&quot;Ghci1&quot;</span>
                         <span class="p">,</span> <span class="n">srcLocFile</span> <span class="o">=</span> <span class="s">&quot;&lt;interactive&gt;&quot;</span>
                         <span class="p">,</span> <span class="n">srcLocStartLine</span> <span class="o">=</span> <span class="mi">4</span>
                         <span class="p">,</span> <span class="n">srcLocStartCol</span> <span class="o">=</span> <span class="mi">7</span>
                         <span class="p">,</span> <span class="n">srcLocEndLine</span> <span class="o">=</span> <span class="mi">4</span>
                         <span class="p">,</span> <span class="n">srcLocEndCol</span> <span class="o">=</span> <span class="mi">30</span>
                         <span class="p">}</span>
                   <span class="p">)</span>
                 <span class="p">]</span>
             <span class="p">]</span>
         <span class="p">,</span> <span class="n">exception</span> <span class="o">=</span> <span class="n">user</span> <span class="n">error</span> <span class="p">(</span><span class="n">foo</span><span class="p">)</span>
         <span class="p">}</span>
</code></pre></div></div>

<p>I’ve formatted the output to be a bit more legible.
Now, instead of a plain <code class="language-plaintext highlighter-rouge">IOError</code>, we’ve thrown an <code class="language-plaintext highlighter-rouge">AnnotatedException IOError</code>.
Inside of it, we have the <code class="language-plaintext highlighter-rouge">CallStack</code> from <code class="language-plaintext highlighter-rouge">throw</code>, which <em>knows where it was thrown from</em>.
That <code class="language-plaintext highlighter-rouge">CallStack</code> inside of the exception is reporting the <em>call-site</em> of <code class="language-plaintext highlighter-rouge">throw</code> - not the definition site!
This is true even though <code class="language-plaintext highlighter-rouge">foo</code> <em>does not have a <code class="language-plaintext highlighter-rouge">HasCallStack</code></em> constraint!</p>

<p>Let’s do <code class="language-plaintext highlighter-rouge">bar</code>.
We’ll do <code class="language-plaintext highlighter-rouge">HasCallStack</code> <em>and</em> our <code class="language-plaintext highlighter-rouge">checkpointCallStack</code>, just to see what happens:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">import</span> <span class="nn">GHC.Stack</span>

<span class="n">bar</span> <span class="o">::</span> <span class="kt">HasCallStack</span> <span class="o">=&gt;</span> <span class="kt">IO</span> <span class="kt">Int</span>
<span class="n">bar</span> <span class="o">=</span> <span class="n">checkpointCallStack</span> <span class="n">foo</span>


<span class="c1">-- λ&gt; bar</span>
<span class="o">***</span> <span class="kt">Exception</span><span class="o">:</span> 
    <span class="kt">AnnotatedException</span> 
        <span class="p">{</span> <span class="n">annotations</span> <span class="o">=</span> 
            <span class="p">[</span> <span class="kt">Annotation</span> <span class="o">@</span><span class="kt">CallStack</span> 
                <span class="p">[</span> <span class="p">(</span> <span class="s">&quot;throw&quot;</span>
                  <span class="p">,</span> <span class="kt">SrcLoc</span> <span class="p">{</span> <span class="n">srcLocPackage</span> <span class="o">=</span> <span class="s">&quot;interactive&quot;</span><span class="p">,</span> <span class="n">srcLocModule</span> <span class="o">=</span> <span class="s">&quot;Ghci1&quot;</span><span class="p">,</span> <span class="n">srcLocFile</span> <span class="o">=</span> <span class="s">&quot;&lt;interactive&gt;&quot;</span><span class="p">,</span> <span class="n">srcLocStartLine</span> <span class="o">=</span> <span class="mi">4</span><span class="p">,</span> <span class="n">srcLocStartCol</span> <span class="o">=</span> <span class="mi">7</span><span class="p">,</span> <span class="n">srcLocEndLine</span> <span class="o">=</span> <span class="mi">4</span><span class="p">,</span> <span class="n">srcLocEndCol</span> <span class="o">=</span> <span class="mi">30</span><span class="p">}</span>
                  <span class="p">)</span>
                <span class="p">,</span> <span class="p">(</span> <span class="s">&quot;checkpointCallStack&quot;</span>
                  <span class="p">,</span> <span class="kt">SrcLoc</span> <span class="p">{</span><span class="n">srcLocPackage</span> <span class="o">=</span> <span class="s">&quot;interactive&quot;</span><span class="p">,</span> <span class="n">srcLocModule</span> <span class="o">=</span> <span class="s">&quot;Ghci2&quot;</span><span class="p">,</span> <span class="n">srcLocFile</span> <span class="o">=</span> <span class="s">&quot;&lt;interactive&gt;&quot;</span><span class="p">,</span> <span class="n">srcLocStartLine</span> <span class="o">=</span> <span class="mi">15</span><span class="p">,</span> <span class="n">srcLocStartCol</span> <span class="o">=</span> <span class="mi">7</span><span class="p">,</span> <span class="n">srcLocEndLi</span> <span class="n">ne</span> <span class="o">=</span> <span class="mi">15</span><span class="p">,</span> <span class="n">srcLocEndCol</span> <span class="o">=</span> <span class="mi">30</span><span class="p">}</span>
                  <span class="p">)</span>
                <span class="p">,</span> <span class="p">(</span> <span class="s">&quot;bar&quot;</span>
                  <span class="p">,</span> <span class="kt">SrcLoc</span> <span class="p">{</span><span class="n">srcLocPackage</span> <span class="o">=</span> <span class="s">&quot;interactive&quot;</span><span class="p">,</span> <span class="n">srcLocModule</span> <span class="o">=</span> <span class="s">&quot;Ghci3&quot;</span><span class="p">,</span> <span class="n">srcLocFile</span> <span class="o">=</span> <span class="s">&quot;&lt;interactive&gt;&quot;</span><span class="p">,</span> <span class="n">srcLocStartLine</span> <span class="o">=</span> <span class="mi">17</span><span class="p">,</span> <span class="n">srcLocStartCol</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">srcLocEndLine</span> <span class="o">=</span> <span class="mi">17</span><span class="p">,</span> <span class="n">srcLocEndCol</span> <span class="o">=</span> <span class="mi">4</span><span class="p">}</span>
                  <span class="p">)</span>
                <span class="p">]</span>
            <span class="p">]</span>
        <span class="p">,</span> <span class="n">exception</span> <span class="o">=</span> <span class="n">user</span> <span class="n">error</span> <span class="p">(</span><span class="n">foo</span><span class="p">)</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>We get the source location for <code class="language-plaintext highlighter-rouge">throw</code>, <code class="language-plaintext highlighter-rouge">checkpointCallStack</code>, and then the <em>use site</em> of <code class="language-plaintext highlighter-rouge">bar</code>.</p>

<p>Now, suppose we have our Problem Function again: <code class="language-plaintext highlighter-rouge">baz</code> doesn’t have a <code class="language-plaintext highlighter-rouge">HasCallStack</code> constraint <em>or</em> a <code class="language-plaintext highlighter-rouge">checkpointCallStack</code>.
And when we called it through <code class="language-plaintext highlighter-rouge">ohno</code>, we lost the stack, even though <code class="language-plaintext highlighter-rouge">ohno</code> had the <code class="language-plaintext highlighter-rouge">HasCallStack</code> constraint.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">baz</span> <span class="o">::</span> <span class="kt">IO</span> <span class="kt">Int</span>
<span class="n">baz</span> <span class="o">=</span> <span class="n">bar</span>

<span class="n">ohno</span> <span class="o">::</span> <span class="kt">IO</span> <span class="kt">Int</span>
<span class="n">ohno</span> <span class="o">=</span> <span class="n">checkpointCallStack</span> <span class="n">baz</span>

<span class="c1">-- λ&gt; ohno</span>
<span class="o">***</span> <span class="kt">Exception</span><span class="o">:</span> 
    <span class="kt">AnnotatedException</span> 
        <span class="p">{</span> <span class="n">annotations</span> <span class="o">=</span> 
            <span class="p">[</span> <span class="kt">Annotation</span> <span class="o">@</span><span class="kt">CallStack</span> 
                <span class="p">[</span> <span class="p">(</span> <span class="s">&quot;throw&quot;</span>
                  <span class="p">,</span> <span class="kt">SrcLoc</span> <span class="p">{</span><span class="n">srcLocPackage</span> <span class="o">=</span> <span class="s">&quot;interactive&quot;</span><span class="p">,</span> <span class="n">srcLocModule</span> <span class="o">=</span> <span class="s">&quot;Ghci1&quot;</span><span class="p">,</span> <span class="n">srcLocFile</span> <span class="o">=</span> <span class="s">&quot;&lt;interactive&gt;&quot;</span><span class="p">,</span> <span class="n">srcLocStartLine</span> <span class="o">=</span> <span class="mi">4</span><span class="p">,</span> <span class="n">srcLocStartCol</span> <span class="o">=</span> <span class="mi">7</span><span class="p">,</span> <span class="n">srcLocEndLine</span> <span class="o">=</span> <span class="mi">4</span><span class="p">,</span> <span class="n">srcLocEndCol</span> <span class="o">=</span> <span class="mi">30</span><span class="p">}</span>
                  <span class="p">)</span>
                <span class="p">,</span> <span class="p">(</span> <span class="s">&quot;checkpointCallStack&quot;</span>
                  <span class="p">,</span> <span class="kt">SrcLoc</span> <span class="p">{</span><span class="n">srcLocPackage</span> <span class="o">=</span> <span class="s">&quot;interactive&quot;</span><span class="p">,</span> <span class="n">srcLocModule</span> <span class="o">=</span> <span class="s">&quot;Ghci2&quot;</span><span class="p">,</span> <span class="n">srcLocFile</span> <span class="o">=</span> <span class="s">&quot;&lt;interactive&gt;&quot;</span><span class="p">,</span> <span class="n">srcLocStartLine</span> <span class="o">=</span> <span class="mi">15</span><span class="p">,</span> <span class="n">srcLocStartCol</span> <span class="o">=</span> <span class="mi">7</span><span class="p">,</span> <span class="n">srcLocEndLi</span> <span class="n">ne</span> <span class="o">=</span> <span class="mi">15</span><span class="p">,</span> <span class="n">srcLocEndCol</span> <span class="o">=</span> <span class="mi">30</span><span class="p">}</span>
                  <span class="p">)</span>
                <span class="p">,</span> <span class="p">(</span> <span class="s">&quot;bar&quot;</span>
                  <span class="p">,</span> <span class="kt">SrcLoc</span> <span class="p">{</span><span class="n">srcLocPackage</span> <span class="o">=</span> <span class="s">&quot;interactive&quot;</span><span class="p">,</span> <span class="n">srcLocModule</span> <span class="o">=</span> <span class="s">&quot;Ghci3&quot;</span><span class="p">,</span> <span class="n">srcLocFile</span> <span class="o">=</span> <span class="s">&quot;&lt;interactive&gt;&quot;</span><span class="p">,</span> <span class="n">srcLocStartLine</span> <span class="o">=</span> <span class="mi">21</span><span class="p">,</span> <span class="n">srcLocStartCol</span> <span class="o">=</span> <span class="mi">7</span><span class="p">,</span> <span class="n">srcLocEndLine</span> <span class="o">=</span> <span class="mi">21</span><span class="p">,</span> <span class="n">srcLocEndCol</span> <span class="o">=</span> <span class="mi">10</span><span class="p">}</span>
                  <span class="p">)</span>
                <span class="p">,</span> <span class="p">(</span> <span class="s">&quot;checkpointCallStack&quot;</span>
                  <span class="p">,</span> <span class="kt">SrcLoc</span> <span class="p">{</span><span class="n">srcLocPackage</span> <span class="o">=</span> <span class="s">&quot;interactive&quot;</span><span class="p">,</span> <span class="n">srcLocModule</span> <span class="o">=</span> <span class="s">&quot;Ghci3&quot;</span><span class="p">,</span> <span class="n">srcLocFile</span> <span class="o">=</span> <span class="s">&quot;&lt;interactive&gt;&quot;</span><span class="p">,</span> <span class="n">srcLocStartLine</span> <span class="o">=</span> <span class="mi">23</span><span class="p">,</span> <span class="n">srcLocStartCol</span> <span class="o">=</span> <span class="mi">8</span><span class="p">,</span> <span class="n">srcLocEndLine</span> <span class="o">=</span> <span class="mi">23</span><span class="p">,</span> <span class="n">srcLocEndCol</span> <span class="o">=</span> <span class="mi">31</span><span class="p">}</span>
                  <span class="p">)</span>
                <span class="p">]</span>
            <span class="p">]</span>
        <span class="p">,</span> <span class="n">exception</span> <span class="o">=</span> <span class="n">user</span> <span class="n">error</span> <span class="p">(</span><span class="n">foo</span><span class="p">)</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>When we call <code class="language-plaintext highlighter-rouge">ohno</code>, we preserve all of the entries in the <code class="language-plaintext highlighter-rouge">CallStack</code>. 
<code class="language-plaintext highlighter-rouge">checkpointCallStack</code> in <code class="language-plaintext highlighter-rouge">ohno</code> adds itself to the <code class="language-plaintext highlighter-rouge">CallStack</code> that is present on the <code class="language-plaintext highlighter-rouge">AnnotatedException</code> itself, so it doesn’t need to worry about the stack being broken.
It’s perfectly capable of recording that history for you.</p>

<h2 id="aint-just-a-checkpoint---catch-me-later">Ain’t Just a Checkpoint - <code class="language-plaintext highlighter-rouge">catch</code> me later</h2>

<p>The type signature for <code class="language-plaintext highlighter-rouge">catch</code> in <code class="language-plaintext highlighter-rouge">annotated-exception</code> looks like this:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">catch</span>
    <span class="o">::</span> <span class="p">(</span><span class="kt">HasCallStack</span><span class="p">,</span> <span class="kt">Exception</span> <span class="n">e</span><span class="p">,</span> <span class="kt">MonadCatch</span> <span class="n">m</span><span class="p">)</span>
    <span class="o">=&gt;</span> <span class="n">m</span> <span class="n">a</span>
    <span class="o">-&gt;</span> <span class="p">(</span><span class="n">e</span> <span class="o">-&gt;</span> <span class="n">m</span> <span class="n">a</span><span class="p">)</span>
    <span class="o">-&gt;</span> <span class="n">m</span> <span class="n">a</span>
</code></pre></div></div>

<p>That <code class="language-plaintext highlighter-rouge">HasCallStack</code> constraint is used to give you a <code class="language-plaintext highlighter-rouge">CallStack</code> entry for any time that you <code class="language-plaintext highlighter-rouge">catch</code> an exception.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">newtype</span> <span class="kt">MyException</span> <span class="o">=</span> <span class="kt">MyException</span> <span class="kt">String</span>
    <span class="kr">deriving</span> <span class="kt">Show</span>

<span class="kr">instance</span> <span class="kt">Exception</span> <span class="kt">MyException</span>

<span class="n">boom</span> <span class="o">::</span> <span class="kt">IO</span> <span class="kt">Int</span>
<span class="n">boom</span> <span class="o">=</span> <span class="n">throw</span> <span class="p">(</span><span class="kt">MyException</span> <span class="s">&quot;boom&quot;</span><span class="p">)</span>

<span class="n">recovery</span> <span class="o">::</span> <span class="kt">IO</span> <span class="kt">Int</span>
<span class="n">recovery</span> <span class="o">=</span>
    <span class="n">boom</span> <span class="p">`</span><span class="n">catch</span><span class="p">`</span> <span class="nf">\</span><span class="p">(</span><span class="kt">MyException</span> <span class="n">message</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kr">do</span>
        <span class="n">putStrLn</span> <span class="n">message</span>
        <span class="n">throw</span> <span class="p">(</span><span class="kt">MyException</span> <span class="p">(</span><span class="n">message</span> <span class="o">++</span> <span class="s">&quot; recovered&quot;</span><span class="p">))</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">recovery</code> catches the <code class="language-plaintext highlighter-rouge">MyException</code> from <code class="language-plaintext highlighter-rouge">boom</code>, prints the message, and then throws a <em>new</em> exception with a modified message.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">λ</span><span class="o">&gt;</span> <span class="n">recovery</span>
<span class="n">boom</span>
<span class="o">***</span> <span class="kt">Exception</span><span class="o">:</span> 
    <span class="kt">AnnotatedException</span> 
        <span class="p">{</span> <span class="n">annotations</span> <span class="o">=</span> 
            <span class="p">[</span> <span class="kt">Annotation</span> <span class="o">@</span><span class="kt">CallStack</span> 
                <span class="p">[</span> <span class="p">(</span> <span class="s">&quot;throw&quot;</span>
                  <span class="p">,</span> <span class="kt">SrcLoc</span> <span class="p">{</span><span class="n">srcLocPackage</span> <span class="o">=</span> <span class="s">&quot;main&quot;</span><span class="p">,</span> <span class="n">srcLocModule</span> <span class="o">=</span> <span class="s">&quot;Annotated&quot;</span><span class="p">,</span> <span class="n">srcLocFile</span> <span class="o">=</span> <span class="s">&quot;src/annotated.hs&quot;</span><span class="p">,</span> <span class="n">srcLocStartLine</span> <span class="o">=</span> <span class="mi">19</span><span class="p">,</span> <span class="n">srcLocStartCol</span> <span class="o">=</span> <span class="mi">9</span><span class="p">,</span> <span class="n">srcLocEndLine</span> <span class="o">=</span> <span class="mi">19</span><span class="p">,</span> <span class="n">srcLocEndCol</span> <span class="o">=</span> <span class="mi">54</span><span class="p">}</span>
                  <span class="p">)</span>
                <span class="p">,</span> <span class="p">(</span> <span class="s">&quot;throw&quot;</span>
                  <span class="p">,</span> <span class="kt">SrcLoc</span> <span class="p">{</span><span class="n">srcLocPackage</span> <span class="o">=</span> <span class="s">&quot;main&quot;</span><span class="p">,</span> <span class="n">srcLocModule</span> <span class="o">=</span> <span class="s">&quot;Annotated&quot;</span><span class="p">,</span> <span class="n">srcLocFile</span> <span class="o">=</span> <span class="s">&quot;src/annotated.hs&quot;</span><span class="p">,</span> <span class="n">srcLocStartLine</span> <span class="o">=</span> <span class="mi">13</span><span class="p">,</span> <span class="n">srcLocStartCol</span> <span class="o">=</span> <span class="mi">8</span><span class="p">,</span> <span class="n">srcLocEndLine</span> <span class="o">=</span> <span class="mi">13</span><span class="p">,</span> <span class="n">srcLocEndCol</span> <span class="o">=</span> <span class="mi">34</span><span class="p">}</span>
                  <span class="p">)</span>
                <span class="p">,</span> <span class="p">(</span> <span class="s">&quot;catch&quot;</span>
                  <span class="p">,</span> <span class="kt">SrcLoc</span> <span class="p">{</span><span class="n">srcLocPackage</span> <span class="o">=</span> <span class="s">&quot;main&quot;</span><span class="p">,</span> <span class="n">srcLocModule</span> <span class="o">=</span> <span class="s">&quot;Annotated&quot;</span><span class="p">,</span> <span class="n">srcLocFile</span> <span class="o">=</span> <span class="s">&quot;src/annotated.hs&quot;</span><span class="p">,</span> <span class="n">srcLocStartLine</span> <span class="o">=</span> <span class="mi">17</span><span class="p">,</span> <span class="n">srcLocStartCol</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span> <span class="n">srcLocEndLine</span> <span class="o">=</span> <span class="mi">19</span><span class="p">,</span> <span class="n">srcLocEndCol</span> <span class="o">=</span> <span class="mi">54</span><span class="p">}</span>
                  <span class="p">)</span>
                <span class="p">]</span>
            <span class="p">]</span>
        <span class="p">,</span> <span class="n">exception</span> <span class="o">=</span> <span class="kt">MyException</span> <span class="s">&quot;boom recovered&quot;</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>Now, look at that call stack: we have the first <code class="language-plaintext highlighter-rouge">throw</code> (from <code class="language-plaintext highlighter-rouge">boom</code>), then we have the <em>second</em> <code class="language-plaintext highlighter-rouge">throw</code> (in <code class="language-plaintext highlighter-rouge">recovery</code>), and finally the <code class="language-plaintext highlighter-rouge">catch</code> in <code class="language-plaintext highlighter-rouge">recovery</code>.</p>

<p>So we know where the exception originally happened, where it was rethrown, and where it was caught.
This is fantastic!</p>

<p>But, even better - these annotations survive <em>even if you throw a different type of <code class="language-plaintext highlighter-rouge">Exception</code></em>.
This means you can translate exceptions fearlessly, knowing that any essential annotated context won’t be lost.</p>

<h1 id="dynamic-annotations">Dynamic Annotations</h1>

<p>As I said earlier, <code class="language-plaintext highlighter-rouge">CallStack</code> is fine, but it’s a <em>static</em> thing.
We can figure out “what code called what other code” that eventually led to an exception, but we can’t know anything about the running state of the program.</p>

<p>Enter <code class="language-plaintext highlighter-rouge">checkpoint</code>.
This function attaches an arbitrary <code class="language-plaintext highlighter-rouge">Annotation</code> to thrown exceptions.
An <code class="language-plaintext highlighter-rouge">Annotation</code> is a wrapper around any value that has an instance of <code class="language-plaintext highlighter-rouge">Show</code> and <code class="language-plaintext highlighter-rouge">Typeable</code>.
The library provides an instance of <code class="language-plaintext highlighter-rouge">IsString</code> for this, so you can enable <code class="language-plaintext highlighter-rouge">OverloadedStrings</code> and have stringly-typed annotations.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">constantAnnotation</span> <span class="o">::</span> <span class="kt">IO</span> <span class="kt">String</span>
<span class="n">constantAnnotation</span> <span class="o">=</span>
    <span class="n">checkpoint</span> <span class="s">&quot;from constant annotation&quot;</span> <span class="o">$</span> <span class="kr">do</span>
        <span class="n">msg</span> <span class="o">&lt;-</span> <span class="n">getLine</span>
        <span class="kr">if</span> <span class="n">null</span> <span class="n">msg</span>
            <span class="kr">then</span> <span class="n">throw</span> <span class="p">(</span><span class="kt">MyException</span> <span class="s">&quot;empty message&quot;</span><span class="p">)</span>
            <span class="kr">else</span> <span class="n">pure</span> <span class="n">msg</span>
</code></pre></div></div>

<p>But the real power is in using <em>runtime data</em> to annotate things.</p>

<p>Let’s imagine you’ve got a web application.
You’re reporting runtime exceptions to a service, like Bugsnag.
Specific teams “own” routes, so if something breaks, you want to alert the right team.</p>

<p>You can annotate thrown exceptions with the <em>route</em>.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">data</span> <span class="kt">Route</span> 
    <span class="o">=</span> <span class="kt">Login</span>
    <span class="o">|</span> <span class="kt">Signup</span>
    <span class="o">|</span> <span class="kt">ViewPosts</span>
    <span class="o">|</span> <span class="kt">CreatePost</span>
    <span class="o">|</span> <span class="kt">EditPost</span> <span class="kt">PostId</span>
    <span class="kr">deriving</span> <span class="kt">Show</span>

<span class="n">dispatch</span> <span class="o">::</span> <span class="kt">Request</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="kt">Response</span>
<span class="n">dispatch</span> <span class="n">req</span> <span class="o">=</span> 
    <span class="kr">case</span> <span class="n">parseRequest</span> <span class="n">req</span> <span class="kr">of</span>
        <span class="kt">Right</span> <span class="n">route</span> <span class="o">-&gt;</span>
            <span class="n">checkpoint</span> <span class="p">(</span><span class="kt">Annotation</span> <span class="n">route</span><span class="p">)</span> <span class="o">$</span> 
                <span class="kr">case</span> <span class="n">route</span> <span class="kr">of</span>
                    <span class="kt">Login</span> <span class="o">-&gt;</span>
                        <span class="n">handleLogin</span>
                    <span class="kt">Signup</span> <span class="o">-&gt;</span> 
                        <span class="n">handleSignup</span>
                    <span class="kt">ViewPosts</span> <span class="o">-&gt;</span>
                        <span class="n">handleViewPosts</span>
                    <span class="kt">CreatePost</span> <span class="o">-&gt;</span>
                        <span class="n">handleCreatePost</span>
                    <span class="kt">EditPost</span> <span class="n">postId</span> <span class="o">-&gt;</span>
                        <span class="n">checkpoint</span> <span class="p">(</span><span class="kt">Annotation</span> <span class="n">postId</span><span class="p">)</span> <span class="o">$</span>
                            <span class="n">handleEditPost</span> <span class="n">postId</span>
        <span class="kt">Left</span> <span class="kr">_</span> <span class="o">-&gt;</span>
            <span class="n">invalidRouteError</span>
</code></pre></div></div>

<p>Now, suppose an exception is thrown somewhere in <code class="language-plaintext highlighter-rouge">handleLogin</code>.
It’s going to bubble up past <code class="language-plaintext highlighter-rouge">dispatch</code> and get handled by the Warp default exception handler.
That’s going to dig into the <code class="language-plaintext highlighter-rouge">[Annotation]</code> and use that to alter the report we send to Bugsnag.
The team that is responsible for <code class="language-plaintext highlighter-rouge">handleLogin</code> gets a notification that something broke there.</p>

<p>In the <code class="language-plaintext highlighter-rouge">EditPost</code> case, we’ve <em>also</em> annotated the exception with <em>the post ID that we’re trying to edit</em>.
This means that, when debugging, we can know <em>exactly</em> which post threw the given exception.
Now, when diagnosing and debugging, we can immediately pull up the problematic entry.
This gives us much more information about the problem, which makes diagnosis easier.</p>

<p>Likewise, suppose we have a function that gives us the logged in user:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">withLoggedInUser</span> <span class="o">::</span> <span class="p">(</span><span class="kt">Maybe</span> <span class="p">(</span><span class="kt">Entity</span> <span class="kt">User</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="n">a</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="n">a</span>
<span class="n">withLoggedInUser</span> <span class="n">action</span> <span class="o">=</span> <span class="kr">do</span>
    <span class="n">muser</span> <span class="o">&lt;-</span> <span class="n">getLoggedInUser</span>
    <span class="n">checkpoint</span> <span class="p">(</span><span class="kt">Annotation</span> <span class="p">(</span><span class="n">fmap</span> <span class="n">entityKey</span> <span class="n">muser</span><span class="p">))</span> <span class="o">$</span> <span class="kr">do</span>
        <span class="n">action</span> <span class="n">muser</span>
</code></pre></div></div>

<p>If the action we pass in to <code class="language-plaintext highlighter-rouge">withLoggedInUser</code> throws an exception, that exception will carry the <code class="language-plaintext highlighter-rouge">Maybe UserId</code> of whoever was logged in.
Now, we can easily know <em>who</em> is having a problem on our service, in addition to what the problem actually is.</p>

<h1 id="the-value-of-transparency">The Value of Transparency</h1>

<blockquote>
  <p>But wait - if all exceptions are wrapped with this <code class="language-plaintext highlighter-rouge">AnnotatedException</code> type, then how do I catch things? Won’t this pollute my codebase?</p>

  <p>And, what happens if I try to catch an <code class="language-plaintext highlighter-rouge">AnnotatedException MyException</code> but some other code only threw a <em>plain</em> <code class="language-plaintext highlighter-rouge">MyException</code>? Won’t that break things?</p>
</blockquote>

<p>These are great questions.</p>

<p><code class="language-plaintext highlighter-rouge">catch</code> and <code class="language-plaintext highlighter-rouge">try</code> from other libraries will fail to catch a <code class="language-plaintext highlighter-rouge">FooException</code> if the real type of the exception is <code class="language-plaintext highlighter-rouge">AnnotatedException FooException</code>.
However, <code class="language-plaintext highlighter-rouge">catch</code> and <code class="language-plaintext highlighter-rouge">try</code> from <code class="language-plaintext highlighter-rouge">annotated-exception</code> is capable of “seeing through” the <code class="language-plaintext highlighter-rouge">AnnotatedException</code> wrapper.</p>

<p>In fact, we took advantage of this earlier - here’s the code for <code class="language-plaintext highlighter-rouge">recovery</code> again:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">boom</span> <span class="o">::</span> <span class="kt">IO</span> <span class="kt">Int</span>
<span class="n">boom</span> <span class="o">=</span> <span class="n">throw</span> <span class="p">(</span><span class="kt">MyException</span> <span class="s">&quot;boom&quot;</span><span class="p">)</span>

<span class="n">recovery</span> <span class="o">::</span> <span class="kt">IO</span> <span class="kt">Int</span>
<span class="n">recovery</span> <span class="o">=</span>
    <span class="n">boom</span> <span class="p">`</span><span class="n">catch</span><span class="p">`</span> <span class="nf">\</span><span class="p">(</span><span class="kt">MyException</span> <span class="n">message</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kr">do</span>
        <span class="n">putStrLn</span> <span class="n">message</span>
        <span class="n">throw</span> <span class="p">(</span><span class="kt">MyException</span> <span class="p">(</span><span class="n">message</span> <span class="o">++</span> <span class="s">&quot; recovered&quot;</span><span class="p">))</span>
</code></pre></div></div>

<p>Note how <code class="language-plaintext highlighter-rouge">catch</code> doesn’t say <em>anything</em> about annotations.
We catch a <code class="language-plaintext highlighter-rouge">MyException</code>, exactly like you would in <code class="language-plaintext highlighter-rouge">Control.Exception</code>, and the annotations are propagated.</p>

<p>But, let’s say you want to catch the <code class="language-plaintext highlighter-rouge">AnnotatedException MyException</code>.
You just <em>do that</em>.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">recoveryAnnotated</span> <span class="o">::</span> <span class="kt">IO</span> <span class="kt">Int</span>
<span class="n">recoveryAnnotated</span> <span class="o">=</span>
    <span class="n">boom</span> <span class="p">`</span><span class="n">catch</span><span class="p">`</span> <span class="nf">\</span><span class="p">(</span><span class="kt">AnnotatedException</span> <span class="n">annotations</span> <span class="p">(</span><span class="kt">MyException</span> <span class="n">message</span><span class="p">))</span> <span class="o">-&gt;</span> <span class="kr">do</span>
        <span class="n">putStrLn</span> <span class="n">message</span>
        <span class="n">traverse</span> <span class="n">print</span> <span class="n">annotations</span>
        <span class="n">throw</span> <span class="p">(</span><span class="kt">OtherException</span> <span class="p">(</span><span class="n">length</span> <span class="n">message</span><span class="p">))</span>

<span class="c1">-- in GHCi,</span>
<span class="err">λ</span><span class="o">&gt;</span> <span class="n">recoveryAnnotated</span>
<span class="n">boom</span>
<span class="kt">Annotation</span> <span class="o">@</span><span class="kt">CallStack</span> <span class="p">[(</span><span class="s">&quot;throw&quot;</span><span class="p">,</span><span class="kt">SrcLoc</span> <span class="p">{</span><span class="n">srcLocPackage</span> <span class="o">=</span> <span class="s">&quot;main&quot;</span><span class="p">,</span> <span class="n">srcLocModule</span> <span class="o">=</span> <span class="s">&quot;Annotated&quot;</span><span class="p">,</span> <span class="n">srcLocFile</span> <span class="o">=</span> <span class="s">&quot;src/annotated.hs&quot;</span><span class="p">,</span> <span class="n">srcLocStartLine</span> <span class="o">=</span> <span class="mi">13</span><span class="p">,</span> <span class="n">srcLocStartCol</span> <span class="o">=</span> <span class="mi">8</span><span class="p">,</span> <span class="n">srcLocEndLine</span> <span class="o">=</span> <span class="mi">13</span><span class="p">,</span> <span class="n">srcLocEndCol</span> <span class="o">=</span> <span class="mi">34</span><span class="p">})]</span>
<span class="o">***</span> <span class="kt">Exception</span><span class="o">:</span> 
    <span class="kt">AnnotatedException</span> 
        <span class="p">{</span> <span class="n">annotations</span> <span class="o">=</span> 
            <span class="p">[</span> <span class="kt">Annotation</span> <span class="o">@</span><span class="kt">CallStack</span> 
                <span class="p">[</span> <span class="p">(</span> <span class="s">&quot;throw&quot;</span>
                  <span class="p">,</span> <span class="kt">SrcLoc</span> <span class="p">{</span><span class="n">srcLocPackage</span> <span class="o">=</span> <span class="s">&quot;main&quot;</span><span class="p">,</span> <span class="n">srcLocModule</span> <span class="o">=</span> <span class="s">&quot;Annotated&quot;</span><span class="p">,</span> <span class="n">srcLocFile</span> <span class="o">=</span> <span class="s">&quot;src/annotated.hs&quot;</span><span class="p">,</span> <span class="n">srcLocStartLine</span> <span class="o">=</span> <span class="mi">37</span><span class="p">,</span> <span class="n">srcLocStartCol</span> <span class="o">=</span> <span class="mi">9</span><span class="p">,</span> <span class="n">srcLocEndLine</span> <span class="o">=</span> <span class="mi">37</span><span class="p">,</span> <span class="n">srcLocEndCol</span> <span class="o">=</span> <span class="mi">48</span><span class="p">}</span>
                  <span class="p">)</span>
                <span class="p">]</span>
            <span class="p">]</span>
        <span class="p">,</span> <span class="n">exception</span> <span class="o">=</span> <span class="kt">OtherException</span> <span class="mi">4</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>Now, something tricky occurs here: we don’t preserve the annotations on the thrown exception.
If you catch an <code class="language-plaintext highlighter-rouge">AnnotatedException</code>, the library assumes that you’re going to handle those yourself.</p>

<p>If you want to keep them, you’d need to throw an <code class="language-plaintext highlighter-rouge">AnnotatedException</code>:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">recoveryAnnotatedPreserve</span> <span class="o">::</span> <span class="kt">IO</span> <span class="kt">Int</span>
<span class="n">recoveryAnnotatedPreserve</span> <span class="o">=</span>
    <span class="n">boom</span> <span class="p">`</span><span class="n">catch</span><span class="p">`</span> <span class="nf">\</span><span class="p">(</span><span class="kt">AnnotatedException</span> <span class="n">annotations</span> <span class="p">(</span><span class="kt">MyException</span> <span class="n">message</span><span class="p">))</span> <span class="o">-&gt;</span> <span class="kr">do</span>
        <span class="n">putStrLn</span> <span class="n">message</span>
        <span class="n">traverse</span> <span class="n">print</span> <span class="n">annotations</span>
        <span class="n">throw</span> <span class="p">(</span><span class="kt">AnnotatedException</span> <span class="n">annotations</span> <span class="p">(</span><span class="kt">OtherException</span> <span class="p">(</span><span class="n">length</span> <span class="n">message</span><span class="p">)))</span>

<span class="c1">-- in GHCi,</span>
<span class="err">λ</span><span class="o">&gt;</span> <span class="n">recoveryAnnotatedPreserve</span> 
<span class="n">boom</span>
<span class="kt">Annotation</span> <span class="o">@</span><span class="kt">CallStack</span> <span class="p">[(</span><span class="s">&quot;throw&quot;</span><span class="p">,</span><span class="kt">SrcLoc</span> <span class="p">{</span><span class="n">srcLocPackage</span> <span class="o">=</span> <span class="s">&quot;main&quot;</span><span class="p">,</span> <span class="n">srcLocModule</span> <span class="o">=</span> <span class="s">&quot;Annotated&quot;</span><span class="p">,</span> <span class="n">srcLocFile</span> <span class="o">=</span> <span class="s">&quot;src/annotated.hs&quot;</span><span class="p">,</span> <span class="n">srcLocStartLine</span> <span class="o">=</span> <span class="mi">13</span><span class="p">,</span> <span class="n">srcLocStartCol</span> <span class="o">=</span> <span class="mi">8</span><span class="p">,</span> <span class="n">srcLocEndLine</span> <span class="o">=</span> <span class="mi">13</span><span class="p">,</span> <span class="n">srcLocEndCol</span> <span class="o">=</span> <span class="mi">34</span><span class="p">})]</span>
<span class="o">***</span> <span class="kt">Exception</span><span class="o">:</span> 
    <span class="kt">AnnotatedException</span> 
        <span class="p">{</span> <span class="n">annotations</span> <span class="o">=</span> 
            <span class="p">[</span> <span class="kt">Annotation</span> <span class="o">@</span><span class="kt">CallStack</span> 
                <span class="p">[</span> <span class="p">(</span> <span class="s">&quot;throw&quot;</span>
                  <span class="p">,</span> <span class="kt">SrcLoc</span> <span class="p">{</span><span class="n">srcLocPackage</span> <span class="o">=</span> <span class="s">&quot;main&quot;</span><span class="p">,</span> <span class="n">srcLocModule</span> <span class="o">=</span> <span class="s">&quot;Annotated&quot;</span><span class="p">,</span> <span class="n">srcLocFile</span> <span class="o">=</span> <span class="s">&quot;src/annotated.hs&quot;</span><span class="p">,</span> <span class="n">srcLocStartLine</span> <span class="o">=</span> <span class="mi">44</span><span class="p">,</span> <span class="n">srcLocStartCol</span> <span class="o">=</span> <span class="mi">9</span><span class="p">,</span> <span class="n">srcLocEndLine</span> <span class="o">=</span> <span class="mi">44</span><span class="p">,</span> <span class="n">srcLocEndCol</span> <span class="o">=</span> <span class="mi">81</span><span class="p">}</span>
                  <span class="p">)</span>
                <span class="p">]</span>
            <span class="p">,</span> <span class="kt">Annotation</span> <span class="o">@</span><span class="kt">CallStack</span> 
                <span class="p">[</span> <span class="p">(</span> <span class="s">&quot;throw&quot;</span>
                  <span class="p">,</span> <span class="kt">SrcLoc</span> <span class="p">{</span><span class="n">srcLocPackage</span> <span class="o">=</span> <span class="s">&quot;main&quot;</span><span class="p">,</span> <span class="n">srcLocModule</span> <span class="o">=</span> <span class="s">&quot;Annotated&quot;</span><span class="p">,</span> <span class="n">srcLocFile</span> <span class="o">=</span> <span class="s">&quot;src/annotated.hs&quot;</span><span class="p">,</span> <span class="n">srcLocStartLine</span> <span class="o">=</span> <span class="mi">13</span><span class="p">,</span> <span class="n">srcLocStartCol</span> <span class="o">=</span> <span class="mi">8</span><span class="p">,</span> <span class="n">srcLocEndLine</span> <span class="o">=</span> <span class="mi">13</span><span class="p">,</span> <span class="n">srcLocEndCol</span> <span class="o">=</span> <span class="mi">34</span><span class="p">}</span>
                  <span class="p">)</span>
                <span class="p">]</span>
            <span class="p">]</span>
        <span class="p">,</span> <span class="n">exception</span> <span class="o">=</span> <span class="kt">OtherException</span> <span class="mi">4</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>We’re missing <code class="language-plaintext highlighter-rouge">catch</code>, which is unfortunate, but <em>generally</em> you aren’t going to be doing this - you’re either going to be handling an error completely, or rethrowing it, and the <code class="language-plaintext highlighter-rouge">[Annotation]</code> won’t be relevant to you… unless you’re writing an integration with Bugsnag, or reporting on them in some other way.</p>

<p>So <code class="language-plaintext highlighter-rouge">annotated-exception</code>’s exception handling functions can “see through” an <code class="language-plaintext highlighter-rouge">AnnotatedException inner</code> to work only on the <code class="language-plaintext highlighter-rouge">inner</code> exception type.
But what if I try to catch a <code class="language-plaintext highlighter-rouge">DatabaseException</code> as an <code class="language-plaintext highlighter-rouge">AnnotatedException DatabaseException</code>?</p>

<p>Turns out, the <code class="language-plaintext highlighter-rouge">Exception</code> instance of <code class="language-plaintext highlighter-rouge">AnnotatedException</code> allows you to do that.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">import</span> <span class="k">qualified</span> <span class="nn">Control.Exception</span>

<span class="n">emptyAnnotationsAreCool</span> <span class="o">::</span> <span class="kt">IO</span> <span class="nb">()</span>
<span class="n">emptyAnnotationsAreCool</span> <span class="o">=</span>
    <span class="kt">Control</span><span class="o">.</span><span class="kt">Exception</span><span class="o">.</span><span class="n">throwIO</span> <span class="p">(</span><span class="kt">MyException</span> <span class="s">&quot;definitely not annotated?&quot;</span><span class="p">)</span>
        <span class="p">`</span><span class="kt">Control</span><span class="o">.</span><span class="kt">Exception</span><span class="o">.</span><span class="n">catch</span><span class="p">`</span>
            <span class="nf">\</span><span class="p">(</span><span class="kt">AnnotatedException</span> <span class="n">annotations</span> <span class="p">(</span><span class="kt">MyException</span> <span class="n">woah</span><span class="p">))</span> <span class="o">-&gt;</span> <span class="kr">do</span>
                <span class="n">print</span> <span class="n">annotations</span>
                <span class="n">putStrLn</span> <span class="n">woah</span>


<span class="c1">-- in GHCi,</span>
<span class="err">λ</span><span class="o">&gt;</span> <span class="n">emptyAnnotationsAreCool</span> 
<span class="kt">[]</span>
<span class="n">definitely</span> <span class="n">not</span> <span class="n">annotated</span><span class="o">?</span>
</code></pre></div></div>

<p>We promote the <code class="language-plaintext highlighter-rouge">inner</code> into <code class="language-plaintext highlighter-rouge">AnnotatedException [] inner</code>.
So the library works regardless if any code you throw cares about <code class="language-plaintext highlighter-rouge">AnnotatedException</code>.
If you call some external library code which throws an exception, you’ll get the first annotation you try - including if that’s just from <code class="language-plaintext highlighter-rouge">catch</code>:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">catchPutsACallStack</span> <span class="o">::</span> <span class="kt">IO</span> <span class="nb">()</span>
<span class="n">catchPutsACallStack</span> <span class="o">=</span>
    <span class="kt">Control</span><span class="o">.</span><span class="kt">Exception</span><span class="o">.</span><span class="n">throwIO</span> <span class="p">(</span><span class="kt">MyException</span> <span class="s">&quot;definitely not annotated?&quot;</span><span class="p">)</span>
        <span class="p">`</span><span class="n">catch</span><span class="p">`</span>
            <span class="nf">\</span><span class="p">(</span><span class="kt">MyException</span> <span class="n">woah</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kr">do</span>
                <span class="n">throw</span> <span class="p">(</span><span class="kt">OtherException</span> <span class="p">(</span><span class="n">length</span> <span class="n">woah</span><span class="p">))</span>

<span class="c1">-- in GHCi,</span>
<span class="err">λ</span><span class="o">&gt;</span> <span class="n">catchPutsACallStack</span> 
<span class="o">***</span> <span class="kt">Exception</span><span class="o">:</span> 
    <span class="kt">AnnotatedException</span> 
        <span class="p">{</span> <span class="n">annotations</span> <span class="o">=</span> 
            <span class="p">[</span> <span class="kt">Annotation</span> <span class="o">@</span><span class="kt">CallStack</span> 
                <span class="p">[</span> <span class="p">(</span> <span class="s">&quot;throw&quot;</span>
                  <span class="p">,</span> <span class="kt">SrcLoc</span> <span class="p">{</span><span class="n">srcLocPackage</span> <span class="o">=</span> <span class="s">&quot;main&quot;</span><span class="p">,</span> <span class="n">srcLocModule</span> <span class="o">=</span> <span class="s">&quot;Annotated&quot;</span><span class="p">,</span> <span class="n">srcLocFile</span> <span class="o">=</span> <span class="s">&quot;../parsonsmatt.github.io/src/annotated.hs&quot;</span><span class="p">,</span> <span class="n">srcLocStartLine</span> <span class="o">=</span> <span class="mi">60</span><span class="p">,</span> <span class="n">srcLocStartCol</span> <span class="o">=</span> <span class="mi">17</span><span class="p">,</span> <span class="n">srcLocEndLine</span> <span class="o">=</span> <span class="mi">60</span><span class="p">,</span> <span class="n">srcLocEndCol</span> <span class="o">=</span> <span class="mi">53</span><span class="p">})</span>
                <span class="p">,</span> <span class="p">(</span><span class="s">&quot;catch&quot;</span>
                  <span class="p">,</span> <span class="kt">SrcLoc</span> <span class="p">{</span><span class="n">srcLocPackage</span> <span class="o">=</span> <span class="s">&quot;main&quot;</span><span class="p">,</span> <span class="n">srcLocModule</span> <span class="o">=</span> <span class="s">&quot;Annotated&quot;</span><span class="p">,</span> <span class="n">srcLocFile</span> <span class="o">=</span> <span class="s">&quot;../parsonsmatt.github.io/src/annotated.hs&quot;</span><span class="p">,</span> <span class="n">srcLocStartLine</span> <span class="o">=</span> <span class="mi">58</span><span class="p">,</span> <span class="n">srcLocStartCol</span> <span class="o">=</span> <span class="mi">9</span><span class="p">,</span> <span class="n">srcLocEndLine</span> <span class="o">=</span> <span class="mi">58</span><span class="p">,</span> <span class="n">srcLocEndCol</span> <span class="o">=</span> <span class="mi">16</span><span class="p">}</span>
                  <span class="p">)</span>
                <span class="p">]</span>
            <span class="p">]</span>
        <span class="p">,</span> <span class="n">exception</span> <span class="o">=</span> <span class="kt">OtherException</span> <span class="mi">25</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>We get <code class="language-plaintext highlighter-rouge">throw</code> and <code class="language-plaintext highlighter-rouge">catch</code> both showing up in our stack trace.
If we’d used <code class="language-plaintext highlighter-rouge">Control.Exception.throwIO</code> instead of <code class="language-plaintext highlighter-rouge">Control.Exception.Annotated.throw</code>, then we’d <em>still</em> have <code class="language-plaintext highlighter-rouge">catch</code> as an annotation.</p>

<h1 id="do-you-feel-the-power">Do you feel the power?</h1>

<p>The primary purpose here is to share the technique and inspire a hunger for dynamic exception annotations.</p>

<p>We’ve been using this technique at Mercury for most of this year.
It has <em>dramatically</em> simplified how we report exceptions, the shape of our exceptions, and how much info we get from a Bugsnag report.
It’s now much easier to diagnose problems and fix bugs.</p>

<p>The Really Big Deal here is that - we now have something <em>better</em> than other languages.
The lack of stack traces in Haskell is really annoying, and a clear way that Haskell suffers compared to Ruby or Java.
But now, with <code class="language-plaintext highlighter-rouge">annotated-exception</code>, we actually have <em>more powerful</em> and <em>more useful</em> exception annotations than a mere stack trace.
And, since this is all just library functions, you can swap to <code class="language-plaintext highlighter-rouge">Control.Exception.Annotated</code> with little fuss.</p></div>
    </summary>
    <updated>2022-08-16T00:00:00Z</updated>
    <published>2022-08-16T00:00:00Z</published>
    <source>
      <id>https://www.parsonsmatt.org</id>
      <author>
        <name>Matt Parsons</name>
      </author>
      <link href="https://www.parsonsmatt.org" rel="alternate" type="text/html">
      <link href="https://www.parsonsmatt.org/feed.xml" rel="self" type="application/rss+xml">
      <title>Overcoming Software</title>
      <updated>2022-11-02T19:03:24Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://medium.com/p/ea2f642d5175</id>
    <link href="https://cdsmithus.medium.com/geometry-dimensions-and-elections-ea2f642d5175?source=rss-18bd5acaea78------2" rel="alternate" type="text/html">
    <title>Geometry, Dimensions, and Elections</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I found this to be an interesting way to ponder the theory of elections and group decision-making, so I’m writing to share. I have not done the research to become aware of what is previously known in this area, and I make no claim that any of the thoughts contained here are new.</p><p>It’s common in the United States to approximate political opinions using a spectrum from “left” to “right”, where the left end of the spectrum represents an emphasis on social justice, and the right an emphasis on free markets and traditional values. Libertarians, on the other hand, are famous for advocating their view that politics are better described by two orthogonal dimensions, as epitomized by David Nolan in his Nolan Chart. Leaving aside a bunch of details, the idea of the chart is that an individual’s political opinions can be approximately described by a point in a two-dimensional space.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/440/1*pJnd3Rn7Ab9lznZVrvFjRw.png"><figcaption>The Nolan Chart, a well-known Libertarian advocacy tool</figcaption></figure><p>There are many legitimate criticisms of the specific choice of dimensions in the Nolan Chart, but it does capture a first step toward the perspective that interests me here. Most generally, we can consider each individual’s political opinions as living in an <em>infinite-dimensional</em> space. However, such a space can then approximated by its projection down to however many dimensions are convenient for a particular purpose, with a corresponding loss of information as the number of dimensions gets smaller.</p><p>This has a fascinating interaction with Condorcet’s paradox. If you’re not familiar with the name, Condorcet’s paradox refers to a phenomenon described by the Marquis de Condorcet in the 18th century.</p><blockquote><strong>Condorcet’s Paradox:</strong> If each member of a group has consistently ordered <strong>individual</strong> preferences among three or more options, it is nevertheless still possible that the <strong>collective</strong> preferences of the group are cyclic. That is, a majority of the group may prefer option A to option B, a majority may prefer option B to option C, and yet a majority may also prefer option C to option A. Cycles are possible of any length greater than or equal to three.</blockquote><p>For example, let’s think about an election for book club president, with three candidates: Alice, Bob, and Camille. We will write A&gt;B&gt;C to indicate that a member of the club prefers Alice as their first choice for president, followed by Bob, and finally Camille as their last choice. In all, there are six possible preference orders among the three candidates: A&gt;B&gt;C, A&gt;C&gt;B, B&gt;A&gt;C, B&gt;C&gt;A, C&gt;A&gt;B, and C&gt;B&gt;A. As Condorcet’s paradox predicts, there may be cycles in the overall preferences of the book club. For example, if 10% of members prefer A&gt;B&gt;C, 35% prefer A&gt;C&gt;B, 45% prefer B&gt;C&gt;A, and the remaining 10% prefer C&gt;A&gt;B, then you can verify that 55% of club members prefer Alice over Bob, 55% of voters prefer Bob over Camille, but 55% also prefer Camille over Alice!</p><p>This is quite inconvenient, because it means that in many elections, it’s possible for there to be no clear winner at all. But how does it relate to the dimensionality of political preferences?</p><p>Well, let’s assume for the sake of argument that political opinions are one-dimensional. I’ll describe the opinions as “left” or “right”, but the specific choice of dimension doesn’t matter. In such a model, the only question is how far left or right is optimal. Every voter would have a preference. Maybe it’s left-wing. Maybe it’s center-right. We won’t be concerned with which specific opinions the voter holds on an issue-by-issue basis, because in this world those are completely determined by just measuring how far left or right their opinions are. A voter’s preference among candidates is determined by how far each candidate is from that voter’s preferred political position.</p><p>Here are three candidates, as well as the ranges of voters who will express each possible preference. The dotted lines mark the midpoints between each of the three candidate pairs.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/580/1*m3izLRPL7ODn29dIPhLy3g.png"><figcaption>Voter preference ranges in a 3-candidate, 1-dimensional model</figcaption></figure><p>You may notice two of the six possible preference orders are missing. Voters never prefer A&gt;C&gt;B or C&gt;A&gt;B, because there is simply no position along the one-dimensional left-right axis that is closer to both A and C than it is to B. Because of this, there is also no possibility of a Condorcet cycle among these candidates. Indeed, if either A or C are preferred over B, it can only be because they are the first choice of a majority of voters, so they are preferred over any alternative.</p><p>We can go even further in this case: except for exact ties, the one unique candidate who will be preferred over all others by a majority of voters (possibly a different majority for each head-to-head contest, though!) will be the first choice of whichever voter has the <em>median</em> political preference among all the voters. However, I don’t see how to naturally generalize this observation to higher dimensions.</p><p>It is considering a second dimension that reveals the possibility of a Condorcet paradox among voters’ true preferences. That’s because the additional dimension lets candidates A and C have similarities that are not shared by B. With a second dimension, voter preferences are divided into areas, like this.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/895/1*rY4PodiZaSMnISrisV_FqQ.png"><figcaption>Voter preference ranges in a 3-candidate, 2-dimensional model</figcaption></figure><p>If you project this image onto the x axis, the candidates are the same as in the previous model. However, here we’ve added a second dimension, the y axis, in which candidate B differs significantly from A or C. There are now regions of voter preferences in which it is sensible to express candidate orderings A&gt;C&gt;B and C&gt;A&gt;B, restoring the possibility of a Condorcet paradox. Of course, we didn’t create Condorcet’s paradox by choosing to use a two-dimensional model. In a real-world scenario, voters would have expressed the preferences A&gt;C&gt;B and C&gt;A&gt;B anyway. A one-dimensional model would have to reject those voters as behaving irrationally, but a second dimension can explain them.</p><p>Similarly, suppose we add a fourth candidate into the two-dimensional model. We might see something like this:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/883/1*IXZ_QmLY0UeBf44kSmphTA.png"><figcaption>Voter preference ranges in a 4-candidate, 2-dimensional model</figcaption></figure><p>There are 24 possible candidate orderings among 4 candidates, but only 18 of them appear here. Of the eighteen, 12 are open-ended regions around the outside of the diagram that include extreme positions, while the other 6 are bounded regions that sit strictly between the others as a kind of compromise or centrism. 6 more orderings, though, are missing from the diagram entirely! That is because, like before, the model has too few dimensions to recognize how a voter could adopt one of those preferences. In this case, the six missing preferences are D&gt;A&gt;B&gt;C, D&gt;A&gt;C&gt;B, A&gt;D&gt;C&gt;B, A&gt;D&gt;B&gt;C, D&gt;C&gt;A&gt;B, and D&gt;B&gt;A&gt;C. (Curiously, these are precisely the <em>opposite preferences </em>of the six bounded areas. The same thing occurs in the one-dimensional model, where the two unrepresentable orderings were the opposite preferences for the two bounded regions of the spectrum.)</p><p>You can see, then, that a two-dimensional model such as a Nolan Chart may be more expressive than a one-dimensional model, but still fails to capture some voter preferences (and this is entirely setting aside the question of whether the Nolan Chart in particular chooses the best pair of dimensions to consider). Beyond 2 dimensions, it’s more difficult to visualize, but the same things should occur. As more candidates are added, more dimensions will be needed to explain the various preferences voters may have.</p><p>There’s definitely some hand-waving involved in the above. The most obvious example is the notion of “distance” that is assumed to accurately determine a voter’s candidate preference. In my models, I used a Euclidean distance. In reality, each voter, in addition to having their own ideal candidate as a point in the space, may also have a different metric expressing how important each dimension is to them. These concerns can be dismissed as just another example of how “all models are wrong”, but this one would need some kind of validation to rely on it for real quantitative predictions. I don’t mean it that way; only as a framework for thinking about what can happen when you apply low-dimensional reasoning to what’s ultimately a high-dimensional concept.</p><img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=ea2f642d5175" width="1"></div>
    </content>
    <updated>2022-08-13T03:10:48Z</updated>
    <published>2022-08-13T03:10:48Z</published>
    <category term="game-theory"/>
    <category term="mathematics"/>
    <author>
      <name>Chris Smith</name>
    </author>
    <source>
      <id>https://medium.com/@cdsmithus?source=rss-18bd5acaea78------2</id>
      <logo>https://cdn-images-1.medium.com/fit/c/150/150/1*rU9ddF_bkph8Qg3jip7vfw.jpeg</logo>
      <link href="https://medium.com/@cdsmithus?source=rss-18bd5acaea78------2" rel="alternate" type="text/html">
      <link href="https://medium.com/@cdsmithus/feed" rel="self" type="application/rss+xml">
      <link href="http://medium.superfeedr.com" rel="hub" type="text/html">
      <subtitle>Stories by Chris Smith on Medium</subtitle>
      <title>Stories by Chris Smith on Medium</title>
      <updated>2022-11-17T11:53:56Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://readerunner.wordpress.com/?p=109</id>
    <link href="https://readerunner.wordpress.com/2022/01/06/graphs-kites-and-darts/" rel="alternate" type="text/html">
    <link href="https://readerunner.wordpress.com/2022/01/06/graphs-kites-and-darts/#comments" rel="replies" type="text/html">
    <link href="https://readerunner.wordpress.com/2022/01/06/graphs-kites-and-darts/feed/atom/" rel="replies" type="application/atom+xml">
    <title xml:lang="en">Graphs, Kites and Darts</title>
    <summary xml:lang="en">Graphs, Kites and Darts Figure 1: Three Coloured Patches Non-periodic tilings with Penrose’s kites and darts We continue our investigation of the tilings using Haskell with Haskell Diagrams. What is new is the introduction of a planar graph representation. This allows us to define more operations on finite tilings, in particular forcing and composing. Previously […]</summary>
    <content type="xhtml" xml:lang="en"><div xmlns="http://www.w3.org/1999/xhtml"><h1 id="graphs-kites-and-darts">Graphs, Kites and Darts</h1>
<div style="text-align: center;">
<figure><img alt="Figure 1: Three Coloured Patches" src="https://readerunner.files.wordpress.com/2022/01/threeshapessample.png?w=625"><figcaption>Figure 1: Three Coloured Patches</figcaption></figure>
</div>
<p><strong>Non-periodic tilings with Penrose’s kites and darts</strong></p>
<p>We continue our investigation of the tilings using Haskell with Haskell Diagrams. What is new is the introduction of a planar graph representation. This allows us to define more operations on finite tilings, in particular <strong>forcing</strong> and <strong>composing</strong>.</p>
<p>Previously in <a href="https://readerunner.wordpress.com/2021/03/20/diagrams-for-penrose-tiles/">Diagrams for Penrose Tiles</a> we implemented tools to create and draw finite patches of Penrose kites and darts (such as the samples depicted in figure 1). The code for this and for the new graph representation and tools described here can be found on GitHub <a href="https://github.com/chrisreade/PenroseKiteDart">https://github.com/chrisreade/PenroseKiteDart</a>.</p>
<p>To describe the tiling operations it is convenient to work with the half-tiles: <code>LD</code> (left dart), <code>RD</code> (right dart), <code>LK</code> (left kite), <code>RK</code> (right kite) using a polymorphic type <code>HalfTile</code> (defined in a module <code>HalfTile</code>)</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span style="color: blue; font-weight: bold;">data</span> HalfTile rep 
 <span style="color: red;">=</span> LD rep <span style="color: red;">|</span> RD rep <span style="color: red;">|</span> LK rep <span style="color: red;">|</span> RK rep   <span style="color: blue; font-weight: bold;">deriving</span> <span style="color: red;">(</span>Show<span style="color: red;">,</span>Eq<span style="color: red;">)</span></code></pre>
<p>Here <code>rep</code> is a type variable for a representation to be chosen. For drawing purposes, we chose two-dimensional vectors (<code>V2 Double</code>) and called these <code>Pieces</code>.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span style="color: blue; font-weight: bold;">type</span> Piece <span style="color: red;">=</span> HalfTile <span style="color: red;">(</span>V2 Double<span style="color: red;">)</span></code></pre>
<p>The vector represents the join edge of the half tile (see figure 2) and thus the scale and orientation are determined (the other tile edges are derived from this when producing a diagram).</p>
<div style="text-align: center;">
<figure><img alt="Figure 2: The (half-tile) pieces showing join edges (dashed) and origin vertices (red dots)" src="https://readerunner.files.wordpress.com/2022/01/newpiecesfig.png?w=625"><figcaption>Figure 2: The (half-tile) pieces showing join edges (dashed) and origin vertices (red dots)</figcaption></figure>
</div>
<p>Finite tilings or <em>patches</em> are then lists of located pieces.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span style="color: blue; font-weight: bold;">type</span> Patch <span style="color: red;">=</span> <span style="color: red;">[</span>Located Piece<span style="color: red;">]</span></code></pre>
<p>Both <code>Piece</code> and <code>Patch</code> are made transformable so <code>rotate</code>, and <code>scale</code> can be applied to both and <code>translate</code> can be applied to a <code>Patch</code>. (Translate has no effect on a <code>Piece</code> unless it is located.)</p>
<p>In <a href="https://readerunner.wordpress.com/2021/03/20/diagrams-for-penrose-tiles/">Diagrams for Penrose Tiles</a> we also discussed the rules for legal tilings and specifically the problem of <em>incorrect tilings</em> which are legal but get stuck so cannot continue to infinity. In order to create <em>correct tilings</em> we implemented the <code>decompose</code> operation on patches.</p>
<p>The vector representation that we use for drawing is not well suited to exploring properties of a patch such as neighbours of pieces. Knowing about neighbouring tiles is important for being able to reason about composition of patches (inverting a decomposition) and to find which pieces are determined (<em>forced</em>) on the boundary of a patch.</p>
<p>However, the polymorphic type <code>HalfTile</code> allows us to introduce our alternative graph representation alongside <code>Piece</code>s.</p>
<h1 id="tile-graphs">Tile Graphs</h1>
<p>In the module <code>Tgraph.Prelude</code>, we have the new representation which treats half tiles as triangular faces of a planar graph – a <code>TileFace</code> – by specialising <code>HalfTile</code> with a triple of vertices (clockwise starting with the tile origin). For example</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">LD <span style="color: red;">(</span><span class="hs-num">1</span><span style="color: red;">,</span><span class="hs-num">3</span><span style="color: red;">,</span><span class="hs-num">4</span><span style="color: red;">)</span>       RK <span style="color: red;">(</span><span class="hs-num">6</span><span style="color: red;">,</span><span class="hs-num">4</span><span style="color: red;">,</span><span class="hs-num">3</span><span style="color: red;">)</span></code></pre>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span style="color: blue; font-weight: bold;">type</span> Vertex <span style="color: red;">=</span> Int
<span style="color: blue; font-weight: bold;">type</span> TileFace <span style="color: red;">=</span> HalfTile <span style="color: red;">(</span>Vertex<span style="color: red;">,</span>Vertex<span style="color: red;">,</span>Vertex<span style="color: red;">)</span></code></pre>
<p>When we need to refer to particular vertices from a <code>TileFace</code> we use <code>originV</code> (the first vertex – red dot in figure 2), <code>oppV</code> (the vertex at the opposite end of the join edge – dashed edge in figure 2), <code>wingV</code> (the remaining vertex not on the join edge).</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">originV<span style="color: red;">,</span> oppV<span style="color: red;">,</span> wingV <span style="color: red;">::</span> TileFace <span style="color: red;">-&gt;</span> Vertex</code></pre>
<p><strong>Tgraphs</strong></p>
<p>The <em>Tile Graphs</em> implementation uses a type <code>Tgraph</code> which has a list of graph vertices and a list of tile faces.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span style="color: blue; font-weight: bold;">data</span> Tgraph <span style="color: red;">=</span> Tgraph <span style="color: red;">{</span> vertices <span style="color: red;">::</span> <span style="color: red;">[</span>Vertex<span style="color: red;">]</span>
                     <span style="color: red;">,</span> faces    <span style="color: red;">::</span> <span style="color: red;">[</span>TileFace<span style="color: red;">]</span>
                     <span style="color: red;">}</span>  <span style="color: blue; font-weight: bold;">deriving</span> <span style="color: red;">(</span>Show<span style="color: red;">)</span></code></pre>
<p>For example, <code>fool</code> (short for a fool’s kite) is a <code>Tgraph</code> with 6 faces and 7 vertices, shown in figure 3.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">fool <span style="color: red;">=</span> Tgraph <span style="color: red;">{</span> vertices <span style="color: red;">=</span> <span style="color: red;">[</span><span class="hs-num">1</span><span style="color: red;">,</span><span class="hs-num">2</span><span style="color: red;">,</span><span class="hs-num">3</span><span style="color: red;">,</span><span class="hs-num">4</span><span style="color: red;">,</span><span class="hs-num">5</span><span style="color: red;">,</span><span class="hs-num">6</span><span style="color: red;">,</span><span class="hs-num">7</span><span style="color: red;">]</span>
              <span style="color: red;">,</span> faces <span style="color: red;">=</span> <span style="color: red;">[</span>RD <span style="color: red;">(</span><span class="hs-num">1</span><span style="color: red;">,</span><span class="hs-num">2</span><span style="color: red;">,</span><span class="hs-num">3</span><span style="color: red;">)</span><span style="color: red;">,</span>LD <span style="color: red;">(</span><span class="hs-num">1</span><span style="color: red;">,</span><span class="hs-num">3</span><span style="color: red;">,</span><span class="hs-num">4</span><span style="color: red;">)</span><span style="color: red;">,</span>RK <span style="color: red;">(</span><span class="hs-num">6</span><span style="color: red;">,</span><span class="hs-num">2</span><span style="color: red;">,</span><span class="hs-num">5</span><span style="color: red;">)</span>
                        <span style="color: red;">,</span>LK <span style="color: red;">(</span><span class="hs-num">6</span><span style="color: red;">,</span><span class="hs-num">3</span><span style="color: red;">,</span><span class="hs-num">2</span><span style="color: red;">)</span><span style="color: red;">,</span>RK <span style="color: red;">(</span><span class="hs-num">6</span><span style="color: red;">,</span><span class="hs-num">4</span><span style="color: red;">,</span><span class="hs-num">3</span><span style="color: red;">)</span><span style="color: red;">,</span>LK <span style="color: red;">(</span><span class="hs-num">6</span><span style="color: red;">,</span><span class="hs-num">7</span><span style="color: red;">,</span><span class="hs-num">4</span><span style="color: red;">)</span>
                        <span style="color: red;">]</span>
              <span style="color: red;">}</span></code></pre>
<p>(The fool is also called an <em>ace</em> in the literature)</p>
<div style="text-align: center;">
<figure><img alt="Figure 3: fool" src="https://readerunner.files.wordpress.com/2022/01/foolfig.png?w=625"><figcaption>Figure 3: <code>fool</code></figcaption></figure>
</div>
<p>With this representation we can investigate how composition works with whole patches. Figure 4 shows a twice decomposed sun on the left and a once decomposed sun on the right (both with vertex labels). In addition to decomposing the right graph to form the left graph, we can also compose the left graph to get the right graph.</p>
<div style="text-align: center;">
<figure><img alt="Figure 4: sunD2 and sunD" src="https://readerunner.files.wordpress.com/2022/01/figsund2d.png?w=625"><figcaption>Figure 4: <code>sunD2</code> and <code>sunD</code></figcaption></figure>
</div>
<p>After implementing composition, we also explore a <em>force</em> operation and an <em>emplace</em> operation to extend tilings.</p>
<p>There are some constraints we impose on <code>Tgraph</code>s.</p>
<ul>
<li><em>No spurious vertices</em>. Every vertex of a <code>Tgraph</code> face must be one of the <code>Tgraph</code> vertices and each of the <code>Tgraph</code> vertices occurs in at least one of the <code>Tgraph</code> faces.</li>
<li><em>Connected</em>. The collection of faces must be a single connected component.</li>
<li><em>No crossing boundaries</em>. By this we mean that vertices on the boundary are incident with exactly two boundary edges. The boundary consists of the edges between the <code>Tgraph</code> faces and exterior region(s). This is important for adding faces.</li>
<li><em>Tile connected</em>. Roughly, this means that if we collect the faces of a <code>Tgraph</code> by starting from any single face and then add faces which share an edge with those already collected, we get all the <code>Tgraph</code> faces. This is important for drawing purposes.</li>
</ul>
<p>In fact, if a <code>Tgraph</code> is <em>connected</em> with <em>no crossing boundaries</em>, then it must be <em>tile connected</em>. (We could define <em>tile connected</em> to mean that the dual graph excluding exterior regions is connected.)</p>
<p>Figure 5 shows two excluded graphs which have crossing boundaries at 4 (left graph) and 13 (right graph). The left graph is still tile connected but the right is not tile connected (the two faces at the top right do not have an edge in common with the rest of the faces.)</p>
<p>Although we have allowed for <code>Tgraphs</code> with holes (multiple exterior regions), we note that such holes cannot be created by adding faces one at a time without creating a crossing boundary. They can be created by removing faces from a <code>Tgraph</code> without necessarily creating a crossing boundary.</p>
<p><strong>Important</strong> We are using <em>face</em> as an abbreviation for half-tile face of a <code>Tgraph</code> here, and we do not count the exterior of a patch of faces to be a face. The exterior can also be disconnected when we have holes in a patch of faces and the holes are not counted as faces either. In graph theory, the term <em>face</em> would generally include these other regions, but we will call them <em>exterior regions</em> rather than faces.</p>
<div style="text-align: center;">
<figure><img alt="Figure 5: A face-connected graph with crossing boundaries at 4, and a non face-connected graph" src="https://readerunner.files.wordpress.com/2022/01/crossingbdryfig.png?w=625"><figcaption>Figure 5: A tile-connected graph with crossing boundaries at 4, and a non tile-connected graph</figcaption></figure>
</div>
<p>In addition to the constructor <code>Tgraph</code> we also use</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">checkedTgraph<span style="color: red;">::</span> <span style="color: red;">[</span>TileFace<span style="color: red;">]</span> <span style="color: red;">-&gt;</span> Tgraph</code></pre>
<p>which creates a <code>Tgraph</code> from a list of faces, but also performs checks on the required properties of <code>Tgraph</code>s. We can then remove or select faces from a <code>Tgraph</code> and then use <code>checkedTgraph</code> to ensure the resulting <code>Tgraph</code> still satisfies the required properties.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">selectFaces<span style="color: red;">,</span> removeFaces  <span style="color: red;">::</span> <span style="color: red;">[</span>TileFace<span style="color: red;">]</span> <span style="color: red;">-&gt;</span> Tgraph <span style="color: red;">-&gt;</span> Tgraph
selectFaces fcs g <span style="color: red;">=</span> checkedTgraph <span style="color: red;">(</span>faces g `intersect` fcs<span style="color: red;">)</span>
removeFaces fcs g <span style="color: red;">=</span> checkedTgraph <span style="color: red;">(</span>faces g \\ fcs<span style="color: red;">)</span></code></pre>
<p><strong>Edges and Directed Edges</strong></p>
<p>We do not explicitly record edges as part of a Tgraph, but calculate them as needed. Implicitly we are requiring</p>
<ul>
<li><em>No spurious edges</em>. The edges of a <code>Tgraph</code> are the edges of the faces of the <code>Tgraph</code>.</li>
</ul>
<p>To represent edges, a pair of vertices (a,b) is regarded as a <em>directed</em> edge from a to b. A list of such pairs will usually be regarded as a <em>directed</em> edge list. In the special case that the list is symmetrically closed [(b,a) is in the list whenever (a,b) is in the list] we will refer to this as an <em>edge list</em> rather than a directed edge list.</p>
<p>The following functions on <code>TileFace</code>s all produce directed edges (going clockwise round a face).</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">  <span style="color: green;">-- join edge - dashed in figure 2</span>
joinE  <span style="color: red;">::</span> TileFace <span style="color: red;">-&gt;</span> <span style="color: red;">(</span>Vertex<span style="color: red;">,</span>Vertex<span style="color: red;">)</span>
  <span style="color: green;">-- the short edge which is not a join edge</span>
shortE <span style="color: red;">::</span> TileFace <span style="color: red;">-&gt;</span> <span style="color: red;">(</span>Vertex<span style="color: red;">,</span>Vertex<span style="color: red;">)</span>
  <span style="color: green;">-- the long edge which is not a join edge</span>
longE  <span style="color: red;">::</span> TileFace <span style="color: red;">-&gt;</span> <span style="color: red;">(</span>Vertex<span style="color: red;">,</span>Vertex<span style="color: red;">)</span>
 <span style="color: green;">-- all three directed edges clockwise from origin</span>
faceDedges <span style="color: red;">::</span> TileFace <span style="color: red;">-&gt;</span> <span style="color: red;">[</span><span style="color: red;">(</span>Vertex<span style="color: red;">,</span>Vertex<span style="color: red;">)</span><span style="color: red;">]</span></code></pre>
<p>For the whole <code>Tgraph</code>, we often want a list of all the directed edges of all the faces.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">graphDedges <span style="color: red;">::</span> Tgraph <span style="color: red;">-&gt;</span> <span style="color: red;">[</span><span style="color: red;">(</span>Vertex<span style="color: red;">,</span>Vertex<span style="color: red;">)</span><span style="color: red;">]</span>
graphDedges g <span style="color: red;">=</span> concatMap faceDedges <span style="color: red;">(</span>faces g<span style="color: red;">)</span></code></pre>
<p>Because our graphs represent tilings they are planar (can be embedded in a plane) so we know that at most two faces can share an edge and they will have opposite directions of the edge. <em>No two faces can have the same directed edge</em>. So from <code>graphDedges g</code> we can easily calculate internal edges (edges shared by 2 faces) and boundary directed edges (directed edges round the external regions).</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">internalEdges<span style="color: red;">,</span> boundaryDedges <span style="color: red;">::</span> Tgraph <span style="color: red;">-&gt;</span> <span style="color: red;">[</span><span style="color: red;">(</span>Vertex<span style="color: red;">,</span>Vertex<span style="color: red;">)</span><span style="color: red;">]</span></code></pre>
<p>The internal edges of <code>g</code> are those edges which occur in both directions in <code>graphDedges g</code>. The boundary directed edges of <code>g</code> are the missing reverse directions in <code>graphDedges g</code>.</p>
<p>We also refer to all the long edges of a <code>Tgraph</code> (including kite join edges) as <code>phiEdges</code> (both directions of these edges).</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">phiEdges <span style="color: red;">::</span> Tgraph <span style="color: red;">-&gt;</span> <span style="color: red;">[</span><span style="color: red;">(</span>Vertex<span style="color: red;">,</span> Vertex<span style="color: red;">)</span><span style="color: red;">]</span></code></pre>
<p>This is so named because, when drawn, these long edges are <code>phi</code> times the length of the short edges (<code>phi</code> being the golden ratio which is approximately 1.618).</p>
<h1 id="drawing-tgraphs-patches-and-vpatches">Drawing Tgraphs (Patches and VPatches)</h1>
<p>The module <code>Tgraph.Convert</code> contains functions to convert a <code>Tgraph</code> to our previous vector representation (<code>Patch</code>) defined in <code>TileLib</code> so we can use the existing tools to produce diagrams.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">makePatch <span style="color: red;">::</span> Tgraph <span style="color: red;">-&gt;</span> Patch

drawPatch <span style="color: red;">::</span> Patch <span style="color: red;">-&gt;</span> Diagram B <span style="color: green;">-- defined in module TileLib</span>

drawGraph <span style="color: red;">::</span> Tgraph <span style="color: red;">-&gt;</span> Diagram B
drawGraph <span style="color: red;">=</span> drawPatch . makePatch</code></pre>
<p>However, it is also useful to have an intermediate stage (a <code>VPatch</code> = Vertex Patch) which contains both face (vertices) and vectors. This allows vertex labels to be drawn and for faces to be identified and retained/excluded after the vector information is calculated.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span style="color: blue; font-weight: bold;">data</span> VPatch  <span style="color: red;">=</span> VPatch <span style="color: red;">{</span>lVertices <span style="color: red;">::</span> <span style="color: red;">[</span>Located Vertex<span style="color: red;">]</span>
                      <span style="color: red;">,</span>lHybrids <span style="color: red;">::</span> <span style="color: red;">[</span>Located Hybrid<span style="color: red;">]</span>
                      <span style="color: red;">}</span></code></pre>
<p>A <code>Vpatch</code> has a list of located vertices and a list of located hybrids, where a <code>Hybrid</code> is a <code>HalfTile</code> with a dual representation of the face (vertices) and vector (join edge). We make <code>VPatch</code> transformable so it can also be an argument type for <code>rotate</code>, <code>translate</code>, and <code>scale</code>.</p>
<p>The conversion functions include</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">makeVPatch   <span style="color: red;">::</span> Tgraph <span style="color: red;">-&gt;</span> VPatch
dropVertices <span style="color: red;">::</span> VPatch <span style="color: red;">-&gt;</span> Patch <span style="color: green;">-- discards vertex information</span>
drawVPatch   <span style="color: red;">::</span> VPatch <span style="color: red;">-&gt;</span> Diagram B  <span style="color: green;">-- draws labels as well</span>

drawVGraph   <span style="color: red;">::</span> Tgraph <span style="color: red;">-&gt;</span> Diagram B
drawVGraph <span style="color: red;">=</span> drawVPatch . makeVPatch</code></pre>
<p>One consequence of using abstract graphs is that there is no unique predefined way to orient or scale or position the patch arising from a graph representation. Our implementation selects a particular join edge and aligns it along the x-axis (unit length for a dart, <code>phi</code>length for a kite) and tile-connectedness ensures the rest of the patch can be calculated from this.</p>
<p>We also have functions to re-orient a <code>Vpatch</code> and lists of <code>VPatch</code>s using chosen pairs of vertices. [Simply doing rotations on the final diagrams can cause problems if these include vertex labels. We do not, in general, want to rotate the labels – so we need to orient the <code>Vpatch</code> before converting to a diagram]</p>
<h1 id="decomposing-graphs">Decomposing Graphs</h1>
<p>We previously implemented decomposition for patches which splits each half-tile into two or three smaller scale half-tiles.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">decompose <span style="color: red;">::</span> Patch <span style="color: red;">-&gt;</span> Patch</code></pre>
<p>We now have a <code>Tgraph</code> version of decomposition in the module <code>Tgraphs</code>:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">decomposeG <span style="color: red;">::</span> Tgraph <span style="color: red;">-&gt;</span> Tgraph</code></pre>
<p>Graph decomposition is particularly simple. We start by introducing one new vertex for each long edge (the <code>phiEdges</code>) of the Tgraph. We then build the new faces from each old face using the new vertices.</p>
<p>As a running example we take <code>fool</code> (mentioned above) and its decomposition <code>foolD</code></p>
<pre><code>*Main&gt; foolD = decomposeG fool

*Main&gt; foolD
Tgraph { vertices = [1,8,3,2,9,4,5,13,10,6,11,14,7,12]
       , faces = [LK (1,8,3),RD (2,3,8),RK (1,3,9)
                 ,LD (4,9,3),RK (5,13,2),LK (5,10,13)
                 ,RD (6,13,10),LK (3,2,13),RK (3,13,11)
                 ,LD (6,11,13),RK (3,14,4),LK (3,11,14)
                 ,RD (6,14,11),LK (7,4,14),RK (7,14,12)
                 ,LD (6,12,14)
                 ]
       }</code></pre>
<p>which are best seen together (<code>fool</code> followed by <code>foolD</code>) in figure 6.</p>
<div style="text-align: center;">
<figure><img alt="Figure 6: fool and foolD (= decomposeG fool)" src="https://readerunner.files.wordpress.com/2022/01/foolandfoold.png?w=625"><figcaption>Figure 6: <code>fool</code> and <code>foolD</code> (= <code>decomposeG fool</code>)</figcaption></figure>
</div>
<h1 id="composing-graphs-and-unknowns">Composing graphs, and Unknowns</h1>
<p>Composing is meant to be an inverse to decomposing, and one of the main reasons for introducing our graph representation. In the literature, decomposition and composition are defined for infinite tilings and in that context they are unique inverses to each other. For finite patches, however, we will see that composition is not always uniquely determined.</p>
<p>In figure 7 (Two Levels) we have emphasised the larger scale faces on top of the smaller scale faces.</p>
<div style="text-align: center;">
<figure><img alt="Figure 7: Two Levels" src="https://readerunner.files.wordpress.com/2022/01/twolevelsfig.png?w=625"><figcaption>Figure 7: Two Levels</figcaption></figure>
</div>
<p>How do we identify the composed tiles? We start by classifying vertices which are at the wing tips of the (smaller) darts as these determine how things compose. In the interior of a graph/patch (e.g in figure 7), a dart wing tip always coincides with a second dart wing tip, and either</p>
<ol type="1">
<li>the 2 dart halves share a long edge. The shared wing tip is then classified as a <code>largeKiteCentre</code> and is at the centre of a larger kite. (See left vertex type in figure 8), or</li>
<li>the 2 dart halves touch at their wing tips without sharing an edge. This shared wing tip is classified as a <code>largeDartBase</code> and is the base of a larger dart. (See right vertex type in figure 8)</li>
</ol>
<div style="text-align: center;">
<figure><img alt="Figure 8: largeKiteCentre (left) and largeDartBase (right)" src="https://readerunner.files.wordpress.com/2022/01/dartwingfig.png?w=625"><figcaption>Figure 8: largeKiteCentre (left) and largeDartBase (right)</figcaption></figure>
</div>
<p>[We also call these (respectively) a deuce vertex type and a jack vertex type later in figure 10]</p>
<p>Around the boundary of a graph, the dart wing tips may not share with a second dart. Sometimes the wing tip has to be classified as <code>unknown</code> but often it can be decided by looking at neighbouring tiles. In this example of a four times decomposed sun (<code>sunD4</code>), it is possible to classify all the dart wing tips as largeKiteCentres or largeDartBases so there are no unknowns.</p>
<p>If there are no unknowns, then we have a function to produce the unique composed graph.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">composeG<span style="color: red;">::</span> Tgraph <span style="color: red;">-&gt;</span> Tgraph</code></pre>
<p>Any correct decomposed graph without unknowns will necessarily compose back to its original. This makes <code>composeG</code> a left inverse to <code>decomposeG</code> provided there are no unknowns.</p>
<p>For example, with an (<code>n</code> times) decomposed sun we will have no unknowns, so these will all compose back up to a sun after <code>n</code> applications of <code>composeG</code>. For <code>n=4</code> (<code>sunD4</code> – the smaller scale shown in figure 7) the dart wing classification returns 70 <code>largeKiteCentres</code>, 45 <code>largeDartBases</code>, and no <code>unknowns</code>.</p>
<p>Similarly with the simpler <code>foolD</code> example, if we classsify the dart wings we get</p>
<pre><code>largeKiteCentres = [14,13]
largeDartBases = [3]
unknowns = []</code></pre>
<p>In <code>foolD</code> (the right hand graph in figure 6), nodes 14 and 13 are new kite centres and node 3 is a new dart base. There are no unknowns so we can use <code>composeG</code> safely</p>
<pre><code>*Main&gt; composeG foolD
Tgraph { vertices = [1,2,3,4,5,6,7]
       , faces = [RD (1,2,3),LD (1,3,4),RK (6,2,5)
                 ,RK (6,4,3),LK (6,3,2),LK (6,7,4)
                 ]
       }</code></pre>
<p>which reproduces the original <code>fool</code> (left hand graph in figure 6).</p>
<p>However, if we now check out unknowns for <code>fool</code> we get</p>
<pre><code>largeKiteCentres = []
largeDartBases = []
unknowns = [4,2]    </code></pre>
<p>So both nodes 2 and 4 are unknowns. It had looked as though <code>fool</code> would simply compose into two half kites back-to-back (sharing their long edge not their join), but the unknowns show there are other possible choices. Each unknown could become a <code>largeKiteCentre</code> or a <code>largeDartBase</code>.</p>
<p>The question is then what to do with unknowns.</p>
<h1 id="partial-compositions">Partial Compositions</h1>
<p>In fact our <code>composeG</code> resolves two problems when dealing with finite patches. One is the unknowns and the other is critical missing faces needed to make up a new face (e.g the absence of any half dart).</p>
<p>It is implemented using an intermediary function for partial composition</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">partCompose<span style="color: red;">::</span> Tgraph <span style="color: red;">-&gt;</span> <span style="color: red;">(</span><span style="color: red;">[</span>TileFace<span style="color: red;">]</span><span style="color: red;">,</span>Tgraph<span style="color: red;">)</span> </code></pre>
<p><code>partCompose</code> will compose everything that is uniquely determined, but will leave out faces round the boundary which cannot be determined or cannot be included in a new face. It returns the faces of the argument graph that were not used, along with the composed graph.</p>
<p>Figure 9 shows the result of <code>partCompose</code> applied to two graphs. [These are <code>force kiteD3</code> and <code>force dartD3</code> on the left. Force is described later]. In each case, the excluded faces of the starting graph are shown in pale green, overlaid by the composed graph on the right.</p>
<div style="text-align: center;">
<figure><img alt="Figure 9: partCompose for two graphs (force kiteD3 top row and force dartD3 bottom row)" src="https://readerunner.files.wordpress.com/2022/01/pcompfig.png?w=625"><figcaption>Figure 9: partCompose for two graphs (force kiteD3 top row and force dartD3 bottom row)</figcaption></figure>
</div>
<p>Then <code>composeG</code> is simply defined to keep the composed faces and ignore the unused faces produced by <code>partCompose</code>.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">composeG<span style="color: red;">::</span> Tgraph <span style="color: red;">-&gt;</span> Tgraph
composeG <span style="color: red;">=</span> snd . partCompose </code></pre>
<p>This approach avoids making a decision about unknowns when composing, but it may lose some information by throwing away the uncomposed faces.</p>
<p>For correct <code>Tgraph</code>s <code>g</code>, if <code>decomposeG g</code> has no unknowns, then <code>composeG</code> is a left inverse to <code>decomposeG</code>. However, if we take <code>g</code> to be two kite halves sharing their long edge (not their join edge), then these decompose to <code>fool</code> which produces an empty graph when recomposed. Thus we do not have <code>g = composeG (decomposeG g)</code> in general. On the other hand we do have <code>g = composeG (decomposeG g)</code> for correct <em>whole-tile</em> Tgraphs <code>g</code> (<em>whole-tile</em> means all half-tiles of <code>g</code> have their matching half-tile on their join edge in <code>g</code>)</p>
<p>Later (figure 21) we show another exception to <code>g = composeG(decomposeG g)</code> with an incorrect tiling.</p>
<p>We make use of</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">selectFacesVP    <span style="color: red;">::</span> <span style="color: red;">[</span>TileFace<span style="color: red;">]</span> <span style="color: red;">-&gt;</span> VPatch <span style="color: red;">-&gt;</span> VPatch
removeFacesVP    <span style="color: red;">::</span> <span style="color: red;">[</span>TileFace<span style="color: red;">]</span> <span style="color: red;">-&gt;</span> VPatch <span style="color: red;">-&gt;</span> VPatch
selectFacesGtoVP <span style="color: red;">::</span> <span style="color: red;">[</span>TileFace<span style="color: red;">]</span> <span style="color: red;">-&gt;</span> Tgraph <span style="color: red;">-&gt;</span> VPatch
removeFacesGtoVP <span style="color: red;">::</span> <span style="color: red;">[</span>TileFace<span style="color: red;">]</span> <span style="color: red;">-&gt;</span> Tgraph <span style="color: red;">-&gt;</span> VPatch</code></pre>
<p>for creating <code>VPatch</code>es from selected tile faces of a <code>Tgraph</code> or <code>VPatch</code>. This allows us to represent and draw a subgraph which need not be connected nor satisfy the no crossing boundaries property provided the <code>Tgraph</code> it was derived from had these properties.</p>
<h1 id="forcing">Forcing</h1>
<p>When building up a tiling, following the rules, there is often no choice about what tile can be added alongside certain tile edges at the boundary. Such additions are <em>forced</em> by the existing patch of tiles and the rules. For example, if a half tile has its join edge on the boundary, the unique mirror half tile is the only possibility for adding a face to that edge. Similarly, the short edge of a left (respectively, right) dart can only be matched with the short edge of a right (respectively, left) kite. We also make use of the fact that only 7 types of vertex can appear in (the interior of) a patch, so on a boundary vertex we sometimes have enough of the faces to determine the vertex type. These are given the following names in the literature (shown in figure 10): sun, star, jack (=largeDartBase), queen, king, ace, deuce (=largeKiteCentre).</p>
<div style="text-align: center;">
<figure><img alt="Figure 10: Vertex types" src="https://readerunner.files.wordpress.com/2022/01/verttypesfig.png?w=625"><figcaption>Figure 10: Vertex types</figcaption></figure>
</div>
<p>The function</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">force <span style="color: red;">::</span> Tgraph <span style="color: red;">-&gt;</span> Tgraph</code></pre>
<p>will add some faces on the boundary that are <em>forced</em> (i.e new faces where there is exactly one possible choice). For example:</p>
<ul>
<li>When a join edge is on the boundary – add the missing half tile to make a whole tile.</li>
<li>When a half dart has its short edge on the boundary – add the half kite that must be on the short edge.</li>
<li>When a vertex is both a dart origin and a kite wing (it must be a queen or king vertex) – if there is a boundary short edge of a kite half at the vertex, add another kite half sharing the short edge, (this converts 1 kite to 2 and 3 kites to 4 in combination with the first rule).</li>
<li>When two half kites share a short edge their common <code>oppV</code> vertex must be a deuce vertex – add any missing half darts needed to complete the vertex.</li>
<li>…</li>
</ul>
<p>Figure 11 shows <code>foolDminus</code> (which is <code>foolD</code> with 3 faces removed) on the left and the result of forcing, ie <code>force foolDminus</code> on the right which is the same graph we get from <code>force foolD</code>.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">foolDminus <span style="color: red;">=</span> 
    removeFaces <span style="color: red;">[</span>RD<span style="color: red;">(</span><span class="hs-num">6</span><span style="color: red;">,</span><span class="hs-num">14</span><span style="color: red;">,</span><span class="hs-num">11</span><span style="color: red;">)</span><span style="color: red;">,</span> LD<span style="color: red;">(</span><span class="hs-num">6</span><span style="color: red;">,</span><span class="hs-num">12</span><span style="color: red;">,</span><span class="hs-num">14</span><span style="color: red;">)</span><span style="color: red;">,</span> RK<span style="color: red;">(</span><span class="hs-num">5</span><span style="color: red;">,</span><span class="hs-num">13</span><span style="color: red;">,</span><span class="hs-num">2</span><span style="color: red;">)</span><span style="color: red;">]</span> foolD</code></pre>
<div style="text-align: center;">
<figure><img alt="Figure 11: foolDminus and force foolDminus = force foolD" src="https://readerunner.files.wordpress.com/2022/01/forcefooldminus.png?w=625"><figcaption>Figure 11: <code>foolDminus</code> and <code>force foolDminus</code> = <code>force foolD</code></figcaption></figure>
</div>
<p>Figures 12, 13 and 14 illustrate the result of forcing a 5-times decomposed kite, a 5-times decomposed dart, and a 5-times decomposed sun (respectively). The first two figures reproduce diagrams from an article by Roger Penrose illustrating the extent of influence of tiles round a decomposed kite and dart. [Penrose R <em>Tilings and quasi-crystals; a non-local growth problem?</em> in Aperiodicity and Order 2, edited by Jarich M, Academic Press, 1989. (fig 14)].</p>
<div style="text-align: center;">
<figure><img alt="Figure 12: force kiteD5 with kiteD5 shown in red" src="https://readerunner.files.wordpress.com/2022/01/forcekite5.png?w=625"><figcaption>Figure 12: force kiteD5 with kiteD5 shown in red</figcaption></figure>
</div>
<div style="text-align: center;">
<figure><img alt="Figure 13: force dartD5 with dartD5 shown in red" src="https://readerunner.files.wordpress.com/2022/01/forcedart5.png?w=625"><figcaption>Figure 13: force dartD5 with dartD5 shown in red</figcaption></figure>
</div>
<div style="text-align: center;">
<figure><img alt="Figure 14: force sunD5 with sunD5 shown in red" src="https://readerunner.files.wordpress.com/2022/01/forcesun5.png?w=625"><figcaption>Figure 14: force sunD5 with sunD5 shown in red</figcaption></figure>
</div>
<p>In figure 15, the bottom row shows successive decompositions of a dart (dashed blue arrows from right to left), so applying <code>composeG</code> to each dart will go back (green arrows from left to right). The black vertical arrows are <code>force</code>. The solid blue arrows from right to left are <code>(force . decomposeG)</code> being applied to the successive forced graphs. The green arrows in the reverse direction are <code>composeG</code> again and the intermediate (<code>partCompose</code>) figures are shown in the top row with the ignored faces in pale green.</p>
<div style="text-align: center;">
<figure><img alt="Figure 15: Arrows: black = force, green = composeG, solid blue = (force . decomposeG)" src="https://readerunner.files.wordpress.com/2022/01/bigpic.png?w=625"><figcaption>Figure 15: Arrows: black = <code>force</code>, green = <code>composeG</code>, solid blue = <code>(force . decomposeG)</code></figcaption></figure>
</div>
<p>Figure 16 shows the forced graphs of the seven vertex types (with the starting graphs in red) along with a kite (top right).</p>
<div style="text-align: center;">
<figure><img alt="Figure 16: Relating the forced seven vertex types and the kite" src="https://readerunner.files.wordpress.com/2022/01/relatedvtypefig.png?w=625"><figcaption>Figure 16: Relating the forced seven vertex types and the kite</figcaption></figure>
</div>
<p>These are related to each other as shown in the columns. Each graph composes to the one above (an empty graph for the ones in the top row) and the graph below is its forced decomposition. [The rows have been scaled differently to make the vertex types easier to see.]</p>
<h1 id="adding-faces-to-a-tgraph">Adding Faces to a Tgraph</h1>
<p>This is technically tricky because we need to discover what vertices (and implicitly edges) need to be newly created and which ones already exist in the <code>Tgraph</code>. This goes beyond a simple graph operation and requires use of the geometry of the faces. We have chosen not to do a full conversion to vectors to work out all the geometry, but instead we introduce a local representation of angles at a vertex allowing a simple equality test.</p>
<p><strong>Integer Angles</strong></p>
<p>All vertex angles are integer multiples of 1/10th turn (<code>mod</code> 10) so we use these integers for face internal angles and boundary external angles. The face adding process always adds to the right of a given directed edge <code>(a,b)</code> which must be a boundary directed edge. [Adding to the left of an edge <code>(a,b)</code> would mean that <code>(b,a)</code> will be the boundary direction and so we are really adding to the right of <code>(b,a)</code>]. Face adding looks to see if either of the two other edges already exist in the graph by considering the end points <code>a</code> and <code>b</code> to which the new face is to be added, and checking angles.</p>
<p>This allows an edge in a particular sought direction to be discovered. If it is not found it is assumed not to exist. However, this will be undermined, there are <strong>crossing boundaries</strong> . In this case there must be more than two boundary directed edges at the vertex and there is no unique external angle.</p>
<p>Establishing the <em>no crossing boundaries</em> property ensures these failures cannot occur. We can easily check this property for newly created graphs (with <code>checkedTgraph</code>) and the face adding operations cannot create crossing boundaries.</p>
<p><strong>Touching Vertices and Crossing Boundaries</strong></p>
<p>When a new face to be added on <code>(a,b)</code> has neither of the other two edges already in the graph, the third vertex needs to be created. However it could already exist in the <code>Tgraph</code> – it is not on an edge coming from <code>a</code> or <code>b</code> but from another non-local part of the <code>Tgraph</code>. We call this a <em>touching vertex</em>. If we simply added a new vertex without checking for a clash this would create a nonsense graph. However, if we do check and find an existing vertex, we still cannot add the face using this because it would create a crossing boundary.</p>
<p>Our version of forcing prevents face additions that would create a touching vertex/crossing boundary by calculating the positions of boundary vertices.</p>
<p><strong>No conflicting edges</strong></p>
<p>There is a final (simple) check when adding a new face, to prevent a long edge (<code>phiEdge</code>) sharing with a short edge. This can arise if we force an incorrect graph (as we will see later).</p>
<h1 id="implementing-forcing">Implementing Forcing</h1>
<p>Our order of forcing prioritises updates (face additions) which do not introduce a new vertex. Such <em>safe</em> updates are easy to recognise and they do not require a touching vertex check. Surprisingly, this pretty much removes the problem of touching vertices altogether.</p>
<p>As an illustration, consider <code>foolDMinus</code> again on the left of figure 11. Adding the left dart onto edge <code>(12,14)</code> is not a safe addition (and would create a crossing boundary at 6). However, adding the right dart <code>RD(6,14,11)</code> is safe and creates the new edge (6,14) which then makes the left dart addition safe. In fact it takes some contrivance to come up with a <code>Tgraph</code> with an update that could fail the check during forcing when safe cases are always done first. Figure 17 shows such a contrived <code>Tgraph</code> formed by removing the faces shown in green from a twice decomposed sun on the left. The forced result is shown on the right. When there are no safe cases, we need to try an unsafe one. The four green faces at the bottom are blocked by the touching vertex check. This leaves any one of 9 half-kites at the centre which would pass the check. But after just one of these is added, the check is not needed again. There is always a safe addition to be done at each step until all the green faces are added.</p>
<div style="text-align: center;">
<figure><img alt="Figure 17: A contrived example requiring a touching vertex check" src="https://readerunner.files.wordpress.com/2022/01/touchingtestfig.png?w=625"><figcaption>Figure 17: A contrived example requiring a touching vertex check</figcaption></figure>
</div>
<p><strong>Boundary information</strong></p>
<p>The implementation of forcing has been made more efficient by calculating some boundary information in advance. This boundary information uses a type <code>Boundary</code></p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span style="color: blue; font-weight: bold;">data</span> Boundary 
  <span style="color: red;">=</span> Boundary
    <span style="color: red;">{</span> bDedges     <span style="color: red;">::</span> <span style="color: red;">[</span><span style="color: red;">(</span>Vertex<span style="color: red;">,</span>Vertex<span style="color: red;">)</span><span style="color: red;">]</span>
    <span style="color: red;">,</span> bvFacesMap  <span style="color: red;">::</span> Mapping Vertex <span style="color: red;">[</span>TileFace<span style="color: red;">]</span>
    <span style="color: red;">,</span> bvLocMap    <span style="color: red;">::</span> Mapping Vertex <span style="color: red;">(</span>Point V2 Double<span style="color: red;">)</span>
    <span style="color: red;">,</span> allFaces    <span style="color: red;">::</span> <span style="color: red;">[</span>TileFace<span style="color: red;">]</span>
    <span style="color: red;">,</span> allVertices <span style="color: red;">::</span> <span style="color: red;">[</span>Vertex<span style="color: red;">]</span>
    <span style="color: red;">,</span> nextVertex  <span style="color: red;">::</span> Vertex
    <span style="color: red;">}</span> <span style="color: blue; font-weight: bold;">deriving</span> <span style="color: red;">(</span>Show<span style="color: red;">)</span></code></pre>
<p>This records the boundary directed edges (<code>bDedges</code>) plus a mapping of the boundary vertices to their incident faces (<code>bvFacesMap</code>) plus a mapping of the boundary vertices to their positions (<code>bvLocMap</code>). It also keeps track of all the faces and vertices. The boundary information is easily incremented for each face addition without being recalculated from scratch, and a final graph with all the new faces is easily recovered from the boundary information when there are no more updates.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">makeBoundary  <span style="color: red;">::</span> Tgraph <span style="color: red;">-&gt;</span> Boundary
recoverGraph  <span style="color: red;">::</span> Boundary <span style="color: red;">-&gt;</span> Tgraph</code></pre>
<p>The saving that comes from using boundaries lies in efficient incremental changes to boundary information and, of course, in avoiding the need to consider internal faces. As a further optimisation we keep track of updates in a mapping from boundary directed edges to updates, and supply a list of affected edges after an update so the update calculator (update generator) need only revise these. The boundary and mapping are combined in a <em>force state</em>.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">type UpdateMap = Mapping DEdge Update
type UpdateGenerator = Boundary -&gt; [DEdge] -&gt; UpdateMap
data ForceState = ForceState 
       { boundaryState:: Boundary
       , updateMap:: UpdateMap 
       }
</code></pre>
<p>Forcing then involves using a specific update generator (<em>allUGenerator</em>) and initialising the state, then using the recursive <em>forceAll</em> which keeps doing updates until there are no more, before recovering the final graph.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">force:: Tgraph -&gt; Tgraph
force = forceWith allUGenerator

forceWith:: UpdateGenerator -&gt; Tgraph -&gt; Tgraph
forceWith uGen = recoverGraph . boundaryState . 
                 forceAll uGen . initForceState uGen

forceAll :: UpdateGenerator -&gt; ForceState -&gt; ForceState
initForceState :: UpdateGenerator -&gt; Tgraph -&gt; ForceState
</code></pre>
<p>In addition to <code>force</code> we can easily define</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">wholeTiles<span style="color: red;">::</span> Tgraph <span style="color: red;">-&gt;</span> Tgraph
wholeTiles = forceWith wholeTileUpdates </code></pre>
<p>which just uses the first forcing rule to make sure every half-tile has a matching other half.</p>
<p>We also have a version of <code>force</code> which counts to a specific number of face additions.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">stepForceWith :: UpdateGenerator -&gt; Int -&gt; ForceState -&gt; ForceState
</code></pre>
<p>This proved essential in uncovering problems of accumulated innaccuracy in calculating boundary positions (now fixed).</p>
<h1 id="some-other-experiments">Some Other Experiments</h1>
<p>Below we describe results of some experiments using the tools introduced above. Specifically: emplacements, sub-Tgraphs, incorrect tilings, and composition choices.</p>
<h1 id="emplacements">Emplacements</h1>
<p>The finite number of rules used in forcing are based on local boundary vertex and edge information only. We may be able to improve on this by considering a composition and forcing at the next level up before decomposing and forcing again. This thus considers slightly broader local information. In fact we can iterate this process to all the higher levels of composition. Some graphs produce an empty graph when composed so we can regard those as maximal compositions. For example <code>composeG fool</code> produces an empty graph.</p>
<p>The idea now is to take an arbitrary graph and apply <code>(composeG . force)</code> repeatedly to find its maximally composed graph, then to <code>force</code> the maximal graph before applying <code>(force . decomposeG)</code> repeatedly back down to the starting level (so the same number of decompositions as compositions).</p>
<p>We call the function <code>emplace</code>, and call the result the <em>emplacement</em> of the starting graph as it shows a region of influence around the starting graph.</p>
<p>With earlier versions of forcing when we had fewer rules, <code>emplace g</code> often extended <code>force g</code> for a Tgraph <code>g</code>. This allowed the identification of some new rules. Since adding the new rules we have not yet found graphs with different results from <code>force</code> and <code>emplace</code>. [Although, the vertex labelling of the result will usually be different].</p>
<h1 id="sub-tgraphs">Sub-Tgraphs</h1>
<p>In figure 18 on the left we have a four times decomposed dart <code>dartD4</code> followed by two sub-Tgraphs <code>brokenDart</code> and <code>badlyBrokenDart</code> which are constructed by removing faces from <code>dartD4</code> (but retaining the connectedness condition and the no crossing boundaries condition). These all produce the same forced result (depicted middle row left in figure 15).</p>
<div style="text-align: center;">
<figure><img alt="Figure 18: dartD4, brokenDart, badlyBrokenDart" src="https://readerunner.files.wordpress.com/2022/01/brokendartfig.png?w=625"><figcaption>Figure 18: dartD4, brokenDart, badlyBrokenDart</figcaption></figure>
</div>
<p>However, if we do compositions without forcing first we find <code>badlyBrokenDart</code> fails because it produces a graph with crossing boundaries after 3 compositions. So <code>composeG</code> on its own is not always safe, where <em>safe</em> means guaranteed to produce a valid <code>Tgraph</code> from a valid correct <code>Tgraph</code>.</p>
<p>In other experiments we tried <code>force</code> on <code>Tgraph</code>s with holes and on incomplete boundaries around a potential hole. For example, we have taken the boundary faces of a forced, 5 times decomposed dart, then removed a few more faces to make a gap (which is still a valid <code>Tgraph</code>). This is shown at the top in figure 19. The result of forcing reconstructs the complete original forced graph. The bottom figure shows an intermediate stage after 2200 face additions. The gap cannot be closed off to make a hole as this would create a crossing boundary, but the channel does get filled and eventually closes the gap without creating a hole.</p>
<div style="text-align: center;">
<figure><img alt="Figure 19: Forcing boundary faces with a gap (after 2200 steps)" src="https://readerunner.files.wordpress.com/2022/01/progressfig.png?w=625"><figcaption>Figure 19: Forcing boundary faces with a gap (after 2200 steps)</figcaption></figure>
</div>
<h1 id="incorrect-tilings">Incorrect Tilings</h1>
<p>When we say a Tgraph <code>g</code> is a <em>correct graph</em> (respectively: <em>incorrect graph</em>), we mean <code>g</code> represents a correct tiling (respectively: incorrect tiling). A simple example of an incorrect graph is a kite with a dart on each side (called a <em>mistake</em> by Penrose) shown on the left of figure 20.</p>
<pre><code>*Main&gt; mistake
Tgraph { vertices = [1,2,4,3,5,6,7,8]
       , faces = [RK (1,2,4),LK (1,3,2),RD (3,1,5)
                 ,LD (4,6,1),LD (3,5,7),RD (4,8,6)
                 ]
       }</code></pre>
<p>If we try to <code>force</code> (or <code>emplace</code>) this graph it produces an error in construction which is detected by the test for conflicting edge types (a <code>phiEdge</code> sharing with a non-<code>phiEdge</code>).</p>
<pre><code>*Main&gt; force mistake
Tgraph {vertices = *** Exception: doUpdate:(incorrect tiling)
Conflicting new face RK (11,1,6)
with neighbouring faces
[RK (9,1,11),LK (9,5,1),RK (1,2,4),LK (1,3,2),RD (3,1,5),LD (4,6,1),RD (4,8,6)]
in boundary
Boundary ...</code></pre>
<p>In figure 20 on the right, we see that after successfully constructing the two whole kites on the top dart short edges, there is an attempt to add an <code>RK</code> on edge (1,6). The process finds an existing edge (1,11) in the correct direction for one of the new edges so tries to add the erroneous <code>RK (11,1,6)</code> which fails a <code>noConflicts</code> test.</p>
<div style="text-align: center;">
<figure><img alt="Figure 20: An incorrect graph (mistake), and the point at which force mistake fails" src="https://readerunner.files.wordpress.com/2022/01/pfmistakefig.png?w=625"><figcaption>Figure 20: An incorrect graph (<code>mistake</code>), and the point at which <code>force mistake</code> fails</figcaption></figure>
</div>
<p>So it is certainly true that incorrect graphs may fail on forcing, but forcing cannot create an incorrect graph from a correct graph.</p>
<p>If we apply <code>decomposeG</code> to <code>mistake</code> it produces another incorrect graph (which is similarly detected if we apply <code>force</code>), but will nevertheless still compose back to <code>mistake</code> if we do not try to force.</p>
<p>Interestingly, though, the incorrectness of a graph is not always preserved by <code>decomposeG</code>. If we start with <code>mistake1</code> which is <code>mistake</code> with just two of the half darts (and also an incorrect tiling) we still get a similar failure on forcing, but <code>decomposeG mistake1</code> is no longer incorrect. If we apply <code>composeG</code> to the result or <code>force</code> then <code>composeG</code> the mistake is thrown away to leave just a kite (see figure 21). This is an example where <code>composeG</code> is not a left inverse to either <code>decomposeG</code> or <code>(force . decomposeG)</code>.</p>
<div style="text-align: center;">
<figure><img alt="Figure 21: mistake1 with its decomposition, forced decomposition, and recomposed." src="https://readerunner.files.wordpress.com/2022/01/cdmistake1fig.png?w=625"><figcaption>Figure 21: <code>mistake1</code> with its decomposition, forced decomposition, and recomposed.</figcaption></figure>
</div>
<h1 id="composing-with-choices">Composing with Choices</h1>
<p>We know that unknowns indicate possible choices (although some choices may lead to incorrect graphs). As an experiment we introduce</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">makeChoices <span style="color: red;">::</span> Tgraph <span style="color: red;">-&gt;</span> <span style="color: red;">[</span>Tgraph<span style="color: red;">]</span></code></pre>
<p>which produces <img alt="2^n" class="latex" src="https://s0.wp.com/latex.php?latex=2%5En&amp;bg=ffffff&amp;fg=444444&amp;s=0&amp;c=20201002"> alternatives for the 2 choices of each of <img alt="n" class="latex" src="https://s0.wp.com/latex.php?latex=n&amp;bg=ffffff&amp;fg=444444&amp;s=0&amp;c=20201002"> unknowns (prior to composing). This uses <code>forceLDB</code> which forces an unknown to be a <code>largeDartBase</code> by adding an appropriate joined half dart at the node, and <code>forceLKC</code> which forces an unknown to be a <code>largeKiteCentre</code> by adding a half dart and a whole kite at the node (making up the 3 pieces for a larger half kite).</p>
<p>Figure 22 illustrates the four choices for composing <code>fool</code> this way. The top row has the four choices of <code>makeChoices fool</code> (with the fool shown embeded in red in each case). The bottom row shows the result of applying <code>composeG</code> to each choice.</p>
<div style="text-align: center;">
<figure><img alt="Figure 22: makeChoices fool (top row) and composeG of each choice (bottom row)" src="https://readerunner.files.wordpress.com/2022/01/foolchoices.png?w=625"><figcaption>Figure 22: makeChoices fool (top row) and composeG of each choice (bottom row)</figcaption></figure>
</div>
<p>In this case, all four compositions are correct tilings. The problem is that, in general, some of the choices may lead to incorrect tilings. More specifically, a choice of one unknown can determine what other unknowns have to become with constraints such as</p>
<ul>
<li>a and b have to be opposite choices</li>
<li>a and b have to be the same choice</li>
<li>a and b cannot both be largeKiteCentres</li>
<li>a and b cannot both be largeDartBases</li>
</ul>
<p>This analysis of constraints on unknowns is not trivial. The potential exponential results from choices suggests we should compose and force as much as possible and only consider unknowns of a maximal graph.</p>
<p>For calculating the emplacement of a graph, we first find the forced maximal graph before decomposing. We could also consider using <code>makeChoices</code> at this top step when there are unknowns, i.e a version of <code>emplace</code> which produces these alternative results (<code>emplaceChoices</code>)</p>
<p>The result of <code>emplaceChoices</code> is illustrated for <code>foolD</code> in figure 23. The first force and composition is unique producing the <code>fool</code> level at which point we get 4 alternatives each of which compose further as previously illustrated in figure 22. Each of these are forced, then decomposed and forced, decomposed and forced again back down to the starting level. In figure 23 <code>foolD</code> is overlaid on the 4 alternative results. What they have in common is (as you might expect) <code>emplace foolD</code> which equals <code>force foolD</code> and is the graph shown on the right of figure 11.</p>
<div style="text-align: center;">
<figure><img alt="Figure 23: emplaceChoices foolD" src="https://readerunner.files.wordpress.com/2022/01/emplacefooldchoices.png?w=625"><figcaption>Figure 23: emplaceChoices foolD</figcaption></figure>
</div>
<h1 id="future-work">Future Work</h1>
<p>I am collaborating with Stephen Huggett who suggested the use of graphs for exploring properties of the tilings. We now have some tools to experiment with but we would also like to complete some formalisation and proofs. For example, we do not know if <code>force g</code> always produces the same result as <code>emplace g</code>. [Update (August 2022): We now have an example where <code>force g</code> strictly includes <code>emplace g</code>].</p>
<p>It would also be good to establish that <code>g</code> is incorrect iff <code>force g</code> fails.</p>
<p>We have other conjectures relating to subgraph ordering of <code>Tgraph</code>s and Galois connections to explore.</p></div>
    </content>
    <updated>2022-08-12T16:14:31Z</updated>
    <published>2022-01-06T15:22:11Z</published>
    <category scheme="https://readerunner.wordpress.com" term="Haskell"/>
    <category scheme="https://readerunner.wordpress.com" term="Maths"/>
    <category scheme="https://readerunner.wordpress.com" term="Darts"/>
    <category scheme="https://readerunner.wordpress.com" term="Graphs"/>
    <category scheme="https://readerunner.wordpress.com" term="Haskell Diagrams"/>
    <category scheme="https://readerunner.wordpress.com" term="Kites"/>
    <category scheme="https://readerunner.wordpress.com" term="Penrose"/>
    <category scheme="https://readerunner.wordpress.com" term="Tilings"/>
    <author>
      <name>readerunner</name>
      <uri>https://readerunner.wordpress.com</uri>
    </author>
    <source>
      <id>http://readerunner.wordpress.com/feed/atom/</id>
      <link href="https://readerunner.wordpress.com" rel="alternate" type="text/html">
      <link href="https://readerunner.wordpress.com/feed/atom/" rel="self" type="application/atom+xml">
      <link href="https://readerunner.wordpress.com/osd.xml" rel="search" title="readerunner" type="application/opensearchdescription+xml">
      <link href="https://s1.wp.com/opensearch.xml" rel="search" title="WordPress.com" type="application/opensearchdescription+xml">
      <link href="https://readerunner.wordpress.com/?pushpress=hub" rel="hub" type="text/html">
      <subtitle xml:lang="en">maths and computing experiments</subtitle>
      <title xml:lang="en">readerunner</title>
      <updated>2022-08-12T16:14:31Z</updated>
    </source>
  </entry>
</feed>
