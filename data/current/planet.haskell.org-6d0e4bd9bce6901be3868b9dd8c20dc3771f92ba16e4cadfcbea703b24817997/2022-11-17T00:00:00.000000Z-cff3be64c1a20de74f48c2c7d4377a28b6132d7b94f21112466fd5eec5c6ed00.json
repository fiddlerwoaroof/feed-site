{
  "title":"JupyterWith Next",
  "date":"2022-11-17T00:00:00.000000Z",
  "author":null,
  "id":"https://tweag.io/blog/2022-11-17-jupyter-with-next/",
  "link":"https://tweag.io/blog/2022-11-17-jupyter-with-next/",
  "content":"JupyterWith has been around for several years with growing popularity.\nOver the years, we found that researchers struggled with the Nix language and jupyterWith API.\nSince researchers are our primary target audience, we decided to improve the usability of jupyterWith.\nToday, we are proud to announce the release of a new version!\nThe new simplified API makes jupyterWith easier to use and provides more options for creating kernels.\nWhat is jupyterWith?\nJupyterLab is a web-based interactive development environment for notebooks, code, and data.\nThese notebooks can be shared with other users and the residing code can be rerun providing repeatability.\nThe Jupyter ecosystem allows users to produce and repeat research and results, but it lacks in facilitating reproducible results.\nThere may not appear to be a difference between repeatable and reproducible, but there is a meaningful difference; reproducibility guarantees that our code and results will be exactly the same while repeatability does not.\nWhile many Jupyter kernels are available as Python packages, just as many are not (e.g. haskell and julia).\nProjects such as PDM and JupyterLab Requirements can create reproducible environments but are restricted to the Python kernels.\njupyterWith was announced in early 2019 and provides a Nix-based framework for declarative and reproducible JupyterLab environments with configurable kernels.\nIt actively supports over a dozen kernels and provides example setups and notebooks for users to try out.\njupyterWith can create entirely reproducible JupyterLab environments for any kernel.\nWhy jupyterWith?\nIf you can run an experiment multiple times in the same environment and get to the same conclusion, you have repeatability.\nIn our case, running the same code on the same machine should give the same outputs.\nConsider what would happen if you handed off your code to another user and they ran it on their system.\nDifferent operating systems or different versions of the same operating system may fetch different versions of the same package.\nFetching the same package at different times may not return the same version due to patch or security updates.\nIf you can guarantee the same outputs given all that has changed, then you have reproducibility.\nWith repeatability, we cannot guarantee that the packages and dependencies of our code will remain constant.\nUsing jupyterWith we can give that guarantee and ensure that on any system, run by any user, and given identical inputs, the code will produce identical outputs.\nThis guarantee is what makes our code and therefore our research reproducible.\nWhat is new?\nThis release focuses on helping users quickly and easily get their project started, and making it easier to extend kernels to fit their needs.\nNew templates\nThe new version of jupyterWith provides new kernel templates which makes it easier for users to bootstrap their project using Nix flakes.\nThey are small, easily digestible, and ready to be customized.\nBetter Python kernels\nIt used to be difficult to select particular Python packages because we were tied to nixpkgs.\njupyterWith now use Poetry and poetry2nix to install kernels that are packaged with Python and their dependencies.\nPoetry allows users to easily select the desired version of a package and can resolve dependencies.\npoetry2nix greatly simplifies the kernel files, which helps with readability and maintainability.\nBetter kernel definition interface\nFinally, we have simplified and standardized the interfaces for kernel files.\nThis makes it easier for users to implement completely new kernels.\nGetting Started\nThe following code will initialize a new project directory with a flake template from the jupyterWith repository and start the JupyterLab environment.\nWith a renewed focus on user ease, this is all that is necessary to get started.\n$ mkdir my-project\n$ cd my-project\n$ nix flake init --template github:tweag/jupyterWith\n$ nix run\nEach kernel provided will generally only have the standard libraries and packages available, but there is a readme provided with the template with instructions on extending existing kernels, creating a custom kernel, and installing extensions.\nMigration\nIf you have used jupyterWith in the past, you are probably used to seeing kernel files like the ipython kernel example below.\nThe version of Python used and the packages available to the kernel, can be set using the python3 and packages attributes respectively.\nOld interface\n{\n  iPython = iPythonWith {\n    # Identifier that will appear on the Jupyter interface.\n    name = &quot;nixpkgs&quot;;\n    # Libraries to be available to the kernel.\n    packages = p: with p; [ numpy pandas ];\n    # Optional definition of `python3` to be used.\n    # Useful for overlaying packages.\n    python3 = pkgs.python3Packages;\n    # Optional value to true that ignore file collisions inside the packages environment\n    ignoreCollisions = false;\n  };\n}\nThe new interface is similar but there are a few key differences.\nAll kernels are provided through availableKernels and the kernels are named by the language rather than the kernel project name.\nFor example, before there was iPythonWith and iHaskellWith, and now it is availableKernels.python and availableKernels.haskell.\nThe version of Python uses is passed through the python attribute and additional packages are provided with the extraPackages attribute.\nThere is one new attribute, editablePackageSources, which is used by poetry2nix, to add packages to the environment in editable mode.\nNew interface!\n{\n  pkgs,\n  availableKernels,\n  kernelName,\n}:\navailableKernels.python.override {\n  name = &quot;python-with-numpy&quot;; # must be unique\n  displayName = &quot;python with numpy&quot;; # name that appears in JupyterLab Web UI\n  python = pkgs.python3;\n  extraPackages = ps: [ ps.numpy ];\n  editablePackageSources = {};\n}\nBoth of these are still subject to the package versions available in nixpkgs.\nHowever, with Poetry, we can create a completely custom kernel with a pyproject.toml file and specify exactly which package versions we want.\nThe full details are available in the How To and Tutorials sections of the documentation.\nConclusion\nUsability has been improved, but there is much more to do.\nThe next major items on the roadmap include:\n\nUpdating and improving the flake templates.\nUpdating and improving documentation on configuring existing kernels and packaging new kernels.\nProviding better MacOS support.\nAdding new and improving existing kernels.\nCreate a website indexing kernels that can be used and configured in jupyterWith.\n\nJoin us in contributing to the project.\nYou can find the repository here.\n    "
}