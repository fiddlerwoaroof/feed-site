{
  "title":"Daily ICFP: Day 1",
  "date":"2021-08-23T17:00:00.000000-07:00",
  "author":null,
  "id":"https://tweag.io/blog/2021-08-24-icfp1/",
  "link":"https://tweag.io/blog/2021-08-24-icfp1/",
  "content":"Daily ICFP\nSeveral Tweagers all agreed to gather notes here about our\nICFP (International Conference on Functional\nProgramming) experiences.\nOther posts in this series:\n\nICFP - Day 0\nICFP - Day 2\nICFP - Day 3\nICFP - Day 4\nICFP - Day 5\n\nDay 1 - Monday\nThese notes follow Noon, Arnaud, and Richard through their day at ICFP,\nroughly in order.\nRichard — Calculating Dependently-Typed Compilers (Functional\nPearl)\nStarted my day at 6:30am in order to attend the Q&amp;A for Calculating\nDependently-Typed Compilers (Functional Pearl), by Mitchell Pickard and\nGraham Hutton, of the University of Nottingham. (I watched the video itself\nlast night.) This is a very cool paper about a technique for deriving a\nproved-correct compiler by construction. The main example in the talk was\nabout compiling a simple expression language to a stack machine. The\ncorrectness condition is that exec (compile e) s = eval e : s, where e\nis the expression under consideration, s is a call stack, and : pushes a\nnew item onto the call stack. Starting with this equation, we can consider\ndifferent forms of e and then use the correctness requirement to derive\nwhat the stack language (the elements stored in s) needs to be, and how\ncompile should work.\nI really enjoyed the talk (though I haven’t yet gone back to the paper).\nIt’s presented simply and convincingly. And I think the idea is really cool,\nshowing the power of dependent types. (Both the source language and the\ntarget stack language are intrinsically typed, requiring the compilation to\nbe dependently typed.) Do watch the talk: it’s accessible and educational.\nThe Q&amp;A was a pleasant chat among like-minded folks; all seemed to generally\nsupport the line of research and appreciated the results. A nice nugget of\nknowledge that came out was the importance of the interactive features of\nAgda in order to create this solution. I asked whether an implementation in\nHaskell would be possible; Mitchell thought it probably would be. But I\nalready know that the act of composing the solution in Haskell would be much\nmore difficult than in Agda because Haskell is still catching up when it\ncomes to editor integration. Yet another reason to support\nHLS!\nRichard — Watched a few videos of talks I’m interested in. I don’t think I’ll\nlist all such videos, lest anyone out there get offended by my choices. :) I\nreally miss the in-person interactions of an in-person conference, but being\nable to watch videos at my leisure is really nice — especially when I can\nenable captions, run the videos at 1.25x or 1.5x, and rewind to rewatch the\nhard parts.\nRichard — The Q&amp;A sessions are technically available in either time band (the\nICFP conference itself happens both 3am-10am in my time zone, US East, and\nalso 3pm-10pm), but some authors are available only for one of the Q&amp;A\nsessions. This is frustrating, because it means I miss some great stuff in\nthe middle of my night. I wonder if it would be possible for the active Q&amp;A\nsession (some authors make it to both!) to be recorded and viewable later —\nperhaps just during the conference (in order to incentivize interaction and\nprotect some degree of the privacy of the conversations).\nRichard — The program at icfp21.sigplan.org\nallows users to select what\nevents they are attending by starring them. Then, there is a way to make a\nsubscribable calendar with those events (and it stays updated!). I’ve\nsubscribed my usual Google calendar to this ICFP calendar, and it’s making\ntime management so much easier! The only problem is that the main-time-band\nevents share their state with the mirrored-time-band events, so things appear\non my calendar twice. This is imperfect, but still really helpful.\nNoon — Q&amp;A: Algebras for Weighted Search\n\nUnfortunately missed most of the talk; but caught the Q&amp;A.\nLooks like this was quite popular and people were very excited about it!\nAs far as I understand it, people were excited to see weighted search formulated as a Monad.\nOne interesting comment that Oisín mentioned in the talk was by swapping the order of … (something I can’t remember) you get a parser instead of a duplicate remover. This sounded very interesting to me, so I’d be curious to know what it means!\nSome comments about weighted optimisation!\n\nNoon — Fun, Funky, Functional: The Pursuit of Better User Interfaces for Programming\n\nLearned about the combined field of PL =&lt;&lt; HCI\nNice talk; I missed a lot of it, but I’ll go back and take a look!\nLove the idea of more structured editing and closing the gap between drawing by programming and other forms of drawing.\n\nRichard — Watched the same keynote as Noon, above. It was delivered by Ravi\nChugh. Very nicely done, introducing a wide array of different papers on the\nintersection of PL (programming languages) and HCI (human-computer\ninteraction). The highlight of the talk was a tool made by Ravi and his\nstudents that supports advanced editing techniques:\n\nThe language demonstrated describes a diagram, and the diagram appears to\nthe right of the code. But you can edit the diagram by clicking and\ndragging, just like a drawing program, and demonstrated program updates the\ncode. Very cool!\nThis software also supports block-editing the code itself. That is, instead\nof thinking about characters and lines, you can think about programming\nconstructs, like a particular variable binding or if-expression. Moving\npieces around moves whole semantically-relevant pieces, not just a few\ncharacters. I’ve been wanting this for years.\nA further example included a program that produces an HTML version of a\ntable. But you could edit the rendered table, and the HTML-generating code\nwould update accordingly! You could even edit the DOM of the rendered HTML\nand the code would update. Amazing.\n\nI can’t wait for the techniques demonstrated in this keynote become standard\nand widespread. We will all be better off when that happens.\nNoon — Propositions-as-Types and Shared State\n\nCurious to know what this connection will be.\nInterested to learn the Linear logic "
}