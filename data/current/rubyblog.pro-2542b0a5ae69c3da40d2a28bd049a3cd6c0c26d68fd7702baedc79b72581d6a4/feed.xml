<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>RubyBlog.pro</title>
    <description>Articles about Ruby, TDD, Clean Code and Clean Architecture</description>
    <link>http://rubyblog.pro/</link>
    <item>
      <title>Chain of Responsibility Pattern - Ruby</title>
      <description>In this article, I'll cover _Chain of Responsibility_ pattern. We will learn how to implement it using Ruby and discover when this pattern is applicable in Ruby apps.
</description>
      <pubDate>Mon, 20 Nov 2017 19:02:49 +0000</pubDate>
      <link>http://rubyblog.pro/2017/11/chain-of-responsibility-ruby</link>
      <guid>http://rubyblog.pro/2017/11/chain-of-responsibility-ruby</guid>
    </item>
    <item>
      <title>Proxy Pattern</title>
      <description>In this article, we will cover Proxy pattern and its types. We will implement each of them using Ruby.
</description>
      <pubDate>Fri, 10 Nov 2017 20:21:32 +0000</pubDate>
      <link>http://rubyblog.pro/2017/11/proxy-pattern</link>
      <guid>http://rubyblog.pro/2017/11/proxy-pattern</guid>
    </item>
    <item>
      <title>RSpec: difference between mocks and stubs</title>
      <description>Hello! I'm back from my lovely trip to San-Francisco and eager to keep writing more articles for this blog. Today we will try to figure out the difference between mocks and stubs.
</description>
      <pubDate>Sun, 22 Oct 2017 02:22:59 +0000</pubDate>
      <link>http://rubyblog.pro/2017/10/rspec-difference-between-mocks-and-stubs</link>
      <guid>http://rubyblog.pro/2017/10/rspec-difference-between-mocks-and-stubs</guid>
    </item>
    <item>
      <title>A couple words on Arrays in Ruby</title>
      <description>We all work with arrays on daily basis. It's quite easy to start using arrays, no problem with that. But there are some interesting methods and behavior that I wanted to cover in this post.
</description>
      <pubDate>Sun, 24 Sep 2017 15:22:56 +0000</pubDate>
      <link>http://rubyblog.pro/2017/09/couple-words-on-arrays</link>
      <guid>http://rubyblog.pro/2017/09/couple-words-on-arrays</guid>
    </item>
    <item>
      <title>How to protect naming conventions when working with microservices or third-party APIs</title>
      <description>Naming things it's a hard task. Once you named something in the system, you want to follow this naming convention. Especially it's important if term comes from domain experts. But it's not that easy to keep naming right when you have to deal with third-party APIs or microservices.
</description>
      <pubDate>Sun, 17 Sep 2017 22:59:57 +0000</pubDate>
      <link>http://rubyblog.pro/2017/09/how-to-protect-naming-conventions-when-working-with-microservices</link>
      <guid>http://rubyblog.pro/2017/09/how-to-protect-naming-conventions-when-working-with-microservices</guid>
    </item>
    <item>
      <title>Ruby: pass by value or pass by reference?</title>
      <description>When developers switch to a new language, that's one of the questions they try to figure out: does it pass arguments by value or by reference? Ruby has a quite interesting answer to that question so let's find out how it works.
</description>
      <pubDate>Fri, 01 Sep 2017 20:24:21 +0000</pubDate>
      <link>http://rubyblog.pro/2017/09/pass-by-value-or-pass-by-reference</link>
      <guid>http://rubyblog.pro/2017/09/pass-by-value-or-pass-by-reference</guid>
    </item>
    <item>
      <title>Results of the Code Quality Tools survey</title>
      <description>Hello everyone. In this blog we talk a lot about the quality of code: Patterns, Object-Oriented Design, SOLID principles, etc.
Week ago I started to think about the tools we have that help us to measure and improve quality of code. That's how I came up with the idea of a survey: &quot;Code Quality Tools&quot;. In this article I would like to share results of that survey with you.
</description>
      <pubDate>Sun, 13 Aug 2017 17:40:30 +0000</pubDate>
      <link>http://rubyblog.pro/2017/08/results-of-the-code-quality-tools-survey</link>
      <guid>http://rubyblog.pro/2017/08/results-of-the-code-quality-tools-survey</guid>
    </item>
    <item>
      <title>Using dry-container to implement Inversion Of Control for Hanami::Events</title>
      <description>Hi guys, today we will go through the idea of Inversion Of Control (IoC) by really interesting example: `Hanami::Events` gem.
</description>
      <pubDate>Sun, 06 Aug 2017 20:15:18 +0000</pubDate>
      <link>http://rubyblog.pro/2017/08/inversion-of-control-wtih-dry-container-for-hanami-events</link>
      <guid>http://rubyblog.pro/2017/08/inversion-of-control-wtih-dry-container-for-hanami-events</guid>
    </item>
    <item>
      <title>Implementing inheritance with params: CreateProducts &lt; ActiveRecord::Migration[5.0]</title>
      <description>In Rails 5 each migration class is inherited from `ActiveRecord::Migration[5.0]`. It looks quite unusual to see that `[5.0]` part at the end of the parent class. In this article I'll describe why we might need it and how it works.
</description>
      <pubDate>Mon, 17 Jul 2017 14:28:55 +0000</pubDate>
      <link>http://rubyblog.pro/2017/07/implementing-inheritance-with-params</link>
      <guid>http://rubyblog.pro/2017/07/implementing-inheritance-with-params</guid>
    </item>
    <item>
      <title>SOLI[D] - Dependency Inversion Principle</title>
      <description>This is the last article on SOLID principles and today we're going to talk about Dependency Inversion Principle.
</description>
      <pubDate>Fri, 14 Jul 2017 14:59:15 +0000</pubDate>
      <link>http://rubyblog.pro/2017/07/solid-dependency-inversion-principle</link>
      <guid>http://rubyblog.pro/2017/07/solid-dependency-inversion-principle</guid>
    </item>
  </channel>
</rss>
