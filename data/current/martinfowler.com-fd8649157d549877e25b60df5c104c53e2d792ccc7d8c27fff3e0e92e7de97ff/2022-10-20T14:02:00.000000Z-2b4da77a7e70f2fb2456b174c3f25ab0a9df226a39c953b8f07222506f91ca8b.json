{
  "title":"Bliki: ConwaysLaw",
  "date":"2022-10-20T14:02:00.000000Z",
  "author":null,
  "id":"https://martinfowler.com/bliki/ConwaysLaw.html",
  "link":"https://martinfowler.com/bliki/ConwaysLaw.html",
  "content":"\n<p>Pretty much all the practitioners I favor in Software Architecture are deeply\n  suspicious of any kind of general law in the field. Good software architecture\n  is very context-specific, analyzing trade-offs that resolve differently across a wide range\n  of environments. But if there is one thing they all agree on, it's the importance\n  and power of Conway's Law. Important enough to affect every system I've\n  come across, and powerful enough that you're doomed to defeat if you try to\n  fight it.</p>\n\n<p>The law is probably best stated, by its author, as:  <span class=\"foot-ref\"><a href=\"#footnote-source\">[1]</a></span></p>\n\n<blockquote>\n<p>Any organization that designs a system (defined broadly) will produce a\n    design whose structure is a copy of the organization's communication\n    structure.\n    </p>\n\n<p class=\"quote-attribution\">-- <a href=\"https://www.melconway.com/Home/Conways_Law.html\">Melvin Conway</a></p>\n</blockquote>\n\n<p>Conway's Law is essentially the observation that the architectures of\n  software systems look remarkably similar to the organization of the\n  development team that built it. It was originally described to me by saying\n  that if a single team writes a compiler, it will be a one-pass compiler, but\n  if the team is divided into two, then it will be a two-pass compiler. Although\n  we usually discuss it with respect to software, the observation applies broadly\n  to systems in general. <span class=\"foot-ref\"><a href=\"#footnote-broader\">[2]</a></span></p>\n\n<div class=\"figure \"><img src=\"https://martinfowler.com/bliki/images/conwaysLaw/card.png\">\n<p class=\"photoCaption\"></p>\n</div>\n\n<p>As my colleague Chris Ford said to me: &quot;Conway understood that software\n  coupling is enabled and encouraged by human communication.&quot; If I can talk\n  easily to the author of some code, then it is easier for me to build up a rich\n  understanding of that code. This makes it easier for my code to interact, and\n  thus be coupled, to that code. Not just in terms of explicit function calls,\n  but also in the implicit shared assumptions and way of thinking about the\n  problem domain.</p>\n\n<p>We often see how inattention to the law can twist system architectures. If\n  an architecture is designed at odds with the development organization's\n  structure, then tensions appear in the software structure. Module interactions\n  that were designed to be straightforward become complicated, because the teams\n  responsible for them don't work together well. Beneficial design alternatives\n  aren't even considered because the necessary development groups aren't talking\n  to each other.</p>\n\n<p>A dozen or two people can have deep and informal communications, so Conways Law\n  indicates they will create a monolith. That's fine - so Conway's Law doesn't\n  impact our thinking for smaller teams. It's when the humans need organizing\n  that Conway's Law should affect decision making.</p>\n\n<p>The first step in dealing with Conway's Law is know not to fight it. I\n  still remember one sharp technical leader, who was just made the architect of a large\n  new project that consisted of six teams in different\n  cities all over the world. “I made my first architectural decision” he told\n  me. “There are going to be six major subsystems. I have no idea what they are\n  going to be, but there are going to be six of them.”</p>\n\n<p>This example recognized the big impact location has on human communication.\n  Putting teams on separate floors of the same building is enough to\n  significantly reduce communication. Putting teams in separate cities, and time\n  zones, further gets in the way of regular conversation. The architect\n  recognized this, and realized that he needed take this into account in his\n  technical design from the beginning. Components developed in different\n  time-zones needed to have a well-defined and limited interaction because their\n  creators would not be able to talk easily.<span class=\"foot-ref\"><a href=\"#footnote-remote\">[3]</a></span></p>\n\n<p>A common mismatch with Conways Law is where an <a href=\"/bliki/ActivityOriented.html\">ActivityOriented</a>\n  team organization works at cross-purposes to feature development. Teams\n  organized by software layer (eg front-end, back-end, and database) lead to\n  dominant <a href=\"/bliki/PresentationDomainDataLayering.html\">PresentationDomainDataLayering</a> structures, which is\n  problematic because each feature needs close collaboration between the layers.\n  Similarly dividing people along the lines of life-cycle activity (analysis,\n  design, coding, testing) means lots of hand-offs to get a feature from idea\n  to production.</p>\n\n<p>Accepting Conway's Law is superior to ignoring it, and in the last decade,\n  we've seen a third way to respond to this law. Here we deliberately alter the\n  development team's organization structure to encourage the desired software\n  architecture, an approach referred to as the <b id=\"icm\">Inverse\n  Conway Maneuver</b> <span class=\"foot-ref\"><a href=\"#footnote-inv\">[4]</a></span>. This approach is often talked\n  about in the world of <a href=\"/articles/microservices.html#OrganizedAroundBusinessCapabilities\">microservices</a>, where advocates\n  advise building small, long-lived <a href=\"/bliki/BusinessCapabilityCentric.html\">BusinessCapabilityCentric</a> teams\n  that contain all the skills needed to deliver customer value. By organizing\n  autonomous teams this way, we employ Conway's Law to encourage similarly\n  autonomous services that can be enhanced and deployed independently of each\n  other. This, indeed, is why I describe microservices as primarily a tool to\n  structure a development organization. </p>\n\n<table class=\"dark-head\">\n<caption>Responses to Conway's Law</caption>\n\n<thead>\n<tr/>\n</thead>\n\n<tbody>\n<tr><td>Ignore</td><td> Don't take Conway's Law into account, because you've never heard of it, or you don't think it applies (narrator: it does)</td></tr>\n\n<tr><td>Accept</td><td> Recognize the impact of Conway's Law, and ensure your architecture doesn't clash with designers' communication patterns.</td></tr>\n\n<tr><td>Inverse Conway Maneuver</td><td> Change the communication patterns of the designers to encourage the desired software architecture.</td></tr>\n</tbody>\n</table>\n\n<p>While the inverse Conway maneuver is a useful tool, it isn't all-powerful.\n  If you have an existing system with a rigid architecture that you want to\n  change, changing the development organization <a href=\"https://verraes.net/2022/05/conways-law-vs-rigid-designs/\">isn't going to be an instant\n  fix</a>. Instead it's more likely to result in a mismatch between developers\n  and code that adds friction to further enhancement. With an existing system\n  like this, the point of Conway's Law is that we need to take into account its\n  presence while changing both organization and code base. And as usual, I'd\n  recommend taking small steps while being vigilant for feedback.</p>\n\n<p>Domain-Driven Design plays a role with Conway's Law to help define organization\n  structures, since a key part of DDD is to identify <a href=\"/bliki/BoundedContext.html\">BoundedContexts</a>.\n  A key characteristic of a Bounded Context is that it has its own\n  <a href=\"/bliki/UbiquitousLanguage.html\">UbiquitousLanguage</a>, defined and understood by the group of people\n  working in that context. Such contexts form ways to group people around a\n  subject matter that can then align with the flow of value.</p>\n\n<p class=\"final\">The key thing to remember about Conways Law is that the\n  modular decomposition of a system and the decomposition of the development\n  organization must be done together. This isn't just at the beginning,\n  evolution of the architecture and reorganizing the human organization must go\n  hand-in-hand throughout the life of an enterprise.</p>\n\n<div class=\"furtherReading\">\n<h2>Further Reading</h2>\n\n<p>Recognizing the importance of Conway's Law means that budding software\n    architects need to think about IT organization design. Two worthwhile books\n    on this topic are <a href=\"https://www.amazon.com/gp/product/0133903354/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0133903354&amp;linkCode=as2&amp;tag=martinfowlerc-20\">Agile IT Organization Design</a>\n    by Narayan and <a href=\"https://www.amazon.com/gp/product/1942788819/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1942788819&amp;linkCode=as2&amp;tag=martinfowlerc-20\">Team Topologies</a> by Skelton and\n    Pais.</p>\n\n<p>Birgitta Böckeler, Mike Mason, James Lewis and I discuss our experiences\n    with Conway's Law on the <a href=\"https://www.thoughtworks.com/insights/podcasts/technology-podcasts/reckoning-with-the-force-conways-law\">ThoughtWorks Technology Podcast</a></p>\n</div>\n\n<div class=\"acknowledgements\">\n<h2>Acknowledgements</h2>\nBill Codding, Birgitta Boeckeler, Camilla Crispim, Chris Ford, Gabriel\n      Sadaka, Matteo Vaccari, Michael Chaffee, and Unmesh Joshi\n\n    reviewed drafts of this article and suggested improvements\n  </div>\n\n<div class=\"footnote-list\">\n<h2>Notes</h2>\n\n<div class=\"footnote-list-item\" id=\"footnote-source\">\n<p><span class=\"num\">1: </span>\n      The source for Conway's law is <a href=\"https://www.melconway.com/Home/Committees_Paper.html\">an\n      article</a> written by Melvin Conway in 1968. It was published by Datamation,\n      one of the most important journals for the software\n      industry at that time. It was later dubbed “Conway’s Law” by Fred Brooks\n      in his hugely influential book <a href=\"https://www.amazon.com/gp/product/0201835959/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0201835959&amp;linkCode=as2&amp;tag=martinfowlerc-20\">The Mythical\n      Man-Month</a>. I ran into it there at the beginning of my career in the\n      1980s, and it has been a thought-provoking companion ever since.\n    </p>\n</div>\n\n<div class=\"footnote-list-item\" id=\"footnote-broader\">\n<p><span class=\"num\">2: </span>\n      As Conway mentions, consider how the social problems around poverty, health\n      care, housing, and education are influenced by the structures of government.\n    </p>\n</div>\n\n<div class=\"footnote-list-item\" id=\"footnote-remote\">\n<p><span class=\"num\">3: </span>\n      While location makes a big contribution to in-person communication\n      patterns, one of the features of <a href=\"/articles/remote-or-co-located.html#remote-first\">remote-first</a> working, is that it reduces the role of\n      distance, as everyone is communicating online. Conway's Law still applies,\n      but it's based on the online communication patterns. Time zones still\n      have a big effect, even online.\n    </p>\n</div>\n\n<div class=\"footnote-list-item\" id=\"footnote-inv\">\n<p><span class=\"num\">4: </span>\n      The term “inverse Conway maneuver” was coined by Jonny LeRoy and Matt\n      Simons in <a href=\"http://jonnyleroy.com/2011/02/03/dealing-with-creaky-legacy-platforms/\">an article</a> published in the December 2010\n      issue of the  Cutter IT journal.\n    </p>\n</div>\n</div>\n\n<div class=\"revisions\">\n<h2>Revisions</h2>\n\n<p>2022-10-24: I added the paragraph about the\n    inverse Conway maneuver and rigid architectures. I also added the footnote\n    about remote-first working.</p>\n</div>\n"
}