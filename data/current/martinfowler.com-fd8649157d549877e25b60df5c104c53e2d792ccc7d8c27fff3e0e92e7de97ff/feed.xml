<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <link href="https://martinfowler.com/feed.atom" rel="self">
  <link href="https://martinfowler.com">
  <id>https://martinfowler.com/feed.atom</id>
  <title>Martin Fowler</title>
  <subtitle>Master feed of news and updates from martinfowler.com</subtitle>
  <author>
    <name>Martin Fowler</name>
    <email>fowler@acm.org</email>
    <uri>https://martinfowler.com</uri>
  </author>
  <updated>2021-08-26T12:15:00-04:00</updated>
<entry>
    <title>What I'm up to now</title>
    <link href="https://martinfowler.com/articles/202107-what-doing-now.html">
    <updated>2021-08-26T12:15:00-04:00</updated>
    <id>tag:martinfowler.com,2021-08-26:What-I-m-up-to-now</id>
    <content type="html">
&lt;p&gt;A couple of months ago I announced that I was stepping back from
      speaking. A few people wondered whether I would still be writing. I did
      indicate in that article that I am, but I felt it may be worth saying a
      bit more about what I&amp;#x2019;m concentrating on these days.&lt;/p&gt;

&lt;p&gt;&lt;a class = 'more' href = 'https://martinfowler.com/articles/202107-what-doing-now.html'&gt;more…&lt;/a&gt;&lt;/p&gt;</content>
  </entry>

<entry>
    <title>Gateway Pattern</title>
    <link href="https://martinfowler.com/articles/gateway-pattern.html">
    <updated>2021-08-10T10:51:00-04:00</updated>
    <id>tag:martinfowler.com,2021-08-10:Gateway-Pattern</id>
    <content type="html">
&lt;div class = 'img'&gt;&lt;a href = 'https://martinfowler.com/articles/gateway-pattern.html'&gt;&lt;img src = 'https://martinfowler.com/articles/gateway-pattern/card.png' width = ''&gt;&lt;/img&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;We often need to access APIs from foreign codebases, and these foreign
      codebases usually have different vocabularies to ours. I've found it
      useful to encapsulate this interaction with a &lt;a href = 'https://martinfowler.com/articles/gateway-pattern.html'&gt;gateway&lt;/a&gt; that
      translates between our code and foreign code.&lt;/p&gt;

&lt;p&gt;&lt;a class = 'more' href = 'https://martinfowler.com/articles/gateway-pattern.html'&gt;more…&lt;/a&gt;&lt;/p&gt;</content>
  </entry>

<entry>
    <title>An example: Integration Middleware Removal</title>
    <link href="https://martinfowler.com/articles/patterns-legacy-displacement/#AnExampleIntegrationMiddlewareRemoval">
    <updated>2021-07-29T09:49:00-04:00</updated>
    <id>tag:martinfowler.com,2021-07-29:An-example--Integration-Middleware-Removal</id>
    <category term="skip-home-page"/>
    <content type="html">
&lt;div class = 'img'&gt;&lt;a href = 'https://martinfowler.com/articles/patterns-legacy-displacement/#AnExampleIntegrationMiddlewareRemoval'&gt;&lt;img src = 'https://martinfowler.com/articles/patterns-legacy-displacement/card.png' width = ''&gt;&lt;/img&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;To illustrate how these patterns work in practice, Ian, Rob, and James
      describe &lt;a href = 'https://martinfowler.com/articles/patterns-legacy-displacement/#AnExampleIntegrationMiddlewareRemoval'&gt;an example&lt;/a&gt; of how one of our teams used a number of Legacy
      Modernization Patterns to successfully replace integration middleware
      critical to the operation of their client's business as part of a larger
      legacy modernization programme. They combined patterns and refactorings to
      successfully manage risk to the business, and facilitate eating this
      particularly gristly part of the elephant.&lt;/p&gt;

&lt;p&gt;&lt;a class = 'more' href = 'https://martinfowler.com/articles/patterns-legacy-displacement/#AnExampleIntegrationMiddlewareRemoval'&gt;more…&lt;/a&gt;&lt;/p&gt;</content>
  </entry>

<entry>
    <title>Feature Parity</title>
    <link href="https://martinfowler.com/articles/patterns-legacy-displacement/feature-parity.html">
    <updated>2021-07-27T09:08:00-04:00</updated>
    <id>tag:martinfowler.com,2021-07-27:Feature-Parity</id>
    <category term="skip-home-page"/>
    <content type="html">
&lt;div class = 'img'&gt;&lt;a href = 'https://martinfowler.com/articles/patterns-legacy-displacement/feature-parity.html'&gt;&lt;img src = 'https://martinfowler.com/articles/patterns-legacy-displacement/card.png' width = ''&gt;&lt;/img&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;On many occasions when my colleagues find themselves talking to IT
      executives they hear how the executives have a suite of aging applications
      built using soon to be, if not already end of life technologies. More
      often that not these systems are hosted in costly data centers managed by
      3rd parties and with inflexible contracts. These applications are critical
      to the successful operation of the business, while at the same time being
      one of the largest sources of business and operational risk.&lt;/p&gt;

&lt;p&gt;One approach in this situation is to try to minimize the impact of
      replacement on the broader organization by 'simply' replacing the
      technology while leaving everything else 'as is'. Whilst &lt;a href = 'https://martinfowler.com/articles/patterns-legacy-displacement/feature-parity.html'&gt;Feature Parity&lt;/a&gt;
      often sounds like a reasonable proposition, we have learnt the hard way
      that people greatly underestimate the effort required, and thus misjudge
      the choice between this and the other alternatives.&lt;/p&gt;

&lt;p&gt;&lt;a class = 'more' href = 'https://martinfowler.com/articles/patterns-legacy-displacement/feature-parity.html'&gt;more…&lt;/a&gt;&lt;/p&gt;</content>
  </entry>

<entry>
    <title>Extract Product Lines</title>
    <link href="https://martinfowler.com/articles/patterns-legacy-displacement/extract-product-lines.html">
    <updated>2021-07-21T10:00:00-04:00</updated>
    <id>tag:martinfowler.com,2021-07-21:Extract-Product-Lines</id>
    <category term="skip-home-page"/>
    <content type="html">
&lt;div class = 'img'&gt;&lt;a href = 'https://martinfowler.com/articles/patterns-legacy-displacement/extract-product-lines.html'&gt;&lt;img src = 'https://martinfowler.com/articles/patterns-legacy-displacement/card.png' width = ''&gt;&lt;/img&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;To do effective legacy displacement, we need to figure out how to break
      down the problem into manageable pieces. &lt;a href = 'https://martinfowler.com/articles/patterns-legacy-displacement/extract-product-lines.html'&gt;Extract Product Lines&lt;/a&gt; does this
      by identifying product lines and using them as the basis for migration.&lt;/p&gt;

&lt;p&gt;&lt;a class = 'more' href = 'https://martinfowler.com/articles/patterns-legacy-displacement/extract-product-lines.html'&gt;more…&lt;/a&gt;&lt;/p&gt;</content>
  </entry>

<entry>
    <title>Patterns of Legacy Displacement</title>
    <link href="https://martinfowler.com/articles/patterns-legacy-displacement/">
    <updated>2021-07-20T08:22:00-04:00</updated>
    <id>tag:martinfowler.com,2021-07-20:Patterns-of-Legacy-Displacement</id>
    <content type="html">
&lt;div class = 'img'&gt;&lt;a href = 'https://martinfowler.com/articles/patterns-legacy-displacement/'&gt;&lt;img src = 'https://martinfowler.com/articles/patterns-legacy-displacement/card.png' width = ''&gt;&lt;/img&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;My colleagues do a lot of work that involves replacing legacy software
      systems. Three of my colleagues - Ian Cartwright, Rob Horn, and
      James Lewis - have started to capture their
      experience and advice for this is a collection of patterns. We begin with an
      &lt;a href = 'https://martinfowler.com/articles/patterns-legacy-displacement/'&gt;overview article&lt;/a&gt; that lays out four main categories of activity that need
      to be done for a successful legacy displacement.&lt;/p&gt;

&lt;p&gt;&lt;a class = 'more' href = 'https://martinfowler.com/articles/patterns-legacy-displacement/'&gt;more…&lt;/a&gt;&lt;/p&gt;</content>
  </entry>

<entry>
    <title>photostream 126</title>
    <link href="https://martinfowler.com/photos/126.html">
    <updated>2021-07-02T17:13:00-04:00</updated>
    <id>tag:martinfowler.com,2021-07-02:photostream-126</id>
    <category term="photostream"/>
    <content type="html">
&lt;p&gt;&lt;a href = 'https://martinfowler.com/photos/126.html'&gt;&lt;img src = 'https://martinfowler.com/photos/126.jpg'&gt;&lt;/img&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Bacharach, Rhineland-Palatinate, Germany (2016)&lt;/p&gt;
</content>
  </entry>

<entry>
    <title>Follower Reads</title>
    <link href="https://martinfowler.com/articles/patterns-of-distributed-systems/follower-reads.html">
    <updated>2021-07-01T10:16:00-04:00</updated>
    <id>tag:martinfowler.com,2021-07-01:Follower-Reads</id>
    <category term="skip-home-page"/>
    <content type="html">
&lt;div class = 'img'&gt;&lt;a href = 'https://martinfowler.com/articles/patterns-of-distributed-systems/follower-reads.html'&gt;&lt;img src = 'https://martinfowler.com/articles/patterns-of-distributed-systems/card.png' width = ''&gt;&lt;/img&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;When you are using Leaders and Followers, you can use &lt;a href = 'https://martinfowler.com/articles/patterns-of-distributed-systems/follower-reads.html'&gt;Follower Reads&lt;/a&gt; to
      achieve better throughput and lower latency. However there is always a
      replication lag between the leader and the followers, so you may need to
      take action to preserve consistency.&lt;/p&gt;

&lt;p&gt;&lt;a class = 'more' href = 'https://martinfowler.com/articles/patterns-of-distributed-systems/follower-reads.html'&gt;more…&lt;/a&gt;&lt;/p&gt;</content>
  </entry>

<entry>
    <title>Stepping Back from Speaking</title>
    <link href="https://martinfowler.com/articles/202106-reducing-speaking.html">
    <updated>2021-06-29T11:02:00-04:00</updated>
    <id>tag:martinfowler.com,2021-06-29:Stepping-Back-from-Speaking</id>
    <content type="html">
&lt;p&gt;A personal note on why I wish to give up doing talks&lt;/p&gt;

&lt;p&gt;&lt;a class = 'more' href = 'https://martinfowler.com/articles/202106-reducing-speaking.html'&gt;more…&lt;/a&gt;&lt;/p&gt;</content>
  </entry>

<entry>
    <title>Version Vector</title>
    <link href="https://martinfowler.com/articles/patterns-of-distributed-systems/version-vector.html">
    <updated>2021-06-29T10:23:00-04:00</updated>
    <id>tag:martinfowler.com,2021-06-29:Version-Vector</id>
    <category term="skip-home-page"/>
    <content type="html">
&lt;div class = 'img'&gt;&lt;a href = 'https://martinfowler.com/articles/patterns-of-distributed-systems/version-vector.html'&gt;&lt;img src = 'https://martinfowler.com/articles/patterns-of-distributed-systems/card.png' width = ''&gt;&lt;/img&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;A Lamport Clock is effective to order events on a single server, but
      with multiple servers we need a &lt;a href = 'https://martinfowler.com/articles/patterns-of-distributed-systems/version-vector.html'&gt;vector of version numbers&lt;/a&gt; to detect
      concurrent updates.&lt;/p&gt;

&lt;p&gt;&lt;a class = 'more' href = 'https://martinfowler.com/articles/patterns-of-distributed-systems/version-vector.html'&gt;more…&lt;/a&gt;&lt;/p&gt;</content>
  </entry>

<entry>
    <title>Hybrid Clock</title>
    <link href="https://martinfowler.com/articles/patterns-of-distributed-systems/hybrid-clock.html">
    <updated>2021-06-24T11:17:00-04:00</updated>
    <id>tag:martinfowler.com,2021-06-24:Hybrid-Clock</id>
    <category term="skip-home-page"/>
    <content type="html">
&lt;div class = 'img'&gt;&lt;a href = 'https://martinfowler.com/articles/patterns-of-distributed-systems/hybrid-clock.html'&gt;&lt;img src = 'https://martinfowler.com/articles/patterns-of-distributed-systems/card.png' width = ''&gt;&lt;/img&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;While a Lamport Clock is often necessary to order events in a
      distributed system, clients often need to know the actual times too.
     The &lt;a href = 'https://martinfowler.com/articles/patterns-of-distributed-systems/hybrid-clock.html'&gt;Hybrid Clock&lt;/a&gt;,  Unmesh's next pattern, combines these two demands.&lt;/p&gt;

&lt;p&gt;&lt;a class = 'more' href = 'https://martinfowler.com/articles/patterns-of-distributed-systems/hybrid-clock.html'&gt;more…&lt;/a&gt;&lt;/p&gt;</content>
  </entry>

<entry>
    <title>Lamport Clock</title>
    <link href="https://martinfowler.com/articles/patterns-of-distributed-systems/lamport-clock.html">
    <updated>2021-06-23T11:17:00-04:00</updated>
    <id>tag:martinfowler.com,2021-06-23:Lamport-Clock</id>
    <category term="skip-home-page"/>
    <content type="html">
&lt;div class = 'img'&gt;&lt;a href = 'https://martinfowler.com/articles/patterns-of-distributed-systems/lamport-clock.html'&gt;&lt;img src = 'https://martinfowler.com/articles/patterns-of-distributed-systems/card.png' width = ''&gt;&lt;/img&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;Next distributed system pattern from Unmesh is the &lt;a href = 'https://martinfowler.com/articles/patterns-of-distributed-systems/lamport-clock.html'&gt;Lamport Clock&lt;/a&gt;.
      Distributed systems can't assume that time is consistent between servers,
      and sometimes time goes backwards. Yet it's important to have some way to order events.&lt;/p&gt;

&lt;p&gt;&lt;a class = 'more' href = 'https://martinfowler.com/articles/patterns-of-distributed-systems/lamport-clock.html'&gt;more…&lt;/a&gt;&lt;/p&gt;</content>
  </entry>

<entry>
    <title>Versioned Value</title>
    <link href="https://martinfowler.com/articles/patterns-of-distributed-systems/versioned-value.html">
    <updated>2021-06-22T09:23:00-04:00</updated>
    <id>tag:martinfowler.com,2021-06-22:Versioned-Value</id>
    <category term="skip-home-page"/>
    <content type="html">
&lt;div class = 'img'&gt;&lt;a href = 'https://martinfowler.com/articles/patterns-of-distributed-systems/versioned-value.html'&gt;&lt;img src = 'https://martinfowler.com/articles/patterns-of-distributed-systems/card.png' width = ''&gt;&lt;/img&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;When a distributed system has mutable data, nodes need to know which is
      the most recent value, so a &lt;a href = 'https://martinfowler.com/articles/patterns-of-distributed-systems/versioned-value.html'&gt;versioned value&lt;/a&gt; stores a version
      number with every value.&lt;/p&gt;

&lt;p&gt;&lt;a class = 'more' href = 'https://martinfowler.com/articles/patterns-of-distributed-systems/versioned-value.html'&gt;more…&lt;/a&gt;&lt;/p&gt;</content>
  </entry>

<entry>
    <title>Gossip Dissemination</title>
    <link href="https://martinfowler.com/articles/patterns-of-distributed-systems/gossip-dissemination.html">
    <updated>2021-06-17T10:18:00-04:00</updated>
    <id>tag:martinfowler.com,2021-06-17:Gossip-Dissemination</id>
    <content type="html">
&lt;div class = 'img'&gt;&lt;a href = 'https://martinfowler.com/articles/patterns-of-distributed-systems/gossip-dissemination.html'&gt;&lt;img src = 'https://martinfowler.com/articles/patterns-of-distributed-systems/card.png' width = ''&gt;&lt;/img&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;Unmesh Joshi is completing another batch of his series on Patterns of
      Distributed Systems. First of these is &lt;a href = 'https://martinfowler.com/articles/patterns-of-distributed-systems/gossip-dissemination.html'&gt;Gossip Dissemination&lt;/a&gt;, which uses a
      random selection of nodes to pass on information to ensure it reaches all
      the nodes in the cluster without flooding the network&lt;/p&gt;

&lt;p&gt;&lt;a class = 'more' href = 'https://martinfowler.com/articles/patterns-of-distributed-systems/gossip-dissemination.html'&gt;more…&lt;/a&gt;&lt;/p&gt;</content>
  </entry>

<entry>
    <title>On the Diverse And Fantastical Shapes of Testing</title>
    <link href="https://martinfowler.com/articles/2021-test-shapes.html">
    <updated>2021-06-02T11:58:00-04:00</updated>
    <id>tag:martinfowler.com,2021-06-02:On-the-Diverse-And-Fantastical-Shapes-of-Testing</id>
    <content type="html">
&lt;p&gt;There are arguments about whether a testing portfolio should be a
      pyramid or more like honeycomb. My second biggest issue with this argument
      is that it's rendered opaque by the fact that it's not clear what people
      see as the difference between unit and integration tests.&lt;/p&gt;

&lt;p&gt;&lt;a class = 'more' href = 'https://martinfowler.com/articles/2021-test-shapes.html'&gt;more…&lt;/a&gt;&lt;/p&gt;</content>
  </entry>

<entry>
    <title>Mind the platform execution gap</title>
    <link href="https://martinfowler.com/articles/platform-prerequisites.html">
    <updated>2021-04-27T09:51:00-04:00</updated>
    <id>tag:martinfowler.com,2021-04-27:Mind-the-platform-execution-gap</id>
    <content type="html">
&lt;div class = 'img'&gt;&lt;a href = 'https://martinfowler.com/articles/platform-prerequisites.html'&gt;&lt;img src = 'https://martinfowler.com/articles/platform-prerequisites/card.png' width = ''&gt;&lt;/img&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;Recently there's been a lot of interest, indeed hype, around building
      developer productivity platforms. Done well, they make it easier for
      developers to build systems aligned with the technology strategy and allow
      them to build useful features more quickly. However many organizations
      struggle because in order to do a good job of platforms, you need to have
      a number of baseline capabilities in place first. That way the platform
      can be designed and operated as if it were a a software product with a
      demanding public customer-base.&lt;/p&gt;

&lt;p&gt;&lt;a class = 'more' href = 'https://martinfowler.com/articles/platform-prerequisites.html'&gt;more…&lt;/a&gt;&lt;/p&gt;</content>
  </entry>

<entry>
    <title>Bitemporal History</title>
    <link href="https://martinfowler.com/articles/bitemporal-history.html">
    <updated>2021-04-07T10:00:00-04:00</updated>
    <id>tag:martinfowler.com,2021-04-07:Bitemporal-History</id>
    <content type="html">
&lt;div class = 'img'&gt;&lt;a href = 'https://martinfowler.com/articles/bitemporal-history.html'&gt;&lt;img src = 'https://martinfowler.com/articles/bitemporal-history/card.png' width = ''&gt;&lt;/img&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;It's often necessary to access the historical values of some property.
      But sometimes this history itself needs to be modified in response to
      retroactive updates. Bitemporal history treats time as two dimensions:
      actual history records what history should be given perfect transmission
      of information, while record history captures how our knowledge of history
      changes.&lt;/p&gt;

&lt;p&gt;&lt;a class = 'more' href = 'https://martinfowler.com/articles/bitemporal-history.html'&gt;more…&lt;/a&gt;&lt;/p&gt;</content>
  </entry>

<entry>
    <title>Bliki: RefinementCodeReview</title>
    <link href="https://martinfowler.com/bliki/RefinementCodeReview.html">
    <updated>2021-01-28T10:38:00-05:00</updated>
    <id>https://martinfowler.com/bliki/RefinementCodeReview.html</id>
    <category term="bliki"/>
    <content type="html">
&lt;p&gt;When people think of code reviews, they usually think in terms of an
  explicit step in a development team's workflow. These days the &lt;a href=&quot;/articles/branching-patterns.html#reviewed-commits&quot;&gt;Pre-Integration Review&lt;/a&gt;, carried out on a &lt;a href=&quot;/bliki/PullRequest.html&quot;&gt;Pull Request&lt;/a&gt; is the most common mechanism for a code review, to the
  point that many people witlessly consider that not using pull requests removes
  all opportunities for doing code review. Such a narrow view of code reviews
  doesn't just ignore a host of explicit mechanisms for review, it more
  importantly neglects probably the most powerful code review technique - that
  of perpetual refinement done by the entire team.&lt;/p&gt;

&lt;p&gt;One of the most pervasive perspectives in software is the notion that it's
  something we build and complete - hence the endless metaphor of building
  construction and architecture. Yet the key property of software is that it is
  &lt;i&gt;soft&lt;/i&gt;, and can be as easily modified after it's released as
  it was when initially composed in the programmer's editor. That's why Erik Dörnenburg
  wisely argues that architecture is a poor metaphor and would be better
  &lt;a href=&quot;https://youtu.be/qVyt3qQ_7TA?t=228&quot;&gt;replaced by town planning&lt;/a&gt;. Valuable
  software is usually in a constant state of change, as we add features from a
  better understanding of the value it can bring. But the opportunity is not
  just to add new features, but also to refine that software - incorporating the
  lessons the 
  team steadily learns about how best that software can enable
  these changes.&lt;/p&gt;

&lt;p&gt;With the right environment, I can look a bit of code written six months
  ago, see some problems with how it's written, and quickly fix them. This may
  be because this code was flawed when it was written, or that changes in the
  code base since led to the code no longer being quite right. Whichever the
  cause, the important thing is to fix problems as soon as they start getting in
  our way. As soon as I have an understanding about the code that wasn't
  immediately apparent from reading it, I have the responsibility to (as Ward
  Cunningham so wonderfully said) take that understanding out of my head and put
  it into the code. That way the next reader won't have to work so hard. &lt;/p&gt;

&lt;p&gt;This process of refinement is exactly the same as what happens in a code
  review, but it's triggered each time the code is looked at rather than when the
  code is added to the codebase. This was, for me, a crucial insight. After all,
  many problems that code reviews seek to remedy are problems that only become
  problems when the code is read in the future. There's a strong argument for
  not worrying about them until then. After all, just like adding a large
  apartment complex changes traffic patterns, we may have altered the context of
  the code six months later, altering the kind of fix that code needs. It also
  involves more people, in this scheme every developer that reads the code is a
  reviewer, and one that's able to review based on their actual use of the code
  rather than on some general, but often hazily-justified guidelines. &lt;/p&gt;

&lt;p&gt;A way to think about the validity of a practice is by thinking about
  what happens if it's a monopoly. What if the only code review mechanism we
  have is the iteration from later programmers? One consequence is that the
  review attention gets concentrated on the areas of code that are read more
  often - which is mostly the areas that ought to get the attention. One
  concern is that code that's never read will never get reviewed - but
  mostly that's fine. A team with good testing practices can be confident that
  the code works, performance tests can identify performance issues. Given that, if
  the code never needs to be looked at again, we don't need to spend effort on
  making it comprehensible. I'd expect such cases to be vanishingly rare, but
  it's an informative thought experiment.&lt;/p&gt;

&lt;p&gt;But most ≠ all. One obvious exception here is security issues. Code can
  work just fine for years until an attacker finds an exploit, at that point
  we'll lament its lack of review. This is an example of high-impact but rare
  safety concerns which deserve special scrutiny. However that doesn't mean we
  shouldn't make conscious use of refinement as a code review mechanism. Instead
  it means we should be aware of rare-high-impact concerns and adjust our
  workflow to watch for that kind of specific problem to the degree that it's
  needed in our circumstances. Threat analysis should alert us to the modules
  that need additional attention and the kinds of risks they face. Targeted code
  reviews might be scheduled for security concerns, these can run more
  effectively because they are focused on a specific kind of problem.&lt;/p&gt;

&lt;p&gt;In order to do this perpetual code refinement we require other practices.
  If I'm going to change code I need to have confidence that it won't break
  existing functionality, so I need something like &lt;a href=&quot;/bliki/SelfTestingCode.html&quot;&gt;Self Testing Code&lt;/a&gt;. I need to know that it won't cause big merge
  conflicts for others, so I need &lt;a href=&quot;/articles/branching-patterns.html#continuous-integration&quot;&gt;Continuous
  Integration&lt;/a&gt;. We all need to be good at &lt;a href=&quot;https://refactoring.com/&quot;&gt;refactoring&lt;/a&gt; so we can change code effectively. Since this
  relies on many developers being expected to modify any part of the code base,
  we are best off with &lt;a href=&quot;/bliki/CodeOwnership.html&quot;&gt;collective (or at least
  weak) code ownership.&lt;/a&gt; But given a team that has these skills, they
  can rely on using their regular refinement as a substantial part of their code
  review strategy.&lt;/p&gt;

&lt;p&gt;If nothing else, I think it's important that we put more thought into the
  role of refinement as code review. One of the dangers of focusing solely on
  Pre-Integration Reviews is that it can lead teams to neglect how change works
  in a code base. If I have a pristine mainline, and ensure that every commit
  merged into that mainline is pristine - can I be sure that the codebase is
  still pristine after six months? I'd argue that I can't, because the changes
  mean a good decision about some code six months ago is no longer a good
  decision now. Refining the code allows us to evaluate old code against this
  changing usage, allowing us to sustain its health. &lt;/p&gt;

&lt;div class=&quot;acknowledgements&quot;&gt;
&lt;h2&gt;Acknowledgements&lt;/h2&gt;
Ben Noble, Chris Ford, Evan Bottcher, Ian
    Cartwright, Jeremy Huiskamp, Ken Mugrage, Mario Giampietri, Martha Rohte, Omar Bashir, Peter Gillard-Moss, and Simon Brunning commented on drafts of this post on
    our internal mailing list.
  &lt;/div&gt;
</content>
  </entry>

<entry>
    <title>Bliki: PullRequest</title>
    <link href="https://martinfowler.com/bliki/PullRequest.html">
    <updated>2021-01-28T10:37:00-05:00</updated>
    <id>https://martinfowler.com/bliki/PullRequest.html</id>
    <category term="bliki"/>
    <content type="html">
&lt;p&gt;Pull Requests are a mechanism popularized by github, used to help facilitate merging of
  work, particularly in the context of open-source projects. A contributor works
  on their contribution in a fork (clone) of the central repository. Once their
  contribution is finished they create a pull request to notify the owner of the
  central repository that their work is ready to be merged into the mainline.
  Tooling supports and encourages code review of the
  contribution before accepting the request.  Pull requests have become widely
  used in software development, but critics are concerned by the addition of
  integration friction which can prevent continuous integration.&lt;/p&gt;

&lt;p&gt;Pull requests essentially provide convenient tooling for a development
  workflow that existed in many open-source projects, particularly those using a
  distributed source-control system (such as git). This workflow begins with a
  contributor creating a new logical branch, either by starting a new branch in
  the central repository, cloning into a personal repository, or both. The
  contributor then works on that branch, typically in the style of a &lt;a href=&quot;/articles/branching-patterns.html#feature-branching&quot;&gt;Feature Branch&lt;/a&gt;, pulling any updates from &lt;a href=&quot;/articles/branching-patterns.html#mainline&quot;&gt;Mainline&lt;/a&gt; into their branch. When they are done they communicate
  with the maintainer of the central repository indicating that they are done,
  together with a reference to their commits. This reference could be the URL of
  a branch that needs to be integrated, or a set of patches in
  an email.&lt;/p&gt;

&lt;p&gt;Once the maintainer gets the message, she can then examine the commits to
  decide if they are ready to go into mainline. If not, she can then suggest
  changes to the contributor, who then has opportunity to adjust their
  submission. Once all is ok, the maintainer can then merge, either with a
  regular merge/rebase or applying the patches from the final email.&lt;/p&gt;

&lt;p&gt;Github's pull request mechanism makes this flow much easier. It keeps track
  of the clones through its fork mechanism, and automatically creates a message
  thread to discuss the pull request, together with behavior to handle the
  various steps in the review workflow. These conveniences were a major part of
  what made github successful and led to &quot;pull request&quot; becoming a fundamental
  part of the developer's lexicon.&lt;/p&gt;

&lt;p&gt;So that's how pull requests work, but should we use them, and if so how? To
  answer that question, I like to step back from the mechanism and think about
  how it works in the context of a source code management workflow. To help me
  think about that, I wrote down a series of &lt;a href=&quot;/articles/branching-patterns.html&quot;&gt;patterns for managing source code branching&lt;/a&gt;. I
  find understanding these (specifically the Base and Integration patterns)
  clarifies the role of pull requests.&lt;/p&gt;

&lt;p&gt;In terms of these patterns, pull requests are a mechanism designed to
  implement a combination of &lt;a href=&quot;/articles/branching-patterns.html#feature-branching&quot;&gt;Feature Branching&lt;/a&gt; and
  &lt;a href=&quot;/articles/on-pair-programming.html#CodeReviewOn-the-go&quot;&gt;Pre-Integration Reviews&lt;/a&gt;. Thus to assess the
  usefulness of pull requests we first need to consider how applicable those
  patterns are to our situation. Like most patterns, they are sometimes
  valuable, and sometimes a pain in the neck - we have to examine them based on
  our specific context. Feature Branching is a good way of packaging together a
  logical contribution so that it can be assessed, accepted, or deferred as a
  single unit. This makes a lot of sense when contributors are not trusted to
  commit directly to mainline. But Feature Branching comes at a cost, which is
  that it usually limits the frequency of integration, leading to complicated
  merges and deterring refactoring. Pre-Integration Reviews provide a clear
  place to do code review at the cost of a significant increase in integration
  friction. &lt;span class=&quot;foot-ref&quot;&gt;&lt;a href=&quot;#footnote-pr-time&quot;&gt;[1]&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;That's a drastic summary of the situation (I need a lot more words to
  explain this further in the feature branching article), but it boils down to
  the fact that the value of these patterns, and thus the value of pull
  requests, rest mostly on the social structure of the team. Some teams work
  better with pull requests, some teams would find pull requests a severe drag
  on the effectiveness. I suspect that since pull requests are so popular, a lot
  of teams are using them by default when they would do better without them.&lt;/p&gt;

&lt;p&gt;While pull requests are built for Feature Branches, teams can use them
  within a &lt;a href=&quot;/articles/branching-patterns.html#continuous-integration&quot;&gt;Continuous Integration&lt;/a&gt; environment. To do
  this they need to ensure that pull requests are small enough, and the team
  responsive enough, to follow the CI rule of thumb that everybody does &lt;a href=&quot;/articles/branching-patterns.html#mainline-integration&quot;&gt;Mainline Integration&lt;/a&gt; at least daily. (And I should
  remind everyone that Mainline Integration is more than just merging the
  current mainline into the feature branch).&lt;/p&gt;

&lt;p&gt;The wide usage of pull requests has encouraged a wider use of code review,
  since pull requests provide a clear point for Pre-Integration Review, together
  with tooling that encourages it. Code review is a Good Thing, but we must
  remember that a pull request isn't the only mechanism we can use for it. Many
  teams find great value in the &lt;a href=&quot;/articles/on-pair-programming.html#CodeReviewOn-the-go&quot;&gt;continuous
  review&lt;/a&gt; afforded by Pair Programming. To avoid reducing integration
  frquency we can carry out post-integration code review in several ways. A
  formal process can record a review for each commit, or a tech lead can examine
  risky commits every couple of days. Perhaps the most powerful form of code
  review is one that's frequently ignored. A team that takes the attitude that
  the codebase is a fluid system, one that can be steadily refined with repeated
  iteration carries out &lt;a href=&quot;/bliki/RefinementCodeReview.html&quot;&gt;Refinement Code Review&lt;/a&gt; every time a
  developer looks at existing code. I often hear people say that pull requests
  are necessary because without them you can't do code reviews - that's rubbish.
  Pre-integration code review is just one way to do code reviews, and for many
  teams it isn't the best choice.&lt;/p&gt;

&lt;div class=&quot;acknowledgements&quot;&gt;
&lt;h2&gt;Acknowledgements&lt;/h2&gt;
Chris Ford, Dan Mutton, Jeremy Huiskamp, Kief Morris, Pramod
    Sadalage, and Ryan Boucher commented on drafts of this post on
    our internal mailing list.
  &lt;/div&gt;

&lt;div class=&quot;footnote-list&quot;&gt;
&lt;h2&gt;Notes&lt;/h2&gt;

&lt;div class=&quot;footnote-list-item&quot; id=&quot;footnote-pr-time&quot;&gt;
&lt;p&gt;&lt;span class=&quot;num&quot;&gt;1: &lt;/span&gt;
      A colleague of mine recently calculated the time a client spent waiting
      for pull requests that had no comments (true of 91% of them). Total time
      waiting in 2020 for 7000 PRs was 130,000 hours. This figure included time
      elapsed over nights and weekends. 
    &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>

<entry>
    <title>Distributed Systems Pattern: Idempotent Receiver</title>
    <link href="https://martinfowler.com/articles/patterns-of-distributed-systems/idempotent-receiver.html">
    <updated>2021-01-26T10:28:00-05:00</updated>
    <id>tag:martinfowler.com,2021-01-26:Distributed-Systems-Pattern--Idempotent-Receiver</id>
    <category term="skip-home-page"/>
    <content type="html">
&lt;div class = 'img'&gt;&lt;a href = 'https://martinfowler.com/articles/patterns-of-distributed-systems/idempotent-receiver.html'&gt;&lt;img src = 'https://martinfowler.com/articles/patterns-of-distributed-systems/card.png' width = ''&gt;&lt;/img&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;Clients send requests to servers but might not get a response. It's
      impossible for clients to know if the response was lost or the server
      crashed before processing the request. To make sure that the request is
      processed, the client has to re-send the request.

      If the server had already processed the request and crashed after that,
      servers will get duplicate requests when the client retries.&lt;/p&gt;

&lt;p&gt;&lt;a class = 'more' href = 'https://martinfowler.com/articles/patterns-of-distributed-systems/idempotent-receiver.html'&gt;more…&lt;/a&gt;&lt;/p&gt;</content>
  </entry>

<entry>
    <title>Maximizing Developer Effectiveness: Organizational Effectiveness</title>
    <link href="https://martinfowler.com/articles/developer-effectiveness.html#OrganizationalEffectiveness">
    <updated>2021-01-26T09:48:00-05:00</updated>
    <id>tag:martinfowler.com,2021-01-26:Maximizing-Developer-Effectiveness--Organizational-Effectiveness</id>
    <category term="skip-home-page"/>
    <content type="html">
&lt;div class = 'img'&gt;&lt;a href = 'https://martinfowler.com/articles/developer-effectiveness.html#OrganizationalEffectiveness'&gt;&lt;img src = 'https://martinfowler.com/articles/developer-effectiveness/micro-feedback-loops.png' width = ''&gt;&lt;/img&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;Tim finishes his article by looking at how highly effective
      organizations design their engineering organization to optimize for
      effectiveness and feedback loops. He illustrates what this looks like by
      the example of Etsy, who actively measures their ability to put valuable
      products into production quickly and safely, adjusting their
      technical investments to fix any blockers or slowness.&lt;/p&gt;

&lt;p&gt;&lt;a class = 'more' href = 'https://martinfowler.com/articles/developer-effectiveness.html#OrganizationalEffectiveness'&gt;more…&lt;/a&gt;&lt;/p&gt;</content>
  </entry>

<entry>
    <title>Distributed Systems Pattern: State Watch</title>
    <link href="https://martinfowler.com/articles/patterns-of-distributed-systems/state-watch.html">
    <updated>2021-01-19T10:28:00-05:00</updated>
    <id>tag:martinfowler.com,2021-01-19:Distributed-Systems-Pattern--State-Watch</id>
    <category term="skip-home-page"/>
    <content type="html">
&lt;div class = 'img'&gt;&lt;a href = 'https://martinfowler.com/articles/patterns-of-distributed-systems/state-watch.html'&gt;&lt;img src = 'https://martinfowler.com/articles/patterns-of-distributed-systems/card.png' width = ''&gt;&lt;/img&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;Clients are interested in changes to the specific values on the server.
      It's difficult for clients to structure their logic if they need to poll
      the server continuously to look for changes. If clients open too many
      connections to the server for watching changes, it can overwhelm the
      server.&lt;/p&gt;

&lt;p&gt;&lt;a class = 'more' href = 'https://martinfowler.com/articles/patterns-of-distributed-systems/state-watch.html'&gt;more…&lt;/a&gt;&lt;/p&gt;</content>
  </entry>

<entry>
    <title>Distributed Systems Pattern: Lease</title>
    <link href="https://martinfowler.com/articles/patterns-of-distributed-systems/time-bound-lease.html">
    <updated>2021-01-13T10:33:00-05:00</updated>
    <id>tag:martinfowler.com,2021-01-13:Distributed-Systems-Pattern--Lease</id>
    <category term="skip-home-page"/>
    <content type="html">
&lt;div class = 'img'&gt;&lt;a href = 'https://martinfowler.com/articles/patterns-of-distributed-systems/time-bound-lease.html'&gt;&lt;img src = 'https://martinfowler.com/articles/patterns-of-distributed-systems/card.png' width = ''&gt;&lt;/img&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;Cluster nodes need exclusive access to certain resources. But nodes can
      crash; they can be temporarily disconnected or experiencing a process
      pause. Under these error scenarios, they should not keep the access to a
      resource indefinitely.&lt;/p&gt;

&lt;p&gt;&lt;a class = 'more' href = 'https://martinfowler.com/articles/patterns-of-distributed-systems/time-bound-lease.html'&gt;more…&lt;/a&gt;&lt;/p&gt;</content>
  </entry>

<entry>
    <title>The Lies that can Undermine Democracy</title>
    <link href="https://martinfowler.com/articles/202101-lies-and-democracy.html">
    <updated>2021-01-12T09:56:00-05:00</updated>
    <id>tag:martinfowler.com,2021-01-12:The-Lies-that-can-Undermine-Democracy</id>
    <content type="html">
&lt;p&gt;Like many Americans, I was transfixed and horrified by the recent
      assault on the Capitol. Much of this anger originates in lies perpetrated
      by irresponsible politicians and spread through media agencies. Lies like
      this can destroy democracies, and while we must have free speech we must
      not be free of the consequences of that speech&lt;/p&gt;

&lt;p&gt;&lt;a class = 'more' href = 'https://martinfowler.com/articles/202101-lies-and-democracy.html'&gt;more…&lt;/a&gt;&lt;/p&gt;</content>
  </entry>

<entry>
    <title>Maximizing Developer Effectiveness: Feedback Loops</title>
    <link href="https://martinfowler.com/articles/developer-effectiveness.html#HowToGetStarted">
    <updated>2021-01-06T10:05:00-05:00</updated>
    <id>tag:martinfowler.com,2021-01-06:Maximizing-Developer-Effectiveness--Feedback-Loops</id>
    <category term="skip-home-page"/>
    <content type="html">
&lt;div class = 'img'&gt;&lt;a href = 'https://martinfowler.com/articles/developer-effectiveness.html#HowToGetStarted'&gt;&lt;img src = 'https://martinfowler.com/articles/developer-effectiveness/micro-feedback-loops.png' width = ''&gt;&lt;/img&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;Tim continues his comparison of high and low effectiveness
      organizations by comparing their key feedback loops. To improve these,
      organizations need to understand the importance of micro feedback loops,
      which are often neglected because they are so small.&lt;/p&gt;

&lt;p&gt;&lt;a class = 'more' href = 'https://martinfowler.com/articles/developer-effectiveness.html#HowToGetStarted'&gt;more…&lt;/a&gt;&lt;/p&gt;</content>
  </entry>

<entry>
    <title>Some more Distributed Systems Patterns</title>
    <link href="https://martinfowler.com/articles/patterns-of-distributed-systems/">
    <updated>2021-01-05T09:43:00-05:00</updated>
    <id>tag:martinfowler.com,2021-01-05:Some-more-Distributed-Systems-Patterns</id>
    <content type="html">
&lt;div class = 'img'&gt;&lt;a href = 'https://martinfowler.com/articles/patterns-of-distributed-systems/'&gt;&lt;img src = 'https://martinfowler.com/articles/patterns-of-distributed-systems/card.png' width = ''&gt;&lt;/img&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;Unmesh Joshi has a few more of his Patterns of Distributed Systems ready to
      share with the world.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href = '/articles/patterns-of-distributed-systems/consistent-core.html'&gt;Consistent Core&lt;/a&gt; looks at how a large cluster can
        keep some information strongly consistent, &lt;/li&gt;

&lt;li&gt;&lt;a href = '/articles/patterns-of-distributed-systems/time-bound-lease.html'&gt;Lease&lt;/a&gt; allows unreliable nodes
        to access limited resources without blocking them when they fail &lt;/li&gt;

&lt;li&gt;&lt;a href = '/articles/patterns-of-distributed-systems/state-watch.html'&gt;State
        Watch&lt;/a&gt; allows clients to be notified of changes on a server.&lt;/li&gt;

&lt;li&gt;&lt;a href = '/articles/patterns-of-distributed-systems/idempotent-receiver.html'&gt;Idempotent
        Receiver&lt;/a&gt; ensures servers don't process a retried request more than
        once.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a class = 'more' href = 'https://martinfowler.com/articles/patterns-of-distributed-systems/'&gt;more…&lt;/a&gt;&lt;/p&gt;</content>
  </entry>

<entry>
    <title>Maximizing Developer Effectiveness</title>
    <link href="https://martinfowler.com/articles/developer-effectiveness.html">
    <updated>2021-01-05T09:40:00-05:00</updated>
    <id>tag:martinfowler.com,2021-01-05:Maximizing-Developer-Effectiveness</id>
    <content type="html">
&lt;div class = 'img'&gt;&lt;a href = 'https://martinfowler.com/articles/developer-effectiveness.html'&gt;&lt;img src = 'https://martinfowler.com/articles/developer-effectiveness/micro-feedback-loops.png' width = ''&gt;&lt;/img&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;My colleague Tim Cochran has helped many software engineering
      organizations transform to respond faster to changing market needs. Often
      companies struggle with these transformations and a primary reason for
      these problems is that engineering organization has neglected to provide
      developers with an effective working environment. The key to
      to developing an effective environment is to concentrate on feedback loops.&lt;/p&gt;

&lt;p&gt;In this first installment, Tim contrasts a developer's day between
      high-effectiveness and low-effectiveness environments, using this contrast
      to show that poor organizations need to remove the common frictions that make
      developers feel unproductive .&lt;/p&gt;

&lt;p&gt;&lt;a class = 'more' href = 'https://martinfowler.com/articles/developer-effectiveness.html'&gt;more…&lt;/a&gt;&lt;/p&gt;</content>
  </entry>

<entry>
    <title>My favorite musical discoveries of 2020</title>
    <link href="https://martinfowler.com/articles/2020-music.html">
    <updated>2020-12-22T12:56:00-05:00</updated>
    <id>tag:martinfowler.com,2020-12-22:My-favorite-musical-discoveries-of-2020</id>
    <content type="html">
&lt;div class = 'img'&gt;&lt;a href = 'https://martinfowler.com/articles/2020-music.html'&gt;&lt;img src = 'https://martinfowler.com/articles/2020-music/card.png' width = ''&gt;&lt;/img&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;Like most people, I'm looking forward to seeing 2020 in the rear-view
      mirror, but even this ugly year has brought some good things. For the last
      three decades I've regularly bought a few albums every month, and I
      thought I'd pick out a half-dozen favorites in the hope that they lead
      some readers to share at least a bit of my musical tastes. I've been doing
      most of my musical buying on Bandcamp, so you can easily sample them.&lt;/p&gt;

&lt;p&gt;&lt;a class = 'more' href = 'https://martinfowler.com/articles/2020-music.html'&gt;more…&lt;/a&gt;&lt;/p&gt;</content>
  </entry>

<entry>
    <title>Data Mesh Principles and Logical Architecture</title>
    <link href="https://martinfowler.com/articles/data-mesh-principles.html">
    <updated>2020-12-03T10:27:00-05:00</updated>
    <id>tag:martinfowler.com,2020-12-03:Data-Mesh-Principles-and-Logical-Architecture</id>
    <content type="html">
&lt;div class = 'img'&gt;&lt;a href = 'https://martinfowler.com/articles/data-mesh-principles.html'&gt;&lt;img src = 'https://martinfowler.com/articles/data-mesh-principles/architecture.png' width = ''&gt;&lt;/img&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;Last year, my colleague Zhamak Dehghani introduced the notion of the &lt;a href = '/articles/data-monolith-to-mesh.html'&gt;Data Mesh&lt;/a&gt;, shifting from
      the notion of a centralized data lake to a distributed vision of
      data. Based on more thinking, and the lessons of a year's worth working
      with clients, she's now written an article outlining &lt;a href = 'https://martinfowler.com/articles/data-mesh-principles.html'&gt;four
      foundational principles&lt;/a&gt; of a data mesh, and how they drive a
      logical architecture.&lt;/p&gt;

&lt;p&gt;&lt;a class = 'more' href = 'https://martinfowler.com/articles/data-mesh-principles.html'&gt;more…&lt;/a&gt;&lt;/p&gt;</content>
  </entry>

<entry>
    <title>Don't put data science notebooks into production</title>
    <link href="https://martinfowler.com/articles/productize-data-sci-notebooks.html">
    <updated>2020-11-18T10:25:00-05:00</updated>
    <id>tag:martinfowler.com,2020-11-18:Don-t-put-data-science-notebooks-into-production</id>
    <content type="html">
&lt;p&gt;We've come across many clients who are interested in taking the
      computational notebooks developed by their data scientists, and putting
      them directly into the codebase of production applications. My colleague
      David Johnston points out that while data science
      ideas do need to move out of notebooks and into production, trying to
      deploy that notebooks as a code artifact breaks a multitude of good
      software practices. Predictably, that results in a number of observed pain
      points. This behavior is a symptom of a deeper problem: a lack of
      collaboration between data scientists and software developers.&lt;/p&gt;

&lt;p&gt;&lt;a class = 'more' href = 'https://martinfowler.com/articles/productize-data-sci-notebooks.html'&gt;more…&lt;/a&gt;&lt;/p&gt;</content>
  </entry>

</feed>
