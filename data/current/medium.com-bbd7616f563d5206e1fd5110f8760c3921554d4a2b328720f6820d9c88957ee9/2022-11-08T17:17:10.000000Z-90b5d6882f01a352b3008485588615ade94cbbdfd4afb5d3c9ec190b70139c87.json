{
  "title":"A start-to-finish walkthrough on creating a Ruby gem with CI and CD",
  "date":"2022-11-08T17:17:10.000000Z",
  "author":null,
  "id":"https://medium.com/p/a2b705047087",
  "link":"https://medium.com/gusto-engineering/a-start-to-finish-walkthrough-on-creating-a-ruby-gem-with-ci-and-cd-a2b705047087?source=rss----645edd256348---4",
  "content":"<p>Creating an open source Ruby gem is easier than you might think! In this post, we will be walking through the process of creating and publishing a Ruby gem from start to finish.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*1pPWKntJnE8ZxbduiaDkEw.jpeg\"></figure><h3>Terminology</h3><p>First off, let’s define some terms and describe their relevance:</p><ul><li><strong>Ruby gem</strong>: A Ruby gem is a distributable library of Ruby code. Gems are how we share Ruby code. <a href=\"https://guides.rubygems.org/what-is-a-gem/\">Learn more</a>.</li><li><strong>rubygems.org: </strong>The Ruby community’s gem hosting service. <a href=\"https://guides.rubygems.org/contributing\">Contribute</a>. <a href=\"https://rubygems.org/pages/about\">Learn more</a>.</li><li><strong>bundler</strong>: The Ruby community’s gem manager. <a href=\"https://bundler.io\">Learn more</a>.</li><li><strong>CI:</strong> Continuous Integration is, in the context of this blog post, the process of automatically running a test suite on every commit and ensuring those tests remain passing by preventing merges to main without a passing test suite (or as we like to call it where I work at Gusto, a “green build”). <a href=\"https://martinfowler.com/articles/continuousIntegration.html\">Learn more</a>.</li><li><strong>CD: </strong>Continuous Deployment is, also in the context this blog post, the process of automatically pushing new versions of a Ruby Gem to rubygems.org every time three things are true: (1) A commit is merged to main (2) that commit has a green build (3) The gem version has been updated.</li><li><strong>GitHub Actions: </strong>A build system provided by GitHub that we will be using as the “compute” for our CI and CD pipelines. <a href=\"https://github.com/features/actions\">Learn more</a>.</li></ul><p>Whew! Now we can get onto the fun stuff…</p><h3>Let’s Get Started</h3><p>To keep things tidy, I’ll be referencing commits and pull requests. If you have a question about any part of the code, please drop an inline GitHub comment and tag my GitHub username (also @alexevanczuk). I’ve done my best to leave some inline comments, and I’d also highly encourage checking out the world-class documentation on <a href=\"https://guides.rubygems.org/\">https://guides.rubygems.org/</a> and <a href=\"https://docs.github.com/en\">https://docs.github.com/en</a>. I’ve done my best not to repeat too much that is already discoverable in those docs.</p><p><strong>Create the Repository</strong></p><p>To start off, I’d highly recommend using the <a href=\"https://cli.github.com\">GitHub CLI</a>. You can install it with brew install gh . Of course, any git and GitHub client will work just fine.</p><p>I’ll use gh repo create to create a new repository to host my gem. I use the name my_example_gem as the name of my repo and gem. Try to find a name that is meaningful to you and your stakeholders.</p><pre>~/workspace - $ gh repo create<br>? What would you like to do? Create a new repository on GitHub from scratch<br>? Repository name my_example_gem<br>? Description An example gem set up with CI and CD.<br>? Visibility Public<br>? Would you like to add a README file? No<br>? Would you like to add a .gitignore? No<br>? Would you like to add a license? No<br>? This will create &quot;my_example_gem&quot; as a public repository on GitHub. Continue? Yes<br>✓ Created repository alexevanczuk/my_example_gem on GitHub<br>? Clone the new repository locally? Yes<br>Initialized empty Git repository in /Users/alex.evanczuk/workspace/my_example_gem/.git/</pre><p>When I navigate to <a href=\"https://github.com/alexevanczuk/my_example_gem\">https://github.com/alexevanczuk/my_example_gem</a>, I see this screen:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*fWBFwy0NLfuFSqkz8CqAyg.png\"></figure><p>I navigate into the newly created gem folder with cd my_example_gem and follow the set of instructions labeled “create a new repository on the command line,” which created this commit:</p><p><a href=\"https://github.com/alexevanczuk/my_example_gem/commit/5ce5c1b777ac389c12ce5819e549ac036c894da5\">first commit · alexevanczuk/my_example_gem@5ce5c1b</a></p><p><strong>Create the Gem</strong></p><p>bundler makes this easy. I first cd .. to go up to the parent directory, then run:</p><pre>bundle gem my_example_gem --coc --test=rspec --linter=rubocop --mit</pre><p>Some notes about this:</p><ul><li>I press enter when it asks me if I want to overwrite the existing README.md</li><li>bundler has a flag --ci=github , but we’ll be building this ourselves.</li><li>I use the MIT License, which is very common license used for open source software projects. If you’re affiliated with an organization or a company, you’ll want to make sure you’re familiar with its licensing requirements (i.e. talk to your legal team).</li></ul><p>If all went to plan, you should be ready to create a PR, with these steps:</p><ul><li>cd into your repo (cd my_example_gem for me)</li><li>Checkout a branch: git checkout -b create-gem</li><li>Stage all changes: git add .</li><li>Commit staged changes with git commit -m &quot;bundle gem my_example_gem --coc --test=rspec --linter=rubocop --mit”</li><li>Create a PR: gh pr create</li><li>Merge the PR: gh pr merge</li></ul><blockquote>I like to use “Squash and merge” when merging, which can also be set as the only option in settings =&gt; general in your repository. I also recommend setting a branch protection rule for main in settings =&gt; branches =&gt; Add rule</blockquote><p>Great! We have one merged PR:</p><p><a href=\"https://github.com/alexevanczuk/my_example_gem/pull/1\">Create gem using bundler by alexevanczuk · Pull Request #1 · alexevanczuk/my_example_gem</a></p><p><strong>More Boiler Plate</strong></p><p>If you run bundle install at this point in your repo, you may see this:</p><pre>The gemspec at /Users/alex.evanczuk/workspace/my_example_gem/my_example_gem is not valid. Please fix this gemspec.<br>The validation error was 'metadata['homepage_uri'] has invalid link: &quot;TODO: Put your gem's website or public repo URL here.&quot;'</pre><p>I make some changes until I can bundle install. I’ve also changed some of the defaults, such as specifying spec.files more plainly rather than using git .</p><p>Follow the same process above to create and merge a PR. You can see the merged PR here:</p><p><a href=\"https://github.com/alexevanczuk/my_example_gem/pull/2\">Fix up gemspec so we can bundle install by alexevanczuk · Pull Request #2 · alexevanczuk/my_example_gem</a></p><p><strong>Get an API Key</strong></p><p>We need a <strong>rubygems.org</strong> API key to push. Get one from <a href=\"https://rubygems.org/profile/api_keys\">https://rubygems.org/profile/api_keys</a>! You’ll need to create an account and login if you haven’t, and your gem needs the “Push rubygem” API scope.</p><p>Then, add that gem as a secret to your repo. You can find that under settings =&gt; secrets =&gt; actions . Create a new secret with the name RUBYGEMS_API_KEY and set the secret value. Make sure not to put this secret anywhere that others can find it — it’s a secret after all. I like to put mine in my 1Password as a note in my <strong>rubygems.org</strong> login. If you’re doing this for a company, make sure you follow your organization’s policies for login and secrets management.</p><p><strong>Add CI and CD</strong></p><p>Checkout a new branch with git checkout -b add-ci-and-cd</p><p>For this, we’ll be using GitHub Actions. GitHub Actions use a <a href=\"https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions\">special syntax</a> to define their logic. To learn more about how these actions work, check out the PR that add them and the inline comments.</p><p>I had to do three more things to finish this:</p><ol><li>I removed a trivially failing test</li><li>I ran bundle exec rubocop -a to auto fix rubocop</li><li>I ran bundle lock --add-platform x86_64-linux , which lets bundle work in GitHub Actions, which uses a linux machine.</li></ol><p>Here’s the PR:</p><p><a href=\"https://github.com/alexevanczuk/my_example_gem/pull/3\">Create CI and CD workflows by alexevanczuk · Pull Request #3 · alexevanczuk/my_example_gem</a></p><p>With that, everything passes!</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*9-gk7vVh1UNhKyPpowUcYg.png\"></figure><p>Once I merged with gh pr merge -d , tests were automatically kicked off on main . Once those completed, a CD action was kicked off. Note to see kicked off CD actions, you need to navigate to the “Actions” tab of your repository, which for me is here: <a href=\"https://github.com/alexevanczuk/my_example_gem/actions\">https://github.com/alexevanczuk/my_example_gem/actions</a></p><p>You can also follow along with workflows locally with gh run watch</p><p>Here is the CD action:</p><p><a href=\"https://github.com/alexevanczuk/my_example_gem/actions/runs/3259482118\">CD · alexevanczuk/my_example_gem@0667457</a></p><p>And here is the listing in rubygems.org for my new gem!</p><p><a href=\"https://rubygems.org/gems/my_example_gem\">my_example_gem | RubyGems.org | your community gem host</a></p><p>Lastly, check out this lovely autogenerated release page!</p><p><a href=\"https://github.com/alexevanczuk/my_example_gem/releases/tag/v0.1.0\">Release v0.1.0 · alexevanczuk/my_example_gem</a></p><blockquote>Did you know you can link to specific lines in a GitHub Action log? For example, here’s the link to the command that was used to generate the release: <a href=\"https://github.com/alexevanczuk/my_example_gem/actions/runs/3259482118/jobs/5352349524#step:5:1\">https://github.com/alexevanczuk/my_example_gem/actions/runs/3259482118/jobs/5352349524#step:5:1</a></blockquote><blockquote>This is a great feature if you want to share failures with others!</blockquote><p>With this, not only do I never have to manually deploy, but other contributors can also deploy for themselves without needing to share access to API keys! Other contributors also have visibility into failed builds and deploys.</p><blockquote><strong><em>Important note:</em></strong> If you’re using 2FA/MFA for RubyGems, you’ll need to set it (<a href=\"https://rubygems.org/settings/edit\">here</a>) to the UI and gem signing level, and not UI and API . Another option if you do not want to change this is to change CD to use the <a href=\"https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#workflow_dispatch\">workflow_dispatch</a> event instead of workflow_run , which will let you and other contributors publish from the command line with the gh run command. You can then set the otp_code to be a user input, which can then be passed to the action, <a href=\"https://guides.rubygems.org/using-mfa-in-command-line/\">which can then be passed to the gem push command</a>.</blockquote><p><strong>Wrap Up</strong></p><p>I think this is a good place to stop!</p><p>From here, there’s so much we can do! Besides, of course, adding behavior to your gem so its valuable for you and others to use, there are countless ways to continue to improve the development process. For example…</p><ul><li>We could add <a href=\"https://sorbet.org\">Sorbet</a> for static type checking</li><li>We could add <a href=\"https://github.com/fxn/zeitwerk#for_gem\">Zeitwerk</a> for autoloading (no more require statements)</li><li>We could make a standard CLI (command-line interface) with <a href=\"https://github.com/rails/thor\">thor</a></li><li>We could make an interactive CLI with <a href=\"https://github.com/piotrmurach/tty-prompt\">tty-prompt</a></li><li>…and so much more!</li></ul><p>Share your thoughts, questions, feedback, and what you’d like to see next as a comment here, within any of the above linked pull requests, or on the <a href=\"https://join.slack.com/t/rubymod/shared_invite/zt-1dgyrxji9-sihGNX43mVh5T6tw18hFaQ\">Ruby/Rails Modularity Slack Server</a>.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=a2b705047087\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/gusto-engineering/a-start-to-finish-walkthrough-on-creating-a-ruby-gem-with-ci-and-cd-a2b705047087\">A start-to-finish walkthrough on creating a Ruby gem with CI and CD</a> was originally published in <a href=\"https://medium.com/gusto-engineering\">Gusto Engineering</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"
}