<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html">
    <channel>
        <title><![CDATA[Gusto Engineering - Medium]]></title>
        <description><![CDATA[Reengineering Payroll, Benefits, and HR for modern business. Hiring empathetic engineers in San Francisco, Denver and NYC! https://gusto.com/about/careers - Medium]]></description>
        <link>https://medium.com/gusto-engineering?source=rss----645edd256348---4</link>
        <image>
            <url>https://cdn-images-1.medium.com/proxy/1*TGH72Nnw24QL3iV9IOm4VA.png</url>
            <title>Gusto Engineering - Medium</title>
            <link>https://medium.com/gusto-engineering?source=rss----645edd256348---4</link>
        </image>
        <generator>Medium</generator>
        <lastBuildDate>Thu, 17 Nov 2022 12:54:47 GMT</lastBuildDate>
        <atom:link href="https://medium.com/feed/gusto-engineering" rel="self" type="application/rss+xml"/>
        <webMaster><![CDATA[yourfriends@medium.com]]></webMaster>
        <atom:link href="http://medium.superfeedr.com" rel="hub"/>
        <item>
            <title><![CDATA[Gusto Eng Spotlight Series: Sofia Carrillo]]></title>
            <link>https://medium.com/gusto-engineering/gusto-eng-spotlight-series-sofia-carrillo-ef412c9fefc9?source=rss----645edd256348---4</link>
            <guid isPermaLink="false">https://medium.com/p/ef412c9fefc9</guid>
            <category><![CDATA[advice]]></category>
            <category><![CDATA[career-advice]]></category>
            <category><![CDATA[engineering]]></category>
            <category><![CDATA[women-in-tech]]></category>
            <dc:creator><![CDATA[Kim H. Nguyen]]></dc:creator>
            <pubDate>Tue, 15 Nov 2022 18:31:53 GMT</pubDate>
            <atom:updated>2022-11-15T18:33:23.123Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*o4xhfpsBPmRxvXbr.jpeg" /></figure><p><strong><em>This blog series is dedicated to celebrating our Black, Latinx, and Women Engineers who are making an impact in the lives of our Gusties and Gustomers (Gusto customers) every day.</em></strong></p><blockquote><strong>Today, we’re spotlighting Sofia Carrillo, who has been with Gusto for 3 years working primarily on the Accountants Engineering team, building reporting features, bulk tools, and more for our accounting partners.</strong></blockquote><blockquote>Our interviewers are Kevin Gadd and Kim Nguyen. Kevin recruits engineering talent to Gusto as part of the Engine Invite team, while Kim builds features to improve the partner developer experience as part of Gusto Embedded.</blockquote><h3>Kevin: Tell us a little about how you got to Gusto.</h3><p><strong>Sofia: </strong>I got to know about Gusto through Wallbreakers (now known as <a href="https://speak.careers/">Speak_</a>). It’s like <a href="https://www.code2040.org/">Code2040</a> in that they help connect candidates from underrepresented groups to companies that value diverse candidates. I was part of Wallbreakers’ pilot year, and they connected me with several companies, one of them being Gusto. They ended up offering me a job and the rest is history!</p><h3>Kevin: In your role here at Gusto, what has been one of your proudest accomplishments/impacts you have had on the SMB customers we serve?</h3><p><strong>Sofia: </strong>One of my proudest achievements was shipping a feature a few days before the end of 2020. That year was one of Gusto’s busiest times because of the new 1099 NEC, COVID/PPP complexities, and deferring billing because of the pandemic.</p><p>The project we worked on was a self-service feature so accountants could modify S-Corp benefit amounts for tax reporting. Modifying these numbers could result in tax consequences, so we didn’t allow users to edit this without reaching out to our care team. To help with our end-of-year rush and empower our accountants to serve their clients, we built this feature that allowed only accountants to make this update.</p><p>The end result was that we shipped the feature, and it worked with no bugs! I felt really proud of this feature because it meant that both our Gustomers (Gusto customers) and our Customer Experience team wouldn’t have to spend extra time on the phone figuring out these cases.</p><p>Before the self-service roll-out, unblocking via email could take anywhere between 3–5 days. Now with self-editing, this happens within minutes for our Gustomers. We saw an immediate decrease from 300 cases, which would have been 900–1500 collective days saved!</p><h3>Kevin: How has Gusto played a role and supported you in your journey as an engineer?</h3><p><strong>Sofia:</strong> Gusto has played a big part in growing me as an engineer. There’s a spirit here around learning and growing. For instance, I don’t ever feel discouraged to ask questions. I also think there’s a lot of trust in engineers — I’ve gotten to work on projects that I otherwise wouldn’t have at other companies. So I’d say it comes down to the culture around growth collaboration and encouraging a learning mindset, regardless of one-another’s level of experience.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*XyTKJJR5ISK9vXSK" /><figcaption>Enjoying the trails in Nederland, Colorado</figcaption></figure><h3>Kevin: What makes you excited about the work you do to serve SMB customers here at Gusto?</h3><p><strong>Sofia:</strong> The reason I got into engineering and computer science was that I could do things that could give people back time. What excites me about the work I do at Gusto is that I give our customers time to spend on their own lives!</p><h3>Kevin: What advice would you give to someone looking to break into engineering or are just getting started?</h3><p><strong>Sofia: </strong>The first thing I’d say is learn your data structures: how to create them, interact with them, and which ones you should choose depending on the problem. Whether you come from a non-tech background, a coding bootcamp, or a formal CS degree, everyone in the industry should know these fundamentals. With that said, Gusto does a great job hiring folks from all of those backgrounds.</p><p>One other advice I have is to pick a dynamic programming language to interview in, that makes everything easier! Make sure you’re comfortable with the language you choose, but don’t get caught in the small details. Engineering is really all about abstractions and understanding higher level concepts. If you can understand how to problem-solve at a higher level, you can apply it across the board.</p><h3>Kim: What does your typical day at Gusto look like? What are your favorite parts of the day?</h3><p><strong>Sofia: </strong>My typical day has definitely changed over time. In the beginning, it was picking up tickets from the backlog, making updates, creating pull requests, and merging code.</p><p>Now, after being at Gusto for a few years, my day is mostly spent pairing and unblocking other engineers. I also do a LOT of code reviews. That means giving feedback on code, letting others know more efficient ways to write code, and finding bugs if any. The last major part of my day is meeting with stakeholders — product, design, teams that depend on us, or teams that we depend on.</p><p>My favorite part of the day is pairing and unblocking other engineers though. There’s something very satisfying when I help an engineer understand something and the lightbulb switches on. I feel like I’m multiplying myself because I’m enabling my team to do more!</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*3RNAVvdw4VvJu72p" /><figcaption>Posing next to a mural in Denver</figcaption></figure><h3>Kim: How have you sponsored other engineers? Is sponsoring other engineers an important aspect of your role?</h3><p><strong>Sofia: </strong>It’s definitely an important part of my role! At Gusto, the more senior you are, the more you’re expected to bring engineers up with you. Gusto also has a formal mentorship program where you can be connected with another mentor.</p><p>And since I was once a new grad engineer that joined Gusto, I was especially passionate about mentoring other new grads. Sponsoring to me means advocating for them to own their own project, looking out for their career path and advocating for them to have conversations with their PE for internal mobility.</p><h3>Kim: What are some resources you’ve learned from? Any particular role models?</h3><p><strong>Sofia: </strong>I’m a big docs person — I’ll always read the README.md! And lucky for us, the developer world has great documentation!. Apollo and React both have great written documentation for instance.</p><p>For role models — I think all of the Staff &amp; Principal engineers at Gusto helped me grow. They do for me what I do for the engineers on my team today: they offer pairing time, opportunities for projects, and feedback on how I could execute on projects technically.</p><h3>Kim: What advice would you give to a more junior engineer on how to start operating at a senior level here at Gusto?</h3><p><strong>Sofia:</strong> Show that you’re able to take on projects independently. The next step is the coordination and communication piece. How can I delegate this to others? How can I write tickets that give context for others to do this work? As a senior engineer, I might know how I would approach and solve this, but how can I give someone enough context to do it themselves. Context building is a huge piece for junior engineers to advance into senior engineering.</p><h3>Kevin: Thank you so much for taking the time to talk with us!</h3><p><strong>Sofia: </strong>Thank you, this was so much fun!</p><p><em>Originally published at </em><a href="https://engineering.gusto.com/gusto-eng-spotlight-series-sofia-carrillo/"><em>https://engineering.gusto.com</em></a><em> on November 15, 2022.</em></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=ef412c9fefc9" width="1" height="1" alt=""><hr><p><a href="https://medium.com/gusto-engineering/gusto-eng-spotlight-series-sofia-carrillo-ef412c9fefc9">Gusto Eng Spotlight Series: Sofia Carrillo</a> was originally published in <a href="https://medium.com/gusto-engineering">Gusto Engineering</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[A start-to-finish walkthrough on creating a Ruby gem with CI and CD]]></title>
            <link>https://medium.com/gusto-engineering/a-start-to-finish-walkthrough-on-creating-a-ruby-gem-with-ci-and-cd-a2b705047087?source=rss----645edd256348---4</link>
            <guid isPermaLink="false">https://medium.com/p/a2b705047087</guid>
            <category><![CDATA[gradual]]></category>
            <category><![CDATA[ruby]]></category>
            <category><![CDATA[modularization]]></category>
            <category><![CDATA[gradualmodularization]]></category>
            <category><![CDATA[gem]]></category>
            <dc:creator><![CDATA[Alex Evanczuk]]></dc:creator>
            <pubDate>Tue, 08 Nov 2022 17:17:10 GMT</pubDate>
            <atom:updated>2022-11-08T17:22:09.087Z</atom:updated>
            <content:encoded><![CDATA[<p>Creating an open source Ruby gem is easier than you might think! In this post, we will be walking through the process of creating and publishing a Ruby gem from start to finish.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*1pPWKntJnE8ZxbduiaDkEw.jpeg" /></figure><h3>Terminology</h3><p>First off, let’s define some terms and describe their relevance:</p><ul><li><strong>Ruby gem</strong>: A Ruby gem is a distributable library of Ruby code. Gems are how we share Ruby code. <a href="https://guides.rubygems.org/what-is-a-gem/">Learn more</a>.</li><li><strong>rubygems.org: </strong>The Ruby community’s gem hosting service. <a href="https://guides.rubygems.org/contributing">Contribute</a>. <a href="https://rubygems.org/pages/about">Learn more</a>.</li><li><strong>bundler</strong>: The Ruby community’s gem manager. <a href="https://bundler.io">Learn more</a>.</li><li><strong>CI:</strong> Continuous Integration is, in the context of this blog post, the process of automatically running a test suite on every commit and ensuring those tests remain passing by preventing merges to main without a passing test suite (or as we like to call it where I work at Gusto, a “green build”). <a href="https://martinfowler.com/articles/continuousIntegration.html">Learn more</a>.</li><li><strong>CD: </strong>Continuous Deployment is, also in the context this blog post, the process of automatically pushing new versions of a Ruby Gem to rubygems.org every time three things are true: (1) A commit is merged to main (2) that commit has a green build (3) The gem version has been updated.</li><li><strong>GitHub Actions: </strong>A build system provided by GitHub that we will be using as the “compute” for our CI and CD pipelines. <a href="https://github.com/features/actions">Learn more</a>.</li></ul><p>Whew! Now we can get onto the fun stuff…</p><h3>Let’s Get Started</h3><p>To keep things tidy, I’ll be referencing commits and pull requests. If you have a question about any part of the code, please drop an inline GitHub comment and tag my GitHub username (also @alexevanczuk). I’ve done my best to leave some inline comments, and I’d also highly encourage checking out the world-class documentation on <a href="https://guides.rubygems.org/">https://guides.rubygems.org/</a> and <a href="https://docs.github.com/en">https://docs.github.com/en</a>. I’ve done my best not to repeat too much that is already discoverable in those docs.</p><p><strong>Create the Repository</strong></p><p>To start off, I’d highly recommend using the <a href="https://cli.github.com">GitHub CLI</a>. You can install it with brew install gh . Of course, any git and GitHub client will work just fine.</p><p>I’ll use gh repo create to create a new repository to host my gem. I use the name my_example_gem as the name of my repo and gem. Try to find a name that is meaningful to you and your stakeholders.</p><pre>~/workspace - $ gh repo create<br>? What would you like to do? Create a new repository on GitHub from scratch<br>? Repository name my_example_gem<br>? Description An example gem set up with CI and CD.<br>? Visibility Public<br>? Would you like to add a README file? No<br>? Would you like to add a .gitignore? No<br>? Would you like to add a license? No<br>? This will create &quot;my_example_gem&quot; as a public repository on GitHub. Continue? Yes<br>✓ Created repository alexevanczuk/my_example_gem on GitHub<br>? Clone the new repository locally? Yes<br>Initialized empty Git repository in /Users/alex.evanczuk/workspace/my_example_gem/.git/</pre><p>When I navigate to <a href="https://github.com/alexevanczuk/my_example_gem">https://github.com/alexevanczuk/my_example_gem</a>, I see this screen:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*fWBFwy0NLfuFSqkz8CqAyg.png" /></figure><p>I navigate into the newly created gem folder with cd my_example_gem and follow the set of instructions labeled “create a new repository on the command line,” which created this commit:</p><p><a href="https://github.com/alexevanczuk/my_example_gem/commit/5ce5c1b777ac389c12ce5819e549ac036c894da5">first commit · alexevanczuk/my_example_gem@5ce5c1b</a></p><p><strong>Create the Gem</strong></p><p>bundler makes this easy. I first cd .. to go up to the parent directory, then run:</p><pre>bundle gem my_example_gem --coc --test=rspec --linter=rubocop --mit</pre><p>Some notes about this:</p><ul><li>I press enter when it asks me if I want to overwrite the existing README.md</li><li>bundler has a flag --ci=github , but we’ll be building this ourselves.</li><li>I use the MIT License, which is very common license used for open source software projects. If you’re affiliated with an organization or a company, you’ll want to make sure you’re familiar with its licensing requirements (i.e. talk to your legal team).</li></ul><p>If all went to plan, you should be ready to create a PR, with these steps:</p><ul><li>cd into your repo (cd my_example_gem for me)</li><li>Checkout a branch: git checkout -b create-gem</li><li>Stage all changes: git add .</li><li>Commit staged changes with git commit -m &quot;bundle gem my_example_gem --coc --test=rspec --linter=rubocop --mit”</li><li>Create a PR: gh pr create</li><li>Merge the PR: gh pr merge</li></ul><blockquote>I like to use “Squash and merge” when merging, which can also be set as the only option in settings =&gt; general in your repository. I also recommend setting a branch protection rule for main in settings =&gt; branches =&gt; Add rule</blockquote><p>Great! We have one merged PR:</p><p><a href="https://github.com/alexevanczuk/my_example_gem/pull/1">Create gem using bundler by alexevanczuk · Pull Request #1 · alexevanczuk/my_example_gem</a></p><p><strong>More Boiler Plate</strong></p><p>If you run bundle install at this point in your repo, you may see this:</p><pre>The gemspec at /Users/alex.evanczuk/workspace/my_example_gem/my_example_gem is not valid. Please fix this gemspec.<br>The validation error was &#39;metadata[&#39;homepage_uri&#39;] has invalid link: &quot;TODO: Put your gem&#39;s website or public repo URL here.&quot;&#39;</pre><p>I make some changes until I can bundle install. I’ve also changed some of the defaults, such as specifying spec.files more plainly rather than using git .</p><p>Follow the same process above to create and merge a PR. You can see the merged PR here:</p><p><a href="https://github.com/alexevanczuk/my_example_gem/pull/2">Fix up gemspec so we can bundle install by alexevanczuk · Pull Request #2 · alexevanczuk/my_example_gem</a></p><p><strong>Get an API Key</strong></p><p>We need a <strong>rubygems.org</strong> API key to push. Get one from <a href="https://rubygems.org/profile/api_keys">https://rubygems.org/profile/api_keys</a>! You’ll need to create an account and login if you haven’t, and your gem needs the “Push rubygem” API scope.</p><p>Then, add that gem as a secret to your repo. You can find that under settings =&gt; secrets =&gt; actions . Create a new secret with the name RUBYGEMS_API_KEY and set the secret value. Make sure not to put this secret anywhere that others can find it — it’s a secret after all. I like to put mine in my 1Password as a note in my <strong>rubygems.org</strong> login. If you’re doing this for a company, make sure you follow your organization’s policies for login and secrets management.</p><p><strong>Add CI and CD</strong></p><p>Checkout a new branch with git checkout -b add-ci-and-cd</p><p>For this, we’ll be using GitHub Actions. GitHub Actions use a <a href="https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions">special syntax</a> to define their logic. To learn more about how these actions work, check out the PR that add them and the inline comments.</p><p>I had to do three more things to finish this:</p><ol><li>I removed a trivially failing test</li><li>I ran bundle exec rubocop -a to auto fix rubocop</li><li>I ran bundle lock --add-platform x86_64-linux , which lets bundle work in GitHub Actions, which uses a linux machine.</li></ol><p>Here’s the PR:</p><p><a href="https://github.com/alexevanczuk/my_example_gem/pull/3">Create CI and CD workflows by alexevanczuk · Pull Request #3 · alexevanczuk/my_example_gem</a></p><p>With that, everything passes!</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*9-gk7vVh1UNhKyPpowUcYg.png" /></figure><p>Once I merged with gh pr merge -d , tests were automatically kicked off on main . Once those completed, a CD action was kicked off. Note to see kicked off CD actions, you need to navigate to the “Actions” tab of your repository, which for me is here: <a href="https://github.com/alexevanczuk/my_example_gem/actions">https://github.com/alexevanczuk/my_example_gem/actions</a></p><p>You can also follow along with workflows locally with gh run watch</p><p>Here is the CD action:</p><p><a href="https://github.com/alexevanczuk/my_example_gem/actions/runs/3259482118">CD · alexevanczuk/my_example_gem@0667457</a></p><p>And here is the listing in rubygems.org for my new gem!</p><p><a href="https://rubygems.org/gems/my_example_gem">my_example_gem | RubyGems.org | your community gem host</a></p><p>Lastly, check out this lovely autogenerated release page!</p><p><a href="https://github.com/alexevanczuk/my_example_gem/releases/tag/v0.1.0">Release v0.1.0 · alexevanczuk/my_example_gem</a></p><blockquote>Did you know you can link to specific lines in a GitHub Action log? For example, here’s the link to the command that was used to generate the release: <a href="https://github.com/alexevanczuk/my_example_gem/actions/runs/3259482118/jobs/5352349524#step:5:1">https://github.com/alexevanczuk/my_example_gem/actions/runs/3259482118/jobs/5352349524#step:5:1</a></blockquote><blockquote>This is a great feature if you want to share failures with others!</blockquote><p>With this, not only do I never have to manually deploy, but other contributors can also deploy for themselves without needing to share access to API keys! Other contributors also have visibility into failed builds and deploys.</p><blockquote><strong><em>Important note:</em></strong> If you’re using 2FA/MFA for RubyGems, you’ll need to set it (<a href="https://rubygems.org/settings/edit">here</a>) to the UI and gem signing level, and not UI and API . Another option if you do not want to change this is to change CD to use the <a href="https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#workflow_dispatch">workflow_dispatch</a> event instead of workflow_run , which will let you and other contributors publish from the command line with the gh run command. You can then set the otp_code to be a user input, which can then be passed to the action, <a href="https://guides.rubygems.org/using-mfa-in-command-line/">which can then be passed to the gem push command</a>.</blockquote><p><strong>Wrap Up</strong></p><p>I think this is a good place to stop!</p><p>From here, there’s so much we can do! Besides, of course, adding behavior to your gem so its valuable for you and others to use, there are countless ways to continue to improve the development process. For example…</p><ul><li>We could add <a href="https://sorbet.org">Sorbet</a> for static type checking</li><li>We could add <a href="https://github.com/fxn/zeitwerk#for_gem">Zeitwerk</a> for autoloading (no more require statements)</li><li>We could make a standard CLI (command-line interface) with <a href="https://github.com/rails/thor">thor</a></li><li>We could make an interactive CLI with <a href="https://github.com/piotrmurach/tty-prompt">tty-prompt</a></li><li>…and so much more!</li></ul><p>Share your thoughts, questions, feedback, and what you’d like to see next as a comment here, within any of the above linked pull requests, or on the <a href="https://join.slack.com/t/rubymod/shared_invite/zt-1dgyrxji9-sihGNX43mVh5T6tw18hFaQ">Ruby/Rails Modularity Slack Server</a>.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=a2b705047087" width="1" height="1" alt=""><hr><p><a href="https://medium.com/gusto-engineering/a-start-to-finish-walkthrough-on-creating-a-ruby-gem-with-ci-and-cd-a2b705047087">A start-to-finish walkthrough on creating a Ruby gem with CI and CD</a> was originally published in <a href="https://medium.com/gusto-engineering">Gusto Engineering</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Finding the Less-Risky Path Together: Security Partnership at Gusto]]></title>
            <link>https://medium.com/gusto-engineering/finding-the-less-risky-path-together-security-partnership-at-gusto-fec8c7bb90c9?source=rss----645edd256348---4</link>
            <guid isPermaLink="false">https://medium.com/p/fec8c7bb90c9</guid>
            <category><![CDATA[gusto]]></category>
            <category><![CDATA[software-engineering]]></category>
            <category><![CDATA[security]]></category>
            <category><![CDATA[tech-jobs]]></category>
            <category><![CDATA[infosec]]></category>
            <dc:creator><![CDATA[Breanne Boland]]></dc:creator>
            <pubDate>Tue, 09 Aug 2022 17:03:06 GMT</pubDate>
            <atom:updated>2022-08-09T17:03:06.012Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="Four people standing on a rocky mountain topped with snow, more rocky peaks and the sunset in the background" src="https://cdn-images-1.medium.com/max/1024/0*HrBHxz7SYp2s2smv.jpg" /><figcaption><em>Mountain climbing and software development: with some precautions, both can be safe. </em><a href="https://www.pexels.com/photo/four-people-above-snow-covered-mountain-top-2403502/"><em>Image source</em></a></figcaption></figure><p>Security work can often be divided into two parts: people and computers. The relatively new role of security partner is ideal for those who like both, as it involves working to meet the company’s needs for a secure system and needs of engineers to have a reasonable technical solution to execute and maintain. Does it sound complicated? It is! But that’s what makes it satisfying and why the security partner role has become more common across tech companies.</p><p>Gusto’s Security Partners team sits within Product Security, and we’re far from the only company that’s recognized the need for this role. Meta, Atlassian, Netflix, and Microsoft, among others, have formed teams dedicated to helping colleagues write more secure code, understand security concerns for new features, and identify and reduce risk.</p><p>I took this job because it combines so many different skills, equally weighing technical acumen and those that enable useful collaboration with different audiences. And the collaboration skills are key, because it’s at the center of this work. I can’t usefully write a document, complete a feature review, or offer risk mitigation without a good working relationship with the teams I partner with. If they wanted a generic assessment of the risk of cross-site scripting, they could Google; they come to my team when they want to know how to weigh the risk implicit in features with respect to how Gusto specifically operates.</p><p>But what does security mean at Gusto? Who owns risk here?</p><p>Hint: it’s not our security teams. Our CSO Fredrick Lee expands on this approach in <a href="https://www.youtube.com/watch?v=xFUJF9nvJpY">his BSides SF 2020 talk</a>; the tl;dr version, as it applies here, is that at Gusto, engineering teams own the risk of the code they write and the features they maintain. That means that my job-and this is something I say to every new PM, team, and engineer I work with-is to keep them from being awakened at 3 am by the PagerDuty summons no one ever wants to get. We’re here to educate, not dominate, and I work to make sure that engineering teams avoid all the surprises they reasonably can. This also means that it’s our job to share security knowledge and responsibility across Gusto.</p><h3>A week in the life</h3><p>Let’s talk about what that means from day to day. It’s rare for two days in this job to be substantially the same, so I’ll give you a sample calendar of what a week in this job can contain:</p><p><strong>Monday</strong></p><ul><li>Hold a monthly conversation with an engineering team PM</li><li>Set up a feature review</li><li>Scan Slack to find unanswered questions</li><li>Investigate a Bugcrowd submission</li></ul><p><strong>Tuesday</strong></p><ul><li>One-on-ones with teammates and manager</li><li>Review notes from recent feature review meetings</li><li>Draft a new feature review</li><li>Update existing documentation based on a risk surfaced in that feature review</li></ul><p><strong>Wednesday</strong></p><ul><li>Lead monthly Secure Code Training</li><li>Review a fellow security partner’s draft feature review</li><li>Talk to an engineer who located a missing part of our documentation</li><li>Initial work on writing that missing document</li></ul><p><strong>Thursday</strong></p><ul><li>Code review for critical PR</li><li>Answer questions about new feature design</li><li>Incorporate feedback on initial draft of missing documentation</li><li>Another PM meeting</li></ul><p><strong>Friday</strong></p><ul><li>Deliver feature risk analysis to team and setting up meeting to discuss</li><li>Answer engineer questions via DM</li><li>Research specifics about S3 storage and access</li><li>Review next week’s meetings to ensure I’m talking to everyone I need to be</li></ul><p>You may have noticed a lot of meetings in this sample schedule, which is where that relationship-building work comes in. My job doesn’t work if I don’t know what’s going on, which means talking with people regularly and ensuring those conversations are interesting, maybe even fun. It’s important that I really like talking to engineers, and I think it would be difficult to do this job well if I didn’t.</p><p>Of course, not all connections can be made on a one-to-one basis. Teams and staffing shift, and we don’t have partners assigned to every engineering team in Gusto. To let engineering at large know what support is available, we do relationship building at scale by holding trainings open to the whole company, being part of every engineer’s onboarding, presenting in all-hands meetings, and regularly being the friendly faces of Gusto Security. This helps ensure people know how to reach us and that we really, truly want to hear from them.</p><p>Being in the right conversation at the right time requires some luck, but we try to make it as strategic and deliberate as we can, because this work doesn’t go without knowing what’s happening across Gusto and offering security’s help when it’s needed.</p><h3>What experience does a security partner need?</h3><p>The perpetual question: how do I get that security job? And the perpetual security answer: it depends.</p><p>I came to security the long way via years in editorial, followed by a switch to full-stack engineering, and then moving into <a href="https://breanneboland.com/blog/2020/01/27/how-an-sre-became-an-application-security-engineer-and-you-can-too/">site reliability engineering and then enterprise security work</a>. Understanding tech is imperative to being effective in this job, but the skills I use the most from day to day are my ability to ask questions, talk to colleagues until I get the answers I need, and change the way I deliver a message based on the recipient. I highlight different elements of an issue depending on if I’m talking to my team, my PE (Gusto speak for manager), all of security, our chief security officer, a product manager, or various Gusto engineering teams. My vocabulary changes again if I need to discuss security practices with coworkers outside of engineering.</p><p>My teammates have more traditional backgrounds than I do (read: computer science degrees, vs. my own BFA in writing and publishing), but we share an interest in working with other people. Our experience makes it easier for us to get into different dev mindsets, which is important for effectively communicating security concerns, but it doesn’t work without empathy and knowing how others learn and understand.</p><p>If you’re considering this work, development and security experience are critical, arguably more than other security roles. You can learn security fundamentals on the fly while you’re building tools, but it’s harder to do that in conversation (though the ability to say “I don’t know, but I’ll research and get back to you” is critical too).</p><p>The more out-there parts of my experience that contribute to my ability to do this job are my background in consulting, knowing how to work with different kinds of people, and my public speaking work. Doing conference talks is generally professionally helpful in this field, but my talks in particular usually focus on relating specialized information to a wider audience, and I think said talks offered an accurate preview of what I’d do in this role.</p><p>Why would you want to do this work, though? If any of the following are true, security partners work might be for you:</p><ul><li>It makes you happy when your work varies a lot and is done with lots of different teams and people</li><li>You like to learn constantly because you don’t work from start to finish on a single feature</li><li>Your preferred colleagues are a wide range of engineers and security professionals</li><li>You enjoy <a href="https://breanneboland.com/blog/2022/06/04/bsides-sf-2022-read-the-fantastic-manual/">writing documentation and teaching</a></li><li>A combination of working with people and handling technical needs makes you happy</li><li>Enabling other teams to succeed gives you professional satisfaction</li></ul><p>Perhaps just as importantly, why <em>wouldn’t</em> someone like this job?</p><p>It’s a very different sort of engineering work, but that’s what I was looking for. I like talking security with people; it’s a conversation that usually elevates everyone involved. I also wanted to work at a company small enough that I could take ownership of problems and large enough to have a robust team of smart people to learn from.</p><p>All customer data at any company should be handled with the greatest care, but the specific challenge of data around payroll and benefits is an important one to me. I come from a family of small business owners, and I’ve seen firsthand how this kind of administration gets really complicated. I want small business owners to have one less hurdle between them and their dreams, and I want them to know that their critical data is in good hands. It makes me happy to be able to contribute to that for even a single employer.If any of that sings to you, maybe you’re security partner material too. Check out <a href="https://gusto.com/about/careers">Gusto’s careers page</a> to see what roles are open, and maybe you’ll get to work with our team too!</p><p><em>Originally published at </em><a href="https://engineering.gusto.com/finding-the-less-risky-path-together-security-partnership-at-gusto/"><em>https://engineering.gusto.com</em></a><em> on August 8, 2022.</em></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=fec8c7bb90c9" width="1" height="1" alt=""><hr><p><a href="https://medium.com/gusto-engineering/finding-the-less-risky-path-together-security-partnership-at-gusto-fec8c7bb90c9">Finding the Less-Risky Path Together: Security Partnership at Gusto</a> was originally published in <a href="https://medium.com/gusto-engineering">Gusto Engineering</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Payroll Industry Needs Efficient Integration with Government]]></title>
            <link>https://medium.com/gusto-engineering/payroll-industry-needs-efficient-integration-with-government-57ae0d858376?source=rss----645edd256348---4</link>
            <guid isPermaLink="false">https://medium.com/p/57ae0d858376</guid>
            <category><![CDATA[payroll-service-providers]]></category>
            <category><![CDATA[payroll]]></category>
            <category><![CDATA[integration]]></category>
            <category><![CDATA[goverment]]></category>
            <dc:creator><![CDATA[Praveen Awasthy]]></dc:creator>
            <pubDate>Wed, 03 Aug 2022 18:27:05 GMT</pubDate>
            <atom:updated>2022-08-03T18:27:05.247Z</atom:updated>
            <content:encoded><![CDATA[<p><strong><em>Post on the behalf of — Shelly Abril, Badri Sridharan, Praveen Awasthy</em></strong></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*hcjvfOsUFOUWvt-rIVXH4A.png" /></figure><p>Nearly three million U.S. employers, representing more than 48% of the private sector workforce, use a payroll service provider (PSP) to calculate, pay and file employment tax returns. The largest payroll companies in the US deposited over 45% of all IRS employment taxes collected in 2016. PSPs often assist their clients in resolving problems or errors with their payroll tax filings and payments.</p><p>PSP clients are often small business owners that are not experts in employment taxes. PSPs collect information from their clients in order to generate their payroll tax filings and payments; this information is unique to the client’s business and subject to change periodically, such as tax rates, payment schedules, and account numbers. The accuracy of the tax filings and payments hinges on the accuracy of the information collected by the client during their onboarding with their PSP, as well as when the agency or client makes a change to the business’s tax information. If the client enters the wrong information for the wrong year, or the rate for the incorrect tax authority, or transposes a number, excludes a surcharge rate, or makes any other innocent error, they will likely receive a tax bill from the tax authority. These tax bills come as a shock to clients who are paying their PSP to help them avoid such errors.</p><p><strong>Integration Challenges</strong></p><p>One may ask why PSPs can’t just work with the state taxing authorities to validate their client’s data on their behalf? In fact, most PSP’s do seek to partner with taxing authorities to confirm critical information needed to file and pay taxes, and in order to avoid costly penalties, interest, additional taxes, and scary tax notices for their clients. Not only are error notices disturbing for employers to receive, but they can take a long time to resolve due to <a href="https://www.irs.gov/newsroom/national-taxpayer-advocate-delivers-annual-report-to-congress-focuses-on-taxpayer-impact-of-processing-and-refund-delays">long hold times or requests to “call back later”</a> when calling tax authorities, and <a href="https://www.irs.gov/newsroom/national-taxpayer-advocate-delivers-annual-report-to-congress-focuses-on-taxpayer-impact-of-processing-and-refund-delays">multiple-month backlogs</a> at the tax agencies processing the responses to the notices. It is a much better experience for the client, PSP and agency to confirm the accuracy of data prior to filing and depositing taxes, and before an error has actually occurred.</p><p>Unfortunately, due to the increased focus on data security in recent years, many tax authorities are understandably concerned about releasing data to a potentially unauthorized party. Data security has become such a concern that some state tax authorities will not confirm any client data with PSPs without a state authorization form on record, even information that’s not sensitive or personally identifiable, and that can’t easily be used for nefarious purposes, such as deposit schedules or tax rates. Some states have gone so far as to actually reject otherwise-valid tax returns and deposits unless a state authorization is on file for that PSP/sender.</p><p>Employers using PSPs are increasingly required to follow non-standard and redundant steps to reconfirm their intentions to authorize the same PSP to file and pay on their behalf across multiple agencies. One state recently implemented a four-step custom authorization process. The state’s system offers no prompts or guidance to assist the employer with assigning proper roles to their PSP despite the fact that nearly half of their employers use a PSP. After months of communications to employers to coordinate and explain the multiple and confusing steps, <strong><em>barely half of PSP clients had completed Step 1</em></strong>, and <strong><em>less than 5% </em></strong>had completed the final step successfully.</p><p>According to <a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-63-3.pdf">NIST Publication 800–63–3, Digital Identity Guidelines </a>(see Section 5.3.1 Business Process vs. Online Transaction), which provides technical requirements for federal agencies to authenticate users of government systems over open networks, the <em>receipt of information</em> and sharing of information that is not personally identifiable is among the lowest-risk tier. PSPs are supportive of tighter authentication measures for more sensitive exchanges of information or ones that may be used for fraudulent activities (i.e. changing employer mailing addresses, discussing employee wages or SSNs, etc.). However, requiring unique and difficult processes to establish an authority to validate employer tax requirements and in order to file and pay taxes is unnecessary and in fact serves as a barrier to timely, accurate and electronic filing and payments.</p><p><strong>Recommendations towards Modernization</strong></p><p><strong>#1: <em>Create a national database to manage PSPs and employer-client relationships</em></strong></p><p>The IRS has already created a <a href="https://www.irs.gov/businesses/small-businesses-self-employed/reporting-agents-file-raf">Reporting Agent File (“RAF”)</a> which serves as a database that monitors active PSP (called “Reporting Agents” by IRS) and employer/client relationships. Every employer that uses a PSP must sign a clear authorization directing the PSP to file and pay applicable federal, state and local tax returns on their behalf, and to receive related information, such as the status of a return, assigned tax deposit schedule(s), assigned tax rate(s), copies of tax notices, etc. RAF is updated by the IRS when a PSP sends an authorization form (<a href="https://www.irs.gov/pub/irs-pdf/f8655.pdf">IRS Form 8655</a>) to the IRS that’s been signed by their client. The authorization is automatically revoked when a new authorization is received for the same employer with a more recent signature. Investments are needed to automate this authorization process more — many authorizations are still FAXed to the IRS and go through a review process prior to posting to RAF. Additionally, this PSP/client relationship information is not shared with state agencies.</p><p>States could be notified of new and/or changing PSP/client relationships using the existing <a href="https://www.irs.gov/government-entities/governmental-liaisons/irs-information-sharing-programs">IRS Information Sharing Program</a>. These programs are intended to:</p><ul><li>save government resources through partnerships between federal and state agencies</li><li>enhance voluntary compliance with tax laws</li><li>facilitate the exchange of taxpayer data, leveraging resources, providing assistance to taxpayers to improve compliance and communications</li></ul><p>Internal Revenue Code (IRC) Section 6103 authorizes the IRS to share tax information by entering into agreements with governmental agencies for tax administration purposes but is not currently used to share information about PSP relationship changes to state agencies. By sharing PSP reporting relationships with state agencies, states wouldn’t need to manage these processes themselves, cutting down on errors, and authorization reviews and processing. This information exchange would also help employers stay in compliance with the various state tax requirements, and improve communications for all parties. Improvements could be made to the IRS Information Sharing Program to allow for real-time exchange of information using Application Programming Interfaces(APIs). <a href="https://raw.githubusercontent.com/18F/API-All-the-X/gh-pages/_data/developer_hubs.yml">Other federal agencies </a>have already started investing in similar technology.</p><p><strong>#2: <em>Embrace API standards that allow for the real-time exchange of information</em></strong></p><p>The<a href="https://www.taxadmin.org/about-fta"> Federation of Tax Administrators (FTA)</a> is an organization whose mission it is to improve the quality of state tax administration by proposing standards, and facilitating the exchange of information, and intergovernmental and interstate coordination. FTA has worked for years to develop <a href="https://www.statemef.com/employment_tax.shtml">standard XML file formats for PSPs</a> to use in partnership with state agencies (see Data Exchange Data Formats <a href="https://www.statemef.com/employment_tax.shtml">here)</a>. The standard formats would allow for real time validation of information through APIs so that employers could onboard with their new PSP without any errors, and compliance could be maintained throughout their relationship with their PSP.</p><p>Unfortunately, these formats are rarely supported by state agencies. Instead, many state agencies use manually process files on a monthly, quarterly or annual basis batch processes that. These manual processes occur long after the client has onboarded with their PSP. This makes it difficult for PSPs to detect and correct any errors before a return or tax deposit is sent, exposing the client to penalty and interest. Additionally, most states use non-standard file formats that change periodically and are difficult for PSPs to build and maintain.</p><p>Another complication today is that many states don’t accept the IRS authorization. They instead often require their own electronic or paper authorization process (although it’s unclear why the IRS form wouldn’t suffice as proper authorization). Most states assess two or more payroll taxes that are paid and reported to two different state tax authorities. Therefore, employers are often taking steps to authorize their PSP in three or more systems (IRS plus two state systems), even if they are only operating their business in a single state.</p><p>Although it’s strongly encouraged for states to recognize and accept the IRS authorization form, if for some reason a state must enforce the use of a unique authorization process, FTA has also already created standard formats for employers to grant their PSP authorization (see reference to EPOA <a href="https://www.statemef.com/employment_tax.shtml">here</a>). Currently very few agencies use this electronic POA format and prefer instead a non-standard form or process.</p><p>In recent years, states have attempted to modernize their tax systems. Third-party vendors are often hired to build next generation systems. These states and vendors could utilize the available and recommended standards in their new systems, but don’t often partner directly with FTA or PSPs, and instead build to the unique requirements prescribed by the state’s project manager and team assigned to the project. Oftentimes, these project managers aren’t aware of the existence of these standards, or they don’t prioritize the use of industry standards. If states supported these real-time exchanges of information using standard formats, they could monetize the exchange and charge PSPs for the validation of the client data.</p><p>Businesses, and the tax administrators and payroll companies that serve them, would greatly benefit from improved coordination with the industry, as well as the implementation of more modern technology solutions. This would surface errors earlier in the process, reduce workload for tax administrators, and help small businesses improve the accuracy of their payroll tax filings and deposits. Examples of improved processes that could be implemented include:</p><ul><li>IRS could share with states, in real time, which PSP is the current authorized payroll company for a business, and notify the states immediately when the authorization has been terminated.</li><li>State tax administrators could update their records with PSP/client relationship information gathered from the IRS (preferably via API or web service).</li><li>Note that a similar system already exists for some states for the purpose of unemployment claim processes (see this <a href="http://www.itsc.org/Pages/UISIDES.aspx">UI SIDES system</a>), but a similar system does not exist for payroll tax purposes.</li><li>States could share critical but non-sensitive/protected information with the authorized PSPs, preferably using APIs.</li><li>IRS could modernize their authorization processing system which still receives many authorization forms on paper. Modernize the current rejected authorization process which provides authorization errors via compact disc (CD) via snail mail. In the new FY23 budget, IRS received increased funding for modernization efforts to address processing times and backlogs along with more resources for taxpayer service</li><li>IRS could begin sharing the reporting agent of record (RAF) with state agencies through <a href="https://www.irs.gov/government-entities/governmental-liaisons/irs-information-sharing-programs">IRS Information Sharing Program</a>.</li></ul><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=57ae0d858376" width="1" height="1" alt=""><hr><p><a href="https://medium.com/gusto-engineering/payroll-industry-needs-efficient-integration-with-government-57ae0d858376">Payroll Industry Needs Efficient Integration with Government</a> was originally published in <a href="https://medium.com/gusto-engineering">Gusto Engineering</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Scaling Sidekiq at Gusto]]></title>
            <link>https://medium.com/gusto-engineering/scaling-sidekiq-at-gusto-3f9e3279e63?source=rss----645edd256348---4</link>
            <guid isPermaLink="false">https://medium.com/p/3f9e3279e63</guid>
            <category><![CDATA[rails]]></category>
            <category><![CDATA[ruby-on-rails]]></category>
            <category><![CDATA[sidekiq]]></category>
            <dc:creator><![CDATA[Kelly Sutton]]></dc:creator>
            <pubDate>Mon, 01 Aug 2022 19:42:13 GMT</pubDate>
            <atom:updated>2022-08-29T22:55:51.538Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*GKZqj6MRBKBMWeiJe21VuA.jpeg" /><figcaption><em>Queues may lead to bottlenecks, both for sheep and background jobs.</em></figcaption></figure><p>Over the past year at Gusto, we’ve drastically changed how we approach <a href="https://sidekiq.org">Sidekiq</a> in our main Rails monolith.</p><p>Our changes have reduced costs, reduced the number of outages, made it simpler for product engineers to use Sidekiq, and improved the customer experience.</p><p>This blog post will go through the different aspects of our Sidekiq transformation at Gusto.</p><h3>What is Sidekiq?</h3><p>Sidekiq is a background job queueing system written in Ruby that uses Redis for storage. It can be useful for sending emails, generating reports, or doing something that is generally too slow to handle in a web request. According to the <a href="https://rails-hosting.com/2022/">2022 Rails Hosting survey</a>, it is the most popular Ruby-based background job framework by a large margin.</p><p>Gusto uses Sidekiq, Sidekiq Pro, and Sidekiq Enterprise to handle everything from sending password reset emails to moving a meaningful amount of the US GDP every year on behalf of our 200,000+ customers.</p><h3>It begins with a pandemic</h3><p>During March 2020, Gusto and many other businesses found themselves in a precarious position. The western world was shutting down. As credit and venture markets showed signs of slowing, controlling costs became a strong focus for many businesses. Gusto was no exception.</p><p>All teams at Gusto were asked to look for opportunities to cut costs. Within our Foundation engineering organization (think: infrastructure, developer experience, etc.), we started investigating different line items in our AWS bill. After a few high-impact, low-effort changes, we found our next-largest line item: the compute resources that powered our Sidekiq experience.</p><p>After diving into these machines, we noticed that they were severely underutilized. They were also configured to autoscale but in almost all scenarios the autoscaler would react after the baseline machines would complete a workload.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*ZRL1FumwY3aFbFXq0LisFQ.png" /><figcaption><em>Blue line: Sidekiq queue depth, using the left-hand axis. Purple line: Kubernetes pod count listening to that queue. Notice how the workload was showing good progress before the autoscaler added more pods.</em></figcaption></figure><p>How did we get here? We had stuck with the recommended Sidekiq approach to name queues things like “critical”, “default”, and “low” for priorities. As our engineering organization grew, each team adopted their own flavors. We saw “payroll_critical” and “benefits_critical”, “payroll_default” and “benefits_default”, and so on. Product engineering teams were in charge of configuring the hardware for their own queues.</p><p>Autoscaling up was often fine in the cases where the workload had already finished by the time the scale-up completed. Sometimes though, workloads that were safe to run at low concurrencies were dangerous to run at high concurrencies when it came to overloading our databases with write-heavy workloads. Sidekiq workers scaling up were a contributing factor to recurring partial or complete site outages.</p><p>Product engineers at Gusto are tasked with plenty of responsibility at Gusto. While taking a closer look at the queues, we realized this expensive and downtime-causing setup wasn’t yielding the best experience. Different sub-teams had different ideas of what “critical” meant. Oftentimes we’d see important jobs stuck behind backfills or bulk work, resulting in a poor customer experience.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*zO2Gz47exaKRWvS7ju-Zmw.png" /><figcaption><em>Image of the latency in a queue spiking, meaning that jobs were waiting up to 124 seconds (about 2 minutes) before being processed. When all jobs were in the “default” queue in this case, it was difficult to tell if these latency spikes were having a customer impact.</em></figcaption></figure><p>So we had something that was expensive, crash-causing, and inconsistent, leading to a poor customer experience. How did we begin fixing it?</p><h3>It begins with latency</h3><p>After a messy experimentation phase, the team landed on a single concept to fix the above issues and turn Sidekiq into an internally managed service. <strong>Specifically, organize queues by specific worst-case latency requirements rather than teams and ideas of relative priority.</strong></p><p>“Latency” in the case of Sidekiq is the metric derived from “How long has this job been waiting in the queue?” By looking at the next job in the queue and inspecting its latency, we can derive the overall queue latency.</p><p>So instead of:</p><ul><li>payroll_critical</li><li>benefits_critical</li><li>payroll_default</li><li>benefits_default</li><li>payroll_low</li><li>benefits_low</li></ul><p>We came up with:</p><ul><li>within_30_seconds</li><li>within_5_minutes</li><li>within_1_hour</li><li>within_24_hours</li></ul><p>This one idea allowed our team on infrastructure to define an easy-to-understand contract with our partners in product engineering. This interface we stumbled upon wasn’t just randomly selected, it accurately reflected the underlying limitations we would hit when configuring the infrastructure. To quote <a href="https://itrevolution.com/the-phoenix-project/"><em>The Phoenix Project</em></a>, we “elevated the constraint.”</p><p>Each queue’s name represents a worst-case latency expectation for a team. A job will wait in the within_30_seconds queue for up to 30 seconds before being executed. If a job waits more than 30 seconds, a team member gets paged.</p><p>We wanted to make adopting these new products as easy as possible, so switching to latency-based queues is a 3-line code change:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*s0ansDcVdUtCRbKC.png" /></figure><h3>Why isn’t every job assigned a 30-second latency?</h3><p>For the same reason that there isn’t a car that can travel 400 mph, get excellent gas mileage, and still be street legal. Every latency queue has its own set of constraints. Roughly, the amount of work that can be scheduled into a single queue is reduced as the latency is reduced.</p><p>Product engineers cannot dump 1 million jobs onto the 30-second queue, since almost any distributed system out there could not handle that load. There’s a good chance that the workload doesn’t <em>need</em> to be done in 30 seconds either. A few hours might be okay. So we ask that product engineers only add jobs to the queue that are short in length (less than a second) and driven primarily by user engagement (someone clicking a button in the app).</p><p>As the latencies increase, so does our capacity. We can fit a lot more jobs into a 5-minute or 1-hour chunk of time before we exceed our latency promises.</p><h3>What if we have a lot of 30-second jobs that are all “well-behaved”?</h3><p>As Gusto grows, workloads do too. What happens if we have many jobs that are operating within the rules of the 30-second queue but we’re exceeding our latency promises?</p><p>We add a shard!</p><p>A point not mentioned from before is that we run each queue at a fixed concurrency without autoscaling. This means we have a fixed amount of machines and threads pointed at any specific queue. We found a fixed concurrency in Sidekiq workers to be the best protection for database overloads.</p><p>So if we have 10 processes each running 10 threads (something we call “10x10”) for a single queue, we’ll add another 10x10 shard.</p><p>From a Sidekiq perspective, that means we go from:</p><ul><li>within_30_seconds</li></ul><p>To:</p><ul><li>within_30_seconds_shard_0</li><li>within_30_seconds_shard_1</li></ul><p>Because we don’t want any one job to run at too high of a concurrency, we choose a shard based on job class name. This crude approach means the workloads are not perfectly balanced (i.e. 50/50), but they are safely balanced. Given this approach, we can add new shards to increase throughput for the 30-second latency promise as much as we need.</p><p>Here’s how we implement that in code:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*3Zl_NU0UzZEhHYWn.png" /></figure><p>At the time of writing, if a job is exhausting a 30-second queue shard, we will create specialized infrastructure for that single job or work with the team to optimize that particular job.</p><h3>Does every job fit in a latency queue?</h3><p>As of the time of writing, 93% of all jobs within the main monolith run on a latency-based queue, but not all jobs fit that paradigm. For example, some jobs are so critical to the system that we don’t want other jobs to share a queue with them, so we create “express lanes” for those jobs. We also have a few jobs that have been stubborn to refactoring. One day we might get to those last few…</p><h3>What about workloads that need a higher concurrency?</h3><p>While most workloads run at a fixed concurrency to protect downstream services like our databases, there is a category of work that benefits from and is safe to run at high concurrency. These workloads are entirely read-only from the perspective of the databases. By connecting to read replicas, we’re able to safely scale the concurrency to much higher levels.</p><p>To accomplish this, we use a Sidekiq server middleware to wrap the entire job’s execution in a <a href="https://guides.rubyonrails.org/active_record_multiple_databases.html#using-manual-connection-switching">ActiveRecord manual connection switch block</a>. In the case where the job attempts to write to the database, we gracefully re-enqueue the job onto a read/write queue.</p><p>The result is something that is not only performant but safe. This escape hatch into performance allows teams to restructure their jobs to take advantage of this safe high concurrency. Teams will sometimes split jobs into read-only pre-work jobs over a large dataset to filter down to a small set of read/write jobs.</p><h3>What are the results?</h3><p>Completing this project required inspecting every Sidekiq job within the main monolith and asking “What’s the best latency for this job?” After about a year of work and nearly a dozen people involved, we can proudly claim the following:</p><ul><li>Sidekiq infrastructure costs have decreased 40% while Gusto’s customer base continues to grow.</li><li>Latency queues with their fixed concurrency have yet to cause a partial or full site outage.</li><li>The customer experience is more consistent, with workloads happening by a certain time or an infrastructure engineer getting paged.</li><li>Product engineers can spend more time focusing on the product and less time configuring hardware, which helps differentiate Gusto and make the best use of a critical resource (our time!).</li></ul><h3>Further Reading</h3><ul><li><a href="https://nateberk.gumroad.com/l/sidekiqinpractice"><em>Sidekiq in Practice</em></a> by Nate Berkopec</li><li><a href="https://github.com/mperham/sidekiq/wiki/Best-Practices">Sidekiq Best Practices</a> from the Sidekiq Wiki</li></ul><p><em>Originally published at </em><a href="https://engineering.gusto.com/scaling-sidekiq-at-gusto/"><em>https://engineering.gusto.com</em></a><em> on August 1, 2022.</em></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=3f9e3279e63" width="1" height="1" alt=""><hr><p><a href="https://medium.com/gusto-engineering/scaling-sidekiq-at-gusto-3f9e3279e63">Scaling Sidekiq at Gusto</a> was originally published in <a href="https://medium.com/gusto-engineering">Gusto Engineering</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Deciding on Your Very First Second Job, as a Software Engineer — Part 2]]></title>
            <link>https://medium.com/gusto-engineering/deciding-on-your-very-first-second-job-as-a-software-engineer-part-2-cc597589654a?source=rss----645edd256348---4</link>
            <guid isPermaLink="false">https://medium.com/p/cc597589654a</guid>
            <category><![CDATA[job-hunting]]></category>
            <category><![CDATA[career-change]]></category>
            <category><![CDATA[career-advice]]></category>
            <category><![CDATA[software-engineering]]></category>
            <category><![CDATA[interview]]></category>
            <dc:creator><![CDATA[Paulina Lei]]></dc:creator>
            <pubDate>Thu, 14 Jul 2022 18:45:02 GMT</pubDate>
            <atom:updated>2022-07-14T18:45:02.586Z</atom:updated>
            <content:encoded><![CDATA[<h3>Deciding on Your Very First Second Job, as a Software Engineer — Part 2</h3><h4>The interview process for not just a new graduate, but not a senior engineer</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*zKxVYiu3fVePHu2RyhNaow.jpeg" /></figure><p><em>If you missed the first part discussing how to decide on where to go for your second job, make sure to read it </em><a href="https://medium.com/gusto-engineering/deciding-on-your-very-first-second-job-as-a-software-engineer-part-1-e8931dc169c3"><em>here</em></a><em>.</em></p><p>When I was a new graduate, there were countless resources and dedicated pipelines at companies looking to hire students out of school. However, when searching for a second job, as someone who is not exactly a senior engineer but no longer a new face in the industry, I noticed that there was a lack of information. To whoever is in this same position, I hope this article helps clarify some confusion around the interview process and how it differs from a new graduate interview.</p><h3>Technical details</h3><p>As I wasn’t exactly a new grad but also not a senior engineer with tons of experience under my belt, I was unsure about how the interview process would go. Here are some common questions I had and the answers to them:</p><p><em>Would people care about seeing my internships?</em></p><p>While most interviewers will ask more about your full time work experience, I did get a few questions about my internships. I believe it is worth keeping on your resume especially if you want to fill space but do focus more of the space on your full time job.</p><p><em>Could I add my experiences in volunteering and organizations I did outside of work?</em></p><p>Absolutely! This is important especially in identifying if the company culture and values align with your own. Sometimes, a company will have a “values alignment” interview, where they see whether you as a person will fit within their company, and this can help highlight and show off who you are as a person.</p><p><em>Could I still keep college extracurriculars on my resume?</em></p><p>You can if you want. Some interviewers may ask questions on them but it is not common. They are worth keeping if you want them to fill up space or to show your values, but you do not need them.</p><p><em>How are the interview loops structured?</em></p><p>Interview loops are still very similar to the new graduate hiring process, with a few choice differences. There are still phone screens, coding questions, behavioral interviews, and hiring manager interviews. However, here are a few differences that I noticed:</p><ol><li>There is a bigger focus on being able to explain the project/s that you worked on at your current job. Being able to explain the system design process and infrastructure is important, so really know the projects you worked on inside and out. Oftentimes, during these interviews, interviewers will ask for details of the project. They will also ask you what problems occurred and how you solved them.</li><li>Bigger emphasis on system design interviews. You will be expected to know how to design a mini project that the interviewer gives you. These are often collaborative, with interviewers giving you hints and answering clarifying questions. While the new graduate interviews may have had some system design interviews, these are much more common at this level and are more complex.</li><li>There is a focus on your own leadership experiences. Of course, at this level, you are not a team lead, but even small leadership experiences are worth mentioning. Did you lead a feature or a portion of a project? Definitely mention it. Did you have experience in structuring the design and implementation or breaking down a project into manageable tasks? In addition, did you help others solve issues or mentor someone? Do not worry if you do not have all of these, it is best to be honest and explain that you did not have these experiences, but show that you are willing to learn and to take on these tasks in the future.</li></ol><p>In these interviews, interviewers are gauging how well you understood big picture items, how well you could be independent, how well you could teach yourself and reach out to bridge knowledge gaps, and how you could be an effective teammate.</p><h3>Setting boundaries with yourself and others</h3><p>The interview process can be draining. Spending precious free time to prepare and take interviews can take a toll. Rejections are never fun and can take a hit on your self-esteem. It can be frustrating to go through interviews and not get offers, but being patient with yourself and giving yourself time can go a long way in making the process much more enjoyable.</p><p>While it would be great that each company you interview with is exactly what you are looking for, sometimes certain companies may not align with what you want. It’s important to land at a company where there is mutual respect. As a candidate, set boundaries for what is important to you and how you want to be treated.</p><p>Some questions to consider when assessing whether the company is a fit:</p><ol><li>Did the interviewer treat you with respect and give you the space to show yourself and your skills?</li><li>Did the interviewer respect your time?</li><li>Did the company give clear expectations of the job and compensation?</li></ol><p>You can tell a lot about a company based on the interview. As much as they are interviewing you, you are also interviewing them.</p><h3>Accepting your very first second job</h3><p>After going through the interview process and getting an offer or offers, you now have the ability to decide on which company gets to be your next job.</p><p>At this point in the process, the hardest part is staying focused on the values you were looking for in the next job. It can be easy to be distracted by job titles, salary, prestige, and more. It is at this point in the process where it is important to look past these distractions and truly go after what job you think will best suit what you are looking for.</p><p>Ultimately, go with the job that would fulfill you more, as happiness in your job has a big impact on your life.</p><p><em>Originally published at </em><a href="https://engineering.gusto.com/p/acd9774c-0878-4038-b144-441dcc074ad1/"><em>https://engineering.gusto.com</em></a><em> on July 6, 2022.</em></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=cc597589654a" width="1" height="1" alt=""><hr><p><a href="https://medium.com/gusto-engineering/deciding-on-your-very-first-second-job-as-a-software-engineer-part-2-cc597589654a">Deciding on Your Very First Second Job, as a Software Engineer — Part 2</a> was originally published in <a href="https://medium.com/gusto-engineering">Gusto Engineering</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Deciding on Your Very First Second Job, as a Software Engineer — Part 1]]></title>
            <link>https://medium.com/gusto-engineering/deciding-on-your-very-first-second-job-as-a-software-engineer-part-1-e8931dc169c3?source=rss----645edd256348---4</link>
            <guid isPermaLink="false">https://medium.com/p/e8931dc169c3</guid>
            <category><![CDATA[career-growth]]></category>
            <category><![CDATA[software-development]]></category>
            <category><![CDATA[career-advice]]></category>
            <category><![CDATA[interview]]></category>
            <category><![CDATA[software-engineering]]></category>
            <dc:creator><![CDATA[Paulina Lei]]></dc:creator>
            <pubDate>Thu, 23 Jun 2022 13:03:05 GMT</pubDate>
            <atom:updated>2022-06-23T13:37:06.733Z</atom:updated>
            <content:encoded><![CDATA[<h3>Deciding on Your Very First Second Job, as a Software Engineer — Part 1</h3><h4>How to identify what you want out of a job</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*20KtptMEkBkWKgIK.jpg" /></figure><p>A year into my first job out of school, I found myself feeling content with my job but wanting more. As I embarked on finding and creating a path that would be more fulfilling for me, I found myself pretty confused on how to approach finding my second job. I hope whoever is searching for their second job, this article can help you along the way.</p><h3>Identify what you want more from your current job</h3><p>A good first question to ask yourself is whether you need to switch projects, teams, or search for another company. Sometimes, satisfaction with your current job may be very dependent on your immediate surroundings or it can be a fundamental structure of the company you work at.</p><p><em>Maybe you just need to switch projects</em></p><p>If you are feeling uninspired with your current project, maybe asking your manager to switch to another one or alternatively even creating your own project that you are interested in could be what you are looking for. Maybe your teammates are working on problems you are interested in and asking them to help out may be enough to feel more happy with your job.</p><p><em>Maybe you just need to switch teams</em></p><p>Alternatively, sometimes your team may be the reason why. Are you looking for better mentorship? Maybe the area of focus that your team works on was not quite what you were looking for. What if you want a manager that could better help you achieve your career goals? These are all valid concerns, and if you still enjoy the company culture, maybe a switch to a different team would be a good change of pace. Also, it is a lot easier to switch teams than to interview for a new company.</p><p><em>But maybe you need to switch companies</em></p><p>If you feel the company as a whole cannot offer you what you are looking for, this is a good opportunity to really consider what you want. Maybe the role you want at a company does not exist. For example, larger companies have very distinct roles for backend and frontend engineers, but startups tend to have more blended roles for full stack engineers.</p><h3><strong>Prioritizing yourself and your goals</strong></h3><p>If you do decide to switch teams or switch companies, the decision to leave your team can be difficult. Looking for a new job — when there are people counting on you — can make you feel guilty or even selfish. After all, working on a team means working in an ecosystem of people who you’ve built relationships with. When I went through it myself, I definitely felt responsible for my tasks and did not want my absence to affect the work-life balance of my coworkers. Plus, many of my coworkers had helped me develop my own skills and leaving felt as if I was taking their kindness for granted.</p><p>However, prioritizing your own needs is important, and coworkers who care about you and your growth will understand and support your decision to leave. Investing in yourself is something that you will never regret. In addition, you want to find the right fit for yourself, and by leaving, you give the team and a future person to find the right fit for them.</p><h3><strong>What values matter to you?</strong></h3><p>When you do decide that you want to search for another company, considering what you value in a job is most important. These values can be many things, such as the company mission, the tech stack, the company culture, location, and more. What is important to you?</p><p>Here are some important questions to ask yourself:</p><p><em>Company mission</em></p><ol><li>Do you align with the company mission?</li><li>Is the industry space something that resonates with you?</li><li>How do you see the company growing and is that what you want to work on for the foreseeable future?</li><li>Can you imagine projects outside of what the company is currently working on?</li><li>How can the company impact what you want to see in the world?</li><li>What problem do they solve that currently exists?</li></ol><p><em>Tech stack</em></p><ol><li>Do you see a future in the technologies that the company is using?</li><li>Do you feel it is worth your time to learn the tech stack that the company has?</li><li>Will learning their tech stack propel you further in your career goals?</li><li>What are the benefits and pain points of their systems?</li><li>How do they balance innovation with maintenance and technical debt?</li></ol><p><em>Company culture</em></p><ol><li>Is the work environment conducive to you learning and able to do your work properly?</li><li>Is there a good work-life balance?</li><li>Does the company invest in mentorship and their employees’ growth?</li><li>What growth opportunities do they offer?</li><li>Do you agree with their company values?</li><li>In the interview process, did you like the interviewers?</li><li>Are the intersectionalities of my identity celebrated?</li><li>Do your personal beliefs and values align with the company’s?</li></ol><p><em>Company Structure</em></p><ol><li>How does the company award successes and address failures?</li><li>How does their review cycle work?</li><li>How do they help employees that are struggling?</li><li>Does the management style suit you?</li><li>Is it a large company or a startup?</li><li>What stage that a company is in is comfortable to you?</li><li>Can you work remotely or do you need to be in office?</li><li>How do they handle remote or hybrid work?</li><li>Can you stay at home for a portion of the week?</li><li>Will you be compensated fairly?</li><li>What are the pay bands for each level?</li></ol><h3><strong>How does Gusto stack up?</strong></h3><p>After all of this deliberation, my job searching process led me to Gusto!</p><p>So, why did I choose Gusto? As I wanted to become a more senior engineer, I decided one of the important values I was looking for was mentorship. I wanted to work with other engineers who could support me in my learning and also help me in becoming more knowledgeable as an engineer. I knew that in order to do this, I needed to work on harder projects but also have the support in order to let me complete the projects and learn from them. Here at Gusto, we have a heavy emphasis on pair programming — something that has greatly accelerated my knowledge and skills. This has allowed me to learn from more experienced engineers and also gives me the support I need. I am able to take on more complex projects without fear, as I know that if I am ever stuck, I am a pairing session away from solving my problem.</p><p>I also decided to optimize for growth opportunities, as I knew that I wanted to grow my own skill set. From talking to friends and coworkers, it felt that going to a smaller company would provide me the opportunities to learn. I wanted to be on the ground floor building everything, as I believed that more exposure and experience in building products would bring about the most growth in my own abilities. Learning by building and making mistakes would be better. In addition, I also worked as a backend engineer, but I wanted to have a more blended role as a full stack engineer, to own the full end-to-end process. Here at Gusto, we are a late stage startup, which worked well for me. There is still a lot of high growth potential, which would allow me to work on high impact projects, which aligns well with allowing me to grow my skills. It’s important to understand your personal risk tolerance, and whether early stage or later stage companies make the most sense for you.</p><p>In addition, I wanted a good company culture. My previous company excelled in this regard. We had great work-life balance, wonderful events and perks, and people that were passionate and respectful of celebrating different life experiences. This experience was so different from what I had heard from friends working in other companies, and I knew this was something I would not give up.</p><p>Gusto is wonderful in this regard. Gusto cares about building products that drive a positive impact for society. We don’t just build products that drive revenue. One of the stories that stood out to me during the interview process was how Gusto employees are empowered to speak up with questions and concerns they have about the products and features we’re building and the impact they have on our customers. This was a big motivation in me wanting to work for Gusto, as it showed that Gusto is a company that cares about the products it builds, whether they should be built, and whether they are ultimately good for society. When I started working at Gusto, something that surprised me was how authentic people were with their lives and identities, as sometimes in different work environments, it can be hard for people of marginalized identities to live genuinely in front of other people. In my day-to-day work here, it is amazing to see others fully be themselves at work, which definitely makes me feel that people from all backgrounds are appreciated and celebrated.</p><p>Lastly, I really resonated with Gusto’s mission, which was to enable small business owners and make running their businesses easier, letting their business improve their life. As someone who has friends with their own small businesses and seeing the push to support small businesses due to the onset of COVID-19, this mission spoke to me, as it felt Gusto was really trying to use their efforts to help others. In addition, it was really easy to imagine how Gusto as a company would grow into other markets, and how they could add onto their products to continually improve their offerings.</p><p>You can find me working as a software engineer at Gusto, working on all things related to web development on the Pufferfish Expansion team. I hope this article is of some help to your job searching process and wish you luck on finding your next job.</p><p>Make sure to catch the next blog post regarding how the interview process works.</p><p><em>Originally published at </em><a href="https://engineering.gusto.com/p/e2451aa4-47ad-4c61-9783-7fc52a3e8749/"><em>https://engineering.gusto.com</em></a><em> on June 14, 2022.</em></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=e8931dc169c3" width="1" height="1" alt=""><hr><p><a href="https://medium.com/gusto-engineering/deciding-on-your-very-first-second-job-as-a-software-engineer-part-1-e8931dc169c3">Deciding on Your Very First Second Job, as a Software Engineer — Part 1</a> was originally published in <a href="https://medium.com/gusto-engineering">Gusto Engineering</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Performance Engineering at Gusto]]></title>
            <link>https://medium.com/gusto-engineering/performance-engineering-at-gusto-9ec73a071e46?source=rss----645edd256348---4</link>
            <guid isPermaLink="false">https://medium.com/p/9ec73a071e46</guid>
            <category><![CDATA[performance-engineering]]></category>
            <category><![CDATA[application-performance]]></category>
            <category><![CDATA[performance]]></category>
            <category><![CDATA[software-engineering]]></category>
            <category><![CDATA[engineering-culture]]></category>
            <dc:creator><![CDATA[Toni Rib]]></dc:creator>
            <pubDate>Tue, 14 Jun 2022 15:14:02 GMT</pubDate>
            <atom:updated>2022-06-14T15:14:02.237Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="A mug with The Adventure Begins sits outside on rocks" src="https://cdn-images-1.medium.com/max/1024/1*G3c5I6y4Ah6tm7grzbEqHw.jpeg" /></figure><h3>How a side project became a movement that created real cultural change</h3><p>Gusto was born as a promise to make payroll easy for small businesses in the United States. Payroll and taxes are extremely complicated domains, so to keep laser focused on our customers, we consciously kept our sights on small businesses. As Gusto grew, and our customer base grew, so did the desire from our customers to stay with us long term. Growing businesses have different needs, and we saw an opportunity to evolve alongside them-to build features and functionality that were still seamless for companies with 5 employees, but could scale to serve businesses with hundreds of employees.</p><p>We care about our customers and want to ensure we keep meeting their needs even as those needs change. Engineers were building performance into our work naturally, but we knew we needed to do a lot more to coordinate our efforts and keep up with our increasing demand.</p><h3>Starting the conversation</h3><p>In November 2020, my coworker, Glen Oliff, and I had the idea to start the performance guild, a place where we could coordinate engineering efforts, learn from each other, and have people ask questions and get help. At Gusto, we use the term guild to refer to a group of people who care deeply about a subject. We have a frontend guild, a ruby modularity guild, domain specific guilds, and others. Creating a performance guild to bring together the engineers who were already passionate about this topic was an easy way to find people interested in this work.</p><p>The first thing we did was organize a monthly meeting and a corresponding Slack channel. We didn’t have a lot of formal speakers initially in this monthly meeting, so we gave many of the talks ourselves. But by the third month, we had started to gain some traction. As more people heard about the guild, engineers from around the organization began coming to us with topics they wanted to discuss or present.</p><p>We paired a lot with our Developer Experience team to get relevant logs, dashboards, APM tools, and other observability tools enhanced with performance specific information. We doubled down on our investments in this kind of tooling, even creating some of our own, so engineers could have easy access and insights into areas that could use improvement. We also put safeguards in place, like automatically killing database queries that ran for too long. By getting the right information to the right people, we were able to greatly increase our ability to be proactive and respond to events.</p><p>To make sure learnings weren’t relegated to Slack history searches, we created an internally documented space to be the one stop shop for everything performance related. It contains meeting recordings, helpful articles, case studies of past issues, and a whole lot more. To make it easy to get to, you just go to go/performance into your browser!</p><h3>Building momentum</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/851/0*rbD6FrVbtS64imGg" /></figure><p>With all these things in place, it spurred a whole new set of insights into our system, and engineers felt even more empowered to find and fix issues. We gained a lot of momentum over the course of 2021, with people posting anytime they made an improvement to a page or a job in our channel, which started to happen multiple times a week. These wins would then be celebrated at the next monthly guild meeting, to highlight and give credit to individuals putting in the hard work. Eventually, I brought this to our Engineering All Hands meeting, and now every month we highlight all the performance fixes from the last month in front of a group of hundreds of Gusto engineers. It’s helped get even more engineers involved in the efforts.</p><p>We also decided to kick off a performance guild book club, and read The Complete Guide to Rails Performance by Nate Berkopec. We jokingly said that we should bring Nate on to help with our issues, but that joke turned into actually talking to our CTO about it, and I’m happy to say that here we are in 2022 with Nate as a full time Gustie!</p><p>To make sure we could keep the momentum going and onboard new engineers into our new best practices at Gusto, I created a formal course that walks through each of the tools we’ve added and the basics on how to use them. It launched in March 2022 and became mandatory for all existing and new engineers.</p><p>At the same time, performance metrics became part of a larger initiative focused on building specific quality principles into our product. This really felt like the moment my side project, that turned into a grassroots engineering effort, was formalized as full blown requirements for the department.</p><h3>Looking to the future</h3><p>Where do we go next? We want to continue moving in the right direction and even accelerate efforts where we can. We are actively working on improving some of our highest traffic pages and doing additional research into areas of improvements for our largest customers. We’d like to find ways to utilize the tools we’ve put in place to be even more proactive, instead of reactive.</p><p>Looking back on the last year and a half, it’s incredible how many engineers have stepped up to make our site faster for our customers. Gusto <a href="https://www.pcmag.com/reviews/gusto">won the editor’s choice award</a> from PC Mag for the payroll for small businesses category, and they had this to say about our performance:</p><blockquote><em>“Gusto displays a cute little pig named Penny while many screens are loading. Penny is running fast, but I didn’t see her as much as I did the last time I tested Gusto. Gusto has improved its performance speed quite noticeably.”</em></blockquote><p>What I personally learned from this experience is that as an individual contributor on Gusto’s engineering team, if you’re really passionate about a topic, you can drive real change in the organization. If that sounds like something you’re interested in, consider <a href="https://gusto.com/about/careers/join-the-team">joining our team</a>!</p><p><em>Originally published at </em><a href="https://engineering.gusto.com/performance-engineering-at-gusto/"><em>https://engineering.gusto.com</em></a><em> on June 13, 2022.</em></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=9ec73a071e46" width="1" height="1" alt=""><hr><p><a href="https://medium.com/gusto-engineering/performance-engineering-at-gusto-9ec73a071e46">Performance Engineering at Gusto</a> was originally published in <a href="https://medium.com/gusto-engineering">Gusto Engineering</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Laying the Cultural and Technical Foundation for Big Rails]]></title>
            <link>https://medium.com/gusto-engineering/laying-the-cultural-and-technical-foundation-for-big-rails-6b5ab78349ed?source=rss----645edd256348---4</link>
            <guid isPermaLink="false">https://medium.com/p/6b5ab78349ed</guid>
            <category><![CDATA[gusto]]></category>
            <category><![CDATA[modularization]]></category>
            <category><![CDATA[bigrails]]></category>
            <category><![CDATA[gradual-modularity]]></category>
            <category><![CDATA[packwerk]]></category>
            <dc:creator><![CDATA[Alex Evanczuk]]></dc:creator>
            <pubDate>Thu, 19 May 2022 00:34:00 GMT</pubDate>
            <atom:updated>2022-06-16T12:31:58.642Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*YnTZAih3REXa_jgk.png" /></figure><p>This was Gusto’s system graph. Each of the black rectangles you see here is a subsystem within Gusto’s biggest Rails monolith, and the red arrows are where one subsystem talks to another.</p><p>As our business grew, folks started having a hard time making large changes in our codebase. Initially, we tried solving some of these problems with gems, Rails engines, and microservices — with mixed results.</p><p>If this story is familiar to you, you may be working in a big Rails application. Gusto has attempted to solve some of these problems through Big Rails.</p><blockquote>Big Rails is a system of sociotechnical tools, practices, and conventions that scale Rails development in terms of lifespan, number of contributors, and complexity.</blockquote><p>In this post, I’ll talk a little bit about how we tried to solve these problems and share some tools we’ve open-sourced.</p><p>To solve the problems of a Big Rails application, there are 5 key principles that drive our approach.</p><ul><li>Accountability and Ownership</li><li>Clear Boundaries</li><li>Thoughtful Dependency Management</li><li>Gradual Adoption</li><li>Intentionally Curated and Sustainable Feedback Loops</li></ul><h3>Accountability and Ownership</h3><pre>module PayrollSyncer<br>  def self.sync_deductions!<br>    raise &quot;I am an error&quot;<br>  end<br>end</pre><p>Imagine this code exists in your codebase. When PayrollSyncer.sync_deductions! is called, who receives the error? How is it routed to the right team? Who do you ask about this code when git blame shows dozens of folks who have changed teams or left the company?</p><p>Accountability and ownership is all about striving to clearly define which teams own which domains. It should be dead simple for both automated tooling and engineers working within the codebase to identify areas of ownership.</p><p>To accomplish this within our own Big Rails application, we created and open-sourced two gems: one to manage code ownership and the other to manage teams.</p><ul><li><a href="https://github.com/rubyatscale/code_ownership">github.com/rubyatscale/code_ownership</a> (and <a href="https://github.com/rubyatscale/code-ownership-vscode">github.com/rubyatscale/code-ownership-vscode</a>)</li><li><a href="https://github.com/rubyatscale/code_teams">github.com/rubyatscale/code_teams</a></li></ul><p>Here is a simple team declaration…</p><pre># config/teams/payroll.yml<br>name: Payroll<br>github:<br>  team: &#39;<a href="http://twitter.com/Gusto/payroll">@Gusto/payroll</a>&#39;<br>owned_globs:<br> - app/services/payroll/**/**<br> - app/services/payroll_syncer.rb</pre><p>… and how we tie that team to that code in the snippet above.</p><pre>team = CodeTeams.find(&#39;Payroll&#39;)</pre><pre>CodeOwnership.for_file(&#39;app/services/payroll_syncer.rb&#39;) == team</pre><pre>CodeOwnership.for_class(PayrollSyncer) == team</pre><pre>begin<br>  PayrollSyncer.sync_deductions!<br>rescue =&gt; ex<br>  CodeOwnership.for_backtrace(ex.backtrace) == team<br>end</pre><p>With this, we could suddenly tie that original piece of code back to the team. As an added bonus, this functionality started conversations about code ownership (or lack thereof) throughout our codebase.</p><h3>Clear Boundaries and Dependency Management</h3><p>Having clear boundaries is about working towards easily understandable conceptual and mechanical separation between domains. Each system should only talk to other systems via intentionally maintained public APIs. Thoughtful dependency management means minimizing dependencies. This helps engineers reduce cognitive load and understand how systems work together. When we must take on a dependency, we should do so explicitly. We should avoid creating cycles in our dependency graph, as they reduce our ability to understand a subsystem in isolation.</p><p>To move towards this goal, we started with one simple change to a standard Rails convention.</p><pre>app/<br>  models/<br>    benefits/<br>    payroll/<br>    hr/<br>  views/<br>    benefits/<br>    payroll/<br>    hr/<br>  controllers/<br>    benefits/<br>    payroll/<br>    hr/<br>  services/<br>    benefits/<br>    payroll/<br>    hr/</pre><p>Here is a contrived example of a standard Rails app. It has an app directory containing secondary directories for “architectural concerns” which point to the various domains.</p><p>Imagine you are an engineer on the benefits team at Gusto. You have to jump around the codebase to make a change within one domain. This violates an important principle of coupling and cohesion — things that change together should live together.</p><p>So we made that change:</p><pre>packs/<br>  benefits/<br>    models/<br>    views/<br>    controllers/<br>    services/<br>  payroll/<br>    models/<br>    views/<br>    controllers/<br>    services/<br>  hr/<br>    models/<br>    views/<br>    controllers/<br>    services/</pre><p>We decided to organize things on the basis of their business domain first, followed by the basis of architectural concern. This hid the technologies underlying a domain while co-locating test files. Although this is possible with vanilla Rails, we open-sourced a tool called <a href="https://github.com/rubyatscale/stimpack">stimpack</a> to make this sort of configuration easy.</p><p>Now that our app was organized by domain, we leveraged <a href="https://github.com/Shopify/packwerk">packwerk</a> to systematically manage the relationships between these domains. Kudos to Shopify for this great tool! With packwerk we kept the same structure as above, but added a package.yml and a public folder (where the public API lives) in each domain folder. Each pack is owned by one team, which is implemented by the code_ownership gem.</p><h3>Packwerk tl;dr</h3><p>Packwerk creates a directed graph of the statically analyzable references from one package to another. If one pack calls code defined in another pack it forms a reference, or an edge, in that graph. Packwerk then analyzes these references and declares a reference as a “privacy violation” if one pack is referencing something in the private API of the other pack and a “dependency violation” if it’s referencing another pack without a declared dependency in the package.yml file. Packwerk outputs these violations in a YML list which is indispensable to improving system boundaries gradually over time. This is only a brief explanation of how packwerk works. Checkout the Packwerk docs for more details.Packwerk does all of this without being loaded into the runtime. This means packwerk is not a production dependency. Packwerk runs as a separate process on CI or locally. Note that packwerk only parses explicit references to classes, constants, and modules. We find that pairing packwerk with <a href="https://github.com/sorbet/sorbet">sorbet</a> and typing our methods helps packwerk provide even more meaningful output.</p><h3>But what about gems and engines?</h3><p>I mentioned earlier that we tried using inline gems and engines to modularize our application. Packwerk has some key differences from gems and engines:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*PyPMYDKe_oXI8KDfVyrefw.png" /></figure><p>Here’s a bit more explanation:</p><ul><li>Packwerk, unlike gems and engines, supports <strong>gradual modularity</strong>. Gems and engines sometimes force you to solve modularization problems in areas of potentially low business value, where packwerk allows you to state the idealized system diagram (by creating packages, moving files into them, creating public API, and stating relationships between packages), and then it gives you the TODO list to get you there. Packwerk decouples statements about system structure and boundaries and the implementation of those boundaries.</li><li>Packwerk packages are <strong>inexpensive to create and change</strong>. There is very little boilerplate, and changing the relationships between packages is as simple as changing YML files.</li><li>Packwerk does not support <strong>distribution or versioning</strong>. If that’s what you need, you’ll definitely need to leverage gems for that.</li><li>Packwerk supports <strong>fast tests</strong> like gems if you’re using <a href="https://github.com/rails/spring">spring</a> and <a href="https://github.com/Shopify/bootsnap">bootsnap</a>.</li><li>Gems support <strong>strict boundaries</strong>. Since a package with no violations can easily be a gem, we released a tool called <a href="https://github.com/rubyatscale/package_protections">package_protections</a> to ensure that a package can remain as clean as a gem or engine.</li><li>Packwerk packages can have engine features, such as being able to have an isolated routes.rb file, when paired with stimpack.</li></ul><p>At Gusto we strongly believe gems and engines are and will continue to be a critical component of the modularization toolchain. We have also found domains with gem potential that we are perfectly happy to maintain as a package.</p><h3>Gradual Adoption</h3><p>A system never starts off as a Big Rails application — it grows into one organically. This means that the Big Rails tools must be able to be adopted gradually, since a small app might not need them.</p><blockquote>As we begin to adopt these tools, we have to remember that the technology transformation <strong>must</strong> be accompanied by a corresponding cultural change in the way teams use these tools day to day.</blockquote><p>We cannot simply drop in these new technologies and expect a transformational change to occur.</p><p>This became obvious when we first introduced packwerk. I noticed folks consistently updating the “TODO lists” packwerk provides and maintains, rather than fixing the underlying system design issues. To understand more about why this was happening, I needed to dig in.</p><p>To do this, I set up a slack notification to alert me every time a packwerk TODO list was changed. I took each alert as an opportunity to ask folks more about how they were interacting with this tool. After looking at about a thousand pull requests, we were able to identify a short list of all of the valid and not-so-valid reasons for updating the TODO lists.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*J1cbxucK-jNq257H" /></figure><p>More importantly, I frequently met with engineers over zoom to chat more about what we were trying to do and how we were trying to scale our system. Over time, a cultural shift took place. Engineers understood what we were doing and why. They began to add proactive context about their interactions with the tool or fix the system design issues in response to its output.</p><p>Over time, based onrf user feedback, we built up some tooling. We open-sourced a <a href="https://github.com/rubyatscale/packwerk-vscode">VSCode Extension</a> to interact with packwerk. We released a tool called <a href="https://github.com/rubyatscale/danger-packwerk">danger-packwerk</a> to leave inline, automated feedback on pull requests related to packwerk errors. Lastly, we released a tool called <a href="https://github.com/rubyatscale/modularization_statistics">modularization_statistics</a> to be able to track our progress over time.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*dULm0gZrY5J47ras.png" /></figure><p>We’re making progress. As for that dependency graph?</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*wWm4vZx3HaCeYf8s.png" /></figure><p>Well… we still have a lot of work to do!</p><h3>What’s Next?</h3><p>Just as Rails is the product of an engaged and passionate community, I hope we can take the same approach with Big Rails applications. At Gusto, we’re so grateful for the contributions of the individuals and companies who have helped be part of the solution. I’d love to engage more with the community on questions like:</p><ul><li>In what ways can Ruby and Rails continue to offer great tools and cultural norms that help users create well-modularized systems?</li><li>What can the different conventions of packwerk packages, gemspecs, and other packaging systems learn from each other?</li></ul><p>All of these open source gems we’ve released, along with the tools that the broader community have released, are, like us, imperfect. If you’re interested in this problem space, you can:</p><ul><li>Leave a comment on this blog post.</li><li>Create issues, start discussions, or open PRs in any repository within <a href="https://github.com/rubyatscale">https://github.com/rubyatscale</a></li><li>Join us in the Ruby/Rails Modularity Slack Server: <a href="https://join.slack.com/t/rubymod/shared_invite/zt-190i7obqq-OAS2nEmP7w3NR30kadteBw">https://rubymod.slack.com</a></li><li><a href="https://gusto.com/about/careers">Come work at Gusto</a> — we’re hiring for passionate folks to work on problems just like this and more.</li></ul><h3>Other Resources</h3><ul><li><a href="https://leanpub.com/package-based-rails-applications">“<em>Gradual Modularization for Ruby and Rails</em>” by Stephan Hagemann</a></li><li><a href="https://www.destroyallsoftware.com/talks/boundaries">“<em>Boundaries</em>” by Gary Bernhardt</a></li><li>“<em>Thinking in Systems</em>” by Donella Meadows</li><li><a href="https://drive.google.com/file/d/11uhLDCN6OxdHq8eIlgAsj8FjmfZ0keTO/view?usp=sharing">Gusto Modularization Toolchain (PDF)</a></li></ul><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=6b5ab78349ed" width="1" height="1" alt=""><hr><p><a href="https://medium.com/gusto-engineering/laying-the-cultural-and-technical-foundation-for-big-rails-6b5ab78349ed">Laying the Cultural and Technical Foundation for Big Rails</a> was originally published in <a href="https://medium.com/gusto-engineering">Gusto Engineering</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Why you should have a dedicated Technical Group Within Your Org]]></title>
            <link>https://medium.com/gusto-engineering/why-you-should-have-a-dedicated-technical-group-within-your-org-639e25616fe6?source=rss----645edd256348---4</link>
            <guid isPermaLink="false">https://medium.com/p/639e25616fe6</guid>
            <category><![CDATA[sidekiq]]></category>
            <category><![CDATA[technical-strategy]]></category>
            <category><![CDATA[collaboration]]></category>
            <category><![CDATA[teamwork]]></category>
            <category><![CDATA[empowerment]]></category>
            <dc:creator><![CDATA[Gautam Chavan]]></dc:creator>
            <pubDate>Tue, 26 Apr 2022 21:49:19 GMT</pubDate>
            <atom:updated>2022-04-26T23:44:36.901Z</atom:updated>
            <content:encoded><![CDATA[<h3>Why You Should Have a Dedicated Technical Group Within Your Org</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*Zoxmh476hJvbguK8.jpg" /></figure><h3>For the engineers on your team to feel a deep sense of ownership about your product and to continue to raise the quality bar &amp; engineering practices, you must empower them to drive the technical strategy</h3><p>Through this article, I hope to convince you to set up a technical group of ICs in your org (the size of the Benefits Engineering team at Gusto is ~20 engineers) by demonstrating some fantastic accomplishments and lessons learned in the process.</p><p>First, let’s get familiar with a few acronyms that will show up in this article a few times:</p><ul><li>IC → Individual Contributor</li><li>PE → People Empowerer (That’s right. At Gusto, we refer to Managers as People Empowerers since we don’t believe in adults needing to be managed)</li><li>TCs → Technical Consultants (These are the individuals who would be part of the technical group)</li></ul><h3>Setting the stage</h3><p>It was time for Fiscal Year planning at Gusto, and we needed to identify some of the big rocks that we wanted to tackle from a technical point of view. In addition, it needed to serve a core product need, staying true to <a href="https://martinfowler.com/">Martin Fowler</a>’s words — <a href="https://martinfowler.com/articles/bottlenecks-of-scaleups/01-tech-debt.html"><em>we are not gold plating something that isn’t valuable</em></a>. Typically, an Engineering PE or a passionate IC would volunteer to identify and drive these efforts. This technique had been successful, too (e.g., building the 2nd version of our enrollment system, migrating the complex logic of calculating payroll contributions &amp; deductions from the benefits system to the payroll system).</p><p>As you can imagine, such an effort was hard to scale since it’s highly dependent on specific individuals who are passionate about work that serves a core product need. Also, this did not allow us to have a cohesive strategy that involved all ICs being equal participants.</p><p>This time, we didn’t want to repeat the same pattern. We decided to set up a group of ICs known as Technical Consultants to help us identify some of the big rocks to tackle and build a technical strategy for the Benefits team.</p><p>We set up this group with ~5 engineers (senior or tenured engineers across three engineering teams) with the following goals in mind:</p><ul><li>TCs will play a key role in shaping how the Benefits product continues to evolve. They will play the role of mentors/coaches to engineers and essentially act as culture carriers.</li><li>TCs will continue to raise the bar on Benefits Engineering by making decisions on technical standards through close partnerships with engineers outside of Benefits Engineering.</li><li>TCs will help drive the execution of technical strategy by working with ICs and PEs on the teams that they are part of.</li></ul><h3>The Why</h3><p>Often, short-term goals cloud the necessity to take a step back and re-evaluate our needs as a whole. These include an increasing backlog of errors, on-call processes, and specific teams needing support during times of transition, to name a few.</p><p>Additionally, Engineering PEs often don’t have the same lens to look at things from and aren’t in a position to fully empathize with the challenges that ICs go through.</p><p><strong><em>Expecting every team to do the right thing results in inconsistent outcomes</em></strong>. As an example, when we started the process of modularizing parts of our system, each team approached it in similar yet different ways. The result was that the ruby gems created were inconsistent, which would make it harder for someone to onboard and navigate across these systems.</p><p>Therefore, it is imperative to enable ICs on your team to have a sense of complete ownership by taking control of your technical strategy. The Engineering PEs have a critical role in bringing the business perspective to the technical strategy.</p><h3>The What</h3><p>Our first initiative was to get our list of <a href="https://github.com/mperham/sidekiq">Sidekiq</a> Dead Jobs under control. For those not familiar, <a href="https://github.com/mperham/sidekiq">Sidekiq</a> enables background processing for your Ruby application. In the past, we’ve had some of the background processing jobs die due to different reasons (e.g., bugs, network timeouts, state change b/w the time the job was queued, etc.), and looking at these would be the responsibility of an on-call person. However, since clearing up the <a href="https://github.com/mperham/sidekiq">Sidekiq</a> morgue wasn’t top of mind for everyone, it would happen inconsistently depending on the bandwidth of the on-call individuals who had to deal with other issues.</p><p>TCs strongly believed that a dead sidekiq job meant we had failed a customer (e.g., failing to generate necessary documents to submit to carriers to ensure the customer has active health coverage when they visit a doctor). Additionally, this only added to the noise and reduced our ability to identify signals to prioritize these dead jobs to resolve quickly. With that in mind, TCs came up with <em>Sidekiq ZERO</em>, a program whose goal was for teams to increase the signal-to-noise ratio by re-evaluating jobs that would often die, analyzing the root causes, rethinking them, and making them more reliable.</p><h3>The How</h3><p>Having determined <em>Sidekiq ZERO</em> as the initiative, the TCs group drove the strategy across Benefits like any Product Manager would do across their teams. It included setting success metrics for the teams, closely working with them to ensure that we are on track, leveraging their expertise to help unblock teams, and escalating when support is needed.</p><p>Each TC drove progress towards our overall goals by working with their team and PE to develop a plan for <em>Sidekiq ZERO</em> that could be part of their weekly sprint work. Some teams decided to make an exception for a couple of the jobs (since the ROI to address the root cause was too low), just like any product-focused teams would. Other teams went above and beyond and set up <a href="https://www.datadoghq.com/">Datadog</a> alerts for a few of their key jobs to help them address them proactively.</p><p>The <em>Sidekiq ZERO</em> program changed how we treated our background processing work and enabled us to do so in a sustainable way without having it be a function of an on-call individual.</p><p>We took this a step further and treated it as any product initiative by including it in our monthly cycle check-ins. Individual teams shared their progress and accomplishments and any new information gained. These check-ins aim to provide an avenue for teams, including cross-functional partners like Operations and Finance, to share their progress with a broader audience. It also creates a way for folks to get on the same page and better understand the business.</p><h3>Added Benefits</h3><p>The TCs group also dedicated time to mentoring and coaching other engineers, which allowed individuals to get access to mentors who may not be on their immediate team.</p><p>Individuals have used office hours for jamming (aka. <a href="https://en.wikipedia.org/wiki/Mob_programming">mob programming</a>) on something together (e.g., extracting certain parts of the codebase into its <a href="https://github.com/Shopify/packwerk">pack</a>).</p><p>These office hours set an excellent stage for engineers to learn from each other and enable TCs to evaluate how teams have incorporated the technical strategy into their day-to-day work, identify what’s working and what’s not, and continue refining it.</p><p>Most importantly, this enables the entire group to feel like one unit.</p><h3>Conclusion</h3><p>It is critical to continue raising the quality bar for our product offerings. Our customers deserve it, but our moral obligation is to continue delivering more value for our customers. It has amazing second-order benefits too. Raising the quality bar makes it easier for the teams to operate the product more consistently, making onboarding and ramping for newer engineers easier and accelerating product development.</p><p>Since teams and projects are constantly changing, we must ensure that we continue to grow such efforts. Initially, the TCs had a slightly larger scope (being the owner for work that doesn’t fall on any teams, etc.), resulting in the TCs feeling burnt out. However, as we learned from this process, we were able to refine and have more clarity around expectations.</p><p>The Technical Consultants continue defining and driving ambitious technical strategies as part of Benefits Engineering. These initiatives have only increased in scope and impact over time.</p><p>Hopefully, I’ve shared a glimpse of the possibilities and some of the learnings you can incorporate.</p><h3>Hiring pitch</h3><p>Serving small businesses has been an enriching journey for many of us at Gusto. If you are interested in helping employers take care of their employees’ health &amp; financial wellness and enabling employees with access to affordable and equitable healthcare options, please do reach out.</p><p><em>Originally published at </em><a href="https://engineering.gusto.com/why-you-should-have-a-dedicated-technical-group/"><em>https://engineering.gusto.com</em></a><em> on April 26, 2022.</em></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=639e25616fe6" width="1" height="1" alt=""><hr><p><a href="https://medium.com/gusto-engineering/why-you-should-have-a-dedicated-technical-group-within-your-org-639e25616fe6">Why you should have a dedicated Technical Group Within Your Org</a> was originally published in <a href="https://medium.com/gusto-engineering">Gusto Engineering</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
    </channel>
</rss>