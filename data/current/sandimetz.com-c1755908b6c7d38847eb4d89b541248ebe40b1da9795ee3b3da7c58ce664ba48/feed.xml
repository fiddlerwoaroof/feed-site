<?xml version="1.0" encoding="UTF-8"?>
<!--Generated by Site-Server v6.0.0-361aea30b1c69f75ea479703f39b8dedd204a88b-1 (http://www.squarespace.com) on Mon, 14 Nov 2022 16:58:29 GMT
--><rss xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://www.rssboard.org/media-rss" version="2.0"><channel><title>Blog - Sandi Metz</title><link>https://sandimetz.com/blog/</link><lastBuildDate>Tue, 20 Feb 2018 17:48:06 +0000</lastBuildDate><language>en-US</language><generator>Site-Server v6.0.0-361aea30b1c69f75ea479703f39b8dedd204a88b-1 (http://www.squarespace.com)</generator><description><![CDATA[]]></description><item><title>What Does OO Afford?</title><dc:creator>Sandi Metz</dc:creator><pubDate>Wed, 21 Feb 2018 06:00:00 +0000</pubDate><link>https://sandimetz.com/blog/2018/21/what-does-oo-afford</link><guid isPermaLink="false">537c0374e4b0f52ed92942e6:53817322e4b0ac7f7a7b9c2f:5a80b06a8165f5c700a9796a</guid><description><![CDATA[Good Morning,

I've been thinking about the affordancesÂ of programming languages.

A Little Background

In my previous post, Breakin Up the Behemoth, I posited an explanation for 
why OO apps so often evolve a few, disproportionally large, unmaintainable, 
condition-filled classes. Unfortunately, that post didn't offer a cure for 
this problem; it just gave the less-than-helpful advice that you avoid that 
situation.

This post continues to explore the problem of classes that get too large. 
My hope is by that learning to recognize the imminent appearance of the 
big-class-slippery-slope you can avoid accidentally sliding down it.]]></description><content:encoded><![CDATA[<p>I've been thinking about the <em>affordances</em> of programming languages.</p>
<h2 id="a-little-background">A Little Background</h2>
<p>In my previous post, 
<a data-preserve-html-node="true" href="https://www.sandimetz.com/blog/2017/9/13/breaking-up-the-behemoth" target="_blank">Breaking Up the Behemoth</a>, I posited an explanation for why OO apps so often evolve a few, disproportionally large, unmaintainable, condition-filled classes. Unfortunately, that post didn't offer a cure for this problem; it just gave the less-than-helpful advice that you avoid that situation.</p>
<p>This post continues to explore the problem of classes that get too large. My hope is by that learning to recognize the imminent appearance of the big-class-slippery-slope, you can avoid accidentally sliding down it.</p>
<p>Most of the ideas here are my opinion. Although this post starts out by examining a broad, general idea, I promise that it <em>does</em>, eventually, directly address object-oriented programming. Read on for the general introduction, or skip forward to the OO specifics, as your inclinations dictate. </p>
<h2 id="consider-the-doorknob">Consider the Doorknob</h2>
<p>So, what are <em>affordances</em>? Merriam-Webster defines 
<a data-preserve-html-node="true" href="https://www.merriam-webster.com/dictionary/affordance" target="\_blank">affordance</a>
as <em>"the qualities or properties of an object that define its possible uses or make clear how it can or should be used."</em> Wikipedia's 
<a data-preserve-html-node="true" href="https://en.wikipedia.org/wiki/Afford_(disambiguation)" target="\_blank">affordance disambiguation page</a>
more concisely suggests <em>"a potential action enabled by an object."</em></p>
<p>The term was coined by psychologist 
<a data-preserve-html-node="true" href="https://en.wikipedia.org/wiki/James_J._Gibson" target="\_blank">James J. Gibson</a>
in his 1979 book 
<a data-preserve-html-node="true" href="https://www.amazon.com/Ecological-Approach-Visual-Perception-Psychology/dp/1848725787" target="\_blank">The Ecological Approach to Visual Perception</a>
, where he offered this definition:</p>
<p>"The affordances of the environment are what it offers the animal, what it provides or furnishes, either for good or ill. The verb <em>to afford</em> is found in the dictionary, the noun <em>affordance</em> is not. I have made it up. I mean by it something that refers to both the environment and the animal in a way that no existing term does. It implies the complementarity of the animal and the environment."<br>--Gibson (1979, p. 127) 
<sup data-preserve-html-node="true"><a data-preserve-html-node="true" href="#foot">7</a></sup>
<br data-preserve-html-node="true"><br>
(I find myself tickled by his blithe confession that he just plain "made it up". If not for the fact that it would take us on a terrible tangent, I'd pause here and make up a few words myself.)</p>
<p>Here are a few real-world examples to illustrate the meaning of <em>affordance</em>.</p>

<span data-preserve-html-node="true">
<figure data-preserve-html-node="true">
<img data-preserve-html-node="true" src="https://www.sandimetz.com/s/013-1b-2095466779_a2e7dd537a_o.jpg" alt="Round Doorknob">
<figcaption data-preserve-html-node="true">Figure <a data-preserve-html-node="true" href="#foot1">1</a></figcaption>
</figure>
</span>

<span data-preserve-html-node="true">
<figure data-preserve-html-node="true">
<img data-preserve-html-node="true" src="https://www.sandimetz.com/s/013-2-1495839731_f784414d5d_o.jpg" alt="Lever Door Handle">
<figcaption data-preserve-html-node="true">Figure <a data-preserve-html-node="true" href="#foot2">2</a></figcaption>
</figure>
</span>

<span data-preserve-html-node="true">
<figure data-preserve-html-node="true">
<img data-preserve-html-node="true" src="https://www.sandimetz.com/s/013-3-5896515979_7d48f715e7_o.jpg" alt="Lever Door Handle With 'Pull' Sign">
<figcaption data-preserve-html-node="true">Figure <a data-preserve-html-node="true" href="#foot3">3</a></figcaption>
</figure>
</span>


<p></p><p data-preserve-html-node="true"></p>
Figures 1, 2 and 3 show examples of hardware used to unlatch and open doors. The different styles suggest different usages. 
<br data-preserve-html-node="true"><p></p>
<p>The knob in Figure 1 affords grasping by hand, turning to unlatch, and pulling to open. While it clearly offers grasping, turning, and pulling, it supplies no information about whether pulling on the knob will actually open the door. Even though the knob clearly <em>can</em> be pulled, pulling on it might not give you the results you want. 
<br data-preserve-html-node="true"></p>
<p>The lever in Figure 2 differs from the knob in that it affords unlatching by pushing up or down by any means, so you can use it even if your hands are occupied or unavailable. I have levers in my house and can highly recommend them. They are way more convenient than round knobs. 
<br data-preserve-html-node="true"></p>
<p>Figure 3 is Figure 2 but with an added sign to solve the push-or-pull-to-open-the-door problem. The need for a sign suggests that the design of the hardware fails to offer a complete set of affordances. If the usage were clear from the design, there'd be no need for additional, written directions. 
<br data-preserve-html-node="true"></p>
<p>In contrast, here are three other styles of door hardware. The first thing to notice is that these options are just for opening the door, that is, they don't have any responsibility for unlatching. </p>

<span data-preserve-html-node="true">
<figure data-preserve-html-node="true">
<img data-preserve-html-node="true" src="https://www.sandimetz.com/s/013-4b-2914850564_840f29694b_b.jpg" alt="Pull Handle With 'Pull' Sign">
<figcaption data-preserve-html-node="true">Figure <a data-preserve-html-node="true" href="#foot4">4</a></figcaption>
</figure>
</span>

<span data-preserve-html-node="true">
<figure data-preserve-html-node="true">
<img data-preserve-html-node="true" src="https://www.sandimetz.com/s/013-5b-3259887286_2ab59234a0_b.jpg" alt="Pull Handle With 'Pull' Sign">
<figcaption data-preserve-html-node="true">Figure <a data-preserve-html-node="true" href="#foot5">5</a></figcaption>
</figure>
</span>

<span data-preserve-html-node="true">
<figure data-preserve-html-node="true">
<img data-preserve-html-node="true" src="https://www.sandimetz.com/s/013-6b-932401578_f845df288b_b.jpg" alt="Pull Handle With 'Pull' Sign">
<figcaption data-preserve-html-node="true">Figure <a data-preserve-html-node="true" href="#foot6">6</a></figcaption>
</figure>
</span>


<p></p><p data-preserve-html-node="true"></p>
The styles above convey all of the information you need to use them correctly. The ring in Figure 4 makes it obvious that the door swings towards you, i.e. that pulling opens the door.<p></p>
<p>The reason Figure 5 feels wrong is that it's over-specified. The handgrip suggests pulling so strongly that the sign feels a bit insulting.</p>
<p>The push plate in Figure 6 is what you'd expect to find on the <em>opposite</em> side of the doors shown in Figures 4 and 5. Plates very obviously afford pushing, and so pair naturally with things that want to be pulled.</p>
<h2 id="different-programming-languages-offer-different-affordances">Different Programming Languages Offer Different Affordances</h2>
<p>Just like varying styles of doorknob, different programming languages offer their own unique affordances. Language designers have preconceived ideas about the best way to model reality, and their creations reflect these biases. Thus, programming languages are explicitly designed to "enable" certain kinds of thinking. </p>
<p>I'm talking about something that's deeper than syntax. Languages have points-of-view: they're designed to be used in certain stylized ways. The mere fact that code compiles doesn't mean it's arranged as the language designer intended. </p>
<p>While it's possible to warp most any programming language into use by an alternate way of thinking, working at cross-purposes from your language's intentions is not the most efficient way to write code. Don't roll this rock uphill. If you don't understand your language's affordances, learn them. If your coding inclinations conflict with the designer's biases, yield. </p>
<p>And that brings me to OO, and why big classes evolve.</p>
<h2 id="the-affordances-of-oo">The Affordances of OO</h2>
<p>I believe that OO affords building applications of anthropomorphic, polymorphic, loosely-coupled, role-playing, factory-created objects that communicate by sending messages. </p>
<p>Let's break that down. :-)</p>
<p><a data-preserve-html-node="true" href="https://www.sandimetz.com/blog/2017/9/13/breaking-up-the-behemoth" target="\_blank">Anthropomorphic</a>
means "ascribing human characteristics to nonhuman things." This means that we think of our objects as having volition, desires, and agency just as if they were people. We don't write algorithms and arrange them in namespaced classes: instead we create new worlds where things, concepts, and even <em>ideas</em> are virtual beings with whom we can converse.</p>
<p><a data-preserve-html-node="true" href="https://www.merriam-webster.com/dictionary/polymorphic" target="\_blank">Polymorphic</a>
means "having many forms." Imagine that you (I'm anthorpomorphising here, so by "you" I mean "the application" or "an object in the application") have different classes that provide their own unique responses ("forms") for a common set of messages. Instances of these classes conform to the same API and so play a common "role." </p>
<p>When collaborating with an object that plays a role, you clearly have to know what messages you can send, but you don't need to know anything about what happens "over there" where the message is received. You, as the message sender, know "what" you want, and the role-playing object with whom you are collaborating is responsible for supplying one <em>specific</em> "how".</p>
<p>So, messages provide a level of indirection between what you want to do and how it actually gets done, and polymorphism lets you define alternative ways of doing things. </p>
<p>The next idea to add to your OO mindset is <em>loose-coupling</em>.</p>
<p>An example of <em>tight</em>-coupling is when you know the name of a class with whom you intend to collaborate. This knowledge causes you to <em>depend</em> on that other class name; if it changes, you must change. Even worse, if a new class arises that can play the same role as your current collaborator (i.e. it polymorphically implements that same API), you can't talk to the new one because you're tightly coupled to the original.</p>
<p>The coupling problem is exacerbated when you need to collaborate with a specific player of a role rather than with an instance of a known class. Tight-coupling to a role not only forces you to know many different class names, it also requires that you know how to select the correct one.</p>
<p>Coupling can be loosened by separating the place where objects get created from the place where they get used. For example, instead of creating your own collaborators, someone else could create them and pass them to you. This is called "dependency injection." </p>
<p>Dependency injection is not scary. Think of it as a simple technique that adds a level of indirection so that formerly connected objects can vary independently.</p>
<p>Becoming comfortable with dependency injection requires that you let go of that unseemly desire to know exactly what it is that other objects do. OO asks you to blithely trust others to correctly do their bit. It wants you to strive for ignorance to protect yourself from the consequences of distant changes to other objects.</p>
<p>Of course, in order to have a dependency to inject, someone--somewhere--has to create the right object. If creating the right object requires a conditional, this should happen in a "factory." </p>
<p>Factories? Also not scary. A factory is merely an easily accessible method that knows everything necessary to create the right object for a given situation. Factories allow you to isolate conditionals that would otherwise be duplicated in many places. </p>
<h2 id="leveraging-oo-s-affordances-to-avoid-big-classes">Leveraging OO's Affordances to Avoid Big Classes</h2>
<p>Here again is what OO affords: anthropomorphic, polymorphic, loosely-coupled, role-playing, factory-created objects that communicate by sending messages. </p>
<p>In my opinion, large, condition-laden classes reveal failures of the OO mindset. The conditionals in these large classes often switch on something that could be thought of as a type. Please note that I'm not asserting that these conditionals actually test against real class names--they often don't. Rather, I'm suggesting that the conditionals exist for a reason, and that many times the reason is a <em>concept or idea</em> that could have been modeled as a real thing within the virtual world of your app. The conditionals about which I'm concerned are those that suggest the existence of model-able abstractions, regardless of whether or not these abstractions have been officially codified into classes.</p>
<p>The OO mindset interprets the <em>bodies of the branches</em> of these "type"-switching conditionals as pleas for you to create objects that polymorphically play a common role. </p>
<p>The OO mindset understands the <em>switching logic</em> of these conditionals to be a petition for you to isolate object creation in a factory. </p>
<p>And the OO mindset regards the mere <em>presence of a type-switching conditional</em> as a heartfelt request that you replace the entire thing with a simple message sent to an injected, factory-created, role-playing object.</p>
<p>This is what OO affords. It wants you to replace your procedural monoliths with collections of small, independent, collaborative objects. The existence of a large, condition-laden class signals that the procedural code has failed you. When you see such an object, it's time to change mindsets. </p>
<p>Best,<br>Sandi</p>
<h3 id="news-99-bottles-of-oop-in-js-php-and-ruby-">News: 99 Bottles of OOP in JS, PHP, and Ruby!</h3>
<p>The 2nd Edition of <a data-preserve-html-node="true" href="https://sandimetz.com/99bottles" target="\_blank">99 Bottles of OOP</a> has been released!</p>
<p>The 2nd Edition contains 3 new chapters and is about 50% longer than the 1st. Also, because <a data-preserve-html-node="true" href="https://sandimetz.com/99bottles" target="\_blank">99 Bottles of OOP</a> is about object-oriented design in general rather than any specific language, this time around we created separate books that are technically identical, but use different programming languages for the examples.</p>
<p>99 Bottles of OOP is currently available in Ruby, JavaScript, and PHP versions, and beer and milk beverages. It's delivered in epub, kepub, mobi and pdf formats. This results in six different books and (3x2x4) 24 possible downloads; all unique, yet still the same. One purchase gives you rights to download any or all.</p>
<hr>
<p>Credits: </p>
<p><a data-preserve-html-node="true" name="foot1">1</a>
: 
<a data-preserve-html-node="true" title="Doorknob" href="https://flickr.com/photos/nooner/2095466779">"Doorknob"</a>
by 
<a data-preserve-html-node="true" href="https://flickr.com/people/nooner">photonooner</a>
is licensed under 
<a data-preserve-html-node="true" href="https://creativecommons.org/licenses/by-nc-nd/2.0/">CC BY-NC-ND</a><br><a data-preserve-html-node="true" name="foot2">2</a>
: 
<a data-preserve-html-node="true" title="Door Handle" href="https://flickr.com/photos/andybutkaj/1495839731">"Door Handle"</a>
by 
<a data-preserve-html-node="true" href="https://flickr.com/people/andybutkaj">www.trek.today</a>
is licensed under 
<a data-preserve-html-node="true" href="https://creativecommons.org/licenses/by/2.0/">CC BY</a><br><a data-preserve-html-node="true" name="foot3">3</a>
: 
<a data-preserve-html-node="true" title="pull" href="https://flickr.com/photos/brenneman/5896515979">"pull"</a>
by 
<a data-preserve-html-node="true" href="https://flickr.com/people/brenneman">various brennemans</a>
is licensed under 
<a data-preserve-html-node="true" href="https://creativecommons.org/licenses/by-sa/2.0/">CC BY-SA</a><br><a data-preserve-html-node="true" name="foot4">4</a>
: 
<a data-preserve-html-node="true" title="door push plate" href="https://flickr.com/photos/stuart_spivack/932401578">"door push plate"</a>
by 
<a data-preserve-html-node="true" href="https://flickr.com/people/stuart_spivack">stu_spivack</a>
is licensed under 
<a data-preserve-html-node="true" href="https://creativecommons.org/licenses/by-sa/2.0/">CC BY-SA</a><br><a data-preserve-html-node="true" name="foot5">5</a>
: 
<a data-preserve-html-node="true" title="pull" href="https://flickr.com/photos/themacinator/3259887286">"pull"</a>
by 
<a data-preserve-html-node="true" href="https://flickr.com/people/themacinator">greenkozi</a>
is licensed under 
<a data-preserve-html-node="true" href="https://creativecommons.org/licenses/by-nc-nd/2.0/">CC BY-NC-ND</a><br><a data-preserve-html-node="true" name="foot6">6</a>
: 
<a data-preserve-html-node="true" title="door push plate" href="https://flickr.com/photos/stuart_spivack/932401578">"door push plate"</a>
by 
<a data-preserve-html-node="true" href="https://flickr.com/people/stuart_spivack">stu_spivack</a>
is licensed under 
<a data-preserve-html-node="true" href="https://creativecommons.org/licenses/by-sa/2.0/">CC BY-SA</a><br><a data-preserve-html-node="true" name="foot7">7</a>
: J. J. Gibson (1979). 
<a data-preserve-html-node="true" href="https://www.amazon.com/Ecological-Approach-Visual-Perception-Psychology/dp/1848725787" target="\_blank">The Ecological Approach to Visual Perception</a>
. Houghton Mifflin Harcourt (HMH), Boston. </p>]]></content:encoded></item><item><title>Breaking Up the Behemoth</title><dc:creator>Sandi Metz</dc:creator><pubDate>Wed, 13 Sep 2017 11:00:00 +0000</pubDate><link>https://sandimetz.com/blog/2017/9/13/breaking-up-the-behemoth</link><guid isPermaLink="false">537c0374e4b0f52ed92942e6:53817322e4b0ac7f7a7b9c2f:59b6d763be42d622146143d3</guid><description><![CDATA[I've been thinking about how applications evolve, and what we might do if 
we're unhappy with the results. Â Three apparently unrelated ideas have been 
percolating in my head. Â In this newsletter I'll introduce each one and 
connect them together, in hopes that understanding these connections will 
help us understand our apps.]]></description><content:encoded><![CDATA[<p data-preserve-html-node="true">Good Morning,</p>

<p data-preserve-html-node="true">I've been thinking about how applications evolve, and what we might do if we're unhappy with the results.  Three apparently unrelated ideas have been percolating in my head.  In this newsletter I'll introduce each one and connect them together, in hopes that understanding these connections will help us understand our apps.</p>

<p data-preserve-html-node="true">These thoughts are very definitely my opinion, justified only by past experience.  YMMV, but it'll give you something to think about.  :-) Expect lots of pictures.  Imagine me waving my arms and drawing on the whiteboard.</p>

<p data-preserve-html-node="true">The first idea is <a data-preserve-html-node="true" href="https://martinfowler.com/" target="\_blank">Martin Fowler's</a> <a data-preserve-html-node="true" href="https://martinfowler.com/bliki/DesignStaminaHypothesis.html"> Design Stamina Hypothesis</a>.</p>

<h3 data-preserve-html-node="true">#1: Design Stamina Hypothesis</h3>

<p data-preserve-html-node="true">Fowler illustrates this idea with the following graph.</p>

<p data-preserve-html-node="true"><a data-preserve-html-node="true" href="https://martinfowler.com/bliki/DesignStaminaHypothesis.html" target="\_blank">
  <img data-preserve-html-node="true" src="https://www.sandimetz.com/s/012-designStaminaGraph.gif" alt="Design Stamina Hypothesis">
</a> <br data-preserve-html-node="true">
<strong data-preserve-html-node="true"><em data-preserve-html-node="true">Figure 1</em></strong></p>

<p data-preserve-html-node="true">The vertical axis above represents cumulative functionality.  The higher the line, the more that got done. The horizontal axis represents time passing.  The further to the right, the later in time.</p>

<p data-preserve-html-node="true">Two different lines are plotted.  The orange line illustrates how much functionality you will produce by any point in time by investing in design from day one.  The blue line illustrates the outcome if you defer serious design.  Notice that the blue line rises fastest early on, but that the orange line eventually overtakes it.  </p>

<p data-preserve-html-node="true">The Design Stamina Hypothesis suggests that early on in a project you'll get more done if you don't bother too much with design, but a point will come when you'll be better off if you invest some energy into it.</p>

<p data-preserve-html-node="true">The next idea is about the difference between procedural and object-oriented code.</p>

<h3 data-preserve-html-node="true">#2: Procedural vs Object-Oriented Code</h3>

<p data-preserve-html-node="true">The section compares procedural and OO code in terms of changeability and understandability.  The following graph explores the trade-offs between the two.</p>

<p data-preserve-html-node="true"><img data-preserve-html-node="true" src="https://www.sandimetz.com/s/012-continuum-sp.jpg" alt="Procedural to OO Continuum"> <br data-preserve-html-node="true">
<strong data-preserve-html-node="true"><em data-preserve-html-node="true">Figure 2</em></strong></p>

<p data-preserve-html-node="true">Changeability is plotted on the vertical axis above.  Code that is easier to change goes at the bottom.  Code that is harder to change, at the top.</p>

<p data-preserve-html-node="true">Understandability is represented by the horizontal axis.  Easier to understand code goes to the left, harder to understand code, to the right.</p>

<p data-preserve-html-node="true">A simple procedure is merely a list of steps.  Simple procedures are easy to understand and easy to change, and so fall into the lower left part of the graph above.  This is the most cost-efficient place to be.</p>

<p data-preserve-html-node="true">For some problems, simple, non-conditional, non-duplicated procedural code is the best solution.  What could be cheaper?  Write the code and run.</p>

<p data-preserve-html-node="true">Over time, however, the situation might change.  A new feature request might force the addition of conditional logic, or the duplication of parts of the solution in other places, leading to Figure 3 below.</p>

<p data-preserve-html-node="true"><img data-preserve-html-node="true" src="https://www.sandimetz.com/s/012-continuum-cp.jpg" alt="Procedural to OO Continuum"> <br data-preserve-html-node="true">
<strong data-preserve-html-node="true"><em data-preserve-html-node="true">Figure 3</em></strong></p>

<p data-preserve-html-node="true">Above, the cost-effective procedure has morphed into a complicated, condition-laden, duplicative morass of code that's hard to understand or change.</p>

<p data-preserve-html-node="true">Simple procedures are cheap.  Complicated procedures are expensive.  The only compliment you can pay a complicated procedure (and this is really scraping the bottom of the barrel) is to say that at least all of the #$%@! code is in one place.  However, proximity alone is not enough to justify this complexity.  There are more cost-effective ways to arrange code.</p>

<p data-preserve-html-node="true">The next graph adds object-oriented code to the mix. Notice that the OO solution is a little more costly than a simple procedure but far less costly than a complex one.</p>

<p data-preserve-html-node="true"><img data-preserve-html-node="true" src="https://www.sandimetz.com/s/012-continuum-goo.jpg" alt="Procedural to OO Continuum"> <br data-preserve-html-node="true">
<strong data-preserve-html-node="true"><em data-preserve-html-node="true">Figure 4</em></strong></p>

<p data-preserve-html-node="true">In object-oriented solutions, small, interchangeable objects collaborate by sending messages.  Messages afford seams which allow you to replace existing objects with new ones that play the same role.  Message sending makes it easy to change behavior by swapping in new parts.  </p>

<p data-preserve-html-node="true">Another consequence of message sending is that it obscures the <em data-preserve-html-node="true">details</em> of what happens as a result.  From the senders' point of view, a message represents only an intention.  The receiver of the message supplies the implementation, which is hidden from the sender.  Messages bestow effortless <em data-preserve-html-node="true">local</em> substitutability at the cost of ignorance of <em data-preserve-html-node="true">distant</em> implementation.  </p>

<p data-preserve-html-node="true">Relative to complex procedures, OO is easier to understand and change.  Relative to  <em data-preserve-html-node="true">simple</em> procedures, OO can be as easy to change, but might well be harder to understand <em data-preserve-html-node="true">as a whole</em>.</p>

<p data-preserve-html-node="true">So, OO isn't a slam-dunk, hands-down winner.  It depends on the complexity of your problem and the longevity of your application.</p>

<p data-preserve-html-node="true">Speaking of longevity, let's move on to the final idea, churn.</p>

<h3 data-preserve-html-node="true">#3: Churn and Complexity</h3>

<p data-preserve-html-node="true"><a data-preserve-html-node="true" href="https://michaelfeathers.silvrback.com/" target="_blank">Michael Feathers'</a> <a data-preserve-html-node="true" href="https://www.stickyminds.com/article/getting-empirical-about-refactoring" target="_blank">Getting Empirical about Refactoring</a> article introduces the idea of <em data-preserve-html-node="true">churn</em>.  Churn is a measure of how often a file changes.  Files that change more have higher churn.  </p>

<p data-preserve-html-node="true">Churn is interesting in isolation, but it's even more useful to consider churn alongside complexity.  Feathers' article includes the following chart, to which I've added the curved green line.</p>

<p data-preserve-html-node="true"><a data-preserve-html-node="true" href="https://www.stickyminds.com/article/getting-empirical-about-refactoring" target="_blank">
  <img data-preserve-html-node="true" src="https://www.sandimetz.com/s/012-churn-michael-feathers.jpg" alt="Churn Michael Feathers">
</a> <br data-preserve-html-node="true">
<strong data-preserve-html-node="true"><em data-preserve-html-node="true">Figure 6</em></strong></p>

<p data-preserve-html-node="true">Above, churn is on the horizontal axis.  Code complexity is on the vertical.  </p>

<p data-preserve-html-node="true">Complicated code that rarely changes appears in the upper left quadrant of this graph.  We abhor complication, but if the code never changes, it's not costing us money.  Pretend the code is a cabinet overstuffed with teetering Tupperware: just quietly press the door closed and sneak away.  Ignore code in this quadrant until it starts to churn.</p>

<p data-preserve-html-node="true">Simple code that changes a lot falls into the lower right quadrant.  If code is simple enough (think <em data-preserve-html-node="true">configuration file</em>) it will be cheap to change.  Change this code as often as necessary, as long as it remains simple.</p>

<p data-preserve-html-node="true">The lower left quadrant contains things that aren't very complicated and that don't change much, so this code is already cost-effective and can also be ignored.</p>

<p data-preserve-html-node="true">The green line curves from upper left, through lower left, and into lower right.  This illustrates the curve around which we'd like the code in our apps to cluster.  Notice that this line does <em data-preserve-html-node="true">not</em> enter the top right quadrant.</p>

<p data-preserve-html-node="true">The top right quadrant reflects complicated code that changes often.  By definition, code like this will be hard to understand and difficult to change.  We'd prefer this quadrant to be empty, so code that slithers into it should be refactored right back out of it.</p>

<p data-preserve-html-node="true">Now that we have these ideas in common, I can lean on them to explain a way in which applications go wrong.</p>

<h3 data-preserve-html-node="true">Code Evolves Towards a Predictable Kind Of Mess</h3>

<p data-preserve-html-node="true">There's a kind of code mess I see repeatedly, where'er I travel.  Courtesy of <a data-preserve-html-node="true" href="https://codeclimate.com/" target="_blank">Code Climate</a>, here are a few graphs that expose its symptoms in several projects (as of Sept 7, 2017).</p>

<p data-preserve-html-node="true"><a data-preserve-html-node="true" href="https://codeclimate.com/github/angular/angular.js/trends/churn" target="_blank">
  <img data-preserve-html-node="true" src="https://www.sandimetz.com/s/012-churn-angular-js.jpg" alt="Angular Churn Vs  quality">
</a> <br data-preserve-html-node="true">
<strong data-preserve-html-node="true"><em data-preserve-html-node="true">Figure 7</em></strong></p>

<p data-preserve-html-node="true"><a data-preserve-html-node="true" href="https://codeclimate.com/github/discourse/discourse/trends/churn" target="_blank">
  <img data-preserve-html-node="true" src="https://www.sandimetz.com/s/012-churn-discourse.jpg" alt="Discourse Churn Vs quality">
</a> <br data-preserve-html-node="true">
<strong data-preserve-html-node="true"><em data-preserve-html-node="true">Figure 8</em></strong></p>

<p data-preserve-html-node="true"><a data-preserve-html-node="true" href="https://codeclimate.com/github/gitlabhq/gitlabhq/trends/churn" target="_blank">
  <img data-preserve-html-node="true" src="https://www.sandimetz.com/s/012-churn-gitlabhq.jpg" alt="Gitlabhq Churn Vs quality">
</a> <br data-preserve-html-node="true">
<strong data-preserve-html-node="true"><em data-preserve-html-node="true">Figure 9</em></strong></p>

<p data-preserve-html-node="true">The <em data-preserve-html-node="true">Churn vs. quality</em> charts above are Code Climate's variant of Michael Feathers' <em data-preserve-html-node="true">File Churn vs. Complexity</em> idea.  Notice that on each of these charts the points cluster around a curve similar to the green line in Figure 6.  This is good.  It is commendable that in these applications most of the complex code changes little, and most changes are to simple code.</p>

<p data-preserve-html-node="true">However, each of these graphs also contains an unwanted outlier that resides in the top right quadrant.  I'm not familiar with the source code for these apps, but sight unseen I feel confident making a few predictions about the outlying classes.  I suspect that they:</p>

<ol data-preserve-html-node="true">
<li data-preserve-html-node="true">are larger than most other classes,</li>
<li data-preserve-html-node="true">are laden with conditionals, and</li>
<li data-preserve-html-node="true">represent core concepts in the domain</li>
</ol>

<p data-preserve-html-node="true"><em data-preserve-html-node="true">You can verify this, if you care to, by clicking on each graph above to open the corresponding page in Code Climate.  Once there, click on the dot of the outlier to link to the underlying code.  As I've already confessed, I don't really know these apps so what do I know...but based on name, size, complexity and churn, I can't help but believe I'm correct.  If I'm wrong, or if the code has changed by the time you look, just ignore the example and continue to trust the principle. :-)</em></p>

<p data-preserve-html-node="true">Many applications express this pattern.  Much of their code is fairly understandable and reasonably easy to change.  However, they also contain one or two large, complex, and constantly churning classes that represent extremely important ideas in their domain.  </p>

<p data-preserve-html-node="true">Everyone hates working on these outlier classes.  To touch them is to break them.  The tests don't provide safety.  And no attempted cure helps.  Despite best efforts, these classes continue to grow in size and complexity.  They're headed from bad to worse.</p>

<p data-preserve-html-node="true">How does this happen?</p>

<p data-preserve-html-node="true">We can use a combination of the first three ideas to explain the problem, and understanding the problem offers hope of preempting it.</p>

<p data-preserve-html-node="true">I posit the following:</p>

<ol data-preserve-html-node="true">
<li data-preserve-html-node="true"><p data-preserve-html-node="true">If you do design too early, you'll waste your efforts. <br data-preserve-html-node="true">
(<em data-preserve-html-node="true">Figure 1 - The orange line early in time</em>)</p></li>
<li data-preserve-html-node="true"><p data-preserve-html-node="true">If you never do design, your code will become a painful mess. <br data-preserve-html-node="true">
(<em data-preserve-html-node="true">Figure 1 - The blue line late in time</em>)</p></li>
<li data-preserve-html-node="true"><p data-preserve-html-node="true">A time will come when investing in design will save you money. <br data-preserve-html-node="true">
(<em data-preserve-html-node="true">Figure 1 - Where the lines cross</em>)</p></li>
<li data-preserve-html-node="true"><p data-preserve-html-node="true">Simple procedures require little design and are cheap to maintain. <br data-preserve-html-node="true">
(<em data-preserve-html-node="true">Figure 2, Figure 1: The blue line early</em>)</p></li>
<li data-preserve-html-node="true"><p data-preserve-html-node="true">Procedures become more complex over time, and more expensive to maintain. <br data-preserve-html-node="true">
(<em data-preserve-html-node="true">Figure 3, Figure 1: The blue line late in time</em>)</p></li>
<li data-preserve-html-node="true"><p data-preserve-html-node="true">Object-oriented code is more cost-effective than complex procedural code. <br data-preserve-html-node="true">
(<em data-preserve-html-node="true">Figure 4</em>)</p></li>
<li data-preserve-html-node="true"><p data-preserve-html-node="true">The procedures <em data-preserve-html-node="true">that are most important to your domain</em> change more than those that are incidental to your domain.  </p></li>
<li data-preserve-html-node="true"><p data-preserve-html-node="true">The procedures <em data-preserve-html-node="true">that are important to your domain</em> increase in complexity faster than other code.  </p></li>
<li data-preserve-html-node="true"><p data-preserve-html-node="true">It's difficult to be aware of the exact moment when your application crosses the design payoff line. <br data-preserve-html-node="true">
(<em data-preserve-html-node="true">Figure 1</em>)</p></li>
<li data-preserve-html-node="true"><p data-preserve-html-node="true">You become aware that you have passed the design payoff line because velocity slows and suffering increases.
(<em data-preserve-html-node="true">Figure 1 - blue line beyond the design payoff line</em>)</p></li>
<li data-preserve-html-node="true"><p data-preserve-html-node="true">The most important code will be the most out-of-control by the time you realize you've passed the design payoff line.</p></li>
<li data-preserve-html-node="true"><p data-preserve-html-node="true">Moderately complex procedures are easy to convert to OO.</p></li>
<li data-preserve-html-node="true"><p data-preserve-html-node="true">Extremely complex procedures are more difficult to convert to OO.</p></li>
<li data-preserve-html-node="true"><p data-preserve-html-node="true">Your attempts to convert moderately complicated procedures to OO generally <strong data-preserve-html-node="true">succeed</strong>.</p></li>
<li data-preserve-html-node="true"><p data-preserve-html-node="true">Your attempts to convert extremely complicated procedures to OO often <strong data-preserve-html-node="true">fail</strong>.</p></li>
</ol>

<p data-preserve-html-node="true">This is how we end up with applications where many small, efficient classes coexist alongside one costly, massive, condition-filled behemoth.  A series of small, innocent changes turned the application's most important code into a class so complex that no one could fix it.  The problem becomes visible at item 15 above, but its roots lie in item 8, where tiny bits of complexity got added, repeatedly, until the logic passed the point of no return.</p>

<p data-preserve-html-node="true">Sticking with procedures too long is just as bad as doing design too soon.  If important classes in your domain change often, get bigger every time they change, and are accumulating conditionals, stop adding to them right now. Use every new request as an opportunity to do a bit of design.  Implement the change using small, well-designed classes that collaborate with the existing object.</p>

<p data-preserve-html-node="true">A 5,000 line class exerts a gravitational pull that makes it hard to imagine creating a set of 10 line helper classes to meet a new requirement. Make new classes anyway.  The way to get the outliers back on the green line where they belong is to resist putting more code in objects that are already too large.  Make small objects, and over time, the big ones will disappear.</p>

<p data-preserve-html-node="true">Best, <br data-preserve-html-node="true">
Sandi</p>

<h3 id="news-99-bottles-of-oop-in-js-php-and-ruby-">News: 99 Bottles of OOP in JS, PHP, and Ruby!</h3>
<p>The 2nd Edition of <a data-preserve-html-node="true" href="https://sandimetz.com/99bottles" target="\_blank">99 Bottles of OOP</a> has been released!</p>
<p>The 2nd Edition contains 3 new chapters and is about 50% longer than the 1st. Also, because <a data-preserve-html-node="true" href="https://sandimetz.com/99bottles" target="\_blank">99 Bottles of OOP</a> is about object-oriented design in general rather than any specific language, this time around we created separate books that are technically identical, but use different programming languages for the examples.</p>
<p>99 Bottles of OOP is currently available in Ruby, JavaScript, and PHP versions, and beer and milk beverages. It's delivered in epub, kepub, mobi and pdf formats. This results in six different books and (3x2x4) 24 possible downloads; all unique, yet still the same. One purchase gives you rights to download any or all.</p>]]></content:encoded></item><item><title>Why We Argue: Style</title><dc:creator>Sandi Metz</dc:creator><pubDate>Tue, 18 Jul 2017 17:30:00 +0000</pubDate><link>https://sandimetz.com/blog/2017/6/1/why-we-argue-style</link><guid isPermaLink="false">537c0374e4b0f52ed92942e6:53817322e4b0ac7f7a7b9c2f:59305debe4fcb5d6a7d89018</guid><description><![CDATA[I've been thinking about why we argue about code, and how we might 
transform vehement differences of opinion into active forces for good.

My thoughts spring from a very specific context. Â Ten or twelve times a 
year I go to an arbitrary business and spend three or more days teaching a 
course in object-oriented design. Â I'm an outsider, but for a few days 
these business let me in on their secrets. Â 

Here's what I've noticed. Â In some places, folks are generally happy. 
Â Programmers get along. Â They feel as if they are all "in this together." 
Â At businesses like this I spend most of my time actually teaching 
object-oriented design.

Other places, folks are surprisingly miserable. Â ...]]></description><content:encoded><![CDATA[<p><em>This post originally appeared in my <a data-preserve-html-node="true" href="http://www.sandimetz.com/subscribe" target="_blank">Chainline Newsletter</a>.</em></p>
<hr>
<p>I've been thinking about why we argue about code, and how we might transform vehement differences of opinion into active forces for good.</p>
<p>My thoughts spring from a very specific context.  Ten or twelve times a year I go to an arbitrary business and spend three or more days teaching a course in object-oriented design.  I'm an outsider, but for a few days these business let me in on their secrets.  </p>
<p>Here's what I've noticed.  In some places, folks are generally happy.  Programmers get along.  They feel as if they are all "in this together."  At businesses like this I spend most of my time actually teaching object-oriented design.</p>
<p>Other places, folks are surprisingly miserable.  There's a lot of discord, and the programmers have devolved into competing "camps."   In these situations the course rapidly morphs away from OO Design and into wide-ranging group discussions about how to resolve deeply embedded conflicts.</p>
<p>Tolstoy famously said that "Happy families are all alike; every unhappy family is unhappy in its own way."  This is known as the <a data-preserve-html-node="true" href="https://en.wikipedia.org/wiki/Anna_Karenina_principle" target="_blank"> Anna Karenina Principle</a>, and describes situations in which success depends on meeting <em>all</em> of a number of criteria.  The only way to be happy is to succeed at every one of them.  Unhappiness, unfortunately, can be achieved by any combination of failure.  Thus, all happy businesses are similar, but unhappy ones appear unique in their misery.</p>
<p>Having now taught a fair number of classes, I've experienced various unhappy shops and am beginning to discern some common criteria for happiness.  In this newsletter I'll discuss just one on them, with more to follow in future newsletters.</p>
<p>Today I'm interested in choices of syntax, i.e whether or not your shop has agreed upon and <em>follows</em> a style guide.  If you're surprised that I'm starting with this apparently mundane issue, consider yourself lucky in your choice of workplace.  If you're shaking your head in rueful agreement about the importance of this topic, I feel your pain.</p>
<h4 id="why-have-a-style-guide-">Why Have A Style Guide?</h4>
<p>I firmly believe that all of the code that I personally have to examine should come to me in a consistent format.  Code is read many more times than it is written, which means that the ultimate cost of code is in its reading.  It therefore follows that code should be optimized for readability, which in turn dictates that an application's code should all follow the same style.  Adhering to a common style saves you money.</p>
<h4 id="what-style-is-best-">What Style Is Best?</h4>
<p>Most programmers agree with the prior paragraph, but here's where things begin to break down.  As far as <em>I'm</em> concerned, my personal formatting style is clearly the best.  However, I'm quite sure that you feel the same.  It's easy for a group of programmers to agree that all code should follow a common style, but surprisingly difficult to get them to agree on just what that common style should be.  </p>
<p>The truth is, many stylistic choices are arbitrary, and purely a matter of personal preference.  Choosing a style guide means building agreements in areas where we have strong differences of opinion about issues of little significance.  It's not <em>style</em> that matters, but <em>sameness</em> of style.</p>
<h4 id="why-can-t-teams-agree-">Why Can't Teams Agree?</h4>
<p>As I've already said, if you don't have a style guide, it's costing you money.  However, if you can't agree on a style, the money may be least of your problems.</p>
<p>I have visited businesses where failure to come to agreement on this issue tore teams apart.  The programmers had long since ceased verbal negotiations, choosing instead to employ change requests as an excuse to convert adjacent sections of code into their own preferred style.  Code regularly flipped-flopped between competing styles.  This not only made it difficult to discern actual changes in behavior, but it also infuriated the person who last touched the code the next time they looked at it.</p>
<p>These "style wars" are ostensibly about formatting code, but are actually about power.  In mild forms, the wars create tension and cost money.  In virulent forms, they poison team morale.</p>
<h4 id="don-t-i-deserve-to-have-my-own-way-">Don't I Deserve To Have My Own Way?</h4>
<p>Well, no.</p>
<p>This is really a question of <em>who gets to decide</em>, and your approach to answering it lays bare the fissures in your shop.  It's common to have three distinct lobbies, each with their own opinions about styling.</p>
<p>There's often a group of senior programmers who are convinced that they are right and that they deserve to have their own way.  These folks attempt to rule by fiat, and when fiat fails, they feel empowered to ignore group agreements and employ their own stylistic preferences.  After all, who's gonna fire them?</p>
<p>It's also common to see a group of programmers who came from another language writing Ruby in a style more suited to that other language.  These programmers make choices that help <em>them</em> understand the code, disregarding the fact that their styling choices confound everyone else.</p>
<p>Finally, there are the newbies who don't yet have firm opinions about style.  Because they are experimenting with <em>all</em> the styles, their code is characterized by inconsistency.  <a data-preserve-html-node="true" href="https://en.wikipedia.org/wiki/Bless_your_heart" target="_blank">Bless 'em</a>, they mean well, but they're confusing everyone and need an intervention.</p>
<p>I've listed only three groups, but if your business has splintered in this way you're likely contending with many more variants of style.  Once divisions form everyone goes their own way and you end up with as many styles as programmers.  In shops like this, when I ask "Can you tell who wrote a piece of code by looking at it," everyone answers "Yes."</p>
<h4 id="how-can-teams-reach-consensus-">How Can Teams Reach Consensus?</h4>
<p>The styling problem is actually twofold.  First, everyone has to agree on a guide.  Next, everyone has to follow it.</p>
<p>If you're in a shop with a history of conflict, it's best to outsource the  guide.  The community has throughly beaten the what-should-code-look-like horse; there's no reason for you to duplicate this effort.  Just search for "Ruby (or language of choice) Style Guide" and <a data-preserve-html-node="true" href="https://github.com/bbatsov/ruby-style-guide" target="_blank">choose</a> <a data-preserve-html-node="true" href="https://github.com/github/rubocop-github/blob/master/STYLEGUIDE.md" target="_blank">one</a>.  </p>
<p>Using an external guide allows you take advantage of the wisdom of the crowd while side-stepping internal squabbles.  Most guides please and disappoint in equal measure, and so require compromises from all.  Choosing an external guide means it's not personal when someone doesn't get their way.</p>
<p>It's not enough to just select a guide--once you do so everyone must follow it.  The easiest way to enforce this is to put automatic processes in place to alert folks to violations in their own code.  For Ruby, have a look at <a data-preserve-html-node="true" href="https://github.com/bbatsov/rubocop" target="_blank">RuboCop</a>, configured however works best for you.  </p>
<p>Avoid appointing a human "style cop", which just forces someone to be an increasingly ill-tempered nag.  Instead, supply programmers with the information they need to remedy their own transgressions.  By the time a pull request is submitted, mis-stylings should long since have been put right.  Pull request conversations ought to be about what code does rather than how code looks.</p>
<p>As a personal aside, I've been experimenting with <a data-preserve-html-node="true" href="http://elm-lang.org/" target="_blank">Elm</a>.  My desire to format code like intentional Elm instead of awkward Ruby led me to install an automatic Elm formatter in my editor.  I initially hated the look of the auto-reformatted code, but over the last few weeks I've transitioned from active dislike to genuine fondness.  Repeated exposure to standard Elm styling gradually taught me to prefer it, proving again that normal is what you're accustomed to, and that it's easier to
<a data-preserve-html-node="true" href="https://www.goodreads.com/work/quotes/12342524-the-power-of-positive-deviance-how-unlikely-innovators-solve-the-world" target="_blank">act your way into a new way of thinking</a> than vice versa.  </p>
<h4 id="what-about-code-that-already-exists-">What About Code That Already Exists?</h4>
<p>Ignore it.  You don't have to re-style all existing code, just do better from this day forward.  Defer updating old code until you touch it for other reasons.  </p>
<p>Following this strategy means that the code you most often work on will gradually take on a common style.  It also means that some of your existing code might <em>never</em> get updated, but if you never look at it, who cares?  </p>
<p>If you choose to re-style code that you otherwise have no need to touch, you're declaring that changing the <em>look</em> of this old code has more value to your business than delivering the next item on the backlog.  The <a data-preserve-html-node="true" href="https://en.wikipedia.org/wiki/Opportunity_cost" target="_blank">opportunity cost</a> of making a purely aesthetic change includes losing the benefit of what you could have done instead.  The rule-of-thumb is: Don't bother updating the styling of stable, existing code unless not doing so costs you money.</p>
<h4 id="what-if-i-hate-the-new-style-guide-">What If I Hate the New Style Guide?</h4>
<p>If you disagree with the style guide upon which your team agrees, you have only two honorable options.</p>
<p>First, you can obey the guide despite your aversion.  As with me in the Elm story above, this act is likely to change your thinking so that over time you come to prefer the new style.  It's possible that if you follow the guide you'll begin to like it.</p>
<p>Alternatively, you can decide you will <em>not</em> obey the style guide.  Making this decision demands that you leave your current job and find some other business whose guide matches your preferred style. Go there and follow <em>that</em> one.</p>
<p>Notice that both of these choices have you following a guide.  This part is not optional.</p>
<p>The moral of this story?  It's more important for all code to be formatted the same than it is for any one of us to get our own way.  Commit to agreeing upon and following a style guide.  And if you find that your team cannot come to an agreement, step away from <em>this</em> problem and start a discussion about power.</p>
<p>Best,<br>Sandi</p>
<h3 id="news-99-bottles-of-oop-in-js-php-and-ruby-">News: 99 Bottles of OOP in JS, PHP, and Ruby!</h3>
<p>The 2nd Edition of <a data-preserve-html-node="true" href="https://sandimetz.com/99bottles" target="\_blank">99 Bottles of OOP</a> has been released!</p>
<p>The 2nd Edition contains 3 new chapters and is about 50% longer than the 1st. Also, because <a data-preserve-html-node="true" href="https://sandimetz.com/99bottles" target="\_blank">99 Bottles of OOP</a> is about object-oriented design in general rather than any specific language, this time around we created separate books that are technically identical, but use different programming languages for the examples.</p>
<p>99 Bottles of OOP is currently available in Ruby, JavaScript, and PHP versions, and beer and milk beverages. It's delivered in epub, kepub, mobi and pdf formats. This results in six different books and (3x2x4) 24 possible downloads; all unique, yet still the same. One purchase gives you rights to download any or all.</p>]]></content:encoded></item><item><title>The Half-Life of Code</title><dc:creator>Sandi Metz</dc:creator><pubDate>Thu, 01 Jun 2017 17:33:14 +0000</pubDate><link>https://sandimetz.com/blog/2017/6/1/the-half-life-of-code</link><guid isPermaLink="false">537c0374e4b0f52ed92942e6:53817322e4b0ac7f7a7b9c2f:59301a75d2b857caa399e6e6</guid><description><![CDATA[I've been thinking about the half-life of code.

In his Software that Fits in Your HeadÂ talk, Dan North defines the 
half-life of software as (I'm paraphrasing) "the amount of time required 
for half of an application's code to change so much that it becomes 
unrecognizable."

In that talk he tells the story of working on a high quality, non-trivial 
application whose code's half-life was six weeks.

Yup. Â Six. Â Weeks.
Â ]]></description><content:encoded><![CDATA[<p><em>This post originally appeared in my <a data-preserve-html-node="true" href="http://www.sandimetz.com/subscribe" target="_blank">Chainline Newsletter</a>.</em></p>
<hr>
<p>I've been thinking about the half-life of code.</p>
<p>In his <a data-preserve-html-node="true" href="https://www.youtube.com/watch?v=4Y0tOi7QWqM&amp;feature=youtu.be&amp;t=678" target="_blank">Software that Fits in Your Head</a> talk, <a data-preserve-html-node="true" href="https://dannorth.net/" target="_blank">Dan North</a> defines the half-life of software as (I'm paraphrasing) "the amount of time required for half of an application's code to change so much that it becomes unrecognizable."</p>
<p>In that talk he tells the story of working on a high quality, non-trivial application whose code's half-life was six weeks.</p>
<p>Yup.  Six.  Weeks.</p>
<p>I saw that talk nearly a year ago and have been distracted by its implications ever since.</p>
<p>The upsides of a short code half-life are significant.  Imagine how much better your life would be if your application's code always reflected the most accurate, up-to-date understanding of the problem at hand.  Think about how much costs would go down if you never had to navigate dead code.  Consider the value of having of an application that is free of speculative additions that were thrown in to support features that will never arrive.  </p>
<p>I want these things, and am intrigued by the thought that taking half-life into consideration might help me achieve them.</p>
<p>Code is read many more times than it is written.  Writing code costs <em>something</em>, but over time the cost of <em>reading</em> is often higher.  Anyone who ever looks at a piece of code has to invest brain-power into figuring out what it does.  </p>
<p>Dead code and speculative cruft make it hard to decipher the intention of code.  It follows that you can reduce overall costs by optimizing code for reading rather than writing.  The easiest code for subsequent readers to understand would be <em>frugal</em>, i.e. it would be simple, correct, and without embellishment.</p>
<p>I suspect, however, that I'm preaching to the choir.  I suspect that you already believe everything stated in the prior paragraph.  It's not that you disagree that it would be a good thing to have frugal code, it's that the applications that you work on are so far removed from this ideal that you despair of ever reaching it.</p>
<p>In my experience, most applications are a mess.  Successful business rely on long-lived applications that endure a constant barrage of new requirements.  Changes are commonly made under urgent time pressure, which drives applications towards disorder.  As entropy increases, it becomes harder and harder to add features except by way of one more hack.  The accumulated mess leads to hacks, hacks lead to more hacks, and then you're in a loop.  Velocity gradually slows, and everyone comes to hate the application, their job, and their life.</p>
<p>If it makes you feel any better, there's a way in which having a big mess is a sign of success.  The reason your competitors don't have messes is that <em>they went out of business</em>.  You won, and your prize is an application that betrays the ravages of time.  </p>
<p>And, as if that's not alarming enough, I fear that the coding culture that led to your current success may be dooming you to future failure.  If your existing application impedes change, nothing good will come of doing more of what you've done.  If this is the state you're in, it's time to change how you write code.</p>
<p>Here's where the concept of half-life matters.  You can lower your costs by <em>reducing the half-life</em> of your <em>least stable code</em>.  </p>
<p>The parts of your applications that change the most also cost the most.  These dynamic parts are often fundamental to your business.  They are the result of lengthy, evolutionary development, and suffer from never ending churn.  You depend on them the most, yet they are hard to understand, and only getting worse.</p>
<p>Vast other swaths of your application are likely equally unpleasant, but relatively stable.  This stability essentially makes them free.  It's not ugly code that costs money--it's change.  Ugly code just exacerbates costs.</p>
<p>Time is in appallingly short supply.  The good news, however, is that you're not obligated to fix things that aren't costing you money.  The most efficient way to improve long-lived applications is to focus on the code that churns--this is where your efforts most pay off.  For maximum effect, commit to crafting solutions that are both frugal and <em>easily replaceable</em>.</p>
<p>The last item above is key.  Code that isn't easy to replace doesn't get replaced, instead it gets <em>expanded</em>.  Its conditionals get bigger.  The number of class names it knows about grows larger.  These sorts of expansions tightly couple the code you're changing to other parts of your application.  This coupling makes it difficult to swap in alternative implementations, which it turn leads to a long half-life for the code.</p>
<p>Unstable code that has a long half-life inevitably accumulates cruft.  This complicates the code, and programmers hesitate to neaten what they don't understand.  The trick to maintaining frugality over the course of many changes is to insist on code that's easily replaceable.  Achieving replaceable code necessitates developing a culture that values polymorphic objects and loosely-coupled code.  </p>
<p>You have a bargain with other programmers about how you will write code.  Your current application is this bargain made manifest.  If you're finding that the original pact has outlived its usefulness, the first step to improving your life is to start talking to one another about how you wish you were writing code.  Dan's talk, and the idea of the half-life of code, can spur this discussion.</p>
<p>Start today. :-)</p>
<p>Thanks for reading,</p>
<p>Sandi</p>
<h3 id="news-99-bottles-of-oop-in-js-php-and-ruby-">News: 99 Bottles of OOP in JS, PHP, and Ruby!</h3>
<p>The 2nd Edition of <a data-preserve-html-node="true" href="https://sandimetz.com/99bottles" target="\_blank">99 Bottles of OOP</a> has been released!</p>
<p>The 2nd Edition contains 3 new chapters and is about 50% longer than the 1st. Also, because <a data-preserve-html-node="true" href="https://sandimetz.com/99bottles" target="\_blank">99 Bottles of OOP</a> is about object-oriented design in general rather than any specific language, this time around we created separate books that are technically identical, but use different programming languages for the examples.</p>
<p>99 Bottles of OOP is currently available in Ruby, JavaScript, and PHP versions, and beer and milk beverages. It's delivered in epub, kepub, mobi and pdf formats. This results in six different books and (3x2x4) 24 possible downloads; all unique, yet still the same. One purchase gives you rights to download any or all.</p>]]></content:encoded></item><item><title>Make Everything The Same</title><dc:creator>Sandi Metz</dc:creator><pubDate>Thu, 09 Jun 2016 12:23:26 +0000</pubDate><link>https://sandimetz.com/blog/2016/6/9/make-everything-the-same</link><guid isPermaLink="false">537c0374e4b0f52ed92942e6:53817322e4b0ac7f7a7b9c2f:57595fc12b8ddefb064716e4</guid><description><![CDATA[As part of my local ruby meetup (#westendruby), I've been dabbling in katas 
and quizzes. Â Having worked several, I can't help but notice that my 
solutions are sometimes radically different from the others.

Hmmm.]]></description><content:encoded><![CDATA[<p><em>This post originally appeared in my <a data-preserve-html-node="true" href="http://www.sandimetz.com/subscribe" target="_blank">Chainline Newsletter</a>.  Due to popular request, I'm re-publishing it here on my blog.  It has been lightly edited.</em></p>
<p>As part of my local ruby meetup (#westendruby), I've been <a data-preserve-html-node="true" href="https://github.com/skmetz/play" target="_blank">dabbling</a> in katas and quizzes.  Having worked several, I can't help but notice that my solutions are sometimes radically different from the others.</p>
<p>Hmmm.</p>
<p>Having one's solutions differ from the crowd's is (and ought to be) a cause for heightened scrutiny.  Therefore, I've been pondering code, trying to understand what's driving my choices.  I have a glimmer of an idea, and thus, this newsletter.</p>
<h4 id="the-setup">The Setup</h4>
<p>The easiest way for me to explain is for <em>you</em> to first go do the Roman numerals kata.  Happily, there's a <a data-preserve-html-node="true" href="https://github.com/alxndr/exercism/blob/master/ruby/roman-numerals/roman_numerals_test.rb" target="_blank">Roman numerals test</a> on <a data-preserve-html-node="true" href="http://exercism.io/" target="_blank">exercism</a> to get you started.  The task is to convert Arabic numbers into Roman numerals, and the tests are all some form of:</p>
<pre><code>assert_equal 'I', 1.to_roman</code></pre><p>or</p>
<pre><code>assert_equal 'CMXI', 911.to_roman</code></pre><p>In case your life is such that you can't drop everything and do that exercise right now, here's a reminder of how the Roman counting system works.  There are two main ideas.  First, a few specific numbers are represented by letters of the Roman alphabet.  Next, these letters can be combined to represent other numbers.</p>
<p>Seven Roman letters are used.  The letters and their associated values are:</p>
<ul>
<li>I =    1</li>
<li>V =    5</li>
<li>X =    10</li>
<li>L =    50</li>
<li>C =    100</li>
<li>D =    500</li>
<li>M =    1,000</li>
</ul>
<p>1-10 in the Arabic numbering system is I, II, III, IV, V, VI, VII, VIII, IX, and X in Roman numerals.  As you may already know, there are two rules at work.</p>
<p>1, 2 and 3 illustrate the first rule. 1 is one I. 2 is two Is.  3 is three Is.  The rule is: for Arabic value x, select the largest Roman letter that's less than x, and generate x number of copies.  Let's call this the 'additive' rule.</p>
<p>4 follows the second rule. Instead of IIII (four I's), 4 is written as IV (one less than five). This rule is: select the first Roman letter higher than the Arabic value, and prefix it with the adjacent lower letter.  This rule is used in cases where 4 sequential occurrences of any letter would otherwise be necessary. Thus, 4 is IV instead of IIII, 9 is IX instead of VIIII, etc.  Let's call this the 'subtractive' rule.</p>
<p>Now, consider the code needed to satisfy this kata.  Given that there are two rules, it seems as if there must be two cases.  To handle the two cases, it feels like the code will need a conditional that has two branches, one for each rule.</p>
<p>The actual implementation code might be more procedural (the conversion logic could be hard-coded into the branches of the conditional) or more object-oriented (you could create an object to handle each rule and have a conditional somewhere to select the correct one), but regardless of whether you write a procedure or use OO composition, there's still a conditional.</p>
<h4 id="the-insight">The Insight</h4>
<p>I hated this.  Not only did I not want the conditional, but figuring out when to use which rule seemed like a royal PITA.  It felt like the conditional would need to do something clever to select the correct rule, and I wasn't feeling particularly quick-witted.  Thus, I found myself pondering this kata with a faint sense of dread, while the meetup loomed.</p>
<p>Regardless, I sat down to write some code, and immediately realized that although I was faintly aware that there were two conversion rules, I didn't know the full set of Roman letters and their associated Arabic values.  I then consulted the <a data-preserve-html-node="true" href="https://en.wikipedia.org/wiki/Roman_numerals" target="_blank">wikipedia page for Roman numerals</a>, where I found something which gave me a dramatically simpler view the problem.  Serious lightbulb moment.</p>
<p>It turns out that the way we think about Roman numerals today is the result of an evolutionary process.  In the beginning, they were uniformly additive. 4 was written as IIII and 9, VIIII.  As time passed, the subtractive form crept in.  4 became IV, and 9, IX.  In modern times we consistently use the shorter, subtractive form, but in Roman times it was common to see one form, or the other, or a combination thereof.</p>
<p>This means that the additive form is a completely legitimate kind of Roman numeral. (Who knew?) It can be produced in its entirety by rule 1, which is comfortingly simple to implement.  The conversion from additive to subtractive is also dead easy, and can be accomplished via a simple mapping that encodes rule 2.</p>
<p>The key insight here is that converting from Arabic to additive Roman is one idea, and converting from additive to subtractive Roman is quite another.  Solving this kata by converting Arabic numbers directly into <em>subtractive</em> Roman  skips a step, and conflates these two ideas.  It is this conflation that dooms us to the conditional.</p>
<p>Having had this realization, I wrote two simple bits of code.  One converted Arabic to additive Roman, the other additive to subtractive Roman.  Used in combination, they pass the tests.</p>
<p>I took the code to #westendruby, where someone pointed out that not only was my variant more understandable than many other implementations, but also that it could easily be extended to perform the reverse conversion.  They were absolutely right; it took just a few lines of additional code to convert from Roman numerals back into Arabic numbers.  Adding this new feature to other implementations was far more difficult.  </p>
<p>I wrote several versions of the kata. <a data-preserve-html-node="true" href="https://github.com/skmetz/play/blob/master/roman_numerals/roman_numerals_medium.rb" target="`_blank`">Here's</a> the one I ended up liking the best.</p>
<h4 id="the-upshot">The Upshot</h4>
<p>I left that meetup with a newfound respect for what it means to have a conditional.</p>
<p>Conditionals are trying to tell you something. Sometimes it is that you ought to be using composition, i.e., that you should create multiple objects that play a common role, and then select and inject one of these objects for use in place of the conditional.  Composition is the right solution when a single abstract concept has several concrete implementations.</p>
<p>However, rule 1 and rule 2 above don't represent alternative implementations of the same concept, instead they represent two entirely unrelated ideas.  The solution here is therefore not composition, but instead to create two transformations, and apply them in order.  This lets you replace one "special" case with two normal ones, and reap the following benefits:</p>
<ul>
<li>The resulting code is more straightforward.</li>
<li>The tests are more understandable.</li>
<li>The code can produce the pure additive form of Roman numerals, in addition to the subtractive one.</li>
<li>The code is easily extended to do the reverse conversion.</li>
</ul>
<p>The keystone in this arch of understanding is being comfortable with transformations that appear to do nothing.  It is entirely possible for a Roman numeral to look identical in its additive and subtractive forms.  III for example, looks the same either way.  Regardless, the additive III must be permitted to pass unhindered through the transformation to subtractive.  You can't check to see if it needs to be converted, instead you must blithely convert it.  This makes everything the same, and it is <em>sameness</em> that gets rid of the conditional.</p>
<h4 id="the-commentary">The Commentary</h4>
<p>Now, if you'll permit, I'll speculate.  I'm interested in why this solution occurred to me, but not others.  Folks at the meetup found it startling in its simplicity and utility.  Once known, it seems inevitable, but before knowing, inconceivable.  </p>
<p>What would someone have to know in order to be able to dream up this solution? How can we teach OO so that folks learn to look at similar problems and recognize the underlying concepts?  What quality in my background or style of thinking revealed them to me?  Mind you, I'm not saying that my solution is perfect, but it's certainly <em>different</em>.  Why?</p>
<p>I think there are two reasons.  First, I'm committed to simplicity.  I believe in it, and insist upon it.  I am unwilling to settle for complexity.  Simplicity is often harder then complexity, but it's worth the struggle, and everything in my experience tells me that with enough effort, it's achievable.  I have faith.</p>
<p>Next, the desire for simplicity means that I abhor special cases.  I am willing to trade CPU cycles to achieve sameness.  I'll happily perform unnecessary operations on objects that are already perfectly okay if that lets me treat them interchangeably.  Code is read many more times that it is written, and computers are fast.  This trade is a bargain that I'll take every time.</p>
<p>So:
Insist on simplicity.
Resist special cases.
Listen to conditionals.
Identify underlying concepts.
And search for the abstractions that let you treat everything the same.<br data-preserve-html-node="true"></p>
<p>Thanks for reading,</p>
<p>Sandi</p>
<h3 id="news-99-bottles-of-oop-in-js-php-and-ruby-">News: 99 Bottles of OOP in JS, PHP, and Ruby!</h3>
<p>The 2nd Edition of <a data-preserve-html-node="true" href="https://sandimetz.com/99bottles" target="\_blank">99 Bottles of OOP</a> has been released!</p>
<p>The 2nd Edition contains 3 new chapters and is about 50% longer than the 1st. Also, because <a data-preserve-html-node="true" href="https://sandimetz.com/99bottles" target="\_blank">99 Bottles of OOP</a> is about object-oriented design in general rather than any specific language, this time around we created separate books that are technically identical, but use different programming languages for the examples.</p>
<p>99 Bottles of OOP is currently available in Ruby, JavaScript, and PHP versions, and beer and milk beverages. It's delivered in epub, kepub, mobi and pdf formats. This results in six different books and (3x2x4) 24 possible downloads; all unique, yet still the same. One purchase gives you rights to download any or all.</p>]]></content:encoded></item><item><title>The Wrong Abstraction</title><dc:creator>Sandi Metz</dc:creator><pubDate>Wed, 20 Jan 2016 20:30:00 +0000</pubDate><link>https://sandimetz.com/blog/2016/1/20/the-wrong-abstraction</link><guid isPermaLink="false">537c0374e4b0f52ed92942e6:53817322e4b0ac7f7a7b9c2f:5698f9f55a5668e0742681fa</guid><description><![CDATA[I've been thinking about the consequences of the "wrong abstraction." Â My 
RailsConf 2014 "all the little things" talk included a section where I 
asserted:

> duplication is far cheaper than the wrong abstraction

And in the summary, I went on to advise:

> prefer duplication over the wrong abstraction

This small section of a much bigger talk invoked a surprisingly strong 
reaction. A few folks suggested that I had lost my mind, but many more 
expressed sentiments along the lines ofÂ ]]></description><content:encoded><![CDATA[<p>_I originally wrote the following for my <a data-preserve-html-node="true" href="http://www.sandimetz.com/subscribe" target="_blank">Chainline Newsletter</a>, but I continue to get tweets about this idea, so I'm re-publishing the article here on my blog.  This version has been lightly edited._</p>
<hr>
<p>I've been thinking about the consequences of the "wrong abstraction."  My RailsConf 2014 "<a data-preserve-html-node="true" href="https://youtu.be/8bZh5LMaSmE" target="_blank">all the little things</a>" talk included a section where <a data-preserve-html-node="true" href="https://youtu.be/8bZh5LMaSmE?t=893" target="_blank">I asserted</a>:</p>
<blockquote>
<p>duplication is far cheaper than the wrong abstraction</p>
</blockquote>
<p>And in the summary, <a data-preserve-html-node="true" href="https://youtu.be/8bZh5LMaSmE?t=2142" target="_blank">I went on to advise</a>:</p>
<blockquote>
<p>prefer duplication over the wrong abstraction</p>
</blockquote>
<p>This small section of a much bigger talk invoked a surprisingly strong reaction. A few folks suggested that I had lost my mind, but many more expressed sentiments along the lines of:</p>
<p></p><blockquote data-preserve-html-node="true" lang="en" class="twitter-tweet"><p data-preserve-html-node="true" lang="en" dir="ltr">This, a million times this! "<a data-preserve-html-node="true" href="https://twitter.com/BonzoESC">@BonzoESC</a>: "Duplication is far cheaper than the wrong abstraction" <a data-preserve-html-node="true" href="https://twitter.com/sandimetz">@sandimetz</a> <a data-preserve-html-node="true" href="https://twitter.com/rbonales">@rbonales</a> <a data-preserve-html-node="true" href="http://t.co/3qMI0waqWb">pic.twitter.com/3qMI0waqWb</a>"</p>â 41 shades of blue (@pims) <a data-preserve-html-node="true" href="https://twitter.com/pims/status/442010383725760512">March 7, 2014</a></blockquote><p></p>


<p>The strength of the reaction made me realize just how widespread and intractable the "wrong abstraction" problem is.  I started asking questions and came to see the following pattern:</p>
<ol>
<li><p>Programmer A sees duplication.</p>
</li>
<li><p>Programmer A extracts duplication and gives it a name.  </p>
<p> <em>This creates a new abstraction.  It could be a new method, or perhaps even a new class.</em>  </p>
</li>
<li><p>Programmer A replaces the duplication with the new abstraction.  </p>
<p> <em>Ah, the code is perfect.  Programmer A trots happily away.</em></p>
</li>
<li><p>Time passes.</p>
</li>
<li><p>A new requirement appears for which the current abstraction is <em>almost</em> perfect.</p>
</li>
<li><p>Programmer B gets tasked to implement this requirement.  </p>
<p> <em>Programmer B feels honor-bound to retain the existing abstraction, but since isn't exactly the same for every case, they alter the code to take a parameter, and then add logic to conditionally do the right thing based on the value of that parameter.</em></p>
<p> <em>What was once a universal abstraction now behaves differently for different cases.</em></p>
</li>
<li><p>Another new requirement arrives.<br><em>Programmer X.<br>Another additional parameter.<br>Another new conditional.<br>Loop until code becomes incomprehensible.</em></p>
</li>
<li><p>You appear in the story about here, and your life takes a dramatic turn for the worse.</p>
</li>
</ol>
<p>Existing code exerts a powerful influence.  Its very presence argues that it is both correct and necessary.  We know that code represents effort expended, and we are very motivated to preserve the value of this effort.  And, unfortunately, the sad truth is that the more complicated and incomprehensible the code, i.e. the deeper the investment in creating it, the more we feel pressure to retain it (the "<a data-preserve-html-node="true" href="https://en.wikipedia.org/wiki/Sunk_costs#Loss_aversion_and_the_sunk_cost_fallacy" target="_blank">sunk cost fallacy</a>").  It's as if our unconscious tell us "Goodness, that's so confusing, it must have taken <em>ages</em> to get right.  Surely it's really, really important.  It would be a sin to let all that effort go to waste."</p>
<p>When you appear in this story in step 8 above, this pressure may compel you to proceed forward, that is, to implement the new requirement by changing the existing code.  Attempting to do so, however, is brutal.  The code no longer represents a single, common abstraction, but has instead become a condition-laden procedure which interleaves a number of vaguely associated ideas.  It is hard to understand and easy to break.</p>
<p>If you find yourself in this situation, resist being driven by sunk costs.  When dealing with the wrong abstraction, <em>the fastest way forward is back</em>.  Do the following:</p>
<ol>
<li>Re-introduce duplication by inlining the abstracted code back into every caller.</li>
<li>Within each caller, use the parameters being passed to determine the subset of the inlined code that this specific caller executes.</li>
<li>Delete the bits that aren't needed for this particular caller.</li>
</ol>
<p>This removes both the abstraction <em>and</em> the conditionals, and reduces each caller to only the code it needs.  When you rewind decisions in this way, it's common to find that although each caller ostensibly invoked a shared abstraction, the code they were running was fairly unique.  Once you completely remove the old abstraction you can start anew, re-isolating duplication and re-extracting abstractions.</p>
<p>I've seen problems where folks were trying valiantly to move forward with the wrong abstraction, but having very little success.  Adding new features was incredibly hard, and each success further complicated the code, which made adding the next feature even harder.  When they altered their point of view from "I must preserve our investment in this code" to "This code made sense for a while, but perhaps we've learned all we can from it," and gave themselves permission to re-think their abstractions in light of current requirements, everything got easier.  Once they inlined the code, the path forward became obvious, and adding new features become faster and easier.</p>
<p>The moral of this story?  Don't get trapped by the sunk cost fallacy.  If you find yourself passing parameters and adding conditional paths through shared code, the abstraction is incorrect.  It may have been right to begin with, but that day has passed.  Once an abstraction is proved wrong the best strategy is to re-introduce duplication and let it show you what's right.  Although it occasionally makes sense to accumulate a few conditionals to gain insight into what's going on, you'll suffer less pain if you abandon the wrong abstraction sooner rather than later.  </p>
<p>When the abstraction is wrong, the fastest way forward is back.  This is not retreat, it's advance in a better direction.  Do it.  You'll improve your own life, and the lives of all who follow.</p>
<h3 id="news-99-bottles-of-oop-in-js-php-and-ruby-">News: 99 Bottles of OOP in JS, PHP, and Ruby!</h3>
<p>The 2nd Edition of <a data-preserve-html-node="true" href="https://sandimetz.com/99bottles" target="\_blank">99 Bottles of OOP</a> has been released!</p>
<p>The 2nd Edition contains 3 new chapters and is about 50% longer than the 1st. Also, because <a data-preserve-html-node="true" href="https://sandimetz.com/99bottles" target="\_blank">99 Bottles of OOP</a> is about object-oriented design in general rather than any specific language, this time around we created separate books that are technically identical, but use different programming languages for the examples.</p>
<p>99 Bottles of OOP is currently available in Ruby, JavaScript, and PHP versions, and beer and milk beverages. It's delivered in epub, kepub, mobi and pdf formats. This results in six different books and (3x2x4) 24 possible downloads; all unique, yet still the same. One purchase gives you rights to download any or all.</p>

<p><a href="https://sandimetz.com/blog/2016/1/20/the-wrong-abstraction">Permalink</a><p>]]></content:encoded></item><item><title>POODNYC 2015 Scholarships have been awarded</title><dc:creator>Sandi Metz</dc:creator><pubDate>Wed, 26 Aug 2015 12:00:00 +0000</pubDate><link>https://sandimetz.com/blog/2015/8/24/poodnyc-2015-scholarships-have-been-awarded</link><guid isPermaLink="false">537c0374e4b0f52ed92942e6:53817322e4b0ac7f7a7b9c2f:55cf3773e4b0ebe2dfee0f6b</guid><description><![CDATA[Scholarships for the Oct 19-21 Practical Object-Oriented Design Course 
(POODNYC) in New York City have been awarded! Â Winners are listed below, 
but before I introduce them I'd like to give an overview of the applicant 
pool and selection process.]]></description><content:encoded><![CDATA[<p>Scholarships for the Oct 19-21 <a data-preserve-html-node="true" href="http://www.sandimetz.com/courses/" target="\_blank">Practical Object-Oriented Design Course</a> (POODNYC) in New York City have been awarded!  Winners are listed below, but before I introduce them I'd like to give an overview of the applicant pool and selection process.</p>
<p>I'll be awarding scholarships for future public classes and hope that transparency about how this works will motivate you into talking some deserving person into applying, or into applying for your own deserving self.</p>
<h3 id="the-poodnyc-scholarship">The POODNYC Scholarship</h3>
<p>The scholarship includes a seat in POODNYC, and airfare to and lodging in NYC (all courtesy of <a data-preserve-html-node="true" href="http://hashrocket.com" target="\_blank">Hashrocket</a>, to whom I am very grateful).  As you can see, it's a full ride.  The intent was to remove every financial barrier that would prevent the recipient from attending.</p>
<h3 id="applicants">Applicants</h3>
<p>There were 24 applicants.</p>
<p>Experience Level:</p>
<ul>
<li>16 - less than 1 year of experience or currently in school / attending bootcamp</li>
<li>&nbsp;8 - 1+ years</li>
<li>&nbsp;8 - career changers</li>
</ul>
<p>Gender:</p>
<ul>
<li>19 - women</li>
<li>&nbsp;5 - men</li>
</ul>
<p>Minorities/Under Represented:</p>
<ul>
<li>13 - people of color (4 men, 9 women)</li>
<li>&nbsp;3 - women over 35</li>
</ul>
<p>Location:</p>
<ul>
<li>11 - New York</li>
<li>&nbsp;7 -  Other states</li>
<li>&nbsp;6 - International (Ecuador, England and Germany)</li>
</ul>
<h3 id="selection-criteria">Selection Criteria</h3>
<p>We (me and 2 others) knew that we wanted these scholarships to support good works and/or diversity.  The first time we gave scholarships (for the Oct 2014 POODNC course) we supplied very minimal instructions and relied on each person to argue their best case.  These instructions merely said 'Tell us why you deserve a scholarship'.  This year we added a additional field for âAmount of Programming Experienceâ; more on this below.</p>
<p>While we don't have a rigid checklist by which to evaluate applications, we definitely look favorably upon candidates who:</p>
<ol>
<li>are engaged in good works</li>
<li>have a moderate amount of programming experience</li>
<li>are demographically diverse from the community at large</li>
<li>have a clear financial need</li>
</ol>
<h4 id="good-works-">Good Works:</h4>
<p>We preferred candidates with a demonstrated track record of good works, where we define 'good work' as anything from "I spend my spare time on 'Code for America' projects" to "I volunteer as a coach at RailsBridge, RailsGirls, BlackGirlsCode".  We preferred candidates who could say "This scholarship will help me do a better job <em>at this thing I am already doing</em>" over candidates who said "This scholarship will make <em>me</em> better".</p>
<p>This year there were so many applicants giving back to the community that we gave additional weight to this criteria.</p>
<h4 id="experience-">Experience:</h4>
<p>We required some amount of real-world programming experience, 'some' being defined as 'more than a bootcamp'.  Folks with very little programming experience have successfully taken this course, but more experienced programmers get correspondingly more out of it.  The scholarships are intended as levers to support change; requiring at least 6 months (ish) of real-world programming experience moves the fulcrum and makes each scholarship have more value.  </p>
<p>There were a number of applicants who, although they were engaged in all kinds of good works, didn't yet have enough experience to qualify for a scholarship.  We regretfully removed them from consideration and urge them to reapply in the future.</p>
<h4 id="diversity-">Diversity:</h4>
<p>We believe that human diversity improves both the software we create and the community in which we work.  We were biased towards candidates who differed from the demographic norm (i.e., in age, ethnicity, gender, etc).</p>
<h4 id="financial-need-">Financial need:</h4>
<p>While last year we required folks to demostrate a clear financial need, this year a few candidates were engaged in such impressive good works that we were tempted to ignore this criteria.  As a result of this experience, we are officially softening our stance on financial need.  Although we will continue to take ability to pay into consideration, future scholarship applicants will <em>not</em> be disqualified based on ability to pay.</p>
<p>This year we did not disqualify a single candidate based on our assemement of their ability to pay.</p>
<p>As I said above, we didn't explicitly ask for financial, experience, demographic or good works information but it was easy to get.  Many applicants actually included it on their submission and simple web searches unearthed the missing bits.</p>
<h3 id="evaluation">Evaluation</h3>
<p>A 35-something woman of color who was in the midst of career transition while organizing a community meetup and hosting hack-a-thons would rank very high by the criteria above, and a 20-something Caucasian male who was employed as a junior developer, well, not so much.</p>
<p>The applicants for POODNYC were doing so much good for the community that we added âGood Worksâ to âExperience Levelâ in order to stay in the running. Applications which survived those tests went on to be evaluated based on âDiversityâ and âFinancial Needâ. We narrowed the list from 24 to five finalists (interestingly, like last year, the demographics of the five matched those of the whole), and then selected the two winners.</p>
<h3 id="the-winners-are">The Winners Are</h3>
<h4 id="charlotte-chang">Charlotte Chang</h4>
<p>Charlotte is a career changer and a recent programming convert. Upon graduating from Flatiron School, she tried freelancing only to discover that "it takes a village to raise a junior developer". She lives in Cleveland, a former industrial powerhouse which has lost 50% of its manufacturing jobs since 1954, and which had a median household income of $26,096 in 2013. Living in a community which needs to shift its focus to building technology skills led Charlotte to give back.</p>
<p>As part of her efforts to refresh the rustbelt, Charlotte is an organizer of <a data-preserve-html-node="true" href="http://www.meetup.com/ClevelandAgile/" target="\_blank">Cleveland Agile Group (CleAg)</a> and is very involved in <a data-preserve-html-node="true" href="http://www.meetup.com/Make-on-the-Lake/" target="\_blank">Make on the Lake</a>, an Internet of Things meetup. She has volunteered for <a data-preserve-html-node="true" href="http://clevelandgivecamp.org/" target="\_blank">Cleveland Give Camp</a> and <a data-preserve-html-node="true" href="http://canalwaypartners.com/towpath-trail/" target="\_blank">Canalway Partners</a>*. Charlotte will also be speaking to future technologists at <a data-preserve-html-node="true" href="https://wecancodeit.org/" target="\_blank">We Can Code It</a>.</p>
<p>Charlotte doesn't want to be just a 'developer', she wants to be a great developer, one with strong coding practices who gives back to the community and becomes a mentor for others. Charlotte currently works at <a data-preserve-html-node="true" href="http://www.leandog.com/" target="\_blank">LeanDog</a>.</p>
<p>* <em>No, she did not receive a scholarship because she volunteers for the bike path. This is pure coincidence.</em></p>
<h4 id="richard-lau">Richard Lau</h4>
<p>Richard is a combat veteran who is passionate about helping other veterans transition their career after their service is complete. He is currently building a free program to help veterans, along with their spouses and children, learn programming. Richard is also an advocate for veteran entrepreneurship.</p>
<p>He attended the Web Development Immersive at General Assemb.ly on a Veteran Scholarship. After graduating from the program he started volunteering for <a data-preserve-html-node="true" href="http://railsbridgenyc.org/" target="\_blank">RailsBridge NYC</a>. Richard plans to use the course to improve his skills so he can be a better and more knowledgable teacher. He also serves as a co-organizer of the New York VIM meetup.</p>
<p>Richard lives in New York City.</p>
<h3 id="_we-want-you_"><em>We Want You</em></h3>
<p>As you can see, a candidate who is engaged in good works and is an outlier in every demographic category would be unbeatable, but qualifying on even a subset of these criteria can win you a scholarship.  If you, or someone you know, fills the bill, I hope to see your application in the future.</p>
<p>A number of applicants were actively doing good works but did not yet have enough experience to get the most out of the course. If you're one of these folks, I urge you to re-apply in the future.  One of today's winners is just such a second time applicant, and proof that additional experience combined with persistence can pay off.</p>
<p>So there you have it ... the POODNYC scholarship winners. Please join me in extending my congratulations to Richard and Charlotte.  Our community is improved by their presence.  I'm grateful that they're here and gratified to support them along their way.</p>
<p>In closing, one more shout-out to <a data-preserve-html-node="true" href="http://hashrocket.com" target="\_blank">Hashrocket</a>.  Their continuing support of POOD course scholarships is a sign of their ongoing commitment to our community and reflects their core values. My thanks.</p>
<hr>
<p><em data-preserve-html-node="true">
<a data-preserve-html-node="true" href="http://www.sandimetz.com/subscribe" target="\_blank">Sign up</a>
  for my newsletter, which contains random thoughts that don't quite make it into blog posts.
</em></p>]]></content:encoded></item><item><title>Suspicions of nil  </title><dc:creator>Sandi Metz</dc:creator><pubDate>Tue, 23 Dec 2014 03:30:00 +0000</pubDate><link>https://sandimetz.com/blog/2014/12/19/suspicions-of-nil</link><guid isPermaLink="false">537c0374e4b0f52ed92942e6:53817322e4b0ac7f7a7b9c2f:54940debe4b0f2afdc9570d6</guid><description><![CDATA[I'm feeling suspicious of nil.

What is nil?


In a recent newsletterÂ I pondered trueÂ and false, and suggested that 
thinking of them as normal, everyday objects could expand your ideas about 
OOP.Â Today I'll continue with this theme by considering nil.

Â What _is_ nil?

A straightforward, very concrete definition might be that it's an instance 
of NilClassÂ and a specialized kind of Ruby singleton that responds to 70+ 
public/protected methods.

Let's have a look...]]></description><content:encoded><![CDATA[<p>I'm feeling suspicious of <code>nil</code>.</p>
<h3 id="what-is-nil-">What is nil?</h3>
<p>In a <a data-preserve-html-node="true" href="http://us3.campaign-archive2.com/?u=1090565ccff48ac602d0a84b4&amp;id=b6ba1acc5a" target="_blank">recent newsletter</a> I pondered <code>true</code> and <code>false</code> and suggested that thinking of them as normal, everyday objects could expand your ideas about OOP.&nbsp;&nbsp;Today I'll continue with this theme by considering <code>nil</code>.</p>
<p> What _is_ <code>nil</code>?</p>
<p>A straightforward, very concrete definition might be that it's an instance of <code>NilClass</code> and a specialized kind of Ruby singleton that responds to 70+ public/protected methods.</p>
<p>Let's have a look.</p>
<pre data-preserve-html-node="true"><code data-preserve-html-node="true" class="language-ruby">&gt; ruby -v
ruby 2.2.0preview2 (2014-11-28 trunk 48628)

&gt; pry
[1]&gt; nil.class
=&gt; NilClass
[2]&gt; nil.singleton_class
=&gt; NilClass</code></pre>

<p>In Ruby, <code>nil</code> (and also <code>true</code> and <code>false</code>) are defined in a slightly special way, such that their class and their singleton class are the same.&nbsp;&nbsp;As someone who's not all that caught up in the gory internal details, I generally ignore this.</p>
<pre data-preserve-html-node="true"><code data-preserve-html-node="true" class="language-ruby">[3]&gt; NilClass.instance_methods.count
=&gt; 73</code></pre>

<p>So, <code>nil</code> responds to 73 methods.&nbsp;&nbsp;What are they?</p>
<pre data-preserve-html-node="true"><code data-preserve-html-node="true" class="language-ruby">[4]&gt; NilClass.instance_methods.sort
=&gt; [
 :!,
 :!=,
 :!~,
 :&amp;,
 :&lt;=&gt;,
 :==,
 :===,
 :=~,
 :^,
 :__binding__,
 :__id__,
 :__send__,
 :class,
 :clone,
 :define_singleton_method,
 :display,
 :dup,
 :enum_for,
 :eql?,
 :equal?,
 :extend,
 :freeze,
 :frozen?,
 :hash,
 :inspect,
 :instance_eval,
 :instance_exec,
 :instance_of?,
 :instance_variable_defined?,
 :instance_variable_get,
 :instance_variable_set,
 :instance_variables,
 :is_a?,
 :itself,
 :kind_of?,
 :method,
 :methods,
 :nil?,
 :object_id,
 :pretty_inspect,
 :pretty_print,
 :pretty_print_cycle,
 :pretty_print_inspect,
 :pretty_print_instance_variables,
 :private_methods,
 :protected_methods,
 :pry,
 :public_method,
 :public_methods,
 :public_send,
 :rationalize,
 :remove_instance_variable,
 :respond_to?,
 :send,
 :singleton_class,
 :singleton_method,
 :singleton_methods,
 :taint,
 :tainted?,
 :tap,
 :to_a,
 :to_c,
 :to_enum,
 :to_f,
 :to_h,
 :to_i,
 :to_r,
 :to_s,
 :trust,
 :untaint,
 :untrust,
 :untrusted?,
 :|]</code></pre>

<p>Many of these methods were inherited from <code>Object</code>.&nbsp;&nbsp;Let's reduce this list to just those methods defined in <code>NilClass</code>.</p>
<pre data-preserve-html-node="true"><code data-preserve-html-node="true" class="language-ruby">[5]&gt; NilClass.instance_methods(false).count
=&gt; 14</code></pre>

<p>Okay, what are they?</p>
<pre data-preserve-html-node="true"><code data-preserve-html-node="true" class="language-ruby">[6]&gt; NilClass.instance_methods(false).sort
=&gt; [
 :&amp;,
 :^,
 :inspect,
 :nil?,
 :pretty_print_cycle,
 :rationalize,
 :to_a,
 :to_c,
 :to_f,
 :to_h,
 :to_i,
 :to_r,
 :to_s,
 :|]</code></pre>

<p>So, <code>nil</code> knows some boolean operations and it can convert itself into a few other things.  As <code>nil</code> is already defined when I start Ruby, clearly Ruby itself created this instance of <code>NilClass</code> and stored it in <code>nil</code> for my use.</p>
<h3 id="using-nil-to-mean-no-result-">Using <code>nil</code> to mean 'no result'</h3>
<p>So far this has been fairly mundane.&nbsp;&nbsp;<code>NilClass</code> is clearly a class and <code>nil</code> is the one and only instance of that class; there's no magic here.&nbsp;&nbsp;Even if you thought of <code>nil</code> as 'special' when you started this post, by now you should be quite disabused of that notion.&nbsp;&nbsp;<code>nil</code> is a regular old object that responds to its own set of messages, just like any other.</p>
<p>However, despite this apparent normalcy, we create problems for ourselves because it's so easy to treat <code>nil</code> as something other than a straightforward object.&nbsp;&nbsp;For example, it's common to use  <code>nil</code> to signal <em>absence of a result</em> to the senders of messages.&nbsp;&nbsp;As a matter of fact, one might defensibly argue that this is part of <code>nil</code>'s purpose.</p>
<p>Have a look at this class:</p>
<pre data-preserve-html-node="true" class="line-numbers"><code data-preserve-html-node="true" class="language-ruby">class Animal
  attr_reader :name

  # Obviously fake-o, but a useful
  # simplification for this example.
  def self.find(id)
    if id == ''
      nil
    else
      new(id)
    end
  end

  def initialize(name)
    @name = name
  end
end

Animal.find('pig')
=&gt; #&lt;Animal:0x007fafca029a28 @name="pig"&gt;

Animal.find('')
=&gt; nil</code></pre>

<p>Notice that <code>Animal.find</code> normally returns an instance of <code>Animal</code>, but when it receives an empty string for <code>id</code> it returns <code>nil</code>.&nbsp;&nbsp;This implementation means that if an innocent bystander gets passed a list of ids...</p>
<pre data-preserve-html-node="true"><code data-preserve-html-node="true" class="language-ruby">ids = ['pig', '', 'sheep']</code></pre>

<p>which they then use to look up <code>Animals</code>...</p>
<pre data-preserve-html-node="true"><code data-preserve-html-node="true" class="language-ruby">animals = ids.map {|id| Animal.find(id)}</code></pre>

<p>when they ask each animal for its name they encounter this problem:</p>
<pre data-preserve-html-node="true"><code data-preserve-html-node="true" class="language-ruby">animals.each {|animal| puts animal.name}
=&gt; pig
=&gt; NoMethodError: undefined method `name' for nil:NilClass</code></pre>

<p>Kaboom.</p>
<p>The proximate cause of this error is clearly that <code>nil</code> doesn't understand <code>name</code>, but what <em>really</em> happened?</p>
<p>The underlying OO problem is that <code>Animal.find</code> returns instances of two different types (<code>Animal</code> or <code>NilClass</code>) and these types conform to different API's.</p>
<p>Let me repeat that.</p>
<p>The underlying problem is that <code>Animal.find</code> returns objects which conform to different API's.</p>
<p>This has deep consequences.&nbsp;&nbsp;Senders of <code>Animal.find</code>:</p>
<ul>
<li>are forced to examine the <em>type of the result</em> in order to know how it behaves, and then </li>
<li>must write code that in effect says, "Well, if I get back <em>this</em> type of thing then <em>I'll</em> supply the proper behavior, but if I get back anything else I'll just expect whatever I got back to respond to <code>name</code>.</li>
</ul>
<p>Senders of <code>Animal.find</code> incur a deep and pervasive burden when they cannot trust returned objects to respond to a common set of messages.</p>
<p>Which leads us to...</p>
<h3 id="who-should-supply-the-correct-behavior-">Who <em>should</em> supply the correct behavior?</h3>
<p>If you plan to send <code>name</code> to whatever you get back, and you get back <code>nil</code> instead of an <code>Animal</code>, you are forced to explicitly check for <code>nil</code> and supply the correct behavior yourself.</p>
<p>There are many ways to do this and, frankly, most don't seem horrible.&nbsp;&nbsp;One very straightforward option is to send the <code>nil?</code> message to the value held in <code>animal</code> and, based on the result, choose between returning the correct response or sending the <code>name</code> message.&nbsp;&nbsp;Here's an implementation that returns the string 'no animal' when the result is <code>nil</code>:</p>
<pre data-preserve-html-node="true"><code data-preserve-html-node="true" class="language-ruby">animals.each {|animal| 
  puts animal.nil? ? 'no animal' : animal.name}
=&gt;
pig
no animal
sheep</code></pre>

<p>Alternatively, you can be less verbose and rely on <code>nil</code>'s falsy-ness.&nbsp;&nbsp;The following implementation returns an empty string when there's no animal:</p>
<pre data-preserve-html-node="true"><code data-preserve-html-node="true" class="language-ruby">animals.each {|animal| puts animal &amp;&amp; animal.name}
=&gt;
pig

sheep</code></pre>

<p>RubyOnRails mitigates the repetition in the previous example by monkey patching <code>Object</code> and <code>NilClass</code> with the <code>try</code> method.&nbsp;&nbsp;If you're using Rails (or if you were to add the <a data-preserve-html-node="true" href="https://github.com/rails/rails/blob/3b7d8351f66c7169242f38aed99f4c60f152562f/activesupport/lib/active_support/core_ext/object/try.rb#L71" target="_blank">patch</a> yourself) you can reduce the last example to:</p>
<pre data-preserve-html-node="true"><code data-preserve-html-node="true" class="language-ruby">animals.each {|animal| puts animal.try(:name)}
=&gt;
pig

sheep</code></pre>

<p>But <code>try</code>, handy as it may be, is an enabler.&nbsp;&nbsp;Using it reflexively encourages a kind of thinking that is detrimental to your understanding of objects.</p>
<p>Please understand, I'm not suggesting that you never use <code>try</code> or that there's never a good reason to return <code>nil</code>, I just want you to be conscious of the bargain you're making when you do.&nbsp;&nbsp;Workarounds like <code>try</code> make it easy to ignore the fact that you're invoking methods that <em>return untrustworthy results</em> and that your code is forcing the <em>senders of messages</em> to check the type of the return and then supply missing behavior.</p>
<p>If you send <code>Animal.find</code> from more than one place in your application and you expect to be able to send <code>name</code> to whatever you get back, you are now doomed to duplicate this missing behavior in every one of those places.&nbsp;&nbsp;No amount of making the code that supplies the missing behavior 'easy to write' addresses the underlying problem.</p>
<p>To my mind, the following variants are dang near identical and equally troublesome.&nbsp;&nbsp;If you object to the last, you should be bothered by the first.</p>
<pre data-preserve-html-node="true"><code data-preserve-html-node="true" class="language-ruby">animals.each {|animal| puts animal.try(:name)}

animals.each {|animal| 
  puts animal.nil? ? '' : animal.name}

animals.each {|animal| 
  puts animal == nil ? '' : animal.name}

animals.each {|animal| 
  puts animal.is_a?(NilClass) ? '' : animal.name}</code></pre>

<p>Each example above puts the burden of knowing how to handle two unrelated return types on senders of <code>Animal.find</code>.</p>
<p>We've come to blithely accept this when one of the two return types is <code>NilClass</code>, but I'll bet you'd complain mightily about an API that most times returned an <code>Animal</code> but, occasionally, if it couldn't find a suitable <code>Animal</code>, chose instead to return a <code>Carrot</code>.&nbsp;&nbsp;Carrots are orange and crunchy and my Guinea Pigs love them but they in no way behave like animals.&nbsp;&nbsp;A substitution of this sort has downstream consequences for everyone.</p>
<p>In flexible, forgiving, easily maintainable OO apps the objects returned from message sends conform to a common API; they behave exactly as you expect.&nbsp;&nbsp;It's one thing to return <code>nil</code> to signal 'no result' and it's quite another to return <code>nil</code> to callers who expect it to respond to messages it can't possibly understand.</p>
<p>I completely concede that returning <code>nil</code> can be handy and agree, in advance, that it's sometimes exactly right.&nbsp;&nbsp;I'm not suggesting that you never do this; I do it myself.&nbsp;&nbsp;However, even when <code>nil</code> is the right thing to return, we want to avoid forcing many places in our application to supply the same 'alternative name' behavior.</p>
<p>Something must be done.&nbsp;&nbsp;:-)</p>
<p>That thing involves the <a data-preserve-html-node="true" href="http://en.wikipedia.org/wiki/Null_Object_pattern" target="_blank">Null Object Pattern</a>, which will be the subject of my next post.</p>
<h3 id="news-99-bottles-of-oop-in-js-php-and-ruby-">News: 99 Bottles of OOP in JS, PHP, and Ruby!</h3>
<p>The 2nd Edition of <a data-preserve-html-node="true" href="https://sandimetz.com/99bottles" target="\_blank">99 Bottles of OOP</a> has been released!</p>
<p>The 2nd Edition contains 3 new chapters and is about 50% longer than the 1st. Also, because <a data-preserve-html-node="true" href="https://sandimetz.com/99bottles" target="\_blank">99 Bottles of OOP</a> is about object-oriented design in general rather than any specific language, this time around we created separate books that are technically identical, but use different programming languages for the examples.</p>
<p>99 Bottles of OOP is currently available in Ruby, JavaScript, and PHP versions, and beer and milk beverages. It's delivered in epub, kepub, mobi and pdf formats. This results in six different books and (3x2x4) 24 possible downloads; all unique, yet still the same. One purchase gives you rights to download any or all.</p>]]></content:encoded></item><item><title>POODNC Scholarships Have Been Awarded</title><dc:creator>Sandi Metz</dc:creator><pubDate>Mon, 15 Sep 2014 15:15:00 +0000</pubDate><link>https://sandimetz.com/blog/2014/9/15/scholarships-have-been-awarded</link><guid isPermaLink="false">537c0374e4b0f52ed92942e6:53817322e4b0ac7f7a7b9c2f:54160c44e4b06505bdb08836</guid><description><![CDATA[Scholarships for theÂ Oct 29-31 Practical Object-Oriented Design Course 
(POODNC)Â in Durham, NC have been awarded! Winners are listed below, but 
before I introduce them I'd like to give an overview of the applicant pool 
and Â selection process.

I'll be awarding scholarships for future public classes and hope that 
transparency about how this works will motivate you to talk some deserving 
person into applying, or to apply for your own deserving self.

The POODNC Scholarship

The scholarship includes a seat in theÂ POODNC course
Â  (courtesy of me), and airfare and lodging (courtesy of Hashrocket, to 
whom I am very grateful). As you can see, it's a full ride. The intent was 
to remove every financial barrier that would prevent the recipient from 
attending.]]></description><content:encoded><![CDATA[<p>Scholarships for the
<a data-preserve-html-node="true" href="http://www.sandimetz.com/pood-durham-2014" target="_blank">Oct 29-31 Practical Object-Oriented Design Course (POODNC)</a> in Durham, NC have been awarded!&nbsp;&nbsp;Winners are listed below, but before I introduce them I'd like to give an overview of the applicant pool and  selection process.</p>

<p>I'll be awarding scholarships for future public classes and hope that transparency about how this works will motivate you to talk some deserving person into applying, or to apply for your own deserving self.</p>

<h3 id="thepoodncscholarship">The POODNC Scholarship</h3>

<p>The scholarship includes a seat in the
<a data-preserve-html-node="true" href="http://www.sandimetz.com/pood-durham-2014" target="_blank">POODNC course</a>
  (courtesy of me), and airfare and lodging (courtesy of <a data-preserve-html-node="true" href="http://hashrocket.com" target="_blank">Hashrocket</a>, to whom I am very grateful).&nbsp;&nbsp;As you can see, it's a full ride.&nbsp;&nbsp;The intent was to remove every financial barrier that would prevent the recipient from attending.</p>

<h3 id="applicants">Applicants</h3>

<p>There were 44 applicants.</p>

<p>Experience Level:</p>

<ul>
<li>6 - currently in school / attending bootcamp</li>
<li>30 - 6+ months</li>
<li>8 - career changers</li>
</ul>

<p>Gender:</p>

<ul>
<li>28 - women</li>
<li>16 - men</li>
</ul>

<p>Minorities/Under Represented:</p>

<ul>
<li>19 - people of color (10 men, 9 women)</li>
<li>3 - women over 35</li>
</ul>

<h3 id="selectioncriteria">Selection Criteria</h3>

<p>We (me and 2 others) knew that we wanted these scholarships to support good works and/or diversity, but weren't initially sure how we'd ultimately select the winners.&nbsp;&nbsp;We decided to give very minimal application instructions and rely on each person to argue their best case.&nbsp;&nbsp;The instructions merely said 'Tell us why you deserve a scholarship'.  </p>

<p>As we evaluated the applications our priorities became clear and definite selection criteria evolved.&nbsp;&nbsp;Ultimately, we looked favorably upon candidates who:</p>

<ol>
<li>had a <em>clear</em> financial need</li>
<li>had a <em>moderate</em> amount of programming experience</li>
<li>were demographically <em>diverse</em> from the community at large</li>
<li>were <em>engaged</em> in good works</li>
</ol>

<h5 id="financialneed">Financial need:</h5>

<p>We were biased towards folks who were underemployed and away from folks who appeared to have reasonably well-paying jobs.&nbsp;&nbsp;This bias held even for folks who were attempting to change from non-programming to programming careers. <br />
<em>We removed from consideration those whom we regarded as 'able to pay'.</em></p>

<h5 id="experience">Experience:</h5>

<p>We required <em>some amount</em> of real-world programming experience, 'some' being defined as 'more than a bootcamp'.&nbsp;&nbsp;Folks with very little programming experience have successfully taken this course, but more experienced programmers get correspondingly more out of it.&nbsp;&nbsp;The scholarships are intended as levers to support change; requiring 6 months (ish) of real-world programming experience moves the fulcrum and makes each scholarship have more value. <br />
<em>We removed from consideration those who did not have the minimum amount of experience.</em></p>

<h5 id="diversity">Diversity:</h5>

<p>We believe that human diversity improves both the software we create and the community in which we work.&nbsp;&nbsp;We were biased towards candidates who differed from the demographic norm (i.e., in age, ethnicity, gender, etc). <br />
<em>This quality tied in importance with 'Good Works'.</em></p>

<h5 id="goodworks">Good Works:</h5>

<p>We preferred candidates with a demonstrated track record of good works, where we define 'good work' as anything from "I spend my spare time on 'Code for America' projects" to "I volunteer as a coach at RailsBridge, RailsGirls, BlackGirlsCode".&nbsp;&nbsp;We preferred candidates who could say "This scholarship will help me do a better job <em>at this thing I am already doing</em>" over candidates who said "This scholarship will make <em>me</em> better". <br />
<em>This quality tied in importance with 'Diversity'.</em></p>

<p><br data-preserve-html-node="true"/>
As I said, we didn't explicitly ask for financial, experience, demographic or good works information but it was easy to get.&nbsp;&nbsp;Many applicants actually included it on their submission and simple web searches unearthed the missing bits.</p>

<h3 id="evaluation">Evaluation</h3>

<p>A 40-something, Hispanic male who worked in retail, taught himself programming and had been contributing to Code For America for several years would rank very high by the criteria above, and a 20-something, Caucasian female who was currently employed as an accountant but wanted to switch to programming, well, not so much.</p>

<p>The 'Financial Need' and 'Experience Level' criteria had to be met in order to stay in the running; applications which survived those tests went on to be evaluated based on 'Good Works' and 'Diversity'.&nbsp;&nbsp;We winnowed the list from 44 applicants to nine finalists (interestingly enough, the demographics of these nine matched the demographics of the whole), and then selected the two winners.</p>

<h3 id="thewinnersare">The Winners Are</h3>

<h4 id="latoyaallen">LaToya Allen</h4>

<p>LaToya is passionate about teaching students from under-represented communities how to code. Sheâs taught Ruby, Javascript and TDD to girls from an under-represented high school and has volunteered with Girl Develop It and Chicago Women Developers to teach women and girls who, like herself, are self taught.</p>

<p>She'll use what she learns to continue teaching programming to students in after-school programs. Her goal is to help kids who have little or no hope of going to college learn skill-sets that will lift them out of poverty, giving them a life they may not be able to envision.</p>

<p>She is currently a Resident Apprentice at 8th Light in Chicago.</p>

<h4 id="omowaleoniyide">Omowale Oniyide</h4>

<p>Omowale's recent discovery of programming changed her world.&nbsp;&nbsp;She returned to school this year to pursue a degree in game development and has already submitted a physical prototype of her first game to IndieCade, the International Festival of Independent Games.</p>

<p>She's currently working with a Rails Girls team to build an in-browser REPL for the Ruby Standard Library, with the goal of making it more accessible to all (think TryRuby.org). The team recently presented at the LA Ruby Meetup where they discussed their use of mob and pair programming and they're about to speak at Rocky Mountain Ruby, where they'll demo their initial work.&nbsp;&nbsp;They hope to inspire others to join their efforts, both on this project and with Rails Girls in general.</p>

<p>Omowale is a student game developer from Los Angeles, CA, who focuses on blending play between physical and digital spaces.</p>

<h3 id="wewantyou">We Want You</h3>

<p>As you can see, a candidate who is engaged in good works <em>and</em> is an outlier in every demographic category would be unbeatable, but qualifying on even a subset of these criteria can win you a scholarship.&nbsp;&nbsp;If you, or someone you know, fills the bill, I hope to see your application in the future.</p>

<p>Meanwhile, please join with me in extending my congratulations to LaToya and Omowale.&nbsp;&nbsp;They're gonna succeed in whatever they choose and our community is improved by their presence.&nbsp;&nbsp;I'm grateful that they're here and gratified to support them along their way.</p>

<p><br data-preserve-html-node="true"/>
And finally ... you don't actually <em>need</em> to win a scholarship, you can get into the course the old-fashioned way by simply purchasing a ticket.</p>

<p><strong data-preserve-html-node="true">
<em><a data-preserve-html-node="true" href="http://www.sandimetz.com/pood-durham-2014" target="_blank">
  Join me</a> at
<a data-preserve-html-node="true" href="http://www.sandimetz.com/pood-durham-2014" target="_blank">
  POODNC</a> on Oct 29-31 in Durham, North Carolina (BBQ included).</em></p>

<p><em><a data-preserve-html-node="true" href="http://www.sandimetz.com/courses/" target="_blank">
  Schedule</a> a private course.</em></p>

<p><em><a data-preserve-html-node="true" href="http://www.sandimetz.com/subscribe" target="_blank">
  Sign up</a> for my newsletter, which contains random thoughts that never make it into blog posts.</em>
</strong></p>]]></content:encoded></item><item><title>The Shape at the Bottom of All Things</title><dc:creator>Sandi Metz</dc:creator><pubDate>Tue, 09 Sep 2014 11:00:00 +0000</pubDate><link>https://sandimetz.com/blog/2014/9/9/shape-at-the-bottom-of-all-things</link><guid isPermaLink="false">537c0374e4b0f52ed92942e6:53817322e4b0ac7f7a7b9c2f:53f9e527e4b06aa2bfc5449d</guid><description><![CDATA[I've beenÂ teachingÂ a fair amount, which means I've been revisiting my 
'class problems' regularly. When I chose the problems, I thought that I 
understood them completely (hubris, I know) but now that I've worked them 
repeatedly I'm seeing new and surprising things.

These new things have to do with the _shape_ of code. Code can be written, 
or shaped, in many ways, and I've always believed that for any given 
problem many different code shapes gave equally 'good' solutions. (I think 
of programming as an art and am willing to give artists a fair amount of 
expressive leeway.)

But I'm having a change of heart.]]></description><content:encoded><![CDATA[<p>I've been
<a data-preserve-html-node="true" href="http://www.sandimetz.com/courses/" target="_blank">teaching</a>
a fair amount, which means I've been revisiting my 'class problems' regularly.&nbsp;&nbsp;When I chose the problems, I thought that I understood them completely (hubris, I know) but now that I've worked them repeatedly I'm seeing new and surprising things.</p>
<p>These new things have to do with the <em>shape</em> of code.&nbsp;&nbsp;Code can be written, or shaped, in many ways, and I've always believed that for any given problem many different code shapes gave equally 'good' solutions.&nbsp;&nbsp;(I think of programming as an art and am willing to give artists a fair amount of expressive leeway.)</p>
<p>But I'm having a change of heart.&nbsp;&nbsp;These days it feels like all shapes are not equally 'good', that some code shapes are actually better than others.&nbsp;&nbsp;Some shapes <em>expose</em> information that others conceal.&nbsp;&nbsp;This blog post illustrates the transition I'm undergoing.</p>
<p>Example 1 below is a slightly modified version of the code <a data-preserve-html-node="true" href="#note1">[1]</a> used in my previous blog post <a data-preserve-html-node="true" href="http://www.sandimetz.com/blog/2014/05/28/betting-on-wrong" target="_blank">Getting It Right by Betting on Wrong</a> about the
<a data-preserve-html-node="true" href="http://en.wikipedia.org/wiki/Open/closed_principle" target="_blank">Open/Closed </a> principle.&nbsp;&nbsp;The <code>House</code> class contains code to produce the tale 'The House that Jack Built' <a data-preserve-html-node="true" href="#note2">[2]</a>.&nbsp;&nbsp;The <code>Controller</code> class invokes <code>House#line</code> in its <code>#play_house</code> method on line 33.&nbsp;&nbsp;Line 37 invokes the controller.&nbsp;&nbsp;The output is on line 40.</p>
<p>###Example 1: The House that Jack Built</p>
<pre id="house" data-preserve-html-node="true" class="line-numbers"><code data-preserve-html-node="true" class="language-ruby">class House
  DATA = [
    'the horse and the hound and the horn that belonged to',
    'the farmer sowing his corn that kept',
    'the rooster that crowed in the morn that woke',
    'the priest all shaven and shorn that married',
    'the man all tattered and torn that kissed',
    'the maiden all forlorn that milked',
    'the cow with the crumpled horn that tossed',
    'the dog that worried',
    'the cat that killed',
    'the rat that ate',
    'the malt that lay in',
    'the house that Jack built',
  ]

  def recite
    (1..DATA.length).map {|i| line(i)}.join("\n")
  end

  def line(number)
    "This is #{phrase(number)}.\n"
  end

  private
  def phrase(number)
    DATA.last(number).join(" ")
  end
end

class Controller
  def play_house
    House.new.line(12)
  end
end

puts "\n----\n" + Controller.new.play_house

# ----
# This is the horse and the hound and the horn that belonged to the farmer sowing his corn that kept the rooster that crowed in the morn that woke the priest all shaven and shorn that married the man all tattered and torn that kissed the maiden all forlorn that milked the cow with the crumpled horn that tossed the dog that worried the cat that killed the rat that ate the malt that lay in the house that Jack built.</code></pre>

<p>Example 1 works fine but let's imagine that requirements change.&nbsp;&nbsp;Our customer tells us that they like <code>House</code> and they want it to continue to work as is, but they'd also like a variant that randomizes the data before producing the tale.&nbsp;&nbsp;</p>
<p>Example 2 meets this new requirement.&nbsp;&nbsp;<code>House#initialize</code> now takes <code>random</code>, a boolean.&nbsp;&nbsp;If <code>random</code> is <code>false</code>, <code>House</code> behaves normally, if <code>true</code>, <code>House</code> randomizes and caches the data before producing the tale.</p>
<p>###Example 2</p>
<pre data-line="4,21" data-preserve-html-node="true" class="line-numbers"><code data-preserve-html-node="true" class="language-ruby">class House
  # ...
  def initialize(random)
    @pieces = DATA.shuffle if random
  end

  def recite
    (1..pieces.length).map {|i| line(i)}.join("\n")
  end

  def line(number)
    "This is #{phrase(number)}.\n"
  end

  private
  def phrase(number)
    pieces.last(number).join(" ")
  end

  def pieces
    @pieces ||= DATA
  end
end

class Controller
  def play_house(random = false)
    House.new(random).line(12)
  end
end

puts "\n--random? false--\n" + Controller.new.play_house(false)
puts "\n--random? true --\n" + Controller.new.play_house(true)

# --random? false--
# This is the horse and the hound and the horn that belonged to the farmer sowing his corn that kept the rooster that crowed in the morn that woke the priest all shaven and shorn that married the man all tattered and torn that kissed the maiden all forlorn that milked the cow with the crumpled horn that tossed the dog that worried the cat that killed the rat that ate the malt that lay in the house that Jack built.

# --random? true --
# This is the rat that ate the malt that lay in the priest all shaven and shorn that married the farmer sowing his corn that kept the cat that killed the house that Jack built the horse and the hound and the horn that belonged to the man all tattered and torn that kissed the cow with the crumpled horn that tossed the maiden all forlorn that milked the dog that worried the rooster that crowed in the morn that woke.</code></pre>

<p>Example 2 now contains conditionals on line 4 and 21.&nbsp;&nbsp;These conditionals collaborate to meet the 'random' requirement but the way the code is shaped makes it hard to see that these two conditionals are about the same concept.&nbsp;&nbsp;Not only are they far apart in the code but one is expressed as a trailing <code>if</code> (which checks the value of <code>random</code>) and the other as <code>||=</code> (which checks the value of <code>@pieces</code>).</p>
<p>Changing the requirements again will bring the underlying issue more sharply into focus.&nbsp;&nbsp;Our customer, when shown the output, decides they'd like a third variant.&nbsp;&nbsp;The current 'randomized' version can end in very unsatisfying ways (for example, with 'the rat that ate').&nbsp;&nbsp;Our customer would like a 'mostly random' version which randomizes all pieces except the last.&nbsp;&nbsp;This 'mostly random' version should always end with 'the house that Jack built'.</p>
<p>Example 3 shows the interesting new bits of code.&nbsp;&nbsp;</p>
<p>###Example 3</p>
<pre data-line="6,11-17" data-preserve-html-node="true" class="line-numbers"><code data-preserve-html-node="true" class="language-ruby">class House
  # ...
  attr_reader :pieces

  def initialize(order)
    @pieces = initialize_pieces(order)
  end

  # ...
  def initialize_pieces(order)
    case order
    when :random
      DATA.shuffle
    when :mostly_random
      DATA[0...-1].shuffle &lt;&lt; DATA.last
    else
      DATA
    end
  end
end

class Controller
  def play_house(choice = nil)
    House.new(choice).line(12)
  end
end

puts "\n----\n"               + Controller.new.play_house
puts "\n--:random--\n"        + Controller.new.play_house(:random)
puts "\n--:mostly_random--\n" + Controller.new.play_house(:mostly_random)

# ----
# This is the horse and the hound and the horn that belonged to the farmer sowing his corn that kept the rooster that crowed in the morn that woke the priest all shaven and shorn that married the man all tattered and torn that kissed the maiden all forlorn that milked the cow with the crumpled horn that tossed the dog that worried the cat that killed the rat that ate the malt that lay in the house that Jack built.

# --:random--
# This is the dog that worried the house that Jack built the malt that lay in the rat that ate the maiden all forlorn that milked the cat that killed the rooster that crowed in the morn that woke the horse and the hound and the horn that belonged to the man all tattered and torn that kissed the farmer sowing his corn that kept the priest all shaven and shorn that married the cow with the crumpled horn that tossed.

# --:mostly_random--
# This is the man all tattered and torn that kissed the cow with the crumpled horn that tossed the maiden all forlorn that milked the horse and the hound and the horn that belonged to the dog that worried the malt that lay in the rooster that crowed in the morn that woke the rat that ate the cat that killed the farmer sowing his corn that kept the priest all shaven and shorn that married the house that Jack built.</code></pre>

<p>Now that we have three different ordering requirements it's no longer sufficient to pass a boolean.&nbsp;&nbsp;Therefore, <code>House</code>'s initialize method takes a symbol (:random, :mostly_random or anything else) and sets the value of <code>@pieces</code> to the result of calling <code>initialize_pieces</code> on that symbol (line 6 above).&nbsp;&nbsp;<code>#initialize_pieces</code> contains a case statement (lines 11-18) that arranges the data in the correct order and returns it.</p>
<p>Example 3 does two new things.&nbsp;&nbsp;First, it adds the new 'mostly random' variant, and second, it moves <em>all</em> of the code related to the concept of 'data order' into a single <code>case</code> statement.&nbsp;&nbsp;</p>
<p>While we certainly need to do the first we could easily have gotten by without the second.&nbsp;&nbsp;We could instead have kept the existing <code>#pieces</code> method and omitted the else branch from the new case statement, like so:</p>
<pre data-preserve-html-node="true" class="line-numbers"><code data-preserve-html-node="true" class="language-ruby">def initialize_pieces(order)
    case order
    when :random
      DATA.shuffle
    when :mostly_random
      DATA[0...-1].shuffle &lt;&lt; DATA.last
    end
  end

  def pieces
    @pieces ||= DATA
  end</code></pre>

<p>This works, but the code doesn't feel natural.&nbsp;&nbsp;Once the number of variants forces us to change to a <code>case</code> statement it feels more 'right' to expect that case statement to deal with all of the ordering, including the default.&nbsp;&nbsp;The code above separates the default from the variants while Example 3 treats the default _as_ a variant. Example 3 line 17 replaces Example 2 line 21 and groups all of the code that controls the concept of 'order' in  one place.</p>
<p>The key idea here is that 'not changing the order' is a real thing, as real as 'randomizing' or 'mostly randomizing' it.&nbsp;&nbsp;It's not as if :random and :mostly_random represent one concept and 'doing nothing' represents another.&nbsp;&nbsp;There's one concept, 'order', and a number of different possibilities.&nbsp;&nbsp;One way to order something is to <em>leave its current order unchanged</em>; this is an algorithm as valid as any other.</p>
<p>Now that we're treating every order as a real thing let's do a thought exercise.&nbsp;&nbsp;Imagine that each branch of the case statement contained many lines of code, so much that you felt obliged to extract them into methods of their own.&nbsp;&nbsp;How would you name these extracted methods?</p>
<p>Example 3a illustrates one possibility.</p>
<p>###Example 3a</p>
<pre data-line="14,18,22" data-preserve-html-node="true" class="line-numbers"><code data-preserve-html-node="true" class="language-ruby">class House
  # ...
  def initialize_pieces(order)
    case order
    when :random
      random_order
    when :mostly_random
      mostly_random_order
    else
      default_order
    end
  end

  def random_order
    DATA.shuffle
  end

  def mostly_random_order
    DATA[0...-1].shuffle &lt;&lt; DATA.last
  end

  def default_order
    DATA
  end
  # ...</code></pre>

<p>These <code>xxx_order</code> methods above represent 'order' variants.&nbsp;&nbsp;Unsurprisingly, most of the method names reflect the symbols that we used in the case statement.&nbsp;&nbsp;Symbol <code>:random</code> becomes method <code>#random_order</code>, <code>:mostly_random</code> becomes <code>#mostly_random__order</code> and the else branch becomes <code>#default_order</code>.&nbsp;&nbsp;The fact that we can imagine a method named <code>#default_order</code> supports the notion that the else branch represents the same kind of thing as the other branches.&nbsp;&nbsp;Ordering something as 'unchanged' is as valid as ordering it 'random'; to insist otherwise judges some algorithms as not as 'real' than others.</p>
<p>Now that we've explicitly named the methods we can see that the names have a repeating suffix.&nbsp;&nbsp;When methods have a repeating prefix or suffix it's a sign that you have untapped objects hidden within your code.&nbsp;&nbsp;Going through the exercise of giving the branches of the case statement explicit names helps identify these missing objects.&nbsp;&nbsp;Instead of forcing <code>House</code> to know both 1) the values of <code>order</code> upon which it should switch and 2) what to do in every case, we can disperse the 'what to do' logic into other objects.&nbsp;&nbsp;</p>
<p>Example 4 creates a new class for each kind of order.</p>
<p>###Example 4</p>
<pre data-preserve-html-node="true" class="line-numbers"><code data-preserve-html-node="true" class="language-ruby">class House
  # ...
  def initialize_pieces(order)
    case order
    when :random
      Random.new.order(DATA)
    when :mostly_random
      MostlyRandom.new.order(DATA)
    else
      Default.new.order(DATA)
    end
  end
end

class Default
  def order(data)
    data
  end
end

class Random
  def order(data)
    data.shuffle
  end
end

class MostlyRandom
  def order(data)
    data[0...-1].shuffle &lt;&lt; data.last
  end
end</code></pre>

<p>Example 4 creates three new classes, each of which plays the 'orderer' role.&nbsp;&nbsp;Each 'orderer' implements #order to take a list and return it in the correct order.</p>
<p>These classes will be a delight to test. :-)</p>
<p>Example 4a slightly rearranges the case statement (and likely offends some Rubyists, but that's for another day) to make its purpose more obvious.</p>
<p>###Example 4a</p>
<pre data-line="11" data-preserve-html-node="true" class="line-numbers"><code data-preserve-html-node="true" class="language-ruby">class House
  # ...
  def initialize_pieces(order)
    case order
    when :random
      Random
    when :mostly_random
      MostlyRandom
    else
      Default
    end.new.order(DATA)
  end
    # ...
end</code></pre>

<p>If the syntax above is new to you remember that the <code>case...end</code> statement returns an object to which you can send a message.&nbsp;&nbsp;This case statement returns a class; line 11 sends <code>new.order(DATA)</code> to that class.&nbsp;&nbsp;Thus, the case statement's responsibility is to return a class that plays the role of 'orderer'; actual ordering is a separate task that happens afterwards.</p>
<p>Example 4a reveals a curious thing.&nbsp;&nbsp;<code>House</code> is initialized on the <code>order</code> symbol, which it immediately converts into a <em>different</em> object.&nbsp;&nbsp;You can think of <code>House</code> as being <em>injected</em> with a behaviorally impaired kind of 'orderer' (the symbol) which it is then forced to convert into a more robust kind of 'orderer' (an instance of <code>Random</code>, <code>MostlyRandom</code> or <code>Default</code>).&nbsp;&nbsp;In the above implementation <code>House</code> depends on (knows about) many things.&nbsp;&nbsp;It knows the names of all possible symbols, the names all of the 'orderer' classes and the mapping between the two.&nbsp;&nbsp;Many distant changes might force changes to <code>House</code>; it would be more flexible if it knew less.</p>
<p>We could spare <code>House</code> many of these dependencies if we inject the object it actually wants, and Example 5 does exactly that.&nbsp;&nbsp;Here, <code>Controller</code> has assumed responsibility for creating 'orderer's and injecting them into <code>House</code> (line 13).</p>
<p>###Example 5</p>
<pre data-line="13" data-preserve-html-node="true" class="line-numbers"><code data-preserve-html-node="true" class="language-ruby">class House
  # ...
  attr_reader :pieces

  def initialize(orderer)
    @pieces = orderer.order(DATA)
  end
  # ...
end

class Controller
  def play_house(choice = nil)
    House.new(orderer_for(choice)).line(12)
  end

  def orderer_for(choice)
    case choice
    when :random
      Random
    when :mostly_random
      MostlyRandom
    else
      Default
    end.new
  end
end</code></pre>

<p>The responsibility for converting feeble 'orderer' objects into more robust ones belongs no more in <code>Controller</code> than it did in <code>House</code>, but this new code _is_ an improvement.&nbsp;&nbsp;It's best to do these kinds of conversions at the first opportunity and at least now we're pushing the conversion back up the stack, searching for its natural home.</p>
<p>With this change <code>House</code> becomes open/closed to new 'orderers'; you can inject any object you like as long as it implements <code>#order</code>.&nbsp;&nbsp;<code>House</code> also has fewer dependencies; it can collaborate with new 'orderers' without being forced to change.</p>
<p>The <code>Controller#orderer_for</code> method, however, is <em>not</em> yet open/closed; it must change if you add new 'orderers'.&nbsp;&nbsp;If you're willing to commit to a naming convention and do a bit of metaprogramming (as in Example 6), this is easily remedied.</p>
<p>###Example 6</p>
<pre data-preserve-html-node="true" class="line-numbers"><code data-preserve-html-node="true" class="language-ruby">class Controller
  # ...
  def orderer_for(choice)
    Object.const_get(
      (choice || 'default').to_s.split('_').map(&amp;:capitalize).join
      ).new
  end
end</code></pre>

<p>As long as you follow the naming convention this code will convert any symbol to an instance of the corresponding class.</p>
<p><code>Controller</code>'s <code>#orderer_for</code> method was uncomfortable when it was merely in the wrong place but now that we've complicated the code in the name of making it open/closed it feels increasingly important to figure out where the method belongs.&nbsp;&nbsp;We have a number of things that revolve around the concept of 'order' (three classes and this factory method) and this code would be easier to understand if they all lived together.&nbsp;&nbsp;Example 7 creates an <code>Order</code> module to hold them.</p>
<p>###Example 7</p>
<pre data-preserve-html-node="true" class="line-numbers"><code data-preserve-html-node="true" class="language-ruby">module Order
  def self.new(choice)
    const_get(
      (choice || 'default').to_s.split('_').map(&amp;:capitalize).join
      ).new
  end

  class Default
    def order(data)
      data
    end
  end

  class Random
    def order(data)
      data.shuffle
    end
  end

  class MostlyRandom
    def order(data)
      data[0...-1].shuffle &lt;&lt; data.last
    end
  end
end</code></pre>

<p>Moving the factory method to the <code>Order</code> module makes it natural to change its name from <code>#orderer_for</code> (as in Example 6 line 3) to <code>#new</code> (above, line 2).&nbsp;&nbsp;The <code>#new</code> method of <code>Order</code> takes a symbol for an argument and returns the right 'orderer'.&nbsp;&nbsp;You need not care about the class of the returned object; the thing you get back responds to <code>#order</code> and that's good enough.</p>
<p>Here's a complete listing of the current code.</p>
<p>###Example: Complete</p>
<pre data-preserve-html-node="true" class="line-numbers"><code data-preserve-html-node="true" class="language-ruby">class House
  DATA = [
    'the horse and the hound and the horn that belonged to',
    'the farmer sowing his corn that kept',
    'the rooster that crowed in the morn that woke',
    'the priest all shaven and shorn that married',
    'the man all tattered and torn that kissed',
    'the maiden all forlorn that milked',
    'the cow with the crumpled horn that tossed',
    'the dog that worried',
    'the cat that killed',
    'the rat that ate',
    'the malt that lay in',
    'the house that Jack built',
  ]

  attr_reader :pieces

  def initialize(orderer)
    @pieces = orderer.order(DATA)
  end

  def recite
    (1..pieces.length).map {|i| line(i)}.join("\n")
  end

  def line(number)
    "This is #{phrase(number)}.\n"
  end

  private
  def phrase(number)
    pieces.last(number).join(" ")
  end
end

module Order
  def self.new(choice)
    const_get(
      (choice || 'default').to_s.split('_').map(&amp;:capitalize).join
      ).new
  end

  class Default
    def order(data)
      data
    end
  end

  class Random
    def order(data)
      data.shuffle
    end
  end

  class MostlyRandom
    def order(data)
      data[0...-1].shuffle &lt;&lt; data.last
    end
  end
end

class Controller
  def play_house(choice = nil)
    House.new(Order.new(choice)).line(12)
  end
end

puts "\n----\n"               + Controller.new.play_house
puts "\n--:random--\n"        + Controller.new.play_house(:random)
puts "\n--:mostly_random--\n" + Controller.new.play_house(:mostly_random)</code></pre>

<p>This refactoring is complete, and I have just one final thought before we return to the original problem of 'code shapes'.&nbsp;&nbsp;</p>
<p>I totally understand that this is a small example and that these techniques can feel like overkill for a problem of this size.&nbsp;&nbsp;Perhaps they are; I wouldn't resist if you insisted it were so.&nbsp;&nbsp;However, there <em>are</em> bigger problems for which these techniques are the perfect solution and I rely on your ability to see the larger abstraction.&nbsp;&nbsp;You can't choose whether to use these techniques <em>unless you know them</em> and it's much easier practice on a small example like this.&nbsp;&nbsp;</p>
<p>###Example 2: Reprise
And now, back to the idea that some code shapes are better than others.&nbsp;&nbsp;Here's a reminder of Example 2, the code that was written to meet the first new requirement.</p>
<pre data-line="4,21" data-preserve-html-node="true" class="line-numbers"><code data-preserve-html-node="true" class="language-ruby">class House
  # ...
  def initialize(random)
    @pieces = DATA.shuffle if random
  end

  def recite
    (1..pieces.length).map {|i| line(i)}.join("\n")
  end

  def line(number)
    "This is #{phrase(number)}.\n"
  end

  private
  def phrase(number)
    pieces.last(number).join(" ")
  end

  def pieces
    @pieces ||= DATA
  end
end</code></pre>

<p>At first glance this code seems fine but its shape hides objects that we found during the refactoring.&nbsp;&nbsp;Line 4 hides <code>Order::Random</code> and line 21, <code>Order::Default</code>.</p>
<p>We can easily expose these objects by rewriting the code in a more explicit, straightforward way.&nbsp;&nbsp;The code below replaces the <code>#pieces</code> method with an <code>else</code> branch in the <code>if</code> statement and adds an <code>attr_reader</code> for <code>@pieces</code>.</p>
<pre data-line="6-9" data-preserve-html-node="true" class="line-numbers"><code data-preserve-html-node="true" class="language-ruby">class House
  # ...
  attr_reader :pieces
  def initialize(random = false)
    @pieces =
      if random
        DATA.shuffle
      else
        DATA
      end
  end

  def recite
    (1..pieces.length).map {|i| line(i)}.join("\n")
  end

  def line(number)
    "This is #{phrase(number)}.\n"
  end

  private
  def phrase(number)
    pieces.last(number).join(" ")
  end
end</code></pre>

<p>Once the <code>if</code> statement on line 6 is written this way we can see that it uses the value of the boolean <code>random</code> to choose the algorithm to apply to <code>DATA</code>.&nbsp;&nbsp;This is a form of <a data-preserve-html-node="true" href="http://sourcemaking.com/refactoring/primitive-obsession" target="_blank">
  primitive obsession</a>.&nbsp;&nbsp;
The booleans <code>true</code> and <code>false</code> should be replaced by more robust 'orderer' objects that provide these algorithms and which are injected into <code>House</code> in their stead.</p>
<p>The arrangement of the code in the original Example 2 hides these objects, the code above reveals them.</p>
<p>###Summary</p>
<p>Code shape matters, especially when it comes to conditionals.&nbsp;&nbsp;Dividing a conditional into multiple parts and placing those parts far apart makes it hard to see underlying objects.&nbsp;&nbsp;The opposite is also true; clarity can be achieved by hunting down all the parts of a conditional and putting them back together.&nbsp;&nbsp;</p>
<p>When conditionals are shaped correctly it's easy to see and extract missing objects.&nbsp;&nbsp;Once extracted, these more robust objects can be re-injected in place of the original primitives.&nbsp;&nbsp;When <code>House</code> was injected with an 'orderer' it became both more consistent and more flexible.&nbsp;&nbsp;The likelihood that it will be forced to change went down and its ability to collaborate with objects it knows little about went up.</p>
<p>And finally, the 'default' is often just another kind of specialization.&nbsp;&nbsp;Negative space is as valid as positive; in the
<a data-preserve-html-node="true" href="http://en.wikipedia.org/wiki/Rubin_vase" target="_blank">
   Rubin Vase image
</a>
the vase and the face are equally real.&nbsp;&nbsp;Recognizing that the default case is in the same category as all the other specializations  allows you to inject an object that does the <em>right</em> thing, and objects that can be trusted to do the right thing make everything easier.
<br data-preserve-html-node="true">
<br data-preserve-html-node="true">
<br data-preserve-html-node="true">
<em>This exercise was extracted from my Practical Object-Oriented Design course, which is chock full of stuff like this.</em></p>
<p><strong data-preserve-html-node="true">
_<a data-preserve-html-node="true" href="http://www.sandimetz.com/courses/" target="_blank">
  Schedule</a> a private course._</strong></p><strong data-preserve-html-node="true">
</strong><p><strong data-preserve-html-node="true">_<a data-preserve-html-node="true" href="http://www.sandimetz.com/subscribe" target="_blank">
  Sign up</a> for my newsletter, which contains random thoughts that never make it into blog posts._
</strong>
<br data-preserve-html-node="true">
<br data-preserve-html-node="true"></p>
<p>###Notes
<a data-preserve-html-node="true" name="note1">[1]</a>
<a data-preserve-html-node="true" href="https://github.com/skmetz/ood_examples/tree/master/bottom_of_all_things/lib" target="_blank">
  This code
</a>
is on github.</p>
<p><a data-preserve-html-node="true" name="note2">[2]</a>
<a data-preserve-html-node="true" href="http://en.wikipedia.org/wiki/This_Is_the_House_That_Jack_Built" target="_blank">
  This Is the House That Jack Built
</a>
is a
<a data-preserve-html-node="true" href="http://en.wikipedia.org/wiki/Cumulative_tale" target="_blank">
  cumulative tale.
</a>
Cumulative tales are like
<a data-preserve-html-node="true" href="http://en.wikipedia.org/wiki/Cumulative_song" target="_blank">
  cumulative songs
</a>
which in turn are one wikipedia hop from
<a data-preserve-html-node="true" href="http://en.wikipedia.org/wiki/The_Complexity_of_Songs" target="_blank">
  the complexity of songs
</a>
which in link to the article on
<a data-preserve-html-node="true" href="http://en.wikipedia.org/wiki/Computational_complexity_theory" target="_blank">
  computational complexity theory</a>.
Tales and songs are great as examples because they let us practice dealing with complexity without requiring that we learn about revolving bank loans or shipping containers.&nbsp;&nbsp;They provide surprisingly complex problems within simple, well-known domains.</p>
<h3 id="news-99-bottles-of-oop-in-js-php-and-ruby-">News: 99 Bottles of OOP in JS, PHP, and Ruby!</h3>
<p>The 2nd Edition of <a data-preserve-html-node="true" href="https://sandimetz.com/99bottles" target="\_blank">99 Bottles of OOP</a> has been released!</p>
<p>The 2nd Edition contains 3 new chapters and is about 50% longer than the 1st. Also, because <a data-preserve-html-node="true" href="https://sandimetz.com/99bottles" target="\_blank">99 Bottles of OOP</a> is about object-oriented design in general rather than any specific language, this time around we created separate books that are technically identical, but use different programming languages for the examples.</p>
<p>99 Bottles of OOP is currently available in Ruby, JavaScript, and PHP versions, and beer and milk beverages. It's delivered in epub, kepub, mobi and pdf formats. This results in six different books and (3x2x4) 24 possible downloads; all unique, yet still the same. One purchase gives you rights to download any or all.</p>]]></content:encoded></item><item><title>Getting It Right By Betting On Wrong </title><dc:creator>Sandi Metz</dc:creator><pubDate>Wed, 28 May 2014 17:15:00 +0000</pubDate><link>https://sandimetz.com/blog/2014/05/28/betting-on-wrong</link><guid isPermaLink="false">537c0374e4b0f52ed92942e6:53817322e4b0ac7f7a7b9c2f:53bc84fce4b0c25bf8d28dd3</guid><description><![CDATA[Imagine driving from Denver, Colorado, to Death Valley National Park.

You get on I-70 and head west, climb the front range, cross the high peaks 
of the Rockies, descend Coloradoâs western slope into Grand Junction and 
then make your way across the Utah dessert to Fishlake National Forest, 
which, if itâs springtime, is likely on fire. Here you collide with I-15 
and turn left to head south.

In the deepest dark of night, eleven hours into your drive and two short of 
your destination, the long smear of the Milky Way Galaxy fades behind the 
neon lights of Las Vegas. Against your better judgement you stop and wander 
into a casino. They immediately recognize you as a programmer and force you 
to choose one of two sides in a permanent bet.

The bet is whether the code you wrote in the last month is ârightâ or 
âwrongâ. The casino defines ârightâ as âWill not change for any reason 
within the next 6 monthsâ. Youâll win if you bet on ârightâ and your code 
doesnât change, or if you bet on âwrongâ and it does.]]></description><content:encoded><![CDATA[<p class="">Imagine driving from Denver, Colorado, to Death Valley National Park.</p><p class="">You get on I-70 and head west, climb the front range, cross the high peaks of the Rockies, descend Coloradoâs western slope into Grand Junction and then make your way across the Utah dessert to Fishlake National Forest, which, if itâs springtime, is likely on fire. Here you collide with I-15 and turn left to head south.</p><p class="">In the deepest dark of night, eleven hours into your drive and two short of your destination, the long smear of the Milky Way Galaxy fades behind the neon lights of Las Vegas. Against your better judgement you stop and wander into a casino. They immediately recognize you as a programmer and force you to choose one of two sides in a permanent bet.</p><p class="">The bet is whether the code you wrote in the last month is ârightâ or âwrongâ. The casino defines ârightâ as âWill not change for any reason within the next 6 monthsâ. Youâll win if you bet on ârightâ and your code doesnât change, or if you bet on âwrongâ and it does.</p><p class="">The tricky part is thisâyou only get to choose once. You have to decide, right now, before you leave the casino, whether to bet all of your future income on each monthâs code being ârightâ or âwrongâ. Once you chose, when you win the bet in a future month the casino will double your money, and when you lose, theyâll take your paycheck.</p><p class="">So, how do you bet, âright or âwrongâ?</p><p class="">While you ponder this, letâs have a look at some code.</p>


<h3 id="example1straightforwardimplementation">Example 1: Straightforward implementation</h3>
<pre class="line-numbers"><code class="language-ruby">class House
  def recite
    (1..pieces.length).map {|i| line(i)}.join("\n")
  end

  def line(number)
    "This is %s.\n" % pieces.last(number).join(' ')
  end

  private

  def pieces
    [
      'the horse and the hound and the horn that belonged to',
      'the farmer sowing his corn that kept',
      'the rooster that crowed in the morn that woke',
      'the priest all shaven and shorn that married',
      'the man all tattered and torn that kissed',
      'the maiden all forlorn that milked',
      'the cow with the crumpled horn that tossed',
      'the dog that worried',
      'the cat that killed',
      'the rat that ate',
      'the malt that lay in',
      'the house that Jack built',
    ]
  end
end</code></pre><p>This code produces the nursery rhyme âThe House that Jack Builtâ. Letâs allow this simple example to stand proxy for a real world application.</p>

<p>What kinds of things might change?</p>

<ol>
<li>The recite method might change. For example, the reciters might decide that they sometimes want two newlines after each line.</li>
<li>The hardcoded <code>âThis isâ</code> string that starts each line might change. Perhaps some reciters feel more confident than others and wish to start lines with <code>âThis definitely isâ</code>.</li>
<li>The strings in pieces might change. Maybe the dog annoys the cat in addition to worrying it.</li>
</ol>

<p>Any of these things <em>might</em> happen and you could add code, right now, to handle each possibility.</p>

<p>Perhaps you believe that some reciters will be more certain than others. Example 2 changes the code to support both the current and the anticipated requirement. It accepts a parameter (line 4) thatâs used in an if statement (line 15) to determine how each line should start.</p>

<h3 id="example2varyingline_start">Example 2: Varying line_start</h3>
<pre class="line-numbers"><code class="language-ruby">class House
  attr_reader :definite

  def initialize(definite=false)
    @definite = definite
  end

  # ..

  def line(number)
    "#{line_start} %s.\n" % pieces.last(number).join(' ')
  end

  def line_start
    definite ? "This definitely is" : "This is"
  end
  
  # ..
end</code></pre><p>Now <code>House.new.recite</code> displays the original rhyme and <code>House.new(true).recite</code> the new one.</p>

<p>Example 3 shows an alternative that accomplishes the same thing another way. It avoids the if statement that was added in Example 2 by injecting the words that start each line, using a default (line 4) in order to continue to meet the current requirement.</p>

<h3 id="example3injectingline_start">Example 3: Injecting line_start</h3>
<pre class="line-numbers"><code class="language-ruby">class House
  attr_reader :line_start

  def initialize(line_start="This is")
    @line_start = line_start
  end

  # ...

  def line(number)
    "#{line_start} %s.\n" % pieces.last(number).join(' ')
  end

# ...
end</code></pre>

<p class="">Example 4 contains the complete listing using the code from Example 3.</p>


<h3 id="example4injectingline_startcompletelisting">Example 4: Injecting line_start (complete listing)</h3>
<pre class="line-numbers"><code class="language-ruby">class House
  attr_reader :line_start

  def initialize(line_start="This is")
    @line_start = line_start
  end

  def recite
    (1..pieces.length).map {|i| line(i)}.join("\n")
  end

  def line(number)
    "#{line_start} %s.\n" % pieces.last(number).join(' ')
  end

  private

  def pieces
    [
      'the horse and the hound and the horn that belonged to',
      'the farmer sowing his corn that kept',
      'the rooster that crowed in the morn that woke',
      'the priest all shaven and shorn that married',
      'the man all tattered and torn that kissed',
      'the maiden all forlorn that milked',
      'the cow with the crumpled horn that tossed',
      'the dog that worried',
      'the cat that killed',
      'the rat that ate',
      'the malt that lay in',
      'the house that Jack built',
    ]
  end
end</code></pre><p>Here <code>House.new.recite</code> again displays the original rhyme and <code>House.new("This definitely is").recite</code> the new one.</p>


<p class="">Notice that this code is a little more abstract than the original. This increase in abstraction makes it easier to change (as long as the change is the one you anticipated!) but slightly harder to understand.</p><p class="">Code is read many more times than it is written. Abstractions add changeability but increase cognitive load. The ones that are actually needed save money, those that arenât increase costs every time anyone looks at the code.</p><p class="">Anticipatory complexity rarely pays off. Unless your <a href="http://en.wikipedia.org/wiki/Magic_8-Ball">Magic 8-Ball</a> is far better than mine you should avoid the guessing business. Guessing right half of the time means guessing <em>wrong</em> the other half, and the code for wrong guesses confuses everyone who follows. The barrier to introducing a speculative abstraction is very high.</p><p class="">This is where the Open/Closed Principle (OCP) comes in handy. OCP is one of the core object-oriented design principles. It provides both the âOâ in âSOLIDâ and guidance about when to create an abstraction.</p><p class="">Open/Closed is short for the phrase âOpen for extension but closed for modificationâ, and this phrase, in turn, means that you should arrange things so that you can add new behavior to an application without changing its existing code.</p><p class="">If you find this idea incomprehensible, youâre not alone; this sounds quite impossible. However, suspend disbelief for a moment and start by imagining a world in which your applications <em>are</em> open/closed, where you can add new behavior without changing the code you have.</p><p class="">In this open/closed world two very powerful things are true:</p><ul data-rte-list="default"><li><p class="">Itâs difficult to accidentally break existing code, and</p></li><li><p class="">the tests you have always run green.</p></li></ul><p class="">This is programming nirvana. Open/Closed is clearly good; the problem isnât that itâs wrong, itâs that itâs not obvious how to achieve it. We want our code to be open/closed to the <em>next</em> requirement but we cannot know what that requirement will be.</p><p class="">Are we doomed to guess? No.</p><p class="">Open/Closed requires that you write code that is open to the next change but it says nothing about <em>when</em> to do so. It doesnât require that you guess the future, instead it tells you to write the simplest conceivable code today and then to <em>remove your hands from the keyboard and wait</em>. Future change requests will tell you exactly how you should have arranged the code you have.</p><p class="">When new requests arrive, youâll rearrange existing code so that you can extend it with new behavior. Itâs a two step process, first you refactor existing code to a more felicitous arrangement and then you write new code to implement the change. Kent Beck <a href="https://twitter.com/KentBeck/status/250733358307500032">says it best</a> (but Iâll paraphrase anyway): âMake the change easy â¦ then make the easy change.â</p><p class="">In the absence of an explicit requirement to the contrary, Example 1 is a pleasingly simple way to arrange this code. Once youâre asked to sometimes start sentences with âThis isâ and other times with âThis definitely isâ, youâre forced to make a change.</p><p class="">Example 2 is <em>not</em> open/closed to this change. Line 15 interleaves the new code with the old, adding âThis definitely isâ into the existing mix, which stands a chance of breaking existing code and tests.</p><p class="">Example 3 / 4, in contrast, <em>is</em> open/closed. All of the code is needed by the existing requirement (no new behavior has been added) and rearranging this code to be open/closed to the new requirement was accomplished without changing the existing test. It can now be extended to meet the new requirement by simply passing in a new string. Itâs open for extension and closed to modification.</p><p class="">The morals of this story are:</p><p class="">First, you donât need to guess the futureâsit back and wait; it will eventually arrive. Change requests are inevitably for something you did not anticipate.<br>Guesses serve only to muddy the cognition waters during the course of their insufficient lives.</p><p class="">Next, when a new request does arrive, make the change in two steps. Refactor existing code to be open to the new requirement and then âmake the easy changeâ.</p><p class="">Finally, write simple code. It will likely be no more ârightâ than your guesses but certainly will be easier to change when you figure out what you should have done.</p><p class="">This brings us full circle and solves your quandary in Vegas. Requirements are fleeting. Even code that is absolutely necessary today is likely to change in the future, and the odds of your <em>guesses</em> surviving the test of time are even longer.</p><p class="">The smart money bets on wrong.</p>


<h3 id="news-99-bottles-of-oop-in-js-php-and-ruby-">News: 99 Bottles of OOP in JS, PHP, and Ruby!</h3>
<p>The 2nd Edition of <a data-preserve-html-node="true" href="https://sandimetz.com/99bottles" target="\_blank">99 Bottles of OOP</a> has been released!</p>
<p>The 2nd Edition contains 3 new chapters and is about 50% longer than the 1st. Also, because <a data-preserve-html-node="true" href="https://sandimetz.com/99bottles" target="\_blank">99 Bottles of OOP</a> is about object-oriented design in general rather than any specific language, this time around we created separate books that are technically identical, but use different programming languages for the examples.</p>
<p>99 Bottles of OOP is currently available in Ruby, JavaScript, and PHP versions, and beer and milk beverages. It's delivered in epub, kepub, mobi and pdf formats. This results in six different books and (3x2x4) 24 possible downloads; all unique, yet still the same. One purchase gives you rights to download any or all.</p>]]></content:encoded></item><item><title>How Shall We Define Design?</title><dc:creator>Sandi Metz</dc:creator><pubDate>Thu, 05 Jul 2012 17:46:00 +0000</pubDate><link>https://sandimetz.com/blog/2012/07/05/how-shall-we-define-design</link><guid isPermaLink="false">537c0374e4b0f52ed92942e6:53817322e4b0ac7f7a7b9c2f:53d29507e4b052a8d0309d71</guid><description><![CDATA[I love object-oriented design. Â Itâs like open source software in general; 
perfect strangers come up with ideas that can save me time and money and 
then, out of the goodness of their hearts, go to a fair amount of trouble 
to pass these ideas on. Â I benefit from their efforts every day.

However, you donât have to go far to find competent, thoughtful, 
well-intentioned folks who curse and spit when they say âdesignâ. Â To these 
folks OOD is anathema; they see it as useless excess that must be avoided 
at all costs. Â 

Two things are odd about this situation. Â First, while Iâm certainly no 
genius, neither am I a complete idiot. Â As a woman of a certain age Iâve 
been writing code for an alarmingly long time. Â I have tons of experience 
getting applications out the door and my experience is that OOD lowers 
costs, increases output and keeps code fun. Â 

Second, when I listen to the anti-design folks explain their 
points-of-view, I agree with about 99.9% of what they have to say.]]></description><content:encoded><![CDATA[<p>I love object-oriented design.  Itâs like open source software in general; perfect strangers come up with ideas that can save me time and money and then, out of the goodness of their hearts, go to a fair amount of trouble to pass these ideas on.  I benefit from their efforts every day.</p>

<p>However, you donât have to go far to find competent, thoughtful, well-intentioned folks who curse and spit when they say âdesignâ.  To these folks OOD is anathema; they see it as useless excess that must be avoided at all costs.  </p>

<p>Two things are odd about this situation.  First, while Iâm certainly no genius, neither am I a complete idiot.  As a woman of a certain age Iâve been writing code for an alarmingly long time.  I have tons of experience getting applications out the door and my experience is that OOD lowers costs, increases output and keeps code fun.  </p>

<p>Second, when I listen to the anti-design folks explain their points-of-view, I agree with about 99.9% of what they have to say.</p>

<p>How can I simultaneously love design and agree with almost 100% of the statements made by folks who profess to hate it?  Well now, that has become obvious, hasnât it â¦ we must be using different definitions for the word.  </p>

<p>I define the design of an application as the current arrangement of its code, and the act of design as using ones knowledge of the consequences of various code arrangement techniques to solve the current problem in a way that accommodates the next (as yet undefined) change.  The anti-design folks (if I may speak for them) use design to mean making guesses about unknown requirements and writing speculative code in an attempt to preemptively meet them.  By my definition thereâs no such thing as over-design, by theirs the terms design and over-design are synonyms.</p>

<p>My experience is that participants in pro/anti OOD arguments agree far more than they disagree, and when they canât agree that they do agree itâs because theyâre stuck to their own definitions of the word.  These disputes are not about core beliefs, they merely reflect a communication gap.</p>

<p>I was thinking about this issue while listening to the Ruby Rogues episode with David Heinemeier Hansson, and serendipitously, in that same episode Chuck mentioned that heâd been experimenting with mind maps using MindMeister.</p>

<p>I sat down to organize my thoughts and ended up with this mind map (drag left to see the whole map, open/close branches with the +/â buttons):</p>
<iframe scrolling="no" src="http://www.mindmeister.com/maps/public_map_shell/182812352/ood?width=640&amp;height=600&amp;z=0.8" width="640" frameborder="0" height="600">Your browser is not able to display frames. Â Please visit the <a rel="nofollow" href="http://www.mindmeister.com/182812352/ood" target="_blank">mind map: OOD</a> on <a rel="nofollow" href="http://www.mindmeister.com" target="_blank">Mind Mapping - MindMeister</a>.</iframe><br/>Create your own <a rel="nofollow" href="http://www.mindmeister.com/">mind maps</a> at MindMeister<p>How cool is that? I (for one :â) ) now feel a pleasing sense of clarity.  If your thoughts about OOD map a different way, letâs hear about it â¦ or better yet, make a map of your own and share it.</p>

<p>In the meantime, if youâve written applications that have become painful to maintain, my definition of design offers a way out.  The purpose of OOD is to reduce the cost of change and the principles of OOD let you create applications that simultaneously do the simplest possible thing today <em>and</em> stay out of your way tomorrow. The folks who donât feel the need for design are clearly not having trouble with <em>their</em> apps, but if youâre have trouble with yours, OOD can help.</p>]]></content:encoded></item><item><title>Ruby Case Statements and `kind_of?`</title><dc:creator>Sandi Metz</dc:creator><pubDate>Fri, 12 Jun 2009 18:12:00 +0000</pubDate><link>https://sandimetz.com/blog/2009/06/12/ruby-case-statements-and-kind-of</link><guid isPermaLink="false">537c0374e4b0f52ed92942e6:53817322e4b0ac7f7a7b9c2f:53d29c7be4b0b38230c74105</guid><description><![CDATA[Youâre an object â Stand up straight and act like one!

Imagine you have this code:]]></description><content:encoded><![CDATA[<h3 id="youreanobjectstandupstraightandactlikeone">Youâre an object â Stand up straight and act like one!</h3>

<p>Imagine you have this code:</p>

<p><em>Code 1:</em></p>
<pre class="line-numbers"><code class="language-ruby">class MyView
  attr_reader :target
  
  def initialize(target)
    @target = target
  end

  def double
    case target
      when Numeric  then target * 2 
      when String   then target.next    # lazy example fail
      when Array    then target.collect {|o| MyView.new(o).double}
      else
        raise âdonât know how to double #{target.class} #{target.inspect}â
    end
  end
end</code></pre><p>It does just what youâd expect.</p>

<p><em>Output 1:</em></p>
<pre class="line-numbers"><code class="language-ruby">>> MyView.new(âaaaâ).double
=> "aab"
>> MyView.new(49).double
=> 98
>> MyView.new([âbâ, 6]).double
=> ["c", 12]
>> MyView.new({âxâ=>âyâ}).double
RuntimeError: donât know how to double Hash {"x"=>"y"}
        from (irb):73:in `double'
        from (irb):80
        from :0</code></pre><p>Youâre probably familiar with this pattern. Its everywhere in Rails and you likely use it in your own code.</p>

<p>I want to say, in the nicest possible way, that this style of code is wrong, wrong, wrong and that you should do a different thing.</p>

<p>Okay, now that I have your attention, Iâm not trying to start a fight. Iâm not the best Ruby person around and Iâm definitely not the best OO designer, but I do have an alternative pattern to suggest.</p>

<p>Iâm aiming to start a discussion, not a religious war. Strong opinions are welcome.</p>

<p>Whatâs happening up there?</p>

<p>MyView needs to operate on several other objects.  It knows:</p>

<ul>
<li>the classes of all the objects that it can interact with, and  </li>
<li>the behavior that should occur for each of those classes.</li>
</ul>

<p>The case statement above is really an <code>if</code> statement that checks <code>âkind_of?â</code> on each collaborating object. </p>

<p>I object to this code because:</p>

<ul>
<li>use of <code>kind_of?</code> is a code smell that says your code is procedural, not object oriented, and </li>
<li>if you write procedural code your application will gradually become impossible to change and everyone will hate you.</li>
</ul>

<p>Why is it wrong?</p>

<p>If I change how <code>double</code> works on any of these classes, <code>MyView</code> must change, but thatâs not the real problem.  What happens if <code>MyView</code> wants to double some new kind of object? I have to go into <code>MyView</code> and add a new branch to the case statement.  How annoying is that?</p>

<p>But thatâs the least of it.  If Iâm writing code that follows this pattern, I likely have many classes that do stuff based on the classes of their collaborators.  My entire application behaves this way.  Every time I add a new collaborating object I have to go change code everywhere.  Each subsequent change makes things worse.  My application is a teetering house of cards and eventually it will come tumbling down.</p>

<p>Also, what if someone else wants to use <code>MyView</code> with their new <code>SuperDuper</code> object? They canât reuse <code>MyView</code> without changing it since <code>MyView</code> has a very limited notion of what kinds of objects can be doubled.</p>

<p><code>MyView</code> is both rigid and closed for extension.</p>

<p>What should I have done instead?</p>

<p>Something like this.</p>

<p><em>Code 2</em>:</p>
<pre class="line-numbers"><code class="language-ruby">class Numeric
  def double
    self * 2
  end
end

class String
  def double
    self.next 
  end
end

class Array
  def double
    collect {|e| e.double}
  end
end

class Object
  def double
    raise "don't know how to double #{self.class} #{self.inspect}"
  end
end

class MyView
  attr_reader :target
  
  def initialize(target)
    @target = target
  end

  def double
    target.double
  end
end</code></pre><p>Using this new code, Output 1 will be the same as before, but now we can also:</p>

<p><em>Output 2:</em></p>
<pre class="line-numbers"><code class="language-ruby">>> 'aaa'.double
=> "aab"
>> 49.double
=> 98
>> ['b', 6].double
=> ["c", 12]</code></pre><p>In this example, objects are what they are and because of that they behave the way they do.</p>

<p>That statement is deceptively simple but incredibly important.  Objects <strong>are</strong> what they are so they do what they do.</p>

<p>It is not the job on any object to tell any other object how to behave.  Objects create behavior by passing messages back and forth.  They tell each other <strong>what</strong>, not <strong>how</strong>.  </p>

<p><strong>What</strong> is the event/notification/request and it is the responsibility of the sender.</p>

<p><strong>How</strong> is the behavior/implementation and it should be completely hidden in the receiver.</p>

<p><em>Code 2</em> is object oriented because it relies on a network of interacting objects to produce behavior.  Each object knows its own implementation and it exhibits that behavior when it receives a message.</p>

<p>No object in your system should have to know the class of any other object in order to know how to behave.  Everything is a Duck.  Tell the Duck <strong>what</strong> and the Duck should know <strong>how</strong>.</p>

<p>This way you can change how any object is doubled by changing its own specific implementation.  More importantly, <code>MyView</code> can now collaborate with any kind of object, as long as the object implements <code>double</code>.
This is a nice theory, but it seems impossible in practice.</p>

<p>Nah, itâs easy.  But it means thinking about objects in a more Object Oriented way.</p>

<p>In order to write code like <em>Code 2</em>, you have to believe in objects.</p>

<p>In Ruby, everything is an object.  I know that you know this, but I suspect that you donât feel it in your bones.  You came from those languages where you couldnât change <code>String</code> so now you operate as if <code>String</code> (and <code>Symbol</code> and <code>Array</code> and â¦) are static types.</p>

<p>Throw off your shackles.  Ruby is a network of interacting objects and you can add behavior to all of them.  When you find yourself saying, if youâre this kind of thing, do this, but if youâre that kind of thing, do that, itâs your cue to push the behavior back into those individual objects. <br />
Sound bites.</p>

<p>Always send messages if you can. <br />
Implement behavior only when thereâs no one left to ask. <br />
The last object that could possibly receive the message is the object that should implement the behavior.
Therefore:</p>

<ul>
<li><code>MyView</code> should not know how <code>Numeric</code> implements <code>double</code>.</li>
<li><code>MyView</code> should just ask target to double itself.</li>
<li>All possible targets must implement <code>double</code>.</li>
<li>Object should implement <code>double</code> to help you get your Ducks in a row.</li>
</ul>

<p>Lest you think this is all academicâ¦</p>

<p>Hereâs the code to use this Pattern in some of the form_for methods in <code>ActionView::Helpers</code>.  Ponder the implications.
<a href="http://bit.ly/hmuSX">Diff</a> of the changes.
actionpack/lib/action_view/helpers/<a href="http://github.com/skmetz/rails/blob/cffbc4399288be2fb7e15f67680089dbb36a7152/actionpack/lib/action_view/helpers/form_helper.rb#L235">form_helper.rb</a>
actionpack/lib/action_view/helpers/<a href="http://github.com/skmetz/rails/blob/cffbc4399288be2fb7e15f67680089dbb36a7152/actionpack/lib/action_view/helpers/prototype_helper.rb#L377">prototype_helper.rb</a>
actionpack/lib/action_view/helpers/<a href="http://bit.ly/ayLKO">form_helper_core_extensions.rb</a></p>]]></content:encoded></item><item><title>SOLID Design Principles - Dependency Injection</title><dc:creator>Sandi Metz</dc:creator><pubDate>Sat, 21 Mar 2009 10:33:00 +0000</pubDate><link>https://sandimetz.com/blog/2009/03/21/solid-design-principles</link><guid isPermaLink="false">537c0374e4b0f52ed92942e6:53817322e4b0ac7f7a7b9c2f:53d383e7e4b00410ab99bf8a</guid><description><![CDATA[Nothing is more pleasing than beautiful code. Â And nothing is more 
heart-breaking than watching beautiful code get destroyed.

Lately, Iâve been paying particular attention to SOLID Object Oriented 
Design (OOD) principles and their interaction with TDD. Â Iâm finding that, 
while TDD is an essential first step, it just isnât enough. Â If I want my 
code to survive the rigors of change and be useful for a long time I need 
to armor it by following SOLID principles.

Thereâs a delightful symmetry in the feedback loop between TDD and OOD. 
Â TDD in isolation is not guaranteed to produce well designed code, but if 
you follow the OOD principles while writing the code youâre testing, TDD 
gets easier and your tests get better.

In case you feel like pushing back already, let me add an early caveat. Â If 
you...]]></description><content:encoded><![CDATA[<h3 class="text-align-center">Not as Painful as it soundsâ¦</h3>


<p>Nothing is more pleasing than beautiful code.  And nothing is more heart-breaking than watching beautiful code get destroyed.</p>

<p>Lately, Iâve been paying particular attention to <a data-preserve-html-node="true" href="http://www.butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod" target="_blank">SOLID</a> Object Oriented Design (OOD) principles and their interaction with TDD.  Iâm finding that, while TDD is an essential first step, it just isnât enough.  If I want my code to survive the rigors of change and be useful for a long time I need to armor it by following SOLID principles.</p>

<p>Thereâs a delightful symmetry in the feedback loop between TDD and OOD.  TDD in isolation is not guaranteed to produce well designed code, but if you follow the OOD principles while writing the code youâre testing, TDD gets easier and your tests get better.</p>

<p>In case you feel like pushing back already, let me add an early caveat.  If you</p>

<ul>
<li>have an extremely simple application</li>
<li>with a specification thatâs 100% complete</li>
<li>that will never ever change</li>
</ul>

<p>go on ahead and write it any way youâd like.  <a data-preserve-html-node="true" href="http://www.martinfowler.com/bliki/DesignStaminaHypothesis.html" target="_blank">It doesn't matter</a>.</p>

<p>I say good luck with that.  Let me know how it works out for you. </p>

<p>But if youâre living in my reality, have a listen to <a data-preserve-html-node="true" href="http://www.objectmentor.com/omTeam/martin_r.html" target="_blank">Uncle Bob</a>.  In <a data-preserve-html-node="true" href="http://www.objectmentor.com/resources/articles/Principles_and_Patterns.pdf" target="_blank">Design Principles and Design Patterns</a> he describes good software as
"<em>clean, elegant, and compelling</em>", with "<em>a simple beauty that makes the designers and implementers itch to see it working</em>".</p>

<p>But then goes on to say:</p>

<p>"<em>What goes wrong with software?
The software starts to rot. At first it isnât so bad. An ugly wart here, a clumsy hack there, but the beauty of the design still shows through. Yet, over time as the rotting continues, the ugly festering sores and boils accumulate until they dominate the design of the application. The program becomes a festering mass of code that the developers find increasingly hard to maintain.</em>"</p>

<p>Thereâs more, but if I told you all of it Iâd have to send you to the dermatologist.</p>

<p>If you have good tests, you can protect the reliability of any smelly pile of software, even if it makes you cry when you have to change the code.  $$âs fly out the window but it all still works.</p>

<p>If you have good tests AND good design, the software will be reliable and changes will be an economical pleasure.  Youâll look forward to adding new features so you can undertake big refactorings and make the code do even more.</p>

<p>But, enough with all this talk.  Letâs do something.</p>

<h3 id="dependencyinjection">Dependency Injection</h3>

<p><a data-preserve-html-node="true" href="http://www.sandimetz.com/blog/2009/03/21/solid-design-principles/#note1">Bob</a> calls it <a data-preserve-html-node="true" href="http://www.objectmentor.com/resources/articles/dip.pdf" target="_blank">Dependency Inversion</a> and you could definitely argue that the two concepts are slightly different, but donât quibble with me about this.  Iâm being practical here.</p>

<h3 id="example1">Example 1:</h3>
<pre class="line-numbers"><code class="language-ruby">class Job
  def run
    @retriever = FileRetriever.new
    strm = @retriever.get_file(âtheirsâ)
    
    @cleaner = FileCleaner.new 
    cleaned = @cleaner.clean(strm)
    
    local = âmineâ
    File.open(local, âwâ) {|f| f.write(cleaned) }
    local
  end
end</code></pre><p>Class <code>Job</code> is responsible for retrieving a remote file, cleaning it up and then storing it locally.  It uses two preexisting classes, <code>FileRetriever</code> and <code>FileCleaner</code>, which themselves have thorough tests.</p>

<p>The <code>Job</code> class is dirt simple.  If you wrote it test first, you might have a spec like:</p>
<pre class="line-numbers"><code class="language-ruby">it âshould retrieve âtheirsâ and store it locallyâ do
    @job = Job.new
    local_fn = @job.run
    local_fn.should have_the_correct_contents
  end</code></pre><p>What does this spec test?  <code>Job</code>?  Or <code>Job</code> AND <code>FileRetriever</code> AND <code>FileCleaner</code>?  Obviously, all three.  My spec is testing a whole set of objects; <code>Job</code> and all of itâs dependencies.  Itâs fragile in that it relies on objects other than the one under test and it runs too long because it exercises code that it should not care about.</p>

<p>Mocks/stubs to the rescue, right?  I could stub <code>FileRetriever.get_file</code> and <code>FileCleaner.clean</code> and bypass both of those problems. However, even if I stub those methods, my code still has a bad smell.  Stubbing improves the test but does not fix the flaw in the code.</p>

<p>Because of the style of coding in <code>Job</code>, it contains dependencies that effect my ability to refactor and reuse it in the future.  Letâs move some code around.</p>

<h3 id="example2">Example 2:</h3>
<pre class="line-numbers"><code class="language-ruby">class Job
  attr_reader :retriever, :cleaner, :remote, :local
  
  def initialize(retriever=FileRetriever.new, cleaner=FileCleaner.new, 
                  remote=âtheirsâ, local=âmineâ)
    @retriever = retriever
    @cleaner   = cleaner
    @remote    = remote
    @local     = local
  end
  
  def run
    strm    = retriever.get_file(remote)
    cleaned = cleaner.clean(strm)
    
    File.open(local, âwâ) {|f| f.write(cleaned) }
    local
  end
end</code></pre><p>Now Iâm injecting the <em>dependencies</em> into <code>Job</code>.  Suddenly, <code>Job</code> feels a lot less specific and a lot more re-usable.  In my spec I can create true mock objects and inject them; I donât have to stub methods into existing classes.</p>

<p>That stylistic change helped a lot, but what if I want to provide some, but not all, of the arguments? Itâs easy, just change the initialize method.  It wouldnât bother me if you also wanted to simplify run.</p>

<h3 id="example3">Example 3:</h3>
<pre class="line-numbers"><code class="language-ruby">class Job
  attr_reader :retriever, :cleaner, :remote, :local
  def initialize(opts)
    @retriever = opts[:retriever] ||= FileRetriever.new
    @cleaner   = opts[:cleaner]   ||= FileCleaner.new
    @remote    = opts[:remote]    ||= âtheirsâ
    @local     = opts[:local]     ||= âmineâ 
  end
  
  def run
    File.open(local, âwâ) {|f| 
      f.write(cleaner.clean(retriever.get_file(remote)))}
    local
  end
end</code></pre><p>That feels really different from example 1. A simple change in coding style made Job more extensible, more reusable and much easier to test.   You can write code in this style for no extra cost, so why not? It will save someone pain later.</p>

<h3 id="example4pain">Example 4 â Pain:</h3>

<p>Hereâs some code from Rails that generates xml for ActiveRecord objects.  (Please, Iâm not picking on them, this just happens to be a good example that I dealt with recently.)</p>
<pre class="line-numbers"><code class="language-ruby">module ActiveRecord #:nodoc:
  module Serialization
    def to_xml(options = {}, &block)
      serializer = XmlSerializer.new(self, options)
      block_given? ? serializer.to_s(&block) : serializer.to_s
    end
    #â¦
  end
end</code></pre><p>Without recounting the whole story, I wanted to use <code>to_xml</code> with a different <code>Serializer</code> class. Imagine how easy it would be if <code>XmlSerializer</code> had been injected into <code>to_xml</code>. Instead, look at it and despair. I have to override the entire method just to name a different serializer class, with all the future maintenance burden that the change entails.</p>

<p>The <code>to_xml</code> code does exactly what itâs supposed to do and in that way cannot be faulted. The person who wrote it isnât bad, they just never imagined that I would want to reuse it this way.</p>

<p>Let me repeat that.</p>

<p>They never imagined how I would reuse their code.</p>

<p>The moral of this story? The same thing is true for every bit of code you write. The future is uncertain and the only way to plan for it is to acknowledge that uncertainty. You do not know what will happen; hedge your bets, inject your dependencies.</p>

<p>TDD makes the world go âround. It lets us make unanticipated changes with confidence that our code will still work, but SOLID design principles keep the code âclean, elegant, and compellingâ after many generations of change.</p>

<h4 id="notes">Notes:</h4>

<ol>
<li>I donât mean to be overly familiar; itâs not like I know the man. But heâs an icon, how can I avoid calling him âBobâ?</li>
</ol>]]></content:encoded></item></channel></rss>