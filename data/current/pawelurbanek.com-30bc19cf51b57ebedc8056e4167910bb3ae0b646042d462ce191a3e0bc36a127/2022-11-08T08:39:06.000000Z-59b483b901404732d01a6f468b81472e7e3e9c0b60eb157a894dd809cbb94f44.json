{
  "title":"Rails Quick Tip - Use Private Debugging Aliases",
  "date":"2022-11-08T08:39:06.000000Z",
  "author":null,
  "id":"https://pawelurbanek.com/rails-debug-aliases",
  "link":"https://pawelurbanek.com/rails-debug-aliases",
  "content":"<p>I don’t like to type much. Even minor improvements in your debugging workflow are likely to accumulate into huge keystrokes savings over time. In this blog post, I’ll describe a simple way to add debugging shortcuts to the project without modifying the codebase shared with other team members.</p>\n\n<h2 id=\"my-aliases-good-your-aliases-bad\">My aliases good, your aliases bad</h2>\n\n<p>In one of my previous posts, I described a way to <a href=\"/rails-console-aliases\">improve your productivity by using Rails console aliases</a>. The downside of the described approach is that the <code class=\"highlighter-rouge\">.irbrc</code> file is usually committed to the repository.</p>\n\n<p>If you’re working in a larger team, it might be challenging to agree on a definitive list of aliases that everyone finds useful. So instead of starting code review battles on which aliases are worth committing to the shared repo, you can keep your private aliases collection.</p>\n\n<p>In theory, you could leverage an <code class=\"highlighter-rouge\">~/.irbrc</code> file to define them. But, the problem is that if you start an IRB session outside of the context of a Rails project, any of the calls to the custom classes or included gems would break. Also, it does not seem correct to include per-project customizations in global dotfiles.</p>\n\n<p>Instead, you can customize a project without modifying its shared source code. You’ll have to configure git to parse the file with a list of entries that should never be committed to any of the local repositories:</p>\n\n<p><code class=\"highlighter-rouge\">~/.gitconfig</code></p>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"o\">[</span>core]\n  excludesfile <span class=\"o\">=</span> ~/.gitignore_global</code></pre></figure>\n\n<p>You can now define any file to be excluded from git commits:</p>\n\n<p><code class=\"highlighter-rouge\">~/.gitignore_global</code></p>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\">config/initializers/my_aliases.rb</code></pre></figure>\n\n<p>I use a Rails initializer file to define my custom aliases and local tweaks. Files from <code class=\"highlighter-rouge\">config/initializers/</code> are called when the app’s models have already been loaded so you can interact with all the app’s classes:</p>\n\n<p><code class=\"highlighter-rouge\">config/initializers/my_aliases.rb</code></p>\n\n<figure class=\"highlight\"><pre><code class=\"language-ruby\"><span class=\"no\">User</span><span class=\"p\">.</span><span class=\"nf\">filter_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">me</span>\n  <span class=\"no\">User</span><span class=\"p\">.</span><span class=\"nf\">find_by</span><span class=\"p\">(</span><span class=\"ss\">email: </span><span class=\"s2\">&quot;my@email.com&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">pr1</span>\n  <span class=\"no\">Project</span><span class=\"p\">.</span><span class=\"nf\">find_by</span><span class=\"p\">(</span><span class=\"ss\">slug: </span><span class=\"s2\">&quot;my-debug-project&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">pr2</span>\n  <span class=\"no\">Project</span><span class=\"p\">.</span><span class=\"nf\">find_by</span><span class=\"p\">(</span><span class=\"ss\">slug: </span><span class=\"s2\">&quot;my-other-debug-project&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">refr</span>\n  <span class=\"no\">User</span><span class=\"p\">.</span><span class=\"nf\">recent</span><span class=\"p\">.</span><span class=\"nf\">each</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"ss\">:refresh_usage_data</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n\n<span class=\"c1\"># ...</span></code></pre></figure>\n\n<div class=\"center annotation\">Sample project-specific aliases and tweaks</div>\n<p><br></p>\n\n<p>I usually keep a dozen of three max four-letters aliases per project. They represent objects and methods I often interact with when debugging locally. Smuggling such global methods past code review would probably not be possible, hence the private aliases workaround.</p>\n\n<h2 id=\"summary\">Summary</h2>\n\n<p>I regularly inspect the list of my Rails console commands for potential alias candidates using <a href=\"https://github.com/pawurb/lazyme\" rel=\"noopener noreferrer\">the lazyme gem</a>. Correctly configured aliases can save you hundreds of keystrokes in just a single day of work. Your fingers will appreciate it.</p>\n"
}