<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rails, PostgreSQL Performance Audit and Tuning Consultant for Hire</title>
    <description>Paweł Urbanek - Full Stack Ruby on Rails web developer and consultant, specializing in performance tuning. Experienced in building scalable APIs for startups and refactoring legacy codebases. Blogging about web development related topics.</description>
    <link>https://pawelurbanek.com/</link>
    <atom:link href="https://pawelurbanek.com/feed.xml" rel="self" type="application/rss+xml"/>
    
      <item>
        <title>Rails Quick Tip - Use Private Debugging Aliases</title>
        <description>&lt;p&gt;I don’t like to type much. Even minor improvements in your debugging workflow are likely to accumulate into huge keystrokes savings over time. In this blog post, I’ll describe a simple way to add debugging shortcuts to the project without modifying the codebase shared with other team members.&lt;/p&gt;

&lt;h2 id=&quot;my-aliases-good-your-aliases-bad&quot;&gt;My aliases good, your aliases bad&lt;/h2&gt;

&lt;p&gt;In one of my previous posts, I described a way to &lt;a href=&quot;/rails-console-aliases&quot;&gt;improve your productivity by using Rails console aliases&lt;/a&gt;. The downside of the described approach is that the &lt;code class=&quot;highlighter-rouge&quot;&gt;.irbrc&lt;/code&gt; file is usually committed to the repository.&lt;/p&gt;

&lt;p&gt;If you’re working in a larger team, it might be challenging to agree on a definitive list of aliases that everyone finds useful. So instead of starting code review battles on which aliases are worth committing to the shared repo, you can keep your private aliases collection.&lt;/p&gt;

&lt;p&gt;In theory, you could leverage an &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.irbrc&lt;/code&gt; file to define them. But, the problem is that if you start an IRB session outside of the context of a Rails project, any of the calls to the custom classes or included gems would break. Also, it does not seem correct to include per-project customizations in global dotfiles.&lt;/p&gt;

&lt;p&gt;Instead, you can customize a project without modifying its shared source code. You’ll have to configure git to parse the file with a list of entries that should never be committed to any of the local repositories:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.gitconfig&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;core]
  excludesfile &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ~/.gitignore_global&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can now define any file to be excluded from git commits:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.gitignore_global&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;config/initializers/my_aliases.rb&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I use a Rails initializer file to define my custom aliases and local tweaks. Files from &lt;code class=&quot;highlighter-rouge&quot;&gt;config/initializers/&lt;/code&gt; are called when the app’s models have already been loaded so you can interact with all the app’s classes:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;config/initializers/my_aliases.rb&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;filter_attributes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;me&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;email: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my@email.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pr1&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;slug: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my-debug-project&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pr2&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;slug: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my-other-debug-project&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;refr&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:refresh_usage_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;center annotation&quot;&gt;Sample project-specific aliases and tweaks&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I usually keep a dozen of three max four-letters aliases per project. They represent objects and methods I often interact with when debugging locally. Smuggling such global methods past code review would probably not be possible, hence the private aliases workaround.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;I regularly inspect the list of my Rails console commands for potential alias candidates using &lt;a href=&quot;https://github.com/pawurb/lazyme&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;the lazyme gem&lt;/a&gt;. Correctly configured aliases can save you hundreds of keystrokes in just a single day of work. Your fingers will appreciate it.&lt;/p&gt;
</description>
        <pubDate>Tue, 08 Nov 2022 09:39:06 +0100</pubDate>
        <link>https://pawelurbanek.com/rails-debug-aliases</link>
        <guid isPermaLink="true">https://pawelurbanek.com/rails-debug-aliases</guid>
      </item>
    
      <item>
        <title>The In-depth Guide to Caching ActiveRecord SQL Queries in Rails</title>
        <description>&lt;p&gt;Caching might seem a perfect solution to &lt;em&gt;“speed up”&lt;/em&gt; slow database queries. However, caching in Rails apps can be easily misused, leading to poor maintainability or even slower performance than without it. In this blog post, I’ll discuss the common pitfalls of caching SQL queries in Rails apps. I’ll also describe my toolkit for assessing the &lt;em&gt;cacheability&lt;/em&gt; of database queries and techniques for reducing the cost of caching infrastructure.&lt;/p&gt;

&lt;h2 id=&quot;railscache-101&quot;&gt;Rails.cache 101&lt;/h2&gt;

&lt;p&gt;Ruby on Rails offers a rich toolkit for caching different web application layers. Ranging from simple instance variables, through external in-memory cache shareable between processes, up to HTTP caching relying on headers and status codes. This blog post will focus on caching SQL-related data in separate in-memory storage.&lt;/p&gt;

&lt;p&gt;I won’t elaborate on choosing &lt;em&gt;the best&lt;/em&gt; in-memory database for your app’s cache. For projects that are just starting, &lt;a href=&quot;https://github.com/redis/redis-rb&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Redis&lt;/a&gt; is usually a decent choice. Once the app’s scale increases, it might be a good idea to separate the cache into a &lt;a href=&quot;https://github.com/petergoldstein/dalli&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Memcached with Dalli gem&lt;/a&gt; so that it does not clash with background worker data.&lt;/p&gt;

&lt;p&gt;You can check your currently configured cache storage by running:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cache&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For external in-memory storage, you should see:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ActiveSupport::Cache::RedisCacheStore...&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ActiveSupport::Cache::MemCacheStore...&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Please consult the documentation of respective gems for configuration details. You can also read &lt;a href=&quot;https://guides.rubyonrails.org/caching_with_rails.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;the official Rails guide on caching&lt;/a&gt; for a detailed comparison between different cache storages supported in Rails. For production applications with non-trivial traffic, the external in-memory store should be the best choice in most cases. An advantage of an external in-memory cache is that it can be shared between different Ruby processes, e.g., multiple Heroku dynos. It means that time-consuming cache write will only be performed once, and all the other dynos can reuse the result.&lt;/p&gt;

&lt;h3 id=&quot;rails-cache-under-the-hood&quot;&gt;Rails cache under the hood&lt;/h3&gt;

&lt;p&gt;Before we discuss how and when we should cache SQL queries, let’s first take a closer look at what it means to &lt;em&gt;“cache”&lt;/em&gt; data using Rails framework. In this blog post, we’ll focus on the &lt;code class=&quot;highlighter-rouge&quot;&gt;Rails.cache&lt;/code&gt; module. It abstracts away the interface to the underlying data store and exposes simple methods for storing and retrieving cached data.&lt;/p&gt;

&lt;p&gt;You use it like that:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;important_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;important_value_key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;important_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;important_value_key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 42&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;An often-used feature is the auto-expiry of cached values:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;important_value_key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;important_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;expires_in: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;seconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;important_value_key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 42&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;important_value_key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; nil&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A handy shortcut for automatically refreshing expired data is the &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt; method:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;important_value_key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;expires_in: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;seconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;important_value&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It reads the cached value if present and refreshes it with the result of executing provided block if the selected key is expired.&lt;/p&gt;

&lt;p&gt;A useful trick is to leverage a &lt;a href=&quot;https://apidock.com/rails/ActiveRecord/Base/cache_key&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cache_key&lt;/code&gt; method&lt;/a&gt; of an ActiveRecord query to ensure that it will be reused.&lt;/p&gt;

&lt;p&gt;You can also cache more complex objects:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;important_user&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cached_user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;important_user&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cached_user&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here’s where things are starting to get more interesting. &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; is not a primitive value, but an &lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveRecord&lt;/code&gt; object built based on an SQL query results.&lt;/p&gt;

&lt;p&gt;So how come that the &lt;code class=&quot;highlighter-rouge&quot;&gt;Rails.cache&lt;/code&gt; can reconstruct the object without talking to the database? Introducing the &lt;a href=&quot;https://ruby-doc.org/core-3.1.2/Marshal.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Marshal&lt;/code&gt; module&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dumped_user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Marshal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dumped_user&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# &quot;\x04\bo:\tUser\x11:\x10@new_recordF:\x10@attr...&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is a serialized representation of our &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; object containing all the info necessary to restore it from text format back to the program memory. You can do it like that:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;restored_user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Marshal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dumped_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restored_user&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;object_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restored_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;object_id&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;center annotation&quot;&gt;Remember to avoid loading objects from user-provided input because it can result in a remote code execution vulnerability.&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;You can see that our restored object &lt;em&gt;equals&lt;/em&gt; our original user, but they are now different objects in memory since their &lt;code class=&quot;highlighter-rouge&quot;&gt;object_id&lt;/code&gt; attributes don’t match.&lt;/p&gt;

&lt;p&gt;Let’s now dig a bit deeper by peeking into the internals of how the cached object binary blobs are stored. If you’re using Redis as your cache database, you can read raw entries using a similar code snippet:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'redis'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;redis_client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;url: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;REDIS_URL&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redis_client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;important_user&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# &quot;\u0004\bo: ActiveSupport::Cache::Entry\n:\v@value\&quot;\u0002\xFC\u0003x\x9C\x9DU\u007Fo...&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can notice that the resulting entry is different from output of using &lt;code class=&quot;highlighter-rouge&quot;&gt;Marshal.dump&lt;/code&gt; on the same user object. One notable difference is that &lt;code class=&quot;highlighter-rouge&quot;&gt;Rails.cache&lt;/code&gt; automatically compresses larger objects using the &lt;code class=&quot;highlighter-rouge&quot;&gt;Zlib::Deflate&lt;/code&gt; &lt;em&gt;stdlib&lt;/em&gt; module, but it still uses &lt;code class=&quot;highlighter-rouge&quot;&gt;Marshall.dump&lt;/code&gt; under the hood.&lt;/p&gt;

&lt;p&gt;Now that we’ve covered the basics let’s move on to speeding up our queries.&lt;/p&gt;

&lt;h2 id=&quot;how-to-find-sql-queries-worth-caching&quot;&gt;How to find SQL queries worth caching?&lt;/h2&gt;

&lt;p&gt;In theory, you could &lt;em&gt;“cache all the things”&lt;/em&gt; and Rails would scale…&lt;/p&gt;

&lt;p&gt;Nope :(&lt;/p&gt;

&lt;p&gt;When I work on &lt;a href=&quot;/#rails-performance-tuning&quot;&gt;speeding up a Rails application&lt;/a&gt;, I usually treat applying any backend caching technique as a &lt;em&gt;last resort&lt;/em&gt;. The most significant downside of caching is the additional complexity it introduces. By adding a caching layer, you instantly lose a &lt;em&gt;single source of truth&lt;/em&gt; trait of your SQL database. Any debugging effort now requires an analysis whether a potential stale cache issue could have affected it.&lt;/p&gt;

&lt;p&gt;I could keep on ranting about the downsides of cache layer… My apporoach is to avoid caching unless the potential cost is potentially worth it. That’s why in this tutorial, I focus on caching SQL queries. I think that it is one of the least complex backend caching techniques that can significantly speed up the application without all the usual downsides. From my experience, an attempt to implement &lt;em&gt;“smart auto expiring”&lt;/em&gt;, &lt;em&gt;“Russian doll fragment caching”&lt;/em&gt; could be a recipe for getting lost in a Rails &lt;em&gt;“callback hell”&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The best part about SQL queries is that you can quickly find the ones worth caching and measure that expected gain before you deploy the change to production. &lt;a href=&quot;https://scoutapm.com/docs/features#database-monitoring&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;ScoutAPM database monitoring feature&lt;/a&gt; is a tool that shows an instant overview of your application’s queries. You can sort them by the &lt;em&gt;%&lt;/em&gt; of total time consumed:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center-image&quot; alt=&quot;ScoutAPM database addon&quot; title=&quot;ScoutAPM database addon&quot; loading=&quot;lazy&quot; src=&quot;/assets/scoutapm-database-addon-3fc157425115ae9beb8da1aa148c191b212d023fd64d512cddd19cdd9ac17d8b.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this sample screenshot, you can see that the &lt;code class=&quot;highlighter-rouge&quot;&gt;Poll#find&lt;/code&gt; query is eating up over &lt;em&gt;30%&lt;/em&gt; of total database processing time with a mean execution time of over &lt;em&gt;250ms&lt;/em&gt; and &lt;em&gt;5%&lt;/em&gt; of slowest traces slower than &lt;em&gt;500ms&lt;/em&gt;. So, in theory, it looks like a perfect candidate for caching if business logic allows it.&lt;/p&gt;

&lt;p&gt;An alternative tool for finding queries that consume a significant amount of database resources is my &lt;a href=&quot;https://github.com/pawurb/rails-pg-extras&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;rails-pg-extras gem&lt;/a&gt; with its &lt;code class=&quot;highlighter-rouge&quot;&gt;calls&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;outliers&lt;/code&gt; methods. But, compared to ScoutAPM, you’ll only see a raw query output without info on where it originates from. It’s also not possible to easily track the impact of releases. Check out my other blog post for more details on &lt;a href=&quot;/postgresql-fix-performance&quot;&gt;using rails-pg-extras to improve PostgreSQL performance&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now that we know &lt;em&gt;which&lt;/em&gt; SQL queries to potentially cache, let’s finally discuss &lt;em&gt;how&lt;/em&gt; to do it.&lt;/p&gt;

&lt;h2 id=&quot;two-hard-things&quot;&gt;Two Hard Things&lt;/h2&gt;

&lt;p&gt;The challenging part of leveraging caching is not finding bottleneck queries, but rather deciding which queries can be cached without breaking the business logic. There are no straightforward answers since it differs per project. The best candidates for caching are always queries that are shared between multiple users. E.g. results of a popular or default search query.&lt;/p&gt;

&lt;p&gt;As previously mentioned, I’m not a fan of &lt;em&gt;“smart”&lt;/em&gt; cache expiry policies since it can add a hard-to-maintain complexity. In theory, you could base your cache expiry keys on the &lt;code class=&quot;highlighter-rouge&quot;&gt;updated_at&lt;/code&gt; attribute of an object. But, in Rails, it’s straightforward to modify objects bypassing all the callbacks magic, thus leading to hard-to-debug stale cache issues. And what about &lt;code class=&quot;highlighter-rouge&quot;&gt;updated_at&lt;/code&gt; of the object relations? Do you have to keep all the relations structures in sync with every state update now?… Even if the initial version of the &lt;em&gt;“smart”&lt;/em&gt; cache expiry policy might look straightforward, keeping the complexity at bay with the new features requested might not be possible.&lt;/p&gt;

&lt;p&gt;If you’re just starting with caching, usually, the simplest way to implement it is to add a fixed expiry threshold. The longer it is, the greater will be the performance benefit, but data displayed to users will be more outdated. Unfortunately, there are also no simple answers to configuring the correct cache expiry threshold. You can check out my other blog post for tips on &lt;a href=&quot;/rails-dynamic-config&quot;&gt;using dynamic config in Rails&lt;/a&gt; to easily tweak the values in production and observe results.&lt;/p&gt;

&lt;p&gt;But, as an example, let’s assume you’re optimizing an endpoint with traffic of 10 RPS. If all the requests generate the same slow SQL query, caching its results for 1 second would speed up ~90% of all traffic. Depending on your app’s traffic, even a small caching threshold could translate to huge performance and scalability benefits.&lt;/p&gt;

&lt;p&gt;It’s impossible to give universal advice on configuring the &lt;em&gt;“perfect”&lt;/em&gt; caching policies. So let’s instead move on to describing how to store cached data correctly.&lt;/p&gt;

&lt;h2 id=&quot;caching-sql-queries-in-rails&quot;&gt;Caching SQL queries in Rails&lt;/h2&gt;

&lt;p&gt;In the following examples, we’ll be working with this sample &lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveRecord&lt;/code&gt; model:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:slow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;SELECT true FROM pg_sleep(1)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:created_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;to_json&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;id: &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;email: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;nickname: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nickname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;created_at: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;created_at&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;slow&lt;/code&gt; scope is supposed to return 10 &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; model objects after an artificial 1-second delay.&lt;/p&gt;

&lt;p&gt;Let’s now consider the following code snippet:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;vi&quot;&gt;@users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my_slow_query&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;expires_in: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;minute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;slow&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The big question is whether this &lt;em&gt;caching technique&lt;/em&gt; will improve performance?&lt;/p&gt;

&lt;p&gt;Nope :(&lt;/p&gt;

&lt;p&gt;The previously mentioned trick of inspecting raw cache values can help us understand why this is a bug:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redis_client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my_slow_query&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &quot;ActiveSupport::Cache::Entry\t:\v@valueo: User::ActiveRecord_Relation...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;center annotation&quot;&gt;If the cache entry is unreadable you can save it with &lt;code&gt;compress: false&lt;/code&gt; to simplify debugging.&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;We’ve accidentally cached an &lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveRecord::Relation&lt;/code&gt; object representing an SQL query that has not yet been executed. You can read my blog post about &lt;a href=&quot;/rails-load-async&quot;&gt;using &lt;code class=&quot;highlighter-rouge&quot;&gt;load_async&lt;/code&gt; API in Rails&lt;/a&gt; for more in-depth info on how and when ActiveRecord queries are triggered in Rails. Query object would only be executed after instantiating it from the cache, meaning that each request would suffer from the additional 1-second slowdown. It would not be possible to debug this issue without inspecting raw cache entry because any attempt to display &lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveRecord::Relation&lt;/code&gt; executes it obfuscating the original stored format.&lt;/p&gt;

&lt;p&gt;A better way to cache this query would look like that:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;vi&quot;&gt;@users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my_slow_query&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;expires_in: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;minute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;slow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_a&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Appending &lt;code class=&quot;highlighter-rouge&quot;&gt;to_a&lt;/code&gt; forces query execution, and the resulting &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; objects are serialized and stored in the cache database. Now reading the contents of the cache would not execute any SQL queries.&lt;/p&gt;

&lt;h2 id=&quot;how-to-spend-less-money-on-an-in-memory-cache&quot;&gt;How to spend less money on an in-memory cache?&lt;/h2&gt;

&lt;p&gt;But, here comes the tricky part. Do you need to store full-blown &lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveRecord&lt;/code&gt; objects? Let’s compare the size of cached ten full &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; ActiveRecord objects with their JSON representation:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;user_ar_objects&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;slow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;user_json_objects&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;slow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:to_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;redis_client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;user_ar_objects&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 1721&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;redis_client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;user_json_objects&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 1064&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see, storing JSON representation takes almost half the space. Another benefit is the smaller memory usage required to instantiate JSON data compared to full-blown AR objects.&lt;/p&gt;

&lt;p&gt;Optimizing the size of your cached data is critical. Compared to the SSD disk space, memory storage is expensive. If you’re using Heroku, 1GB of &lt;a href=&quot;https://elements.heroku.com/addons/memcachier&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Memcachier storage&lt;/a&gt; costs $70/month, and 100GB would incur a monthly cost of $4000 (!!). You could reduce the price by spinning up a custom infrastructure, but this is just an example. The takeaway is that in-memory storage is expensive.&lt;/p&gt;

&lt;h3 id=&quot;how-to-minimize-cache-size-by-storing-only-ids&quot;&gt;How to minimize cache size by storing only IDs&lt;/h3&gt;

&lt;p&gt;There’s a way to significantly limit the amount of data you have to cache while maintaining &lt;em&gt;good enough&lt;/em&gt; performance. The slowdown in SQL queries is usually caused by complex search criteria that span multiple joined tables. But the outcome of the query are often objects from a single table. It means that in many cases, we should be able to store just the IDs of original query results and later reuse them to fetch objects without all the search logic overhead. Based on my tests saving only integer IDs takes ~10% of the in-memory space needed to store a JSON representation of an object with just a few attributes.&lt;/p&gt;

&lt;p&gt;Let’s see it in action:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;users_ids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my_slow_query_ids&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;expires_in: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;minute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;slow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ids&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;vi&quot;&gt;@users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users_ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’re caching only user IDs and later use them to fetch objects efficiently.&lt;/p&gt;

&lt;p&gt;Unfortunately, this implementation has a sneaky bug. Maybe you’ve also learned the hard way that PostgreSQL does not preserve the order of IDs passed as a search param… (╯°□°）╯︵ ┻━┻&lt;/p&gt;

&lt;p&gt;It means that while returned objects would be correct, without an explicit &lt;code class=&quot;highlighter-rouge&quot;&gt;ORDER BY&lt;/code&gt;, their ordering would be random. This is critical if you’re paginating results because subsequent pages could return duplicates and omit some of the rows.&lt;/p&gt;

&lt;p&gt;One way to fix it is by reordering the objects with Ruby:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;users_ids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my_slow_query_ids&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;expires_in: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;minute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;slow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ids&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;vi&quot;&gt;@users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users_ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sort_by&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Based on my benchmarks fetching by IDs and sorting 1000 ActiveRecord objects in Ruby has an overhead of &lt;em&gt;~50ms&lt;/em&gt;. That’s usually an acceptable performance for fetching SQL data compared to an unoptimized database query. If you have to work with more objects, you should probably consider adding pagination.&lt;/p&gt;

&lt;p&gt;But, this technique forces us to execute the AR query object, which might not always be optimal. There are scenarios where you need the raw query to add eager loading or merge it with other queries. In this case, you can use an ugly way of custom sorting that’s supported by PostgreSQL (&lt;a href=&quot;https://stackoverflow.com/questions/12012574/postgres-order-by-values-in-in-list-using-rails-active-record&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;copy-paste source&lt;/a&gt;):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_as_sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each_with_index&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;(&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;)&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;relation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;JOIN (VALUES &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;,&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;) as x (id, ordering) ON &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.id = x.id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;relation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;relation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'x.ordering'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;relation&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;users_ids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my_slow_query_ids&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;expires_in: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;minute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;slow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ids&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;vi&quot;&gt;@users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users_ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_as_sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This method has a comparable overhead of &lt;em&gt;~50ms&lt;/em&gt; for 1000 objects. But, it produces a huge SQL query with the custom sorting order hardcoded. Always measure the performance impact if you’re about to merge it with other queries.&lt;/p&gt;

&lt;p&gt;Now our cached results are correctly sorted, taking up only a fraction of the original space. This technique allows you to aggressively cache more data without bloating the costs of your in-memory database.&lt;/p&gt;

&lt;p&gt;┳━┳ ヽ(ಠل͜ಠ)ﾉ&lt;/p&gt;

&lt;p&gt;That’s another advantage of caching just the critical data, i.e., bottleneck SQL results, instead of entire HTML views. Storage space needed is an order of magnitude smaller.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;The best way to implement caching is to avoid it. So, please always double-check if adding a database index cannot save you from developing a complex cache expiration strategy. But, if you have to do it, I hope some of the above tips will prove helpful.&lt;/p&gt;
</description>
        <pubDate>Mon, 17 Oct 2022 10:39:06 +0200</pubDate>
        <link>https://pawelurbanek.com/rails-active-record-caching</link>
        <guid isPermaLink="true">https://pawelurbanek.com/rails-active-record-caching</guid>
      </item>
    
      <item>
        <title>Simple View Presenter Pattern in Rails without using Gems</title>
        <description>&lt;p&gt;What’s the size of &lt;code class=&quot;highlighter-rouge&quot;&gt;user.rb&lt;/code&gt; file in your current project? The default &lt;em&gt;Rails way&lt;/em&gt; model-view-controller architecture often leads to a bloated model layer. Presenter pattern is one of the more straightforward ways to slim down your Rails models. It also helps to reduce the logic in the view layer and makes testing easier. In this blog post, I’ll describe how to implement a presenter pattern without including additional gem dependencies.&lt;/p&gt;

&lt;h2 id=&quot;how-not-to-views&quot;&gt;How not to views&lt;/h2&gt;

&lt;p&gt;Before we jump into coding our presenters, let’s first quickly discuss the shortcoming of the default approach of &lt;em&gt;model + view&lt;/em&gt;. For the sake of this tutorial, let’s assume we want to code a feature displaying a number of unread notifications.&lt;/p&gt;

&lt;p&gt;Without implementing additional layers of abstraction, we can either put the related logic into the model or view files. Sample implementation in the view partial could look like that:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;app/views/user/_notifications.html.erb&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-erb&quot; data-lang=&quot;erb&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;notifications&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unread_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;notifications&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;unread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unread_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
    You have &lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unread_count&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt; unread
    &lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pluralize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unread_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;notification&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
    You don't have unread notifications.
  &lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Despite the logic being relatively simple, there’s already a lot of the &lt;em&gt;erb&lt;/em&gt; syntax overhead. Another downside of putting logic into views is that it’s challenging to test it in isolation. You must run slow integration tests or configure controller specs to render views. Unfortunately, it’s sometimes problematic to simulate different edge cases without resorting to hard-to-maintain stubbing techniques. If logic is complex, I usually prefer to implement a single &lt;em&gt;“happy path”&lt;/em&gt; integration spec and test edge cases using low-level unit tests.&lt;/p&gt;

&lt;p&gt;Testing would be simpler if we implemented the same logic directly in the model:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;app/model/user.rb&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActionView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Helpers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TextHelper&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unread_notifications_text&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;unread_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notifications&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;unread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unread_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;You don't have unread notifications.&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;s2&quot;&gt;&quot;You have %{unread_count} unread %{pluralize(unread_count, 'notification')}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The logic is easier to grasp without all the &lt;em&gt;noise&lt;/em&gt; added by the &lt;em&gt;erb&lt;/em&gt; syntaxt. But the inclusion of &lt;code class=&quot;highlighter-rouge&quot;&gt;ActionView::Helpers::TextHelper&lt;/code&gt; in the model indicates that we’re mixing up unrelated layers. Writing code like that is a one-way ticket to bloating your models to an unmaintainable mess.&lt;/p&gt;

&lt;h3 id=&quot;why-not-helpers&quot;&gt;Why not helpers?&lt;/h3&gt;

&lt;p&gt;Another way to implement this logic in a &lt;em&gt;classical Rails way&lt;/em&gt; would be to use a built-in Rails helper (files inheriting from &lt;code class=&quot;highlighter-rouge&quot;&gt;ApplicationHelper&lt;/code&gt; class). But, I usually try to avoid them. The same as in the case of views, they are challenging to test in isolation, and have a global scope. It means that you have to be careful to keep methods naming unique across &lt;em&gt;ALL&lt;/em&gt; your helpers. From my experience refactoring legacy projects, putting logic into helpers can also lead to the terrible practice of including them in controllers to keep things &lt;em&gt;DRY&lt;/em&gt;…&lt;/p&gt;

&lt;h2 id=&quot;presenters-to-the-rescue&quot;&gt;Presenters to the rescue&lt;/h2&gt;

&lt;p&gt;Presenters are a popular programming pattern, and there’s an abundance of gems that implement it. But, in this tutorial, I’ll describe a from-scratch approach.&lt;/p&gt;

&lt;h3 id=&quot;just-one-more-gem&quot;&gt;Just one more gem?&lt;/h3&gt;

&lt;p&gt;Based on the experience from my &lt;a href=&quot;/#rails-performance-tuning&quot;&gt;Rails performance audits&lt;/a&gt;, memory issues are the most common obstacle for projects to achieve adequate performance and scalability. And overusing gem dependencies is a simple way to unnecessarily bloat a Rails app memory usage. I mention memory issues because a not-so-long-ago popular &lt;a href=&quot;https://github.com/drapergem/draper&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Draper gem&lt;/a&gt; is infamous for its elevated memory consumption. Apparently, it’s no longer maintained with the last commit older than a year ago. There are successors to Draper improving on its shorcommings. But, adding a gem is always a risky investment, so in this tutorial, we’ll focus on a custom solution.&lt;/p&gt;

&lt;h3 id=&quot;implementing-rails-presenters-from-scratch&quot;&gt;Implementing Rails presenters from scratch&lt;/h3&gt;

&lt;p&gt;Let’s start by defining a module:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;app/models/concerns/presentable.rb&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Presentable&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decorate&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Presenter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;constantize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and now include it in your model:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;app/models/user.rb&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Presentable&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Presentable&lt;/code&gt; module uses Ruby metaprogramming to dynamically define a presenter class. It enforces a naming convention for presenter files. Let’s now create one:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;app/presenters/user_presenter.rb&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserPresenter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SimpleDelegator&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActionView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Helpers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TextHelper&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unread_notifications_text&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;unread_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notifications&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;unread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unread_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;You don't have unread notifications.&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;s2&quot;&gt;&quot;You have %{unread_count} unread %{pluralize(unread_count, 'notification')}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It inherits a &lt;a href=&quot;https://ruby-doc.org/stdlib-2.5.1/libdoc/delegate/rdoc/SimpleDelegator.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SimpleDelegator&lt;/code&gt; class&lt;/a&gt; and is instantiated with the model object itself. It means that all the method calls will well &lt;em&gt;delegate&lt;/em&gt; to the original. Now inside the controller, your can use your presenter like that:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;app/controllers/users_controller.rb&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UsersController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:decorate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;By calling &lt;code class=&quot;highlighter-rouge&quot;&gt;decorate&lt;/code&gt; on &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; model instances, you’re wrapping them inside a &lt;code class=&quot;highlighter-rouge&quot;&gt;UserPresenter&lt;/code&gt; class and extending their API. You can interact with the new objects like before but also use all the methods defined inside a presenter.&lt;/p&gt;

&lt;p&gt;This approach allows encapsulating logic related to the view layer in a separate file and helps to keep your model files from bloating their size.&lt;/p&gt;

&lt;p&gt;Compared to a dedicated gem, this method is lightweight on memory and complexity. Just a few lines of metaprogramming and Ruby &lt;em&gt;stdlib&lt;/em&gt; in action.&lt;/p&gt;

&lt;h2 id=&quot;testing-presenters&quot;&gt;Testing presenters&lt;/h2&gt;

&lt;p&gt;As previously mentioned, since our presenters are &lt;em&gt;POROs&lt;/em&gt; (Plain Old Ruby Objects), it’s straightforward to test them. Here’s a sample spec for our logic:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;spec/presenters/user_presenter_spec.rb&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rails_helper&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UserPresenter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;decorate&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;notifications: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:notification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:notification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#unread_notifications_text&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;unread_notifications_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2 unread notifications&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see, we can test view-related logic without the usual overhead of view specs. There’s no need to authenticate the user, stub session state, render views, or launch a test browser. While high-level integration tests also have their value and place, testing more complex edge cases is usually an order of magnitude simpler with low-level unit tests.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Implementing presenters can be a relatively simple introduction to programming patterns that are not part of an &lt;em&gt;orthodox Rails way&lt;/em&gt;. Organising codebase in a way that focuses on the logical &lt;em&gt;layers&lt;/em&gt; of application is an approach that works for MVPs and also scales for more complex Rails projects.&lt;/p&gt;
</description>
        <pubDate>Mon, 03 Oct 2022 11:39:06 +0200</pubDate>
        <link>https://pawelurbanek.com/rails-presenter-pattern</link>
        <guid isPermaLink="true">https://pawelurbanek.com/rails-presenter-pattern</guid>
      </item>
    
      <item>
        <title>5 Easy to Miss Security Best Practices for Web Apps</title>
        <description>&lt;p&gt;Worrying about your app’s quantum resistance is a perfectly legitimate concern. But, in this blog post, I’ll take a step back and describe and few simple but easy-to-overlook security tips. In many cases, a single line of config can protect your web application from a range of attacks.&lt;/p&gt;

&lt;p&gt;Of course, even having all the described solutions in place does not mean that your app is now &lt;em&gt;secure&lt;/em&gt;. But, without them, the scope of a potential attack is significantly larger.&lt;/p&gt;

&lt;h2 id=&quot;1-http-security-headers&quot;&gt;1. HTTP security headers&lt;/h2&gt;

&lt;p&gt;These headers are usually the first thing that I check when conducting my &lt;a href=&quot;/#rails-performance-tuning&quot;&gt;Rails performance and security audits&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center-image&quot; alt=&quot;HTTP security headers check&quot; title=&quot;HTTP security headers check&quot; loading=&quot;lazy&quot; src=&quot;/assets/http-security-headers-f57765eaf06d6280c89265046b0fadf86e3291ebe0debfc4c1f76cfd5e8edb28.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;annotation center&quot;&gt;Sample security headers report from &lt;a class=&quot;link-grey&quot; href=&quot;https://securityheaders.com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;securityheaders.com&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Most of them don’t have to be customized, so improving the app’s security is as simple as adding a config line to your NGINX or backend server.&lt;/p&gt;

&lt;p&gt;One exception is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Content-Security-Policy&lt;/a&gt;. It has to be fine-tuned to allow the external resources your website interacts with. It can be a bit tricky to do manually, but there’s a &lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/laboratory-by-mozilla/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;browser extension by Mozilla&lt;/a&gt;. It automatically generates a correct CSP header value when you click around your website.&lt;/p&gt;

&lt;p&gt;You can check out the linked mdn web docs for more in-depth info about these headers.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Strict-Transport-Security&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Referrer-Policy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;X-Frame-Options&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;X-Content-Type-Options&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-two-factor-authentication&quot;&gt;2. Two-factor authentication&lt;/h2&gt;

&lt;p&gt;Implementing 2FA for your web application can be a challenging process. But, enabling it in services used by your development and support team is usually a matter of a few clicks in the UI. It could be the simplest way to protect your project from a range of account takeover attacks.&lt;/p&gt;

&lt;p&gt;Check out the linked docs explaining how to enable and optionally enforce two-factor authentication in popular services used for web development:&lt;/p&gt;

&lt;p&gt;Slack - &lt;a href=&quot;https://slack.com/help/articles/204509068-Set-up-two-factor-authentication&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;enable 2FA&lt;/a&gt;, &lt;a href=&quot;https://slack.com/help/articles/212221668-Mandatory-workspace-two-factor-authentication-&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;mandatory 2FA&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GitHub - &lt;a href=&quot;https://docs.github.com/en/authentication/securing-your-account-with-two-factor-authentication-2fa/configuring-two-factor-authentication&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;enable 2FA&lt;/a&gt;, &lt;a href=&quot;https://docs.github.com/en/organizations/keeping-your-organization-secure/managing-two-factor-authentication-for-your-organization/requiring-two-factor-authentication-in-your-organization&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;mandatory 2FA&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Heroku - &lt;a href=&quot;https://devcenter.heroku.com/articles/multi-factor-authentication&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;enable 2FA&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS - &lt;a href=&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_enable_virtual.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;enable 2FA&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Discord - &lt;a href=&quot;https://support.discord.com/hc/en-us/articles/219576828-Setting-up-Two-Factor-Authentication&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;enable 2FA&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I usually recommend storing 2FA codes in &lt;a href=&quot;https://1password.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;1Password&lt;/a&gt; and only using a separate device or a &lt;a href=&quot;https://www.yubico.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;YubiKye&lt;/a&gt; as a second factor for 1Password itself. 1Password offers seamless login integration via browser extensions and also protects users from phishing attacks by verifying websites.&lt;/p&gt;

&lt;h2 id=&quot;3-email-security-features&quot;&gt;3. Email security features&lt;/h2&gt;

&lt;p&gt;If your domain is used to send emails, you should make sure that you’ve correctly configured &lt;strong&gt;SPF&lt;/strong&gt; (Sender Policy Framework), &lt;strong&gt;DKIM&lt;/strong&gt; (DomainKeys Identified Mail), and &lt;strong&gt;DMARC&lt;/strong&gt; (Domain-based Message Authentication Reporting and Conformance). Correctly configuring them all will prevent your company from email spoofing, i.e., malicious actors and spammers trying to impersonate it. Explaining these security mechanisms in detail and how to configure them is beyond the scope of this blog post. Check out the linked Cloudflare docs for more info. But, here’s a one-sentence recap:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SPF&lt;/strong&gt; works like an allowlist for sources that should be able to send emails from your domain. &lt;a href=&quot;https://www.cloudflare.com/learning/dns/dns-records/dns-spf-record/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;[More info]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DKIM&lt;/strong&gt; allows to cryptographically verify that the email was generated by origin configured in the DNS records. &lt;a href=&quot;https://www.cloudflare.com/learning/dns/dns-records/dns-dkim-record/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;[More info]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DMARC&lt;/strong&gt; describes a policy on how other servers should treat emails originating from your domain. &lt;a href=&quot;https://www.cloudflare.com/learning/dns/dns-records/dns-dmarc-record/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;[More info]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here you can verify if your domain is already protected:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.dmarcanalyzer.com/spf/checker/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;SPF checker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.dmarcanalyzer.com/dkim/dkim-checker/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;DKIM checker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.dmarcanalyzer.com/dmarc/dmarc-record-check/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;DMARC checker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All these security features are configured at the DNS level. For DKIM, an additional config is needed at the email provider, so check their respective docs.&lt;/p&gt;

&lt;p&gt;Even, or especially, if your domain is not used to send emails, you can explicitly deny it using a &lt;a href=&quot;https://www.cloudflare.com/learning/dns/dns-records/protect-domains-without-email/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;correct DMARC policy&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;4-transfer-files-securely&quot;&gt;4. Transfer files securely&lt;/h2&gt;

&lt;p&gt;Company chat is usually the go-to way to share data, unfortunately even sensitive one. Without a more sophisticated security policy around what 3rd party integrations can be connected to your chat app, it could be a source of a critical data leak. For example a malicious chat plugin could request read access to public channel messages, and your company policy did not enforce limits on who can connect similar tools. Chat apps are also not immune to security breaches, so distrusting them is a sensible default.&lt;/p&gt;

&lt;p&gt;Even sharing sensitive data via email should probably be discouraged. Attachments stay forever on 3rd party servers, so any account takeover would grant attackers access to all the data.&lt;/p&gt;

&lt;p&gt;Establishing a framework for securely sharing sensitive data could save your company from unnecessary trouble. One tool that serves this purpose is &lt;a href=&quot;https://github.com/magic-wormhole/magic-wormhole&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Magic Wormhole&lt;/a&gt;. It is relatively simple to use even by less technical members of a team. You can share files via a direct connection using a one-time passphrase, and data is not persisted anywhere.&lt;/p&gt;

&lt;p&gt;A commercial alternative could be to sync files via shared 1Password vaults. But compared to Magic Wormhole, the shared files are kept in the vault unless explicitly removed.&lt;/p&gt;

&lt;h2 id=&quot;5-aws-iam-policies&quot;&gt;5. AWS IAM policies&lt;/h2&gt;

&lt;p&gt;Many web apps use AWS just to interact with a single S3 bucket. Unfortunately, some tutorials recommend using &lt;code class=&quot;highlighter-rouge&quot;&gt;AdministratorAccess&lt;/code&gt; or even AWS root user credentials as a &lt;em&gt;quick and easy&lt;/em&gt; way to connect your web app to AWS. Granting your web app an admin AWS access could have critical consequences. Especially if the same AWS account is shared by multiple apps. A single compromised application could access or even irreversible remove data from different projects. Or your credit card could be drained by a Bitcoin mining bot.&lt;/p&gt;

&lt;p&gt;If your app is talking to a single S3 bucket, then you should probably use IAM user credentials with a similar custom policy:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2012-10-17&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Statement&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Effect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Allow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;s3:ListBucket&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Resource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arn:aws:s3:::your-bucket-name&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Effect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Allow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;s3:PutObject&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;s3:GetObject&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;s3:DeleteObject&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;s3:PutObjectAcl&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Resource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arn:aws:s3:::your-bucket-name/*&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out &lt;a href=&quot;/s3-iam-config&quot;&gt;my other blog post&lt;/a&gt; for a step-by-step guide on configuring S3 IAM policies. It is written in the context of Ruby on Rails but is applicable to all the backend tech stacks.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Implementing any of the above tips should not take more than a few hours. Yet, they protect from attacks with potentially critical consequences.&lt;/p&gt;

</description>
        <pubDate>Tue, 21 Jun 2022 03:14:31 +0200</pubDate>
        <link>https://pawelurbanek.com/web-security-tips</link>
        <guid isPermaLink="true">https://pawelurbanek.com/web-security-tips</guid>
      </item>
    
      <item>
        <title>How I've made $50,000 Profit from a Side Project Anonymous Slack Bot</title>
        <description>&lt;p&gt;My side project, Slack app &lt;a href=&quot;https://abot.app&quot; target=&quot;_blank&quot;&gt;Abot&lt;/a&gt;, has recently crossed a milestone of $50,000 in total profit. For the last two years, it has been running mostly on autopilot. In this post, I describe how I operate a profitable SAAS as a solo founder and how passive income has affected my career.&lt;/p&gt;

&lt;h2 id=&quot;current-mrr-and-usage-stats&quot;&gt;Current MRR and usage stats&lt;/h2&gt;

&lt;p&gt;&lt;img class=&quot;center-image&quot; alt=&quot;Abot total profit after 5+ years&quot; title=&quot;Abot total profit after 5+ years&quot; loading=&quot;lazy&quot; src=&quot;/assets/total-abot-profit-e00adfdb3e7a4f09a08431b96652faa0441a82055e4c837964f51679cd6c68bc.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;center annotation&quot;&gt;Total Abot profit so far&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Abot is a highly customizable Slack plugin for sending anonymous messages and polls. I released the first version in May 2017 as a free-to-use weekend project. It received initial commercial traction in the March of 2018 after &lt;a href=&quot;https://news.ycombinator.com/item?id=16616991&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;getting featured on HackerNews&lt;/a&gt;. I’ve since introduced subscription-based pricing and kept adding new features apart from working a full-time job. You can check out these two posts for more details about &lt;a href=&quot;/profitable-slack-bot-rails&quot;&gt;the app’s origin&lt;/a&gt; and its &lt;a href=&quot;/side-project-profit&quot;&gt;road to crossing $10k total profit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Just before Covid hit, I decided to quit my job and take a few months off. At that time, Abot monthly recurring revenue (MRR) was ~$1.5k, so not quite enough to make a comfortable living. But, pandemics and the remote working revolution did impact the demand for communication-enhancing tools. Within a few months, after we all got locked up, the MRR almost doubled, thus reaching the &lt;em&gt;ramen profitability&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center-image&quot; alt=&quot;Current MRR of my Slack bot&quot; title=&quot;Current MRR of my Slack bot&quot; loading=&quot;lazy&quot; src=&quot;/assets/abot-mrr-7184849a2592fdc76525e2f2a354b0c5a4b88a8783377af0d2525e01a4f1dcd3.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;center annotation&quot;&gt;Can you spot the start of pandemics on this MRR chart?&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;MRR recently declined from 5k to 4k USD. But, this metric includes yearly plans, so the actual monthly transfers from &lt;a href=&quot;https://paddle.com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Paddle.com&lt;/a&gt; oscillate between 3k-6k USD.&lt;/p&gt;

&lt;p&gt;Here’s a profit distribution per subscription plan:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center-image&quot; alt=&quot;Abot profit per plan type&quot; title=&quot;Abot profit per plan type&quot; loading=&quot;lazy&quot; src=&quot;/assets/abot-plans-profit-2-e8d97998618a024a9cc0af045453b45e961c79f1dce8e217f69a9164dd1ec6f4.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;center annotation&quot;&gt;The chart does not include profit for teams with over 500 users&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;So far, the app has been installed by over 5k Slack teams and is featured in &lt;a href=&quot;https://slack.com/apps/category/At0EFT6813-brilliant-bots&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Slack brilliant bots&lt;/a&gt; category. It has close to 100 paying Slack teams, ranging from 10 to over 4k users, and a similar number of free-of-charge teams. Since the start of Covid, I offer free plans for education purposes, and Abot is now used in classes at universities across the globe.&lt;/p&gt;

&lt;h2 id=&quot;memoirs-of-a-solo-founder&quot;&gt;Memoirs of a solo founder&lt;/h2&gt;

&lt;p&gt;Being a solo founder is a double-edged sword. My productivity is often off the charts compared to when I’ve worked in a team. I know the codebase by heart, I don’t have to consult requirements or write tickets. No standup calls… Communication overhead is always a significant portion of software development. Working alone, you skip it entirely. The fun of just coding without all the formalities has always dragged me to spend way too much time on my side projects.&lt;/p&gt;

&lt;p&gt;But, I’ve missed out on obvious improvements that would have been spotted much earlier if the project had a co-founder. It’s hard to keep a fresh perspective when you’ve worked on the same app for so long.&lt;/p&gt;

&lt;p&gt;What helps me are demo calls for potential clients. Instead of doing the demo myself, I’ve started asking clients to show me how they’re trying to use the app. It’s &lt;em&gt;extremely&lt;/em&gt; frustrating (&lt;em&gt;“Just click THERE…“&lt;/em&gt;). But, a single &lt;em&gt;reversed-demo call&lt;/em&gt; allowed me to understand how cumbersome was app’s messaging UX. As a result, I’ve recently released significant fixes to how the app works that seem so obvious now. I’ve completed the &lt;a href=&quot;https://www.startupschool.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Y Combinator Startup School course&lt;/a&gt;, and they’ve repeated &lt;em&gt;“Talk to your clients…“&lt;/em&gt; like a mantra. I thought I &lt;em&gt;was&lt;/em&gt; by doing a few demo calls each month. But, only actually seeing the potential client trying to use the app was an eye-opening experience.&lt;/p&gt;

&lt;p&gt;As a solo founder, another tool that works for me is so-called &lt;em&gt;mastermind&lt;/em&gt; groups. It’s a formula for regular peer-to-peer mentoring sessions between founders of different projects. For me, it’s two distinct groups of 3 to 5 members, meeting for hour-long monthly sessions. My mom and girlfriend are proud of each release that I tell them about. But, confronting your ideas with someone who’s also a builder often produces invaluable feedback.&lt;/p&gt;

&lt;h2 id=&quot;the-impact-of-passive-income&quot;&gt;The impact of passive income&lt;/h2&gt;

&lt;p&gt;$4k MRR is not even enough to hire a full-time dev to work on a project. And it took over five years to get there. For most startups, similar results would probably be a total failure and lights out. But, Abot is an &lt;em&gt;indie&lt;/em&gt; project, so the math plays out differently.&lt;/p&gt;

&lt;p&gt;After I quit my job, the passive income allowed me to focus on building my &lt;a href=&quot;/#rails-performance-tuning&quot;&gt;Rails performance consulting&lt;/a&gt; offer, writing &lt;a href=&quot;/heroku-migrate-postgres-rds&quot;&gt;my first eBook&lt;/a&gt; and exploring the area of web3 development. It took over a year of focused effort for my Rails audits to turn into a predictable stream of revenue. Without the passive income generated by Abot I’d have to give up and go back to working 9-5. Instead of being an end goal in itself, Abot served as a launch pad for a career path that would otherwise never be possible.&lt;/p&gt;

&lt;p&gt;If you have ever considered making a transiting to working as a consultant, I highly recommend &lt;a href=&quot;https://jonathanstark.com/hbin&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Hourly Billing is Nuts by Jonathan Stark&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;putting-things-on-autopilot&quot;&gt;Putting things on autopilot&lt;/h2&gt;

&lt;p&gt;Abot is sitting on AWS, and the monthly cost of EC2, RDS, and Cloudflare are ~$50. Required time involvement for occasional demo calls, invoicing, security updates, and housekeeping is around 5 hours a month. Many of the improvements I’ve released in the last two years were not user-facing but rather about making the project more self-sustainable.&lt;/p&gt;

&lt;p&gt;Abot is making a profit, so you might be wondering why did I stop investing more time into it?&lt;/p&gt;

&lt;p&gt;For over a year after I quit my last full-time job, I spent tens of hours each month on &lt;em&gt;growth hacking&lt;/em&gt;. Elaborate SEO research, reaching out to bloggers, Product Hunt releases, I even hired a marketing agency… The measurable impact in the number of signups and conversion rate was close to nothing.&lt;/p&gt;

&lt;p&gt;Abot codebase is relatively easy to work with. In theory, I could bombard the app with new features. But, since the beginning, I’ve used a simple filter on which requested features to add. If a potential client suggested a &lt;em&gt;“nice to have”&lt;/em&gt; change, I would implement it if they purchase yearly access on a promise to deliver this improvement. The app is already significantly complex, with elaborate customization options. But, thanks to this simple rule, I’m sure that each of these buttons and dials delivers value to at least a single paying customer.&lt;/p&gt;

&lt;p&gt;Overcomplicating the app and making it impossible for a regular client to understand is just too easy.&lt;/p&gt;

&lt;p&gt;So the project’s current status is that I’m out of ideas on how to boost its growth. I’d even risk saying that it is now &lt;em&gt;feature complete&lt;/em&gt;. But, so I thought about the first version that I hacked over the weekend. And here we are, over 2k commits later.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center-image&quot; alt=&quot;Abot git commits after 5+ years&quot; title=&quot;Abot git commits after 5+ years&quot; loading=&quot;lazy&quot; src=&quot;/assets/abot-commits-v2-b60fb76678c33bd31e1225f58d24322ca4514b3338b78942c15626addab5a639.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;When I started Abot those five years ago, I never thought it would make any money. I was just sick of pointless meetings, and it was my over-engineered way to say it.&lt;/p&gt;

&lt;p&gt;I’ve released &lt;a href=&quot;https://apki.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;a dozen commercial side projects&lt;/a&gt;. Most of them suck up hundreds of hours, made a few dollars and died out. But every $ they made has always &lt;em&gt;felt&lt;/em&gt; different than my 9-5 salary. Abot is the only one that kind of made it. 50k profit might seem like a lot. But if you divide it by the nolife after work hours I’ve spent to generate this &lt;em&gt;“passive”&lt;/em&gt; income, you’d hardly get a junior dev hourly rate. But it’s fun.&lt;/p&gt;
</description>
        <pubDate>Tue, 07 Jun 2022 10:30:55 +0200</pubDate>
        <link>https://pawelurbanek.com/anonymous-slack-bot-income</link>
        <guid isPermaLink="true">https://pawelurbanek.com/anonymous-slack-bot-income</guid>
      </item>
    
      <item>
        <title>How to Create ERC20 Meme Token and Bootstrap Uniswap Liquidity</title>
        <description>&lt;p&gt;I’ve recently learned that taking investment advice from Hard Rock Nick is not always lucrative… In this blog post, I’ll describe a step-by-step process for releasing an ERC20 meme token on the Ethereum network. Additionally, we’ll make our token tradeable by bootstrapping liquidity on permissionless AMM Uniswap contracts. I’ll also demonstrate how to manipulate the initial capitalization so that you can instantly become a crypto millionaire. By creating a token, you can better understand the inner workings of crypto scam schemes. And distinguish potentially genuine projects from outright scams.&lt;/p&gt;

&lt;p&gt;We’ll use the OpenZeppelin wizard to create our token ERC20 Smart Contract, so the knowledge of Solidity is not required to complete this tutorial. I’ve deployed the contracts on the ETH Rinkeby test network. But I also describe estimates of gas costs for releasing on the Ethereum Mainnet and Arbitrum L2 sidechain.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclaimer: The information provided is for educational purposes only and should not be treated as investment advice. In no event shall the author be liable for legal or financial consequences of implementing anything described in this blog post.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-to-create-an-erc20-token-without-knowing-solidity&quot;&gt;How to create an ERC20 token without knowing Solidity?&lt;/h2&gt;

&lt;p&gt;ERC20 is the backbone of the DeFi industry. Creating an ERC20 token in practice means deploying an Ethereum Smart Contract that implements methods and events &lt;a href=&quot;https://eips.ethereum.org/EIPS/eip-20&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;described in the standard&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decimals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;uint8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;totalSupply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;uint256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;balanceOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;uint256&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;balance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;transfer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uint256&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;transferFrom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uint256&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;approve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_spender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uint256&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;allowance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_spender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;uint256&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;remaining&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Transfer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;indexed&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;indexed&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uint256&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Approval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;indexed&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;indexed&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_spender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uint256&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;annotation center&quot;&gt;ERC20 interface in Solidity programming language.&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The Smart Contract works as a ledger storing token balances and implements methods for transferring tokens between addresses. Author of the contract can implement any feature and monetary policy. But, as long as it adheres to the ERC20 interface, a token will be able to interact with the existing DeFi projects and infrastructure. For this tutorial, we’ll generate the simplest possible token using the open-source &lt;a href=&quot;https://docs.openzeppelin.com/contracts/4.x/wizard&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;OpenZeppelin wizard&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center-image&quot; alt=&quot;OpenZeppelin wizard can be used to generate ERC20 smart contract code&quot; title=&quot;OpenZeppelin wizard can be used to generate ERC20 smart contract code&quot; loading=&quot;lazy&quot; src=&quot;/assets/openzeppelin-wizard-8129c35bd040d276a8b27bb588be34a30707dabc53e1ab0dc65a800f26a21b5e.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;annotation center&quot;&gt;OpenZeppelin smart contract wizard&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;We’ll call our token &lt;em&gt;NAR&lt;/em&gt; (&lt;em&gt;“Not a Rug”&lt;/em&gt;). Just to convince potential buyers that it is a genuine web3 project and not a quick money grab scheme.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center-image&quot; alt=&quot;NAR carpet icon&quot; title=&quot;NAR carpet icon&quot; loading=&quot;lazy&quot; src=&quot;/assets/carpet-icon-e9523c44c3a09e3ca80337aaa4bf75fed5634997cb99447deee0961b129d5e10.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;annotation center&quot;&gt;I drew this carpet icon so let's use it for marketing&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, we’ve did not choose any of the optional features. You should have generated a similar source code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// SPDX-License-Identifier: MIT&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;pragma&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;solidity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;@openzeppelin/contracts/token/ERC20/ERC20.sol&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;contract&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyToken&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ERC20&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ERC20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NotARug&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;NAR&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;_mint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decimals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’ve chosen a fixed capitalization of one million units. All the initial supply will be minted to the address of the contract deployer. By default, ERC20 tokens support floating-point precision up to 18 decimals, so they are almost infinitely divisible.&lt;/p&gt;

&lt;p&gt;You’ll need a &lt;a href=&quot;https://metamask.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Metamask wallet&lt;/a&gt; with some testnet Ether to deploy the contract. You can use &lt;a href=&quot;https://rinkebyfaucet.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Rinkeby Faucet by Alchemy&lt;/a&gt; to fund your address with 0.1 ETH (or 0.5 if you have a free Alchemy account). But even 0.1 ETH will be enough to complete most of the steps from this tutorial. I’m kind of a Rinkeby testnet whale myself (10+ ETH \o/ ) because I’ve used the currently not working &lt;a href=&quot;https://faucet.rinkeby.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Rinkeby Authenticated Faucet&lt;/a&gt;. I’m leaving the link for reference. Maybe it will be restored by the time you’re reading this.&lt;/p&gt;

&lt;p&gt;Now back in OpenZeppelin wizard, click &lt;strong&gt;Open in Remix&lt;/strong&gt;. Next click &lt;strong&gt;Compile contract-xxx.sol&lt;/strong&gt;. Then select the Ether icon indicating &lt;strong&gt;Deploy &amp;amp; run transactions&lt;/strong&gt; from the side menu.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center-image&quot; alt=&quot;Remix contract deployment menu&quot; title=&quot;Remix contract deployment menu&quot; loading=&quot;lazy&quot; src=&quot;/assets/remix-deploy-ui-2935de85c885a8eac663f4e002ac449e7e14a8c26775156a2e56c3fe53bdd70e.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;annotation center&quot;&gt;Remix contract deployment menu&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;After choosing &lt;strong&gt;Injected Web3&lt;/strong&gt; for &lt;strong&gt;Environment&lt;/strong&gt;, your Metamask extension should pop up and prompt authentication. Make sure to select the correct network and contract to deploy. I’ve made the mistake of deploying a base ERC20 contract instead of my custom one a few times. After clicking &lt;strong&gt;Deploy&lt;/strong&gt;, you’ll need to confirm the transaction at Metamask.&lt;/p&gt;

&lt;p&gt;If you’re deploying on testnet, there will be no cost associated. By changing the network in Metamask, you can get an estimate for deployment costs. Deploying this contract on the Ethereum Mainnet is estimated to cost ~$200 at gas prices ~50 gwei. Deploying to &lt;a href=&quot;https://arbitrum.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Abritrum L2&lt;/a&gt; costs ~$50. &lt;a href=&quot;https://web3-tools.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;web3-tools&lt;/a&gt; can be helpful if you want to estimate transaction costs without Metamask simulation.&lt;/p&gt;

&lt;p&gt;When you feel ready, click &lt;strong&gt;Deploy&lt;/strong&gt;, and a few moments later, your contract should be live. Here’s my &lt;a href=&quot;https://rinkeby.etherscan.io/address/0x4312d187ff00d961d68d460efdc23fc429b6487a#code&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;em&gt;NAR&lt;/em&gt; token deployed on the Rinkeby network&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You’ve probably noticed that this contract is verified, i.e., its source code can be read on Etherscan. The open-source nature of smart contracts is at the very core of the DeFi industry. Verifying a contract using OpenZeppelin as a dependency requires a few-step process. Check out this &lt;a href=&quot;https://forum.openzeppelin.com/t/how-to-verify-with-hardhat-or-truffle-a-smart-contract-using-openzeppelin-contracts/4119&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;OpenZeppelin forum thread&lt;/a&gt; for info on how to do it.&lt;/p&gt;

&lt;p&gt;An optional step is to add your new token and its icon to Metamask. You can generate a link for sharing your token Metamask metadata on &lt;a href=&quot;https://vittominacori.github.io/watch-token/create/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;this website&lt;/a&gt;. Here’s the link to &lt;a href=&quot;https://vittominacori.github.io/watch-token/page/?hash=0x7b2261646472657373223a22307834333132643138376666303064393631643638643436306566646332336663343239623634383761222c226c6f676f223a2268747470733a2f2f692e696d6775722e636f6d2f3548374a6b4f532e706e67227d&amp;amp;network=rinkeby&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;add &lt;em&gt;NAR&lt;/em&gt; on the Rinkeby network&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center-image&quot; alt=&quot;Metamask custom token&quot; title=&quot;Metamask custom token&quot; loading=&quot;lazy&quot; src=&quot;/assets/metamask-custom-token-b3cdafeaa42be84a9d120e524a304fceb0da57d6db19b2b0dbb7406945ff265b.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;annotation center&quot;&gt;The custom token icon displayed in the Metamask wallet&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;If you’ve followed this tutorial, one million units of your very own token are now sitting in your Metamask wallet. But the token still cannot be traded, so it’s currently worthless. Read on to learn how to make it tradeable and &lt;em&gt;hack&lt;/em&gt; its initial capitalization.&lt;/p&gt;

&lt;h2 id=&quot;intro-to-uniswap-automated-market-maker-liquidity-pools&quot;&gt;Intro to Uniswap Automated Market Maker liquidity pools&lt;/h2&gt;

&lt;p&gt;Back in the 2017 ICO days, it was only possible to trade less popular tokens on shady centralized exchanges. &lt;a href=&quot;https://uniswap.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Uniswap&lt;/a&gt; revolutionized trading on the Ethereum network by providing a permissionless platform for exchanging ERC20 tokens. The original idea came from &lt;a href=&quot;https://old.reddit.com/r/ethereum/comments/55m04x/lets_run_onchain_decentralized_exchanges_the_way/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;the Reddit post by Vitalik Buterin&lt;/a&gt; describing a mathematical formula for liquidity pools. The idea is always to maintain an equal ratio of tokens in the pool contract that is represented by the constant product market maker formula:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;A * B = k&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Where &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt; are values of tokens and &lt;code class=&quot;highlighter-rouge&quot;&gt;k&lt;/code&gt; is a constant that is not affected by trades. To buy a token &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt;, user has to deposit equal value of token &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt; so that &lt;code class=&quot;highlighter-rouge&quot;&gt;k&lt;/code&gt; remains constant. The value of &lt;code class=&quot;highlighter-rouge&quot;&gt;k&lt;/code&gt; is changed only if users add/remove liquidity to the pool, i.e., deposit/withdraw their tokens in a proportion reflecting the current price. Users are incentivized to provide liquidity to earn trading fees and optional token rewards. You can check out &lt;a href=&quot;https://www.youtube.com/watch?v=cizLhxSKrAc&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;this video by Finematics&lt;/a&gt; for an excellent intro to liquidity pools and AMMs. If the AMM tokens are traded on other markets, then an army of arbitrage bots is rebalancing the amount of tokens, so the AMM pool always reflects the current market price.&lt;/p&gt;

&lt;p&gt;But, in the case of &lt;em&gt;NAR&lt;/em&gt;, Uniswap AMM will be the ultimate source of truth for the current market value. And here comes the promised &lt;em&gt;capitalization hack&lt;/em&gt;: If you’re creating a new trading pool, you can determine the initial market price of your token.&lt;/p&gt;

&lt;h2 id=&quot;providing-initial-uniswap-liquidity-for-erc20-token&quot;&gt;Providing initial Uniswap liquidity for ERC20 token&lt;/h2&gt;

&lt;p&gt;You can create a new Uniswap V2 token pool &lt;a href=&quot;https://app.uniswap.org/#/add/v2&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;on this website&lt;/a&gt;. You have to select tokens, and if this pair has not existed before, a new &lt;code class=&quot;highlighter-rouge&quot;&gt;UniswapV2Pair&lt;/code&gt; pool contract will be deployed. Here’s a link to the &lt;a href=&quot;https://rinkeby.etherscan.io/tx/0x43aa19f931346b28b50f539ca91ca08f0389970ea8935aaefb1905df6c888b10&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;transaction creating&lt;/a&gt; &lt;a href=&quot;https://rinkeby.etherscan.io/address/0x6defeb5f82bef614120d7b59449578f37a61815e#code&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;NAR/ETH Uniswap pool&lt;/a&gt; on the Rinkeby network. Gas usage was ~3x higher than the deployment of our ERC20 contract. It means that the cost of doing it on the Mainnet would be ~$600 and ~$150 on Arbitrum.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center-image&quot; alt=&quot;Bootstrapping liquidity on Uniswap&quot; title=&quot;Bootstrapping liquidity on Uniswap&quot; loading=&quot;lazy&quot; src=&quot;/assets/uniswap-initial-liquidity-aca8a3f03ebb6ed835cfa17444fa3377ee4d11bf13f9d475292c749d4d1f3546.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;annotation center&quot;&gt;Creating a new Uniswap token pair&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;For me, that’s the mindblowing feature of permissionless exchanges. Without any formal verification, we’ve just deployed a contract that will forever exist on the blockchain and let everyone buy and sell token that we’ve created. Uniswap may ban and remove some tokens from the frontend layer. Or be banned entirely in a geographical region. But, the pool contract will always be accessible directly in the blockchain, and it’s impossible to censor it. Maybe most of the current use cases of crypto are speculation and scams. But, its uncensorable nature makes me believe that we’re still early &lt;em&gt;adaptooors&lt;/em&gt;, and this paradigm is just getting started.&lt;/p&gt;

&lt;p&gt;Back to the point, you have to provide liquidity in a ratio that will reflect the initial price. In this case, I’ve deposited 10 ETH and 10k NAR. So one full NAR is initially priced at ~$3.50, and the total market cap is over 3 million USD (!!). Currently, 1% of total NAR capitalization is the liquidity, and we’re sitting on the hefty 99%.&lt;/p&gt;

&lt;p&gt;So, apparently, we’ve just printed these three million dollars out of thin air. But there’s a catch. Let’s see what’s the selling price of NAR depending on trade volume. The below table assumes ETH price at $3500 and initial pool liquidity to be ~$70k (10 ETH + 10k NAR).&lt;/p&gt;

&lt;table style=&quot;width:100%&quot;&gt;
  &lt;tr&gt;
    &lt;th&gt;Trade volume (NAR)&lt;/th&gt;
    &lt;th&gt;NAR/1 ETH&lt;/th&gt;
    &lt;th&gt;USD/1 NAR&lt;/th&gt;
    &lt;th&gt;Price impact (%)&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;100&lt;/td&gt;
    &lt;td&gt;1013&lt;/td&gt;
    &lt;td&gt;$3.45&lt;/td&gt;
    &lt;td&gt;0.98%&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;1000&lt;/td&gt;
    &lt;td&gt;1053&lt;/td&gt;
    &lt;td&gt;$3.32&lt;/td&gt;
    &lt;td&gt;9.04%&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;2000&lt;/td&gt;
    &lt;td&gt;1203&lt;/td&gt;
    &lt;td&gt;$2.90&lt;/td&gt;
    &lt;td&gt;16.58%&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;5000&lt;/td&gt;
    &lt;td&gt;1503&lt;/td&gt;
    &lt;td&gt;$2.32&lt;/td&gt;
    &lt;td&gt;33.17%&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;90000&lt;/td&gt;
    &lt;td&gt;10000&lt;/td&gt;
    &lt;td&gt;$0.40&lt;/td&gt;
    &lt;td&gt;89.70%&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;You can see that we cannot sell any significant ratio of our holdings without crashing the price. Creators of new tokens always need so-called &lt;em&gt;“exit liquidity”&lt;/em&gt; to capitalize their bags. What we did was kind of equivalent to auctioning your hand-drawn NFT on OpenSea for an insanely high minimum price. But NAR is a &lt;em&gt;fungible&lt;/em&gt; token, so there’s a better illusion of it holding the manipulated value. If you bootstrapped liquidity on non-test networks and overpriced one of the tokens, arbitrageurs would take advantage of the opportunity. But, since you’re currently the only NAR owner, there’s no way to sell the token but only purchase it for the &lt;em&gt;hacked&lt;/em&gt; price.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center-image&quot; alt=&quot;Pepe slap meme&quot; title=&quot;Pepe slap meme&quot; loading=&quot;lazy&quot; src=&quot;/assets/pepe-slap-e3553d4c8edefd3080a9b39a5486755ab69fc4eac7d53a51647cd0101f143bc2.jpg&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Now that we understand the basics of ERC20 and decentralized markets, we’re better equipped to detect scams that are not even trying to look genuine.&lt;/p&gt;

&lt;h2 id=&quot;analyzing-meme-coin-projects&quot;&gt;Analyzing meme coin projects&lt;/h2&gt;

&lt;p&gt;Am I the only one who invested in the cutest meme coin that turned out to be a rug?  This is by no means a comprehensive guide to analyzing tokens, but rather a quick checklist of areas to look into if you’re interested in a project.&lt;/p&gt;

&lt;h3 id=&quot;1-available-liquidity&quot;&gt;1. Available liquidity&lt;/h3&gt;

&lt;p&gt;Liquidity could be the most critical feature determining if the token should be worth your attention. You might be holding millions worth of the next &lt;em&gt;Doge Floki Moonshot&lt;/em&gt; but unable to sell it without obliterating the price. We’ve seen how dead easy it is to artificially inflate capitalization. A simple way to assess liquidity is to investigate the &lt;strong&gt;Markets&lt;/strong&gt; tab on Coingecko. A &lt;strong&gt;+2% Depth&lt;/strong&gt; metric indicates how much USD worth of a token can be traded without moving price by more than 2%.&lt;/p&gt;

&lt;p&gt;For example, one of the most popular meme coins, &lt;a href=&quot;https://www.coingecko.com/en/coins/shiba-inu#markets&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Shiba Inu&lt;/a&gt;, currently has a market cap of over 13 &lt;em&gt;billion&lt;/em&gt; USD. According to Coingecko, it has a 2% depth of ~two million USD (on trusted markets with some actual trading volume). Let’s compare it to &lt;a href=&quot;https://www.coingecko.com/en/coins/olympus#markets&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Olympus DAO&lt;/a&gt;, a token that pioneered the concept of &lt;em&gt;protocol-owned liquidity&lt;/em&gt;. It currently has a ~450 million USD market cap but almost the same 2% depth as Shiba. So, the liquidity depth to market ratio is over 20x better for Olympus, meaning that it’s an order of magnitude more &lt;em&gt;tradeable&lt;/em&gt; asset.&lt;/p&gt;

&lt;p&gt;For less popular tokens that could be available only on decentralized AMMs, you can always check how much liquidity is in the pool contract. Again, a simple rule is that the more, the better. A bloated market cap with disproportionally shallow liquidity is an obvious red flag against the project.&lt;/p&gt;

&lt;h3 id=&quot;2-source-of-funding&quot;&gt;2. Source of funding&lt;/h3&gt;

&lt;p&gt;Using Etherscan, you can analyze the history of the address which deployed the token’s ERC20 contract. One thing to look into is the source of funding. Popular centralized crypto exchanges with KYC procedures should not raise your suspicions. But if the wallet was initially founded from a &lt;em&gt;mixer&lt;/em&gt;, e.g., &lt;a href=&quot;https://tornado.cash/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Tornado Cash&lt;/a&gt;, it’s highly possible that your money will disappear in a similar way.&lt;/p&gt;

&lt;h3 id=&quot;3-token-distribution&quot;&gt;3. Token distribution&lt;/h3&gt;

&lt;p&gt;Etherscan displays a &lt;strong&gt;Holders&lt;/strong&gt; tab for each ERC20 contract address. It allows you to get a quick overview of top whale holders, what % of token is in liquidity etc. Here’s the distribution of our NAR on Rinkeby:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center-image&quot; alt=&quot;Etherscan displaying token holders&quot; title=&quot;Etherscan displaying token holders&quot; loading=&quot;lazy&quot; src=&quot;/assets/nar-token-distribution-3e379764d888bd30aa21d6621696ec32302135c52223610b64977c12efd077d3.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;annotation center&quot;&gt;Etherscan token holders' distribution&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Similar disproportion should always raise your awareness. It’s possible that top holders could be addresses of centralized exchange, or a &lt;em&gt;black hole&lt;/em&gt; contract, that reduces the token supply. But, if non-contract addresses (EOAs) hold most of the token, you may be dealing with a pump &amp;amp; dump.&lt;/p&gt;

&lt;p&gt;You should also analyze the emission mechanics of the token. The initial batch could have been evenly &lt;em&gt;airdropped&lt;/em&gt; among the community. But, contract owners could still &lt;em&gt;mint&lt;/em&gt; unlimited units of token and dump them on the market. In theory you could check if a contract has a standard &lt;code class=&quot;highlighter-rouge&quot;&gt;mint&lt;/code&gt; method. But, in practice, the inflationary mechanism could be obfuscated in the source code and impossible to detect without knowing Solidity.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;This post is a simplified introduction to the ERC20 standard and what determines a token price and capitalization on the permissionless market. But I hope it will come in handy for scrutinizing your next &lt;em&gt;moonshot investment&lt;/em&gt;. Crypto scams are often insanely elaborate, but even basic analysis might help you avoid the more obvious ones. Or you can create a new, better Shiba.&lt;/p&gt;
</description>
        <pubDate>Mon, 11 Apr 2022 01:34:35 +0200</pubDate>
        <link>https://pawelurbanek.com/erc20-meme-token</link>
        <guid isPermaLink="true">https://pawelurbanek.com/erc20-meme-token</guid>
      </item>
    
      <item>
        <title>How to Run Full Ethereum Geth Node on AWS EC2 with Nginx and SSL</title>
        <description>&lt;p&gt;A full Ethereum node is often necessary for development purposes or if you don’t want to rely on 3rd parties like Infura for blockchain access. Compared to the &lt;em&gt;“Ethereum killers”&lt;/em&gt;, running a full ETH node is relatively affordable and requires only a basic dev ops skillset. In this blog post, I’ll describe a step-by-step process to setup a full Geth node on AWS EC2. We’ll discuss topics including hardware cost and requirements, synchronizing light nodes, and NGNIX proxy for connecting Metamask wallet to your node using a secure HTTPS connection.&lt;/p&gt;

&lt;p&gt;This tutorial covers Geth version &lt;em&gt;1.10.16&lt;/em&gt; on Ubuntu &lt;em&gt;20.04&lt;/em&gt;. Only the first part is specific to AWS. The rest of the steps will be identical on any other Cloud VPS provider or proprietary server running Ubuntu.&lt;/p&gt;

&lt;p&gt;We have a lot of ground to cover, so let’s get started!&lt;/p&gt;

&lt;h2 id=&quot;spinning-up-an-ec2-instance&quot;&gt;Spinning up an EC2 instance&lt;/h2&gt;

&lt;p&gt;Start with provisioning a new EC2 instance. Go to &lt;strong&gt;EC2 &amp;gt; Instances &amp;gt; Launch instances&lt;/strong&gt;. Select &lt;strong&gt;Ubuntu Server 20.04 LTS (HVM), SSD Volume Type&lt;/strong&gt; AMI. In the next step, choose the &lt;strong&gt;m5.large&lt;/strong&gt; (8 GiB RAM, 2 vCPUs) instance type (cost ∼$75/month).&lt;/p&gt;

&lt;p&gt;On Step 3: &lt;strong&gt;Configure Instance Details&lt;/strong&gt; screen, you can leave everything at default values and click &lt;strong&gt;Next: Add storage&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;At the time of writing Ethereum full node needs ~600GB of disk space. Check &lt;a href=&quot;https://ycharts.com/indicators/ethereum_chain_full_sync_data_size&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;the current space requirements&lt;/a&gt; before choosing a disk size. Depending on how long you want to keep the node running, you have to leave some threshold for the new blocks. The current growth rate for full nodes seems to be at ~50GB/month.&lt;/p&gt;

&lt;p&gt;For &lt;strong&gt;Volume type&lt;/strong&gt; choose &lt;strong&gt;General Purpose SSD (gp3)&lt;/strong&gt; with the default IOPS and throughput settings. It is 20% cheaper than the older generation &lt;strong&gt;gp2&lt;/strong&gt; disks. For the purpose of this tutorial, I’ve added 750GB disk, so the monthly cost for storage space would be ~$60. Also, make sure to choose &lt;strong&gt;(default) aws/ebs&lt;/strong&gt; encryption.&lt;/p&gt;

&lt;p&gt;Now click &lt;strong&gt;Next: Add Tags&lt;/strong&gt; and &lt;strong&gt;Next: Configure Security Group&lt;/strong&gt;. On this screen, select &lt;strong&gt;Create a new security group&lt;/strong&gt;. Modify the inbound traffic rule to whitelist TCP port &lt;code class=&quot;highlighter-rouge&quot;&gt;22&lt;/code&gt; for all the IPs, i.e., &lt;code class=&quot;highlighter-rouge&quot;&gt;0.0.0.0/0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center-image&quot; alt=&quot;EC2 SSH inbound rule&quot; title=&quot;EC2 SSH inbound rule&quot; loading=&quot;lazy&quot; src=&quot;/assets/ec2-security-group-3e2a66394355bc35222bea514df49ae7e23e3349daddcf8a36f24e7000f134d3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You also have to allow inbound traffic for &lt;code class=&quot;highlighter-rouge&quot;&gt;TCP&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;UDP&lt;/code&gt; port &lt;code class=&quot;highlighter-rouge&quot;&gt;30303&lt;/code&gt; because it’s needed for P2P discovery and synchronization. Port &lt;code class=&quot;highlighter-rouge&quot;&gt;30303&lt;/code&gt; should also be exposed for the &lt;code class=&quot;highlighter-rouge&quot;&gt;0.0.0.0/0&lt;/code&gt; wildcard address. Additionally, if you want to configure external access to the node JSON-RPC API, you’ll have to open &lt;code class=&quot;highlighter-rouge&quot;&gt;TCP&lt;/code&gt; ports &lt;code class=&quot;highlighter-rouge&quot;&gt;80&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;443&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, click &lt;strong&gt;Review and launch&lt;/strong&gt; and &lt;strong&gt;Launch&lt;/strong&gt;. When prompted about the key pair, select, &lt;strong&gt;Create a new key pair&lt;/strong&gt; and give it any meaningful name. Press &lt;strong&gt;Download Key Pair&lt;/strong&gt; to save it on your local disk and later &lt;strong&gt;Launch instances&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Now back in your terminal, change permissions for your key pair by running:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;400 keypair-ec2.pem&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next, go to &lt;strong&gt;EC2 &amp;gt; Instances&lt;/strong&gt; and go to your new server details page. Copy its &lt;strong&gt;Public IPv4 address&lt;/strong&gt;.
Back in your terminal, you can now SSH into your EC2:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ssh ubuntu@123.123.123.123 &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; keypair-ec2.pem&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;configuring-geth-on-ubuntu&quot;&gt;Configuring Geth on Ubuntu&lt;/h2&gt;

&lt;p&gt;We’ll start the Geth process as a systemd service to run it in the background and enable automatic restarts. Start by running these commands to install Geth from the official repository:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;add-apt-repository ppa:ethereum/ethereum
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;ethereum&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now create &lt;code class=&quot;highlighter-rouge&quot;&gt;/lib/systemd/system/geth.service&lt;/code&gt; file with the following contents:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[Unit]

Description=Geth Full Node
After=network-online.target
Wants=network-online.target

[Service]

WorkingDirectory=/home/ubuntu
User=ubuntu
ExecStart=/usr/bin/geth --syncmode snap --http --http.api personal,eth,net,web3,txpool
Restart=always
RestartSec=5s

[Install]
WantedBy=multi-user.target&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ExecStart&lt;/code&gt; command &lt;code class=&quot;highlighter-rouge&quot;&gt;--syncmode snap&lt;/code&gt; determines that we’ll be spinning up a full node. The &lt;code class=&quot;highlighter-rouge&quot;&gt;snap&lt;/code&gt; sync mode has replaced &lt;code class=&quot;highlighter-rouge&quot;&gt;fast&lt;/code&gt; mode as of Geth &lt;em&gt;1.10.16&lt;/em&gt;. If you try to use the legacy &lt;code class=&quot;highlighter-rouge&quot;&gt;fast&lt;/code&gt; mode, you’ll see the following error:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;invalid value &quot;fast&quot; for flag -syncmode: unknown sync mode &quot;fast&quot;, want &quot;full&quot;, &quot;snap&quot; or &quot;light&quot;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--http&lt;/code&gt; flag (replacement for a legacy &lt;code class=&quot;highlighter-rouge&quot;&gt;--rpc&lt;/code&gt;) enables HTTP API which we’ll use to connect our Metamask client.&lt;/p&gt;

&lt;p&gt;Now you can enable and start the Geth service by running:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;geth
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl start geth&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and see the log output using:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;journalctl &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; geth&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can now verify that the node is up and running by launching a Geth console:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;geth attach&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Inside the console, now run:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;eth.syncing&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You should get a similar output indicating that the node has started the synchronization:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;currentBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2254868&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;healedBytecodeBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;healedBytecodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;healedTrienodeBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;healedTrienodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;healingBytecode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;healingTrienodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;highestBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;14426316&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;startingBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2250487&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;syncedAccountBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2670602107&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;syncedAccounts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11057974&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;syncedBytecodeBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;257393098&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;syncedBytecodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50954&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;syncedStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42499504&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;syncedStorageBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9161595917&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you’re getting &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;, you should wait for a minute or two for synchronization to kick off. In case you have any issues with completing the synchronization, you can run:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;journalctl &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; geth&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;to tail the log output. Optionally, you can run the geth process with &lt;code class=&quot;highlighter-rouge&quot;&gt;--verbosity 5&lt;/code&gt; flag to increase logs granularity.&lt;/p&gt;

&lt;p&gt;A few hours after the node has finished synchronization, it should be discoverable on &lt;a href=&quot;https://ethernodes.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;ethernodes.org&lt;/a&gt;. You can double-check that you’ve correctly opened all the necessary ports by going to the &lt;code class=&quot;highlighter-rouge&quot;&gt;geth attach&lt;/code&gt; console and running:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;peers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;network&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inbound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You should see both &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; values meaning that your node is discoverable in the P2P network. If you’re seeing only false, you probably did not publicly expose the &lt;code class=&quot;highlighter-rouge&quot;&gt;TCP&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;UDP&lt;/code&gt; port &lt;code class=&quot;highlighter-rouge&quot;&gt;30303&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The initial synchronization time depends on the hardware configuration (more details later). You can check if our node is fully synchronized by going to the geth console and running:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;eth.blockNumber&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and compare the value with an external data source, e.g., &lt;a href=&quot;https://etherscan.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Etherscan&lt;/a&gt;. You can check out &lt;a href=&quot;https://geth.ethereum.org/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;official Geth docs&lt;/a&gt; for more info on available API methods.&lt;/p&gt;

&lt;p&gt;If you’re getting &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; then check your logs for similar entries:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;State heal in progress&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Their presence means that your node got out of sync and might need a few hours to catch up. If the issue does not fix itself after 10+ hours, your server probably lacks CPU, memory, or disk throughput.&lt;/p&gt;

&lt;h2 id=&quot;password-protected-https-access-to-full-geth-node-with-nginx&quot;&gt;Password protected HTTPS access to full Geth node with NGINX&lt;/h2&gt;

&lt;p&gt;Each console method has its JSON-RPC equivalent. You can check the current block number with HTTP API by running the following cURL command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST http://127.0.0.1:8545 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Content-Type: application/json&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--data&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{&quot;jsonrpc&quot;:&quot;2.0&quot;, &quot;method&quot;:&quot;eth_blockNumber&quot;, &quot;id&quot;:1}'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But right now, you can only talk to the node from inside the EC2 instance. Let’s see how we can safely expose the API to public by adding by proxing JSON-RPC traffic with NGINX.&lt;/p&gt;

&lt;p&gt;You’ll need a domain to implement this solution. It can be a root domain or a subdomain. You have to add an &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; DNS record pointing to the IP of your EC2 instance. It is recommended to use an &lt;a href=&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Elastic IP address&lt;/a&gt; so that the address would not change if you have to change the instance configuration.&lt;/p&gt;

&lt;p&gt;Next, inside the instance, you have to install the necessary packages:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;add-apt-repository ppa:certbot/certbot
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;nginx apache2-utils
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;python3-certbot-nginx&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can now generate an SSL certificate and initial NGINX configuration by running:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;certbot &lt;span class=&quot;nt&quot;&gt;--nginx&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; example.com&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To automatically renew your certificate add this line to /etc/crontab file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;@monthly root certbot &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; renew&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once you complete these steps, you should see an NGINX welcome screen on your domain:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center-image&quot; alt=&quot;NGINX welcome screen&quot; title=&quot;NGINX welcome screen&quot; loading=&quot;lazy&quot; src=&quot;/assets/nginx-welcome-screen-090d39c220e785e4e2ea866ca8c642e13fa0d9c3720c6a94a3a35de74fd29d80.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;annotation center&quot;&gt;NGINX welcome page&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Next generate a HTTP basic authentication user and password:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;htpasswd &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; /etc/nginx/htpasswd.users your_user&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now you need to edit the NGINX configuration file &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/nginx/sites-enabled/default&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nginx&quot; data-lang=&quot;nginx&quot;&gt;&lt;span class=&quot;k&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;server_name&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;example.com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kn&quot;&gt;auth_basic&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Restricted&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Access&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;auth_basic_user_file&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/etc/nginx/htpasswd.users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kn&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;proxy_pass&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http://localhost:8545&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;proxy_http_version&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;proxy_set_header&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Upgrade&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$http_upgrade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;proxy_set_header&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Connection&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'upgrade'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;proxy_cache_bypass&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$http_upgrade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kn&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;[::]:443&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ssl&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ipv6only=on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;443&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;ssl_certificate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/etc/letsencrypt/live/example.com/fullchain.pem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;ssl_certificate_key&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/etc/letsencrypt/live/example.com/privkey.pem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/etc/letsencrypt/options-ssl-nginx.conf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;ssl_dhparam&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/etc/letsencrypt/ssl-dhparams.pem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$host&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;example.com)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kn&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;301&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$host$request_uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kn&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;[::]:80&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;server_name&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;example.com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;404&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;annotation center&quot;&gt;The SSL certificate files are automatically generated by the &lt;code&gt;certbot&lt;/code&gt; command&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;We use a &lt;code class=&quot;highlighter-rouge&quot;&gt;proxy_pass&lt;/code&gt; directive to proxy traffic from an encrypted &lt;code class=&quot;highlighter-rouge&quot;&gt;443&lt;/code&gt; HTTPS port to Geth node port &lt;code class=&quot;highlighter-rouge&quot;&gt;8545&lt;/code&gt; on our EC2 instance without exposing it publicly. Additionally, HTTP basic authentication headers are required for every request.&lt;/p&gt;

&lt;p&gt;Now verify that the config is correct:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;nginx &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and restart the NGINX process to apply changes:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;service nginx restart&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The default welcome page should no longer be accessible. You can check if your full node is available via a secure HTTPS connection using this command executed from outside of your EC2:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST https://example.com &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Content-Type: application/json&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; your_user:your_password &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--data&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{&quot;jsonrpc&quot;:&quot;2.0&quot;, &quot;method&quot;:&quot;eth_blockNumber&quot;, &quot;id&quot;: 1}'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once you have it working, you can now connect your &lt;a href=&quot;https://metamask.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;browser Metamask extension&lt;/a&gt; to use your personal full node for blockchain access. To do it go to Metamask &lt;strong&gt;Settings &amp;gt; Networks &amp;gt; Add a network&lt;/strong&gt;. Give your network any name, and in the &lt;strong&gt;New RPC URL&lt;/strong&gt;, input your full node connection URL in the following format:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;https://user:password@example.com&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img class=&quot;center-image&quot; alt=&quot;Metamask custom network configuration&quot; title=&quot;Metamask custom network configuration&quot; loading=&quot;lazy&quot; src=&quot;/assets/metamask-custom-network-22c9b74054ba82a46d29ea4e64da8e9e22de55b8a4ec29e83e7dd8828d312577.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;annotation center&quot;&gt;Metamask custom network configuration&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Input &lt;code class=&quot;highlighter-rouge&quot;&gt;ETH&lt;/code&gt; for &lt;strong&gt;Currency Symbol&lt;/strong&gt;. &lt;strong&gt;Chain ID&lt;/strong&gt; should be auto-filled to &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;, representing the Ethereum Mainnet. You can now click &lt;strong&gt;Save&lt;/strong&gt; and use your Metamask wallet as you would normally. You’re now talking directly to the Ethereum blockchain without a trusted 3rd party like Infura or Alchemy. And if AWS is still too centralized for your blockchain needs, remember that you can use a similar setup on your proprietary hardware.&lt;/p&gt;

&lt;p&gt;Unfortunately, I could only get the custom network config working on the Brave/Chrome version of Metamask. On Firefox, there seems to be a bug as of &lt;em&gt;10.11.3&lt;/em&gt;. I’ve &lt;a href=&quot;https://github.com/MetaMask/metamask-extension/issues/14240&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;submitted an issue on GH&lt;/a&gt;, so hopefully, this one will get resolved.&lt;/p&gt;

&lt;h2 id=&quot;full-and-light-node-hardware-requirements&quot;&gt;Full and light node hardware requirements&lt;/h2&gt;

&lt;p&gt;Below you can see graphs showing CPU, memory, and disk utilization of the &lt;code class=&quot;highlighter-rouge&quot;&gt;m5.large&lt;/code&gt; (8 GiB RAM, 2 vCPUs) EC2 instance during a full synchronization process.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center-image&quot; alt=&quot;EC2 metrics during Ethereum full node synchronization&quot; title=&quot;EC2 metrics during Ethereum full node synchronization&quot; loading=&quot;lazy&quot; src=&quot;/assets/full-node-metrics-3cf89a289c62440af956014f1c0c54f462b28abd35252bf1cc5b361013ec9baf.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can see that the complete process took ~20 hours. Apparently CPU was maxed out, but memory usage was consistently below 80%. After synchronization finished, both CPU and memory usage dropped significantly.&lt;/p&gt;

&lt;p&gt;I’ve also tested full synchronization on the &lt;code class=&quot;highlighter-rouge&quot;&gt;m5.xlarge&lt;/code&gt; (16 GiB RAM, 4 vCPUs) instance, and it took 12 instead of 20 hours. But, CPU and RAM metrics were almost identical.&lt;/p&gt;

&lt;p&gt;It means that the choice of hardware depends on how urgently you need the full node up and running. But, make sure to avoid using &lt;code class=&quot;highlighter-rouge&quot;&gt;t2/t3&lt;/code&gt; instances. They feature a so-called &lt;em&gt;“burstable”&lt;/em&gt; CPU, meaning that consistent processor usage above the &lt;em&gt;baseline&lt;/em&gt; (between 5% and 40% depending on instance size) would be throttled or incur additional charges.&lt;/p&gt;

&lt;p&gt;After the synchronization is finished, Node hardware requirements will be different depending on your use case. If you’re running an arbitrage bot scanning the mempool or thousands of AMM contracts on each block, you’ll need a beefier server than if you occasionally submit a few transactions. Optionally, using &lt;code class=&quot;highlighter-rouge&quot;&gt;--light.serve&lt;/code&gt; flag, you can devote a part of your node’s processing power to serve P2P light nodes.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center-image&quot; alt=&quot;EC2 metrics for full nodes with and without light clients&quot; title=&quot;EC2 metrics for full nodes with and without light clients&quot; loading=&quot;lazy&quot; src=&quot;/assets/eth-nodes-disk-read-5b5d4784f4f9e6011a1e4e5bd86c4bff39896753d9232dcc1f124ec4f74775d8.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The above graph shows the volume of disk read operations for two full nodes. You can see that it’s 10x more intensive for the node serving light clients. CPU and memory usage was comparable on both nodes. Running a full node that publicly accepts light client connections is a way to improve the decentralization and security of the Ethereum network. But, remember that AWS incurs additional charges for outgoing data. Adding budget alerts is highly recommended if you want to support light nodes.&lt;/p&gt;

&lt;p&gt;The best way to determine the most cost-effective instance type is to continuously observe the metrics to see if you’re not running out of CPU, memory, or disk IOPS. AWS Cloudwatch makes it easy to configure email alerts when metrics exceed predefined thresholds. Check out &lt;a href=&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Install-CloudWatch-Agent.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;these docs&lt;/a&gt; for info on how to collect disk and memory usage data because they are not enabled by default.&lt;/p&gt;

&lt;h2 id=&quot;light-node-synchronization&quot;&gt;Light node synchronization&lt;/h2&gt;

&lt;p&gt;If you’ve ever tried to spin up a light Geth node, you might be familiar with the following log output:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Looking for peers peercount=0 tried=16 static=0
Looking for peers peercount=0 tried=16 static=0
Looking for peers peercount=0 tried=16 static=0
Looking for peers peercount=0 tried=16 static=0&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img class=&quot;center-image&quot; alt=&quot;Pablo waiting for Geth sync meme&quot; title=&quot;Pablo waiting for Geth sync meme&quot; loading=&quot;lazy&quot; src=&quot;/assets/pablo-waiting-d4aad264a1ec4d7e864c96a8488fcf6083d948cc3a10cf58a44306c98a66b9ba.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Light nodes have significantly lower hardware and disk space requirements than the full nodes. I’ve managed to run a light Geth node on an AWS free tier &lt;code class=&quot;highlighter-rouge&quot;&gt;t2.micro&lt;/code&gt; instance with an 8GB disk. After synchronization finished, the actual stored blockchain size was ~350MB compared to over 500GB for full nodes. Light nodes don’t keep and verify the whole blockchain but only the last few dozen blocks. But, they rely on full nodes to share the current state of the blockchain with them. As we’ve discussed, supporting light nodes is disabled by default and incurs additional costs. Depending on the congestion of the Ethereum network, your light node might not be able to peer enough full nodes to catch up with the current blockchain state. Hence the dreaded &lt;code class=&quot;highlighter-rouge&quot;&gt;Looking for peers&lt;/code&gt; message.&lt;/p&gt;

&lt;p&gt;I could not find a consistent pattern on what factors determine if a light node will start syncing. I guess it all goes down to the current network congestion. So, if you’re out of luck in one AWS region, a solution could be to spin up an EC2 instance across the globe. Usually, it takes at least 10 minutes for the light node to start syncing. And you can always try turning it off and on again. Sometimes sync kicked off right after a reebot after being stuck for over an hour.&lt;/p&gt;

&lt;p&gt;You can investigate what nodes you’ve managed to connect to by running:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;admin.peers&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But, compared to full nodes, the &lt;code class=&quot;highlighter-rouge&quot;&gt;network.inbound&lt;/code&gt; property of peer nodes will always be &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; because light nodes do not accept incoming connections.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Infura and Alchemy are currently an industry standard for everyday blockchain interactions. But, knowing that I’ll always be able to access my funds even if the centralized gatekeepers are out of business vastly increase my trust in the Ethereum network. Furthermore, even after the upcoming &lt;em&gt;Merge&lt;/em&gt;, you’ll still be able to host full nodes on similar hardware. Storage space is only about the get cheaper. So the constantly growing size of the blockchain should never be a blocker for regular users to host full nodes and support the network.&lt;/p&gt;
</description>
        <pubDate>Thu, 31 Mar 2022 11:10:29 +0200</pubDate>
        <link>https://pawelurbanek.com/ethereum-node-aws</link>
        <guid isPermaLink="true">https://pawelurbanek.com/ethereum-node-aws</guid>
      </item>
    
      <item>
        <title>Intro to Thread-Safety in Ruby on Rails</title>
        <description>&lt;p&gt;Ensuring thread safety is critical if you want to build a performant Rails app. Unfortunately, threading-related bugs are often sneaky and only manifest in highly concurrent production environments. In this blog post, we’ll discuss code examples that are not thread-safe. I’ll also describe a toolkit for debugging and discuss possible solutions. Developing an eye for spotting these errors before shipping to production can save you a lot of headaches.&lt;/p&gt;

&lt;h2 id=&quot;100-thread-safety-guarantee&quot;&gt;100% thread safety guarantee…&lt;/h2&gt;

&lt;p&gt;I’d risk saying that just by looking at a piece of Ruby code, you can never tell if it does not hide any multithreading-related bugs. A typical Ruby project is &lt;em&gt;gems all the way down&lt;/em&gt;, with the usual excess of external dependencies. So even a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; method could be monkey-patched to introduce a thread safety issue.&lt;/p&gt;

&lt;p&gt;However, there’s one way to ensure that your Rails app is bulletproof against any concurrency bugs. But it comes with a terrible tradeoff. Let’s explain it with an example:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;app/controllers/numbers_controller.rb&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NumbersController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;vc&quot;&gt;@@per_page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:per_page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vc&quot;&gt;@@per_page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:per_page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;json: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vc&quot;&gt;@@per_page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;plain: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;It should never happen!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;status: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This endpoint renders an array of numbers based on a &lt;code class=&quot;highlighter-rouge&quot;&gt;per_page&lt;/code&gt; value received as a param. We add an error path that, in theory, should never happen. You don’t expect a variable to change its value when assigned a few lines before.&lt;/p&gt;

&lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;sleep 0.1&lt;/code&gt; is here to simulate &lt;em&gt;a blocking IO&lt;/em&gt;. Ruby uses Global Interpreter Lock (GIL), which works like a global mutex. It ensures that two Ruby threads can never run in parallel. But &lt;em&gt;blocking IO&lt;/em&gt; means that the actual work is delegated to an external process, e.g., SQL database or HTTP client. So while thread A is waiting for its blocking IO to complete, thread B can take over. I’ve covered Ruby threading, GIL, and blocking I/O in much more depth &lt;a href=&quot;/ruby-concurrent-requests&quot;&gt;in my other blog post&lt;/a&gt; so please refer to it if you need a recap.&lt;/p&gt;

&lt;p&gt;If you’re familiar with threading issues in Ruby, you’ll notice that we’re using a class variable. It is shared between all the threads in a process. So while thread A is &lt;em&gt;sleeping&lt;/em&gt;, thread B will kick in and overwrite the &lt;code class=&quot;highlighter-rouge&quot;&gt;@@per_page&lt;/code&gt; value causing the &lt;em&gt;buggy&lt;/em&gt; path. As a result, a user would receive a different number of objects than requested. This is the most straightforward thread-safety bug I could think of. The point of analyzing it in detail is to describe a toolkit for tackling more complex cases.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I’ve performed all the tests with Rails 7, Ruby 3.1.0 on the Puma server running locally in a single mode with 5 min/max threads in the production environment.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Our goal is to trigger the &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;It should never happen!&quot;&lt;/code&gt; error. We’ll need to simulate a highly concurrent environment to achieve that. You’re unlikely to hammer &lt;em&gt;CMD+R&lt;/em&gt; fast enough, so instead, let’s use &lt;a href=&quot;https://github.com/JoeDog/siege&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Siege a load testing tool&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;siege&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now create a &lt;code class=&quot;highlighter-rouge&quot;&gt;urls.txt&lt;/code&gt; file with the following contents:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;http://localhost:3000/numbers?per_page=1
http://localhost:3000/numbers?per_page=2
http://localhost:3000/numbers?per_page=3&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and now you can start your first test by running this command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;siege &lt;span class=&quot;nt&quot;&gt;--time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;5s &lt;span class=&quot;nt&quot;&gt;--concurrent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10 &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; urls.txt &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;you should get a similar result:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Lifting the server siege...
Transactions:               84 hits
Availability:               45.65 %
Elapsed time:               4.30 secs
Data transferred:           0.00 MB
Response time:              0.49 secs
Transaction rate:           19.53 trans/sec
Throughput:                 0.00 MB/sec
Concurrency:                9.65
Successful transactions:    84
Failed transactions:        100
Longest transaction:        0.26
Shortest transaction:       0.14&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can see that we’ve managed to trigger the error in over 50% of requests. You can confirm that the presence of multiple concurrent threads is causing the error by running:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;siege &lt;span class=&quot;nt&quot;&gt;--time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;5s &lt;span class=&quot;nt&quot;&gt;--concurrent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; urls.txt &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and now you should get a 100% success rate.&lt;/p&gt;

&lt;p&gt;So what about making our app bulletproof against threading bugs that I’ve mentioned before? You can do it by adding a line to &lt;code class=&quot;highlighter-rouge&quot;&gt;config/environments/production.rb&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;config/environments/development.rb&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;middleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insert_before&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Lock&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Don’t forget to restart your server after modifying config files.&lt;/p&gt;

&lt;p&gt;Let’s rerun our test:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;siege &lt;span class=&quot;nt&quot;&gt;--time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;5s &lt;span class=&quot;nt&quot;&gt;--concurrent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10 &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; urls.txt &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and you should expect a similar result:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Lifting the server siege...
Transactions:               41 hits
Availability:               100.00 %
Elapsed time:               4.48 secs
Data transferred:           0.00 MB
Response time:              0.97 secs
Transaction rate:           9.15 trans/sec
Throughput:                 0.00 MB/sec
Concurrency:                8.86
Successful transactions:    41
Failed transactions:        0
Longest transaction:        1.11
Shortest transaction:       0.15&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So we’ve got a 100% success rate for the price of decreasing our throughput by over 50%. We’re down to 41 hits from 84, and the longest transaction is now over &lt;em&gt;1 second&lt;/em&gt; instead of &lt;em&gt;0.26 second&lt;/em&gt;. To understand why adding &lt;code class=&quot;highlighter-rouge&quot;&gt;Rack::Lock&lt;/code&gt; had this effect let’s have a quick look at &lt;a href=&quot;https://github.com/rack/rack/blob/main/lib/rack/lock.rb&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;its source code&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@mutex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lock&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;returned&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BodyProxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unlock&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;ensure&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;unlock&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returned&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can see that this middleware wraps the incoming requests into a mutex that’s initialized once &lt;em&gt;per process&lt;/em&gt;. All the Puma worker threads share the same mutex variable. It means that two threads can never run simultaneously, even for blocking I/O. &lt;code class=&quot;highlighter-rouge&quot;&gt;Rack::Lock&lt;/code&gt; throttles your app to only use one thread per process.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center-image&quot; alt=&quot;Threads related meme&quot; title=&quot;Threads related meme&quot; loading=&quot;lazy&quot; src=&quot;/assets/threads-guy-3410708d3762047d031c88469abb48ea869e6b12a54b4c57e44143b96a997e9b.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can see that while effective, the &lt;code class=&quot;highlighter-rouge&quot;&gt;Rack::Lock&lt;/code&gt; is not a viable solution.&lt;/p&gt;

&lt;p&gt;We’ve verified that you need to simulate a concurrent environment to trigger even the simplest thread safety bug. Siege is a perfect tool to test your app locally if you’re hunting these weird &lt;em&gt;“sometimes”&lt;/em&gt; bugs spotted on production.&lt;/p&gt;

&lt;h2 id=&quot;sql-database-and-thread-safety&quot;&gt;SQL database and thread safety&lt;/h2&gt;

&lt;p&gt;Database interactions add a whole new dimension to the scope of possible threading bugs. Consider this example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NumbersController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;counter&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;counter: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;current_user&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@current_user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This endpoint counts a number of user interactions. You can test it with the following Siege command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;siege &lt;span class=&quot;nt&quot;&gt;--time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;5s &lt;span class=&quot;nt&quot;&gt;--concurrent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10 http://localhost:3000/counter&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You should see a similar output:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Transactions:         341 hits
Availability:         100.00 %&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You’d expect the &lt;code class=&quot;highlighter-rouge&quot;&gt;counter&lt;/code&gt; user attribute value to increase by the same number. But (unless you still have &lt;code class=&quot;highlighter-rouge&quot;&gt;Rack::Lock&lt;/code&gt; enabled), you’ll notice that it increased by only around one-third of API hits counted.&lt;/p&gt;

&lt;p&gt;Despite the lack of the obvious &lt;em&gt;blocking IO&lt;/em&gt; (like &lt;code class=&quot;highlighter-rouge&quot;&gt;sleep&lt;/code&gt; in the previous example), we’ve managed to trigger a thread safety bug. Our threads fetch the current value of the &lt;code class=&quot;highlighter-rouge&quot;&gt;counter&lt;/code&gt; attribute from the database and increment it concurrently, i.e., committing the same change multiple times. That’s why we &lt;em&gt;lose&lt;/em&gt; some values.&lt;/p&gt;

&lt;p&gt;You can fix this issue by wrapping the read and update operations into a database transaction with a correct &lt;em&gt;isolation level&lt;/em&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;counter&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;isolation: :repeatable_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;counter: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The details of SQL transaction isolation levels are out of the scope for this tutorial. But long story short, &lt;code class=&quot;highlighter-rouge&quot;&gt;repeatable_read&lt;/code&gt; acquires locks that prevent both concurrent reads and writes. As a result, update operations are executed sequentially, and the value of the &lt;code class=&quot;highlighter-rouge&quot;&gt;counter&lt;/code&gt; attribute is now equal to the number of successful HTTP API calls. Please keep in mind that acquiring database transaction with high isolation levels can significantly reduce performance. Always measure the impact before applying this change to production bottlenecks.&lt;/p&gt;

&lt;p&gt;Another solution to this particular example is to leverage an API method that’s thread-safe by design:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;counter&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;increment!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finding an API method immune to threading bugs is not always possible. But, searching the docs of an unknown library for keywords like &lt;em&gt;“thread-safe”&lt;/em&gt;, &lt;em&gt;“concurrent”&lt;/em&gt;, can sometimes save you from unnecessarily convoluted solutions. For example, &lt;a href=&quot;https://github.com/ruby-concurrency/concurrent-ruby&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;the concurrent-ruby gem&lt;/a&gt; is an awesome collection of thread-safe programming primitives. So, if you find yourself juggling mutexes to patch a threading bug, getting familiar with tools offered by this gem could be a live saver. BTW I’m currently working on a blog post about it, so please subscribe if you want to be notified when it’s out.&lt;/p&gt;

&lt;h2 id=&quot;bad-globals&quot;&gt;Bad globals&lt;/h2&gt;

&lt;p&gt;It is a commonly repeated mantra that &lt;em&gt;“Globals are bad for thread safety!”&lt;/em&gt;. I’d say it all comes down to this tradeoff: The less global a variable, the more cumbersome it is to pass it around between the scopes. I recommend this &lt;a href=&quot;https://www.youtube.com/watch?v=D7zUOtlpUPw&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;screencast by DHH&lt;/a&gt; where he discusses potentials use cases for globals &lt;em&gt;“when the price is right”&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;There are no simple answers to where and how to use globals. So instead, let me describe a technique for making global values safe in multithreaded environments.&lt;/p&gt;

&lt;h3 id=&quot;thread-safe-globals&quot;&gt;Thread-safe globals&lt;/h3&gt;

&lt;p&gt;Ruby offers built-it support for so-called &lt;em&gt;thread-local variables&lt;/em&gt;. Each thread can work as a kind of a hash for storing values accessible globally in the app but only from this single thread.&lt;/p&gt;

&lt;p&gt;The best way to explain it is by running the following code example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;parent&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;child&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Initial value in child: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inspect&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;child&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Value in main: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Value in child: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Output:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Initial value in child: nil&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Value in main: parent&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Value in child: child&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These &lt;em&gt;“thread-local globals”&lt;/em&gt; could sometimes be helpful in passing data across the application.&lt;/p&gt;

&lt;p&gt;However, there’s one critical issue when using barebones &lt;code class=&quot;highlighter-rouge&quot;&gt;Thread.current&lt;/code&gt; for storing values. Puma server seems to be recycling its threads. It means that unless you’re careful, you will leak data between requests. You can confirm this behavior by implementing the following endpoint:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExampleController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;vc&quot;&gt;@@assignment_lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;vc&quot;&gt;@@assignment_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;synchronize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$assigned&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;assigned&quot;&lt;/span&gt;
        &lt;span class=&quot;vg&quot;&gt;$assigned&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;plain: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We use &lt;code class=&quot;highlighter-rouge&quot;&gt;@@assignment_lock&lt;/code&gt; class variable mutex that’s global per process to prevent so-called &lt;em&gt;“Time-of-check to time-of-use”&lt;/em&gt; error. In a highly concurrent environment, it could be theoretically possible that thread A checks the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;$assigned&lt;/code&gt; global variable, then thread B kicks in and checks that it’s still &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; before thread A sets it to &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;. This scenario would cause two different threads to enter the &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; condition, and we want to prevent it.&lt;/p&gt;

&lt;p&gt;The first response from this endpoint will display the text &lt;code class=&quot;highlighter-rouge&quot;&gt;assigned&lt;/code&gt;. When you request it a few more times, you’ll see that the same text is returned randomly every few hits. It means that the initial thread is being reused. Overlooking this &lt;em&gt;feature&lt;/em&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;Thread.current&lt;/code&gt; could introduce critical security bugs because sensitive data could be shared between different user sessions.&lt;/p&gt;

&lt;p&gt;A built-in Rails &lt;a href=&quot;https://api.rubyonrails.org/classes/ActiveSupport/CurrentAttributes.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveSupport::CurrentAttributes&lt;/code&gt;&lt;/a&gt; class serves the same purpose with much better security guarantees. Let’s reimplement our example:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;app/models/current.rb&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CurrentAttributes&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:value&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and the endpoint:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExampleController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;vc&quot;&gt;@@assignment_lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;vc&quot;&gt;@@assignment_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;synchronize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$assigned&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;Current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;assigned&quot;&lt;/span&gt;
        &lt;span class=&quot;vg&quot;&gt;$assigned&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;plain: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You’ll now see that the text &lt;code class=&quot;highlighter-rouge&quot;&gt;assigned&lt;/code&gt; would only be displayed once on the first request. Each subsequent request is getting a fresh copy of a &lt;code class=&quot;highlighter-rouge&quot;&gt;Current&lt;/code&gt; object, so there’s no more risk of a data leak.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Thread safety in Rails is a topic for a hefty eBook instead of a single blog post. But I hope that the above info covers the basics that will help you spot and debug potential issues in your codebase. Let me know in the comments if you know more interesting examples of thread unsafe code in Ruby so that I can include them in this post.&lt;/p&gt;
</description>
        <pubDate>Wed, 23 Mar 2022 10:37:02 +0100</pubDate>
        <link>https://pawelurbanek.com/rails-thread-safety</link>
        <guid isPermaLink="true">https://pawelurbanek.com/rails-thread-safety</guid>
      </item>
    
      <item>
        <title>The In-depth Guide to ActiveRecord load_async in Rails 7</title>
        <description>&lt;p&gt;Rails 7 introduces ActiveRecord &lt;code class=&quot;highlighter-rouge&quot;&gt;load_async&lt;/code&gt; method that runs SQL queries asynchronously in the background thread. This seemingly simple change of &lt;em&gt;just&lt;/em&gt; adding a single new method that takes no arguments has profound implications for database layer interactions. In this tutorial, we’ll deep dive into the intricacies of this new load async API. We’ll discuss lazy-loaded queries, Ruby threading model, blocking IO, database pool vs. max connections limit, and performance impact of concurrent database clients. I’ll also try to suggest scenarios where introducing async SQL queries could have the most benefit without sacrificing the stability of your Rails app.&lt;/p&gt;

&lt;p&gt;We have a lot of ground to cover, so let’s get started!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;[Update] After the publication, the author of the initial &lt;code class=&quot;highlighter-rouge&quot;&gt;load_async&lt;/code&gt; implementation (casperisfine on GitHub) &lt;a href=&quot;https://www.reddit.com/r/ruby/comments/t45m1l/comment/hywwffn/?utm_source=share&amp;amp;utm_medium=web2x&amp;amp;context=3&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;responded on Reddit&lt;/a&gt; with a few technical corrections. The blog post has been updated accordingly.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;activerecord-load_async-101&quot;&gt;ActiveRecord load_async 101&lt;/h2&gt;

&lt;p&gt;It is common for Rails controller action to trigger multiple queries for different models:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PagesController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;home&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;slow&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@comments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;slow&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;slow&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and later display data in the view like that:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’re using a &lt;code class=&quot;highlighter-rouge&quot;&gt;slow&lt;/code&gt; scope method with the following implementation:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:slow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;SELECT true FROM pg_sleep(1)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;slow&lt;/code&gt; scope returns ten rows from a table after an artificial one-second delay. This approach will allow us to deterministically measure the performance impact of adding &lt;code class=&quot;highlighter-rouge&quot;&gt;load_async&lt;/code&gt; without populating a database with thousands of records.&lt;/p&gt;

&lt;p&gt;Executing this controller action should print out similar server logs:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Load&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1006&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;users&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;Comment&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Load&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1003&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;comments&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;comments&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Load&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1041&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;posts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;posts&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Completed&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3204&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Views&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;51&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can see that queries were executed &lt;em&gt;sequentially&lt;/em&gt;, resulting in a response time of over 3 seconds. Most of the time was spent in the &lt;em&gt;ActiveRecord&lt;/em&gt; layer. Let’s now see how using &lt;code class=&quot;highlighter-rouge&quot;&gt;load_async&lt;/code&gt; can speed things up.&lt;/p&gt;

&lt;h3 id=&quot;optimizing-response-time-with-asynchronous-sql&quot;&gt;Optimizing response time with asynchronous SQL&lt;/h3&gt;

&lt;p&gt;We can rewrite our controller to leverage the new API:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PagesController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;home&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;slow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;load_async&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@comments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;slow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;load_async&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;slow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;load_async&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Make sure to enable asynchronous execution in your environment config file:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;config/environments/development.rb&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;active_record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;async_query_executor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:global_thread_pool&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and now we should get the following logs:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Load&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1008&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ASYNC&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Comment&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Load&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;62&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1013&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ASYNC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Load&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1010&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Completed&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1085&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Views&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It looks like we’re down to one second response time, ~3x improvement. Does it mean that Rails &lt;em&gt;does&lt;/em&gt; scale? Just update to version 7 and sprinkle &lt;code class=&quot;highlighter-rouge&quot;&gt;load_async&lt;/code&gt; all over the codebase!&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center-image&quot; alt=&quot;All the things load_async&quot; title=&quot;All the things load_async&quot; loading=&quot;lazy&quot; src=&quot;/assets/all-the-things-08379f3076de5b91ad2a167d826d3c3e4bbbed5e8083e7e4b525758decf5092f.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Not really… Overusing the new &lt;code class=&quot;highlighter-rouge&quot;&gt;load_async&lt;/code&gt; API to magically improve response times is likely to crash your app and slow the database to a crawl.&lt;/p&gt;

&lt;p&gt;To understand why we’ll need to take a step back and first recap Ruby threads and ActiveRecord basics. But you’ve been warned that this is a &lt;em&gt;deep dive&lt;/em&gt;…&lt;/p&gt;

&lt;p&gt;You can also skip the basics and go straight to the section describing &lt;code class=&quot;highlighter-rouge&quot;&gt;load_async&lt;/code&gt; by &lt;a href=&quot;/rails-load-async#load-async-explained&quot;&gt;clicking here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;ruby-threads-in-a-nutshell&quot;&gt;Ruby threads in a nutshell&lt;/h2&gt;

&lt;p&gt;This blog post is by no means trying to be a comprehensive introduction to the Ruby threading model. I’ll focus on the basics relevant to understanding the inner workings of &lt;code class=&quot;highlighter-rouge&quot;&gt;load_async&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ruby supports parallel execution for so-called &lt;em&gt;blocking I/O&lt;/em&gt;. Any operation that does not directly use the CPU cycles from its thread but instead delegates the work to external processes is a blocking I/O. Typical examples in the context of Ruby on Rails web apps are SQL database queries, reading/writing to files, or HTTP requests. On the contrary, you cannot speed up, e.g., generation of md5 hashes using Ruby multithreading because it is a CPU-bound operation. I’ve covered Ruby threading, GIL, and blocking I/O in much more depth &lt;a href=&quot;/ruby-concurrent-requests&quot;&gt;in my other blog post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here’s a basic example of doing a blocking IO inside a separate thread:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this case, &lt;code class=&quot;highlighter-rouge&quot;&gt;sleep&lt;/code&gt; is our work, our blocking IO. If you copy-paste the above snippet into the Ruby IRB, it will freeze for 2 seconds. It means that we managed to do 4 seconds of &lt;em&gt;sleeping&lt;/em&gt; in 2 seconds because our &lt;em&gt;work&lt;/em&gt; was parallelized using a separate thread. While sleeping might not seem like the most useful thing to do, you could replace &lt;code class=&quot;highlighter-rouge&quot;&gt;sleep&lt;/code&gt; with an SQL or HTTP call and get a similar result.&lt;/p&gt;

&lt;p&gt;Let’s see another example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Running it would freeze IRB for 3 seconds. We tried to &lt;code class=&quot;highlighter-rouge&quot;&gt;join&lt;/code&gt; our &lt;code class=&quot;highlighter-rouge&quot;&gt;t1&lt;/code&gt; thread into the main thread before it completed its execution. That’s why it took one more second of the main thread execution time.&lt;/p&gt;

&lt;p&gt;So, the key takeaways here are that blocking IO can be parallelized using a separate Ruby thread, and if it is &lt;em&gt;joined&lt;/em&gt; into the main thread while still running, it will block until execution completes.&lt;/p&gt;

&lt;p&gt;Let’s now move on to the ActiveRecord chunk of our &lt;code class=&quot;highlighter-rouge&quot;&gt;load_async&lt;/code&gt; puzzle.&lt;/p&gt;

&lt;h2 id=&quot;activerecord-lazy-loaded-queries&quot;&gt;ActiveRecord lazy-loaded queries&lt;/h2&gt;

&lt;p&gt;To better explain how &lt;code class=&quot;highlighter-rouge&quot;&gt;load_async&lt;/code&gt; works, we’ll now discuss ActiveRecord &lt;em&gt;lazy loading&lt;/em&gt; behavior. It is critical to understand that running:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;vi&quot;&gt;@users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;slow&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;does not execute an SQL query by itself but only creates an &lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveRecord_Relation&lt;/code&gt; object. The actual SQL is only triggered when &lt;em&gt;necessary&lt;/em&gt;. This behavior was introduced in Rails 3.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center-image&quot; alt=&quot;Elrond remembers Rails 3&quot; title=&quot;Elrond remembers Rails 3&quot; loading=&quot;lazy&quot; src=&quot;/assets/elrond-meme-eb256f68edfcc70fbd8b749a69f9f779485f43d54ec6fbc6d503376524295512.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lazy loading allows for many cool features like merging scopes and passing ActiveRecord query objects around without running the SQL before the results are needed.&lt;/p&gt;

&lt;p&gt;You can try it yourself in the console. First make sure to enable ActiveRecord STDOUT logging:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;STDOUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and now run:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;vi&quot;&gt;@users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;slow&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You should see a similar output after a one-second delay:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;User Load (1006.2ms)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So it looks like the query &lt;em&gt;DID&lt;/em&gt; run. But did not I just tell you that it wouldn’t? In this case, the Ruby IRB is to blame. By default, it prints the result of the last command, effectively executing the query. You can circumvent this behavior by running:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;vi&quot;&gt;@users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;slow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and now the command executes instantly, and you should not see the SQL log anymore. By appending &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; as output for IRB to display, we prevented query execution. Only trying to display the contents of &lt;code class=&quot;highlighter-rouge&quot;&gt;@users&lt;/code&gt; would trigger the database interaction and take around a second to run.&lt;/p&gt;

&lt;p&gt;Alternatively, you can force a query to load eagerly by appending &lt;code class=&quot;highlighter-rouge&quot;&gt;to_a&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;vi&quot;&gt;@users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;slow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can easily check if relation object has already been loaded by reading its &lt;code class=&quot;highlighter-rouge&quot;&gt;loaded?&lt;/code&gt; attribute:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;vi&quot;&gt;@lazy_users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;slow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;vi&quot;&gt;@lazy_users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;loaded?&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; false&lt;/span&gt;

&lt;span class=&quot;vi&quot;&gt;@loaded_users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;slow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_a&lt;/span&gt;
&lt;span class=&quot;vi&quot;&gt;@loaded_users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;loaded?&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;load-async-explained&quot;&gt;Asynchronous ActiveRecord queries under the microscope&lt;/h2&gt;

&lt;p&gt;We’ve now covered the basics necessary to understand &lt;code class=&quot;highlighter-rouge&quot;&gt;load_async&lt;/code&gt;. Let’s finally move on to explaining the method itself. First try to trigger asynchronous query in the Rails console:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;vi&quot;&gt;@users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;slow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;load_async&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After a one-second delay result of the query is printed out, and logs show:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;User Load (1001.2ms)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So how come appending &lt;code class=&quot;highlighter-rouge&quot;&gt;load_async&lt;/code&gt; did not trigger our query in the background? Before explaining it, let’s first force asynchronous execution by running:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;vi&quot;&gt;@users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;slow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;load_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@users&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and now finally we get the following output:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;ASYNC User Load (0.0ms) (db time 1003.1ms)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can see the &lt;code class=&quot;highlighter-rouge&quot;&gt;ASYNC&lt;/code&gt; prefix and &lt;code class=&quot;highlighter-rouge&quot;&gt;(0.0ms)&lt;/code&gt; indicating that the query did not take any of the main thread processing time. &lt;code class=&quot;highlighter-rouge&quot;&gt;1006.5ms&lt;/code&gt; was spent in the background (described as &lt;code class=&quot;highlighter-rouge&quot;&gt;db time&lt;/code&gt;). Let’s see how these numbers change when we modify &lt;code class=&quot;highlighter-rouge&quot;&gt;sleep&lt;/code&gt; duration:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;vi&quot;&gt;@users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;slow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;load_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@users&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;ASYNC User Load (807.8ms) (db time 1003.8ms)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Our query was joined into the main thread after &lt;code class=&quot;highlighter-rouge&quot;&gt;200ms&lt;/code&gt;, so it took additional &lt;code class=&quot;highlighter-rouge&quot;&gt;807.8ms&lt;/code&gt; to complete execution. Just like the barebone threads we discussed earlier, asynchronous SQL can be joined into the main thread before it completes and, as a result, block it for the remaining of its execution time.&lt;/p&gt;

&lt;p&gt;This is a critical distinction. &lt;code class=&quot;highlighter-rouge&quot;&gt;load_async&lt;/code&gt; queries are never lazy loaded but work similarly to calling &lt;code class=&quot;highlighter-rouge&quot;&gt;to_a&lt;/code&gt; on an &lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveRecord_Relation&lt;/code&gt; object in a separate thread. Calling &lt;code class=&quot;highlighter-rouge&quot;&gt;load_async&lt;/code&gt; always sets a corresponding relation object’s &lt;code class=&quot;highlighter-rouge&quot;&gt;loaded&lt;/code&gt; parameter to &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;. You can consult &lt;a href=&quot;https://github.com/rails/rails/pull/41372/files&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;the PR implementing &lt;code class=&quot;highlighter-rouge&quot;&gt;load_async&lt;/code&gt;&lt;/a&gt; for details. It means that &lt;code class=&quot;highlighter-rouge&quot;&gt;load_async&lt;/code&gt; are always triggered immediatelly when called and joined into the main thread when their results are necessary.&lt;/p&gt;

&lt;p&gt;Now you should understand why &lt;code class=&quot;highlighter-rouge&quot;&gt;load_async&lt;/code&gt; sometimes does not schedule queries in the background. There are three cases possible:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The query was fully executed in the background, we just use the result.&lt;/li&gt;
  &lt;li&gt;The query started to be executed in the backgroud, we wait for it to finish.&lt;/li&gt;
  &lt;li&gt;The query wasn’t started in the background yet, we execute it in the foreground.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While playing around with &lt;code class=&quot;highlighter-rouge&quot;&gt;load_async&lt;/code&gt; API for the first time, I could not always &lt;em&gt;force&lt;/em&gt; queries to run asynchronously. Extracting these simple examples helped me grasp what factors decide if the background thread will be triggered or not.&lt;/p&gt;

&lt;p&gt;Now we can better understand why we’ve seen the following log output:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;User Load (1008.7ms) ...
ASYNC Comment Load (62.1ms) (db time 1013.8ms) ...
ASYNC Post Load (0.0ms) (db time 1010.5ms) ...&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The results of the &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; query were displayed on top of the HTML view. So, before the corresponding query was scheduled in the background it moved to the main thread. While it was executing in a blocking way, the &lt;code class=&quot;highlighter-rouge&quot;&gt;Comment&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Post&lt;/code&gt; queries had time to complete their execution in the background and did not add any more blocking to the main thread. That’s where the ~3x speedup came from.&lt;/p&gt;

&lt;p&gt;Now that we have a pretty solid understanding of the inner workings of &lt;code class=&quot;highlighter-rouge&quot;&gt;load_async&lt;/code&gt;, let’s discuss how misusing it could blow up your application.&lt;/p&gt;

&lt;h2 id=&quot;when-not-to-load_async&quot;&gt;When not to &lt;code class=&quot;highlighter-rouge&quot;&gt;load_async&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;load_async&lt;/code&gt; is a kind of &lt;em&gt;horizontal scaling&lt;/em&gt; for our SQL pipeline. Instead of sequentially scheduling queries through a single connection, we’re using threads to execute multiple queries at the same time. You can illustrate the difference by digging into PostgreSQL &lt;code class=&quot;highlighter-rouge&quot;&gt;pg_stat_activity&lt;/code&gt; metatable:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;application_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;backend_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;state&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pg_stat_activity&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'active'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;application_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bin/rails'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The following SQL displays currently active client connections to your database established by the Rails console process. You can compare the outcome of this query for the following Ruby snippets (increasing the &lt;code class=&quot;highlighter-rouge&quot;&gt;slow&lt;/code&gt; scope delay to a few seconds will make it easier to run both commands at the same time):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slow&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;comments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slow&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slow&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;comments&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Shows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt; pid | application_name |         backend_start         | state
-----+------------------+-------------------------------+--------
 226 | bin/rails        | 2022-02-23 00:10:34.900532+00 | active&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and running:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;vi&quot;&gt;@users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;slow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;load_async&lt;/span&gt;
&lt;span class=&quot;vi&quot;&gt;@comments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;slow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;load_async&lt;/span&gt;
&lt;span class=&quot;vi&quot;&gt;@posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;slow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;load_async&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@users&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@comments&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@posts&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;would display something similar to:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt; pid | application_name |         backend_start         | state
-----+------------------+-------------------------------+--------
 226 | bin/rails        | 2022-02-23 00:10:34.900532+00 | active
 230 | bin/rails        | 2022-02-23 00:12:30.44271+00  | active
 231 | bin/rails        | 2022-02-23 00:12:30.443108+00 | active&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is how we can empirically check that asynchronous queries spawn more separate database connections.&lt;/p&gt;

&lt;h3 id=&quot;balancing-database-pool-threads-and-max-connections-for-async-queries--&quot;&gt;Balancing database pool, threads and max connections for async queries (╯°□°）╯︵ ┻━┻&lt;/h3&gt;

&lt;p&gt;Things get a bit more complicated when we want to reason about the impact of running asynchronous SQL in the context of multithreaded processes like Puma server or Sidekiq worker. Rails provide a global &lt;code class=&quot;highlighter-rouge&quot;&gt;pool&lt;/code&gt; config that can be defined inside a &lt;code class=&quot;highlighter-rouge&quot;&gt;config/database.yml&lt;/code&gt; file. This value determines how many database connections can be spawned per Ruby &lt;em&gt;process&lt;/em&gt;. Each Puma or Sidekiq worker is a single process that can initialize a predefined number of threads. A common suggestion is to set &lt;code class=&quot;highlighter-rouge&quot;&gt;pool&lt;/code&gt; to the max value of concurrency supported by your application processes. For example, if your Sidekiq worker uses a maximum of 25 threads, then the &lt;code class=&quot;highlighter-rouge&quot;&gt;pool&lt;/code&gt; value should be at least &lt;code class=&quot;highlighter-rouge&quot;&gt;25&lt;/code&gt;. Otherwise, your process might not be able to connect to the database because all the connections are busy, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;pool&lt;/code&gt; limit does not allow spawning more. As a result, you’ll see the following error:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ConnectionTimeoutError&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;could&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obtain&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;within&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;5.000&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seconds&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waited&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;5.003&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pooled&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connections&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;were&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You might be wondering why cannot you set the &lt;code class=&quot;highlighter-rouge&quot;&gt;pool&lt;/code&gt; to some arbitrarily high value so that there’s never a shortage of available connections?&lt;/p&gt;

&lt;p&gt;The answer is that the database itself also has a global limit on how many concurrent clients it can handle. For example, &lt;a href=&quot;https://elements.heroku.com/addons/heroku-postgresql&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;the Heroku PostgreSQL addon&lt;/a&gt; imposes a hardcoded limit of &lt;code class=&quot;highlighter-rouge&quot;&gt;MAX_CONNECTIONS&lt;/code&gt; setting per its database plan. &lt;a href=&quot;https://aws.amazon.com/rds/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AWS RDS&lt;/a&gt; gives much more flexibility on configuring the internals of PostgreSQL, and it’s just one of the reasons why I usually recommend &lt;a href=&quot;/heroku-postgres-aws-rds&quot;&gt;migrating the Heroku database to AWS RDS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’m describing this setting in more detail because using &lt;code class=&quot;highlighter-rouge&quot;&gt;load_async&lt;/code&gt; means that we’re using &lt;em&gt;threads within threads&lt;/em&gt;…&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center-image&quot; alt=&quot;Threads all the way down&quot; title=&quot;Threads all the way down&quot; loading=&quot;lazy&quot; src=&quot;/assets/threads-or-aliens-ac45f400fb1e4d79371cd06c04b6364212a4f6d4ebd75563011271ff34132f7e.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Each asynchronous SQL query is a separate thread that needs a new connection. The subthreads are reused from an existing pool. There’s a new config option available:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;active_record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;global_executor_concurrency&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;that lets you define how many concurrent SQL queries can be executed &lt;em&gt;per process&lt;/em&gt;. The math is getting a bit more confusing now so let’s try it with a simple example.&lt;/p&gt;

&lt;p&gt;Imagine you’re using a single Performance-L Heroku web dyno running Puma server with &lt;a href=&quot;https://devcenter.heroku.com/articles/deploying-rails-applications-with-the-puma-web-server#recommended-default-puma-process-and-thread-configuration&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;recommended settings&lt;/a&gt;, i.e., 8 workers (processes) 5 max threads each. Additionally, you’re using a single Sidekiq worker on a Performance-M dyno with max concurrency configured to 10.&lt;/p&gt;

&lt;p&gt;Without &lt;code class=&quot;highlighter-rouge&quot;&gt;load_async&lt;/code&gt;, you should set the &lt;code class=&quot;highlighter-rouge&quot;&gt;pool&lt;/code&gt; value to 10 so that your Sidekiq worker always has an active connection available. The max number of concurrent connections that your database might receive with this config is quick maths:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;5 x 8 + 1 x 10 = 50&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you introduce &lt;code class=&quot;highlighter-rouge&quot;&gt;load_async&lt;/code&gt; with the default &lt;code class=&quot;highlighter-rouge&quot;&gt;global_executor_concurrency&lt;/code&gt; of 4 you’ll get:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;8 x 5 + 8 x 4 + 1 x 10 + 1 x 4 = 86&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and &lt;code class=&quot;highlighter-rouge&quot;&gt;pool&lt;/code&gt; should be configured to &lt;code class=&quot;highlighter-rouge&quot;&gt;14&lt;/code&gt; to account for possible additional connections from the Sidekiq process.&lt;/p&gt;

&lt;p&gt;So you can see that by just &lt;em&gt;enabling&lt;/em&gt; the new API, we almost doubled the potential number of maximum concurrent database clients. I hope that your current Heroku plan is ready for that…&lt;/p&gt;

&lt;p&gt;But, it also means that each process can schedule max 4 asynchronous queries simultaneously. So if you try to parallelize three SQL queries inside your bottleneck web endpoint, you’ve already exhausted 3 out of 4 connections available for &lt;code class=&quot;highlighter-rouge&quot;&gt;load_async&lt;/code&gt;. And that’s just one out of 5 Puma threads (we’re using a limit of 4 async connections per worker). So I’m not sure if this is a perfect config. At the same time, increasing &lt;code class=&quot;highlighter-rouge&quot;&gt;global_executor_concurrency&lt;/code&gt; should always be performed carefully because each additional connection uses more database memory and decreases overall database performance.&lt;/p&gt;

&lt;p&gt;Honestly, I don’t know what’s the perfect tradeoff here. But, I hope that this extended description of how these variables interact will give you a solid background for confidently tweaking them in your production app. Inspecting the number of currently active connections using the metadata SQL query and playing with different threading and pool settings together with &lt;a href=&quot;https://github.com/JoeDog/siege&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Siege load testing&lt;/a&gt; can be a great way to better understand how these values impact each other.&lt;/p&gt;

&lt;p&gt;Comprehensive monitoring is critical if you want to introduce &lt;code class=&quot;highlighter-rouge&quot;&gt;load_async&lt;/code&gt; to a production app with non-trivial traffic. I’d highly recommend adding alerts for a number of active database clients and memory usage. That’s another area where AWS RDS is superior to Heroku PostgreSQL addon thanks to seamless CloudWatch integration:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center-image&quot; alt=&quot;Abot AWS Cloudwatch dashboard requests detected by Scout APM&quot; title=&quot;Abot AWS Cloudwatch dashboard requests detected by Scout APM&quot; src=&quot;/assets/abot-cloudwatch-dashboard-7099845bc540346474947ae0098044c73eb6db7a6586d1cd73d7633a8c9dec7a.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;center annotation&quot;&gt;AWS Cloudwatch dashboard. Web servers and PG stats at a glance.&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;You can read more about moving your Heroku db to AWS RDS in &lt;a href=&quot;/heroku-postgres-aws-rds&quot;&gt;my other blog post&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;a-recommended-use-case-for-load_async-in-production&quot;&gt;A recommended use case for &lt;code class=&quot;highlighter-rouge&quot;&gt;load_async&lt;/code&gt; in production&lt;/h2&gt;

&lt;p&gt;Now we understand why asynchronous queries should always be introduced with care. Database connections are a precious resource and should only be assigned to hand-picked places where it’s likely to make the best overall impact. &lt;a href=&quot;https://scoutapm.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;ScoutAPM&lt;/a&gt; is a tool that I regularly use while conducting my &lt;a href=&quot;https://pawelurbanek.com/#rails-performance-tuning&quot;&gt;Rails performance audits&lt;/a&gt;. My favorite feature is an instant overview of places where optimizing performance makes the most sense. You can easily sort your endpoints by the percentage of resources used:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center-image&quot; alt=&quot;Abot Polls for Slack endpoints performance analyzed with ScoutAPM&quot; title=&quot;Abot Polls for Slack endpoints performance analyzed with ScoutAPM&quot; loading=&quot;lazy&quot; src=&quot;/assets/bottleneck-endpoints-2bf7132e2d487365652936863347608a5230373293a7319875b3be2f3845c95b.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;center annotation&quot;&gt;&lt;a href=&quot;https://abot.app&quot; target=&quot;_blank&quot; class=&quot;link-grey&quot;&gt;Abot for Slack&lt;/a&gt; slowest endpoints reported by ScoutAPM.&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Later you can dive into the performance characteristics of each endpoint and check what part of its processing time is spent in the &lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveRecord&lt;/code&gt; layer:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center-image&quot; alt=&quot;ScoutAPM endpoint all layers&quot; title=&quot;ScoutAPM endpoint all layers&quot; loading=&quot;lazy&quot; src=&quot;/assets/scout-layer-all-9850e750c460da69ea07c0c7213780d5214574bcddc7854dbbc55a487344c0f7.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center-image&quot; alt=&quot;ScoutAPM endpoint database layer&quot; title=&quot;ScoutAPM endpoint database layer&quot; loading=&quot;lazy&quot; src=&quot;/assets/scout-layer-db-905e127d82f4cdc1f04a27deb4d475b187007bd7dea00742b3492d4a342158ae.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;center annotation&quot;&gt;Visual overview of endpoint processing time layers provided by ScoutAPM.&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;But time spent in the &lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveRecord&lt;/code&gt; layer does not necessarily mean that you’re dealing with slow queries. Often an N+1 bug could be causing hundreds of queries to be generated in a single request. You cannot fix N+1 using &lt;code class=&quot;highlighter-rouge&quot;&gt;load_async&lt;/code&gt; (check out &lt;a href=&quot;/rails-n-1-queries&quot;&gt;this blog post&lt;/a&gt; for info on how to do it correctly). To validate if you’re dealing with slow queries, you can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;Slow Query Insights&lt;/code&gt; ScoutAPM feature and track slow database queries and match them with potential bottleneck endpoints.&lt;/p&gt;

&lt;p&gt;Alternatively, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;calls&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;outliers&lt;/code&gt; methods of &lt;a href=&quot;https://github.com/pawurb/rails-pg-extras&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Rails PG Extras&lt;/a&gt; to detect slow queries that are using a significant ratio of your db processing time. Then with the help of the &lt;a href=&quot;https://github.com/basecamp/marginalia&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;marginalia gem&lt;/a&gt;, you can trace the endpoints that generate those queries. You can find more info about using Rails PG Extras for improving database performance in &lt;a href=&quot;/postgresql-fix-performance&quot;&gt;this blog post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you have these pieces of data, you can decide if there are places that eat up most of your apps’ processing time, and the time is spent in the database layer. In that case, it’s possible that slow queries could be parallelized and result in a significant overall improvement.&lt;/p&gt;

&lt;p&gt;Another suitable use case for async SQL are endpoints that, in addition to slow queries, perform 3rd party HTTP requests. Adding &lt;code class=&quot;highlighter-rouge&quot;&gt;load_async&lt;/code&gt; to an SQL query statement before an HTTP call would effectively parallelize it reducing a response time.&lt;/p&gt;

&lt;p&gt;Continuous observation and iterative approach are critical when applying performance fixes for non-trivial Rails apps. Before adding &lt;code class=&quot;highlighter-rouge&quot;&gt;load_async&lt;/code&gt; to any of the queries, you should double-check if speeding it up and paying the price of additional database connections is potentially worth it.&lt;/p&gt;

&lt;h2 id=&quot;miscellaneous&quot;&gt;Miscellaneous&lt;/h2&gt;

&lt;h3 id=&quot;async-eager-loading-for-relations&quot;&gt;Async eager loading for relations&lt;/h3&gt;

&lt;p&gt;N+1 queries are the top performance killer for Rails applications. Most of the time, they can be easily avoided by using so-called &lt;em&gt;eager loading&lt;/em&gt;. I wrote about it in more detail &lt;a href=&quot;/rails-n-1-queries&quot;&gt;in my other blog post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Currently &lt;code class=&quot;highlighter-rouge&quot;&gt;load_async&lt;/code&gt; does not seem to support eager loaded queries. Running:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;vi&quot;&gt;@users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;slow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;load_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@users&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Produces:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;ASYNC User Load (0.0ms) (db time 1003.1ms)
Comment Load (20.0ms)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So, relation seems to be loaded synchronously inside a main thread. But, anyway there would probably be little benefit for backgrounding eager loading queries because they are usually fetching data over well-indexed foreign keys. Right now &lt;a href=&quot;https://github.com/rails/rails/pull/41867&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;a related PR&lt;/a&gt; appears to be on hold.&lt;/p&gt;

&lt;h3 id=&quot;asynchronous-sql-inside-a-transaction&quot;&gt;Asynchronous SQL inside a transaction&lt;/h3&gt;

&lt;p&gt;If you try to run an async query inside a transaction, it would fallback to synchronous execution:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;transaction&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;slow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;load_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@users&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Produces:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;TRANSACTION&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Load&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2005.3&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;TRANSACTION&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.7&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;COMMIT&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You have to remember that the infamous ActiveRecord callback methods (excluding &lt;code class=&quot;highlighter-rouge&quot;&gt;after_commit&lt;/code&gt;) are always implicitly wrapped in a database transaction. It means that asynchronous queries would never work there.&lt;/p&gt;

&lt;p&gt;Another non-obvious context where all the calls are wrapped in a transaction is a Rails console &lt;code class=&quot;highlighter-rouge&quot;&gt;sandbox&lt;/code&gt; mode. Running:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;rails console &lt;span class=&quot;nt&quot;&gt;--sandbox&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Spawns a new console process, and all the database changes are rolled back on exit. So, you have to remember that it’s impossible to test &lt;code class=&quot;highlighter-rouge&quot;&gt;load_async&lt;/code&gt; inside a sandbox mode.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Before Rails 7, it was possible to wrap SQL calls into an asynchronous thread and add parallelism to database interactions. But, DIY solutions were a highly probable source of &lt;em&gt;sneaky&lt;/em&gt; bugs. The new built-it way for scheduling async queries comes with additional thread-safety and data consistency guarantees. I believe that if used with care, &lt;code class=&quot;highlighter-rouge&quot;&gt;load_async&lt;/code&gt; has the potential to significantly improve many typical performance bottleneck scenarios.&lt;/p&gt;

&lt;p&gt;I did try to do in-depth enough research on how the &lt;code class=&quot;highlighter-rouge&quot;&gt;load_async&lt;/code&gt; API works and include all the relevant info. But, given its newness and complexity, I’m sure new interesting facts start popping up once it becomes more widely adopted in production environments. I’m planning to keep this guide up to date, so please let me know if you find that some info is missing or inaccurate.&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Mar 2022 10:37:02 +0100</pubDate>
        <link>https://pawelurbanek.com/rails-load-async</link>
        <guid isPermaLink="true">https://pawelurbanek.com/rails-load-async</guid>
      </item>
    
      <item>
        <title>Ruby Quick Tip - Use Deep Fetch for Nested Hash Values</title>
        <description>&lt;p&gt;Hashes are the most common data structures in Ruby and Rails apps. In this tutorial, I’ll describe a simple tip that makes working with hash values less prone to errors. It also improves code readability and provides a unified way of handling data structure issues.&lt;/p&gt;

&lt;p&gt;That’s a lot of promises for a &lt;em&gt;quick tip&lt;/em&gt;, so let’s get started!&lt;/p&gt;

&lt;h2 id=&quot;how-not-to-work-with-ruby-hashes&quot;&gt;How not to work with Ruby hashes…&lt;/h2&gt;

&lt;p&gt;Deeply nested hashes are first-class citizens in Rails apps, and it is a common practice to write code like that:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;present?&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# some logic&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# other logic&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;One disadvantage of this approach is that it implicitly assumes a hash structure. In this particular example, we’re working with &lt;code class=&quot;highlighter-rouge&quot;&gt;params&lt;/code&gt; so an external source of data. By writing code like that, you’re allowing your users to crash the app because you’re optimistically assuming that the received data structure will always be correct. Invalid input could raise different errors depending on the payload.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://apidock.com/ruby/Hash/dig&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dig&lt;/code&gt; method&lt;/a&gt; introduced in Ruby 2.3 can offer a slight improvement:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;present?&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# some logic&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# other logic&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TypeError&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# handle invalid structure&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But &lt;code class=&quot;highlighter-rouge&quot;&gt;dig&lt;/code&gt; API makes it impossible to differentiate the missing Hash key from the present key containing a &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; value. And in practice, it’s often necessary to handle those two cases separately.&lt;/p&gt;

&lt;h2 id=&quot;hash-fetch-to-the-rescue&quot;&gt;Hash &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt; to the rescue&lt;/h2&gt;

&lt;p&gt;A built-in &lt;a href=&quot;https://apidock.com/ruby/Hash/fetch&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Hash &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt;&lt;/a&gt; offers another solution to the described issue. Let’s see it in action:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;present?&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# some logic&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# other logic&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;KeyError&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# handle missing key&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For the price of a slightly more verbose implementation, we can now easily handle &lt;code class=&quot;highlighter-rouge&quot;&gt;params&lt;/code&gt; with missing keys. But we’re still making an implicit assumption that received data will contain nested hashes in the accessed keys. Users could still crash our app by sending the following &lt;code class=&quot;highlighter-rouge&quot;&gt;params&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;user: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;comment: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And the chaining looks kind of ugly. So let’s see how we can do it even better with a simple Hash extension.&lt;/p&gt;

&lt;h2 id=&quot;introducing-deep_fetch&quot;&gt;Introducing &lt;code class=&quot;highlighter-rouge&quot;&gt;deep_fetch&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;So here’s our final implementation using the custom &lt;code class=&quot;highlighter-rouge&quot;&gt;deep_fetch&lt;/code&gt; Hash method:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;deep_fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ParamsError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Invalid input&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;present?&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# some logic&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# other logic&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ParamsError&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# handle invalid params&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;deep_fetch&lt;/code&gt; works like a combination of &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;dig&lt;/code&gt;. Instead of returning &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; when a key is not found, it raises a &lt;code class=&quot;highlighter-rouge&quot;&gt;KeyError&lt;/code&gt; or returns a result of running a provided block. Here’s the monkey-patched implementation:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;config/initializers/deep_fetch.rb&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;DeepFetch&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deep_fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;hash_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NoMethodError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;KeyError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActionController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ParameterMissing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;block_given?&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;KeyError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;backtrace&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Hash&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DeepFetch&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ActionController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Parameters&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DeepFetch&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;center annotation&quot;&gt;Surprisingly &lt;code&gt;ActionController::Parameters&lt;/code&gt; does not inherit from &lt;code&gt;Hash&lt;/code&gt;, so it has to be extended separately.&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;If you’re not fond of monkey-patching, you can use refinements instead:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;HashHelpers&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;refine&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DeepFetch&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;refine&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActionController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Parameters&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DeepFetch&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and include &lt;code class=&quot;highlighter-rouge&quot;&gt;HashHelpers&lt;/code&gt; in every class where you want to use the extension:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UsersController&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;HashHelpers&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;By using &lt;code class=&quot;highlighter-rouge&quot;&gt;deep_fetch&lt;/code&gt;, we can handle all the described cases. If the structure is invalid, we’ll receive an easy to rescue error, so users can no longer break our app by sending invalid input. Even if the received value is &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;, we can be sure that it was extracted from correctly structured params.&lt;/p&gt;

&lt;h2 id=&quot;opinionated-summary&quot;&gt;Opinionated summary&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;deep_fetch&lt;/code&gt; could be a viable alternative to heavyweight libraries for validating the structure of any Ruby Hash. I’d even suggest going as far as assuming Hash bracket notation as an explicit sign that missing key is expected and should be handled accordingly. It means that the following code should not pass a code review:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It implicitly assumes that &lt;code class=&quot;highlighter-rouge&quot;&gt;comment&lt;/code&gt; contains a Hash, so it is a highly probable source of random &lt;code class=&quot;highlighter-rouge&quot;&gt;NoMethodError&lt;/code&gt; bugs on production. Adapting a &lt;em&gt;deep fetching approach&lt;/em&gt; also makes sense for &lt;em&gt;internal&lt;/em&gt; hash values, i.e. those not received from users. I’ve used to &lt;em&gt;fight&lt;/em&gt; over this one in code reviews vs. comments like:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“What’s the point of using &lt;code class=&quot;highlighter-rouge&quot;&gt;deep_fetch&lt;/code&gt; for the value that I AM SURE is there?”&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;And that’s &lt;em&gt;exactly&lt;/em&gt; the point! By using &lt;code class=&quot;highlighter-rouge&quot;&gt;deep_fetch&lt;/code&gt;, you’re making it explicit that value &lt;em&gt;must&lt;/em&gt; be there, and it’s clear that invalid structure is not expected.&lt;/p&gt;

&lt;p&gt;I think that sticking to the convention of always &lt;em&gt;deep fetching&lt;/em&gt; provides many benefits with minimal complexity overhead. Implementation is as simple as dropping in a dozen lines of code into your project, so I highly encourage you to give it a try.&lt;/p&gt;
</description>
        <pubDate>Tue, 15 Feb 2022 12:39:14 +0100</pubDate>
        <link>https://pawelurbanek.com/ruby-hash-fetch</link>
        <guid isPermaLink="true">https://pawelurbanek.com/ruby-hash-fetch</guid>
      </item>
    
  </channel>
</rss>
