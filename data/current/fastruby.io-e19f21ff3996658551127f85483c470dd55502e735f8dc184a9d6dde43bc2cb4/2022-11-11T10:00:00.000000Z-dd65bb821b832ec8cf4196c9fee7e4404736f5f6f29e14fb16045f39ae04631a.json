{
  "title":"How to extend Rails associations",
  "date":"2022-11-11T10:00:00.000000Z",
  "author":"ashwini",
  "id":"https://fastruby.io/blog/rails/how-to-extend-rails-associations",
  "link":"https://fastruby.io/blog/rails/how-to-extend-rails-associations.html",
  "content":"<p>You might have extended classes or instances in Rails, but do you know you can also extend Rails associations?</p>\n<blockquote>\n\n  <div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Account</span> <span class=\"o\">&lt;</span> <span class=\"no\">ActiveRecord</span><span class=\"o\">::</span><span class=\"no\">Base</span>\n    <span class=\"n\">has_many</span> <span class=\"ss\">:people</span><span class=\"p\">,</span> <span class=\"o\">-&gt;</span> <span class=\"p\">{</span> <span class=\"n\">extending</span> <span class=\"no\">FindOrCreateByNameExtension</span> <span class=\"p\">}</span>\n<span class=\"k\">end</span>\n</code></pre></div>  </div>\n</blockquote>\n\n\n\n<h3 id=\"what-exactly-does-extending-an-association-do\">What exactly does extending an association do?</h3>\n\n<p>The proxy objects that control access to associations can be extended through anonymous\nmodules. This is especially beneficial for adding new finders, creators, and other\nfactory-type methods that are only used as part of an association.</p>\n\n<p>Let’s look at the following code, Here we are adding a new finder method called <code class=\"highlighter-rouge\">find_or_create_by_name</code> on this association with <code class=\"highlighter-rouge\">Person</code>.</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Account</span> <span class=\"o\">&lt;</span> <span class=\"no\">ActiveRecord</span><span class=\"o\">::</span><span class=\"no\">Base</span>\n    <span class=\"n\">has_many</span> <span class=\"ss\">:people</span> <span class=\"k\">do</span>\n        <span class=\"k\">def</span> <span class=\"nf\">find_or_create_by_name</span><span class=\"p\">(</span><span class=\"nb\">name</span><span class=\"p\">)</span>\n            <span class=\"n\">first_name</span><span class=\"p\">,</span> <span class=\"n\">last_name</span> <span class=\"o\">=</span> <span class=\"nb\">name</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot; &quot;</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n            <span class=\"n\">find_or_create_by_first_name_and_last_name</span><span class=\"p\">(</span><span class=\"n\">first_name</span><span class=\"p\">,</span> <span class=\"n\">last_name</span><span class=\"p\">)</span>\n        <span class=\"k\">end</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">person</span> <span class=\"o\">=</span> <span class=\"no\">Account</span><span class=\"p\">.</span><span class=\"nf\">first</span><span class=\"p\">.</span><span class=\"nf\">people</span><span class=\"p\">.</span><span class=\"nf\">find_or_create_by_name</span><span class=\"p\">(</span><span class=\"s2\">&quot;David Heinemeier Hansson&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">person</span><span class=\"p\">.</span><span class=\"nf\">first_name</span> <span class=\"c1\"># =&gt; &quot;David&quot;</span>\n<span class=\"n\">person</span><span class=\"p\">.</span><span class=\"nf\">last_name</span>  <span class=\"c1\"># =&gt; &quot;Heinemeier Hansson&quot;</span>\n</code></pre></div></div>\n\n<p>This method can only be used as part of this association. if you try to access this method through the <code class=\"highlighter-rouge\">Person</code> object directly you will not get it. It is available only when you access it through the association.</p>\n\n<p>If you have a business requirement that says you want to create a new Person by name when it’s for an existing Account, this provides a straightforward solution.</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Not available as a class method</span>\n<span class=\"n\">irb</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">):</span><span class=\"mo\">005</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span> <span class=\"no\">Person</span><span class=\"p\">.</span><span class=\"nf\">methods</span><span class=\"p\">.</span><span class=\"nf\">grep</span> <span class=\"sr\">/find_or_create_by_name/</span>\n<span class=\"o\">=&gt;</span> <span class=\"p\">[]</span>\n\n<span class=\"c1\"># Not accessible directly through an instance of that class</span>\n<span class=\"n\">irb</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">):</span><span class=\"mo\">010</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span> <span class=\"no\">Person</span><span class=\"p\">.</span><span class=\"nf\">first</span><span class=\"p\">.</span><span class=\"nf\">methods</span><span class=\"p\">.</span><span class=\"nf\">grep</span> <span class=\"sr\">/find_or_create_by_name/</span>\n<span class=\"o\">=&gt;</span> <span class=\"p\">[]</span>\n\n<span class=\"c1\"># Accessible through association</span>\n<span class=\"n\">irb</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">):</span><span class=\"mo\">011</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span> <span class=\"n\">person</span> <span class=\"o\">=</span> <span class=\"no\">Account</span><span class=\"p\">.</span><span class=\"nf\">first</span><span class=\"p\">.</span><span class=\"nf\">people</span><span class=\"p\">.</span><span class=\"nf\">methods</span><span class=\"p\">.</span><span class=\"nf\">grep</span> <span class=\"sr\">/find_or_create_by_name/</span>\n<span class=\"o\">=&gt;</span> <span class=\"p\">[</span><span class=\"ss\">:find_or_create_by_name</span><span class=\"p\">]</span>\n\n</code></pre></div></div>\n\n<p>If you need to share the same method between many associations, you can use a named extension module.</p>\n\n<p>You can put the finder method inside a module, like this:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">module</span> <span class=\"nn\">FindOrCreateByNameExtension</span>\n    <span class=\"k\">def</span> <span class=\"nf\">find_or_create_by_name</span><span class=\"p\">(</span><span class=\"nb\">name</span><span class=\"p\">)</span>\n        <span class=\"n\">first_name</span><span class=\"p\">,</span> <span class=\"n\">last_name</span> <span class=\"o\">=</span> <span class=\"nb\">name</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot; &quot;</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"n\">find_or_create_by_first_name_and_last_name</span><span class=\"p\">(</span><span class=\"n\">first_name</span><span class=\"p\">,</span> <span class=\"n\">last_name</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>On Rails 4.0 and above, you can use the following syntax to add your extension module:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Account</span> <span class=\"o\">&lt;</span> <span class=\"no\">ActiveRecord</span><span class=\"o\">::</span><span class=\"no\">Base</span>\n    <span class=\"n\">has_many</span> <span class=\"ss\">:people</span><span class=\"p\">,</span> <span class=\"o\">-&gt;</span> <span class=\"p\">{</span> <span class=\"n\">extending</span> <span class=\"no\">FindOrCreateByNameExtension</span> <span class=\"p\">}</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Company</span> <span class=\"o\">&lt;</span> <span class=\"no\">ActiveRecord</span><span class=\"o\">::</span><span class=\"no\">Base</span>\n    <span class=\"n\">has_many</span> <span class=\"ss\">:people</span><span class=\"p\">,</span> <span class=\"o\">-&gt;</span> <span class=\"p\">{</span> <span class=\"n\">extending</span> <span class=\"no\">FindOrCreateByNameExtension</span> <span class=\"p\">}</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>On Rails 3.2 and lower versions, use the following syntax:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Account</span> <span class=\"o\">&lt;</span> <span class=\"no\">ActiveRecord</span><span class=\"o\">::</span><span class=\"no\">Base</span>\n    <span class=\"n\">has_many</span> <span class=\"ss\">:people</span><span class=\"p\">,</span> <span class=\"ss\">:extend</span> <span class=\"o\">=&gt;</span> <span class=\"no\">FindOrCreateByNameExtension</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<h3 id=\"applying-conditions-in-an-extension-module\">Applying conditions in an extension module</h3>\n\n<p>If you have some condition applied to an association, you can chain that condition in an extension module like this:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># before:</span>\n<span class=\"n\">belongs_to</span> <span class=\"ss\">:clinic</span><span class=\"p\">,</span> <span class=\"o\">-&gt;</span> <span class=\"p\">{</span> <span class=\"ss\">clinic_id: </span><span class=\"vi\">@clinic_id</span> <span class=\"p\">},</span> <span class=\"ss\">primary_key: :person_id</span><span class=\"p\">,</span> <span class=\"ss\">foreign_key: :person_id</span>\n\n<span class=\"c1\"># After:</span>\n<span class=\"n\">belongs_to</span> <span class=\"ss\">:clinic</span><span class=\"p\">,</span>  <span class=\"o\">-&gt;</span> <span class=\"p\">{</span> <span class=\"n\">extending</span><span class=\"p\">(</span><span class=\"no\">MultiAssociation</span><span class=\"o\">::</span><span class=\"no\">OnTestId</span><span class=\"p\">).</span><span class=\"nf\">where</span><span class=\"p\">(</span><span class=\"ss\">clinic_id: </span><span class=\"vi\">@clinic_id</span><span class=\"p\">)</span> <span class=\"p\">},</span> <span class=\"ss\">primary_key: :person_id</span><span class=\"p\">,</span> <span class=\"ss\">foreign_key: :person_id</span>\n\n</code></pre></div></div>\n\n<p>Now you know how to use extension modules with associations.</p>\n\n<p>Happy Learning!</p>"
}