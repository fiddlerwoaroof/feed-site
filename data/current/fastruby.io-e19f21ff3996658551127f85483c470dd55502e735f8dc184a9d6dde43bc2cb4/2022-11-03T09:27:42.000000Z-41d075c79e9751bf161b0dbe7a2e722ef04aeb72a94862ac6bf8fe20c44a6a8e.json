{
  "title":"Dual Booting with Engines and Gems",
  "date":"2022-11-03T09:27:42.000000Z",
  "author":"arieljuod",
  "id":"https://fastruby.io/blog/ruby/dual-boot/dual-booting-gems",
  "link":"https://fastruby.io/blog/ruby/dual-boot/dual-booting-gems.html",
  "content":"<p>Gems are a central part in a Rails application, they help us add new functionality to our apps so we don’t have to reinvent the wheel, but also allows us to extract code to better organize the codebase and to share logic between multiple apps. In many cases, we have custom made gems, and we need to ensure they will work properly with the two Rails versions we run when we use the <a href=\"https://www.fastruby.io/blog/upgrade-rails/dual-boot/dual-boot-with-rails-6-0-beta.html\">Dual Boot technique</a> during upgrades. But… How do you dual boot the gems?</p>\n\n\n\n<h2 id=\"the-problem\">The Problem</h2>\n\n<p>When we think about dual booting an application, we usually target specific versions of a gem in our main <code class=\"highlighter-rouge\">Gemfile</code> when we know which one is compatible with the different Rails versions we are using. For example, in one of our applications we have this:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Gemfile</span>\n\n<span class=\"k\">if</span> <span class=\"k\">next</span><span class=\"p\">?</span>\n  <span class=\"n\">gem</span> <span class=\"s2\">&quot;jekyll&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;~&gt; 4.0.1&quot;</span>\n<span class=\"k\">else</span>\n  <span class=\"n\">gem</span> <span class=\"s2\">&quot;jekyll&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;~&gt; 3.7.4&quot;</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>We know that we need a different version of the <code class=\"highlighter-rouge\">jekyll</code> gem for each case.</p>\n\n<p>The problem comes when the gem is not a public gem but an internal gem that is not yet compatible with the new Rails version.</p>\n\n<blockquote>\n  <p><a href=\"https://guides.rubyonrails.org/engines.html\">Engines</a> are a more specific case of a gem, so we’ll talk about gems in this article and the same ideas apply.</p>\n</blockquote>\n\n<h3 id=\"non-dual-booting-approaches\">Non-Dual Booting Approaches</h3>\n\n<p>If the gem lives in a separate repository, one approach we can take is to update the gem’s main branch to only work with the new Rails version and then use the <code class=\"highlighter-rouge\">if next?</code> conditional to use different versions/commits/tags for each Rails version:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"k\">next</span><span class=\"p\">?</span>\n  <span class=\"n\">gem</span> <span class=\"s2\">&quot;custom-gem&quot;</span><span class=\"p\">,</span> <span class=\"ss\">github: </span><span class=\"s2\">&quot;my/repo&quot;</span><span class=\"p\">,</span> <span class=\"ss\">ref: </span><span class=\"s2\">&quot;some-commit-sha&quot;</span>\n<span class=\"k\">else</span>\n  <span class=\"n\">gem</span> <span class=\"s2\">&quot;custom-gem&quot;</span><span class=\"p\">,</span> <span class=\"ss\">github: </span><span class=\"s2\">&quot;my/repo&quot;</span><span class=\"p\">,</span> <span class=\"ss\">ref: </span><span class=\"s2\">&quot;some-older-commit-sha&quot;</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>This is the simplest approach, but the caveat is that, during the upgrade process, we won’t be able to submit fixes or updates to the gem used by the current Rails version, since the main branch will only be compatible with the new version of Rails.</p>\n\n<p>To prevent that, another slightly different approach is to create a separate branch in the gem’s repository, the main branch being compatible with the current Rails version and the new branch being compatible with the new Rails version and it gets merged at the end of the upgrade. Then, in the Gemfile, we can specify different branches for the source of the gem:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"k\">next</span><span class=\"p\">?</span>\n  <span class=\"n\">gem</span> <span class=\"s2\">&quot;custom-gem&quot;</span><span class=\"p\">,</span> <span class=\"ss\">github: </span><span class=\"s2\">&quot;my/repo&quot;</span><span class=\"p\">,</span> <span class=\"ss\">branch: </span><span class=\"s2\">&quot;new-rails&quot;</span>\n<span class=\"k\">else</span>\n  <span class=\"n\">gem</span> <span class=\"s2\">&quot;custom-gem&quot;</span><span class=\"p\">,</span> <span class=\"ss\">github: </span><span class=\"s2\">&quot;my/repo&quot;</span><span class=\"p\">,</span> <span class=\"ss\">branch: </span><span class=\"s2\">&quot;main&quot;</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>This allows us to continue adding code to the gem that’s used by the app in production. But the caveat, in this case, is that we have to keep the branches in sync, so the new branch also includes the changes done in the main branch.</p>\n\n<h2 id=\"dual-booting-a-gem\">Dual Booting a Gem</h2>\n\n<p>If you noticed, those are the same two problems Dual Booting aims to solve when upgrading a Rails application, so we can borrow the dual booting idea and apply it to a gem: The gem adds compatibility with the next Rails version, without losing compatibility with the current one, allowing us to modify the gem at any point during the upgrade process ensuring that the latest version of the gem is compatible with both Rails versions.</p>\n\n<h3 id=\"loosen-the-rails-restrictions\">Loosen the Rails Restrictions</h3>\n\n<p>The first limitation we typically see during our upgrades is the <code class=\"highlighter-rouge\">gemspec</code> file of the gem adding a strict dependency on the current Rails version. For example, in a Rails 5.2 application we tend to see custom gems with something like this in its gemspec:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># custom_gem.gemspec</span>\n\n<span class=\"n\">s</span><span class=\"p\">.</span><span class=\"nf\">add_dependency</span> <span class=\"s2\">&quot;rails&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;~&gt; 5.2.4&quot;</span>\n</code></pre></div></div>\n\n<p>If we try to dual boot the main application with Rails 6.0, <a href=\"https://bundler.io\">Bundler</a> won’t be able to resolve a matching version of <code class=\"highlighter-rouge\">custom_gem</code> that is compatible, so we have to loosen this dependency. We don’t go too far, like with dual booting, we move up to the next minor version:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># custom_gem.gemspec</span>\n\n<span class=\"n\">s</span><span class=\"p\">.</span><span class=\"nf\">add_dependency</span> <span class=\"s2\">&quot;rails&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&gt;= 5.2.4&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&lt; 6.1.0&quot;</span>\n</code></pre></div></div>\n\n<blockquote>\n  <p>We allow any patch version newer than Rails 5.2.4 and up to any patch version of Rails 6.0</p>\n</blockquote>\n\n<p>Now Bundler will be able to resolve this because our gem reports being compatible with both Rails 5.2 and 6.0. But this is not enough, we have to actually make the gem compatible with Rails 5.2 and 6.0.</p>\n\n<blockquote>\n  <p>Note that we DID NOT add conditionals in the <code class=\"highlighter-rouge\">gemspec</code> file! we will add that in the corresponding <code class=\"highlighter-rouge\">Gemfile</code>.</p>\n</blockquote>\n\n<h3 id=\"conditional-code\">Conditional Code</h3>\n\n<p>When dual booting, we ideally want to update the code to be compatible with the new Rails version in a way that the same also works with the current Rails version (we call them backwards-compatible changes). This is not always possible, so in many cases we have to add a conditional to execute different code for each Rails version. We can do the same in the gem:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"no\">Rails</span><span class=\"p\">.</span><span class=\"nf\">version</span> <span class=\"o\">~=</span> <span class=\"sr\">/^6.0/</span>\n  <span class=\"c1\"># some rails 6.0 specific code</span>\n<span class=\"k\">else</span>\n  <span class=\"c1\"># some rails 5.2 specific code</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<h3 id=\"test-suite-inside-the-engine\">Test Suite Inside the Engine</h3>\n\n<h3 id=\"testing-with-a-dummy-app\">Testing With a Dummy App</h3>\n\n<p>If the gem includes standalone tests (tests that run independent from the main Rails application), we typically test them using a dummy Rails application (this is really common for Engines). When that’s the case, we can dual boot the dummy application the same way we dual boot the main application, and then run the tests once for each Rails version. That way we can test that our code changes are safe in both Rails versions.</p>\n\n<h3 id=\"tests-without-a-dummy-app\">Tests Without a Dummy App</h3>\n\n<p>In some cases, the dependency is not with the Rails gem but with some railtie (like <code class=\"highlighter-rouge\">active_support</code> for example). In those cases the gem probably won’t have a dummy Rails application to run the tests since it doesn’t need a complete app, but it can still have tests. In these cases, we also have a <code class=\"highlighter-rouge\">Gemfile</code> and a <code class=\"highlighter-rouge\">Gemfile.lock</code>, and we can apply the dual boot idea here. There’s one detail to keep in mind… in this cases, the <code class=\"highlighter-rouge\">Gemfile</code> may look like this:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Gemfile</span>\n<span class=\"n\">source</span> <span class=\"s2\">&quot;https://rubygems.org&quot;</span>\n\n<span class=\"n\">gemspec</span>\n</code></pre></div></div>\n\n<p>We can still dual boot this, we can create the <code class=\"highlighter-rouge\">Gemfile.next</code> symlink and add conditionals:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Gemfile</span>\n<span class=\"n\">source</span> <span class=\"s2\">&quot;https://rubygems.org&quot;</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">next?</span>\n  <span class=\"no\">File</span><span class=\"p\">.</span><span class=\"nf\">basename</span><span class=\"p\">(</span><span class=\"kp\">__FILE__</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Gemfile.next&quot;</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">gemspec</span>\n\n<span class=\"k\">if</span> <span class=\"k\">next</span><span class=\"p\">?</span>\n  <span class=\"n\">gem</span> <span class=\"s2\">&quot;active_support&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;~&gt; 6.0.5&quot;</span>\n<span class=\"k\">else</span>\n  <span class=\"n\">gem</span> <span class=\"s2\">&quot;active_support&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;~&gt; 5.2.4&quot;</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>The strict version specified in the conditionals will tell Bundler which version of the game to use for each <code class=\"highlighter-rouge\">Gemfile.lock</code> file. This file is not used by the main application when using the gem, this is only used for the gem’s standalone tests (or when the gem is meant to also be run as a standalone application).</p>\n\n<blockquote>\n  <p>Note that the versions used there must be within the range specified in the <code class=\"highlighter-rouge\">gemspec</code>.</p>\n</blockquote>\n\n<p>Then we can generate the new <code class=\"highlighter-rouge\">Gemfile.lock.next</code> (<a href=\"https://www.fastruby.io/blog/ruby/dual-boot/generating-gemfile-next-lock.html\">don’t do it from scratch!</a>) and run the tests with different sets of gems:</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>bundle <span class=\"nb\">exec </span>rspec\n\n<span class=\"c\"># and</span>\n\n<span class=\"nv\">BUNDLE_GEMFILE</span><span class=\"o\">=</span>Gemfile.next bundle <span class=\"nb\">exec </span>rspec\n</code></pre></div></div>\n\n<h3 id=\"updated-gemfilelock\">Updated Gemfile.lock</h3>\n\n<p>Since the Gemfile changed, we also need running <code class=\"highlighter-rouge\">bundle install</code> to keep the <code class=\"highlighter-rouge\">Gemfile.lock</code> in sync, because the gem’s dependencies restrictions changed. We don’t want to change any other gem except the one we are updating, so the changes in the Gemfile should be minimal and only reflect the new loosen restrictions and nothing more. For example, this is the expected change:</p>\n\n<div class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    custom_gem (0.1.0)\n<span class=\"gd\">-      rails (= 5.2.4.4)\n</span><span class=\"gi\">+      rails (&gt;= 5.2.4, &lt;= 6.1.0)\n</span></code></pre></div></div>\n\n<p>There should be no update for the Rails version gem in the <code class=\"highlighter-rouge\">Gemfile.lock</code> file, <a href=\"https://www.fastruby.io/blog/ruby/dual-boot/generating-gemfile-next-lock.html\">gems versions should only be updated in the <code class=\"highlighter-rouge\">Gemfile.next.lock</code></a>. We want to make sure the application setup is not modified by our changes during the upgrade for the current Rails version.</p>\n\n<h3 id=\"testing-the-engine-in-the-main-app-test-suite\">Testing the Engine in the Main App Test Suite</h3>\n\n<p>In some cases, the gems don’t have standalone tests and the functionality is tested within the main application test suite. When that happens, we use those tests to verify the compatibility.</p>\n\n<h2 id=\"custom-gems-inside-the-main-app-repo\">Custom Gems Inside the Main App Repo</h2>\n\n<p>When engines and gems live inside the main application repository, we can only apply the dual boot technique, since we can’t target a gem in the same source using a different commit hash or branch.</p>\n\n<h2 id=\"bonus-tip-support-more-rails-versions\">Bonus Tip: Support More Rails Versions</h2>\n\n<p>In some cases, a gem needs to be updated to support more than one Rails version. We can still apply the same technique, we use the <code class=\"highlighter-rouge\">next</code> naming convention because it fits a dual boot scenario, but we can always use the same idea and use a different name for the <code class=\"highlighter-rouge\">Gemfile.next</code> for each Rails version, and we can loosen the dependency even more:</p>\n\n<p>We can have the main <code class=\"highlighter-rouge\">Gemfile</code> file, then symlink a <code class=\"highlighter-rouge\">Gemfile-5-2</code>, <code class=\"highlighter-rouge\">Gemfile-6-0</code>, <code class=\"highlighter-rouge\">Gemfile-6-1</code> (and so on), and we can use the <code class=\"highlighter-rouge\">BUNDLE_GEMFILE</code> env variable to pick which tests to run and to add conditionals in the Gemfile.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Rails upgrades for applications with custom gems have been more common for us over the last few months, and it is important for us to handle upgrades in a way that is less disruptive to our clients’ workflow. Being able to dual boot the custom gems so our clients can continue working on them during the upgrade process and, at the same time, not having to keep an extra upgrade branch in sync is a win for all. It also gives the client the confidence that the changes we are doing are always compatible, and, if they need to change something on that gem during the upgrade, they can already test their changes against the next Rails version without waiting for the upgrade, helping them adapt their code for the future.</p>"
}