{
  "title":"How to Split Rails Routes?",
  "date":"2022-11-10T10:00:00.000000Z",
  "author":"hmdros",
  "id":"https://fastruby.io/blog/rails/how-to-split-rails-routes",
  "link":"https://fastruby.io/blog/rails/how-to-split-rails-routes.html",
  "content":"<p>In this article I’ll discuss a strategy for different readability: a simple way to split your routes file on a Ruby on Rails project.</p>\n\n\n\n<p>Usually, when we work on large Ruby on Rails applications, those come with a huge routes file in the <code class=\"highlighter-rouge\">config/routes.rb</code>.</p>\n\n<p>This can lead to a bad developer experience or a “your file has too many lines” linter warning.</p>\n\n<p>Before jumping into code examples, it’s important to note that the processing order in <code class=\"highlighter-rouge\">routes.rb</code> is top to bottom.</p>\n\n<p><em>Rails 6.1</em> brought back the <a href=\"https://github.com/rails/rails/pull/37892/files\">feature</a> that allows you to load external routes file from the router, as it was <a href=\"https://github.com/rails/rails/commit/5e7d6bba79393de0279917f93b82f3b7b176f4b5\">removed</a> in 2012.</p>\n\n<p>Check out your project’s version to make sure it’s compatible with this simple solution below.</p>\n\n<p>Let’s say we have our project with this structure:</p>\n\n<p><img src=\"/blog/assets/images/controllers-for-route-splitting.png\" alt=\"Controllers folder example\">\n<em>Controllers folder example</em></p>\n\n<p>Ideally this project will have namespaced controllers structured in routes like this:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># config/routes.rb</span>\n<span class=\"no\">Rails</span><span class=\"p\">.</span><span class=\"nf\">application</span><span class=\"p\">.</span><span class=\"nf\">routes</span><span class=\"p\">.</span><span class=\"nf\">draw</span> <span class=\"k\">do</span>\n <span class=\"n\">root</span> <span class=\"ss\">to: </span><span class=\"s2\">&quot;home#index&quot;</span>\n <span class=\"n\">devise_for</span> <span class=\"ss\">:users</span>\n\n <span class=\"n\">namespace</span> <span class=\"ss\">:api</span> <span class=\"k\">do</span>\n  <span class=\"c1\"># resources</span>\n <span class=\"k\">end</span>\n\n <span class=\"n\">namespace</span> <span class=\"ss\">:admin</span> <span class=\"k\">do</span>\n  <span class=\"c1\"># resources</span>\n <span class=\"k\">end</span>\n\n <span class=\"n\">namespace</span> <span class=\"ss\">:blog</span> <span class=\"k\">do</span>\n  <span class=\"c1\"># resources</span>\n <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>Keeping a nice and useful rails-way of interpretation, these routes file can be easily split using high-level namespaces into other files.</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># config/routes/admin.rb</span>\n<span class=\"n\">namespace</span> <span class=\"ss\">:admin</span> <span class=\"k\">do</span>\n <span class=\"c1\"># resources</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># config/routes/api.rb</span>\n<span class=\"n\">namespace</span> <span class=\"ss\">:api</span> <span class=\"k\">do</span>\n <span class=\"c1\"># resources</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># config/routes/blog.rb</span>\n<span class=\"n\">namespace</span> <span class=\"ss\">:blog</span> <span class=\"k\">do</span>\n <span class=\"c1\"># resources</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>And finally:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># config/routes.rb</span>\n<span class=\"no\">Rails</span><span class=\"p\">.</span><span class=\"nf\">application</span><span class=\"p\">.</span><span class=\"nf\">routes</span><span class=\"p\">.</span><span class=\"nf\">draw</span> <span class=\"k\">do</span>\n <span class=\"n\">root</span> <span class=\"ss\">to: </span><span class=\"s2\">&quot;home#index&quot;</span>\n <span class=\"n\">devise_for</span> <span class=\"ss\">:users</span>\n\n <span class=\"n\">draw</span><span class=\"p\">(</span><span class=\"ss\">:admin</span><span class=\"p\">)</span> <span class=\"c1\"># Will load route file located in `config/routes/admin.rb`</span>\n <span class=\"n\">draw</span><span class=\"p\">(</span><span class=\"ss\">:api</span><span class=\"p\">)</span> <span class=\"c1\"># Will load route file located in `config/routes/api.rb`</span>\n <span class=\"n\">draw</span><span class=\"p\">(</span><span class=\"ss\">:blog</span><span class=\"p\">)</span> <span class=\"c1\"># Will load route file located in `config/routes/blog.rb`</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<h3 id=\"older-rails-versions\">Older Rails versions</h3>\n\n<p>If you’re running your rails project at 2.x version your router probably uses <code class=\"highlighter-rouge\">ActionController::Routing</code> to draw your routes. At rails 3.0 or higher the router drawer will be defined by each application namespaced within your Application module.</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"no\">Rails</span><span class=\"o\">::</span><span class=\"no\">VERSION</span><span class=\"o\">::</span><span class=\"no\">MAJOR</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span>\n <span class=\"no\">YourAppName</span><span class=\"o\">::</span><span class=\"no\">Application</span><span class=\"p\">.</span><span class=\"nf\">routes</span><span class=\"p\">.</span><span class=\"nf\">draw</span> <span class=\"k\">do</span>\n  <span class=\"o\">...</span>\n <span class=\"k\">end</span>\n<span class=\"k\">else</span>\n <span class=\"no\">ActionController</span><span class=\"o\">::</span><span class=\"no\">Routing</span><span class=\"o\">::</span><span class=\"no\">Routes</span><span class=\"p\">.</span><span class=\"nf\">draw</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">map</span><span class=\"o\">|</span>\n  <span class=\"o\">...</span>\n <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n<p>You can use this quote if you’re on a <a href=\"https://www.fastruby.io/blog/upgrade-rails/dual-boot/dual-boot-with-rails-6-0-beta.html\">dual boot</a>.</p>\n\n<p>It’s possible your project might need this to load external files:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># application.rb</span>\n<span class=\"n\">config</span><span class=\"p\">.</span><span class=\"nf\">paths</span><span class=\"p\">[</span><span class=\"s2\">&quot;config/routes&quot;</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"no\">Dir</span><span class=\"p\">[</span><span class=\"no\">Rails</span><span class=\"p\">.</span><span class=\"nf\">root</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"s2\">&quot;config/routes/*.rb&quot;</span><span class=\"p\">)]</span>\n</code></pre></div></div>\n\n<p><a href=\"https://edgeguides.rubyonrails.org/routing.html#don-t-use-this-feature-unless-you-really-need-it\">Rails docs</a> does not recommend route splitting, unless you really need it. It’s up to your project to decide how long files should be and how routes file should be listed. Developers will have different experiences and different points of view about this, check with your team to see what they think about this.</p>"
}