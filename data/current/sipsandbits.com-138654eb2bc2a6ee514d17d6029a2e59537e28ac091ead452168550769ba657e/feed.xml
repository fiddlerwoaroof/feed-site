<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title><![CDATA[rails - Sips & Bits by michelada.io]]></title><description><![CDATA[We learn as we go, we write as we learn.]]></description><link>https://sipsandbits.com/</link><image><url>https://sipsandbits.com/favicon.png</url><title>rails - Sips &amp; Bits by michelada.io</title><link>https://sipsandbits.com/</link></image><generator>Ghost 4.48</generator><lastBuildDate>Wed, 16 Nov 2022 11:02:29 GMT</lastBuildDate><atom:link href="https://sipsandbits.com/tag/rails/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Ruby on Rails]]></title><description><![CDATA[<p><strong>Ruby is a programming language. It was created 20 years ago by Yukihiro &quot;Matz&quot; Matsumoto. According to most measures of popularity of the programming language, Ruby is in the top ten, although it is generally the tenth (more or less) in popularity, and largely due to Rails&apos;</strong></p>]]></description><link>https://sipsandbits.com/2019/11/23/ruby-on-rails/</link><guid isPermaLink="false">5dd87f5079a7c000389570b3</guid><category><![CDATA[rails]]></category><category><![CDATA[michelada]]></category><category><![CDATA[api]]></category><dc:creator><![CDATA[Tania Escudero]]></dc:creator><pubDate>Sat, 23 Nov 2019 01:12:52 GMT</pubDate><media:content url="https://sipsandbits.com/content/images/2020/02/michelada.io-on-Instagram-1----Photos-and-Videos-2020-01-30-15-48-40.png" medium="image"/><content:encoded><![CDATA[<img src="https://sipsandbits.com/content/images/2020/02/michelada.io-on-Instagram-1----Photos-and-Videos-2020-01-30-15-48-40.png" alt="Ruby on Rails"><p><strong>Ruby is a programming language. It was created 20 years ago by Yukihiro &quot;Matz&quot; Matsumoto. According to most measures of popularity of the programming language, Ruby is in the top ten, although it is generally the tenth (more or less) in popularity, and largely due to Rails&apos; popularity. Like Java or the C language, Ruby is a general purpose programming language, although it is best known for its use in web programming.</strong><br><strong>Rails is a software library that extends the Ruby programming language. David Heinemeier Hansson is its creator. He named it &quot;Ruby on Rails&quot;, even though it is often simply called &quot;Rails&quot;. It is a software code added to the Ruby programming language. Technically, it is a package library (specifically, a Ruby Gem), which is installed using the command line interface of the operating system.Rails is a framework for building websites. As such, Rails establishes conventions to facilitate collaboration and maintenance. These conventions are coded as the Rails API (the application programming interface or directives that control the code). The Rails API is documented online and described in books, articles and blog posts. &quot;Learning Rails&quot; means learning to use the Rails conventions and their API.Rails combines the Ruby programming language with HTML, CSS &amp; JavaScript to create a web application that runs on a web server. Because it runs on a web server, Rails is considered a server-side web application development platform or &quot;back-end&quot; (the web browser is the &quot;front-end&quot;).</strong><br><strong>Rails, in a deep sense, is more than a software library &amp; an API. Rails is the central project of a wide &quot;community&quot; that produces software libraries that simplify the task of building complex websites. The members of this Rails community share many fundamental values, they often use the same tools and support each other with an informal network. That means they do it just for love to the development. The community is something informal, but that does not detract it from professionalism. It forms an economic network that includes: jobs, recruiters, consulting firms, conferences and companies that create websites with Rails and investors that finance new companies.</strong><br><strong> Rails is popular among web startups, significantly by the set of &quot;libraries&quot; or open source software libraries (RubyGems or &quot;gems&quot;) that make possible to build complex sites quickly (although without much style ... please don&apos;t kill me ) that work perfectly.</strong><br><strong>Do you need to study Ruby to learn Rails?Your most difficult challenge will be to learn (or understand) the names of the structures where you see code examples. This is why it is useful to follow a brief introduction to Ruby. You should be able to recognize when you are seeing a matrix or a hash. You must recognize when you are looking at an iterator or the syntax of a block with Ruby. Eventually, you will recognize more exotic Ruby formulations such as lambda. It&apos;s fine if you can&apos;t write a lambda function or even know when to use it; Many Rails developers start working before learning Ruby in depth.</strong></p>]]></content:encoded></item><item><title><![CDATA[How to React on Rails]]></title><description><![CDATA[<!--kg-card-begin: markdown--><p>Being a Javascript developer and, more specific, using React as my main Front End Framework, one of the most common phrases that I hear when I join a project is &#x201C;Let&#x2019;s use React!&#x201D;.</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*hPcGCnpR70BS2oUKPmHDZA.jpeg" alt loading="lazy"></p>
<p>Even though React is really useful in lots of cases, it shouldn&#x2019;</p>]]></description><link>https://sipsandbits.com/2019/03/01/how-to-react-on-rails/</link><guid isPermaLink="false">5c78333ea7df0000bfb07e6b</guid><category><![CDATA[rails]]></category><category><![CDATA[gem]]></category><category><![CDATA[frontend]]></category><dc:creator><![CDATA[Sergio Montoya]]></dc:creator><pubDate>Fri, 01 Mar 2019 19:39:54 GMT</pubDate><media:content url="https://sipsandbits.com/content/images/2019/03/react-picture-copy.png" medium="image"/><content:encoded><![CDATA[<!--kg-card-begin: markdown--><img src="https://sipsandbits.com/content/images/2019/03/react-picture-copy.png" alt="How to React on Rails"><p>Being a Javascript developer and, more specific, using React as my main Front End Framework, one of the most common phrases that I hear when I join a project is &#x201C;Let&#x2019;s use React!&#x201D;.</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*hPcGCnpR70BS2oUKPmHDZA.jpeg" alt="How to React on Rails" loading="lazy"></p>
<p>Even though React is really useful in lots of cases, it shouldn&#x2019;t be your first option when developing your Front End.</p>
<p>However, if you are one of those people that wants to include this awesome technology in your already amazing application, you can do it without a lot of troubles and keep most of the logic you already have and just include React in those small parts that really needs it and let it bring those shines and sparkles that everyone talks about.</p>
<p>Honestly, start using <code>React</code> on you <code>Rails app</code> is like a walk in the park, however, before anything else and for this approach, we will need to have at least <code>Rails 5.1</code>, since it will allows us to use webpacker within our App and make it easier to include React.</p>
<p>With these small things already considered, the first thing we want to do is include two small gems into our gemfile:</p>
<pre><code class="language-ruby">gem &apos;webpacker&apos;
gem &apos;react-rails&apos;
</code></pre>
<p>This will add <code>webpacker</code> to our project, that lets us use the Javascript pre-procesor and webpack into our application. Also,<code>react-rails</code>, the one responsible for easy integration with React.</p>
<p>After adding these gems, we&#x2019;ll need to run a few extra commands:</p>
<pre><code class="language-ruby">$ bundle install
$ rails webpacker:install 
$ rails webpacker:install:react
$ rails generate react:install
</code></pre>
<p>Running this will create in your applications a few files and folders, being these the most important:</p>
<p>The folder where we&#x2019;ll keep our React components<br>
<code>app/javascript/components</code></p>
<p>The configuration for react-rails that can be found on <code>app/javascript/packs/application.js</code></p>
<p>We need one more little thing in our Rails app before starting to create our <code>React components</code> and that is to include the main entry point of all the code we&#x2019;ll write for React. We are going to add a small line in the layout that will call our components:</p>
<pre><code class="language-html">&lt;!-- application.html.erb in Head tag below turbolinks --&gt;
&lt;%= javascript_pack_tag &apos;application&apos; %&gt;
</code></pre>
<p>That&#x2019;s it! That&#x2019;s all you need to setup on you Rails app, easier than understanding Javascript&#x2019;s <code>this</code>.</p>
<p>From this point all that&#x2019;s left is write our first <code>React component</code>.<br>
You can create it the old way or use one of the commands available:</p>
<pre><code>$ rails g react:component YourReactComponent
</code></pre>
<p>This will auto generate a <code>React</code> component in the <code>/components</code> folder previously mentioned.</p>
<p>Now it&#x2019;s time to create our first React component. In my case I made a simple Rails app to post Stories and as in most of our Apps, I have a list of all of them, so the first component that I&#x201D;ll create is my StoriesList component. You can create it with the command already discussed or make it yourself:</p>
<pre><code>$rails g react:component StoriesList
</code></pre>
<p>The result of this will be a file called <code>StoriesList.js</code> under the <code>/component</code> folder that looks like this:</p>
<pre><code class="language-import">import PropTypes from &quot;prop-types&quot;;
class StoriesList extends React.Component {
  render () {
    return (
      &lt;React.Fragment&gt;
      &lt;/React.Fragment&gt;
    );
  }
}
export default StoriesList;
</code></pre>
<p>With this, you can now easily call this component within any Rail&#x2019;s view and to do it simply call it with a single line:</p>
<p><code>&lt;%= react_component(&quot;StoriesList&quot;, { stories: @stories}) %&gt;</code></p>
<p>The first parameter of this command is the exact name of the component we want to mount into our view. The second one is a hash with all the parameters we want to being sent over to our React component, in this case, our stories.<br>
If we go over to our React component and do a console log of our component&#x2019;s props just before the return of the render, we&#x2019;ll see that we are receiving them.</p>
<pre><code class="language-class">  render () {
    console.log(this.props);
    return (
      &lt;React.Fragment&gt;
      &lt;/React.Fragment&gt;
    );
  }
}
</code></pre>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*hBieZvBmF7NAeK9g_o8vIw.png" alt="How to React on Rails" loading="lazy"></p>
<p>Our component will receive them as props and we&#x2019;ll have them available as any other regular props. From this point we can keep working as a regular React component, so we&#x2019;ll create just a simple list of our stories in our component:</p>
<pre><code class="language-//">import React from &quot;react&quot;;
class StoriesList extends React.Component {
  render () {
    const { stories } = this.props;
    return (
      &lt;React.Fragment&gt;
        &lt;h1&gt;List made with React&lt;/h1&gt;
        &lt;div className=&quot;stories&quot;&gt;
          { stories.map(story =&gt; {
            return &lt;Story key={story.title} story={story} /&gt;;
          })}
        &lt;/div&gt;
      &lt;/React.Fragment&gt;
    );
  }
}
const Story = ({story}) =&gt; {
  return (
    &lt;div className=&quot;story&quot;&gt;
      &lt;img src={story.picture} /&gt;
      &lt;div className=&quot;story-content&quot;&gt;
        &lt;h3&gt;{story.title}&lt;/h3&gt;
        {story.content}
      &lt;/div&gt;
    &lt;/div&gt;
  );
}
export default StoriesList;
// stories.scss
body {
  background: #eaeaea;
}
.stories {
  display: flex;
  width: 100%;
  flex-wrap: wrap;
  .story {
    border-radius: 5px;
    overflow: hidden;
    background: #FFF;
    width: calc(50% - 30px);
    margin: 0 5px;
    margin-bottom: 15px;
    img {
      width: 100%;
      object-fit: cover;
      height: 200px;
    }
    .story-content {
      padding: 10px;
    }
  }
}
</code></pre>
<p>The <code>stories.scss</code> was generated as an empty file when we ran the command to create our component and it&#x2019;s located under</p>
<p><code> /assets/stylesheets/stories.scss .</code></p>
<p>With this, our Rails view should looks something like this:</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*Syc5EUkTWiC0OBUJXCUHuA.png" alt="How to React on Rails" loading="lazy"></p>
<p>The list on top is the one generated by Rails&#x2019; scaffold and the one below is the one we just created with React.</p>
<p>At this point, everything else is just a matter of keep creating our components and render them wherever we need them.</p>
<p>As you can see, with the use of <code>webpacker</code> and <code>react-rails</code> gems, integrating React into our applications is super easy and effortlessly.</p>
<p>The next thing would be to create and render our components into specific <code>divs</code> within our app, but that&#x2019;s for another occasion.</p>
<p>Don&#x2019;t hesitate and try it, experiment with it and create awesome React components now that you have the power!</p>
<!--kg-card-end: markdown-->]]></content:encoded></item><item><title><![CDATA[Building complex forms with Rails]]></title><description><![CDATA[<!--kg-card-begin: markdown--><p>Building a form using Ruby on Rails sometimes can get a little bit more complicated than you think, when you want to use more than one model on it, even more, if your expertise on building forms is not extensive, and that&apos;s the moment when you wonder: Is</p>]]></description><link>https://sipsandbits.com/2018/10/11/building-complex-forms-with-rails/</link><guid isPermaLink="false">5bbd34a22d163600bf7ce556</guid><category><![CDATA[rails]]></category><dc:creator><![CDATA[Lenin Godinez]]></dc:creator><pubDate>Thu, 11 Oct 2018 15:00:00 GMT</pubDate><media:content url="https://sipsandbits.com/content/images/2019/08/feedback.jpg" medium="image"/><content:encoded><![CDATA[<!--kg-card-begin: markdown--><img src="https://sipsandbits.com/content/images/2019/08/feedback.jpg" alt="Building complex forms with Rails"><p>Building a form using Ruby on Rails sometimes can get a little bit more complicated than you think, when you want to use more than one model on it, even more, if your expertise on building forms is not extensive, and that&apos;s the moment when you wonder: Is there a better way to do this?</p>
<p>In Ruby on Rails the simplest way to do it is using &quot;nested attributes&quot; and creating a &quot;nested form&quot;, but... What are these?</p>
<p>A nested attribute, allows you to create and save attributes from an associated model through its parent, and a nested form, is a form with another form inside of it. The second form is going to have the nested attributes you want to save.</p>
<p>Having said that, let&apos;s create an example using nested attributes and a nested form.</p>
<p>Imagine you want to create a system for a company that wants to evaluate its employees using a feedback questionnaire. To create this example, we are going to have 3 models: Feedback, Question and Answer.</p>
<p>Now, let&apos;s define the attributes that our models need:</p>
<ul>
<li>Feedback won&apos;t have extra attributes.</li>
<li>Question will have a question_title attribute, which is going to be the question added by a user from the company.</li>
<li>Answer will have an answer attribute that is going to keep the reply from the employee, by using a feedback_id to know who is the owner of this answer and a question_id, to know what is the question for this answer.</li>
</ul>
<p>Having explained the requirements that we need, create the project with the mentioned models and their attributes, and finally run migrations.</p>
<p>Once we have everything in place, We need to create the relations between models:</p>
<ul>
<li>Feedback will have many answers, so we&apos;ll have to add in the model: <code>has_many :answers</code></li>
<li>Question will also have many answers, as we did with the Feedback model, we need to add: <code>has_many :answers</code></li>
<li>Finally, an Answer will belong to a feedback and a question, what we have to do here, is write on the Answer model: <code>belongs_to :feedback</code> and <code>belongs_to :question</code></li>
</ul>
<p>Now that we have done this, let&apos;s test the relations between models in our console, but first of all, we need to create a Feedback object:<br>
<code>Feedback.create!</code></p>
<p>Secondly, let&apos;s create a question object<br>
<code>Question.create!(question_title: &apos;first question&apos;)</code></p>
<p>And finally, we need to create an answer that is going to have the ID from the previous feedback and question created.<br>
<code>Answer.create!(answer: &apos;first answer&apos;, feedback_id: Feedback.last.id, question_id: Question.last.id)</code></p>
<p>Right away let&apos;s test the relation between the answer and the feedback, we should get the answer that we created.<br>
<code>Feedback.last.answers</code></p>
<p>Now, test if the question we created is related to the previous answer, we should get the question we created.<br>
<code>Feedback.last.answers.last.question</code></p>
<p>Doing this give us the certainty that our relations work. Now let&apos;s proceed with the form creation.</p>
<p>In our Feedback form that will be placed on feedbacks/new.html.erb, there will be an answer field for each existing question. Right now, we have just 1 question created, add 2 more questions to have more answer fields in our form.</p>
<p>Before the form creation, in our FeedbacksController we need to create the &quot;new&quot; method like this:</p>
<pre><code class="language-ruby">def new
  @feedback = Feedback.new
  Question.all.each do |question|
    @feedback.answers.build(question_id: question.id)
  end
end
</code></pre>
<p>On the &quot;new&quot; method, we are creating an instance of a Feedback object, also for each existing question we are building an Answer object that is going to contain the id from the question it will belong to.</p>
<p>Let&apos;s continue with the form creation, to be able to display the answer objects on the form, we need to indicate in the Feedback model to accept nested attributes from the model Answer, we can do it by writing:</p>
<pre><code class="language-ruby">accepts_nested_attributes_for :answers
</code></pre>
<p>To visualize it, we need to create a form for @feedback and then inside this form we need to create another form for the nested attributes, this is known as a &quot;nested form&quot;.</p>
<p>First of all create the @feedback form and then continue adding the fields_form method like this:</p>
<pre><code class="language-ruby">&lt;%= form_for(@feedback) do |form| %&gt;
  &lt;%= form.fields_for :answers do |answer_form| %&gt;
    &lt;div&gt;
      &lt;%= answer_form.text_area :answer %&gt;
    &lt;/div&gt;
  &lt;% end %&gt;

  &lt;div&gt;
    &lt;%= form.submit %&gt;
  &lt;/div&gt;
&lt;% end %&gt;
</code></pre>
<p>Now that we can see our answer fields, we should have 3 answer fields displayed because there are 3 questions in our question table. But, where are the questions on the form? Remember when we built the Answer objects in the &quot;new&quot; method on FeedbacksController and when we added the id from each question to build an answer object?</p>
<p>Thanks to this, each answer object in our form contains a question_id which will help us find the related question.</p>
<p>Let&apos;s get the question using the provided method &quot;object&quot; from the answer_form like this:</p>
<pre><code class="language-ruby">&lt;%= answer_form.object.question.question_title %&gt;
</code></pre>
<p>By doing this we are telling Rails to display which is the question related to each object answer.</p>
<p>Another thing we can&apos;t miss is that we need to send on the form the id for the related question because there is a relation between the answer and the question. If we don&apos;t add it, we will get an error saying that the question id is not included and should be included when we try to save the feedback object. We can add it on a hidden_field so the user won&apos;t be able to see it on the form:</p>
<pre><code class="language-ruby">&lt;%= answer_form.hidden_field :question_id, value: answer_form.object.question_id %&gt;
</code></pre>
<p>Finally, our form should look as follows:</p>
<pre><code class="language-ruby">&lt;%= form_for(@feedback) do |form| %&gt;
  &lt;%= form.fields_for :answers do |answer_form| %&gt;
    &lt;div&gt;
      &lt;p&gt;&lt;%= answer_form.object.question.question_title %&gt;&lt;/p&gt;
      &lt;%= answer_form.text_area :answer %&gt;
      &lt;%= answer_form.hidden_field :question_id, value: answer_form.object.question_id %&gt;
    &lt;/div&gt;
  &lt;% end %&gt;
  
  &lt;div&gt;
    &lt;%= form.submit %&gt;
  &lt;/div&gt;
&lt;% end %&gt;
</code></pre>
<p>At this point our form is complete, we now only need to add the method create on FeedbacksController, that will create and save our feedback with the answers:</p>
<pre><code class="language-ruby">def create
  @feedback = Feedback.new(params.require(:feedback).permit(answers_attributes: [:answer, :question_id]))

  if @feedback.save
    redirect_to feedbacks_path,
    notice: &apos;The feedback was successfully created.&apos;
  else
    redirect_to new_feedback_path
  end
end
</code></pre>
<p>We are done at this point, now run <code>rails server</code> open your browser, navigate to the /new path and create a feedback.</p>
<p>To test what we just did, open your console and look for the last Feedback created<br>
<code>Feedback.last</code></p>
<p>And then look for its answers:<br>
<code>Feedback.last.answers</code></p>
<p>We should get the related answers from this feedback. If we want to know which is the question related to each answer, we can write as we previously did:<br>
<code>Feedback.last.answers.last.question</code><br>
And the related question should be displayed.</p>
<p>With everything that we did, we have created the core of a feedback questionnaire application. Now, you can add more functions, like the ability to select a user because you might want to evaluate it using this questionnaire, then a Feedback is going to belong to a User and a User may have many feedbacks, but it is up to you&#x2026; Have fun and improve it!</p>
<!--kg-card-end: markdown-->]]></content:encoded></item><item><title><![CDATA[Keep your API in shape with API Blueprint]]></title><description><![CDATA[Use API Blueprint to document and generate JSON schemas to ensure your API response is as it was documented.]]></description><link>https://sipsandbits.com/2018/08/02/keep-your-api-in-shape-with-api-blueprint/</link><guid isPermaLink="false">5b1ac9bb97e0e400bfcffaf7</guid><category><![CDATA[rails]]></category><category><![CDATA[web]]></category><category><![CDATA[development]]></category><category><![CDATA[api]]></category><category><![CDATA[json]]></category><category><![CDATA[schemas]]></category><category><![CDATA[testing]]></category><dc:creator><![CDATA[Mario Alberto Chávez Cárdenas]]></dc:creator><pubDate>Thu, 02 Aug 2018 15:00:00 GMT</pubDate><media:content url="https://sipsandbits.com/content/images/2018/07/510230824.jpg" medium="image"/><content:encoded><![CDATA[<!--kg-card-begin: markdown--><img src="https://sipsandbits.com/content/images/2018/07/510230824.jpg" alt="Keep your API in shape with API Blueprint"><p>When you are starting a new API project with Rails your first question might be: should you do it using GraphQL or just go with a good old REST API.</p>
<p>After much consideration, you decide to go with a REST API? Good! Continue reading this post.</p>
<p>Now, before you begin to consider how to implement your API, your main concern should be how to keep your API documentation up to date. This is something that always creates a sort of tension in projects where the team have to go through many hoops to keep code and docs in sync.</p>
<p>In a recent project, I was looking for a solution that could be easily integrated into our Rails application and at the same time allow the team to write the API definition without caring about the implementation details.</p>
<p>The first tool that I found was the <a href="https://github.com/zipmark/rspec_api_documentation">rspec_api_documentation</a> gem but it was incompatible with our project for two reasons: We use Minitest and it requires you to write Specs with Ruby code to describe the API.</p>
<p>Then I remember that in a project for one of our clients at <a href="http://michelada.io">michelada</a> we did use Apiary as a communication tool to describe the API implemented there.</p>
<h2 id="apiblueprint">API Blueprint</h2>
<p>Apiary has an Open Source format called <a href="https://apiblueprint.org">API Blueprint</a>. It is a specification on top of Markdown that helps describe a web API. This format is oriented to creating documentation.</p>
<p><img src="https://sipsandbits.com/content/images/2018/06/Screen-Shot-2018-06-08-at-1.25.57-PM.png" alt="Keep your API in shape with API Blueprint" loading="lazy"></p>
<p>With this <a href="https://github.com/apiaryio/api-blueprint/blob/master/API%20Blueprint%20Specification.md">specification</a>, you can define how a request should be made and what to expect as a response from an API. Here is a sample fragment of API Blueprint that shows how to document the <code>/questions</code> endpoint, no code just Markdown and a special syntax <a href="https://github.com/apiaryio/mson">MSON</a> to document the response.</p>
<pre><code>FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# Sample API

Polls is a simple API allowing consumers to view polls and vote in them.

## Questions Collection [/questions]

### List All Questions [GET]

+ Response 200 (application/json)

        [
            {
                &quot;question&quot;: &quot;Favourite programming language?&quot;,
                &quot;published_at&quot;: &quot;2015-08-05T08:40:51.620Z&quot;,
                &quot;choices&quot;: [
                    {
                        &quot;choice&quot;: &quot;Swift&quot;,
                        &quot;votes&quot;: 2048
                    }, {
                        &quot;choice&quot;: &quot;Python&quot;,
                        &quot;votes&quot;: 1024
                    }, {
                        &quot;choice&quot;: &quot;Objective-C&quot;,
                        &quot;votes&quot;: 512
                    }, {
                        &quot;choice&quot;: &quot;Ruby&quot;,
                        &quot;votes&quot;: 256
                    }
                ]
            }
        ]
</code></pre>
<p>MSON syntax allow us to describe JSON objects in a very simple way no matter how complicated you JSON object is. An object structure with MSON like the following:</p>
<pre><code>- address
    - street
    - city
    - state
</code></pre>
<p>Produces a JSON object like:</p>
<pre><code class="language-json">{
    &quot;address&quot; : {
        &quot;street&quot;: &quot;&quot;,
        &quot;city&quot;: &quot;&quot;,
        &quot;state&quot;: &quot;&quot;
    }
}
</code></pre>
<p>The format is fairly simple to get up to speed quickly and write a complete set of API documentation. From the format is also possible to generate JSON Schema draft 4 for us, we can use these schemas to validate our API with Minitest.</p>
<h2 id="generatinggoodlookingdocumentation">Generating good-looking documentation.</h2>
<p>Let&apos;s start with the low hang fruit of using API Blueprint to document our API. Here is the documentation for two API endpoints that we are going to use in this post as an example.</p>
<p>The API is simple but it shows nice things about the MSON syntax like data structures reuse. It also shows how to document a response that can have many different statuses.</p>
<pre><code>FORMAT: 1A
HOST: https://api-test.com

# Sample API documentation
We just use Markdown with special syntax to document our API.

# Group Users
A User is a representation of a User on the system.

## Users [/users{?cursor}]
Endpoint for users.

### List Users [GET]
Returns a list of users paginated by the cursor.

+ Parameters
    + cursor: `10` (number, optional) - Cursor value to paginate response.

+ Request (application/json)
    + Headers

            Accept: application/vnd.api-test.v1+json

+ Response 200 (application/json)

    + Attributes
        + data (array[User], fixed-type) - Users data.
        + pagination (object, required) - Pagination information.
            + cursors (object, required) - Cursors.
                + after: `10` (number, required) - Cursor for next record to fetch.
                + next_uri: `/users?cursor=5` (string, required) - URI for next page.
        + links (array, fixed-type, required) - Links references.
            + (object)
                + rel: `self` (string, required)
                + uri: `/users` (string, required)

### Create User [POST]
Creates a new User.

+ Request (application/json)
    + Headers

            Accept: application/vnd.api-test.v1+json

    + Attributes (User Base)

+ Response 201 (application/json)

    + Attributes
        + data (array[User], fixed-type) - Users data.
        + links (array, fixed-type, required) - Links references.
            + (object)
                + rel: `self` (string, required)
                + uri: `/users/1` (string, required)

+ Response 422 (application/json)

    + Attributes
        + data (array[User Base], fixed-type) - Users data.
        + errors (array, fixed-type, required) - Action error.
            + (object)
                + type: `blank` (string, required) - Type of validation error.
                + code: `ERR-100` (string, required) - Error unique code.
                + message: `email can&apos;t be blank.` (string, required) - Error descriptive message.
                + href: `http://api-test.io/api/documentation` (string, required)
                  Link to learn more about the error.



# Data Structures

# User Base (object)
+ email: `user@mail.com` (string) - User&apos;s email.
+ first_name: `Jane` (string, required) - User&apos;s first name.
+ last_name: `Doe` (string, required) - User&apos;s last name.

# User (User Base)
+ id (number) - User&apos;s ID.
</code></pre>
<p>To render an HTML document of our documentation we can use a tool called <a href="https://github.com/danielgtaylor/aglio">aglio</a>. It parses the file and generates a nice looking document. You can choose any of the available themes or you can write your own.</p>
<p>In a Rails application, we install <code>aglio</code> with Yarn as follows</p>
<pre><code>$ bin/yarn add aglio
</code></pre>
<p>The basic command, given you saved the documentation file in the <code>docs/api</code> folder and want to output the HTML to the <code>/public</code> folder, would be:</p>
<pre><code>$ bin/yarn run aglio -i docs/api/documentation.md  -o public/documentation.html
</code></pre>
<p>This will produce an HTML with aglio&apos;s default theme. You can pass additional options to choose a theme or color scheme, for more details check aglio&apos;s documentation.</p>
<p>If you start the Rails server and point your browser to <code>http://localhost:3000/documentation.html</code> you will see your API nicely documented.</p>
<p><img src="https://sipsandbits.com/content/images/2018/06/Screen-Shot-2018-06-06-at-4.22.20-PM.png" alt="Keep your API in shape with API Blueprint" loading="lazy"></p>
<p>Let&apos;s add a rake task to our application to generate this file by running <code>bin/rails api:documentation</code>. Create a file <code>lib/tasks/api.rake</code> and add the following lines:</p>
<pre><code class="language-ruby">namespace :api do
  desc &apos;Build API documentation&apos;
  task :documentation do
    input_file = &apos;docs/api/documentation.md&apos;
    output_file = &apos;public/documentation.html&apos;

    system(&quot; bin/yarn run aglio -i #{input_file}  -o #{output_file}&quot;)
  end
end
</code></pre>
<h2 id="generatingjsonschemas">Generating JSON Schemas</h2>
<p>Now that we have nice looking documentation its time to generate <a href="https://spacetelescope.github.io/understanding-json-schema/">JSON Schemas</a> from the documentation, with these schema files we can use Minitest to automate the verification that our API is responding in the format we expect.</p>
<p>There is a tool called <a href="https://github.com/o5/apib2json">api2bjon</a> that does the extraction of JSON Schemas from API Blueprint documentation. It generates a single JSON file for all schemas present in the documentation.</p>
<p>To generate the file with all schemas first, install apib2json and then execute it.</p>
<pre><code>$ bin/yarn apib2json
$ bin/yarn run apib2json --pretty -i docs/api/documentation.md  -o test/support/schemas/schemas.json
</code></pre>
<p>The following is a fragment of the generated file:</p>
<pre><code>{
  &quot;[GET]/users{?cursor}&quot;: [
    {
      &quot;meta&quot;: {
        &quot;type&quot;: &quot;response&quot;,
        &quot;title&quot;: &quot;&quot;
      },
      &quot;schema&quot;: {
        &quot;$schema&quot;: &quot;http://json-schema.org/draft-04/schema#&quot;,
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;data&quot;: {
            &quot;type&quot;: &quot;array&quot;,
            &quot;items&quot;: {
              &quot;type&quot;: &quot;object&quot;,
              &quot;properties&quot;: {
                &quot;email&quot;: {
                  &quot;type&quot;: &quot;string&quot;,
                  &quot;description&quot;: &quot;User&apos;s email.&quot;
</code></pre>
<p>There is a problem with this file since all possible schemas are writing into this file we will need to parse the file and put each schema into its own file so we can use them with Minitest.</p>
<p>Unfortunately, the metadata provided by apib2json as it is, is not enough to separate schemas into independent files with unique naming. An improved version is available at <a href="https://github.com/mariochavez/apib2json/tree/additional-metadata">https://github.com/mariochavez/apib2json/tree/additional-metadata</a>.</p>
<p>To install apib2json from this repository execute the following command.</p>
<pre><code>$ bin/yarn add &quot;https://github.com/mariochavez/apib2json.git#additional-metadata&quot;
</code></pre>
<p>Now if you regenerate the schemas file its metadata will contain additional information.</p>
<pre><code>{
  &quot;[GET]/users{?cursor}&quot;: [
    {
      &quot;meta&quot;: {
        &quot;type&quot;: &quot;response&quot;,
        &quot;title&quot;: null,
        &quot;group&quot;: &quot;Users&quot;,
        &quot;statusCode&quot;: &quot;200&quot;
      },
      &quot;schema&quot;: {
        &quot;$schema&quot;: &quot;http://json-schema.org/draft-04/schema#&quot;,
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;data&quot;: {
            &quot;type&quot;: &quot;array&quot;,
            &quot;items&quot;: {
              &quot;type&quot;: &quot;object&quot;,
              &quot;properties&quot;: {
                &quot;email&quot;: {
                  &quot;type&quot;: &quot;string&quot;,
                  &quot;description&quot;: &quot;User&apos;s email.&quot;
</code></pre>
<p>But as I said before, for this file be useful we need to split it to have each schema in their own file. To accomplish this let&apos;s create a rake task. Open the file <code>lib/tasks/api.rake</code>  and add the following code:</p>
<pre><code class="language-ruby">  desc &quot;Generate JSON schemas&quot;
  task :schemas do
    schemas_path = &quot;test/support/schemas&quot;
    input_file = &quot;docs/api/documentation.md&quot;
    output_file = &quot;test/support/schemas/schemas.json&quot;

    puts &quot;Generating api schemas from #{input_file}&quot;
    system(&quot;bin/yarn run apib2json --pretty -i #{input_file} -o #{output_file}&quot;)

    if File.exist?(output_file)
      file_path = Pathname.new(output_file)
      JSON.parse(file_path.read).each_pair do |group, actions|
        actions.each do |action|
          next if action.dig(&quot;meta&quot;, &quot;type&quot;) != &quot;response&quot;

          verb = group.scan(/\[(.*)\]/).flatten.first
          name = &quot;#{verb}-#{I18n.transliterate(action.dig(&apos;meta&apos;, &apos;group&apos;))}(#{action.dig(&apos;meta&apos;, &apos;statusCode&apos;)})#{action.dig(&apos;meta&apos;, &apos;title&apos;)&amp;.gsub(/ /, &apos;-&apos;)}&quot;.
            sub(/\{.*\}/, &quot;&quot;).gsub(/\(|\)/, &quot;-&quot;).gsub(/^-|-$/, &quot;&quot;)
          puts &quot;Writing #{name}&quot;
          File.open(&quot;#{schemas_path}/#{name}.json&quot;, &quot;w&quot;) { |file| file.write(action.dig(&quot;schema&quot;).to_json) }
        end
      end
    end

    puts &quot;Schemas are ready at #{schemas_path}&quot;
  end
</code></pre>
<p>Executing this task will generate the <code>schemas.json</code> file from the API Blueprint document but it will also split the file into many files, each one containing a schema for a single response. Files will be named with the HTTP Verb, the resource, request name if any, and the HTTP status code for example: <code>GET-Users-200</code>.</p>
<pre><code>$ bin/rails api:schemas
Generating api schemas from docs/api/documentation.md
yarn run v1.7.0
$ node_modules/.bin/apib2json --pretty -i docs/api/documentation.md -o test/support/schemas/schemas.json
Done in 0.31s.
Writing GET-Users-200
Writing POST-Users-201
Writing POST-Users-422
Schemas are ready at test/support/schemas
</code></pre>
<p>You are ready to start writing tests with Minitest in your Rails application. First, install the <a href="https://github.com/thoughtbot/json_matchers">json_matchers</a> gem in your <code>Gemfile</code>. Configure your <code>test_helper.rb</code> file to load <code>json_matchers</code>.</p>
<pre><code class="language-ruby">require &apos;json_matchers/minitest/assertions&apos;

JsonMatchers.schema_root = &apos;test/support/schemas&apos;
Minitest::Test.send(:include, JsonMatchers::Minitest::Assertions)
</code></pre>
<p>Then create an integration test for a <code>UsersController</code> and add the following tests to verify all the three responses are documented in the API Blueprint file.</p>
<pre><code class="language-ruby">require &apos;test_helper&apos;

class UsersApiTest &lt; ActionDispatch::IntegrationTest
  test &apos;Users List&apos; do
    get &apos;/users&apos;, headers: { Accept: &apos;application/vnd.api-test.v1+json&apos; }

    assert_response :success
    assert_matches_json_schema response, &apos;GET-Users-200&apos;
  end

  test &apos;Create new User successfully&apos; do
    post &apos;/users&apos;, headers: { Accept: &apos;application/vnd.api-test.v1+json&apos; }, params: user_payload

    assert_response :created
    assert_matches_json_schema response, &apos;POST-Users-201&apos;
  end

  test &apos;Fails to create new User&apos; do
    post &apos;/users&apos;, headers: { Accept: &apos;application/vnd.api-test.v1+json&apos; },
                   params: user_payload(email: nil, first_name: nil)

    assert_response :unprocessable_entity
    assert_matches_json_schema response, &apos;POST-Users-422&apos;
  end

  def user_payload(attrs = {})
    {
      email: &apos;user@mail.com&apos;,
      first_name: &apos;Jane&apos;,
      last_name: &apos;Doe&apos;
    }.merge(attrs)
  end
end
</code></pre>
<p>The key here is the assertion for a JSON Schema. If your endpoint is not responding with the expected format then you get detailed information from the test telling you what are you missing, what was expected and what was your response.</p>
<pre><code>#: failed schema #: &quot;links&quot; wasn&apos;t supplied. 
---
expected
{
}
to match schema &quot;POST-Users-201&quot;: 
{
  &quot;$schema&quot;: &quot;http://json-schema.org/draft-04/schema#&quot;,
  &quot;type&quot;: &quot;object&quot;,
  &quot;properties&quot;: {
    &quot;data&quot;: {
      &quot;type&quot;: &quot;array&quot;,
      &quot;items&quot;: {
...
</code></pre>
<h2 id="conclusion">Conclusion</h2>
<p>Keeping your API documentation and endopoints in sync can be a daunting task, writing schema files by hand are not fun at all but hopefully, with the tools presented here it will be easy for you and your team to keep everything up to date.</p>
<p>If you want to check a sample application with everything showed in this post to go <a href="https://gitlab.com/mariochavez/testing-api-blueprint/tree/master">https://gitlab.com/mariochavez/testing-api-blueprint/tree/master</a></p>
<!--kg-card-end: markdown-->]]></content:encoded></item><item><title><![CDATA[From the Asset Pipeline to Webpack]]></title><description><![CDATA[Modern Web frontend development with Rails have influenced to add Webpack into the framework.]]></description><link>https://sipsandbits.com/2018/06/07/from-the-asset-pipeline-to-webpack/</link><guid isPermaLink="false">5b109c6c002d6a00bf217371</guid><category><![CDATA[web]]></category><category><![CDATA[development]]></category><category><![CDATA[rails]]></category><category><![CDATA[webpack]]></category><category><![CDATA[frontend]]></category><dc:creator><![CDATA[Mario Alberto Chávez Cárdenas]]></dc:creator><pubDate>Thu, 07 Jun 2018 15:00:00 GMT</pubDate><media:content url="https://sipsandbits.com/content/images/2018/06/aral-tasher-393518-unsplash.jpeg" medium="image"/><content:encoded><![CDATA[<!--kg-card-begin: markdown--><img src="https://sipsandbits.com/content/images/2018/06/aral-tasher-393518-unsplash.jpeg" alt="From the Asset Pipeline to Webpack"><p>On May 2011 DHH announced at Railsconf a new framework for Rails, The Asset Pipeline. Also, was announced that SCSS and CoffeeScript along with jQuery were to become a default but overall, the recognition that Web Development changed and that it was the time to assign a proper place to this kind of code and to become a first-class citizen in every Rails application.</p>
<p><img src="https://sipsandbits.com/content/images/2018/06/Image-2018-05-31-at-8.09.20-PM.png" alt="From the Asset Pipeline to Webpack" loading="lazy"></p>
<p>It was a step forward but people complained about the inclusion of SCSS and CoffeeScript as default. The plan moved forward and on August 31st, 2011 <a href="http://guides.rubyonrails.org/3_1_release_notes.html">version 3.1 was released</a>.</p>
<p>In the Rails world, the frontend development was mostly HTML/CSS and plugins of jQuery, a lot of them, and more complex UI were done with <a href="http://backbonejs.org">Backbone.js</a></p>
<p>Managing, invalidating, and serving assets was a difficult task and <a href="http://guides.rubyonrails.org/asset_pipeline.html">the Asset Pipeline</a> came with the promise to make it easy.</p>
<p>Frontend development continued moving forward eventually, Backbone.js died and for many applications, jQuery was not enough anymore.</p>
<p><a href="https://nodejs.org/en/">Node.js</a> and <a href="https://www.npmjs.com">NPM</a> influenced how frontend was done. Single page applications became a thing, this had a direct effect in the Rails world where it was not easy, anymore, to just download a Javascript file, put it in the vendor folder, and expect it to work.</p>
<p><a href="https://github.com/rails/sprockets">Sprockets</a>, the heart of the Asset Pipeline, tried to keep up but somehow it fell short. In some client projects, I had the chance to work on solutions that included Gulp, Grunt, and Bower that tried to fill up where Sprockets failed; and it was no joy.</p>
<p>Finally, to address this situation, on April 27th, 2017 <a href="https://sipsandbits.com/2017/03/09/whats-new-in-rails-51/">Rails 5.1</a> was released, it included Yarn to manage Javascript dependencies and support for <a href="https://webpack.js.org">Webpack</a> with sensitive defaults and integration into Rails itself via <a href="https://github.com/rails/webpacker">Webpacker</a>.</p>
<p>Rails provided a tool that is familiar to developers that work with frontend on top of other technologies but to keep compatibility the Asset Pipeline was not removed, actually, you can use Webpacker and the Asset Pipeline seamlessly. It may take a few more versions before the Asset Pipeline becomes deprecated but it might be a good time to give it a try to Webpack.</p>
<h2 id="startingwithwebpack">Starting with Webpack.</h2>
<p>If you are creating a new Rails application starting with Webpack is easy.</p>
<pre><code>$ rails new sample_app --webpack
</code></pre>
<p>This command sets up Rails to use Webpack. If you need something like React, Angular, Elm, or Vuejs set up then you can specify that while creating the application.</p>
<pre><code>$ rails new sample_app --webpack=react
</code></pre>
<p>If you want to disable the Asset Pipeline run the command with the following flag.</p>
<pre><code>$ rails new sample_app --webpack --skip-sprockets
</code></pre>
<p>The <code>--webpack</code> flag will install the Webpacker gem, but will also add configuration for Webpack, a starting point to get into coding as soon as possible. Webpack configuration exists in the <code>/config</code>  folder.</p>
<pre><code>config/webpacker.yml
config/webpack
&#x251C;&#x2500;&#x2500; development.js
&#x251C;&#x2500;&#x2500; environment.js
&#x251C;&#x2500;&#x2500; production.js
&#x2514;&#x2500;&#x2500; test.js
</code></pre>
<p>Assets for Webpack live in <code>/app/javascript/packs</code>. Everything is organized in packs which are analog to having different sets of manifests with the Asset Pipeline but in this case, a pack encloses Javascript, CSS, Images, and any other asset to be sent to the client.</p>
<p>The default pack is application.js and it is the entry point for Webpack resources, this file is where you require Javascripts, Stylesheets, Images, and everything else. For it, I would normally create an application folder with subfolders for each kind of resource.</p>
<pre><code>app/javascript
&#x251C;&#x2500;&#x2500; application
&#x2502;   &#x251C;&#x2500;&#x2500; images
&#x2502;   &#x251C;&#x2500;&#x2500; javascripts
&#x2502;   &#x2514;&#x2500;&#x2500; stylesheets
&#x2514;&#x2500;&#x2500; packs
</code></pre>
<p>To use the pack in your HTML, Webpacker provides a couple of handy helpers.</p>
<pre><code>&lt;%= javascript_pack_tag &quot;application&quot; %&gt;
&lt;%= stylesheet_pack_tag &quot;application&quot; %&gt;
</code></pre>
<p>Running the Rails server, in development mode, and visiting a page will start a Webpack process to compile the required packs delaying the response from the server. Compiling assets this way is simple but very slow. A faster approach is running a separate Webpack process, this can be done by executing the Webpack server as follow.</p>
<pre><code>$ WEBPACKER_DEV_SERVER_HOST=0.0.0.0 ./bin/webpack-dev-server
</code></pre>
<p>Running Webpack this way makes compilation fast and also it will auto reload the current page if assets were modified. Just be aware that if you are running Rails 5.2 the following line needs to be added to <code>config/initializers/content_security_policy.rb</code> inside the policy block.</p>
<pre><code>policy.connect_src :self, :https, &apos;http://localhost:3035&apos;, &apos;ws://localhost:3035&apos; if Rails.env.development?
</code></pre>
<h2 id="movingfromtheassetpipelinetowebpack">Moving from the Asset Pipeline to Webpack</h2>
<p>Everything described in the previous section applies to new Rails applications but what about an existing application? The same applies but you need to install Webpack manually, sort of.</p>
<p>Before continuing, I want to make it clear that if your Javascript does not follow the <a href="https://nodejs.org/api/modules.html">Node.js Modules</a> <a href="https://darrenderidder.github.io/talks/ModulePatterns/#/">pattern</a> you will need to figure out how to change your code to make it Webpack friendly.</p>
<p>First, add the Webpacker gem to your Gemfile and run Bundler. Now install it with the following command line.</p>
<pre><code>$ bin/rails g webpacker:install
</code></pre>
<p>This will setup Webpack as described before, it will also add the application pack.  Now install the <a href="https://github.com/usabilityhub/rails-erb-loader">rails-erb-loader</a>  it will become very handy to sprinkle some Ruby into the Javascript files.</p>
<pre><code>$ rails webpacker:install:erb
</code></pre>
<p>Once erb loader is installed, rename file <code>app/javascript/packs/application.js</code> to <code>app/javascript/packs/application.js.erb</code></p>
<p>If you load your application in the browser, even when the pack file is empty, Webpack will fail.</p>
<pre><code>ERROR in ./app/javascript/packs/application.js.erb
Module build failed: Error: rails-erb-loader failed with code: 1
</code></pre>
<p>The problem is that your application.js.erb now understand Ruby, but comments in the file include something like this.</p>
<pre><code>// To reference this file, add &lt;%= javascript_pack_tag &apos;application&apos; %&gt; to the appropriate
// layout file, like app/views/layouts/application.html.erb
</code></pre>
<p>Just add another <code>%</code> to the start of the declaration to become</p>
<pre><code>&lt;%%= javascript_pack_tag &apos;application&apos; %&gt;
</code></pre>
<p>The next step in this migration will be to move all your Javascript files from <code>app/assets/javascripts</code> to <code>app/javascript/application/javascripts</code>. Rename the newly copied <code>application.js</code> to <code>index.js.erb</code>.</p>
<p>Also, move your Stylesheets and Images to their folder in <code>app/javascript/application</code>. Add an empty <code>index.js.erb</code> to each folder.</p>
<p>For images open the newly added <code>index.js.erb</code> and import all the images there.</p>
<pre><code>import &apos;image1.png&apos;;
import &apos;image2.png&apos;;
...
import &apos;imageN.png&apos;;
</code></pre>
<p>You can add files one by one or take advantage of Ruby and do something like this.</p>
<pre><code>&lt;% images_glob = Rails.application.root.join(&apos;app&apos;, &apos;javascript&apos;, &apos;application&apos;, &apos;images&apos;, &apos;**&apos;, &apos;*.{png,svg}&apos;) %&gt;
&lt;% Dir.glob(images_glob).each do |image| %&gt;
  import &apos;&lt;%= image %&gt;&apos;;
&lt;% end %&gt;
</code></pre>
<p>That was easy, now look into your Rails views and update your code to use the asset_pack_path helper everywhere you have a reference to an image.</p>
<pre><code>&lt;%= image_tag asset_pack_path(&quot;application/images/image1.png&quot;) %&gt;
</code></pre>
<p>Note that the complete path of the image is required, in this case, <code>application/images</code>.</p>
<p>Also in your Stylesheets file be sure to replace the <code>image_url</code> helper for just <code>url</code> and update images references to have the complete path.</p>
<p>Now it is time to work with your Stylesheets. If you have an application.css it is likely that you are requiring your Stylesheets with Sprocket comments syntax, remove it from your application.css and open the <code>index.js.erb</code> in your Stylesheets folder.</p>
<p>In your index file, you can import each Stylesheet file, one by one.</p>
<pre><code>import &apos;application.css&apos;;
import &apos;layout.css&apos;;
...
import &apos;buttons.css&apos;;
</code></pre>
<p>Or you can use Ruby, as we did it for images, and import all available files.</p>
<pre><code>&lt;% css_glob = Rails.application.root.join(&apos;app&apos;, &apos;javascript&apos;, &apos;application&apos;, &apos;stylesheets&apos;, &apos;**&apos;, &apos;*.{css}&apos;) %&gt;
&lt;% Dir.glob(css_glob).each do |file| %&gt;
  import &apos;&lt;%= file %&gt;&apos;;
&lt;% end %&gt;
</code></pre>
<p>Also if you have any gem that provides Stylesheets you can import them as follow.</p>
<pre><code>import &quot;&lt;%= File.join(Gem.loaded_specs[&apos;mygem&apos;].full_gem_path, &apos;app&apos;, &apos;assets&apos;, &apos;stylesheets&apos;, &apos;myfile.css&apos;) %&gt;&quot;;
</code></pre>
<p>When you need to import more than one file from the gem then create an array with the name of each file and iterate over it for import.</p>
<p>If you are using SCSS, then your application file might be called application.scss, in this case, imports will happen with SCSS syntax which is ok. Just import your application.scss into index.js.erb and you will be fine.</p>
<pre><code>import &apos;application.scss&apos;;
</code></pre>
<p>If you are using a CSS/SCSS framework via a gem, you better remove the gem and install it via NPM with Yarn. The following example installs <a href="https://bulma.io/">Bulma</a>.</p>
<pre><code>$ bin/yarn add bulma
</code></pre>
<p>Then add <code>@import &apos;~bulma/bulma&apos;;</code> into your <code>application.scss</code>.</p>
<p>The final step is to migrate your Javascript assets. Update your <code>index.js.erb</code> file to import all dependencies declared originally for Sprockets using the require comments, now dependencies will be resolved by Yarn.</p>
<p>For example, here we are adding the common Javascript dependencies.</p>
<pre><code>$ bin/yarn add  jquery turbolinks rails-ujs activestorage
</code></pre>
<p>Now in the top of your <code>index.js.erb</code> import them as follow.</p>
<pre><code>import Rails from &apos;rails-ujs&apos;;
import Turbolinks from &apos;turbolinks&apos;;
import * as ActiveStorage from &apos;activestorage&apos;;

Rails.start();
Turbolinks.start();
ActiveStorage.start();
</code></pre>
<p>For other libraries read the README file for additional information on how to import them.</p>
<p>In the case of jQuery, you must make it available with <code>$</code> and <code>jQuery</code>. Open the <code>config/webpack/environment.js</code> file and add the following lines just above <code>module.exports = environment</code>.</p>
<pre><code>const webpack = require(&apos;webpack&apos;);
environment.plugins.append(&apos;Provide&apos;, new webpack.ProvidePlugin({
  $: &apos;jquery&apos;,
  jQuery: &apos;jquery&apos;
}))
</code></pre>
<p>For Ruby gems that includes Javascript, it might vary how to import them but for many, it will be as easy as importing the files from the gem.</p>
<pre><code>import &quot;&lt;%= File.join(Gem.loaded_specs[&apos;mygem&apos;].full_gem_path, &apos;app&apos;, &apos;assets&apos;, &apos;javascripts&apos;, &apos;myfile&apos;) %&gt;&quot;;
</code></pre>
<p>We can use the same technique showed where an iteration is made to load the files.</p>
<pre><code>&lt;% [&apos;file1&apos;, &apos;file2&apos;].each do |file| %&gt;
 import &quot;&lt;%= File.join(Gem.loaded_specs[&apos;mygem&apos;].full_gem_path, &apos;app&apos;, &apos;assets&apos;, &apos;javascripts&apos;, file) %&gt;&quot;;
&lt;% end %&gt;
</code></pre>
<p>For our own files, again you can use the same technique used with Images or Stylesheets.</p>
<pre><code>&lt;% files_glob = Rails.application.root.join(&apos;app&apos;, &apos;javascript&apos;, &apos;application&apos;, &apos;javascripts&apos;, &apos;**&apos;, &apos;*.js&apos;) %&gt;
&lt;% Dir.glob(files_glob).each do |file| %&gt;
  import &apos;&lt;%= file %&gt;&apos;;
&lt;% end %&gt;
</code></pre>
<p>Now modify the application.js.erb file inside the packs folder to reference the <code>index.js.erb</code> file for all assets.</p>
<pre><code>import &apos;../application/images/index.js.erb&apos;;
import &apos;../application/stylesheets/index.js.erb&apos;;
import &apos;../application/javascripts/index.js.erb&apos;;
</code></pre>
<p>If everything is ok then Webpack will compile the assets and your application will load normally. If not, then it would be time to debug any messages and try to fix it.</p>
<p>You would want to disable the Asset Pipeline in your application, to do this remove all configuration settings related to <code>config.assets</code> in <code>config/environments/production.rb</code> and <code>config/environments/development.rb</code>. Also, remove the <code>config/initializer/assets.rb</code> file. From your <code>Gemfile</code> remove gems coffee-rails, sass-rails, uglifier, and turbolinks.</p>
<p>At the top of your <code>config/application.rb</code> remove the <code>require &quot;rails/all&quot;</code> and expand the framework requires and comment the require for <code>&quot;sprockets/railtie&quot;</code>.</p>
<pre><code>require &quot;rails&quot;
# Pick the frameworks you want:
require &quot;active_model/railtie&quot;
require &quot;active_job/railtie&quot;
require &quot;active_record/railtie&quot;
require &quot;active_storage/engine&quot;
require &quot;action_controller/railtie&quot;
require &quot;action_mailer/railtie&quot;
require &quot;action_view/railtie&quot;
# require &quot;action_cable/engine&quot;
# require &quot;sprockets/railtie&quot;
require &quot;rails/test_unit/railtie&quot;
</code></pre>
<p>Remove your <code>app/assets</code> folder.</p>
<h2 id="conclusion">Conclusion</h2>
<p>If you get to this part of the blog and your application is running with Webpack for your assets: congratulations! Your team now has modern tools to work on your frontend.</p>
<p>If you still have errors you might need to tweak things related to your assets and maybe it would be a good idea to not disable the Asset Pipeline yet and continue working on your migration to Webpacker.</p>
<p>An additional bonus: You can use foreman to start the Rails server and Webpack server with one command. Install the foreman gem with gem install foreman, don&apos;t add it to your Gemfile.</p>
<p>Then create a <code>Procfile</code> in your Rails root with the following lines.</p>
<pre><code>web: bin/rails s -p $PORT
webpack: bin/webpack-dev-server
</code></pre>
<p>Now start your servers with <code>PORT=3200 foreman start</code>. Note <code>PORT</code> can be any port of your choice.</p>
<p>Photo by Aral Tasher on Unsplash</p>
<!--kg-card-end: markdown-->]]></content:encoded></item><item><title><![CDATA[Optimistic locking of ActiveRecord models]]></title><description><![CDATA[Avoid overwriting database rows with ActiveRecord's Optimistic Lock feature.]]></description><link>https://sipsandbits.com/2018/05/30/optimistic-locking-of-activerecord-models/</link><guid isPermaLink="false">5b05cbe3214f1600cbd845fa</guid><category><![CDATA[rails]]></category><category><![CDATA[activerecord]]></category><dc:creator><![CDATA[David Padilla]]></dc:creator><pubDate>Wed, 30 May 2018 17:35:02 GMT</pubDate><media:content url="https://sipsandbits.com/content/images/2018/05/p10007411-1.jpg" medium="image"/><content:encoded><![CDATA[<!--kg-card-begin: markdown--><img src="https://sipsandbits.com/content/images/2018/05/p10007411-1.jpg" alt="Optimistic locking of ActiveRecord models"><p>Did you know that Rails can help avoid data overwrite when multiple users are editing the same record?</p>
<p>Yes, you can use optimistic locking on models, and it turns out it&apos;s pretty easy to enable it too.</p>
<p>To be honest, I&apos;ve never heard about this functionality until recently while browsing the <a href="http://guides.rubyonrails.org/active_record_basics.html">Active Record Basics Guide</a> looking for info on a totally different problem that I had.</p>
<p>When I read about the <code>lock_version</code> field, I was curious and surprised by what I found.</p>
<p>It basically works like this:</p>
<p>If you add the <code>lock_version</code> field to any ActiveRecord model, every time that record is saved it will be checked for modifications after the record was loaded.</p>
<p>So, if for some reason the record changed in the database while you were editing it, when you try to save it an <code>ActiveRecord::StaleObjectError</code> exception will be raised.</p>
<p>Example:</p>
<pre><code class="language-ruby">require &apos;active_record&apos;

ActiveRecord::Base.establish_connection(adapter: &apos;sqlite3&apos;, database: &apos;:memory:&apos;)
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :orders do |t|
    t.integer :total
    t.string :lock_version
  end
end

class Order &lt; ActiveRecord::Base ; end

Order.create

object_1 = Order.find(1)
object_2 = Order.find(1)

object_1.total = 100
object_1.save # Succeeds!

object_2.total = 200
object_2.save # Raises ActiveRecord::StaleObjectError
</code></pre>
<p>You can see from the example that both <code>object_1</code> and <code>object_2</code> were loaded at the same time.</p>
<p>When you modify and change the first object, it will be saved without any problem and the <code>save</code> method will return true as expected, but when you try and save the second one (<code>object_2</code>), the <code>ActiveRecord::StaleObjectError</code> will be raised because the object has been modified already.</p>
<p>You can read more about this feature directly on its API documentation.<br>
It is worth mentioning that there is a more aggressive way to lock records by using <code>Pessimistic Locking</code>.</p>
<!--kg-card-end: markdown-->]]></content:encoded></item><item><title><![CDATA[Controllers: the Rails way vs the Hanami way]]></title><description><![CDATA[Hanami is a Ruby framework for web applications, it differs from Rails on most of its components. Let's learn what those differences are.]]></description><link>https://sipsandbits.com/2018/05/23/rails-controllers-vs-hanami-controllers/</link><guid isPermaLink="false">5ae2511ebcbb02002235d553</guid><category><![CDATA[rails]]></category><category><![CDATA[hanami]]></category><category><![CDATA[ruby]]></category><category><![CDATA[web]]></category><dc:creator><![CDATA[Eduardo Figarola]]></dc:creator><pubDate>Wed, 23 May 2018 15:00:00 GMT</pubDate><media:content url="https://sipsandbits.com/content/images/2018/05/bloom-blossom-cherry-blossom-103572.jpg" medium="image"/><content:encoded><![CDATA[<!--kg-card-begin: markdown--><img src="https://sipsandbits.com/content/images/2018/05/bloom-blossom-cherry-blossom-103572.jpg" alt="Controllers: the Rails way vs the Hanami way"><p>Recently I have become interested in <a href="http://hanamirb.org/">Hanami</a> and so far I have really liked the architecture design and decisions that its author, <a href="https://github.com/jodosha">Luca Guidi</a>, has been taking until now.</p>
<p>I have decided to break the Rails vs Hanami comparison on different blog posts, one per component, in order to keep them small and concise.</p>
<p>This is the first post of that series, and I&apos;m going to start with letter <strong>C</strong> from the MVC design pattern, <strong>the Controllers</strong>.</p>
<p>Let&apos;s start by talking about what an actual Controller is in each framework.</p>
<h2 id="thebasics">The basics</h2>
<h3 id="rails">Rails</h3>
<p>Controllers are classes that are in charge of processing inbound requests, previously handled by the <strong>Router</strong> and then submit the output to the requester (<strong>client</strong>).</p>
<p>Each public instance method in the Controller will process a different kind of request. See the code below:</p>
<pre><code class="language-ruby"># app/controllers/users_controller.rb
class UsersController &lt; ApplicationController
  def index; end     # GET /users
  def show; end      # GET /users/1
  def new; end       # GET /users/new
  def create; end    # POST /users
  def edit; end      # GET /users/1/edit
  def update; end    # PATCH /users/1
  def destroy; end    # DELETE /users/1
end
</code></pre>
<p>In this particular example, I&apos;m showing you a <strong>RESTful</strong> controller. That&apos;s one of the best practices when working with <strong>Rails</strong>, use <strong>RESTful</strong> wherever you can to provide access to your application <strong>Resources</strong>.</p>
<h3 id="hanami">Hanami</h3>
<p>In <strong>Hanami</strong>, Controllers are <strong>modules</strong> whose unique responsibility is to group <strong>Actions</strong> (which are the classes) that are in charge of processing a very specific inbound request, previously handled by the <strong>Router</strong> too and then submit the output to the client.</p>
<pre><code class="language-ruby"># apps/web/controllers/users/index.rb
module Web::Controllers::Users
  class Index
    include Web::Action

    def call(params)
    end
  end
end

# apps/web/controllers/users/show.rb
module Web::Controllers::Users
  class Show
    include Web::Action

    def call(params)
    end
  end
end

...
</code></pre>
<p>With those two <strong>Action</strong> examples, you get the idea of what&apos;s going on.</p>
<h3 id="differences">Differences</h3>
<p>In <strong>Rails</strong>, you have one <strong>Controller Class</strong> with as many public instance methods as you need.</p>
<p>In <strong>Hanami</strong>, you need one <strong>Controller Module</strong> and as many <strong>Action Classes</strong> as you need. <strong>Hanami</strong> Actions are only required to define a <strong>call</strong> public instance method.</p>
<h3 id="whatapproachisbetterandwhy">What approach is better and why?</h3>
<p>In my opinion, I think that the Hanami architecture is cleaner because one class per <strong>Action</strong> accomplishes the <strong>Single Responsibility Principle</strong> which states that <em>one Class must be responsible for doing one thing.</em></p>
<p>On the other side, a really known problem with <strong>Rails&apos; Controllers</strong> is the trend to become really big classes over time that sometimes are hard to read and understand at first glance. Are you familiar with the <em>Thin Controllers, Fat models</em> &quot;best practice&quot;? Would it be better to not worry about getting a <em>Fat  Controller</em> at all?</p>
<p>It&apos;s pretty easy to avoid <strong>Fat Actions</strong> with Hanami. You are required to handle one request action per class, and if you find any code duplication within your <strong>Controller&apos;s Actions</strong>, Ruby has a built-in solution for that: <strong>modules</strong>. You can just place the repeated code in a <strong>module</strong> and then include it in the <strong>Actions</strong> classes where needed. See the example below:</p>
<pre><code class="language-ruby"># apps/web/controllers/users/set_user.rb
module Web::Controllers::Users
  module SetUser
    def self.included(action)
      action.class_eval do
        before :set_user
      end
    end

    private

    def set_user
      @user = UserRepository.new.find(params[:id])
      halt 404 if @user.nil?
    end
  end
end

# apps/web/controllers/users/show.rb
require_relative &apos;./set_user&apos;

module Web::Controllers::Users
  class Show
    include Web::Action
    include SetUser

    def call(params)
      # ...
    end
  end
end

# apps/web/controllers/users/edit.rb
require_relative &apos;./set_user&apos;

module Web::Controllers::Users
  class Edit
    include Web::Action
    include SetUser

    def call(params)
      # ...
    end
  end
end
</code></pre>
<p>Solid, right?</p>
<h2 id="exposingvariablestotheviewstemplates">Exposing variables to the views/templates</h2>
<p>The <strong>Controllers</strong> are in charge of exposing data to the <strong>View</strong> layer. Hanami and Rails do this in a very similar fashion with a small difference.</p>
<h3 id="rails">Rails</h3>
<p>In Rails, any instance variable that you declare in your controller is accessible in the templates (Views).</p>
<h3 id="hanami">Hanami</h3>
<p>In Hanami, instance variables are exposed only if you say so via the <code>expose</code> class method. Here is an example of it:</p>
<pre><code class="language-ruby"># apps/web/controllers/users/index.rb
module Web::Controllers::Users
  class Index
    include Web::Action
    expose :users # We are exposing the @users instance variable.

    def call(params)
      @users = UserRepository.new.all
      @another_instance_variable = {} # This will not be accesible in the view/template
    end
  end
end
</code></pre>
<h2 id="wrappingup">Wrapping up</h2>
<p>By now, you could say that Hanami needs more code to accomplish the same things that you can do in Rails, and it might be true. Rails architectural design relies more on <strong>Convention over Configuration</strong>, that&apos;s why it feels like magic to work with Rails.</p>
<p>On the other hand, Hanami has fewer conventions and forces us to be more explicit with our intentions. In my opinion, having separate classes per Controller Action is a really good idea, because we just have to worry about what is happening on a single inbound request. And that architecture just feels right.</p>
<p>On the next blog post of the series, I will continue with the comparison of Rails Models (ActiveRecord) and Hanami Model Domain (Entities &amp; Repositories)</p>
<!--kg-card-end: markdown-->]]></content:encoded></item><item><title><![CDATA[Formatting Dates: the Rails way]]></title><description><![CDATA[You can use ActiveSupport to keep all of your date and time formats in a single place. The Rails Way.]]></description><link>https://sipsandbits.com/2018/05/04/rails-format-dates/</link><guid isPermaLink="false">5ae34e03bcbb02002235d55a</guid><category><![CDATA[rails]]></category><dc:creator><![CDATA[Baltazar Calvillo Escalera]]></dc:creator><pubDate>Fri, 04 May 2018 15:14:13 GMT</pubDate><media:content url="https://sipsandbits.com/content/images/2018/05/calendar.jpg" medium="image"/><content:encoded><![CDATA[<!--kg-card-begin: markdown--><img src="https://sipsandbits.com/content/images/2018/05/calendar.jpg" alt="Formatting Dates: the Rails way"><p>Working with dates in Rails can become a problem after a while, especially when in your project you have code like this:</p>
<pre><code class="language-ruby">t = Time.now
t.strftime(&quot;Printed on %m/%d/%Y&quot;)
</code></pre>
<p>At first glance, this might look good because this is a very simple date being formatted. But what happens when there are a lot of dates in many places and all of them with the same format? You end with a lot of strftime calls with the same arguments spread all over your project.</p>
<p>You might be thinking the solution would be to wrap the formatting in a helper method like:</p>
<pre><code class="language-ruby">...
def formatted_date(date)
    date.strftime(&quot;Printed on %m/%d/%Y&quot;)
end
...
</code></pre>
<p>It does work, but there is a better way of doing it in Rails.</p>
<h2 id="managingcustomdateformatswithactivesupport">Managing custom date formats with Active Support</h2>
<p>ActiveSupport is a Rails library that provides a lot of utility methods, one of those methods is the <code>to_formatted_s</code>, here&#x2019;s how it works:</p>
<pre><code class="language-ruby">t = Time.now 
t.to_formatted_s(:iso8601) #=&gt; &quot;2018-05-03T16:17:33-05:00&quot;
</code></pre>
<p>In order to add your own date formats you can create the following initializer file:</p>
<pre><code class="language-ruby"># config/initializers/date_formats.rb
Time::DATE_FORMATS[:flip_year] = &apos;(&#x256F;&#xB0;&#x25A1;&#xB0;&#xFF09;&#x256F;&#xFE35;%Y&apos;
</code></pre>
<p>And now you can use your custom date formats everywhere like this:</p>
<pre><code class="language-ruby">t = Time.now 

puts t.to_formatted_s(:flip_year) # =&gt; (&#x256F;&#xB0;&#x25A1;&#xB0;&#xFF09;&#x256F;&#xFE35;2018

# or alias:
puts t.to_s(:flip_year) # =&gt; (&#x256F;&#xB0;&#x25A1;&#xB0;&#xFF09;&#x256F;&#xFE35;2018
</code></pre>
<p>As you can see, this is a more organized way to keep all your date formats in a single place. The initializer file can work as a reference for other developers to figure out if there&#x2019;s a format they can use and avoid code duplication.</p>
<!--kg-card-end: markdown-->]]></content:encoded></item><item><title><![CDATA[Enums with Rails & ActiveRecord: an improved way]]></title><description><![CDATA[Ensuring data integrity is vital for a healthy database. ActiveRecord Enums can be complemented with database Enums as well.]]></description><link>https://sipsandbits.com/2018/04/30/using-database-native-enums-with-rails/</link><guid isPermaLink="false">5ae1fc10bcbb02002235d53c</guid><category><![CDATA[rails]]></category><category><![CDATA[mysql]]></category><category><![CDATA[postgresql]]></category><category><![CDATA[enums]]></category><category><![CDATA[activerecord]]></category><dc:creator><![CDATA[Eduardo Figarola]]></dc:creator><pubDate>Mon, 30 Apr 2018 15:00:00 GMT</pubDate><media:content url="https://sipsandbits.com/content/images/2018/04/bridge-clouds-forest-461772.jpg" medium="image"/><content:encoded><![CDATA[<!--kg-card-begin: markdown--><h2 id="overview">Overview</h2>
<img src="https://sipsandbits.com/content/images/2018/04/bridge-clouds-forest-461772.jpg" alt="Enums with Rails &amp; ActiveRecord: an improved way"><p>ActiveRecord Enums are a really good tool to use when you need that certain model&apos;s attribute to have a finite number of possible values.</p>
<p>Its usage is pretty straightforward, see the example below:</p>
<pre><code class="language-ruby">class Post &lt; ApplicationRecord
  enum status: %i[draft reviewed published]
end
</code></pre>
<p>In order to persist the <strong>status</strong> value to the database, we need to generate a migration using the following command:</p>
<pre><code>bundle exec rails g migration AddStatusToPosts
</code></pre>
<p>And it should look like this:</p>
<pre><code class="language-ruby"># db/migrate/20180426164051_add_status_to_posts.rb
class AddStatusToPosts &lt; ActiveRecord::Migration[5.2]
  def change
    add_column :posts, :status, :integer, default: 0
  end
end
</code></pre>
<p>It&apos;s important to mention that, for this case, the column needs to be an <strong>integer</strong>, and it will contain values from <em>0 to 2</em>. Setting the default as 0 is a good practice. Those values will mean the following:</p>
<ul>
<li>0 for draft status</li>
<li>1 for reviewed status</li>
<li>2 for published status</li>
</ul>
<p>Yes, you noticed it right, <strong>the order we define the values on our <strong>enum</strong> does matter a lot</strong>. And if we decide to add new values, the recommendation is to add them at the end, so we don&apos;t mess with data that we may already have in our database.</p>
<p>There is a way for us to override the integer number that will be used to represent a value from our <strong>enum</strong>, you can use the following approach:</p>
<pre><code class="language-ruby">class Post &lt; ApplicationRecord
  enum status: { draft: 2, reviewed: 1, published: 0 }
end
</code></pre>
<p>As you can imagine, the mapping has changed to the following:</p>
<ul>
<li>0 for published status</li>
<li>1 for reviewed status</li>
<li>2 for draft status</li>
</ul>
<p>Cool, enough with the &quot;mappings&quot;, let&apos;s talk about the convenience methods that we get when using the <strong>enum</strong>, assuming we have the following <strong>enum declaration</strong>:</p>
<pre><code class="language-ruby">enum status: %i[draft reviewed published]
</code></pre>
<p>These are the methods:</p>
<pre><code class="language-ruby">post = Post.new

post.draft! # =&gt; true
post.draft? # =&gt; true
post.status # =&gt; &quot;draft&quot;

post.reviewed! # =&gt; true
post.draft?    # =&gt; false
post.status    # =&gt; &quot;reviewed&quot;
post.reviewed? # =&gt; true
</code></pre>
<p>Fancy, uh? As you can imagine we get the same methods for our <strong>published</strong> status.</p>
<p>Be aware that <strong>!</strong> methods, change the status and also saves the record, so you need to make sure that your model meets all validations prior using the <strong>bang</strong> methods or they will fail.</p>
<p>Thanks to <strong>?</strong> methods you no longer need to do comparisons to know if your record is in specific status.</p>
<p>The usage of <strong>enums</strong> also adds convenience scopes for us:</p>
<pre><code class="language-ruby">Post.draft     # =&gt; Collection of all Posts in draft status
Post.reviewed  # =&gt; Collection of all Posts in reviewed status
Post.published # =&gt; Collection of all Posts in published status
</code></pre>
<h2 id="pros">Pros</h2>
<p>Besides the convenience methods and scopes that I already mentioned to you, the main advantage of using enums is that, out of the box, we get validations for the possible values that a column can have.</p>
<p>So the following example will raise an exception:</p>
<pre><code class="language-ruby">post = Post.new

post.status = &quot;unknown&quot;
=&gt; ArgumentError (&apos;unknown&apos; is not a valid status)
</code></pre>
<h2 id="cons">Cons</h2>
<h3 id="integercolumnsarehardtounderstandwithoutactualcontext">Integer columns are hard to understand without actual context</h3>
<p>One of the downsides of using an <strong>integer</strong> column for storing a representation of a string value, like the case of a <strong>status</strong> column, is that we are going to make it harder for people looking directly at the database table&apos;s rows to know what number represents which status. In the previous examples, there are 3 possible statuses, but we can many more, there is no limit.</p>
<p>Fortunately, we can make the life easier for the people looking directly to the database.</p>
<p>Instead of using an <strong>integer</strong> column, you can use a <strong>string</strong> one. Your migration should look like this:</p>
<pre><code class="language-ruby"># db/migrate/20180426164051_add_status_to_posts.rb
class AddStatusToPosts &lt; ActiveRecord::Migration[5.2]
  def change
    add_column :posts, :status, :string
  end
end
</code></pre>
<p>Next, you need to change your <strong>enum declaration</strong> to the following:</p>
<pre><code class="language-ruby">class Post &lt; ApplicationRecord
  enum status: {
    draft: &quot;draft&quot;,
    reviewed: &quot;reviewed&quot;,
    published: &quot;published&quot;
  }
end
</code></pre>
<p>That&apos;s it, know your <strong>posts</strong> table will have a <strong>string</strong> status column and consequently, any person looking at it will know what status the Post has.</p>
<h3 id="dataintegrityissues">Data Integrity issues</h3>
<p>Now that you have already solved the readability issue in your <strong>posts</strong> table. There is still one important issue that we need to resolve. The integrity of the information within your database. Currently, it is totally possible for the people with read/write access to your database to set invalid values on your <strong>status</strong> column. As you may recall, validations are handled within your Rails application context. If we are already using <strong>enum</strong> on Rails, is because we know the values that your <strong>status</strong> column can have is finite.</p>
<p>Let&apos;s add the very same constraints we have on our Rails app, to the database. To do so, native databases enums come to our rescue! I will teach you how to write migrations to generate that kind of columns in <strong>MySQL</strong> and <strong>PostgreSQL</strong>.</p>
<h4 id="mysql">MySQL</h4>
<p>The migration should look like this if you are adding the column:</p>
<pre><code class="language-ruby"># db/migrate/20180426164051_add_status_to_posts.rb
class AddStatusToPosts &lt; ActiveRecord::Migration[5.2]
  def up
    execute &lt;&lt;-SQL
        ALTER TABLE posts ADD status enum(&apos;published&apos;, &apos;draft&apos;, &apos;reviewed&apos;);
    SQL
  end

  def down
    remove_column :posts, :status
  end
end
</code></pre>
<p>Interesting, uh? We are using <strong>MySQL&apos;s</strong> <strong>enum()</strong> type to declare the possible values that the <strong>status</strong> column should have. You&apos;re guessing right, those values should be exactly the same than the ones declared on your Model.</p>
<p>In case your column already exist, your migration should look like this:</p>
<pre><code class="language-ruby"># db/migrate/20180426164051_change_post_status_column_type.rb
class AddStatusToPosts &lt; ActiveRecord::Migration[5.2]
  def up
    execute &lt;&lt;-SQL
        ALTER TABLE posts MODIFY status enum(&apos;published&apos;, &apos;draft&apos;, &apos;reviewed&apos;);
    SQL
  end
  
  def down
    change_column :posts, :status, :string # Previous type
  end
end
</code></pre>
<h4 id="postgresql">PostgreSQL</h4>
<p>The migration should look like this if you are adding the column:</p>
<pre><code class="language-ruby"># db/migrate/20180426164051_add_status_to_posts.rb
class AddStatusToPosts &lt; ActiveRecord::Migration[5.2]
  def up
    execute &lt;&lt;-SQL
      CREATE TYPE post_statuses AS ENUM (&apos;published&apos;, &apos;draft&apos;, &apos;reviewed&apos;);
      ALTER TABLE posts ADD status post_statuses;
    SQL
  end

  def down
    execute &lt;&lt;-SQL
      DROP TYPE post_statuses;
    SQL
    remove_column :posts, :status
  end
end
</code></pre>
<p><strong>PostgreSQL</strong> also supports <strong>enums</strong>, but we should define them first. That&apos;s why we use the <strong>CREATE_TYPE</strong> command to define our enum, and then we add the <strong>status</strong> column and it uses the previously defined <strong>enum</strong> with <strong>CREATE_TYPE</strong>.</p>
<p>In case your column already exist, your migration should look like this:</p>
<pre><code class="language-ruby"># db/migrate/20180426164051_change_post_status_column_type.rb
class AddStatusToPosts &lt; ActiveRecord::Migration[5.2]
  def up
    execute &lt;&lt;-SQL
      CREATE TYPE post_statuses AS ENUM (&apos;published&apos;, &apos;draft&apos;, &apos;reviewed&apos;);
      ALTER TABLE posts MODIFY status post_statuses;
    SQL
  end

  def down
    execute &lt;&lt;-SQL
      DROP TYPE post_statuses;
    SQL
    change_column :posts, :status, :string # Previous type
  end
end
</code></pre>
<h4 id="mysqlandpostgresql">MySQL and PostgreSQL</h4>
<p>Running the following commands will work as expected:</p>
<pre><code>bundle exec rails db:migrate
bundle exec rails db:rollback
</code></pre>
<p>We will get a column on the database that will only accept the declared values. That&apos;s the same constraint we have on our Rails app, yay!</p>
<p>Unfortunately, if you are still using the file <strong>db/schema.rb</strong> as your source of truth for generating/re-generating the database, there are a few drawbacks.</p>
<p><strong>MySQL</strong> will give you the next result:</p>
<pre><code class="language-ruby">  create_table &quot;posts&quot;, options: &quot;ENGINE=InnoDB DEFAULT CHARSET=utf8&quot;, force: :cascade do |t|
    t.string &quot;title&quot;
    t.text &quot;content&quot;
    t.datetime &quot;created_at&quot;, null: false
    t.datetime &quot;updated_at&quot;, null: false
    t.string &quot;status&quot;, limit: 9
  end
</code></pre>
<p>As you can see, there is nothing that indicates that your <strong>status</strong> column is an <strong>enum</strong>. That&apos;s because Rails does not know anything about native <strong>enum</strong> column type from <strong>MySQL</strong>.</p>
<p><strong>PostgreSQL&apos;s</strong> result is even worst:</p>
<pre><code class="language-ruby"># Could not dump table &quot;posts&quot; because of following StandardError
# Unknown type &apos;post_statuses&apos; for column &apos;status&apos;
</code></pre>
<p>Yes, that&apos;s what you will get in your <strong>db/schema.rb</strong> when using <strong>PostgreSQL</strong> to create an <strong>enum</strong> column on a migration. Really bad, uh?</p>
<p>Fortunately, the solution to this problem is the same and it is really simple: Use <strong>db/structure.sql</strong> instead of <strong>db/schema.rb</strong>!</p>
<p>Add this line to your <strong>config/application.rb</strong> file:</p>
<pre><code class="language-ruby"># config/application.rb
...
class Application &lt; Rails::Application
  ...
  config.active_record.schema_format = :sql
  ...
end
...
</code></pre>
<p>Problem solved! Now you are safe to delete your <strong>db/schema.rb</strong> file and git track the brand new <strong>db/structure.sql</strong>. It will contain the most reliable dump of your database&apos;s structure.</p>
<h2 id="wrappingup">Wrapping up</h2>
<p>ActiveRecord Enums are really useful when used correctly. We can make life easier for people with write/read access to our application&apos;s database by using a <strong>string</strong> column instead of an <strong>integer</strong> one.</p>
<p>As <strong>Uncle Ben</strong> once said:</p>
<blockquote>
<p>&quot;With great power comes great responsibility&quot;</p>
</blockquote>
<p>We need to add the same constraints on our database, to guarantee data integrity. Database native enums are great for that and they <strong>keep the same readability than a string column</strong>, with the <strong>built-in protection against bad input!</strong></p>
<!--kg-card-end: markdown-->]]></content:encoded></item><item><title><![CDATA[ActiveStorage in Rails 5.2, step by step.]]></title><description><![CDATA[Active Storage makes it simple to upload and reference files in cloud services like Amazon S3, Google Cloud Storage, or Microsoft Azure Storage, and attach those files to Active Records.]]></description><link>https://sipsandbits.com/2018/04/25/activestorage-in-rails-5-2/</link><guid isPermaLink="false">5adfc9e3cf081900221403db</guid><category><![CDATA[rails]]></category><dc:creator><![CDATA[David Padilla]]></dc:creator><pubDate>Wed, 25 Apr 2018 00:22:56 GMT</pubDate><media:content url="https://sipsandbits.com/content/images/2018/04/Storage.jpg" medium="image"/><content:encoded><![CDATA[<!--kg-card-begin: markdown--><img src="https://sipsandbits.com/content/images/2018/04/Storage.jpg" alt="ActiveStorage in Rails 5.2, step by step."><p>Almost all of your web apps these days require that users upload a file at some point. It can be a profile picture, a photo of something they are trying to sell or a document of some sort.</p>
<p>For the past few years we&apos;ve all used <a href="https://github.com/carrierwaveuploader/carrierwave">carrierwave</a> or <a href="https://github.com/thoughtbot/paperclip">paperclip</a> to handle uploads in Rails, but now that version 5.2 has been released we have another alternative in ActiveStorage.</p>
<h2 id="whatisactivestorage">What is Active Storage?</h2>
<p>From its README:</p>
<blockquote>
<p>Active Storage makes it simple to upload and reference files in cloud services like <a href="https://aws.amazon.com/s3/">Amazon S3</a>, <a href="https://cloud.google.com/storage/docs/">Google Cloud Storage</a>, or <a href="https://azure.microsoft.com/en-us/services/storage/">Microsoft Azure Storage</a>, and attach those files to Active Records. Supports having one main service and mirrors in other services for redundancy. It also provides a disk service for testing or local deployments, but the focus is on cloud storage.</p>
</blockquote>
<p>ActiveStorage is an engine that will help you handle file uploads in your Rails apps in a very straightforward and easy way.</p>
<h2 id="setitup">Set it up</h2>
<p>Let&apos;s create a new rails app for our example. I&apos;m now assuming you already installed Rails 5.2 on your system.</p>
<pre><code class="language-bash">$ rails new catalog
</code></pre>
<p>Before you can start using active storage, you need a few database tables. Run the following command to install the migrations that will create them:</p>
<pre><code class="language-bash">$ bin/rails active_storage:install
</code></pre>
<p>Now, let&apos;s create a product model with a <code>title</code> and then run all migrations.</p>
<pre><code class="language-bash">$ bin/rails generate scaffold products title:string

$ bin/rails db:migrate
</code></pre>
<h2 id="attachafiletoamodel">Attach a file to a model</h2>
<p>Now, let&apos;s say that all of our <code>Product</code> objects have one <code>picture</code>. We use the <code>has_one_attached</code> method to define this relationship:</p>
<pre><code class="language-ruby">class Product &lt; ApplicationRecord
  has_one_attached :picture

end
</code></pre>
<p>We now need a field on the <code>Product</code> form where the user will be able to specify the file we&apos;re trying to upload. Edit <code>app/views/products/_form.html.erb</code> find where the field definitions are and add the code for the picture field:</p>
<pre><code class="language-html">  &lt;div class=&quot;field&quot;&gt;
    &lt;%= form.label :title %&gt;
    &lt;%= form.text_field :title %&gt;
  &lt;/div&gt;

  &lt;!-- ADD THIS --&gt;
  &lt;div class=&quot;field&quot;&gt;
    &lt;%= form.label :picture %&gt;
    &lt;%= form.file_field :picture %&gt;
  &lt;/div&gt;
  &lt;!-- / ADD THIS --&gt;

  &lt;div class=&quot;actions&quot;&gt;
    &lt;%= form.submit %&gt;
  &lt;/div&gt;
</code></pre>
<p>Before we forget, let&apos;s add <code>picture</code> as a permitted parameter on the <code>ProductsController</code>.</p>
<pre><code class="language-ruby">class ProductsController &lt; ApplicationController
  # ...
  
  # Never trust parameters from the scary internet, only allow the white list through.
  def product_params
    params.require(:product).permit(:title, :picture)
  end
  
end
</code></pre>
<p>Now if you start your server, navigate to <code>/products</code>, add a new <code>Product</code>, type a title and select a picture, you&apos;ll notice on the <code>development.log</code> file an INSERT statement to the <code>active_storage_blobs</code> table.</p>
<p>Look for something that reads very similar to this:</p>
<pre><code>ActiveStorage::Attachment Create (0.3ms)  INSERT INTO &quot;active_storage_attachments&quot; (&quot;name&quot;, &quot;record_type&quot;, &quot;record_id&quot;, &quot;blob_id&quot;, &quot;created_at&quot;) VALUES (?, ?, ?, ?, ?)  [[&quot;name&quot;, &quot;picture&quot;], [&quot;record_type&quot;, &quot;Product&quot;], [&quot;record_id&quot;, 4], [&quot;blob_id&quot;, 2], [&quot;created_at&quot;, &quot;2018-04-25 04:07:32.090892&quot;]]
</code></pre>
<h2 id="displaytheattachedfile">Display the attached file</h2>
<p>You can use the <code>url_for</code> helper to return the url of an attached file. In our case let&apos;s display the picture that we just uploaded. Edit <code>app/views/products/index.html.erb</code> and add the following line:</p>
<pre><code class="language-html">  &lt;tbody&gt;
    &lt;% @products.each do |product| %&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;%= product.title %&gt;&lt;/td&gt;
        &lt;!-- ADD THIS LINE --&gt;
        &lt;td&gt;&lt;%= image_tag url_for(product.picture) %&gt;&lt;/td&gt;
        &lt;!-- / ADD THIS LINE --&gt;
        &lt;td&gt;&lt;%= link_to &apos;Show&apos;, product %&gt;&lt;/td&gt;
        &lt;td&gt;&lt;%= link_to &apos;Edit&apos;, edit_product_path(product) %&gt;&lt;/td&gt;
        &lt;td&gt;&lt;%= link_to &apos;Destroy&apos;, product, method: :delete, data: { confirm: &apos;Are you sure?&apos; } %&gt;&lt;/td&gt;
      &lt;/tr&gt;
    &lt;% end %&gt;
  &lt;/tbody&gt;
</code></pre>
<p>Your scaffold should now display the file that you uploaded when you created a product.</p>
<h2 id="differentstoragestrategies">Different storage strategies.</h2>
<p>When you are developing an app, you want to keep uploaded files in your disk, but when you deploy it it&apos;s very likely that you will use a third party service to store them, like Amazon S3, Azure Storage Service or Google Cloud Storage.</p>
<p>The way ActiveStorage handles this is very simple.</p>
<p>You declare the different storage strategies in <code>config/storage.yml</code>. For example, you can declare a <code>disk</code> strategy for development and an <code>amazon</code> strategy that can be used for production:</p>
<pre><code class="language-yaml">local:
  service: Disk
  root: &lt;%= Rails.root.join(&quot;storage&quot;) %&gt;

amazon:
  service: S3
  access_key_id: AMAZON KEY
  secret_access_key: AMAZON SECRET
</code></pre>
<p>Then, in each of the <code>config/environments/*.rb</code> files you can specify which storage to use.</p>
<p>For development, in <code>config/environments/development.rb</code>:</p>
<pre><code class="language-ruby">config.active_storage.service = :local
</code></pre>
<p>For production, in <code>config/environments/production.rb</code>:</p>
<pre><code class="language-ruby">config.active_storage.service = :amazon
</code></pre>
<p>Note that you may need to include additional gems to your <code>Gemfile</code> depending on your strategies. To use Amazon S3 you need to include <code>aws-sdk-s3</code>:</p>
<pre><code class="language-ruby">gem &quot;aws-sdk-s3&quot;, require: false
</code></pre>
<h2 id="manymanymorefeatures">Many, many more features</h2>
<p>ActiveStorage comes with plenty more features but this post would be too long if I wrote about them. I do want to mention <a href="http://guides.rubyonrails.org/active_storage_overview.html#transforming-images">Image Transformation</a> that allows you to create resized versions of your images, and <a href="http://guides.rubyonrails.org/active_storage_overview.html#direct-uploads">Direct Uploads</a> that allows you to skip the controller and upload the files directly from the client to the cloud. It even includes the JavaScript libraries to make it easy.</p>
<p>Go ahead and read the <a href="http://guides.rubyonrails.org/active_storage_overview.html">official guides</a> for more information. They are very well written and there&apos;s plenty more to learn about ActiveStorage from it.</p>
<!--kg-card-end: markdown-->]]></content:encoded></item><item><title><![CDATA[What's new in Rails 5.1]]></title><description><![CDATA[A new version of Rails was announced a few days ago, is the first beta of Rails 5.1. It does not come with breaking changes but it does embrace Javascript in a way that never seen before in Rails.]]></description><link>https://sipsandbits.com/2017/03/09/whats-new-in-rails-51/</link><guid isPermaLink="false">5adf57140062200022e0fbed</guid><category><![CDATA[web]]></category><category><![CDATA[development]]></category><category><![CDATA[rails]]></category><dc:creator><![CDATA[Mario Alberto Chávez Cárdenas]]></dc:creator><pubDate>Thu, 09 Mar 2017 16:11:00 GMT</pubDate><media:content url="https://sipsandbits.com/content/images/2018/04/Ruby_On_Rails_Logo.svg-1.png" medium="image"/><content:encoded><![CDATA[<!--kg-card-begin: markdown--><img src="https://sipsandbits.com/content/images/2018/04/Ruby_On_Rails_Logo.svg-1.png" alt="What&apos;s new in Rails 5.1"><p>Rails 5.1 beta 1 was just <a href="http://weblog.rubyonrails.org/2017/2/23/Rails-5-1-beta1/">announced</a> by the Rails team and it includes important changes on how Javascript will be used by Rails applications , it even says <em>&quot;Loving JavaScript&quot;</em> in the section title to describe these changes. This is probably the biggest change since the <em>Asset Pipeline</em> was introduced in Rails 4.0. It also acknowledges how modern web applications are being built in the present.</p>
<h2 id="ruby24support">Ruby 2.4 support</h2>
<p>This new version of Rails is compatible with Ruby 2.4, for cases where Ruby 2.4 provides methods defined in <em>ActiveSupport</em> core extensions, Ruby&#x2019;s implementation will be favored, if you are running Rails with the previous version of Ruby then the <em>ActiveSupport</em> core extension code will be used.</p>
<p>An example of this is <code>Hash#compact</code> and <code>Hash#compact!</code>. Also, Rails 5.1 supports Ruby&#x2019;s unification of <code>Fixnum</code> and <code>Bignum</code> into the <code>Integer</code> class. Unicode version 9.0.0 from Ruby 2.4 is available as well, so now you have more emojis to name your controller and models.</p>
<h2 id="removeddeprecatedfunctionality">Removed deprecated functionality</h2>
<p>It couldn&#x2019;t be a new Rails release without removing deprecated code or marking code as deprecated.</p>
<h3 id="activerecord">ActiveRecord</h3>
<p>Following methods have been removed <code>#uniq</code>, <code>#uniq!</code>, <code>#uniq_value</code>, <code>#insert_sql</code>, <code>#update_sql</code>, and <code>#delete_sql</code>.</p>
<p>If you use fixtures <code>#use_transactional_fixtures</code> has been removed as well.</p>
<p>The following <em>rake</em> db tasks were also removed <code>db:test:clone</code>, db:test:clone_schema<code>, </code>db:test:clone_structure`.</p>
<h3 id="actionpack">ActionPack</h3>
<p>Don&#x2019;t call <code>env</code> anymore from your controllers, since <code>ActionController::Metal#env</code> was removed, use <code>request</code> instead.</p>
<p>If you are doing Integration tests, <code>ActionDispatch::IntegrationTest</code> now requires you to use the Keyword arguments versions of <code>#get</code>, <code>#post</code>, <code>#patch</code>, <code>#put</code>, <code>#delete</code>, and <code>#head</code>.</p>
<p>In your controller you can&#x2019;t use<code>render</code> <code>:text</code> or <code>:nothing</code> anymore. Also <code>redirect_to</code> doesn&apos;t support the <code>:back</code> option anymore.</p>
<p>Controller methods <code>skip_action_callback</code>, <code>skip_filter, before_filter</code>, <code>prepend_before_filter</code>, <code>skip_before_filter</code>, <code>append_before_filter</code>, <code>around_filter</code>, <code>prepend_around_filter</code>, <code>skip_around_filter</code>, <code>append_around_filter</code>, <code>after_filter</code>, <code>prepend_after_filter</code>, <code>skip_after_filter</code> and <code>append_after_filter</code> were removed too.</p>
<h3 id="railties">Railties</h3>
<p><em>rake</em> tasks <code>rails:update</code>, <code>rails:template</code>, <code>rails:template:copy</code>, <code>rails:update:configs</code> and <code>rails:update:bin</code> were removed.</p>
<p>Configuration options <code>config.serve_static_files</code> and <code>config.static_cache_control</code> were also removed .</p>
<h2 id="sowhatisnew">So, what is new?</h2>
<p>Here is the list of features that you can expect with the new release.</p>
<h3 id="adisjquery">Adi&#xF3;s jQuery</h3>
<p>If you have been in Rails world for a while, you probably remember the time when <a href="script.aculo.us">Scriptaculous</a> was replaced by jQuery, well now is time to say <em>Adi&#xF3;s</em> to jQuery.</p>
<p>Rails doesn&#x2019;t depend on jQuery anymore, rails-ujs was rewritten to be plain vanilla Javascript. You can still add jQuery as a dependency in your app but is not installed by default with new Rails applications.</p>
<h3 id="newwaytoworkwithjavascript">New way to work with Javascript.</h3>
<p>The Javascript world has changed a lot since Rails 4.0 introduced the Asset Pipeline. Now it is almost impossible to simply download a Javascript library from its Git repository, place it under <code>vendor/assets/javascripts</code>, require it in the <code>application.js</code> manifest and expect it to work.</p>
<p>Today, Javascript libraries are packed for Node.js and configured to work with Node&#x2019;s module loading system making impossible for Rails to work with them without additional configuration to include Node.js and npm into the picture.</p>
<p>Rails team acknowledges this and with Rails 5.1 they made it easy for us to work with the Javascript world with the introduction of <a href="https://yarnpkg.com/en/">Yarn</a>.</p>
<p>Every new Rails application will include Yarn, which is a package manager for Javascript. To use Yarn you must install it first if you don&#x2019;t already have it. In MacOS, you can just use <em>Homebrew</em>.</p>
<pre><code>$ brew install yarn
</code></pre>
<p>This command will install <em>Yarn</em> and <em>Nodejs</em>. By creating a new Rails application with Rails 5.1.0 a new binstub, yarn, will be placed in the <code>bin</code> directory. You should always use this binstub when working with <em>Yarn</em> from a Rails application.</p>
<p>To add a Javascript package to your Rails app, you simply use the <code>add</code> command in_Yarn_.</p>
<pre><code>$ bin/yarn add moment
</code></pre>
<p><em>Yarn</em> will create a <code>package.json</code> and <code>yarn.lock</code> files, it will also download the Javascript package into <code>node_modules</code> directory. <em>Yarn</em> will manage versions and dependencies for us.</p>
<p>Once a Javascript package has been installed you can reference it from the Asset Pipeline manifest. In this example, to use the <em>moment</em> library, you can require it by adding the following line in <code>application.js</code>:</p>
<pre><code>//= require moment/moment
</code></pre>
<p>Then you&#x2019;re free to use it on your own Javascript files. By running <code>rails assets:precompile</code> your generated <code>application-{digest}.js</code> file will include the <em>moment</em> library.</p>
<p>If you are into single page applications, Rails now comes with setup options for React, Angular, and Vue. In this case, Rails depends on <a href="https://webpack.github.io">Webpack</a> to manage modules and dependencies.</p>
<p>To setup <em>Webpack</em>, Rails depends on the gem <a href="https://github.com/rails/webpacker">Webpacker</a> which setups required configuration for <em>Webpack</em> to work with Rails.</p>
<p>To start a Rails/React project you can run the command:</p>
<pre><code>$ rails new single_page --webpack=react
</code></pre>
<p>For an existing project, run the following command but first add the web packer gem in your <code>Gemfile</code>. As of today, it is better if you pull the gem directly from its repository.</p>
<blockquote>
<p>Webpacker gem is compatible with Rails 4.2 or better.</p>
</blockquote>
<pre><code>$ rails webpacker:install
$ rails webpacker:install:react
</code></pre>
<p>The first command will setup <em>Webpack</em> for development and production environments, this configuration can be found in <code>config/webpack</code> and it is a standard <em>Webpack</em> configuration, something that you might expect by using <em>Webpack</em> in a standalone or Nodejs application.</p>
<p>Two new stubs are added to the <code>bin</code> directory: <code>webpack-watcher</code> and <code>webpack-dev-server</code>, both of them are scripts that need to be running in development along with <code>rails s</code>. The first one is a watcher that will automatically recompile your Javascript as you make changes. The second one does the same but it supports advanced features of <em>Webpack</em>. The later runs on <code>http://localhost:8080</code> and you need to configure the option <code>config.x.webpacker[:dev_server_host]</code> in your <code>config/environments/development.rb</code> to allow rails to serve Javascript files properly. Only one of the scripts needs to be running at a time.</p>
<p>Your Javascript code must be placed in <code>app/javascript</code>, in there you must define <em>packs</em>, a pack is a Javascript application, it needs to have an entry point like <code>signup.js</code> and a directory <code>app/javascript/signup</code> must exist with all related files to this application.</p>
<p>Then in your Rails layout, you just add the <code>javascript_pack_tag</code> to load your application.</p>
<p>&lt;%= javascript_pack_tag &apos;signup&apos; %&gt;</p>
<p><code>javascript_pack_tag</code> will reference your pack and in production mode it will insert the digested file.</p>
<p>If you need to reference Sprockets files in your Javascript packs, just add the <code>.erb</code> extension to your file, include the helpers and use them.</p>
<pre><code>// app/javascript/signup/form.js.erb

&lt;% helpers = ActionController::Base.helpers %&gt;
var logoPath = &quot;&lt;%= helpers.image_path(&apos;logo.png&apos;) %&gt;&quot;;
</code></pre>
<p><code>rails webpacker:install:react</code> command tells <em>Yarn</em> to setup decencies to use React in your application but you can also pass <code>angular</code> or <code>vue</code> as parameters.</p>
<p>Once you are ready to deploy your application just run the following commands to compile all your assets and Javascripts.</p>
<pre><code>$ rails asset:precompile
$ rails webpacker:compile
</code></pre>
<p>Now is up to you to decide if you just need <em>Yarn</em> or if you want to include <em>Webpack</em> into your development environment. Rails and Asset Pipeline will not get in your way.</p>
<h3 id="keepyoursecretssafe">Keep your secrets safe.</h3>
<p>It is a very common practice to keep your production secrets in environment variables, the ones that later are loaded from <code>secrets.yml</code>when you boot your Rails application. Another approach is to set your private keys in your <code>secrets.yml</code> and exclude it from your source control while keeping a separate file for production. Either way has its pros and cons.</p>
<p>Rails now include a way to encrypt your secrets file. To use encrypted secrets you need to setup your project first by running:</p>
<pre><code>$ bin/rails secrets:setup
</code></pre>
<p>This will generate a <code>config/secrets.yml.key</code> which will have the encryption key, you need to secure this file and don&#x2019;t add it to your source control system. A new file <code>config/secrets.yml.enc</code> will be added, this is the encrypted file that will keep your secrets safe.</p>
<p>If you need to change a value, you will need to run the command:</p>
<pre><code>$ bin/rails secrets:edit
</code></pre>
<p>This will open your default editor and will allow you to make changes to your encrypted file. The structure of this file is the same as <code>config/secrets.yml</code>, once you make your changes and save the file, everything will be encrypted again.</p>
<p>To tell Rails to use this encrypted file instead the regular <code>config/secrets.yml</code> you will need to modify your <code>config/production.rb</code> file to include the line <code>config.read_encrypted_secrets = true</code>.</p>
<p>From now on, when you deploy your application to a production environment and given that <code>config/secrets.yml.enc</code> is checked in your source control, just set the environment variable <code>RAILS_MASTER_KEY</code> with the encryption key.</p>
<p>The cryptography method used by Rails was reported to be <a href="https://github.com/rails/rails/issues/28135">weak</a>, but it was quickly updated to use a <a href="https://github.com/rails/rails/pull/28139">stronger</a> method.</p>
<h3 id="directandresolveroutes">Direct and resolve routes</h3>
<p>Rails now allow you to define custom URLs that override or replace default behavior.</p>
<p>The first example of this is <code>direct</code>, which allows us to define custom URLs like</p>
<pre><code>direct(:dev_shop) { &quot;https://michelada.io&quot; }
</code></pre>
<p>Which we can use in our code like:</p>
<pre><code>&lt;%= link_to &quot;michelada.io&quot;, dev_shop_url %&gt; #=&gt; &lt;a href=&quot;https://michelada.io&quot; /&gt;
</code></pre>
<p>You can also define routes to polymorphic models using an array definition like:</p>
<pre><code>direct :model_section do |model|
  [model, anchor: &quot;#{model.model_name.singular}_#{model.id}&quot;]
end
</code></pre>
<p>And then use the helper as follow:</p>
<pre><code>&lt;%= link_to &quot;User section&quot;, user_section_path(@user) %&gt; #=&gt; &lt;a href=&quot;/users/1#user_1&quot;&gt;User section&lt;/a&gt;
</code></pre>
<p>Also, you can pass a hash with controller and action as <code>direct</code>&#x2019;s block.</p>
<pre><code>direct :current_users do
  { action: &quot;index&quot;, controller: &quot;users&quot;, active: true }
end

&lt;%= link_to &quot;Current users&quot;, current_users_path %&gt; #=&gt; &lt;a href=&quot;/users?active=true&quot;&gt;Current users&lt;/a&gt;
</code></pre>
<p><code>direct</code> can also have default parameters like:</p>
<pre><code>direct :browse, page: 1, page_size: 10 do |klass, options|
 [ klass, options ]
end

&lt;%= link_to &quot;Browse users&quot;, browse_path(:users) %&gt; #=&gt; &lt;a href=&quot;/users?page=1&amp;amp;page_size=10&quot;&gt;Browse users&lt;/a&gt;
&lt;%= link_to &quot;Browse users&quot;, browse_path(:users, page: 2) %&gt; #=&gt; &lt;a href=&quot;/users?page=2&amp;amp;page_size=10&quot;&gt;Browse users&lt;/a&gt;
</code></pre>
<p><code>resolve</code> helps us map a model to a resource. Here is an example for the <code>User</code> model being mapped to the<code>profile</code> resource.</p>
<pre><code>resource :profile
resolve(&quot;User&quot;) { [:profile] }
</code></pre>
<p>By doing this mapping, we are telling to the router to not use paths based on the model name, but resolve it to <code>profile</code>. Doing this when you write the following code will generate the correct resource paths.</p>
<pre><code>&lt;%= link_to @user.name, @user %&gt; #=&gt; &lt;a href=&quot;/profile&quot;&gt;Sample user&lt;/a&gt;

&lt;%= form_with model: User.new do |f| %&gt;
  &lt;%= f.text_field :name %&gt;
&lt;% end %&gt;
#=&gt;
&lt;form action=&quot;/profile&quot; accept-charset=&quot;UTF-8&quot; data-remote=&quot;true&quot; method=&quot;post&quot;&gt;&lt;input name=&quot;utf8&quot; type=&quot;hidden&quot; value=&quot;&#x2713;&quot;&gt;
  &lt;input type=&quot;text&quot; name=&quot;user[name]&quot;&gt;
&lt;/form&gt;
</code></pre>
<p>Both <code>direct</code> and <code>resolve</code> work on the global scope of the routes, they can&#x2019;t be used inside a <code>scope</code> or <code>namespace</code>.</p>
<h3 id="form_forandform_tagunifiedintoform_with"><code>form_for</code> and <code>form_tag</code> unified into <code>form_with</code></h3>
<p><code>form_for</code> and <code>form_tag</code> in Rails were very similar, both allowed you to create a form tag but the first one uses model&#x2019;s attributes to build create or update form, while the second one simply create an HTML form tag with the passed URL as action.</p>
<p>Given their similarities, with Rails 5.1 both were unified into <code>form_with</code>. If we want to create a form based on model attributes you just need to pass the <code>model:</code> param.</p>
<pre><code>&lt;%= form_with model: User.new do |user| %&gt;
  &lt;%= user.text_field :name %&gt;
&lt;% end %&gt;
#=&gt;
&lt;form action=&quot;/profile&quot; accept-charset=&quot;UTF-8&quot; data-remote=&quot;true&quot; method=&quot;post&quot;&gt;&lt;input name=&quot;utf8&quot; type=&quot;hidden&quot; value=&quot;&amp;#x2713;&quot;/&gt;
  &lt;input type=&quot;text&quot; name=&quot;user[name]&quot; /&gt;
&lt;/form&gt;
</code></pre>
<p>If you just want a form without the model&#x2019;s attribute, just pass the <code>url:</code> param.</p>
<pre><code>&lt;%= form_with url: &quot;/users&quot; do %&gt;
  &lt;%= text_field_tag :name %&gt;
&lt;% end %&gt;
#=&gt;
&lt;form action=&quot;/user&quot; accept-charset=&quot;UTF-8&quot; data-remote=&quot;true&quot; method=&quot;post&quot;&gt;&lt;input name=&quot;utf8&quot; type=&quot;hidden&quot;value=&quot;&amp;#x2713;&quot; /&gt;
  &lt;input type=&quot;text&quot; name=&quot;name&quot; id=&quot;name&quot; /&gt;
&lt;/form&gt;
</code></pre>
<p><code>form_with</code> accepts the same parameters as <code>form_for</code> and <code>form_tag</code> for scopes, data attributes, HTML attributes, method, etc.</p>
<p>With <code>form_with</code> be aware that the <code>data-remote</code> attribute is set to <code>true</code> by default. The syntax for nested models was also changed. Instead of using <code>fields_for</code> you must use now the <code>fields</code> method and set <code>model:</code> param with the nested model instance.</p>
<pre><code>&lt;%= form_with model: User.new do |user| %&gt;
  &lt;%= user.text_field :name %&gt;
  &lt;%= user.fields model: Profile.new do |profile| %&gt;
    &lt;%= profile.text_field :age %&gt;
  &lt;% end %&gt;
&lt;% end %&gt;
#=&gt;
&lt;form action=&quot;/profile&quot; accept-charset=&quot;UTF-8&quot; data-remote=&quot;true&quot; method=&quot;post&quot;&gt;&lt;input name=&quot;utf8&quot; type=&quot;hidden&quot; value=&quot;&#x2713;&quot;&gt;
  &lt;input type=&quot;text&quot; name=&quot;user[name]&quot;&gt;

    &lt;input type=&quot;text&quot; name=&quot;user[profile][age]&quot;&gt;
&lt;/form&gt;
</code></pre>
<h3 id="systemtests">System tests</h3>
<p>There is a good chance that you are currently using <a href="https://github.com/teamcapybara/capybara">Capybara</a> for your features or acceptance testing in your Rails applications. Using it currently involves setting up Capybara in your project, along with a strategy for cleaning your database with tools like <a href="https://github.com/DatabaseCleaner/database_cleaner">database_cleaner</a>, and <a href="https://github.com/copiousfreetime/launchy">launchy</a> gem to help you to debug when an error happens.</p>
<p>With Rails embracing Javascript the need to support full testing, including the javascript part, sparked what is called System Tests with Rails 5.1. Now Capybara is setup by default and a change in the framework is included to deal with <a href="https://github.com/rails/rails/pull/28083">transactional fixtures</a> without the need to have something like <a href="https://github.com/DatabaseCleaner/database_cleaner">database_cleaner</a>.</p>
<p>A new file is included, it is the base for systems tests <code>test/application_system_test_case.rb</code> , this file setups by default use of selenium and chrome driver to run your test.</p>
<pre><code>require &quot;test_helper&quot;

class ApplicationSystemTestCase &lt; ActionDispatch::SystemTestCase
  driven_by :selenium, using: :chrome, screen_size: [1400, 1400]
end
</code></pre>
<p>You can change the parameters passed to <code>driven_by</code> to use firefox or to use a headless server like poltergeist. Capybara DSL and assertions are available in your system tests. You can create these tests files by hand our use rails&#x2019; generator <code>rails g test_unit:system</code></p>
<pre><code>require &quot;application_system_test_case&quot;

class UsersTest &lt; ApplicationSystemTestCase
  test &quot;visiting the index&quot; do
    visit root_url

    assert_selector &quot;h1&quot;, text: &quot;Hello Rails&quot;
  end
end
</code></pre>
<p>When a system test fails, a screenshot is taken and saved into <code>tmp</code> directory, minitest will report the file that contains the screenshot for you to review.</p>
<pre><code>[Screenshot]: tmp/screenshots/failures_test_visiting_the_index.png
</code></pre>
<h2 id="conclusions">Conclusions</h2>
<p>Probably the feature that stands out in this new version, is the change on how Rails deals with Javascript and npm. Like I mentioned earlier, this acknowledges how web development has changed over time, but also states that using Rails to build web applications is still an option, no matter if your application is HTML, an API or a Javascript single page application.</p>
<p>Rails is removing all the friction and helping you to design and build the kind of application that makes sense for your immediate needs.</p>
<p>This new version might be released this same year, probably around the <a href="http://railsconf.com">Railsconf</a>, which is relevant not only because you want to use the new features, but because version 4.2.x might become unsupported. This might be a good time to start planning the upgrade in your applications.</p>
<p>If you need help on how to upgrade older versions of Rails, please refer to our previous blog post &quot;<a href="http://blog.michelada.io/upgrading-a-ruby-on-rails-application">Upgrading a Ruby on Rails application</a>&quot;.</p>
<blockquote>
<p>Thanks to David Padilla and Gil Villa for helping to review this post content.</p>
</blockquote>
<!--kg-card-end: markdown-->]]></content:encoded></item><item><title><![CDATA[Upgrading a Ruby on Rails application]]></title><description><![CDATA[Reasons for why you might want to upgrade your application may vary case by case. It might not be driven because of business needs but primarily due to technical needs or concerns.
]]></description><link>https://sipsandbits.com/2017/02/14/upgrading-a-ruby-on-rails-application/</link><guid isPermaLink="false">5adf56aa0062200022e0fbe4</guid><category><![CDATA[web]]></category><category><![CDATA[development]]></category><category><![CDATA[rails]]></category><category><![CDATA[upgrade]]></category><dc:creator><![CDATA[Mario Alberto Chávez Cárdenas]]></dc:creator><pubDate>Tue, 14 Feb 2017 16:10:00 GMT</pubDate><media:content url="https://sipsandbits.com/content/images/2018/04/upgrade-icon.jpg" medium="image"/><content:encoded><![CDATA[<!--kg-card-begin: markdown--><img src="https://sipsandbits.com/content/images/2018/04/upgrade-icon.jpg" alt="Upgrading a Ruby on Rails application"><p>Not every Ruby on Rails application that we work on at <a href="https://michelada.io">michelada.io</a> is a Rails application running in the latest version, I&#x2019;ll say that probably 70% are still running on Ruby on Rails 4.2, 25% are running on Rails 5 and the rest on Rails 3.2.</p>
<p>Rails 5 numbers are for applications that we have started for our clients since the Rails team released the first beta of version 5 in 2015.</p>
<p>For Ruby 4.2 applications, are applications that we started for our clients before Rails 5 beta or applications that our clients started on their own and we have taken ownership or we are collaborating with its engineering team to support and adding new features.</p>
<blockquote>
<p>Both versions as today are still being supported by the Rails team with security patches and bug fixes. Pretty much the same apply with most of the gems that we use in those projects.</p>
</blockquote>
<p>Rails 3.2 applications that some our clients still keep around are applications in maintenance mode, means no new big features are added but small tweaks might get into their codebase time to time.</p>
<p>Applications running in this version are subject to be rewritten from scratch with a newer version of Rails. From our experience with our clients, this happens when the core logic of the application is what the client wants but everything else is not that important, like converting the application to be an API only with the base logic.</p>
<p>The other case is when a client asks to perform an upgrade from 3.2 to 5. This just happened in my last/current project and I want to talk in this post.</p>
<h2 id="whyupgradeyourrailsapplication">Why upgrade your Rails application?</h2>
<p>Reasons on why you might want to upgrade your application may vary case by case. It might not be driven because of business needs but primary due to technical needs or concerns.</p>
<h3 id="securityandbugfixes">Security and bug fixes</h3>
<p>Security is a critical reason to decide to perform an upgrade, this is not only a technical issue but business also; no one wants to deal with a problem where your user&apos;s information might be compromised.</p>
<p>Rails and Ruby have a very similar maintenance policy where only the latest release of a series will be maintained.</p>
<p><a href="http://guides.rubyonrails.org/maintenance_policy.html">For Rails</a>, currently, this means 4.2 and 5.0. Version 4.1 was maintained by a special effort of <a href="https://twitter.com/rafaelfranca">Rafael Fran&#xE7;a</a> but once that Rails 5.1 is released - possible this 2017 - there is no word if 4.2 will be maintained in the same way that 4.1 was.</p>
<p>Ruby 2.4 was released last December and along with Ruby 2.3 are still under <a href="https://bugs.ruby-lang.org/projects/ruby/wiki/GeneralMaintenancePolicy">maintenance policy</a>, as today there is no word on End of Life of Ruby 2.2, on Ruby&#x2019;s repository looks like bug fixes are still being backported to this version.</p>
<p>Even if you are at the latest version of your stack, you still need to ensure that your infrastructure and your code are secure. There are mailing lists for <a href="https://groups.google.com/forum/#!forum/ruby-security-ann">Ruby</a> and <a href="https://groups.google.com/forum/?fromgroups#!forum/rubyonrails-security">Ruby on Rails</a> where you can find out and follow Common Vulnerabilities and Exposures or CVE.</p>
<p>In your project you must have a policy on how often update versions of your dependency Gems, vulnerabilities exposures are also discovered on them. You can check every gem manually but if you want an automated solution to help you, use <a href="https://github.com/rubysec/bundler-audit">bundler-audit</a>, it will work with your <code>Gemfile</code> to report any CVE in your dependencies.</p>
<p>Your own code might be also subject to vulnerabilities, <a href="http://brakemanscanner.org">Brakeman</a>, which is a  security scanner, might help you to discover insecure patterns in your code, also <a href="http://gavinmiller.io">Gavin Miller&#x2019;s blog</a> is a great resource to learn how to write more secure code.</p>
<p>Being in the latest version in your stack will also help your team to avoid to have <em>workaround</em> code fix a bug, maybe, already fixed in latest versions. Doing workarounds makes harder to understand why that code exists, it might also introduce new bugs.</p>
<h3 id="performance">Performance</h3>
<p>While always is nice to have our applications running as fast as possible, maybe not receiving this kind of updates will not degrade your performance but you will be missing the opportunity of a faster application without a change in your code, just by being the latest version of your stack.</p>
<p>Many improvements have been introduced to Rails and Ruby in their latest versions to reduce object allocations, code optimization and in general to have Ruby applications to perform better.</p>
<h2 id="okyousaidthatthispostwasabouthowtoupgradearails32applicationtorails50">Ok, you said that this post was about how to upgrade a rails 3.2 application to Rails 5.0</h2>
<p>Now going back to the main subject of this post a client handed me a Rails 3.2 project, they wanted to add new functionality, convert the application to be an API only and upgrade it to the latest version possible.</p>
<p>I will not go into a step by step migration process because it might be different for each project but here is a list of things that you need to watch out to have a successful migration.</p>
<h3 id="testsuite">Test suite</h3>
<p>When you are new to a Rails application codebase, the first place to check is always project&#x2019;s automated tests. In the case of this application, it had RSpec 2.x specs but 50% of the specs were failing, not a good start point.</p>
<p>Given that required new functionality was a priority I decided to go ahead and implement it, the only thing that I did before startiing the process, was to upgrade RSpec from version 2.x to version 3.x. Now besides failing specs, I had a bunch of warnings because of the <em>should</em> syntax of RSpec 2.x.</p>
<p>I implemented the new functionality while adding new specs and fixing the ones failing that were related to what I was working on, at the same time I was updating RSpec syntax.</p>
<p>Also, project specs were using <a href="https://github.com/notahat/machinist">machinist</a> as test data factory. Machinist is no longer maintained and the data model wasn&#x2019;t really complicated, so I move the project to use <a href="http://guides.rubyonrails.org/testing.html#the-low-down-on-fixtures">Rails Fixtures</a>.</p>
<p>After new functionality was in place, my next step was to fix remaining failing specs while moving them away from <em>machinist</em> and updating RSpec syntax, also, I converted controller specs to be integration specs.</p>
<p>Few days laters our test suite was green, and I was ready to start with Rails migration.</p>
<p>Talking with a co-worker about RSpec syntax migration he told me about <a href="https://github.com/yujinakayama/transpec">transpec</a> which is a gem to help to automate syntax migration, my work here was already done, so I don&#x2019;t have the chance to try it out.</p>
<h3 id="railsmigration">Rails migration</h3>
<p>With a green test suite, I was ready to start Rails migration. Just for the sake of the test suite, I relaxed versions in <em>Gemfile</em> for all gems and the run a <code>bundle update</code>, next I ran the test suite and it was still green.</p>
<p>The first step was to modify the <em>Gemfile</em> to add Ruby version, in my case, it was 2.3.1, and also to change Rails version to be 5.0.1. Additionally I changed <code>sass-rails</code> version to be <code>~&gt; 5.0 </code>, <code>coffee-rails</code> to <code>~&gt; 4.1</code> and <code>uglifier</code> to <code>&gt;= 1.3.0</code>, also I added <code>puma</code> as dependency. At this point, conversion to be an API only is not done, that is why these gems are still a dependency.</p>
<p>Then I ran <em>bundle update</em> and it finished without an issue. This might be different depending on the gems that your projects rely on. If specified gem is not compatible with Rails 5 <em>bundler</em> might fails. Probably if I had keep <em>machinist</em> gem this one might cause <em>bundler</em> to fail.</p>
<p>Configuration settings are something that changes all the time between different versions of Rails. To upgrade configuration settings you need to run <code>rake app:update</code>, this will create new files like <code>cable.yml</code> but also it will try to replace existing files like <code>application.rb</code>, <code>environment.rb</code>, <code>production.rb</code> and so on, but before overwriting the files it will ask you what do you want to do.</p>
<p>You can skip the file, overwrite it, overwrite all, see a diff or about the operation. On all files I displayed the diff to see changes on file, then I proceed to overwrite the file, open it with an editor and put back what I got from the diff that I wanted to keep like <code>config.autoload_paths += %W(#{config.root}/lib)</code> in <code>application.rb</code>. There were files like <code>boot.rb</code> or <code>en.yml</code> that I just replaced because there was nothing to keep there but also there were files like <code>routes.rb</code> that I skipped from being overwritten.</p>
<p>After this process was done, I tried to load Rails console, and it loaded with success, but we were not ready to launch the server yet. I ran the test suite and  pretty much all specs failed also I did receive many warnings.</p>
<p>So far all failures and warnings are related to changes in the API between Rails 3.2 and Rails 5. So let&apos;s see what needs to be updated.</p>
<p>Our <code>routes.rb</code> file have many routes defined with <code>match</code> but no <code>via</code> parameter was specified, so here we have 2 options: add <code>via</code> parameter or convert <code>match</code> route to a http method, like:</p>
<pre><code>match &#x201C;/share/:id&#x201D; =&gt; &#x201C;shares#create&#x201D;
# become:
match &#x201C;/share/:id&#x201D; =&gt; &#x201C;shares#create&#x201D;, via: [:post]
# or
post &#x201C;/share/:id&#x201D; =&gt; &#x201C;shares#create&#x201D;
</code></pre>
<p>Another required change is the use of <a href="https://github.com/rails/strong_parameters">strong parameters</a> instead of the old and insecure <code>attr_accessible</code> method. Both methods work, mainly with controllers, to define what attributes in a model are subject to mass assignment.</p>
<p>For example, you can have a model <code>Customer</code> and you want to update its <code>:name</code> and <code>:address</code> from a web form, the way this worked before <em>strong parameters</em> was:</p>
<pre><code>class Customer &lt; ActiveRecord::Base
  attr_accessible :name, :address
end

class CustomersController &lt; ApplicationController
...
  def update
    @customer = Customer.find(params[:id]
    if @customer.update_attributes(params[:customer])
      return redirect_to customers_path
    end
   end
 ...
 end
</code></pre>
<p><code>attr_accesible</code> is not available anymore starting Rails 4.0 because it did prove to be an insecure way to protect your model&apos;s data. The code presented before needs to be updated to:</p>
<pre><code>class Customer &lt; ActiveRecord::Base
end

class CustomersController &lt; ApplicationController
...
  def update
    @customer = Customer.find(params[:id]
    if @customer.update_attributes(edit_params)
      return redirect_to customers_path
    end
  end
...
  private

  def edit_params
    require(:customer).permit(:name, :address)
  end 
end
</code></pre>
<p>This change needs to be done in all your models and controllers that create or update new records using Rails models.</p>
<p><em>ActiveRecord</em> query API also changed and finders functionality was removed. The following queries are example of what was removed from Rails 5:</p>
<pre><code>Customer.find(:all, conditions: { active: true }, limit: 10)
Customer.find_by_name(&quot;Customer 1&quot;)
Customer.find_last_by_active(false)
Customer.find_or_initialize_by_name(&quot;Customer 2&quot;)
</code></pre>
<p>Old hash syntax and dynamic finders need to be updated to use <code>where</code> clause.</p>
<pre><code>Customer.where(active: true).limit(10)
Customer.where(name: &quot;Customer 1&quot;)
Customer.where(active: false).last
Customer.find_or_initialize_by(name: &quot;Customer 2&quot;)
</code></pre>
<p>For more details on the changes to the <em>ActiveRecord</em> query API look at <a href="https://github.com/rails/activerecord-deprecated_finders">deprecated finders</a>.</p>
<p>After all these changes in the source code the test suite as green again, but still I got a lot of warnings but Rails was complaining because of 2 situations.</p>
<p>The use of <code>before_filter</code> and <code>skip_before_filter</code> in Rails controllers is deprecated and those methods will be removed in the future. Both were replaced by <code>before_action</code> and <code>skip_before_action</code>.</p>
<p>I did mention before when I was getting the Rails 3.2 ready to be migrated, I moved controllers specs to become integration specs. Within those specs, the controller logic is executed when a call like this happens:</p>
<pre><code>post &quot;/share/1&quot;, nil, { &quot;X-Extra-Header&quot; =&gt; &quot;123&quot; }
</code></pre>
<p>The first parameter is the Rails path to hit, next request parameters and finally a hash of headers to send. This API was updated to use <em>keyword arguments</em>, it means that instead of passing parameters by position, now we need to name parameters as follow:</p>
<pre><code>post &quot;/share/1&quot;, headers: { &quot;X-Extra-Header&quot; =&gt; &quot;123&quot; }
</code></pre>
<p>Given that we are not sending parameters it gets omitted in our call, but if you need to pass parameters to your call just call it with:</p>
<pre><code>post &quot;/share/1&quot;, headers: { &quot;X-Extra-Header&quot; =&gt; &quot;123&quot; }, params: { resource_id: 2 }
</code></pre>
<p>After these changes, my test suite was green and have no more warnings.</p>
<p>The application was deployed to an staging environment to Heroku for additional testing but it was failing when calling very specific end points. The error was something like <code>NameError: uninitialized constant XXX</code> where <code>XXX</code> was the name of the constant.</p>
<p>It turns out that the class file was present in Rails <em>lib</em> directory and it was loaded correctly in development and test environments thanks to the setting <code>config.autoload_paths += %W(#{config.root}/lib)</code> in our <code>application.rb</code> file, but it was not working in production.</p>
<p>Because <a href="https://github.com/rails/rails/commit/a71350cae0082193ad8c66d65ab62e8bb0b7853b">autoloading is disabled in production</a> with Rails 5, using <code>autoload_paths</code> will not load needed classes from specified paths. The solution to this, is to ask Rails to eager load classes, this can be done by replacing <code>config.autoload_paths += %W(#{config.root}/lib)</code> with <code>config.eager_load_paths += %W(#{config.root}/lib)</code>.</p>
<p>After this final change, the migration was complete.</p>
<h3 id="additionalbonusreplacerspecwithminitest">Additional bonus, replace RSpec with Minitest</h3>
<p>Migration of the Rails project happened very smoothly, having the test suite covering important areas of the application helped a lot.</p>
<p>After finishing the upgrade and given that I&#x2019;m a Minitest fan, I wanted to find out how much effort required to migrate from RSpec to Minitest. It was very simple to migrate, I was able to automate something between 90% and 95% the migration of tests and only a few of them required to review the test and manually migrate it.</p>
<p>First I renamed the <em>spec</em> directory to <em>test</em>, next in <code>Gemfile</code> I removed RSpec dependencies and added <code>minitest-rails</code>. After running <code>bundle update</code> I ran <code>rails g minitest:install</code> to generate a <code>test_helper.rb</code> file.</p>
<p>I copied from <code>spec_helper.rb</code> file what did make sense to have in the new <code>test_helper.rb</code>, this will depend on your project.</p>
<p>Next, I used command <code>rename</code> to rename all files from <code>*_spec.rb</code> to <code>*_test.rb</code>. <code>rename</code> can be installed in MacOS using <em>Homebrew</em>.</p>
<pre><code>find . -name &apos;*_spec.rb&apos; -exec rename &apos;s|_spec|_test|&apos; {} \;
</code></pre>
<p>Now with the following commands, I automated most of the syntax changes between RSpec and Minitest.</p>
<pre><code>find . -name &apos;*_test.rb&apos; -exec sed -ie &apos;s/spec_helper/test_helper/g&apos; {} \;
find . -name &apos;*_test.rb&apos; -exec sed -ie &apos;s/context/describe/g&apos; {} \;
find . -name &apos;*_test.rb&apos; -exec sed -ie &apos;s/stub(/stubs(/g&apos; {} \;
find . -name &apos;*_test.rb&apos; -exec sed -ie &apos;s/double/stub/g&apos; {} \;
find . -name &apos;*_test.rb&apos; -exec sed -ie &apos;s/should_receive/expects/g&apos; {} \;
find . -name &apos;*_test.rb&apos; -exec sed -ie &apos;s/and_return/returns/g&apos; {} \;
find . -name &apos;*_test.rb&apos; -exec sed -ie &apos;s/expect(//g&apos; {} \;
find . -name &apos;*_test.rb&apos; -exec sed -ie &apos;s/).to be ==/.must_equal/g&apos; {} \;
find . -name &apos;*_test.rb&apos; -exec sed -ie &apos;s/).to eq/.must_equal/g&apos; {} \;
find . -name &apos;*_test.rb&apos; -exec sed -ie &apos;s/).to be_empty/.must_be_empty/g&apos; {} \;
find . -name &apos;*_test.rb&apos; -exec sed -ie &apos;s/).to_not be_empty/.wont_be_empty/g&apos; {} \;
find . -name &apos;*_test.rb&apos; -exec sed -ie &apos;s/).to be_kind_of/.must_be_kind_of/g&apos; {} \;
find . -name &apos;*_test.rb&apos; -exec sed -ie &#x2019;s/(response).to have_http_status/.must_respond_with/g&#x2019; {} \;
find . -name &apos;*_test.rb&apos; -exec sed -ie &apos;s/).to redirect_to/.must_redirect_to/g&apos; {} \;
find . -name &apos;*_test.rb&apos; -exec sed -ie &apos;s/RSpec.//g&apos; {} \;
find . -name &apos;*_test.rb&apos; -exec sed -ie &apos;s/).to match/.must_match/g&apos; {} \;
</code></pre>
<p>After this was done, it was a matter of running the test suite and fix any failing test. All failures were related to changes in syntax and as I said before it was a very small number of tests, most of them just passed without a problem.</p>
<p>The only gotcha is that integration tests in Minitest with the spec syntax need to be named in a way that it ends with <em>Integration Test</em>, like <em>Share a resource Integration Test</em>.</p>
<p>This post was my initial reference for this migration <a href="http://theartandscienceofruby.com/2015/09/11/switching-from-rspec-to-minitest/">Switching from RSpec to Minitest</a>.</p>
<h2 id="conclusions">Conclusions</h2>
<p>Migration of this project for our client wasn&#x2019;t so bad, it took me about a week to complete it. The application wasn&#x2019;t too big and I just did the minimal changes to make it work in Rails 5. It still has a lot of room for cleaning and refactoring but for now, our client is satisfied to be running with the latest stack of Ruby and Rails.</p>
<p>If your team is looking for help to migrate a Rails application from any older version to a newer one, please contact us at <a href="mailto://info@michelada.io">info@michelada.io</a> we will be more than happy to help, no matter if is a small or a big project.</p>
<!--kg-card-end: markdown-->]]></content:encoded></item><item><title><![CDATA[What's new in Rails 5?]]></title><description><![CDATA[Rails 5 is a new major version of Ruby On Rails, this implicates that the Rails API and requirements can change to deprecate, add new, and/or improve existing APIs, but also to take advantage of important changes in the Ruby language as well.]]></description><link>https://sipsandbits.com/2015/09/21/whats-new-in-rails-5/</link><guid isPermaLink="false">5adf552d0062200022e0fbd6</guid><category><![CDATA[rails]]></category><category><![CDATA[rails5]]></category><category><![CDATA[ruby]]></category><dc:creator><![CDATA[Mario Alberto Chávez Cárdenas]]></dc:creator><pubDate>Mon, 21 Sep 2015 16:04:00 GMT</pubDate><content:encoded><![CDATA[<!--kg-card-begin: markdown--><p>Rails 5 was announced on RailsConf  past April. <a href="https://twitter.com/dhh">David Heinemeier Hansson</a> highlighted a few of the features that we can expect with the new release of Ruby on Rails.</p>
<p>He also talked about his vision on how building monolithic Ruby on Rails application is not that bad. You can agree or disagree with David&#x2019;s opinions, but the truth is that modern Web Applications are more than just HTML and CSS and this is clear in the Ruby on Rails world, proof of this is the inclusion of Rails API and <code>ActionCable</code>.</p>
<p>The web has changed and, with it, Ruby on Rails also needs to change. So let us take a quick look at what is changing for the new version, Rails 5.</p>
<h2 id="supportforruby222ornewer">Support for Ruby 2.2.2 or newer</h2>
<p>Rails 5 is a new major version of Ruby On Rails, this implicates that the Rails API and requirements can change to deprecate, add new, and/or improve existing APIs, but also to take advantage of important changes in the Ruby language as well.</p>
<p>The later is the most important reason on why Rails 5 will <a href="https://github.com/rails/rails/pull/19753">only work</a> with Ruby 2.2.2 or better.</p>
<p>In Ruby On Rails applications, we usually pass <code>symbols</code> all over the place, doing this open the possibility of <a href="http://brakemanscanner.org/docs/warning_types/denial_of_service/">DOS attacks</a> when our memory is consumed by <code>symbols</code> that never get garbage collected.</p>
<p>Ruby 2.2.0 introduced <a href="https://www.ruby-lang.org/en/news/2014/12/25/ruby-2-2-0-released/">changes</a> in its garbage collector to be able to collect <code>symbols</code>.</p>
<p>Another reason for Rails 5 to support Ruby 2.2.2 is to take advantage of new <a href="http://www.atdot.net/~ko1/activities/2014_rubyconf_pub.pdf">Incremental GC</a> which will help to reduce memory consumption by our Rails applications.</p>
<p>Rails 5 also started to <em>leak</em> Ruby 2.0 syntax into its source. <a href="https://github.com/rails/rails/pull/18872">Keyword</a> <a href="https://github.com/rails/rails/pull/18323">Arguments</a> and <a href="https://github.com/rails/rails/pull/19752">Module#prepend</a> are examples of the adoption of newer Ruby.</p>
<h2 id="apideprecationandcleanup">API Deprecation and Cleanup</h2>
<p>Going through Rails <a href="https://github.com/rails/rails/commits/master">commits </a>, we will find changes related to removing code that was marked as <code>deprecated</code> in previous versions of Rails.</p>
<p>Notable removed APIs are:</p>
<h3 id="actionmailer">ActionMailer</h3>
<ul>
<li><code>#deliver</code> and <code>#deliver!</code> methods have been removed</li>
<li><code>*_path</code> helper in email views</li>
</ul>
<h3 id="activerecord">ActiveRecord</h3>
<ul>
<li>Support for <code>protected_attributes</code> gem</li>
<li>Support for <code>activerecord-deprecated_finders</code> gem</li>
</ul>
<h3 id="actionpackassertions">ActionPack assertions</h3>
<ul>
<li><code>assert_template</code> and <code>assigns()</code> assertions are deprecated and moved into its own gem <a href="https://rubygems.org/gems/rails-controller-testing">rails-controller-testing</a>.</li>
</ul>
<p>Clean up in Rails 5 also includes dead code and unnecessary tests. Also, <code>mocha</code> is being removed from Rails tests in favor of plain <code>Minitest</code> stubbing.</p>
<h2 id="performanceimprovements">Performance improvements</h2>
<p>With Ruby 2.2.2, Rails 5 should get an improvement in performance, less memory usage, and less time spent in GC. This alone should help alone to bring this performance boost, but it&apos;s not the only reason on why Rails 5 should perform better.</p>
<p>Seems that core team is determined to have a better/faster framework. Reducing object allocations, freezing immutable strings (BTW there is a discussion about having <a href="https://bugs.ruby-lang.org/issues/11473">immutable strings</a> by default in Ruby 3), removing unnecessary dependencies, and optimizing common operations have all helped to make Rails 5 faster.</p>
<p>The following are examples of commits focused on performance, it is worth to check them out, study, and understand the changes that have helped to reduce object allocations or code optimization because some of the lessons that can be learned in those commits can be applied to our own apps.</p>
<ul>
<li><a href="https://github.com/rails/rails/pull/21057">Beyond Ludicrous Speed</a></li>
<li><a href="https://github.com/rails/rails/pull/18643">Speed up ActionController::Renderer <code>normalize_keys</code> by ~28%</a></li>
<li><a href="https://github.com/rails/rails/pull/21411">10X speed improvements for AS::Dependencies.loadable_constants_for_path</a></li>
<li><a href="https://github.com/rails/rails/pull/21155">Speed up code and avoid unnecessary MatchData objects</a></li>
<li><a href="https://github.com/rails/rails/pull/20946">Freeze string literals when not mutated.</a></li>
</ul>
<h2 id="sowhatisnewinrails5">So, what is new in Rails 5?</h2>
<p>So far we have seen how Rails 5 will be faster with the introduced changes but we haven&#x2019;t seen (yet) what is new in terms of functionality or new API.</p>
<h3 id="ormethodinactiverecordrelation">#or method in ActiveRecord::Relation</h3>
<p>Finally <code>ActiveRecord::Relation</code> is getting <code>#or</code> method, this will allow us to write queries with <code>ActiveRecord</code> <code>DSL</code> as follows:</p>
<pre><code class="language-ruby">Book.where(&apos;status = 1&apos;).or(Book.where(&apos;status = 3&apos;))
\# =&gt; SELECT * FROM books WHERE (status = 1) OR (status = 3)
</code></pre>
<p><code>#or</code> method accepts a second relation as a parameter that is combined with an <code>or</code>. <code>#or</code> can also accept a relation in a form of model scope.</p>
<pre><code class="language-ruby">class Book &lt; ActiveRecord::Base
  scope :new_coming, -&gt; { where(status: 3) }
end

Book.where(&apos;status = 1&apos;).or(Book.new_coming)
\# =&gt; SELECT * FROM books WHERE (status = 1) OR (status = 3)
</code></pre>
<h3 id="belongs_toisrequiredbydefault">#belongs_to is required by default</h3>
<p>From now on every Rails application will have a new configuration option <code>config.active_record.belongs_to_required_by_default = true</code>, it will trigger a validation error when trying to save a model where <code>belongs_to</code> associations are not present.</p>
<p><code>config.active_record.belongs_to_required_by_default</code> can be changed to <code>false</code> and with this keep old Rails behavior or we can disable this validation on each <code>belongs_to</code> definition, just passing an additional option <code>optional: true</code> as follows:</p>
<pre><code class="language-ruby">class Book &lt; ActiveRecord::Base
   belongs_to :author, optional: true
end
</code></pre>
<h3 id="activerecordsattributeapi">ActiveRecord&#x2019;s attribute API</h3>
<p>This <a href="http://edgeapi.rubyonrails.org/classes/ActiveRecord/Attributes/ClassMethods.html">new API</a> adds functionality on top of <code>ActiveRecord</code> models, it made possible to override an attribute type to be a different type.</p>
<p>Consider the case where we have a field in the database defined as <code>decimal</code> but in our app we only care for the <code>integer</code> part of the number. We can in our app just ignore the decimal part and format our number everywhere we need to use it to only display the integer part.</p>
<p>With attribute API we can do this in an easy way:</p>
<pre><code class="language-ruby">class Book &lt; ActiveRecord::Base
end

book.quantity # =&gt; 12.0

class Book &lt; ActiveRecord::Base
  attribute :quantity, :integer
end

book.quantity # =&gt; 12
</code></pre>
<p>Here we are overriding the automatically generated attribute from the database schema to be cast in our model as an <code>integer</code> instead the original <code>decimal</code>. For every interaction of our model with the database, the attribute will be treated as a <code>decimal</code> as it should be.</p>
<p>We can even define our own custom types just by creating a class derived from <code>ActiveRecord::Type::Value</code> and <a href="http://edgeapi.rubyonrails.org/classes/ActiveRecord/Type/Value.html">implementing its contract</a> to <code>#cast</code>, <code>#serialize</code>, and <code>#deserialize</code> values.</p>
<p>Custom attributes will honor <code>ActiveModel::Dirty</code> to track changes in our models. Also, these new attributes can be virtual, so there is no need to be backed by a table column.</p>
<h3 id="has_secure_tokenlandedinactiverecord">has_secure_token landed in ActiveRecord</h3>
<p>An <code>ActiveRecord</code> model now can have <a href="https://github.com/rails/rails/pull/18217">token attributes</a> in an easy way. Common scenarios for token attributes are for cases when we need to create an invitation token or a password reset token for example.</p>
<p>Here is an example on how this works:</p>
<pre><code class="language-ruby">class Invite &lt; ActiveRecord::Base
   has_secure_token :invitation_code
end

invite = Invite.new
invite.save
invite.invitation_code # =&gt; 44539a6a59835a4ee9d7b112
invite.regenerate_invitation_code # =&gt; true
</code></pre>
<p><code>SecureRandom</code> is being used to generate a 24-character token.</p>
<p>We can use the model generator to create needed migration for a token attribute, it requires from us to pass attribute type as token.</p>
<pre><code class="language-bash">$ rails g model invite invitation_code:token
</code></pre>
<p>Within the migration, a unique index will be created for our token column.</p>
<p><em>NOTE</em>: Kenn Ejima in the comments, let me know that <code>has_secure_token</code> uses <code>Base58</code> instead <code>hex</code> for token generation, this will work fine with PostgreSQL database, but other databases where collation is set to case insensitive will be in trouble. Please check the <a href="https://github.com/rails/rails/issues/20133">issue in Github</a> where this is being discussed.</p>
<h3 id="mysqlactiverecordadaptergetsjsonsupport">MySQL ActiveRecord adapter gets JSON support</h3>
<p>If you happen to run your Rails application on top of MySQL 5.7.8 then your database have a new native <code>JSON</code> data type.</p>
<p>From Rails 5 you should be able to <a href="https://github.com/rails/rails/pull/21110">use this new data type</a> within your <code>ActiveRecord</code> models.</p>
<h3 id="renderatemplateoutsidecontrollers">Render a template outside controllers</h3>
<p>Rails 5 allows you to render templates or inline code outside controllers. This feature is important and useful for <code>ActiveJob</code> and the new <code>ActionCable</code> (we will discuss this one later).</p>
<p><code>ActionController::Renderer</code> is what makes this happen and it&#x2019;s available in our <code>ApplicationController</code> class.</p>
<p>Let&apos;s dig into few examples on how this works.</p>
<pre><code class="language-ruby"># render inline code
ApplicationController.render inline: &apos;&lt;%= &quot;Hello Rails&quot; %&gt;&apos; # =&gt; &quot;Hello Rails&quot;

# render a template
ApplicationController.render &apos;sample/index&apos; # =&gt; Rendered sample/index.html.erb within layouts/application (0.0ms)

# render an action
SampleController.render :index # =&gt; Rendered sample/index.html.erb within layouts/application (0.0ms)

# render a file
ApplicationController.render file: ::Rails.root.join(&apos;app&apos;, &apos;views&apos;, &apos;sample&apos;, &apos;index.html.erb&apos;) # =&gt;   Rendered sample/index.html.erb within layouts/application (0.8ms)
</code></pre>
<p>This is really nice but what if we need to pass <code>assigns</code> or <code>locals</code> to our template?</p>
<pre><code class="language-rails"># Pass assigns
ApplicationController.render assigns: { rails: &apos;Rails&apos; }, inline: &apos;&lt;%= &quot;Hello #{@rails}&quot; %&gt;&apos; # =&gt; &quot;Hello Rails&quot;

# Pass locals
ApplicationController.render locals: { hello: &apos;Hello&apos; }, assigns: { rails: &apos;Rails&apos; }, inline: &apos;&lt;%= &quot;#{hello} #{@rails}&quot; %&gt;&apos; # =&gt; &quot;Hello Rails&quot;
</code></pre>
<p>Now if we have to use route helper&#x2019;s functions like <code>root_url</code> or any other helper that needs access to the <code>environment</code> we can do it, but what <code>ActionController::Renderer</code> will receive is not a real <code>environment</code>. Take in account that we might use this functionality outside HTTP request.</p>
<pre><code class="language-ruby">ApplicationController.render inline: &apos;&lt;%= root_url %&gt;&apos; # =&gt; &quot;http://example.org/&quot;

# Inspect ActionController::Renderer environment
ApplicationController.renderer.defaults # =&gt; {:http_host=&gt;&quot;example.org&quot;, :https=&gt;false, :method=&gt;&quot;get&quot;, :script_name=&gt;&quot;&quot;, &quot;rack.input&quot;=&gt;&quot;&quot;}

# To modify this environment we have to explicitly create a renderer
renderer = ApplicationController.renderer.new(
    http_host: &apos;michelada.io&apos;
  ) # =&gt; #&lt;#&lt;Class:0x007fdf9985a338&gt;:0x007fdf947981c0 @env={&quot;HTTP_HOST&quot;=&gt;&quot;michelada.io&quot;, &quot;HTTPS&quot;=&gt;&quot;off&quot;, &quot;SCRIPT_NAME&quot;=&gt;&quot;&quot;, &quot;rack.input&quot;=&gt;&quot;&quot;, &quot;REQUEST_METHOD&quot;=&gt;&quot;GET&quot;, &quot;action_dispatch.routes&quot;=&gt;#&lt;ActionDispatch::Routing::RouteSet:0x007fdf93d29450&gt;}&gt;
  
renderer.render inline: &apos;&lt;%= root_url %&gt;&apos; # =&gt; &quot;http://michelada.io/&quot;
</code></pre>
<h3 id="betterminitesttestrunner">Better Minitest test runner</h3>
<p>I have been using <code>Minitest</code> with Rails since <code>test_unit</code> was removed from Rails. I really like the simplicity of <code>Minitest</code> and I never missed anything from <code>RSpec</code>, pretty much <code>Minitest</code> fulfilled all my needs for testing.</p>
<p>The only issue that I had in the past with <code>Minitest</code> in Rails, was that the runner seems so basic. This is not the case anymore, its integration with Rails has been <a href="https://github.com/rails/rails/pull/19571">improved</a>.</p>
<p>Now when you execute <code>bin/rails test -h</code> you get the following help screen with a few nice things:</p>
<ul>
<li>Run tests filtered by a pattern</li>
<li>Execute a single test by specifying file and line number</li>
<li>Execute tests in specific files/directories</li>
</ul>
<pre><code class="language-bash">$ bin/rails test -h
minitest options:
    -h, --help                       Display this help.
    -s, --seed SEED                  Sets random seed. Also via env. Eg: SEED=n rake
    -v, --verbose                    Verbose. Show progress processing files.
    -n, --name PATTERN               Filter run on /regexp/ or string.

Known extensions: pride, rails
    -p, --pride                      Pride. Show your testing pride!

Usage: bin/rails test [options] [files or directories]
You can run a single test by appending a line number to a filename:

    bin/rails test test/models/user_test.rb:27

You can run multiple files and directories at the same time:

    bin/rails test test/controllers test/integration/login_test.rb

Rails options:
    -e, --environment ENV            Run tests in the ENV environment
    -b, --backtrace                  Show the complete backtrace
</code></pre>
<p>Finally, the reporter gives you a command to rerun failed tests</p>
<pre><code class="language-bash">$ bin/rails test
Run options: --seed 41988

# Running:

F

Finished in 0.028552s, 35.0239 runs/s, 35.0239 assertions/s.

  1) Failure:
UserTest#test_the_truth [/Users/marioch/Development/proyectos/edge/cinco/test/models/user_test.rb:5]:
Failed assertion, no message given.

1 runs, 1 assertions, 1 failures, 0 errors, 0 skips

Failed tests:

bin/rails test test/models/user_test.rb:4
</code></pre>
<h3 id="turbolinks3">Turbolinks 3</h3>
<p>Turbolinks has been part of Rails since version 4, probably one of the features that people hate it or love; there is no middle ground here.</p>
<p>With Rails 5 we will be receiving a <a href="https://github.com/rails/turbolinks">new version</a> that, with the help of  HTML5 custom data attributes, we will expect better speed and rendering in our Rails applications.</p>
<p>The most significative change in this new version is the Partial Replacement feature. From the client side, we will be able to tell Turbolinks what content do we need to change/replace and what we don&#x2019;t.</p>
<p>Turbolinks will look for HTML5 custom attributes <code>data-turbolinks-permanent</code> and <code>data-turbolinks-temporary</code> to decide the replacement strategy in our <code>DOM</code>.</p>
<p>To trigger a replacement in the client side we could use <code>Turbolinks.visit</code> or <code>Turbolinks.replace</code> to update our <code>DOM</code>. The difference between <code>visit</code> and <code>replace</code> is that the first one will issue a <code>GET</code> to the server to obtain the HTML that must be used to replace our <code>DOM</code> while <code>replace</code> expects from us the HTML that should be used for its operation.</p>
<p>With both functions, we can pass a hash with an <code>id</code> or an array of <code>id</code> of HTML elements to <code>change</code> or<code>keep</code>.</p>
<table>
<thead>
<tr>
<th>Action</th>
<th>Result</th>
</tr>
</thead>
<tbody>
<tr>
<td>Turbolinks.visit(url, { change: [&apos;entries&apos;] })</td>
<td>Will replace any <code>DOM</code> element with custom attribute <code>data-turbolinks-temporary</code> and any element with its id listed in change.</td>
</tr>
<tr>
<td>Turbolinks.visit(url)</td>
<td>Will keep only <code>DOM</code> elements with custom attribute <code>data-turbolinks-permanent</code> and replace everything.</td>
</tr>
<tr>
<td>Turbolinks.visit(url, { keep: [&apos;flash&apos;] })</td>
<td>Will keep only <code>DOM</code> elements with custom attribute <code>data-turbolinks-permanent</code> and any element with its id listed in keep, everything else will be replaced.</td>
</tr>
<tr>
<td>Turbolinks.visit(url, { flush: true })</td>
<td>Will replace everything</td>
</tr>
</tbody>
</table>
<p>We can trigger the same functionality from the server-side with <code>redirect_to</code> and <code>render</code>, both can receive <code>change</code>, <code>keep</code> and <code>flush</code> as options but <code>redirect_to</code> can also receive <code>turbolinks</code> with <code>true</code> or <code>false</code> to force a redirect with or without Turbolinks.</p>
<p>Whether you like Turbolinks or not, this might be a good time to try out and find out if it could be a good fit somewhere in your application.</p>
<h3 id="railsapi">Rails API</h3>
<p>Rails API was the opinionated way to build APIs with Ruby on Rails. Rails API was a separate gem with its own generator to build the skeleton of API applications.</p>
<p>Its goal was to help to create fast Rails API application by removing unnecessary middleware while providing sensitive defaults for these kinds of applications.</p>
<p>Starting with Rails 5, Rails API is <a href="https://github.com/rails/rails/pull/19832">integrated into the framework</a>, there is no need to include additional gems. To create a new API only Rails app we just pass the <code>--api</code> option to <code>rails</code> command.</p>
<pre><code class="language-bash">$ rails new michelada-api --api
</code></pre>
<p>The new application will include <code>ActiveModelSerializers</code> and will remove <code>JQuery</code> and <code>Turbolinks</code> gems from our <code>Gemfile</code>. Also, <code>config/application.rb</code> and <code>aplication_controller.rb</code> files to have <code>config.api_only = true</code> option and to not check for <code>CSRF</code> protection, also it will be inherited from <code>ActionController::API</code>.</p>
<pre><code class="language-ruby"># application.rb file
module MicheladaApi
  class Application &lt; Rails::Application
     config.api_only = true
  end
end

# application_controller.rb file
class ApplicationController &lt; ActionController::API
end
</code></pre>
<p>If you want to learn more about creating Rails API application, here is a starter post from WyeWorks: <a href="http://wyeworks.com/blog/2015/6/30/how-to-build-a-rails-5-api-only-and-ember-application/">&#x201C;HOW TO BUILD A RAILS 5 API ONLY AND EMBER APPLICATION&#x201D;</a></p>
<h3 id="actioncable">ActionCable</h3>
<p><a href="https://github.com/rails/actioncable">ActionCable</a> is the new <em>thing</em> in Rails 5, it is a framework for real time communication over web sockets.</p>
<p>An <code>ActionCable</code> server will expose one or more channels into where a consumer will be able to subscribe via web socket connection, each channel broadcast messages to all subscribers in realtime.</p>
<p>Current <code>ActionCable</code> dependencies include the need of <a href="http://redis.io/">Redis</a> and its feature <a href="http://redis.io/topics/pubsub">PubSub</a>. It also requires on the Ruby side <a href="https://github.com/faye/faye-websocket-ruby">faye-websocket</a> and <a href="https://github.com/celluloid/celluloid">celluloid</a>  although these may change in the future.</p>
<p>An application with <code>ActionCable</code> support requires of 3 basic components:</p>
<ul>
<li>Connection: Is a class derived from <code>ActionCable::Connection::Base</code>, this is where authorization and connection establishments happen.</li>
<li>Channel: This is what we will expose via web sockets and it is derived from <code>ActionCable::Channel::Base</code></li>
<li>Client: Is a javascript library to become an <code>ActionCable</code> client.</li>
</ul>
<p><code>ActionCable</code> will require from us to start an additional server to respond to web sockets connections.</p>
<p>If you want to explore <code>ActionCable</code>, the Rails team has put together a Github repository with a <a href="https://github.com/rails/actioncable-examples">sample application</a>.</p>
<h2 id="conclusions">Conclusions</h2>
<p>This is not the definitive list of changes or new features in Rails 5 but is just a quick glimpse on what can we expect on the new version.</p>
<p>There is no definitive date for when this might happen, but it still might happen this year. There is still <a href="https://github.com/rails/rails/pulls?page=2&amp;q=is%3Aopen+is%3Apr+milestone%3A5.0.0">68 open pull request</a> for Rails 5 milestone in Github.</p>
<p>Without a doubt, it is time to prepare our applications for the upgrade; just because of the performance improvements are worth it. If you are on Rails 4.x, the upgrade is almost painless.</p>
<!--kg-card-end: markdown-->]]></content:encoded></item></channel></rss>