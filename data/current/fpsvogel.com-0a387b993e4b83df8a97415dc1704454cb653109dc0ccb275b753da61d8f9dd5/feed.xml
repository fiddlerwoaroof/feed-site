<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://bridgetownrb.com/" version="1.0.0.beta1">Bridgetown</generator><link href="https://fpsvogel.com/feed.xml" rel="self" type="application/atom+xml"><link href="https://fpsvogel.com/" rel="alternate" type="text/html"><updated>2022-11-13T19:11:54-05:00</updated><id>https://fpsvogel.com/feed.xml</id><title type="html">Felipe Vogel</title><subtitle>The Rubyish, Railsy web developer life of a former humanities teacher.</subtitle><author><name>{&quot;twitter&quot;=&gt;&quot;fpsvogel&quot;}</name></author><entry><title type="html">The first six months</title><link href="https://fpsvogel.com/posts/2022/first-six-months-junior-rails-developer-lessons" rel="alternate" type="text/html" title="The first six months"><published>2022-08-24T00:00:00-04:00</published><updated>2022-08-24T00:00:00-04:00</updated><id>repo://posts.collection/_posts/2022-08-24-first-six-months-junior-rails-developer-lessons.md</id><content type="html" xml:base="https://fpsvogel.com/posts/2022/first-six-months-junior-rails-developer-lessons">&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#find-balance&quot;&gt;Find balance&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#keep-up-your-learning-journey&quot;&gt;Keep up your learning journey&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#dont-be-a-silo-connect-more-communicate-better&quot;&gt;Don‚Äôt be a silo: connect more, communicate better&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I‚Äôve reached a milestone: six months into my first developer job üéâ Time for some reflection! What have I learned? If I were to give advice to myself six months ago, what wisdom would I impart? Here are a few highlights.&lt;/p&gt;

&lt;h2 id=&quot;find-balance&quot;&gt;Find balance&lt;/h2&gt;

&lt;p&gt;Learning the ropes as a junior developer can be exhausting, especially if you have a competitive ‚Äúgotta get tons done‚Äù personality like I do. Impressing your peers and exceeding your manager‚Äôs expectations feels so good that it‚Äôs hard to slow down.&lt;/p&gt;

&lt;p&gt;But the cost is real, as I‚Äôve been painfully reminded. A couple times already I‚Äôve gotten into a cycle of overwork ‚á® burnout ‚á® lethargic exhaustion ‚á® panic ‚á® repeat. More recently, here are some ways I‚Äôve found to stay out of that unpleasant cycle:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Give pessimistic time estimates.&lt;/strong&gt; When your manager asks how much time you‚Äôll need to finish a project, resist the fear of giving an embarrassingly long estimate, because what you think is a long time probably isn‚Äôt. Expect unexpected delays. After I was burned by a short deadline of my own making, a more senior colleague suggested that I add in a 1.5‚Äì2x ‚Äúcontingency factor‚Äù to my estimates.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Put rest into your work rhythm.&lt;/strong&gt; Despite my best attempts, I‚Äôve found it impossible to work at a completely steady pace. (Even &lt;a href=&quot;https://www.howtogeek.com/322433/four-simple-timers-that-remind-you-to-take-breaks-from-your-computer&quot;&gt;break timers&lt;/a&gt; don‚Äôt work for me, because I tend to cancel the pauses or close the app entirely if I‚Äôm ‚Äúin the zone‚Äù and don‚Äôt want to be interrupted.) I‚Äôve accepted that there will always be crunch times when I need to do a lot of focused work, and there will always be slower times when not as much needs to be done right now. Rather than stressing about how to flatten that up-and-down, I‚Äôve found it more helpful to take advantage of the slow times, using them as a chance to rest. Don‚Äôt immediately pile on more work when you‚Äôve just stretched yourself to finish something. Attune yourself to the ebb and flow, and look for chances to step away from the computer, quiet your inner restlessness, and &lt;em&gt;rest&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Maintain healthy habits.&lt;/strong&gt; On the other hand, it‚Äôs good to keep up a healthy routine even in the busiest times. Find a few things that help you relax and stay happy, and don‚Äôt beat yourself up if you don‚Äôt get around to doing all of them every day. For me these things include:
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;Reading.&lt;/em&gt; &lt;a href=&quot;/reading&quot;&gt;I love reading&lt;/a&gt; because a good book gives me energy and relaxation at the same time, even while expanding my horizons. Try to find a hobby that does that for you.&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Latin.&lt;/em&gt; A more social hobby for me is spoken Latin. (Yes, &lt;a href=&quot;https://www.youtube.com/watch?v=xj-zCfVC2Zg&quot;&gt;that‚Äôs a thing&lt;/a&gt;.) Whatever it is for you, regularly doing something fun in a group can provide a refreshing change of pace from your usual day-to-day.&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Mindfulness.&lt;/em&gt; The &lt;a href=&quot;https://www.balanceapp.com/&quot;&gt;Balance&lt;/a&gt; app is great, and free for the first year. I rarely &lt;em&gt;enjoy&lt;/em&gt; mindfulness, but it helps me avoid bad thought patterns and appreciate the little things in life.&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Building up relationships.&lt;/em&gt; For me this means spending more quality time with my wife‚Äînot just watching more Netflix, but trying new things together (this summer it was camping), and making an effort to listen more and be a better companion. I‚Äôve also been reconnecting with old friends. It takes effort to do all this, but there‚Äôs no replacement for the love of family and friends.&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Going on walks.&lt;/em&gt; The exercise makes me feel good, and it‚Äôs another chance to talk with my wife, or if I‚Äôm alone, to listen to audiobooks and podcasts ü§ì But it‚Äôs also nice to take off the headphones once in a while and just look at the trees.&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Lying in bed daydreaming.&lt;/em&gt; I‚Äôm not kidding! Even a short 10-minute burst can be very refreshing. To get there &lt;a href=&quot;https://www.nytimes.com/2021/04/10/at-home/daydreaming.html&quot;&gt;you might have to retrain your imagination&lt;/a&gt;, but it‚Äôs worth the effort.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;keep-up-your-learning-journey&quot;&gt;Keep up your learning journey&lt;/h2&gt;

&lt;p&gt;For two years before I got this job, I learned programming on the side while working a ‚Äúpay the bills‚Äù type of job. It was a huge relief to put that stage behind me, but a few months into my new job I found myself missing the freedom and adventure that I felt when I was learning programming.&lt;/p&gt;

&lt;p&gt;Thankfully it was an easy fix, because I was the one holding myself back. Juniors at my company are encouraged to take time to deepen their skills, apart from product work; I just wasn‚Äôt taking the time. Part of the problem was that I simply needed to slow down (see above). As soon as I did that, it became easier to spend an hour here and there on learning and deepening my skills.&lt;/p&gt;

&lt;p&gt;I‚Äôve found a few other practices useful in maintaining a learning habit:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Set goals.&lt;/strong&gt; Identify one or two areas where you want to improve, and focus on those. For me it helps that I already have lots to choose from in &lt;a href=&quot;https://github.com/fpsvogel/learn-ruby-and-cs&quot;&gt;my ‚ÄúLearning Ruby‚Äù list&lt;/a&gt;, which I‚Äôve been building up for the past two years.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Keep an open mind.&lt;/strong&gt; Even as a junior it‚Äôs easy to think that you know better than most other developers, or to turn your nose up at X or Y bandwagon that your company‚Äôs developers have jumped onto. But if you resist that close-mindedness and try to see the good side of even the technologies and techniques that you don‚Äôt like, then you‚Äôll learn a lot more. That happened with me a few months ago, when I spent time learning more RSpec, and it finally clicked in my mind and I started to appreciate its strong points.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Find mentors.&lt;/strong&gt; If you‚Äôre not getting much one-on-one guidance at work, I suggest (a) asking persistently until you at least have someone who can check in with your learning on a regular basis, and (b) looking for mentors outside of your company, such as at &lt;a href=&quot;https://firstrubyfriend.org&quot;&gt;First Ruby Friend&lt;/a&gt;. The &lt;a href=&quot;https://www.reddit.com/r/rails&quot;&gt;Rails subreddit&lt;/a&gt; is another good place to find a mentor, and I‚Äôve found the &lt;a href=&quot;https://discord.com/invite/stimulus-reflex&quot;&gt;StimulusReflex Discord server&lt;/a&gt; to be a welcoming place for my questions‚Äîand I haven‚Äôt even learned StimulusReflex yet, but they have very active channels for Ruby, Rails, and lots more.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;dont-be-a-silo-connect-more-communicate-better&quot;&gt;Don‚Äôt be a silo: connect more, communicate better&lt;/h2&gt;

&lt;p&gt;Working remotely (as much as I love it) can make it harder to connect with others unless you‚Äôre very intentional. I mean this both in the sense of getting to know my colleagues, and also in the sense of hashing out important information.&lt;/p&gt;

&lt;p&gt;An example of the latter is communicating with all stakeholders and making sure we‚Äôre all on the same page. I‚Äôve found myself in situations where different people want different things from a new feature that I‚Äôm working on. The first time this happened, it was fine because I just added extra features that weren‚Äôt in the original spec, and everyone loved it. A few weeks later, as I worked on a different new feature, I again made adjustments mid-course based on feedback from a stakeholder, but this time it didn‚Äôt turn out so well. The adjustments I made departed from the original spec in ways that I realized were unacceptable only &lt;em&gt;after&lt;/em&gt; a barrage of questions and complaints from other stakeholders. I then had to rush to redo some of my work on my last two days before going on vacation. Moral of the story: don‚Äôt be the monkey in the middle! üôà Get everyone together in the same room (Zoom call) if necessary.&lt;/p&gt;

&lt;p&gt;As for getting to know my colleagues, I did great at the beginning when I scheduled an introductory Zoom call with each and every person in the product and engineering departments. However, it wasn‚Äôt long before I lost touch with even the handful of juniors that started at the same time that I did, and only now am I reconnecting with them. My hope is that we can get back to telling each other about our struggles and successes, as well as sharing new things that we‚Äôre learning.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I have a few other regrets about the past six months, but they all go back to these three lessons I‚Äôve learned: find balance, keep learning, and don‚Äôt be a silo.&lt;/p&gt;

&lt;p&gt;More fundamentally, I‚Äôm trying to shift my focus away from regrets and mistakes, and instead appreciate all that I‚Äôve learned. These lessons are already helping me be happier and more fulfilled, and that makes me even more excited for all that I‚Äôll learn in the next six months.&lt;/p&gt;</content><author><name>Felipe Vogel</name></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://fpsvogel.com/images/theme/social.jpg"/><media:content medium="image" url="https://fpsvogel.com/images/theme/social.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">RVTWS</title><link href="https://fpsvogel.com/posts/2022/rails-hotwire-frontend-stack" rel="alternate" type="text/html" title="RVTWS"><published>2022-06-24T00:00:00-04:00</published><updated>2022-06-24T00:00:00-04:00</updated><id>repo://posts.collection/_posts/2022-06-24-rails-hotwire-frontend-stack.md</id><content type="html" xml:base="https://fpsvogel.com/posts/2022/rails-hotwire-frontend-stack">&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#rails-or-roda&quot;&gt;Rails or Roda&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#viewcomponent&quot;&gt;ViewComponent&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#turbo&quot;&gt;Turbo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#web-components&quot;&gt;Web components&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stimulusreflex&quot;&gt;StimulusReflex&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When I started my career switch into software development two years ago, I decided to focus my efforts on Ruby. I did this for &lt;a href=&quot;/posts/2021/why-learn-ruby&quot;&gt;a few reasons&lt;/a&gt;, but one of them is that Rails offers great ‚Äúbang for the buck‚Äù: there‚Äôs a lot that I can build with just Rails, HTML, and CSS.&lt;/p&gt;

&lt;p&gt;However, this minimal vanilla stack becomes limiting when two factors come into play:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The MVC architecture of Rails won‚Äôt always be enough to keep your code organized. You‚Äôll notice it painfully if your app ever grows beyond a small project.&lt;/li&gt;
  &lt;li&gt;For your app to feel modern, the frontend will need to act like an SPA (Single-Page Application). The ‚Äúofficial‚Äù way to do this is now &lt;a href=&quot;https://hotwired.dev&quot;&gt;Hotwire&lt;/a&gt;, but there are other tools worth keeping in the toolbelt. More on that below.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Making a new acronym for your favorite tech stack is a popular thing these days, so I‚Äôll coin a new acronym: &lt;strong&gt;RVTWS&lt;/strong&gt;‚Ä¶ pronounced ‚Äúerv toes‚Äù? Yes, this is great. It will go viral in no time.&lt;/p&gt;

&lt;p&gt;Joking aside, I‚Äôm using this acronym here only as an outline for this blog post, rather than for any marketing value. The ‚ÄúV‚Äù (ViewComponent) addresses point #1 above, and ‚ÄúTWS‚Äù are concerned with #2.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;R&lt;/strong&gt;ails or Roda&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;V&lt;/strong&gt;iewComponent: &lt;em&gt;for frontend architecture&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;T&lt;/strong&gt;urbo: &lt;em&gt;for an SPA feel, using the server&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;W&lt;/strong&gt;eb Components: &lt;em&gt;for an SPA feel, using the client&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;S&lt;/strong&gt;timulusReflex: &lt;em&gt;for more complex frontend magic&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;rails-or-roda&quot;&gt;Rails or Roda&lt;/h2&gt;

&lt;p&gt;There‚Äôs not much to say about &lt;a href=&quot;https://rubyonrails.org&quot;&gt;Rails&lt;/a&gt;: it‚Äôs boring tech, and therefore a good choice for most web apps.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://roda.jeremyevans.net&quot;&gt;Roda&lt;/a&gt; is also worth considering. Unlike the batteries-included philosophy of Rails, Roda is bare-bones by default but highly extensible. This makes Roda apps fast and more architecturally flexible. Besides &lt;a href=&quot;http://roda.jeremyevans.net/documentation.html&quot;&gt;the docs&lt;/a&gt;, here are some places to get started with Roda:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://topenddevs.com/podcasts/ruby-rogues/episodes/building-with-just-what-you-need-using-roda-with-jeremy-evans-ruby-507&quot;&gt;An interview&lt;/a&gt; with its creator Jeremy Evans.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jeremyevans/roda-sequel-stack&quot;&gt;Roda + Sequel app skeleton&lt;/a&gt;, which has a similar purpose to the &lt;code class=&quot;highlighter-rouge&quot;&gt;rails new&lt;/code&gt; command.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.fullstackruby.dev/fullstack-development/2022/06/03/what-would-it-take-for-roda-to-win&quot;&gt;A post on Bridgetown‚Äôs ongoing Roda integration&lt;/a&gt;, which is making Roda more accessible thanks to Bridgetown‚Äôs batteries-included approach.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;viewcomponent&quot;&gt;ViewComponent&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://guides.rubyonrails.org/layouts_and_rendering.html#using-partials&quot;&gt;Partials&lt;/a&gt; are the standard Rails way to define distinct parts of a view. Partials provide a way to separate out part of a template, but they don‚Äôt provide a way to separate out view-related logic, which often ends up being thrown into models and/or controllers. This is one reason why models and controllers in Rails can so easily become huge and messy.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://viewcomponent.org&quot;&gt;ViewComponent&lt;/a&gt; provides a home for this view-related logic. &lt;a href=&quot;https://www.codewithjason.com/the-problem-that-viewcomponent-solves-for-me&quot;&gt;This post on the Code with Jason blog&lt;/a&gt; explains it best. In short, ViewComponent fills a big gap in MVC architecture.&lt;/p&gt;

&lt;p&gt;Some readers may be wondering, &lt;em&gt;‚ÄúIs that all? What about other architectural improvements, like service objects?‚Äù&lt;/em&gt; It‚Äôs true that certain types of apps have problems best solved with certain design patterns, and maybe a very large app needs a specialized architecture. But in general, Rails models designed in a careful, object-oriented way can take you very far, and I think the popularity of service objects is unjustified because they can easily muddle up a codebase. Food for thought:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.fullstackruby.dev/object-orientation/rails/2018/03/06/why-service-objects-are-an-anti-pattern&quot;&gt;Why Service Objects are an Anti-Pattern&lt;/a&gt; at Fullstack Ruby&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.codewithjason.com/organize-rails-apps&quot;&gt;How I Organize My Rails Apps&lt;/a&gt; at Code with Jason&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;turbo&quot;&gt;Turbo&lt;/h2&gt;

&lt;p&gt;On to the frontend! &lt;a href=&quot;https://turbo.hotwired.dev&quot;&gt;Turbo&lt;/a&gt; is part of Hotwire, which now ships with Rails. Turbo makes it really easy to give server-rendered pages a snappy SPA feel, where parts of the page are updated instantly instead of a full page reload.&lt;/p&gt;

&lt;p&gt;At the heart of Turbo is ‚ÄúHTML over the wire‚Äù (for which &lt;em&gt;HOTWire&lt;/em&gt; is an acronym), which means the server sending HTML fragments for partial page updates, which (here‚Äôs the big win) eliminates the need for client-side state management. There are &lt;a href=&quot;https://htmldriven.dev/html-over-the-wire&quot;&gt;lots&lt;/a&gt; of &lt;a href=&quot;https://github.com/guettli/frow--fragments-over-the-wire&quot;&gt;tools&lt;/a&gt; taking this approach now.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://unpoly.com&quot;&gt;Unpoly&lt;/a&gt; and &lt;a href=&quot;https://htmx.org&quot;&gt;HTMX&lt;/a&gt; are two of the most intriguing alternatives to Turbo because they are more framework-agnostic and have a flexible, concise syntax. Turbo, on the other hand, seems easier to get started with if you‚Äôre in Rubyland.&lt;/p&gt;

&lt;p&gt;Sidenote: If you‚Äôre wondering why all these ‚ÄúHTML over the wire‚Äù tools came about and what they‚Äôre pushing back against, take a look at these two comparisons of web app architecture from 2005 vs. ten years later: one from Unpoly (&lt;a href=&quot;http://triskweline.de/unpoly-rugb/#/5&quot;&gt;2005&lt;/a&gt;) vs. &lt;a href=&quot;http://triskweline.de/unpoly-rugb/#/11&quot;&gt;2015&lt;/a&gt;), and another from the developer of Turbo‚Äôs predecessor Turbolinks (&lt;a href=&quot;https://youtu.be/SWEts0rlezA?t=273&quot;&gt;2005&lt;/a&gt; vs. &lt;a href=&quot;https://www.youtube.com/watch?v=SWEts0rlezA&amp;amp;t=397s&quot;&gt;2016&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Besides Turbo, the other part of Hotwire is &lt;a href=&quot;https://stimulus.hotwired.dev&quot;&gt;Stimulus&lt;/a&gt;, which typically is used for adding client-side reactivity in situations where you want to sprinkle in some JS. After all, you wouldn‚Äôt want &lt;em&gt;every&lt;/em&gt; user interaction to involve a round trip to the server. So why am I including only Turbo here and not Stimulus?&lt;/p&gt;

&lt;h2 id=&quot;web-components&quot;&gt;Web components&lt;/h2&gt;

&lt;p&gt;Actually, Stimulus is pretty cool because you can &lt;a href=&quot;https://stimulus-use.github.io/stimulus-use&quot;&gt;compose multiple pre-built behaviors&lt;/a&gt; into one Stimulus controller, for a sort of functional approach to component behaviors. The tradeoff is that a growing web of Stimulus controllers (plus HTML data attributes associated with them) can become complex and hard to understand.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components&quot;&gt;Web components&lt;/a&gt; are an architecturally simpler way to add client-side behaviors, and they also have the advantage that they‚Äôre a web standard. &lt;a href=&quot;https://www.fullstackruby.dev/fullstack-development/2022/01/04/how-ruby-web-components-work-together&quot;&gt;This blog post on Fullstack Ruby&lt;/a&gt; shows the power of web components in the context of Ruby.&lt;/p&gt;

&lt;p&gt;Also, as illustrated in that post, you can use &lt;a href=&quot;https://www.ruby2js.com&quot;&gt;Ruby2JS&lt;/a&gt; to write web components in Ruby. (You can likewise &lt;a href=&quot;https://www.ruby2js.com/examples/stimulus&quot;&gt;write Stimulus controllers in Ruby&lt;/a&gt;.) In other words, you get the best of both worlds: the power of JavaScript on the frontend, and all the conveniences of Ruby syntax ü§©&lt;/p&gt;

&lt;h2 id=&quot;stimulusreflex&quot;&gt;StimulusReflex&lt;/h2&gt;

&lt;p&gt;Turbo + web components can take you a long way in making your Rails app feel modern, but there are other tools in this space that can complement them. I‚Äôve already mentioned Stimulus, but there‚Äôs also &lt;a href=&quot;https://docs.stimulusreflex.com&quot;&gt;StimulusReflex&lt;/a&gt; which is like Stimulus but on the server, and &lt;a href=&quot;https://cableready.stimulusreflex.com/&quot;&gt;CableReady&lt;/a&gt; which is somewhat like &lt;a href=&quot;https://turbo.hotwired.dev/handbook/streams&quot;&gt;Turbo Streams&lt;/a&gt; but more flexible. Be sure to give these a try if your app is highly interactive, or if you just want to expand your horizons beyond Hotwire.&lt;/p&gt;

&lt;p&gt;Also, &lt;a href=&quot;https://discord.com/invite/stimulus-reflex&quot;&gt;the StimulusReflex Discord server&lt;/a&gt; is an amazing place even for discussing all the other tech mentioned in this post. (Which is very ironic. Ever since Hotwire‚Äôs release, it has marketed itself as THE solution, not even mentioning the similar tools had already been coming out of the StimulusReflex community for two years. Even so, it‚Äôs in this very community that you can find the best Hotwire support.)&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I‚Äôve been thinking about this ideal Ruby stack because for the first time I‚Äôm working on a Rails app that has a React frontend, and it‚Äôs been a painful adjustment. Sometimes it feels like I‚Äôm writing logic twice, once on the backend and again on the frontend. And what do I get for it? Smoother page transitions and buttons that do things without refreshing the page. That‚Äôs nice, but do these simple enhancements have to involve so much extra work?&lt;/p&gt;

&lt;p&gt;On the other extreme, the ‚Äúvanilla Rails‚Äù approach to writing views &lt;a href=&quot;https://www.fullstackruby.dev/fullstack-development/2022/06/03/what-would-it-take-for-roda-to-win#y-u-no-like-rails&quot;&gt;is clunky and outdated&lt;/a&gt;, and Hotwire doesn‚Äôt fix all the omissions. It‚Äôs no wonder that people go looking for outside frontend solutions such as React.&lt;/p&gt;

&lt;p&gt;So I started dreaming about what frontend tools could give a smooth user experience &lt;em&gt;without&lt;/em&gt; so much extra complexity, and this ‚ÄúRVTWS‚Äù stack is the result. (Yeah, I need to work on that acronym.)&lt;/p&gt;

&lt;p&gt;On a final note, if you‚Äôd like to learn more about Hotwire and StimulusReflex, check out the resources that I‚Äôve compiled for both of them &lt;a href=&quot;https://github.com/fpsvogel/learn-ruby-and-cs#rails-hotwire&quot;&gt;in my ‚ÄúLearning Ruby‚Äù list&lt;/a&gt;.&lt;/p&gt;</content><author><name>Felipe Vogel</name></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://fpsvogel.com/images/theme/social.jpg"/><media:content medium="image" url="https://fpsvogel.com/images/theme/social.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">Dot syntax and deep_fetch for Ruby hashes</title><link href="https://fpsvogel.com/posts/2022/ruby-hash-dot-syntax-deep-fetch" rel="alternate" type="text/html" title="Dot syntax and deep_fetch for Ruby hashes"><published>2022-05-05T00:00:00-04:00</published><updated>2022-05-05T00:00:00-04:00</updated><id>repo://posts.collection/_posts/2022-05-05-ruby-hash-dot-syntax-deep-fetch.md</id><content type="html" xml:base="https://fpsvogel.com/posts/2022/ruby-hash-dot-syntax-deep-fetch">&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#baselines&quot;&gt;Baselines&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#dot-syntax&quot;&gt;Dot syntax&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#dig-with-errors&quot;&gt;Dig with errors&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#moral-of-the-story&quot;&gt;Moral of the story&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#appendix-a-dig-on-a-hash-with-error-raising-defaults&quot;&gt;Appendix A: &lt;code class=&quot;highlighter-rouge&quot;&gt;dig&lt;/code&gt; on a hash with error-raising defaults&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#appendix-b-the-benchmark-code&quot;&gt;Appendix B: the benchmark code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Recently I heard about this convenient feature of &lt;a href=&quot;https://hexdocs.pm/elixir/Map.html&quot;&gt;Elixir maps&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;To access atom keys, one may also use the &lt;code class=&quot;highlighter-rouge&quot;&gt;map.key&lt;/code&gt; notation. Note that &lt;code class=&quot;highlighter-rouge&quot;&gt;map.key&lt;/code&gt; will raise a &lt;code class=&quot;highlighter-rouge&quot;&gt;KeyError&lt;/code&gt; if the &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; doesn‚Äôt contain the key &lt;code class=&quot;highlighter-rouge&quot;&gt;:key&lt;/code&gt;, compared to &lt;code class=&quot;highlighter-rouge&quot;&gt;map[:key]&lt;/code&gt;, that would return &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nice! This is something I‚Äôve been wishing for in Ruby. In a current project I have a configuration hash that is passed around and used in a variety of objects. The hash is quite large and several levels deep, so my code abounds with chains of &lt;code class=&quot;highlighter-rouge&quot;&gt;Hash#fetch&lt;/code&gt; such as &lt;code class=&quot;highlighter-rouge&quot;&gt;config.fetch(:item).fetch(:template).fetch(:variants)&lt;/code&gt;. Which, as you can imagine, makes some lines very long and not particularly readable üòí&lt;/p&gt;

&lt;p&gt;Two notes on why I‚Äôve been doing it this way:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The reason I use &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;config[:item][:template][:variants]&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;config.dig(:item, :template, :variants)&lt;/code&gt; is that the &lt;code class=&quot;highlighter-rouge&quot;&gt;KeyError&lt;/code&gt; raised by &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt;, in case of a missing key, is more helpful than the default &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; value from brackets or &lt;code class=&quot;highlighter-rouge&quot;&gt;dig&lt;/code&gt;. In fact, that &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; could cause a major debugging headache if it results in an error somewhere else far from where the &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; originated.&lt;/li&gt;
  &lt;li&gt;If you‚Äôre wondering why I‚Äôm using a raw hash instead of a custom &lt;code class=&quot;highlighter-rouge&quot;&gt;Config&lt;/code&gt; class with syntactic sugar such as &lt;code class=&quot;highlighter-rouge&quot;&gt;config[:item, :template, :variants]&lt;/code&gt;: that could be a great idea in some projects! But in this project, some objects use only a part of the config and I don‚Äôt want to pass the entire config into those objects. Also, some objects perform hash operations using parts of the config. So if I‚Äôm creating separate &lt;code class=&quot;highlighter-rouge&quot;&gt;Config&lt;/code&gt; objects just to wrap inner hashes from the main &lt;code class=&quot;highlighter-rouge&quot;&gt;Config&lt;/code&gt;, and if I‚Äôm converting these &lt;code class=&quot;highlighter-rouge&quot;&gt;Config&lt;/code&gt; objects into a hash at various points, then it seems I should simply use a hash to begin with. In this project it‚Äôs simpler to deal with hashes all the time, so that I don‚Äôt have to ask myself, &lt;em&gt;‚ÄúLet‚Äôs see, is this a &lt;code class=&quot;highlighter-rouge&quot;&gt;Config&lt;/code&gt; object here, or has it turned into a hash?‚Äù&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, if we stick with a raw hash, can we hack our way to a more concise alternative to those repeated &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt;es, but with the same safety net of a &lt;code class=&quot;highlighter-rouge&quot;&gt;KeyError&lt;/code&gt;? Of course! This is Ruby, after all, where anything is possible. But whether it‚Äôs &lt;em&gt;advisable&lt;/em&gt;‚Ä¶ that‚Äôs the real question. In this post, we‚Äôll look at two possible syntaxes along with their performance and usability implications:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Dot syntax: &lt;code class=&quot;highlighter-rouge&quot;&gt;config.item.template.variants&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Deep fetch: &lt;code class=&quot;highlighter-rouge&quot;&gt;config.deep_fetch(:item, :template, :variants)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Originally I set out to find a performant approach to dot syntax, but by the end I had changed my mind, for reasons that I‚Äôll explain.&lt;/p&gt;

&lt;h2 id=&quot;baselines&quot;&gt;Baselines&lt;/h2&gt;

&lt;p&gt;First, here are benchmarks on standard syntax (mostly). For the benchmark code, see the end of this post.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Bracket notation: &lt;code class=&quot;highlighter-rouge&quot;&gt;hash[:a][:b]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Dig: &lt;code class=&quot;highlighter-rouge&quot;&gt;hash.dig(:a, :b)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Chained &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;hash.fetch(:a).fetch(:b)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;A shorter &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt; alias: &lt;code class=&quot;highlighter-rouge&quot;&gt;hash &amp;gt; :a &amp;gt; :b&lt;/code&gt;. Because why not.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                           user     system      total        real
1. brackets           :  0.003332   0.000000   0.003332 (  0.003332)
2. dig                :  0.002877   0.000823   0.003700 (  0.003704)
3. fetch              :  0.005040   0.000000   0.005040 (  0.005044)
4. fetch alias        :  0.005012   0.000000   0.005012 (  0.005012)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;These are all very performant. But remember, brackets and &lt;code class=&quot;highlighter-rouge&quot;&gt;dig&lt;/code&gt; return &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; where I want a &lt;code class=&quot;highlighter-rouge&quot;&gt;KeyError&lt;/code&gt;, and chained &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt; is what I‚Äôm trying to get away from.&lt;/li&gt;
  &lt;li&gt;In some runs, &lt;code class=&quot;highlighter-rouge&quot;&gt;dig&lt;/code&gt; (#2) was faster than brackets (#1), but more often brackets win by a hair.&lt;/li&gt;
  &lt;li&gt;Chained &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt; (#3) is consistently slower than brackets here in the benchmarks, but my project‚Äôs test suite does not run any faster when I replace all calls to &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt; with brackets. It‚Äôs a good reminder that benchmarks don‚Äôt always reflect real-life performance.&lt;/li&gt;
  &lt;li&gt;Even though the &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt; alias (#4) is just as fast as &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt; itself in the benchmarks, my project‚Äôs test suite took 20% longer to run when I replaced all calls to &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt; with an alias. 20% slower is not much, especially since all of my tests run in well under one second. But there‚Äôs also the fact that while &lt;code class=&quot;highlighter-rouge&quot;&gt;config &amp;gt; ‚Ä¶ &amp;gt; ‚Ä¶&lt;/code&gt; looks really cool, it is a bit cryptic (likely to confuse my future forgetful self), and I have to surround it with parentheses every time I want to call a method on the return value. Still, I was curious about the performance hit and that‚Äôs why I included the &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt; alias here.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;dot-syntax&quot;&gt;Dot syntax&lt;/h2&gt;

&lt;p&gt;Here are a few approaches to dot notation for hashes or hash-like structures, benchmarked. Keep in mind that I measured only access (reading) performance, not initialization or writing.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Faux dot notation by flattening a hash and giving it composite keys, as in &lt;code class=&quot;highlighter-rouge&quot;&gt;config[:&quot;item.template.variants&quot;]&lt;/code&gt;. I copied this approach &lt;a href=&quot;https://snippets.aktagon.com/snippets/738-dot-notation-for-ruby-configuration-hash&quot;&gt;from here&lt;/a&gt;, with the main difference that I use symbols as keys because they‚Äôre more performant than strings. Note that &lt;code class=&quot;highlighter-rouge&quot;&gt;:&quot;string&quot;&lt;/code&gt; is similar to &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;string&quot;.to_sym&lt;/code&gt; but faster because a string is not created every time. Also, this approach uses brackets, but only because that hash‚Äôs bracket accessor (&lt;code class=&quot;highlighter-rouge&quot;&gt;Hash#[]&lt;/code&gt;) is overridden to use &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;An OpenStruct, which is sometimes suggested in these sorts of conversations.&lt;/li&gt;
  &lt;li&gt;Augmenting a single hash with methods corresponding to its keys.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://api.rubyonrails.org/classes/ActiveSupport/OrderedOptions.html&quot;&gt;ActiveSupport::OrderedOptions&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/adsteel/hash_dot&quot;&gt;hash_dot&lt;/a&gt; gem. Also, my benchmark code is based on &lt;a href=&quot;https://github.com/adsteel/hash_dot#benchmarks&quot;&gt;the benchmarks in hash_dot‚Äôs README&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/hashie/hashie#methodaccess&quot;&gt;Hashie&lt;/a&gt; gem.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                           user     system      total        real
1. flat composite keys:  0.003461   0.000000   0.003461 (  0.003461)
2. OpenStruct         :  0.009731   0.000000   0.009731 (  0.009772)
3. per-hash dot access:  0.015300   0.000000   0.015300 (  0.015304)
4. AS::OrderedOptions :  0.070637   0.000000   0.070637 (  0.070640)
5. hash_dot           :  0.163008   0.000000   0.163008 (  0.163076)
6. hashie             :  0.163450   0.000000   0.163450 (  0.163451)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Some approaches to dot notation involve more annoying setup than others, and/or significant limitations. For example, the flattened hash with composite keys (#1) is super fast, but it‚Äôs far from the vanilla nested hash that I began with. This makes certain hash operations more complicated, such as iterating over hash keys. For my purposes it‚Äôs not worth the headache.&lt;/li&gt;
  &lt;li&gt;The OpenStruct is faster than I thought it would be. But its fatal flaws, for my purposes, are that it‚Äôs not a hash and therefore lacks a lot of functionality, and also it doesn‚Äôt raise an error for a nonexistent attribute (like the &lt;code class=&quot;highlighter-rouge&quot;&gt;KeyError&lt;/code&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt;) but instead returns &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Per-hash dot access (#3) is the fastest true dot notation for a hash. (Note that it only works for a hash that doesn‚Äôt get any new keys once it‚Äôs set up, which is just fine for my config hash.) However, when applied in my project, it still made my tests run for 70% longer. Again, that‚Äôs not as bad as it sounds for my sub-1-second test suite.&lt;/li&gt;
  &lt;li&gt;But then something unexpected happened as soon as I replaced my project‚Äôs calls to &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt; with dot notation. My code looked &lt;em&gt;more messy&lt;/em&gt; even though it was now &lt;em&gt;more concise&lt;/em&gt;. The reason, I think, is that there was no longer a slew of (syntax-highlighted) symbols at the points where I access the config hash, and so it was a bit harder to see at a glance where config values were being used. Instead of brightly-colored symbols evenly spaced by &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt;, my eyes now saw only a mush of method calls until my brain processed the words and told me whether that‚Äôs a place where the config hash is accessed. Hmm. Now I was wondering if there was a way to keep the symbols involved, but in a more concise way than chaining &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt; ü§î&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;dig-with-errors&quot;&gt;Dig with errors&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Hash#dig&lt;/code&gt; looks nice: &lt;code class=&quot;highlighter-rouge&quot;&gt;hash.dig(:item, :template, :variants)&lt;/code&gt;. But again, the problem is that it defaults to &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; for nonexistent keys. What if we could make a similar method that raises a &lt;code class=&quot;highlighter-rouge&quot;&gt;KeyError&lt;/code&gt; instead?&lt;/p&gt;

&lt;p&gt;This has actually been proposed as an addition to Ruby several times (&lt;a href=&quot;https://bugs.ruby-lang.org/issues/15563&quot;&gt;1&lt;/a&gt;, &lt;a href=&quot;https://bugs.ruby-lang.org/issues/14602&quot;&gt;2&lt;/a&gt;, &lt;a href=&quot;https://bugs.ruby-lang.org/issues/12282&quot;&gt;3&lt;/a&gt;) with various names including &lt;code class=&quot;highlighter-rouge&quot;&gt;deep_fetch&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;dig!&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;dig_fetch&lt;/code&gt;. But the method seems unlikely to be added in the near future. So‚Ä¶ let‚Äôs do it ourselves!&lt;/p&gt;

&lt;p&gt;Here are a few different implementations, with benchmarks. There are also a couple of gems for it, &lt;a href=&quot;https://github.com/dogweather/digbang&quot;&gt;dig_bang&lt;/a&gt; and &lt;a href=&quot;https://github.com/pewniak747/deep_fetch&quot;&gt;deep_fetch&lt;/a&gt;, but I didn‚Äôt include them here because &lt;code class=&quot;highlighter-rouge&quot;&gt;dig_bang&lt;/code&gt; uses &lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt; (#4 below) and &lt;code class=&quot;highlighter-rouge&quot;&gt;deep_fetch&lt;/code&gt; uses recursion, which performs the same.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dig&lt;/code&gt; on a hash that has had its defaults set such that it raises an error for nonexistent keys.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Hash#case_deep_fetch&lt;/code&gt;, which raises a &lt;code class=&quot;highlighter-rouge&quot;&gt;KeyError&lt;/code&gt; for nonexistent keys. It‚Äôs called &lt;code class=&quot;highlighter-rouge&quot;&gt;case_deep_fetch&lt;/code&gt; because it‚Äôs implemented with a simple case statement.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Hash#while_deep_fetch&lt;/code&gt;, similar but implemented with a &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; loop.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Hash#reduce_deep_fetch&lt;/code&gt;. This is the ‚Äúmost Ruby‚Äù implementation.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                           user     system      total        real
1. dig, error defaults:  0.003750   0.000000   0.003750 (  0.003750)
2. case_deep_fetch    :  0.007850   0.000000   0.007850 (  0.007856)
3. while_deep_fetch   :  0.014849   0.000000   0.014849 (  0.014852)
4. reduce_deep_fetch  :  0.027889   0.000056   0.027945 (  0.027950)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#appendix-a-dig-on-a-hash-with-error-raising-defaults&quot;&gt;Appendix A&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;reduce_deep_fetch&lt;/code&gt; (#4) is the most idiomatic and flexible implementation, so it‚Äôs probably what you should use.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;while_deep_fetch&lt;/code&gt; (#3) is for you if you want to &lt;del&gt;sell your soul&lt;/del&gt; trade idiomatic Ruby for a bit of extra speed.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;case_deep_fetch&lt;/code&gt; (#2) throws aesthetics and flexibility &lt;em&gt;completely&lt;/em&gt; out the window because it‚Äôs implemented with a case statement, and it can only dig as deep as the case statement is tall. But in my project I don‚Äôt foresee ever needing to dig more than four levels into a hash, so for me it‚Äôs perfect üåü Best of all, my tests don‚Äôt run any slower now than they used to. But please don‚Äôt copy me. That case statement is truly ugly.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;moral-of-the-story&quot;&gt;Moral of the story&lt;/h2&gt;

&lt;p&gt;In the middle of all this, I seriously considered giving up and just going back to &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt;, because it‚Äôs the most performant and any other syntax risks making my code more cryptic to my future self. When I see &lt;code class=&quot;highlighter-rouge&quot;&gt;config.fetch(:item)&lt;/code&gt; I know I‚Äôm dealing with a hash, unlike when I see &lt;code class=&quot;highlighter-rouge&quot;&gt;config.item&lt;/code&gt;. But in the end I decided that &lt;code class=&quot;highlighter-rouge&quot;&gt;config.deep_fetch(:item, :template)&lt;/code&gt; is pretty self-explanatory, and the better readability that it allows is worth the small pause that my future self might take at seeing non-standard Ruby. But it‚Äôs surprising that clarity (and not performance) is what made the decision a difficult one.&lt;/p&gt;

&lt;p&gt;Which leads into the other surprising takeaway: in this case it wasn‚Äôt hard to custom-build a very performant solution for my project. So maybe I should try a DIY mindset more often, rather than immediately reaching for a gem (or ten).&lt;/p&gt;

&lt;p&gt;In the end, maybe the real cost of my solution was in the absurd amount of time that I spent on all this benchmarking, hairsplitting, yak shaving, and bikeshedding. Enough! But I hope you‚Äôve enjoyed my little adventure as much as I‚Äôm enjoying seeing it finished.&lt;/p&gt;

&lt;h2 id=&quot;appendix-a-dig-on-a-hash-with-error-raising-defaults&quot;&gt;Appendix A: &lt;code class=&quot;highlighter-rouge&quot;&gt;dig&lt;/code&gt; on a hash with error-raising defaults&lt;/h2&gt;

&lt;p&gt;So why is this a bad idea? It comes with no performance penalty because it‚Äôs just &lt;code class=&quot;highlighter-rouge&quot;&gt;dig&lt;/code&gt; on a regular hash. What could go wrong?&lt;/p&gt;

&lt;p&gt;The problem is that I have to modify my config hash in the beginning to give it defaults that raise a &lt;code class=&quot;highlighter-rouge&quot;&gt;KeyError&lt;/code&gt;. Recall that I also had to modify the hash when I tried per-hash dot access (#3 in the benchmarks on dot syntax above). But this time I‚Äôm less comfortable with the modification, because this one can ‚Äúslip out‚Äù in less noticeable ways.&lt;/p&gt;

&lt;p&gt;For example, if at some point in my code the config hash is operated on in a way that creates a derived hash (e.g. by calling &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; on it and using the result), that derived hash would be a fresh new hash without the &lt;code class=&quot;highlighter-rouge&quot;&gt;KeyError&lt;/code&gt; defaults.&lt;/p&gt;

&lt;p&gt;That new hash might get passed around, with me thinking it‚Äôs the original that has the special defaults. I might use &lt;code class=&quot;highlighter-rouge&quot;&gt;dig&lt;/code&gt; on the hash, and &lt;code class=&quot;highlighter-rouge&quot;&gt;dig&lt;/code&gt; would work as in any hash (without my trusty &lt;code class=&quot;highlighter-rouge&quot;&gt;KeyError&lt;/code&gt;) without me ever knowing that anything was missing üíÄ&lt;/p&gt;

&lt;p&gt;So this approach is too fragile for my liking. Plus, my future self might wonder &lt;em&gt;‚ÄúWhy did I use &lt;code class=&quot;highlighter-rouge&quot;&gt;dig&lt;/code&gt; and not fetch?‚Äù&lt;/em&gt; until future self re-discovers my hack.&lt;/p&gt;

&lt;h2 id=&quot;appendix-b-the-benchmark-code&quot;&gt;Appendix B: the benchmark code&lt;/h2&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'benchmark'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ostruct'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'active_support/ordered_options'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hash_dot'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hashie'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'active_support/core_ext/object/blank'&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#### SETUP&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;## FOR BASELINE BENCHMARKS&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# regular hash&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;vanilla&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;address: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;category: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;desc: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Urban&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# fetch alias&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Hash&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;alias_method&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:fetch&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;## FOR DOT BENCHMARKS&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# a flattened hash with composite keys&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# from https://snippets.aktagon.com/snippets/738-dot-notation-for-ruby-configuration-hash&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;to_namespace_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is_a?&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;to_namespace_hash&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sym&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;to_namespace_hash&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sym&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;flat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;address: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;category: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;desc: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Urban&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;flat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_namespace_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;flat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;KeyError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;possible_keys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/.*?&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;.*?/i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delete_if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:blank?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;KeyError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Key '&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;' not found. Did you mean one of:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;possible_keys&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;flat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;freeze&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# OpenStruct&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ostruct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OpenStruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;address: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;OpenStruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;category: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;OpenStruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;desc: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Urban&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# per-hash dot access&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;allow_dot_access&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vanilla_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;vanilla_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vanilla_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define_singleton_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is_a?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allow_dot_access&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# ActiveSupport::OrderedOptions&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;asoo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;OrderedOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;asoo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;OrderedOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;asoo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;category&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;OrderedOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;asoo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Urban&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# hash_dot gem&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;hash_dot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vanilla&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_dot&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;my_dot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allow_dot_access&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;address: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;category: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;desc: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Urban&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;freeze&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;## FOR DEEP_FETCH BENCHMARKS&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# with error defaults&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add_key_error_defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vanilla_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;vanilla_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;default_proc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;KeyError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;key not found: :&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;vanilla_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is_a?&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;add_key_error_defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;vanilla_hash&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;errorful&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_key_error_defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;address: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;category: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;desc: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Urban&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# deep_fetch implementations&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Hash&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ewwwwwwwwwwwww&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;case_deep_fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key4&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key3&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key2&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;while_deep_fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shift&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reduce_deep_fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#### BENCHMARKS&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50000&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Benchmark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;BASELINES:&quot;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;bm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1. brackets           :&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;vanilla&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:desc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;bm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2. dig                :&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;vanilla&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:desc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;bm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;3. fetch              :&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;vanilla&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:desc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;bm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;4. fetch alias        :&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;vanilla&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:category&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:desc&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;DOT:&quot;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;bm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1. flat composite keys:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;flat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;address.category.desc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;bm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2. OpenStruct         :&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ostruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;desc&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;bm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;3. per-hash dot access:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;my_dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;desc&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;bm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;4. AS::OrderedOptions :&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;asoo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;desc&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;bm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;5. hash_dot           :&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;hash_dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;desc&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Hash&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hashie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Extensions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MethodAccess&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;bm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;6. hashie             :&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;vanilla&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;desc&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;DEEP_FETCH:&quot;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;bm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1. dig, error defaults:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;errorful&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:desc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;bm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2. case_deep_fetch    :&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;vanilla&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;case_deep_fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:desc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;bm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;3. while_deep_fetch   :&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;vanilla&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;while_deep_fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:desc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;bm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;4. reduce_deep_fetch  :&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;vanilla&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reduce_deep_fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:desc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Felipe Vogel</name></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://fpsvogel.com/images/theme/social.jpg"/><media:content medium="image" url="https://fpsvogel.com/images/theme/social.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">MacOS for PC users</title><link href="https://fpsvogel.com/posts/2022/switching-from-pc-windows-to-macos" rel="alternate" type="text/html" title="MacOS for PC users"><published>2022-04-18T00:00:00-04:00</published><updated>2022-04-18T00:00:00-04:00</updated><id>repo://posts.collection/_posts/2022-04-18-switching-from-pc-windows-to-macos.md</id><content type="html" xml:base="https://fpsvogel.com/posts/2022/switching-from-pc-windows-to-macos">&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#mouse-usability&quot;&gt;Mouse usability&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#keyboard-usability&quot;&gt;Keyboard usability&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#banishing-the-top-menu&quot;&gt;Banishing the top menu&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#scaling-on-my-1440p-monitor&quot;&gt;Scaling on my 1440p monitor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#a-clipboard-manager&quot;&gt;A clipboard manager&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#a-better-terminal&quot;&gt;A better terminal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I‚Äôve always been a PC user, and I remained one even after I got into software development. &lt;em&gt;Unpleasant&lt;/em&gt; and &lt;em&gt;awful&lt;/em&gt; are words that come to many people‚Äôs minds when they fathom development on Windows. But by the time I started coding just a few years ago, &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/wsl/install&quot;&gt;WSL&lt;/a&gt; had come onto the scene, which I think is even more developer-friendly than MacOS because it‚Äôs &lt;em&gt;real&lt;/em&gt; Linux.&lt;/p&gt;

&lt;p&gt;But recently, as I started my first developer job, I got an obligatory MacBook Pro in the mail. I could no longer avoid the switch. And so, resigned to my fate, I proceeded to customize my Mac to suit my PC-tainted tastes. Here‚Äôs what I did.&lt;/p&gt;

&lt;h2 id=&quot;mouse-usability&quot;&gt;Mouse usability&lt;/h2&gt;

&lt;p&gt;MacOS is not friendly to mouse users (except for Apple‚Äôs Magic Mouse, but I shudder at the thought of using a mouse with only two buttons). My main issues out of the box were that the mouse cursor was way too slow, and scrolling was unusable with the mouse wheel. &lt;a href=&quot;https://plentycom.jp/en/steermouse&quot;&gt;SteerMouse&lt;/a&gt; gave me options to fix both issues.&lt;/p&gt;

&lt;h2 id=&quot;keyboard-usability&quot;&gt;Keyboard usability&lt;/h2&gt;

&lt;p&gt;To enable Windows-style keyboard shortcuts, I did the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Installed &lt;a href=&quot;https://alt-tab-macos.netlify.app/&quot;&gt;AltTab&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Edited &lt;code class=&quot;highlighter-rouge&quot;&gt;~/Library/KeyBindings/DefaultKeyBinding.Dict&lt;/code&gt; to consist of the snippet below. In case you‚Äôre wondering, &lt;a href=&quot;https://developer.apple.com/documentation/appkit/nsstandardkeybindingresponding&quot;&gt;here&lt;/a&gt; is a full list of possible commands, and &lt;a href=&quot;https://github.com/ttscoff/KeyBindings&quot;&gt;here&lt;/a&gt; are the defaults.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
&quot;\UF729&quot;  = moveToBeginningOfLine:; // home
&quot;\UF72B&quot;  = moveToEndOfLine:; // end
&quot;$\UF729&quot; = moveToBeginningOfLineAndModifySelection:; // shift home
&quot;$\UF72B&quot; = moveToEndOfLineAndModifySelection:; // shift end
&quot;@\UF729&quot; = moveToBeginningOfDocument:; // ctrl home
&quot;@\UF72B&quot; = moveToEndOfDocument:; // ctrl end
&quot;@$\UF729&quot; = moveToBeginningOfDocumentAndModifySelection:; // ctrl shift home
&quot;@$\UF72B&quot; = moveToEndOfDocumentAndModifySelection:; // ctrl shift end
&quot;@\UF702&quot; = moveWordLeft:; // ctrl left
&quot;@\UF703&quot; = moveWordRight:; // ctrl right
&quot;@$\UF702&quot; = moveWordLeftAndModifySelection:; // ctrl shift left
&quot;@$\UF703&quot; = moveWordRightAndModifySelection:; // ctrl shift right
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Added &lt;a href=&quot;https://stackoverflow.com/questions/5407916/zsh-zle-shift-selection/30899296#30899296&quot;&gt;this script&lt;/a&gt; to Zsh config to enable familiar text-editing shortcuts in the terminal.&lt;/li&gt;
  &lt;li&gt;Followed &lt;a href=&quot;https://stackoverflow.com/a/24100077&quot;&gt;these steps&lt;/a&gt; to remove alt shortcuts for Unicode characters. This way I can use alt shortcuts for other things.&lt;/li&gt;
  &lt;li&gt;Installed &lt;a href=&quot;https://www.keyboardmaestro.com/main/&quot;&gt;Keyboard Maestro&lt;/a&gt; and set up additional keyboard shortcuts that I like. I‚Äôm also using Keyboard Maestro for text expansion. (On Windows I use &lt;a href=&quot;https://beeftext.org/&quot;&gt;Beeftext&lt;/a&gt;.)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;banishing-the-top-menu&quot;&gt;Banishing the top menu&lt;/h2&gt;

&lt;p&gt;I don‚Äôt like the MacOS top menu because it forces apps to break &lt;a href=&quot;https://www.uxtoast.com/ux-laws/fittss-law&quot;&gt;Fitts‚Äôs Law&lt;/a&gt;, which suggests that important UI elements should be hard to miss with the mouse. For example, when I‚Äôm a fullscreen browser and I flick the mouse up to a tab that I want to switch to, the cursor usually ends up flying past the browser tabs and up into the top menu, requiring me to move back down a bit. This may seem like no big deal, but when I do these mouse movements many times every day, the extra movement adds up.&lt;/p&gt;

&lt;p&gt;To fix this, I set the top menu to auto-hide. Then, to prevent the cursor from revealing the menu, I created a macro in Keyboard Maestro that sets a variable to &lt;code class=&quot;highlighter-rouge&quot;&gt;%CurrentMouse[2]%&lt;/code&gt; (the cursor Y position), and then moves the mouse down 10 pixels if that value is less than 10 pixels. This macro always runs, repeating every 0.03 seconds. In other words, I‚Äôve made an invisible barrier 10 pixels below the top of the screen. To reveal the menu, I‚Äôve set a shortcut in MacOS keyboard settings. The fact that I can no longer access the menu with the mouse is fine because I only rarely need to access the menu, compared with how often I need to press something at the top of an app.&lt;/p&gt;

&lt;p&gt;Another annoyance of the top menu is that, shockingly, there‚Äôs no overflow menu for menu bar icons. When I‚Äôm using my laptop screen rather than my external monitor, there‚Äôs not much extra space on the right side of the menu, and not all the menu bar icons fit. Which means I‚Äôm out of luck if I need to get to an icon that isn‚Äôt one of the lucky few that are visible. &lt;a href=&quot;https://www.macbartender.com&quot;&gt;Bartender&lt;/a&gt; adds the much-needed overflow menu so that all icons are accessible.&lt;/p&gt;

&lt;h2 id=&quot;scaling-on-my-1440p-monitor&quot;&gt;Scaling on my 1440p monitor&lt;/h2&gt;

&lt;p&gt;On my laptop monitor I can scale text and UI elements to be larger, but MacOS doesn‚Äôt give me the same option for my external monitor, where everything appears even more tiny. I could switch to a lower (non-native) resolution, but then everything gets blurry. Apparently, MacOS allows scaling only for 4K monitors. To fix this, I‚Äôm using &lt;a href=&quot;https://github.com/waydabber/BetterDummy&quot;&gt;BetterDummy&lt;/a&gt;, which gives me those missing scaling options.&lt;/p&gt;

&lt;h2 id=&quot;a-clipboard-manager&quot;&gt;A clipboard manager&lt;/h2&gt;

&lt;p&gt;Clipboard manager apps are awesome, and there are a bajillion of them out there. On Windows I use Ditto. The closest thing I found for MacOs is &lt;a href=&quot;https://tapbots.com/pastebot&quot;&gt;PasteBot&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;a-better-terminal&quot;&gt;A better terminal&lt;/h2&gt;

&lt;p&gt;To replace MacOS‚Äôs ugly Terminal I downloaded &lt;a href=&quot;https://iterm2.com/&quot;&gt;iTerm2&lt;/a&gt; and configured it according to &lt;a href=&quot;https://medium.com/@Clovis_app/configuration-of-a-beautiful-efficient-terminal-and-prompt-on-osx-in-7-minutes-827c29391961&quot;&gt;this guide&lt;/a&gt; (minus installing Zsh, which now ships with MacOS).&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I don‚Äôt think I‚Äôll ever buy a Mac for personal use, and you can bet that if my company ever gives the option of a company PC laptop, I‚Äôll jump on it and make the switch back without a second thought. But until then, my MacBook is at least tolerable. Plus, I can finally stop feeling inferior for using a PC when so many developers rave about their Apple products. Now I‚Äôve been to the other side, and the grass is not greener there.&lt;/p&gt;</content><author><name>Felipe Vogel</name></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://fpsvogel.com/images/theme/social.jpg"/><media:content medium="image" url="https://fpsvogel.com/images/theme/social.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">SQL and Active Record for junior Rails developers</title><link href="https://fpsvogel.com/posts/2022/sql-and-active-record-for-junior-rails-developers" rel="alternate" type="text/html" title="SQL and Active Record for junior Rails developers"><published>2022-03-06T00:00:00-05:00</published><updated>2022-03-06T00:00:00-05:00</updated><id>repo://posts.collection/_posts/2022-03-06-sql-and-active-record-for-junior-rails-developers.md</id><content type="html" xml:base="https://fpsvogel.com/posts/2022/sql-and-active-record-for-junior-rails-developers">&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#sql-resources&quot;&gt;SQL resources&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#sql-basics&quot;&gt;SQL basics&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#sql-exercises&quot;&gt;SQL exercises&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#deeper-into-sql&quot;&gt;Deeper into SQL&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#active-record-resources&quot;&gt;Active Record resources&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#model-design-and-architecture&quot;&gt;Model design and architecture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Databases are hard. A few months ago when I started learning Ruby on Rails, I had trouble shifting from a pure Ruby mindset (where I manipulate data via Ruby‚Äôs lovely Enumerable methods) to an Active Record mindset (where I manipulate data from the database as part of a query and not via Enumerable methods). I also kept putting off learning SQL because it was intimidating. Instead I doubled down on Rails basics and testing. Those were great time investments, but now the time has come to learn SQL and Active Record beyond the basics.&lt;/p&gt;

&lt;p&gt;Knowing how to use the database wisely and efficiently is one of the most important skills to learn even if you‚Äôre still a beginner at Rails. If a Rails app is suffering from performance problems, there‚Äôs a good chance it‚Äôs because of inefficient database queries. Even tiny hobby apps can suffer from massive (as in, 30 seconds!) page load delays due to clumsy use of Active Record, as I discovered firsthand.&lt;/p&gt;

&lt;p&gt;But this is also one of the areas where I found the least guidance, so I‚Äôve compiled my favorite resources below for the benefit of any other lost souls out there. You might also want to check out &lt;a href=&quot;https://github.com/fpsvogel/learn-ruby-and-cs&quot;&gt;my complete list of learning resources&lt;/a&gt; on Ruby, Rails, and computer science.&lt;/p&gt;

&lt;p&gt;SQL resources are listed first here, but that‚Äôs not meant as a recommendation to become an SQL expert before learning more about Active Record. I think it‚Äôs best to learn both in tandem.&lt;/p&gt;

&lt;h2 id=&quot;sql-resources&quot;&gt;SQL resources&lt;/h2&gt;

&lt;h3 id=&quot;sql-basics&quot;&gt;SQL basics&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.theodinproject.com/paths/full-stack-ruby-on-rails/courses/databases&quot;&gt;Databases course&lt;/a&gt; at The Odin Project&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.sqlteaching.com&quot;&gt;SQL Teaching&lt;/a&gt; interactive tutorial&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sqlbolt.com&quot;&gt;SQLBolt&lt;/a&gt; interactive tutorial&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sqlzoo.net/wiki/SQL_Tutorial&quot;&gt;SQLZoo&lt;/a&gt; interactive tutorial&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;sql-exercises&quot;&gt;SQL exercises&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikibooks.org/wiki/SQL_Exercises&quot;&gt;Wikibooks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.w3resource.com/sql-exercises/&quot;&gt;w3resource&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.hackerrank.com/domains/sql&quot;&gt;HackerRank&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;deeper-into-sql&quot;&gt;Deeper into SQL&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://use-the-index-luke.com/sql/preface&quot;&gt;Use the Index, Luke!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.edx.org/course/advanced-topics-in-sql&quot;&gt;Advanced Topics in SQL&lt;/a&gt; course from Stanford&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;active-record-resources&quot;&gt;Active Record resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.theodinproject.com/paths/full-stack-ruby-on-rails/courses/ruby-on-rails#advanced-forms-and-active-record&quot;&gt;Advanced Active Record&lt;/a&gt; at the Odin Project&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://guides.rubyonrails.org&quot;&gt;The Rails Guides&lt;/a&gt; on Active Record&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html&quot;&gt;Some nice Active Record docs&lt;/a&gt; from the Rails API Documentation&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://thoughtbot.com/upcase/advanced-activerecord-querying&quot;&gt;Advanced ActiveRecord Querying&lt;/a&gt; on Upcase&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/jmcharnes/status/1499760253440860161&quot;&gt;An upcoming course&lt;/a&gt; on Active Record&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;model-design-and-architecture&quot;&gt;Model design and architecture&lt;/h2&gt;

&lt;p&gt;I‚Äôm still looking for a good book or course on this, but in the meantime here are some helpful blog posts.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.startuprocket.com/articles/how-to-design-and-prep-a-ruby-on-rails-model-architecture&quot;&gt;How to design and prep a Ruby on Rails model architecture&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.appsignal.com/2020/11/18/rails-model-patterns-and-anti-patterns.html&quot;&gt;Ruby on Rails Model Patterns and Anti-patterns&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Posts on &lt;a href=&quot;https://www.codewithjason.com/articles/&quot;&gt;Code with Jason&lt;/a&gt;, such as &lt;a href=&quot;https://www.codewithjason.com/what-is-a-rails-model/&quot;&gt;What is a Rails model?&lt;/a&gt;, &lt;a href=&quot;https://www.codewithjason.com/organize-rails-apps/&quot;&gt;How I organize my Rails apps&lt;/a&gt;, and &lt;a href=&quot;https://www.codewithjason.com/bloated-rails-active-record-models/&quot;&gt;What to do about bloated Active Record models&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;Pro tip for building PORO models: inherit &lt;a href=&quot;https://api.rubyonrails.org/classes/ActiveModel/Model.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveModel::Model&lt;/code&gt;&lt;/a&gt; and/or &lt;a href=&quot;https://api.rubyonrails.org/classes/ActiveModel/Attributes/ClassMethods.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveModel::Attributes&lt;/code&gt;&lt;/a&gt; if you want the conveniences of an Active Record object without actually storing it in the database.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Do a web search for ‚ÄúRails refactor fat model‚Äù if you want more blog posts along those lines.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Felipe Vogel</name></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://fpsvogel.com/images/theme/social.jpg"/><media:content medium="image" url="https://fpsvogel.com/images/theme/social.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">How to find your first Rails job</title><link href="https://fpsvogel.com/posts/2022/how-to-find-ruby-rails-job" rel="alternate" type="text/html" title="How to find your first Rails job"><published>2022-01-30T00:00:00-05:00</published><updated>2022-01-30T00:00:00-05:00</updated><id>repo://posts.collection/_posts/2022-01-30-how-to-find-ruby-rails-job.md</id><content type="html" xml:base="https://fpsvogel.com/posts/2022/how-to-find-ruby-rails-job">&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#why-ruby&quot;&gt;Why Ruby?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#where-to-look-for-rails-job-postings&quot;&gt;Where to look for Rails job postings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#my-job-search-a-birds-eye-view&quot;&gt;My job search: a bird‚Äôs-eye view&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#resume-strategies&quot;&gt;Resume strategies&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-to-ask-in-the-initial-interview&quot;&gt;What to ask in the initial interview&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#technical-exercises&quot;&gt;Technical exercises&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#appendix-why-a-junior-role&quot;&gt;Appendix: Why a junior role?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I‚Äôve just landed my first developer job, a U.S.-based (but remote) junior position in fullstack Ruby on Rails üéâ Here are some reflections on the job hunt, along with tips on finding your first Rails job.&lt;/p&gt;

&lt;h2 id=&quot;why-ruby&quot;&gt;Why Ruby?&lt;/h2&gt;

&lt;p&gt;There‚Äôs a good chance that you pity me for going through the harrowing experience of looking for a junior Rails job. Why did I choose Ruby? Why not a JS stack where junior roles are more common?&lt;/p&gt;

&lt;p&gt;For me Ruby was worth the risk of a longer job search because (a) I enjoy it a lot and (b) Rails is great for building up a portfolio quickly. If you‚Äôre still skeptical, &lt;a href=&quot;/posts/2021/why-learn-ruby&quot;&gt;here‚Äôs my post expanding on these two points&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Fortunately, my job search ended up taking only two months. But before that I spent a year and a half studying and practicing part-time, while working full-time in customer support to pay the bills. For details and recommended learning resources, see &lt;a href=&quot;https://github.com/fpsvogel/learn-ruby-and-cs&quot;&gt;my ongoing study guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I also looked for a junior role specifically. If you‚Äôre wondering why, see &lt;a href=&quot;#appendix-why-a-junior-role&quot;&gt;Appendix: Why a junior role?&lt;/a&gt; below.&lt;/p&gt;

&lt;h2 id=&quot;where-to-look-for-rails-job-postings&quot;&gt;Where to look for Rails job postings&lt;/h2&gt;

&lt;p&gt;I found most of my job leads in the &lt;a href=&quot;https://www.rubyonrails.link/&quot;&gt;Ruby on Rails Link&lt;/a&gt; community on Slack, and on &lt;a href=&quot;https://railsdevs.com/&quot;&gt;Rails Devs&lt;/a&gt;. I also found a few on Twitter and on the &lt;a href=&quot;https://discord.com/invite/stimulus-reflex&quot;&gt;StimulusReflex&lt;/a&gt; community on Discord.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What about LinkedIn?&lt;/em&gt; Yes, be sure to have a LinkedIn profile, if only for recruiters to be able to contact you. But I found only a few junior roles on LinkedIn, and none that I applied for. Some other sites that might be worth checking just in case: &lt;a href=&quot;https://www.indeed.com/&quot;&gt;Indeed&lt;/a&gt;, &lt;a href=&quot;https://angel.co/&quot;&gt;AngelList&lt;/a&gt;, &lt;a href=&quot;https://hired.com&quot;&gt;Hired&lt;/a&gt;, &lt;a href=&quot;https://www.railsgigs.com/&quot;&gt;RailsGigs&lt;/a&gt;, and the &lt;a href=&quot;https://jobs.gorails.com/&quot;&gt;GoRails job board&lt;/a&gt;. If you live outside the U.S., be sure to look in local job boards if there are any in your area. (If you‚Äôre not sure, try asking in &lt;a href=&quot;https://www.rubyonrails.link/&quot;&gt;Ruby on Rails Link&lt;/a&gt;.)&lt;/p&gt;

&lt;h2 id=&quot;my-job-search-a-birds-eye-view&quot;&gt;My job search: a bird‚Äôs-eye view&lt;/h2&gt;

&lt;p&gt;Over two months, I applied to seven companies. Most were startups, and only one of them (thoughtbot) is widely known in the Ruby community. I got an interview at six out of the seven companies. In five of them I moved past the first interview.&lt;/p&gt;

&lt;p&gt;(In the one where I didn‚Äôt move past the first interview, it was because I asked about the salary range and it was too low‚Äîor rather, the interviewer did the classic ‚ÄúWell, what do YOU want to be paid?‚Äù and my answer was evidently far beyond what they thought reasonable.)&lt;/p&gt;

&lt;p&gt;Speaking of salaries, there‚Äôs a huge range in what people think a junior‚Äôs salary should be. Among the full-time U.S. junior job postings I came across, not counting internships, the range in advertised salaries was $40k/year to $120k/year.&lt;/p&gt;

&lt;p&gt;The application process varied widely between the companies, from the simplest with just two interviews to the most complex with five interviews plus a take-home project. All of them had some sort of technical exercise, whether as part of an interview or as a take-home project.&lt;/p&gt;

&lt;p&gt;I‚Äôll describe the technical exercises in more detail, but first let‚Äôs back up to the resume and the initial interview.&lt;/p&gt;

&lt;h2 id=&quot;resume-strategies&quot;&gt;Resume strategies&lt;/h2&gt;

&lt;p&gt;To get an initial interview, having an impressive resume is key. To give you some ideas on how to polish your resume, here are things that interviewers said they liked about my resume. By the way, it‚Äôs always worth asking in an interview, ‚ÄúWhat did you like about my resume? And how could it be better?‚Äù&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Lots of projects.&lt;/strong&gt; In one of my early interviews, I got a helpful answer to the ‚Äúhow could it be better‚Äù question: ‚ÄúMore projects.‚Äù So I built &lt;a href=&quot;/posts/2022/doctor-lookup-health-provider-search-tool&quot;&gt;a series of small apps&lt;/a&gt; over the following weeks. These helped fill out my resume, and they were a great learning experience. I‚Äôve also heard good arguments (though not from interviewers) on the other side: instead of building lots of small projects, buckle down and build one big and impressive project. That‚Äôs actually the path I started on when I first learned Rails, and I do plan on returning to my ‚Äúserious‚Äù hobby app, but in these early stages of my Rails journey I learned more when I was building lots of small projects.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Write a blog.&lt;/strong&gt; One interviewer found me through &lt;a href=&quot;https://rubyrogues.com/bridgetown-rb-ft-felipe-vogel-ruby-526&quot;&gt;a podcast episode where I was featured&lt;/a&gt;. I was invited to the podcast because of &lt;a href=&quot;/posts/2021/build-a-blog-with-bridgetown&quot;&gt;a blog post&lt;/a&gt; that I wrote (reposted &lt;a href=&quot;https://dev.to/fpsvogel/build-a-static-site-in-ruby-with-bridgetown-45kg&quot;&gt;on DEV&lt;/a&gt;so that more people would see it). Moral of the story: write a blog! But even if your blog doesn‚Äôt lead to any special opportunities, it‚Äôs still worthwhile. Not only will your communication skills get a boost, but you can even learn something more thoroughly just by writing about it.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Keep a study guide.&lt;/strong&gt; I got compliments on &lt;a href=&quot;https://github.com/fpsvogel/learn-ruby-and-cs&quot;&gt;my study guide&lt;/a&gt; in two interviews, but it‚Äôs another one of those things that‚Äôs useful to do even if no one notices.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are efforts that I didn‚Äôt get comments on, but I‚Äôm sure they didn‚Äôt hurt:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Polish your GitHub portfolio.&lt;/strong&gt; Here‚Äôs mine: &lt;a href=&quot;https://github.com/fpsvogel&quot;&gt;github.com/fpsvogel&lt;/a&gt;. Make sure each of your pinned projects has a nice README including a summary of why it‚Äôs on portfolio. If you want to spend even more time perfecting your READMEs, &lt;a href=&quot;https://github.com/matiassingers/awesome-readme&quot;&gt;here‚Äôs an awesome README list&lt;/a&gt; to give you ideas, and here are a few that are built specifically as part of a learner‚Äôs portfolio of Rails apps: &lt;a href=&quot;https://github.com/lortza/tarot&quot;&gt;lortza/tarot&lt;/a&gt;, &lt;a href=&quot;https://github.com/lortza/sorrygirl&quot;&gt;lortza/sorrygirl&lt;/a&gt;, &lt;a href=&quot;https://github.com/lortza/therapy_tracker&quot;&gt;lortza/therapy_tracker&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Make a web version of your resume.&lt;/strong&gt; Here‚Äôs mine: &lt;a href=&quot;/about/&quot;&gt;fpsvogel.com/about&lt;/a&gt;. This is in addition to (not instead of) the PDF version that I submitted in applications. &lt;a href=&quot;https://www.overleaf.com/read/mgxfqgqngjqf&quot;&gt;Here‚Äôs my resume in PDF&lt;/a&gt; as of January 2022. I made it with LaTeX, but a plain old word processor would work too. Remember, keep it under one page!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-to-ask-in-the-initial-interview&quot;&gt;What to ask in the initial interview&lt;/h2&gt;

&lt;p&gt;Once your resume is polished up, you‚Äôre more likely to be invited to an interview. We tend to think most about giving good answers in an interview, but asking good questions is just as important‚Äîafter all, you are interviewing the company as much as they are interviewing you. Your goal, besides making a good impression, is to find out whether that company would be a good fit for you. Here are the questions I asked in my initial interviews, along with my motivation for asking some of them.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;‚ÄúWhat extra onboarding and support would I have in the junior role?‚Äù&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;This helped me gauge whether it‚Äôs truly a junior role where I‚Äôd get better learning opportunities, or just a regular role with lower pay and lower expectations.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;‚ÄúWhat kind of code reviews do you all do?‚Äù&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Even outside the junior role, developers should be helping each other learn, and code reviews are one way that‚Äôs done.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;‚ÄúHow is your testing suite these days? What is your test coverage?‚Äù&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;I wanted to be sure to work at a company that follows best practices, especially automated testing.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;‚ÄúHow often do your developers have to work odd hours or take care of unexpected issues?‚Äù&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Some companies require their developers to be on call during off hours. And in some companies, developers frequently have to put out fires in production. I wanted to avoid these as much as possible.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;‚ÄúWhat is the salary range for the position?‚Äù&lt;/strong&gt; (if a salary range was not advertised)
    &lt;ul&gt;
      &lt;li&gt;If they straightforwardly tell you the salary range, it‚Äôs a good idea to double check it in a follow-up email, just so you have it in writing.&lt;/li&gt;
      &lt;li&gt;If they don‚Äôt give a salary range and instead ask what salary you‚Äôre looking for, that‚Äôs a mark against the company in my book, because it makes me feel that they were too lazy to research salaries and they want to pay me as little as they can get away with. Try to resist the pressure to give a low number, and instead name the optimistic/best-case salary that you‚Äôre aiming for, and add on ‚Äúbut I‚Äôm willing to negotiate.‚Äù&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;‚ÄúIs this a W-2 or contract position?‚Äù&lt;/strong&gt; (if it‚Äôs not clear already)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;‚ÄúWhat kind of health insurance do you offer?‚Äù&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;I live in the U.S., with its *ahem* &lt;em&gt;unique&lt;/em&gt; approach to healthcare, so I wanted to make sure that I‚Äôd get good health insurance through work.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;If you‚Äôre not sure what the company‚Äôs product does: &lt;strong&gt;‚ÄúI looked through your website and I see that you all do X, but I‚Äôm still not clear on Y. Could you fill me in on the details?‚Äù&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;If you‚Äôre not sure &lt;em&gt;why&lt;/em&gt; the company exists, or what gap they‚Äôre filling: &lt;strong&gt;‚ÄúI‚Äôm curious to hear how your company started. Could you give me a quick rundown of that?‚Äù&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;If the interviewer is a developer (though this is more likely to be the case in a second or third interview): &lt;strong&gt;‚ÄúWhere did you work before this company, and why did you move? How has this company been better, and what are some areas where the company could improve?‚Äù&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are &lt;a href=&quot;https://www.google.com/search?q=questions+to+ask+in+a+developer+job+interview&quot;&gt;lots of other questions&lt;/a&gt; you could ask in the initial interview. Just be sure to ask about anything that will give you a better feel for whether the company will be a good fit.&lt;/p&gt;

&lt;h2 id=&quot;technical-exercises&quot;&gt;Technical exercises&lt;/h2&gt;

&lt;p&gt;Of the five technical exercises that I did, three were take-home, and two were live coding exercises, where an interviewer watched as I wrote code and as I explained what I was doing and why. For the take-home exercises, I explained my thinking in a follow-up interview after I‚Äôd finished an exercise.&lt;/p&gt;

&lt;p&gt;Side note: If I could have a do-over of my job search, I would be more persistent about finding out the salary &lt;em&gt;before&lt;/em&gt; doing a technical exercise, so as not to do so many of them. Remember what I said earlier about asking for the salary range in the first interview? I was a bit lax on that until the last weeks of my job search. At least now you get to learn more about technical exercises‚Ä¶&lt;/p&gt;

&lt;p&gt;Here are the five technical exercises that I did, one for each company.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A take-home exercise where I built a Rails app that provides a user-friendly search interface to an API, and shows the search results. No time limit was given.&lt;/li&gt;
  &lt;li&gt;A take-home exercise where I built a Rails API based on a JSON dataset. I was asked to spend one hour on it. Bonus points were given if I wrote automated tests.&lt;/li&gt;
  &lt;li&gt;A timed (two-hour) HackerRank take-home exercise where I wrote a Ruby script that gets data from an API, processes it, and outputs the results to a file according to specifications given in the instructions. Automated tests were also provided, so that my goal was to make the tests pass.&lt;/li&gt;
  &lt;li&gt;A one-hour live coding exercise where I got partway through solving the &lt;a href=&quot;https://kata-log.rocks/gilded-rose-kata&quot;&gt;Gilded Rose Kata&lt;/a&gt; in Ruby. In this version of the kata, automated tests were provided for me in order to save time. Again, my goal was to make the tests pass.&lt;/li&gt;
  &lt;li&gt;A half-hour live coding exercise where I wrote a command-line hangman game in Ruby.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are a few skills that I could tell the interviewers were looking for:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Code readability,&lt;/strong&gt; which involves naming things well, using object-oriented design, and avoiding &lt;a href=&quot;https://refactoring.guru/refactoring/smells&quot;&gt;code smells&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Refactoring&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&quot;https://www.codewithjason.com/program-feedback-loops/&quot;&gt;short feedback loops&lt;/a&gt;&lt;/strong&gt; were important in both live coding exercises.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Automated testing.&lt;/strong&gt; After the first two take-home exercises listed above, interviewers appreciated that I wrote tests even though it wasn‚Äôt required, and in two of the other three exercises I had to interact with pre-written tests.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Getting a lot done.&lt;/strong&gt; This is a catch-all for being fluent enough in Ruby and Rails to build something in a short amount of time. For take-home exercises where no time limit is given, the reality is that ‚Äúgetting a lot done‚Äù means spending a lot of time on the exercise. If possible, choose a weekend or a less-busy-than-average few days where you can dedicate large blocks of time to it. If you have time, write on your blog or in the GitHub README about how you did the project. &lt;a href=&quot;/posts/2022/doctor-lookup-health-provider-search-tool&quot;&gt;Here‚Äôs my blog post&lt;/a&gt; about how I did the first take-home exercise listed above.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you‚Äôre wondering how to build up these skills, take a look at &lt;a href=&quot;/posts/2021/review-ruby-and-rails-for-job-interview&quot;&gt;the Ruby and Rails review reading list&lt;/a&gt; which I‚Äôve recently been working through. &lt;a href=&quot;https://github.com/fpsvogel/learn-ruby-and-cs&quot;&gt;My study guide&lt;/a&gt; has a fuller list of resources.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Going into the job search, I had grim expectations for what lay ahead. I hadn‚Äôt heard good things about the junior job market in Ruby. But I was pleasantly surprised in a couple of ways:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I got an interview at every company that I applied to, except one.&lt;/li&gt;
  &lt;li&gt;My job search lasted only two months.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the other hand, I see how my job search could easily have taken longer, since most junior positions don‚Äôt pay as much as I was looking for.&lt;/p&gt;

&lt;p&gt;The most difficult parts of the job search were how much was expected on my resume, how intentionally I had to ask questions in interviews, and how nerve-racking the technical exercises were. If you‚Äôre a junior Rails job-seeker yourself, I hope you‚Äôll find some use in my notes above on each of these areas. Good luck on your job search!&lt;/p&gt;

&lt;h2 id=&quot;appendix-why-a-junior-role&quot;&gt;Appendix: Why a junior role?&lt;/h2&gt;

&lt;p&gt;Junior roles are a funny thing. Most people appreciate why they exist, but I‚Äôve also sensed an undercurrent of contempt for them. I‚Äôm not saying most developers bash on junior roles. Nine times out of ten, I got helpful replies when I asked people for tips or leads about junior/entry-level jobs.&lt;/p&gt;

&lt;p&gt;What I mean is that it‚Äôs common to admire developers who skipped being a junior and figured everything out ‚Äúin the real world.‚Äù Some people take this admiration so far that they discount junior roles entirely. I‚Äôve been told that I‚Äôm ‚Äúprojecting a position of weakness‚Äù by saying that I‚Äôm looking for a junior role, and that I should instead build a product and start my own company so that maybe in a year &lt;em&gt;I‚Äôll&lt;/em&gt; be the boss hiring people.&lt;/p&gt;

&lt;p&gt;(Ôø£(„Ç®)Ôø£)„Çû&lt;/p&gt;

&lt;p&gt;Let‚Äôs set aside the facts that I don‚Äôt want to start my own company, I do try to convey competence and not helplessness to potential employers, and I don‚Äôt need &lt;em&gt;and am not looking for&lt;/em&gt; extra hand-holding on every little thing‚ÄîI am self-taught, after all.&lt;/p&gt;

&lt;p&gt;Those facts aside, here‚Äôs why I applied to junior roles almost exclusively:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Because that‚Äôs how I think I‚Äôll grow the most.&lt;/strong&gt; I was a teacher in my previous career, so I appreciate the power of learning by example. As a new developer, I‚Äôll learn most quickly and most thoroughly if I‚Äôm working with experienced developers who exemplify best practices. I could probably (painfully) learn all the same things on my own over time, but it would take much longer. So I don‚Äôt believe I‚Äôm holding myself back by going for a junior role‚Äîquite the opposite.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Because I didn‚Äôt have time to apply to everything.&lt;/strong&gt; During the job hunt I was already working a full-time job in order to pay the bills. Also, I spent most of my free time filling in the gaps on my resume, which I felt was a better use of time than filling out dozens of long-shot applications for mid-level positions. Even the few applications that I did undergo were time-consuming in themselves, due to their sometimes long process of multiple interviews plus a take-home programming exercise. So I wanted to maximize my chances of getting a job by applying to my top (and most realistic) choices while continually improving my resume. This approach was also a lot more enjoyable than making job applications my new default evening activity.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But one time I did apply for a mid-level position with not-too-daunting qualifications. It didn‚Äôt turn out well. I passed the recruiter interview and the technical exercise, only to be shut down a few minutes into an interview with the CEO and lead developer, when they realized I was looking for my first programming job. I‚Äôm sure this only happened because of poor preparation on their part, but still I couldn‚Äôt help being discouraged from spending more of my limited free time on mid-level applications.&lt;/p&gt;

&lt;p&gt;Also, I didn‚Äôt apply for just &lt;em&gt;any&lt;/em&gt; junior position. I wanted to find a job where I could stay for a good long while, so I ended up &lt;em&gt;not&lt;/em&gt; applying for most junior positions that I ran across.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I stayed away from internships, contracts, and other temporary or low-pay arrangements.&lt;/li&gt;
  &lt;li&gt;I stayed away from tiny startups where I would be the only developer‚Äîthat‚Äôs not a junior role.&lt;/li&gt;
  &lt;li&gt;I stayed away from positions that involved other backend frameworks besides Rails. I‚Äôd like to stick to Ruby, at least on the backend, because that‚Äôs what I most enjoy.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So yes, I looked for a junior position and I‚Äôm proud of it!&lt;/p&gt;</content><author><name>Felipe Vogel</name></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://fpsvogel.com/images/theme/social.jpg"/><media:content medium="image" url="https://fpsvogel.com/images/theme/social.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">Doctor Lookup</title><link href="https://fpsvogel.com/posts/2022/doctor-lookup-health-provider-search-tool" rel="alternate" type="text/html" title="Doctor Lookup"><published>2022-01-10T00:00:00-05:00</published><updated>2022-01-10T00:00:00-05:00</updated><id>repo://posts.collection/_posts/2022-01-10-doctor-lookup-health-provider-search-tool.md</id><content type="html" xml:base="https://fpsvogel.com/posts/2022/doctor-lookup-health-provider-search-tool">&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#a-test-centered-approach-as-usual&quot;&gt;A test-centered approach, as usual&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#new-things-i-did-in-this-app&quot;&gt;New things I did in this app&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#wrangling-the-api-part-1-getting-a-list-of-specialties&quot;&gt;Wrangling the API, part 1: getting a list of specialties&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#wrangling-the-api-part-2-searching-by-entire-specialty&quot;&gt;Wrangling the API, part 2: searching by entire specialty&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;UPDATE 2022-10-18: A kind reader has pointed out that searching by specialty no longer returns any results. I dug into it a bit and found that the rules of the NPI API has changed in ways that I don‚Äôt understand. &lt;a href=&quot;https://npiregistry.cms.hhs.gov/api/?taxonomy_description=Family%20Medicine&amp;amp;version=2.1&quot;&gt;A query specifying only the specialty&lt;/a&gt; works, but &lt;a href=&quot;https://npiregistry.cms.hhs.gov/api/?enumeration_type=NPI-1&amp;amp;taxonomy_description=Family%20Medicine&amp;amp;version=2.1&quot;&gt;a query with an added parameter&lt;/a&gt; to limit results to individuals (as opposed to organizations) doesn‚Äôt work anymore. &lt;a href=&quot;https://npiregistry.cms.hhs.gov/api/?taxonomy_description=Family%20Medicine&amp;amp;first_name=John&amp;amp;last_name=Smith&amp;amp;version=2.1&quot;&gt;A query with specialty and other parameters&lt;/a&gt; also doesn‚Äôt work anymore. I don‚Äôt see any clues about this change on &lt;a href=&quot;https://npiregistry.cms.hhs.gov/api-page&quot;&gt;the API‚Äôs help page&lt;/a&gt;. Hmm‚Ä¶ life beckons, so I‚Äôm going to leave this as an exercise for the reader üòÇ&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Last month I built three little apps to improve my Rails testing skills. As part of a job application, I‚Äôve now built a fourth: &lt;a href=&quot;https://doctorlookup.herokuapp.com/&quot;&gt;Doctor Lookup&lt;/a&gt;, a tool for finding doctors and other healthcare providers in the U.S. &lt;a href=&quot;https://github.com/fpsvogel/doctorlookup&quot;&gt;Here‚Äôs the GitHub repo.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before I get more into Doctor Lookup, here are my posts on last month‚Äôs little apps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/posts/2021/pass-the-story-collaborative-writing-game&quot;&gt;A ‚ÄúPass the Story‚Äù collaborative writing game&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/posts/2021/wikipedia-explorer-discover-articles-like-stumbleupon&quot;&gt;A StumbleUpon-style Wikipedia explorer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/posts/2021/gpt3-ai-story-writer&quot;&gt;An AI story writer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a-test-centered-approach-as-usual&quot;&gt;A test-centered approach, as usual&lt;/h2&gt;

&lt;p&gt;As I built Doctor Lookup, I followed the same basic process from last month‚Äôs lightning apps. Here is that process, in a nutshell:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Test my code as I write it, not as an afterthought. I used RSpec and wrote model and system specs.&lt;/li&gt;
  &lt;li&gt;Use a minimalist CSS framework to speed up frontend development. This time I used &lt;a href=&quot;https://picocss.com/&quot;&gt;Pico&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Avoid using the database if it‚Äôs not necessary, just to keep things simple. In this case I did forgo the database, because the important features of a lookup tool don‚Äôt require users or other persisted models. (The search results are shown dynamically with Turbo Streams, without the need to store them between requests.)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;new-things-i-did-in-this-app&quot;&gt;New things I did in this app&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Mixed &lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveModel::Model&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveModel::Attributes&lt;/code&gt; into a PORO model to give it ActiveRecord-like behavior, so that I can validate input entered into the search form and show form errors, even though I‚Äôm not creating a record in the database.&lt;/li&gt;
  &lt;li&gt;Wrote a &lt;a href=&quot;https://api.rubyonrails.org/classes/ActiveSupport/Concern.html&quot;&gt;Concern&lt;/a&gt; to DRY up some models.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Almost&lt;/em&gt; solved a CSS problem that I occasionally run into, namely converting a hex color variable into RGB format (in order to set its opacity). The solution is &lt;a href=&quot;https://blog.jim-nielsen.com/2021/css-relative-colors&quot;&gt;relative CSS colors&lt;/a&gt;, and it‚Äôs coming soon to a browser near you.&lt;/li&gt;
  &lt;li&gt;Used Turbo Streams to show results dynamically, as I mentioned above. I‚Äôve used Stimulus and Turbo Frames in previous projects, so now I‚Äôm familiar with each major piece of Hotwire.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;wrangling-the-api-part-1-getting-a-list-of-specialties&quot;&gt;Wrangling the API, part 1: getting a list of specialties&lt;/h2&gt;

&lt;p&gt;I‚Äôve learned that working with APIs often means working &lt;em&gt;around&lt;/em&gt; them, and this was no exception. Doctor Lookup uses the &lt;a href=&quot;https://npiregistry.cms.hhs.gov/registry/help-api&quot;&gt;NPI API&lt;/a&gt;, which I found to be mostly convenient but troublesome in a few areas. First I noticed that the API sometimes returns duplicate addresses that need to be merged, then I had to implement a gender filter apart from the API (because it does not provide a &lt;code class=&quot;highlighter-rouge&quot;&gt;gender&lt;/code&gt; parameter).&lt;/p&gt;

&lt;p&gt;But the biggest, nastiest shortcomings of the API by far are related to taxonomy descriptions, a.k.a. specialties. Usually when someone is looking for a doctor, they‚Äôre looking for a specific type of doctor, so I think it‚Äôs important to have a ‚ÄúSpecialty‚Äù field in the app‚Äôs search form.&lt;/p&gt;

&lt;p&gt;At first glance, this seemed straightforward to implement. The API takes a &lt;code class=&quot;highlighter-rouge&quot;&gt;taxonomy_description&lt;/code&gt; parameter, one or more search terms that it attempts to match with the description of a taxonomy code, which signifies a particular specialty of medical practice. Since the API doesn‚Äôt require an exact match, technically it would work for the user to simply type in their best guess at a specialty that the API would recognize. However, the average user would probably want some guidance on what the specialties actually are, so ideally the user could choose from and/or type into a hybrid text/select field. I found that UI element ready-made in &lt;a href=&quot;https://selectize.dev/demos/2015/01/01/single-item-select/&quot;&gt;Selectize&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Side note: given a bit more time, I would improve on the UI by making multi-select possible. This would be useful because a user might want to search for doctors in any of several related specialties. I could make a multi-select field in one of two ways:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Selectize actually has a multi-select mode, but only one option ever comes through in the form data. So I would need to find a way to hook into the form submission event, grab all the selected items from the Selectize API, and insert them into the data to be submitted.&lt;/li&gt;
  &lt;li&gt;Build it from scratch &lt;a href=&quot;https://thoughtbot.com/blog/hotwire-typeahead-searching&quot;&gt;using Hotwire&lt;/a&gt; or (more suitably, perhaps) by &lt;a href=&quot;https://www.fullstackruby.dev/fullstack-development/2022/01/04/how-ruby-web-components-work-together/&quot;&gt;building a web component&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;UPDATE, June 2022: There are more modern alternatives to Selectize that I missed before, which now would be my first choice: &lt;a href=&quot;https://tom-select.js.org/&quot;&gt;Tom Select&lt;/a&gt; (for which someone has written &lt;a href=&quot;https://gist.github.com/tabishiqbal/dc78239aa5b81b257db0633ace75ecc0&quot;&gt;a Stimulus wrapper&lt;/a&gt;), &lt;a href=&quot;https://slimselectjs.com/&quot;&gt;Slim Select&lt;/a&gt;, and &lt;a href=&quot;https://github.com/Choices-js/Choices&quot;&gt;Choices&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;My dreams of multi-select aside, I now had a working searchable dropdown box. That was the easy part. The hard part was populating it with a list of all the specialties, which, as it turns out, the API does not provide.&lt;/p&gt;

&lt;p&gt;The next best thing would be to download the list manually, but there too I ran into problems. There is an up-to-date CSV file provided on &lt;a href=&quot;https://nucc.org/index.php/code-sets-mainmenu-41/provider-taxonomy-mainmenu-40/csv-mainmenu-57&quot;&gt;this page&lt;/a&gt;, but its descriptions are not quite the same as the descriptions given by the API. For example, the API has a taxonomy code with the description ‚ÄúNurse Practitioner Psych/Mental Health‚Äù, but this same entry in the CSV file is described as ‚ÄúNurse Practitioner‚Äù ‚á® ‚ÄúPsychiatric/Mental Health‚Äù (in two separate columns, and more importantly the second column does not have the ‚ÄúPsych‚Äù abbreviation). &lt;a href=&quot;https://taxonomy.nucc.org/&quot;&gt;The web directory of taxonomy codes&lt;/a&gt; has this same problem.&lt;/p&gt;

&lt;p&gt;Onto the third best solution: find a different web directory that shows the same descriptions as in the API, and then scrape all the descriptions from there. Fortunately &lt;a href=&quot;https://opennpi.com/taxonomy/363LP0808X&quot;&gt;there is such a site&lt;/a&gt;, and before long I‚Äôd scraped up a list of taxonomy descriptions in exactly the same form as they appear in the API.&lt;/p&gt;

&lt;h2 id=&quot;wrangling-the-api-part-2-searching-by-entire-specialty&quot;&gt;Wrangling the API, part 2: searching by entire specialty&lt;/h2&gt;

&lt;p&gt;I thought the worst of it was behind me, but it was then that I noticed another unfortunate limitation of the API. A taxonomy description in the API results, such as ‚ÄúNurse Practitioner Psych/Mental Health,‚Äù contains both the classification (Nurse Practitioner) and specialization (Psych/Mental Health), as I discovered by observing the columns in the CSV mentioned above. But the &lt;code class=&quot;highlighter-rouge&quot;&gt;taxonomy_description&lt;/code&gt; search parameter is the classification &lt;em&gt;or&lt;/em&gt; specialization, not both combined (as in the results).&lt;/p&gt;

&lt;p&gt;In other words, if I‚Äôm looking for nurse practitioners who work in mental health, then I‚Äôm out of luck as far as the API is concerned. I can search for ‚ÄúNurse Practitioner‚Äù and get results of any kind of nurse practitioner, or I can search for ‚ÄúPsych/Mental Health‚Äù and get results of any kind of health worker in mental health (not just nurse practitioners). But if I search for ‚ÄúNurse Practitioner Psych/Mental Health,‚Äù then I get no results back.&lt;/p&gt;

&lt;p&gt;Here‚Äôs the workaround I came up with. When the user searches by a specialty that is just a classification (such as ‚ÄúNurse Practitioner‚Äù), then the app simply passes that along to the API. But when a classification &lt;em&gt;and&lt;/em&gt; and a specialization are both specified, then the app follows this process:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Do a preliminary pair of API calls, one specifying the classification and the other specifying the specialization. Of these two searches, mark the one that returns the most results that we‚Äôre looking for. To use our example from before, if there are more nurse practitioners working in mental health returned in a search for ‚ÄúPsych/Mental Health‚Äù than in a search for ‚ÄúNurse Practitioner,‚Äù then the app will decide that searching for ‚ÄúPsych/Mental Health‚Äù is more effective.&lt;/li&gt;
  &lt;li&gt;Using that more effective approach, the app then does a larger-than-normal search and filters out all extraneous results. In our example, all results are filtered out that do not have the specialty ‚ÄúNurse Practitioner Psych/Mental Health.‚Äù&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Because of these extra steps, there‚Äôs a slight delay in searches where the selected specialty has a specialization, but the payoff is that users will now see only results with the specialty that they asked for, something that the API alone can‚Äôt do.&lt;/p&gt;

&lt;p&gt;Of course, I &lt;em&gt;could&lt;/em&gt; have just left the ‚ÄúSpecialty‚Äù field as a text box and called it a day, using the default behavior of the API. Then I wouldn‚Äôt have had to do all that extra work, and this blog post would be much shorter. But that would have been just too confusing for the user, from start to finish. If the user were to see a ‚ÄúSpecialty‚Äù text field, they would inevitably wonder, ‚ÄúWhat exactly can I write in there?‚Äù And if the user typed in something that the API couldn‚Äôt match with any actual specialties, the user would get no results back, and they would also get frustrated.&lt;/p&gt;

&lt;p&gt;I wanted to avoid this minefield of confusion and frustration for the user, and that‚Äôs why I set out to implement the text/select field for specialties. The end result is much more usable than a plain text field, so I feel that the extra work was not in vain.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;You may be wondering, ‚ÄúWhy did this guy spend so many hours on a programming exercise for a job application? Ew.‚Äù Yeah, I know that a lot of developers don‚Äôt like it when companies ask job applicants to do a programming exercise. In a few years when I have more experience and a busier home life, I will probaby join the chorus of naysayers. But for now I‚Äôm taking each exercise as a learning opportunity. In this case I even get to put another completed project on my resume.&lt;/p&gt;

&lt;p&gt;I don‚Äôt imagine I‚Äôll continue working on Doctor Lookup‚Äîafter all, there are already plenty of good ways out there to find doctors. But I‚Äôm still glad I built it. Not only did I manage to get around some gnarly API limitations, but I also learned a few new tricks that I‚Äôll take back to my more long-term projects.&lt;/p&gt;</content><author><name>Felipe Vogel</name></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://fpsvogel.com/images/theme/social.jpg"/><media:content medium="image" url="https://fpsvogel.com/images/theme/social.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">A ‚ÄúPass the Story‚Äù collaborative writing game</title><link href="https://fpsvogel.com/posts/2021/pass-the-story-collaborative-writing-game" rel="alternate" type="text/html" title="A &quot;Pass the Story&quot; collaborative writing game"><published>2021-12-30T00:00:00-05:00</published><updated>2021-12-30T00:00:00-05:00</updated><id>repo://posts.collection/_posts/2021-12-30-pass-the-story-collaborative-writing-game.md</id><content type="html" xml:base="https://fpsvogel.com/posts/2021/pass-the-story-collaborative-writing-game">&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#new-things-i-did-in-this-app&quot;&gt;New things I did in this app&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#building-up-testing-habits&quot;&gt;Building up testing habits&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-verdict-will-i-continue-work-on-this-app&quot;&gt;The verdict: will I continue work on this app?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This month I‚Äôve been building little apps to improve my Rails testing skills. My latest is &lt;a href=&quot;https://storytoss.herokuapp.com/&quot;&gt;Story Toss&lt;/a&gt;, a variation on the game ‚ÄúPass the Story,‚Äù where each player writes a bit of a story and then passes it on the next player‚Äîin this case, any other user who wants to continue the story. &lt;a href=&quot;https://github.com/fpsvogel/storytoss&quot;&gt;Here‚Äôs the GitHub repo.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Surprisingly, there is no existing app implementation of the game that I could find. There is the related site &lt;a href=&quot;http://foldingstory.com/&quot;&gt;FoldingStory&lt;/a&gt;, but there players can‚Äôt see the whole story when adding on to it, only the most recent bit. This has amusing results, but I wanted to build a game where players could make more informed decisions when continuing a story.&lt;/p&gt;

&lt;p&gt;Also, I added a twist to the game: players can write alternative continuations to a story at any point, creating a new braching storyline. Other players can then vote on which continuation they like better, while still adding further continuations to any of the competing story branches. The story branch with the most votes becomes the one shown by default. This way, players can explore different possible outcomes of a story, and trolls can‚Äôt ruin a great story by derailing it.&lt;/p&gt;

&lt;h2 id=&quot;new-things-i-did-in-this-app&quot;&gt;New things I did in this app&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Used Turbo Frames to dynamically show a ‚ÄúContinue the story‚Äù form on the same page, and to dynamically update a total score after the user presses a ‚ÄúLike‚Äù or ‚ÄúDislike‚Äù button.&lt;/li&gt;
  &lt;li&gt;Wrote a lot more tests this time around because of the more numerous models and more complex UI.&lt;/li&gt;
  &lt;li&gt;Put testing front and center in my development process. This is different from the last point because I could have written a lot of tests, but only as an afterthought. However, this time I consciously avoided doing that. Last time I wasn‚Äôt so successful in this because I had to work around &lt;a href=&quot;/posts/2021/wikipedia-explorer-discover-articles-like-stumbleupon#the-technical-challenge&quot;&gt;challenging APIs&lt;/a&gt; to implement one large feature, which made it hard to test that feature until near the end when I saw that my approach had a decent chance of working. In contrast, this app is made up of many different features, making it a better training ground for building up testing habits.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;building-up-testing-habits&quot;&gt;Building up testing habits&lt;/h2&gt;

&lt;p&gt;I‚Äôve just finished reading Jason Swett‚Äôs &lt;a href=&quot;https://www.codewithjason.com/complete-guide-to-rails-testing/&quot;&gt;Complete Guide to Rails Testing&lt;/a&gt;. As someone who was most familiar with Minitest in pure Ruby projects, I found Jason‚Äôs book to be perfect for getting up to speed with Rails testing using RSpec. It was also a great book on testing more generally, which is rare because in my experience, books on testing tend to be overwhelming. Do I really need to write six different kinds of tests?? Why would I need five different kinds of test doubles? Maybe this overabundance of categories and terminology is useful in large projects, but they‚Äôre counterproductive for someone just starting out.&lt;/p&gt;

&lt;p&gt;I love Jason‚Äôs book because it‚Äôs the opposite: it lays out a refreshingly simple approach that makes testing enjoyable rather than painful and confusing. I also found helpful articles on Factory Bot &lt;a href=&quot;https://semaphoreci.com/blog/2014/01/14/rails-testing-antipatterns-fixtures-and-factories.html&quot;&gt;antipatterns&lt;/a&gt; and &lt;a href=&quot;https://thoughtbot.com/blog/use-factory-girls-build-stubbed-for-a-faster-test&quot;&gt;performance optimizations&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks to my previous lightning apps, I‚Äôd already ironed out the technical details of my RSpec setup (Capybara, Factory Bot, and WebMock + VCR if necessary). So now it was time to bring it all together and make testing a central part of my development process. Previously I learned to do this in my pure Ruby projects, but not yet in my more recent Rails projects, and that‚Äôs why I‚Äôve been building these little apps, of which Story Toss is the third and final one. It was time for the ultimate showdown.&lt;/p&gt;

&lt;p&gt;Against lurking bugs and their accomplice my old alter ego (let‚Äôs call him Codeslinger, a cowboy who shoots balls of mud), I‚Äôm happy to say I prevailed. Using a test-centric development process, I built an app quickly and smoothly, without any long debugging sessions, without time lost to manual testing, and with much more peace of mind than I would have had otherwise. These benefits will only multiply the longer I work on the app.&lt;/p&gt;

&lt;p&gt;Here are the testing rules of thumb that I set for myself:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;When I add a feature, write tests for it before working on anything else.&lt;/li&gt;
  &lt;li&gt;Don‚Äôt commit before writing tests or making sure the change is covered by existing tests. I made exceptions to this rule at the beginning and end of the project, when I was working mostly in the views and it didn‚Äôt make sense to write system specs (integration tests) until after several interrelated features were finished.&lt;/li&gt;
  &lt;li&gt;When I‚Äôm building a model, use TDD as much as possible.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By the end of the project, these rules felt less like rules and more like just plain writing code. I didn‚Äôt have to remind myself as often to write tests before committing, because the habit of testing had become a more seamless part my development process. And the more I did it, the more grateful I was that I‚Äôd done so: more than once an obscure bug came up that I found within just a few minutes, thanks to my tests. I shudder to think of the hours it might otherwise have taken me to track down those bugs.&lt;/p&gt;

&lt;h2 id=&quot;the-verdict-will-i-continue-work-on-this-app&quot;&gt;The verdict: will I continue work on this app?&lt;/h2&gt;

&lt;p&gt;For each of these lightning apps, I‚Äôve taken a moment at the end to decide whether or not it‚Äôs worth continuing as a hobby project.&lt;/p&gt;

&lt;p&gt;I‚Äôm honestly not sure about Story Toss. I doubt I‚Äôll use it regularly myself, which is my main motivator for continuing to develop a personal project. There are lots of new features I &lt;em&gt;could&lt;/em&gt; add, such as a user profile page, a user scoreboard, and AI-generated continuations to bring stale unfinished stories back to life.&lt;/p&gt;

&lt;p&gt;In any case, I‚Äôm glad I built the app because it served as an excellent capstone project for my recent dive into Rails testing and RSpec. Now I can return to &lt;a href=&quot;/posts/2021/wikipedia-explorer-discover-articles-like-stumbleupon&quot;&gt;Wiki Stumble&lt;/a&gt;, my favorite of the lightning app trio, and expand it following the habits I‚Äôve strengthened here.&lt;/p&gt;</content><author><name>Felipe Vogel</name></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://fpsvogel.com/images/theme/social.jpg"/><media:content medium="image" url="https://fpsvogel.com/images/theme/social.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">A StumbleUpon-style Wikipedia explorer</title><link href="https://fpsvogel.com/posts/2021/wikipedia-explorer-discover-articles-like-stumbleupon" rel="alternate" type="text/html" title="A StumbleUpon-style Wikipedia explorer"><published>2021-12-16T00:00:00-05:00</published><updated>2021-12-16T00:00:00-05:00</updated><id>repo://posts.collection/_posts/2021-12-16-wikipedia-explorer-discover-articles-like-stumbleupon.md</id><content type="html" xml:base="https://fpsvogel.com/posts/2021/wikipedia-explorer-discover-articles-like-stumbleupon">&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#new-things-i-did-in-this-app&quot;&gt;New things I did in this app&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-technical-challenge&quot;&gt;The technical challenge&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-verdict-will-i-continue-work-on-this-app&quot;&gt;The verdict: will I continue work on this app?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Occasionally I get the urge to read Wikipedia. Not on a particular topic, just‚Ä¶ whatever is out there. But how can a person explore Wikipedia? Here are some existing approaches:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://wikirank.net/&quot;&gt;Most popular articles&lt;/a&gt; in each category. But many of the top articles are about common knowledge, and they don‚Äôt change much over time, so this isn‚Äôt a great way to browse.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Wikipedia:Unusual_articles&quot;&gt;The ‚Äúunusual articles‚Äù list.&lt;/a&gt; It‚Äôs a fun list, but eventually you reach the end of it.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Wikipedia:Featured_articles&quot;&gt;Featured articles&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Wikipedia:Good_articles&quot;&gt;good articles&lt;/a&gt; are also good lists, though a bit overwhelming. An easier approach is &lt;a href=&quot;https://randomincategory.toolforge.org/Featured_articles?site=en.wikipedia.org&quot;&gt;a random featured article&lt;/a&gt; or &lt;a href=&quot;https://randomincategory.toolforge.org/Good_articles?site=en.wikipedia.org&quot;&gt;a random good article&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Wikipedia:Explore&quot;&gt;Wikipedia:Explore&lt;/a&gt; links to several topic-based lists.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://randomincategory.toolforge.org&quot;&gt;The ‚ÄúRandom page in category‚Äù tool.&lt;/a&gt; But its usefulness is limited because of how chaotic Wikipedia‚Äôs categories are. (More on that below.)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://copernix.io/&quot;&gt;A world map&lt;/a&gt; showing geographically-placed articles.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What I really wanted, though, was a way to get personalized recommendations of articles, like &lt;a href=&quot;https://en.wikipedia.org/wiki/StumbleUpon&quot;&gt;StumbleUpon&lt;/a&gt; but for Wikipedia. That way I could avoid some of the hit-or-miss results of browsing random articles, and I wouldn‚Äôt have to wade through topic lists either.&lt;/p&gt;

&lt;p&gt;So I‚Äôve built &lt;a href=&quot;https://wikistumble.herokuapp.com/&quot;&gt;Wiki Stumble&lt;/a&gt;, a little app that suggests Wikipedia articles based on user-selected categories and also based on the user‚Äôs reaction (thumbs up or down) to previous recommendations. &lt;a href=&quot;https://github.com/fpsvogel/wikistumble&quot;&gt;Here‚Äôs the GitHub repo.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is my second ‚Äúlightning app‚Äù this month, so named because I‚Äôm making them in the spare hours of a day or two each. In the end I‚Äôll choose one or two to continue expanding while I learn better Rails testing skills. These lightning apps are simple and intentionally leave out a lot of features, but I‚Äôm still trying to do something new in each one.&lt;/p&gt;

&lt;h2 id=&quot;new-things-i-did-in-this-app&quot;&gt;New things I did in this app&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Used the Wikipedia APIs.&lt;/li&gt;
  &lt;li&gt;Wrote more tests this time around, again using RSpec. (I‚Äôve mostly used Minitest until recently.) I wrote most of my tests toward the end, because for this app I wasn‚Äôt sure how I would implement the main feature and how it could be tested, until I actually tried building it (more on that below). Still, I have plently of tests now, and I did manage to &lt;a href=&quot;https://github.com/fpsvogel/wikistumble/commit/4281145325268afc0d56d1c4c8cb95f6836643e4#diff-b86f796c2cf34f7b413473d8caa19b6b0701757729fe74008aa8d6ee97621bbb&quot;&gt;sneak in some TDD&lt;/a&gt; for &lt;a href=&quot;https://github.com/fpsvogel/wikistumble/commit/b19fb40f31e2123e6939a2f2a4040e466328979c#diff-b86f796c2cf34f7b413473d8caa19b6b0701757729fe74008aa8d6ee97621bbb&quot;&gt;improvements toward the end&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Gave Bootstrap another chance. I‚Äôve &lt;a href=&quot;https://github.com/vinorodrigues/bootstrap-dark-5#method-4&quot;&gt;avoided it in recent projects&lt;/a&gt;, but I wanted to try it again; after all, I already know my around Bootstrap, so the learning curve would not be an issue. After I &lt;a href=&quot;https://bootswatch.com/help/&quot;&gt;installed a Bootstrap theme&lt;/a&gt; for a slightly less generic look, I tackled one of Bootstrap‚Äôs big deficiencies: the lack of a dark mode. I &lt;a href=&quot;https://github.com/vinorodrigues/bootstrap-dark-5#method-4&quot;&gt;followed this guide&lt;/a&gt;, but in the end I abandoned the effort because it was giving me too many problems. Someday when Bootstrap finally includes a built-in dark mode, I might use it in a personal project. For now, I chose &lt;a href=&quot;https://www.getpapercss.com&quot;&gt;PaperCSS&lt;/a&gt; again.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-technical-challenge&quot;&gt;The technical challenge&lt;/h2&gt;

&lt;p&gt;Unlike my first lightning app, which was nothing more than a simple interface to an API, this second app posed a real challenge: how to retrieve Wikipedia articles based on category preferences? You‚Äôd think it would be straightforward, just a matter of an API call to get a random article within a set of given categories. But it is not so simple, for two reasons.&lt;/p&gt;

&lt;p&gt;First, the Wikipedia API has endpoints for retrieving a specific page and a random page, but nothing in between. The &lt;a href=&quot;https://randomincategory.toolforge.org&quot;&gt;random page in category&lt;/a&gt; tool fills the gap somewhat, but it is slower than the API. There is an API endpoint for getting an article‚Äôs categories (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;https://en.wikipedia.org/w/api.php?format=json&amp;amp;action=query&amp;amp;prop=categories&amp;amp;titles=Chartwell&amp;amp;clshow=!hidden&amp;amp;cllimit=100&lt;/code&gt;), which might have been useful, except there‚Äôs the other problem‚Ä¶&lt;/p&gt;

&lt;p&gt;Wikipedia‚Äôs categories are a mess. An article‚Äôs categories are usually very specific and therefore useless, and the only way to get more general categories for an article is to traverse the category graph upward. But since the graph is not a tree or even a &lt;a href=&quot;https://en.wikipedia.org/wiki/Directed_acyclic_graph&quot;&gt;DAG&lt;/a&gt;, you would need to come up with a complicated and time-consuming algorithm to do this. &lt;a href=&quot;https://stackoverflow.com/a/65859846/4158773&quot;&gt;Here‚Äôs someone‚Äôs valiant attempt.&lt;/a&gt; No, thanks.&lt;/p&gt;

&lt;p&gt;The surprising answer to this conundrum was not far away‚Äî&lt;a href=&quot;https://stackoverflow.com/a/65801715/4158773&quot;&gt;just below that same StackOverflow answer&lt;/a&gt;, in fact. Evidently, Wikimedia uses AI to analyze each article and guess at its general categories, using a different taxonomy than Wikipedia‚Äôs categories. These category predictions are conveniently accessible via an API, and they are a crucial part of how Wiki Stumble works. When the user presses ‚ÄúNext article‚Äù, here‚Äôs what the app does:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Get several random articles over the Wikipedia REST API. The exact number of requested articles varies, depending on whether the app finds a good match soon or not. (Also, if the user has chosen to see only Good or Featured articles, then the app takes the extra step of getting article URLs using the ‚Äúrandom page in category‚Äù tool.)&lt;/li&gt;
  &lt;li&gt;Get these articles‚Äô category predictions via the ORES API.&lt;/li&gt;
  &lt;li&gt;Choose a best match by comparing each article‚Äôs predicted categories to the user‚Äôs category preferences, which the user has previously expressed either by choosing some starter categories, or by giving feedback (thumbs up or down) to previously recommended articles, or both.&lt;/li&gt;
  &lt;li&gt;Show the best-matching article to the user.&lt;/li&gt;
  &lt;li&gt;If the user gives a thumbs up or down to the article, then adjust the user‚Äôs category preferences with a +1 or -1 to the article‚Äôs predicted categories.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is a lot of back-and-forth using several APIs, but still the app is reasonably fast, and certainly a lot faster than using the ‚Äúrandom page‚Äù links, with their frequent duds that you‚Äôre not interested in.&lt;/p&gt;

&lt;h2 id=&quot;the-verdict-will-i-continue-work-on-this-app&quot;&gt;The verdict: will I continue work on this app?&lt;/h2&gt;

&lt;p&gt;Yes, I will. I abandoned &lt;a href=&quot;/posts/2021/gpt3-ai-story-writer&quot;&gt;my first lightning app&lt;/a&gt; because after the proof-of-concept stage I didn‚Äôt have a strong sense of where to take it next, or what value it would provide other than pure entertainment that can already be had on other similar sites. Plus, even that value was provided not by my app, but by the GPT-3 API for which my app was merely a convenient interface‚Äîand in the long run I would have to pay to use that API. But this time, I‚Äôm solving a problem in a way that no one else has done (as far as I know), and the app provides clear value in improved access to knowledge, all while using Wikipedia‚Äôs free API.&lt;/p&gt;

&lt;p&gt;Also, this time I more clearly see what features need to be added on to this minimal proof of concept. Just to name a few:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;User accounts to save personalization data and liked articles.&lt;/li&gt;
  &lt;li&gt;A better way to choose starter categories, because writing them into a text field is a little clunky.&lt;/li&gt;
  &lt;li&gt;More fine-grained control over a user‚Äôs category preferences, in case the user wants to manually edit them.&lt;/li&gt;
  &lt;li&gt;Faster tests. Currently my system tests make real API calls, which makes them slow. &lt;em&gt;UPDATE: I finished reading Jason Swett‚Äôs &lt;a href=&quot;https://www.codewithjason.com/complete-guide-to-rails-testing/&quot;&gt;Complete Guide to Rails Testing&lt;/a&gt;, which &lt;a href=&quot;https://www.codewithjason.com/vcr-webmock-hello-world-tutorial/&quot;&gt;taught me how to use WebMock and VCR&lt;/a&gt; to speed up my system tests. Now they take just one second instead of half a minute. &lt;a href=&quot;https://github.com/fpsvogel/wikistumble/commit/2609a345c034174cc54b708f5711034ebae1a0ea&quot;&gt;Here‚Äôs the commit.&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But first, on to the third (and final) lightning app!&lt;/p&gt;</content><author><name>Felipe Vogel</name></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://fpsvogel.com/images/theme/social.jpg"/><media:content medium="image" url="https://fpsvogel.com/images/theme/social.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">An AI story writer</title><link href="https://fpsvogel.com/posts/2021/gpt3-ai-story-writer" rel="alternate" type="text/html" title="An AI story writer"><published>2021-12-14T00:00:00-05:00</published><updated>2021-12-14T00:00:00-05:00</updated><id>repo://posts.collection/_posts/2021-12-14-gpt3-ai-story-writer.md</id><content type="html" xml:base="https://fpsvogel.com/posts/2021/gpt3-ai-story-writer">&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#new-things-i-did-in-this-app&quot;&gt;New things I did in this app&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#gpt-3&quot;&gt;GPT-3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-verdict-will-i-continue-work-on-this-app&quot;&gt;The verdict: will I continue work on this app?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#appendix-example-stories&quot;&gt;Appendix: example stories&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;It was the year 2121. It was a post-apocalyptic world. Zombies crowded around my house. One started pounding at my front door. I huddled in the corner of my living room, too terrified to move.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is the default story starter in &lt;a href=&quot;https://storydroid.herokuapp.com/&quot;&gt;Story Droid&lt;/a&gt;, a little app I built as I started reading Jason Swett‚Äôs &lt;a href=&quot;https://www.codewithjason.com/complete-guide-to-rails-testing/&quot;&gt;Complete Guide to Rails Testing&lt;/a&gt;. I needed a throwaway app where I could apply my new testing skills, and this was my first idea. &lt;a href=&quot;https://github.com/fpsvogel/storydroid&quot;&gt;Here‚Äôs the GitHub repo.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have a couple other ideas, though, so I‚Äôm making this a three-part series on ‚Äúlightning apps‚Äù, so named because I built this first one in the spare hours of a single day, with minor improvements and fixes in the few days following. I‚Äôll try to do the same with the next two. In the end, I‚Äôll have built three little apps, and I‚Äôll pick one or two to expand with more features and more tests. As I build each one, I‚Äôll post on what new things I‚Äôve done in each app.&lt;/p&gt;

&lt;h2 id=&quot;new-things-i-did-in-this-app&quot;&gt;New things I did in this app&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Wrote tests in RSpec. So far I had only used Minitest.&lt;/li&gt;
  &lt;li&gt;Set up Capybara for system tests, using &lt;a href=&quot;https://www.zagaja.com/2019/02/rspec-headless-chrome-capybara/&quot;&gt;this guide&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Used the delightful &lt;a href=&quot;https://www.getpapercss.com/&quot;&gt;PaperCSS&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Set up reCAPTCHA using the gem &lt;a href=&quot;https://github.com/igorkasyanchuk/new_google_recaptcha&quot;&gt;new_google_recaptcha&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Used OpenAI‚Äôs GPT-3 API for text generation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;gpt-3&quot;&gt;GPT-3&lt;/h2&gt;

&lt;p&gt;More on that last point: recently I‚Äôve been fascinated by the latest AI-powered storytelling tools. They are powered by OpenAI‚Äôs GPT-3, which has written some impressive stuff:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://aiwrotethis.substack.com/&quot;&gt;Short stories&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://dean.dog/shel-silverstein-gpt3/&quot;&gt;Poems in the style of Shel Silverstein&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gwern.net/GPT-3#beowulf-wodehouse&quot;&gt;Beowulf as translated by P. G. Wodehouse&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gwern.net/GPT-3#devils-dictionary-of-science&quot;&gt;Entries for ‚ÄúA Devil‚Äôs Dictionary of Science‚Äù&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pastebin.com/ZiQJT061&quot;&gt;A conversation with the AI&lt;/a&gt; where it is eerily human-like&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The stories that the AI writes in my app are pretty silly compared with these, but I was pleased with the results considering the simplicity of my app. Below I include a couple of example stories from my app, but first‚Ä¶&lt;/p&gt;

&lt;h2 id=&quot;the-verdict-will-i-continue-work-on-this-app&quot;&gt;The verdict: will I continue work on this app?&lt;/h2&gt;

&lt;p&gt;No, I don‚Äôt think so. OpenAI‚Äôs API is free only for a limited time, and I‚Äôm not sure my use case justifies the cost, either to me or the environment (these AIs use a lot of power). Plus, there are already other apps that do the same thing but with more options, such as &lt;a href=&quot;https://sassbook.com/ai-writer&quot;&gt;Sassbook AI Writer&lt;/a&gt; and &lt;a href=&quot;https://play.aidungeon.io/main/home&quot;&gt;AI Dungeon&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;appendix-example-stories&quot;&gt;Appendix: example stories&lt;/h2&gt;

&lt;p&gt;Here are two stories that GPT-3 wrote in my app, both using the same starting text (in bold here).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;It was the year 2121. It was a post-apocalyptic world. Zombies crowded around my house. One started pounding at my front door. I huddled in the corner of my living room, too terrified to move.&lt;/strong&gt; I didn‚Äôt know what to do. I was sure that I was going to die. Then, a beam of light shot down from the sky. It was an angel! The angel was wearing a white robe, and a halo was floating above his head. He was glowing like a lightbulb. He said to me, ‚ÄúYou are the Chosen One. You are the only one who can save the world from the zombie apocalypse. You must travel to the center of the Earth and destroy the zombies‚Äô source of power. Only then will they be defeated. You must hurry, for time is running out.‚Äù I was really surprised. I was just an ordinary guy, and I didn‚Äôt know anything about fighting zombies. But then I remembered that I had a magic sword in my basement. I had bought it at a garage sale for just one dollar. The magic sword was the most powerful sword in the world. I was sure that it would be able to destroy the zombies‚Äô source of power. I was ready to go. I grabbed my magic sword, and I set off for the center of the Earth. It was a long journey. I didn‚Äôt have a car, so I had to walk. It took me three days to get to the center of the Earth. Along the way, I had to fight zombies. It was very difficult. I had to use my magic sword to fight them. But I was able to defeat them all. Finally, I made it to the center of the Earth. There was a volcano there. I knew that it was the zombie‚Äôs source of power. I climbed up the side of the volcano. I was surrounded by zombies. I was going to fight them all by myself. I was scared, but I knew that I had to do it. I climbed up to the top of the volcano. I was surrounded by zombies. I knew that I was going to die. I had to do something. I had to fight. I swung my magic sword and cut off the head of the zombie king.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My second story went a little bit off track‚Ä¶&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;It was the year 2121. It was a post-apocalyptic world. Zombies crowded around my house. One started pounding at my front door. I huddled in the corner of my living room, too terrified to move.&lt;/strong&gt; Suddenly, a loud boom echoed, and the zombie crumpled to the ground. I looked up, and saw a man standing in my doorway. He was in his 20s, and he wore a black cowboy hat and a long, iced-out chain necklace. He had a revolver in his hand. ‚ÄúYou‚Äôre safe now,‚Äù he said. ‚ÄúI‚Äôm here to rescue you.‚Äù He walked over to me, and pulled me to my feet. ‚ÄúWhat‚Äôs your name?‚Äù he asked. ‚ÄúMy name is Jill,‚Äù I said. ‚ÄúWell, Jill, we‚Äôd better get a move on. There are more zombies out there.‚Äù He took me by the hand and led me out the door. I followed him through the zombie infested neighborhood. He shot any zombie that got in our way. Finally, we reached his car. It was a shiny, black Lamborghini. ‚ÄúHop in,‚Äù he said. We got in the car, and he turned the key in the ignition. The engine roared. He put it into gear, and we sped off down the street. The zombies chased us, but we were too fast for them. We drove for hours and hours, until we finally reached an enormous mansion. The man got out of the car, and opened the door for me. ‚ÄúWelcome to my home,‚Äù he said. ‚ÄúYou‚Äôll be safe here.‚Äù He took me by the hand and led me inside. Suddenly I realized who he was. ‚ÄúYou‚Äôre Batman!‚Äù I exclaimed. ‚ÄúThat‚Äôs right,‚Äù he said. ‚ÄúI‚Äôm Batman.‚Äù He took off his cowboy hat, and revealed a full head of hair. ‚ÄúYou‚Äôre Bruce Wayne, billionaire!‚Äù I said. ‚ÄúThat‚Äôs right,‚Äù he said. ‚ÄúI‚Äôm Bruce Wayne, billionaire.‚Äù He took off his necklace, and revealed that it was just a normal chain. ‚ÄúI don‚Äôt understand,‚Äù I said. ‚ÄúHow did you get here?‚Äù ‚ÄúI invented a time machine and traveled forward in time to save you,‚Äù he replied. ‚ÄúThat‚Äôs amazing!‚Äù&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Felipe Vogel</name></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://fpsvogel.com/images/theme/social.jpg"/><media:content medium="image" url="https://fpsvogel.com/images/theme/social.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry></feed>