<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on solnic.codes</title>
    <link>https://solnic.codes/posts/</link>
    <description>Recent content in Posts on solnic.codes</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 02 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://solnic.codes/posts/index.xml" rel="self" type="application/rss+xml"/>
    <item>
      <title>Rails and its Ruby dialect</title>
      <link>https://solnic.codes/2022/02/02/rails-and-its-ruby-dialect/</link>
      <pubDate>Wed, 02 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2022/02/02/rails-and-its-ruby-dialect/</guid>
      <description>This was originally titled &amp;ldquo;Rails is not written in Ruby&amp;rdquo; but based on feedback, I decided to change the title.
 I&amp;rsquo;m born and raised in Krak√≥w, a beautiful city in Poland, maybe you&amp;rsquo;ve heard about it, maybe you&amp;rsquo;ve even been here. In Poland we speak Polish, which is a really difficult language, it&amp;rsquo;s actually considered one of the top-10 most difficult languages to learn in the world. In Poland, just like in many other countries, there are regions where dialects are used rather than &amp;ldquo;the pure&amp;rdquo; form of the language, and so in my city, we have our own dialect.</description>
    </item>
    
    <item>
      <title>10 Years of Open Source</title>
      <link>https://solnic.codes/2021/06/04/10-years-of-open-source/</link>
      <pubDate>Fri, 04 Jun 2021 16:38:41 +0200</pubDate>
      
      <guid>https://solnic.codes/2021/06/04/10-years-of-open-source/</guid>
      <description>On June 4th, 2011 I released the first version of Virtus, a ruby gem that I extracted from the DataMapper project.
I remember how I felt about Open Source back then, and I have to tell you that my perspective has changed a lot.
10 years, a freaking decade, is a lot of time&amp;hellip;I&amp;rsquo;ve gone through a lot of ups-and-downs during that time, as my open-source contributions sky-rocketed, and that changing perspective is something I continuously think about.</description>
    </item>
    
    <item>
      <title>The 5 Rules of Simple RSpec Tests</title>
      <link>https://solnic.codes/2021/05/11/the-5-rules-of-simple-rspec-tests/</link>
      <pubDate>Tue, 11 May 2021 13:36:41 +0200</pubDate>
      
      <guid>https://solnic.codes/2021/05/11/the-5-rules-of-simple-rspec-tests/</guid>
      <description>The 5 &amp;ldquo;rules&amp;rdquo; I try to follow in order to write simple RSpec tests.
Let&amp;rsquo;s GO.
1. Max 2 levels of describe/context nesting Everything above 2 is a code-smell and causes alarm bells in my head to ring. The more levels of nesting you have, the harder it is to understand what a given example is doing. If you add before/after hooks to the mix, it&amp;rsquo;ll become even worse.
I often reduce nesting by simply using example descriptions like that:</description>
    </item>
    
    <item>
      <title>WHOOPS! Thoughts on Rails, forking and leadership</title>
      <link>https://solnic.codes/2021/05/01/whoops-thoughts-on-rails-forking-and-leadership/</link>
      <pubDate>Sat, 01 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2021/05/01/whoops-thoughts-on-rails-forking-and-leadership/</guid>
      <description>I decided to let it all out. What a funny coincident because exactly 5 years ago I wrote that I‚Äôm leaving Rails for good. I thought I‚Äôm gonna leave Ruby too but that didn‚Äôt happen and I‚Äôm still a very happy Rubyist and because of this I‚Äôm really saddened to see what‚Äôs been going on the past few days; but HEY, it‚Äôs up to us to make something good out of it.</description>
    </item>
    
    <item>
      <title>Fixing Ruby 2.7 compilation error on Big Sur</title>
      <link>https://solnic.codes/2020/12/09/fixing-ruby-2.7-compilation-error-on-big-sur/</link>
      <pubDate>Wed, 09 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2020/12/09/fixing-ruby-2.7-compilation-error-on-big-sur/</guid>
      <description>We&amp;rsquo;re in the process of upgrading to Ruby 2.7.2 at castle.io and today I had to install it on macOS Big Sur. Unfortunately, I hit a compilation error that looked like this:
$ ruby-install ruby 2.7.2 # yada yada yada compiling dmyext.c translating probes probes.d . ./vm_opts.h compiling array.c compiling ast.c compiling bignum.c compiling class.c compiling compar.c compiling compile.c compile.c:9857:61: error: use of undeclared identifier 'RUBY_FUNCTION_NAME_STRING' if (table == NULL) rb_bug(&amp;quot;%s: table is not provided.</description>
    </item>
    
    <item>
      <title>Open Source Status Update - August 2020</title>
      <link>https://solnic.codes/2020/09/04/open-source-status-update-august-2020/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2020/09/04/open-source-status-update-august-2020/</guid>
      <description>Hey y&amp;rsquo;all! It&amp;rsquo;s time for another OSS update. I was quite busy with my &amp;ldquo;normal work&amp;rdquo; in August so unfortunately I didn&amp;rsquo;t manage to work on rom-rb like I planned. I focused mostly on dry-rb maintenance work and growing my YouTube channel.
OK let&amp;rsquo;s see what happened!
Saying &amp;ldquo;good bye&amp;rdquo; to dry-web! That&amp;rsquo;s right! We officially discontinued our work on dry-web as well as dry-web-roda, which was its companion gem that integrated Roda with dry-web.</description>
    </item>
    
    <item>
      <title>Open Source Status Update ‚Äì July 2020</title>
      <link>https://solnic.codes/2020/08/06/open-source-status-update-july-2020/</link>
      <pubDate>Thu, 06 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2020/08/06/open-source-status-update-july-2020/</guid>
      <description>In July I went on holidays and had quite a busy month at my day job but nevertheless I&amp;rsquo;ve managed to push things forward. Here&amp;rsquo;s a summary of what happened!
New dry-validation releases We&amp;rsquo;ve had two bug-fix releases of dry-validation. Just like in case of a couple of previous releases, there were a bunch of really nice PRs from contributors which is lovely üòÑ
In 1.5.3 I&amp;rsquo;ve fixed a new bug that was discovered recently where using key?</description>
    </item>
    
    <item>
      <title>Be cautious with Ruby coercion methods</title>
      <link>https://solnic.codes/2020/07/29/be-cautious-with-ruby-coercion-methods/</link>
      <pubDate>Wed, 29 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2020/07/29/be-cautious-with-ruby-coercion-methods/</guid>
      <description>Coercion is a tricky problem to solve and it&amp;rsquo;s something we need pretty much everywhere. Whether you&amp;rsquo;re building a web application or a CLI tool, you will have to coerce values in some way. I say it&amp;rsquo;s a tricky problem because Ruby comes with many builtin coercion methods but it&amp;rsquo;s not enough. Furthermore, the builtin methods may actually lead to bugs or surprising behaviors.
In this article we&amp;rsquo;ll take a look at the builtin coercion methods, various caveats that come with their usage and ways how you can handle coercion in a more predictable and strict way.</description>
    </item>
    
    <item>
      <title>Open Source Status Update ‚Äì April - June 2020</title>
      <link>https://solnic.codes/2020/07/09/open-source-status-update-april-june-2020/</link>
      <pubDate>Thu, 09 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2020/07/09/open-source-status-update-april-june-2020/</guid>
      <description>It&amp;rsquo;s finally time for another Open Source Status Update! This one&amp;rsquo;s different as it covers last three months. Due to pandemic situation and having my kids at home, including online schooling, it was really difficult to do any OSS hacking. We&amp;rsquo;ve got some things done regardless in March and April thanks to support from our contributors, so I also would like to use this as an opportunity to thank you all for your help!</description>
    </item>
    
    <item>
      <title>Open Source Status Update - March 2020</title>
      <link>https://solnic.codes/2020/04/03/open-source-status-update-march-2020/</link>
      <pubDate>Fri, 03 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2020/04/03/open-source-status-update-march-2020/</guid>
      <description>It&amp;rsquo;s time for my second Open Source Update :) This one covers March 2020. As you can probably imagine, last few weeks were very challenging due to pandemic. I tried to push things forward regardless but I didn&amp;rsquo;t manage to accomplish everything I planned.
dry-schema &amp;amp; dry-validation 1.5.0 You can read the official announcement right here. I&amp;rsquo;m very happy with both releases, especially that they brought many new features that a couple of years ago would be really hard to implement, but now it was relatively easy to achieve.</description>
    </item>
    
    <item>
      <title>Open Source Status Update</title>
      <link>https://solnic.codes/2020/03/02/open-source-status-update/</link>
      <pubDate>Mon, 02 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2020/03/02/open-source-status-update/</guid>
      <description>Inspired by Samuel Williams` &amp;ldquo;Open Source Progress Report&amp;rdquo; I decided to start doing the same thing and so this is the first Open Source Status Update from me. I hope to make this a habit and who knows maybe I&amp;rsquo;ll even start blogging on a regular basis again ü§ûüèª
I&amp;rsquo;ll summarize my work between September 2019 and February 2020. Overall these were extremely productive 5 months. Apart from the regular maintainance (PR reviews, handling releases, providing user support etc.</description>
    </item>
    
    <item>
      <title>GitHub Sponsorship</title>
      <link>https://solnic.codes/2019/09/04/github-sponsorship/</link>
      <pubDate>Wed, 04 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2019/09/04/github-sponsorship/</guid>
      <description>GitHub has recently started their Sponsors program and I was lucky to get an invite pretty early on when it&amp;rsquo;s still in a closed beta phase. I received the invite on August 30th and it took me exactly one month to finally fill out my profile and get it published. I&amp;rsquo;m saying &amp;ldquo;finally&amp;rdquo; because even though I knew I wanted to try it out, it was not immediately obvious to me how exactly I want it to work in my case.</description>
    </item>
    
    <item>
      <title>Introducing dry-schema</title>
      <link>https://solnic.codes/2019/01/31/introducing-dry-schema/</link>
      <pubDate>Thu, 31 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2019/01/31/introducing-dry-schema/</guid>
      <description>Two years ago (!!!) I published a post on discourse.dry-rb.org explaining my plans for dry-validation 1.0.0 and in this post I mentioned that there will be a new gem called dry-schema that dry-validation will use for its schemas. It&amp;rsquo;s crazy how time flies because I swear I thought it was last year. I know that over this time dry-validation has been accumulating a lot of issues (125 in the moment of writing this article), and I know it sucks, big time, that I didn&amp;rsquo;t have a chance to address any of these.</description>
    </item>
    
    <item>
      <title>A quick‚Äã recap and plans for the future</title>
      <link>https://solnic.codes/2018/08/29/a-quick-recap-and-plans-for-the-future/</link>
      <pubDate>Wed, 29 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2018/08/29/a-quick-recap-and-plans-for-the-future/</guid>
      <description>Hi, I&amp;rsquo;m back! I haven&amp;rsquo;t written anything on this blog since November 2016, which is sad but it is what it is. I&amp;rsquo;ve got so much to tell you. A lot happened during this time, and I&amp;rsquo;ll try to summarize it here and also talk a bit about my plans for the future.
The Ruby Prize  Almost a year ago I was honored to go to Matsue, Japan, to attend the Ruby World 2017 conference, where I received the Ruby Prize from Matz himself.</description>
    </item>
    
    <item>
      <title>Duck typing vs type safety in Ruby</title>
      <link>https://solnic.codes/2016/11/02/duck-typing-vs-type-safety-in-ruby/</link>
      <pubDate>Wed, 02 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2016/11/02/duck-typing-vs-type-safety-in-ruby/</guid>
      <description>Duck typing is one of the virtues of the Ruby language, it adds a lot of flexibility to the code, and allows us to use objects of different type in places where only specific methods are needed. Even though the idea behind duck typing may seem to be straight-forward, it is easy to use it incorrectly. It‚Äôs interesting to notice that over many years we‚Äôve adopted various techniques that seem to leverage duck typing, but the specifics of how exactly we‚Äôre doing it are actually questionable, and I believe they deserve some reconsideration.</description>
    </item>
    
    <item>
      <title>Abstractions and the role of a framework</title>
      <link>https://solnic.codes/2016/05/30/abstractions-and-the-role-of-a-framework/</link>
      <pubDate>Mon, 30 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2016/05/30/abstractions-and-the-role-of-a-framework/</guid>
      <description>This is a follow-up to the discussion that was started last week after I published ‚ÄúMy time with Rails is up‚Äù. Since this article received a lot of feedback, over 1000 comments on various sites and even more tweets, despite my greatest efforts, I didn‚Äôt manage to reply to everything. Many people were confused about some of the arguments, as I didn‚Äôt do a good job at providing proper context and making certain things clearer.</description>
    </item>
    
    <item>
      <title>My time with Rails is up</title>
      <link>https://solnic.codes/2016/05/22/my-time-with-rails-is-up/</link>
      <pubDate>Sun, 22 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2016/05/22/my-time-with-rails-is-up/</guid>
      <description>Please also read my follow-up about abstractions and the role of a framework
 Last year I made a decision that I won‚Äôt be using Rails anymore, nor I will support Rails in gems that I maintain. Furthermore, I will do my best to never have to work with Rails again at work.
Since I‚Äôm involved with many Ruby projects and people have been asking me many times why I don‚Äôt like Rails, what kind of problems I have with it and so on, I decided to write this long post to summarize and explain everything.</description>
    </item>
    
    <item>
      <title>Invalid Object Is An Anti-Pattern</title>
      <link>https://solnic.codes/2015/12/28/invalid-object-is-an-anti-pattern/</link>
      <pubDate>Mon, 28 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2015/12/28/invalid-object-is-an-anti-pattern/</guid>
      <description>The idea of an object that validates its own state has been made very popular by Rails‚Äô ActiveRecord. We can see this pattern in many places, not only in ORM libraries but in many other gems whenever some sort of validation is needed.
Have you ever thought about why we‚Äôre allowing invalid state just to‚Ä¶validate data? It doesn‚Äôt seem to be a good idea, in fact, it feels like a huge anti-pattern.</description>
    </item>
    
    <item>
      <title>Introducing dry-validation</title>
      <link>https://solnic.codes/2015/12/07/introducing-dry-validation/</link>
      <pubDate>Mon, 07 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2015/12/07/introducing-dry-validation/</guid>
      <description>We started experimenting with a new validation library under dry-rb organization a couple of months ago, and last month I released the first version of dry-validation. Since then I worked hard on improving it and adding support for i18n.
Today, I released dry-validation 0.3.0 with a couple of bug fixes, new features and a complete support for i18n. Before I tell you what it is and how it can help you, let me start by explaining the reasoning behind this project.</description>
    </item>
    
    <item>
      <title>Ditch Your ORM</title>
      <link>https://solnic.codes/2015/09/18/ditch-your-orm/</link>
      <pubDate>Fri, 18 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2015/09/18/ditch-your-orm/</guid>
      <description>I‚Äôve been promoting a functional approach in Ruby for a while now and even though it includes many different techniques and patterns, there‚Äôs this one idea, one fundamental idea that changes everything - immutability.
But what does it even mean in Ruby? To freeze everything? That would be too slow, so no. Immutability-oriented design means that you avoid interfaces that can change your objects. Yes, there are plenty of methods in Ruby to mutate something, but when you are designing your object interfaces, you can design them in a way that your objects won‚Äôt change.</description>
    </item>
    
    <item>
      <title>Encapsulating Business Transactions With Transflow</title>
      <link>https://solnic.codes/2015/08/17/encapsulating-business-transactions-with-transflow/</link>
      <pubDate>Mon, 17 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2015/08/17/encapsulating-business-transactions-with-transflow/</guid>
      <description>It‚Äôs a known fact that when you deal with a big problem it‚Äôs good to split it into smaller problems, solve them in isolation using separate components and use an integration layer to combine them into a single unit. Unfortunately it‚Äôs easier said than done. In an OO language like Ruby there are countless approaches you can take to tackle complex scenarios in your application.
Objects accumulating state, which gets mutated as a result of some business transaction, is already a complex thing to deal with.</description>
    </item>
    
    <item>
      <title>Importing Data With ROM and Transproc</title>
      <link>https://solnic.codes/2015/07/15/importing-data-with-rom-and-transproc/</link>
      <pubDate>Wed, 15 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2015/07/15/importing-data-with-rom-and-transproc/</guid>
      <description>Importing data into a database can be a complicated task. This process can be quite painful as you need to deal with data transformation, filling in missing information, specifying validation rules, handling errors and so on. Without proper tools to solve this problem it can become more complicated than it should be.
In my current project at work I‚Äôm dealing with exactly that problem - we‚Äôre importing data from YAML documents into a PostgreSQL database.</description>
    </item>
    
    <item>
      <title>New Transproc Released</title>
      <link>https://solnic.codes/2015/07/13/new-transproc-released/</link>
      <pubDate>Mon, 13 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2015/07/13/new-transproc-released/</guid>
      <description>Transproc is a small library I wrote a couple of months back. It‚Äôs been growing nicely and yesterday its 0.3.0 version was released which redefined how it works and what it really is. I‚Äôm exicited about this project as it‚Äôs been used in ROM to implement its Mapper component and turned out to be very powerful and flexible while remaining simple.
In this post I‚Äôd like to show you what transproc really is and how it can be used with other libraries.</description>
    </item>
    
    <item>
      <title>Cutting Corners or Why Rails May Kill Ruby</title>
      <link>https://solnic.codes/2015/06/06/cutting-corners-or-why-rails-may-kill-ruby/</link>
      <pubDate>Sat, 06 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2015/06/06/cutting-corners-or-why-rails-may-kill-ruby/</guid>
      <description>Today I‚Äôm tired and frustrated. And it‚Äôs not the first time that I have those negative feelings. Typically I just complain on twitter, lose some followers, wait a bit to calm down and move on.
But today I need to vent and convert my negative emotions into something constructive and hopefully meaningful to others. Every time I simply whine about certain aspects of Ruby ecosystem and especially Rails people are asking me specific questions that I fail to address properly.</description>
    </item>
    
    <item>
      <title>Introducing Transproc - functional data transformations for Ruby</title>
      <link>https://solnic.codes/2015/04/16/introducing-transproc-functional-data-transformations-for-ruby/</link>
      <pubDate>Thu, 16 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2015/04/16/introducing-transproc-functional-data-transformations-for-ruby/</guid>
      <description>Data mapping, or how I prefer to call it - data transformations, is something I‚Äôve tackled in a couple of projects already. First, in DataMapper ORM with its Property API. Then in Virtus, a project that started as an extraction of DataMapper Property API to a separate gem. Then Virtus evolved into something more powerful and quite a lot of people really enjoy using it until this day.
The approach used in Virtus and many other libraries similar to Virtus is typical OO design.</description>
    </item>
    
    <item>
      <title>8 Things I Learned During 8 Years of Ruby and Rails</title>
      <link>https://solnic.codes/2015/03/04/8-things-i-learned-during-8-years-of-ruby-and-rails/</link>
      <pubDate>Wed, 04 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2015/03/04/8-things-i-learned-during-8-years-of-ruby-and-rails/</guid>
      <description>Check out a follow-up on Ruby Rogues
Exactly 8 years ago I started working professionally as a rails developer. I‚Äôve spent a lot of time working for various clients, on various projects - from small green-field apps to 5+ year old rails monstrosities.
In addition to Rails development I got involved in OSS. Back in 2011 I joined DataMapper core team, a couple years later I started working on ROM project and effectively stopped working on DataMapper.</description>
    </item>
    
    <item>
      <title>Introducing Yesql for Ruby using ROM</title>
      <link>https://solnic.codes/2015/03/02/introducing-yesql-for-ruby-using-rom/</link>
      <pubDate>Mon, 02 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2015/03/02/introducing-yesql-for-ruby-using-rom/</guid>
      <description>Last week we released a new beta version of ROM and you‚Äôll be able to read more about it on the official blog later this week. Today I‚Äôd like to tell you a little bit about a new adapter that I built for ROM that‚Äôs based on Yesql from the Clojure world.
When I was working on ROM I was paying attention to other languages too searching for inspiration and Yesql was one of my favorite discoveries.</description>
    </item>
    
    <item>
      <title>About the new ROM release and what happens next</title>
      <link>https://solnic.codes/2014/11/24/about-the-new-rom-release-and-what-happens-next/</link>
      <pubDate>Mon, 24 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2014/11/24/about-the-new-rom-release-and-what-happens-next/</guid>
      <description>Last month I wrote about rebooting ROM project and today I‚Äôm very happy that after almost 300 commits I pushed Ruby Object Mapper 0.3.0 to rubygems.org. It‚Äôs a big milestone as the project enters a new path and ships with a complete support for SQL databases thanks to Sequel. More official and less personal announcement is right here.
In this post I‚Äôd like to give you more insight into what‚Äôs happening with the project and how its development is going to be organized and why.</description>
    </item>
    
    <item>
      <title>Ruby Object Mapper Reboot</title>
      <link>https://solnic.codes/2014/10/23/ruby-object-mapper-reboot/</link>
      <pubDate>Thu, 23 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2014/10/23/ruby-object-mapper-reboot/</guid>
      <description>Rewrite is done. You can read more about it here.
I‚Äôd like to let you know that after a couple years of work and a lot of thinking I decided to ‚Äúreboot‚Äù ROM project. This decision was not easy and it has a lot of implications but it‚Äôs going to be awesome. Here‚Äôs why.
New philosophy, similar goals If you‚Äôve been following the project you know that the effort started as the next major version of DataMapper and then was renamed to ROM.</description>
    </item>
    
    <item>
      <title>Mocking and Ruby</title>
      <link>https://solnic.codes/2014/05/22/mocking-and-ruby/</link>
      <pubDate>Thu, 22 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2014/05/22/mocking-and-ruby/</guid>
      <description>In the ‚ÄúTDD is dead‚Äù discussion unit testing and mocking is being mentioned frequently. DHH explicitly expressed how much he dislikes mocks and it seems like many people still connect unit testing with mocking or even confuse the two. In case you missed it Martin Fowler wrote a great article about what should be considered as a unit test. If you‚Äôre also confused about mocks and stubs I encourage you to read Mocks Arent‚Äô Stubs.</description>
    </item>
    
    <item>
      <title>Help Us Build ROM</title>
      <link>https://solnic.codes/2014/05/17/help-us-build-rom/</link>
      <pubDate>Sat, 17 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2014/05/17/help-us-build-rom/</guid>
      <description>Many people have been asking me how they can help us build ROM. This was the hardest question I‚Äôve heard next to ‚Äúwhen will it be ready?‚Äù. My usual reply was suggesting to join our IRC channel and talk but it really isn‚Äôt a good answer as it‚Äôs difficult and time consuming to talk about same things all over again that‚Äôs why I decided to finally put together this post and explain what‚Äôs going on and how you can help.</description>
    </item>
    
    <item>
      <title>TDD Is Fun</title>
      <link>https://solnic.codes/2014/04/23/tdd-is-fun/</link>
      <pubDate>Wed, 23 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2014/04/23/tdd-is-fun/</guid>
      <description>Today DHH published a blog post about TDD being dead (to him at least). It‚Äôs really not that surprising since from what I know (please correct me if I‚Äôm wrong) David‚Äôs experience is mostly based on building web apps with Rails. I get that, I really do. For me practicing TDD in a rails environment is much harder than when I work on my OSS libraries. There are many reasons why TDD in Rails is just a bit harder than it could be but that‚Äôs a big, separate subject.</description>
    </item>
    
    <item>
      <title>Common Pitfalls Of Code Metrics</title>
      <link>https://solnic.codes/2014/01/22/common-pitfalls-of-code-metrics/</link>
      <pubDate>Wed, 22 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2014/01/22/common-pitfalls-of-code-metrics/</guid>
      <description>Code metrics and code metric tools can be both helpful and harmful. The difference between the two is learning to interpret the results and use the feedback to improve yourself and your code.
I have a lot of experience with code metric tools. Over the last couple of years I‚Äôve used them on a daily basis. Tools measuring simple things like test coverage, lines of code [LoC] per class/method, naming, and column length along with more advanced measurements for code complexity, churn, and mutation coverage.</description>
    </item>
    
    <item>
      <title>TDD and ActiveRecord in Rails</title>
      <link>https://solnic.codes/2014/01/06/tdd-and-activerecord-in-rails/</link>
      <pubDate>Mon, 06 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2014/01/06/tdd-and-activerecord-in-rails/</guid>
      <description>I don‚Äôt have exact numbers but I believe TDD isn‚Äôt really popular amongst rails developers. This shouldn‚Äôt be a surprise given that the two of the most complex elements in the rails stack, models and controllers, are very convoluted concepts and are simply hard to test.
When you‚Äôre building a typical rails application most of the business logic lives in the active record models and controllers. Testing controllers in rails is a bit cumbersome but I still encourage people to write tests for them.</description>
    </item>
    
    <item>
      <title>The World Needs Another Post About Dependency Injection in Ruby</title>
      <link>https://solnic.codes/2013/12/17/the-world-needs-another-post-about-dependency-injection-in-ruby/</link>
      <pubDate>Tue, 17 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2013/12/17/the-world-needs-another-post-about-dependency-injection-in-ruby/</guid>
      <description>I was wondering what do we, rubyists, think about dependency injection these days as I remember some discussions about it which were mostly lots of post-java-trauma type of criticism. I had this blog post in the back of my head for a long time but knowing that this subject was sort of‚Ä¶explored already, I decided to see what google has to say before writing it. So I typed ‚Äúruby dependency injection‚Äù and got this:</description>
    </item>
    
    <item>
      <title>Taking a Break From OSS</title>
      <link>https://solnic.codes/2013/10/17/taking-a-break-from-oss/</link>
      <pubDate>Thu, 17 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2013/10/17/taking-a-break-from-oss/</guid>
      <description>Last two years have been pretty intensive for me. I became a husband, a father, a co-founder of Powow and during that time I tried to contribute as much as I could to OSS. I was mostly focused on Virtus and Ruby Object Mapper which consumed a lot of my time and energy.
I thought I could go on but I was mistaken. I‚Äôve burned out and decided to take a break from my OSS activities and focus on my family and daily work.</description>
    </item>
    
    <item>
      <title>Virtus 1.0.0 Released</title>
      <link>https://solnic.codes/2013/10/16/virtus-1.0.0-released/</link>
      <pubDate>Wed, 16 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2013/10/16/virtus-1.0.0-released/</guid>
      <description>I‚Äôm happy to announce that after 1486 commits Virtus 1.0.0 has been released. It comes with a lot of neat changes, improvements and new features.
Here‚Äôs a quick summary of my favorite additions and changes.
No more ‚Äúinclude Virtus‚Äù That‚Äôs right. With 1.0.0 including Virtus module is deprecated. Instead you should use something called ‚Äúcustom extension builder‚Äù. It‚Äôs really cool, check this out:
# for classes class User include Virtus.model # attributes go here end # for modules module CommonAttributes include Virtus.</description>
    </item>
    
    <item>
      <title>A Closer Look at How Ruby Object Mapper Works</title>
      <link>https://solnic.codes/2013/08/26/a-closer-look-at-how-ruby-object-mapper-works/</link>
      <pubDate>Mon, 26 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2013/08/26/a-closer-look-at-how-ruby-object-mapper-works/</guid>
      <description>Last Friday we finally released the first version of Ruby Object Mapper. It‚Äôs a big step for the project as we‚Äôve established foundation of the whole system. There are many missing features, crucial ones, like support for RDBMS, server-side generated keys or a full-blown Unit of Work but‚Ä¶we‚Äôll be adding those in the upcoming future releases. With the foundation in place it‚Äôll be much easier for us to continue working on ROM so you should see frequent releases from now on with important additions.</description>
    </item>
    
    <item>
      <title>Mutation testing with Mutant</title>
      <link>https://solnic.codes/2013/01/23/mutation-testing-with-mutant/</link>
      <pubDate>Wed, 23 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2013/01/23/mutation-testing-with-mutant/</guid>
      <description>When working on DataMapper and its libraries we put a lot of effort into testing. Our libraries must have 100% code coverage and even that is not enough. What we want to achieve eventually is full mutation coverage. What is that? If you‚Äôve ever heard or used Heckle then you‚Äôre probably familiar with the concept and you can skip the first part of this post and read about mutant.
Code Coverage vs Mutation Coverage If your library has 100% code coverage and you think you did a great job then I have some bad news for you.</description>
    </item>
    
    <item>
      <title>DataMapper 2 Status and Roadmap</title>
      <link>https://solnic.codes/2012/12/20/datamapper-2-status-and-roadmap/</link>
      <pubDate>Thu, 20 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2012/12/20/datamapper-2-status-and-roadmap/</guid>
      <description>We‚Äôve been really busy working on the mapper part of DataMapper 2 for the last few months. This gives us more clarity about what is still missing. The mapper currently supports two different engines, Veritas and Arel. By introducing engines API we managed to create a nice database abstraction layer along with model and attribute mapping layers. The entire system works like a multi-level pipe so that we have 3 separate ‚Äúlevels‚Äù where data is being processed.</description>
    </item>
    
    <item>
      <title>Subclassing Module For Fun and Profit</title>
      <link>https://solnic.codes/2012/08/13/subclassing-module-for-fun-and-profit/</link>
      <pubDate>Mon, 13 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2012/08/13/subclassing-module-for-fun-and-profit/</guid>
      <description>You think you‚Äôve done everything with Ruby? How about subclassing Module? It‚Äôs an interesting technique that I‚Äôve been experimenting with lately. One of the downsides of using modules in Ruby is that a module doesn‚Äôt have a state. When you mix it into another class you‚Äôre basically copying methods from one place to another. What if extending an object with new methods requires a state? Where would you put that state?</description>
    </item>
    
    <item>
      <title>Single Responsibility Principle on Rails Explained</title>
      <link>https://solnic.codes/2012/07/09/single-responsibility-principle-on-rails-explained/</link>
      <pubDate>Mon, 09 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2012/07/09/single-responsibility-principle-on-rails-explained/</guid>
      <description>A few weeks back we had a small drama about SRP. There were some smart comments, some stupid ones and a few funny jokes even, like that for example:
https://twitter.com/porras/status/220456288017059840
If I remember correctly it all started with this post. I‚Äôve seen criticism on twitter saying that the post shows shitty code, that it‚Äôs more complex than it should be, that User class is definitely the best place to put code that creates a user and so on.</description>
    </item>
    
    <item>
      <title>Get Rid of That Code Smell ‚Äì Primitive Obsession</title>
      <link>https://solnic.codes/2012/06/25/get-rid-of-that-code-smell-primitive-obsession/</link>
      <pubDate>Mon, 25 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2012/06/25/get-rid-of-that-code-smell-primitive-obsession/</guid>
      <description>This is a post from the Get Rid of That Code Smell series.
 Primitive Obsession is another popular code smell in Ruby land. It‚Äôs very easy, tempting and just feels convenient to use primitive objects to represent various concepts in our code. Here are some primitive classes in Ruby that we like to be obsessed about:
 Array Hash String Fixnum Float  Whenever you use one of these classes in a context where they don‚Äôt actually fit being semantically incorrect, that‚Äôs when you introduce Primitive Obsession code smell.</description>
    </item>
    
    <item>
      <title>Part of DataMapper 2 Is Done - Announcing Virtus 0.5.0</title>
      <link>https://solnic.codes/2012/06/10/part-of-datamapper-2-is-done-announcing-virtus-0.5.0/</link>
      <pubDate>Sun, 10 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2012/06/10/part-of-datamapper-2-is-done-announcing-virtus-0.5.0/</guid>
      <description>UPDATE: DataMapper 2 was renamed to Ruby Object Mapper (ROM). For more info check out rom-rb.org
 I‚Äôm happy to announce that Virtus 0.5.0 was released. It‚Äôs sort of a milestone for me as Virtus is now considered feature-complete and I‚Äôm quite happy with the code. Further development will only focus on bug fixes and small internal clean ups. We plan to extract smaller pieces into separate gems at some point too.</description>
    </item>
    
    <item>
      <title>Get Rid of That Code Smell ‚Äì Duplication</title>
      <link>https://solnic.codes/2012/05/11/get-rid-of-that-code-smell-duplication/</link>
      <pubDate>Fri, 11 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2012/05/11/get-rid-of-that-code-smell-duplication/</guid>
      <description>This is a post from the Get Rid of That Code Smell series.
 Removing duplication from the code is a seemingly easy task. In many cases it is pretty straight-forward - you look at similar bits of code and you move them to a common method or class that is reusable in other places. Right? No, not really. It is true that code that looks similar might be an indicator that there‚Äôs a duplication but it‚Äôs not the definitive way of determining the smell.</description>
    </item>
    
    <item>
      <title>Get Rid of That Code Smell - Control Couple</title>
      <link>https://solnic.codes/2012/04/11/get-rid-of-that-code-smell-control-couple/</link>
      <pubDate>Wed, 11 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2012/04/11/get-rid-of-that-code-smell-control-couple/</guid>
      <description>This is a post from the Get Rid of That Code Smell series.
If you are serious about Object Oriented Design and respecting Single Responsibility Principle then you definitely want to get rid of Control Couple code smells. In this post I will show you a simple example explaining how to identify and remove control coupling from your code. I like to think about that code smell also in the context of SRP because I like to apply it to every piece of my system - whether it‚Äôs a method, a class or a whole library.</description>
    </item>
    
    <item>
      <title>Get Rid of That Code Smell - Attributes</title>
      <link>https://solnic.codes/2012/04/04/get-rid-of-that-code-smell-attributes/</link>
      <pubDate>Wed, 04 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2012/04/04/get-rid-of-that-code-smell-attributes/</guid>
      <description>In this post I will show you why using attribute accessors is a code smell in most of the cases. This is a very convenient feature of Ruby but you should only consider using it if you‚Äôre implementing a data-like objects which expose, well, data to other parts of your system. A good example is an Active Record object which exposes its attributes. Another good example could be an object which wraps a response from a remote API and through attribute readers gives you access to data returned in that response.</description>
    </item>
    
    <item>
      <title>Get Rid of That Code Smell</title>
      <link>https://solnic.codes/2012/03/30/get-rid-of-that-code-smell/</link>
      <pubDate>Fri, 30 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2012/03/30/get-rid-of-that-code-smell/</guid>
      <description>While working on DataMapper 2 libraries we are measuring quality of our code with various code metric tools. Dan Kubb has been using this approach successfully for over 2 years in Veritas which resulted in a beautiful and clean code. When I started working on Virtus I decided to embrace all the practices that Dan introduced in his projects. It was a fantastic experience because Virtus was not a green-field project - I extracted a piece of DataMapper 1 and turned it into a standalone library.</description>
    </item>
    
    <item>
      <title>DataMapper-2 Presentation From wroc_love.rb Conference</title>
      <link>https://solnic.codes/2012/03/13/datamapper-2-presentation-from-wroc_love.rb-conference/</link>
      <pubDate>Tue, 13 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2012/03/13/datamapper-2-presentation-from-wroc_love.rb-conference/</guid>
      <description>Once again thank you for the awesome event that took place in Wroc≈Çaw last weekend - the wroc_love.rb conference. We‚Äôve had fantastic and inspiring talks and many great discussions. It‚Äôs clear to me that a new era in our community has started and people are willing to learn and embrace patterns from other languages without being scared that we‚Äôre going to lose the ‚Äúagile‚Äù aspect of programming in Ruby and Rails.</description>
    </item>
    
    <item>
      <title>New Virtus Release With Truly Awesome Features</title>
      <link>https://solnic.codes/2012/02/08/new-virtus-release-with-truly-awesome-features/</link>
      <pubDate>Wed, 08 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2012/02/08/new-virtus-release-with-truly-awesome-features/</guid>
      <description>Just a quick announcement that I just pushed a new version of Virtus with support for long awaited features: EmbeddedValue, member type coercions for array/set attributes and ValueObject. Current version is 0.2.0, please give it a try and tell me what you think.
Here‚Äôs a quick sneak-preview of what you can do with Virtus:
class GeoLocation include Virtus::ValueObject attribute :lat, Float attribute :lng, Float end class City include Virtus attribute :name, String attribute :location, GeoLocation attribute :districts, Array[Symbol] end class User include Virtus attribute :name, String attribute :age, Integer attribute :city, City end user = User.</description>
    </item>
    
    <item>
      <title>Yes, You Should Write Controller Tests!</title>
      <link>https://solnic.codes/2012/02/02/yes-you-should-write-controller-tests/</link>
      <pubDate>Thu, 02 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2012/02/02/yes-you-should-write-controller-tests/</guid>
      <description>It really surprises me that there are people arguing that writing controller tests doesn‚Äôt make sense. Probably the most common argument is that actions are covered in acceptence tests along with checking if views are properly rendered. Right? Right‚Ä¶well that‚Äôs just wrong! Are you trying to say that your slow acceptance tests are covering every possible controller action scenario? Are you trying to say that, for instance, every redirect that should take place is tested within an acceptance test?</description>
    </item>
    
    <item>
      <title>Ruby DataMapper Status</title>
      <link>https://solnic.codes/2012/01/10/ruby-datamapper-status/</link>
      <pubDate>Tue, 10 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2012/01/10/ruby-datamapper-status/</guid>
      <description>UPDATE: DataMapper 2 was renamed to Ruby Object Mapper (ROM). For more info check out rom-rb.org
 In my recent post I gave you a brief overview of what I think about the state of Ruby ORMs. Since I‚Äôm involved in the development of DataMapper project I want to write a little more lines of text to give you a good overview of the current state of DataMapper project and how the future version 2.</description>
    </item>
    
    <item>
      <title>The State of Ruby ORM</title>
      <link>https://solnic.codes/2011/11/29/the-state-of-ruby-orm/</link>
      <pubDate>Tue, 29 Nov 2011 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2011/11/29/the-state-of-ruby-orm/</guid>
      <description>UPDATE: DataMapper 2 was renamed to Ruby Object Mapper (ROM). For more info check out rom-rb.org
 We have a lot of different Object-Relational Mapper implementations in Ruby (and a ton and a half of Mongo mappers ;)) and it‚Äôs probably a good thing. It seems like the only ORM that really matters right now is ActiveRecord although in ‚Äúthe background‚Äù we still have DataMapper and Sequel with growing communities. So I‚Äôm wondering‚Ä¶what‚Äôs the state of these ORMs?</description>
    </item>
    
    <item>
      <title>Making ActiveRecord Models Thin</title>
      <link>https://solnic.codes/2011/08/01/making-activerecord-models-thin/</link>
      <pubDate>Mon, 01 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2011/08/01/making-activerecord-models-thin/</guid>
      <description>‚ÄúSkinny Controller, Fat Model‚Äù is a well known best practice in Ruby community. Everybody seems to agree with it and follows it. It‚Äôs pretty clear what a skinny controller is. The question is what is a fat model and what should we do if it gets too fat? Even better, what should we do to avoid too fat model? I think many people still confuse Domain Model with ActiveRecord. It‚Äôs something more and in this post I will try to explain my new approach to writing Ruby on Rails applications.</description>
    </item>
    
    <item>
      <title>Virtus - Attributes For Your Plain Ruby Objects</title>
      <link>https://solnic.codes/2011/06/06/virtus-attributes-for-your-plain-ruby-objects/</link>
      <pubDate>Mon, 06 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2011/06/06/virtus-attributes-for-your-plain-ruby-objects/</guid>
      <description>I‚Äôm happy to announce the first release of Virtus gem. It is an extraction of DataMapper Property API with various tweaks and improvements. If you like how properties work in DataMapper and would like to use such functionality in your plain ruby objects then you should give Virtus a try.
It is an early release but I would not expect many API changes before 1.0.0 since the code is based on the stable DataMapper API and I‚Äôm quite happy with it.</description>
    </item>
    
    <item>
      <title>Custom RSpec-2 Matchers</title>
      <link>https://solnic.codes/2011/01/14/custom-rspec-2-matchers/</link>
      <pubDate>Fri, 14 Jan 2011 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2011/01/14/custom-rspec-2-matchers/</guid>
      <description>RSpec is one of my favorite tools. I have literally fallen in love with this fantastic BDD library, especially with its second version. While using RSpec I realized it teaches me how to write tests. Yes, exactly - learning RSpec DSL, its syntax and structure of spec examples you actually learn the best practices in writing tests. RSpec, despite many built-in matchers, comes with a DSL for defining your own, custom matchers.</description>
    </item>
    
    <item>
      <title>Moving from WordPress to Jekyll</title>
      <link>https://solnic.codes/2011/01/05/moving-from-wordpress-to-jekyll/</link>
      <pubDate>Wed, 05 Jan 2011 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2011/01/05/moving-from-wordpress-to-jekyll/</guid>
      <description>Hello World! As usual it‚Äôs been a while since I wrote anything here. Just wanted to say that I‚Äôm moving the site from WordPress to Jekyll and I like to share what I have learned so far. If you are considering a migration too here are the steps I have taken in order to port most of the tiny content of my blog. Read on and let me know if something can be done in a better (or even completely different) way.</description>
    </item>
    
    <item>
      <title>Rack Middleware Contest</title>
      <link>https://solnic.codes/2009/10/12/rack-middleware-contest/</link>
      <pubDate>Mon, 12 Oct 2009 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2009/10/12/rack-middleware-contest/</guid>
      <description>CodeRack is a coding contest dreamed up by a group of the Ruby programmers at Lunar Logic Polska who were excited about the possibilities of Rack middleware. The team wants to encourage Ruby developers to explore the possibilities and what better way than to hold a contest? The secondary goal of the contest is to generate a set of open source solutions that will solve real problems and inspire others. Every entry will be released under the MIT open source license.</description>
    </item>
    
    <item>
      <title>Unobtrusive JavaScript helpers in Rails 3</title>
      <link>https://solnic.codes/2009/09/08/unobtrusive-javascript-helpers-in-rails-3/</link>
      <pubDate>Tue, 08 Sep 2009 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2009/09/08/unobtrusive-javascript-helpers-in-rails-3/</guid>
      <description>A while ago I have written a post about JavaScript helpers in Ruby on Rails and tried to explain why they are a bad idea. It‚Äôs hard to believe for me that it was almost 2 years ago! Since then so many things have happened in the Ruby world‚Ä¶Now Rails 3 is on its way and we already know what significant improvements and changes it will include. One of them is related to JavaScript helpers and the way how remote links and forms will be handled and I must admit that the new idea is absolutely great.</description>
    </item>
    
    <item>
      <title>Client-side rendering with Prototype</title>
      <link>https://solnic.codes/2009/01/15/client-side-rendering-with-prototype/</link>
      <pubDate>Thu, 15 Jan 2009 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2009/01/15/client-side-rendering-with-prototype/</guid>
      <description>Web applications are getting more and more complex. The user interface of a modern web application can be as rich as its desktop equivalent. If we use JavaScript/HTML/CSS trio to build this UI then we definitely want to use AJAX. A typical approach is to use AJAX to update parts of our page using an HTML response, everyone knows that, right? Does this approach allow us to create a responsive, fast and flexible UI?</description>
    </item>
    
    <item>
      <title>jQuery vs Prototype - part II</title>
      <link>https://solnic.codes/2008/02/03/jquery-vs-prototype-part-ii/</link>
      <pubDate>Sun, 03 Feb 2008 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2008/02/03/jquery-vs-prototype-part-ii/</guid>
      <description>Recently, new versions of jQuery and Prototype have been released ‚Äì it‚Äôs a perfect moment for a part number 2. On the official Prototype blog we can read that the general performance of CSS selectors is now improved, unfortunately only for Safari 3, but Element#up/#down/#next/#previous should now be faster on all browsers, it‚Äôs a good news as they were really slow. On the other hand we have jQuery official announcement with information that jQuery is now 300% faster ‚Äì we‚Äôll see!</description>
    </item>
    
    <item>
      <title>jQuery vs Prototype - part I</title>
      <link>https://solnic.codes/2007/11/11/jquery-vs-prototype-part-i/</link>
      <pubDate>Sun, 11 Nov 2007 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2007/11/11/jquery-vs-prototype-part-i/</guid>
      <description>Prototype 1.6.0 was released to the public 4 days ago, at first I decided to check its performance and new features in comparison to the previous version, but being interested in other JavaScript libraries, I‚Äôve changed my mind. Lets see how you can accomplish same tasks with the latest Prototype and jQuery libraries and simply see which one is faster. In this part I‚Äôm going to show the results of running single operations, in next part(s) I will prepare a sample website and write more complex test cases and, again, check how fast jQuery and Prototype can be (or how slow‚Ä¶).</description>
    </item>
    
    <item>
      <title>Why JavaScript helpers in rails are evil</title>
      <link>https://solnic.codes/2007/10/30/why-javascript-helpers-in-rails-are-evil/</link>
      <pubDate>Tue, 30 Oct 2007 00:00:00 +0000</pubDate>
      
      <guid>https://solnic.codes/2007/10/30/why-javascript-helpers-in-rails-are-evil/</guid>
      <description>Ruby on Rails gained so much attention and appreciation mostly because it simplifies the development process of AJAX-driven applications. When I started to learn Rails I was already very familiar with other MVC-based frameworks, and actually I‚Äôve created one myself (in PHP5) in my previous work. My framework also uses Prototype JavaScript library, so when l was learning Rails it was nothing new when I saw ‚ÄúAjax.Updater(‚Ä¶)‚Äù. I remember that when I added first AJAX-feature in the Depot (it‚Äôs a tutorial application used in well known ‚ÄúAgile Web Development in Ruby on Rails‚Äù book) I was shocked about how simple it is, but then I looked into the HTML output and it shocked me once more‚Ä¶</description>
    </item>
    
  </channel>
</rss>
