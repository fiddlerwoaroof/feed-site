{
  "title":"A Guide to Transfer Learning",
  "date":"2022-11-01T00:00:00.000000Z",
  "author":"Inna Logunova",
  "id":"https://serokell.io/blog/guide-to-transfer-learning",
  "link":"https://serokell.io/blog/guide-to-transfer-learning",
  "content":"<p>Training machine learning models requires a lot of data, which is not always available. This is where transfer learning comes into play as it leverages previously trained models. In this blog post, we’ll explore the definition, methodology, benefits, and applications of transfer learning. We’ll also discuss various transfer learning strategies and provide a selection of pre-trained models.</p>\n<h2 id=\"what-is-transfer-learning%3F\" tabindex=\"-1\">What is transfer learning?</h2>\n<p>Transfer learning is an ML method that uses a pre-trained model as the basis for training a new one. For example, a model trained for facial recognition can be adjusted for MRI scan analysis. Whereas it’s hard to collect and label thousands of similar images with cancer to train the model from scratch, fine-tuning a ready model is much easier.</p>\n<p>The idea is simple: since the ML model already knows how to classify a certain type of pictures, it can learn to recognize images with particular diseases, such as traumatic brain injury or cancer metastasis. Through transfer learning, we can achieve very accurate results faster.</p>\n<p>The same is true for natural language processing tasks. Thus, if a model has been trained for the sentiment analysis of English-language texts, it can be used for building a model for the same tasks in German or Spanish.</p>\n<p><img src=\"https://serokell.io/files/1s/1sg87rj5.A_Guide_to_Transfer_Learning_pic1.png\" alt=\"What is transfer_learning\"></p>\n<h2 id=\"how-does-transfer-learning-work%3F\" tabindex=\"-1\">How does transfer learning work?</h2>\n<p>As the first step in developing your transfer learning strategy, you need to answer the following questions:</p>\n<ul>\n<li>What knowledge can be transferred from the source to the target model to improve the execution of the target task?</li>\n<li>How can we apply the knowledge we learned from the source model to our current project/domain?</li>\n<li>How to avoid model overfitting?</li>\n</ul>\n<p>We’ll look at all these issues below.</p>\n<h3 id=\"three-categories-of-transfer-learning\" tabindex=\"-1\">Three categories of transfer learning</h3>\n<p>Depending on the task and the amount of labeled/unlabeled data available for source and target domains, transfer learning methods fall into one of three categories: inductive, transductive, and unsupervised.</p>\n<table>\n  <tr>\n   <td><strong>Category</strong>\n   </td>\n   <td><strong>Source data labeled?</strong>\n   </td>\n   <td><strong>Target data labeled?</strong>\n   </td>\n  </tr>\n  <tr>\n   <td>Inductive\n   </td>\n   <td>Can be labeled and unlabeled \n   </td>\n   <td>Yes\n   </td>\n  </tr>\n  <tr>\n   <td>Transductive\n   </td>\n   <td>Yes\n   </td>\n   <td>No\n   </td>\n  </tr>\n  <tr>\n   <td>Unsupervised\n   </td>\n   <td>No\n   </td>\n   <td>No\n   </td>\n  </tr>\n</table>\n<p><img src=\"https://serokell.io/files/wc/wc7c6z3a.A_Guide_to_Transfer_Learning_pic2.png\" alt=\"Three categories of transfer_learning\"></p>\n<p>We use different transfer learning approaches depending on the accessibility of data.</p>\n<h4 id=\"inductive-transfer-learning\" tabindex=\"-1\">Inductive transfer learning</h4>\n<p>Inductive transfer learning is used when <strong>labeled data is the same for the target and source domain</strong> but the tasks the model works on are different. The difference between the two domains is in data distribution and label definition. Here, the model encounters training data during the learning process and applies the learned knowledge to improve its performance with a new dataset that may be thematically very similar to the source database (for example, it can recognize tracks based on the model that is trained to identify vehicles).</p>\n<p><strong>The source and the target models can be trained successively,</strong> in which case the process is called representational transfer. We can use literal transfer (the source model is not modified) or non-literal transfer (the model is altered before transferring knowledge to the target model).</p>\n<p>Let’s examine the text classification problem to see how inductive learning (representational transfer) works in practice.</p>\n<p>For many years, various text classification models have been trained worldwide. We can combine the results of several of them and develop our own models, which can achieve better quality in classifying text. This is precisely how Google’s algorithm for detecting spam in text works.</p>\n<p>To better understand the details, read about the “meta-learn” transfer learning process <a href=\"https://ai.stanford.edu/~chuongdo/papers/transfer.pdf\">here</a>.</p>\n<p><strong>Another way is to teach the target model concurrently.</strong> In this case, depending on whether the source domain contains or lacks labeled data, inductive transfer learning is divided into two subcategories:</p>\n<ul>\n<li>\n<p><strong>Multi-task learning</strong>: an ML approach in which we teach a shared model multiple tasks simultaneously, based on the labeled source and target domain data.\n<img src=\"https://serokell.io/files/sr/srv7vi1n.A_Guide_to_Transfer_Learning_pic3.png\" alt=\"Multi-task learning\">\n(This approach is widely used in pharmaceutical research, where different drugs are assigned to groups of volunteers whose diagnosis is known. This allows us to evaluate the efficiency of the treatment.)</p>\n</li>\n<li>\n<p><strong>Self-taught learning</strong>: a <a href=\"https://serokell.io/blog/is-self-supervised-learning-future-of-ai\">framework</a> that uses unlabelled data for supervised self-learning. We can transfer the learned pattern to the labeled target domain.</p>\n<p>To illustrate this practice, let’s consider how to recognize bicycles in traffic.</p>\n</li>\n</ul>\n<p>We assume that a set of data (vehicle images) can be easily collected from the Internet. This collection is unlabelled and we can teach the model to recognize and categorize cars/trucks/bikes. In self-taught learning, the neural network decides for itself which similarities individual transport objects have and which of their features are important.</p>\n<p>Now we can give the model a limited number of bicycles. The recognition accuracy of bicycles using the self-supervised transfer learning will be higher in comparison to the work of the initial model.</p>\n<h4 id=\"transductive-transfer-learning\" tabindex=\"-1\">Transductive transfer learning</h4>\n<p>The transductive transfer learning approach is used in scenarios where <strong>the domains of the source and target tasks are similar</strong> but not exactly the same. In these cases, the source domain usually has a large amount of labeled data, and the target domain contains only a limited amount of unlabeled data.</p>\n<p>As a practical example of transductive learning, let’s consider reconstructing different emotions for specific individuals for whom we have a limited number of photographs.</p>\n<p><img src=\"https://serokell.io/files/wz/wzfi6w3d.A_Guide_to_Transfer_Learning_pic4.png\" alt=\"Transductive transfer_learning\"></p>\n<p>If we have a large database of people’s reactions, we can take a pre-trained model and transfer the knowledge to teach the model to reconstruct the facial expression for that particular person.</p>\n<p>In transductive learning, the model has observed both the training and testing datasets before. We predict the labels of the testing dataset by learning from the familiar dataset. We might not know the labels of the testing one but still use its patterns in the learning process.</p>\n\n<h4 id=\"unsupervised-transfer-learning\" tabindex=\"-1\">Unsupervised transfer learning</h4>\n<p>It works similarly to inductive transfer learning. The difference is that the algorithms focus on <strong>unsupervised tasks for both source and target tasks</strong>.</p>\n<p>So here we are talking about the most common situation where labeled data is not available for both the source and the target domain. This involves a variety of <a href=\"https://www.research-collection.ethz.ch/bitstream/handle/20.500.11850/468402/3/1-s2.0-S0950705121000794-main.pdf\">use cases</a>, the most popular of which is anomaly detection.</p>\n<p>Whenever labeling data is time-consuming, labor-intensive, or even impossible, unsupervised transfer learning is the only option.</p>\n<p>A real-world example is multispectral pedestrian detection. The error cost for driverless cars misdetecting pedestrians is human life. To train the model, we need to provide many cases with different weather conditions, landscapes, people, additional objects that partially obscure the pedestrians. The most complicated part of this task is identifying children.</p>\n<p>In real life, it’s almost impossible to have all this data available for all the different scenarios and their combinations. In this situation, transfer learning would be the only option. We can obtain the best result by using self-supervised learning as a basic domain for adults and transfer learning for improving the accuracy of children detection. Check out a detailed review of <a href=\"https://pubmed.ncbi.nlm.nih.gov/35746199/\">this case here</a>.</p>\n<h2 id=\"step-by-step-plan-for-the-transfer-learning-process\" tabindex=\"-1\">Step-by-step plan for the transfer learning process</h2>\n<p>The transfer learning process consists of the following steps.</p>\n<ol>\n<li>Create a base model and load pre-trained weights into it.</li>\n<li>Freeze all layers in the base model. (This means that the parameters within the original layers of the model will not change to avoid the possible loss in generalization. We only modify the parameters of the <strong>output layer</strong>.)</li>\n</ol>\n<p><img src=\"https://serokell.io/files/9n/9njoqqvk.A_Guide_to_Transfer_Learning_pic5.png\" alt=\"Learning process\"></p>\n<ol start=\"3\">\n<li>Create a new model on top of one or several lower-level layers of the base model.</li>\n<li>Train your new model on the new dataset.</li>\n</ol>\n<h2 id=\"what%E2%80%99s-the-difference-between-traditional-machine-learning-and-transfer-learning%3F\" tabindex=\"-1\">What’s the difference between traditional machine learning and transfer learning?</h2>\n<p>Transfer learning aims to overcome some limitations and challenges of traditional machine learning models. The table below shows the differences between the two approaches.</p>\n<table>\n  <tr>\n   <td>\n   </td>\n   <td><strong>Traditional ML model</strong>\n   </td>\n   <td><strong>Transfer learning model</strong>\n   </td>\n  </tr>\n  <tr>\n   <td><strong>Amount of data</strong>\n   </td>\n   <td>Requires a large amount of data\n   </td>\n   <td>Can use a small dataset\n   </td>\n  </tr>\n  <tr>\n   <td><strong>Costs</strong>\n   </td>\n   <td>Computationally expensive \n   </td>\n   <td>Cost-effective due to less computation\n   </td>\n  </tr>\n  <tr>\n   <td><strong>Training</strong>\n   </td>\n   <td>Each model is trained independently for a particular task\n   </td>\n   <td>The model uses knowledge obtained from the pre-trained model\n   </td>\n  </tr>\n  <tr>\n   <td><strong>Time</strong>\n   </td>\n   <td>Takes a long time to teach the model\n   </td>\n   <td>Achieves results faster because transfer learning algorithms leverage features and weights from previously trained models\n   </td>\n  </tr>\n</table>\n<p><img src=\"https://serokell.io/files/xx/xx9jx8mn.A_Guide_to_Transfer_Learning_pic6.png\" alt=\"Traditional ML and transfer_learning_comparison\"></p>\n<h2 id=\"transfer-learning-strategies\" tabindex=\"-1\">Transfer learning strategies</h2>\n<h3 id=\"reusing-a-model\" tabindex=\"-1\">Reusing a model</h3>\n<p>Imagine you are trying to identify Parkinson disease in the initial stages, but cannot train a deep neural network due to insufficient data. One way around this is to find a task that detects the same disease in the later stages and has a large amount of data. The deep neural network is trained on the second task and then applies its knowledge to the new task.</p>\n<p><img src=\"https://serokell.io/files/fh/fhdy7kh4.A_Guide_to_Transfer_Learning_pic7.png\" alt=\"Strategies \"></p>\n<p>Whether you need to use the entire model or just a few layers depends on the problem you want to solve.</p>\n<p>If your inputs are the same for both tasks, you may be able to reuse the model and make predictions for the new inputs. An alternative strategy is to change and re-train the output layer and some task-specific layers.</p>\n<h3 id=\"using-a-pre-trained-model\" tabindex=\"-1\">Using a pre-trained model</h3>\n<p>The second strategy is using a model that has already been trained. There can be several such models, so make sure you do some research. The number of new trainable  layers and the number of reused layers will depend on the problem at hand.</p>\n<p>For example, <a href=\"https://keras.io/api/applications/\">Keras</a>, Model Zoo, and TensorFlow offer pre-trained models that can be used for feature extraction, transfer learning, prediction, and fine-tuning. You will find a list of useful resources at the end of this post.</p>\n<h3 id=\"feature-extraction\" tabindex=\"-1\">Feature extraction</h3>\n<p>Initially, researchers manually hand-craft the features used in machine learning. Deep learning nets can extract features automatically. However, you still have to choose which features to include in your network, which means feature engineering and expertise are still essential. Nevertheless, neural networks can learn which features are important and which are not with the help of a <a href=\"https://opensource.com/article/17/9/representation-learning\">representation learning algorithm</a>. It can quickly identify a desirable combination of features, even for complex tasks that require a lot of human work.</p>\n<p>The learned representation can then be applied to other tasks. For that, you should use the first layers to determine the correct representation of features. You simply feed data into your network and use the output layer as an intermediate layer. This intermediate layer will then represent raw data.</p>\n<p>Watch this video to learn more about the implementation of transfer learning in practice.</p>\n\n<h2 id=\"when-to-use-transfer-learning%3F\" tabindex=\"-1\">When to use transfer learning?</h2>\n<p>ML practitioners can apply transfer learning in the following situations:</p>\n<h3 id=\"insufficient-data\" tabindex=\"-1\">Insufficient data</h3>\n<p>Working with little data would result in poor performance. The use of a pre-trained model helps create more accurate models.</p>\n<h3 id=\"lack-of-time\" tabindex=\"-1\">Lack of time</h3>\n<p>Teaching some machine learning models takes too long. Use a similar, pre-trained model when you don’t have enough time to build a new one.</p>\n<h3 id=\"limited-computation-capabilities\" tabindex=\"-1\">Limited computation capabilities</h3>\n<p>Too many machine learning tasks needed to train the model require a lot of computation, so the introduction of the pre-trained model is a great help.</p>\n<h2 id=\"when-not-to-use-transfer-learning%3F\" tabindex=\"-1\">When not to use transfer learning?</h2>\n<h3 id=\"insufficient-features\" tabindex=\"-1\">Insufficient features</h3>\n<p>Transfer learning is not effective if the features learned by the lower layer (the classification layer) are not sufficient to distinguish the classes for a new problem. If you are trying to understand if transfer learning is applicable in your case, think of the classic “dogs and cats” example. Suppose we have classified the former and now want to identify the latter. In this situation, low-level feature representations are still valid, mid-level are partially valid and high-level ones are invalid in this case. So you can use the low-level features of the pre-trained model instead of the high-level features. In addition, you will need to retrain more layers or, in the worst case, retrain the model from scratch if even deeper layers don’t provide sufficient results.</p>\n<h3 id=\"unrelated-datasets\" tabindex=\"-1\">Unrelated datasets</h3>\n<p>The features transfer poorly if the datasets are not similar. This would require restricting the parameters that can be trained and removing some layers, which can lead to overfitting. It’s very hard and time-consuming to determine how many layers can be removed without overfitting.</p>\n<h3 id=\"larger-datasets\" tabindex=\"-1\">Larger datasets</h3>\n<p>Transfer learning may not have the expected effect on tasks that require larger datasets. The process of traditional machine learning involves tuning randomized weights until they converge. Transfer learning starts with a pre-trained model, but larger data sets also lead to more iterations, so your initial weights become irrelevant.</p>\n<p>Developers cannot eliminate the network layers in transfer learning to confidently identify the best AI models. Dense layers are affected when you remove the first layers because the number of trainable parameters changes. Dense layers can also be a helpful starting point for layer reduction, but determining how many layers and neurons to keep to prevent model overfitting takes a lot of time and effort. Overfitting occurs when a new model picks up unnecessary data and noise from the training data that affects its results.</p>\n<p>Read this <a href=\"https://liacs.leidenuniv.nl/~plaata1/papers/ida2016_camera_ready.pdf\">paper</a> to learn more about the impact of the dataset size on transfer learning.</p>\n<h2 id=\"benefits-of-transfer-learning\" tabindex=\"-1\">Benefits of transfer learning</h2>\n<p><img src=\"https://serokell.io/files/r1/r12ktwmq.A_Guide_to_Transfer_Learning_pic8.png\" alt=\"TL advantages\"></p>\n<h3 id=\"better-initial-model\" tabindex=\"-1\">Better initial model</h3>\n<p>In other learning approaches, you need to build a model that has no prior knowledge. Transfer learning provides a better starting point for performing tasks.</p>\n<h3 id=\"higher-learning-rate\" tabindex=\"-1\">Higher learning rate</h3>\n<p>Since the model has already been trained on a similar task, transfer learning provides a higher learning rate.</p>\n<h3 id=\"higher-accuracy-after-training\" tabindex=\"-1\">Higher accuracy after training</h3>\n<p>Transfer learning allows a machine learning model to produce more accurate results thanks to a better baseline and a higher learning rate.</p>\n<h3 id=\"faster-training\" tabindex=\"-1\">Faster training</h3>\n<p>Learning using a pre-trained model can achieve target performance faster than traditional machine learning approaches.</p>\n<h2 id=\"transfer-learning-vs.-fine-tuning\" tabindex=\"-1\">Transfer learning vs. fine-tuning</h2>\n<p>Fine-tuning is a technique of transfer learning where you change the model output to fit a new task. Now let’s look at the difference between transfer learning and fine-tuning.</p>\n<p><strong>Transfer learning</strong> is the process by which we apply a model created for one task to another. We train the model using a dataset. The same model is then trained with a second dataset with a different class distribution (or even with classes not present in the first training dataset).</p>\n<p><strong>Fine-tuning</strong> is a particular approach to transfer learning, where we train only the output model and adjust the model to the new task. First, we use around 90% of the dataset for training and then proceed with the remaining 10% for the same model. Usually, we reduce the learning rate so that it has little effect on the weights that have already been changed.</p>\n<p>You can also use a base model that is currently performing a similar task and then freeze parts of the layers to preserve the previously learned knowledge when you conduct a training with new data. The training output layer can also be different and some parts of it frozen.</p>\n<p><img src=\"https://serokell.io/files/8k/8kpkel51.A_Guide_to_Transfer_Learning_pic9.png\" alt=\"Fine-tuning in transfer learning\"></p>\n<h2 id=\"applications-of-transfer-learning\" tabindex=\"-1\">Applications of transfer learning</h2>\n<h3 id=\"image-recognition\" tabindex=\"-1\">Image recognition</h3>\n<p>Transfer learning can be applied to a variety of image recognition applications. For example, a model trained to recognize horses can be further applied to detect zebras.</p>\n<h3 id=\"natural-language-processing\" tabindex=\"-1\">Natural language processing</h3>\n<p>One of the best-known applications of transfer learning is natural language processing (NLP). For instance, models that can understand linguistic structures can be used for more complicated tasks such as recommending the next word in a sequence based on previous sentences.</p>\n<h3 id=\"speech-recognition\" tabindex=\"-1\">Speech recognition</h3>\n<p>An ML model designed for Italian speech recognition can be used as the foundation for a Spanish speech recognition model.</p>\n<h3 id=\"medical-imaging\" tabindex=\"-1\">Medical imaging</h3>\n<p>A model developed for analyzing MRI scans can be the basis for a model trained to read CT scans.</p>\n<h3 id=\"autonomous-driving\" tabindex=\"-1\">Autonomous driving</h3>\n<p>In autonomous driving, a model developed for recognizing cars on the road, can learn to identify motorcyclists.</p>\n<h2 id=\"pre-trained-models-for-transfer-learning\" tabindex=\"-1\">Pre-trained models for transfer learning</h2>\n<p>Here’s a list of popular <strong>computer vision models</strong>:</p>\n<h3 id=\"resnet-50\" tabindex=\"-1\">ResNet-50</h3>\n<p>ResNet-50 is a pre-trained convolutional neural network containing 50 layers. Its pre-trained version contains more than a million images from ImageNet. ResNet-50 can classify images into 1000 categories with 92.1% accuracy.</p>\n<h3 id=\"inception-v3\" tabindex=\"-1\">Inception V3</h3>\n<p><a href=\"https://www.kaggle.com/datasets/google-brain/inception-v3\">Inception V3</a> is an image recognition model with more than 78.1% accuracy. It started as a module for Googlenet and was originally introduced as part of the ImageNet Recognition Challenge.</p>\n<p><img src=\"https://serokell.io/files/zk/zk4sa3hb.A_Guide_to_Transfer_Learning_pic10.png\" alt=\"Inception V3\"></p>\n<h3 id=\"xception\" tabindex=\"-1\">XCeption</h3>\n<p>Xception is inspired by the Inception model. It contains 71 depthwise separable convolutional layers. It has 94.5% accuracy.</p>\n<h3 id=\"vgg-16\" tabindex=\"-1\">VGG-16</h3>\n<p><a href=\"https://www.kaggle.com/datasets/keras/vgg16\">VGG16</a> is one of the most popular algorithms for object detection and classification from the Kaggle platform. It classifies images from 1000 categories with 92.7% accuracy.</p>\n<h3 id=\"vgg-19\" tabindex=\"-1\">VGG-19</h3>\n<p>The VGG-19 convolutional network is 19 layers deep. It has feature representations for 1000 categories (a variety of animals and objects such as a pencil, keyboard, mouse, etc.) and can classify images with 90% accuracy.</p>\n<p>The following models are helpful for <strong>NLP tasks</strong>:</p>\n<h3 id=\"word2vec\" tabindex=\"-1\">Word2Vec</h3>\n<p><a href=\"https://code.google.com/archive/p/word2vec/\">Word2vec</a> is a two-layer NN that turns text into a numerical form (vectors) for further processing by deep neural networks. It is  used for discerning patterns in code, genes, social media graphs, etc. Its accuracy is 92.5%.</p>\n<h3 id=\"fasttext\" tabindex=\"-1\">FastText</h3>\n<p>FastText is a library for word embedding and text classification learning. The mode, developed by Facebook’s AI research team, enables the development of supervised and unsupervised learning algorithms for word vector representations. Facebook offers pre-trained models in 294 different languages. The accuracy of fastText  varies depending on semantic and syntactic categories.</p>\n<h3 id=\"glove\" tabindex=\"-1\">GloVe</h3>\n<p>GloVe is an unsupervised learning model for creating vector representations. Training is performed using corpus-based global word-word co-occurrence statistics. It has 75% accuracy.</p>\n<h3 id=\"more-resources\" tabindex=\"-1\">More resources</h3>\n<p>Microsoft also offers several pre-trained models with the <a href=\"https://learn.microsoft.com/en-us/machine-learning-server/install/microsoftml-install-pretrained-models\">MicrosoftML R and Microsoftml Python packages</a>, both available for development in R and Python.</p>\n<p><a href=\"https://modelzoo.co/\">Model Zoo</a> is a platform with a collection of various pre-trained models for deep learning researchers.</p>\n<p>You will find more pre-trained machine learning models in this <a href=\"https://towardsdatascience.com/5-websites-to-download-pre-trained-machine-learning-models-6d136d58f4e7\">post</a>.</p>\n"
}