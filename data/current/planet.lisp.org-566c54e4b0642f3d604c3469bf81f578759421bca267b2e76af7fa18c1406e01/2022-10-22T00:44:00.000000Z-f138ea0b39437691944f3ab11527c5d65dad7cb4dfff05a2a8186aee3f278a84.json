{
  "title":"Joe Marshall: Lisp: Second impression",
  "date":"2022-10-22T00:44:00.000000Z",
  "author":null,
  "id":"http://funcall.blogspot.com/2022/10/lisp-second-impression.html",
  "link":"http://funcall.blogspot.com/2022/10/lisp-second-impression.html",
  "content":"<p>My first impressions of Lisp were not good.  I didn't see how\n  navigating list structure was of any use.  It seemed to be just a\n  more cumbersome way of getting at the data.</p>\n\n<p>In fact, my first impressions of computer science were not very\n  positive.  I enjoyed hobbyist coding on my TRS-80, but\n  “real” programming was tedious and the proscriptions of\n  “doing it the correct way” took the joy out of it.  I\n  explored other options for my major.  Fate intervened.  Over the next\n  year I realized my calling was EECS, so in my\n  sophomore year I took all the intro courses.</p>\n\n<p>I had heard that the introductory computer science course used\n  Lisp.  That was disappointing, but I started hearing things about\n  Lisp that made me think I should take a second look.  I learned that\n  Lisp was considered the premier language of MIT's Artificial\n  Intelligence Laboratory.  It was invented by hackers and designed to\n  be a programmable programming language that was infinitely\n  customizable.  The lab had developed special computers that ran\n  Lisp on the hardware.  The OS was even written in Lisp.  I wasn't\n  looking forward to <code>car</code> and <code>cdr</code>'ing my way\n  through endless <code>cons</code> cells, but I figured that there\n  had to be more going on.</p>\n\n<p>6.001 was unlike the prior computer courses I had\n  taken.  The course was not about how to instruct a computer to\n  perform a task — the course was about expressing ideas as\n  computation.  To me, this seemed a much better way to approach\n  computers.  Professor Hal Abelson was co-lecturing the course.  He\n  said that he chose Lisp as the teaching language because it was\n  easier to express ideas clearly.</p>\n\n<p>Two things stood out to me in the first lecture.  Professor Abelson\n  showed the recursive and iterative versions\n  of <code>factorial</code>.  Of course I had seen\n  recursive <code>factorial</code> from the earlier course and I knew\n  how it worked.  Clearly the iterative version must work the same\n  way.  (One of my early hangups about Lisp was all the recursion.)  I was suprised to\n  find out that the Lisp system would automatically detect tail\n  recursive cases and turn them into iteration.  Evidentally, the\n  makers of Lisp had put some thought into this.</p>\n\n<p>Professor Abelson also demonstrated first class functions.  He\n  wrote a procedure that numerically approximates the derivative of a\n  function.  He then used that in a generic Newton's method solver.\n  This is all straightforward stuff, but to a newbie like me, I\n  thought it was amazing.  In just a few lines of code we were doing\n  simple calculus.</p>\n\n<p>It was a mystery to me how first class functions were implemented,\n  but I could see how they were used in the Newton's method solver.\n  The code Professor Abelson wrote was clear and obvious.  It captured\n  the concept of derivatives and iterative improvement concisely, and\n  it effectively computed answers to boot.  I had to try it.  Right\n  after the lecture I went to lab and started typing examples at the\n  REPL.  Sure enough, they worked as advertised.  A tail-recursive\n  loop really didn't push any stack.  It didn't leak even the tiniest\n  bit of memory, no matter how long the loop.  I tried the Newton's\n  method solver to take cube roots.  I passed the cube function to the\n  derivative function and the result was a function that was\n  numerically close to the derivative.</p>\n\n<p>Now I was a bit more impressed with Lisp than I was earlier.  I\n  wasn't completely sold, but I could see some potential here.  I\n  wanted to learn a bit more before I dismissed it entirely.\n  It took me several months to become a Lisp fan.  The parenthesis\n  were a small hurdle — it took me a couple of weeks to get the\n  hang of <code>let</code> forms.  There was a week or two of\n  navigating <code>cons</code> cells to wade through.  But I\n  eventually came to love the language.</p>\n\n<p>My first impression of Lisp was poor.\n  The uselessness of traversing random list structure was\n  unmotivating. My second impression was better.\n Professor Abelson teaching directly from preprints of S&amp;ICP\n  might have had something to do with it.</p>"
}