<?xml version="1.0"?>
<rss version="2.0">
<channel>
	<title>Planet Lisp</title>
	<link>http://planet.lisp.org/</link>
	<description>Planet Lisp</description>
	<language>en</language>


<item>
	<title>Nicolas Hafner: Release Date Announcement! - November Kandria Update</title>
	<guid isPermaLink="true">https://reader.tymoon.eu/article/417</guid>
	<link>https://reader.tymoon.eu/article/417</link>
	
	<description>&lt;img alt=&quot;https://kandria.com/media/trailer%20cover.png&quot; src=&quot;https://kandria.com/media/trailer%20cover.png&quot; /&gt;&lt;p&gt;This update's an important one! The final release date, a new trailer, and some more announcements. Dang! Well, without further ado:&lt;/p&gt;&lt;h2 id=&quot;release date: 11th of january!&quot;&gt;Release Date: 11th of January!&lt;/h2&gt;&lt;p&gt;Alright, I'm happy to announce that we got a final release date for Kandria, which is as the title says, &lt;strong&gt;Wednesday, 11th of January 2023&lt;/strong&gt;! To celebrate the release date announcement, and the large amounts of progress we've made polishing the game, please enjoy this brand new trailer as well:&lt;/p&gt;&lt;p&gt;The game will release on &lt;a class=&quot;external-link&quot; href=&quot;https://kandria.com/steam&quot;&gt;Steam&lt;/a&gt;, &lt;a class=&quot;external-link&quot; href=&quot;https://kandria.com/itch&quot;&gt;itch.io&lt;/a&gt;, and onto &lt;a class=&quot;external-link&quot; href=&quot;https://kandria.com&quot;&gt;the website&lt;/a&gt; as a direct sale. All copies of the game will be DRM-free. I'm also excited to say that the game will release both in &lt;strong&gt;English&lt;/strong&gt; and in &lt;strong&gt;German&lt;/strong&gt;, translated by yours truly. We have enough time left over to do the localisation, so I really want to do it.&lt;/p&gt;&lt;h2 id=&quot;shevalin single&quot;&gt;Shevalin Single&lt;/h2&gt;&lt;p&gt;The full soundtrack of the game (which is excellent, by the way!) will be released together with the game in January. However, you can enjoy a single from the soundtrack right now:&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://hypeddit.com/q89kb4&quot;&gt;https://hypeddit.com/q89kb4&lt;/a&gt;&lt;/p&gt;&lt;p&gt;This is Shevalin, the ending credits song, composed by our very talented Mikel Dale, and sung by the incredible Julie Elven. I hope you enjoy it!&lt;/p&gt;&lt;h2 id=&quot;user feedback&quot;&gt;User Feedback&lt;/h2&gt;&lt;p&gt;Currently we're still polishing everything we can find and responding to user feedback. One of the most prominent things we noticed watching people play was that they were confused by the locked doors in the first region of the game. So hey, we finally added crashable doors:&lt;/p&gt;&lt;img alt=&quot;https://filebox.tymoon.eu//file/TWpZeE5nPT0=&quot; src=&quot;https://filebox.tymoon.eu//file/TWpZeE5nPT0=&quot; /&gt;&lt;p&gt;If you're part of the beta programme, please give the game a try! We still have some time to include more changes if you have any suggestions.&lt;/p&gt;&lt;h2 id=&quot;development&quot;&gt;Development&lt;/h2&gt;&lt;p&gt;Okey, &lt;a class=&quot;external-link&quot; href=&quot;https://reader.tymoon.eu/article/416&quot;&gt;last month&lt;/a&gt; we got a new roadmap, so let's look at that now:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;s&gt;Add &lt;em&gt;even more&lt;/em&gt; detail tiles, foliage, and animal spawners throughout the world&lt;/s&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;s&gt;Fine-tune the levelling, trade prices, and enemy difficulty&lt;/s&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;s&gt;Create new key art&lt;/s&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;s&gt;Create a new trailer&lt;/s&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Spruce up some of the sound effects &lt;s&gt;and music tracks&lt;/s&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Create achievement icons and integrate them into the game&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Translate everything (over 50'000 words) into German&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Release the full game&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Backport re-usable components into Trial&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Separate out the assets from the main repository&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Publish the source code under a permissive license&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Fix a plethora of bugs and inconveniences in Alloy&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Polish the editor and make it more stable&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Release the editor&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Develop a modding system for Trial&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Finish the Forge build system at least to an extent where it's usable&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Integrate the mod.io API with the modding system&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Create a mod manager and browser UI&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Document more parts of Trial and Kandria&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Release an official modding kit&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Alright! Until the 11th of January finally hits, please continue to share the &lt;a class=&quot;external-link&quot; href=&quot;https://kandria.com/steam&quot;&gt;steam page&lt;/a&gt; with your friends and other communities!&lt;/p&gt;</description>
	
	<pubDate>Tue, 15 Nov 2022 13:51:37 GMT</pubDate>
</item>

<item>
	<title>Quicklisp news: November 2022 Quicklisp dist update now available</title>
	<guid isPermaLink="true">http://blog.quicklisp.org/2022/11/november-2022-quicklisp-dist-update-now.html</guid>
	<link>http://blog.quicklisp.org/2022/11/november-2022-quicklisp-dist-update-now.html</link>
	
	<description>&lt;p&gt;&amp;nbsp;&lt;b&gt;New projects:&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/40ants/40ants-asdf-system/&quot;&gt;40ants-asdf-system&lt;/a&gt;&amp;nbsp;&amp;mdash; Provides a class for being used instead of asdf:package-inferred-system. &amp;mdash; BSD&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/Shinmera/action-list&quot;&gt;action-list&lt;/a&gt;&amp;nbsp;&amp;mdash; An implementation of action lists &amp;mdash; zlib&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/Hectarea1996/adp/&quot;&gt;adp&lt;/a&gt;&amp;nbsp;&amp;mdash; Add Documentation, Please. A documentation generator. &amp;mdash; The Unlicense&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/dtqec/anatevka/&quot;&gt;anatevka&lt;/a&gt;&amp;nbsp;&amp;mdash; A distributed blossom algorithm for minimum-weight perfect matching. &amp;mdash; MIT&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/y2q-actionman/cl-annot-revisit/&quot;&gt;cl-annot-revisit&lt;/a&gt;&amp;nbsp;&amp;mdash; Re-implementation of 'cl-annot', an annotation syntax library for Common Lisp. &amp;mdash; WTFPL&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/alangalvino/cl-bloom-filter/&quot;&gt;cl-bloom-filter&lt;/a&gt;&amp;nbsp;&amp;mdash; Just another Common Lisp bloom filter implementation, enjoy it! &amp;mdash;&amp;nbsp;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/digikar99/cl-cblas/&quot;&gt;cl-cblas&lt;/a&gt;&amp;nbsp;&amp;mdash; A cl-autowrap generated wrapper around CBLAS which provides a C interface to the Basic Linear Algebra Subprograms. &amp;mdash; MIT&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/rajasegar/cl-djula-svg/&quot;&gt;cl-djula-svg&lt;/a&gt;&amp;nbsp;&amp;mdash; Handle SVGs in Djula Templates &amp;mdash; MIT&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/rajasegar/cl-djula-tailwind/&quot;&gt;cl-djula-tailwind&lt;/a&gt;&amp;nbsp;&amp;mdash; Tailwind classes for Djula templates &amp;mdash; MIT&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/facts-db/cl-facts/&quot;&gt;cl-facts&lt;/a&gt;&amp;nbsp;&amp;mdash; in-memory graph database &amp;mdash; ISC&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/BohongHuang/cl-glib&quot;&gt;cl-glib&lt;/a&gt;&amp;nbsp;&amp;mdash; GLib binding for Common Lisp. &amp;mdash; lgpl3&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/BohongHuang/cl-gobject-introspection-wrapper&quot;&gt;cl-gobject-introspection-wrapper&lt;/a&gt;&amp;nbsp;&amp;mdash; Wrap and call GObject Introspection FFI function in LISP style, based on cl-gobject-introspection. &amp;mdash; lgpl3&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/facts-db/cl-lessp/&quot;&gt;cl-lessp&lt;/a&gt;&amp;nbsp;&amp;mdash; Generic order predicate &amp;mdash; ISC&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/eigenhombre/cl-oju/&quot;&gt;cl-oju&lt;/a&gt;&amp;nbsp;&amp;mdash; Common Lisp equivalents of core Clojure functions, especially sequence-related ones &amp;mdash; MIT&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/facts-db/cl-rollback/&quot;&gt;cl-rollback&lt;/a&gt;&amp;nbsp;&amp;mdash; rollback functions &amp;mdash; ISC&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/mmontone/cl-sentry-client&quot;&gt;cl-sentry-client&lt;/a&gt;&amp;nbsp;&amp;mdash; Sentry client &amp;mdash; MIT&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/varjagg/cl-union-find/&quot;&gt;cl-union-find&lt;/a&gt;&amp;nbsp;&amp;mdash; An implementation of UNION-FIND datastructure &amp;mdash; LGPL&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/nlamirault/climc/&quot;&gt;climc&lt;/a&gt;&amp;nbsp;&amp;mdash; A common lisp Instant Messaging client. &amp;mdash; MIT License&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/rabbibotton/clog-plotly/&quot;&gt;clog-plotly&lt;/a&gt;&amp;nbsp;&amp;mdash; New CLOG System &amp;mdash; BSD&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/rabbibotton/clog-terminal/&quot;&gt;clog-terminal&lt;/a&gt;&amp;nbsp;&amp;mdash; CLOG Terminal &amp;mdash; BSD&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/sirherrbatka/de-mock-racy/&quot;&gt;de-mock-racy&lt;/a&gt;&amp;nbsp;&amp;mdash; Simplistic mocking library. &amp;mdash; BSD simplified&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lisp-stat.dev/docs/manuals/distributions/&quot;&gt;distributions&lt;/a&gt;&amp;nbsp;&amp;mdash; Random numbers and distributions &amp;mdash; MS-PL&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/tfeb/dsm&quot;&gt;dsm&lt;/a&gt;&amp;nbsp;&amp;mdash; Destructuring match &amp;mdash; MIT&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/tdrhq/easy-macros/&quot;&gt;easy-macros&lt;/a&gt;&amp;nbsp;&amp;mdash; An easier way to write 90% of your macros &amp;mdash; Apache License, Version 2.0&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://shinmera.github.io/filesystem-utils/&quot;&gt;filesystem-utils&lt;/a&gt;&amp;nbsp;&amp;mdash; A collection of utilities for filesystem interaction. &amp;mdash; zlib&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/johnlorentzson/filter-maker/&quot;&gt;filter-maker&lt;/a&gt;&amp;nbsp;&amp;mdash; CLIM program for letting users make filters out of predicates and keys. &amp;mdash; BSD 2-Clause&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/tdrhq/fiveam-matchers/&quot;&gt;fiveam-matchers&lt;/a&gt;&amp;nbsp;&amp;mdash; An extensible matchers library for FiveAM &amp;mdash; Apache License, Version 2.0&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/timeolord/infix-reader/&quot;&gt;infix-reader&lt;/a&gt;&amp;nbsp;&amp;mdash; A reader macro to allow for infix syntax with { ... } &amp;mdash; Unlicence&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://sr.ht/~shunter/wayflan/&quot;&gt;input-event-codes&lt;/a&gt;&amp;nbsp;&amp;mdash; Port of all constants from input-event-codes.h from both Linux and FreeBSD &amp;mdash; MIT&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/plkrueger/instance-tracking/&quot;&gt;instance-tracking&lt;/a&gt;&amp;nbsp;&amp;mdash; Defines a class that tracks its instances &amp;mdash; MIT&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/KinaKnowledge/json-lib/&quot;&gt;json-lib&lt;/a&gt;&amp;nbsp;&amp;mdash; A simple and relatively fast JSON parser and encoder &amp;mdash; MIT&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/dzangfan/lineva/&quot;&gt;lineva&lt;/a&gt;&amp;nbsp;&amp;mdash; Linear evaluation macro system &amp;mdash; GPLv3&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://shinmera.github.io/luckless/&quot;&gt;luckless&lt;/a&gt;&amp;nbsp;&amp;mdash; Lockless data structures &amp;mdash; zlib&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/Hectarea1996/more-cffi/&quot;&gt;more-cffi&lt;/a&gt;&amp;nbsp;&amp;mdash; Extension of the CFFI project. A facility to wrap C bindings and write documentation. &amp;mdash; The Unlicense&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/ntrocado/music-spelling/&quot;&gt;music-spelling&lt;/a&gt;&amp;nbsp;&amp;mdash; Automatic pitch and rhythm spelling. &amp;mdash; Apache 2.0&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/walpurgisnatch/nail/&quot;&gt;nail&lt;/a&gt;&amp;nbsp;&amp;mdash; library providing convenient functions for working with linalg, statistics and probability. &amp;mdash; MIT&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/atlas-engineer/ndebug/&quot;&gt;ndebug&lt;/a&gt;&amp;nbsp;&amp;mdash; A toolkit to construct interface-aware yet standard-compliant debugger hooks. &amp;mdash; BSD 3-Clause&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/digikar99/numericals/&quot;&gt;numericals&lt;/a&gt;&amp;nbsp;&amp;mdash; A high performance numerical computing library for Common Lisp (focus: basic math operations) &amp;mdash; MIT&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/atlas-engineer/ospm/&quot;&gt;ospm&lt;/a&gt;&amp;nbsp;&amp;mdash; OS package manager interface &amp;mdash; BSD 3-Clause&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/walpurgisnatch/pero/&quot;&gt;pero&lt;/a&gt;&amp;nbsp;&amp;mdash; Logging and text file perations library &amp;mdash; MIT&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/plkrueger/pk-serialize/&quot;&gt;pk-serialize&lt;/a&gt;&amp;nbsp;&amp;mdash; Serialization of Common Lisp data structures &amp;mdash; MIT&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lisp-stat.dev/&quot;&gt;statistics&lt;/a&gt;&amp;nbsp;&amp;mdash; A consolidated system of statistical functions &amp;mdash; MS-PL&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/walpurgisnatch/stepster/&quot;&gt;stepster&lt;/a&gt;&amp;nbsp;&amp;mdash; Web scraping library &amp;mdash; MIT&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://cicadas.surf/cgit/colin/testiere.git/&quot;&gt;testiere&lt;/a&gt;&amp;nbsp;&amp;mdash; Up Front Testing for DEFUN and DEFMETHOD &amp;mdash; GPLv3&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://notabug.org/cage/trivial-sanitize&quot;&gt;trivial-sanitize&lt;/a&gt;&amp;nbsp;&amp;mdash; clean html strings: &quot;&lt;a&gt;foo&lt;/a&gt;&quot; â&amp;#8224;' &quot;foo&quot; &amp;mdash; LLGPL&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/plkrueger/tsqueue/&quot;&gt;tsqueue&lt;/a&gt;&amp;nbsp;&amp;mdash; Thread Safe Queue &amp;mdash; MIT&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/marcoheisig/Typo/&quot;&gt;typo&lt;/a&gt;&amp;nbsp;&amp;mdash; A portable type inference library for Common Lisp &amp;mdash; MIT&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://git.sr.ht/~shunter/wayflan/&quot;&gt;wayflan&lt;/a&gt;&amp;nbsp;&amp;mdash; From-scratch Wayland client implementation &amp;mdash; BSD 3-Clause&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://gitlab.com/Aksej/yah&quot;&gt;yah&lt;/a&gt;&amp;nbsp;&amp;mdash; Yet Another Heap &amp;mdash; BSD-3&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;b&gt;Updated projects&lt;/b&gt;: 3d-quaternions, 3d-vectors, abstract-arrays, acclimation, agnostic-lizard, alexandria-plus, architecture.builder-protocol, array-utils, assoc-utils, auto-restart, bdef, bit-smasher, blackbird, bp, bst, caveman, cephes.cl, cerberus, cffi, chunga, ci, ci-utils, cl+ssl, cl-all, cl-async, cl-autowrap, cl-bmas, cl-charms, cl-collider, cl-confidence, cl-cron, cl-data-structures, cl-form-types, cl-forms, cl-gamepad, cl-generator, cl-git, cl-gserver, cl-i18n, cl-info, cl-interpol, cl-isaac, cl-json-pointer, cl-kaputt, cl-las, cl-lib-helper, cl-liballegro, cl-liballegro-nuklear, cl-libuv, cl-lzlib, cl-marshal, cl-migratum, cl-mixed, cl-mock, cl-naive-store, cl-openal, cl-patterns, cl-pdf, cl-protobufs, cl-randist, cl-random-forest, cl-replica, cl-scsu, cl-semver, cl-sendgrid, cl-ses4, cl-steamworks, cl-str, cl-telegram-bot, cl-tls, cl-torrents, cl-unix-sockets, cl-utils, cl-wav, cl-webkit, cl-xkb, cl-yaml, cl-yxorp, cl-zstd, clack, clgplot, clingon, clj-re, clobber, clog, clog-ace, closer-mop, clsql, clss, cluffer, clunit2, clx, cmd, coleslaw, common-lisp-jupyter, commondoc-markdown, compiler-macro-notes, conduit-packages, consfigurator, croatoan, css-lite, cytoscape-clj, damn-fast-priority-queue, data-frame, data-lens, data-table, datamuse, defmain, dense-arrays, depot, dexador, dfio, dissect, doc, docparser, docs-builder, eclector, erudite, extensible-compound-types, fast-io, fiveam-asdf, flare, float-features, font-discovery, for, functional-trees, github-api-cl, gtirb-capstone, gtirb-functions, gtwiwtg, gute, harmony, http2, hunchensocket, hunchentoot-errors, imago, in-nomine, ironclad, jp-numeral, json-schema, jsonrpc, kekule-clj, lack, latter-day-paypal, lift, linear-programming, linear-programming-glpk, lisp-binary, lisp-critic, lisp-namespace, lisp-stat, lisp-unit2, literate-lisp, log4cl-extras, ltk, lunamech-matrix-api, markup, math, mcclim, mito, mnas-graph, mnas-package, multiposter, mutility, myway, neural-classifier, nfiles, nhooks, nkeymaps, nodgui, numcl, numerical-utilities, nyxt, omglib, one-more-re-nightmare, osc, osicat, overlord, papyrus, parachute, pathname-utils, periods, petalisp, pgloader, piping, plot, plump, polymorphic-functions, posix-shm, postmodern, pp-toml, query-fs, quick-patch, quri, random-state, replic, rutils, sel, select, serapeum, shasht, shop3, simple-neural-network, sketch, skippy-renderer, slite, sly, snakes, special-functions, speechless, spinneret, staple, stripe-against-the-modern-world, stumpwm, stumpwm-dynamic-float, tfeb-lisp-hax, tfeb-lisp-tools, trace-db, trivial-clipboard, trivial-extensible-sequences, trivial-file-size, trivial-mimes, uax-15, uiop, usocket, utilities.print-items, utilities.print-tree, vellum, vellum-binary, vellum-postmodern, vk, with-c-syntax, wuwei, xml-emitter, yason, zippy.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Removed projects&lt;/b&gt;: cl-json-template, cl-schedule, cl-splicing-macro, mito-attachment, trivial-timers.&lt;/p&gt;&lt;p&gt;To get this update, use&amp;nbsp;&lt;code&gt;(ql:update-dist &quot;quicklisp&quot;)&lt;/code&gt;&lt;/p&gt;&lt;p&gt;I apologize for the long gap between this update and the last. I intend to get back on a monthly schedule.&lt;/p&gt;</description>
	
	<pubDate>Mon, 07 Nov 2022 00:27:00 GMT</pubDate>
</item>

<item>
	<title>Pascal Costanza: New blog address</title>
	<guid isPermaLink="true">http://p-cos.blogspot.com/2022/11/new-blog-address.html</guid>
	<link>http://p-cos.blogspot.com/2022/11/new-blog-address.html</link>
	
	<description>&lt;p&gt;I am moving my blog away from blogspot / blogger. I am going to host my &lt;a href=&quot;https://blog.p-cos.net&quot;&gt;new blog&lt;/a&gt; at &lt;a href=&quot;https://micro.blog&quot;&gt;micro.blog&lt;/a&gt;. You can subscribe to an &lt;a href=&quot;https://blog.p-cos.net/categories/lisp/feed.xml&quot;&gt;RSS feed on Lisp-related posts&lt;/a&gt; if you care only for that. micro.blog also acts as a social network and, although it is its own platform, is compatible with Mastodon. My Mastodon handle is @costanza@micro.blog.&lt;/p&gt;cnx.cnx-float, cnx.cnx-float cnx { visibility: hidden !important; } div.jwplayer div.jw-wrapper, div[id^='primis_playerSekindoSPlayer'], div.min-tv-is-sticky, iframe.min-tv-is-sticky, div.vjs-pip-container video-js.video-js.vjs-pip-active { position: absolute !important; }cnx.cnx-float, cnx.cnx-float cnx { visibility: hidden !important; } div.jwplayer div.jw-wrapper, div[id^='primis_playerSekindoSPlayer'], div.min-tv-is-sticky, iframe.min-tv-is-sticky, div.vjs-pip-container video-js.video-js.vjs-pip-active { position: absolute !important; }</description>
	
	<pubDate>Thu, 03 Nov 2022 11:47:00 GMT</pubDate>
</item>

<item>
	<title>Joe Marshall: Lisp: Second impression</title>
	<guid isPermaLink="true">http://funcall.blogspot.com/2022/10/lisp-second-impression.html</guid>
	<link>http://funcall.blogspot.com/2022/10/lisp-second-impression.html</link>
	
	<description>&lt;p&gt;My first impressions of Lisp were not good.  I didn't see how
  navigating list structure was of any use.  It seemed to be just a
  more cumbersome way of getting at the data.&lt;/p&gt;

&lt;p&gt;In fact, my first impressions of computer science were not very
  positive.  I enjoyed hobbyist coding on my TRS-80, but
  &amp;ldquo;real&amp;rdquo; programming was tedious and the proscriptions of
  &amp;ldquo;doing it the correct way&amp;rdquo; took the joy out of it.  I
  explored other options for my major.  Fate intervened.  Over the next
  year I realized my calling was EECS, so in my
  sophomore year I took all the intro courses.&lt;/p&gt;

&lt;p&gt;I had heard that the introductory computer science course used
  Lisp.  That was disappointing, but I started hearing things about
  Lisp that made me think I should take a second look.  I learned that
  Lisp was considered the premier language of MIT's Artificial
  Intelligence Laboratory.  It was invented by hackers and designed to
  be a programmable programming language that was infinitely
  customizable.  The lab had developed special computers that ran
  Lisp on the hardware.  The OS was even written in Lisp.  I wasn't
  looking forward to &lt;code&gt;car&lt;/code&gt; and &lt;code&gt;cdr&lt;/code&gt;'ing my way
  through endless &lt;code&gt;cons&lt;/code&gt; cells, but I figured that there
  had to be more going on.&lt;/p&gt;

&lt;p&gt;6.001 was unlike the prior computer courses I had
  taken.  The course was not about how to instruct a computer to
  perform a task &amp;mdash; the course was about expressing ideas as
  computation.  To me, this seemed a much better way to approach
  computers.  Professor Hal Abelson was co-lecturing the course.  He
  said that he chose Lisp as the teaching language because it was
  easier to express ideas clearly.&lt;/p&gt;

&lt;p&gt;Two things stood out to me in the first lecture.  Professor Abelson
  showed the recursive and iterative versions
  of &lt;code&gt;factorial&lt;/code&gt;.  Of course I had seen
  recursive &lt;code&gt;factorial&lt;/code&gt; from the earlier course and I knew
  how it worked.  Clearly the iterative version must work the same
  way.  (One of my early hangups about Lisp was all the recursion.)  I was suprised to
  find out that the Lisp system would automatically detect tail
  recursive cases and turn them into iteration.  Evidentally, the
  makers of Lisp had put some thought into this.&lt;/p&gt;

&lt;p&gt;Professor Abelson also demonstrated first class functions.  He
  wrote a procedure that numerically approximates the derivative of a
  function.  He then used that in a generic Newton's method solver.
  This is all straightforward stuff, but to a newbie like me, I
  thought it was amazing.  In just a few lines of code we were doing
  simple calculus.&lt;/p&gt;

&lt;p&gt;It was a mystery to me how first class functions were implemented,
  but I could see how they were used in the Newton's method solver.
  The code Professor Abelson wrote was clear and obvious.  It captured
  the concept of derivatives and iterative improvement concisely, and
  it effectively computed answers to boot.  I had to try it.  Right
  after the lecture I went to lab and started typing examples at the
  REPL.  Sure enough, they worked as advertised.  A tail-recursive
  loop really didn't push any stack.  It didn't leak even the tiniest
  bit of memory, no matter how long the loop.  I tried the Newton's
  method solver to take cube roots.  I passed the cube function to the
  derivative function and the result was a function that was
  numerically close to the derivative.&lt;/p&gt;

&lt;p&gt;Now I was a bit more impressed with Lisp than I was earlier.  I
  wasn't completely sold, but I could see some potential here.  I
  wanted to learn a bit more before I dismissed it entirely.
  It took me several months to become a Lisp fan.  The parenthesis
  were a small hurdle &amp;mdash; it took me a couple of weeks to get the
  hang of &lt;code&gt;let&lt;/code&gt; forms.  There was a week or two of
  navigating &lt;code&gt;cons&lt;/code&gt; cells to wade through.  But I
  eventually came to love the language.&lt;/p&gt;

&lt;p&gt;My first impression of Lisp was poor.
  The uselessness of traversing random list structure was
  unmotivating. My second impression was better.
 Professor Abelson teaching directly from preprints of S&amp;amp;ICP
  might have had something to do with it.&lt;/p&gt;</description>
	
	<pubDate>Sat, 22 Oct 2022 00:44:00 GMT</pubDate>
</item>

<item>
	<title>Joe Marshall: Lisp: First Impressions</title>
	<guid isPermaLink="true">http://funcall.blogspot.com/2022/10/lisp-first-impressions.html</guid>
	<link>http://funcall.blogspot.com/2022/10/lisp-first-impressions.html</link>
	
	<description>&lt;p&gt;My first exposure to Lisp was in the summer of 1981.  I was taking
  a summer school intro to computers.  The course was taught on a
  PDP-11, and for the first few weeks we programmed in Macro-11
  assembly language.  For the last couple of weeks they introduced
  Lisp.&lt;/p&gt;

&lt;p&gt;Frankly, I wasn't impressed.&lt;/p&gt;

&lt;p&gt;The course started by talking about linked lists and how you could
  navigate them with &lt;code&gt;car&lt;/code&gt; and &lt;code&gt;cdr&lt;/code&gt;.  We then
  went on to build more complicated structures like alists and
  plists.  This was an old-fashioned lisp, so we used things
  like &lt;code&gt;getprop&lt;/code&gt; and &lt;code&gt;putprop&lt;/code&gt; to set symbol
  properties.&lt;/p&gt;

&lt;p&gt;The subject matter wasn't difficult to understand (though chasing
  pointers around list structure is error prone).  Since we had
  just been learning Macro-11, it was natural to play with linked list
  structure in assembly code.  We wrote assembly code to look things
  up in a plist.&lt;/p&gt;

&lt;p&gt;My impression was that Lisp was centered around manipulating these
  rather cumbersome data structures called &lt;code&gt;cons&lt;/code&gt; cells.
  Linked lists of cons cells have obvious disadvantages when compared
  to arrays.  This makes the language tedious to work with.&lt;/p&gt;

&lt;p&gt;The summer school course was my first &amp;ldquo;real&amp;rdquo; college
  course in computers.  I was put off.  &amp;ldquo;Real&amp;rdquo; computing
  wasn't as much fun as I had hoped it would be.  I definitely
  wouldn't be considering it as a major, let alone a career.  I wasn't
  interested in Lisp at all.&lt;/p&gt;

&lt;i&gt;to be continued&lt;/i&gt;</description>
	
	<pubDate>Wed, 19 Oct 2022 19:00:00 GMT</pubDate>
</item>

<item>
	<title>Tim Bradshaw: Package-local nicknames</title>
	<guid isPermaLink="true">https://www.tfeb.org/fragments/2022/10/14/package-local-nicknames/?utm_source=lisp&amp;utm_medium=RSS</guid>
	<link>https://www.tfeb.org/fragments/2022/10/14/package-local-nicknames/?utm_source=lisp&amp;utm_medium=RSS</link>
	
	<description>&lt;p&gt;What follows is an opinion. Do not under any circumstances read it. Other opinions are available (but wrong).&lt;/p&gt;
&lt;!-- more--&gt;

&lt;p&gt;Package-local nicknames are an abomination. They should be burned with nuclear fire, and their ashes launched into space on a trajectory which will leave the Solar System.&lt;/p&gt;

&lt;p&gt;The only reason why package-local nicknames matter is if you are writing a lot of code with lots of package-qualified names in it. If you are doing that then &lt;em&gt;you are writing code which is hard to read&lt;/em&gt;: the names in your code are longer than they need to be and the first several characters of them are package name noise (people read, broadly from left to right). Imagine me:a la:version ge:of oe:English oe:where la:people wrote like that: it&amp;rsquo;s just horrible. If you are writing code which is hard to read you are writing bad code.&lt;/p&gt;

&lt;p&gt;Instead you should do the work to construct a namespace in which the words you intend to use are directly present. This means constructing suitable packages: the files containing the package definitions are then almost the only place where package names occur, and are a minute fraction of the total code. Doing this is a good practice in itself because the package definition file is then a place which describes just what names your code needs, from where, and what names it provides. Things like conduit packages (shameless self-promotion) can help with this, which is why I wrote them: being able to say &amp;lsquo;this package exports the combination of the exports of these packages, except &amp;hellip;&amp;rsquo; or &amp;lsquo;this package exports just the following symbols from these packages&amp;rsquo; in an explicit way is very useful.&lt;/p&gt;

&lt;p&gt;If you are now rehearsing a litany of things that can go wrong with this approach in rare cases&lt;sup&gt;&lt;a href=&quot;#2022-10-14-package-local-nicknames-footnote-1-definition&quot; name=&quot;2022-10-14-package-local-nicknames-footnote-1-return&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, please don&amp;rsquo;t: this is not my first rodeo and, trust me, I know about these cases. Occasionally, the CL package system can make it hard or impossible to construct the namespace you need, with the key term here being being &lt;em&gt;occasionally&lt;/em&gt;: people who give up because something is occasionally hard or impossible have what Erik Naggum famously called &amp;lsquo;one-bit brains&amp;rsquo;&lt;sup&gt;&lt;a href=&quot;#2022-10-14-package-local-nicknames-footnote-2-definition&quot; name=&quot;2022-10-14-package-local-nicknames-footnote-2-return&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;: the answer is to &lt;em&gt;get more bits for your brain&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Once you write code like this then the only place package-local nicknames can matter is, perhaps, the package definition file. And the only reason they can matter there is because people think that picking a name like &amp;lsquo;XML&amp;rsquo; or &amp;lsquo;RPC&amp;rsquo; or &amp;lsquo;SQL&amp;rsquo; for their packages is a good idea. When people in the programming section of my hollowed-out-volcano lair do this they are &amp;hellip; well, I will not say, but my sharks are well-fed and those things on spikes surrounding the crater are indeed their heads.&lt;/p&gt;

&lt;p&gt;People should use long, unique names for packages. Java, astonishingly, got this right: use domains in big-endian order (&lt;code&gt;org.tfeb.conduit-packages&lt;/code&gt;, &lt;code&gt;org.tfeb.hax.metatronic&lt;/code&gt;). Do not use short nicknames. Never use names without at least one dot, which should be reserved for implementations and perhaps KMP-style substandards. Names will now not clash. Names will be longer and require more typing, but this will not matter because the only place package names are referred to are in package definition files and in &lt;code&gt;in-package&lt;/code&gt; forms, which are a minute fraction of your code.&lt;/p&gt;

&lt;p&gt;I have no idea where or when the awful plague of using package-qualified names in code arose: it&amp;rsquo;s not something people used to do, but it seems to happen really a lot now. I think it may be because people also tend to do this in Python and other dotty languages, although, significantly, in Python you never actually need to do this if you bother, once again, to actually go to the work of constructing the namespace you want: rather than the awful&lt;/p&gt;

&lt;pre class=&quot;brush: python&quot;&gt;&lt;code&gt;import sys

... sys.argv ...

...

sys.exit(...)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you can simply say&lt;/p&gt;

&lt;pre class=&quot;brush: python&quot;&gt;&lt;code&gt;from sys import argv, exit

... argv ...

exit(...)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and now the very top of your module lets anyone reading it know exactly what functionality you are importing and from where it comes.&lt;/p&gt;

&lt;p&gt;It may also be because the whole constructing namespaces thing is a bit hard. Yes, it is indeed a bit hard, but designing programs, of which it is a small but critical part, &lt;em&gt;is&lt;/em&gt; a bit hard.&lt;/p&gt;

&lt;p&gt;OK, enough.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If, after reading the above, you think you should mail me about how wrong it all is and explain some detail of the CL package system to me: don&amp;rsquo;t, I do not want to hear from you. Really, I don&amp;rsquo;t.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
 &lt;ol&gt;
  &lt;li id=&quot;2022-10-14-package-local-nicknames-footnote-1-definition&quot; class=&quot;footnote-definition&quot;&gt;
   &lt;p&gt;in particular, if your argument is that someone has used, for instance, the name &lt;code&gt;set&lt;/code&gt; in some package to mean, for instance, a set in the sense it is used in maths, and that this clashes with &lt;code&gt;cl:set&lt;/code&gt; and perhaps some other packages, don&amp;rsquo;t. If you are writing a program and you think, &amp;lsquo;I know, I&amp;rsquo;ll use a symbol with the same name as a symbol exported from CL to mean something else&amp;rsquo; in a context where users of your code also might want to use the symbol exported by CL (which in the case of &lt;code&gt;cl:set&lt;/code&gt; is &amp;lsquo;almost never&amp;rsquo;, of course), then my shark pool is just over here: please throw yourself in.&amp;nbsp;&lt;a href=&quot;#2022-10-14-package-local-nicknames-footnote-1-return&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
  &lt;li id=&quot;2022-10-14-package-local-nicknames-footnote-2-definition&quot; class=&quot;footnote-definition&quot;&gt;
   &lt;p&gt;Curiously, I think that quote was about Scheme, which I am sure Erik hated. But, for instance, Racket&amp;rsquo;s module system lets you do just the things which are hard in the package system: renaming things on import, for instance.&amp;nbsp;&lt;a href=&quot;#2022-10-14-package-local-nicknames-footnote-2-return&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</description>
	
	<pubDate>Fri, 14 Oct 2022 09:26:31 GMT</pubDate>
</item>

<item>
	<title>Nicolas Hafner: Mapping the Road to Release - October Kandria Update</title>
	<guid isPermaLink="true">https://reader.tymoon.eu/article/416</guid>
	<link>https://reader.tymoon.eu/article/416</link>
	
	<description>&lt;img alt=&quot;https://filebox.tymoon.eu//file/TWpVNU1nPT0=&quot; src=&quot;https://filebox.tymoon.eu//file/TWpVNU1nPT0=&quot; /&gt;&lt;p&gt;So, we've been in beta for over a month and gotten lots of useful feedback. Thanks a bunch! We'll continue to listen eagerly for feedback as we move towards the end of the development.&lt;/p&gt;&lt;p&gt;In case you missed the Kickstarter but would still like to support us ahead of the release in January, you can do so by &lt;a class=&quot;external-link&quot; href=&quot;https://kandria.com/preorder&quot;&gt;preordering Kandria or its soundtrack&lt;/a&gt; through Backerkit. Unlike Kickstarter, this also accepts PayPal, if you don't have access to a credit card.&lt;/p&gt;&lt;h2 id=&quot;herofest&quot;&gt;HeroFest&lt;/h2&gt;&lt;img alt=&quot;https://filebox.tymoon.eu//file/TWpVNU13PT0=&quot; src=&quot;https://filebox.tymoon.eu//file/TWpVNU13PT0=&quot; /&gt;&lt;p&gt;Another convention!&lt;/p&gt;&lt;p&gt;We'll be at the HeroFest in Bern, October 14-16! You'll be able to play the latest Kandria release there and chat about whatever. If you're in the area, please stop on by and check out the rest of the Swiss indie games presenting there as well.&lt;/p&gt;&lt;h2 id=&quot;soundtrack&quot;&gt;Soundtrack&lt;/h2&gt;&lt;p&gt;The release of the soundtrack has been delayed by a bit, as our composer got swamped with work, and we're still trying to hash out the complicated stuff behind royalties and all. However, a single of the soundtrack should be out soon. Please keep an ear out for that!&lt;/p&gt;&lt;h2 id=&quot;steam deck support&quot;&gt;Steam Deck Support&lt;/h2&gt;&lt;p&gt;Gaben finally delivered a Steam Deck to me, and I've tested Kandria on it. There were a couple of minor fixes to make it more usable, but now it seems to run flawlessly on the deck! Nice!&lt;/p&gt;&lt;img alt=&quot;https://pbs.twimg.com/media/Fd1mVMkXwAUexcc?format=jpg&amp;name=large&quot; src=&quot;https://pbs.twimg.com/media/Fd1mVMkXwAUexcc?format=jpg&amp;name=large&quot; /&gt;&lt;p&gt;The Deck is a wonderful piece of tech, and I've been enjoying playing other games on it as well. While I still would like for Kandria to run on the Switch as well, this is the next best thing for now.&lt;/p&gt;&lt;h2 id=&quot;development&quot;&gt;Development&lt;/h2&gt;&lt;p&gt;We're still rounding out the last bits of polish and bugs, and focusing on playing through the game more to ensure the balance and progression also work well. Development of the core game will officially end at the end of November, after which focus will shift towards adding the stretch goals we promised during the Kickstarter, preparing promotional materials, and so on.&lt;/p&gt;&lt;p&gt;To that end, here's a new rough roadmap of all the stuff left to do including post-release updates:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Add &lt;em&gt;even more&lt;/em&gt; detail tiles, foliage, and animal spawners throughout the world&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Fine-tune the levelling, trade prices, and enemy difficulty&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Spruce up some of the sound effects and music tracks&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Create achievement icons and integrate them into the game&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Release the full game&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Backport re-usable components into Trial&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Separate out the assets from the main repository&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Publish the source code under a permissive license&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Fix a plethora of bugs and inconveniences in Alloy&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Polish the editor and make it more stable&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Release the editor&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Develop a modding system for Trial&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Finish the Forge build system at least to an extent where it's usable&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Integrate the mod.io API with the modding system&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Create a mod manager and browser UI&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Document more parts of Trial and Kandria&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Release an official modding kit&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;We're also planning some cool events to celebrate the three big release milestones, though more info about that as we actually get closer to them.&lt;/p&gt;&lt;p&gt;For now, please continue to share the &lt;a class=&quot;external-link&quot; href=&quot;https://kandria.com/steam&quot;&gt;steam page&lt;/a&gt; with friends and other groups. It would help a lot to ensure that we can continue to make games in the future!&lt;/p&gt;</description>
	
	<pubDate>Mon, 10 Oct 2022 08:54:37 GMT</pubDate>
</item>

<item>
	<title>Tim Bradshaw: Bradshaw's laws</title>
	<guid isPermaLink="true">https://www.tfeb.org/fragments/2022/10/03/bradshaw-s-laws/?utm_source=lisp&amp;utm_medium=RSS</guid>
	<link>https://www.tfeb.org/fragments/2022/10/03/bradshaw-s-laws/?utm_source=lisp&amp;utm_medium=RSS</link>
	
	<description>&lt;p&gt;There are two laws.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;h2 id=&quot;the-laws&quot;&gt;The laws&lt;/h2&gt;

&lt;ol&gt;
 &lt;li&gt;All sufficiently large software systems end up being programming languages.&lt;/li&gt;
 &lt;li&gt;Whenever you think the point is at which the first law will apply, it will apply before that.&lt;/li&gt;&lt;/ol&gt;

&lt;h2 id=&quot;implications-of-the-laws&quot;&gt;Implications of the laws&lt;/h2&gt;

&lt;p&gt;When building software systems you should design them as programming langages. You should do this however small you think they will be. In order to make this practical for small systems you should therefore use a language which allows seamless extension into other languages with insignificant zero-point cost.&lt;/p&gt;

&lt;p&gt;But because the laws are not widely known, most large software systems are built without understanding that what is being built is in fact a programming language. Because people don&amp;rsquo;t know they are building a programming language, don&amp;rsquo;t know how to build programming languages, and do not use languages which make the seamless construction of programming languages easy, the languages they build are usually terrible: they are hard to use, have opaque and inconsistent semantics and are almost always insecure.&lt;/p&gt;</description>
	
	<pubDate>Mon, 03 Oct 2022 19:50:51 GMT</pubDate>
</item>

<item>
	<title>TurtleWare: Buffering Output</title>
	<guid isPermaLink="true">https://turtleware.eu/posts/Buffering-Output.html</guid>
	<link>https://turtleware.eu/posts/Buffering-Output.html</link>
	
	<description>&lt;h3&gt;Single buffering&lt;/h3&gt;

&lt;p&gt;In graphical applications buffering of output is necessary to avoid
flickering - a displeasing effect where mid-drawing artifacts are displayed on
the screen. For example consider the following function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defun draw-scene (sheet)
  (draw-rectangle* sheet 125 125 175 175 :ink +red+)
  (draw-rectangle* sheet 125 125 175 175 :ink +blue+))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we draw two rectangles one on top of the other. If the red square is
visible for a brief period of time before the blue one, then it is called
flickering. To avoid this effect a concept of output buffering was invented -
only when the output is ready for display, show it on the screen.&lt;/p&gt;

&lt;h3&gt;Double buffering&lt;/h3&gt;

&lt;p&gt;With double buffering we draw on the &amp;quot;back&amp;quot; buffer, and when done the back
buffer contents are shown on the front buffer.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defun game-loop ()
  (loop (draw-scene sheet)
        (swap-buffers sheet (buffer-1 sheet) (buffer-2 sheet))))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Triple buffering&lt;/h3&gt;

&lt;p&gt;The triple buffering is used when new scenes are produced much faster than the
front buffer could be updated. We have &amp;quot;render&amp;quot;, &amp;quot;ready&amp;quot; and &amp;quot;front&amp;quot; buffers.
The implicit assumption is that the game loop and the display loop operate in
separate threads.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defun display-loop ()
  (loop (swap-buffers sheet (buffer-2 sheet) (buffer-3 sheet))
        (display-buffer sheet (buffer-3 sheet))))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Incremental and non-incremental rendering&lt;/h3&gt;

&lt;p&gt;If each frame is drawn from scratch (like in many games), then it doesn't
matter whether the &amp;quot;swap&amp;quot; operation copies or swaps buffers. Some applications
however treat the canvas incrementally. In this case losing the old content is
not acceptable and we must copy data.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;;; The frame is rendered from scratch (not incremental)
&lt;/span&gt;&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;i&gt;&lt;span class=&quot;symbol&quot;&gt;defmacro&lt;/span&gt;&lt;/i&gt; swap-buffers &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;sheet buffer-1 buffer-2&lt;/span&gt;)&lt;/span&gt;
  `&lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;i&gt;&lt;span class=&quot;symbol&quot;&gt;with-swap-lock&lt;/span&gt;&lt;/i&gt; &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;sheet&lt;/span&gt;)&lt;/span&gt;
     &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;rotatef ,buffer-1 ,buffer-2&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;

&lt;span class=&quot;comment&quot;&gt;;;; The frame is rendered based on the previosu content (incremental)
&lt;/span&gt;&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;i&gt;&lt;span class=&quot;symbol&quot;&gt;defmacro&lt;/span&gt;&lt;/i&gt; copy-buffers &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;sheet buffer-1 buffer-2&lt;/span&gt;)&lt;/span&gt;
  `&lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;i&gt;&lt;span class=&quot;symbol&quot;&gt;with-swap-lock&lt;/span&gt;&lt;/i&gt; &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;sheet&lt;/span&gt;)&lt;/span&gt;
     &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;copy-array ,buffer-1 ,buffer-2&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Copying data is more expensive than rotating buffers. That said sometimes
re-rendering a frame from scratch may outweigh that cost. Incremental
rendering resembles drawing on a paper - unless we clear it manually, the old
content will be visible.&lt;/p&gt;

&lt;h3&gt;Mixed buffering&lt;/h3&gt;

&lt;p&gt;Sometimes we may want to draw directly on the front buffer. This is the most
performant when we write each pixel exactly once (for example when we render
an image). In this case we are not only expected to synchronize the front
buffer with the back buffer, but also the other way around.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;code&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;;; Buffer-1 is &quot;back&quot;, Buffer-2 is &quot;front&quot;.
&lt;/span&gt;
&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;i&gt;&lt;span class=&quot;symbol&quot;&gt;defun&lt;/span&gt;&lt;/i&gt; activate-single-buffering &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;/span&gt;)&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;;; Update the front buffer immedietely.
&lt;/span&gt;  &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;copy-buffers sheet &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;buffer-1 sheet&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;buffer-2 sheet&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;

&lt;span class=&quot;paren1&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;i&gt;&lt;span class=&quot;symbol&quot;&gt;defun&lt;/span&gt;&lt;/i&gt; activate-double-buffering &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;&lt;/span&gt;)&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;;; Synchronize the back buffer with the front-buffer.
&lt;/span&gt;  &lt;span class=&quot;paren2&quot;&gt;(&lt;span class=&quot;code&quot;&gt;copy-buffers sheet &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;buffer-2 sheet&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;paren3&quot;&gt;(&lt;span class=&quot;code&quot;&gt;buffer-1 sheet&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Otherwise, if we turn the double buffering back on, the back buffer won't
contain the data that was drawn when the output was single-buffered.&lt;/p&gt;

&lt;h3&gt;Closing thoughts&lt;/h3&gt;

&lt;p&gt;There are many techniques that makes this more performant. My main goal with
this post was to emphasize the difference between the incremental and
non-incremental rendering that was usually ommited in materials I've found on
the Internet.&lt;/p&gt;

&lt;p&gt;Interesting reads:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://wiki.osdev.org/Double_Buffering&quot;&gt;https://wiki.osdev.org/Double_Buffering&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://emersion.fr/blog/2019/intro-to-damage-tracking/&quot;&gt;https://emersion.fr/blog/2019/intro-to-damage-tracking/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
	
	<pubDate>Sat, 01 Oct 2022 00:00:00 GMT</pubDate>
</item>

<item>
	<title>Joe Marshall: Observationally Functional</title>
	<guid isPermaLink="true">http://funcall.blogspot.com/2022/09/observationally-functional.html</guid>
	<link>http://funcall.blogspot.com/2022/09/observationally-functional.html</link>
	
	<description>&lt;p&gt;A couple of years back I wrote a Java microservice that talks to
  Jenkins to find the state of a series of builds.  The code was
  structured to be &amp;ldquo;observationally functional&amp;rdquo; &amp;mdash;
  there were plenty of side effects, but the main data abstractions
  behaved as if they were immutable as far as the abstract API was
  concerned.  This allows us to treat code that uses these objects as
  if it were pure functional code.&lt;/p&gt;

&lt;p&gt;If a data structure is observationally functional, then regardless
  of what the implementation does, there is no way to observe side
  effects at the abstract level.  Primarily, this means that if you
  call a function twice with the same arguments, you always get the
  same answer.  (This implies, but it isn't obvious, that calling a
  function should not mutate anything that would cause a different
  function to change.)  This restriction has a lot of wiggle room.
  You can certainly side effect anything local to the abstraction that
  doesn't get returned to the caller.  You can side effect data until
  the point it is returned to the caller.&lt;/p&gt;

&lt;p&gt;The main data abstraction my microservice works with is a
  representation of the build metadata tree on the Jenkins server.
  The higher level code walks this tree looking for builds and
  metadata.  The code maintains the illusion that the tree is a local
  data structure, but the implementation of the tree contains URL
  references to data that is stored on the Jenkins server.  As the
  higher level code walks the tree, the lower level code fetches the
  data from the Jenkins server on demand and caches it.&lt;/p&gt;

&lt;p&gt;Writing the code this way allows me to separate the data transfer
  and marshaling parts from the data traversal and analysis part.  The
  tree, though it is mutated as it is traversed, is immutable in
  the parts that have already been visited.  The caching code, which
  actually mutates the tree, needs to be synchronized across multiple
  threads, but the traversal code does not.  Nodes in the tree that
  have already been visited are never mutated, so no synchronization
  is needed.&lt;/p&gt;

&lt;p&gt;Once the caching tree abstraction was written, the higher level
  code simply walks the tree, selecting and filtering nodes, then
  reading the field values in the nodes.  But the higher level code
  can be treated as if it were pure functional because there are
  no observable side effects.  An advantage of pure functional code is
  that it is trivially thread safe, so my microservice can run hundreds
  of threads in parallel, each walking separate parts of the Jenkins
  tree and none interfering with the other.  The only part of the code
  that uses synchronization is the tree caching code.&lt;/p&gt;

&lt;p&gt;This implementation approach was quite fruitful.  Once the code was
  tested with a single thread, it was obvious that multiple threads
  ought to work (because they couldn't observe each other's side
  effects) and when I turned the thread count up, no debugging was
  necessary.  The code has been running continuously with dozens of
  threads for the past couple of years with no timing,
  synchronization, or race condition bugs.&lt;/p&gt;</description>
	
	<pubDate>Wed, 28 Sep 2022 16:59:00 GMT</pubDate>
</item>


</channel>
</rss>
