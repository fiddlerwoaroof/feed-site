{
  "title":"dry-rb adopts Zeitwerk for code loading",
  "date":"2022-11-17T12:34:11.000000Z",
  "author":"solnic",
  "id":"http://dry-rb.org/news/2022/10/17/dry-rb-adopts-zeitwerk-for-code-loading/",
  "link":"http://dry-rb.org/news/2022/10/17/dry-rb-adopts-zeitwerk-for-code-loading/",
  "content":"<p>For the past few months we’ve been working on making all dry-rb gems auto-loadable through <a href=\"https://github.com/fxn/zeitwerk\">Zeitwerk</a>. This is part of a bigger effort as Zeitwerk is also used by <a href=\"https://github.com/hanami/hanami\">Hanami 2.0</a>.</p>\n\n<p>Using Zeitwerk to autoload not just your application code but also your dependencies leads to significantly faster boot times. That’s why it’s worth going through this process to have all the dry-rb gems use Zeitwerk ⚡</p>\n<h3 id=\"updated-gems\" class=\"hd\"><a name=\"updated-gems\" class=\"anchor\" href=\"#updated-gems\">            \n</a>Updated gems</h3>\n<p>During the last few days we’ve released the following gems that now use Zeitwerk's GemLoader:</p>\n\n<ul>\n<li><a href=\"https://github.com/dry-rb/dry-core/releases/tag/v0.9.0\">dry-core 0.9.0</a></li>\n<li><a href=\"https://github.com/dry-rb/dry-configurable/releases/tag/v0.16.0\">dry-configurable 0.16.0</a></li>\n<li><a href=\"https://github.com/dry-rb/dry-logic/releases/tag/v1.3.0\">dry-logic 1.3.0</a></li>\n<li><a href=\"https://github.com/dry-rb/dry-schema/releases/tag/v1.11.2\">dry-schema 1.11.2</a></li>\n<li><a href=\"https://github.com/dry-rb/dry-validation/releases/tag/v1.9.0\">dry-validation 1.9.0</a></li>\n<li><a href=\"https://github.com/dry-rb/dry-types/releases/tag/v1.6.0\">dry-types 1.6.0</a></li>\n<li><a href=\"https://github.com/dry-rb/dry-struct/releases/tag/v1.5.0\">dry-struct 1.5.0</a></li>\n<li><a href=\"https://github.com/dry-rb/dry-monads/releases/tag/v1.5.0\">dry-monads 1.5.0</a></li>\n<li><a href=\"https://github.com/dry-rb/dry-monitor/releases/tag/v0.7.0\">dry-monitor 0.7.0</a></li>\n<li><a href=\"https://github.com/dry-rb/dry-events/releases/tag/v0.4.0\">dry-events 0.4.0</a></li>\n<li><a href=\"https://github.com/dry-rb/dry-effects/releases/tag/v0.3.0\">dry-effects 0.3.0</a></li>\n<li><a href=\"https://github.com/dry-rb/dry-system/releases/tag/v0.27.2\">dry-system 0.27.2</a></li>\n</ul>\n<h3 id=\"how-to-upgrade\" class=\"hd\"><a name=\"how-to-upgrade\" class=\"anchor\" href=\"#how-to-upgrade\">            \n</a>How to upgrade</h3>\n<p>In theory, everything should just work, but we’ve already found there can be various issues depending on how you require files from dry-rb gems. Luckily, the changes that may be required are very simple:</p>\n\n<ul>\n<li>Change “cherry picking” requires of individual gem files (assuming you have them) to be just a single require of the gem’s entrypoint. Here's a couple of examples:</li>\n</ul>\n<div class=\"highlight\"><pre class=\"syntax ruby\"><code><span class=\"c1\"># before</span>\n<span class=\"nb\">require</span> <span class=\"s2\">&quot;dry/core/class_attributes&quot;</span>\n\n<span class=\"c1\"># now</span>\n<span class=\"nb\">require</span> <span class=\"s2\">&quot;dry/core&quot;</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"highlight\"><pre class=\"syntax ruby\"><code><span class=\"c1\"># before</span>\n<span class=\"nb\">require</span> <span class=\"s2\">&quot;dry/system/container&quot;</span>\n\n<span class=\"c1\"># now</span>\n<span class=\"nb\">require</span> <span class=\"s2\">&quot;dry/system&quot;</span>\n</code></pre></div>\n<ul>\n<li><p>In case of dry-validation and its own dry-rb dependencies, please make sure that you upgrade everything to the <strong>current</strong> versions.  Unfortunately, dry-validation 1.9.0 may still be installed with dry-schema &lt; 1.11 due to how version requirements work in Rubygems. It’s best to have something like this in your Gemfile:</p>\n<div class=\"highlight\"><pre class=\"syntax ruby\"><code><span class=\"n\">gem</span> <span class=\"s2\">&quot;dry-validation&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;~&gt; 1.9.0&quot;</span>\n<span class=\"n\">gem</span> <span class=\"s2\">&quot;dry-schema&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;~&gt; 1.11.2&quot;</span>\n</code></pre></div></li>\n<li><p>If you already use Zeitwerk and have teardown code in your test suite, please take a look how we’ve set it up in Hanami’s test suite to clear only the parts we need, without affecting loaders from other gems:</p></li>\n</ul>\n<div class=\"highlight\"><pre class=\"syntax ruby\"><code><span class=\"k\">def</span> <span class=\"nf\">autoloaders_teardown!</span>\n  <span class=\"c1\"># Tear down Zeitwerk (from zeitwerk's own test/support/loader_test)</span>\n  <span class=\"no\">Zeitwerk</span><span class=\"o\">::</span><span class=\"no\">Registry</span><span class=\"p\">.</span><span class=\"nf\">loaders</span><span class=\"p\">.</span><span class=\"nf\">reject!</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">loader</span><span class=\"o\">|</span>\n    <span class=\"n\">test_loader</span> <span class=\"o\">=</span> <span class=\"n\">loader</span><span class=\"p\">.</span><span class=\"nf\">dirs</span><span class=\"p\">.</span><span class=\"nf\">any?</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">dir</span><span class=\"o\">|</span>\n      <span class=\"n\">dir</span><span class=\"p\">.</span><span class=\"nf\">include?</span><span class=\"p\">(</span><span class=\"s2\">&quot;/spec/&quot;</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"n\">dir</span><span class=\"p\">.</span><span class=\"nf\">include?</span><span class=\"p\">(</span><span class=\"no\">Dir</span><span class=\"p\">.</span><span class=\"nf\">tmpdir</span><span class=\"p\">)</span> <span class=\"o\">||</span>\n        <span class=\"n\">dir</span><span class=\"p\">.</span><span class=\"nf\">include?</span><span class=\"p\">(</span><span class=\"s2\">&quot;/slices/&quot;</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"n\">dir</span><span class=\"p\">.</span><span class=\"nf\">include?</span><span class=\"p\">(</span><span class=\"s2\">&quot;/app&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">test_loader</span>\n      <span class=\"n\">loader</span><span class=\"p\">.</span><span class=\"nf\">unregister</span>\n      <span class=\"kp\">true</span>\n    <span class=\"k\">else</span>\n      <span class=\"kp\">false</span>\n    <span class=\"k\">end</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div><h3 id=\"reporting-issues\" class=\"hd\"><a name=\"reporting-issues\" class=\"anchor\" href=\"#reporting-issues\">            \n</a>Reporting issues</h3>\n<p>If you find any crashes related to Ruby constants, please try to report them in the repository where the given missing constant is actually defined. If you’re unsure, just report them in the repository of the gem that you upgraded and gave you trouble.</p>\n"
}