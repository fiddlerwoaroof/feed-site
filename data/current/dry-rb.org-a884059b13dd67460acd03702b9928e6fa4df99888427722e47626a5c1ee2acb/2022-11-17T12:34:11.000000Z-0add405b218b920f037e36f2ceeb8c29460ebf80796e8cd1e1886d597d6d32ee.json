{
  "title":"Introducing dry-files",
  "date":"2022-11-17T12:34:11.000000Z",
  "author":"jodosha",
  "id":"http://dry-rb.org/news/2021/05/04/introducing-dry-files/",
  "link":"http://dry-rb.org/news/2021/05/04/introducing-dry-files/",
  "content":"<p>We talked several times about the union of <a href=\"https://dry-rb.org\">dry-rb</a> + <a href=\"https://rom-rb.org\">ROM</a> + <a href=\"https://hanamirb.org\">Hanami</a>, well today we can share good news on that front: introducing <code>dry-files</code>.</p>\n\n<p>It's a gem that abstracts low level file manipulations.</p>\n\n<p>The code was originally created for <code>hanami-utils</code>, as a way to power Hanami command line.\nThen it was moved to <code>dry-cli</code>, when it was extracted from the Hanami code base.\nToday it finally made its own debut as a standalone gem.</p>\n\n<p><code>dry-cli</code> is a powerful framework to build Ruby command line interfaces.\nWe use it as the main engine for the Hanami CLI, which also needs <em>code generators</em>.\nThe initial idea was to have this optional <code>dry-cli</code> library to support <em>code generators</em> via file manipulations.\nBut then we reached the point at which this library had more lines of code than <code>dry-cli</code> itself, so we decided to <strong>extract</strong> this library.</p>\n\n<p>Here's a simple example:</p>\n<div class=\"highlight\"><pre class=\"syntax ruby\"><code><span class=\"c1\"># frozen_string_literal: true</span>\n\n<span class=\"nb\">require</span> <span class=\"s2\">&quot;dry/files&quot;</span>\n\n<span class=\"n\">files</span> <span class=\"o\">=</span> <span class=\"no\">Dry</span><span class=\"o\">::</span><span class=\"no\">Files</span><span class=\"p\">.</span><span class=\"nf\">new</span>\n<span class=\"n\">files</span><span class=\"p\">.</span><span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"s2\">&quot;path/to/file&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Hello, World!&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># intermediate directories are created, if missing</span>\n</code></pre></div>\n<p><code>dry-files</code> is shipped with an extensive API to touch, (re)write, read, and remove files/directories, inject/remove/append Ruby code lines and blocks, and so on.</p>\n\n<p>Because of this abstraction we had the chance to introduce swappable adapters.\nOne adapter (the default one) is for <strong>real file manipulations</strong>. It's meant to be used in <strong>production and integration tests</strong>.\nThe other adapter is an <strong>in-memory file system</strong>. It's for <strong>very fast unit tests</strong> that cleanup by themselves.</p>\n<div class=\"highlight\"><pre class=\"syntax ruby\"><code><span class=\"c1\"># frozen_string_literal: true</span>\n\n<span class=\"nb\">require</span> <span class=\"s2\">&quot;dry/files&quot;</span>\n\n<span class=\"n\">files</span> <span class=\"o\">=</span> <span class=\"no\">Dry</span><span class=\"o\">::</span><span class=\"no\">Files</span><span class=\"p\">.</span><span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"ss\">memory: </span><span class=\"kp\">true</span><span class=\"p\">)</span>\n<span class=\"n\">files</span><span class=\"p\">.</span><span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"s2\">&quot;path/to/file&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Hello, World!&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># create an in-memory file</span>\n</code></pre></div>\n<p>Checkout the <a href=\"https://dry-rb.org/gems/dry-files\">docs</a> and the <a href=\"https://github.com/dry-rb/dry-files/releases/tag/v0.1.0\">CHANGELOG</a> to know more. Enjoy!</p>\n"
}