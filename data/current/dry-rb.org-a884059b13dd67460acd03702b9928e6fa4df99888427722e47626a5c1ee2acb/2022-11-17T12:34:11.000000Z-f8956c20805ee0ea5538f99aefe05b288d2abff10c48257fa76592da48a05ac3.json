{
  "title":"dry-system 0.19 released with Zeitwerk support and more, leading the way for Hanami 2.0",
  "date":"2022-11-17T12:34:11.000000Z",
  "author":"timriley",
  "id":"http://dry-rb.org/news/2021/04/22/dry-system-0-19-released-with-zeitwerk-support-and-more-leading-the-way-for-hanami-2-0/",
  "link":"http://dry-rb.org/news/2021/04/22/dry-system-0-19-released-with-zeitwerk-support-and-more-leading-the-way-for-hanami-2-0/",
  "content":"<p>We are very pleased to announce the release of dry-system 0.19.0! This release marks a huge step forward for dry-system, bringing support for <a href=\"https://github.com/fxn/zeitwerk\">Zeitwerk</a> and other autoloaders, plus clearer configuration and improved consistency around component resolution for both finalized and lazy loading containers.</p>\n\n<p>These changes will also pave the way for a seamless integration of Zeitwerk and dry-system into the new Hanami 2.0 application core. Until then, thanks to dry-rb serving as an independent foundation layer for Hanami, you can already try out these new features!</p>\n\n<p>A dry-system container as of 0.19.0, configured for Zeitwerk, now looks like this:</p>\n<div class=\"highlight\"><pre class=\"syntax ruby\"><code><span class=\"nb\">require</span> <span class=\"s2\">&quot;dry/system/container&quot;</span>\n<span class=\"nb\">require</span> <span class=\"s2\">&quot;dry/system/loader/autoloading&quot;</span>\n<span class=\"nb\">require</span> <span class=\"s2\">&quot;zeitwerk&quot;</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyApp</span><span class=\"o\">::</span><span class=\"no\">Container</span> <span class=\"o\">&lt;</span> <span class=\"no\">Dry</span><span class=\"o\">::</span><span class=\"no\">System</span><span class=\"o\">::</span><span class=\"no\">Container</span>\n  <span class=\"n\">configure</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">config</span><span class=\"o\">|</span>\n    <span class=\"n\">config</span><span class=\"p\">.</span><span class=\"nf\">root</span> <span class=\"o\">=</span> <span class=\"n\">__dir__</span>\n\n    <span class=\"n\">config</span><span class=\"p\">.</span><span class=\"nf\">component_dirs</span><span class=\"p\">.</span><span class=\"nf\">loader</span> <span class=\"o\">=</span> <span class=\"no\">Dry</span><span class=\"o\">::</span><span class=\"no\">System</span><span class=\"o\">::</span><span class=\"no\">Loader</span><span class=\"o\">::</span><span class=\"no\">Autoloading</span>\n    <span class=\"n\">config</span><span class=\"p\">.</span><span class=\"nf\">component_dirs</span><span class=\"p\">.</span><span class=\"nf\">add_to_load_path</span> <span class=\"o\">=</span> <span class=\"kp\">false</span>\n\n    <span class=\"n\">config</span><span class=\"p\">.</span><span class=\"nf\">component_dirs</span><span class=\"p\">.</span><span class=\"nf\">add</span> <span class=\"s2\">&quot;lib&quot;</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">loader</span> <span class=\"o\">=</span> <span class=\"no\">Zeitwerk</span><span class=\"o\">::</span><span class=\"no\">Loader</span><span class=\"p\">.</span><span class=\"nf\">new</span>\n<span class=\"n\">loader</span><span class=\"p\">.</span><span class=\"nf\">push_dir</span> <span class=\"no\">MyApp</span><span class=\"o\">::</span><span class=\"no\">Container</span><span class=\"p\">.</span><span class=\"nf\">config</span><span class=\"p\">.</span><span class=\"nf\">root</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"s2\">&quot;lib&quot;</span><span class=\"p\">).</span><span class=\"nf\">realpath</span>\n<span class=\"n\">loader</span><span class=\"p\">.</span><span class=\"nf\">setup</span>\n</code></pre></div>\n<p>Unlike the default loader, the new <code>Dry::System::Loader::Autoloading</code> does not <code>require</code> files itself when loading components. Instead, it references their class constants directly, allowing the missing constant resolution to trigger the autoloading behaviour of <a href=\"https://github.com/fxn/zeitwerk\">Zeitwerk</a> and other autoloaders. This is all that's required to bring Zeitwerk and dry-system together! Combined with dry-system's <a href=\"https://dry-rb.org/gems/dry-system/0.17/auto-import/\">auto-injector</a>, you now have the best of both worlds: the convenience of auto-loading classes combined with all the loose-coupling benefits of injected dependencies.</p>\n\n<p>The new <code>component_dirs</code> setting also allows multiple component dirs to be added (these are where dry-system looks when loading a container's components) and configured independently:</p>\n<div class=\"highlight\"><pre class=\"syntax ruby\"><code><span class=\"k\">class</span> <span class=\"nc\">MyApp</span><span class=\"o\">::</span><span class=\"no\">Container</span> <span class=\"o\">&lt;</span> <span class=\"no\">Dry</span><span class=\"o\">::</span><span class=\"no\">System</span><span class=\"o\">::</span><span class=\"no\">Container</span>\n  <span class=\"n\">configure</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">config</span><span class=\"o\">|</span>\n    <span class=\"n\">config</span><span class=\"p\">.</span><span class=\"nf\">root</span> <span class=\"o\">=</span> <span class=\"n\">__dir__</span>\n\n    <span class=\"c1\"># Defaults for all component dirs can be configured</span>\n    <span class=\"n\">config</span><span class=\"p\">.</span><span class=\"nf\">component_dirs</span><span class=\"p\">.</span><span class=\"nf\">default_namespace</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;my_app&quot;</span>\n\n    <span class=\"c1\"># As well as settings for individual dirs</span>\n    <span class=\"n\">config</span><span class=\"p\">.</span><span class=\"nf\">component_dirs</span><span class=\"p\">.</span><span class=\"nf\">add</span> <span class=\"s2\">&quot;lib&quot;</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">dir</span><span class=\"o\">|</span>\n      <span class=\"n\">dir</span><span class=\"p\">.</span><span class=\"nf\">auto_register</span> <span class=\"o\">=</span> <span class=\"nb\">proc</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">component</span><span class=\"o\">|</span>\n        <span class=\"o\">!</span><span class=\"n\">component</span><span class=\"p\">.</span><span class=\"nf\">identifier</span><span class=\"p\">.</span><span class=\"nf\">start_with?</span><span class=\"p\">(</span><span class=\"s1\">'entities'</span><span class=\"p\">)</span>\n      <span class=\"k\">end</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"c1\"># Multiple component dirs can be added</span>\n    <span class=\"n\">config</span><span class=\"p\">.</span><span class=\"nf\">component_dirs</span><span class=\"p\">.</span><span class=\"nf\">add</span> <span class=\"s2\">&quot;app&quot;</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>The <code>auto_register</code> and <code>memoize</code> component dir settings have been improved as part of this release, now accepting either simple truthy or falsey values, or a proc accepting a <code>Dry::System::Component</code> and returning a truthy or falsey value. Using a proc makes it easy to configure fine-grained behavior on a component-per-component basis. Check out also the new <code>Dry::System::Identifier</code> class as used above via <code>component.identifier</code>: this is a new class that provides namespace-aware methods for querying container component identifiers, which is particularly useful in cases like the above.</p>\n\n<p>Finally, we've given a lot of attention to making sure dry-system containers work consistently regardless of whether they're finalized or lazy loading their components. For example, <code># auto_register: false</code> magic comments are not respected in both cases, where previously they were ignored for a lazy loading container.</p>\n\n<p>There's plenty more to learn about this release, including several breaking changes, so check out the <a href=\"https://github.com/dry-rb/dry-system/releases/tag/v0.19.0\">changelog</a> for all the details. And if you want to understand more of the thinking that went into these changes, also check out Timâ€™s open source status updates for this last <a href=\"https://timriley.info/writing/2020/12/07/open-source-status-update-november-2020\">November</a>, <a href=\"https://timriley.info/writing/2021/01/06/open-source-status-update-december-2020\">December</a>, <a href=\"https://timriley.info/writing/2021/02/01/open-source-status-update-january-2021\">January</a>, and <a href=\"https://timriley.info/writing/2021/03/09/open-source-status-update-february-2021/\">February</a> (Yes, this release has been long in the making!).</p>\n\n<p>With many internal improvements also in place for this release, we now see a clear picture of what's left before 1.0, and have filled out the <a href=\"https://github.com/dry-rb/dry-system/milestone/1\">dry-system 1.0 milestone</a> with issues representing the remaining work. Please take a look and get in touch if you can help.</p>\n\n<p>In the meantime, we hope you enjoy dry-system 0.19.0 and please let us know how you go with all the new features!</p>\n"
}