{
  "title":"Why I organize my tests by domain concept, not by test type",
  "date":"2022-10-24T20:41:47.000000Z",
  "author":null,
  "id":"https://www.codewithjason.com/?p=2618",
  "link":"https://www.codewithjason.com/why-i-organize-my-tests-by-domain-concept-not-by-test-type/",
  "content":"<p>In Rails apps that use RSpec, it’s customary to have a <code class=\"inline\">spec</code> directory with certain subdirectories named for the types of tests they contain: <code class=\"inline\">models</code>, <code class=\"inline\">requests</code>, <code class=\"inline\">system</code>. The Minitest organization scheme doesn’t share the exact same nomes but it does share the custom of organizing by test type.</p>\n<p>I would like to raise the question: <b>Why do we do it this way?</b></p>\n<p>To get at the answer to that question I’d like to ask a broader question: <b>What’s the benefit of organizing test files at all?</b> Why not just throw all the tests in a single directory? For me there are two reasons.</p>\n<h2>Reasons to organize test files into directories</h2>\n<h3>Finding tests</h3>\n<p>Sometimes I’m changing a feature and I want to know where the tests are for that feature so I can change or extend the tests accordingly</p>\n<p>When I’m making a change to a feature, I usually want to know where the tests are that are related to that feature so I can update or extend the tests accordingly. Or, if that feature doesn’t have tests, I want to know so, and with a reasonable degree of certainty, so that I don’t accidentally create new tests that duplicate existing ones.</p>\n<h3>Running tests in groups</h3>\n<p>If tests are organized into directories then they can be conveniently run in groups.</p>\n<p>It is of course possible, at least in some frameworks, to apply certain tags to tests and then run the tagged tests as a group. But doing so depends on developers remembering to add tags. This seems to me like a fragile link in the chain.</p>\n<p>I find directories to be better than tags for this purpose since it’s of course impossible to forget to put a file in a directory.</p>\n<h2>Test type vs. meaning</h2>\n<p>At some point I realized that if I organize my test files <a href=\"https://www.codewithjason.com/organizing-rails-files-by-meaning/\">based on meaning</a> rather than test type, it makes it much easier to both a) find the tests when I want to find them and b) run the tests in groups that serve my purposes. Here’s why.</p>\n<h3>Finding tests</h3>\n<p>When I want to find the tests that correspond to a certain feature, I don’t necessarily know a lot about the characteristics of those tests. There <i>might</i> be a test that matches the filename of the application code file that I’m working on, but also there might not be. I’m also not always sure whether the application code I’m working on is covered by a model test, a system test, some other type of test, some combination of test types, or no test at all. The best I can do is either guess, search manually, or grep for some keywords and hope that the results aren’t too numerous to be able to examine one-by-one.</p>\n<p>If on the other hand the files are organized in a directory tree that corresponds to the tests’ meaning in the <a href=\"https://www.codewithjason.com/what-is-a-rails-model/\">domain model</a>, then finding the tests is easier. If I’m working in the application’s billing area, for example, I can look in <code class=\"inline\">spec/billing</code> folder to see if the relevant tests are there. If I use a nested structure, I can look in <code class=\"inline\">spec/billing/payments</code> to find tests that are specifically related to payments.</p>\n<p>I don’t need to worry about whether the payments-related tests are model tests, system tests or some other type of tests. I can just look in <code class=\"inline\">spec/billing/payments</code> and work with whatever’s there. (I do, however, like to keep folders at the leaf level with names like <code class=\"inline\">models</code>, <code class=\"inline\">system</code>, etc. because it can be disorienting to not know what types of tests you’re looking at, and also it can create naming conflicts if you don’t separate files by type.)</p>\n<h3>Running tests in groups</h3>\n<p>I don’t often find it particularly useful to, say, run all my model tests or all my system tests. I do however find it useful to run all the tests in a certain conceptual area.</p>\n<p>When I make a change in a certain area and I want to check for regressions, I of course want to check in the most likely places first. It’s usually more likely that I’ve introduced a regression to a conceptually related area than a conceptually unrelated area.</p>\n<p>To continue the example from above, if I make a change to the payments area, then I can run all the tests in <code class=\"inline\">spec/billing/payments</code> to conveniently check for regressions. If those tests all pass then I can zoom out one level and run all the tests in <code class=\"inline\">spec/billing</code>. This gives me four “levels” of progressively broader regression testing: 1) a single file in <code class=\"inline\">spec/billing/payments</code>, 2) all the tests in <code class=\"inline\">spec/billing/payments</code>, 3) all the tests in <code class=\"inline\">spec/billing</code>, and 4) all the tests in the whole test suite. If I organize my tests by type, I don’t have that ability.</p>\n<h2>On breaking convention</h2>\n<p>I’m not often a big fan of diverging from framework conventions. Breaking conventions often results in a loss of convenience which isn’t made up for by whatever is gained by breaking convention.</p>\n<p>But don’t mistake this break from convention with other types of breaks from conventions you might have seen. Test directory structure is a very <i>weak</i> convention and it’s not even a Rails convention, it’s a convention of RSpec or Minitest. And in fact, it’s not even a technical convention, it’s a cultural convention. Unless I’m mistaken, there’s not actually any functionality tied to the test directory structure in RSpec or Minitest, and so diverging from the cultural standard doesn’t translate to a loss of functionality. It’s virtually all upside.</p>\n<h2>Takeaways</h2>\n<ul>\n<li>The benefits of organizing tests into directories include to be able to <b>find tests</b> and to be able to <b>run tests in groups</b>.</li>\n<li>Organizing tests by meaning rather than type makes it easier to find tests and to run them in groups in a way that’s more logical for the purpose of finding regressions.</li>\n</ul>\n<p>The post <a rel=\"nofollow\" href=\"https://www.codewithjason.com/why-i-organize-my-tests-by-domain-concept-not-by-test-type/\">Why I organize my tests by domain concept, not by test type</a> appeared first on <a rel=\"nofollow\" href=\"https://www.codewithjason.com\">Code with Jason</a>.</p>\n"
}