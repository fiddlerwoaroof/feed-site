{
  "title":"Crisp boundaries",
  "date":"2022-10-25T21:06:15.000000Z",
  "author":null,
  "id":"https://www.codewithjason.com/?p=2624",
  "link":"https://www.codewithjason.com/crisp-boundaries/",
  "content":"<p>If you’re going to make a change to an area, you have to understand that area. If you don’t understand the area you’re changing very well, your lack of understanding might lead to you accidentally introducing a bug.</p>\n<p>Well-written code is <b>loosely coupled</b> from the other pieces of code it touches. “Loosely coupled” means that if you have classes A and B which talk to each other, you can understand class A without having to know much about class B and vice versa.</p>\n<p>Conversely, if A and B are <b>tightly coupled</b>, then you might have to understand both class A <i>and</i> class B just to understand class A. Tight coupling makes code harder to work with.</p>\n<p>One aspect of loosely-coupled code is that it has <b>crisp boundaries</b>, which are the opposite of <b>blurry boundaries</b>. Here’s an example of a piece of code with <i>blurry</i> boundaries.</p>\n<pre><code class=\"language-ruby decode:true\">class Person\n  def initialize(params)\n    @name = params[:name]\n  end\nend\n\nperson = Person.new(params)</code></pre>\n<p>The only thing <code class=\"inline\">Person</code> needs from the outside world is a name, but <code class=\"inline\">Person</code> is accepting the broader <code class=\"inline\">params</code> as an argument.</p>\n<p>Looking outward from inside the <code class=\"inline\">Person</code> class, we might wonder: what exactly is in <code class=\"inline\">params</code>? Who knows! It could be anything.</p>\n<p>The inclusion of <code class=\"inline\">params</code> is a “leak” from the outside world into <code class=\"inline\">Person</code>.</p>\n<p>Looking the other direction, from outside <code class=\"inline\">Person</code> inward, we might see <code class=\"inline\">Person.new(params)</code> and wonder what exactly of <code class=\"inline\">params</code> <code class=\"inline\">Person</code> needs in order to do its job. Does <code class=\"inline\">Person</code> need everything inside of <code class=\"inline\">params</code>? Just some of it? Who knows! Could be anything.</p>\n<p>Let’s contrast the blurry-boundary code above with the crisp-boundary code below.</p>\n<pre><code class=\"language-ruby decode:true \">class Person\n  def initialize(name)\n    @name = name\n  end\nend\n\nperson = Person.new(params[:name])</code></pre>\n<p>In this case, looking outward from inside the <code class=\"inline\">Person</code> class, it’s clear that <code class=\"inline\">Person</code> takes a <code class=\"inline\">name</code> and that’s it.</p>\n<p>And then looking in from outside, <code class=\"inline\">Person.new(params[:name])</code> makes it clear exactly what’s being sent to <code class=\"inline\">Person</code>.</p>\n<p>In order to make your classes and methods more understandable, <b>keep your boundaries crisp</b> by accepting the <b>minimum</b> amount of argument information necessary in order to get the job done.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://www.codewithjason.com/crisp-boundaries/\">Crisp boundaries</a> appeared first on <a rel=\"nofollow\" href=\"https://www.codewithjason.com\">Code with Jason</a>.</p>\n"
}