{
  "title":"Bundler v2.3: Locking the version of Bundler itself",
  "date":"2022-11-14T08:17:03.000000Z",
  "author":"David Rodríguez",
  "id":"https://bundler.io/blog/2022/01/23/bundler-v2-3.html",
  "link":"https://bundler.io/blog/2022/01/23/bundler-v2-3.html",
  "content":"<p>2021 saw a fair amount of development in the RubyGems &amp; Bundler repositories. We\ntried to release more often than ever to catch and fix bugs and distribute our\nimprovements as early as possible to our users. That has led to 33 patch-level versions\nin the Bundler 2.x series released about a year ago.</p>\n\n<p>Our goal for Bundler 2.3 was to implement a long-wanted feature of being able to\nfully control the version of Bundler itself an application runs. There’s a long\nstory with this feature, because it was shipped a few years ago in a manner that\nwas too strict and ended up causing more harm than good, so had to be partially\nreverted.</p>\n\n<h2 id=\"so-how-did-things-work-before-bundler-23\">So, how did things work before Bundler 2.3?</h2>\n\n<p>Up until now, RubyGems would try to activate the version of Bundler recorded in\nthe <code>Gemfile.lock</code> file if already installed, and would fall back to the\nhighest version installed otherwise. That’s better than nothing, but it did not\nensure the exact version in the lockfile was always used, which led to\nworkarounds like <a href=\"https://bundler.io/blog/2019/05/14/solutions-for-cant-find-gem-bundler-with-executable-bundle.html\">manually parsing the lockfile and then installing that\nversion</a>.</p>\n\n<h2 id=\"and-how-do-they-work-now\">And how do they work now?</h2>\n\n<p>In Bundler 2.3 and up (if you also have RubyGems 3.3 or higher), running\n<code>bundle install</code> will use the exact version from the BUNDLED WITH section of\nthe lockfile.  If that version is not installed before you run <code>bundle\ninstall</code>, the running version of Bundler will install the locked version, and\nthen run your original command using the newly-installed locked version.</p>\n\n<p>So, if you have a lockfile ending with</p>\n\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>BUNDLED WITH\n   2.2.33\n</code></pre></div>\n<p>and you only have Bundler 2.3.5 installed, you’ll see the following output when\nrunning <code>bundle install</code>.</p>\n\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>$ bundle install\nBundler 2.3.5 is running, but your lockfile was generated with 2.2.33. Installing Bundler 2.2.33 and restarting using that version.\nFetching gem metadata from https://rubygems.org/.\nFetching bundler 2.2.33\nInstalling bundler 2.2.33\n...\n</code></pre></div>\n<p>After that all your commands will automatically use Bundler 2.2.33, as specified\nby your lockfile. If you want to upgrade the Bundler version used by your\napplication, you can run <code>bundle update --bundler</code>, and your lockfile will be\nregenerated using the latest version. From that moment, all users of the\nlockfile will automatically pick up the new version, no matter whether they have\na newer or older version installed instead.</p>\n\n<p>But..</p>\n\n<h2 id=\"why-are-we-doing-this\">Why are we doing this?</h2>\n\n<p>Being able to lock the version of Bundler itself, just like Bundler is able to\nlock other dependencies, has been a goal of the Bundler team for years. There are\na number of benefits of locking your dependencies, like avoiding dependency\nnightmares where your application breaks due to third party releases, or\navoiding “works on my machine” issues. Bundler has a ton of features and edge\ncases, and</p>\n\n<ul>\n  <li>\n    <p>We sometimes introduce regressions when trying to improve things. Locking the\nversion of Bundler prevents those issues from hitting you.</p>\n  </li>\n  <li>\n    <p>Once in a while we need to put a security fix out there. Being able to lock\nthe Bundler version allows you to ensure that every user of your application\ngets a secure version of Bundler.</p>\n  </li>\n  <li>\n    <p>Occasionally, you might want to use a new feature of the Bundler DSL in your\nGemfile. However, old versions of Bundler don’t understand this feature and\nyou don’t want to suddenly break things for the users of yours that use those\nold versions. With version locking this is no longer a concern. Bundler is now\nable to upgrade itself to the version that your application understands.</p>\n  </li>\n</ul>\n\n<p>All in all, we aim to provide a less surprising, less error prone and more\nconsistent experience when using Bundler, and let each application be in control\nof the version that they use, and the moment that they upgrade.</p>\n\n<h2 id=\"whats-coming-next\">What’s coming next?</h2>\n\n<p>Future enhancements to this feature might include:</p>\n\n<ul>\n  <li>Full support for <code>gem &quot;bundler&quot;, &quot;&lt;arbitrary_requirement&gt;&quot;</code> in <code>Gemfile</code>.</li>\n  <li>Automatic update of Bundler when running <code>bundle install</code> without a lockfile.</li>\n  <li>Automatic update of Bundler when running <code>bundle update</code>.</li>\n</ul>\n\n<p>In other words, our end goal is to be able to treat Bundler just like any other\ndependency of your application.</p>\n"
}