<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://eregon.me/blog/feed.xml" rel="self" type="application/atom+xml"><link href="http://eregon.me/blog/" rel="alternate" type="text/html"><updated>2022-07-25T13:30:51+02:00</updated><id>http://eregon.me/blog/</id><title type="html">On the Edge of Ruby</title><subtitle>A blog about Ruby, Performance and Concurrency</subtitle><author><name>Benoit Daloze</name></author><entry><title type="html">Benchmarking CRuby, MJIT, YJIT, JRuby and TruffleRuby</title><link href="http://eregon.me/blog/2022/01/06/benchmarking-cruby-mjit-yjit-jruby-truffleruby.html" rel="alternate" type="text/html" title="Benchmarking CRuby, MJIT, YJIT, JRuby and TruffleRuby"><published>2022-01-06T00:00:00+01:00</published><updated>2022-01-06T00:00:00+01:00</updated><id>http://eregon.me/blog/2022/01/06/benchmarking-cruby-mjit-yjit-jruby-truffleruby</id><content type="html" xml:base="http://eregon.me/blog/2022/01/06/benchmarking-cruby-mjit-yjit-jruby-truffleruby.html">&lt;p&gt;In this blog post we benchmark many Ruby versions and the latest Ruby Just-in-Time compilers (JITs)
on the newest Ruby benchmark suite,  &lt;a href=&quot;https://github.com/Shopify/yjit-bench&quot;&gt;yjit-bench&lt;/a&gt;.
As a teaser, the geometric mean speedups compared to CRuby 3.1 on these 14 benchmarks are: MJIT 1.26x, YJIT 1.39x, JRuby 1.86x and TruffleRuby 6.23x.
Read on to find more about the benchmarks and gain insights on these speedups.
This blog post is also available &lt;a href=&quot;https://medium.com/graalvm/benchmarking-cruby-mjit-yjit-jruby-and-truffleruby-6a7178ca6906&quot;&gt;on Medium&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/benchmarks-2022/banner.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;outline&quot;&gt;Outline&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#approach&quot;&gt;Approach&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#benchmarks&quot;&gt;Benchmarks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#summary&quot;&gt;Summary&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;approach&quot;&gt;Approach&lt;/h2&gt;

&lt;h3 id=&quot;rubies&quot;&gt;Rubies&lt;/h3&gt;

&lt;p&gt;We benchmark the following Ruby versions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CRuby 2.0: &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby 2.0.0p648 (2015-12-16 revision 53162) [x86_64-linux]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;CRuby 2.7: &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby 2.7.5p203 (2021-11-24 revision f69aeb8314) [x86_64-linux]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;CRuby 3.0: &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby 3.0.3p157 (2021-11-24 revision 3fb7d2cadc) [x86_64-linux]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;CRuby 3.1: &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby 3.1.0p0 (2021-12-25 revision fb4df44d16) [x86_64-linux]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;CRuby 3.1+MJIT: &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby 3.1.0p0 (2021-12-25 revision fb4df44d16) +MJIT [x86_64-linux]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;CRuby 3.1+YJIT: &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby 3.1.0p0 (2021-12-25 revision fb4df44d16) +YJIT [x86_64-linux]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;JRuby+invokedynamic, on the system JDK 11: &lt;code class=&quot;highlighter-rouge&quot;&gt;jruby 9.3.2.0 (2.6.8) 2021-12-01 0b8223f905 OpenJDK 64-Bit Server VM 11.0.10+9 on 11.0.10+9 +indy +jit [linux-x86_64]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;TruffleRuby JVM EE (JDK 11): &lt;code class=&quot;highlighter-rouge&quot;&gt;truffleruby 22.0.0-dev-9bdb2dfc, like ruby 3.0.2, GraalVM EE JVM [x86_64-linux]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We ran all the benchmarks on 4 January 2022 on an &lt;code class=&quot;highlighter-rouge&quot;&gt;AMD Ryzen 7 3700X 8-Core Processor&lt;/code&gt;, with 32GB of memory and a M.2 SSD, on Linux.&lt;/p&gt;

&lt;p&gt;We chose CRuby 3.1 as the baseline (= 1.0x) in order to easily compare how much MJIT and YJIT gain over CRuby without JIT (the default).&lt;/p&gt;

&lt;p&gt;CRuby 2.0 can only run a small subset of the benchmarks.
CRuby 3.1 includes both MJIT and YJIT which makes it convenient to measure them.
For TruffleRuby we picked a single variant (out of Native/JVM CE/EE) to keep the charts readable as there are already many Ruby implementations.
We used TruffleRuby from the release branch of the upcoming GraalVM 22.0.&lt;/p&gt;

&lt;h3 id=&quot;yjit-bench&quot;&gt;yjit-bench&lt;/h3&gt;

&lt;p&gt;We run all 14 macro benchmarks from the &lt;a href=&quot;https://github.com/Shopify/yjit-bench&quot;&gt;yjit-bench&lt;/a&gt; benchmark suite at commit &lt;a href=&quot;https://github.com/Shopify/yjit-bench/tree/1751916ceb&quot;&gt;1751916ceb&lt;/a&gt;, except for the &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll&lt;/code&gt; benchmark because it is very noisy and does not work on several Ruby versions.
We do not report the micro benchmarks (&lt;a href=&quot;https://github.com/Shopify/yjit-bench/blob/1751916ceb/benchmarks/getivar.rb&quot;&gt;example&lt;/a&gt;), since those seem to be there mostly to tweak JITs rather than to compare general Ruby performance. Of course micro benchmarks do not represent anything close to a real workload.
As a fun fact, TruffleRuby optimizes away (&amp;gt;1000x faster) half of those micro benchmarks.&lt;/p&gt;

&lt;p&gt;The yjit-bench benchmark suite contains a variety of benchmarks, and is maintained principally by Noah Gibbs (who also worked on benchmarks for Ruby 3x3) and Maxime Chevalier-Boisvert (leading YJIT) at Shopify.
One significant advantage of this benchmark suite is all benchmarks are really easy to run, any setup (including &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;db:migrate&lt;/code&gt;) is done automatically and running a benchmark is just &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby -I./harness benchmarks/some/benchmark.rb&lt;/code&gt;.
There are no subprocesses, no magic, and so it is really easy to run them and profile them.&lt;/p&gt;

&lt;h3 id=&quot;warmup&quot;&gt;Warmup&lt;/h3&gt;

&lt;p&gt;We measure peak performance, i.e., performance after enough warmup, that is performance after the relevant methods are compiled.
This is what is typically used to compare JITs, and it is also what this benchmark suite aims to measure.
All benchmarks were run with enough warmup.
The warmup is automatically detected by using a &lt;a href=&quot;https://github.com/eregon/yjit-bench/blob/harness-warmup-20220104/harness-warmup/harness.rb&quot;&gt;custom harness&lt;/a&gt; which tracks the median absolute deviation over all iterations so far and keeps running more iterations until the median absolute deviation threshold is reached (more details &lt;a href=&quot;https://github.com/Shopify/yjit-metrics/issues/30#issuecomment-955207783&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;In general, more advanced JITs need more warmup.
The TruffleRuby and GraalVM teams are working on this issue by &lt;a href=&quot;https://medium.com/graalvm/multi-tier-compilation-in-graalvm-5fbc65f92402&quot;&gt;using multi-tier compilation&lt;/a&gt;, &lt;a href=&quot;https://www.graalvm.org/graalvm-as-a-platform/language-implementation-framework/AOTOverview/&quot;&gt;persisting the JITed code&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/smarr/status/1383076749043511300&quot;&gt;optimizing interpreter performance&lt;/a&gt;, among other ideas.&lt;/p&gt;

&lt;p&gt;The plots report the &lt;a href=&quot;https://en.wikipedia.org/wiki/Median&quot;&gt;median&lt;/a&gt; as the bar heights and the &lt;a href=&quot;https://en.wikipedia.org/wiki/Median_absolute_deviation&quot;&gt;median absolute deviation&lt;/a&gt; as error bars, for the second half of all iterations run. The first half is considered warmup and typically more noisy.
Those estimators are chosen because they are robust (which means they are not affected by outliers like a GC in one iteration), unlike the usual mean and standard deviation.
As one can see, the error bars are very small for almost all benchmarks, which is a further indication of enough warmup and having reached stable performance.&lt;/p&gt;

&lt;p&gt;The median is the middle value when we sort all values.
The median absolute deviation is the median of all absolute deviations, which are the absolute value of the difference between a given value and the median.
In other words, the median represents the middle value (typically the closest value to most values), and the median absolute deviation shows us how far other values are from the median.&lt;/p&gt;

&lt;h2 id=&quot;benchmarks&quot;&gt;Benchmarks&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/benchmarks-2022/activerecord.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Shopify/yjit-bench/blob/1751916ceb/benchmarks/activerecord/benchmark.rb&quot;&gt;The activerecord benchmark&lt;/a&gt; uses Rails’ ActiveRecord to query the database and return the title of the first &lt;code class=&quot;highlighter-rouge&quot;&gt;Post&lt;/code&gt;.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;sqlite3&lt;/code&gt; in-memory database is used for convenience (&lt;code class=&quot;highlighter-rouge&quot;&gt;sqlite3&lt;/code&gt; is a C extension gem).
On JRuby, &lt;code class=&quot;highlighter-rouge&quot;&gt;activerecord-jdbcsqlite3-adapter&lt;/code&gt; is used instead.&lt;/p&gt;

&lt;p&gt;One might think this benchmark is dominated by database performance but it seems clearly not the case, with YJIT being 1.42x the speed of CRuby 3.1 and TruffleRuby showing a 4.54x speedup.
There is quite a bit of Ruby logic in ActiveRecord and some in the &lt;code class=&quot;highlighter-rouge&quot;&gt;sqlite3&lt;/code&gt; gem, which Ruby JITs can potentially optimize.
TruffleRuby might also run the C extension faster since TruffleRuby JIT-compiles C extensions together with Ruby code.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/benchmarks-2022/binarytrees.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Shopify/yjit-bench/blob/1751916ceb/benchmarks/binarytrees/benchmark.rb&quot;&gt;The binarytrees benchmark&lt;/a&gt; (from the &lt;a href=&quot;https://benchmarksgame-team.pages.debian.net/benchmarksgame/description/binarytrees.html#binarytrees&quot;&gt;Computer Language Benchmarks Game&lt;/a&gt;, abbreviated CLBG later) creates binary trees using lots of recursive calls.
It also stresses the GC due to many allocation and keeps one tree alive for a while.
MJIT is doing well here with a 1.79x speedup, JRuby 2.06x and TruffleRuby 2.73x.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/benchmarks-2022/erubi.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Shopify/yjit-bench/blob/1751916ceb/benchmarks/erubi/benchmark.rb&quot;&gt;The erubi benchmark&lt;/a&gt; renders &lt;a href=&quot;https://github.com/Shopify/yjit-bench/blob/1751916ceb/benchmarks/erubi/simple_template.erb&quot;&gt;an ERB template&lt;/a&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;gem server&lt;/code&gt;’s index with 322 gems) using the &lt;a href=&quot;https://github.com/jeremyevans/erubi&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;erubi&lt;/code&gt; gem&lt;/a&gt;, which is the default template engine in Rails.
The rendered template has a length of 166563 bytes.
TruffleRuby performs great here due to &lt;a href=&quot;https://eregon.me/blog/assets/research/specializing-ropes-for-ruby.pdf&quot;&gt;its very efficient String concatenation&lt;/a&gt; and achieves a 5.26x speedup.
YJIT is currently not optimizing this benchmark well due to &lt;a href=&quot;https://github.com/Shopify/yjit/issues/297&quot;&gt;not supporting a bytecode instruction&lt;/a&gt; used in this benchmark.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/benchmarks-2022/erubi_rails.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Shopify/yjit-bench/blob/1751916ceb/benchmarks/erubi_rails/benchmark.rb&quot;&gt;The erubi_rails benchmark&lt;/a&gt; is a small Rails application which renders &lt;a href=&quot;https://github.com/Shopify/yjit-bench/blob/1751916ceb/benchmarks/erubi_rails/app/views/fake_discourse/topics_show.html.erb&quot;&gt;an ERB view&lt;/a&gt; coming from &lt;a href=&quot;https://www.discourse.org/&quot;&gt;Discourse&lt;/a&gt;.
The rendered template has a length of 9369 bytes.
The benchmark renders a topic’s page 100 times per iteration, in process (no network involved).
No database is involved in this benchmark as it focuses on &lt;code class=&quot;highlighter-rouge&quot;&gt;erubi&lt;/code&gt; in the context of Rails.
YJIT gets a speedup of 1.31x, JRuby of 1.82x and TruffleRuby of 3.3x.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/benchmarks-2022/fannkuchredux.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Shopify/yjit-bench/blob/1751916ceb/benchmarks/fannkuchredux/benchmark.rb&quot;&gt;The fannkuchredux benchmark&lt;/a&gt; (&lt;a href=&quot;https://benchmarksgame-team.pages.debian.net/benchmarksgame/description/fannkuchredux.html#fannkuchredux&quot;&gt;from CLBG&lt;/a&gt;) creates and manipulates &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt;s extensively.
MJIT and YJIT seem to not achieve any speedup here, probably because the benchmark is heavy on &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; operations and Array operations are defined in C in CRuby and so MJIT/YJIT cannot optimize them (except for simple &lt;code class=&quot;highlighter-rouge&quot;&gt;a[i]&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;a[i] = v&lt;/code&gt; but they do not seem to optimize it better than the interpreter in this benchmark).
JRuby and TruffleRuby OTOH can optimize and JIT compile Array operations, and &lt;a href=&quot;https://speakerdeck.com/eregon/parallel-and-thread-safe-ruby-at-high-speed-with-truffleruby?slide=62&quot;&gt;TruffleRuby uses storage strategies&lt;/a&gt; for Arrays.
JRuby gets a speedup of 5.53x, TruffleRuby gets a speedup of 33.88x.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/benchmarks-2022/hexapdf.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Shopify/yjit-bench/blob/1751916ceb/benchmarks/hexapdf/benchmark.rb&quot;&gt;The hexapdf benchmark&lt;/a&gt; uses the &lt;code class=&quot;highlighter-rouge&quot;&gt;hexapdf&lt;/code&gt; gem, wraps a long text (&lt;a href=&quot;https://gutenberg.org/ebooks/1727&quot;&gt;The Odyssey&lt;/a&gt;) to a line width of 50 characters and renders it to a PDF file, saved to &lt;code class=&quot;highlighter-rouge&quot;&gt;/tmp&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;hexapdf&lt;/code&gt; is written entirely in Ruby (no C extension).
Wrapping text is heavy on arithmetic operations and JITs often do a good job on those.
YJIT gets a speedup of 1.4x, TruffleRuby of 4.38x (with some variability).
CRuby 3.1 MJIT &lt;a href=&quot;https://bugs.ruby-lang.org/issues/18277&quot;&gt;fails this benchmark&lt;/a&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;buffer error (Zlib::BufError)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/benchmarks-2022/lee.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Shopify/yjit-bench/blob/1751916ceb/benchmarks/lee/benchmark.rb&quot;&gt;The lee benchmark&lt;/a&gt; is from Chris Seaton (see his &lt;a href=&quot;https://chrisseaton.com/truffleruby/ruby-stm/&quot;&gt;blog post&lt;/a&gt;) and some of his work during his PhD.
The benchmark lays out the wires on a circuit board in a manner which avoids crossing wires.
This is the sequential version of the benchmark.
It seems worth noting the approach itself is from scientific literature and Chris wrote this in straightforward pure Ruby, not particularly optimizing it for any Ruby implementation.
In his blog post he found that TruffleRuby was over 10x faster than CRuby 2.7.
On latest TruffleRuby, we see a speedup of 22x!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/benchmarks-2022/liquid-render.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Shopify/yjit-bench/blob/1751916ceb/benchmarks/liquid-render/benchmark.rb&quot;&gt;The liquid-render benchmark&lt;/a&gt; renders all the &lt;a href=&quot;https://github.com/Shopify/yjit-bench/tree/1751916ceb/benchmarks/liquid-render/performance/tests&quot;&gt;performance test Liquid templates&lt;/a&gt; which are parsed before starting the benchmark.
As you may know, rendering Liquid templates quickly &lt;a href=&quot;https://www.shopify.com/partners/blog/shopify-liquid-debug&quot;&gt;is important for Shopify&lt;/a&gt;.
Liquid is not a typical template engine, it does not generate Ruby code and &lt;code class=&quot;highlighter-rouge&quot;&gt;eval&lt;/code&gt; it and then call the generated method (like ERB engines).
Instead, Liquid &lt;a href=&quot;https://github.com/Shopify/liquid/blob/db3999a008/lib/liquid/tags/if.rb&quot;&gt;interprets&lt;/a&gt; an AST representing the template for &lt;a href=&quot;https://github.com/Shopify/liquid/blob/db3999a008/README.md#introduction&quot;&gt;security reasons and avoiding eval&lt;/a&gt;.
YJIT gets a speedup of 1.61x and TruffleRuby gets a speedup of 4.86x, some of it due to TruffleRuby’s advanced String representation (&lt;a href=&quot;https://eregon.me/blog/assets/research/specializing-ropes-for-ruby.pdf&quot;&gt;Ropes&lt;/a&gt;) and the rest due to JIT compiling the Liquid interpreter better.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/benchmarks-2022/mail.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Shopify/yjit-bench/blob/1751916ceb/benchmarks/mail/benchmark.rb&quot;&gt;The mail benchmark&lt;/a&gt; parses &lt;a href=&quot;https://github.com/jhawthorn/yjit-bench/blob/1751916ceb/benchmarks/mail/raw_email2.eml&quot;&gt;an email&lt;/a&gt; with the &lt;code class=&quot;highlighter-rouge&quot;&gt;mail&lt;/code&gt; gem (&lt;a href=&quot;https://github.com/Shopify/yjit-bench/pull/40&quot;&gt;more context&lt;/a&gt;). Some of the parsing is done by parsers generated by &lt;a href=&quot;http://www.colm.net/open-source/ragel/&quot;&gt;Ragel&lt;/a&gt;.
YJIT and TruffleRuby show nice speedups.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/benchmarks-2022/nbody.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Shopify/yjit-bench/blob/1751916ceb/benchmarks/nbody/benchmark.rb&quot;&gt;The nbody benchmark&lt;/a&gt; (&lt;a href=&quot;https://benchmarksgame-team.pages.debian.net/benchmarksgame/description/nbody.html#nbody&quot;&gt;from CLBG&lt;/a&gt;) models the orbits of Jupiter, Saturn, Uranus and Neptune around the Sun.
The benchmark consists mainly of arithmetic computations and accessing instance variables heavily (planets are represented as objects).
JRuby reaches a good speedup of 4.43x.
TruffleRuby is about 50x the speed of CRuby 3.1, which is simply incredible.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/benchmarks-2022/optcarrot.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Shopify/yjit-bench/blob/1751916ceb/benchmarks/optcarrot/benchmark.rb&quot;&gt;The optcarrot benchmark&lt;/a&gt; is one of the famous benchmarks for Ruby 3x3 (by &lt;a href=&quot;https://github.com/mame/optcarrot&quot;&gt;@mame&lt;/a&gt;, &lt;a href=&quot;https://eregon.me/blog/2016/11/28/optcarrot.html&quot;&gt;my blog post about it&lt;/a&gt;). It is a NES emulator and this benchmark renders 200 frames of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Lan Master&lt;/code&gt; game per iteration.
MJIT is known to be &lt;a href=&quot;https://www.ruby-lang.org/en/news/2020/12/25/ruby-3-0-0-released/&quot;&gt;about 3x faster&lt;/a&gt; than CRuby 2.0 on this benchmark.
In this run, 3.1 MJIT is exactly 3.0x as fast as &lt;strong&gt;CRuby 2.0&lt;/strong&gt;.
TruffleRuby is known to be &lt;a href=&quot;https://eregon.me/blog/2016/11/28/optcarrot.html&quot;&gt;good at it&lt;/a&gt; since the benchmark came out, and it reaches a 10.4x speedup over CRuby 2.0.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/benchmarks-2022/psych-load.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Shopify/yjit-bench/blob/1751916ceb/benchmarks/psych-load/benchmark.rb&quot;&gt;The psych-load benchmark&lt;/a&gt; parses &lt;a href=&quot;https://github.com/Shopify/yjit-bench/tree/1751916ceb/benchmarks/psych-load/yaml&quot;&gt;a set of YAML files&lt;/a&gt; using &lt;code class=&quot;highlighter-rouge&quot;&gt;Psych.load&lt;/code&gt; (same as &lt;code class=&quot;highlighter-rouge&quot;&gt;YAML.load&lt;/code&gt;).
Psych 2.2.4 is used on CRuby 2.0 instead of Psych 4.0.1, since it is the latest Psych version compatible with 2.0.
Although a significant part of the benchmark is likely spent inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;psych&lt;/code&gt; C extension (which uses the &lt;code class=&quot;highlighter-rouge&quot;&gt;libyaml&lt;/code&gt; YAML parser), we see the time is not only spent in C extensions (where CRuby JITs cannot help) but also in Ruby code as MJIT and YJIT show some speedups here.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/benchmarks-2022/railsbench.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Shopify/yjit-bench/blob/1751916ceb/benchmarks/railsbench/benchmark.rb&quot;&gt;The railsbench benchmark&lt;/a&gt; is inspired from k0kubun’s &lt;a href=&quot;https://github.com/k0kubun/railsbench&quot;&gt;railsbench&lt;/a&gt;, which is based on headius’s &lt;a href=&quot;https://github.com/headius/pgrailsbench&quot;&gt;pgrailsbench&lt;/a&gt;. It is a small blog-style Rails app &lt;a href=&quot;https://github.com/Shopify/yjit-bench/blob/1751916ceb/benchmarks/railsbench/README.md&quot;&gt;scaffolded with a &lt;code class=&quot;highlighter-rouge&quot;&gt;Post&lt;/code&gt; model&lt;/a&gt;. This variant uses &lt;code class=&quot;highlighter-rouge&quot;&gt;sqlite3&lt;/code&gt; as the database for convenience (stored on disk), and runs everything in a single process (much simpler to run).
The benchmark repeatedly visits the index of the posts (both as HTML and JSON) and each of the 100 posts in a &lt;a href=&quot;https://github.com/Shopify/yjit-bench/blob/1751916ceb/benchmarks/railsbench/benchmark.rb#L16-L21&quot;&gt;pseudorandom order with a fixed seed&lt;/a&gt;. It uses the default ERB templates generated by Rails.
MJIT gets a speedup of 1.09x (&lt;a href=&quot;https://k0kubun.medium.com/ruby-3-jit-can-make-rails-faster-756310f235a&quot;&gt;it took a while for MJIT to speedup Rails&lt;/a&gt;), YJIT of 1.33x, JRuby of 1.13x and TruffleRuby of 3.27x.
In other words, on this small Rails benchmark, TruffleRuby response times are more than 3 times faster than CRuby 3.1!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/benchmarks-2022/rubykon.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Shopify/yjit-bench/blob/1751916ceb/benchmarks/rubykon/benchmark.rb&quot;&gt;The rubykon benchmark&lt;/a&gt; (by &lt;a href=&quot;https://github.com/PragTob/rubykon&quot;&gt;@PragTob&lt;/a&gt;) is well known from the &lt;a href=&quot;https://pragtob.wordpress.com/2020/08/24/the-great-rubykon-benchmark-2020-cruby-vs-jruby-vs-truffleruby/&quot;&gt;blog&lt;/a&gt; &lt;a href=&quot;https://pragtob.wordpress.com/2017/01/24/benchmarking-a-go-ai-in-ruby-cruby-vs-rubinius-vs-jruby-vs-truffle-a-year-later/&quot;&gt;posts&lt;/a&gt; by its author.
Rubykon is an AI for the &lt;a href=&quot;https://en.wikipedia.org/wiki/Go_(game)&quot;&gt;Go board game&lt;/a&gt;.
YJIT reaches a 2.15x speedup and JRuby 2.59x. TruffleRuby is ahead with a 9.54x speedup.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;The benchmarks we just analyzed are of various size and have many different characteristics, notably some are more realistic and some less.
I think a geometric mean over their results &lt;em&gt;alone&lt;/em&gt; is not really a good summary given the variety.
But yet, it is nice to have a one-number summary for these benchmarks.
Note that CRuby 2.0 can only run 7 benchmarks out of 14, and MJIT runs 13 out of 14 (not &lt;code class=&quot;highlighter-rouge&quot;&gt;hexapdf&lt;/code&gt;).
The others Ruby versions run all 14 benchmarks.
Error bars are not meaningful on this chart.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/benchmarks-2022/geomean.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The chart satisfyingly goes higher from left to right.
This means, &lt;em&gt;for the geomean on those benchmarks&lt;/em&gt;, that newer CRuby versions are faster than older versions, that MJIT and YJIT are faster than without them, that JRuby’s geomean is faster than MJIT and YJIT, and that TruffleRuby is simply in a different league than other Ruby implementations with an overall 6.23x geomean speedup.&lt;/p&gt;

&lt;p&gt;On the 7 benchmarks that CRuby 2.0 can run, CRuby 3.1 MJIT is 1.74x as fast as CRuby 2.0’s geomean
(binarytrees 1.9x, erubi 1.25x, fannkuchredux 1.33x, nbody 2.17x, optcarrot 3.0x, psych-load 1.12x, rubykon 2.08x).
That’s closer to 2x than 3x (i.e., Ruby 3x3) but it is a significant improvement since CRuby 2.0.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I think the numbers speak for themselves.&lt;/p&gt;

&lt;p&gt;My take on these results (as the TruffleRuby lead), is that TruffleRuby is able to understand and optimize Ruby code significantly better than any other implementation of Ruby.
It seems unlikely other Ruby implementations would ever reach TruffleRuby’s level of performance.
TruffleRuby uses the GraalVM JIT compiler, one of &lt;a href=&quot;https://www.graalvm.org/java/&quot;&gt;the most advanced JIT compilers available today&lt;/a&gt;. TruffleRuby, through the Truffle framework, is in direct communication with the JIT (and so are the TruffleRuby and GraalVM Compiler teams) and can easily tell the JIT what is worth optimizing/profiling/inlining and what is not, and when it should deoptimize to the interpreter to reprofile or recompile differently.
The Truffle framework makes it much easier to optimize many parts of Ruby.
As an example, adding an inline cache is just 2 lines of code (and so TruffleRuby has &amp;gt;100 inline caches), while in other VMs few inline caches are used because of the large complexity involved to add a single one.
Finally, the GraalVM architecture makes it possible to inline and just-in-time compile together Ruby code, Java code, C extensions, &lt;a href=&quot;https://rubykaigi.org/2021-takeout/presentations/eregontp.html&quot;&gt;Ruby regular expressions&lt;/a&gt; and &lt;a href=&quot;https://www.graalvm.org/docs/introduction/&quot;&gt;any other language implemented on GraalVM&lt;/a&gt;, which brings this awesome performance.&lt;/p&gt;</content><author><name>Benoit Daloze</name></author><summary type="html">In this blog post we benchmark many Ruby versions and the latest Ruby Just-in-Time compilers (JITs) on the newest Ruby benchmark suite, yjit-bench. As a teaser, the geometric mean speedups compared to CRuby 3.1 on these 14 benchmarks are: MJIT 1.26x, YJIT 1.39x, JRuby 1.86x and TruffleRuby 6.23x. Read on to find more about the benchmarks and gain insights on these speedups. This blog post is also available on Medium.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://eregon.me/blog/assets/benchmarks-2022/banner.png"/></entry><entry><title type="html">Review: Ruby Installers and Ruby Switchers</title><link href="http://eregon.me/blog/2021/06/04/review-of-ruby-installers-and-switchers.html" rel="alternate" type="text/html" title="Review: Ruby Installers and Ruby Switchers"><published>2021-06-04T00:00:00+02:00</published><updated>2021-06-04T00:00:00+02:00</updated><id>http://eregon.me/blog/2021/06/04/review-of-ruby-installers-and-switchers</id><content type="html" xml:base="http://eregon.me/blog/2021/06/04/review-of-ruby-installers-and-switchers.html">&lt;p&gt;In this post I review the most popular Ruby installers (making it easier to install a Ruby)
and Ruby switchers (to switch between different Rubies conveniently).&lt;/p&gt;

&lt;p&gt;I contributed to all 3 Ruby installers when adding support for &lt;a href=&quot;https://www.graalvm.org/ruby/&quot;&gt;TruffleRuby&lt;/a&gt;,
and so I have experience both with their codebase and their usage.&lt;/p&gt;

&lt;p&gt;I am not reviewing Ruby installers or switchers for Windows as I have no experience with them.&lt;/p&gt;

&lt;p&gt;TLDR: feel free to jump to the &lt;a href=&quot;#conclusion-and-recommendation&quot;&gt;Conclusion and Recommendation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;ruby-installers&quot;&gt;Ruby Installers&lt;/h2&gt;

&lt;h3 id=&quot;rvm&quot;&gt;RVM&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/rvm/rvm&quot;&gt;RVM&lt;/a&gt; is probably the oldest and certainly the
Ruby installer with the most features.
That’s actually a doubled-edged sword, as it means RVM has a much larger codebase
than all the others (25000 SLOC of Bash), and that makes it hard to maintain and
to keep correct (note: I’m not counting test SLOC).
Some features like gemsets seem much less needed nowadays as there is Bundler.&lt;/p&gt;

&lt;p&gt;To give an idea, when I &lt;a href=&quot;https://github.com/rvm/rvm/issues/4297&quot;&gt;added support&lt;/a&gt; for TruffleRuby in RVM,
I had many uncertainties, and the large codebase plus a lot of global variables made it really tricky.
As a result, there were multiple bugs and a lot more effort than for other Ruby installers.
Also, RVM actually &lt;a href=&quot;https://github.com/rvm/rvm/issues/4408&quot;&gt;changes&lt;/a&gt; standard Ruby executables like &lt;code class=&quot;highlighter-rouge&quot;&gt;rake&lt;/code&gt;,
which I really dislike as a Ruby implementer because it tends to break things in subtle ways (this behavior was later disabled when installing TruffleRuby).&lt;/p&gt;

&lt;p&gt;To be fair, RVM served me well at the time other Ruby installers/switchers did not exist.&lt;/p&gt;

&lt;p&gt;RVM supports a lot of &lt;a href=&quot;https://github.com/rvm/rvm/tree/master/scripts/functions/requirements&quot;&gt;platforms&lt;/a&gt;,
as well as &lt;a href=&quot;https://github.com/rvm/rvm/blob/master/config/known_strings&quot;&gt;ancient Rubies&lt;/a&gt;.
More platforms can be nice for beginners, but platform-specific code eventually always breaks due to incompatible changes in operating systems (e.g., package names).&lt;/p&gt;

&lt;p&gt;Pros:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Most features&lt;/li&gt;
  &lt;li&gt;Automatically installs system packages for many platforms&lt;/li&gt;
  &lt;li&gt;Support the most Rubies, even very old ones (some with patches)&lt;/li&gt;
  &lt;li&gt;Binary builds of some CRuby versions on some platforms&lt;/li&gt;
  &lt;li&gt;Supports building &lt;code class=&quot;highlighter-rouge&quot;&gt;-head&lt;/code&gt; versions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The built Ruby can differ quite a bit from a standard build, which can cause extra issues&lt;/li&gt;
  &lt;li&gt;Huge (25000 SLOC of Bash), hard to maintain, and due to that many bugs&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ruby-build&quot;&gt;ruby-build&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/rbenv/ruby-build&quot;&gt;ruby-build&lt;/a&gt; is the best-maintained Ruby installer.
Active maintainers include &lt;code class=&quot;highlighter-rouge&quot;&gt;@hsbt&lt;/code&gt; from the CRuby core team, &lt;a href=&quot;https://github.com/rbenv/ruby-build/graphs/contributors&quot;&gt;others&lt;/a&gt; and myself.&lt;/p&gt;

&lt;p&gt;It offers a &lt;a href=&quot;https://github.com/rbenv/ruby-build/tree/master/share/ruby-build&quot;&gt;wide choice&lt;/a&gt; of Ruby versions.
It also offers &lt;code class=&quot;highlighter-rouge&quot;&gt;-dev&lt;/code&gt; versions, which is incredibly useful to let users check Ruby implementation bug fixes, or simply to try the latest/fastest/best build of a Ruby implementation.&lt;/p&gt;

&lt;p&gt;The design is really straightforward (one definition per Ruby version), and as a result it’s much more reliable.
Users update &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby-build&lt;/code&gt; regularly as that is the way to get new versions. This is great to also ship bug fixes quickly.
The release process is entirely automated (kudos to &lt;code class=&quot;highlighter-rouge&quot;&gt;@mislav&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ruby-build&lt;/code&gt; does not install system packages for you,
but documents them on &lt;a href=&quot;https://github.com/rbenv/ruby-build/wiki&quot;&gt;their wiki&lt;/a&gt;, which I find is much more future-proof.&lt;/p&gt;

&lt;p&gt;Pros:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Actively maintained&lt;/li&gt;
  &lt;li&gt;Small, 1390 SLOC of Bash&lt;/li&gt;
  &lt;li&gt;Supports building &lt;code class=&quot;highlighter-rouge&quot;&gt;-dev&lt;/code&gt; versions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Does not install system packages on its own (but that is more future-proof, and building Rubies tend to fail clearly when there is missing dependency)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ruby-install&quot;&gt;ruby-install&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/postmodern/ruby-install&quot;&gt;ruby-install&lt;/a&gt; is the simplest Ruby installer.&lt;/p&gt;

&lt;p&gt;It has an interesting design where installing new versions does not require to update &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby-install&lt;/code&gt;.
Instead, &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby-install --latest&lt;/code&gt; is able to fetch the latest versions from &lt;a href=&quot;https://github.com/postmodern/ruby-versions&quot;&gt;ruby-versions&lt;/a&gt; and install them.
This is another double-edged sword.
On one hand it’s very elegant, and super easy to update.
On the other hand, if any other change is needed (e.g., different system packages, the download URL changed, etc), that actually requires &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby-install&lt;/code&gt; changes, and users seem less used to update &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby-install&lt;/code&gt;.
&lt;code class=&quot;highlighter-rouge&quot;&gt;ruby-versions&lt;/code&gt; only contains Ruby versions and checksums, not URLs or packages, which IMHO feels too limited.&lt;/p&gt;

&lt;p&gt;As an example, even though I made a PR to address a changed dependency the day it was reported,
it took &lt;a href=&quot;https://github.com/postmodern/ruby-install/issues/360&quot;&gt;8 months&lt;/a&gt; to have a &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby-install&lt;/code&gt; release with that (to be fair, there was an easy workaround).&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ruby-install&lt;/code&gt; does not support development builds by design, which is IMHO a big limitation.&lt;/p&gt;

&lt;p&gt;Pros:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Tiny, 866 SLOC of Bash&lt;/li&gt;
  &lt;li&gt;Elegant design&lt;/li&gt;
  &lt;li&gt;Super easy to install the latest Ruby releases, if they don’t require &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby-install&lt;/code&gt; changes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Does not support &lt;code class=&quot;highlighter-rouge&quot;&gt;-dev&lt;/code&gt; builds&lt;/li&gt;
  &lt;li&gt;Infrequent releases&lt;/li&gt;
  &lt;li&gt;Users are not used to update &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby-install&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Cuts a few corners in the name of simplicity&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ruby-switchers&quot;&gt;Ruby Switchers&lt;/h2&gt;

&lt;h3 id=&quot;rvm-1&quot;&gt;RVM&lt;/h3&gt;

&lt;p&gt;RVM is both a Ruby installer and Ruby switcher so it appears here too.
The points above really apply to both so I will not repeat them here.&lt;/p&gt;

&lt;p&gt;The gemset feature tends to IMHO add more complexity than it helps, by making switching a 2-dimensional operation (ruby, gemset) instead of just 1 dimension (ruby).
Also gemsets have symlimks in their path (not expanded, that’s how RVM knows which gemset is active), and this can occasionally cause &lt;a href=&quot;https://github.com/rvm/rvm/issues/4425&quot;&gt;issues&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Pros:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Most features&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Overrides &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Loads thousands of lines of Bash in your shell&lt;/li&gt;
  &lt;li&gt;Many features which are of little use nowadays&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;rbenv&quot;&gt;rbenv&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/rbenv/rbenv&quot;&gt;rbenv&lt;/a&gt; is a simple Ruby switcher.
It uses small &lt;a href=&quot;https://medium.com/@Sudhagar/rbenv-how-it-works-e5a0e4fa6e76&quot;&gt;shims&lt;/a&gt; (executables) to always redirect to the currently-selected Ruby.
There is an overhead of that, in the order of 11 ms on my machine (pretty small, considering that &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby -e 0&lt;/code&gt; takes 38 ms on my machine for ruby-3.0.1).
OTOH, it guarantees it will never pick the wrong Ruby which is obviously important.&lt;/p&gt;

&lt;p&gt;For me, the killer feature of &lt;code class=&quot;highlighter-rouge&quot;&gt;rbenv&lt;/code&gt; is it does not mess with RubyGems.
Specifically, it does not set &lt;code class=&quot;highlighter-rouge&quot;&gt;GEM_HOME&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;GEM_PATH&lt;/code&gt; (unlike the other Ruby switchers), and
so the gems corresponding to the selected Ruby are always correctly used.
That also means it expects that Rubies are installed in user-writable locations (or one uses &lt;code class=&quot;highlighter-rouge&quot;&gt;gem install --user-install&lt;/code&gt; or set Bundler &lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt;),
but I think that’s a reasonable assumption for a Ruby switcher.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/asdf-vm/asdf&quot;&gt;asdf&lt;/a&gt; is a multi-language switcher with a very similar design to &lt;code class=&quot;highlighter-rouge&quot;&gt;rbenv&lt;/code&gt; and it uses &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby-build&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Pros:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Just works&lt;/li&gt;
  &lt;li&gt;Also works for non-Bash shells like &lt;a href=&quot;https://fishshell.com/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fish&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Reliable, does not mess with &lt;code class=&quot;highlighter-rouge&quot;&gt;GEM_HOME&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Well maintained, least number of open issues&lt;/li&gt;
  &lt;li&gt;Small, 1500 SLOC of Bash&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Small overhead on startup (~11 ms) due to shims&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;which ruby-related-executable&lt;/code&gt; is not enough to show the actual executable path, one needs &lt;code class=&quot;highlighter-rouge&quot;&gt;rbenv which&lt;/code&gt; instead&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;chruby&quot;&gt;chruby&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/postmodern/chruby&quot;&gt;chruby&lt;/a&gt; is a minimal Ruby switcher.
In fact, it’s so small it fits in a &lt;a href=&quot;https://github.com/postmodern/chruby/blob/master/share/chruby/chruby.sh&quot;&gt;100 lines of Bash&lt;/a&gt;.
After all, switching Rubies only requires changing &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt; and that’s it.&lt;/p&gt;

&lt;p&gt;Unfortunately, &lt;code class=&quot;highlighter-rouge&quot;&gt;chruby&lt;/code&gt; does one additional thing which is to set &lt;code class=&quot;highlighter-rouge&quot;&gt;GEM_HOME&lt;/code&gt;.
That can be convenient to install gems when a Ruby is installed in a non user-writable location.
Unfortunately the way it’s done is &lt;a href=&quot;https://github.com/postmodern/chruby/issues/451&quot;&gt;incorrect&lt;/a&gt; for non-CRuby.
I made a PR to fix this but 18 months after it was merged there is still no release.
So at this point I feel very disappointed about the maintenance of chruby.&lt;/p&gt;

&lt;p&gt;I still like &lt;code class=&quot;highlighter-rouge&quot;&gt;chruby&lt;/code&gt; though, and I use &lt;a href=&quot;https://github.com/postmodern/chruby/compare/master...eregon:do-no-set-gem-home&quot;&gt;a branch&lt;/a&gt; which simply doesn’t set &lt;code class=&quot;highlighter-rouge&quot;&gt;GEM_HOME&lt;/code&gt;.
That’s just &lt;a href=&quot;https://github.com/eregon/chruby/blob/do-no-set-gem-home/share/chruby/chruby.sh&quot;&gt;75 SLOC of Bash&lt;/a&gt;, one cannot get much simpler for switching Rubies.
This is probably the most future-proof Ruby switcher out there.&lt;/p&gt;

&lt;p&gt;FWIW, I made another PR to &lt;code class=&quot;highlighter-rouge&quot;&gt;chruby&lt;/code&gt; to use a similar approach, but still set &lt;code class=&quot;highlighter-rouge&quot;&gt;GEM_HOME&lt;/code&gt; if the default Gem home is not writable.
After lots of efforts, and even getting consensus on the related &lt;a href=&quot;https://github.com/rubygems/rubygems/pull/2847&quot;&gt;RubyGems issue&lt;/a&gt; for the general approach,
&lt;a href=&quot;https://github.com/postmodern/chruby/pull/431&quot;&gt;the PR&lt;/a&gt; is still not merged so I have not much hope for that (maybe it is time to hard fork &lt;code class=&quot;highlighter-rouge&quot;&gt;chruby&lt;/code&gt; …).&lt;/p&gt;

&lt;p&gt;Pros:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Very simple and minimal, 149 SLOC of Bash&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Sets &lt;code class=&quot;highlighter-rouge&quot;&gt;GEM_HOME&lt;/code&gt; incorrectly on non-CRuby&lt;/li&gt;
  &lt;li&gt;Requires to be loaded in the shell (there is &lt;a href=&quot;https://github.com/JeanMertz/chruby-fish&quot;&gt;chruby-fish&lt;/a&gt; though)&lt;/li&gt;
  &lt;li&gt;Too rare releases, not addressing bugs promptly&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion-and-recommendation&quot;&gt;Conclusion and Recommendation&lt;/h2&gt;

&lt;p&gt;In summary:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;I recommend to use &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby-build&lt;/code&gt; over RVM or &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby-install&lt;/code&gt; as IMHO it is a better Ruby installer in about every way.&lt;/li&gt;
  &lt;li&gt;I recommend to use &lt;code class=&quot;highlighter-rouge&quot;&gt;rbenv&lt;/code&gt; over RVM or &lt;code class=&quot;highlighter-rouge&quot;&gt;chruby&lt;/code&gt; as it is the only Ruby switcher not messing with gem paths.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;rbenv&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;ruby-build&lt;/code&gt; combo is fairly natural and clearly the best maintained.&lt;/p&gt;

&lt;p&gt;Alternatively, you can try &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby-build&lt;/code&gt; + my &lt;a href=&quot;https://github.com/postmodern/chruby/compare/master...eregon:do-no-set-gem-home&quot;&gt;branch of &lt;code class=&quot;highlighter-rouge&quot;&gt;chruby&lt;/code&gt; which does not set &lt;code class=&quot;highlighter-rouge&quot;&gt;GEM_HOME&lt;/code&gt;&lt;/a&gt;.
This is what I use and it works perfectly from my experience.&lt;/p&gt;

&lt;p&gt;I would recommend against RVM because of the sheer complexity and the huge codebase which is basically impossible to keep bug-free.&lt;/p&gt;

&lt;p&gt;Note that while I might criticize various softwares in this blog post,
I have a lot of respect for their authors, and
I know it is a hard job to maintain such software (written in Bash, one of the worst programming languages).&lt;/p&gt;</content><author><name>Benoit Daloze</name></author><summary type="html">In this post I review the most popular Ruby installers (making it easier to install a Ruby) and Ruby switchers (to switch between different Rubies conveniently).</summary></entry><entry><title type="html">Correct Delegation with Ruby 2.6, 2.7 and 3.0</title><link href="http://eregon.me/blog/2021/02/13/correct-delegation-in-ruby-2-27-3.html" rel="alternate" type="text/html" title="Correct Delegation with Ruby 2.6, 2.7 and 3.0"><published>2021-02-13T00:00:00+01:00</published><updated>2021-02-13T00:00:00+01:00</updated><id>http://eregon.me/blog/2021/02/13/correct-delegation-in-ruby-2-27-3</id><content type="html" xml:base="http://eregon.me/blog/2021/02/13/correct-delegation-in-ruby-2-27-3.html">&lt;p&gt;While looking at how a few gems handle delegation on Ruby 2.7, I noticed that many of them are unfortunately incorrect.
The &lt;a href=&quot;https://www.ruby-lang.org/en/news/2019/12/12/separation-of-positional-and-keyword-arguments-in-ruby-3-0/&quot;&gt;official blog post&lt;/a&gt;
about keyword arguments changes in Ruby 2.7 and Ruby 3.0 is rather long and might be unclear.
So I will keep this one really short and to the point.&lt;/p&gt;

&lt;p&gt;I am a CRuby committer which discussed and designed the keyword arguments changes along with Jeremy Evans and Yusuke Endoh.&lt;/p&gt;

&lt;h2 id=&quot;the-only-correct-way&quot;&gt;The Only Correct Way&lt;/h2&gt;

&lt;p&gt;There is actually just a single way to do delegation that works in Ruby &amp;lt;= 2.6, in Ruby 2.7 and in Ruby &amp;gt;= 3:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ruby2_keywords&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;respond_to?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ruby2_keywords&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s simple: &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby2_keywords&lt;/code&gt; is the only way to achieve correct delegation on Ruby 2.7.
The approach above is used in &lt;a href=&quot;https://github.com/rails/rails/blob/v6.1.0/actionpack/lib/action_dispatch/middleware/stack.rb#L94&quot;&gt;Rails&lt;/a&gt;, etc.&lt;/p&gt;

&lt;p&gt;You can also add the &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby2_keywords&lt;/code&gt; gem to remove the &lt;code class=&quot;highlighter-rouge&quot;&gt;respond_to?&lt;/code&gt; check and be able to use:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ruby2_keywords&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;some-frequent-incorrect-ways&quot;&gt;Some Frequent Incorrect Ways&lt;/h2&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Broken on 2.6 and 2.7&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;is &lt;a href=&quot;https://eregon.me/blog/2019/11/10/the-delegation-challenge-of-ruby27.html#ruby-3-style-delegation&quot;&gt;incorrect on Ruby 2.6 and on Ruby 2.7&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Broken on Ruby 3+, warns in Ruby 2.7&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;is &lt;a href=&quot;https://eregon.me/blog/2019/11/10/the-delegation-challenge-of-ruby27.html#ruby-2-style-delegation&quot;&gt;incorrect on Ruby 3.0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some try a combination of the above:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Broken on 2.7&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RUBY_VERSION&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;2.7&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;But that’s still &lt;a href=&quot;https://eregon.me/blog/2019/11/10/the-delegation-challenge-of-ruby27.html#ruby-3-style-delegation&quot;&gt;incorrect on Ruby 2.7&lt;/a&gt;
(like the first example, &lt;code class=&quot;highlighter-rouge&quot;&gt;foo({})&lt;/code&gt; passes no arguments at all).&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby2_keywords&lt;/code&gt; for delegation, that’s the only correct way, as shown above.&lt;/p&gt;

&lt;p&gt;If you maintain some Ruby code or a gem, search for methods delegating (= receiving + passing) keyword arguments with &lt;code class=&quot;highlighter-rouge&quot;&gt;**&lt;/code&gt;,
like the first and third incorrect patterns.
Delegation with &lt;code class=&quot;highlighter-rouge&quot;&gt;**&lt;/code&gt; does not work in Ruby 2.6 and 2.7, use &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby2_keywords&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;*args&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;All methods delegating with &lt;code class=&quot;highlighter-rouge&quot;&gt;*args&lt;/code&gt; should use &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby2_keywords&lt;/code&gt; for Ruby &amp;gt;= 2.7, as long as the target method might have keyword arguments.&lt;/p&gt;

&lt;h2 id=&quot;post-scriptum&quot;&gt;Post Scriptum&lt;/h2&gt;

&lt;p&gt;Needing to use &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby2_keywords&lt;/code&gt; explicitly for delegation is unfortunate, I wish there would be a more natural way to express delegation in Ruby 2.7.
Unfortunately there is not.&lt;/p&gt;

&lt;p&gt;I once &lt;a href=&quot;https://bugs.ruby-lang.org/issues/16463&quot;&gt;proposed&lt;/a&gt; to enable &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby2_keywords&lt;/code&gt; by default to preserve compatibility, but this was rejected.
It would also have provided better warnings for delegation.
We could have postponed the delegation-related changes in order to migrate delegation code once (&lt;code class=&quot;highlighter-rouge&quot;&gt;*args&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;*args, **kwargs&lt;/code&gt;) and not twice (&lt;code class=&quot;highlighter-rouge&quot;&gt;*args&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby2_keywords&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;*args, **kwargs&lt;/code&gt; / &lt;code class=&quot;highlighter-rouge&quot;&gt;(...)&lt;/code&gt;),
but matz wanted to make all keyword arguments deprecations at once.&lt;/p&gt;

&lt;p&gt;At least now we have Ruby 3.0, so one can more easily find problematic delegation code as it just breaks on Ruby 3.0 if not done correctly.
Note that keyword argument warnings are disabled by default in Ruby 2.7.2.
Use &lt;code class=&quot;highlighter-rouge&quot;&gt;RUBYOPT=-W:deprecated command&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Warning[:deprecated] = true&lt;/code&gt; in Ruby code to see them.&lt;/p&gt;

&lt;p&gt;There is the &lt;code class=&quot;highlighter-rouge&quot;&gt;def foo(...); target(...); end&lt;/code&gt; syntax but it fails to parse on Ruby &amp;lt;= 2.6,
and only works with no other arguments at all in Ruby 2.7.0 - 2.7.2,
therefore it has extremely limited applicability these days and I just ignore it.
Note that &lt;code class=&quot;highlighter-rouge&quot;&gt;(arg, ...)&lt;/code&gt; might finally get &lt;a href=&quot;https://bugs.ruby-lang.org/issues/16378&quot;&gt;backported to 2.7.3&lt;/a&gt;.
It might make sense to consider &lt;code class=&quot;highlighter-rouge&quot;&gt;...&lt;/code&gt; when dropping Ruby 2.6 support.&lt;/p&gt;

&lt;p&gt;When dropping Ruby 2 support entirely, one can switch to &lt;code class=&quot;highlighter-rouge&quot;&gt;(*args, **kwargs)&lt;/code&gt;-style delegation, as that works correctly on Ruby &amp;gt;= 3.&lt;/p&gt;

&lt;p&gt;Another way would be to explicitly not support Ruby 2.7, then the last example with the version check would work.
It is probably impractical for most gems to do that though.&lt;/p&gt;</content><author><name>Benoit Daloze</name></author><summary type="html">While looking at how a few gems handle delegation on Ruby 2.7, I noticed that many of them are unfortunately incorrect. The official blog post about keyword arguments changes in Ruby 2.7 and Ruby 3.0 is rather long and might be unclear. So I will keep this one really short and to the point.</summary></entry><entry><title type="html">The Ruby Spec Suite Compatibility Report</title><link href="http://eregon.me/blog/2020/06/27/ruby-spec-compatibility-report.html" rel="alternate" type="text/html" title="The Ruby Spec Suite Compatibility Report"><published>2020-06-27T00:00:00+02:00</published><updated>2020-06-27T00:00:00+02:00</updated><id>http://eregon.me/blog/2020/06/27/ruby-spec-compatibility-report</id><content type="html" xml:base="http://eregon.me/blog/2020/06/27/ruby-spec-compatibility-report.html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;For a long time I wanted to show visually the compatibility of Ruby implementations with &lt;a href=&quot;https://github.com/ruby/spec&quot;&gt;ruby/spec&lt;/a&gt;.
This is not as easy as it sounds.
First, we would like the same version of ruby/spec for all tested Ruby implementations, but in general each Ruby implementation uses a different version (except when synchronized once a month).
We would like the same Ruby compatibility version (e.g., 2.6), but some Ruby implementations do not target 2.6 currently.
And finally the number of specs (that is, of &lt;code class=&quot;highlighter-rouge&quot;&gt;it&lt;/code&gt; examples) on a given platform should be fairly constant, which required a few fixes in ruby/spec.&lt;/p&gt;

&lt;p&gt;As a quick recap, &lt;a href=&quot;https://github.com/ruby/spec&quot;&gt;ruby/spec&lt;/a&gt; and &lt;a href=&quot;https://github.com/ruby/ruby/tree/master/test/ruby&quot;&gt;CRuby tests&lt;/a&gt; are the two major test suites for Ruby compatibility.
ruby/spec has the advantage that each spec example has a description of a specific behavior it tests.
CRuby tests on the other hand often require to reverse-engineer a test to understand what behavior(s) it intends to test, and they are more coarse-grained.
In this post I focus on ruby/spec.&lt;/p&gt;

&lt;h2 id=&quot;approach&quot;&gt;Approach&lt;/h2&gt;

&lt;p&gt;In this first report I ran the specs on CRuby 2.6.6, &lt;a href=&quot;https://github.com/oracle/truffleruby&quot;&gt;TruffleRuby&lt;/a&gt;, &lt;a href=&quot;https://www.jruby.org/&quot;&gt;JRuby&lt;/a&gt;, &lt;a href=&quot;https://opalrb.com/&quot;&gt;Opal&lt;/a&gt; and &lt;a href=&quot;https://www.artichokeruby.org/&quot;&gt;Artichoke&lt;/a&gt; on Linux.
I used development versions because I want to use the same specs for all implementations when possible,
along with the corresponding tags – that is specs marked as failing –
which are only available from the corresponding repository’s development branch.&lt;/p&gt;

&lt;p&gt;The specific development versions and command lines used are shown in &lt;a href=&quot;https://gist.github.com/eregon/fc24f74752322d88a9de78c7b0e76284&quot;&gt;this gist&lt;/a&gt;.
We use the number of examples that CRuby runs, which is always equal or slightly higher than the number of examples when running on other implementations.&lt;/p&gt;

&lt;p&gt;The setup for running specs on Opal and on Artichoke is more complex – due to typically not having access to the real filesystem – so I used the version of ruby/spec that they import, which is older and therefore has less specs.
Opal currently targets Ruby 2.5 and Artichoke is still an early Ruby implementation.
They both use an &lt;a href=&quot;https://github.com/opal/opal/blob/master/spec/ruby_specs&quot;&gt;include list&lt;/a&gt; of &lt;a href=&quot;https://github.com/artichoke/artichoke/blob/master/spec-runner/enforced-specs.yaml&quot;&gt;specs&lt;/a&gt; to run, and so might pass more than tested in CI.
So please consider numbers for those Ruby implementations with a grain of salt.&lt;/p&gt;

&lt;p&gt;Below you can see two totals, because some implementations do not support the Ruby C-API:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;All specs except C-API specs.&lt;/li&gt;
  &lt;li&gt;All specs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Without further ado, here is the data.&lt;/p&gt;

&lt;h2 id=&quot;results&quot;&gt;Results&lt;/h2&gt;

&lt;table style=&quot;width: 100%&quot;&gt;
&lt;colgroup&gt;
&lt;col span=&quot;1&quot; style=&quot;width: 16%;&quot; /&gt;
&lt;col span=&quot;1&quot; style=&quot;width: 16%&quot; /&gt;
&lt;col span=&quot;1&quot; style=&quot;width: 16%&quot; /&gt;
&lt;col span=&quot;1&quot; style=&quot;width: 16%&quot; /&gt;
&lt;col span=&quot;1&quot; style=&quot;width: 16%&quot; /&gt;
&lt;col span=&quot;1&quot; style=&quot;width: 16%&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;th&gt;Group&lt;/th&gt;
&lt;th style=&quot;text-align: center&quot;&gt;CRuby&lt;/th&gt;
&lt;th style=&quot;text-align: center&quot;&gt;TruffleRuby&lt;/th&gt;
&lt;th style=&quot;text-align: center&quot;&gt;JRuby&lt;/th&gt;
&lt;th style=&quot;text-align: center&quot;&gt;Opal&lt;/th&gt;
&lt;th style=&quot;text-align: center&quot;&gt;Artichoke&lt;/th&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/ruby/spec/tree/master/command_line&quot;&gt;Command-line&lt;/a&gt;&lt;br /&gt;

          141 specs&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;
    &lt;svg viewBox=&quot;0 0 36 36&quot; class=&quot;circular-chart&quot;&gt;
      &lt;path class=&quot;circle-bg&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;path class=&quot;circle&quot; stroke-dasharray=&quot;100.0, 100&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;text x=&quot;18&quot; y=&quot;20.35&quot; class=&quot;percentage&quot;&gt;100%&lt;/text&gt;
    &lt;/svg&gt;
&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;
    &lt;svg viewBox=&quot;0 0 36 36&quot; class=&quot;circular-chart&quot;&gt;
      &lt;path class=&quot;circle-bg&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;path class=&quot;circle&quot; stroke-dasharray=&quot;87.94326241134752, 100&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;text x=&quot;18&quot; y=&quot;20.35&quot; class=&quot;percentage&quot;&gt;87.94%&lt;/text&gt;
    &lt;/svg&gt;
&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;
    &lt;svg viewBox=&quot;0 0 36 36&quot; class=&quot;circular-chart&quot;&gt;
      &lt;path class=&quot;circle-bg&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;path class=&quot;circle&quot; stroke-dasharray=&quot;73.75886524822694, 100&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;text x=&quot;18&quot; y=&quot;20.35&quot; class=&quot;percentage&quot;&gt;73.76%&lt;/text&gt;
    &lt;/svg&gt;
&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;
    &lt;svg viewBox=&quot;0 0 36 36&quot; class=&quot;circular-chart&quot;&gt;
      &lt;path class=&quot;circle-bg&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;path class=&quot;circle&quot; stroke-dasharray=&quot;0.0, 100&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;text x=&quot;18&quot; y=&quot;20.35&quot; class=&quot;percentage&quot;&gt;0.00%&lt;/text&gt;
    &lt;/svg&gt;
&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;
    &lt;svg viewBox=&quot;0 0 36 36&quot; class=&quot;circular-chart&quot;&gt;
      &lt;path class=&quot;circle-bg&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;path class=&quot;circle&quot; stroke-dasharray=&quot;0.0, 100&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;text x=&quot;18&quot; y=&quot;20.35&quot; class=&quot;percentage&quot;&gt;0.00%&lt;/text&gt;
    &lt;/svg&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/ruby/spec/tree/master/language&quot;&gt;Language&lt;/a&gt;&lt;br /&gt;

          2367 specs&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;
    &lt;svg viewBox=&quot;0 0 36 36&quot; class=&quot;circular-chart&quot;&gt;
      &lt;path class=&quot;circle-bg&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;path class=&quot;circle&quot; stroke-dasharray=&quot;100.0, 100&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;text x=&quot;18&quot; y=&quot;20.35&quot; class=&quot;percentage&quot;&gt;100%&lt;/text&gt;
    &lt;/svg&gt;
&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;
    &lt;svg viewBox=&quot;0 0 36 36&quot; class=&quot;circular-chart&quot;&gt;
      &lt;path class=&quot;circle-bg&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;path class=&quot;circle&quot; stroke-dasharray=&quot;97.84537389100126, 100&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;text x=&quot;18&quot; y=&quot;20.35&quot; class=&quot;percentage&quot;&gt;97.85%&lt;/text&gt;
    &lt;/svg&gt;
&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;
    &lt;svg viewBox=&quot;0 0 36 36&quot; class=&quot;circular-chart&quot;&gt;
      &lt;path class=&quot;circle-bg&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;path class=&quot;circle&quot; stroke-dasharray=&quot;97.16941275876637, 100&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;text x=&quot;18&quot; y=&quot;20.35&quot; class=&quot;percentage&quot;&gt;97.17%&lt;/text&gt;
    &lt;/svg&gt;
&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;
    &lt;svg viewBox=&quot;0 0 36 36&quot; class=&quot;circular-chart&quot;&gt;
      &lt;path class=&quot;circle-bg&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;path class=&quot;circle&quot; stroke-dasharray=&quot;69.83523447401775, 100&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;text x=&quot;18&quot; y=&quot;20.35&quot; class=&quot;percentage&quot;&gt;69.84%&lt;/text&gt;
    &lt;/svg&gt;
&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;
    &lt;svg viewBox=&quot;0 0 36 36&quot; class=&quot;circular-chart&quot;&gt;
      &lt;path class=&quot;circle-bg&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;path class=&quot;circle&quot; stroke-dasharray=&quot;0.0, 100&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;text x=&quot;18&quot; y=&quot;20.35&quot; class=&quot;percentage&quot;&gt;0.00%&lt;/text&gt;
    &lt;/svg&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/ruby/spec/tree/master/core&quot;&gt;Core Library&lt;/a&gt;&lt;br /&gt;

          20841 specs&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;
    &lt;svg viewBox=&quot;0 0 36 36&quot; class=&quot;circular-chart&quot;&gt;
      &lt;path class=&quot;circle-bg&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;path class=&quot;circle&quot; stroke-dasharray=&quot;100.0, 100&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;text x=&quot;18&quot; y=&quot;20.35&quot; class=&quot;percentage&quot;&gt;100%&lt;/text&gt;
    &lt;/svg&gt;
&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;
    &lt;svg viewBox=&quot;0 0 36 36&quot; class=&quot;circular-chart&quot;&gt;
      &lt;path class=&quot;circle-bg&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;path class=&quot;circle&quot; stroke-dasharray=&quot;96.80437598963582, 100&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;text x=&quot;18&quot; y=&quot;20.35&quot; class=&quot;percentage&quot;&gt;96.80%&lt;/text&gt;
    &lt;/svg&gt;
&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;
    &lt;svg viewBox=&quot;0 0 36 36&quot; class=&quot;circular-chart&quot;&gt;
      &lt;path class=&quot;circle-bg&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;path class=&quot;circle&quot; stroke-dasharray=&quot;93.61355021352142, 100&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;text x=&quot;18&quot; y=&quot;20.35&quot; class=&quot;percentage&quot;&gt;93.61%&lt;/text&gt;
    &lt;/svg&gt;
&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;
    &lt;svg viewBox=&quot;0 0 36 36&quot; class=&quot;circular-chart&quot;&gt;
      &lt;path class=&quot;circle-bg&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;path class=&quot;circle&quot; stroke-dasharray=&quot;42.934600067175275, 100&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;text x=&quot;18&quot; y=&quot;20.35&quot; class=&quot;percentage&quot;&gt;42.93%&lt;/text&gt;
    &lt;/svg&gt;
&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;
    &lt;svg viewBox=&quot;0 0 36 36&quot; class=&quot;circular-chart&quot;&gt;
      &lt;path class=&quot;circle-bg&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;path class=&quot;circle&quot; stroke-dasharray=&quot;6.5591862194712345, 100&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;text x=&quot;18&quot; y=&quot;20.35&quot; class=&quot;percentage&quot;&gt;6.56%&lt;/text&gt;
    &lt;/svg&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/ruby/spec/tree/master/library&quot;&gt;Standard Library&lt;/a&gt;&lt;br /&gt;

          6891 specs&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;
    &lt;svg viewBox=&quot;0 0 36 36&quot; class=&quot;circular-chart&quot;&gt;
      &lt;path class=&quot;circle-bg&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;path class=&quot;circle&quot; stroke-dasharray=&quot;100.0, 100&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;text x=&quot;18&quot; y=&quot;20.35&quot; class=&quot;percentage&quot;&gt;100%&lt;/text&gt;
    &lt;/svg&gt;
&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;
    &lt;svg viewBox=&quot;0 0 36 36&quot; class=&quot;circular-chart&quot;&gt;
      &lt;path class=&quot;circle-bg&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;path class=&quot;circle&quot; stroke-dasharray=&quot;97.62008416775504, 100&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;text x=&quot;18&quot; y=&quot;20.35&quot; class=&quot;percentage&quot;&gt;97.62%&lt;/text&gt;
    &lt;/svg&gt;
&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;
    &lt;svg viewBox=&quot;0 0 36 36&quot; class=&quot;circular-chart&quot;&gt;
      &lt;path class=&quot;circle-bg&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;path class=&quot;circle&quot; stroke-dasharray=&quot;85.96720359889711, 100&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;text x=&quot;18&quot; y=&quot;20.35&quot; class=&quot;percentage&quot;&gt;85.97%&lt;/text&gt;
    &lt;/svg&gt;
&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;
    &lt;svg viewBox=&quot;0 0 36 36&quot; class=&quot;circular-chart&quot;&gt;
      &lt;path class=&quot;circle-bg&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;path class=&quot;circle&quot; stroke-dasharray=&quot;7.255840951966333, 100&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;text x=&quot;18&quot; y=&quot;20.35&quot; class=&quot;percentage&quot;&gt;7.26%&lt;/text&gt;
    &lt;/svg&gt;
&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;
    &lt;svg viewBox=&quot;0 0 36 36&quot; class=&quot;circular-chart&quot;&gt;
      &lt;path class=&quot;circle-bg&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;path class=&quot;circle&quot; stroke-dasharray=&quot;4.745319982585982, 100&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;text x=&quot;18&quot; y=&quot;20.35&quot; class=&quot;percentage&quot;&gt;4.75%&lt;/text&gt;
    &lt;/svg&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/ruby/spec/tree/master/security&quot;&gt;Security&lt;/a&gt;&lt;br /&gt;

          40 specs&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;
    &lt;svg viewBox=&quot;0 0 36 36&quot; class=&quot;circular-chart&quot;&gt;
      &lt;path class=&quot;circle-bg&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;path class=&quot;circle&quot; stroke-dasharray=&quot;100.0, 100&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;text x=&quot;18&quot; y=&quot;20.35&quot; class=&quot;percentage&quot;&gt;100%&lt;/text&gt;
    &lt;/svg&gt;
&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;
    &lt;svg viewBox=&quot;0 0 36 36&quot; class=&quot;circular-chart&quot;&gt;
      &lt;path class=&quot;circle-bg&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;path class=&quot;circle&quot; stroke-dasharray=&quot;100.0, 100&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;text x=&quot;18&quot; y=&quot;20.35&quot; class=&quot;percentage&quot;&gt;100%&lt;/text&gt;
    &lt;/svg&gt;
&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;
    &lt;svg viewBox=&quot;0 0 36 36&quot; class=&quot;circular-chart&quot;&gt;
      &lt;path class=&quot;circle-bg&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;path class=&quot;circle&quot; stroke-dasharray=&quot;92.5, 100&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;text x=&quot;18&quot; y=&quot;20.35&quot; class=&quot;percentage&quot;&gt;92.50%&lt;/text&gt;
    &lt;/svg&gt;
&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;
    &lt;svg viewBox=&quot;0 0 36 36&quot; class=&quot;circular-chart&quot;&gt;
      &lt;path class=&quot;circle-bg&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;path class=&quot;circle&quot; stroke-dasharray=&quot;0.0, 100&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;text x=&quot;18&quot; y=&quot;20.35&quot; class=&quot;percentage&quot;&gt;0.00%&lt;/text&gt;
    &lt;/svg&gt;
&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;
    &lt;svg viewBox=&quot;0 0 36 36&quot; class=&quot;circular-chart&quot;&gt;
      &lt;path class=&quot;circle-bg&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;path class=&quot;circle&quot; stroke-dasharray=&quot;0.0, 100&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;text x=&quot;18&quot; y=&quot;20.35&quot; class=&quot;percentage&quot;&gt;0.00%&lt;/text&gt;
    &lt;/svg&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&quot;border-top: 2px solid black&quot;&gt;
&lt;td&gt;&lt;b&gt;TOTAL without C-API specs&lt;/b&gt;&lt;br /&gt;

          30280 specs&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;
    &lt;svg viewBox=&quot;0 0 36 36&quot; class=&quot;circular-chart&quot;&gt;
      &lt;path class=&quot;circle-bg&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;path class=&quot;circle&quot; stroke-dasharray=&quot;100.0, 100&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;text x=&quot;18&quot; y=&quot;20.35&quot; class=&quot;percentage&quot;&gt;100%&lt;/text&gt;
    &lt;/svg&gt;
&lt;span style=&quot;font-size: 95%&quot;&gt;30280 passing&lt;/span&gt;
&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;
    &lt;svg viewBox=&quot;0 0 36 36&quot; class=&quot;circular-chart&quot;&gt;
      &lt;path class=&quot;circle-bg&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;path class=&quot;circle&quot; stroke-dasharray=&quot;97.0343461030383, 100&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;text x=&quot;18&quot; y=&quot;20.35&quot; class=&quot;percentage&quot;&gt;97.03%&lt;/text&gt;
    &lt;/svg&gt;
&lt;span style=&quot;font-size: 95%&quot;&gt;29382 passing&lt;/span&gt;
&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;
    &lt;svg viewBox=&quot;0 0 36 36&quot; class=&quot;circular-chart&quot;&gt;
      &lt;path class=&quot;circle-bg&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;path class=&quot;circle&quot; stroke-dasharray=&quot;92.05746367239101, 100&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;text x=&quot;18&quot; y=&quot;20.35&quot; class=&quot;percentage&quot;&gt;92.06%&lt;/text&gt;
    &lt;/svg&gt;
&lt;span style=&quot;font-size: 95%&quot;&gt;27875 passing&lt;/span&gt;
&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;
    &lt;svg viewBox=&quot;0 0 36 36&quot; class=&quot;circular-chart&quot;&gt;
      &lt;path class=&quot;circle-bg&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;path class=&quot;circle&quot; stroke-dasharray=&quot;36.66116248348745, 100&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;text x=&quot;18&quot; y=&quot;20.35&quot; class=&quot;percentage&quot;&gt;36.66%&lt;/text&gt;
    &lt;/svg&gt;
&lt;span style=&quot;font-size: 95%&quot;&gt;11101 passing&lt;/span&gt;
&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;
    &lt;svg viewBox=&quot;0 0 36 36&quot; class=&quot;circular-chart&quot;&gt;
      &lt;path class=&quot;circle-bg&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;path class=&quot;circle&quot; stroke-dasharray=&quot;5.594451783355351, 100&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;text x=&quot;18&quot; y=&quot;20.35&quot; class=&quot;percentage&quot;&gt;5.59%&lt;/text&gt;
    &lt;/svg&gt;
&lt;span style=&quot;font-size: 95%&quot;&gt;1694 passing&lt;/span&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/ruby/spec/tree/master/optional/capi&quot;&gt;C-API&lt;/a&gt;&lt;br /&gt;

          1325 specs&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;
    &lt;svg viewBox=&quot;0 0 36 36&quot; class=&quot;circular-chart&quot;&gt;
      &lt;path class=&quot;circle-bg&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;path class=&quot;circle&quot; stroke-dasharray=&quot;100.0, 100&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;text x=&quot;18&quot; y=&quot;20.35&quot; class=&quot;percentage&quot;&gt;100%&lt;/text&gt;
    &lt;/svg&gt;
&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;
    &lt;svg viewBox=&quot;0 0 36 36&quot; class=&quot;circular-chart&quot;&gt;
      &lt;path class=&quot;circle-bg&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;path class=&quot;circle&quot; stroke-dasharray=&quot;97.35849056603773, 100&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;text x=&quot;18&quot; y=&quot;20.35&quot; class=&quot;percentage&quot;&gt;97.36%&lt;/text&gt;
    &lt;/svg&gt;
&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;
    &lt;svg viewBox=&quot;0 0 36 36&quot; class=&quot;circular-chart&quot;&gt;
      &lt;path class=&quot;circle-bg&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;path class=&quot;circle&quot; stroke-dasharray=&quot;0.0, 100&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;text x=&quot;18&quot; y=&quot;20.35&quot; class=&quot;percentage&quot;&gt;0.00%&lt;/text&gt;
    &lt;/svg&gt;
&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;
    &lt;svg viewBox=&quot;0 0 36 36&quot; class=&quot;circular-chart&quot;&gt;
      &lt;path class=&quot;circle-bg&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;path class=&quot;circle&quot; stroke-dasharray=&quot;0.0, 100&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;text x=&quot;18&quot; y=&quot;20.35&quot; class=&quot;percentage&quot;&gt;0.00%&lt;/text&gt;
    &lt;/svg&gt;
&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;
    &lt;svg viewBox=&quot;0 0 36 36&quot; class=&quot;circular-chart&quot;&gt;
      &lt;path class=&quot;circle-bg&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;path class=&quot;circle&quot; stroke-dasharray=&quot;0.0, 100&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;text x=&quot;18&quot; y=&quot;20.35&quot; class=&quot;percentage&quot;&gt;0.00%&lt;/text&gt;
    &lt;/svg&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&quot;border-top: 2px solid black&quot;&gt;
&lt;td&gt;&lt;b&gt;TOTAL&lt;/b&gt;&lt;br /&gt;

          31605 specs&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;
    &lt;svg viewBox=&quot;0 0 36 36&quot; class=&quot;circular-chart&quot;&gt;
      &lt;path class=&quot;circle-bg&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;path class=&quot;circle&quot; stroke-dasharray=&quot;100.0, 100&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;text x=&quot;18&quot; y=&quot;20.35&quot; class=&quot;percentage&quot;&gt;100%&lt;/text&gt;
    &lt;/svg&gt;
&lt;span style=&quot;font-size: 95%&quot;&gt;31605 passing&lt;/span&gt;
&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;
    &lt;svg viewBox=&quot;0 0 36 36&quot; class=&quot;circular-chart&quot;&gt;
      &lt;path class=&quot;circle-bg&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;path class=&quot;circle&quot; stroke-dasharray=&quot;97.04793545325107, 100&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;text x=&quot;18&quot; y=&quot;20.35&quot; class=&quot;percentage&quot;&gt;97.05%&lt;/text&gt;
    &lt;/svg&gt;
&lt;span style=&quot;font-size: 95%&quot;&gt;30672 passing&lt;/span&gt;
&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;
    &lt;svg viewBox=&quot;0 0 36 36&quot; class=&quot;circular-chart&quot;&gt;
      &lt;path class=&quot;circle-bg&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;path class=&quot;circle&quot; stroke-dasharray=&quot;88.19806992564467, 100&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;text x=&quot;18&quot; y=&quot;20.35&quot; class=&quot;percentage&quot;&gt;88.20%&lt;/text&gt;
    &lt;/svg&gt;
&lt;span style=&quot;font-size: 95%&quot;&gt;27875 passing&lt;/span&gt;
&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;
    &lt;svg viewBox=&quot;0 0 36 36&quot; class=&quot;circular-chart&quot;&gt;
      &lt;path class=&quot;circle-bg&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;path class=&quot;circle&quot; stroke-dasharray=&quot;35.12418921056795, 100&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;text x=&quot;18&quot; y=&quot;20.35&quot; class=&quot;percentage&quot;&gt;35.12%&lt;/text&gt;
    &lt;/svg&gt;
&lt;span style=&quot;font-size: 95%&quot;&gt;11101 passing&lt;/span&gt;
&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;
    &lt;svg viewBox=&quot;0 0 36 36&quot; class=&quot;circular-chart&quot;&gt;
      &lt;path class=&quot;circle-bg&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;path class=&quot;circle&quot; stroke-dasharray=&quot;5.359911406423034, 100&quot; d=&quot;M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831&quot; /&gt;
      &lt;text x=&quot;18&quot; y=&quot;20.35&quot; class=&quot;percentage&quot;&gt;5.36%&lt;/text&gt;
    &lt;/svg&gt;
&lt;span style=&quot;font-size: 95%&quot;&gt;1694 passing&lt;/span&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;interpretation&quot;&gt;Interpretation&lt;/h2&gt;

&lt;p&gt;The interpretation that follows is mine, and I tried to keep it as neutral and factual as possible.
I apologize if there is any inaccuracy or subjective opinion: let me know, I am happy to update the blog post based on justified comments.&lt;/p&gt;

&lt;p&gt;As expected, CRuby passes all specs.
This is by design, ruby/spec only includes specs that pass on CRuby since it is the standard implementation.
There is a rare exception for specs specifying the correct behavior for known bugs in CRuby (&lt;code class=&quot;highlighter-rouge&quot;&gt;ruby_bug&lt;/code&gt; in MSpec) which we can ignore here (there are only 3 &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby_bug&lt;/code&gt; specs currently in ruby/spec).&lt;/p&gt;

&lt;p&gt;We see that TruffleRuby passes 97% of all specs which is quite impressive.
To be fair, TruffleRuby focuses more on ruby/spec than on CRuby tests for the advantages mentioned above.&lt;/p&gt;

&lt;p&gt;Next, we have JRuby passing 88% or 92% of all specs, depending on whether you count C-API specs.
That’s impressive as well, notably with high scores on language and core specs.
It is worth noting JRuby is currently working on finishing Ruby 2.6 support.&lt;/p&gt;

&lt;p&gt;Then we have Opal, which passes a sizable number of language, core and library specs.
Opal is compiling to JavaScript, so unlike JRuby and TruffleRuby it does not aim to implement lower-level system functionality. Opal is also typically run in browsers and not on the command line, so Opal does not run command-line specs.&lt;/p&gt;

&lt;p&gt;Finally, Artichoke, a fairly new Ruby implementation, passes some core and library specs.
Based on MRuby, which implements a subset of Ruby, it still has a long way to achieve compatibility with CRuby.
Update (February 2021): Artichoke now passes an estimated 22% of core library specs when trying to run all core specs with &lt;a href=&quot;https://github.com/artichoke/artichoke/pull/1088&quot;&gt;this PR&lt;/a&gt;, however those are not run in CI and might regress.&lt;/p&gt;

&lt;p&gt;Note that specs from ruby/spec are not necessarily representative of general compatibility
with the entire Ruby ecosystem, even though they are obviously related.
For instance, there might be far more spec examples on a given method than usages in Ruby gems, or the opposite.
There are Ruby semantics that are not yet covered in ruby/spec: it is an ongoing effort to improve coverage by the way of contributions to ruby/spec from Ruby implementations and from external contributors.
In general, when an alternative implementation has a bug report,
they either ensure there is already a spec or add one so over time the ruby/spec coverage improves.&lt;/p&gt;

&lt;p&gt;I took a look at CRuby tests for more context and there are in total 20587 CRuby tests when run on CRuby 2.6.6 locally.
TruffleRuby &lt;a href=&quot;https://github.com/oracle/truffleruby/commit/63ac8611de88ba57befa9f8224b4c71980d0b6ce&quot;&gt;currently&lt;/a&gt; runs and passes 10467 CRuby tests in CI.
JRuby &lt;a href=&quot;https://travis-ci.org/github/jruby/jruby/builds/702890075&quot;&gt;currently&lt;/a&gt; runs and passes 8133 CRuby tests in CI.
Opal and Artichoke do not seem to run CRuby tests currently.
So it seems clear alternative Ruby implementations focus more on ruby/spec,
but also that there are still a lot more CRuby tests they could run.
Some CRuby tests are however CRuby-specific and not applicable for any other Ruby implementation.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I am looking forward to Ruby implementations improving their compatibility and
passing a higher percentage of ruby/spec. I plan to make such a report again when that happens.&lt;/p&gt;

&lt;h3 id=&quot;other-ruby-implementations&quot;&gt;Other Ruby Implementations&lt;/h3&gt;

&lt;p&gt;I would like to report on other Ruby implementations but currently it seems difficult.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rubinius 5.0 &lt;a href=&quot;https://github.com/rubinius/rubinius/issues/3832&quot;&gt;fails to compile&lt;/a&gt; on my machine.
I have noticed similar issues on various Ubuntu versions too.
I used &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby-build&lt;/code&gt; and installed the &lt;code class=&quot;highlighter-rouge&quot;&gt;clang llvm-devel&lt;/code&gt; packages.&lt;/li&gt;
  &lt;li&gt;MRuby 2.1.1 (as installed by &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby-install&lt;/code&gt;) does not support &lt;code class=&quot;highlighter-rouge&quot;&gt;$:&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt; and so cannot run the regular MSpec harness. Also, &lt;a href=&quot;https://github.com/mruby/mruby&quot;&gt;mruby/mruby&lt;/a&gt; does not seem to run ruby/spec as part of its CI.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Any help to run ruby/spec on these implementations with the &lt;code class=&quot;highlighter-rouge&quot;&gt;stats&lt;/code&gt; formatter or a compatible output is welcome.
The &lt;a href=&quot;https://github.com/ruby/mspec/blob/master/lib/mspec/runner/formatters/stats.rb&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;stats&lt;/code&gt; formatter&lt;/a&gt; has a very simple format, it’s a Hash of spec files to number of passing examples as a YAML file:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
language/some_spec.rb:
  :examples: 10
  :errors: 1
  :failures: 2
  :tagged: 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;acknowledgments&quot;&gt;Acknowledgments&lt;/h3&gt;

&lt;p&gt;I used the technique from this &lt;a href=&quot;https://medium.com/@pppped/how-to-code-a-responsive-circular-percentage-chart-with-svg-and-css-3632f8cd7705&quot;&gt;blog post&lt;/a&gt; to draw the percentage charts.&lt;/p&gt;</content><author><name>Benoit Daloze</name></author><summary type="html">Introduction</summary></entry><entry><title type="html">A Migration Path to Bundler 2+</title><link href="http://eregon.me/blog/2020/01/13/a-migration-path-to-bundler2.html" rel="alternate" type="text/html" title="A Migration Path to Bundler 2+"><published>2020-01-13T00:00:00+01:00</published><updated>2020-01-13T00:00:00+01:00</updated><id>http://eregon.me/blog/2020/01/13/a-migration-path-to-bundler2</id><content type="html" xml:base="http://eregon.me/blog/2020/01/13/a-migration-path-to-bundler2.html">&lt;p&gt;Bundler 2 did not arrive quietly.
It was noticed by almost every CI build failing when running &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt;.
As a result, it seems many still avoid Bundler 2 and just use Bundler 1.
In this post, I present some ideas on how to get more people to use Bundler 2,
and no longer need Bundler 1 which will not be maintained forever.&lt;/p&gt;

&lt;h2 id=&quot;the-rubygems-requirement-of-bundler-2&quot;&gt;The RubyGems Requirement of Bundler 2&lt;/h2&gt;

&lt;p&gt;The original release of Bundler 2, which is version 2.0.0, &lt;a href=&quot;https://bundler.io/blog/2019/01/03/announcing-bundler-2.html&quot;&gt;required such a
recent RubyGems version&lt;/a&gt;
that none of the released Ruby versions had a recent enough RubyGems version shipped with them.
Bundler 2 also requires Ruby 2.3+, and finally drops support for Ruby 1.8.&lt;/p&gt;

&lt;p&gt;This RubyGems version requirement was quickly found as problematic, and as a result Bundler 2.0.1 was released
to lower the RubyGems version requirement to RubyGems 2.5.
All versions of Ruby supported by Bundler 2 (that is, Ruby 2.3+) ship with RubyGems 2.5 or newer, but the &lt;a href=&quot;https://bundler.io/blog/2019/01/04/an-update-on-the-bundler-2-release.html&quot;&gt;blog post&lt;/a&gt; did not make this clear.&lt;/p&gt;

&lt;p&gt;This resulted in a lot of confusion. Most repositories ended up explicitly
updating RubyGems in CI to make Bundler 2.0.0 work, as mentioned in the original blog post.&lt;/p&gt;

&lt;p&gt;To summarize, &lt;strong&gt;it is not needed to update RubyGems to use Bundler 2.0.1+&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In fact, I would even argue against updating RubyGems in CI because:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It makes the CI slower.&lt;/li&gt;
  &lt;li&gt;It makes the CI less reliable by frequently changing the RubyGems version used.&lt;/li&gt;
  &lt;li&gt;It uses the latest RubyGems instead of the well known version bundled with that Ruby version.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;bundler-version-autoswitching&quot;&gt;Bundler Version Autoswitching&lt;/h2&gt;

&lt;p&gt;Bundler 2 came with another feature, which to say the least is very confusing.
This feature is actually implemented directly in RubyGems and it unfortunately included a bug,
which led to even &lt;a href=&quot;https://bundler.io/blog/2019/05/14/solutions-for-cant-find-gem-bundler-with-executable-bundle.html&quot;&gt;more confusion&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Supposing you have both Bundler 1.17.2 and Bundler 2.0.2 installed, what should this print?&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bundle --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For every other gem, the answer would be the latest version of the gem installed, so in this case 2.0.2.&lt;/p&gt;

&lt;p&gt;The actual answer though, due to Bundler version autoswitching is “it depends on many things”.
Specifically, if the current directory or any parent directory has a &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile.lock&lt;/code&gt; file with a &lt;code class=&quot;highlighter-rouge&quot;&gt;BUNDLED WITH&lt;/code&gt; section,
then that exact version, or the closest version with the same major version (depending on the RubyGems version), will be used. If such a version is not available, it fails with &lt;code class=&quot;highlighter-rouge&quot;&gt;Could not find 'bundler' (&amp;lt;VERSION&amp;gt;)&lt;/code&gt; (e.g., when only Bundler 2 is installed with a &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile.lock&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;BUNDLED WITH 1.17.2&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Otherwise, if there is no &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile.lock&lt;/code&gt; in the current directory or any parent directory, &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle&lt;/code&gt; behaves like a normal gem and uses the latest version.&lt;/p&gt;

&lt;p&gt;As an example, this feature means that as long as there is a &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile.lock&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;BUNDLED WITH 1.x&lt;/code&gt;,
even if Bundler 2 is installed, Bundler 1 would be used, or the error above would be shown.&lt;/p&gt;

&lt;p&gt;I think this “feature” is so confusing that it should be considered a bug.
It’s counter-intuitive and prevents using Bundler 2 on &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile.lock&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;BUNDLED WITH 1.x&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-migration-problem&quot;&gt;The Migration Problem&lt;/h2&gt;

&lt;p&gt;The problem I see with all this is I think very few people use Bundler 2, and rather they just keep using Bundler 1.
I tried to estimate how often Bundler 2 is used by various means:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;I made a &lt;a href=&quot;https://twitter.com/eregontp/status/1188046284919332864&quot;&gt;poll&lt;/a&gt; on Twitter but that got rather few responses, with rather surprising results.&lt;/li&gt;
  &lt;li&gt;Some usage statistics from RubyGems.org show that Bundler 2 is only used in about 2% of requests to RubyGems.org.&lt;/li&gt;
  &lt;li&gt;TravisCI seems to currently use Bundler 1 &lt;a href=&quot;https://travis-ci.org/eregon/mspec/builds/600094360&quot;&gt;for every Ruby version&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Most Ruby projects I have seen with a &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile.lock&lt;/code&gt; are &lt;code class=&quot;highlighter-rouge&quot;&gt;BUNDLED WITH 1.x&lt;/code&gt;, showing Bundler 1 is used.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, Bundler 1 seems no longer maintained (which is fair enough, who would want to maintain Ruby 1.8 compatibility?) and likely will no longer receive bug fixes and security patches.&lt;/p&gt;

&lt;p&gt;So it is important that Rubyists migrate to Bundler 2,
but I think the current situation made it so inconvenient that very few did.
To address those concerns, I propose some ideas below to make migration to Bundler 2 easier.&lt;/p&gt;

&lt;h2 id=&quot;a-better-migration-path-for-bundler-2&quot;&gt;A Better Migration Path for Bundler 2+&lt;/h2&gt;

&lt;p&gt;Here are my suggestions to make migration to Bundler 2 easier.
I think it would be good to integrate them in future Bundler releases, including 2.x releases.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Do not require a RubyGems version newer than what Ruby versions supported by Bundler ship.
  Requiring to update RubyGems causes many troubles as seen wth Bundler 2.0.0.&lt;/li&gt;
  &lt;li&gt;Drop the version autoswitching mechanism in RubyGems for Bundler entirely. For older RubyGems versions with autoswitching, do whatever is necessary in Bundler to avoid that behavior, or at least warn.&lt;/li&gt;
  &lt;li&gt;Every future version of Bundler should support previous versions of &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile.lock&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Do not modify the &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile.lock&lt;/code&gt; if there would be no other change than the &lt;code class=&quot;highlighter-rouge&quot;&gt;BUNDLED WITH&lt;/code&gt; version (e.g., for &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt; with an existing up-to-date &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile.lock&lt;/code&gt;).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This third point about backward compatibility might require extra maintenance work in Bundler.
However, I think almost every software of the scale of Bundler needs to do this kind of things,
and I would expect keeping a few extra parsers for older formats of &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile.lock&lt;/code&gt; is not so much work.
For instance, even in Bundler 10, I expect installing gems from an already-resolved &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile.lock&lt;/code&gt; is basically just installing every listed gem with the listed version.
Why &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; and not just &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile.lock&lt;/code&gt;? Because Bundler evaluates the &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; in all cases in its current design.&lt;/p&gt;

&lt;p&gt;I think supporting older &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile.lock&lt;/code&gt; is the key for more people to adopt newer versions of Bundler.
And importantly, this is the only way people can use newer versions of Bundler and stop using unmaintained and old Bundler versions for existing &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile.lock&lt;/code&gt; files with &lt;code class=&quot;highlighter-rouge&quot;&gt;BUNDLED WITH 1.x&lt;/code&gt; (not all &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile.lock&lt;/code&gt; will be migrated immediately to Bundler 2).&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I shared these suggestions with the Bundler team in October 2019 and they generally agreed and already discussed these subjects at RubyKaigi 2019.&lt;/p&gt;

&lt;p&gt;Some of the suggestions listed above have already been addressed.
For instance, the RubyGems version requirement (#1) was fixed in 2.0.1, one day after the 2.0.0 release.&lt;/p&gt;

&lt;p&gt;The latest RubyGems and Bundler 2 can actually already install a &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile.lock&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;BUNDLED WITH 1.x&lt;/code&gt; (#3), but it unfortunately changes the &lt;code class=&quot;highlighter-rouge&quot;&gt;BUNDLED WITH&lt;/code&gt; section for seemingly no reason (#4 not yet). This can be seen on 2.7.0-preview2:&lt;/p&gt;

&lt;pre&gt;
$ chruby 2.7.0-preview2
$ bundle _2.1.0.pre.2_ install
...
&lt;span style=&quot;color: GoldenRod&quot;&gt;Warning: the lockfile is being updated to Bundler 2,
after which you will be unable to return to Bundler 1.&lt;/span&gt;
&lt;span style=&quot;color: green&quot;&gt;Bundle complete! 2 Gemfile dependencies, 7 gems now installed.
Use `bundle info [gemname]` to see where a bundled gem is installed.&lt;/span&gt;
$ git diff
&lt;span style=&quot;color: red&quot;&gt;---&lt;/span&gt; Gemfile.lock
&lt;span style=&quot;color: green&quot;&gt;+++&lt;/span&gt; Gemfile.lock
 BUNDLED WITH
&lt;span style=&quot;color: red&quot;&gt;-   1.17.2&lt;/span&gt;
&lt;span style=&quot;color: green&quot;&gt;+   2.1.0.pre.2&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;That changes is annoying.
Suppose I’m contributing to Rails and I’m just doing &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt; (without modifying any &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;).
If this changes the &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile.lock&lt;/code&gt; I will have to constantly undo that change, or be careful to not commit it and keep a dirty working tree.
If it is committed and merged, it would force every single contributor of Rails (and the CI) to use Bundler 2 once they pull that change.
And every such contributor, when doing &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt; on their own projects would also see the &lt;code class=&quot;highlighter-rouge&quot;&gt;BUNDLED WITH&lt;/code&gt; version updated, making this a cascading effect.
That sounds to me like a recipe for a really not smooth migration forcing everyone to update in a really short time, so that’s why I think Bundler should not touch the &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile.lock&lt;/code&gt; if there would be no other change than the &lt;code class=&quot;highlighter-rouge&quot;&gt;BUNDLED WITH&lt;/code&gt; version (#4).&lt;/p&gt;

&lt;p&gt;On the other hand, it seems fine to use &lt;code class=&quot;highlighter-rouge&quot;&gt;BUNDLED WITH 2.x&lt;/code&gt; if there is no &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile.lock&lt;/code&gt; or the dependencies need to be re-resolved due to, e.g., adding a gem, since Bundler 2 might resolve gems differently than Bundler 1.&lt;/p&gt;

&lt;p&gt;So #1 and #3 seem mostly done for the latest 2.x release, but #2 and #4 are not yet addressed.&lt;/p&gt;

&lt;p&gt;Does that sound like a good migration plan to you?&lt;/p&gt;

&lt;p&gt;Would you be willing to help making these changes in Bundler and RubyGems?&lt;/p&gt;</content><author><name>Benoit Daloze</name></author><summary type="html">Bundler 2 did not arrive quietly. It was noticed by almost every CI build failing when running bundle install. As a result, it seems many still avoid Bundler 2 and just use Bundler 1. In this post, I present some ideas on how to get more people to use Bundler 2, and no longer need Bundler 1 which will not be maintained forever.</summary></entry><entry><title type="html">The Delegation Challenge of Ruby 2.7</title><link href="http://eregon.me/blog/2019/11/10/the-delegation-challenge-of-ruby27.html" rel="alternate" type="text/html" title="The Delegation Challenge of Ruby 2.7"><published>2019-11-10T00:00:00+01:00</published><updated>2019-11-10T00:00:00+01:00</updated><id>http://eregon.me/blog/2019/11/10/the-delegation-challenge-of-ruby27</id><content type="html" xml:base="http://eregon.me/blog/2019/11/10/the-delegation-challenge-of-ruby27.html">&lt;p&gt;Ruby 3.0 will introduce the separation between positional and keyword arguments.
The upcoming Ruby 2.7 release &lt;a href=&quot;https://bugs.ruby-lang.org/issues/14183&quot;&gt;aims to introduce warnings&lt;/a&gt; for every argument
behavior that will change in Ruby 3.0 to ease migration.
However, delegation that works for Ruby 2.6, 2.7 and 3 seems a hard problem to solve.&lt;/p&gt;

&lt;p&gt;See the &lt;a href=&quot;https://www.ruby-lang.org/en/news/2019/12/12/separation-of-positional-and-keyword-arguments-in-ruby-3-0/&quot;&gt;migration guide on ruby-lang.org&lt;/a&gt;
if you want to migrate your code to work on 2.7+,
and see &lt;a href=&quot;https://eregon.me/blog/2021/02/13/correct-delegation-in-ruby-2-27-3.html&quot;&gt;Correct Delegation with Ruby 2.6, 2.7 and 3.0&lt;/a&gt; regarding delegation compatible with Ruby 2.6, 2.7 and 3.0.&lt;/p&gt;

&lt;p&gt;This blog post is mostly discussing various possibilities to fix delegation in Ruby 2.7.
By now it is mostly history, only &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby2_keywords&lt;/code&gt; is available in Ruby 2.7.&lt;/p&gt;

&lt;h2 id=&quot;what-will-change-for-arguments-in-ruby-3&quot;&gt;What will change for arguments in Ruby 3?&lt;/h2&gt;

&lt;p&gt;From Ruby 2.0 until Ruby 2.6, keyword arguments in method definitions such as
&lt;code class=&quot;highlighter-rouge&quot;&gt;def m(kwreq:, kwopt: 42, **kwrest)&lt;/code&gt; are basically just syntactic sugar
for extracting values from a &lt;code class=&quot;highlighter-rouge&quot;&gt;Hash&lt;/code&gt; passed in last position.&lt;/p&gt;

&lt;p&gt;This however leads to some issues when keyword arguments are mixed with
&lt;code class=&quot;highlighter-rouge&quot;&gt;optional = default&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;*rest&lt;/code&gt; arguments.
For instance, should &lt;code class=&quot;highlighter-rouge&quot;&gt;def m(opt = 42, **kwargs); end; m({ kw: 1 })&lt;/code&gt; pass the Hash
as keyword arguments (&lt;code class=&quot;highlighter-rouge&quot;&gt;**kwargs&lt;/code&gt;) or as the value for the optional argument (&lt;code class=&quot;highlighter-rouge&quot;&gt;opt&lt;/code&gt;)?
In Ruby 2, the answer is it passes the Hash as keyword arguments.
In Ruby 3 however, such a call would pass a Hash as positional, i.e., assign it to &lt;code class=&quot;highlighter-rouge&quot;&gt;opt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There is no clear answer as to which is better, without a general rule, and the
separation between positional and keyword arguments is that rule.&lt;/p&gt;

&lt;p&gt;Actually, there already is a similar separation in Ruby for the block argument.
A block argument is always passed with &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;block&lt;/code&gt; or as a literal block (&lt;code class=&quot;highlighter-rouge&quot;&gt;meth(*args) { ... }&lt;/code&gt;)
and is never mixed with other kinds of arguments.&lt;/p&gt;

&lt;p&gt;Here are some basics on what passes keyword arguments and what passes positional arguments:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;a: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;a: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# passes kwargs in Ruby 2 and 3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# passes kwargs in Ruby 2 and 3&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;a: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# passes kwargs in Ruby 2 and positional in Ruby 3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;# passes kwargs in Ruby 2 and positional in Ruby 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Methods not taking keyword arguments can still be called with the keyword
arguments syntax. The reason here is to avoid breaking compatibility too much.
If that was not done, such a call would raise an &lt;code class=&quot;highlighter-rouge&quot;&gt;ArgumentError&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;nokwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;nokwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;a: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [{a: 1}] in both Ruby 2 and 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;One important change in Ruby 2.7, is that &lt;code class=&quot;highlighter-rouge&quot;&gt;**empty_hash&lt;/code&gt; actually passes nothing:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;empty_hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;nokwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [] in Ruby 2.7+, [{}] in Ruby 2.6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Confusingly enough, &lt;code class=&quot;highlighter-rouge&quot;&gt;**{}&lt;/code&gt; is treated specially by the parser and automatically
removed in Ruby 2.6, which means:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;nokwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [] in Ruby 2 and 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The rationale here is &lt;code class=&quot;highlighter-rouge&quot;&gt;m(**kwargs)&lt;/code&gt;, much like &lt;code class=&quot;highlighter-rouge&quot;&gt;m(*args)&lt;/code&gt; must pass nothing if it’s empty, that is if there are no arguments to pass.
It was essentially a mistake of Ruby 2.6 and before to pass an empty Hash in such a case, but that’s how it is and we cannot change the past. Maybe it was somehow more compatible for some cases.&lt;/p&gt;

&lt;p&gt;These changes have been the work of Jeremy Evans (of Sequel fame), Yusuke Endoh (@mame) and others.
I have been mostly watching and commenting on those changes.&lt;/p&gt;

&lt;p&gt;Now that we’ve got the basics we can look at the Delegation Challenge!&lt;/p&gt;

&lt;p&gt;I will not explain in this blog post how to make non-delegation code work on Ruby 3 and how to fix the warnings of Ruby 2.7, that’s the goal of the (upcoming at the time of writing) &lt;a href=&quot;https://www.ruby-lang.org/en/news/2019/12/12/separation-of-positional-and-keyword-arguments-in-ruby-3-0/&quot;&gt;migration guide on ruby-lang.org&lt;/a&gt;, which is mentioned in the &lt;a href=&quot;https://www.ruby-lang.org/en/news/2019/12/25/ruby-2-7-0-released/&quot;&gt;Ruby 2.7 release notes&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-delegation-challenge&quot;&gt;The Delegation Challenge&lt;/h2&gt;

&lt;p&gt;So now that we have a proper separation of keyword arguments, how should delegation look like?&lt;/p&gt;

&lt;h3 id=&quot;ruby-2-style-delegation&quot;&gt;Ruby 2-style Delegation&lt;/h3&gt;

&lt;p&gt;Up until Ruby 2.6, delegation had always been rather simple:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And this was enough for perfect forwarding, i.e., pass whatever arguments are passed to &lt;code class=&quot;highlighter-rouge&quot;&gt;delegate&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;target&lt;/code&gt;, as if &lt;code class=&quot;highlighter-rouge&quot;&gt;target&lt;/code&gt; had been called directly.&lt;/p&gt;

&lt;p&gt;However this doesn’t quite work in Ruby 3:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;b: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [[1], {b: 2}] in Ruby 2 &amp;amp; 3&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;b: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [[1], {b: 2}] in Ruby 2, [[1, {b: 2}], {}] in Ruby 3&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Ruby 2.7:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# warning: The last argument is used as the keyword parameter&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# warning: for `target' defined here&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [[1], {b: 2}]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Because &lt;code class=&quot;highlighter-rouge&quot;&gt;delegate&lt;/code&gt; does not take keyword arguments, &lt;code class=&quot;highlighter-rouge&quot;&gt;b: 2&lt;/code&gt; is passed as positional.
In Ruby 3, it remains as positional and therefore results in different behavior than calling the method directly.
In Ruby 2.7, it warns because the behavior changes in Ruby 3.&lt;/p&gt;

&lt;h3 id=&quot;ruby-3-style-delegation&quot;&gt;Ruby 3-style Delegation&lt;/h3&gt;

&lt;p&gt;So maybe we should use this to delegate instead?&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;b: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [[1], {b: 2}] in Ruby 2 &amp;amp; 3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [[1], {}]     in Ruby 2 &amp;amp; 3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;b: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [[], {b: 2}]  in Ruby 2 &amp;amp; 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Alright, this seems to work fine, but what if &lt;code class=&quot;highlighter-rouge&quot;&gt;target&lt;/code&gt; does not take keyword arguments?&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; []   in Ruby 2 &amp;amp; 3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [1]  in Ruby 2 &amp;amp; 3&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [{}]    in Ruby 2.6, []  in Ruby 2.7+&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [1, {}] in Ruby 2.6, [1] in Ruby 2.7+&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now Ruby 2.6 starts to pass an extra positional Hash to &lt;code class=&quot;highlighter-rouge&quot;&gt;target&lt;/code&gt; when there are no keyword arguments!
That’s because &lt;code class=&quot;highlighter-rouge&quot;&gt;**empty_hash&lt;/code&gt; passes &lt;code class=&quot;highlighter-rouge&quot;&gt;{}&lt;/code&gt; in Ruby 2.6, and nothing in Ruby 2.7+.&lt;/p&gt;

&lt;p&gt;So neither of those &lt;code class=&quot;highlighter-rouge&quot;&gt;delegate&lt;/code&gt; methods works on both Ruby 2 and 3, that is very unfortunate.&lt;/p&gt;

&lt;p&gt;And to make matters worse Ruby 2.7 has its own behavior different from Ruby 2.6 and Ruby 3:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;b: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; {b: 2} in Ruby 2 &amp;amp; 3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;b: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; {b: 2} in Ruby 2 &amp;amp; 3&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# However in 2.7 emits a warning (which is unjustified, passing a positional Hash to #target is fine):&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# warning: The last argument is used as the keyword parameter&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# warning: for `delegate' defined here&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({})&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [{}] in Ruby 2.6 &amp;amp; 3, but [] in Ruby 2.7! (with a warning)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;For compatibility with 2.6, Ruby 2.7 passes &lt;code class=&quot;highlighter-rouge&quot;&gt;{}&lt;/code&gt; as a keyword argument here, but
then &lt;code class=&quot;highlighter-rouge&quot;&gt;delegate&lt;/code&gt; receives &lt;code class=&quot;highlighter-rouge&quot;&gt;args=[]&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;kwargs={}&lt;/code&gt; and call &lt;code class=&quot;highlighter-rouge&quot;&gt;target&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;**kwargs&lt;/code&gt;,
which passes nothing in 2.7 and therefore drops the given Hash!&lt;/p&gt;

&lt;p&gt;We can actually convince Ruby 2.7 to pass a positional Hash with &lt;code class=&quot;highlighter-rouge&quot;&gt;, **{}&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({},&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [{}] in Ruby 2 and 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So for Ruby 2.7, neither of these approaches even works for all cases (without changing call sites to use &lt;code class=&quot;highlighter-rouge&quot;&gt;, **{}&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;So that is the Delegation Challenge:
How can we achieve perfect forwarding in Ruby 2.6, Ruby 2.7 and Ruby 3+ and avoid warnings from Ruby 2.7?&lt;/p&gt;

&lt;h2 id=&quot;possible-solutions&quot;&gt;Possible Solutions&lt;/h2&gt;

&lt;p&gt;There are multiple possibilities:&lt;/p&gt;

&lt;h3 id=&quot;version-check-with-ruby-2--ruby-3-style-delegation&quot;&gt;Version check with Ruby 2 + Ruby 3-style delegation&lt;/h3&gt;

&lt;p&gt;We could use a version check like:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RUBY_VERSION&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;3&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This would work fine in Ruby 2.0-2.6 and Ruby 3+.
Unfortunately it does not work in Ruby 2.7 which has behavior “in between” Ruby 2.6 and Ruby 3 (&lt;code class=&quot;highlighter-rouge&quot;&gt;**empty_hash&lt;/code&gt; passes nothing but positional Hash are still converted to keyword arguments like in 2.6).
We’d probably still want to be able to run the code on Ruby 2.7 to get the migration warnings to help migrating to Ruby 3. For that, we would need to address delegation on Ruby 2.7, otherwise there would be a lot of false-positive warnings.&lt;/p&gt;

&lt;p&gt;Maybe using Ruby 3-style delegation and adding &lt;code class=&quot;highlighter-rouge&quot;&gt;, **{}&lt;/code&gt; at call sites which need it for Ruby 2.7 would be acceptable, I’m not sure.&lt;/p&gt;

&lt;h3 id=&quot;the--operator&quot;&gt;The … operator&lt;/h3&gt;

&lt;p&gt;The new &lt;code class=&quot;highlighter-rouge&quot;&gt;...&lt;/code&gt; operator of Ruby 2.7 passes all arguments (positional, keywords, block):&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This works in Ruby 2.7 and 3+, but it’s a &lt;code class=&quot;highlighter-rouge&quot;&gt;SyntaxError&lt;/code&gt; in 2.6!
So we’d need something like this if we still want to run on 2.6:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;all_args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RUBY_VERSION&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;2.7&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;*args, &amp;amp;block&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;...&quot;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;class_eval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RUBY&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
def delegate(&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all_args&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;)
  target(&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all_args&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;)
end
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RUBY&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;...&lt;/code&gt; currently does not allow any sibling argument (e.g., &lt;code class=&quot;highlighter-rouge&quot;&gt;def method_missing(meth, ...)&lt;/code&gt;), which makes it unusable in those situations. Probably we should make it work in those situations too, otherwise it’s quite limited.
That is something that seems worth arguing for on &lt;a href=&quot;https://bugs.ruby-lang.org/issues/16253&quot;&gt;this ticket&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;pass_keywords&quot;&gt;pass_keywords&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pass_keywords&lt;/code&gt; is a simple mechanism that basically simulates &lt;code class=&quot;highlighter-rouge&quot;&gt;...&lt;/code&gt; in a syntax-compatible way:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pass_keywords&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;respond_to?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:pass_keywords&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RUBY_VERSION&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;3&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;pass_keywords&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It works by forwarding keyword arguments passed to &lt;code class=&quot;highlighter-rouge&quot;&gt;delegate&lt;/code&gt; as keyword arguments to &lt;code class=&quot;highlighter-rouge&quot;&gt;target&lt;/code&gt;.
That only applies for call sites using &lt;code class=&quot;highlighter-rouge&quot;&gt;*args&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;pass_keywords&lt;/code&gt; methods, so it’s simple to understand.&lt;/p&gt;

&lt;p&gt;We could also easily make it work for blocks inside that method (the same goes for &lt;code class=&quot;highlighter-rouge&quot;&gt;...&lt;/code&gt;).
That’s actually more useful than it sounds, and allows “saving” a delegated call and trigger it later:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pass_keywords&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@call_later&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@call_later&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pass_keywords&lt;/code&gt; is enough to make the delegation in &lt;code class=&quot;highlighter-rouge&quot;&gt;ActionDispatch::MiddlewareStack::Middleware&lt;/code&gt;
(a rather complicated case) work and requires &lt;a href=&quot;https://github.com/eregon/rails/commit/8b0625ed68&quot;&gt;rather few changes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We could also keep &lt;code class=&quot;highlighter-rouge&quot;&gt;pass_keywords&lt;/code&gt; in Ruby 3+, although I think it would be preferable to use more idiomatic ways for delegation in Ruby 3 and later (either &lt;code class=&quot;highlighter-rouge&quot;&gt;def delegate(*args, **kwargs, &amp;amp;block)&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;def delegate(...)&lt;/code&gt;).&lt;/p&gt;

&lt;h3 id=&quot;ruby2_keywords&quot;&gt;ruby2_keywords&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ruby2_keywords&lt;/code&gt; is a method introduced in Ruby 2.7 that alters
how a method taking a &lt;code class=&quot;highlighter-rouge&quot;&gt;*rest&lt;/code&gt; parameter behaves. Specifically, if keyword arguments are
passed to such a method, they are remembered by flagging the Hash. When a flagged Hash
is passed at &lt;em&gt;any&lt;/em&gt; call site using a &lt;code class=&quot;highlighter-rouge&quot;&gt;*rest&lt;/code&gt; argument (and no keyword arguments), then
that flagged Hash is converted back to keyword arguments.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ruby2_keywords&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;respond_to?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ruby2_keywords&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Or use the 'ruby2_keywords' gem:&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ruby2_keywords'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ruby2_keywords&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({})&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [{}]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here is how &lt;code class=&quot;highlighter-rouge&quot;&gt;ActionDispatch::MiddlewareStack::Middleware&lt;/code&gt; &lt;a href=&quot;https://github.com/eregon/rails/commit/44a80647f5&quot;&gt;looks like with &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby2_keywords&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This works fine on Ruby 2.6 (&lt;code class=&quot;highlighter-rouge&quot;&gt;ruby2_keywords&lt;/code&gt; is defined as no-op) and 2.7.
However, what should happen for Ruby 3?
Should we even have a method called &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby2_keywords&lt;/code&gt; in Ruby 3?&lt;/p&gt;

&lt;p&gt;The current idea seems to keep &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby2_keywords&lt;/code&gt; until at least Ruby 2 is end-of-life,
let’s say in Ruby 3.X.
That means however code using &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby2_keywords&lt;/code&gt; will break at that date, unless
the code also includes a version check and uses the Ruby 3-style delegation:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ruby2_keywords'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RUBY_VERSION&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;3&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ruby2_keywords&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is becoming not so pretty, but I think is a good path forward.
Using this, code will not break in the foreseeable future, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby2_keywords&lt;/code&gt;
workaround is only used on Ruby 2.7, which is the only version needing such a complicated workaround.
Also, we use the Ruby 3-style delegation in Ruby 3 which is rather natural, and not some workaround with complicated semantics.
The Ruby 2 branch can be removed as soon as Ruby 2 support is dropped for that code.&lt;/p&gt;

&lt;p&gt;However, it seems most MRI committers think it’s fine to migrate your code to the version just using
&lt;code class=&quot;highlighter-rouge&quot;&gt;ruby2_keywords&lt;/code&gt; and then ask you again when Ruby 3.X comes out to change the code again to use Ruby 3-style delegation, or &lt;code class=&quot;highlighter-rouge&quot;&gt;...&lt;/code&gt;.
I’m not comfortable with the idea of telling people to change their code, &lt;strong&gt;knowing it will break in Ruby 3.X&lt;/strong&gt;,
and this is part of the reason why I am writing this blog post.&lt;/p&gt;

&lt;p&gt;I don’t think keeping &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby2_keywords&lt;/code&gt; forever is any good either, I think it doesn’t make sense to have a method named &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby2_keywords&lt;/code&gt; in e.g., Ruby 4. We could maybe rename it, but I have other concerns.&lt;/p&gt;

&lt;p&gt;I dislike &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby2_keywords&lt;/code&gt; because it introduces hidden state (a hidden flag on a &lt;code class=&quot;highlighter-rouge&quot;&gt;Hash&lt;/code&gt;).
Do you know which other construct uses hidden state in Ruby? The flip-flop operator is an example.
Hidden state is almost always a sign of bad design for programming languages, it always comes back and bites you by having surprising semantics and non-trivial performance implications.
Practically, it means that &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby2_keywords&lt;/code&gt; might flag a &lt;code class=&quot;highlighter-rouge&quot;&gt;Hash&lt;/code&gt; and when it’s used in a different file at a call site very far away it could magically be passed as keyword arguments even though it’s syntactically passed as a positional argument (e.g., &lt;code class=&quot;highlighter-rouge&quot;&gt;foo(*args)&lt;/code&gt;). Have fun debugging that.&lt;/p&gt;

&lt;p&gt;Also, it slows down every single call site using a &lt;code class=&quot;highlighter-rouge&quot;&gt;*rest&lt;/code&gt; argument, not just the one in the &lt;code class=&quot;highlighter-rouge&quot;&gt;delegate&lt;/code&gt; method.
Because of that I consider it a hack, which seems acceptable if only used in Ruby 2.7, but seems like we’d shoot ourselves in the foot to keep it any longer, both for making migration more difficult when removing it, and for suffering lower performance for all &lt;code class=&quot;highlighter-rouge&quot;&gt;foo(*args)&lt;/code&gt; calls until then.
&lt;a href=&quot;https://bugs.ruby-lang.org/issues/16188&quot;&gt;This issue&lt;/a&gt; has more details about performance implications of &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby2_keywords&lt;/code&gt; and Ruby 3 keyword arguments.&lt;/p&gt;

&lt;p&gt;Finally, &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby2_keywords&lt;/code&gt; introduces magic conversion of positional arguments to keyword arguments.
Is it not ironic that we work on separating positional and keyword argument but then introduce &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby2_keywords&lt;/code&gt; which brings back automatic conversation, i.e., potentially breaks the separation?&lt;/p&gt;

&lt;p&gt;So let’s keep thinking.&lt;/p&gt;

&lt;h3 id=&quot;ruby2_keywords--send_keyword_hash&quot;&gt;ruby2_keywords + send_keyword_hash&lt;/h3&gt;

&lt;p&gt;This is a variant of &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby2_keywords&lt;/code&gt; above but it makes it explicit which call site can convert a flagged Hash to keyword arguments. &lt;code class=&quot;highlighter-rouge&quot;&gt;send_keyword_hash&lt;/code&gt; is then just &lt;code class=&quot;highlighter-rouge&quot;&gt;send&lt;/code&gt; with the additional conversion of a flagged Hash to keyword arguments.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ruby2_keywords'&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Could be defined by the ruby2_keywords gem too&lt;/span&gt;
&lt;span class=&quot;kp&quot;&gt;alias_method&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:send_keyword_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:__send__&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;respond_to?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:send_keyword_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RUBY_VERSION&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;3&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ruby2_keywords&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;send_keyword_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This still has hidden state by flagging a keyword Hash passed to a &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby2_keywords&lt;/code&gt; method,
but at least it’s explicit where the conversion can occur and where the flag has any effect.
By making it explicit where such a conversion can happen with &lt;code class=&quot;highlighter-rouge&quot;&gt;send_keyword_hash&lt;/code&gt;, it’s both clearer for semantics (easier to debug) and it removes the performance concern by letting other call sites using a &lt;code class=&quot;highlighter-rouge&quot;&gt;*rest&lt;/code&gt; argument behave unchanged.
Also, with &lt;code class=&quot;highlighter-rouge&quot;&gt;send_keyword_hash&lt;/code&gt;, there is no more magic conversion of positional to keyword arguments, so the separation remains clean with no backdoor.&lt;/p&gt;

&lt;p&gt;Here is how &lt;code class=&quot;highlighter-rouge&quot;&gt;ActionDispatch::MiddlewareStack::Middleware&lt;/code&gt; &lt;a href=&quot;https://github.com/eregon/rails/commit/b5fd497a58&quot;&gt;looks like with &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby2_keywords + send_keyword_hash&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;what-should-we-do&quot;&gt;What Should We Do?&lt;/h2&gt;

&lt;p&gt;Here are a few questions for the Ruby community and for the reader:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Do you like any of these approaches?&lt;/li&gt;
  &lt;li&gt;Is there a better approach that would work but wasn’t considered?&lt;/li&gt;
  &lt;li&gt;Do you think it’s OK to break code/having to change code &lt;em&gt;again&lt;/em&gt; in Ruby 3.X by just recommending to use &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby2_keywords&lt;/code&gt; with no version check? It seems to be what MRI committers are thinking currently.&lt;/li&gt;
  &lt;li&gt;Until when should we keep &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby2_keywords&lt;/code&gt; (if at all)?&lt;/li&gt;
  &lt;li&gt;What do you think of the hidden state, magic conversion at any &lt;code class=&quot;highlighter-rouge&quot;&gt;foo(*args)&lt;/code&gt; call site and hard-to-debug concerns about &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby2_keywords&lt;/code&gt;?&lt;/li&gt;
  &lt;li&gt;What delegation style would you use once Ruby 2 support is dropped? &lt;code class=&quot;highlighter-rouge&quot;&gt;def delegate(*args, **kwargs, &amp;amp;block)&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;def delegate(...)&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;pass_keywords&lt;/code&gt;?&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Benoit Daloze</name></author><summary type="html">Ruby 3.0 will introduce the separation between positional and keyword arguments. The upcoming Ruby 2.7 release aims to introduce warnings for every argument behavior that will change in Ruby 3.0 to ease migration. However, delegation that works for Ruby 2.6, 2.7 and 3 seems a hard problem to solve.</summary></entry><entry><title type="html">A New Expectation Syntax for ruby/spec</title><link href="http://eregon.me/blog/2019/10/07/a-new-should-syntax.html" rel="alternate" type="text/html" title="A New Expectation Syntax for ruby/spec"><published>2019-10-07T00:00:00+02:00</published><updated>2019-10-07T00:00:00+02:00</updated><id>http://eregon.me/blog/2019/10/07/a-new-should-syntax</id><content type="html" xml:base="http://eregon.me/blog/2019/10/07/a-new-should-syntax.html">&lt;p&gt;&lt;a href=&quot;https://github.com/ruby/spec&quot;&gt;ruby/spec&lt;/a&gt; is a test suite for the behavior of the Ruby programming language.
The utility to run the test suite is called &lt;a href=&quot;https://github.com/ruby/mspec&quot;&gt;MSpec&lt;/a&gt; and is very similar to RSpec 2.&lt;/p&gt;

&lt;p&gt;The reason to have its own runner and not simply using RSpec is that MSpec is significantly simpler than RSpec 2.
For example, it does not &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt; any standard library.
Early-stage Ruby implementations typically do not support the entire standard library, but based on the simplicity of MSpec they are still able to run language and core library specs with minimal efforts.&lt;/p&gt;

&lt;p&gt;MSpec also provides a few features that RSpec does or did not have such as
automatically tagging/untagging failing specs, various guards useful for ruby/spec, etc.&lt;/p&gt;

&lt;h2 id=&quot;existing-syntax-in-rspec-2-and-rspec-3&quot;&gt;Existing Syntax in RSpec 2 and RSpec 3&lt;/h2&gt;

&lt;p&gt;MSpec uses a syntax very similar to RSpec 2:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;String#start_with?&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;returns true only if beginning match&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;start_with?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hel'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This contrasts to the RSpec 3 style:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;String#start_with?&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;returns true only if beginning match&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;start_with?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hel'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I don’t particularly like the RSpec 3 style:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It’s more verbose and needs two method calls instead of one (not counting the matcher)&lt;/li&gt;
  &lt;li&gt;It needs extra parentheses which add visual clutter&lt;/li&gt;
  &lt;li&gt;It’s harder to switch between regular code and specs because some sort of manual code translation is always required (i.e., it’s not just adding &lt;code class=&quot;highlighter-rouge&quot;&gt;.should&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These reasons are why I am mostly happy with the existing RSpec 2 style in ruby/spec.&lt;/p&gt;

&lt;p&gt;Using &lt;code class=&quot;highlighter-rouge&quot;&gt;expect&lt;/code&gt; has of course advantages too, notably when using delegation,
as explained in the &lt;a href=&quot;https://rspec.info/blog/2012/06/rspecs-new-expectation-syntax/&quot;&gt;original blog post about &lt;code class=&quot;highlighter-rouge&quot;&gt;expect&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-various-equality-methods&quot;&gt;The Various Equality Methods&lt;/h2&gt;

&lt;p&gt;One aspect discussed in that blog post is that &lt;code class=&quot;highlighter-rouge&quot;&gt;should ==&lt;/code&gt; generates Ruby warnings.
This used to indeed be annoying.
However in Ruby 2.4+ it’s easy to automatically filter out these warnings by overriding &lt;code class=&quot;highlighter-rouge&quot;&gt;Warning.warn&lt;/code&gt;, which MSpec does.&lt;/p&gt;

&lt;p&gt;When I compare &lt;code class=&quot;highlighter-rouge&quot;&gt;actual.should eq(expected)&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;actual.should == expected&lt;/code&gt;, I strongly prefer the latter, because it is much closer to normal Ruby code which would just test &lt;code class=&quot;highlighter-rouge&quot;&gt;actual == expected&lt;/code&gt;.
There are also various equality methods in Ruby: &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;eql?&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;equal?&lt;/code&gt;.
I’d like to not have to remember any kind of mapping between regular code and specs; I’d like to use the exact same method names in specs.
Continuing on that idea, I’m not such a huge fan of having so many matchers in MSpec to do very basic tests I could do more simply in Ruby code. Here are a few matchers from MSpec:
&lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;eql&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;equal&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;=~&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;=&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;include&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;be_true&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;be_false&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;be_empty&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;be_nan&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;be_an_instance_of&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;be_kind_of&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;be_ancestor_of&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;respond_to&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;have_instance_method&lt;/code&gt;,  …&lt;/p&gt;

&lt;p&gt;So many already, and there are many more!
And of course, there will always be some missing matchers, for instance there is no matcher for &lt;code class=&quot;highlighter-rouge&quot;&gt;String#start_with?&lt;/code&gt;.
Contrary to RSpec, there are no magic &lt;code class=&quot;highlighter-rouge&quot;&gt;be_.../have_...&lt;/code&gt; matchers in MSpec.&lt;/p&gt;

&lt;h2 id=&quot;the-new-simple-and-consistent-syntax&quot;&gt;The New Simple and Consistent Syntax&lt;/h2&gt;

&lt;p&gt;Could we do without having to remember all these mappings and just use normal predicates in Ruby code? That’s what I wanted to try with this new syntax in MSpec:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;String#start_with?&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;returns true only if beginning match&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;should&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;start_with?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hel'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The idea is: add &lt;code class=&quot;highlighter-rouge&quot;&gt;.should&lt;/code&gt; just before the predicate you expect to be truthy, and done!
And this works for any method, because we can implement this through &lt;code class=&quot;highlighter-rouge&quot;&gt;#method_missing&lt;/code&gt;.
This syntax is not new, it was actually already used for &lt;code class=&quot;highlighter-rouge&quot;&gt;should ==&lt;/code&gt;, but now it can be used for any predicate:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;should_not&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;abc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/b/&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;should&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;eql?&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;4.0&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;should&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;equal?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;end&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;should&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;end_with?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;should&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty?&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;should&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;should&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;exist?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;README.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;should&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;odd?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I think some of these look really nice, some do not read as nicely, but overall they are all consistent and extremely simple to learn.&lt;/p&gt;

&lt;p&gt;The simplicity of removing &lt;code class=&quot;highlighter-rouge&quot;&gt;.should&lt;/code&gt; to go from specs to regular code is very useful for debugging purposes. Having a minimal amount of self-contained code to reproduce an issue is often key to understand and fix a bug.&lt;/p&gt;

&lt;p&gt;A significant advantage of this approach is that all matchers have a similar output for errors, and provide a lot of information if they fail.&lt;/p&gt;

&lt;p&gt;With the old syntax (&lt;code class=&quot;highlighter-rouge&quot;&gt;s.start_with?('b').should == true&lt;/code&gt;), the error wouldn’t be very helpful and one would need to look at the test code to get an idea of what went wrong:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;String#start_with? returns true only if beginning match FAILED
Expected false to equal true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With the new syntax (&lt;code class=&quot;highlighter-rouge&quot;&gt;s.should.start_with?('b')&lt;/code&gt;), we get to see the receiver and arguments, no matter what predicate is used, and it’s immediately clear which expectation failed:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;String#start_with? returns true only if beginning match FAILED
Expected &quot;a&quot;.start_with? &quot;b&quot;
to be truthy but was false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And it’s all consistent, so once we learn the formatting of just one error, we know it for all other errors.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Expected 1 == 2
to be truthy but was false

Expected [1, 3].include? 2
to be truthy but was false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Previously, the message and formatting would differ for every matcher:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Expected 1 to equal 2

Expected [1, 3] to include 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I no longer need to reverse map &lt;code class=&quot;highlighter-rouge&quot;&gt;equal&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt; (how confusing!) and &lt;code class=&quot;highlighter-rouge&quot;&gt;include&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;include?&lt;/code&gt;, it just shows me the method which was called and returned something unexpected.&lt;/p&gt;

&lt;h2 id=&quot;expected-actual-to-equal-expected&quot;&gt;Expected Actual to Equal Expected&lt;/h2&gt;

&lt;p&gt;Moreover &lt;code class=&quot;highlighter-rouge&quot;&gt;actual&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;expected&lt;/code&gt; are often unclear in many test framework outputs, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;Expected ACTUAL to equal EXPECTED&lt;/code&gt; above.
Some test-unit frameworks even disagree on which should be first for &lt;code class=&quot;highlighter-rouge&quot;&gt;assert_equal&lt;/code&gt;.
We no longer need a notion of &lt;code class=&quot;highlighter-rouge&quot;&gt;actual&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;expected&lt;/code&gt; values in the new syntax, we always expect a whole predicate to be truthy or falsy, and that’s it. There is no question of order, it’s plain Ruby code and we can see &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt; was called on the left receiver value, with the right value(s) as the argument(s).&lt;/p&gt;

&lt;p&gt;Of course, this new syntax is not the answer to everything.
For instance, it does not address the fact we need a different syntax for exceptions (and mocks).
We could extend the new syntax to deal with exceptions as going through &lt;code class=&quot;highlighter-rouge&quot;&gt;method_missing&lt;/code&gt; gives a lot of control, but I did not find a nice syntax for that yet.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The existing RSpec 2-like syntax will still remain available in MSpec,
for compatibility and because migrating ruby/spec would be a very large amount of work.
I also don’t want to force anyone to use the new syntax.
I started using the new syntax in a few specs where I found it to be a clear gain,
&lt;a href=&quot;https://github.com/ruby/spec/commit/a3c52de2cf5858ae452feddb4fd77c9f69e2f6c8&quot;&gt;such as for &lt;code class=&quot;highlighter-rouge&quot;&gt;start_with?&lt;/code&gt; specs&lt;/a&gt;.
The most frequent matcher, &lt;code class=&quot;highlighter-rouge&quot;&gt;should ==&lt;/code&gt;, already uses the new error output,
because that matcher uses the same syntax in the new syntax and
therefore the new implementation is used.
As a fun fact, the implementation of the new syntax actually
&lt;a href=&quot;https://github.com/ruby/mspec/commit/bc841cc0a4&quot;&gt;removes more lines than it adds&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this blog post I presented a new expectation syntax for ruby/spec.
The main advantages are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Consistent and simple (“add &lt;code class=&quot;highlighter-rouge&quot;&gt;.should&lt;/code&gt; before the predicate”) and therefore easy to learn&lt;/li&gt;
  &lt;li&gt;Very similar to regular code, so going from plain Ruby code to specs or back is trivial&lt;/li&gt;
  &lt;li&gt;No extra mapping between predicates and matchers, matchers are just Ruby predicates&lt;/li&gt;
  &lt;li&gt;Clear output when an expectation fails, showing the relevant values that caused the error&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What do you think? Is this new syntax a good or a bad idea?&lt;/p&gt;</content><author><name>Benoit Daloze</name></author><summary type="html">ruby/spec is a test suite for the behavior of the Ruby programming language. The utility to run the test suite is called MSpec and is very similar to RSpec 2.</summary></entry><entry><title type="html">How TruffleRuby’s Startup Time Became Faster Than MRI’s</title><link href="http://eregon.me/blog/2019/04/24/how-truffleruby-startup-became-faster-than-mri.html" rel="alternate" type="text/html" title="How TruffleRuby's Startup Time Became Faster Than MRI's"><published>2019-04-24T00:00:00+02:00</published><updated>2019-04-24T00:00:00+02:00</updated><id>http://eregon.me/blog/2019/04/24/how-truffleruby-startup-became-faster-than-mri</id><content type="html" xml:base="http://eregon.me/blog/2019/04/24/how-truffleruby-startup-became-faster-than-mri.html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;I want to talk about VM startup in Ruby. That is, the time it takes for a Ruby
implementation to print “Hello World” with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ruby -e 'puts &quot;Hello World&quot;'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is a lower bound for running any Ruby script or application,
and lower startup time typically results in an improved developer experience.&lt;/p&gt;

&lt;p&gt;MRI has been the gold standard for startup time, unbeaten so far by other Ruby implementations.
Can we set a new record?
Without further ado, here are the results for VM startup on the latest Ruby implementations:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Implementation&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Real Time (s)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;TruffleRuby Native 1.0.0-rc16&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.025&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MRI 2.6.2&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.048&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Rubinius 3.107&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.150&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;JRuby 9.2.7.0&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1.357&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;TruffleRuby JVM 1.0.0-rc16&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1.787&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/oracle/truffleruby&quot;&gt;TruffleRuby&lt;/a&gt; Native (the default) is leading here, with a startup time of only 25ms, followed by 48ms for MRI, 150ms for Rubinius and 1357ms for JRuby.
OTOH, TruffleRuby JVM is much more representative of a typical (and slow) JVM startup,
in the same order of magnitude as JRuby.
To clarify, TruffleRuby Native is what one gets when installing TruffleRuby via &lt;code class=&quot;highlighter-rouge&quot;&gt;rvm&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;rbenv&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;chruby&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Each measurement is the average of 10 consecutive runs with:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ precise-time 10 `which ruby` -e 'puts &quot;Hello World&quot;'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;precise-time&lt;/code&gt; is a &lt;a href=&quot;https://github.com/eregon/precise-time&quot;&gt;small C program&lt;/a&gt; I wrote to measure startup time precisely using &lt;code class=&quot;highlighter-rouge&quot;&gt;clock_gettime(CLOCK_MONOTONIC)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note that I do not consider any trick to improve startup time here like having a prepared JVM process around (&lt;code class=&quot;highlighter-rouge&quot;&gt;nailgun&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;drip&lt;/code&gt;, etc). I just use my Ruby manager (&lt;code class=&quot;highlighter-rouge&quot;&gt;chruby&lt;/code&gt;), switch to each ruby and run Hello World.
FWIW, I think this kind of startup tricks is usually cumbersome to setup and therefore rarely used and not representative of what most users experience.&lt;/p&gt;

&lt;h2 id=&quot;ahead-of-time-compilation-with-native-image&quot;&gt;Ahead-Of-Time Compilation with Native Image&lt;/h2&gt;

&lt;p&gt;So how did we get from 1787ms to 25ms?
The first and biggest step goes from 1787ms to 165ms (10x faster) by using a custom VM called SubstrateVM.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/oracle/graal/tree/master/substratevm&quot;&gt;SubstrateVM&lt;/a&gt;, unlike, for example, HotSpot, loads all Java classes ahead-of-time, not at runtime.
This is done once during a step called Native Image Generation, where SubstrateVM will look at the classpath, include every reachable class and compile those classes and methods to native code, all of that ahead-of-time.
This native code is stored in a native executable, i.e., a “Native Image”.&lt;/p&gt;

&lt;p&gt;For instance, TruffleRuby is written in Java and Ruby, and all Java classes are compiled ahead-of-time into a native executable:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ls -lh `which truffleruby`
-rwxr-xr-x. 1 eregon eregon 134M Apr 20 00:51 .../truffleruby-1.0.0-rc16/bin/truffleruby
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At runtime, the application will then start with the &lt;code class=&quot;highlighter-rouge&quot;&gt;main()&lt;/code&gt; method, but no classloading or JIT compilation of Java classes is needed; every Java method is already compiled to native code and ready to be run.&lt;/p&gt;

&lt;p&gt;That step alone reduces startup time to around 165ms.
I think we can attribute these gains to:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Not having to load Java classes at runtime.&lt;/li&gt;
  &lt;li&gt;Having all Java methods precompiled to native code, rather than executing them in the Java interpreter and then JIT’ing some of them.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is not new, and Kevin Menard already discussed it in a &lt;a href=&quot;http://nirvdrum.com/2017/02/15/truffleruby-on-the-substrate-vm.html&quot;&gt;blog post&lt;/a&gt; two years ago, but it is an important context to discuss further startup optimizations.&lt;/p&gt;

&lt;h2 id=&quot;storing-extra-data-in-the-native-image&quot;&gt;Storing Extra Data in the Native Image&lt;/h2&gt;

&lt;p&gt;SubstrateVM not only compiles Java classes ahead-of-time, it also executes the static initializers (corresponding to statements in the &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;module&lt;/code&gt; body in Ruby).&lt;/p&gt;

&lt;p&gt;This gives the opportunity to run additional initializations ahead-of-time and store the resulting state in &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt; (class) variables.&lt;/p&gt;

&lt;p&gt;One prime example here for TruffleRuby is storing the Ruby files of the core library. The core library in TruffleRuby is defined mostly in Ruby (similar to Rubinius) and as a result there are about 18 000 significant lines of Ruby code to load, on every startup, before executing any user Ruby code.&lt;/p&gt;

&lt;p&gt;Reading these 89 files from disk takes time, but further than that, parsing them to Abstract Syntax Trees (ASTs) is also time-consuming.
It turns out, we could both read the files and parse them to ASTs ahead-of-time, in a static initializer, while SubstrateVM is compiling our Java code!&lt;/p&gt;

&lt;p&gt;This gives another boost for startup, producing Hello World in around 96ms.
That’s still significantly slower than MRI, so we need to go deeper.&lt;/p&gt;

&lt;h2 id=&quot;pre-initialization-and-freezing-the-entire-heap-with-native-image&quot;&gt;Pre-Initialization and Freezing the Entire Heap with Native Image&lt;/h2&gt;

&lt;p&gt;Since we can read files and parse Ruby code ahead-of-time, could we also evaluate Ruby code ahead-of-time?
Could we &lt;code class=&quot;highlighter-rouge&quot;&gt;load&lt;/code&gt; the entire core library Ruby code during Native Image Generation?&lt;/p&gt;

&lt;p&gt;Yes we can, with SubstrateVM, and that’s how we got to 25ms startup!
We call this step &lt;em&gt;pre-initialization&lt;/em&gt; and this is actually available for any GraalVM-based language.&lt;/p&gt;

&lt;p&gt;However, this requires some care, and some parts of the core library initialization need to be delayed to, or patched at, runtime because they depend on the runtime environment.
For instance, setting &lt;code class=&quot;highlighter-rouge&quot;&gt;$$&lt;/code&gt; (the PID global variable) must be done at runtime, otherwise it would reflect the PID of the Native Image Generator process, which is no longer running.&lt;/p&gt;

&lt;p&gt;To optimize startup time to 25ms, I introduced pre-initialization in TruffleRuby as well as startup metrics, and as a side effect those metrics now document the steps performed during startup:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ AOT_BIN=`which truffleruby` jt metrics time --native --experimental-options --metrics-time-parsing-file -e 'puts &quot;Hello World&quot;'
..........
0.026 total
 0.004 vm
 0.022 main
  0.013 patch-context
   0.000 options
   0.001 create-native-platform
   0.003 rehash
   0.009 run-delayed-initialization
    0.000 kernel_operations.rb
    0.000 encoding.rb
    0.001 env.rb
    0.000 posix.rb
    0.000 main.rb
    0.004 post.rb
    0.003 post-boot.rb
  0.006 run
   0.004 script
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With that, we can see around 13ms is spent in &lt;code class=&quot;highlighter-rouge&quot;&gt;patch-context&lt;/code&gt;, the step to incorporate the runtime environment into the pre-initialized core library.&lt;/p&gt;

&lt;p&gt;A simple example of initialization that must be delayed to runtime is setting the process ID:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Truffle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Boot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delay&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;vg&quot;&gt;$$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pid&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Similarly, setting &lt;code class=&quot;highlighter-rouge&quot;&gt;ARGV&lt;/code&gt; must be done from runtime command-line arguments:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Truffle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Boot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delay&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;ARGV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Truffle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Boot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;original_argv&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here is a list of other initializations that must be done at runtime:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Reading command-line options (e.g., &lt;code class=&quot;highlighter-rouge&quot;&gt;-w&lt;/code&gt;), and using those instead of the options passed for Native Image Generation.&lt;/li&gt;
  &lt;li&gt;Setting the locale Encoding (it depends on &lt;code class=&quot;highlighter-rouge&quot;&gt;$LANG&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;Setting up signal handlers (they are part of the implicit process state).&lt;/li&gt;
  &lt;li&gt;Setting up &lt;code class=&quot;highlighter-rouge&quot;&gt;$LOAD_PATH&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;$LOADED_FEATURES&lt;/code&gt;, since the TruffleRuby directory might change between Native Image Generation time and runtime.&lt;/li&gt;
  &lt;li&gt;Setting &lt;code class=&quot;highlighter-rouge&quot;&gt;$DEBUG&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;$VERBOSE&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Setting a new random seed for hashing (&lt;code class=&quot;highlighter-rouge&quot;&gt;#hash&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This last item, &lt;em&gt;setting a new random seed for hashing&lt;/em&gt;, is actually significantly more complicated than the rest.
It’s easy to generate a new random seed and store it, and even to use it for new &lt;code class=&quot;highlighter-rouge&quot;&gt;#hash&lt;/code&gt; calls.
But what about existing objects, which might cache their &lt;code class=&quot;highlighter-rouge&quot;&gt;#hash&lt;/code&gt; like Symbols?
What about &lt;code class=&quot;highlighter-rouge&quot;&gt;Hash&lt;/code&gt; objects created during pre-initialization, which determine the position in the buckets array by using the &lt;code class=&quot;highlighter-rouge&quot;&gt;#hash&lt;/code&gt; of the keys, which itself used the old random seed?
All of these need to be “patched”, to recompute their &lt;code class=&quot;highlighter-rouge&quot;&gt;#hash&lt;/code&gt; based on the new random seed.
To do so, we track every &lt;code class=&quot;highlighter-rouge&quot;&gt;Hash&lt;/code&gt; created during pre-initialization and rehash internal hash tables such as the &lt;code class=&quot;highlighter-rouge&quot;&gt;Symbol&lt;/code&gt; table.&lt;/p&gt;

&lt;p&gt;There are currently some restrictions on what SubstrateVM can pre-initialize:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Java Thread instances cannot be referenced in the Native Image. For instance, it would be complicated to restore execution stacks.&lt;/li&gt;
  &lt;li&gt;Native calls using Truffle’s FFI cannot be performed during pre-initialization.
We could allow them during pre-initialization, but it’s often not a good idea to do so.
For instance, holding on a native pointer allocated with &lt;code class=&quot;highlighter-rouge&quot;&gt;malloc()&lt;/code&gt; or a file descriptor
would not work as those would not exist in the runtime process.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The ability to run static initializers ahead-of-time actually implies that SubstrateVM is able to
store an entire Java heap into a native executable, such that when the executable starts, all the Java objects are already available with no extra work, with no deserialization or copy.
SubstrateVM is therefore able to run arbitrary code during Native Image Generation and “freeze” the resulting Java heap into an executable.
From that perspective, it is somewhat similar to &lt;a href=&quot;https://www.criu.org/Main_Page&quot;&gt;CRIU&lt;/a&gt;, but more specialized and therefore faster for startup.&lt;/p&gt;

&lt;h2 id=&quot;autoloading-rubygems&quot;&gt;Autoloading RubyGems&lt;/h2&gt;

&lt;p&gt;We use another trick to speed up startup in TruffleRuby: we load RubyGems lazily.
To do so, we use an &lt;code class=&quot;highlighter-rouge&quot;&gt;autoload&lt;/code&gt; for the &lt;code class=&quot;highlighter-rouge&quot;&gt;Gem&lt;/code&gt; constant and hook into &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt; so RubyGems is loaded the first time &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt; raises a LoadError (see &lt;a href=&quot;https://github.com/oracle/truffleruby/blob/85bbbf0a/lib/truffle/truffle/lazy-rubygems.rb&quot;&gt;this file&lt;/a&gt; for details).&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;require &quot;rubygems&quot;&lt;/code&gt; in RubyGems 3.0.3 loads 21 RubyGems files (4010 SLOC), as well as the &lt;code class=&quot;highlighter-rouge&quot;&gt;rbconfig&lt;/code&gt; (160 SLOC), &lt;code class=&quot;highlighter-rouge&quot;&gt;uri&lt;/code&gt; (12 files, ~2000 SLOC), &lt;code class=&quot;highlighter-rouge&quot;&gt;stringio&lt;/code&gt; (559 SLOC) and &lt;code class=&quot;highlighter-rouge&quot;&gt;monitor&lt;/code&gt; (127 SLOC) standard libraries.
That’s a fair amount of code which takes a while to load, and in some cases it’s simply not used at all (e.g., command-line tools using only the standard library).&lt;/p&gt;

&lt;h2 id=&quot;future-work-and-application-startup&quot;&gt;Future Work and Application Startup&lt;/h2&gt;

&lt;p&gt;In this blog post, I showed how we optimize VM startup in TruffleRuby.
A related topic is application startup, that is, how long it takes before running any useful work in your application.
For example, how long it takes for a Rails app until it can accept the first request.
This of course depends a lot on the specific application.&lt;/p&gt;

&lt;p&gt;Application startup is not really fast yet on TruffleRuby, and it is something we want to improve on.
For instance, &lt;code class=&quot;highlighter-rouge&quot;&gt;gem&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle&lt;/code&gt; commands are significantly slower than on MRI currently.&lt;/p&gt;

&lt;p&gt;Application startup seems composed of mostly two aspects:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;how fast new Ruby code is parsed and,&lt;/li&gt;
  &lt;li&gt;how fast initialization (e.g., calls at the top-level or in the &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;module&lt;/code&gt; body) is run.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the first aspect, we could think to parse Ruby files that might be loaded by the application, and save the resulting ASTs in the Native Image. This would skip reading them from disk and parsing time, much like we already do for the core library.
However, this would require recreating a Native Image every time we want to include additional files, so it is not very practical for user-installed gems.
We could of course also serialize ASTs (similarly to how Bootsnap caches serialized MRI bytecode), but then deserialization is typically slower than having all AST node objects already in the Native Image.&lt;/p&gt;

&lt;p&gt;The second aspect is directly related to interpreter speed.
TruffleRuby is currently gathering a lot of profiling information while running in interpreter, to later feed it to the Just-In-Time compiler so that it can compile only the relevant part of each operation used by the Ruby code. However, that makes it slower to run code in the interpreter than MRI, which gathers almost no profiling information currently. I do think we can improve interpreter speed at both the TruffleRuby and Truffle levels though.&lt;/p&gt;

&lt;h2 id=&quot;acknowledgments&quot;&gt;Acknowledgments&lt;/h2&gt;

&lt;p&gt;I would like to thank Tomáš Zezula who worked on pre-initialization support in the &lt;a href=&quot;https://github.com/oracle/graal/tree/master/truffle&quot;&gt;Truffle Language Implementation Framework&lt;/a&gt;, as well as all the contributors to &lt;a href=&quot;https://github.com/oracle/graal/tree/master/substratevm&quot;&gt;SubstrateVM&lt;/a&gt; which helped to make fast startup for Java a reality.
I would like to also thank Kevin Menard for proofreading this blog post.&lt;/p&gt;</content><author><name>Benoit Daloze</name></author><summary type="html">Introduction</summary></entry><entry><title type="html">TruffleRuby Native: Fast Even for Short Scripts</title><link href="http://eregon.me/blog/2018/02/19/truffleruby-native-fast-short-scripts.html" rel="alternate" type="text/html" title="TruffleRuby Native: Fast Even for Short Scripts"><published>2018-02-19T00:00:00+01:00</published><updated>2018-02-19T00:00:00+01:00</updated><id>http://eregon.me/blog/2018/02/19/truffleruby-native-fast-short-scripts</id><content type="html" xml:base="http://eregon.me/blog/2018/02/19/truffleruby-native-fast-short-scripts.html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Nowadays, it seems every major Ruby implementation has a Just-In-Time (JIT) compiler.
Recently, &lt;a href=&quot;https://medium.com/@k0kubun/the-method-jit-compiler-for-ruby-2-6-388ee0989c13&quot;&gt;YARV-MJIT&lt;/a&gt; has been merged to MRI (CRuby) trunk.
&lt;a href=&quot;http://jruby.org/&quot;&gt;JRuby&lt;/a&gt; relies on the Java Virtual Machine JIT compilers,
and &lt;a href=&quot;https://github.com/oracle/truffleruby&quot;&gt;TruffleRuby&lt;/a&gt; uses &lt;a href=&quot;https://github.com/oracle/graal&quot;&gt;Graal&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One big challenge for JIT compilers is to be beneficial on short-running scripts.
In general, JIT compilers are better for long-running applications like web servers.&lt;/p&gt;

&lt;p&gt;John Hawthorn Recently wrote a &lt;a href=&quot;https://www.johnhawthorn.com/2018/02/playing-with-ruby-jit-mjit/&quot;&gt;blog post&lt;/a&gt; about using YARV-MJIT for a small Ruby script.
In this post, I want to expand on that and analyze the performance of 43 short-running programs (from 0.04s to 20s).
Quick startup and fast warmup are therefore important to achieve good results.&lt;/p&gt;

&lt;p&gt;JRuby and TruffleRuby on JVM do not perform well on short-running programs
as their startup alone gives them a big disadvantage.
On the other hand, TruffleRuby on SubstrateVM has much better startup and warmup.&lt;/p&gt;

&lt;h2 id=&quot;truffleruby-native&quot;&gt;TruffleRuby Native&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/oracle/truffleruby&quot;&gt;TruffleRuby&lt;/a&gt; can run on 2 different virtual machines:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The HotSpot Java Virtual Machine, which has multiple just-in-time compilers and achieves the best peak performance. But the startup is not great (~2s), mostly due to classloading.&lt;/li&gt;
  &lt;li&gt;The &lt;a href=&quot;http://nirvdrum.com/2017/02/15/truffleruby-on-the-substrate-vm.html&quot;&gt;SubstrateVM&lt;/a&gt;, which provides very fast startup and fast warmup.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In both cases, the &lt;a href=&quot;https://github.com/oracle/graal&quot;&gt;Graal&lt;/a&gt; dynamic/just-in-time compiler is used to compile
Ruby code down to machine code and obtain great peak performance.&lt;/p&gt;

&lt;p&gt;Since we look at short scripts, we pick TruffleRuby on SubstrateVM, also called &lt;em&gt;TruffleRuby Native&lt;/em&gt; in this post.
TruffleRuby is part of GraalVM, which can be downloaded on &lt;a href=&quot;http://www.oracle.com/technetwork/oracle-labs/program-languages/downloads/index.html&quot;&gt;OTN&lt;/a&gt;.
To run TruffleRuby Native, just add a &lt;code class=&quot;highlighter-rouge&quot;&gt;--native&lt;/code&gt; flag to &lt;code class=&quot;highlighter-rouge&quot;&gt;bin/ruby&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;graalvm-0.31/bin/ruby &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'puts &quot;Slow Startup ...&quot;'&lt;/span&gt;
truffleruby 0.31, like ruby 2.3.5 &amp;lt;GraalVM 0.31 with Graal&amp;gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;linux-x86_64]
Slow Startup ...
6.26s user 0.18s system 339% cpu 1.899 total

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;graalvm-0.31/bin/ruby &lt;span class=&quot;nt&quot;&gt;--native&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'puts &quot;Fast Native Startup!&quot;'&lt;/span&gt;
truffleruby 0.31, like ruby 2.3.5 &amp;lt;native build with Graal&amp;gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;linux-x86_64]
Fast Native Startup!
0.08s user 0.01s system 99% cpu 0.084 total&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s pretty fast.
I have been working on TruffleRuby startup for a while and it’s starting to look nice.
Not as good as MRI yet, but we’re getting there (that’s for another blog post).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;ruby &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'puts &quot;MRI Startup&quot;'&lt;/span&gt;
ruby 2.5.0p0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2017-12-25 revision 61468&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;x86_64-linux]
MRI Startup
0.03s user 0.00s system 98% cpu 0.040 total&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;the-benchmarks&quot;&gt;The Benchmarks&lt;/h2&gt;

&lt;p&gt;Startup is interesting, but it would be much more interesting to try on real Ruby scripts.
So I took my solutions to &lt;a href=&quot;http://adventofcode.com/2017&quot;&gt;Advent of Code&lt;/a&gt;, for all 25 days and both puzzles of each day.
This amounts to 43 benchmarks, as for some of the days a single script solves both puzzles.&lt;/p&gt;

&lt;p&gt;I wrote these solutions. So, of course, they might be biased and might not be representative of other short-running Ruby scripts.
But I wrote them in good faith, optimizing for a concise and elegant style,
tweaking the code for performance only when it would run for too long.
For Advent of Code, I enjoy writing code straight from the problem description
rather than reasoning about the maths behind the puzzle.
Note that I also made a couple tweaks to TruffleRuby after solving the puzzles (see below for details), which are now part of GraalVM 0.31.&lt;/p&gt;

&lt;p&gt;In this blog post, I use the latest MRI/CRuby trunk as of writing (r62451) as the baseline.
I also try the new bundled YARV-MJIT and compare against the &lt;a href=&quot;https://github.com/vnmakarov/ruby/commit/21bbbd37&quot;&gt;latest&lt;/a&gt; &lt;a href=&quot;https://github.com/vnmakarov/ruby/tree/rtl_mjit_branch&quot;&gt;RTL-MJIT&lt;/a&gt; from Vladimir Makarov and TruffleRuby Native from GraalVM 0.31.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Enumerable#sum&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Kernel#yield_self&lt;/code&gt; are not defined in all implementations as some of them target a different Ruby version than 2.5.
So I used a &lt;a href=&quot;https://github.com/eregon/adventofcode/blob/6e054d1a/2017/compat.rb&quot;&gt;compat.rb&lt;/a&gt; file defining these methods in Ruby only when the method does not exist (&lt;code class=&quot;highlighter-rouge&quot;&gt;sum&lt;/code&gt; is needed for TruffleRuby and &lt;code class=&quot;highlighter-rouge&quot;&gt;yield_self&lt;/code&gt; for RTL-MJIT).
I verified all implementations produce the same output.
I &lt;a href=&quot;https://github.com/eregon/adventofcode/blob/master/2017/bench.rb&quot;&gt;ran&lt;/a&gt; each benchmark 10 times and took the &lt;a href=&quot;https://github.com/eregon/adventofcode/blob/master/2017/stats.rb&quot;&gt;average&lt;/a&gt;.
The maximal deviation from the average across the 10 runs is: for MRI trunk 8%, YARV-MJIT 8%, TruffleRuby Native 13% and RTL-MJIT 78% (due to the unstable startup time between 54ms and &amp;gt;100ms; the maximal deviation is 10% for programs running over 1s).
For completeness, this is run on a laptop with Fedora 26, an Intel Core i7-7700HQ CPU @ 2.80GHz and a SSD.
MRI was compiled with the system GCC 7.2.1 20170915 (Red Hat 7.2.1-2), which is also used by YARV-MJIT and RTL-MJIT.&lt;/p&gt;

&lt;p&gt;The results are in seconds.
The implementations are compared with time differences (Δ) instead of speedup/slowdown factors to reflect how much time a user gains or loses (10x faster if it’s already &amp;lt;100ms does not make a difference to the user in such a use case).&lt;/p&gt;

&lt;p&gt;Cells highlighted in green show gains compared to the baseline.
Cells in red highlight losses of more than 1 second.&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;&lt;th&gt;Bench&lt;/th&gt;
&lt;th&gt;MRI trunk&lt;/th&gt;
&lt;th&gt;YARV-MJIT&lt;/th&gt;
&lt;th&gt;Δ&lt;/th&gt;
&lt;th&gt;RTL-MJIT&lt;/th&gt;
&lt;th&gt;Δ&lt;/th&gt;
&lt;th&gt;TruffleRuby Native&lt;/th&gt;
&lt;th&gt;Δ&lt;/th&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/eregon/adventofcode/blob/a483e444/2017/1a.rb&quot;&gt;1a.rb&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.041&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.176&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.135&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.094&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.053&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.164&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.123&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/eregon/adventofcode/blob/a483e444/2017/1b.rb&quot;&gt;1b.rb&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.040&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.179&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.139&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.094&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.054&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.103&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.063&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/eregon/adventofcode/blob/a483e444/2017/2a.rb&quot;&gt;2a.rb&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.040&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.230&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.191&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.172&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.133&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.090&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.050&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/eregon/adventofcode/blob/a483e444/2017/2b.rb&quot;&gt;2b.rb&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.040&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.198&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.158&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.086&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.047&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.115&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.075&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/eregon/adventofcode/blob/a483e444/2017/3a.rb&quot;&gt;3a.rb&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.040&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.227&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.187&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.185&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.145&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.078&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.038&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/eregon/adventofcode/blob/a483e444/2017/3b.rb&quot;&gt;3b.rb&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.040&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.239&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.199&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.197&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.156&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.098&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.057&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/eregon/adventofcode/blob/a483e444/2017/4a.rb&quot;&gt;4a.rb&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.041&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.226&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.185&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.132&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.091&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.133&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.092&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/eregon/adventofcode/blob/a483e444/2017/4b.rb&quot;&gt;4b.rb&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.045&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.195&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.149&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.102&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.057&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.401&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.355&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/eregon/adventofcode/blob/a483e444/2017/5a.rb&quot;&gt;5a.rb&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.080&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.227&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.147&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.187&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.107&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.274&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.194&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/eregon/adventofcode/blob/a483e444/2017/5b.rb&quot;&gt;5b.rb&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;3.312&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;3.583&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.271&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;3.151&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot; class=&quot;fast&quot;&gt;-0.160&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.534&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot; class=&quot;fast&quot;&gt;-2.778&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/eregon/adventofcode/blob/a483e444/2017/6.rb&quot;&gt;6.rb&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.087&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.222&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.135&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.133&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.046&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.283&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.197&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/eregon/adventofcode/blob/a483e444/2017/7a.rb&quot;&gt;7a.rb&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.043&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.215&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.171&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.111&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.068&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.162&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.119&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/eregon/adventofcode/blob/a483e444/2017/7b.rb&quot;&gt;7b.rb&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.046&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.239&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.193&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.143&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.097&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.260&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.214&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/eregon/adventofcode/blob/a483e444/2017/8a.rb&quot;&gt;8a.rb&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.042&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.294&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.252&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.249&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.208&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.135&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.093&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/eregon/adventofcode/blob/a483e444/2017/8b.rb&quot;&gt;8b.rb&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.042&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.316&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.274&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.288&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.246&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.144&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.101&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/eregon/adventofcode/blob/a483e444/2017/9.rb&quot;&gt;9.rb&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.042&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.232&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.189&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.140&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.098&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.135&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.093&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/eregon/adventofcode/blob/a483e444/2017/10a.rb&quot;&gt;10a.rb&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.040&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.225&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.186&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.173&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.133&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.093&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.053&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/eregon/adventofcode/blob/a483e444/2017/10b.rb&quot;&gt;10b.rb&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.046&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.283&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.237&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.123&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.077&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.181&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.134&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/eregon/adventofcode/blob/a483e444/2017/11.rb&quot;&gt;11.rb&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;13.818&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;15.706&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot; class=&quot;slow&quot;&gt;+1.889&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;14.246&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.429&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.805&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot; class=&quot;fast&quot;&gt;-13.013&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/eregon/adventofcode/blob/a483e444/2017/12a.rb&quot;&gt;12a.rb&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.043&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.252&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.209&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.122&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.079&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.152&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.108&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/eregon/adventofcode/blob/a483e444/2017/12b.rb&quot;&gt;12b.rb&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.044&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.181&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.137&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.083&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.039&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.179&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.135&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/eregon/adventofcode/blob/a483e444/2017/13a.rb&quot;&gt;13a.rb&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.043&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.201&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.158&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.102&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.059&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.201&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.158&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/eregon/adventofcode/blob/a483e444/2017/13b.rb&quot;&gt;13b.rb&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;1.830&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;1.979&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.149&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;1.503&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot; class=&quot;fast&quot;&gt;-0.327&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.456&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot; class=&quot;fast&quot;&gt;-1.374&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/eregon/adventofcode/blob/a483e444/2017/14a.rb&quot;&gt;14a.rb&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.211&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.308&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.097&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.272&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.061&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.684&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.472&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/eregon/adventofcode/blob/a483e444/2017/14b.rb&quot;&gt;14b.rb&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.244&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.307&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.063&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.342&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.098&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.984&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.740&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/eregon/adventofcode/blob/a483e444/2017/15a.rb&quot;&gt;15a.rb&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;15.565&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;14.988&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot; class=&quot;fast&quot;&gt;-0.576&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;14.069&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot; class=&quot;fast&quot;&gt;-1.495&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;2.166&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot; class=&quot;fast&quot;&gt;-13.399&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/eregon/adventofcode/blob/a483e444/2017/15b.rb&quot;&gt;15b.rb&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;8.802&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;8.404&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot; class=&quot;fast&quot;&gt;-0.398&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;7.974&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot; class=&quot;fast&quot;&gt;-0.828&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;1.278&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot; class=&quot;fast&quot;&gt;-7.524&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/eregon/adventofcode/blob/a483e444/2017/16a.rb&quot;&gt;16a.rb&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.051&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.311&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.260&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.195&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.144&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.361&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.310&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/eregon/adventofcode/blob/a483e444/2017/16b.rb&quot;&gt;16b.rb&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;19.581&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;22.147&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot; class=&quot;slow&quot;&gt;+2.566&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;24.874&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot; class=&quot;slow&quot;&gt;+5.293&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;8.994&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot; class=&quot;fast&quot;&gt;-10.587&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/eregon/adventofcode/blob/a483e444/2017/17a.rb&quot;&gt;17a.rb&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.040&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.240&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.200&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.133&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.093&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.103&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.063&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/eregon/adventofcode/blob/a483e444/2017/17b_no_buffer.rb&quot;&gt;17b.rb&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;3.027&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;2.411&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot; class=&quot;fast&quot;&gt;-0.616&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;1.577&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot; class=&quot;fast&quot;&gt;-1.451&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.588&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot; class=&quot;fast&quot;&gt;-2.439&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/eregon/adventofcode/blob/a483e444/2017/18a.rb&quot;&gt;18a.rb&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.042&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.165&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.123&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.078&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.036&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.109&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.067&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/eregon/adventofcode/blob/a483e444/2017/18b.rb&quot;&gt;18b.rb&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.076&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.184&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.108&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.088&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.012&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.810&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.734&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/eregon/adventofcode/blob/a483e444/2017/19.rb&quot;&gt;19.rb&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.068&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.187&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.119&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.129&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.061&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.530&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.463&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/eregon/adventofcode/blob/a483e444/2017/20a.rb&quot;&gt;20a.rb&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;3.362&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;3.908&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.545&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;3.071&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot; class=&quot;fast&quot;&gt;-0.291&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;2.170&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot; class=&quot;fast&quot;&gt;-1.192&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/eregon/adventofcode/blob/a483e444/2017/20b.rb&quot;&gt;20b.rb&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;2.100&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;2.394&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.294&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;2.096&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot; class=&quot;fast&quot;&gt;-0.004&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;5.101&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot; class=&quot;slow&quot;&gt;+3.001&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/eregon/adventofcode/blob/a483e444/2017/21.rb&quot;&gt;21.rb&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;3.408&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;3.697&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.289&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;3.886&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.478&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;3.731&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.323&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/eregon/adventofcode/blob/a483e444/2017/22a.rb&quot;&gt;22a.rb&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.063&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.261&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.198&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.167&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.104&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.277&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.214&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/eregon/adventofcode/blob/a483e444/2017/22b.rb&quot;&gt;22b.rb&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;16.493&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;18.182&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot; class=&quot;slow&quot;&gt;+1.689&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;16.893&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.400&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;2.734&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot; class=&quot;fast&quot;&gt;-13.759&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/eregon/adventofcode/blob/a483e444/2017/23a.rb&quot;&gt;23a.rb&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.047&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.205&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.158&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.080&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.033&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.277&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.230&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/eregon/adventofcode/blob/a483e444/2017/23b.rb&quot;&gt;23b.rb&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;4.297&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;3.906&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot; class=&quot;fast&quot;&gt;-0.391&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;2.058&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot; class=&quot;fast&quot;&gt;-2.239&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;0.582&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot; class=&quot;fast&quot;&gt;-3.715&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/eregon/adventofcode/blob/a483e444/2017/24.rb&quot;&gt;24.rb&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;5.726&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;5.899&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.173&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;6.474&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.748&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;1.901&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot; class=&quot;fast&quot;&gt;-3.825&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/eregon/adventofcode/blob/a483e444/2017/25.rb&quot;&gt;25.rb&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;1.980&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;2.094&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;+0.114&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;1.929&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot; class=&quot;fast&quot;&gt;-0.051&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;1.563&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot; class=&quot;fast&quot;&gt;-0.417&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Total&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;&lt;strong&gt;105.068&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;&lt;strong&gt;116.023&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot; class=&quot;slow&quot;&gt;&lt;strong&gt;+10.954&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;&lt;strong&gt;108.203&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot; class=&quot;slow&quot;&gt;&lt;strong&gt;+3.135&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;&lt;strong&gt;40.118&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot; class=&quot;fast&quot;&gt;&lt;strong&gt;-64.950&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;There seems to be essentially 2 categories in these benchmarks.
Scripts which take less than 1 second and on which none of the implementations with a JIT runs faster than MRI trunk.
But the JIT implementations also don’t take more than 1 second, so it’s likely not a big difference to the user.&lt;/p&gt;

&lt;p&gt;For scripts which run for more than 1 second, TruffleRuby Native saves
a significant amount of time (except 20b.rb and 21.rb).
YARV-MJIT and RTL-MJIT achieve some gains on that second category as well,
although they are much more modest.&lt;/p&gt;

&lt;p&gt;Overall, the last line (Total) shows that YARV-MJIT and RTL-MJIT are not improving
the total time needed to run those scripts.
It is a big challenge for JIT compilers to be beneficial on short-running scripts.
However, since TruffleRuby Native gains so much on the second category,
it manages to execute all scripts in less than half the time &lt;code class=&quot;highlighter-rouge&quot;&gt;MRI trunk&lt;/code&gt; takes!&lt;/p&gt;

&lt;h2 id=&quot;analysis&quot;&gt;Analysis&lt;/h2&gt;

&lt;p&gt;All 3 contenders have slower startup than &lt;code class=&quot;highlighter-rouge&quot;&gt;MRI trunk&lt;/code&gt; here.
YARV-MJIT currently has the known problem to &lt;a href=&quot;https://medium.com/@k0kubun/the-method-jit-compiler-for-ruby-2-6-388ee0989c13&quot;&gt;compile a header on every startup and waiting for it&lt;/a&gt;.
It seems RTL-MJIT has the same issue.
TruffleRuby Native currently has to load its core library written in Ruby on startup, which makes it a bit slower than MRI.&lt;/p&gt;

&lt;p&gt;The other issue is warmup.
The approach to shell out to an external compiler and emitting C code (MJIT) is far from
optimal in terms of warmup (how long it takes until the often-executed parts of the program are compiled).
For instance, running &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby --jit --jit-verbose=1 15a.rb&lt;/code&gt; shows that compiling a method with YARV-MJIT takes
at minimum 28ms and the median for all 82 methods compiled is 105ms.&lt;/p&gt;

&lt;p&gt;With TruffleRuby Native, the TruffleRuby interpreter and Graal are compiled ahead-of-time by SubstrateVM to machine code.
That machine code is saved in an executable (called the image).
When starting the executable, we have an already warmed-up TruffleRuby interpreter and calling the JIT compiler is just a method call away.
Since Graal is ahead-of-time compiled it starts compiling faster than on JVM and requires no classloading.
So for instance, &lt;code class=&quot;highlighter-rouge&quot;&gt;graalvm-0.31/bin/ruby --native --native.XX:+TraceTruffleCompilation 15a.rb&lt;/code&gt; shows that Graal takes 11ms to compile the &lt;a href=&quot;https://github.com/eregon/adventofcode/blob/a483e444/2017/15a.rb#L20&quot;&gt;block at line 20&lt;/a&gt;, compared to 70ms for YARV-MJIT.&lt;/p&gt;

&lt;p&gt;On 20b.rb, the slowdown for TruffleRuby seems to be caused by Struct#== using Struct#values,
which is not specialized compared to other Struct methods (it’s a bug, Struct#to_a is specialized).&lt;/p&gt;

&lt;p&gt;Finally, it’s time to consider performance as a whole.
We see that for slightly longer scripts, TruffleRuby can save up to 13 seconds.
The maximum gain for YARV-MJIT is 1 second and for RTL-MJIT 2 seconds.&lt;/p&gt;

&lt;p&gt;For YARV-MJIT, it is still the early days and it does not have many optimizations.
RTL-MJIT has more optimizations, but does not support Ruby inlining currently.
TruffleRuby supports Ruby inlining and also inlining to and from the core library (for both the part written in Ruby and the part written in Java). It even supports inlining Ruby method calls &lt;a href=&quot;http://chrisseaton.com/rubytruffle/cext/&quot;&gt;from C extensions&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;integertimes-and-on-stack-replacement&quot;&gt;Integer#times and On-Stack-Replacement&lt;/h2&gt;

&lt;p&gt;Some programs (particularly short-running ones) are hard to optimize for a JIT compiler.
For instance, let’s take &lt;a href=&quot;https://www.johnhawthorn.com/2018/02/playing-with-ruby-jit-mjit/&quot;&gt;John Hawthorn’s solution&lt;/a&gt; to Day 15:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calculate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40_000_000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16807&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2147483647&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;48271&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2147483647&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xffff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xffff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;result: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calculate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;699&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;124&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s simplify a little bit by removing the Enumerator to understand better what is going on
(the same reasoning applies as &lt;code class=&quot;highlighter-rouge&quot;&gt;count&lt;/code&gt; ends up calling &lt;code class=&quot;highlighter-rouge&quot;&gt;times&lt;/code&gt; with a block, just with more indirections):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calculate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40_000_000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16807&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2147483647&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;48271&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2147483647&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xffff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xffff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;result: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calculate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;699&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;124&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here, we would ideally compile the &lt;code class=&quot;highlighter-rouge&quot;&gt;calculate&lt;/code&gt; method and inline everything called from there.
But that method is only called once.
So by the time the JIT compiler thinks it’s good to compile that method, we will be inside that method, never call it again, and keep executing in the non-compiled code.&lt;/p&gt;

&lt;p&gt;The next best thing is compiling &lt;code class=&quot;highlighter-rouge&quot;&gt;Integer#times&lt;/code&gt;, inlining its block and everything from there.
In TruffleRuby, &lt;code class=&quot;highlighter-rouge&quot;&gt;Integer#times&lt;/code&gt; is defined in Ruby:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Numeric&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_enum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;block_given?&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But we meet the same problem. By the time we figure out this &lt;code class=&quot;highlighter-rouge&quot;&gt;times&lt;/code&gt; method has a loop with many iterations and calls a block (&lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt;) many times,
we will already be in the &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; loop and when we get out the program finishes so we will never use a compiled version of &lt;code class=&quot;highlighter-rouge&quot;&gt;Integer#times&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That’s where On-Stack-Replacement (OSR) comes in.
On-Stack-Replacement enables to compile a loop and jump to the compiled loop from the interpeter.
TruffleRuby can perform On-Stack-Replacement in &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; loops thanks to the support for OSR by Truffle and Graal.&lt;/p&gt;

&lt;p&gt;Once Truffle detects an interpreter iterates in a loop many times (the default threshold is 100 000 loop iterations),
it triggers an OSR compilation of that loop.
Once that compilation finishes, the interpreter jumps in the compiled loop at the next iteration, executing the rest of the loop much faster.&lt;/p&gt;

&lt;p&gt;In this case, this works because &lt;code class=&quot;highlighter-rouge&quot;&gt;Integer#times&lt;/code&gt; is written in Ruby and uses a &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; loop which has OSR support.
In the previous GraalVM version (0.30), &lt;code class=&quot;highlighter-rouge&quot;&gt;Integer#times&lt;/code&gt; was written in Java and did not have OSR support (it would be possible but more complex).
This caused the block given to &lt;code class=&quot;highlighter-rouge&quot;&gt;times&lt;/code&gt; to be compiled but not the loop itself which makes a big difference as calling a block from the interpreter is much slower than an inlined block call.&lt;/p&gt;

&lt;p&gt;When I was playing with &lt;a href=&quot;https://github.com/eregon/adventofcode/commit/51378b18&quot;&gt;my own solution for Day 15&lt;/a&gt;, I tried redefining &lt;code class=&quot;highlighter-rouge&quot;&gt;Integer#times&lt;/code&gt; in Ruby and that alone sped up the execution from 7 seconds to 2 seconds, illustrating the gains of On-Stack-Replacement.
Interesting how defining more in Ruby can actually help performance.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Improving the performance of short-running programs with just-in-time compilers is challenging.&lt;/p&gt;

&lt;p&gt;If the program executes for less than a second, none of the implementations with a JIT compiler managed to gain anything compared to MRI trunk. But, they also all took less than a second, so it probably doesn’t matter much for scripts run only once or a few times.&lt;/p&gt;

&lt;p&gt;For programs running for longer than a second, TruffleRuby Native shows it is possible
to gain a significant amount of time with a Just-In-Time compiler.
This requires fast startup (well below 1 second) and fast warmup (otherwise the program finishes before the compiled code is used).
Of course, the JIT compiler benefits from being more advanced such as supporting inlining and a better understanding of Ruby’s constructs.
In the case of higher-level loops like &lt;code class=&quot;highlighter-rouge&quot;&gt;Integer#times&lt;/code&gt; called only once and with many iterations,
On-Stack-Replacement is important to achieve good performance.&lt;/p&gt;

&lt;p&gt;YARV-MJIT and RTL-MJIT are exciting but still very young JIT compilers for MRI.
Improving warmup while shelling out to GCC (or Clang) is certainly challenging.
Making GCC (or Clang) understand better Ruby constructs is also gonna be interesting.
Let’s see what the future brings.&lt;/p&gt;

&lt;p&gt;If you want to try TruffleRuby Native, you can download GraalVM from &lt;a href=&quot;http://www.oracle.com/technetwork/oracle-labs/program-languages/downloads/index.html&quot;&gt;OTN&lt;/a&gt;.
See &lt;a href=&quot;https://github.com/oracle/truffleruby#getting-started&quot;&gt;Getting Started&lt;/a&gt; for details.
We are working on making it easier to install TruffleRuby (e.g., with rvm/rbenv-install/ruby-install),
but that has not landed yet.&lt;/p&gt;

&lt;p&gt;If you liked this post, consider following &lt;a href=&quot;https://twitter.com/eregontp&quot;&gt;@eregontp&lt;/a&gt; on Twitter for more Ruby, performance and concurrency blog posts.&lt;/p&gt;</content><author><name>Benoit Daloze</name></author><summary type="html">Introduction</summary></entry><entry><title type="html">From an obfuscated Sudoku to Fibers and coroutines</title><link href="http://eregon.me/blog/2018/02/11/trick-sudoku.html" rel="alternate" type="text/html" title="From an obfuscated Sudoku to Fibers and coroutines"><published>2018-02-11T00:00:00+01:00</published><updated>2018-02-11T00:00:00+01:00</updated><id>http://eregon.me/blog/2018/02/11/trick-sudoku</id><content type="html" xml:base="http://eregon.me/blog/2018/02/11/trick-sudoku.html">&lt;p&gt;TRICK is the Transcendental Ruby Imbroglio Contest for RubyKaigi,
a contest for interesting &amp;amp; weird (transcendental, imbroglio) Ruby programs.
I participated in the 2015 edition and won the 4th prize.
In this article I explain my submission and detail interesting facts about it.&lt;/p&gt;

&lt;h2 id=&quot;not-so-obfuscated&quot;&gt;Not so obfuscated&lt;/h2&gt;

&lt;p&gt;This is my submission to &lt;a href=&quot;https://github.com/tric/trick2015&quot;&gt;TRICK 2015&lt;/a&gt;.
It is actually now part of the &lt;a href=&quot;https://github.com/ruby/ruby/tree/trunk/sample/trick2015/eregon&quot;&gt;ruby/ruby&lt;/a&gt; repository, like other winning entries of TRICK.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/eregon/862d9c5c240e7d10b37560ae384ccde4.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;So what is this?
Looks like a Sudoku puzzle in the middle.
Running it shows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;1 9 4 2 3 8 7 6 5
3 7 2 6 5 1 4 8 9
8 5 6 7 4 9 2 3 1
7 8 1 3 6 4 5 9 2
4 2 3 9 7 5 8 1 6
5 6 9 8 1 2 3 7 4
6 4 8 1 2 7 9 5 3
9 3 5 4 8 6 1 2 7
2 1 7 5 9 3 6 4 8

1 9 7 2 3 8 4 6 5
3 4 2 6 5 1 7 8 9
8 5 6 7 4 9 2 3 1
7 1 8 3 6 4 5 9 2
4 2 3 9 7 5 8 1 6
5 6 9 8 1 2 3 7 4
6 8 4 1 2 7 9 5 3
9 3 5 4 8 6 1 2 7
2 7 1 5 9 3 6 4 8&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Which are the 2 solutions to this specific Sudoku puzzle.
Running after changing the puzzle also solves the modified puzzle.
Giving an empty puzzle (all &lt;code class=&quot;highlighter-rouge&quot;&gt;_&lt;/code&gt;), the program will print every possible completed sudoku puzzle.
However, that might take a while.&lt;/p&gt;

&lt;p&gt;So around the puzzle, in 302 characters, must be the code of the Sudoku solver.
Let’s find out!&lt;/p&gt;

&lt;h2 id=&quot;mixing-code-and-data&quot;&gt;Mixing code and data&lt;/h2&gt;

&lt;p&gt;First we would like to separate the code (the solver) and the data (the puzzle).
The first line shows how this is done. Here it is expanded:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vg&quot;&gt;$*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We redefine the &lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt; operator on Strings.
The code is in the String, and the data is the arguments of &lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The data is stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;$*&lt;/code&gt;, a global variable pointing to &lt;code class=&quot;highlighter-rouge&quot;&gt;ARGV&lt;/code&gt;.
So we push rows of digits to &lt;code class=&quot;highlighter-rouge&quot;&gt;ARGV&lt;/code&gt;. Why on earth would we do that?
It’s a code golf technique (minimizing the number of characters in the code) to use an array, without having to declare it (&lt;code class=&quot;highlighter-rouge&quot;&gt;A=[]&lt;/code&gt; takes 4 characters).&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt; operator returns &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;, which is a method call to &lt;code class=&quot;highlighter-rouge&quot;&gt;String#b&lt;/code&gt;, which returns the current String as binary.
This is another code golf technique to return &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt; for Strings but in only 1 character!&lt;/p&gt;

&lt;p&gt;Next we have:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C=Fiber;s=$*;a=*0..8;l=C.new{e&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_&lt;/code&gt; is just a variable assigned to 0 to mark the holes in the puzzle input.
More interesting, the variable &lt;code class=&quot;highlighter-rouge&quot;&gt;z&lt;/code&gt; contains the concatenated code.
And &lt;code class=&quot;highlighter-rouge&quot;&gt;$*&lt;/code&gt; will be a two-dimensional array of the puzzle input.&lt;/p&gt;

&lt;h2 id=&quot;the-expanded-code&quot;&gt;The expanded code&lt;/h2&gt;

&lt;p&gt;Now we can print the code just before it is &lt;code class=&quot;highlighter-rouge&quot;&gt;eval&lt;/code&gt;‘d, add spaces and indent it nicely:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Fiber&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$*&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;no&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;none?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yield&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yield&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resume&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s still quite hard to read.
This is the time to introduce some fun facts about this solver:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The program implements backtracking and keeps state in a very elegant way.&lt;/li&gt;
  &lt;li&gt;The main loop of a program is a dance between cells. On one end is the solutions, on the other the program ends.&lt;/li&gt;
  &lt;li&gt;The program only uses infinite loops and no &lt;code class=&quot;highlighter-rouge&quot;&gt;break&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The whole program never goes deeper than 9 stack frames, but yet can backtrack up to 81 levels!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is interesting because a regular backtracking solver would recurse at least until its search depth, i.e., the number of empty cells in the input.&lt;/p&gt;

&lt;p&gt;There is a big hint up there in line 1: &lt;code class=&quot;highlighter-rouge&quot;&gt;Fiber&lt;/code&gt;.
The solver uses Fibers (Ruby’s coroutines) to solve the Sudoku puzzle,
one Fiber per empty cell.&lt;/p&gt;

&lt;p&gt;Let’s dig further in small steps.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Fiber&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$*&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So &lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt; is just a short name for &lt;code class=&quot;highlighter-rouge&quot;&gt;Fiber&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; is our Sudoku input and &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; is the same as &lt;code class=&quot;highlighter-rouge&quot;&gt;(0..8).to_a&lt;/code&gt;, an Array of integers from 0 to 8 included.&lt;/p&gt;

&lt;p&gt;The next chunk is the list of cells, commented inline:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Fiber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# no more solutions to be found&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# For every empty cell&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Fiber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# create a Fiber&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# try every possibility&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;none?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# if there is no duplicate&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# horizontally&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# vertically&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# in the 3x3 box&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# optimistically set it&lt;/span&gt;
            &lt;span class=&quot;no&quot;&gt;Fiber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# next cell can continue&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# reset to 0 and backtrack&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;Fiber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yield&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Fiber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# the end of the list, we found a solution&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# print it&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Fiber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# and backtrack for more solutions&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note the &lt;code class=&quot;highlighter-rouge&quot;&gt;r * ' '&lt;/code&gt; which is the same as &lt;code class=&quot;highlighter-rouge&quot;&gt;r.join(' ')&lt;/code&gt; to format a row.
On the same line, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&amp;lt; ''&lt;/code&gt; adds an element to the array passed to &lt;code class=&quot;highlighter-rouge&quot;&gt;puts&lt;/code&gt; so we get an empty line between solutions.&lt;/p&gt;

&lt;p&gt;Let’s see how we walk through that list of Fibers:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# start at the first empty cell (0 is end)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# if we succeed, go further&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# if we fail, go back one step&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resume&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;c.resume&lt;/code&gt; returns the value given to &lt;code class=&quot;highlighter-rouge&quot;&gt;Fiber.yield&lt;/code&gt;.
When &lt;code class=&quot;highlighter-rouge&quot;&gt;Fiber.yield&lt;/code&gt; is called without argument, &lt;code class=&quot;highlighter-rouge&quot;&gt;resume&lt;/code&gt; returns &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;.
So we use &lt;code class=&quot;highlighter-rouge&quot;&gt;Fiber.yield&lt;/code&gt; without argument to mean failure and any true value for success.&lt;/p&gt;

&lt;h2 id=&quot;further-optimizations&quot;&gt;Further optimizations&lt;/h2&gt;

&lt;p&gt;Going back to this code a couple of years later, I noticed there are a few ways to make this even better:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There is no need to save the original value of the cell for empty cells, it’s always 0 (already applied in the expanded code to simplify).&lt;/li&gt;
  &lt;li&gt;Using &lt;code class=&quot;highlighter-rouge&quot;&gt;$*&lt;/code&gt; as an empty Array is a neat trick but since we do &lt;code class=&quot;highlighter-rouge&quot;&gt;s = $*&lt;/code&gt; we might as well declare &lt;code class=&quot;highlighter-rouge&quot;&gt;S=[]&lt;/code&gt; and always use &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt;, it’s shorter and clearer.&lt;/li&gt;
  &lt;li&gt;The Fibers could directly &lt;code class=&quot;highlighter-rouge&quot;&gt;resume&lt;/code&gt; the next empty cell’s Fiber and &lt;code class=&quot;highlighter-rouge&quot;&gt;Fiber.yield&lt;/code&gt; would be enough to backtrack,
so there is neither a need for a main loop nor for a list of Fibers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So I could not resist, here is a 2018-refactored version:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PUZZLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;chomp: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:to_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
19___8__5
__2_5__89
8_674____
_____4_92
_23_7_81_
56_8_____
____279_3
93__8_1__
2__5___48
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PUZZLE&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;next_fiber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Fiber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Fiber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yield&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reverse_each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;succ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_fiber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_fiber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Fiber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;none?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
            &lt;span class=&quot;no&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
            &lt;span class=&quot;no&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;no&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;succ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resume&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# We found a digit that works, try the next cell&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;no&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Fiber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yield&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;next_fiber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resume&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;So here it is, a backtracking Sudoku solver never going deeper than 9 stack frames, using only &lt;em&gt;infinite&lt;/em&gt; loops and no &lt;code class=&quot;highlighter-rouge&quot;&gt;break&lt;/code&gt;,
with no state other than a single copy of the puzzle!&lt;/p&gt;

&lt;p&gt;Fibers – Ruby’s coroutines – enable us to avoid keeping explicit state (such as the current digit being tried for an empty cell) and
transparently switch between different tasks, even in the middle of a method or block.
That sounds like concurrency and that’s exactly what Fibers are.
Due to the lack of preemption, they switch on demand and deterministically, which makes it easy to reason about.
Concurrency in this context enables us to structure the program in a new and different way.
Fibers are a very powerful tool and an interesting alternative to solve many problems.&lt;/p&gt;

&lt;p&gt;What do you think? Do you find this solution elegant?&lt;/p&gt;

&lt;p&gt;Maybe this article made you want to use Fibers more?
I got the original idea from an inspiring paper on coroutines:
&lt;a href=&quot;http://www.inf.puc-rio.br/~roberto/docs/MCC15-04.pdf&quot;&gt;Revisiting Coroutines by Ana Lúcia De Moura and 	Roberto Ierusalimschy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you liked this post or got some ideas from it,
consider submitting to &lt;a href=&quot;https://github.com/tric/trick2018&quot;&gt;TRICK 2018&lt;/a&gt;!
The deadline for submissions is March 31, 2018.
The &lt;a href=&quot;https://github.com/tric/trick2018#judges&quot;&gt;judge panel&lt;/a&gt; is very impressive and even includes Matz!&lt;/p&gt;

&lt;h2 id=&quot;bonus&quot;&gt;Bonus&lt;/h2&gt;

&lt;p&gt;Here is an even shorter and cleaner version of the solver, based on &lt;code class=&quot;highlighter-rouge&quot;&gt;@Maumagnaguagno&lt;/code&gt;’s comment:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;next_fiber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Fiber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Fiber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yield&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;succ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_fiber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_fiber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Fiber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;none?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
            &lt;span class=&quot;no&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
            &lt;span class=&quot;no&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;no&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;succ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resume&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# We found a digit that works, try the next cell&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;no&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Fiber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yield&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;next_fiber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resume&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>Benoit Daloze</name></author><summary type="html">TRICK is the Transcendental Ruby Imbroglio Contest for RubyKaigi, a contest for interesting &amp;amp; weird (transcendental, imbroglio) Ruby programs. I participated in the 2015 edition and won the 4th prize. In this article I explain my submission and detail interesting facts about it.</summary></entry></feed>