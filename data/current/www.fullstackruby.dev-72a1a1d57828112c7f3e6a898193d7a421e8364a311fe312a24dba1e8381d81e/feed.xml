<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://bridgetownrb.com/" version="1.1.0">Bridgetown</generator><link href="https://www.fullstackruby.dev/feed.xml" rel="self" type="application/atom+xml"><link href="https://www.fullstackruby.dev/" rel="alternate" type="text/html"><updated>2022-09-07T07:15:59-07:00</updated><id>https://www.fullstackruby.dev/feed.xml</id><title type="html">Fullstack Ruby</title><subtitle>Futuristic #WebDev That‚Äôs Fast and Fun. =&gt; Hashrocket into the future every week and become a wiz at this delightful and powerful language.</subtitle><entry><title type="html">Episode 6: How Do You Manage Ruby Application Dependencies?</title><link href="https://www.fullstackruby.dev/podcast/6/" rel="alternate" type="text/html" title="Episode 6: How Do You Manage Ruby Application Dependencies?"><published>2022-09-07T00:00:00-07:00</published><updated>2022-09-07T00:00:00-07:00</updated><id>repo://posts.collection/_posts/podcast/6.md</id><content type="html" xml:base="https://www.fullstackruby.dev/podcast/6/">&lt;div id=&quot;buzzsprout-player-11276915&quot; style=&quot;margin-bottom:2rem&quot;&gt;&lt;/div&gt;
&lt;script src=&quot;https://www.buzzsprout.com/1895262/11276915-6-how-do-you-manage-ruby-application-dependencies.js?container_id=buzzsprout-player-11276915&amp;amp;player=small&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;Every Ruby web framework has its own way of configuring itself as well as third-party dependencies. In some cases it‚Äôs largely up to you, in other cases it‚Äôs clearly spelled out. There may or may not also be some ‚Äúmagic‚Äù involved in requiring gems added to a Gemfile. As a maintainer of Bridgetown, I‚Äôm currently working through all these issues as I ready the next major release which will feature a brand-new initialization system. Listen to the show to hear a rundown of some of the configuration setups out there and what we‚Äôve chosen to focus on for Bridgetown!&lt;/p&gt;

&lt;h3 id=&quot;links&quot;&gt;Links:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.devjobsscanner.com/blog/top-8-most-demanded-languages-in-2022/&quot;&gt;Top 8 Most Demanded Programming Languages in 2022&lt;/a&gt; (Ruby at #7)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://guides.rubyonrails.org/configuring.html&quot;&gt;Configuring Rails Applications&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roda.jeremyevans.net/rdoc/files/README_rdoc.html#label-Plugins&quot;&gt;How to Create Roda Plugins&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bridgetownrb.com/docs/configuration&quot;&gt;Bridgetown‚Äôs current Configuration/Plugins system&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bridgetown-beta-pr-618.onrender.com/docs/configuration&quot;&gt;Upcoming Bridgetown Initializer-based Configuration&lt;/a&gt; (&lt;a href=&quot;https://github.com/bridgetownrb/bridgetown/pull/618&quot;&gt;GitHub PR&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;https://www.fullstackruby.dev/&quot;&gt;Become a part of the Fullstack Ruby community&lt;/a&gt; and learn how to put your Ruby skills to work on the backend AND the frontend. Know somebody who‚Äôs a JavaScript developer but is interested in learning more about Ruby? Share the site, podcast, or newsletter with them!&lt;/p&gt;

&lt;p&gt;The Fullstack Ruby Podcast is a production of &lt;a href=&quot;https://www.whitefusion.studio/&quot;&gt;Whitefusion&lt;/a&gt;, a boutique web studio based in Portland, OR.&lt;/p&gt;

&lt;p&gt;Theme music courtesy of &lt;a href=&quot;https://www.epidemicsound.com/&quot;&gt;Epidemic Sound&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p class=&quot;has-text-centered&quot; style=&quot;margin-bottom:0.5rem&quot;&gt;&lt;a href=&quot;https://feeds.buzzsprout.com/1895262.rss&quot; class=&quot;button is-primary&quot;&gt;&lt;span&gt;Subscribe to the RSS feed&lt;/span&gt; &lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-rss&quot; style=&quot;color:orange&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;has-text-centered&quot;&gt;in your podcast player of choice.&lt;/p&gt;</content><author><name>Jared White</name></author><category term="Podcast"/><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mugshotbot.com/m?theme=two_up&amp;mode=light&amp;color=8a1024&amp;pattern=diagonal_lines&amp;image=eed29abf&amp;hide_watermark=true&amp;url=https%3A%2F%2Fwww.fullstackruby.dev%2Fpodcast%2F6%2F"/><media:content medium="image" url="https://mugshotbot.com/m?theme=two_up&amp;mode=light&amp;color=8a1024&amp;pattern=diagonal_lines&amp;image=eed29abf&amp;hide_watermark=true&amp;url=https%3A%2F%2Fwww.fullstackruby.dev%2Fpodcast%2F6%2F" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">How to Think Like a Framework Developer</title><link href="https://www.fullstackruby.dev/the-art-of-code/2022/08/21/how-to-think-like-a-framework-developer/" rel="alternate" type="text/html" title="How to Think Like a Framework Developer"><published>2022-08-21T00:00:00-07:00</published><updated>2022-08-21T00:00:00-07:00</updated><id>repo://posts.collection/_posts/2022-08-21-how-to-think-like-a-framework-developer.md</id><content type="html" xml:base="https://www.fullstackruby.dev/the-art-of-code/2022/08/21/how-to-think-like-a-framework-developer/">&lt;p&gt;I‚Äôve always really enjoyed working on frameworks. Not even libraries per se, but &lt;em&gt;frameworks&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I worked on a PHP/JS frontend framework called &lt;a href=&quot;https://web.archive.org/web/20080424113056/http://xajaxproject.org:80/&quot;&gt;Xajax&lt;/a&gt; back in the early 2000s, and then briefly out of that spawned a Rails-like framework called &lt;a href=&quot;https://web.archive.org/web/20061229193905/http://www.willowgarden.org/&quot;&gt;Willowgarden&lt;/a&gt; for the then-new PHP 5.&lt;/p&gt;

&lt;p&gt;Once I officially switched to &lt;strong&gt;Ruby on Rails&lt;/strong&gt;, I never looked back. But one thing that was a bit of a bummer after a while was missing that feeling you get when you‚Äôre building a framework.&lt;/p&gt;

&lt;p&gt;Having now worked a couple years on &lt;a href=&quot;https://www.bridgetownrb.com&quot;&gt;Bridgetown&lt;/a&gt;, I‚Äôm so thankful that I get to work on frameworks as part of my job. But more than that, I‚Äôve discovered over the years that you can learn to think like a framework developer even when you‚Äôre &lt;em&gt;not&lt;/em&gt; directly programming a framework.&lt;/p&gt;

&lt;h3 id=&quot;the-why&quot;&gt;The Why&lt;/h3&gt;

&lt;p&gt;The first question a framework developer always asks when evaluating a new idea, a feature request, an improvement, a refactoring, is &lt;strong&gt;why&lt;/strong&gt;. I don‚Äôt mean a reflexive why, like ‚Äúwhy should we bother looking into this, gosh!‚Äù I mean a long-term, &lt;em&gt;justifying&lt;/em&gt; why which is chiefly concerned with the long-term health of the project.&lt;/p&gt;

&lt;p&gt;When you‚Äôre just banging out feature after feature for a specific application, it‚Äôs easy to get lost in the daily grind. Another ticket on the board. Another comment on an issue. Another meeting. Another sprint. There‚Äôs often little time to reflect on the rationale of the feature you‚Äôre working on, how it might relate to other features already in flight, who is responsible for ensuring the feature‚Äôs stability over time, the downsides of adding the feature (there are always downsides to every new feature), how to document gotchas or architectural dragons lurking due to how the feature gets implemented, etc., etc. And do you even have the time or authority to investigate features you can deprecate or &lt;em&gt;remove&lt;/em&gt;? (&lt;strong&gt;lol&lt;/strong&gt; üòÇ)&lt;/p&gt;

&lt;p&gt;When you‚Äôre working on a framework, you &lt;strong&gt;must&lt;/strong&gt; ask yourself these questions. Architectural integrity, documentation, maintainability, health of the project as a whole‚Äîthose aren‚Äôt secondary concerns compared to feature implementation. &lt;em&gt;Those ARE the concerns!&lt;/em&gt; Feature implementation is subservient to the big picture, and sometimes it‚Äôs perfectly fine‚Äîdesirable even‚Äìto say no.&lt;/p&gt;

&lt;p&gt;I believe most applications would be better served if they were run more like a framework. It might seem at first like the velocity slows &lt;em&gt;way&lt;/em&gt; down, and the pace of feature rollout slows to a trickle. But over time, I‚Äôve become convinced the quality and the stability of the software &lt;em&gt;and&lt;/em&gt; the team building it is greatly increased.&lt;/p&gt;

&lt;p&gt;(I also believe most applications would be better served if they were run like an open source project even if they aren‚Äôt open source, but that‚Äôs a conversation for another day‚Ä¶)&lt;/p&gt;

&lt;h3 id=&quot;the-how&quot;&gt;The How&lt;/h3&gt;

&lt;p&gt;The other main question a framework developer must ask when evaluating an addition or change is &lt;strong&gt;how&lt;/strong&gt;. Now that might seem silly on the face of it. How?!?! By opening your code editor and writing some code! That‚Äôs how! (&lt;strong&gt;Duh.&lt;/strong&gt; üòù)&lt;/p&gt;

&lt;p&gt;What I mean though is how are you going to implement that new feature or make that change &lt;em&gt;in the ‚Äúbest‚Äù way possible&lt;/em&gt; given a wide variety of potential solutions all involving pros and cons which could have long-lasting ramifications for the project as a whole.&lt;/p&gt;

&lt;p&gt;When I‚Äôm in full-blown ‚Äúframework‚Äù mode, I‚Äôll spend a great deal of time toying with the design of a single API. I‚Äôll try out different method names, different class names. I‚Äôll split apart this object from that object. I‚Äôll combine some objects together. I‚Äôll experiment with mixins. I‚Äôll consider metaprogramming. I‚Äôll try using the API as a ‚Äúconsumer‚Äù and see how it feels. I‚Äôll pseudocode a new approach in the consuming app, then backport that into the framework. It might take me hours, days‚Äîeven weeks‚Äîjust to end up with what might be in the end simply a few lines of code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Because it has to feel RIGHT.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It‚Äôs hard to change a framework once a bunch of people already depend on it. You hate to have a horde of angry developers coming after you with pitchforks and torches just because you renamed a method or removed a class. So it‚Äôs really, &lt;em&gt;really&lt;/em&gt;, &lt;strong&gt;REALLY&lt;/strong&gt; important you get things right &lt;em&gt;before&lt;/em&gt; you commit them. It requires a lot of care and finesse. Sometimes you end up having to scrap an entire PR and start over from scratch.&lt;/p&gt;

&lt;p&gt;How many app projects have you been on where the team regularly comes together, evaluates a speculative approach, wonders ‚Äúhmm, not sure if this feels right‚Äù, then decides to completely scrap it and start over? &lt;em&gt;Yeah, me neither.&lt;/em&gt; Maybe when you‚Äôre evaluating a brand-new library or framework or build tool. But day-to-day features? It‚Äôs rare indeed.&lt;/p&gt;

&lt;p&gt;But again, my assertion is that most applications would be better served if they were run more like a framework‚Äîmore tasks that are speculative, concerned primarily with architectural integrity, fully malleable, ready to be tossed out if it feels smelly or overly complex. Because you‚Äôre not just building ‚Äúa pile of features‚Äù or ‚Äúa bag of UI‚Äù. You‚Äôre building a &lt;strong&gt;holistic blueprint&lt;/strong&gt; for comprehensible interactivity and data processing. You need to be able to zoom out to the 20,000 foot level at a moment‚Äôs notice and intuitively ‚Äúgrok‚Äù how all the component parts fit together and why they‚Äôre there and how they operate without too much friction or overlap. And if you can‚Äôt do that, I can almost guarantee you your users won‚Äôt be able to do that either.&lt;/p&gt;

&lt;hr /&gt;

&lt;aside style=&quot;font-family: ui-serif, Georgia, serif; padding: 1em&quot;&gt;
  &lt;p&gt;As an appropriate aside, this is why I enjoy programming &lt;strong&gt;Ruby&lt;/strong&gt; above all else. The Ruby language makes it pleasurable for me to gain an intuitive sense of a fullstack system and how everything operates. I enjoy reading Ruby almost as much as I enjoy writing it! I wouldn‚Äôt say that about many other languages. Most programming languages look fiddly and ugly to me, as if it‚Äôs just line after line of brute-force trying to get the computer to do its tedious little computer-y things. I don‚Äôt want that. üòÖ I want high-level patterns and paradigms and DSLs and declarative syntax and all the rest. Put more responsibility on the computer to figure out the little details under the hood. /rant&lt;/p&gt;
&lt;/aside&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;the-who&quot;&gt;The Who&lt;/h3&gt;

&lt;p&gt;Depending on the project you‚Äôre working on, your experience level, and the dynamics of your team, it may actually be rather challenging to &lt;em&gt;rise&lt;/em&gt; to the level of ‚Äúframework‚Äù developer within the context of your job. You may experience some pushback. You may be thought of as pedantic, even grumpy. I had to apologize just the other day for repeatedly stressing the same points over and over about an architectural concern I had to other folks in the meeting. It was frustrating to feel like I could see something obvious that we‚Äôd all need to come to a clear consensus on before moving forward, yet seemingly nobody else was visualizing that concern.&lt;/p&gt;

&lt;p&gt;All I can tell you is: it‚Äôs worth it to put in that extra effort. Eventually people &lt;em&gt;will&lt;/em&gt; notice. And then instead of simply throwing features over the wall to you and expecting you to blandly implement them, they‚Äôll start asking you &lt;strong&gt;questions&lt;/strong&gt;. And you‚Äôll be able to ask them &lt;strong&gt;questions&lt;/strong&gt; back. And now you have a &lt;strong&gt;dialog&lt;/strong&gt; going about how to improve the long-term quality of your software and your team.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It‚Äôs a beautiful thing.&lt;/strong&gt; &lt;img src=&quot;/images/ruby.svg&quot; width=&quot;14&quot; style=&quot;vertical-align: -0.05em;margin-left: 0.1em&quot; /&gt;&lt;/p&gt;</content><author><name>Jared White</name></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.fullstackruby.dev/images/posts/blocks-everywhere.jpg"/><media:content medium="image" url="https://www.fullstackruby.dev/images/posts/blocks-everywhere.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">Episode 5: Optimized for Programmer Happiness</title><link href="https://www.fullstackruby.dev/podcast/5/" rel="alternate" type="text/html" title="Episode 5: Optimized for Programmer Happiness"><published>2022-06-29T00:00:00-07:00</published><updated>2022-06-29T00:00:00-07:00</updated><id>repo://posts.collection/_posts/podcast/5.md</id><content type="html" xml:base="https://www.fullstackruby.dev/podcast/5/">&lt;div id=&quot;buzzsprout-player-10876603&quot; style=&quot;margin-bottom:2rem&quot;&gt;&lt;/div&gt;
&lt;script src=&quot;https://www.buzzsprout.com/1895262/10876603-5-optimized-for-programmer-happiness.js?container_id=buzzsprout-player-10876603&amp;amp;player=small&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;Ruby is &lt;em&gt;optimized for programmer happiness&lt;/em&gt;. What does that even mean? Which programmer? Whose happiness? What if you use Ruby and aren‚Äôt happy? Does that mean Ruby failed?&lt;/p&gt;

&lt;p&gt;All this and much more to be covered in today‚Äôs episode‚Äînot a deep dive into a technical topic, but a deep dive into the philosophy of programming, the ‚ÄúRuby way‚Äù, OOP, the dangers of monocultures, and the need to recognize implicit biases when engaging in technology debates.&lt;/p&gt;

&lt;h3 id=&quot;links&quot;&gt;Links:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/ruby/comments/viadq5/stack_overflow_developer_survey_2022_results_bad/&quot;&gt;r/ruby thread&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/ruby/comments/viadq5/stack_overflow_developer_survey_2022_results_bad/idtyko3/&quot;&gt;comment about dreading Ruby&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;https://www.fullstackruby.dev/&quot;&gt;Become a part of the Fullstack Ruby community&lt;/a&gt; and learn how to put your Ruby skills to work on the backend AND the frontend. Know somebody who‚Äôs a JavaScript developer but is interested in learning more about Ruby? Share the site, podcast, or newsletter with them!&lt;/p&gt;

&lt;p&gt;The Fullstack Ruby Podcast is a production of &lt;a href=&quot;https://www.whitefusion.studio/&quot;&gt;Whitefusion&lt;/a&gt;, a boutique web studio based in Portland, OR.&lt;/p&gt;

&lt;p&gt;Theme music courtesy of &lt;a href=&quot;https://www.epidemicsound.com/&quot;&gt;Epidemic Sound&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p class=&quot;has-text-centered&quot; style=&quot;margin-bottom:0.5rem&quot;&gt;&lt;a href=&quot;https://feeds.buzzsprout.com/1895262.rss&quot; class=&quot;button is-primary&quot;&gt;&lt;span&gt;Subscribe to the RSS feed&lt;/span&gt; &lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-rss&quot; style=&quot;color:orange&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;has-text-centered&quot;&gt;in your podcast player of choice.&lt;/p&gt;</content><author><name>Jared White</name></author><category term="Podcast"/><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mugshotbot.com/m?theme=two_up&amp;mode=light&amp;color=8a1024&amp;pattern=diagonal_lines&amp;image=eed29abf&amp;hide_watermark=true&amp;url=https%3A%2F%2Fwww.fullstackruby.dev%2Fpodcast%2F5%2F"/><media:content medium="image" url="https://mugshotbot.com/m?theme=two_up&amp;mode=light&amp;color=8a1024&amp;pattern=diagonal_lines&amp;image=eed29abf&amp;hide_watermark=true&amp;url=https%3A%2F%2Fwww.fullstackruby.dev%2Fpodcast%2F5%2F" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">What Would It Take for Roda to Win?</title><link href="https://www.fullstackruby.dev/fullstack-development/2022/06/03/what-would-it-take-for-roda-to-win/" rel="alternate" type="text/html" title="What Would It Take for Roda to Win?"><published>2022-06-03T00:00:00-07:00</published><updated>2022-06-03T00:00:00-07:00</updated><id>repo://posts.collection/_posts/2022-06-03-what-would-it-take-for-roda-to-win.md</id><content type="html" xml:base="https://www.fullstackruby.dev/fullstack-development/2022/06/03/what-would-it-take-for-roda-to-win/">&lt;p&gt;I have a confession to make. I have fallen in love with &lt;a href=&quot;https://roda.jeremyevans.net&quot;&gt;Roda&lt;/a&gt;. What is Roda, you may ask? Well I‚Äôm glad you asked, because I‚Äôm here to tell you all about it. ü§ì&lt;/p&gt;

&lt;p&gt;Roda is a web toolkit‚Äîwhich is basically another way of saying it‚Äôs a web framework. But the reason the author of Roda, Jeremy Evans, likes to call it a toolkit is because it‚Äôs really the thing you use to  &lt;em&gt;construct the thing you need&lt;/em&gt; to build a web application. You start with a toolkit, and end up with a framework: the precise framework your application truly requires.&lt;/p&gt;

&lt;p&gt;Roda‚Äôs stated goals are &lt;strong&gt;simplicity&lt;/strong&gt;, &lt;strong&gt;reliability&lt;/strong&gt;, &lt;strong&gt;extensibility&lt;/strong&gt;, and &lt;strong&gt;performance&lt;/strong&gt;. And those are the very reasons why I have become a Roda stan.&lt;/p&gt;

&lt;p&gt;Let me elaborate.&lt;/p&gt;

&lt;h3 id=&quot;the-barrier-to-entry-is-very-low&quot;&gt;The Barrier to Entry is Very Low&lt;/h3&gt;

&lt;p&gt;In other words, a simple app that you build with Roda is indeed &lt;em&gt;very&lt;/em&gt; simple.&lt;/p&gt;

&lt;p&gt;In fact, the simplest Roda application can &lt;a href=&quot;http://roda.jeremyevans.net/rdoc/files/README_rdoc.html#label-Usage&quot;&gt;fit into a single file&lt;/a&gt;. That‚Äôs how easy it is to get started with Roda. And I love that because so much of my mindset these days, so much of my ethos as a web developer, is trying to find or build tools which are fascinatingly simplistic at first glance. &lt;em&gt;How close can we get to a small file with a little bit of code in it?&lt;/em&gt; Maybe that‚Äôs all you need to do. üòÑ&lt;/p&gt;

&lt;p&gt;I think some of my take on this is born from seeing such momentum in other ecosystems. Over in the world of JavaScript, you‚Äôll quickly discover a shiny new concept called &lt;strong&gt;serverless functions&lt;/strong&gt; which has taken quite a hold in the minds of web developers. If all you need to do is something very straightforward‚Äîan API with a couple of routes perhaps‚Äîyou can write a couple of functions and deploy those files somewhere relevant like Netlify and boom, it just works. You don‚Äôt really have to think about it. You don‚Äôt have to think about stacks and architectures and all these different considerations upfront.&lt;/p&gt;

&lt;p&gt;What &lt;em&gt;I don‚Äôt like&lt;/em&gt; about serverless functions though is it‚Äôs really unclear to me how you move up from there. Sure, the barrier to entry is indeed very low, but how do you grow your architecture into to a much more complicated, fullstack framework approach? And then how portable is that across different platforms and across different kinds of setups? As many of us Rubyists have seen, JavaScript projects tend to mushroom in tooling configuration and build complexity at an alarming rate.&lt;/p&gt;

&lt;p&gt;What I like about Roda is that the mental model you need to get started with fits into that ‚Äúearly stage‚Äù ease of use. The routing blocks within Roda‚Äôs ‚Äúrouting tree‚Äù are so immediately accessible, they look a bit like individual serverless functions‚Äîonly without the serverless, or the functions. üòú In the end, you‚Äôre still just writing Ruby object-oriented code within a traditional Rack-based stack‚Ä¶calling out to plain Ruby objects or other parts of your frameworks like a database ORM or template renderers.&lt;/p&gt;

&lt;h3 id=&quot;roda-doesnt-just-stop-after-simple&quot;&gt;Roda Doesn‚Äôt Just Stop After Simple&lt;/h3&gt;

&lt;p&gt;Before continuing to describe Roda, it should be noted that there‚Äôs another popular, ‚Äúsimple‚Äù Ruby web framework called &lt;a href=&quot;https://github.com/sinatra/sinatra&quot;&gt;Sinatra&lt;/a&gt; with a long and prestigious history. In fact, the &lt;a href=&quot;https://expressjs.com&quot;&gt;Express.js&lt;/a&gt; framework for Node was based on concepts from Sinatra. But the main knock against Sinatra is it‚Äôs not great at scaling up from a simple app to something more ambitious. Conceptual and performance problems begin to ensue. You‚Äôll typically see Rubyists reaching for a more full-featured framework like Rails, or maybe Hanami. There‚Äôs sort of an expectation that Rails and Sinatra don‚Äôt occupy the same ‚Äúspace‚Äù within the tools available.&lt;/p&gt;

&lt;p&gt;Whereas Roda is intended to take you all the way from greenfield starter projects to at least mid-sized, fully-featured web applications. Jeremy Evans has stated as such in the interviews and presentations he‚Äôs given. You don‚Äôt have to jump ship all of a sudden as your app grows and say, ‚Äúoh no, I can‚Äôt use Roda anymore. My application is too complicated. I need to go reach for something else!‚Äù And if you do end up needing to switch frameworks as the project grows, that would likely be considered something to fix in Roda‚Äôs feature set and not at all expected.&lt;/p&gt;

&lt;h3 id=&quot;a-plugin-architecture-so-straightforward-youll-want-to-write-your-own&quot;&gt;A Plugin Architecture So Straightforward, You‚Äôll &lt;em&gt;Want&lt;/em&gt; to Write Your Own&lt;/h3&gt;

&lt;p&gt;Another aspect of Roda I really love is the plugin architecture. It‚Äôs very straightforward. You can start writing your own plugins right away, &lt;em&gt;and you probably will&lt;/em&gt;. Unlike with Rails where I feel like writing a plugin or a gem, well it‚Äôs all a bit messy and complicated. I‚Äôve worked on Rails engines‚ÄîI‚Äôve looked into how other people have written them, I‚Äôve played around with all this stuff over the years‚Äîand sure, I can get it to work in the end but I never feel particularly satisfied with the effort.&lt;/p&gt;

&lt;p&gt;Roda‚Äôs plugin architecture‚Äîwhile encompassing fewer aspects of your overall stack‚Äîto me seems &lt;strong&gt;very obvious and intuitive&lt;/strong&gt;. You can extend the Roda app class itself, extend request objects, extend response objects‚Ä¶every surface area of Roda‚Äôs API is extremely customizable. You can even write plugins which themselves depend on other plugins and extend &lt;em&gt;them&lt;/em&gt; for additional functionality.&lt;/p&gt;

&lt;p&gt;The benefit here is, the more simple it is to get started writing a plugin, &lt;em&gt;the more likely you‚Äôre actually going to do it&lt;/em&gt;. I have a sense that more people who use Roda will end up writing their own Roda plugins, as compared to people using Rails writing their own Rails plugins. I don‚Äôt have any hard proof of that, it‚Äôs just my take on the matter having used Rails heavily for well over a decade.&lt;/p&gt;

&lt;h3 id=&quot;y-u-no-like-rails&quot;&gt;Y U No Like Rails?&lt;/h3&gt;

&lt;p&gt;Speaking of Rails‚Ä¶why even look farther afield at a toolkit like Roda? Why not just stick with Rails and the ‚ÄúRails way‚Äù? Why not just continue to be a Rails developer ? I know Rails up, down, and sideways by now. Why not just keep playing in that sandbox?&lt;/p&gt;

&lt;p&gt;Right off the bat, I want to make it clear I &lt;em&gt;love&lt;/em&gt; many aspects of Rails even now. ActiveRecord is fantastic. (Yes I know‚Ä¶&lt;a href=&quot;http://sequel.jeremyevans.net&quot;&gt;Sequel&lt;/a&gt; is a thing. But AR fits my brain like a glove. I‚Äôm just so used to it.). ActiveSupport‚Äîdespite the grumblings of well-meaning Ruby OOP purists out there‚ÄîI believe is a major selling point of Rails and Ruby in general. And even with everything I said above regarding plugins, it is indeed impressive that there seems to be a Rails plugin gem out there for just about &lt;em&gt;anything and everything&lt;/em&gt; you‚Äôd ever need to build a sophisticated web application.&lt;/p&gt;

&lt;p&gt;But at this point in time, the ‚ÄúVC‚Äù of MVC in Rails (&lt;a href=&quot;https://www.fullstackruby.dev/podcast/4/&quot;&gt;you can listen to my recent podcast episode about MVC for background context&lt;/a&gt;) feels weak to me. It really feels aging to be quite honest. There has not been any real innovation or change around that part of Rails since the beginning of the framework. The routes file, controllers, actions, ERB views, helpers, partials‚Äîall nearly untouched in two decades! (Hotwire/Turbo is the first &lt;em&gt;real&lt;/em&gt; update to any of this in some time, and honestly while it‚Äôs pretty cool at first glance, it also feels a little bolted on and limitations abound. Hence the need to reach for, say, &lt;a href=&quot;https://cableready.stimulusreflex.com/v/v5/&quot;&gt;CableReady&lt;/a&gt;. But I digress‚Ä¶)&lt;/p&gt;

&lt;p&gt;The vanilla stack of Rails‚Äîthe ‚ÄúRails way‚Äù‚Äîwhen it comes to the basic request/response cycle and rendering views, well I just have a lot of complaints with it at this point. For simple actions, there‚Äôs &lt;em&gt;way too much ceremony&lt;/em&gt; for seemingly little gain. There‚Äôs what I call &lt;strong&gt;an unquestioning adherence to the HTTP-inspired REST concept&lt;/strong&gt;.  As much as I do like REST overall, and as much as I would defend REST against competitors such as GraphQL, I also feel like I‚Äôve seen a lot of what I would call ‚ÄúREST-induced Design Damage‚Äù (to take a page out of DHH‚Äôs playbook regarding &lt;a href=&quot;https://dhh.dk/2014/test-induced-design-damage.html&quot;&gt;Test-induced Design Damage&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I‚Äôve seen &lt;strong&gt;REST-induced Design Damage&lt;/strong&gt; in projects time and again, where everything you do throughout the entire app somehow has to fit into this concept of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Go into the routes file and create a new resource endpoint&lt;/li&gt;
  &lt;li&gt;Go create a new controller for that endpoint&lt;/li&gt;
  &lt;li&gt;Now you have to create the actions of the controller, like the index action and the show action and the new and the edit and the whatever&lt;/li&gt;
  &lt;li&gt;Now you have to create the views of the actions of the controller of the endpoint üò∞&lt;/li&gt;
  &lt;li&gt;Now you have to create the partials of the forms and the models for the views of the actions of the‚Ä¶OMG üò±&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I feel like all those bits of architecture are increasingly a total mismatch &lt;em&gt;with what I‚Äôm actually trying to do&lt;/em&gt;. I‚Äôve talked before about the rise of ‚Äúcomponent-based view architectures‚Äù, and more and more I‚Äôm finding that I want to orient a lot of my application architecture around what I might label ‚Äúgroupings of component-trees + state‚Äù ‚Äî rather than HTTP resources with controllers and subsequent page templates associated with those controllers and those controller actions. There‚Äôs so much ceremony to get to the point where all I really want is to have this tree of components for some specific part of my application, and within that tree of components there are various well-defined components which might have their own individual lifecycles on both the server and the client.&lt;/p&gt;

&lt;p&gt;You can think of this as &lt;a href=&quot;https://jasonformat.com/islands-architecture/&quot;&gt;islands architecture&lt;/a&gt; if you want, or perhaps ‚Äúnested layouts‚Äù. Some JavaScript frameworks lately have promoted nested layouts as a fundamental building block of the view layer: you have a main layout for your application or a big section of your application, and then it breaks out into sub-layouts, and those sub-layouts have their own sub-layouts. All these different layouts and sub-layouts have their own lifecycles essentially, and as a user, you‚Äôre performing interactions within these sub-layouts and those interactions need to update state on the backend and then reflect that state back on the frontend and so forth.&lt;/p&gt;

&lt;p&gt;However you want to slice it, I really feel like component-based view architecture has rejiggered how we think of the architecture of a web application, and HTTP resources via REST and the controllers and the views associated with them that you see in the vanilla Rails stack is sort of at odds with those ideas. Even while Turbo Frames and Streams start to break apart the traditional concepts of Rails views, &lt;strong&gt;they don‚Äôt go nearly far enough&lt;/strong&gt;. As I‚Äôve stated, they feel sort of tacked-on to Rails, &lt;em&gt;rather than Rails being fully-rearchitected&lt;/em&gt; to support Turbo concepts from the bottom to the top of the stack.&lt;/p&gt;

&lt;p&gt;Something that‚Äôs emblematic of Rails‚Äô ‚Äúviews malaise‚Äù, and honestly it continues to trouble me to this day, is the whole ViewComponent fiasco. When GitHub came up with their &lt;a href=&quot;https://viewcomponent.org&quot;&gt;ViewComponent&lt;/a&gt; library, it seemed right at first like it would be folded directly into Rails. In fact it was originally called &lt;code class=&quot;highlighter-rouge&quot;&gt;ActionView::Component&lt;/code&gt;. Wow! Rails would gain the idea of creating new isolated, previewable, testable components for views! &lt;strong&gt;Progress!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And then, &lt;em&gt;thud&lt;/em&gt;. From what I can gather, GitHub backed out of the merger at the behest of Basecamp/DHH. View components did &lt;em&gt;not&lt;/em&gt; become part of vanilla Rails. And in my opinion, the impulse to refuse something like components entering the Rails lexicon is &lt;strong&gt;very troubling&lt;/strong&gt;. Instead of seeing innovation, we saw entrenchment. In the web industry today where frontend UI design is quite literally &lt;em&gt;all about components&lt;/em&gt;, Rails has become a dinosaur by comparison.&lt;/p&gt;

&lt;p&gt;(One thing Rails &lt;em&gt;did&lt;/em&gt; do right is it added the ability for any third-party component system to exist by augmenting the &lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt; method within views. So by calling &lt;code class=&quot;highlighter-rouge&quot;&gt;render any_ruby_object_here&lt;/code&gt; in a view, the &lt;code class=&quot;highlighter-rouge&quot;&gt;render_in&lt;/code&gt; method of the Ruby object gets called automatically with the view context as the first argument and an optional block to capture. This is such a powerful concept, we adopted the &lt;code class=&quot;highlighter-rouge&quot;&gt;render_in&lt;/code&gt; convention for Bridgetown‚Äôs view layer. At this point, &lt;strong&gt;I think it should be considered a standard convention across the Ruby ecosystem&lt;/strong&gt;.)&lt;/p&gt;

&lt;p&gt;All right, so that‚Äôs my take on Rails, but‚Ä¶&lt;strong&gt;what does any of this have to do with Roda?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well, it‚Äôs true that Roda &lt;em&gt;also doesn‚Äôt offer&lt;/em&gt; any of this componentized view architecture stuff I‚Äôm talking about. But the thing about Roda is it‚Äôs &lt;strong&gt;extremely extensible&lt;/strong&gt;. Out of the box, it doesn‚Äôt even have a view layer! You have to load the &lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt; plugin explicitly, by choice. Which means‚Ä¶there‚Äôs literally nothing stopping you from &lt;em&gt;building your own view layer&lt;/em&gt; for Roda to your exact specifications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And that‚Äôs exactly what we did for Bridgetown‚Äôs Roda integration.&lt;/strong&gt; Bridgetown‚Äôs own &lt;a href=&quot;https://edge.bridgetownrb.com/docs/template-engines&quot;&gt;view layer&lt;/a&gt;, including &lt;a href=&quot;https://edge.bridgetownrb.com/docs/components&quot;&gt;components&lt;/a&gt;‚Äîeven &lt;a href=&quot;https://edge.bridgetownrb.com/docs/components/lit&quot;&gt;Lit-based web components&lt;/a&gt;!‚Äîbecomes Roda‚Äôs view layer. More on that in just a moment.&lt;/p&gt;

&lt;h3 id=&quot;the-need-for-roda-distributions&quot;&gt;The Need for Roda Distributions&lt;/h3&gt;

&lt;p&gt;To recap, I really love Roda due to its stated goals: &lt;strong&gt;simplicity&lt;/strong&gt;, &lt;strong&gt;reliability&lt;/strong&gt;, &lt;strong&gt;extensibility&lt;/strong&gt;, and &lt;strong&gt;performance&lt;/strong&gt;. I‚Äôve been using Roda (along with Bridgetown) to date for a variety of simple apps, and there‚Äôs also a more complicated app in the works that‚Äôs not publicly available at the moment‚Äîa port of a ‚Äúnewsfeed reader‚Äù app I originally wrote in Rails. I brought a lot of the concepts from the original Rails app over to a new Roda application which is part of a Bridgetown installation overall, and so far it‚Äôs a pretty sweet setup. Hoping to open source it later this year‚Ä¶&lt;/p&gt;

&lt;p&gt;So while I personally haven‚Äôt yet written a ‚Äúlarge‚Äù application in Roda, I can see the path forward. I‚Äôve done enough experimenting at this point to know what I would do, how all the pieces would fit together.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But therein lies the rub.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can get started using Roda, and simple things are indeed simple, &lt;em&gt;but which Roda will you end up with in the end?&lt;/em&gt; Eventually you‚Äôll need what I call a ‚Äúdistribution of Roda‚Äù. You‚Äôll need your application‚Äôs ‚Äúfullstack framework‚Äù set up in a particular manner. Merely using ‚Äúpure Roda‚Äù by itself, without any configured plugins or extra configuration, is not enough to actually create a fully-featured web application with a lot of complexity. In fact the documentation makes that point abundantly clear. It‚Äôs by design: instead of starting with a huge framework with a plethora of various sub-frameworks configured and set up waiting for you to maybe use one day (aka Rails), you can start out with a &lt;em&gt;much simpler architecture&lt;/em&gt; and then slowly build things up bit by bit over time.&lt;/p&gt;

&lt;p&gt;Nevertheless, you‚Äôll probably want to look at some kind of ‚Äúdistribution‚Äù or starter kit or example stack or whatever to get a sense of what‚Äôs possible and avoid reinventing the wheel. Jeremy Evans promotes &lt;a href=&quot;https://github.com/jeremyevans/roda-sequel-stack&quot;&gt;an example stack of a Roda application&lt;/a&gt; which features multiple route files and a database configuration via Sequel and live reloading when files change and various view templates set up and all that. But‚Ä¶it‚Äôs an &lt;em&gt;opinionated&lt;/em&gt; take on a canonical Roda stack, and &lt;strong&gt;I don‚Äôt necessarily agree with those opinions&lt;/strong&gt;. I have my own distribution of Roda if you will, and &lt;strong&gt;that‚Äôs essentially what Bridgetown is turning into&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Roda is so malleable, you can take it in any number of directions in terms of architecture‚Äîparticularly on the view side which is where my primary interest lies. You &lt;em&gt;can&lt;/em&gt; push it in the direction of a Rails-style architecture, sure. &lt;strong&gt;Or you can push it in an entirely different direction.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;bridgetowns-spin-on-roda&quot;&gt;Bridgetown‚Äôs Spin on Roda&lt;/h3&gt;

&lt;p&gt;What I‚Äôm trying to do as I work on &lt;a href=&quot;https://edge.bridgetownrb.com/docs/routes&quot;&gt;the integration of Roda into Bridgetown&lt;/a&gt; is that when you create a Bridgetown site, you‚Äôre also creating a Roda application. It‚Äôs the culmination of what I‚Äôve been calling the &lt;strong&gt;DREAMstack&lt;/strong&gt; (Delightful Ruby Expressing APIs &amp;amp; Markup), where you can start with a very simple website containing just a few static pages with Markdown content or whatever, and &lt;em&gt;then&lt;/em&gt; you can start to mix in more advanced component trees‚Äî‚Äùislands‚Äù‚Äîusing a combination of Ruby components and web components, and &lt;em&gt;then on top of that&lt;/em&gt; write corresponding backend code with this ‚Äúnot-serverless-functions-but-they-look-kinda-like-serverless functions‚Äù paradigm that Roda affords.&lt;/p&gt;

&lt;p&gt;This way you have a &lt;strong&gt;clear path&lt;/strong&gt; for starting simple and then scaling up to more sophisticated, interactive, large applications. It‚Äôs an entire spectrum of tooling at your fingertips. We can even pull in ‚Äúbits‚Äù of Rails as needed where it makes total sense. (As I previously mentioned, ActiveRecord remains to this day my ORM of choice!)&lt;/p&gt;

&lt;p&gt;While the &lt;a href=&quot;https://edge.bridgetownrb.com/docs/routes#file-based-dynamic-routes&quot;&gt;dynamic file-based routing system&lt;/a&gt; we‚Äôve provided in Bridgetown is a pretty great way to get started with server-based routes after working with static resources, something I‚Äôve recently started to experiment with‚Äîwhich is perhaps a bit bonkers but it‚Äôs all in the interest of collapsing layers and reducing conceptual complexity‚Äîis instead of defining a new Roda route/file and then in that route saying ‚Äúoh, now I want to render out this particular component‚Äù ‚Ä¶what if a component &lt;em&gt;itself&lt;/em&gt; could have a Roda route associated with it?  Within that route you could update state, talk to a database, whatever you need to do, and then just immediately re-render the component via that route and update the frontend instantly. (In case you‚Äôre starting to think I‚Äôm nuts here, &lt;a href=&quot;https://github.com/joshleblanc/view_component_reflex&quot;&gt;there‚Äôs prior art for this very concept&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;Listen, I‚Äôm not saying you would &lt;em&gt;always&lt;/em&gt; want to do this. I‚Äôm not saying it would fit every feature. I‚Äôm not saying it‚Äôs inherently a good idea compared to all other approaches you might attempt within your architecture. But the point is to strive to innovate and to &lt;em&gt;think of views in terms of islands&lt;/em&gt;, and within those islands you have various component trees, and some of those components could be Ruby-based and others JavaScript/web component-based and still others a hybrid of the two, and &lt;strong&gt;they all potentially have their own backend/frontend interactive rendering lifecycles&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;There‚Äôs so much you can do now as part of a truly componentized view architecture.&lt;/strong&gt; And I don‚Äôt want to just bolt this on top of a traditional Ruby framework. &lt;strong&gt;I want to have a framework which feels like it was invented in the age of components.&lt;/strong&gt; My hope is that Bridgetown will endeavor to push the envelope in this area over the next several months and even years.&lt;/p&gt;

&lt;h3 id=&quot;so-what-would-it-take-for-roda-to-win&quot;&gt;So What Would It Take for Roda to Win?&lt;/h3&gt;

&lt;p&gt;OK, I fully admit the title of this article is tongue-in-cheek. I don‚Äôt think Roda has to or should ‚Äúwin‚Äù‚Äîbut neither do I think any other framework should win! That said, I do want to see the Roda community grow and thrive. I want to see more examples out in the wild, more plugins, more ‚Äúdistributions‚Äù. &lt;strong&gt;Let a hundred flowers bloom.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As Ruby web developers, we need‚Äînay, deserve‚Äîa more vibrant set of choices. As much as Rails domination within the Ruby web community has produced a ton of good things and plenty of good side effects. I also think it has sometimes limited thinking, limited innovation‚Äîparticularly on the frontend side of things. And the problem with that is it‚Äôs going to cause certain types of developers to give up on Ruby or not even give it a close look. Someone who‚Äôs super into frontend development, who‚Äôs super into some of the ways that JavaScript frameworks work today, if you just hand them a traditional Rails architecture and say ‚Äúhey, here‚Äôs Rails, use Rails, learn Ruby, it‚Äôs cool‚Äù‚Äîthey‚Äôre going to take one look at it and go &lt;em&gt;blegh&lt;/em&gt;. Not trying to be overly dramatic here, but I really think Rails can be its own worst enemy sometimes. As a Rubyist, &lt;strong&gt;I‚Äôd love to see a much broader range of thinking&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;What does ‚Äúmodern‚Äù web architecture look like right now, today? What &lt;em&gt;could&lt;/em&gt; it look like? What might work differently? What might be best left untouched? (If it ain‚Äôt broke, don‚Äôt fix it!) In other words, start from lofty end goals and blue-sky thinking, and then &lt;em&gt;work backwards&lt;/em&gt; to create the sorts of frameworks that we need now and into the future.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;That‚Äôs essentially what I‚Äôm trying to do with the Bridgetown + Roda distribution.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;But I‚Äôll be honest. For certain kinds of applications. I‚Äôm sure it‚Äôs going to be ludicrous. It would be &lt;em&gt;absurd&lt;/em&gt; to use Bridgetown + Roda for that particular app. That‚Äôs fine. I have no problem with that. Use ‚Äúvanilla‚Äù Roda. Use Rails. Heck, use Hanami! Go for it. That‚Äôs totally fine.&lt;/p&gt;

&lt;p&gt;I do fervently believe however there are other classes of applications, particularly websites which have public-facing, content-heavy aspects to them, where I feel like using Rails or some other traditional framework or even vanilla Roda would be totally ill suited to that. I think there‚Äôs a &lt;strong&gt;substantial niche&lt;/strong&gt; where the Bridgetown + Roda distribution with its very specific feature set might prove to be &lt;em&gt;an ideal solution&lt;/em&gt; for those particular projects. Educational sites with paywalls. E-commerce solutions. News/social/publishing apps. Listing-style sites with lots of forms. Live dashboards acting upon disparate datasets. Marketing sites with a tight coupling to advanced headless CMSes. I could go on!&lt;/p&gt;

&lt;p&gt;(However, if you‚Äôre looking to build a straight-up SaaS app or platform for a well-defined industry‚Ä¶&lt;strong&gt;Rails&lt;/strong&gt;. Always‚Ä¶and maybe forever. For what Rails is best at, &lt;strong&gt;it remains the undefeated champion&lt;/strong&gt;.)&lt;/p&gt;

&lt;p&gt;Whichever framework you end up using, at the end of the day &lt;strong&gt;I hope it‚Äôs built on top of Ruby&lt;/strong&gt;. That‚Äôs always the primary consideration for me. Over time, it‚Äôs not that I want to see Roda ‚Äúsupplant‚Äù Rails and or even take a larger slice of the same-sized pie. &lt;strong&gt;I want to see Roda (and Bridgetown too) help grow the pie entirely.&lt;/strong&gt; I want to see Ruby-based technologies reach into farther corners of the overall web industry.&lt;/p&gt;

&lt;p&gt;I believe it‚Äôs possible. Do you? &lt;img src=&quot;/images/ruby.svg&quot; width=&quot;14&quot; style=&quot;vertical-align: -0.05em;margin-left: 0.1em&quot; /&gt;&lt;/p&gt;</content><author><name>Jared White</name></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.fullstackruby.dev/images/posts/light-trails.jpg"/><media:content medium="image" url="https://www.fullstackruby.dev/images/posts/light-trails.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">Episode 4: Design Patterns on the Frontend, History of MVVM, Web Components, and You</title><link href="https://www.fullstackruby.dev/podcast/4/" rel="alternate" type="text/html" title="Episode 4: Design Patterns on the Frontend, History of MVVM, Web Components, and You"><published>2022-04-18T00:00:00-07:00</published><updated>2022-04-18T00:00:00-07:00</updated><id>repo://posts.collection/_posts/podcast/4.md</id><content type="html" xml:base="https://www.fullstackruby.dev/podcast/4/">&lt;div id=&quot;buzzsprout-player-10459102&quot; style=&quot;margin-bottom:2rem&quot;&gt;&lt;/div&gt;
&lt;script src=&quot;https://www.buzzsprout.com/1895262/10459102-4-design-patterns-on-the-frontend-history-of-mvvm-web-components-and-you.js?container_id=buzzsprout-player-10459102&amp;amp;player=small&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;Design patterns on the frontend: this is a subject far too little discussed from what I can tell, yet with a fundamental awareness and regular usage of design patterns, you can dramatically uplevel your frontend code. Rubyists in particular will have a major leg up here over devs coming from communities which are more FP (functional programming) in nature,¬†&lt;em&gt;because the view layer of the web is inherently object-oriented&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Ruby developers are well-trained in the ways of object-oriented programming and using design patterns. This is probably why many Rubyists instinctively look askance at certain modern paradigms of frontend programming. It‚Äôs overly complicated, poorly architected, and rarely understood from a proper OOP perspective. You view source on many websites and it‚Äôs ‚Äúdiv tag soup‚Äù. It‚Äôs a nightmare. You look at how people will write heaps of functional React components, and it‚Äôs a buggy spaghetti code mess.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Well guess what? We can change all that.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Web components, and simple libraries like Lit‚Äîcombined with an understanding of how the DOM works natively plus MVVM (Model-View-ViewModel)‚Äîlets us reason about our frontend in similar ways to how we reason about the backend using the OOP paradigm. A web component is simply the ‚ÄúVM‚Äù of MVVM, and you easily add in the V part via a declarative template library or just manipulate the DOM (that is, the View) directly in an imperative fashion.&lt;/p&gt;

&lt;p&gt;So Rubyists, stop feeling like the frontend is out to get you, or you need to avoid it, or contain it. Embrace it! The frontend can be just as fun and rewarding as the backend‚Äîif you know what to do with it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CORRECTION:&lt;/strong&gt;¬†in the recording I said Stimulus doesn‚Äôt provide view bindings. That‚Äôs not actually true ‚Äî you can use data-action attributes so that the events triggered get handled by the controller. However, you can‚Äôt bind reactive data back into the template. You get targets of course, but it‚Äôs entirely up to you how you make use of those targets to update the DOM via your Stimulus controller.&lt;/p&gt;

&lt;h3 id=&quot;links&quot;&gt;Links:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel&quot;&gt;Model‚Äìview‚Äìviewmodel - Wikipedia&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Model ‚Üê (from server connection or client data store) ‚Üí ViewModel ‚Üê (bindings) ‚Üí View&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Knockout_(web_framework)&quot;&gt;Knockout (web framework) - Wikipedia&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components&quot;&gt;Web Components - MDN&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://lit.dev/&quot;&gt;Lit: Simple. Fast. Web Components.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Article:¬†&lt;a href=&quot;https://dev.to/jaredcwhite/html-is-a-serialized-object-graph-and-that-changes-everything-4kbl&quot;&gt;HTML is a Serialized Object Graph&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;https://www.fullstackruby.dev/&quot;&gt;Become a part of the Fullstack Ruby community&lt;/a&gt; and learn how to put your Ruby skills to work on the backend AND the frontend. Know somebody who‚Äôs a JavaScript developer but is interested in learning more about Ruby? Share the site, podcast, or newsletter with them!&lt;/p&gt;

&lt;p&gt;The Fullstack Ruby Podcast is a production of &lt;a href=&quot;https://www.whitefusion.studio/&quot;&gt;Whitefusion&lt;/a&gt;, a boutique web studio based in Portland, OR.&lt;/p&gt;

&lt;p&gt;Theme music courtesy of &lt;a href=&quot;https://www.epidemicsound.com/&quot;&gt;Epidemic Sound&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p class=&quot;has-text-centered&quot; style=&quot;margin-bottom:0.5rem&quot;&gt;&lt;a href=&quot;https://feeds.buzzsprout.com/1895262.rss&quot; class=&quot;button is-primary&quot;&gt;&lt;span&gt;Subscribe to the RSS feed&lt;/span&gt; &lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-rss&quot; style=&quot;color:orange&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;has-text-centered&quot;&gt;in your podcast player of choice.&lt;/p&gt;</content><author><name>Jared White</name></author><category term="Podcast"/><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mugshotbot.com/m?theme=two_up&amp;mode=light&amp;color=8a1024&amp;pattern=diagonal_lines&amp;image=eed29abf&amp;hide_watermark=true&amp;url=https%3A%2F%2Fwww.fullstackruby.dev%2Fpodcast%2F4%2F"/><media:content medium="image" url="https://mugshotbot.com/m?theme=two_up&amp;mode=light&amp;color=8a1024&amp;pattern=diagonal_lines&amp;image=eed29abf&amp;hide_watermark=true&amp;url=https%3A%2F%2Fwww.fullstackruby.dev%2Fpodcast%2F4%2F" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">Transform Your Data Object-Oriented Style with Formatters</title><link href="https://www.fullstackruby.dev/object-orientation/2022/04/17/transform-your-data-with-oop-formatter-pattern/" rel="alternate" type="text/html" title="Transform Your Data Object-Oriented Style with Formatters"><published>2022-04-17T00:00:00-07:00</published><updated>2022-04-17T00:00:00-07:00</updated><id>repo://posts.collection/_posts/2022-04-17-transform-your-data-with-oop-formatter-pattern.md</id><content type="html" xml:base="https://www.fullstackruby.dev/object-orientation/2022/04/17/transform-your-data-with-oop-formatter-pattern/">&lt;p&gt;I admit it. I‚Äôm a design pattern nerd. I‚Äôve been a massive fan of object-oriented design patterns ever since I read &lt;a href=&quot;https://www.martinfowler.com/books/eaa.html&quot;&gt;Patterns of Enterprise Application Architecture&lt;/a&gt; in the mid-2000s. One of the aspects which first drew me to Ruby, via Rails, was the in-depth adoption of so many of these patterns and how easy it is to write elegant Ruby code using OOP (Object-Oriented Programming) design patterns.&lt;/p&gt;

&lt;p&gt;Today, we‚Äôll talk about a variant of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Template_method_pattern&quot;&gt;Template Method design pattern&lt;/a&gt; I‚Äôve used in a number of scenarios. I don‚Äôt know of a formal name for this pattern, so I like to call it the Formatter pattern. By executing a sequence of formatters, you achieve a process which I think of as a &lt;strong&gt;data pipeline&lt;/strong&gt;. The data pipeline itself can also be represented as an object.&lt;/p&gt;

&lt;p&gt;(At first glance, you might think this pattern is better described as a &lt;a href=&quot;https://en.wikipedia.org/wiki/Chain-of-responsibility_pattern&quot;&gt;Chain of Responsibility&lt;/a&gt;, but that pattern is better suited to cases where each link in the chain should determine whether it can handle all processing and stop, or pass some of the processing directly on to the next link in the chain.)&lt;/p&gt;

&lt;h3 id=&quot;perfect-for-refactors&quot;&gt;Perfect for Refactors&lt;/h3&gt;

&lt;p&gt;The Formatter pattern is so useful that I recently refactored a huge ‚Äúspaghetti function‚Äù in a TypeScript (yes, &lt;em&gt;that&lt;/em&gt; TypeScript) codebase to use this OOP pattern instead. The number of bugs and ‚Äúgotchas‚Äù working with that part of the codebase plummeted to nearly zero‚Äî&lt;em&gt;and&lt;/em&gt; we were able to write unit tests for each formatter in the pipeline to verify the data transformations therein.&lt;/p&gt;

&lt;p&gt;It‚Äôs safe to say that you wouldn‚Äôt necessarily reach for the Formatter pattern the moment you need to author a sequence of steps to transform some data. Rather, you‚Äôd start by writing your code in a simple linear fashion, and then as you slowly begin to realize your process is turning into a &lt;a href=&quot;https://en.wikipedia.org/wiki/Big_ball_of_mud&quot;&gt;big ball of mud&lt;/a&gt;, it‚Äôs time to refactor. (&lt;a href=&quot;/the-art-of-code/2022/02/11/dry-doey-dont-overexert-yourself/&quot;&gt;Remember DOEY!&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; fans of functional programming, you‚Äôll probably want to leave now. This pattern encompasses everything you &lt;em&gt;don‚Äôt&lt;/em&gt; like about object-oriented programming: abstract classes, inheritance, encapsulation, mutation, and polymorphism. So don‚Äôt &lt;strong&gt;at&lt;/strong&gt; me‚Äîyou‚Äôve been warned!&lt;/p&gt;

&lt;h3 id=&quot;the-format-of-formatters&quot;&gt;The Format of Formatters&lt;/h3&gt;

&lt;p&gt;Formatters in a particular data pipeline all inherit from a base class. Let‚Äôs create a new &lt;code class=&quot;highlighter-rouge&quot;&gt;ExampleFormatters&lt;/code&gt; Ruby module to house our &lt;code class=&quot;highlighter-rouge&quot;&gt;Base&lt;/code&gt; class and future subclasses:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ExampleFormatters&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Base&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:data&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Method should be implemented in subclass&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can name the &lt;code class=&quot;highlighter-rouge&quot;&gt;format&lt;/code&gt; method however you wish‚Äîperhaps in your case &lt;code class=&quot;highlighter-rouge&quot;&gt;convert&lt;/code&gt; would be more appropriate. At any rate, the idea here is you pass a data object of some type into your initializer, and then by calling the &lt;code class=&quot;highlighter-rouge&quot;&gt;format&lt;/code&gt; method, a transformation would occur for that data. Let‚Äôs implement a subclass to see this in action (and let‚Äôs assume the data object is a &lt;code class=&quot;highlighter-rouge&quot;&gt;Hash&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ExampleFormatters&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TitleFormatter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# ensure the title string is in Title Case&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;capitalize&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now let‚Äôs call this formatter with some data:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;hsh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;title: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello   world!&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ExampleFormatters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TitleFormatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hsh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;data&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; {:title=&amp;gt;&quot;Hello World!&quot;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that we‚Äôre not returning a copy of the data object. We‚Äôre mutating the data in-place. This is by design (generally better performance and lower memory usage). So in the above example, both &lt;code class=&quot;highlighter-rouge&quot;&gt;hsh&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt;‚Äôs return value are equivalent after running the formatter. If you need to preserve the original state of the data, you should ensure you make a duplicate object before passing that along to the formatters‚Äîperhaps in the data pipeline (described further below).&lt;/p&gt;

&lt;p&gt;This is the most basic example of how to write a formatter. However, you might want to add a bit of smarts, such that you can‚Äôt run &lt;code class=&quot;highlighter-rouge&quot;&gt;format&lt;/code&gt; more than once on the same dataset. We can change our base class then to this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ExampleFormatters&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Base&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:data&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@already_formatted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_data&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@already_formatted&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Cannot run formatter a second time on the same dataset.&quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
      &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;

      &lt;span class=&quot;vi&quot;&gt;@already_formatted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;

      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;kp&quot;&gt;protected&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Method should be implemented in subclass&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now refactor your subclasses to override &lt;code class=&quot;highlighter-rouge&quot;&gt;process&lt;/code&gt; rather than &lt;code class=&quot;highlighter-rouge&quot;&gt;format&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ExampleFormatters&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TitleFormatter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# keep `process` hidden from the public API:&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# ensure the title string is in Title Case&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;capitalize&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will ensure you can only run &lt;code class=&quot;highlighter-rouge&quot;&gt;format&lt;/code&gt; once on the same data. In order to run it again, you‚Äôll need to use &lt;code class=&quot;highlighter-rouge&quot;&gt;formatter.data = some_new_data&lt;/code&gt; to reset the process.&lt;/p&gt;

&lt;p&gt;One reason it‚Äôs so nice to have a base class from which to inherit is you can add to the base API and your formatter subclasses will have full access to those methods. For instance, if this ‚Äútitleize‚Äù formatting is something you‚Äôll need to do several times across different formatters, you can abstract the implementation:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ExampleFormatters&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Base&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ‚Ä¶&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# convert a &quot;lower   case&quot; string to &quot;Title Case&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;titleize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;capitalize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;  
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ExampleFormatters&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TitleFormatter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# keep `process` hidden from the public API:&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titleize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Not only does this DRY up your code, but it fixes a subtle bug as well. Before, if &lt;code class=&quot;highlighter-rouge&quot;&gt;data[:title]&lt;/code&gt; was &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;, your code would error and crash. Now, by using a separate method which is written defensively (i.e., don‚Äôt naively assume the incoming object will always be a &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;), the worst you‚Äôll get is a value of &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&quot;&lt;/code&gt;. If a blank string itself will cause a problem down the road, make sure you write &lt;em&gt;that&lt;/em&gt; code defensively as well!&lt;/p&gt;

&lt;h3 id=&quot;constructing-the-data-pipeline&quot;&gt;Constructing the Data Pipeline&lt;/h3&gt;

&lt;p&gt;Now that we have some formatters working and transforming our data in bite-sized pieces, we need a way to kick off the whole process. Let‚Äôs write our data pipeline object. You‚Äôll notice it contains some similar shapes to the formatter base class.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExampleDataPipeline&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:data&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;# Construct the sequence of formatters for the pipeline.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Modify or add to this list to update the pipeline:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;formatters&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;TitleFormatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;DatesFormatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;LineItemsFormatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# future formatters here&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@already_formatted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dup&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# make a shallow clone&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@already_formatted&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Cannot run pipeline a second time on the same dataset.&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;formatters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;formatter_class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;formatter_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# further processing here?&lt;/span&gt;

    &lt;span class=&quot;vi&quot;&gt;@already_formatted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For the final step, you can run the pipeline with a single statement!&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;transformed_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ExampleDataPipeline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Boom.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And thanks to the power of object-oriented programming, you can easily experiment with your pipeline‚Äîfor example by changing the order of formatters or swapping out one formatter for another.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FasterDataPipeline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ExampleDataPipeline&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;formatters&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;TitleFormatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;DatesFormatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;FasterLineItemsFormatter&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Try benchmarking these two pipelines‚Ä¶&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;ExampleDataPipeline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# vs.&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;FasterDataPipeline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It goes without saying that unit testing formatters in isolation will ensure your formatters don‚Äôt become too dependent on each other (aka it would be &lt;strong&gt;bad&lt;/strong&gt; if a formatter only worked if executed after another particular formatter).&lt;/p&gt;

&lt;h3 id=&quot;audit-trails-external-apis-dynamic-converters&quot;&gt;Audit Trails? External APIs? Dynamic Converters?&lt;/h3&gt;

&lt;p&gt;You can build upon this pattern in increasingly sophisticated ways as your business logic needs grow. One idea might be to log the before/after of each formatter as it runs in the pipeline in order to performing an audit of data integrity after the fact. Another idea might be to encapsulate expensive or complex external API calls within formatters so you can work with your overall pipeline steps at a higher level without messy API calls getting in your way. (And then swapping those formatter(s) out with stubs during unit tests becomes quite straightforward.)&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;https://www.bridgetownrb.com&quot;&gt;Bridgetown&lt;/a&gt;, the subsystem of template converter plugins (which itself is based on Jekyll‚Äôs converter subsystem) is architected in a similar fashion to this Formatter pattern. In the Bridgetown case, the order of converters (aka formatters) is determined by a priority designation. High priority converters run first, then medium priorities, then lower priorities. In Bridgetown, I actually did implement an ‚Äúaudit trail‚Äù for the conversions, so if you‚Äôre curious how a particular resource changed throughout all the conversions, you can inspect that trail and see the state of the template before/after a particular conversion. The precise nature of the converter pipeline is constructed based on extension matches or other metadata (aka &lt;code class=&quot;highlighter-rouge&quot;&gt;.liquid&lt;/code&gt; will be converted differently from &lt;code class=&quot;highlighter-rouge&quot;&gt;.erb&lt;/code&gt;). Your data pipeline might similarly need to dynamically construct its list of formatters based on the nature of the incoming data.&lt;/p&gt;

&lt;p&gt;In summary, I truly adore this design pattern. Once you know it, you start to see its usefulness across a wide variety of scenarios, codebases, and even programming languages! &lt;img src=&quot;/images/ruby.svg&quot; width=&quot;14&quot; style=&quot;vertical-align: -0.05em;margin-left: 0.1em&quot; /&gt;&lt;/p&gt;</content><author><name>Jared White</name></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.fullstackruby.dev/images/posts/so-many-roads.jpg"/><media:content medium="image" url="https://www.fullstackruby.dev/images/posts/so-many-roads.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">Episode 3: String-Based Templates vs. DSLs: the Pros &amp;amp; Cons of Each</title><link href="https://www.fullstackruby.dev/podcast/3/" rel="alternate" type="text/html" title="Episode 3: String-Based Templates vs. DSLs: the Pros &amp; Cons of Each"><published>2022-02-22T00:00:00-08:00</published><updated>2022-02-22T00:00:00-08:00</updated><id>repo://posts.collection/_posts/podcast/3.md</id><content type="html" xml:base="https://www.fullstackruby.dev/podcast/3/">&lt;div id=&quot;buzzsprout-player-10122738&quot; style=&quot;margin-bottom:2rem&quot;&gt;&lt;/div&gt;
&lt;script src=&quot;https://www.buzzsprout.com/1895262/10122738-3-string-based-templates-vs-dsls-the-pros-cons-of-each.js?container_id=buzzsprout-player-10122738&amp;amp;player=small&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;Typically when you mention &amp;#8220;Ruby&amp;#8221; and &amp;#8220;template&amp;#8221; in the same breath, people will think of ERB. Perhaps even Haml. But did you know that the Ruby ecosystem offers a wide variety of template engines, and quite a few are built upon pure Ruby? In this episode, I break down the main conceptual difference between &amp;#8220;string-based templates&amp;#8221; such as ERB and &amp;#8220;DSLs&amp;#8221; such as Papercraft, the various options within each category, and some of the reasons you might want to choose one approach or another depending on your use case. Enjoy!&lt;/p&gt;

&lt;h3 id=&quot;links&quot;&gt;Links:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Article: &lt;a href=&quot;https://dev.to/jaredcwhite/html-is-a-serialized-object-graph-and-that-changes-everything-4kbl&quot;&gt;HTML is a Serialized Object Graph&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rubyapi.org/o/erb&quot;&gt;ERB&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jeremyevans/erubi&quot;&gt;Erubi&lt;/a&gt; (ERB variant used by Rails, Bridgetown)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://shopify.github.io/liquid/&quot;&gt;Liquid&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.serbea.dev/&quot;&gt;Serbea&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://haml.info/&quot;&gt;Haml&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://slim-lang.com/&quot;&gt;Slim&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://activeadmin.github.io/arbre/&quot;&gt;Arbre&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://markaby.github.io/&quot;&gt;Markaby&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rubys/wunderbar&quot;&gt;Wunderbar&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/digital-fabric/papercraft&quot;&gt;Papercraft&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/camertron/rux&quot;&gt;Rux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;https://www.fullstackruby.dev/&quot;&gt;Become a part of the Fullstack Ruby community&lt;/a&gt; and learn how to put your Ruby skills to work on the backend AND the frontend. Know somebody who&amp;#8217;s a JavaScript developer but is interested in learning more about Ruby? Share the site, podcast, or newsletter with them!&lt;/p&gt;

&lt;p&gt;The Fullstack Ruby Podcast is a production of &lt;a href=&quot;https://www.whitefusion.studio/&quot;&gt;Whitefusion&lt;/a&gt;, a boutique web studio based in Portland, OR.&lt;/p&gt;

&lt;p&gt;Theme music courtesy of &lt;a href=&quot;https://www.epidemicsound.com/&quot;&gt;Epidemic Sound&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p class=&quot;has-text-centered&quot; style=&quot;margin-bottom:0.5rem&quot;&gt;&lt;a href=&quot;https://feeds.buzzsprout.com/1895262.rss&quot; class=&quot;button is-primary&quot;&gt;&lt;span&gt;Subscribe to the RSS feed&lt;/span&gt; &lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-rss&quot; style=&quot;color:orange&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;has-text-centered&quot;&gt;in your podcast player of choice.&lt;/p&gt;</content><author><name>Jared White</name></author><category term="Podcast"/><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mugshotbot.com/m?theme=two_up&amp;mode=light&amp;color=8a1024&amp;pattern=diagonal_lines&amp;image=eed29abf&amp;hide_watermark=true&amp;url=https%3A%2F%2Fwww.fullstackruby.dev%2Fpodcast%2F3%2F"/><media:content medium="image" url="https://mugshotbot.com/m?theme=two_up&amp;mode=light&amp;color=8a1024&amp;pattern=diagonal_lines&amp;image=eed29abf&amp;hide_watermark=true&amp;url=https%3A%2F%2Fwww.fullstackruby.dev%2Fpodcast%2F3%2F" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">What‚Äôs Better Than DRY? DOEY! (Don‚Äôt Over-Exert Yourself)</title><link href="https://www.fullstackruby.dev/the-art-of-code/2022/02/11/dry-doey-dont-overexert-yourself/" rel="alternate" type="text/html" title="What's Better Than DRY? DOEY! (Don't Over-Exert Yourself)"><published>2022-02-11T00:00:00-08:00</published><updated>2022-02-11T00:00:00-08:00</updated><id>repo://posts.collection/_posts/2022-02-11-dry-doey-dont-overexert-yourself.md</id><content type="html" xml:base="https://www.fullstackruby.dev/the-art-of-code/2022/02/11/dry-doey-dont-overexert-yourself/">&lt;p&gt;It never ceases to amaze me how much work programmers create for themselves. Time and again I hop onto DuckDuckGo to search for a particular answer to a problem, or a tool to help me accomplish a task, only to find article after article and readme after readme riddled with overly-complicated, brute force, verbose solutions to what are ostensibly simple problems.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Question:&lt;/strong&gt; how do I convert JSON to YAML?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Verbose Answer:&lt;/strong&gt; you install these packages and then you download this script and then you modify these three variables and then you pray to the open source gods and then you sign up for this service and then you connect to that API and then you‚Ä¶&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Real Answer:&lt;/strong&gt; you don‚Äôt need to do anything‚Ä¶&lt;em&gt;JSON is valid YAML&lt;/em&gt;. üòÖ&lt;/p&gt;

&lt;h3 id=&quot;im-actually-quite-lazy&quot;&gt;I‚Äôm Actually Quite Lazy&lt;/h3&gt;

&lt;p&gt;So here‚Äôs the deal: I hate work. üòú I‚Äôd much rather go outside and take a walk. So whenever I‚Äôm trying to solve a big, thorny programming problem, what I‚Äôm &lt;em&gt;not&lt;/em&gt; going to do is try a linear A, then B, then C, then D, then E approach to getting it to work. Because I know from experience that thinking in that manner actually creates far &lt;em&gt;more&lt;/em&gt; work down the road. And I‚Äôm lazy, remember? So I want to get less work done in the long run. &lt;strong&gt;Way less work.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wiktionary.org/wiki/brute_force&quot;&gt;According to Wiktionary&lt;/a&gt;, ‚Äúbrute force‚Äù is a method of computation wherein the computer is let to try all permutations of a problem until one is found that provides a solution, in contrast to the implementation of a more intelligent algorithm. We can also apply that concept to our own ‚Äúhuman computation‚Äù as we‚Äôre programming: just taking wild stabs in the dark to guess a solution to a problem, and upon the first working demonstration, well &lt;strong&gt;there you go!&lt;/strong&gt; &lt;strong&gt;Problem solved.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That‚Äôs really not the ideal way to go about things at all.&lt;/p&gt;

&lt;h3 id=&quot;eliminating-redundancies&quot;&gt;Eliminating Redundancies&lt;/h3&gt;

&lt;p&gt;When I‚Äôm in my ‚Äúflow state‚Äù as a programmer, what I‚Äôm constantly doing is finding ways to eliminate redundancies. This goes far beyond DRY (Don‚Äôt Repeat Yourself), which is a generally useful concept but typically only thought of as applying to small code blocks. ‚ÄúHey, these few lines here are basically the same as these few lines over there. Let‚Äôs extract them out to a single function! Cool, cool.‚Äù&lt;/p&gt;

&lt;p&gt;I find that application of DRY to be far less compelling than one where you can recognize that entire subsystems of your application as a whole can be made entirely redundant if you simply took the time to search for &lt;em&gt;higher-level abstractions&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Sometimes these higher-level abstractions are missed on codebases because multiple people are working in silos. Programmer A works on a feature over here. Programmer B works on a feature over there. At first glance neither feature seems related. But to a well-trained eye looking at the sales pitch for both features, it becomes apparent that most of the code could be conceptually shared between the two features. They‚Äôre really not two features at all. They‚Äôre &lt;strong&gt;one feature&lt;/strong&gt;, &lt;em&gt;expressed in slightly different ways depending on the context&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;And that‚Äôs what I mean by eliminating redundancies in code. What if your application with 50 features could actually be built with only 25 features, each slightly more malleable at run-time to provide &lt;em&gt;the illusion&lt;/em&gt; of 50 features? What if you could whittle that down even further? What if you could extract some of the features‚Äô lower layers to a shared library? What if you could use someone else‚Äôs battle-hardened library instead?&lt;/p&gt;

&lt;p&gt;Measuring your application codebase‚Äôs health by LoC is never wise. But I believe looking at &lt;em&gt;the number of new lines of code added&lt;/em&gt; in each PR is very important. If PR after PR comes up for code review and nearly everything is ‚Äúnew code‚Äù‚Äîunless this is literally a brand-new application, something has gone terribly wrong. The majority of your PRs should be attempting to refactor, to streamline, to eliminate redundancies. Programmer works on Feature B, realizes it‚Äôs not that different from Feature A, so her PR for Feature B actually redoes Feature A so they both share as much in common‚Äîa higher-level abstraction.&lt;/p&gt;

&lt;p&gt;Remember, &lt;a href=&quot;https://www.fullstackruby.dev/the-art-of-code/2015/01/30/the-best-code-is-the-code-nobody-writes/&quot;&gt;the best code is the code nobody writes&lt;/a&gt;. ‚ÄúNo code‚Äù is bug-free, infinitely fast, and incredibly easy to maintain. ‚ÄúNo code‚Äù doesn‚Äôt need to be tested or understood &lt;em&gt;because it doesn‚Äôt exist&lt;/em&gt;. The next best thing to ‚Äúno code‚Äù is ‚Äúworthy code‚Äù. The more verified impact each single line of code can have within your overall application architecture, the better.&lt;/p&gt;

&lt;h3 id=&quot;but-i-dont-know-what-other-code-has-already-been-written&quot;&gt;But I Don‚Äôt Know What Other Code Has Already Been Written!&lt;/h3&gt;

&lt;p&gt;One possible objection to this way of thinking might be that on sufficiently-large codebases, multiple programmers won‚Äôt have any idea what other people have already written or how those subsystems work exactly. So someone can be forgiven for pushing up a PR that‚Äôs basically just new code they‚Äôve written to get something done.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I don‚Äôt subscribe to that philosophy.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Either &lt;strong&gt;(a)&lt;/strong&gt; that programmer needs to spend more time &lt;em&gt;simply reading code&lt;/em&gt; and &lt;em&gt;learning&lt;/em&gt; how all of the different components and subsystems and configurations and layers of the application function and why they‚Äôre there, or &lt;strong&gt;(b)&lt;/strong&gt; the code review process needs to incorporate an ‚Äúarchitectural review‚Äù step to ensure PRs have taken possible refactoring into account, rather than just offering yet additional ‚Äúappend-only‚Äù code blocks.&lt;/p&gt;

&lt;h3 id=&quot;that-sounds-like-a-lot-of-work-i-thought-you-were-lazy&quot;&gt;That Sounds Like a Lot of Work! I Thought You Were Lazy?!&lt;/h3&gt;

&lt;p&gt;A cursory examination of the concepts above might lead you to believe all this reading and refactoring and high-level architectural review of codebase concepts is a ton of extra work. Much easier to simply sit down at your code editor with a blank file, write some stuff, write some tests, verify the damn thing works, and call it a day.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wrong!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That approach only works when you have a simple, greenfield application. As your codebase grows larger and more sophisticated, writing code in that manner eventually leads to ‚Äú&lt;a href=&quot;https://en.wikipedia.org/wiki/Big_ball_of_mud&quot;&gt;the big ball of mud&lt;/a&gt;‚Äù architecture, also known as ‚Äúspaghetti code‚Äù. Unfortunately, I can‚Äôt begin to count how many tutorials I‚Äôve seen (DEV is sadly riddled with them) which present code which is obviously spaghetti in nature, yet provide a sort of ‚Äúcopy-and-paste these 20 files into your project and you‚Äôre done!‚Äù appeal to newbies.&lt;/p&gt;

&lt;p&gt;Listen, &lt;em&gt;I understand that appeal&lt;/em&gt;. You don‚Äôt want to have to spend five hours crafting the perfect software architecture for your specific problem domain. You just want to download the ‚ÄúGatsby-React-Tailwind-Firebase-Stripe-Netlify‚Äù starter kit, stuff a wad of JSON here and JSX there, copy-n-paste some random components off of StackOverflow, and boom you have a website.&lt;/p&gt;

&lt;p&gt;Unfortunately the quality of that website‚Äôs code will be hot garbage. üò¨ Might not matter to you now. But down the road, &lt;strong&gt;it‚Äôs going to bite you in the ass&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;embrace-doey&quot;&gt;Embrace DOEY&lt;/h3&gt;

&lt;p&gt;By taking the time to carefully, deliberately, intentionally write high-quality code from the start, understanding your problem domain while avoiding redundancies, expressing features in higher-level abstractions, utilizing battle-tested and well-crafted libraries/frameworks based on ‚Äúfirst principles‚Äù, staying away from ‚Äúnew hotness‚Äù tools which make for cool tutorials but are a disaster to maintain over the long term‚Äîyou begin to reap the benefits of &lt;strong&gt;DOEY&lt;/strong&gt;. Soon, while other people are spending hours, days, even weeks &lt;strong&gt;wrestling with brittle codebases&lt;/strong&gt; which are hard to intuitively understand and nearly impossible to refactor, you are &lt;strong&gt;enjoying your outside walk in the sun&lt;/strong&gt; because &lt;em&gt;you already shipped three new features yesterday.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;All of that upfront work paid off. Now you get to be lazy. Stop to smell the roses. Life is good.&lt;/strong&gt;&lt;/p&gt;</content><author><name>Jared White</name></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.fullstackruby.dev/images/posts/beach-scene.jpg"/><media:content medium="image" url="https://www.fullstackruby.dev/images/posts/beach-scene.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">How Ruby and Web Components Can Work Together</title><link href="https://www.fullstackruby.dev/fullstack-development/2022/01/04/how-ruby-web-components-work-together/" rel="alternate" type="text/html" title="How Ruby and Web Components Can Work Together"><published>2022-01-04T00:00:00-08:00</published><updated>2022-01-04T00:00:00-08:00</updated><id>repo://posts.collection/_posts/2022-01-04-how-ruby-web-components-work-together.md</id><content type="html" xml:base="https://www.fullstackruby.dev/fullstack-development/2022/01/04/how-ruby-web-components-work-together/">&lt;p&gt;As a follow up to &lt;a href=&quot;/podcast/2&quot;&gt;my recent podcast&lt;/a&gt; all about &lt;strong&gt;componentized view architecture&lt;/strong&gt;, I thought it would be worthwhile to share some real-world code examples from various projects I‚Äôve worked on so you can get a sense of what I‚Äôm talking about.&lt;/p&gt;

&lt;p&gt;As you‚Äôll soon discover, many of the Ruby view components I write tend to wrap around web components‚Äîeither ones I‚Äôve written or from third-party libraries. A &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components&quot;&gt;web component&lt;/a&gt; is technically a custom HTML element, paired with some combination of JavaScript and optionally CSS which affects the styling and behavior of the element. For example, instead of writing HTML for a ‚Äúbadge‚Äù like this (example from Bootstrap):&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;badge bg-warning text-dark&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Warning&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You could write it like this (example from &lt;a href=&quot;https://shoelace.style/&quot;&gt;Shoelace&lt;/a&gt;):&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;sl-badge&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;variant=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;warning&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Warning&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sl-badge&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The DX of web components tends to be much higher than CSS frameworks &amp;amp; utility-class-based libraries because the web component can provide an explicit API at both the HTML markup level and within JavaScript. For example, if you wanted to change the above badge‚Äôs variant from ‚Äúwarning‚Äù to ‚Äúdanger‚Äù, it‚Äôs as simple as:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;sl-badge&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;variant&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;danger&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now let‚Äôs look at some real-world examples. On the Ruby side, some components use &lt;a href=&quot;https://www.bridgetownrb.com/docs/components/ruby#use-bridgetowncomponent-for-advanced-component-templates&quot;&gt;Bridgetown‚Äôs native component class&lt;/a&gt;, others use &lt;a href=&quot;https://viewcomponent.org/&quot;&gt;ViewComponent&lt;/a&gt; within a Rails app. For templates I generally use &lt;a href=&quot;https://www.serbea.dev&quot;&gt;Serbea&lt;/a&gt;, but I‚Äôll also provide some ERB translations. On the frontend side, you‚Äôll see much use of &lt;a href=&quot;https://www.ruby2js.com&quot;&gt;Ruby2JS&lt;/a&gt; paired with &lt;a href=&quot;https://lit.dev&quot;&gt;Lit&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://github.com/whitefusionhq/crystallized&quot;&gt;Crystallized&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;documentation-note-component&quot;&gt;Documentation Note Component&lt;/h3&gt;

&lt;p&gt;We‚Äôll start out with something simple. At the time of this writing I‚Äôm designing a new website for Bridgetown, and I need to add notes here and there on various documentation pages. I decided to use Shoelace‚Äôs &lt;code class=&quot;highlighter-rouge&quot;&gt;sl-alert&lt;/code&gt; element since that gets me pretty close to how I want the notes to look visually:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/note-component.png&quot; alt=&quot;note component screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Ruby component code is nice and concise. It accepts a &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt; keyword argument which defaults to &lt;code class=&quot;highlighter-rouge&quot;&gt;:primary&lt;/code&gt;, and an optional icon identifier. Otherwise the icon will be determined based on the note type.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# src/_components/note.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Note&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bridgetown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Component&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;type: :primary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;icon: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@icon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;icon&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;icon&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@icon&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@icon&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@type&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:primary&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;system/information&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:warning&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;system/alert&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And here is the template file (Serbea and ERB examples provided):&lt;/p&gt;

&lt;div class=&quot;language-serb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- src/_components/note.serb --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;sl-alert&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@type&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;sl-icon&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;slot=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;icon&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;library=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;remixicon&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;icon&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;font-size:1.25em&quot;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/sl-icon&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;markdownify&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sl-alert&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-erb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- src/_components/note.erb --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;sl-alert&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@type&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;sl-icon&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;slot=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;icon&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;library=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;remixicon&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;icon&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;font-size:1.25em&quot;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/sl-icon&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;markdownify&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sl-alert&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, this sets up the &lt;code class=&quot;highlighter-rouge&quot;&gt;sl-alert&lt;/code&gt; markup as well as &lt;code class=&quot;highlighter-rouge&quot;&gt;sl-icon&lt;/code&gt; for displaying an icon in the note. The &lt;code class=&quot;highlighter-rouge&quot;&gt;content&lt;/code&gt; variable is automatically provided by the component class which is the output of the block passed to the note, and we use Bridgetown‚Äôs &lt;code class=&quot;highlighter-rouge&quot;&gt;markdownify&lt;/code&gt; helper to render Markdown content to HTML. Using the note component on a page couldn‚Äôt be easier:&lt;/p&gt;

&lt;div class=&quot;language-serb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Serbea --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Note&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;
  #### Front matter variables are optional
  If you want to use [Liquid tags and variables](/docs/variables/)
  ‚Ä¶etc.
&lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-erb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- ERB --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Note&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
  #### Front matter variables are optional
  If you want to use [Liquid tags and variables](/docs/variables/)
  ‚Ä¶etc.
&lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And passing keyword arguments is just how you might expect:&lt;/p&gt;

&lt;div class=&quot;language-serb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Serbea --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Note&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;type: :danger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;icon: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;development/bug-fill&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;
  ‚Ä¶
&lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-erb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- ERB --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Note&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;type: :danger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;icon: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;development/bug-fill&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
  ‚Ä¶
&lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;star-rating-component&quot;&gt;Star Rating Component&lt;/h3&gt;

&lt;p&gt;I‚Äôm working on a Rails app where a ‚Äúratable‚Äù object needs to display a component where people can rate it from 1 to 5 stars. Since Shoelace offers a very nice &lt;a href=&quot;https://shoelace.style/components/rating&quot;&gt;stars component&lt;/a&gt;, we can wrap that in our own component with both Ruby and frontend aspects. The component actually serves two purposes: it can display a read-only average of all the ratings for the object, or it can display the current user‚Äôs own rating of the object (if any).&lt;/p&gt;

&lt;p&gt;First, here‚Äôs how the component gets used within a Rails template (all examples in Serbea):&lt;/p&gt;

&lt;div class=&quot;language-serb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RatingStarsComponent&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;ratable: &lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@bank&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;value: &lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@bank&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ratings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;user: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rating&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, let‚Äôs look at the Ruby component:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# app/components/rating_stars_component.rb&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RatingStarsComponent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationComponent&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:readonly&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ratable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;readonly: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;value: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@ratable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@readonly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ratable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readonly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@value&lt;/span&gt;

    &lt;span class=&quot;vi&quot;&gt;@ratable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;has_been_rated?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@ratable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;average_rating&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ratable_url&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;/banks/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@ratable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;short_id&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/ratings&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt; method returns the value which many have been passed to the component, otherwise it returns the average rating (if possible). Also, since currently the system only has one type of ratable object, the &lt;code class=&quot;highlighter-rouge&quot;&gt;ratable_url&lt;/code&gt; is hardcoded, but that could easily be made more flexible later on.&lt;/p&gt;

&lt;p&gt;Now let‚Äôs look at the template:&lt;/p&gt;

&lt;div class=&quot;language-serb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- app/components/rating_stars_component.html.serb --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;rating-stars&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ratable_url&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;sl-rating&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;{%=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;readonly&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;{%=&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%(value=&quot;#{value}&quot;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/sl-rating&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/rating-stars&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Pretty straightforward‚Äîbut what‚Äôs the deal with that &lt;code class=&quot;highlighter-rouge&quot;&gt;rating-stars&lt;/code&gt; tag? That is the custom element which has also been written alongside the Ruby component/template. Let‚Äôs take a look at that now.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# app/components/rating_stars_element.js.rb&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signed_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initiate_sign_up&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;from: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;../javascript/lib/utils.js.rb&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RatingStarsElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;LitElement&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;custom_element&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rating-stars&quot;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;connected_callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_timeout&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add_event_listener&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sl-change&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signed_in?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# grab the context and id out of the url for rating&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@href&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initiate_sign_up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delete_suffix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Daniel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@href&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;rating: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Toaster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;raise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;check2-circle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Thanks for your rating!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ok?&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;alert&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;I'm sorry, there was a problem saving your rating. Please contact our support team.&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There‚Äôs a lot going on here so I‚Äôll break it down for you. Also, in case you‚Äôre still scratching your head wondering how a web component has been written using Ruby (that is, something very much like it), you can thank &lt;a href=&quot;https://www.ruby2js.com&quot;&gt;Ruby2JS&lt;/a&gt;. We can even use the latest Ruby 3 syntax! Awesome, isn‚Äôt it?&lt;/p&gt;

&lt;p&gt;So here‚Äôs the rundown:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The top line is an import statement, which should seem familiar if you‚Äôve worked with ES modules. We actually could have added this to Ruby2JS‚Äô autoimports config and thus omitted this line (as we have for other imported modules like &lt;code class=&quot;highlighter-rouge&quot;&gt;Daniel&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Toaster&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;RatingStarsElement&lt;/code&gt; is a subclass of &lt;code class=&quot;highlighter-rouge&quot;&gt;LitElement&lt;/code&gt; from the &lt;a href=&quot;https://lit.dev&quot;&gt;Lit&lt;/a&gt; library. Though in this example we‚Äôre not making any particular use of Lit-specific functionality (other than the implicit &lt;code class=&quot;highlighter-rouge&quot;&gt;href&lt;/code&gt; property), it‚Äôs right there if and when it‚Äôs needed.&lt;/li&gt;
  &lt;li&gt;When the element is connected to the DOM, we wait a beat for Shoelace‚Äôs star rating component to initialize, then we add an event handler so we can run code when the user has clicked on the stars.&lt;/li&gt;
  &lt;li&gt;Inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;rate&lt;/code&gt; method, marked as &lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt; so we can use an &lt;code class=&quot;highlighter-rouge&quot;&gt;await&lt;/code&gt; inside the method, we try to find out if there‚Äôs even a user currently signed in. If not, it hands things off to the user sign-up process. Otherwise, it &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt;s to the supplied ratable URL with the new rating value, and displays a ‚Äútoast notification‚Äù so the user knows their rating was accepted. If there was an error condition, we handle that too (and this area is certainly ripe for improvement).&lt;/li&gt;
  &lt;li&gt;Finally, the &lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt; method is used by Lit to determine the internal template to use within the web component, and since we don‚Äôt need to augment the Ruby template with anything, we just return a basic &lt;code class=&quot;highlighter-rouge&quot;&gt;slot&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(FYI: if you‚Äôre wondering what Daniel is, it‚Äôs a simple wrapper around &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt; I wrote, and it‚Äôs called Daniel because there‚Äôs a popular Ruby gem for making web requests called Faraday, and there‚Äôs a character in the TV show Lost named Daniel Faraday. Daniel. Faraday. Get it? üòã)&lt;/p&gt;

&lt;p&gt;Now you may be wondering why I would even use a web component in this context, when it seems like Stimulus could do the job quite nicely. And many people working on a Rails app would probably assume you &lt;em&gt;should&lt;/em&gt; use Stimulus for this sort of thing.&lt;/p&gt;

&lt;p&gt;If that‚Äôs the flavor of ice cream you prefer, go for it! You can still employ patterns very similar to the one above. However, I personally have chosen to migrate &lt;em&gt;away&lt;/em&gt; from Stimulus and only write web components. The reason for this is that I want to limit &lt;strong&gt;architectural complexity&lt;/strong&gt;. After writing a wide variety of Stimulus controllers in the past, there were a number of cases where Stimulus just wasn‚Äôt cutting it, and I was able to write &lt;em&gt;better&lt;/em&gt; and &lt;em&gt;less buggy&lt;/em&gt; code by switching to Lit/web components technology. And at that point, if I‚Äôm writing both Stimulus controllers and Lit components in the same project, the question becomes: why? Why can‚Äôt I just use Lit alone?&lt;/p&gt;

&lt;p&gt;So that‚Äôs the direction I‚Äôve headed in. I find the conceptual 1:1 mapping between a Ruby component and a web component to be very easy to reason about. Plus, thanks to &lt;a href=&quot;https://github.com/whitefusionhq/crystallized&quot;&gt;Crystallized&lt;/a&gt;‚Äîa small Lit add-on I wrote which provides a solid Stimulus-like actions/targets mechanism for ‚Äúlight DOM‚Äù markup‚ÄîI really don‚Äôt miss Stimulus in the least. Let‚Äôs take a look at that next.&lt;/p&gt;

&lt;h3 id=&quot;soundclip-play-button&quot;&gt;Soundclip Play Button&lt;/h3&gt;

&lt;p&gt;Here‚Äôs a component which provides a play/pause button for an audio clip. It also connects up with a site-wide, persistent audio player not covered herein. (I‚Äôve simplified the example down a little from the shipping component for clarity.)&lt;/p&gt;

&lt;p&gt;The Ruby component itself does very little:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# app/components/soundclip_component.rb&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SoundclipComponent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationComponent&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;soundclip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;hidden: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;order: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@soundclip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@hidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;soundclip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And here‚Äôs the Ruby template, making great use of multi-line Serbea filters:&lt;/p&gt;

&lt;div class=&quot;language-serb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;soundclip-button&lt;/span&gt;
  &lt;span class=&quot;cp&quot;&gt;{%=&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%(style=&quot;display:none&quot;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@hidden&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;
  &lt;span class=&quot;cp&quot;&gt;{%=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;safe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;link_to:
      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rails_blob_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@soundclip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;audio_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;class: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;button is-primary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;soundclip-button-action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;play&quot;&lt;/span&gt;
  &lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/soundclip-button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This button wraps around an icon/title pair passed to it within other templates. An example being:&lt;/p&gt;

&lt;div class=&quot;language-serb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SoundclipComponent&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;soundclip: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;soundclip&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;i&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;icon icon-music-play-button&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;soundclip-button-target=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;icon&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;ui-label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;soundclip-button-target=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;soundclip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ui-label&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So how does &lt;code class=&quot;highlighter-rouge&quot;&gt;soundclip-button&lt;/code&gt; work and what‚Äôs with all those &lt;code class=&quot;highlighter-rouge&quot;&gt;soundclip-button-action&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;soundclip-button-target&lt;/code&gt; attributes? Let‚Äôs find out!&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SoundclipElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;LitElement&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;properties&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;playing: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;type: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;reflect: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# additional properties are auto-defined by Ruby2JS&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;targets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;button: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.button&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;title_text: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;@title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;icon: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;@&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;custom_element&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;soundclip-button&quot;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;DeclarativeActionsController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;TargetsController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;

    &lt;span class=&quot;vi&quot;&gt;@playing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# no shadow dom&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_render_root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;prevent_default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;player&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;query_selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;audio-player&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@playing&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# player will then call the stop method&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;play&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Plays the next soundclip within the current box&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;play_next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;present?&lt;/span&gt;

    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;closest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.box&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;query_selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;soundclip-button[order='&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;']&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@playing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;icon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;replace&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;icon-music-pause-button&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;icon-music-play-button&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@playing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;icon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;replace&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;icon-music-play-button&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;icon-music-pause-button&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I won‚Äôt go through every single line of code in detail here, but I want to highlight a few of the special aspects:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ruby2JS does some clever parsing of &lt;code class=&quot;highlighter-rouge&quot;&gt;LitElement&lt;/code&gt; subclasses and tries to turn any instance variables you use into element properties. Pretty cool stuff, but we also declare &lt;code class=&quot;highlighter-rouge&quot;&gt;playing&lt;/code&gt; explicitly because we want the current play state of the component to be reflected back out to the &lt;code class=&quot;highlighter-rouge&quot;&gt;playing&lt;/code&gt; attribute of the element in the DOM.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;self.targets&lt;/code&gt; ‚Äî this uses Crystallized‚Äôs &lt;a href=&quot;https://github.com/whitefusionhq/crystallized/tree/main/packages/controllers#using-targetscontroller&quot;&gt;targets config&lt;/a&gt; to set up methods which can be called to query various elements. So &lt;code class=&quot;highlighter-rouge&quot;&gt;icon: &quot;@&quot;&lt;/code&gt; means that you can call &lt;code class=&quot;highlighter-rouge&quot;&gt;self.icon&lt;/code&gt; and get the child DOM element marked with &lt;code class=&quot;highlighter-rouge&quot;&gt;soundclip-button-target=&quot;icon&quot;&lt;/code&gt;, also &lt;code class=&quot;highlighter-rouge&quot;&gt;button: &quot;.button&quot;&lt;/code&gt; means &lt;code class=&quot;highlighter-rouge&quot;&gt;self.button&lt;/code&gt; will get any child element with a &lt;code class=&quot;highlighter-rouge&quot;&gt;button&lt;/code&gt; class.&lt;/li&gt;
  &lt;li&gt;The lines &lt;code class=&quot;highlighter-rouge&quot;&gt;DeclarativeActionsController.new self&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;TargetsController.new self&lt;/code&gt; instantiate the Lit controllers provided by Crystallized. The &lt;a href=&quot;https://github.com/whitefusionhq/crystallized/tree/main/packages/controllers#using-declarativeactionscontroller&quot;&gt;actions controller&lt;/a&gt; handles markup like you saw in the Ruby component template‚Äîe.g., a &lt;code class=&quot;highlighter-rouge&quot;&gt;soundclip-button-action=&quot;play&quot;&lt;/code&gt; attribute means when the link is clicked, the &lt;code class=&quot;highlighter-rouge&quot;&gt;play&lt;/code&gt; method of the web component will get called automatically.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;collapsing-mental-models&quot;&gt;Collapsing Mental Models&lt;/h3&gt;

&lt;p&gt;As DHH is often fond of saying, conceptual compression is a hallmark of Rails, and it‚Äôs a philosophy I very much subscribe to as well. I also like to collapse mental models. The fewer layers of ‚Äúdifferent stuff‚Äù living in parallel universes you have to boot up in your mind in order to accomplish simple tasks, the better.&lt;/p&gt;

&lt;p&gt;What I love so much about the patterns above is that once you‚Äôve wrapped your mind around what‚Äôs a Ruby component and what‚Äôs a web component, the two can operate as one conceptually-speaking across a wide variety of use cases‚Ä¶and by using Ruby2JS, you don‚Äôt even need to leave your beloved Ruby syntax behind. I find it fatiguing to have to context-switch constantly between Ruby and JavaScript when working on a singular feature. Now I don‚Äôt have to. Amazing! While knowledge of DOM APIs and some JavaScript methods is still required, the mental models are mostly collapsed. In a broad sense, you‚Äôre just writing Ruby objects and templates to build up discrete building blocks of user interface, and merely a small amount of effort is required to determine which is the code that executes server-side vs. client-side.&lt;/p&gt;

&lt;p&gt;Boom. ü§Ø&lt;/p&gt;</content><author><name>Jared White</name></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.fullstackruby.dev/images/posts/colorful-windows.jpg"/><media:content medium="image" url="https://www.fullstackruby.dev/images/posts/colorful-windows.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">Episode 2: Componentized View Architecture FTW!</title><link href="https://www.fullstackruby.dev/podcast/2/" rel="alternate" type="text/html" title="Episode 2: Componentized View Architecture FTW!"><published>2021-12-21T00:00:00-08:00</published><updated>2021-12-21T00:00:00-08:00</updated><id>repo://posts.collection/_posts/podcast/2.md</id><content type="html" xml:base="https://www.fullstackruby.dev/podcast/2/">&lt;div id=&quot;buzzsprout-player-9761895&quot; style=&quot;margin-bottom:2rem&quot;&gt;&lt;/div&gt;
&lt;script src=&quot;https://www.buzzsprout.com/1895262/9761895-2-componentized-view-architecture-ftw.js?container_id=buzzsprout-player-9761895&amp;amp;player=small&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;There are &lt;a href=&quot;https://twitter.com/antero_nu/status/1473024746891661314?s=21&quot;&gt;no full stack engineers&lt;/a&gt;?! Let&amp;#8217;s talk about that. Also, just what is a componentized view architecture anyway? What are components? For that matter, what are templates? What are partials? I break it all down and explain why I&amp;#8217;m gung-ho about view components. Plus I answer questions regarding Stimulus, nice_partials, and other Rails tooling from listeners like YOU! Enjoy, and keep on Ruby-ing!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.fullstackruby.dev/&quot;&gt;Become a part of the Fullstack Ruby community&lt;/a&gt; and learn how to put your Ruby skills to work on the backend AND the frontend. Know somebody who&amp;#8217;s a JavaScript developer but is interested in learning more about Ruby? Share the site, podcast, or newsletter with them!&lt;/p&gt;

&lt;p&gt;The Fullstack Ruby Podcast is a production of &lt;a href=&quot;https://www.whitefusion.studio/&quot;&gt;Whitefusion&lt;/a&gt;, a boutique web studio based in Portland, OR.&lt;/p&gt;

&lt;p&gt;Theme music courtesy of &lt;a href=&quot;https://www.epidemicsound.com/&quot;&gt;Epidemic Sound&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p class=&quot;has-text-centered&quot; style=&quot;margin-bottom:0.5rem&quot;&gt;&lt;a href=&quot;https://feeds.buzzsprout.com/1895262.rss&quot; class=&quot;button is-primary&quot;&gt;&lt;span&gt;Subscribe to the RSS feed&lt;/span&gt; &lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-rss&quot; style=&quot;color:orange&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;has-text-centered&quot;&gt;in your podcast player of choice.&lt;/p&gt;</content><author><name>Jared White</name></author><category term="Podcast"/><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mugshotbot.com/m?theme=two_up&amp;mode=light&amp;color=8a1024&amp;pattern=diagonal_lines&amp;image=eed29abf&amp;hide_watermark=true&amp;url=https%3A%2F%2Fwww.fullstackruby.dev%2Fpodcast%2F2%2F"/><media:content medium="image" url="https://mugshotbot.com/m?theme=two_up&amp;mode=light&amp;color=8a1024&amp;pattern=diagonal_lines&amp;image=eed29abf&amp;hide_watermark=true&amp;url=https%3A%2F%2Fwww.fullstackruby.dev%2Fpodcast%2F2%2F" xmlns:media="http://search.yahoo.com/mrss/"/></entry></feed>