<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="https://www.w3.org/2005/Atom">
  <channel>
    <title>Schneems - Programming Practices, Performance, and Pedantry</title>
    <description>Ruby Hero. Runs CodeTriage.com. Works for Heroku. Posts on programming and open source.&quot;
</description>
    <link>https://www.schneems.com/</link>
    <atom:link href="https://www.schneems.com/feed.xml" rel="self" type="application/rss+xml"/>
    
      <item>
        <title>Pairing on Open Source</title>
        <description>&lt;p&gt;I came to love pairing after I hurt my hands and couldn’t type. I had to finish up the last 2 months of a graduate CS course without the ability to use a keyboard. I had never paired before but enlisted several other developers to type for me. After I got the hang of the workflow, I was surprised that even when coding in a language my pair had never written in (C or C++), they could spot bugs and problems as we went. Toward the end, I finished the assignments faster when I wasn’t touching the keyboard, than I was by myself. Talking aloud forced me to refine my thoughts before typing anything. It might be intimidating to try pairing for the first time, but as Ben puts “it’s just a way of working together.”&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Nov 2022 00:00:00 +0000</pubDate>
        <link>https://www.schneems.com/2022/11/09/pairing-on-open-source/</link>
        <guid isPermaLink="true">https://www.schneems.com/2022/11/09/pairing-on-open-source/</guid>
      </item>
    
      <item>
        <title>My book 'How to Open Source' launches today!</title>
        <description>&lt;p&gt;Today is the day. &lt;em&gt;How to Open Source&lt;/em&gt; is now available for purchase at &lt;a href=&quot;https://howtoopensource.dev&quot;&gt;howtoopensource.dev&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 26 Sep 2022 00:00:00 +0000</pubDate>
        <link>https://www.schneems.com/2022/09/26/my-book-how-to-open-source-launches-today/</link>
        <guid isPermaLink="true">https://www.schneems.com/2022/09/26/my-book-how-to-open-source-launches-today/</guid>
      </item>
    
      <item>
        <title>The room where it happens: How Rails gets made</title>
        <description>&lt;p&gt;Today I’m going to share my perspective on how Ruby on Rails is developed and governed and how I feel the Basecamp “incident” impacts the future of Rails. I’m going to start out telling you what I know for sure, dip into some unknowns, and dive into some hypotheticals for fun.&lt;/p&gt;
</description>
        <pubDate>Wed, 12 May 2021 00:00:00 +0000</pubDate>
        <link>https://www.schneems.com/2021/05/12/the-room-where-it-happens-how-rails-gets-made/</link>
        <guid isPermaLink="true">https://www.schneems.com/2021/05/12/the-room-where-it-happens-how-rails-gets-made/</guid>
      </item>
    
      <item>
        <title>Migrating a Ruby Library from TravisCI to CircleCI</title>
        <description>&lt;p&gt;TravisCI.org is dead. Long live the new CI! TravisCI.org was THE way to run CI for an open source Ruby library. It was so easy that it was seemingly effortless. Even better, it was free. Since the slow-motion collapse of the product, developers have been pushed to other CI providers. I was recently tasked with transferring CI away from Travis for my library &lt;a href=&quot;https://github.com/schneems/derailed_benchmarks&quot;&gt;derailed_benchmarks&lt;/a&gt; and chose CircleCI. This post is a little about why I chose CircleCI, a little about how the transition worked, and a little about nostalgia.&lt;/p&gt;
</description>
        <pubDate>Wed, 13 Jan 2021 00:00:00 +0000</pubDate>
        <link>https://www.schneems.com/2021/01/13/migrating-a-ruby-library-from-travisci-to-circleci/</link>
        <guid isPermaLink="true">https://www.schneems.com/2021/01/13/migrating-a-ruby-library-from-travisci-to-circleci/</guid>
      </item>
    
      <item>
        <title>Squash Unexpected-End errors with syntax_search</title>
        <description>&lt;p&gt;Have you ever hit an error that you just plain hate? Back in 2006, I was learning to program Ruby and following an example from a book. I typed in what I saw, hit enter, and ran into a supremely frustrating error message:&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate>
        <link>https://www.schneems.com/2020/12/01/squash-unexpectedend-errors-with-syntaxsearch/</link>
        <guid isPermaLink="true">https://www.schneems.com/2020/12/01/squash-unexpectedend-errors-with-syntaxsearch/</guid>
      </item>
    
      <item>
        <title>Triage with Me - 11 issues &amp; 2 PRs in 1.5 hours</title>
        <description>&lt;p&gt;Contributing to open-source can be intimidating, especially when you’re getting started. In this post and video series, join me as I triage 11 issues on a repo that I didn’t create and don’t have much experience with.&lt;/p&gt;
</description>
        <pubDate>Tue, 22 Sep 2020 00:00:00 +0000</pubDate>
        <link>https://www.schneems.com/2020/09/22/triage-with-me-11-issues-2-prs-in-15-hours/</link>
        <guid isPermaLink="true">https://www.schneems.com/2020/09/22/triage-with-me-11-issues-2-prs-in-15-hours/</guid>
      </item>
    
      <item>
        <title>The Life-Changing Magic of Tidying Ruby Object Allocations</title>
        <description>&lt;p&gt;Your app is slow. It does not spark joy. This post will show you how to use memory allocation profiling tools to discover performance hotspots, even when they’re coming from inside a library. We will use this technique with a real-world application to identify a piece of optimizable code in Active Record that ultimately leads to a patch with a substantial impact on page speed.&lt;/p&gt;
</description>
        <pubDate>Wed, 16 Sep 2020 00:00:00 +0000</pubDate>
        <link>https://www.schneems.com/2020/09/16/the-lifechanging-magic-of-tidying-ruby-object-allocations/</link>
        <guid isPermaLink="true">https://www.schneems.com/2020/09/16/the-lifechanging-magic-of-tidying-ruby-object-allocations/</guid>
      </item>
    
      <item>
        <title>A Fast Car Needs Good Brakes: How We Added Client Rate Throttling to the Platform API Gem</title>
        <description>&lt;p&gt;When API requests are made one-after-the-other they’ll quickly hit rate limits and when that happens:&lt;/p&gt;
</description>
        <pubDate>Wed, 08 Jul 2020 00:00:00 +0000</pubDate>
        <link>https://www.schneems.com/2020/07/08/a-fast-car-needs-good-brakes-how-we-added-client-rate-throttling-to-the-platform-api-gem/</link>
        <guid isPermaLink="true">https://www.schneems.com/2020/07/08/a-fast-car-needs-good-brakes-how-we-added-client-rate-throttling-to-the-platform-api-gem/</guid>
      </item>
    
      <item>
        <title>Rate Limiting, Rate Throttling, and how they work Together</title>
        <description>&lt;p&gt;In the beginning, there were API requests, and they were good. But then some jerk went and made too many requests too fast and brought the server crashing to its knees. Enter: Rate limiting.&lt;/p&gt;
</description>
        <pubDate>Thu, 25 Jun 2020 00:00:00 +0000</pubDate>
        <link>https://www.schneems.com/2020/06/25/rate-limiting-rate-throttling-and-how-they-work-together/</link>
        <guid isPermaLink="true">https://www.schneems.com/2020/06/25/rate-limiting-rate-throttling-and-how-they-work-together/</guid>
      </item>
    
      <item>
        <title>Lies, Damned Lies, and Averages: Perc50, Perc95 explained for Programmers</title>
        <description>&lt;p&gt;I got a customer ticket the other day that said they weren’t worried about response time because “New Relic is showing our average response time to be sub 200ms”. Sounds good, right? Well, when it comes to performance - you can’t use the average if you don’t know the distribution. It’s usually best to use the median, which is also perc50, though you’ll also want to look at your long tail of responses. If you’re not following, then this post is for you.&lt;/p&gt;
</description>
        <pubDate>Tue, 17 Mar 2020 00:00:00 +0000</pubDate>
        <link>https://www.schneems.com/2020/03/17/lies-damned-lies-and-averages-perc50-perc95-explained-for-programmers/</link>
        <guid isPermaLink="true">https://www.schneems.com/2020/03/17/lies-damned-lies-and-averages-perc50-perc95-explained-for-programmers/</guid>
      </item>
    
  </channel>
</rss>
