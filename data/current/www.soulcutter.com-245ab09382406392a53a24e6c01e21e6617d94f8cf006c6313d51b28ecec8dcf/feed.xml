<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://www.soulcutter.com/feed.xml" rel="self" type="application/atom+xml"><link href="http://www.soulcutter.com/" rel="alternate" type="text/html"><updated>2021-02-08T00:29:59-05:00</updated><id>http://www.soulcutter.com/feed.xml</id><title type="html">Soulcutter</title><subtitle>Soulcutter's ramblings about Ruby, programming, and whatever else comes to mind.</subtitle><entry><title type="html">My Dad’s Hamburgers</title><link href="http://www.soulcutter.com/articles/my-dads-hamburgers.html" rel="alternate" type="text/html" title="My Dad’s Hamburgers"><published>2020-11-21T12:00:00-05:00</published><updated>2020-11-21T12:00:00-05:00</updated><id>http://www.soulcutter.com/articles/my-dads-hamburgers</id><content type="html" xml:base="http://www.soulcutter.com/articles/my-dads-hamburgers.html">&lt;p&gt;I think I make Pretty Good Hamburgers. My ‘recipe’ is something my dad taught me. It’s simple but effective – there are definitely more-refined burgers out there, but this is the &lt;a href=&quot;https://wiki.c2.com/?KeepItSimple&quot;&gt;Keep It Simple&lt;/a&gt; way to make a good burger. Follow these instructions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Obtain fresh &lt;em&gt;80% lean, 20% fat&lt;/em&gt; ground beef.
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;&lt;em&gt;450 grams&lt;/em&gt;&lt;/strong&gt; (&lt;em&gt;1 pound&lt;/em&gt;) makes &lt;strong&gt;&lt;em&gt;4 patties&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;em&gt;900 grams&lt;/em&gt;&lt;/strong&gt; (&lt;em&gt;2 pounds&lt;/em&gt;) makes &lt;strong&gt;&lt;em&gt;7 patties&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt;
      &lt;li&gt;The math doesn’t make sense, it just is.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Separate beef into patties equal sizes according to the guidance above.
    &lt;ul&gt;
      &lt;li&gt;You don’t have to measure this, eyeballing it is fine.&lt;/li&gt;
      &lt;li&gt;Don’t over-smush the meat. If you can preserve the grain from how the beef was ground it gives the hamburger a nice texture and, when cooked, it stays together better.&lt;/li&gt;
      &lt;li&gt;Form patties into either a round disc or a square disc.&lt;/li&gt;
      &lt;li&gt;Patties may look a bit large. They shrink when cooked.&lt;/li&gt;
      &lt;li&gt;Use you thumbs to put a noticeable divot in the center of each patty. It helps the patty stay flat as it contracts.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Season with &lt;a href=&quot;https://www.mccormick.com/lawrys/flavors/spice-blends/seasoned-salt&quot;&gt;Lawry’s Seasoned Salt&lt;/a&gt;, a thin amount over the entire surface area of both sides.
    &lt;ul&gt;
      &lt;li&gt;This is the most-noticeable way to affect the flavor of the burger. Too much salt and it’s a salty burger. Too little and your burger is bland. You’ll want to experiment to find your right amount.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Sprinkle about &lt;em&gt;5 milliliters&lt;/em&gt; (&lt;em&gt;1 teaspoon&lt;/em&gt;) of Worcestershire sauce on each patty. A couple of good dashes if you’re using a sauce dispenser like &lt;a href=&quot;https://www.leaperrins.com/&quot;&gt;Lea &amp;amp; Perrins&lt;/a&gt;’. This boosts the burger’s umami flavor.
    &lt;ul&gt;
      &lt;li&gt;Some sauce brands have MSG added.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Cook it. There’s a million different ways out there to cook things; you do you.
    &lt;ul&gt;
      &lt;li&gt;I like my burgers done &lt;em&gt;medium-rare&lt;/em&gt;, which is &lt;em&gt;60º Celsius&lt;/em&gt; or &lt;em&gt;135º Fahrenheit&lt;/em&gt; internal temperature.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;You need a bun, find your favorite kind. Place cooked patty in bun.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All other accoutrements such as cheese, ketchup, mustard, lettuce, tomato, etcetera… are like pizza toppings: choose your own flavor adventure.&lt;/p&gt;

&lt;p&gt;If you’ve followed all these steps, you’ve made a Pretty Good Burger. Congratulations, and enjoy what you’ve created!&lt;/p&gt;</content><author><name/></author><category term="food"/><category term="cooking"/><summary type="html">I think I make Pretty Good Hamburgers. My ‘recipe’ is something my dad taught me. It’s simple but effective – there are definitely more-refined burgers out there, but this is the Keep It Simple way to make a good burger. Follow these instructions:</summary></entry><entry><title type="html">Ruby Refinements Have One Good Use Case</title><link href="http://www.soulcutter.com/articles/ruby-refinements-have-one-good-use-case.html" rel="alternate" type="text/html" title="Ruby Refinements Have One Good Use Case"><published>2020-11-11T12:00:00-05:00</published><updated>2020-11-11T12:00:00-05:00</updated><id>http://www.soulcutter.com/articles/ruby-refinements-have-one-good-use-case</id><content type="html" xml:base="http://www.soulcutter.com/articles/ruby-refinements-have-one-good-use-case.html">&lt;h2 id=&quot;preface&quot;&gt;Preface&lt;/h2&gt;
&lt;p&gt;This article is not going to explain what Ruby refinements are. I do not assume that all Rubyists know what they are - in the 10 years since they have been a part of Ruby, real life usages are astonishingly rare. If you &lt;em&gt;are&lt;/em&gt; aware that they exist, you still may not be at-all familiar with how they work. There are many good articles available to explain what Ruby refinements are: for a clear and concise explanation of how refinements work, I suggest &lt;a href=&quot;https://www.honeybadger.io/blog/understanding-ruby-refinements-and-lexical-scope/&quot;&gt;Starr Horne’s article Understanding Ruby Refinements and Lexical Scope&lt;/a&gt;. For a thorough explanation I recommend &lt;a href=&quot;https://interblah.net/why-is-nobody-using-refinements&quot;&gt;the transcript of James Adam’s RubyConf talk titled Why Is Nobody Using Refinements?&lt;/a&gt;. It’s quite long and in a challenging format to read, but it covers pretty much &lt;em&gt;everything&lt;/em&gt; and offers some explanations for why Rubyists are not using them. Whether you commit to reading all that or not, the last paragraph of that transcript offers inspiration for this article:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Please – make a little time to explore Ruby. Maybe you’ll discover something simple, or maybe something wonderful. And if you do, I hope you’ll share it with everyone.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;the-one-good-rare-use-case&quot;&gt;The One Good (Rare) Use Case&lt;/h2&gt;

&lt;h3 id=&quot;conversion-wrappers&quot;&gt;Conversion Wrappers&lt;/h3&gt;

&lt;p&gt;Conversion Wrappers? What’s that?&lt;/p&gt;

&lt;p&gt;Okay, full disclosure, I do not believe there is an agreed-upon name for this concept. So that gives you an idea of how rare and unusual they are in the wild. I take the term Conversion Wrapper from &lt;a href=&quot;https://www.rubyguides.com/2018/09/ruby-conversion-methods/&quot;&gt;this article about Ruby Conversion Methods&lt;/a&gt;. &lt;a href=&quot;https://avdi.codes/books/&quot;&gt;Avdi Grimm’s book Confident Ruby&lt;/a&gt; spends several pages (sections 3.6 - 3.8) on this topic under the name “conversion functions.” These exist in Ruby’s standard library - for example &lt;a href=&quot;https://ruby-doc.org/core-2.7.2/Kernel.html#method-i-Array&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Array()&lt;/code&gt;&lt;/a&gt; is one that you’re likely to see in real code. Avdi also wrote a nice short summation of how you might write your own in his article &lt;a href=&quot;https://avdi.codes/a-ruby-conversion-idiom/&quot;&gt;“A Ruby Conversion Idiom”&lt;/a&gt;, but that’s a pale comparison to what you’d find in Confident Ruby (which I highly recommend, and is practical for everyday work outside of this esoteric topic).&lt;/p&gt;

&lt;p&gt;There’s a good chance you’ve never written one yourself. There’s a good chance you haven’t encountered ones that others have written. You absolutely DO see Ruby’s included conversion wrappers being used. Why do you think that is? Beyond the programmer-education aspect (having a name for this thing, and understanding it as an idiom), I have a hunch that there’s ALSO a technical reason for which Ruby Refinements are the &lt;strong&gt;only&lt;/strong&gt; solution.&lt;/p&gt;

&lt;p&gt;Ruby’s conversion wrappers are attached to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel&lt;/code&gt; and therefore are available in every scope. Try running this snippet to illustrate:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;BAR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;BAR&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [1]&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [1]&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [1]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When writing our OWN conversion wrappers they are likely to look something like this contrived example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'time'&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Timestamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Conversions&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;module_function&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is_a?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You’ll find that using a conversion wrapper in this form is more-painful than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Array()&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# BUSINESS = Timestamp(1) is not possible&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# this works, but forces you to reference the namespace &lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;BUSINESS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Conversions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SeriousBusiness&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Conversions&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Conversions&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;business&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;business&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I concede - assigning a constant is not a compelling case. Having to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;include&lt;/code&gt; AND &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extend&lt;/code&gt; is a bit unusual, though. Let’s fix that.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# assuming the previously-defined Conversions module&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Conversions&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# whenever you `include` this module, also `extend` it&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;included&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SillyBusiness&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Conversions&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;business&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;business&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The ergonomics of using that is a bit better, though it starts littering methods in more places. One subtle thing I will point out about using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;module_function&lt;/code&gt; - it hides the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Timestamp&lt;/code&gt; method, but it IS there.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;SillyBusiness&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# NoMethodError: private method `Timestamp' called for SillyBusiness:Class&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;SillyBusiness&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# NoMethodError: private method `Timestamp' called for #&amp;lt;SillyBusiness:0x00007fcb712c0800&amp;gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;SeriousBusiness&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:Timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ok, nobody will ever do this but it works because the method IS there&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;using-refinements-for-conversion-wrappers&quot;&gt;Using Refinements for Conversion Wrappers&lt;/h3&gt;

&lt;p&gt;Let’s check out what the refinement approach looks like and why I consider it the best way to implement conversion wrappers.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;TimestampConversionRefinement&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;refine&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Kernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is_a?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ElegantBusiness&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TimestampConversionRefinement&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;business&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;business&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# ElegantBusiness.Timestamp(1) # NoMethodError: undefined method `Timestamp' for ElegantBusiness:Class&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ElegantBusiness.send(:Timestamp, 1) # NoMethodError: undefined method `Timestamp' for ElegantBusiness:Class&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you move &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;using TimestampConversionRefinement&lt;/code&gt; to be outside of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ElegantBusiness&lt;/code&gt; in the same file, you also have access to use it to define a constant with that same non-namespaced &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Timestamp()&lt;/code&gt; syntax because of the lexical scope of refinements. Whatever scope you decide to put &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;using TimestampConversionRefinement&lt;/code&gt; it will NEVER pollute any lexical scope outside of that. You get the convenient behavior of a method defined on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel&lt;/code&gt;, but without affecting every other file or any gem dependency as you might have if you were to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel.include(Conversions)&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;is-it-worth-it&quot;&gt;Is it worth it?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;The refinement version of conversion wrappers is a superior technical approach that cannot be achieved any other way in Ruby.&lt;/strong&gt; The advantages are subtle, however, and unlikely to change the behavior of application code. Even if it is TECHNICALLY superior, code needs to expressive and understandable to people. People who at this point are unfamiliar with refinements in practice. Refinements themselves present a significant hurdle to adoption by virtue of their limitations and overall introduction of conceptual complexity. So it’s a tough sell to recommend this for anything outside of personal projects or places with incredibly strong esoteric Ruby knowledge (like, say, hidden away within Rails).&lt;/p&gt;

&lt;h2 id=&quot;popularizing-this-as-idiomatic&quot;&gt;Popularizing this as idiomatic&lt;/h2&gt;
&lt;p&gt;There is ONE thing that MIGHT help grow some small foothold of adoption is: actually using refinements in Ruby’s standard library! I would not at-all suggest ripping out what Ruby gives you on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel&lt;/code&gt; by default, but there are places in the standard library that pollute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel&lt;/code&gt; once you require them. One example is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BigDecimal&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;BigDecimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# NoMethodError: undefined method `BigDecimal'&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bigdecimal'&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;BigDecimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 0.1e1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Ruby’s standard library COULD adopt a usage that looks more like&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bigdecimal'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BigDecimal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Conversion&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;BigDecimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 0.1e1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This would start to familiarize people with the concept of refinements and using them for conversion wrappers. It’s tough to imagine a path towards changing pre-existing examples of this in the stdlib such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BigDecimal&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URI&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pathname&lt;/code&gt; and others, but there remain opportunities to write &lt;em&gt;new&lt;/em&gt; conversion wrappers for existing stdlib classes. I humbly suggest &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Date()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DateTime()&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Time()&lt;/code&gt; to start?&lt;/p&gt;

&lt;h2 id=&quot;why-is-this-the-only-good-use&quot;&gt;Why is this the only good use?&lt;/h2&gt;

&lt;p&gt;Ok, you caught me, total clickbait. I can’t TRULY make that claim. It IS the only one I have found. I do think there are other very specific places where this could be handy, but this is the only “general case” I have found. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel&lt;/code&gt; has some interesting properties that make it an attractive target for refinements.&lt;/p&gt;

&lt;p&gt;I’ve heard-suggested that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ActiveSupport&lt;/code&gt;, which does a ton of monkey-patching of core classes, would make potentially-nice refinements. I don’t hold this opinion strongly, but I disagree with that idea. A big value proposition of ActiveSupport is that it is “omnipresent” and sets a new baseline for ruby behaviors - as such, being global really makes the most sense. I don’t know that anyone would be pleased to sprinkle &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;using ActiveSupport&lt;/code&gt; in all their files that use it - they don’t even want to THINK about the fact that they’re using it. Along those lines I have found that conversion wrappers are used rarely-enough that it might be ok to introduce a hurdle of needing to recognize that you want to use them by adding a sparse &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;using MyConversions&lt;/code&gt; to files on an individual basis. I will say that distinction comes down to a matter of personal taste, but knowing that there’s no widespread adoption of an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ActiveSupportRefinements&lt;/code&gt; makes me feel that the community as a whole has similar feelings.&lt;/p&gt;

&lt;p&gt;You might need to be convinced that Conversion Wrappers THEMSELVES are a worthwhile idea - fair enough. Read Confident Ruby! If it might help, I don’t mind also sharing a &lt;a href=&quot;https://gist.github.com/soulcutter/9dcd3aa75274253df3a77f88eb0d6fc8&quot;&gt;less-contrived example that I wrote for a library dealing with defining thresholds for monitoring&lt;/a&gt;. I’m both a little proud and a little ashamed of that one - if you read my own comment, I refactored 13 lines of code into 109 lines. But I digress.&lt;/p&gt;

&lt;h2 id=&quot;aha-but-i-have-a-different-great-use-case&quot;&gt;Aha, but I have a different great use case!&lt;/h2&gt;

&lt;p&gt;That’s awesome! I’d love to hear more about it. If you’ve got an article I can link to, I’d be sure to put it in an addendum here.&lt;/p&gt;

&lt;h2 id=&quot;addendum-some-neat-use-cases-have-popped-up&quot;&gt;Addendum: Some neat use cases have popped up!&lt;/h2&gt;

&lt;p&gt;I am very late updating this post, because almost immediately I got a few examples of other places where people have found refinements useful!&lt;/p&gt;

&lt;h3 id=&quot;colorizing-log-messages&quot;&gt;Colorizing log messages&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://dev.to/rolandstuder/ruby-refinements-have-a-second-good-use-case-42jk&quot;&gt;Roland Stuter responded with a combination of procs, instance_eval, and refining the String class&lt;/a&gt; - when you put it all together, it’s a handy way to express decorated output!&lt;/p&gt;</content><author><name/></author><category term="ruby"/><category term="programming"/><summary type="html">Preface This article is not going to explain what Ruby refinements are. I do not assume that all Rubyists know what they are - in the 10 years since they have been a part of Ruby, real life usages are astonishingly rare. If you are aware that they exist, you still may not be at-all familiar with how they work. There are many good articles available to explain what Ruby refinements are: for a clear and concise explanation of how refinements work, I suggest Starr Horne’s article Understanding Ruby Refinements and Lexical Scope. For a thorough explanation I recommend the transcript of James Adam’s RubyConf talk titled Why Is Nobody Using Refinements?. It’s quite long and in a challenging format to read, but it covers pretty much everything and offers some explanations for why Rubyists are not using them. Whether you commit to reading all that or not, the last paragraph of that transcript offers inspiration for this article:</summary></entry><entry><title type="html">White Fox Keyboard Project</title><link href="http://www.soulcutter.com/articles/white-fox-keyboard-project.html" rel="alternate" type="text/html" title="White Fox Keyboard Project"><published>2020-10-16T13:00:00-04:00</published><updated>2020-10-16T13:00:00-04:00</updated><id>http://www.soulcutter.com/articles/white-fox-keyboard-project</id><content type="html" xml:base="http://www.soulcutter.com/articles/white-fox-keyboard-project.html">&lt;p&gt;I wrote this on a forum that was not-necessarily technical, so I tried to be clear and not make assumptions about mechanical keyboard or electronics knowledge. The underlying theme is that this is an approachable project for beginners, like myself. Alright, strap in: this is a nerdy hobby.&lt;/p&gt;

&lt;p&gt;I’m a programmer and engineering manager, so I’m on a computer all day. The keyboard is your interface to the computer and so naturally there’s a hobby around building and customizing your personal keyboard. You can buy pre-built keyboards to your specifications or you can buy kits that need varying levels of assembly. If you’re deep down the rabbit hole you can custom design your own or get into the production side. The more work you’re willing put in to the assembly process, the more customization possibilities are available to you for your keyboard. As a hobby it’s also enjoyable to &lt;em&gt;make&lt;/em&gt; something with your own hands and effort.&lt;/p&gt;

&lt;p&gt;To start, I already had for myself a pre-built keyboard that has hot-swappable mechanical switches&lt;sup&gt;&lt;small&gt;&lt;a href=&quot;#keyboard-terminology&quot;&gt;2&lt;/a&gt;&lt;/small&gt;&lt;/sup&gt;. Hot-swappable means that you can change out mechanical switches without soldering. I decided to go one step further into the hobby and obtain a keyboard kit (a case&lt;sup&gt;&lt;small&gt;&lt;a href=&quot;#keyboard-terminology&quot;&gt;4&lt;/a&gt;&lt;/small&gt;&lt;/sup&gt;, a PCB&lt;sup&gt;&lt;small&gt;&lt;a href=&quot;#keyboard-terminology&quot;&gt;3&lt;/a&gt;&lt;/small&gt;&lt;/sup&gt;) that required soldering the switches into the board.  I did my research and shopped around, eventually ordering all the components I needed: the kit (&lt;a href=&quot;https://input.club/whitefox/&quot;&gt;Input Club’s White Fox (Aria layout)&lt;/a&gt;), mechanical switches&lt;sup&gt;&lt;small&gt;&lt;a href=&quot;#keyboard-terminology&quot;&gt;2&lt;/a&gt;&lt;/small&gt;&lt;/sup&gt; (&lt;a href=&quot;https://drop.com/buy/drop-invyr-holy-panda-mechanical-switches?utm_source=linkshare&amp;amp;referer=YUZ2PB&quot;&gt;Holy Pandas&lt;/a&gt;), and key caps&lt;sup&gt;&lt;small&gt;&lt;a href=&quot;#keyboard-terminology&quot;&gt;1&lt;/a&gt;&lt;/small&gt;&lt;/sup&gt;  (&lt;a href=&quot;https://drop.com/buy/drop-zambumon-mt3-serika-custom-keycap-set?utm_source=linkshare&amp;amp;referer=YUZ2PB&quot;&gt;Zambumon’s MT3 profile, Serika colorway&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The way a lot of these individual components are sold is through group buys where you commit to paying for an item before they are made. If enough people commit to buy them, they get manufactured. This means you must plan far ahead, as it may take months to for all the parts to arrive. Oh, and small batch manufacturing isn’t cheap either.&lt;/p&gt;

&lt;p&gt;Anyway, months later I had everything ready and waiting for me to put together. Naturally, I procrastinated; it sat in a small stack of boxes next to my work desk for 6 more months. Finally, in early October 2020 I recommitted and put everything together.&lt;/p&gt;

&lt;p&gt;Time for &lt;a href=&quot;https://imgur.com/gallery/RvUlily&quot;&gt;some pictures&lt;/a&gt;! Disclaimer: I didn’t take a whole lot of pics, or focus on photo quality, because I didn’t want to distract myself from the “DOING.”&lt;/p&gt;

&lt;blockquote class=&quot;imgur-embed-pub&quot; lang=&quot;en&quot; data-id=&quot;a/RvUlily&quot;&gt;&lt;a href=&quot;//imgur.com/a/RvUlily&quot;&gt;I put together a White Fox (aria) mechanical keyboard with new Holy Panda switches and MT3 Serika key caps&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//s.imgur.com/min/embed.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;If you’ve read all this, looked at the pictures, then you may notice what I haven’t spoken to yet (even in pictures): &lt;strong&gt;the soldering&lt;/strong&gt;. Why? Well… I’m not proud of that work. When I was taking pictures and putting together that album I purposefully omitted pictures of that to hide my shame.&lt;/p&gt;

&lt;p&gt;The thing I &lt;em&gt;am&lt;/em&gt; proud of is that &lt;strong&gt;I did it&lt;/strong&gt; and that &lt;strong&gt;it worked&lt;/strong&gt; - success, right? Almost.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.soulcutter.com/images/white_fox/finished_keyboard.jpg&quot; alt=&quot;Completed White Fox keyboard sitting on a desk next to a soldering iron, blue sponge, and a coil of soldering wire&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It took an hour of me “driving” my new keyboard before I noticed something. There was a single key that wouldn’t register - the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6&lt;/code&gt; number key. Dang, I had to open the keyboard back up and fix a bad solder joint. There were so many bad solders it must be that, I thought. No problem, I was expecting something like this, and I even had extra switches if needed. A day later I opened the keyboard back up to fix the problem.&lt;/p&gt;

&lt;h2 id=&quot;the-soldering&quot;&gt;The Soldering&lt;/h2&gt;

&lt;p&gt;At this point I also decided “what the hell,” that I will take some pictures. I came around to the justifying that as embarrassing as it may be, sharing pictures of a job poorly-done might help this whole thing feel more-accessible to beginners like myself! I don’t need to front that I’m great at everything - it’s ok to be a beginner, and it’s ok to have learning experiences. So. I opened up the keyboard, looked at the soldered connections on the back of the board and here’s what I saw:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.soulcutter.com/images/white_fox/S7_problem.jpg&quot; alt=&quot;Back of PCB with an arrow pointing to an un-soldered pin next to the label S7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ignoring the bad soldering for a moment, you can clearly see the problem to the bottom-right of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S7&lt;/code&gt;. I completely missed soldering one of the switch contacts! THAT’S an easy fix - just have to solder it. Even “badly” would be better than “not at all.”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.soulcutter.com/images/white_fox/S7_problem_fixed.jpg&quot; alt=&quot;Back of PCB with an arrow pointing to a newly-soldered pin next to the label S7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Without re-assembling I went ahead and tested it by connecting the board to my computer and checking the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6&lt;/code&gt; key. It works now, hurray! One lesson I took away here is that soldering a keyboard is more-forgiving than you might assume - I fully expected there to be more non-functioning switches&lt;sup&gt;&lt;small&gt;&lt;a href=&quot;#keyboard-terminology&quot;&gt;2&lt;/a&gt;&lt;/small&gt;&lt;/sup&gt;, but surprisingly to me they all worked fine &lt;em&gt;if they were soldered at-all&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Now that you’ve seen a couple pics I’ll let you in on &lt;a href=&quot;https://imgur.com/gallery/02Jii3Q&quot;&gt;the full gallery with more pictures of the soldered side of the PCB&lt;/a&gt;. Your wincing muscles are about to get a workout.&lt;/p&gt;

&lt;blockquote class=&quot;imgur-embed-pub&quot; lang=&quot;en&quot; data-id=&quot;a/02Jii3Q&quot;&gt;&lt;a href=&quot;//imgur.com/a/02Jii3Q&quot;&gt;Fixing a non-registering key (soldering problem) on my White Fox keyboard&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//s.imgur.com/min/embed.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;If you read the comments alongside the pics, my shame is palpable but I had a hard time articulating exactly why these look so bad to me. I &lt;em&gt;do&lt;/em&gt; have some soldering experience, but I hadn’t picked up a soldering iron in over 20 years. I know these are bad, but dredging up my basic knowledge enough to even explain why was tough. I’ve since had the opportunity to share these pics with other keyboard nerds and they really helped me to explain what’s going on here, so I’ll share a bit of that here.&lt;/p&gt;

&lt;p&gt;A good solder joint on a PCB&lt;sup&gt;&lt;small&gt;&lt;a href=&quot;#keyboard-terminology&quot;&gt;3&lt;/a&gt;&lt;/small&gt;&lt;/sup&gt; looks mirror-shiny with a smooth, concave shape that covers the metal pad (shape-wise, for circular pads like these, a lot like a Hershey’s Kiss). Most of these are.. not that!&lt;/p&gt;

&lt;p&gt;Ross Reinhardt of &lt;a href=&quot;http://www.indyhackers.org/&quot;&gt;IndyHackers&lt;/a&gt;’ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#mech_keys&lt;/code&gt; Slack channel’s analysis was one of the best, most-concise explanations:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I think the blobs in that case look like they might be because the “trace” on the board didn’t get warm enough, so the solder didn’t really bond with it but kind of beaded up on top. Sounds like the inexpensive iron and dull tip that probably made it difficult! The dull tip is probably bridging right over the trace as it rests on the pin and the board… On the upside, if you get an iron with a better tip you could probably just hit those blobs again making sure the trace heats up as well and it will correct itself&lt;/p&gt;

  &lt;p&gt;That “dull” look to them (instead of appearing shiny) is characteristic of a “cold” solder joint (one that didn’t get warm enough to bond to all surfaces).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;He nails a lot of what went-on here, and even a big part of the why - I skimped on a cheap $15 soldering iron, and part of my bumbling inexperience led to the stylus-shaped tip corroding into a nub that was extremely hard to work with by the end of the project.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.soulcutter.com/images/white_fox/soldering_iron_corroded_tip.jpg&quot; alt=&quot;soldering iron tip that has corroded down to a nub&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’d have made some bad solders no matter what, especially in the first handful as I was fumbling to recall technique I’d learned 20+ years ago, but I gave myself a handicap by cheaping out on that soldering iron. A practiced hand could have laid down great solders with that iron, but I was far from that and a higher-quality more-forgiving iron would have helped me some.&lt;/p&gt;

&lt;p&gt;My strategy the whole project was to make one whole first pass no matter how ugly and then go back and fix any that weren’t working. Unfortunately my soldering iron tip was hot garbage at the end and I had no desire to go back for cosmetic cleanups, which is why I left them like this - they worked!&lt;/p&gt;

&lt;p&gt;So if they work, why are they bad? Well cosmetics, sure, but also the cold solders and blobs MAY become flaky over time since there’s not a good bond, so there is a risk I will be revisiting these in the future. I’m ok with that, at least for now.&lt;/p&gt;

&lt;p&gt;I do know that when I do this again I will do a LOT better, so it was good for learning and I get to enjoy a sweet keyboard!&lt;/p&gt;

&lt;h2 id=&quot;my-recommendations-for-other-beginners&quot;&gt;My Recommendations For Other Beginners&lt;/h2&gt;

&lt;p&gt;If this inspires any folks to try their hand at anything similar my recommendations would be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Spend more than the bare minimum on your soldering iron. A friend whom I consulted had this to say: “i splurged for a Hakko FX888D soldering station and it upgraded my soldering skills to ninja level […] im still definitely not good at soldering. but perfect temp control and really nice tips make it sooo much easier”&lt;/li&gt;
  &lt;li&gt;Watch a few &lt;a href=&quot;https://www.youtube.com/watch?v=oqV2xU1fee8&quot;&gt;soldering 101 YouTube videos&lt;/a&gt; to familiarize yourself with the technique. I was cocky because I’d done it before and only watched one short one, but I would have benefited from watching at least one or two more.&lt;/li&gt;
  &lt;li&gt;You can practice on something else first! There’s tons of pretty-nice practice kits for less than $10. Search your favorite shopping site for “practice soldering board kit”&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;keyboard-terminology&quot;&gt;keyboard terminology&lt;/h4&gt;

&lt;dl&gt;
  &lt;dt&gt;1. key caps&lt;/dt&gt;&lt;dd&gt;&lt;small&gt;The plastic tops of your keys, typically having the letters/numbers/functions printed on them.&lt;/small&gt;&lt;/dd&gt;
  &lt;dt&gt;2. switches&lt;/dt&gt;&lt;dd&gt;&lt;small&gt;The springy/clicky thing sitting under the key caps giving the keys their &quot;feel&quot;. This is the moving part.&lt;/small&gt;&lt;/dd&gt;
  &lt;dt&gt;3. PCB&lt;/dt&gt;&lt;dd&gt;&lt;small&gt;&lt;b&gt;P&lt;/b&gt;rinted &lt;b&gt;C&lt;/b&gt;ircuit &lt;b&gt;B&lt;/b&gt;oard. This is the &quot;brains&quot; of the keyboard, switches connect to the board and then the board sits in the case. The PCB has one or more ports to connect the keyboard to computers or other peripherals.&lt;/small&gt;&lt;/dd&gt;
  &lt;dt&gt;4. case&lt;/dt&gt;&lt;dd&gt;&lt;small&gt;The housing of the keyboard - mostly aesthetic, but contributes to the feel and sound of a keyboard.&lt;/small&gt;&lt;/dd&gt;
&lt;/dl&gt;</content><author><name/></author><category term="keyboard"/><category term="electronics"/><summary type="html">I wrote this on a forum that was not-necessarily technical, so I tried to be clear and not make assumptions about mechanical keyboard or electronics knowledge. The underlying theme is that this is an approachable project for beginners, like myself. Alright, strap in: this is a nerdy hobby.</summary></entry><entry><title type="html">Hiding .gemrc credentials in dotfiles</title><link href="http://www.soulcutter.com/articles/hiding-gemrc-credentials-in-dotfiles.html" rel="alternate" type="text/html" title="Hiding .gemrc credentials in dotfiles"><published>2018-07-12T13:00:00-04:00</published><updated>2018-07-12T13:00:00-04:00</updated><id>http://www.soulcutter.com/articles/hiding-gemrc-credentials-in-dotfiles</id><content type="html" xml:base="http://www.soulcutter.com/articles/hiding-gemrc-credentials-in-dotfiles.html">&lt;p&gt;I recently came across this problem with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.gemrc&lt;/code&gt; file used by the
&lt;a href=&quot;https://guides.rubygems.org/command-reference/&quot;&gt;gem command&lt;/a&gt; since I needed to store a
&lt;a href=&quot;https://gemfury.com/help/repository-url/&quot;&gt;a private token&lt;/a&gt; for accessing a GemFury gem source. I struggled to figure
out a way to keep the file in my dotfiles without exposing myself to the possibility that I would publish them. Finally,
at the end of my rope I reached out to my colleagues with this problem and within minutes
&lt;a href=&quot;https://github.com/adamstrickland&quot;&gt;Adam Strickland&lt;/a&gt; responded with a great approach that was not-obvious but ends up
being a great way to provide configuration outside of the committed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.gemrc&lt;/code&gt; file. A true hidden gem.
–do you see what I did there?&lt;/p&gt;

&lt;h2 id=&quot;gemrc-the-environment-variable&quot;&gt;GEMRC: the environment variable&lt;/h2&gt;

&lt;p&gt;It turns out that you can specify another place for the
&lt;a href=&quot;https://guides.rubygems.org/command-reference/&quot;&gt;gem command&lt;/a&gt; to look for configuration. If you define &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GEMRC&lt;/code&gt;
in your shell to point to a file, it will shallow-merge the configuration in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.gemrc&lt;/code&gt; with that file. The shallow
merge behavior is important - what I mean by that is any configuration key found in both places will be completely
overwritten by the value in the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GEMRC&lt;/code&gt; points to. More-concretely, if you define sources in both places you don’t
end up with the union of all sources, you end up with whatever sources are defined in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GEMRC&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Armed with that knowledge, I added this snippet to my shell initialization scripts:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HOME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/.gemrc.local&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GEMRC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HOME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/.gemrc.local&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I manually moved all the sources, including the sources containing auth, to that file. Then I removed the sensitive
sources from my tracked &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.gemrc&lt;/code&gt; file, and boom I have my credentials working, but I also have a tracked file for
non-sensitive settings.&lt;/p&gt;

&lt;h2 id=&quot;how-it-works&quot;&gt;How it works&lt;/h2&gt;

&lt;p&gt;I wanted to dig just a bit deeper in order to understand how this worked, because I found it -extremely- difficult to
find any reference to it across the internet. Trying to google GEMRC lands you with explanations of the “standard”
home directory file and not much else. There &lt;a href=&quot;https://stackoverflow.com/questions/35048760/is-there-a-gemrc-local-or-equivalent&quot;&gt;was a stack overflow post&lt;/a&gt;
that I finally dug up, and it DOES appear &lt;a href=&quot;https://docs.ruby-lang.org/en/trunk/Gem/ConfigFile.html&quot;&gt;in the docs&lt;/a&gt; if you
dig a fair amount. For me the best explanation of how it works is &lt;a href=&quot;https://github.com/rubygems/rubygems/blob/cbee1078e62f1cc167c6ebb91d2f97760394bac4/lib/rubygems/config_file.rb#L185-L187&quot;&gt;in the source&lt;/a&gt;
where you can see that it can be a colon or semicolon-separated list of files. It seems like an opportunity for a
documentation improvement - perhaps in &lt;a href=&quot;https://guides.rubygems.org/faqs/&quot;&gt;the RubyGems website FAQ&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TLDR;&lt;/h2&gt;

&lt;p&gt;You can define an environment variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GEMRC&lt;/code&gt; that points to a file that gets loaded in addition to system config or
user (home directory) config, and it will be loaded/merged after those other configs - totally useful for hiding sources
containing credentials if you commit your dotfiles to a public repository.&lt;/p&gt;

&lt;p&gt;That’s it! Cheers!&lt;/p&gt;</content><author><name/></author><category term="shell,"/><category term="dotfiles"/><summary type="html">I recently came across this problem with the ~/.gemrc file used by the gem command since I needed to store a a private token for accessing a GemFury gem source. I struggled to figure out a way to keep the file in my dotfiles without exposing myself to the possibility that I would publish them. Finally, at the end of my rope I reached out to my colleagues with this problem and within minutes Adam Strickland responded with a great approach that was not-obvious but ends up being a great way to provide configuration outside of the committed ~/.gemrc file. A true hidden gem. –do you see what I did there?</summary></entry><entry><title type="html">Memoizing in Ruby</title><link href="http://www.soulcutter.com/articles/memoizing-in-ruby.html" rel="alternate" type="text/html" title="Memoizing in Ruby"><published>2018-03-14T13:00:00-04:00</published><updated>2018-03-14T13:00:00-04:00</updated><id>http://www.soulcutter.com/articles/memoizing-in-ruby</id><content type="html" xml:base="http://www.soulcutter.com/articles/memoizing-in-ruby.html">&lt;p&gt;Memoization is the pattern of calculating a value once, and re-using that value each subsequent time it is needed.
It’s common to encounter this in Ruby in the form &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@variable ||= calculation&lt;/code&gt;. It’s so common that it
is often used even where it’s not expensive or re-used; it’s become a part of idiomatic Ruby. In my
&lt;a href=&quot;/articles/local-variable-aversion-antipattern.html&quot;&gt;last post&lt;/a&gt; I made an off-hand reference to solving the problem
of using memoization for &lt;em&gt;falsy&lt;/em&gt; values, and it seems a topic worth talking about in and of itself.&lt;/p&gt;

&lt;h2 id=&quot;what-do-you-mean-theres-a-problem&quot;&gt;What do you mean there’s a problem?&lt;/h2&gt;

&lt;p&gt;Consider that the following methods have the same behavior:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo_or_equal&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calculate_foo&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo_verbose&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calculate_foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo_multiline&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@foo&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calculate_foo&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;calculate_foo&lt;/code&gt; returns a &lt;em&gt;truthy&lt;/em&gt; object - anything but &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nil&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt; - there’s no problem at all. Calling any
one of those methods repeatedly will result in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;calculate_foo&lt;/code&gt; only being called
once&lt;sup&gt;&lt;small&gt;&lt;a href=&quot;#footnotes&quot;&gt;†&lt;/a&gt;&lt;/small&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;When &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;calculate_foo&lt;/code&gt; returns a &lt;em&gt;falsy&lt;/em&gt; object - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nil&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt; - it stores that value. Every subsequent call will
invoke &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;calculate_foo&lt;/code&gt; another time and re-store the falsy value. If that calculation is expensive - makes a database
call, communications with an external API, or is otherwise-slow - then this is precisely the behavior that memoization
was intended to prevent (but didn’t).&lt;/p&gt;

&lt;h2 id=&quot;the-foolproof-way-to-memoize&quot;&gt;The foolproof way to memoize&lt;/h2&gt;

&lt;p&gt;Now that we’ve identified the problem, how about a solution?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo_foolproof&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;defined?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calculate_foo&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s all there is to it. Calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;defined?(@foo)&lt;/code&gt; checks whether the expression &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@foo&lt;/code&gt; exists, though it is a bit
special since it &lt;em&gt;does not actually evaluate the expression&lt;/em&gt;. It looks like a method, but is actually a Ruby keyword.
An alternative that uses a regular Ruby method is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;instance_variable_defined?(:@foo)&lt;/code&gt;, but it’s a bit verbose. And
that’s actually the drawback to this foolproof approach in general. While it works the intended way and memoizes &lt;em&gt;falsy&lt;/em&gt;
values, it’s longer, more-boilerplate, and less-readable.&lt;/p&gt;

&lt;h2 id=&quot;how-about-a-generalized-approach&quot;&gt;How about a generalized approach?&lt;/h2&gt;

&lt;p&gt;Here’s a potential way to address this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Memoizer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Module&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;define_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ivar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;@&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;instance_variable_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ivar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance_variable_defined?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ivar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;instance_variable_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ivar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Helper&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;memoize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;prepend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Memoizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;  
  &lt;span class=&quot;kp&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Memoizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Helper&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;calculate_foo&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# this may as well be in-lined rather than a separate method&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;memoize&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:foo&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It’s worth pointing out that this approach only handles memoizing methods with no arguments. This could be adapted in
order to handle arguments - in fact you can find some links in this articles footnotes that go into that.&lt;/p&gt;

&lt;p&gt;There are several RubyGems that do this - and &lt;em&gt;of course&lt;/em&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ActiveSupport&lt;/code&gt; &lt;a href=&quot;https://github.com/rails/rails/commit/36253916b0b788d6ded56669d37c96ed05c92c5c#activesupport/lib/active_support/memoizable.rb&quot;&gt;once had a memoizing module&lt;/a&gt;,
but I pretty much agree with the conclusion of the Rails team there, which is to say - it’s better to just use Ruby in
your own projects. It’s faster, it’s clearer, there’s &lt;em&gt;no need for a dependency&lt;/em&gt; to do this. I’d even say this proposed
helper is overkill. The point was to show that it’s simple, and it’s something you &lt;em&gt;can&lt;/em&gt; do if it makes your code clearer
or easier to work with.&lt;/p&gt;

&lt;h4 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h4&gt;

&lt;p&gt;† - this is not strictly true in a multi-threaded environment, but I’m choosing to avoid getting into that in this
article.&lt;/p&gt;

&lt;p&gt;This article is &lt;em&gt;nothing new&lt;/em&gt; and &lt;a href=&quot;https://www.justinweiss.com/articles/4-simple-memoization-patterns-in-ruby-and-one-gem/&quot;&gt;has&lt;/a&gt;
&lt;a href=&quot;http://gavinmiller.io/2013/advanced-memoization-in-ruby/&quot;&gt;been&lt;/a&gt; &lt;a href=&quot;http://blog.honeybadger.io/rubyist_guide_to_memoization/&quot;&gt;written&lt;/a&gt;
&lt;a href=&quot;https://engineering.gusto.com/memoization-in-ruby-made-easy/&quot;&gt;about&lt;/a&gt;
&lt;a href=&quot;https://karolgalanciak.com/blog/2017/05/28/ruby-memoization-%7C%7C-equals-vs-defined-syntax/&quot;&gt;before&lt;/a&gt;, but it’s a common-enough
footgun that I didn’t mind writing up my version of this sentiment.&lt;/p&gt;</content><author><name/></author><category term="ruby"/><summary type="html">Memoization is the pattern of calculating a value once, and re-using that value each subsequent time it is needed. It’s common to encounter this in Ruby in the form @variable ||= calculation. It’s so common that it is often used even where it’s not expensive or re-used; it’s become a part of idiomatic Ruby. In my last post I made an off-hand reference to solving the problem of using memoization for falsy values, and it seems a topic worth talking about in and of itself.</summary></entry><entry><title type="html">The Local Variable Aversion Antipattern</title><link href="http://www.soulcutter.com/articles/local-variable-aversion-antipattern.html" rel="alternate" type="text/html" title="The Local Variable Aversion Antipattern"><published>2018-03-08T23:00:00-05:00</published><updated>2018-03-08T23:00:00-05:00</updated><id>http://www.soulcutter.com/articles/local-variable-aversion-antipattern</id><content type="html" xml:base="http://www.soulcutter.com/articles/local-variable-aversion-antipattern.html">&lt;p&gt;In my experience writing Ruby, a strong aversion to using local variables is something I have noticed again and again.
I would propose that in &lt;em&gt;most&lt;/em&gt; scenarios this has several under-recognized drawbacks. The solution is easy:
&lt;strong&gt;use local variables&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;methods-take-more-lines&quot;&gt;Methods take more lines&lt;/h3&gt;

&lt;p&gt;This may sound obvious, but every method definition results in +3 extra lines in a class.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;def name&lt;/code&gt; The method definition&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;end&lt;/code&gt; The method definition termination&lt;/li&gt;
  &lt;li&gt;A line of whitespace that separates the methods&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Lines of code are meaningless, right? No big deal. WRONG! You walked right into that one (grin).&lt;/p&gt;

&lt;p&gt;Lines of code represent a maintenance burden. They &lt;strong&gt;do&lt;/strong&gt; matter, as they can add up quickly and turn a class
that can be read easily in a single page into a long, choppy mess.&lt;/p&gt;

&lt;p&gt;I consider this particularly egregious when a variable definition would have been a single line. A good general rule is
that if the number of added lines is more than the body of the definition itself, you are introducing more noise and
less signal in your code. That’s a bad thing.&lt;/p&gt;

&lt;h3 id=&quot;methods-obscure-linear-readability&quot;&gt;Methods obscure linear readability&lt;/h3&gt;

&lt;p&gt;Another aspect of readability is the ability of a person reading the code to follow what’s going on. The interpreter can
trivially follow a chain of methods and unroll that into a discrete sequence of instructions. PEOPLE, however, have a
MUCH easier time reading in a single top-to-bottom sweep. Here’s an example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClientsController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;json: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client_serializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;serialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fields&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;client_serializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;ClientSerializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you object that this is a contrived example, I took this almost verbatim from a real codebase. I actually simplified 
it for the sake of brevity. It doesn’t take a lot of imagination for this to be a part of a larger class which only
makes the amount of indirection more confusing. When I talk about the ability for a human to read this, here is where
a person’s eyes must go in order to read this code and fully understand what the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;show&lt;/code&gt; method does:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.soulcutter.com/images/reading_non_linear_code.png&quot; alt=&quot;Reading non-linear code&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I concede that programmers get good at doing this sort of thing, but nevertheless I am convinced that it’s far easier to
read that same code in this form:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClientsController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;client_serializer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ClientSerializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;json: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client_serializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;serialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you’re counting that’s 7 lines of code rather than 16 lines of code. The furthest your eye might have to jump up/down
is a single line. I cheated slightly in that I skipped creating a local variable entirely for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;param[:fields]&lt;/code&gt;, because
sometimes when you inline things you realize how little the label of a variable adds to understandability.&lt;/p&gt;

&lt;h3 id=&quot;how-about-memoization&quot;&gt;How about memoization?&lt;/h3&gt;

&lt;p&gt;Another version of this that I see a lot is using it for sharing memoized instances between methods.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClientsController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RecordNotFound&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;present?&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;json: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client_serializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;serialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;client&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;client_serializer&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@client_serializer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ClientSerializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This has all the same problems I already talked about, plus it adds statefulness and unclear method dependencies into
the mix.&lt;/p&gt;

&lt;p&gt;It’s harder to reason about state outside of the lexical scope. Since this memoization could be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nil&lt;/code&gt;, it now depends on a
nil-check occurring before subsequent calls to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client&lt;/code&gt; since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nil&lt;/code&gt; is falsy, and therefore the database call could
occur multiple times despite the attempt at memoization. We can fix that, but it doesn’t make the code more-clear:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;client&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@client&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;defined?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Speaking of complexity, does &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client_serializer&lt;/code&gt; make a database call? Maybe. It depends on whether or not something
populated the memoized variable. Also why are we memoizing the serializer? Are multiple things using it? Is it expensive
to create? Well, it might be expensive if it has to make a database call. This code is just plain murkier than the
alternative:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClientsController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RecordNotFound&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;present?&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;client_serializer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ClientSerializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;json: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client_serializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;serialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Representing it this way might even make it clearer that you never need to allow a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nil&lt;/code&gt; client and could use
ActiveRecord’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find_by!&lt;/code&gt; to tighten this up. If you were looking at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client&lt;/code&gt; memoizing method
it’s not-at-all clear whether that is the desired behavior in every place that used it.&lt;/p&gt;

&lt;h3 id=&quot;exceptions&quot;&gt;Exceptions&lt;/h3&gt;

&lt;p&gt;Sometimes it’s important to re-use the same block of code from multiple entrypoints in your class. That’s fair. Keep
in mind that some amount of minor duplication is ok, though. DRY is not about repeating lines of code, but about repeating
ideas. If you can’t imagine extracting a small standalone class to represent that shared functionality, then you might
not need a method either. I am not suggesting all extracted methods be classes, just a perspective to have when thinking
about whether it truly belongs as a separate block of code.&lt;/p&gt;

&lt;h3 id=&quot;why-i-wrote-this&quot;&gt;Why I wrote this&lt;/h3&gt;

&lt;p&gt;I have often seen the “only use extracted methods” approach in Ruby code, and never seen the “only use local variables”
approach (which I do &lt;em&gt;not&lt;/em&gt; advocate). There’s a middle path where using both extracted methods and local variables can
help to make your code more readable, more maintainable, and easier to reason about. My aim here is to provoke you to
think about it, and maybe tip the scales back into a better balance.&lt;/p&gt;</content><author><name/></author><category term="ruby"/><category term="opinion"/><summary type="html">In my experience writing Ruby, a strong aversion to using local variables is something I have noticed again and again. I would propose that in most scenarios this has several under-recognized drawbacks. The solution is easy: use local variables.</summary></entry><entry><title type="html">Instrumenting Ruby Methods</title><link href="http://www.soulcutter.com/articles/instrumenting-ruby-methods.html" rel="alternate" type="text/html" title="Instrumenting Ruby Methods"><published>2017-11-16T12:00:00-05:00</published><updated>2017-11-16T12:00:00-05:00</updated><id>http://www.soulcutter.com/articles/instrumenting-ruby-methods</id><content type="html" xml:base="http://www.soulcutter.com/articles/instrumenting-ruby-methods.html">&lt;p&gt;&lt;strong&gt;Instrumentation&lt;/strong&gt; is the addition of measurement to code - for example timing how long Ruby is spending in a given
method. There are many approaches to adding instrumentation to code
in Ruby - whether it’s using 3rd party services like New Relic and Datadog, using libraries like Rubyprof, or even plain
old logging. Here I propose an unintrusive Ruby 2.0+ technique to add instrumentation to arbitrary methods. If you want
to jump straight to the proposed code without the explanation of how or why we got there, here’s
your &lt;a href=&quot;/articles/instrumenting-ruby-methods.html#tldr&quot;&gt;TLDR&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;instrumenting-code-directly-is-messy&quot;&gt;Instrumenting Code Directly Is Messy&lt;/h3&gt;
&lt;p&gt;One thing that bothers me when adding custom instrumentation to code is how intrusive it can be. Sometimes the code
necessary to add measurements around a process are more code than the process itself. If you intertwine the
instrumenting code with the code that it’s intended to measure, it obscures the intent of the original code.&lt;/p&gt;

&lt;h3 id=&quot;coupling&quot;&gt;Coupling&lt;/h3&gt;
&lt;p&gt;If you use a library for instrumentation, and add that instrumentation to code all over your codebase, it can quickly
turn into a broad but shallow coupling to that library. For example imagine that you started a project using New Relic
and it grew to a point where there were dozens of custom calls to New Relic’s instrumentation - so far so good. What if
you stop using New Relic in the future? Or if the instrumentation API changes? Or you notice a subtle bug in the
boilerplate instrumenting code you’ve sprinkled everywhere? Now you have dozens of files to modify in order to get
instrumentation working properly again.&lt;/p&gt;

&lt;h3 id=&quot;not-convinced&quot;&gt;Not Convinced?&lt;/h3&gt;
&lt;p&gt;If you’ve made it this far, you may be thinking &lt;em&gt;“Well that’s just great. Instrumenting is useful, but don’t add 
instrumentation directly to the code. So what ARE you supposed to be doing?!”&lt;/em&gt; So let’s dive into real code example to
illustrate.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sleeper&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sleep&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Kernel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deep_sleep&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Kernel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;OK, we have a contrived example! Now let’s add some instrumentation!&lt;/p&gt;

&lt;p&gt;Here’s an example of what &lt;a href=&quot;https://docs.newrelic.com/docs/agents/ruby-agent/customization/ruby-custom-instrumentation&quot;&gt;New Relic instrumentation&lt;/a&gt;
might look like.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sleeper&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NewRelic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Agent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MethodTracer&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sleep&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;trace_execution_scoped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'sleep'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Kernel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deep_sleep&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;trace_execution_scoped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'deep_sleep'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Kernel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There’s a lot of repetition in there, but also this add methods to the Sleeper class and there are New
Relic-specific method calls alongside the code that’s being instrumented.&lt;/p&gt;

&lt;p&gt;Let’s revert back to the original implementation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sleeper&lt;/code&gt;. How might we be able to add instrumentation WITHOUT
changing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sleeper&lt;/code&gt; class? Here’s a first pass:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;InstrumentedSleep&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sleep&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;trace_execution_scoped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'sleep'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prepended&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NewRelic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Agent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MethodTracer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is_a?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NewRelic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Agent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MethodTracer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;InstrumentedDeepSleep&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deep_sleep&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;trace_execution_scoped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'deep_sleep'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prepended&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NewRelic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Agent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MethodTracer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is_a?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NewRelic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Agent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MethodTracer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Sleeper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;prepend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;InstrumentedSleep&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Sleeper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;prepend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;InstrumentedDeepSleep&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;why-prepend&quot;&gt;Why prepend?&lt;/h3&gt;

&lt;p&gt;Prepending gives us a way to insert our module in the method lookup chain. When you call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sleeper.sleep&lt;/code&gt; it will resolve
which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sleep&lt;/code&gt; method to execute in the order of its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ancestors&lt;/code&gt; array. &lt;a href=&quot;https://medium.com/@leo_hetsch/ruby-modules-include-vs-prepend-vs-extend-f09837a5b073&quot;&gt;Prepend puts a module first in the ancestor
list&lt;/a&gt;,
before even the Class itself. The order of resolving methods in this example will then will be:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;InstrumentedDeepSleep&lt;/li&gt;
  &lt;li&gt;InstrumentedSleep&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sleeper&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Object&lt;/li&gt;
  &lt;li&gt;Kernel&lt;/li&gt;
  &lt;li&gt;BasicObject&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you had used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;include&lt;/code&gt;, the order of the ancestry, and how Ruby would attempt to resolve the method being called
would look more like this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Sleeper&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;InstrumentedDeepSleep&lt;/li&gt;
  &lt;li&gt;InstrumentedSleep&lt;/li&gt;
  &lt;li&gt;Object&lt;/li&gt;
  &lt;li&gt;Kernel&lt;/li&gt;
  &lt;li&gt;BasicObject&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Also worth noting that we used the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prepended&lt;/code&gt; hook to extend the New Relic code&lt;/p&gt;

&lt;h3 id=&quot;its-a-lot-of-work-to-create-a-module-per-method&quot;&gt;It’s a lot of work to create a Module per method&lt;/h3&gt;

&lt;p&gt;The only difference between the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Instrumented&lt;/code&gt; modules is the name of the method to instrument. If only there was a way
to write a template for this type of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Module&lt;/code&gt;, and generate a new module every place we want to instrument. It
so-happens there IS a handy way to do that - enter the
&lt;a href=&quot;http://dejimata.com/2017/5/20/the-ruby-module-builder-pattern&quot;&gt;Module Builder pattern&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Intrumentation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Module&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;define_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;trace_execution_scoped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;      
      &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;      
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;    
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prepended&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NewRelic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Agent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MethodTracer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is_a?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NewRelic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Agent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MethodTracer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Sleeper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;prepend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Instrumentation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Sleeper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;prepend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Instrumentation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:deep_sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Not bad! Now we don’t have to define a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Module&lt;/code&gt; for every method - the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Instrumentation&lt;/code&gt; class will build modules for
us based on the template we’ve provided.&lt;/p&gt;

&lt;p&gt;You may have noticed a tweak that was made to the invocation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;super&lt;/code&gt; - because we are using the block form of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;define_method&lt;/code&gt; we must call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;super&lt;/code&gt; with arguments rather than the implied arguments of a bare call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;super&lt;/code&gt;. If you
try using a plain &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;super&lt;/code&gt; Ruby will correct you with an error message. It’s just the way it is - &lt;em&gt;for reasons&lt;/em&gt;, I
assume.&lt;/p&gt;

&lt;h3 id=&quot;making-this-more-usable&quot;&gt;Making this more-usable&lt;/h3&gt;

&lt;p&gt;In terms of usability, I think there are a couple of rough edges here. First-off, despite it being a language feature,
a lot of people don’t think to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prepend&lt;/code&gt; modules, and even if it did make sense to a person it’s not-so-natural to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prepend&lt;/code&gt; a module/class that you instantiate. Maybe I’m too pessimistic about what folks are comfortable with?
Lastly, how would you be able to apply this to a Class method? It IS possible, but it’s not obvious.&lt;/p&gt;

&lt;p&gt;A more-polished
interface might look like this:&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;tldr&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Instrumentor&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instrument_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;respond_to?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ArgumentError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; does not define &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; - unable to instrument &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inspect&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;prepend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Instrumentation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instrument_class_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;instrument_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;singleton_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Intrumentation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Module&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@label&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;
    
      &lt;span class=&quot;n&quot;&gt;define_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;trace_execution_scoped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;      
        &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;      
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;    
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;inspect&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inspect&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;#&amp;lt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: method=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inspect&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; label=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inspect&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prepended&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NewRelic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Agent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MethodTracer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is_a?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NewRelic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Agent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MethodTracer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Instrumenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instrument_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Sleeper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Instrumenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instrument_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Sleeper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:deep_sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Instrumenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instrument_class_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Sleeper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The way we are able to wrap class methods is to pass &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;klass.singleton_class&lt;/code&gt; as the class used for prepending the
instrumentation module.&lt;/p&gt;

&lt;p&gt;I added some other niceties, such as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inspect&lt;/code&gt; method which is helpful for describing the module if you look at
a class’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ancestors&lt;/code&gt;. You may not do that explicitly a lot, but it does come up - for example you might see this in
a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pry&lt;/code&gt; console when you do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls Sleeper&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There’s also now an arbitrary label that can be used for the instrumentation, with some useful defaults. No need
to justify that technically-speaking, it’s just nice to have!&lt;/p&gt;

&lt;h3 id=&quot;there-you-have-it&quot;&gt;There you have it&lt;/h3&gt;

&lt;p&gt;This presents a friendly API, doesn’t infest the code that is being instrumented,
doesn’t pollute the instrumented code’s interface, captures the pattern of instrumention unique to your project
in a single place, and is easy to change when your instrumentation strategy changes.&lt;/p&gt;</content><author><name/></author><category term="ruby"/><summary type="html">Instrumentation is the addition of measurement to code - for example timing how long Ruby is spending in a given method. There are many approaches to adding instrumentation to code in Ruby - whether it’s using 3rd party services like New Relic and Datadog, using libraries like Rubyprof, or even plain old logging. Here I propose an unintrusive Ruby 2.0+ technique to add instrumentation to arbitrary methods. If you want to jump straight to the proposed code without the explanation of how or why we got there, here’s your TLDR.</summary></entry><entry><title type="html">Blog Relaunch</title><link href="http://www.soulcutter.com/articles/blog-relaunch.html" rel="alternate" type="text/html" title="Blog Relaunch"><published>2017-11-05T11:25:00-05:00</published><updated>2017-11-05T11:25:00-05:00</updated><id>http://www.soulcutter.com/articles/blog-relaunch</id><content type="html" xml:base="http://www.soulcutter.com/articles/blog-relaunch.html">&lt;p&gt;It is &lt;strong&gt;official&lt;/strong&gt; - I have relaunched my blog! It looks a bit trashy at the moment, but it’s something I can maintain and improve over time.&lt;/p&gt;

&lt;h2 id=&quot;what-happened-to-the-old-posts&quot;&gt;What happened to the old posts?&lt;/h2&gt;

&lt;p&gt;My old OctoPress-based blog only had six posts!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Localization of nested attributes in Rails 3.2&lt;/li&gt;
  &lt;li&gt;Click events in poltergeist vs capybara-webkit&lt;/li&gt;
  &lt;li&gt;How to turn off Dragonfly’s default verbose rack-cache&lt;/li&gt;
  &lt;li&gt;Speeding up tests that interact with Dragonfly&lt;/li&gt;
  &lt;li&gt;Default Hash Values&lt;/li&gt;
  &lt;li&gt;Default Hash Values (the RIGHT way)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have decided that they are old enough that the information is either out-of-date or not valuable enough to carry forward.
You &lt;em&gt;may&lt;/em&gt; be able to find those old posts by &lt;a href=&quot;http://web.archive.org/web/*/soulcutter.com/*&quot;&gt;browsing soulcutter.com on Archive.org&lt;/a&gt;.&lt;/p&gt;</content><author><name/></author><category term="jekyll"/><category term="update"/><summary type="html">It is official - I have relaunched my blog! It looks a bit trashy at the moment, but it’s something I can maintain and improve over time.</summary></entry></feed>