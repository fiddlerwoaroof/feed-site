<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Test Double Blog</title>
    <link>https://blog.testdouble.com/</link>
    <language>en-us</language>
    <managingEditor>cathy.colliver@testdouble.com (Cathy Colliver)</managingEditor>
    <webMaster>justin@testdouble.com (Justin Searls)</webMaster>
    <lastBuildDate>Wed, 16 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.testdouble.com/index.xml" rel="self" type="application/rss+xml"/>
    <item>
      <title>Too much developer generalization can hurt</title>
      <link>https://blog.testdouble.com/posts/2022-11-16-how-too-much-generalization-can-hurt/</link>
      <pubDate>Wed, 16 Nov 2022 00:00:00 +0000</pubDate>
      
      
      <author>hello+rss@testdouble.com (Eve Ragins)</author>
      <guid>https://blog.testdouble.com/posts/2022-11-16-how-too-much-generalization-can-hurt/</guid>
      <description>&lt;p&gt;This is a tale of personal frustration and reflection made immortal.&lt;/p&gt;



&lt;h2 id=&quot;setting-the-stage&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#setting-the-stage&quot;&gt;Setting the stage&lt;/a&gt;
  
&lt;/h2&gt;
&lt;p&gt;Laying in bed this morning, I realized that I&amp;rsquo;ve worked in five different ecosystems in just the last two years:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;an enterprise client (Windows, C#, NServiceBus, Azure, VS Enterprise)&lt;/li&gt;
&lt;li&gt;an enterprise client (Windows, Scala, Apache Spark, DataBricks, IntelliJ (Windows shortcuts).  And also C#, AWS, Kafka, with a dash of Angular for good measure (VS Enterprise))&lt;/li&gt;
&lt;li&gt;a seed start-up (Windows, Mongo Realm (JavaScript), Svelte, Flutter, VS Code)&lt;/li&gt;
&lt;li&gt;a start-up client (Linux, React, VS Code)&lt;/li&gt;
&lt;li&gt;an enterprise client (Mac, Kotlin, Spring Boot, AWS, IntelliJ (Mac shortcuts))&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Actually, that&amp;rsquo;s more like eight.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not even counting tinkering with Arduino or Unity or dabbing a toe into the worlds of Elixir, Ruby, and Python. I also didn&amp;rsquo;t list ancillary tools, which vary as much as the tech stacks. Each of the above are things where my primary job and success was grounded in adapting to the platform and delivering paradigmatically quality code for each and helping others do the same. Oh yeah, and architecting and socializing platform-appropriate solutions.&lt;/p&gt;
&lt;p&gt;In the same timeframe, I&amp;rsquo;ve also transitioned from Windows to Linux to Mac. Windows to Linux was comparatively easy. Shifting from Windows/Linux to Mac has been much harder and I&amp;rsquo;m not even close to over it (no help from the hardware being painfully unusable).&lt;/p&gt;
&lt;p&gt;These are simply just facts.&lt;/p&gt;
&lt;p&gt;Oh, and to top it off, my next engagement is slated to be Windows Desktop development, RDPing from a mac. üç∞&lt;/p&gt;



&lt;h3 id=&quot;the-outcome&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#the-outcome&quot;&gt;The outcome&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;It feels like I have no idea how to write code anymore.&lt;/p&gt;
&lt;p&gt;And the shift in operating systems and IDEs means where I was previously adroit in navigating my environment, the code, and generally feeling good, now I have to do a double-take for basic text editing and frequently find myself reaching for the mouse.&lt;/p&gt;
&lt;p&gt;Do I appreciate the different perspectives each has given me?  Yes, absolutely.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But the mental jumble is hurting me, and it&amp;rsquo;s becoming apparent that it&amp;rsquo;s hurting my career, too.&lt;/strong&gt;&lt;/p&gt;



&lt;h3 id=&quot;what-this-looks-like-in-action&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#what-this-looks-like-in-action&quot;&gt;What this looks like in action&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Interviewer:&lt;/strong&gt; Tell me a little about yourself.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Me:&lt;/strong&gt; Well, according to my resume, I&amp;rsquo;m pretty awesome.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Interviewer:&lt;/strong&gt; Can you do xyz?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Me:&lt;/strong&gt; Probably, I&amp;rsquo;ve done it or something similar before.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Interviewer:&lt;/strong&gt; Please code your way out of this bag.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Me:&lt;/strong&gt; Sure! &amp;hellip; Just a sec while I look up the syntax.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Interviewer:&lt;/strong&gt; What about using this language feature?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Me:&lt;/strong&gt; Oh&amp;hellip; right.  Yeah, good idea.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Interviewer:&lt;/strong&gt; Thanks for your time. We were looking for somebody with a bit more experience, though.&lt;/p&gt;
&lt;p&gt;Some generalization is good, but clearly it can go too far.&lt;/p&gt;



&lt;h3 id=&quot;an-analogy&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#an-analogy&quot;&gt;An analogy&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;Maybe the feeling can be likened to trying to learn a foreign language. And then another. And then another. I studied German in high school and Japanese about a decade ago. Most recently, I&amp;rsquo;ve been trying to learn Spanish, and in order to get my brain to stop reaching for the other languages, I&amp;rsquo;ve had to cut exposure so that it builds new pathways without constantly wandering off in the wrong direction. Coding feels somewhat similar in that so much mental effort is spent just finding which paths are applicable that there&amp;rsquo;s little left for scouting out idiomatic approaches or choosing the best one.&lt;/p&gt;
&lt;p&gt;Sumimasen, ¬øpuedo tener ein bisschen m√°s bitte ka. &lt;em&gt;(Pardon me, can I have a little more, please?)&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;Author&amp;rsquo;s note: The abrupt ending is intentional. I will attempt to explore more around the topic of developer generalization for both individuals and employers in future collaborative posts. Thank you to the initial reviewers from Test Double who assured me that this post has value by itself. Stay tuned!&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>S.O.S.(F).: Save Our Submittable (Forms)</title>
      <link>https://blog.testdouble.com/posts/2022-11-14-save-our-submittable-forms/</link>
      <pubDate>Mon, 14 Nov 2022 00:00:00 +0000</pubDate>
      
      
      <author>hello+rss@testdouble.com (Daniel Huss)</author>
      <guid>https://blog.testdouble.com/posts/2022-11-14-save-our-submittable-forms/</guid>
      <description>


&lt;h2 id=&quot;based-on-a-true-story&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#based-on-a-true-story&quot;&gt;Based on a true story&lt;/a&gt;
  
&lt;/h2&gt;
&lt;p&gt;Once upon a time, not too long ago, I was a new developer. Fresh out of my bootcamp, I was in love with React and Node and wanted to write code that was flashy and new inside. Code that leaned on hooks to build cool UI things.&lt;/p&gt;
&lt;p&gt;When I was asked to implement an onboarding feature for new users, I jumped in with glee. We wanted to do a questionnaire. We were working on a single page application, and to avoid overwhelming the users with questions too quickly we decided a transition between questions was in order.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Wow!,&amp;rdquo; I thought.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;A set of components that all need to collect information?&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;I should control all these from one place, and then bundle up that data!&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;A single component can manage all the state.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;And then submit it to the backend!&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Like every new bootcamp grad, I said: &amp;ldquo;I know what this needs! A custom hook!&amp;rdquo;&lt;/p&gt;
&lt;p&gt;So I implemented it. The state got unwieldy. I didn&amp;rsquo;t abstract things properly. When we wanted to change the order of the questions, well &amp;hellip; you can imagine.&lt;/p&gt;
&lt;p&gt;Then we needed to validate emails. Some was backend validation, sure, but mostly we wanted to make sure the right gist of an email was there before we submit.&lt;/p&gt;
&lt;p&gt;Of course, it was a bad user experience to navigate back through all 20 pages in the questionnaire to edit that email. So we made a cool new component to summarize everything. While we&amp;rsquo;re here, let&amp;rsquo;s allow for edits in this summary‚Äîin case we made a mistake along the way! Naturally, we can show the validation errors here, too.&lt;/p&gt;
&lt;p&gt;Do you see where I&amp;rsquo;m going?&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;TotallyNotAForm&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; () =&amp;gt; {
    &lt;span style=&quot;color:#66d9ef&quot;&gt;const&lt;/span&gt; {
        &lt;span style=&quot;color:#a6e22e&quot;&gt;email&lt;/span&gt;,
        &lt;span style=&quot;color:#a6e22e&quot;&gt;setEmail&lt;/span&gt;,
        &lt;span style=&quot;color:#a6e22e&quot;&gt;phoneNumber&lt;/span&gt;,
        &lt;span style=&quot;color:#a6e22e&quot;&gt;setPhoneNumber&lt;/span&gt;,
        &lt;span style=&quot;color:#a6e22e&quot;&gt;insuranceChoice&lt;/span&gt;,
        &lt;span style=&quot;color:#a6e22e&quot;&gt;setInsuranceChoice&lt;/span&gt;,
        &lt;span style=&quot;color:#a6e22e&quot;&gt;submitTotallyNotAForm&lt;/span&gt;
    } &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;useTotallyNotAFormDataHook&lt;/span&gt;()
    &lt;span style=&quot;color:#75715e&quot;&gt;// Add a  WHOLE LOT MORE to this list, and you get the point
&lt;/span&gt;&lt;span style=&quot;color:#75715e&quot;&gt;&lt;/span&gt;
    &lt;span style=&quot;color:#66d9ef&quot;&gt;const&lt;/span&gt; [&lt;span style=&quot;color:#a6e22e&quot;&gt;currentQuestion&lt;/span&gt;, &lt;span style=&quot;color:#a6e22e&quot;&gt;setCurrentQuestion&lt;/span&gt;] &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;useState&lt;/span&gt;(&lt;span style=&quot;color:#ae81ff&quot;&gt;1&lt;/span&gt;)

    &lt;span style=&quot;color:#66d9ef&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;nextQuestion&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; () =&amp;gt; {
        &lt;span style=&quot;color:#a6e22e&quot;&gt;setCurrentQuestion&lt;/span&gt;(&lt;span style=&quot;color:#a6e22e&quot;&gt;currentQuestion&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;+&lt;/span&gt; &lt;span style=&quot;color:#ae81ff&quot;&gt;1&lt;/span&gt;)
    }

    &lt;span style=&quot;color:#66d9ef&quot;&gt;return&lt;/span&gt; (
        &lt;span style=&quot;color:#f92672&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;
            {&lt;span style=&quot;color:#a6e22e&quot;&gt;currentQuestion&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;===&lt;/span&gt; &lt;span style=&quot;color:#ae81ff&quot;&gt;1&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                &lt;span style=&quot;color:#f92672&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color:#a6e22e&quot;&gt;Question&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;text&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;What&amp;#39;s your email?&amp;#34;&lt;/span&gt; 
                          &lt;span style=&quot;color:#a6e22e&quot;&gt;response&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;{&lt;span style=&quot;color:#a6e22e&quot;&gt;setEmail&lt;/span&gt;} &lt;span style=&quot;color:#a6e22e&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;{&lt;span style=&quot;color:#a6e22e&quot;&gt;email&lt;/span&gt;} 
                          &lt;span style=&quot;color:#a6e22e&quot;&gt;nextQuestion&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;{&lt;span style=&quot;color:#a6e22e&quot;&gt;nextQuestion&lt;/span&gt;}&lt;span style=&quot;color:#f92672&quot;&gt;/&amp;gt;&lt;/span&gt;
            }
            {&lt;span style=&quot;color:#a6e22e&quot;&gt;currentQuestion&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;===&lt;/span&gt; &lt;span style=&quot;color:#ae81ff&quot;&gt;2&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                &lt;span style=&quot;color:#f92672&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color:#a6e22e&quot;&gt;Question&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;text&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;What&amp;#39;s your phone number?&amp;#34;&lt;/span&gt; 
                          &lt;span style=&quot;color:#a6e22e&quot;&gt;response&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;{&lt;span style=&quot;color:#a6e22e&quot;&gt;setPhoneNumber&lt;/span&gt;} &lt;span style=&quot;color:#a6e22e&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;{&lt;span style=&quot;color:#a6e22e&quot;&gt;phoneNumber&lt;/span&gt;}
                          &lt;span style=&quot;color:#a6e22e&quot;&gt;nextQuestion&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;{&lt;span style=&quot;color:#a6e22e&quot;&gt;nextQuestion&lt;/span&gt;}&lt;span style=&quot;color:#f92672&quot;&gt;/&amp;gt;&lt;/span&gt;
            }
            {&lt;span style=&quot;color:#a6e22e&quot;&gt;currentQuestion&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;===&lt;/span&gt; &lt;span style=&quot;color:#ae81ff&quot;&gt;3&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                &lt;span style=&quot;color:#f92672&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color:#a6e22e&quot;&gt;Question&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;text&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;Please Select Your Type of Insurance&amp;#34;&lt;/span&gt; 
                          &lt;span style=&quot;color:#a6e22e&quot;&gt;response&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;{&lt;span style=&quot;color:#a6e22e&quot;&gt;setInsuranceChoice&lt;/span&gt;} 
                          &lt;span style=&quot;color:#a6e22e&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;{&lt;span style=&quot;color:#a6e22e&quot;&gt;insuranceChoice&lt;/span&gt;} 
                          &lt;span style=&quot;color:#a6e22e&quot;&gt;nextQuestion&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;{&lt;span style=&quot;color:#a6e22e&quot;&gt;nextQuestion&lt;/span&gt;}&lt;span style=&quot;color:#f92672&quot;&gt;/&amp;gt;&lt;/span&gt;
            }

            { &lt;span style=&quot;color:#75715e&quot;&gt;/* 20 some other question components later */&lt;/span&gt; }

            {&lt;span style=&quot;color:#a6e22e&quot;&gt;currentQuestion&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;===&lt;/span&gt; &lt;span style=&quot;color:#ae81ff&quot;&gt;24&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; 
                &lt;span style=&quot;color:#f92672&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color:#a6e22e&quot;&gt;SummarizeAndEditAnswers&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;submit&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;{&lt;span style=&quot;color:#a6e22e&quot;&gt;submitTotallyNotAForm&lt;/span&gt;}
                &lt;span style=&quot;color:#75715e&quot;&gt;/*
&lt;/span&gt;&lt;span style=&quot;color:#75715e&quot;&gt;                you better believe every single thing from the
&lt;/span&gt;&lt;span style=&quot;color:#75715e&quot;&gt;                hook got passed in here too! 
&lt;/span&gt;&lt;span style=&quot;color:#75715e&quot;&gt;                * */&lt;/span&gt;
                &lt;span style=&quot;color:#f92672&quot;&gt;/&amp;gt;&lt;/span&gt;}
        &lt;span style=&quot;color:#f92672&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color:#960050;background-color:#1e0010&quot;&gt;/&amp;gt;&lt;/span&gt;
    )
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In my mind this was &lt;em&gt;way cooler than some stinky old form&lt;/em&gt;. This was &lt;em&gt;modern&lt;/em&gt;. I did a cool abstraction of the idea of a question, so that code is &lt;em&gt;totally reusable, man&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Please don&amp;rsquo;t ask questions about how I decided what type of input field to render.&lt;/p&gt;
&lt;p&gt;Also &lt;em&gt;please&lt;/em&gt; don&amp;rsquo;t ask about how the validations worked. There was a bunch of props on the &lt;code&gt;&amp;lt;Question /&amp;gt;&lt;/code&gt; component that had to do with an &amp;lsquo;error&amp;rsquo; state, and just &amp;hellip; bleh.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Pretty please&lt;/strong&gt;&lt;/em&gt; don&amp;rsquo;t ask about how the hook had to mangle data to make it conform to what our API expected. Or how it manipulated the API response to indicate validation errors. Or how I chose to style the errors.&lt;/p&gt;
&lt;p&gt;In retrospect, I did a huge disservice to my teammates, and to our client. I introduced a lot of tech debt that required refactoring. We had to decouple the &lt;code&gt;Question&lt;/code&gt; component, introduce a Router, and lean on contexts to pass things around more elegantly. I misused the cool tools from the start, but the end result required an &lt;em&gt;unreasonable&lt;/em&gt; amount of tools to wire up and make work properly.&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;summary view&amp;rdquo; should have been feature one.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I should have just built a form&lt;/strong&gt;.&lt;/p&gt;



&lt;h2 id=&quot;whats-in-a-form&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#whats-in-a-form&quot;&gt;What&amp;rsquo;s in a form?&lt;/a&gt;
  
&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s be honest. There&amp;rsquo;s a whole lot of work on the Internet that&amp;rsquo;s about collecting and representing user input data. Digital paperwork makes up a significant portion of what websites have to do. Better, more intuitive paperwork? Hopefully, yes! But paperwork all the same.&lt;/p&gt;
&lt;p&gt;Why on earth are we contorting ourselves into all sort of strange shapes? Why are we creating beautiful single page experiences out of what is essentially just &lt;em&gt;cruft&lt;/em&gt; enabling us to do the actually cool stuff?&lt;/p&gt;
&lt;p&gt;Naturally, I did make mistakes being that fresh into my career. The blame does not lie solely at the feet of React here. I misused the tool. I lacked insight into what was valuable to our users. I had not come across any wisdom about how to do the fundamentally boring, necessary evil, form building in a sleek way. I wanted to use React in a way that made me feel clever.&lt;/p&gt;
&lt;p&gt;I think, therein, lies the rub. Contrast my horribly misguided form with tools offered elsewhere.&lt;/p&gt;



&lt;h2 id=&quot;many-tiny-things-make-a-big-thing&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#many-tiny-things-make-a-big-thing&quot;&gt;Many tiny things make a big thing&lt;/a&gt;
  
&lt;/h2&gt;
&lt;p&gt;The most basic app every full stack web framework tutorial starts with is building a blog. A blog with posts and comments. Those tutorials interact with the &lt;code&gt;Comment&lt;/code&gt; and &lt;code&gt;Post&lt;/code&gt; model directly. They generate some HTML, handle validations, and often bundle the &lt;code&gt;Create&lt;/code&gt; and &lt;code&gt;Edit&lt;/code&gt; views naturally. We get a lot of the behind the scenes details for free.&lt;/p&gt;
&lt;p&gt;Standalone JavaScript front ends have to package up a heck of a lot of context. We denormalize from our backend understanding of our domain to drive behaviour on the front end. Even the most basic of forms in React has to understand, or be given tools to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;render input fields&lt;/li&gt;
&lt;li&gt;control input field values&lt;/li&gt;
&lt;li&gt;package the data to be sent&lt;/li&gt;
&lt;li&gt;send data to the API&lt;/li&gt;
&lt;li&gt;request state from the backend, for our edit view&lt;/li&gt;
&lt;li&gt;shove the data into the edit view appropriately&lt;/li&gt;
&lt;li&gt;handle success responses from the backend&lt;/li&gt;
&lt;li&gt;handle failure responses from the backend&lt;/li&gt;
&lt;li&gt;handle validation errors from the backend&lt;/li&gt;
&lt;li&gt;implement its own front-end validations&lt;/li&gt;
&lt;li&gt;manage the current state of the form being filled out&lt;/li&gt;
&lt;li&gt;share code between create / edit views&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we want to implement multiple views for a single form, you then also have to consider a whole host of other challenges:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;state management across component levels&lt;/li&gt;
&lt;li&gt;passing state around&lt;/li&gt;
&lt;li&gt;appropriate component abstractions&lt;/li&gt;
&lt;li&gt;controlling the form inputs&lt;/li&gt;
&lt;li&gt;giving the form the ability to submit itself&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What a delicate dance of things we must consider. No wonder Early-Career-Daniel bungled it.&lt;/p&gt;



&lt;h1 id=&quot;its-not-a-react-problem&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#its-not-a-react-problem&quot;&gt;It&amp;rsquo;s not a React problem&lt;/a&gt;
  
&lt;/h1&gt;
&lt;p&gt;I don&amp;rsquo;t mean to harp on React here. It doesn&amp;rsquo;t matter what front end library we&amp;rsquo;re using, we have to attend to these matters. The proliferation of packages that are all about building better form components, or managing our form data, or validating our forms, or even simply how to do a specific type of user input, each in their chosen component library tells me just how big this problem is.
Angular has Reactive Forms, and Vue has a whole bunch of these too.&lt;/p&gt;
&lt;p&gt;We are innately giving up a whole heck of a lot of things, and introducing a lot of complexity by making super slick form UIs with standalone JavaScript component libraries.&lt;/p&gt;
&lt;p&gt;I think we should be asking some questions of ourselves here.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Is this a reasonable tradeoff?&lt;/li&gt;
&lt;li&gt;Do we really want to inflict all this pain on ourselves? On our early-career developers?&lt;/li&gt;
&lt;li&gt;How much time in our cycles are we wasting on the gritty cruft that is the reality of digital paperwork?&lt;/li&gt;
&lt;li&gt;Do we need to reach for a standalone front end to make those digital documents?&lt;/li&gt;
&lt;li&gt;Is this approach mandatory to effectively create an experience for users to share their details with us?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;rsquo;ve seen some really challenging React forms crumble under the self-inflicted complexity of managing all those steps in the delicate dance.&lt;/p&gt;
&lt;p&gt;How many of our forms have fallen into disrepair, and make our users grit their teeth and suffer because they&amp;rsquo;re just &lt;em&gt;broken&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;The model had new validations enforced, and now the front end can&amp;rsquo;t edit any of the old entries because those validations fail.&lt;/p&gt;
&lt;p&gt;The form didn&amp;rsquo;t validate, and the component didn&amp;rsquo;t handle the response properly so it re-rendered and we lost all the user input.&lt;/p&gt;
&lt;p&gt;Are we winning the user experience game, or are the forms defeating us?&lt;/p&gt;



&lt;h2 id=&quot;sosf&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#sosf&quot;&gt;S.O.S.(F).&lt;/a&gt;
  
&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Save our Submittable Forms.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ultimately, I&amp;rsquo;m not you. I&amp;rsquo;m not on your project.&lt;/p&gt;
&lt;p&gt;Maybe all your forms are tiny. One or two entries that are easy to keep in state, easy to format into a post request, and easy to validate.&lt;/p&gt;
&lt;p&gt;Or, maybe your forms are like mine. Growing in complexity, adding new features, taking new shapes, bloating, struggling to swim under the weight of model changes, denormalized domain details, controlling state, and data formatting and,&lt;/p&gt;
&lt;p&gt;and,&lt;/p&gt;
&lt;p&gt;and.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m sending out an &lt;strong&gt;S.O.S.(F).&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PS: I hope you&amp;rsquo;ll come with me. I have an idea to share with you soon.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Learning good habits by watching a staff software consultant</title>
      <link>https://blog.testdouble.com/posts/2022-11-09-what-i-learned-watching-a-staff-consultant/</link>
      <pubDate>Wed, 09 Nov 2022 00:00:00 +0000</pubDate>
      
      
      <author>hello+rss@testdouble.com (Nichol Alexander)</author>
      <guid>https://blog.testdouble.com/posts/2022-11-09-what-i-learned-watching-a-staff-consultant/</guid>
      <description>


&lt;h2 id=&quot;what-is-good-software-consulting&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#what-is-good-software-consulting&quot;&gt;What is good software consulting?&lt;/a&gt;
  
&lt;/h2&gt;
&lt;p&gt;I recently started work with my fifth client team since joining Test Double as a software development consultant. Each client engagement has been absolutely different, presenting an amazing learning experience and an entirely different set of challenges. They have also entailed very different onboarding experiences based not only on the culture of the companies but also on the scope and staffing of the engagement.&lt;/p&gt;
&lt;p&gt;I built up my own notes, playbook, and values for what makes a successful onboarding for me. Joining my most recent client, however, was the first time I started an engagement along with a Test Double staff engineer with 8 years of consulting experience. During this onboarding in particular, I benefited from observing and noting from afar how things go and how the engagement is shaped from the beginning.&lt;/p&gt;
&lt;p&gt;The opportunity to watch and observe an experienced Test Double Double Agent lead the way has given me some insight into the consulting process‚Äîand I wanted to write up some thoughts and notes from the perspective of the less experienced member of the team. Sometimes we see things differently than the one driving the behavior, but sometimes we also notice things that are typically unnoticed because they are good consulting habits that don‚Äôt rise to the requirement of observability.&lt;/p&gt;



&lt;h2 id=&quot;kevin&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#kevin&quot;&gt;Kevin&lt;/a&gt;
  
&lt;/h2&gt;
&lt;p&gt;So who is this Staff Engineer I speak of? Why, he goes by the name of Kevin Baribeau, and has been at Test Double for eight years. Kevin has worked with many, many, many clients in many, many, many different engagement environments.  Having done lots of reps on starting new clients and being an empathetic human being makes him a wonderful software consultant to learn from.&lt;/p&gt;



&lt;h2 id=&quot;a-quick-note-on-consulting-at-test-double&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#a-quick-note-on-consulting-at-test-double&quot;&gt;A quick note on consulting at Test Double&lt;/a&gt;
  
&lt;/h2&gt;
&lt;p&gt;One of the interesting things about working at Test Double is there is not a set playbook for how we engage with clients. We work to be as impactful as possible, help teams where they are, delight them, and deliver great software with the rest of the client team. It can sometimes feel like it‚Äôs pretty much up to you to figure out how to do any of that. And while that‚Äôs a good thing because we value letting people closest to the problem own the solution, it can also be scary!&lt;/p&gt;
&lt;p&gt;Further, because the engagements are so different‚Äîfrom staff augmentation to education to team formation to greenfield work‚Äîa prescriptive play-by-play, laundry list of things to do as a consultant seems fairly guaranteed to fail quickly. Which is why, in part, such a thing does not exist around here! So no playbook, lots of differing requirements, high standards to live up to ‚Ä¶ woah! What I am supposed to do here? It‚Äôs my hope that shedding light on others' approaches can help us all develop our consulting tool kits.&lt;/p&gt;



&lt;h2 id=&quot;a-staff-consultant-approach-to-week-one&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#a-staff-consultant-approach-to-week-one&quot;&gt;A Staff consultant approach to week one&lt;/a&gt;
  
&lt;/h2&gt;



&lt;h3 id=&quot;pre-work&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#pre-work&quot;&gt;Pre-work&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;Before starting an engagement, you will typically have the opportunity to meet the client, do some research on their business and learn about their team.  During my meetings and interviews with the two client-side stakeholders, I was busy selling myself and Test Double. I also had some of the usual jitters around an interview process, even though I use that term lightly. It was a friendly discussion more than anything where we discussed my experience and what they were looking to add to their team. As a result, I took very few notes about the business, about the engagement priorities, and only captured the basic outlines from memory after concluding the calls.&lt;/p&gt;
&lt;p&gt;Kevin, on the other hand, exited his ‚Äúinterview‚Äù having done more interviewing of the client than vice versa‚Äîor so it seemed to me! He had captured in his extensive notes details around the business, revenue numbers, timelines, a rough cast of characters, as well as specifics around their tech stack and requirements for us to consider during our engagement. He had armed himself with the tools needed to create impact at the client early on and he then used that understanding to leverage the first week of work.&lt;/p&gt;



&lt;h3 id=&quot;the-get-started-task&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#the-get-started-task&quot;&gt;The get started task&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;A lot of times when onboarding, either as a consultant or as a full time employee, you will get a semi-trivial initial task to get started with. This is great in that it helps give your installation and setup of the code base a purpose, your initial code-explorations some structure, and gets you into the work stream of your team.&lt;/p&gt;
&lt;p&gt;Kevin has an approach to this: Get that first task done as fast as possible. And also as well as possible. And if you can do any extra work, do that too. Just as long as you do it as fast as possible.&lt;/p&gt;
&lt;p&gt;The reason for the speed is that this is your first opportunity to build trust on your team. If you come out of the gates like gangbusters and get a quick ticket under your belt, your team members and client-side manager are more likely to value you and consider you able to participate on the wider team.&lt;/p&gt;
&lt;p&gt;Funny, my whole life I‚Äôve been doing it wrong! Looking at the first ticket as a learning experience for oneself vs. as an opportunity to solidify membership on the team is a very different lens and has a very different impact on your ability to contribute over time.&lt;/p&gt;



&lt;h3 id=&quot;understand-the-primary-focus&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#understand-the-primary-focus&quot;&gt;Understand the primary focus&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;With the Get Started Ticket down, it&amp;rsquo;s time to get to the real work. The way I saw this manifested was in a conversation with our client manager. Kevin informed him of the first work being completed‚Äîfaster and more completely than initially expected‚Äîand opened the door to having a serious conversation about how we were going to move into the primary focus of our work.&lt;/p&gt;
&lt;p&gt;In my experience, Test Double sometimes does not have a lot of hard definition around the scope of work that we are going to tackle on the delivery side. Don‚Äôt get me wrong, there‚Äôs usually an area of need or a challenge the team is facing. But it is part of the expectation that what we do is help identify with the client where we can be helpful and how we can contribute.&lt;/p&gt;
&lt;p&gt;Still in the favorable light of a quick win, Kevin was able to pull out those detailed notes from earlier and get down to business with the engineering manager discussing how we will contribute further and where. At this point, the conversation is still high level and vague, pretty much as it should be, but with the beginnings of a shared understanding and trust from the team. This then leads to the next phase I observed, define a consulting MVP.&lt;/p&gt;



&lt;h3 id=&quot;define-an-mvp&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#define-an-mvp&quot;&gt;Define an MVP&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;In the absence of the aforementioned ‚Äúhard definition‚Äù around scope, it is important to define some specifics around what‚Äôs next. A lot of people, myself included, might be happy to leave that first Primary Focus meeting with an action item of ‚ÄúDo More Research.‚Äù Kevin on the other hand was really focused not just on understanding how the Primary Focus will have impact on the business as a whole, but how he could break down the vague task into specifics‚Äîright there on the call.&lt;/p&gt;
&lt;p&gt;Moving from understanding the primary focus at a business level to being able to define a first draft of an MVP code and team deliverable is not easy. One of the advantages of the way Kevin handled that specific aspect of the conversation was by not making it final.&lt;/p&gt;
&lt;p&gt;Phrases like: ‚ÄúFor an MVP we could expect to have X, Y, and as a stretch goal Z‚Äù helped involve the client manager‚Äîand crucially helped define a finish line for how we could talk about our own success at the client.&lt;/p&gt;
&lt;p&gt;‚ÄúIs X sufficient for 1.0 or do we have to have Y to go live?‚Äù was another phrase Kevin used to leave the door open to both explore the problem as well as further define expectations.&lt;/p&gt;



&lt;h3 id=&quot;lay-out-next-steps&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#lay-out-next-steps&quot;&gt;Lay out next steps&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;Laying out next steps is a crucial follow on from having a defined MVP. This is not just giving ourselves as software engineers a path forward, but gives us immediate touch points for how to follow up, telegraph progress, and measure incremental success.&lt;/p&gt;
&lt;p&gt;This step also served as a way to wrap up understanding of the focus, the MVP, and confirm that we were all working toward our goals on a path that we understood and agreed to.&lt;/p&gt;
&lt;p&gt;In addition to setting ourselves up for success, I also understood this as the first of a few steps underscoring that we were able to work in a self-directed manner. In the same way that a client may not know if you can accomplish a small task or how you will accomplish it, they also may not yet trust your ability to be self-directed and motivated. Setting out these next steps has an accretive effect on trust. It‚Äôs an additional demonstration to the client that they have made the right decision by deciding to work with you and with Test Double.&lt;/p&gt;



&lt;h3 id=&quot;propose-a-solution&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#propose-a-solution&quot;&gt;Propose a solution&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;I see this step as optional, because of course it depends on how you are able to pattern match between the MVP and the next steps based on your own experience and arrive at an interesting and potentially valuable solution. It also helps to pursue good ideas from other people who don‚Äôt have time to make them happen. That is, after all, why they hired us!&lt;/p&gt;
&lt;p&gt;In my situation with Kevin, he was able to very quickly identify a potential solution to the problem of too much work happening in process: nightly sidekiq jobs instead of event driven syncing of information. Kevin again demonstrated knowledge and experience by quickly and directly suggesting a solution to an unaddressed problem.&lt;/p&gt;
&lt;p&gt;This, I guess, might be the riskiest communication to date. If you are off-base with your previous understanding of the Primary Focus and the MVP, or if you do not have the experience to recommend not only the next step but the right next step, you risk subverting the little trust that you have just built. Remember, a beginning is a very delicate time! This is where those reps come in as a Staff Consultant and having built up that experience across many different clients and businesses‚Äîyou can rely on that past experience to guide you to making valuable and on-point suggestions.&lt;/p&gt;



&lt;h3 id=&quot;generate-a-public-list-of-tasks&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#generate-a-public-list-of-tasks&quot;&gt;Generate a public list of tasks&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;This is another step to demonstrating through action that you know what you are doing, have confidence in your now defined approach, and deserve the trust of the client. The key aspect I would call out here is that this is a public list of tasks. Working alone or in a silo against a project that doesn‚Äôt yet have visibility team wide, puts you very much at risk of being thought of only as an outside contractor rather than an embedded member of the team.&lt;/p&gt;
&lt;p&gt;Engaging with the client‚Äôs process planning, ticketing tools, and timeline estimation has the added benefit of getting you on a footing where you can very quickly start to understand aspects of their software development life cycle and better understand client needs from a process and consulting perspective.&lt;/p&gt;



&lt;h2 id=&quot;conclusion&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;
  
&lt;/h2&gt;
&lt;p&gt;The first week of this engagement has served as a template for our work over the first month with the client.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Iterating on the process of getting tasks done, defining or redefining the MVP&lt;/li&gt;
&lt;li&gt;Staying focused on having a goal that we can complete&lt;/li&gt;
&lt;li&gt;Exploring options and conducting research to clarify next steps&lt;/li&gt;
&lt;li&gt;Tracking those next steps somewhere visible to the whole team&lt;/li&gt;
&lt;li&gt;Working openly in public&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are all components of healthy, agile software development! And it&amp;rsquo;s no surprise given the process we started off with. Trying to put all this together, I have created for myself a little cheat sheet for an operating manual for starting my next new engagement:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Interview for impact&lt;/li&gt;
&lt;li&gt;Nail the get started task&lt;/li&gt;
&lt;li&gt;Drive towards understanding in your first 1:1&lt;/li&gt;
&lt;li&gt;Define and agree upon a deliverable with a time frame.&lt;/li&gt;
&lt;li&gt;Lay out next steps&lt;/li&gt;
&lt;li&gt;Propose big picture solution&lt;/li&gt;
&lt;li&gt;Work in public&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There‚Äôs nothing magic about any of this. And these are all steps any software engineer can use to become a better consultant or even more impactful to their current engineering team.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What we learned about impacting software developer happiness</title>
      <link>https://blog.testdouble.com/posts/2022-11-08-impacting-software-developer-happiness/</link>
      <pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate>
      
      
      <author>hello+rss@testdouble.com (Kevin Truong)</author>
      <guid>https://blog.testdouble.com/posts/2022-11-08-impacting-software-developer-happiness/</guid>
      <description>&lt;p&gt;Let‚Äôs start off with this quick fact: in a recent 2022 survey, when Test Double employees were asked if Test Double is a fulfilling place to work, 96% of respondents said ‚ÄúYes!‚Äù&lt;/p&gt;
&lt;img src=&quot;https://cdn-blog.testdouble.com/img/impacting-developer-happiness/happiness-survey-fulfilled-results-donut.8c2f1c3ed3eb06b64d059ac205a45923484a74d5992b537994329d94e1d4aefe.png&quot; alt=&quot;Chart of 96% survey responders say Test Double is a fulfilling place to work&quot; /&gt;

&lt;p&gt;With so many companies seeing an increase in turnover, &lt;a href=&quot;https://www.forbes.com/sites/forbeshumanresourcescouncil/2022/03/15/why-employers-should-fight-for-employee-satisfaction-during-the-great-resignation/&quot;&gt;employee satisfaction is becoming even more of a discussed priority&lt;/a&gt;. At Test Double, we conduct an internal Happiness Survey several times a year. After seeing recent Happiness Survey results, I was curious to discover driving factors, so I could share Test Double&amp;rsquo;s approach to learning about what impacts software developer happiness.&lt;/p&gt;
&lt;p&gt;In my research, I stumbled upon two helpful articles by Nectar HR digging into the importance of employee happiness. I‚Äôd suggest checking these out as well:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://nectarhr.com/blog/employee-happiness-at-work&quot;&gt;13 Ways to Increase Employee Happiness &amp;amp; Productivity at Work in 2022&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nectarhr.com/blog/employee-retention-strategies&quot;&gt;A Crowdsourced Guide to Employee Retention Strategies in 2022&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h2 id=&quot;how-we-track-happiness&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#how-we-track-happiness&quot;&gt;How we track happiness&lt;/a&gt;
  
&lt;/h2&gt;
&lt;p&gt;To actively keep a pulse on how everyone here at Test Double is feeling, &lt;a href=&quot;https://blog.testdouble.com/posts/2021-08-17-agent-profile-steve-jackson/&quot;&gt;Steve Jackson&lt;/a&gt; organizes a Happiness Survey several times a year. The survey consists of questions about needs based on the BICEPS model, which is an acronym for&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Belonging&lt;/li&gt;
&lt;li&gt;Improvement&lt;/li&gt;
&lt;li&gt;Choice&lt;/li&gt;
&lt;li&gt;Equality / Fairness&lt;/li&gt;
&lt;li&gt;Predictability&lt;/li&gt;
&lt;li&gt;Significance&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The concept of the BICEPS core needs was brand new to me. To learn more about what these mean, check out &lt;a href=&quot;https://www.palomamedina.com/biceps&quot;&gt;https://www.palomamedina.com/biceps&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The survey also aims to get a better understanding of employees' thoughts on the company, fulfillment, our Employee Stock Ownership Plan (ESOP), areas to focus on improvements, etc.&lt;/p&gt;
&lt;p&gt;For example, some of the questions from our latest survey were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What obstacles or opportunities will influence your career growth?&lt;/li&gt;
&lt;li&gt;What activities help you feel connected to others?&lt;/li&gt;
&lt;li&gt;I feel Test Double should improve awareness/focus on&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The anonymous results are then compiled and shared in an internal git repo. Responses include both agreement ratings and open-ended comments. The Test Double leadership team takes these ratings, comments, and suggestions to heart and incorporates the results into strategic planning every year.&lt;/p&gt;



&lt;h2 id=&quot;notable-ways-test-double-cultivates-happiness&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#notable-ways-test-double-cultivates-happiness&quot;&gt;Notable ways Test Double cultivates happiness&lt;/a&gt;
  
&lt;/h2&gt;
&lt;p&gt;After sorting through the responses of the last few surveys, some repeating themes emerged on what leads to developer happiness at Test Double. And you might be expecting a lot of focus on process improvements, but there&amp;rsquo;s a lot more to it.&lt;/p&gt;



&lt;h3 id=&quot;autonomy-trust-flexibility-control-of-schedule&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#autonomy-trust-flexibility-control-of-schedule&quot;&gt;Autonomy, trust, flexibility, control of schedule&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;Working across multiple time zones‚Äîboth internally and with our clients‚Äîpresents scheduling challenges. However, Test Double‚Äôs philosophy is to trust our consultants to work however works best for them. And that‚Äôs not exclusive to time or location. It also means being able to make your own technical decisions where you see fit‚Äîand playing into your strengths to provide even more impact.&lt;/p&gt;
&lt;p&gt;Here are some of the common, summarized responses around what people appreciate:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Having control of when and where to work&lt;/li&gt;
&lt;li&gt;Being able to have a flexible schedule, especially with a family&lt;/li&gt;
&lt;li&gt;Having the autonomy to be trusted to make my own decisions on how I approach solutions&lt;/li&gt;
&lt;li&gt;Glad that there is no micromanagement which can be very demoralizing, limiting, and lead to stress&lt;/li&gt;
&lt;/ul&gt;



&lt;h3 id=&quot;connectedness-11s-hangouts-homeroom&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#connectedness-11s-hangouts-homeroom&quot;&gt;Connectedness, 1:1s, hangouts, Homeroom&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;To facilitate a sense of belonging (and good fun), Test Double has various different opportunities to ‚Äúmeet up,‚Äù including 1:1 coffee times randomly assigned every week, pairing time, interest groups like Book Club, TDD Corner, React Corner, DevOps corner, and different employee resource groups (ex. People of Color).&lt;/p&gt;
&lt;p&gt;A specific call-out mentioned multiple times is Homerooms. When you join Test Double, you get assigned a ‚Äúhomeroom‚Äù with 3-4 other peers to meet weekly. This helps create a connection and relationships with the same folks every week.&lt;/p&gt;
&lt;p&gt;On the flip side of connectedness, being a remote company and having to deal with the pandemic has many responses expressing the much-needed return of ‚Äúin-person‚Äù events/retreats. While we‚Äôve always been 100% remote, Test Double pre-pandemic held in-person retreats each year but hasn‚Äôt been able to safely do so the past few years. The survey gave Test Double further insight into how important it still is to balance a physical, in-person presence since everyone misses it.&lt;/p&gt;
&lt;div class=&quot;aside-wrap&quot;&gt;
  &lt;p class=&quot;aside&quot;&gt;Check out this blog post from Justin Searls on &lt;a href=&quot;https://blog.testdouble.com/posts/2020-03-19-remote-but-not-alone/&quot;&gt;other good tips for remote work&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;




&lt;h3 id=&quot;success-agents-feeling-supported-frequent-feedback&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#success-agents-feeling-supported-frequent-feedback&quot;&gt;Success Agents, feeling supported, frequent feedback&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;In my personal career, Test Double has been by far the best role model of a company that truly cares about seeking and giving feedback. It‚Äôs not just simply saying, ‚Äúwe think everyone should get feedback,‚Äù and leaving it at that. It‚Äôs more of a ‚Äúlet‚Äôs use every opportunity we can to learn and improve‚Äù discussion, and it gets revisited very often.&lt;/p&gt;
&lt;p&gt;Each employee has what we call a Success Agent who provides a great place to have conversations on growth (both technical and personal) and feedback. A primary part of these chats can be about your career path and making sure that you&amp;rsquo;re heading in a meaningful direction.&lt;/p&gt;
&lt;p&gt;Here are some of the most stated reasons why Test Double employees love their Success Agents:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Good sounding board for making decisions and helping lift blockers&lt;/li&gt;
&lt;li&gt;Getting accountability updates on goals helps align goals with my projects&lt;/li&gt;
&lt;li&gt;Helps to improve my skills, making me a better consultant&lt;/li&gt;
&lt;li&gt;Still maintaining a team connection while also working on a client&amp;rsquo;s project&lt;/li&gt;
&lt;/ul&gt;



&lt;h3 id=&quot;what-can-i-do-to-improve-my-teams-happiness&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#what-can-i-do-to-improve-my-teams-happiness&quot;&gt;What can I do to improve my team‚Äôs happiness?&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;It is very probable co-workers on your own team share similar principles and desires, so it may help to address the same trends we are finding here at Test Double. If you‚Äôre looking to get an even better picture, here are some starting points to consider:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How are you actively keeping a pulse on your employee happiness and satisfaction?&lt;/li&gt;
&lt;li&gt;Read more on the BICEPS model and take a minute to consider what are the top two most important needs for yourself. Are those being met at your organization? Send it out to the rest of your team to gain their perspectives. Discuss if your work environment is filling those needs and what you could focus on to make improvements.&lt;/li&gt;
&lt;li&gt;Are you creating a culture of open feedback and discussions on your employees' growth and careers? Are career goals being discussed and tracked enough?&lt;/li&gt;
&lt;li&gt;How do your team and folks across your company stay connected?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you&amp;rsquo;re interested in learning more about Test Double or have any thoughts on our Happiness Survey results, &lt;a href=&quot;https://testdouble.com/contact&quot;&gt;continue the conversation here&lt;/a&gt; or send us a message on &lt;a href=&quot;https://twitter.com/testdouble&quot;&gt;Twitter&lt;/a&gt; or &lt;a href=&quot;https://www.linkedin.com/company/testdouble&quot;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Lesson in Type Safety with Typescript, Remix and Prisma</title>
      <link>https://blog.testdouble.com/posts/2022-11-02-typescript-safety/</link>
      <pubDate>Wed, 02 Nov 2022 00:00:00 +0000</pubDate>
      
      
      <author>hello+rss@testdouble.com (Joseph Lozano)</author>
      <guid>https://blog.testdouble.com/posts/2022-11-02-typescript-safety/</guid>
      <description>&lt;p&gt;While waiting for Phoenix 1.7 and LiveView 0.18 to drop, I decided to play around with &lt;a href=&quot;https://remix.run&quot;&gt;Remix&lt;/a&gt; a bit.
My experiment was to build a magic link login in Remix, using Prisma as the ORM.
I wound up getting burned pretty badly by tricky things in both these libraries that TypeScript was not able to catch for me.
I want to share with you some of the lessons I learned while working on this.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;loader&lt;/code&gt; is a special function in Remix that runs on the client side before your page is rendered.
It is similar to &lt;code&gt;getServerSideProps&lt;/code&gt; if you are familiar with NextJS, or a controller function in Phoenix or Rails.
This code reads the sessionToken from the cookie, and then looks up the user from that sessionToken using Prisma ORM.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;export&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;loader&lt;/span&gt;: &lt;span style=&quot;color:#66d9ef&quot;&gt;LoaderFunction&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; ({ &lt;span style=&quot;color:#a6e22e&quot;&gt;request&lt;/span&gt; }) &lt;span style=&quot;color:#f92672&quot;&gt;=&amp;gt;&lt;/span&gt; {
  &lt;span style=&quot;color:#66d9ef&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;session&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;await&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;getSession&lt;/span&gt;(&lt;span style=&quot;color:#a6e22e&quot;&gt;request&lt;/span&gt;.&lt;span style=&quot;color:#a6e22e&quot;&gt;headers&lt;/span&gt;.&lt;span style=&quot;color:#66d9ef&quot;&gt;get&lt;/span&gt;(&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;Cookie&amp;#34;&lt;/span&gt;));
  &lt;span style=&quot;color:#66d9ef&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;sessionToken&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;session&lt;/span&gt;.&lt;span style=&quot;color:#66d9ef&quot;&gt;get&lt;/span&gt;(&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;sessionToken&amp;#34;&lt;/span&gt;);
  &lt;span style=&quot;color:#66d9ef&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;user&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;await&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;getUserForSession&lt;/span&gt;(&lt;span style=&quot;color:#a6e22e&quot;&gt;sessionToken&lt;/span&gt;);

  &lt;span style=&quot;color:#66d9ef&quot;&gt;return&lt;/span&gt; { &lt;span style=&quot;color:#a6e22e&quot;&gt;user&lt;/span&gt; };
};

&lt;span style=&quot;color:#66d9ef&quot;&gt;export&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;getUserForSession&lt;/span&gt;(&lt;span style=&quot;color:#a6e22e&quot;&gt;sessionToken&lt;/span&gt;: &lt;span style=&quot;color:#66d9ef&quot;&gt;string&lt;/span&gt;) {
  &lt;span style=&quot;color:#66d9ef&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;session&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;await&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;db&lt;/span&gt;.&lt;span style=&quot;color:#a6e22e&quot;&gt;session&lt;/span&gt;.&lt;span style=&quot;color:#a6e22e&quot;&gt;findFirst&lt;/span&gt;({
    &lt;span style=&quot;color:#a6e22e&quot;&gt;where&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;:&lt;/span&gt; {
      &lt;span style=&quot;color:#a6e22e&quot;&gt;sessionToken&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;:&lt;/span&gt; {
        &lt;span style=&quot;color:#a6e22e&quot;&gt;equals&lt;/span&gt;: &lt;span style=&quot;color:#66d9ef&quot;&gt;sessionToken&lt;/span&gt;,
      },
    },
    &lt;span style=&quot;color:#a6e22e&quot;&gt;include&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;:&lt;/span&gt; {
      &lt;span style=&quot;color:#a6e22e&quot;&gt;user&lt;/span&gt;,
    },
  });

  &lt;span style=&quot;color:#66d9ef&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color:#a6e22e&quot;&gt;session&lt;/span&gt;) {
    &lt;span style=&quot;color:#66d9ef&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;session&lt;/span&gt;.&lt;span style=&quot;color:#a6e22e&quot;&gt;user&lt;/span&gt;;
  } &lt;span style=&quot;color:#66d9ef&quot;&gt;else&lt;/span&gt; {
    &lt;span style=&quot;color:#66d9ef&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;null&lt;/span&gt;;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After I got it working (meaning that I could log in and out from my computer), I decided to make sure the mobile page looked good.
I used ngrok to tunnel localhost from my computer and opened the page on my phone.&lt;/p&gt;
&lt;p&gt;I was logged in on my phone.&lt;/p&gt;
&lt;p&gt;How could this happen? This was an app that I had just written. It was impossible for me to be logged in on my phone.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll give you a moment to see if you can spot the problem.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;spoilers ahead&lt;/strong&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;



&lt;h2 id=&quot;there-are-a-few-culprits&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#there-are-a-few-culprits&quot;&gt;There are a few culprits.&lt;/a&gt;
  
&lt;/h2&gt;
&lt;p&gt;First, &lt;code&gt;session.get(&amp;quot;sessionToken&amp;quot;)&lt;/code&gt; does not return a string, it returns an &lt;code&gt;any&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Even if I had typed it &lt;code&gt;const sessionToken: string = session.get(&amp;quot;sessionToken&amp;quot;)&lt;/code&gt;, TypeScript would have raised no errors, because &lt;code&gt;string&lt;/code&gt; satisfies the type &lt;code&gt;any&lt;/code&gt;.
Instead, &lt;code&gt;session.get&lt;/code&gt; should return &lt;code&gt;unknown&lt;/code&gt;, instead of &lt;code&gt;any&lt;/code&gt;; since then I would have been forced to cast the type into a string. But this was library code. I could not change the type.&lt;/p&gt;
&lt;p&gt;Secondly, the &lt;code&gt;session.get&lt;/code&gt; function returns &lt;code&gt;undefined&lt;/code&gt; instead of &lt;code&gt;null&lt;/code&gt; when the key cannot be found.
The patterns for this vary across the TypeScript/JavaScript ecosystem, so I don&amp;rsquo;t really fault the library code.
Nullish types are bad enough that some modern languages do away with them entirely (e.g. Haskell and Rust).
JavaScript (and TypeScript) have 2 nullish types.&lt;/p&gt;
&lt;p&gt;So, &lt;code&gt;session.get(&amp;quot;sessionToken&amp;quot;)&lt;/code&gt; returns &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;



&lt;h2 id=&quot;no-big-deal-right&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#no-big-deal-right&quot;&gt;No big deal, right?&lt;/a&gt;
  
&lt;/h2&gt;
&lt;p&gt;Well, Prisma treats &lt;code&gt;undefined&lt;/code&gt; differently than &lt;code&gt;null&lt;/code&gt;. &lt;a href=&quot;https://www.prisma.io/docs/concepts/components/prisma-client/null-and-undefined&quot;&gt;Here&amp;rsquo;s the documentation&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Prisma Client differentiates between &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;null&lt;/code&gt; is a value
&lt;code&gt;undefined&lt;/code&gt; means do nothing&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, my where clause (&lt;code&gt;where: { sessionToken: { equals: sessionToken, }, },)&lt;/code&gt;) was actually just doing nothing, exactly as Prisma documentation states.&lt;/p&gt;
&lt;p&gt;So, what are the lessons we can all learn?&lt;/p&gt;
&lt;p&gt;Even though it may seem obvious what a library is doing, and its API is very straightforward, you should always read its documentation. Reading about Prisma&amp;rsquo;s behavior around &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;, rather than just assuming, would have saved me a huge headache.&lt;/p&gt;
&lt;p&gt;TypeScript, by a deliberate design choice, has an escape hatch called &lt;code&gt;any&lt;/code&gt;. If you (or any library you pull in) uses it, then you can no longer consider your code typesafe. Consider using &lt;code&gt;unknown&lt;/code&gt; instead. Inspect the types of any library code you are using, and if they return &lt;code&gt;any&lt;/code&gt;, consider casting the result to &lt;code&gt;unknown&lt;/code&gt; before handling it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Double Agent Profile: Eric Newbury</title>
      <link>https://blog.testdouble.com/posts/2022-10-28-agent-profile-eric-newbury/</link>
      <pubDate>Fri, 28 Oct 2022 00:00:00 +0000</pubDate>
      
      
      <author>hello+rss@testdouble.com (Eric Newbury)</author>
      <guid>https://blog.testdouble.com/posts/2022-10-28-agent-profile-eric-newbury/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Name:&lt;/strong&gt; Eric Newbury&lt;br&gt;
&lt;strong&gt;Designation:&lt;/strong&gt; Agent 0063&lt;br&gt;
&lt;strong&gt;Double Agent Role:&lt;/strong&gt;  Senior Software Consultant&lt;br&gt;
&lt;strong&gt;Special Skills:&lt;/strong&gt;  Functional Programming and GraphQL&lt;br&gt;
&lt;strong&gt;Aliases:&lt;/strong&gt; &lt;a href=&quot;https://github.com/enewbury&quot;&gt;github&lt;/a&gt; &lt;a href=&quot;https://twitter.com/ericnewbury&quot;&gt;twitter&lt;/a&gt; &lt;a href=&quot;https://www.linkedin.com/in/ericnewbury/&quot;&gt;linkedin&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Location:&lt;/strong&gt; Washington, DC&lt;br&gt;
&lt;strong&gt;Favorite Emoji:&lt;/strong&gt; üò¨&lt;/p&gt;



&lt;h3 id=&quot;what-impact-are-you-proudest-of-in-your-career&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#what-impact-are-you-proudest-of-in-your-career&quot;&gt;What impact are you proudest of in your career?&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;I don&amp;rsquo;t think I have a single thing I&amp;rsquo;m most proud of. Probably a lot of little things. There are impacts I&amp;rsquo;ve had for clients or companies, and then there are impacts I&amp;rsquo;ve had on the open source side. I&amp;rsquo;m proud to be the maintainer an &lt;a href=&quot;https://blog.testdouble.com/posts/2022-04-26-graphql-made-easy-elixir/&quot;&gt;open source library&lt;/a&gt; finally. That&amp;rsquo;s something I&amp;rsquo;ve wanted to do for a long time. I‚Äôm also proud to have contributed to a programming language (&lt;a href=&quot;https://blog.testdouble.com/posts/2022-02-16-interview-eric-newbury/&quot;&gt;Roc&lt;/a&gt;) that is yet to be released and live, but I hope that it will see the light of day.  And on the client side, I would say I&amp;rsquo;m probably most proud of the work I contributed at &lt;a href=&quot;https://testdouble.com/clients/enbala&quot;&gt;Enbala, a smart power grid organization&lt;/a&gt;.  The work they were doing was personally exciting to me. And the impact that we could have was very far reaching. There were many exciting pieces, but everyone contributed important things there. So, just being a part of that was exciting for me.&lt;/p&gt;



&lt;h3 id=&quot;looking-ahead-what-has-you-most-excited-for-the-next-year-at-work&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#looking-ahead-what-has-you-most-excited-for-the-next-year-at-work&quot;&gt;Looking ahead, what has you most excited for the next year at work?&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;I would say on a more personal side, I&amp;rsquo;m really excited to finally get back together for a full company retreat and see everyone in person. That&amp;rsquo;s something that, because of Covid and the ongoing waves, we&amp;rsquo;ve not really been able to make it happen. I think we&amp;rsquo;re finally getting to the point where everyone can come back together, and I&amp;rsquo;m really looking forward to that. On the work side,  you never really know what clients you&amp;rsquo;re going to get, so it&amp;rsquo;s hard to say you&amp;rsquo;re looking forward to something specific. But, in general, at every new place I meet a new group of people that are really smart in certain things, in certain skills and technologies. And I just love that feeling of always continuing to expand my group of people that I continue to reach back to as I go forward in my career. People I can ask questions about different things or share stories. And, you know, especially in the Elixir world where it&amp;rsquo;s a fairly small community, having that ever growing circle is always exciting and I&amp;rsquo;m looking forward to growing that further.&lt;/p&gt;



&lt;h3 id=&quot;what-is-your-favorite-thing-about-being-a-double-agent-at-test-double&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#what-is-your-favorite-thing-about-being-a-double-agent-at-test-double&quot;&gt;What is your favorite thing about being a Double Agent at Test Double?&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;For me, I think it has always been the autonomy. As someone with a fairly unusual lifestyle traveling around the world for dance competitions, it means I&amp;rsquo;m often working in different time zones. And the trust I get from Test Double to communicate with the client and find out what works for them and then just make that happen, is really exciting. But with that, they also have a good balance of support. So I can be autonomous but I also know that if I&amp;rsquo;m having an issue with the client, there&amp;rsquo;ll be somebody who can start working on my behalf if it&amp;rsquo;s not something that I&amp;rsquo;m set up well to succeed. They might have different connections and they can step in. So the balance of those two things is my favorite part.&lt;/p&gt;



&lt;h3 id=&quot;what-do-you-think-makes-test-double-unique&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#what-do-you-think-makes-test-double-unique&quot;&gt;What do you think makes Test Double unique?&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;Since I haven&amp;rsquo;t worked at other consultancies, this is a little hard for me to say what&amp;rsquo;s truly unique about it. But from what I&amp;rsquo;ve heard, we have had‚Äîand I hope continue to have as we grow‚Äîa really close knit community. I&amp;rsquo;ve heard that this can be kind of elusive at a lot of places, but it feels like this is consistently the one thing that never seems to change here. You can always find a group of really excited people to talk about whatever it is that you need help with or want to chat about. I don&amp;rsquo;t know if that makes us unique per se, but it is something unique among the places I&amp;rsquo;ve worked before at product companies.&lt;/p&gt;



&lt;h3 id=&quot;what-have-you-been-thinking-about-a-lot-lately-in-software-development-and-why&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#what-have-you-been-thinking-about-a-lot-lately-in-software-development-and-why&quot;&gt;What have you been thinking about a lot lately in software development, and why?&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;The sustainable software development practices that I wrote about in &lt;a href=&quot;https://blog.testdouble.com/posts/2021-10-18-future-of-tech/&quot;&gt;one of my blog posts&lt;/a&gt;. I&amp;rsquo;m starting to have a lot more opinions about what is a sustainable type of business model, and what is a little bit more of a parasitic business model to be a little bit blunt. I have strong feelings that a company should grow at a rate that&amp;rsquo;s equal to what they produce and what they contribute. I don&amp;rsquo;t feel like it&amp;rsquo;s great for society in general to have companies that can grow at a rate that is exponentially greater than what they&amp;rsquo;re putting back out into the system. The reason I&amp;rsquo;m thinking about it a lot is because I don&amp;rsquo;t necessarily have a good answer for what would make it possible for businesses to be profitable, but that doesn&amp;rsquo;t end up leading to this type of thing.&lt;/p&gt;
&lt;p&gt;In my blog post, I explored the idea of everything being open source. Companies would have to focus more on their expertise, their services, and the code they produce being available for people to use and run on their own. The code authors are the experts that built the software and can help deploy that in various places and support it. But I recognize that this works better  for some things than others. There are some products that are truly unique inventions that nobody else could understand how to do, and there is some value in you being the one and only person or company that can create that and produce that. So there&amp;rsquo;s a lot of thoughts in my head about maybe different tiers of businesses at different sizes having regulation, or there might be business norms about at what size you start focusing more on different areas of profitability.&lt;/p&gt;



&lt;h3 id=&quot;tell-me-about-something-memorable-that-happened-to-you-and-what-you-learned-from-it&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#tell-me-about-something-memorable-that-happened-to-you-and-what-you-learned-from-it&quot;&gt;Tell me about something memorable that happened to you and what you learned from it.&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;I guess I can tell a story from my first job that was very cringy. I was a few months into my career as a software engineer and was very excited and learning about a new technology in Java for writing compile-time, safe SQL queries (&lt;a href=&quot;https://www.jooq.org/&quot;&gt;jooq&lt;/a&gt;). I had used it on personal projects, and it had been introduced to the codebase of the application I was working on maybe a year prior. And I came back and the dependency was there, but it hadn&amp;rsquo;t been used. And so during an innovation week, I took on the job of converting a small application to using this  library. I finished up for the week and jumped on a train headed off to a competition in another state, and was not to be heard from until Monday.&lt;/p&gt;
&lt;p&gt;I discovered upon returning that I had spent over $30,000 of other clients money, and used it for different clients. I had unintentionally funneled advertising dollars that one client was paying and used it to pay for their competitor‚Äôs advertisements.  And the reason for this was a very small difference in versions. The library version that they were using was older than the one I had been using on my side project. And in that version, it didn&amp;rsquo;t have checks for ambiguous column names, which in straight SQL is an error. But the way that it compiled down these queries to SQL, if you had joined two tables and the two column names were the same on those two tables, it would compile down and just basically take the table name from the first one that you had used and apply that to all of them.&lt;/p&gt;
&lt;p&gt;And so unfortunately that meant that it was checking values on tables and joining them to rows that they weren&amp;rsquo;t meant to be joined to. And that happened to be a lot of their competitors. You could make a lot of arguments about how more testing and more checking and all these various things are good and might prevent this‚Äîbut honestly what I learned most was the response from the team was very supportive and understanding. And I learned that yes, making mistakes is inevitable, especially early in your career. And maybe less frequently, but you are going to make significant mistakes later in your career. And that is normal, and it&amp;rsquo;s difficult, and humbling, and frustrating, but you want to work at a place where people get that and understand that.&lt;/p&gt;



&lt;h3 id=&quot;what-has-you-most-excited-about-this-year-outside-of-work&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#what-has-you-most-excited-about-this-year-outside-of-work&quot;&gt;What has you most excited about this year outside of work?&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;m really excited to be competing in the Ballroom Dance World Championships in the Netherlands at the end of this year. I&amp;rsquo;ve never been to Holland. I&amp;rsquo;ve never been to the World Championships. It‚Äôs going to be exciting. It includes a big training camp for the week before as well. So I&amp;rsquo;ll get to be working with all the top teachers in the world who will all be there, and I‚Äôm very excited for that.&lt;/p&gt;



&lt;h3 id=&quot;what-bookpodcastmovietv-show-have-you-been-thinking-about-a-lot-lately-and-why&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#what-bookpodcastmovietv-show-have-you-been-thinking-about-a-lot-lately-and-why&quot;&gt;What book/podcast/movie/TV show have you been thinking about a lot lately, and why?&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;There&amp;rsquo;s a book called &lt;a href=&quot;https://us.macmillan.com/books/9781250790606/wiredforlove&quot;&gt;Wired for Love&lt;/a&gt; that my partner and I are working through together. It‚Äôs written by a psychologist to basically break down the neuroscience of how the brains of people work through conflict and connect and relate. Mostly because as a dance partner‚Äîand obviously as a life partner, but especially as a dance partner‚Äîthis has been helpful. Because you&amp;rsquo;re constantly put in such high stress, high conflict situations. You‚Äôre actively trying to accomplish the same goal, but in opposite roles where you&amp;rsquo;re having to give and take all the time. The brains are constantly out of whack and going into danger, fight or flight mode. When somebody&amp;rsquo;s really up in your space and they do something that pushes you off your balance or whatever, it&amp;rsquo;s a very primal reaction.&lt;/p&gt;
&lt;p&gt;And learning about how the brain deals with those kinds of things, has been incredibly useful for us, in dancing and in life. Learning about both the subconscious nervous system and the conscious nervous system, and how one can hijack the other, plus the different types of ways that humans have learned to relate to each other based on life experiences, and how they work on autopilot has been very fascinating. So we&amp;rsquo;re not through it all the way yet, but already it&amp;rsquo;s been incredibly useful.&lt;/p&gt;



&lt;h3 id=&quot;what-is-the-biggest-lesson-the-pandemic-taught-you&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#what-is-the-biggest-lesson-the-pandemic-taught-you&quot;&gt;What is the biggest lesson the pandemic taught you?&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;That I&amp;rsquo;m not as much of an extrovert as I thought. I do now need my alone time and enjoy my alone time.&lt;/p&gt;



&lt;h3 id=&quot;whats-something-interesting-about-you-thats-not-on-your-resume-or-linkedin&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#whats-something-interesting-about-you-thats-not-on-your-resume-or-linkedin&quot;&gt;What‚Äôs something interesting about you that‚Äôs not on your resume or LinkedIn?&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;I‚Äôve been ambushed by a bear trying to steal our camping supplies and had to fend him off with sticks and stones and a lot of bluster.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This interview is based on a recorded conversation with Eric Newbury and Cathy Colliver. It may or may not self-destruct.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to balance software architecture goals with limited resources</title>
      <link>https://blog.testdouble.com/posts/2022-10-26-resources-vs-architectural-changes/</link>
      <pubDate>Wed, 26 Oct 2022 00:00:00 +0000</pubDate>
      
      
      <author>hello+rss@testdouble.com (Eve Ragins)</author>
      <guid>https://blog.testdouble.com/posts/2022-10-26-resources-vs-architectural-changes/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m reminded of a survival RPG where you&amp;rsquo;re stranded somewhere, and you need to either escape the island or build a life-sustaining place to live. You have a couple things provided for you‚Äîsome food, some water, and maybe a talking travelogue‚Äîbut you know it&amp;rsquo;s not enough to last. You&amp;rsquo;ll need to ration and be strategic about how to use your resources and potentially acquire more resources to succeed. You&amp;rsquo;ll probably even want to build some tools along the way.&lt;/p&gt;
&lt;p&gt;Trying to introduce architectural changes while balancing resources feels roughly similar‚Äîexcept the stakes of getting it wrong could be wasting millions of dollars as opposed to watching a sad montage wherein your character dies.&lt;/p&gt;
&lt;p&gt;To clarify a couple terms for project inclusivity, &amp;ldquo;resources&amp;rdquo; is used very broadly here. It could be time, money, know-how, infrastructure, etc. It could arguably be stakeholder buy-in, too, but that&amp;rsquo;s a different blog post.  &lt;em&gt;Sometimes &amp;ldquo;resources&amp;rdquo; includes &amp;ldquo;personnel&amp;rdquo;, but let&amp;rsquo;s try to break that cycle: People are people, and a lack indicates a lack of time, money, or know-how.  This isn&amp;rsquo;t to diminish the very real challenges which come from being understaffed, though.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Architecture&amp;rdquo; here is also used two-fold. Possibly you&amp;rsquo;re on a green-field project and don&amp;rsquo;t have architecture yet per se, but more likely you&amp;rsquo;re on an existing project and need to do some kind of overhaul or expansion. This post will focus on the latter and assume that you already have at least a live MVP.&lt;/p&gt;



&lt;h2 id=&quot;do-you-know-where-youre-going&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#do-you-know-where-youre-going&quot;&gt;Do you know where you&amp;rsquo;re going?&lt;/a&gt;
  
&lt;/h2&gt;
&lt;p&gt;Your current situation isn&amp;rsquo;t good or you wouldn&amp;rsquo;t be thinking of architectural changes. This is, of course, relative, and could range anywhere from &lt;em&gt;&amp;ldquo;mildly annoying&amp;rdquo;&lt;/em&gt; to &lt;em&gt;&amp;ldquo;our system is actively falling over and we can&amp;rsquo;t put out fires fast enough&amp;rdquo;&lt;/em&gt;.&lt;/p&gt;



&lt;h3 id=&quot;why-do-you-want-to-change-the-architecture&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#why-do-you-want-to-change-the-architecture&quot;&gt;Why do you want to change the architecture?&lt;/a&gt;
  
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;What specifically about the current architecture isn&amp;rsquo;t working?&lt;/li&gt;
&lt;li&gt;How is it impacting your team&amp;rsquo;s morale?&lt;/li&gt;
&lt;li&gt;How is it impacting your team&amp;rsquo;s ability to adapt to new business requirements or fix bugs? (Obligatory reminder that complicated != better)&lt;/li&gt;
&lt;li&gt;What is the most pressing issue that you need to overcome?&lt;/li&gt;
&lt;li&gt;What are you really trying to accomplish?&lt;/li&gt;
&lt;/ul&gt;



&lt;h3 id=&quot;envision-the-end-state&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#envision-the-end-state&quot;&gt;Envision the end state.&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;Really think about this.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How will your basic use cases work?&lt;/li&gt;
&lt;li&gt;What about the most complicated use case or two?&lt;/li&gt;
&lt;li&gt;What about &lt;em&gt;likely&lt;/em&gt; use cases the business has expressed a desire for but you haven&amp;rsquo;t been able to implement?&lt;/li&gt;
&lt;/ul&gt;



&lt;h3 id=&quot;get-detailed&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#get-detailed&quot;&gt;Get Detailed&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;Don&amp;rsquo;t be hand-wavey when planning.&lt;/p&gt;
&lt;p&gt;Take the time to &lt;strong&gt;break it down, map it out, share it with your team, and &lt;em&gt;accept criticism&lt;/em&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For a non-exhaustive list of things to consider:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How will the database(s) need to change?&lt;/li&gt;
&lt;li&gt;How will your APIs change? Are you going to set up a new version or aim for backwards compatibility (which maybe you can phase out over time)?&lt;/li&gt;
&lt;li&gt;What about the UI?&lt;/li&gt;
&lt;li&gt;How will the above impact developer productivity? Do you need to plan for training or additional tooling?&lt;/li&gt;
&lt;li&gt;How will you handle production support? Consider both &amp;ldquo;external&amp;rdquo; support teams if you have them as well as ensuring that your team will be set up for success when issues come up.&lt;/li&gt;
&lt;li&gt;What will need to happen to your test and deployment pipelines? What are the security implications and how will you address them?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If this sounds like a lot, it&amp;rsquo;s because it is. If you&amp;rsquo;re worried this sounds like waterfall but you&amp;rsquo;re an agile shop, well, you&amp;rsquo;re not wrong. (More on this later.) The point of this exercise isn&amp;rsquo;t to build a master plan and stick to it, but instead to develop enough definition that you can confidently approach with agility.&lt;/p&gt;
&lt;p&gt;I encourage you to use your best judgement on just how detailed you should get. I&amp;rsquo;ll also give you this real-world tale:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The setting was at a small IoT start-up, we had an MVP out the door, and we were trying to introduce a new device which would toggle on or off based on nearby other devices. The most popular solution was to have &amp;ldquo;on the ground&amp;rdquo; radio communication between the devices. The alternate solution was to have coordination done in the cloud.  After getting extremely detailed‚Äîdown to the task level‚Äîon the effort for each, we ended up implementing the cloud approach with distant future plans to construct the &amp;ldquo;on the ground&amp;rdquo; version.  I don&amp;rsquo;t think the &amp;ldquo;on the ground&amp;rdquo; contingent ever finished tasking things out‚Äîthe delta was just that much, and it was only through this exercise that it became apparent.&lt;/em&gt;&lt;/p&gt;



&lt;h2 id=&quot;can-you-afford-the-end-state&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#can-you-afford-the-end-state&quot;&gt;Can you afford the end state?&lt;/a&gt;
  
&lt;/h2&gt;
&lt;p&gt;Since this is an article about resources, it&amp;rsquo;s worth asking if you&amp;rsquo;ll be able to afford the end state before even thinking about &lt;em&gt;how&lt;/em&gt; you&amp;rsquo;re going to achieve it.&lt;/p&gt;
&lt;p&gt;For example, if the architectural plan calls for cloud resources, do you have the budget? (Maybe going all-in on AWS with an API Gateway that wraps Kafka which puts something on EventBridge which then triggers chains of Lambda calls with Step Functions while using SNS sounds &lt;em&gt;perfect&lt;/em&gt; in the hypothetical, but each of those touch points costs money. &lt;em&gt;Scenario slightly exaggerated for effect.&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;If it&amp;rsquo;s using a new technology, will you be able to afford the time it takes your team to learn how to maintain it in production or to pay for consultants in the interim? What if in learning your team makes honest mistakes which cost even more money?&lt;/p&gt;
&lt;p&gt;If the answer to &amp;ldquo;Can you afford the end state?&amp;rdquo; is &amp;ldquo;No&amp;rdquo;, then you might need to go back to the drawing board to redefine what the end state is. Alternatively, and this is probably true anyway, you should start thinking about how to slice the architecture up so that you can deliver the necessary value now with a plan for the rest of it when funding allows. More on this later.&lt;/p&gt;



&lt;h2 id=&quot;do-you-currently-have-the-resources-to-get-there&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#do-you-currently-have-the-resources-to-get-there&quot;&gt;Do you currently have the resources to get there?&lt;/a&gt;
  
&lt;/h2&gt;
&lt;p&gt;Probably not, or you&amp;rsquo;d just go for it. üôÇ&lt;/p&gt;
&lt;p&gt;So, &lt;strong&gt;where do you have wiggle room?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In the project triangle, there are three points for cost, time, and scope.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s tweak the names just a little to align more closely with what we&amp;rsquo;re dealing with: paying people (cost), team bandwidth (time), and new releases for bug fixes or features (scope). Since staffing costs typically well-exceed other operating costs, those are the focus here.&lt;/p&gt;
&lt;p&gt;If at this point you&amp;rsquo;re thinking that you have no wiggle room at all‚Äîthat you&amp;rsquo;re already operating on a shoestring, your team is working overtime, and there&amp;rsquo;s no way you can divert from bug and feature work&amp;hellip;you&amp;rsquo;ll just have to be more creative.&lt;/p&gt;
&lt;p&gt;In most circumstances, no obvious wiggle room will mean delaying releases and deferring scope. You can also try negotiating for more money. I &lt;em&gt;don&amp;rsquo;t&lt;/em&gt; recommend asking your team to work harder or for longer hours or less pay‚Äîthat ultimately results in mistakes, burnout, resentment, or all of the above. Not good.&lt;/p&gt;



&lt;h3 id=&quot;if-your-largest-wiggle-room-is-team-bandwidth&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#if-your-largest-wiggle-room-is-team-bandwidth&quot;&gt;If your largest wiggle room is team bandwidth&amp;hellip;&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;Let some of your team focus on architecture. Add in pairing time so that the people who aren&amp;rsquo;t focusing on it can contribute, and it will make the learning curve much smaller when the new architecture is complete.&lt;/p&gt;



&lt;h3 id=&quot;if-your-largest-wiggle-room-is-cash&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#if-your-largest-wiggle-room-is-cash&quot;&gt;If your largest wiggle room is cash&amp;hellip;&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;Consider bringing on more staff, even in the short-term. Don&amp;rsquo;t forget that it will take these staff a little bit of time to ramp up and that they will need some of your team&amp;rsquo;s time.&lt;/p&gt;



&lt;h3 id=&quot;if-your-wiggle-room-is-bug-fixes-and-features&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#if-your-wiggle-room-is-bug-fixes-and-features&quot;&gt;If your wiggle room is bug fixes and features&amp;hellip;&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;You&amp;rsquo;ll need to start setting expectations with stakeholders that, in order to be able to deliver what they want efficiently in the future, or at all, you&amp;rsquo;ll need to slow down and focus on some &lt;a href=&quot;https://blog.testdouble.com/posts/2022-01-20-stop-paying-debts-start-maintaining-code/&quot;&gt;technical house-keeping&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In all cases, bringing on &lt;a href=&quot;https://link.testdouble.com/blog-stuff-like-that&quot;&gt;consultants who have already done this successfully&lt;/a&gt; can save you time and money in the long run.&lt;/p&gt;



&lt;h2 id=&quot;how-are-you-going-to-get-there&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#how-are-you-going-to-get-there&quot;&gt;How are you going to get there?&lt;/a&gt;
  
&lt;/h2&gt;
&lt;p&gt;You know where you want to go. And you know that when you get there, it will be rainbows and unicorns. üåàü¶Ñ&lt;/p&gt;
&lt;p&gt;And, unfortunately, it&amp;rsquo;s probably not in your power to just pause time while the plan comes to bear. &lt;a href=&quot;https://medium.com/swlh/engineering-vs-product-turning-tension-into-triumph-1caf331332d&quot;&gt;And it shouldn&amp;rsquo;t be.&lt;/a&gt; Plan for a slow transition where your team keeps the lights on while also working towards a new architectural future. This is where agility comes in.&lt;/p&gt;
&lt;p&gt;Go back to your end state, look at all the components and all the changes that it will take to get there.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What depends on what?&lt;/li&gt;
&lt;li&gt;What can you peel away while still adding value?&lt;/li&gt;
&lt;li&gt;What can you defer since there&amp;rsquo;s limited near-term value?&lt;/li&gt;
&lt;li&gt;What can you start implementing cleanly? Maybe there are some new columns you can add to a database or maybe you can refactor part of your code to allow for alternate routing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most likely there are some parts of your vision that you can start implementing &lt;em&gt;soon&lt;/em&gt; and that will provide value &lt;em&gt;soon&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;What&amp;rsquo;s the absolute least that you can do to unblock a key feature request or address a gnarly part of the application?&lt;/p&gt;
&lt;p&gt;Or&lt;/p&gt;
&lt;p&gt;What&amp;rsquo;s the smallest thing you can do that doesn&amp;rsquo;t negatively impact other functionality but still sets you up for the future?&lt;/p&gt;



&lt;h3 id=&quot;plan-to-move-in-phases-balancing-delivery-and-architecture-at-every-step&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#plan-to-move-in-phases-balancing-delivery-and-architecture-at-every-step&quot;&gt;Plan to move in phases balancing delivery and architecture at every step.&lt;/a&gt;
  
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Slow down on the releases, but don&amp;rsquo;t stop them unless you absolutely have to.&lt;/li&gt;
&lt;li&gt;Provide value.&lt;/li&gt;
&lt;li&gt;Prove to your stakeholders why letting you have some time for house-keeping will help you keep up with them.&lt;/li&gt;
&lt;li&gt;Where at all possible, draw direct lines between features that they want, what&amp;rsquo;s blocking them technically, and what else they get from the change.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, &lt;em&gt;&amp;ldquo;I know you really want those reports, but we need to transform our data to be hierarchical in order to build them for you. In order to do that, though, we need to first change how our devices are identified to be more robust as hardware changes. Here&amp;rsquo;s our plan for that, here&amp;rsquo;s the expected timeline, and here&amp;rsquo;s where we currently are. Also, by changing how our devices are identified, it will allow for features C, D, and E in the future, which we wouldn&amp;rsquo;t have been able to do previously.&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It should also be said that by going incrementally, the new code gets rolled in with the old code‚Äîand this is a good thing. It gets tested, and as the old code changes the new code will also be updated as opposed to being off in a branch somewhere resulting in multi-day merge sessions. Having some covering tests here, too, can go a very long way toward confidently being able to roll out changes.&lt;/p&gt;



&lt;h3 id=&quot;consider-avoiding-choosing-a-feature-to-implement-in-the-new-way&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#consider-avoiding-choosing-a-feature-to-implement-in-the-new-way&quot;&gt;Consider avoiding choosing a feature to implement in the &amp;ldquo;new&amp;rdquo; way.&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;Have a new architectural plan? Have a new feature? It might seem like an obvious strategy to branch off and do the feature in an entirely new way. But in practice what I&amp;rsquo;ve seen happen is that the rest of the application never gets updated. In the worst case, the new feature ends up being the only one done in the new style in production, and then you&amp;rsquo;re stuck maintaining it separately from everything else. Now you&amp;rsquo;ve added to technical debt.&lt;/p&gt;
&lt;p&gt;That isn&amp;rsquo;t to say it&amp;rsquo;s never a good idea, but unless you really want to do a re-write or maintain two different applications, make it as easy as possible for your existing code to slide into new patterns.&lt;/p&gt;
&lt;p&gt;My current theory for why this approach goes awry: when starting with a blank page, the delta between the new and the old ends up being just a bit too much to overcome.&lt;/p&gt;
&lt;p&gt;Just&amp;hellip;be careful if you go this route.&lt;/p&gt;
&lt;p&gt;Circling back around, the potential for an architecural plan to go astray is why having a clear not hand-wavy plan of where you want to end up is &lt;em&gt;so important&lt;/em&gt; to introducing architectural changes successfully.&lt;/p&gt;



&lt;h2 id=&quot;in-summary&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#in-summary&quot;&gt;In Summary&lt;/a&gt;
  
&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Know where you want to go.
&lt;ul&gt;
&lt;li&gt;Is it &lt;em&gt;really&lt;/em&gt; a good end-state?&lt;/li&gt;
&lt;li&gt;Do you need to do a spike or two to affirm assumptions?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Publicize where you want to go in as much audience-appropriate detail as possible.&lt;/li&gt;
&lt;li&gt;Lean into the places where you have wiggle room on the project triage (cost / time / scope)&lt;/li&gt;
&lt;li&gt;Break your target architecture down into small workable chunks.
&lt;ul&gt;
&lt;li&gt;What are the dependencies?&lt;/li&gt;
&lt;li&gt;Do you have covering tests?  (If not, make some!)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tie business features and bug fixes directly to architectural changes and vice-versa.&lt;/li&gt;
&lt;li&gt;Plan to release changes in as small chunks as possible.&lt;/li&gt;
&lt;li&gt;Earn (or re-affirm) the trust of your stakeholders by delivering timely quality.&lt;/li&gt;
&lt;li&gt;Enlist outside support for any of the above (&lt;a href=&quot;https://link.testdouble.com/blog-talk-to-us&quot;&gt;Like us, maybe.&lt;/a&gt;
üòé)&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Building passwordless email auth in Rails</title>
      <link>https://blog.testdouble.com/posts/2022-10-25-building-passwordless-email-auth-in-rails/</link>
      <pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate>
      
      
      <author>justin@testdouble.com (Justin Searls)</author>
      <guid>https://blog.testdouble.com/posts/2022-10-25-building-passwordless-email-auth-in-rails/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m working on a new Rails app, and I finally got to the part where I need to
figure out how I&amp;rsquo;m going to handle authentication.&lt;/p&gt;
&lt;p&gt;What&amp;rsquo;ll it be this time? I could:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Depend on &lt;a href=&quot;https://github.com/heartcombo/devise&quot;&gt;Devise&lt;/a&gt;, which is popular and
feature-rich, but is so complex that‚Äîif I&amp;rsquo;m being honest‚ÄîI would
never understand how my own app&amp;rsquo;s authentication system worked&lt;/li&gt;
&lt;li&gt;Outsource identity management to an OAuth service like Google, Facebook,
Twitter, or GitHub, whether by using an
&lt;a href=&quot;https://github.com/omniauth/omniauth&quot;&gt;omniauth&lt;/a&gt; adapter or by &lt;a href=&quot;https://blog.testdouble.com/posts/2021-02-11-theres-no-such-thing-as-a-free-gem/&quot;&gt;rolling my
own&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Implement a password management system for the app using
&lt;a href=&quot;https://api.rubyonrails.org/v7.0.4/classes/ActiveModel/SecurePassword/ClassMethods.html#method-i-has_secure_password&quot;&gt;has_secure_password&lt;/a&gt;
and rebuilding all the supporting features that tend to tag along (e.g. email
confirmation, password reset, changing email addresses)&lt;/li&gt;
&lt;li&gt;Adopt the burgeoning Passkey standard using
&lt;a href=&quot;https://webauthn.guide&quot;&gt;Webauthn&lt;/a&gt;, which relies on the cryptographic security
of people&amp;rsquo;s modern computing devices to act as tokens&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I thought long and hard about it, but I didn&amp;rsquo;t like any of these options. I look
forward to being able to quickly plug in a Passkey-based authentication feature,
but &lt;a href=&quot;https://twitter.com/searls/status/1580562003050930176?s=20&amp;amp;t=SjWZvq1uw0I32JZc4v_ohQ&quot;&gt;we&amp;rsquo;re just not there
yet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ultimately, I settled on creating an email-based passwordless authentication
workflow. You&amp;rsquo;ve probably experienced something like this as a user:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Enter your email address&lt;/li&gt;
&lt;li&gt;Check your inbox&lt;/li&gt;
&lt;li&gt;Click the link&lt;/li&gt;
&lt;li&gt;Be logged in&lt;/li&gt;
&lt;li&gt;Feel annoyed it opened a new tab&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(Unfortunately, it seems not much can be done about Step 5.)&lt;/p&gt;
&lt;p&gt;Asking users to shuffle between an app and their email inbox has always felt
suboptimal. That said, it&amp;rsquo;s important to consider that most password-based
account systems represent the same thing with extra steps by requiring users to
open an email to verify their address or reset their password. So if there&amp;rsquo;s any
superfluity to be eliminated from a self-hosted authentication system, it&amp;rsquo;s with
the password, not the email address.&lt;/p&gt;
&lt;p&gt;So, with that settled: where to start?&lt;/p&gt;



&lt;h2 id=&quot;cant-a-gem-do-this-for-us&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#cant-a-gem-do-this-for-us&quot;&gt;Can&amp;rsquo;t a gem do this for us?&lt;/a&gt;
  
&lt;/h2&gt;
&lt;p&gt;Whenever implementing a feature that others have certainly done before, I&amp;rsquo;ll be
the first to reach for the nearest search engine and type: &lt;code&gt;{{description of feature}} ruby on rails&lt;/code&gt; and see if there&amp;rsquo;s a good-enough drop-in solution to
the problem. And indeed, my cursory survey yielded several gems that implement
this workflow. Unfortunately, none seemed to fit my (rather exacting)
preferences for being minimal, opinionated, and well-encapsulated. And
regardless, authentication is one area of your app that&amp;rsquo;s worth understanding
and owning‚Äîit&amp;rsquo;s so critical that if it ever breaks, you&amp;rsquo;ll want to be in total
control over fixing it.&lt;/p&gt;
&lt;p&gt;When &amp;ldquo;gem shopping&amp;rdquo; fails to yield an immediate answer, I like to sketch out my
ideal gem API. The goal isn&amp;rsquo;t necessarily to plan to build a new gem (though it
&lt;a href=&quot;https://blog.testdouble.com/talks/2021-11-10-how-to-make-a-gem-of-a-gem/&quot;&gt;might explain&lt;/a&gt; why I end up
making so many of them), but rather to validate whether a sound gem API &lt;em&gt;could
exist at all&lt;/em&gt; in the context of a Rails app. The more Rails features that a gem
interfaces with, the less encapsulated its API could possibly be and‚Äîeven if
&lt;a href=&quot;https://api.rubyonrails.org/classes/Rails/Railtie.html&quot;&gt;Railties&lt;/a&gt; exposed every
necessary extension point‚Äîthe more magical and mysterious the gem&amp;rsquo;s API would
seem to users.&lt;/p&gt;
&lt;p&gt;Consider all of the headline features of Rails that an email-based passwordless
authentication workflow would need to touch:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Active Record for persisting an authentication token and its expiration to the
database&lt;/li&gt;
&lt;li&gt;Action Dispatch for setting up routing to a login form, submission action,
authentication handler, and logout path&lt;/li&gt;
&lt;li&gt;Action Controller for implementing the above actions, the requisite session
management, and for setting up a general &lt;code&gt;before_action&lt;/code&gt; filter to ensure
users are logged in (or else redirected to a login page)&lt;/li&gt;
&lt;li&gt;Action View for rendering the form and the email&lt;/li&gt;
&lt;li&gt;Active Job for &lt;a href=&quot;https://guides.rubyonrails.org/action_mailer_basics.html#calling-the-mailer&quot;&gt;deferring the
delivery&lt;/a&gt;
of emails until after the HTTP response is complete&lt;/li&gt;
&lt;li&gt;Action Mailer for sending emails&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Wow, authentication features depend on a &lt;em&gt;lot&lt;/em&gt; of Rails APIs to do their job!
Almost every border between our app and the outside world is crossed at some
point.&lt;/p&gt;
&lt;p&gt;Just try to imagine a gem that could implement all of this for us while
providing a straightforward API made up of simple methods and boring return
values. Now think about how it might gracefully handle every permutation of
application configuration: alternative templating languages, non-relational
databases, non-default session stores‚Ä¶ maintenance would be a nightmare! By
these standards, a &amp;ldquo;good&amp;rdquo; library may not even be possible.&lt;/p&gt;
&lt;p&gt;By the end of this exercise, I was confident in my conviction that rolling my
own authentication code would be outright better than relying on a dependency,
no matter how well-designed.&lt;/p&gt;



&lt;h2 id=&quot;how-would-we-build-this&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#how-would-we-build-this&quot;&gt;How would we build this?&lt;/a&gt;
  
&lt;/h2&gt;
&lt;p&gt;Authentication features are often better imagined as a workflow of discrete
steps rather than as a spatial arrangement of components, because the process
necessarily spans multiple HTTP requests, emails, and user actions.&lt;/p&gt;
&lt;p&gt;So what might that workflow look like?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;A controller filter detects a request isn&amp;rsquo;t authenticated and redirects the
user to a login form&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The user types in their email and clicks &amp;ldquo;Sign in&amp;rdquo; or &amp;ldquo;Create Account&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The system sends an email with a magic link by:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Matching the email address to the corresponding user (or else creating a
new one)&lt;/li&gt;
&lt;li&gt;Generating a secure token and persisting it alongside an expiry timestamp&lt;/li&gt;
&lt;li&gt;Delivering an email with a link that includes the token as a query
parameter&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The user opens the email and clicks the link&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The authentication action looks up the user by the token and, if it&amp;rsquo;s valid,
assigns their ID to a session variable&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As with any feature, there are numerous other complications we could choose to
either implement or defer along the way. Maybe we want to pass a redirect path
along with the token so the user will be directed to the page they were
originally trying to access when they were prompted to sign in. Or we could
mitigate a denial of service attack vector by rate-limiting the number of emails
the system will send. Or we might first check that the user doesn&amp;rsquo;t have an
existing non-expired token before generating a new one‚Äîthat way, they&amp;rsquo;d receive
the same valid magic link across multiple emails.&lt;/p&gt;
&lt;p&gt;Rather than get too in the weeds with complications, let&amp;rsquo;s start building a
straightforward version of this feature and take things one step at a time.&lt;/p&gt;
&lt;p&gt;The code snippets in this blog post have been gently edited for readability, so
we&amp;rsquo;ve published an example app where you can see everything plugged together in
&lt;a href=&quot;https://github.com/testdouble/magic_email_demo&quot;&gt;testdouble/magic_email_demo&lt;/a&gt; on
GitHub.&lt;/p&gt;



&lt;h2 id=&quot;ensuring-users-are-logged-in-with-a-before_action-filter&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#ensuring-users-are-logged-in-with-a-before_action-filter&quot;&gt;Ensuring users are logged in with a &lt;code&gt;before_action&lt;/code&gt; filter&lt;/a&gt;
  
&lt;/h2&gt;
&lt;p&gt;Our very first step will be to require users to be signed in by adding a
controller filter that checks the session (by default encrypted by
&lt;a href=&quot;https://api.rubyonrails.org/classes/ActionDispatch/Session/CookieStore.html&quot;&gt;CookieStore&lt;/a&gt;)
for a previously-authenticated user ID.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;ApplicationController&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;ActionController&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;::&lt;/span&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;Base&lt;/span&gt;
  before_action &lt;span style=&quot;color:#e6db74&quot;&gt;:require_login&lt;/span&gt;

  &lt;span style=&quot;color:#66d9ef&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;require_login&lt;/span&gt;
    @current_user &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;User&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;find_by(id: session&lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;:user_id&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;]&lt;/span&gt;)
    &lt;span style=&quot;color:#66d9ef&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;if&lt;/span&gt; @current_user&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;present?

    redirect_to new_login_email_path(
      &lt;span style=&quot;color:#e6db74&quot;&gt;redirect_path&lt;/span&gt;: request&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;original_fullpath
    )
  &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Reading the method, you might notice the &lt;code&gt;require_login&lt;/code&gt; filter performs two
unrelated tasks. First, it sets a &lt;code&gt;@current_user&lt;/code&gt; instance variable for use by
the controller action. Second, if no &lt;code&gt;User&lt;/code&gt; was found, no one is logged in
and therefore the request should be considered unauthorized, so the user is
redirected to a login form. To ensure we direct the user to the page they
intended to visit, we do one last sneaky thing by appending
&lt;code&gt;request.original_fullpath&lt;/code&gt; to a query param named &lt;code&gt;redirect_path&lt;/code&gt;, which we&amp;rsquo;ll
ultimately append to the magic link we email the user.&lt;/p&gt;
&lt;div class=&quot;aside-wrap&quot;&gt;
  &lt;p class=&quot;aside&quot;&gt;By choosing to make authentication required by default across the application,
we won&amp;rsquo;t run the risk of allowing unauthenticated users to access privileged
areas of the app in the event we forget to sprinkle in a &lt;code&gt;before_action&lt;/code&gt; at the
top&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Because the above filter will run for &lt;em&gt;every single controller action&lt;/em&gt; in our
application, the user&amp;rsquo;s browser would be repeatedly redirected to the same
&lt;code&gt;new_login_email_path&lt;/code&gt; unless that path&amp;rsquo;s corresponding controller action
skipped the &lt;code&gt;require_login&lt;/code&gt; filter. So while we&amp;rsquo;re here, let&amp;rsquo;s add a convenience
method to allow controllers to opt out of the authentication requirement:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;self&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#a6e22e&quot;&gt;logged_out_users_welcome!&lt;/span&gt;
  skip_before_action &lt;span style=&quot;color:#e6db74&quot;&gt;:require_login&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&quot;creating-a-login-form-without-a-password-field&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#creating-a-login-form-without-a-password-field&quot;&gt;Creating a login form without a password field&lt;/a&gt;
  
&lt;/h2&gt;
&lt;p&gt;Designing a great login form is &lt;a href=&quot;https://blog.codinghorror.com/the-god-login/&quot;&gt;notoriously
difficult&lt;/a&gt;, but passwordless
email-based authentication will let us eliminate one field, at least.&lt;/p&gt;
&lt;p&gt;To start, that &lt;code&gt;new_login_email_path&lt;/code&gt; method isn&amp;rsquo;t defined yet. We can demand it
into existence in &lt;code&gt;config/routes.rb&lt;/code&gt; with:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;Rails&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;application&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;routes&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;draw &lt;span style=&quot;color:#66d9ef&quot;&gt;do&lt;/span&gt;
  resource &lt;span style=&quot;color:#e6db74&quot;&gt;:login_email&lt;/span&gt;
  &lt;span style=&quot;color:#75715e&quot;&gt;# ‚Ä¶&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And create a corresponding controller in &lt;code&gt;login_emails_controller.rb&lt;/code&gt; with a
&lt;code&gt;new&lt;/code&gt; action that grabs the &lt;code&gt;redirect_path&lt;/code&gt; parameter:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;LoginEmailsController&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;ApplicationController&lt;/span&gt;
  logged_out_users_welcome!

  &lt;span style=&quot;color:#66d9ef&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;new&lt;/span&gt;
    @redirect_path &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; params&lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;:redirect_path&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;]&lt;/span&gt;
  &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;[Heads up:&lt;/strong&gt; Rails 7 defaults to raising an error when redirecting to an
external domain. This prevents our &lt;code&gt;redirect_path&lt;/code&gt; parameter from being
manipulated by a malicious actor to mislead a user. You should make sure
&lt;a href=&quot;https://edgeguides.rubyonrails.org/configuring.html#config-action-controller-raise-on-open-redirects&quot;&gt;config.action_controller.raise_on_open_redirects&lt;/a&gt;
is enabled.&lt;strong&gt;]&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;From here, we can start a &lt;code&gt;new.html.erb&lt;/code&gt; form in &lt;code&gt;views/login_emails&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-fallback&quot; data-lang=&quot;fallback&quot;&gt;&amp;lt;%= form_with url: login_email_path do |f| %&amp;gt;
  &amp;lt;%= f.hidden_field :redirect_path, value: @redirect_path %&amp;gt;
  &amp;lt;%= f.email_field :email, placeholder: &amp;#34;human@example.com&amp;#34; %&amp;gt;
  &amp;lt;%= f.submit &amp;#34;Send Login Link&amp;#34; %&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In our (slightly more styled) &lt;a href=&quot;https://github.com/testdouble/magic_email_demo&quot;&gt;sample
app&lt;/a&gt;, that form looks something
like this:&lt;/p&gt;
&lt;img src=&quot;https://cdn-blog.testdouble.com/img/passwordless/form.3f152de08ad4cd8f5d4bc8dfd06486c9212c1622f262c563235bf156f5202364.png&quot; alt=&quot;Our simple one-field login form&quot; /&gt;

&lt;p&gt;When a user enters an email address and submits the form, the &lt;code&gt;create&lt;/code&gt; action
of our controller will be invoked, so we&amp;rsquo;ll write that next.&lt;/p&gt;



&lt;h2 id=&quot;handling-the-form-submission&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#handling-the-form-submission&quot;&gt;Handling the form submission&lt;/a&gt;
  
&lt;/h2&gt;
&lt;p&gt;Here&amp;rsquo;s what the &lt;code&gt;create&lt;/code&gt; action looks like in &lt;code&gt;LoginEmailsController&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;create&lt;/span&gt;
  &lt;span style=&quot;color:#66d9ef&quot;&gt;EmailAuth&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;::&lt;/span&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;EmailsLink&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;new&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;email(
    &lt;span style=&quot;color:#e6db74&quot;&gt;email&lt;/span&gt;: params&lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;:email&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;]&lt;/span&gt;,
    &lt;span style=&quot;color:#e6db74&quot;&gt;redirect_path&lt;/span&gt;: params&lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;:redirect_path&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;]&lt;/span&gt;
  )
  flash&lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;:notice&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;]&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;E-mail sent to &lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;#{&lt;/span&gt;params&lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;:email&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt; (probably!)&amp;#34;&lt;/span&gt;
  redirect_to login_email_path
&lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;aside-wrap&quot;&gt;
  &lt;p class=&quot;aside&quot;&gt;The &lt;code&gt;login_email_path&lt;/code&gt; just renders a &lt;a href=&quot;https://github.com/testdouble/magic_email_demo/blob/main/app/views/login_emails/show.html.erb&quot;&gt;simple HTML
page&lt;/a&gt;
instructing users to check their email.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Granted, the &lt;a href=&quot;https://blog.testdouble.com/talks/2017-05-11-how-to-program/&quot;&gt;way I program&lt;/a&gt; in Rails is
idiosyncratic, but hopefully it&amp;rsquo;s clear enough:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;EmailAuth&lt;/code&gt; is a namespace under &lt;code&gt;app/lib&lt;/code&gt; where we&amp;rsquo;ll put as much of this
feature&amp;rsquo;s behavior as can be separated from Rails constructs like controllers
and mailers&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EmailsLink&lt;/code&gt; is a verb-first class name, which is a practice I follow to
differentiate objects implementing features from objects encapsulating data
values&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;EmailsLink#email&lt;/code&gt; method does just that: emails the given address a magic
link. I try to separate &lt;a href=&quot;https://en.wikipedia.org/wiki/Command%E2%80%93query_separation&quot;&gt;command and query
methods&lt;/a&gt; when
possible, which is why‚Äîas a command‚Äîthe method doesn&amp;rsquo;t return a meaningful
value&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I often talk about immediately searching for an &amp;ldquo;escape hatch&amp;rdquo; when writing
Rails controller actions. Controllers agglomerate so many disparate concerns on
their own that adding custom application logic to an action very often leads to
mingling feature behavior with controller specifics like &lt;code&gt;session&lt;/code&gt;, &lt;code&gt;params&lt;/code&gt;,
and &lt;code&gt;response&lt;/code&gt;. Once this happens, it can be extraordinarily difficult to
extract the resulting procedural code into plain ol' Ruby objects (&amp;ldquo;POROs&amp;rdquo;). By
immediately delegating to &lt;code&gt;EmailsLink&lt;/code&gt; before giving the feature a second
thought, we can make sure to avoid that outcome.&lt;/p&gt;
&lt;div class=&quot;aside-wrap&quot;&gt;
  &lt;p class=&quot;aside&quot;&gt;While these examples are shared in order, I actually wrote this feature working
outside in by practicing what I call &amp;ldquo;&lt;a href=&quot;https://blog.testdouble.com/talks/2015-09-10-how-i-use-test-doubles/&quot;&gt;Discovery
Testing&lt;/a&gt;&amp;rdquo;
to test-drive a design for &lt;code&gt;EmailsLink&lt;/code&gt; by imagining all of the dependencies it
might need specifying those interactions using our
&lt;a href=&quot;https://github.com/testdouble/mocktail&quot;&gt;Mocktail&lt;/a&gt; gem before I implemented any
of the feature&amp;rsquo;s actual behavior. If you&amp;rsquo;re interested, check out the
&lt;a href=&quot;https://github.com/testdouble/magic_email_demo/blob/main/test/lib/email_auth/emails_link_test.rb&quot;&gt;EmailsLinkTest
source&lt;/a&gt;
and work outside-in.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Now that we have our entry point defined, let&amp;rsquo;s go to work and figure out how to
generate magic links!&lt;/p&gt;



&lt;h3 id=&quot;finding-or-creating-a-user-for-the-given-email-address&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#finding-or-creating-a-user-for-the-given-email-address&quot;&gt;Finding (or creating) a user for the given email address&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;In this simple example, we&amp;rsquo;re going to let anyone create an account with any
email address. If the provided address matches a &lt;code&gt;User&lt;/code&gt; record, we&amp;rsquo;ll return it;
otherwise we&amp;rsquo;ll create a new one. (We probably wouldn&amp;rsquo;t normally design a form
that made it &lt;em&gt;quite&lt;/em&gt; so easy to accidentally persist new users in production,
however.)&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s start by making our &lt;code&gt;EmailsLink&lt;/code&gt; entry point real:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;module&lt;/span&gt; EmailAuth
  &lt;span style=&quot;color:#66d9ef&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;EmailsLink&lt;/span&gt;
    &lt;span style=&quot;color:#66d9ef&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;email&lt;/span&gt;(&lt;span style=&quot;color:#e6db74&quot;&gt;email&lt;/span&gt;:, &lt;span style=&quot;color:#e6db74&quot;&gt;redirect_path&lt;/span&gt;:)
    &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
  &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Because this object&amp;rsquo;s role is to orchestrate several tasks needed to send or
generate an email with a magic link, let&amp;rsquo;s proactively push the implementation
of any of those behaviors into first-class objects in their own right. Let&amp;rsquo;s
start with something responsible for pairing up email addresses with user
models.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;module&lt;/span&gt; EmailAuth
  &lt;span style=&quot;color:#66d9ef&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;EmailsLink&lt;/span&gt;
    &lt;span style=&quot;color:#66d9ef&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;initialize&lt;/span&gt;
      @finds_or_creates_user &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;FindsOrCreatesUser&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;new
    &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;

    &lt;span style=&quot;color:#66d9ef&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;email&lt;/span&gt;(&lt;span style=&quot;color:#e6db74&quot;&gt;email&lt;/span&gt;:, &lt;span style=&quot;color:#e6db74&quot;&gt;redirect_path&lt;/span&gt;:)
      user &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; @finds_or_creates_user&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;find_or_create(email)
    &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
  &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The best place to think of a class or method name is inside the thing that needs
to use it, because there&amp;rsquo;s no place where it&amp;rsquo;s more important for the
names we choose to make sense. And there&amp;rsquo;s no easier way to validate that a new
method&amp;rsquo;s parameters and return value are workable.&lt;/p&gt;
&lt;p&gt;Since this is the only way to create users in my app, it makes sense to give it
an easy-to-find name like &lt;code&gt;FindsOrCreatesUser&lt;/code&gt;. Because the class name says what
the object does, the method name is uselessly redundant. In some apps, I&amp;rsquo;ll name
each method &lt;code&gt;call&lt;/code&gt; so it quacks like a
&lt;a href=&quot;https://docs.ruby-lang.org/en/3.1/Proc.html&quot;&gt;Proc&lt;/a&gt;. In this app, I gave each
method a descriptive name instead, in case I later choose to collapse multiple
small classes into a larger one.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s &lt;code&gt;FindsOrCreatesUser&lt;/code&gt;&amp;rsquo;s implementation:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;module&lt;/span&gt; EmailAuth
  &lt;span style=&quot;color:#66d9ef&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;FindsOrCreatesUser&lt;/span&gt;
    &lt;span style=&quot;color:#66d9ef&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;find_or_create&lt;/span&gt;(email)
      user &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;User&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;find_or_create_by(
        &lt;span style=&quot;color:#e6db74&quot;&gt;email&lt;/span&gt;: email&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;strip&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;downcase
      )
      &lt;span style=&quot;color:#66d9ef&quot;&gt;if&lt;/span&gt; user&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;persisted?
        user
      &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
    &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
  &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Most of the heavy lifting here is done by &lt;code&gt;ActiveRecord::Relation&lt;/code&gt;&amp;rsquo;s handy
&lt;a href=&quot;https://api.rubyonrails.org/classes/ActiveRecord/Relation.html#method-i-find_or_create_by&quot;&gt;find_or_create_by&lt;/a&gt;
method, of course. Because we are calling the
&lt;a href=&quot;https://twitter.com/searls/status/1582475257926934530?s=20&amp;amp;t=usysYF6_D7F76j4fuwSCOg&quot;&gt;bangless&lt;/a&gt;
version of the method (as opposed to
&lt;a href=&quot;https://api.rubyonrails.org/classes/ActiveRecord/Relation.html#method-i-find_or_create_by!&quot;&gt;find_or_create_by!&lt;/a&gt;),
it will actually return an invalid unpersisted model if an email address is
malformed. We want this object to return &lt;code&gt;nil&lt;/code&gt; in that case, which is why we
need the &lt;code&gt;persisted?&lt;/code&gt; check.&lt;/p&gt;



&lt;h3 id=&quot;generating-an-authentication-token&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#generating-an-authentication-token&quot;&gt;Generating an authentication token&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;With that implemented, we can return to &lt;code&gt;EmailsLink&lt;/code&gt; and think about our next
requirement:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;module&lt;/span&gt; EmailAuth
  &lt;span style=&quot;color:#66d9ef&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;EmailsLink&lt;/span&gt;
    &lt;span style=&quot;color:#66d9ef&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;initialize&lt;/span&gt;
      @finds_or_creates_user &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;FindsOrCreatesUser&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;new
      @generates_token &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;GeneratesToken&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;new
    &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;

    &lt;span style=&quot;color:#66d9ef&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;email&lt;/span&gt;(&lt;span style=&quot;color:#e6db74&quot;&gt;email&lt;/span&gt;:, &lt;span style=&quot;color:#e6db74&quot;&gt;redirect_path&lt;/span&gt;:)
      &lt;span style=&quot;color:#66d9ef&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;unless&lt;/span&gt; (user &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; @finds_or_creates_user&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;find_or_create(email))

      token &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; @generates_token&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;generate(user)
    &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
  &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;aside-wrap&quot;&gt;
  &lt;p class=&quot;aside&quot;&gt;Tastes vary on how densely-packed this is, but note that we turned our
&lt;code&gt;find_or_create&lt;/code&gt; assignment into a guard clause by prepending &lt;code&gt;return unless&lt;/code&gt;.
This will effectively bail out when an invalid email address is submitted.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Following the same pattern, we added a dependency named &lt;code&gt;GeneratesToken&lt;/code&gt; that
takes a user. Here&amp;rsquo;s its implementation:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;module&lt;/span&gt; EmailAuth
  &lt;span style=&quot;color:#66d9ef&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;GeneratesToken&lt;/span&gt;
    &lt;span style=&quot;color:#66d9ef&quot;&gt;TOKEN_SHELF_LIFE&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#ae81ff&quot;&gt;30&lt;/span&gt;

    &lt;span style=&quot;color:#66d9ef&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;generate&lt;/span&gt;(user)
      &lt;span style=&quot;color:#66d9ef&quot;&gt;unless&lt;/span&gt; user&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;auth_token&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;present? &lt;span style=&quot;color:#f92672&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; user&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;auth_token_expires_at&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;future?
        user&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;update!(
          &lt;span style=&quot;color:#e6db74&quot;&gt;auth_token&lt;/span&gt;: &lt;span style=&quot;color:#66d9ef&quot;&gt;SecureRandom&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;urlsafe_base64,
          &lt;span style=&quot;color:#e6db74&quot;&gt;auth_token_expires_at&lt;/span&gt;: &lt;span style=&quot;color:#66d9ef&quot;&gt;TOKEN_SHELF_LIFE&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;minutes&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;from_now
        )
      &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
      user&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;auth_token
    &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
  &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If a user already has an unexpired authentication token, &lt;code&gt;generate&lt;/code&gt; will simply
return it. Otherwise, it will save a new token and an expiration timestamp set
thirty minutes in the future.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;ve never used
&lt;a href=&quot;https://docs.ruby-lang.org/en/3.1/SecureRandom.html&quot;&gt;SecureRandom&lt;/a&gt; before, it&amp;rsquo;s
a super convenient way to generate immediately-useful cryptographically-secure
values by relying on &lt;code&gt;openssl&lt;/code&gt; or the underlying operating system as opposed to
Ruby&amp;rsquo;s internal &lt;a href=&quot;https://docs.ruby-lang.org/en/3.1/Random.html&quot;&gt;Random class&lt;/a&gt;.&lt;/p&gt;



&lt;h3 id=&quot;delivering-an-email-with-a-magic-link&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#delivering-an-email-with-a-magic-link&quot;&gt;Delivering an email with a magic link&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;We now have what we need to send an email that can enable users to log into the
system. Let&amp;rsquo;s update our &lt;code&gt;EmailsLink&lt;/code&gt; class to depend on a newly-imagined
dependency to handle this for us:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;module&lt;/span&gt; EmailAuth
  &lt;span style=&quot;color:#66d9ef&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;EmailsLink&lt;/span&gt;
    &lt;span style=&quot;color:#66d9ef&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;initialize&lt;/span&gt;
      @finds_or_creates_user &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;FindsOrCreatesUser&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;new
      @generates_token &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;GeneratesToken&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;new
      @delivers_email &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;DeliversEmail&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;new
    &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;

    &lt;span style=&quot;color:#66d9ef&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;email&lt;/span&gt;(&lt;span style=&quot;color:#e6db74&quot;&gt;email&lt;/span&gt;:, &lt;span style=&quot;color:#e6db74&quot;&gt;redirect_path&lt;/span&gt;:)
      &lt;span style=&quot;color:#66d9ef&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;unless&lt;/span&gt; (user &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; @finds_or_creates_user&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;find_or_create(email))

      @delivers_email&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;deliver(
        &lt;span style=&quot;color:#e6db74&quot;&gt;user&lt;/span&gt;: user,
        &lt;span style=&quot;color:#e6db74&quot;&gt;token&lt;/span&gt;: @generates_token&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;generate(user),
        &lt;span style=&quot;color:#e6db74&quot;&gt;redirect_path&lt;/span&gt;: redirect_path
      )
    &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
  &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Above, &lt;code&gt;DeliversEmail#deliver&lt;/code&gt; takes the keyword arguments the email template
will be interested in. (As a command method, any return value is incidental.) I
decided to pass the &lt;code&gt;token&lt;/code&gt; separately as opposed to expecting the mailer to
know that the token is persisted as part of a &lt;code&gt;User&lt;/code&gt; record, since that&amp;rsquo;s an
implementation detail that could reasonably change (in keeping with the spirit
of the &lt;a href=&quot;https://blog.testdouble.com/posts/2022-06-15-law-of-demeter/&quot;&gt;Law of Demeter&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;If you have an allergy to very small classes, you may experience a reaction to
the implementation of &lt;code&gt;DeliversEmail&lt;/code&gt;, however:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;module&lt;/span&gt; EmailAuth
  &lt;span style=&quot;color:#66d9ef&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;DeliversEmail&lt;/span&gt;
    &lt;span style=&quot;color:#66d9ef&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;deliver&lt;/span&gt;(&lt;span style=&quot;color:#e6db74&quot;&gt;user&lt;/span&gt;:, &lt;span style=&quot;color:#e6db74&quot;&gt;token&lt;/span&gt;:, &lt;span style=&quot;color:#e6db74&quot;&gt;redirect_path&lt;/span&gt;:)
      &lt;span style=&quot;color:#66d9ef&quot;&gt;LoginLinkMailer&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;with(
        &lt;span style=&quot;color:#e6db74&quot;&gt;user&lt;/span&gt;: user,
        &lt;span style=&quot;color:#e6db74&quot;&gt;token&lt;/span&gt;: token,
        &lt;span style=&quot;color:#e6db74&quot;&gt;redirect_path&lt;/span&gt;: redirect_path
      )&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;login_link&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;deliver_later
    &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
  &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Personally, I don&amp;rsquo;t mind this indirection. The &lt;a href=&quot;https://guides.rubyonrails.org/action_mailer_basics.html&quot;&gt;Action Mailer
API&lt;/a&gt; has always felt
awkward to use. Messages are defined as instance methods but invoked as class
methods. There are multiple ways to assign arguments. Calling &lt;code&gt;deliver_now&lt;/code&gt; is
almost always wrong, but so is expecting every developer to remember as much
each time they invoke a mailer. So if a little wrapper object can provide a
better experience to the method&amp;rsquo;s caller, I&amp;rsquo;d take that deal.&lt;/p&gt;
&lt;p&gt;The mailer itself mostly shovels its params to its view, since the bulk of the
work has been done already in our POROs (&lt;code&gt;FindsOrCreatesUser&lt;/code&gt; and
&lt;code&gt;GeneratesToken&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;LoginLinkMailer&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;ApplicationMailer&lt;/span&gt;
  &lt;span style=&quot;color:#66d9ef&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;login_link&lt;/span&gt;
    @user &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; params&lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;:user&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;]&lt;/span&gt;
    @token &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; params&lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;:token&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;]&lt;/span&gt;
    @redirect_path &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; params&lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;:redirect_path&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;]&lt;/span&gt;

    mail(
      &lt;span style=&quot;color:#e6db74&quot;&gt;to&lt;/span&gt;: @user&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;email,
      &lt;span style=&quot;color:#e6db74&quot;&gt;subject&lt;/span&gt;: &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;Your Magic Login Link&amp;#34;&lt;/span&gt;
    )
  &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Speaking of the view, &lt;code&gt;login_link.html.erb&lt;/code&gt; is also simple and straightforward:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-fallback&quot; data-lang=&quot;fallback&quot;&gt;&amp;lt;h1&amp;gt;Hello!&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;
  Here is your
  &amp;lt;%= link_to &amp;#34;link to login&amp;#34;,
    login_emails_authenticate_url(
      token: @token,
      redirect_path: @redirect_path
    )
  %&amp;gt;.
  It expires in &amp;lt;%= EmailAuth::GeneratesToken::TOKEN_SHELF_LIFE %&amp;gt; minutes.
&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Importantly, when calling a &lt;code&gt;_url&lt;/code&gt; helper, Rails needs to know the correct
protocol, domain, and port to prefix to the path. This is exposed in Action
Mailer&amp;rsquo;s configuration and is often handled separately for each environment.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;config/development.rb&lt;/code&gt;, I point to &lt;code&gt;localhost:3000&lt;/code&gt; since that&amp;rsquo;s where the
server is bound by default:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;config&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;action_mailer&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;default_url_options &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; {
  &lt;span style=&quot;color:#e6db74&quot;&gt;host&lt;/span&gt;: &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;,
  &lt;span style=&quot;color:#e6db74&quot;&gt;port&lt;/span&gt;: &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;3000&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And in &lt;code&gt;config/test.rb&lt;/code&gt;, I specify only what I need to in order to give my
tests something to assert against:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;config&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;action_mailer&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;default_url_options &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; {
  &lt;span style=&quot;color:#e6db74&quot;&gt;host&lt;/span&gt;: &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;example.com&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&quot;opening-the-email-and-clicking-the-link&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#opening-the-email-and-clicking-the-link&quot;&gt;Opening the email and clicking the link&lt;/a&gt;
  
&lt;/h2&gt;
&lt;p&gt;By default, emails will be printed to the log in development, but keeping an eye
on a terminal to scan and copy-paste a carefully-coiffed URL inside an HTML
email is tedious, time-consuming, and a poor approximation of a real user&amp;rsquo;s
experience. At the same time, setting up actually-working-for-real email
delivery in development is more trouble than it&amp;rsquo;s worth.&lt;/p&gt;
&lt;div class=&quot;aside-wrap&quot;&gt;
  &lt;p class=&quot;aside&quot;&gt;Normally, I use Action Mailer&amp;rsquo;s built-in &lt;a href=&quot;https://guides.rubyonrails.org/action_mailer_basics.html#previewing-emails&quot;&gt;preview
feature&lt;/a&gt;
for inspecting emails generated by my app, but because each email contains a
time-sensitive URL with a unique token that determines who gets logged in, it
isn&amp;rsquo;t a good fit for opening an email as a step in a workflow.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;That&amp;rsquo;s what led me to pull in the
&lt;a href=&quot;https://github.com/ryanb/letter_opener&quot;&gt;letter_opener&lt;/a&gt; gem for the first time.
Simply add the gem to your Gemfile&amp;rsquo;s &lt;code&gt;:development&lt;/code&gt; group and sprinkle two more
lines into your &lt;code&gt;config/development.rb&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;config&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;action_mailer&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;delivery_method &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;:letter_opener&lt;/span&gt;
config&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;action_mailer&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;perform_deliveries &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As soon as &lt;code&gt;letter_opener&lt;/code&gt; is wired up, any emails sent by the system will be
instantly opened in a new browser tab, both saving time and displaying what the
rendered HTML will look like:&lt;/p&gt;
&lt;img src=&quot;https://cdn-blog.testdouble.com/img/passwordless/letter_opener.f0d29534c38243a2ad17fd54c53a927989d51bbe34a9e213f03846a0ceaaa37d.png&quot; alt=&quot;An email preview in Safari&quot; /&gt;

&lt;p&gt;Because this feature is composed of so many steps, it&amp;rsquo;s worth pausing at each
point to validate that the parameters are being sent correctly before we move
onto the next step. To verify the URL in the email, I first visited
&lt;a href=&quot;http://localhost:3000/numbers?count=8&quot;&gt;localhost:3000/numbers?count=8&lt;/a&gt;, allowed
myself to be redirected, and then submitted the login form.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the URL that was contained in the email&amp;rsquo;s link:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-fallback&quot; data-lang=&quot;fallback&quot;&gt;http://localhost:3000/login_emails/authenticate?redirect_path=%2Fnumbers%3Fcount%3D8&amp;amp;token=EnJBIJKJczC0jI4sBMwMPg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Valid-looking &lt;code&gt;token&lt;/code&gt;? Check. URL-encoded &lt;code&gt;redirect_path&lt;/code&gt; seem right? Check.&lt;/p&gt;



&lt;h2 id=&quot;authenticating-a-login-request&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#authenticating-a-login-request&quot;&gt;Authenticating a login request&lt;/a&gt;
  
&lt;/h2&gt;
&lt;p&gt;Good news! It&amp;rsquo;s time to authenticate that a user&amp;rsquo;s request includes a valid
token and assign them to a session. Because we&amp;rsquo;ve eschewed a typical login
form, we won&amp;rsquo;t be responding to an HTTP POST request with a corresponding
&lt;code&gt;create&lt;/code&gt; action. (And because email clients don&amp;rsquo;t execute JavaScript, we can&amp;rsquo;t
&lt;a href=&quot;https://guides.rubyonrails.org/working_with_javascript_in_rails.html#method&quot;&gt;trick them into sending a
POST&lt;/a&gt;
when clicking that link, either.)&lt;/p&gt;
&lt;p&gt;Instead, let&amp;rsquo;s add a custom route to our existing controller that can respond to
both GET and POST requests and name both the path fragment and the action
&lt;code&gt;authenticate&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;Rails&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;application&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;routes&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;draw &lt;span style=&quot;color:#66d9ef&quot;&gt;do&lt;/span&gt;
  match &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;login_emails/authenticate&amp;#34;&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;to&lt;/span&gt;: &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;login_emails#authenticate&amp;#34;&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;via&lt;/span&gt;: &lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;:get&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;:post&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;]&lt;/span&gt;
  resource &lt;span style=&quot;color:#e6db74&quot;&gt;:login_email&lt;/span&gt;
  &lt;span style=&quot;color:#75715e&quot;&gt;#¬†‚Ä¶&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And here&amp;rsquo;s that &lt;code&gt;authenticate&lt;/code&gt; action&amp;rsquo;s implementation:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;LoginEmailsController&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span style=&quot;color:#75715e&quot;&gt;# ‚Ä¶&lt;/span&gt;
  &lt;span style=&quot;color:#66d9ef&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;authenticate&lt;/span&gt;
    result &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;EmailAuth&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;::&lt;/span&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;ValidatesLoginAttempt&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;new&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;validate(params&lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;:token&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;]&lt;/span&gt;)
    &lt;span style=&quot;color:#66d9ef&quot;&gt;if&lt;/span&gt; result&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;success?
      reset_session
      session&lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;:user_id&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;]&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; result&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;user&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;id
      flash&lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;:notice&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;]&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;Welcome, &lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;#{&lt;/span&gt;result&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;user&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;email&lt;span style=&quot;color:#e6db74&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;!&amp;#34;&lt;/span&gt;
      redirect_to params&lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;:redirect_path&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;]&lt;/span&gt;
    &lt;span style=&quot;color:#66d9ef&quot;&gt;else&lt;/span&gt;
      flash&lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;:error&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;]&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;We weren&amp;#39;t able to log you in with that link. Try again?&amp;#34;&lt;/span&gt;
      redirect_to new_login_path(&lt;span style=&quot;color:#e6db74&quot;&gt;redirect_path&lt;/span&gt;: params&lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;:redirect_path&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;]&lt;/span&gt;)
    &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
  &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;aside-wrap&quot;&gt;
  &lt;p class=&quot;aside&quot;&gt;If you&amp;rsquo;re familiar with &lt;a href=&quot;https://guides.rubyonrails.org/security.html#sessions&quot;&gt;session
management&lt;/a&gt; in Rails,
this should be familiar. Because the response ends by redirecting to the user&amp;rsquo;s
originally-intended path, that request will run our &lt;code&gt;require_login&lt;/code&gt; filter,
which will, in turn, use &lt;code&gt;session[:user_id]&lt;/code&gt; to populate a &lt;code&gt;@current_user&lt;/code&gt;
instance variable for each subsequent request.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;There&amp;rsquo;s a reason this is the application&amp;rsquo;s longest method in any class that
extends a Rails type: every single thing it does must be invoked from a
controller: &lt;code&gt;reset_session&lt;/code&gt;, &lt;code&gt;session&lt;/code&gt;, &lt;code&gt;flash[]&lt;/code&gt;, and &lt;code&gt;redirect_to&lt;/code&gt;. There&amp;rsquo;s
enough going on here to make me glad for my &amp;ldquo;escape hatch&amp;rdquo; strategy of
implementing feature logic someplace outside the controller itself.&lt;/p&gt;
&lt;p&gt;With that in mind, let&amp;rsquo;s take a look at &lt;code&gt;ValidatesLoginAttempt&lt;/code&gt; referenced
above:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;module&lt;/span&gt; EmailAuth
  &lt;span style=&quot;color:#66d9ef&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;ValidatesLoginAttempt&lt;/span&gt;
    &lt;span style=&quot;color:#66d9ef&quot;&gt;Result&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;Struct&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;new(&lt;span style=&quot;color:#e6db74&quot;&gt;:success?&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;:user&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;keyword_init&lt;/span&gt;: &lt;span style=&quot;color:#66d9ef&quot;&gt;true&lt;/span&gt;)

    &lt;span style=&quot;color:#66d9ef&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;validate&lt;/span&gt;(token)
      user &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;User&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;where(&lt;span style=&quot;color:#e6db74&quot;&gt;auth_token&lt;/span&gt;: token)
        &lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;where(&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;auth_token_expires_at &amp;gt; ?&amp;#34;&lt;/span&gt;, &lt;span style=&quot;color:#66d9ef&quot;&gt;Time&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;zone&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;now)
        &lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;first

      &lt;span style=&quot;color:#66d9ef&quot;&gt;if&lt;/span&gt; user&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;present?
        &lt;span style=&quot;color:#66d9ef&quot;&gt;Result&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;new(success?: &lt;span style=&quot;color:#66d9ef&quot;&gt;true&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;user&lt;/span&gt;: user)
      &lt;span style=&quot;color:#66d9ef&quot;&gt;else&lt;/span&gt;
        &lt;span style=&quot;color:#66d9ef&quot;&gt;Result&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;new(success?: &lt;span style=&quot;color:#66d9ef&quot;&gt;false&lt;/span&gt;)
      &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
    &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
  &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Fortunately, the implementation isn&amp;rsquo;t too complicated. While it does make the
assumption that &lt;code&gt;SecureRandom.urlsafe_base64&lt;/code&gt; will never return the same string
twice in a fifteen minute period, that&amp;rsquo;s probably a safe bet.&lt;/p&gt;
&lt;p&gt;The only pattern worth commenting on here is the declaration of a &lt;code&gt;Result&lt;/code&gt;
&lt;a href=&quot;https://docs.ruby-lang.org/en/3.1/Struct.html&quot;&gt;Struct&lt;/a&gt; to return a value that
can both indicate &lt;code&gt;success?&lt;/code&gt; and identify the &lt;code&gt;user&lt;/code&gt; to the caller. We could
have just as well conditionally returned a &lt;code&gt;User&lt;/code&gt; or &lt;code&gt;nil&lt;/code&gt;, but sometimes it&amp;rsquo;s
nice to return a value that&amp;rsquo;s explicit about a query method&amp;rsquo;s outcome. Given
that the thing we&amp;rsquo;re writing is named &amp;ldquo;validate&amp;rdquo;, the primary response a caller
should expect is &amp;ldquo;yes&amp;rdquo; or &amp;ldquo;no&amp;rdquo;, and any reference to the &lt;code&gt;user&lt;/code&gt; is merely
metadata associated with a successful response.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s time for the moment of truth: clicking the link in the email we just sent
and seeing if it successfully logs us in and redirects us to where we want to
go:&lt;/p&gt;
&lt;img src=&quot;https://cdn-blog.testdouble.com/img/passwordless/yatta.b45ef5df51470ac5f34d8a9425e06219de4a352726851383b1fef7c5ce78fe62.png&quot; alt=&quot;A successfully authenticated page&quot; /&gt;

&lt;p&gt;Huzzah! We&amp;rsquo;re logged in! And our original path was successfully propagated, too!
(Try not to think too hard about the fact that the application we&amp;rsquo;ve been
working so hard to protect with this authentication system apparently does
nothing but generate colorful random numbers.)&lt;/p&gt;



&lt;h2 id=&quot;allowing-users-to-log-out&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#allowing-users-to-log-out&quot;&gt;Allowing users to log out&lt;/a&gt;
  
&lt;/h2&gt;
&lt;p&gt;Not a lot of people know this, but the most commonly-requested feature after
implementing a login system is to provide some way for users to log out. Let&amp;rsquo;s
save our product owner a step and just handle that ourselves now.&lt;/p&gt;
&lt;p&gt;In our ERB template, we can rely on the
&lt;a href=&quot;https://github.com/hotwired/turbo-rails&quot;&gt;turbo-rails&lt;/a&gt; gem to make an ordinary
&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag trigger an HTTP DELETE request by adding a
&lt;code&gt;data-turbo-method=&amp;quot;delete&amp;quot;&lt;/code&gt; attribute to the link like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-fallback&quot; data-lang=&quot;fallback&quot;&gt;&amp;lt;%= link_to &amp;#34;Log out&amp;#34;, login_email_path, data: { &amp;#34;turbo-method&amp;#34;: :delete } %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;[Heads up:&lt;/strong&gt; this recently changed! Prior to Rails 7, this attribute would
have been named &lt;code&gt;data-method&lt;/code&gt; and observed by
&lt;a href=&quot;https://github.com/rails/rails-ujs&quot;&gt;rails-ujs&lt;/a&gt; as opposed to Turbo.&lt;strong&gt;]&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now that we have a link that maps to our &lt;code&gt;LoginEmailsController&lt;/code&gt;&amp;rsquo;s &lt;code&gt;destroy&lt;/code&gt;
action, we can easily implement it:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;LoginEmailsController&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span style=&quot;color:#66d9ef&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;destroy&lt;/span&gt;
    reset_session
    flash&lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;:notice&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;]&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;Your account has been successfully logged out.&amp;#34;&lt;/span&gt;
    redirect_to new_login_email_path
  &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
  &lt;span style=&quot;color:#75715e&quot;&gt;# ‚Ä¶&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s it! After everything we&amp;rsquo;ve been through together, it feels nice to write
a simple three-line method as a controller action.&lt;/p&gt;



&lt;h2 id=&quot;thanks-for-taking-the-time&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#thanks-for-taking-the-time&quot;&gt;Thanks for taking the time&lt;/a&gt;
  
&lt;/h2&gt;
&lt;p&gt;Maybe you landed here because you&amp;rsquo;re interested in adding an email-based login
feature to your Rails app. In that case, I hope this tutorial helps you build
your own! Showing people how to do stuff is definitely one reason I write
blog posts that show people how to do stuff.&lt;/p&gt;
&lt;p&gt;But there&amp;rsquo;s another reason. Why take what could have been a dozen code examples
and instead publish a 4000 word tutorial? Because I believe code alone can never
tell the whole story. Code as an artifact is merely a distillation of countless
hard questions, failed experiments, and iterative tweaks that programmers must
endure to ship working software. Behind each variable name is an expression of
intent. Behind every if statement lies a design choice. And the more input we as
developers receive of different ways to approach planning, structuring, and
modifying code, the better prepared we will be for the innumerable challenges we
encounter in this profession.&lt;/p&gt;
&lt;p&gt;Conference talks, screencasts, technical books, and blog posts like this one can
all help us learn how to both write code and how to &lt;em&gt;think&lt;/em&gt; about writing code.
But nothing will ever beat the real deal: practicing the craft of writing code
yourself. At Test Double, we&amp;rsquo;ve assembled a cadre of programmers who are not
only excellent practitioners, but brilliant communicators, talented teachers,
and empathetic teammates. If you find value in content like this, you wouldn&amp;rsquo;t
believe how much more there is to be gained by pair-programming with a Test
Double agent to work alongside you in &lt;em&gt;your&lt;/em&gt; team&amp;rsquo;s codebase, thinking through
hard problems with you in real-time, and striving to get things done at a level
of quality we can all take pride in.&lt;/p&gt;
&lt;p&gt;If that&amp;rsquo;s an experience you&amp;rsquo;d be interested in having for yourself and your
team, please &lt;a href=&quot;https://testdouble.com/contact&quot;&gt;reach out to us&lt;/a&gt; to talk about how
Test Double might work with your company, both to build great things and to
improve as software engineers.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Double Agent Profile: Cliff Pruitt</title>
      <link>https://blog.testdouble.com/posts/2022-10-18-agent-profile-cliff-pruitt/</link>
      <pubDate>Tue, 18 Oct 2022 00:00:00 +0000</pubDate>
      
      
      <author>hello+rss@testdouble.com (Cliff Pruitt)</author>
      <guid>https://blog.testdouble.com/posts/2022-10-18-agent-profile-cliff-pruitt/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Name:&lt;/strong&gt; Cliff Pruitt&lt;br&gt;
&lt;strong&gt;Designation:&lt;/strong&gt; Agent 0050&lt;br&gt;
&lt;strong&gt;Double Agent Role:&lt;/strong&gt;  Senior Software Consultant&lt;br&gt;
&lt;strong&gt;Special Skills:&lt;/strong&gt; Asking questions, Thinking ahead&lt;br&gt;
&lt;strong&gt;Aliases:&lt;/strong&gt; üôÖüèº‚Äç‚ôÇÔ∏è&lt;br&gt;
&lt;strong&gt;Location:&lt;/strong&gt; Tampa, FL&lt;br&gt;
&lt;strong&gt;Favorite Emoji:&lt;/strong&gt;  üòÑ&lt;/p&gt;



&lt;h3 id=&quot;what-impact-are-you-proudest-of-in-your-career&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#what-impact-are-you-proudest-of-in-your-career&quot;&gt;What impact are you proudest of in your career?&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;Oh, I don‚Äôt know. I feel weird thinking about my career in that way. I guess if I had to pick, it would be a toss-up. I‚Äôve always loved Ruby and Rails, and for a lot of my career, I thought it would be so cool to have some PR accepted into Rails. I was fortunate enough to spend a good chunk of time at GitHub on a team that maintained continuous Rails upgrades. That gave me the opportunity to get &lt;a href=&quot;https://contributors.rubyonrails.org/contributors/cliff-pruitt/commits&quot;&gt;20 commits&lt;/a&gt; into Rails. Of those, adding &lt;a href=&quot;https://github.com/rails/rails/pull/37940&quot;&gt;Disallowed Deprecations&lt;/a&gt; was probably the one I was most excited about. Seeing something you‚Äôve long wanted to do actually happen is pretty cool.&lt;/p&gt;
&lt;p&gt;On the other hand, I‚Äôve always loved helping people learn about Rails and helping them understand how things work beyond a surface level. I was part of a Test Double team doing some Rails training for a client, which was bringing on a large number of engineers who were experienced in other languages and needed to ramp up on Rails quickly. It was really rewarding to see how well the curriculum was received, how productive the devs were with Rails, and how this training was expanded as more groups were onboarded. I think the best part was hearing new hires asking if we‚Äôd be doing it again as much as a year after we wrapped up the training. I guess that means it was good!&lt;/p&gt;



&lt;h3 id=&quot;looking-ahead-what-has-you-most-excited-for-the-next-year-at-work&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#looking-ahead-what-has-you-most-excited-for-the-next-year-at-work&quot;&gt;Looking ahead, what has you most excited for the next year at work?&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;I think maybe just having the chance to work with more Test Double agents that I haven‚Äôt worked directly with in the past. There are so many brilliant people here, and every time I work with someone new, I feel like I grow, and my perspectives change. I want more of that.&lt;/p&gt;



&lt;h3 id=&quot;what-is-your-favorite-thing-about-being-a-double-agent-at-test-double&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#what-is-your-favorite-thing-about-being-a-double-agent-at-test-double&quot;&gt;What is your favorite thing about being a Double Agent at Test Double?&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;Hands down, it‚Äôs the people I work with. Yes, we get to solve a bunch of different problems for our clients and get to use a bunch of different technologies to do it, and that‚Äôs cool, but it‚Äôs really the people I work with that make being here great. Every agent I interact with is supportive, helpful, encouraging and genuinely seems to care about others. Those in leadership positions work extremely hard to facilitate the growth of our agents and make working here sustainable and rewarding. I‚Äôve been here for almost four years, and sometimes it still catches me off guard how much people seem to care about each other.&lt;/p&gt;
&lt;p&gt;Also, the fact that the commute from bedroom to office is four feet doesn‚Äôt hurt.&lt;/p&gt;



&lt;h3 id=&quot;what-do-you-think-makes-test-double-unique&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#what-do-you-think-makes-test-double-unique&quot;&gt;What do you think makes Test Double unique?&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;I‚Äôve never worked with another consultancy, so I really can‚Äôt say for sure, but the emphasis they place on success for individual consultants, not just on the company as a whole, seems really significant to me.&lt;/p&gt;



&lt;h3 id=&quot;what-have-you-been-thinking-about-a-lot-lately-in-software-development-and-why&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#what-have-you-been-thinking-about-a-lot-lately-in-software-development-and-why&quot;&gt;What have you been thinking about a lot lately in software development, and why?&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;Until recently, I‚Äôve been doing a lot of work on an app that makes a lot of calls to external APIs, more than most apps I‚Äôve worked on in the past. The process of writing and maintaining tests, particularly when mocking multiple API calls for a single test, was pretty slow and painful. I‚Äôve really been thinking about a solid set of patterns and tools that enforce good boundaries and make testing API-heavy apps less cumbersome, avoiding mocking HTTP requests at all. I don‚Äôt think I have a great solution, but it‚Äôs the topic that seems to keep bubbling up to the surface for me lately.&lt;/p&gt;



&lt;h3 id=&quot;what-has-you-most-excited-about-this-year-outside-of-work&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#what-has-you-most-excited-about-this-year-outside-of-work&quot;&gt;What has you most excited about this year outside of work?&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;Ha! I am seriously not looking that far ahead. My ambition is to be as independent and disconnected from the contemporary grocery store food supply as possible. We‚Äôve been doing a lot of foundational work to grow and raise our own food, and we‚Äôre hoping that this is the year that we start to see a lot of that pay off. It‚Äôs a lot of work, though, and a lot of learning from mistakes. One thing at a time.&lt;/p&gt;



&lt;h3 id=&quot;what-bookpodcastmovietv-show-have-you-been-thinking-about-a-lot-lately-and-why&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#what-bookpodcastmovietv-show-have-you-been-thinking-about-a-lot-lately-and-why&quot;&gt;What book/podcast/movie/TV show have you been thinking about a lot lately, and why?&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;I watch a little TV and enjoy reading, but I‚Äôm not really much of a media consumer. I‚Äôd rather be outside doing something. I‚Äôm currently working on building better soil in our garden area, and &lt;a href=&quot;https://www.jefflowenfels.com/books-by-jeff-lownfels/&quot;&gt;Teaming With Microbes&lt;/a&gt; has been a great book on that subject. In Florida, we usually can‚Äôt grow the same standard veggies as a lot of the rest of the country. We‚Äôre much better off planting things that naturally do well in our zone, and &lt;a href=&quot;https://www.youtube.com/channel/UC208478ECji1rdkDDbB0vHQ&quot;&gt;David the Good‚Äôs survival gardener YouTube channel&lt;/a&gt; has some pretty great info for our semi-tropical climate.&lt;/p&gt;



&lt;h3 id=&quot;whats-something-interesting-about-you-thats-not-on-your-resume-or-linkedin&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#whats-something-interesting-about-you-thats-not-on-your-resume-or-linkedin&quot;&gt;What‚Äôs something interesting about you that‚Äôs not on your resume or LinkedIn?&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;I originally went to college planning to get a fine art degree. I left school around 2000 to take a job doing in-house graphic design for web and print and ended up learning to program along the way. I found over time, I liked writing code more than pushing pixels around, and here I am today at Test Double.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This interview is based on shared documentation with Cliff Pruitt and Cathy Colliver. It may or may not self-destruct.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Double Agent Profile: Pier-Luc Faucher</title>
      <link>https://blog.testdouble.com/posts/2022-10-12-agent-profile-pier-luc-faucher/</link>
      <pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate>
      
      
      <author>hello+rss@testdouble.com (Pier-Luc Faucher)</author>
      <guid>https://blog.testdouble.com/posts/2022-10-12-agent-profile-pier-luc-faucher/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Name:&lt;/strong&gt; Pier-Luc Faucher&lt;br&gt;
&lt;strong&gt;Designation:&lt;/strong&gt; Agent 0146&lt;br&gt;
&lt;strong&gt;Double Agent Role:&lt;/strong&gt;  Senior Software Consultant&lt;br&gt;
&lt;strong&gt;Special Skills:&lt;/strong&gt;  Will learn anything and everything for fun!&lt;br&gt;
&lt;strong&gt;Aliases:&lt;/strong&gt; &lt;a href=&quot;https://github.com/plfaucher&quot;&gt;Github&lt;/a&gt; &lt;a href=&quot;https://www.linkedin.com/in/pier-luc-faucher-b9a64754/&quot;&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Location:&lt;/strong&gt; Quebec, Quebec&lt;br&gt;
&lt;strong&gt;Favorite Emoji:&lt;/strong&gt; üóø&lt;/p&gt;



&lt;h3 id=&quot;what-impact-are-you-proudest-of-in-your-career&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#what-impact-are-you-proudest-of-in-your-career&quot;&gt;What impact are you proudest of in your career?&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;This may sound like a weird answer as most talk about their impact in the past tense, but for me it is a continuous and ongoing impact. The impact that I work to embody‚Äîand to bring to every client‚Äîis stability. I believe I am the kind of person that is dependable in a team, versatile and knowledgeable. I may not have all the answers right away, but I know how to get them. I will ask the right questions and make sure we don&amp;rsquo;t forget anything.&lt;/p&gt;



&lt;h3 id=&quot;looking-ahead-what-has-you-most-excited-for-the-next-year-at-work&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#looking-ahead-what-has-you-most-excited-for-the-next-year-at-work&quot;&gt;Looking ahead, what has you most excited for the next year at work?&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;The learning! What I love about computers is the never ending source of knowledge that‚Äôs out there for you to discover.&lt;/p&gt;



&lt;h3 id=&quot;what-is-your-favorite-thing-about-being-a-double-agent-at-test-double&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#what-is-your-favorite-thing-about-being-a-double-agent-at-test-double&quot;&gt;What is your favorite thing about being a Double Agent at Test Double?&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;Being part of an elite squad of people who are just as passionate about development as I am‚Äîwho are also constantly improving and strive to do the right thing for their clients. To be completely honest I was a little bit jaded by the state of consultancy in Canada, where most companies try to fill seats and you‚Äôre just a cog in the machine. With Test Double, you know that being deployed at a client means you‚Äôll get to do high impact work for them, and that you will have the opportunity to bring them up a notch or two. And that is a great feeling to wake up to.&lt;/p&gt;



&lt;h3 id=&quot;what-do-you-think-makes-test-double-unique&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#what-do-you-think-makes-test-double-unique&quot;&gt;What do you think makes Test Double unique?&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;The decentralized group of like-minded persons who care deeply about improving themselves and their clients. To our clients, TD will gladly meet you at your level, and will help you improve as much as you want, at your own pace, like an old mentor.&lt;/p&gt;



&lt;h3 id=&quot;what-have-you-been-thinking-about-a-lot-lately-in-software-development-and-why&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#what-have-you-been-thinking-about-a-lot-lately-in-software-development-and-why&quot;&gt;What have you been thinking about a lot lately in software development, and why?&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;A general sadness about the fragmentation of everything. How many languages are out there? How many frameworks? How many testing libraries? Are we reinventing the wheel just for the sake of it?  I do seriously wonder about where we would be as a society if we could just unite and work together with the same tools, continuously improving them.&lt;/p&gt;



&lt;h3 id=&quot;tell-me-about-something-memorable-that-happened-to-you-and-what-you-learned-from-it&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#tell-me-about-something-memorable-that-happened-to-you-and-what-you-learned-from-it&quot;&gt;Tell me about something memorable that happened to you and what you learned from it.&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;The very first day at one of my first jobs I broke a web server filesystem AND realized afterwards that there were no backups. I was so hasty to prove myself and give a good impression that I made quite the opposite! This was a government website with a 15 years history and fortunately enough they had a paper copy of every article in the archives. But OCR was not what it is today ‚Ä¶&lt;/p&gt;
&lt;p&gt;I was so ashamed of myself, I volunteered to retranscribe every single article during off-hours (because I had to do my actual job during workdays), including the weekend, until everything was done. And so I did. Thank goodness, two kind souls decided to help me with this endeavor!&lt;/p&gt;
&lt;p&gt;Lesson well learned: take your time, never assume, cover your blind spots, and double check everything.  A job well planned is a job halfway done.&lt;/p&gt;



&lt;h3 id=&quot;what-has-you-most-excited-about-this-year-outside-of-work&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#what-has-you-most-excited-about-this-year-outside-of-work&quot;&gt;What has you most excited about this year outside of work?&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;I have been studying Japanese for the past year and have decided to tackle the Japanese language proficiency test! There are 5 levels, from N5 to N1, N1 being the most difficult. I will attempt N4 this December with the goal of rolling into N3 next summer.&lt;/p&gt;
&lt;p&gt;I am particularly excited about this because learning Japanese has been a goal of mine for the past 10 years but I never got the previous attempts to stick. It is really hard to find the motivation to work on Asian languages in Quebec, like you are working on this abstract thing that will never be useful, because most people only speak French. And it is so time consuming, that you do wonder if any investment is worth its price. Today, I finally feel like I found a method that fits my schedule, and I can consistently put in 30 minutes up to an hour every day. I can feel the progress, and I‚Äôm very proud of myself for finally achieving this goal.&lt;/p&gt;



&lt;h3 id=&quot;what-bookpodcastmovietv-show-have-you-been-thinking-about-a-lot-lately-and-why&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#what-bookpodcastmovietv-show-have-you-been-thinking-about-a-lot-lately-and-why&quot;&gt;What book/podcast/movie/TV show have you been thinking about a lot lately, and why?&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;Okay so, nerd alert, but in my teens I watched to this anime called &lt;a href=&quot;https://bleach.fandom.com/wiki/Anime&quot;&gt;Bleach&lt;/a&gt;. The anime stopped before the story was wrapped, and earlier this year they announced a new season! I want to delve back in nostalgia but also use this as a benchmark for my Japanese, to try and watch it without subtitles.&lt;/p&gt;



&lt;h3 id=&quot;what-is-the-biggest-lesson-the-pandemic-taught-you&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#what-is-the-biggest-lesson-the-pandemic-taught-you&quot;&gt;What is the biggest lesson the pandemic taught you?&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;We waste so much time and resources trying to fill the city centers just to abandon them 8 hours later. I deeply think that remote work is not just an economic advantage for the worker, it is also a moral obligation to permit, even encourage people to work from home, because it is a catalyst for our transition to carbon neutrality. We also need to rethink (American) urban planning  to stop having strictly residential or commercial areas. Amsterdam and Nantes are examples of great urban planning that we should base ourselves upon.&lt;/p&gt;



&lt;h3 id=&quot;whats-something-interesting-about-you-thats-not-on-your-resume-or-linkedin&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#whats-something-interesting-about-you-thats-not-on-your-resume-or-linkedin&quot;&gt;What‚Äôs something interesting about you that‚Äôs not on your resume or LinkedIn?&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;The Japanese but I spoiled it already! So, huh‚Ä¶ here‚Äôs a quick list of (hopefully) interesting things about myself:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I used to be a saxophone player in an orchestra for 3 years.&lt;/li&gt;
&lt;li&gt;I love gardening, especially growing hot peppers and components for making a ratatouille.&lt;/li&gt;
&lt;li&gt;When I was a kid I read every encyclopedia I could find in the library. I also watched the Discovery channel and the BBC. As a native French speaker, this is the primary way I learned English.&lt;/li&gt;
&lt;li&gt;I received a small cactus 25 years ago from my elementary school teacher. It‚Äôs still alive and well!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;This interview is based on shared documentation with Pier-Luc Faucher and Cathy Colliver. It may or may not self-destruct.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A few of our favorite books, talks, tutorials, and screencasts</title>
      <link>https://blog.testdouble.com/posts/2022-10-10-a-few-of-our-favorite-books/</link>
      <pubDate>Mon, 10 Oct 2022 00:00:00 +0000</pubDate>
      
      
      <author>hello+rss@testdouble.com (Cathy Colliver)</author>
      <guid>https://blog.testdouble.com/posts/2022-10-10-a-few-of-our-favorite-books/</guid>
      <description>&lt;p&gt;We were doing a panel discussion on agile perspectives, and a book recommendation came up from Jamie Phelps. And folks asked if we had a book list ‚Ä¶&lt;/p&gt;
&lt;p&gt;Well, we do, in fact, have a list. We call it our Reading List for Consultants. And it‚Äôs really more a mix of books, wikis, talks, screencasts, and tutorials. Part of our onboarding at Test Double for all Double Agents is recommending reading/viewing these during growth time.&lt;/p&gt;
&lt;p&gt;This reading list evolves over time, and the content covers topics in software development, business, people, and productivity. Why business? Our consulting developers often help engineering teams figure out things like how to communicate with stakeholders or influence decisions across the entire business organization. And understanding how and why business decisions are made can make you more effective in any role.&lt;/p&gt;
&lt;p&gt;We start out with must read and must watch and then have more good stuff. Really all of these are awesome, but we emphasize the must read and must watch because they have been really impactful at Test Double. If you haven&amp;rsquo;t read or watched these yet you really should as soon as humanly possible.&lt;/p&gt;



&lt;h2 id=&quot;must-read-books&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#must-read-books&quot;&gt;Must read books&lt;/a&gt;
  
&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Read them in this order.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.poodr.com&quot;&gt;Practical Object Oriented Design in Ruby&lt;/a&gt; ‚Äî Definitely read ALL of this book. It&amp;rsquo;s fantastic.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.oreilly.com/library/view/working-effectively-with/0131177052/&quot;&gt;Working Effectively With Legacy Code&lt;/a&gt; ‚Äî Read the first few chapters to get comfortable with &amp;ldquo;extracting things and giving them names&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;



&lt;h2 id=&quot;must-read-test-double-wiki-content&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#must-read-test-double-wiki-content&quot;&gt;Must read Test Double wiki content&lt;/a&gt;
  
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/testdouble/contributing-tests/wiki/Test-Driven-Development&quot;&gt;Test Driven Development and comparison of different styles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h2 id=&quot;must-watch-talks&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#must-watch-talks&quot;&gt;Must watch talks&lt;/a&gt;
  
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Ben Ornstein ‚Äî  &lt;a href=&quot;https://www.youtube.com/watch?v=DC-pQPq0acs&amp;amp;index=5&amp;amp;list=FL6Tm0mPeC4_ycytwF4Q28fQ&amp;amp;t=4s&quot;&gt;Refactoring from good to great&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Gary Bernhardt ‚Äî  &lt;a href=&quot;https://www.destroyallsoftware.com/talks/boundaries&quot;&gt;Boundaries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jim Weirich ‚Äî  &lt;a href=&quot;https://www.youtube.com/watch?v=FR95rp-9Oo4&amp;amp;index=58&amp;amp;list=WL&quot;&gt;Writing SOLID ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Justin Searls ‚Äî &lt;a href=&quot;http://blog.testdouble.com/posts/2017-05-11-how-to-program&quot;&gt;How to Program&lt;/a&gt; and &lt;a href=&quot;http://blog.testdouble.com/posts/2015-09-10-how-i-use-test-doubles&quot;&gt;How I use Test Doubles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Michael Lopp ‚Äî &lt;a href=&quot;https://www.youtube.com/watch?v=pAbU3WJ-NBw&amp;amp;list=PLBzScQzZ83I8H8_0Qete6Bs5EcW3p0kZF&amp;amp;index=14&quot;&gt;The New Manager Death Spiral&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Nikolas Means ‚Äî  &lt;a href=&quot;https://www.youtube.com/watch?v=S2FUSr3WlPk&quot;&gt;How to crash an airplane&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Sandi Metz ‚Äî &lt;a href=&quot;https://www.youtube.com/watch?v=9mLK_8hKii8&amp;amp;t=208s&amp;amp;index=139&amp;amp;list=WL&quot;&gt;Nothing is Something&lt;/a&gt; and &lt;a href=&quot;https://www.youtube.com/watch?v=v-2yFMzxqwU&quot;&gt;SOLID Object Oriented Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Simon Sinek ‚Äî  &lt;a href=&quot;https://www.youtube.com/watch?v=4gUL76lV7gk&quot;&gt;Leaders Eat Last&lt;/a&gt; (also a book)&lt;/li&gt;
&lt;/ul&gt;



&lt;h2 id=&quot;good-screencasts&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#good-screencasts&quot;&gt;Good Screencasts&lt;/a&gt;
  
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.destroyallsoftware.com/screencasts/catalog&quot;&gt;Destroy All Software&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://egghead.io/&quot;&gt;Javascript courses from Egghead&lt;/a&gt; (especially React)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://graceful.dev/&quot;&gt;Ruby Tapas &amp;amp; More on Graceful.dev&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h2 id=&quot;good-tutorials&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#good-tutorials&quot;&gt;Good Tutorials&lt;/a&gt;
  
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://exercism.org&quot;&gt;Exercism&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.pluralsight.com/courses/code-school-rails-for-zombies&quot;&gt;Rails for Zombies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://rubymonk.com/&quot;&gt;RubyMonk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.railstutorial.org/book&quot;&gt;Ruby on Rails Tutorial&lt;/a&gt; (book), Michael Hartl&lt;/li&gt;
&lt;/ul&gt;



&lt;h2 id=&quot;good-developer-booksreading&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#good-developer-booksreading&quot;&gt;Good Developer books/reading&lt;/a&gt;
  
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pragprog.com/titles/sdcoach/agile-coaching/&quot;&gt;Agile Coaching&lt;/a&gt;, Rachel Davies &amp;amp; Liz Sedley&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pragprog.com/titles/dlret/agile-retrospectives/&quot;&gt;Agile Retrospectives&lt;/a&gt;, Esther Derby &amp;amp; Diana Larsen&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.oreilly.com/library/view/badass-making-users/9781491919057/&quot;&gt;Badass&lt;/a&gt;, Kathy Sierra&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.indiebound.org/book/9780321637703&quot;&gt;Coaching Agile Teams&lt;/a&gt;, Lyssa Adkins&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.indiebound.org/book/9780578644837&quot;&gt;Escape Velocity&lt;/a&gt;, Doc Norton&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://shop.oreilly.com/product/9780596004859.do&quot;&gt;Extreme Programming Pocket Guide&lt;/a&gt;, Shane Warden&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.indiebound.org/book/9781118127308&quot;&gt;The Five Dysfunctions of a Team&lt;/a&gt;, Patrick Lencioni&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.growing-object-oriented-software.com/&quot;&gt;Growing Object Oriented Software Guided by Tests&lt;/a&gt;, Steve Freeman &amp;amp; Nat Pryce&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.indiebound.org/book/9781605098562&quot;&gt;Helping&lt;/a&gt;, Edgar Schein&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://larahogan.me/blog/&quot;&gt;Lara Hogan&amp;rsquo;s blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.goodreads.com/en/book/show/6743843&quot;&gt;Leading Lean Software Development&lt;/a&gt;, Mary &amp;amp; Tom Poppendieck&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://management30.com/books/management30/&quot;&gt;Management 3.0&lt;/a&gt;, Jurgen Appelo&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.indiebound.org/book/9780201835953&quot;&gt;Mythical Man Month&lt;/a&gt;, Frederick Brooks&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.indiebound.org/book/9780134757599&quot;&gt;Refactoring&lt;/a&gt;, Martin Fowler&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pragprog.com/titles/tpp20/the-pragmatic-programmer-20th-anniversary-edition/&quot;&gt;The Pragmatic Programmer&lt;/a&gt;, Andy Hunt and Dave Thomas&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.effectiveengineer.com/book&quot;&gt;The Effective Engineer&lt;/a&gt;, Edmond Lau&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.indiebound.org/book/9781603580557&quot;&gt;Thinking in Systems&lt;/a&gt;, Donella Meadows&lt;/li&gt;
&lt;/ul&gt;



&lt;h3 id=&quot;good-business-books&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#good-business-books&quot;&gt;Good business books&lt;/a&gt;
  
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.indiebound.org/book/9780062435613&quot;&gt;Competing Against Luck&lt;/a&gt;, Clayton M. Christensen, Taddy Hall, Karen Dillon, David S. Duncan&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.indiebound.org/book/9780066620992&quot;&gt;Good to Great&lt;/a&gt;, Jim Collins&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.indiebound.org/buy-local/9780815385134&quot;&gt;The Goal, A Business Graphic Novel&lt;/a&gt;, Eliyahu M. Goldratt &amp;amp; Dwight Jon Zimmerman followed by Critical Chain, Eli Goldratt (And follow this up by searching for Theory of Constraints criticism.)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.indiebound.org/book/9781118752364&quot;&gt;How to Measure Anything&lt;/a&gt;, Douglas W. Hubbard&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://books.google.com/books?id=GxQ9DwAAQBAJ&amp;amp;printsec=frontcover&amp;amp;dq=Influencer&amp;amp;hl=en&amp;amp;sa=X&amp;amp;ved=0ahUKEwjhrsP3obfhAhWOVN8KHc7pDVgQ6AEIKDAA#v=onepage&amp;amp;q=Influencer&amp;amp;f=false&quot;&gt;Influencer&lt;/a&gt;, Brittany Hennessy&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.indiebound.org/book/9780062407801&quot;&gt;Never Split the Difference&lt;/a&gt;, Chris Voss &amp;amp; Tahl Raz&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.aprildunford.com/obviously-awesome&quot;&gt;Obviously Awesome&lt;/a&gt;, April Dunford&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.wiley.com/en-us/Organizational+Culture+and+Leadership,+5th+Edition-p-9781119212041&quot;&gt;Organizational Culture and Leadership&lt;/a&gt;, Edgar Schein&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.indiebound.org/book/9780070511132&quot;&gt;Spin Selling&lt;/a&gt;, Neil Rackham&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.indiebound.org/book/9781594631900&quot;&gt;To Sell is Human&lt;/a&gt;, Daniel H. Pink&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.challengerinc.com/the-challenger-books/&quot;&gt;The Challenger Sale&lt;/a&gt;, Neil Rackham&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.indiebound.org/book/9781260468519&quot;&gt;The Toyota Way&lt;/a&gt;, Jeffrey K. Liker&lt;/li&gt;
&lt;/ul&gt;



&lt;h2 id=&quot;good-people-track-books&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#good-people-track-books&quot;&gt;Good people track books&lt;/a&gt;
  
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.oreilly.com/library/view/crucial-conversations/9780071771320/&quot;&gt;Crucial Conversations&lt;/a&gt;, Kerry Patterson, Joseph Grenny, Ron McMillan, Al Switzler&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.indiebound.org/book/9781594484803&quot;&gt;Drive&lt;/a&gt;, Daniel H. Pink&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.indiebound.org/book/9780671027032&quot;&gt;How to Win Friends and Influence People&lt;/a&gt;, Dale Carnegie&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.indiebound.org/book/9780754618737&quot;&gt;A Human Error Approach to Aviation Accident Analysis&lt;/a&gt;, Douglas a. Wiegmann, Scott A. Shappell&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.indiebound.org/book/9781250235374&quot;&gt;Radical Candor&lt;/a&gt;, Kim Scott&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.amazon.com/dp/0932633013/&quot;&gt;Secrets of Consulting&lt;/a&gt;, Gerald M. Weinberg&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.indiebound.org/book/9780385528757&quot;&gt;Switch&lt;/a&gt;, Chip Heath &amp;amp; Dan Heath&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.indiebound.org/book/9780743212342&quot;&gt;The Trusted Advisor&lt;/a&gt;, David H. Maister, Charles H. Green, Robert M. Galford&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.indiebound.org/book/9780143127130&quot;&gt;Thanks for the Feedback&lt;/a&gt;, Douglas Stone, Sheila Heen&lt;/li&gt;
&lt;/ul&gt;



&lt;h2 id=&quot;good-productivity-books&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#good-productivity-books&quot;&gt;Good productivity books&lt;/a&gt;
  
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://calnewport.com/books/deep-work/&quot;&gt;Deep Work&lt;/a&gt;, Cal Newport&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://shop.oreilly.com/product/9780596519544.do&quot;&gt;The Productive Programmer&lt;/a&gt;, Neal Ford&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.indiebound.org/book/9780735211292&quot;&gt;Atomic Habits&lt;/a&gt;, James Clear&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.indiebound.org/book/9780743226752&quot;&gt;The Power of Full Engagement&lt;/a&gt;, Jim Loehr, Tony Schwartz&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.indiebound.org/book/9781982137274&quot;&gt;7 Habits of Highly Effective People&lt;/a&gt;, Stephen R. Covey&lt;/li&gt;
&lt;/ul&gt;



&lt;h2 id=&quot;more-good-talks&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#more-good-talks&quot;&gt;More good talks&lt;/a&gt;
  
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Justin Searls ‚Äî &lt;a href=&quot;http://blog.testdouble.com/posts/2014-05-25-breaking-up-with-your-test-suite&quot;&gt;Breaking Up With Your Test Suite&lt;/a&gt;, &lt;a href=&quot;http://blog.testdouble.com/posts/2015-11-16-how-to-stop-hating-your-tests&quot;&gt;How To Stop Hating Your Tests&lt;/a&gt;, &lt;a href=&quot;https://blog.testdouble.com/talks/2022-02-09-how-to-trust-again/&quot;&gt;How to Trust Again&lt;/a&gt;, &lt;a href=&quot;http://blog.testdouble.com/posts/2016-02-05-good-migrations&quot;&gt;Good Migrations&lt;/a&gt;, &lt;a href=&quot;http://blog.testdouble.com/posts/2016-03-13-testdouble-vs-sinon&quot;&gt;Test Double vs Sinon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Steve Jackson ‚Äî &lt;a href=&quot;http://blog.testdouble.com/posts/2017-07-31-looking-for-failure&quot;&gt;Looking For Failure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Sandi Metz ‚Äî &lt;a href=&quot;https://www.youtube.com/watch?v=8bZh5LMaSmE&quot;&gt;All The Little Things, Get A Whiff Of This&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Katrina Owen ‚Äî &lt;a href=&quot;https://www.youtube.com/watch?v=KA9i5IGS-oU&quot;&gt;Therapeutic Refactoring&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/watch?v=HsWLrSof-ns&quot;&gt;Here Be Dragons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;David Copeland ‚Äî &lt;a href=&quot;https://www.youtube.com/watch?v=7Obobjq8g_U&amp;amp;index=120&amp;amp;list=WL&quot;&gt;Overcoming Our Obsession With Stringly Typed Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;John Cinnamond ‚Äî &lt;a href=&quot;https://www.youtube.com/watch?v=FDs-sSxo2iY&amp;amp;index=125&amp;amp;list=WL&quot;&gt;Extreme Oo Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Simon Sinek ‚Äî &lt;a href=&quot;https://www.youtube.com/watch?v=_osKgFwKoDQ&quot;&gt;The Finite &amp;amp; Infinite Games Of Leadership&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jim Weirich ‚Äî &lt;a href=&quot;https://www.youtube.com/watch?v=22vYwcfQnk8&quot;&gt;The Grand Unified Theory Of Software Engineering&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>A Better Way to Sort Ruby Objects</title>
      <link>https://blog.testdouble.com/talks/2022-09-28-a-better-way-to-sort-ruby-objects/</link>
      <pubDate>Wed, 28 Sep 2022 00:00:00 +0000</pubDate>
      
      
      <author>justin@testdouble.com (Justin Searls)</author>
      <guid>https://blog.testdouble.com/talks/2022-09-28-a-better-way-to-sort-ruby-objects/</guid>
      <description>


&lt;h2 id=&quot;tldr&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#tldr&quot;&gt;tl;dr&lt;/a&gt;
  
&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;We have a new &lt;a href=&quot;https://github.com/testdouble/put&quot;&gt;gem called Put&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;I &lt;a href=&quot;https://youtu.be/nUk-IG_-5R0&quot;&gt;made a screencast&lt;/a&gt; demoing sorting complex
objects by multiple conditions, both in pure Ruby and with Put&lt;/li&gt;
&lt;li&gt;Here&amp;rsquo;s the &lt;a href=&quot;https://github.com/testdouble/put_example&quot;&gt;example code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;After seeing &lt;a href=&quot;https://github.com/testdouble/put#put-puts-your-objects-in-order-&quot;&gt;Put&amp;rsquo;s
README&lt;/a&gt;, I
was asked to refrain from any &amp;ldquo;put&amp;rdquo; wordplay in this post&lt;/li&gt;
&lt;/ol&gt;



&lt;h2 id=&quot;not-too-long-did-read&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#not-too-long-did-read&quot;&gt;Not too long; did read&lt;/a&gt;
  
&lt;/h2&gt;
&lt;p&gt;I have a confession to make: I&amp;rsquo;ve been programming Ruby since 2004 and I still
get tripped up whenever I encounter the &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; spaceship operator. As recently as
this week, I&amp;rsquo;ve caught myself slowly and unconfidently working out the rules in
my head: &amp;ldquo;&lt;em&gt;okay, if the receiver is comparably greater than the argument, it
should return &lt;code&gt;-1&lt;/code&gt;, right?&lt;/em&gt;&amp;rdquo;&lt;/p&gt;
&lt;p&gt;To avoid this confusion, many Rubyists reach for the
&lt;a href=&quot;https://ruby-doc.org/core-3.1.2/Enumerable.html#method-i-sort_by&quot;&gt;Enumerable#sort_by&lt;/a&gt;
method at the first sign of trouble. It lets us pass a block that reduces our
complex objects into simpler ones Ruby can sort for us (like &lt;code&gt;String&lt;/code&gt; and
&lt;code&gt;Numeric&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;For example, we could sort people by age ascending like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;people&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;sort_by { &lt;span style=&quot;color:#f92672&quot;&gt;|&lt;/span&gt;person&lt;span style=&quot;color:#f92672&quot;&gt;|&lt;/span&gt; person&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;age }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or, if we need to sort by age descending, we could make the ages negative:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;people&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;sort_by { &lt;span style=&quot;color:#f92672&quot;&gt;|&lt;/span&gt;person&lt;span style=&quot;color:#f92672&quot;&gt;|&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color:#ae81ff&quot;&gt;1&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;*&lt;/span&gt; person&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;age }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And if we need to add a secondary sorting condition‚Äîsay, people of the same
age should be sorted by name ascending‚Äîwe can return an array in our block that
returns the array in priority order, relying on the fact that Ruby sorts arrays
stepwise by element:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;people&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;sort_by { &lt;span style=&quot;color:#f92672&quot;&gt;|&lt;/span&gt;person&lt;span style=&quot;color:#f92672&quot;&gt;|&lt;/span&gt;
  &lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt;
    &lt;span style=&quot;color:#f92672&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color:#ae81ff&quot;&gt;1&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;*&lt;/span&gt; person&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;age,
    person&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;name
  &lt;span style=&quot;color:#f92672&quot;&gt;]&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But what if someone&amp;rsquo;s &lt;code&gt;age&lt;/code&gt; or &lt;code&gt;name&lt;/code&gt; is nil? Then you&amp;rsquo;ll need
guard clauses to avoid an &lt;code&gt;ArgumentError&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;people&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;sort_by { &lt;span style=&quot;color:#f92672&quot;&gt;|&lt;/span&gt;person&lt;span style=&quot;color:#f92672&quot;&gt;|&lt;/span&gt;
  &lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt;
    person&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;age&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;nil? ? &lt;span style=&quot;color:#ae81ff&quot;&gt;0&lt;/span&gt; : &lt;span style=&quot;color:#f92672&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color:#ae81ff&quot;&gt;1&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;*&lt;/span&gt; person&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;age,
    person&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;name &lt;span style=&quot;color:#f92672&quot;&gt;||&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;zzz&amp;#34;&lt;/span&gt;
  &lt;span style=&quot;color:#f92672&quot;&gt;]&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Wow! It didn&amp;rsquo;t take long for our simple one-off sort to become a bit of a mess.
We&amp;rsquo;d need code comment for these rules to make sense to others.&lt;/p&gt;
&lt;p&gt;To make these multi-criteria sorts more expressive, terser, and nil-safe, I
wrote a &lt;a href=&quot;https://github.com/testdouble/put&quot;&gt;little gem called Put&lt;/a&gt; last week
that can clean up &lt;code&gt;sort_by&lt;/code&gt; blocks:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;people&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;sort_by { &lt;span style=&quot;color:#f92672&quot;&gt;|&lt;/span&gt;person&lt;span style=&quot;color:#f92672&quot;&gt;|&lt;/span&gt;
  &lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt;
    &lt;span style=&quot;color:#66d9ef&quot;&gt;Put&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;desc(person&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;age, &lt;span style=&quot;color:#e6db74&quot;&gt;nils_first&lt;/span&gt;: &lt;span style=&quot;color:#66d9ef&quot;&gt;true&lt;/span&gt;),
    &lt;span style=&quot;color:#66d9ef&quot;&gt;Put&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;asc(person&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;name)
  &lt;span style=&quot;color:#f92672&quot;&gt;]&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is a new pattern to a lot of programmers, so I &lt;a href=&quot;https://youtu.be/nUk-IG_-5R0&quot;&gt;recorded this
screencast&lt;/a&gt; building a non-trivial &lt;code&gt;sort_by&lt;/code&gt; block
in pure Ruby, then translating the same conditions to the new &lt;code&gt;Put&lt;/code&gt; API. I hope
you&amp;rsquo;ll check it out! You can find the video&amp;rsquo;s &lt;a href=&quot;https://github.com/testdouble/put_example&quot;&gt;example
code&lt;/a&gt; here.&lt;/p&gt;
&lt;p&gt;If you enjoy the video, we&amp;rsquo;d love if you &lt;a href=&quot;https://www.youtube.com/c/TestDouble&quot;&gt;subscribed to our fledgling YouTube
channel&lt;/a&gt; and our &lt;a href=&quot;https://testdouble.com/newsletter&quot;&gt;e-mail
newsletter&lt;/a&gt; to stay in touch with what I and
my fellow Double Agents are working on! üïµÔ∏è&lt;/p&gt;
&lt;dl class=&quot;transcript transcript--inverted&quot; data-video-player-transcript&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;00:00&quot;&gt;00:00&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;(upbeat electronic chimes)&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;00:03&quot;&gt;00:03&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;- Hello, I'm here to talk about my new gem, Put.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;00:07&quot;&gt;00:07&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Now Put helps you sort objects in memory using Ruby&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;00:10&quot;&gt;00:10&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and it does so following a particular pattern that you may&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;00:12&quot;&gt;00:12&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;or may not be familiar with&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;00:14&quot;&gt;00:14&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;using a numerable dot sort by and returning an array.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;00:17&quot;&gt;00:17&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So because that pattern isn't super well known,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;00:20&quot;&gt;00:20&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;I figured it would make sense to first show an example&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;00:22&quot;&gt;00:22&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;in pure Ruby and then show off why the Put gem&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;00:25&quot;&gt;00:25&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;can help make your code a little bit cleaner&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;00:27&quot;&gt;00:27&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;a little bit safer, and definitely more expressive&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;00:30&quot;&gt;00:30&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;in terms of what you're intending when you're sorting&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;00:32&quot;&gt;00:32&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;by multiple criteria.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;00:34&quot;&gt;00:34&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Now, for want of an example,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;00:36&quot;&gt;00:36&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;I was thinking about how a lot of folks are having to return&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;00:38&quot;&gt;00:38&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;to the office soon,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;00:39&quot;&gt;00:39&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;not at Test Double, 'cause we're remote first&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;00:41&quot;&gt;00:41&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;but I'm kind of ginning up some empathy to imagine&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;00:44&quot;&gt;00:44&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;that I would not be looking forward&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;00:45&quot;&gt;00:45&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;to returning to break rooms and the particular&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;00:48&quot;&gt;00:48&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;smells that happen when people microwave fish.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;00:52&quot;&gt;00:52&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So, as a programmer,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;00:54&quot;&gt;00:54&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;I'm like a lot of programmers&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;00:55&quot;&gt;00:55&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;whenever I've got a social problem&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;00:57&quot;&gt;00:57&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and I should have a hard conversation with somebody.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;00:59&quot;&gt;00:59&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;I'd much rather try to solve that&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;01:00&quot;&gt;01:00&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;with software and technology and you know.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;01:03&quot;&gt;01:03&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So instead of actually asking someone&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;01:05&quot;&gt;01:05&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;not to microwave their fish,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;01:06&quot;&gt;01:06&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;maybe I'd write a program that would build a duty roster&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;01:09&quot;&gt;01:09&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;for everyone taking turns cleaning the break room.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;01:11&quot;&gt;01:11&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So we're gonna implement break room sort today.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;01:15&quot;&gt;01:15&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And what it is,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;01:16&quot;&gt;01:16&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;is going to prioritize all of the employees&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;01:18&quot;&gt;01:18&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;in terms of when they should be next responsible&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;01:21&quot;&gt;01:21&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;for cleaning up the break room.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;01:22&quot;&gt;01:22&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;First of all, you know&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;01:24&quot;&gt;01:24&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;we're gonna sort all the current employees&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;01:25&quot;&gt;01:25&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;to the top and then anyone with mobility impairments&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;01:29&quot;&gt;01:29&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;or an accommodation last.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;01:32&quot;&gt;01:32&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Next, anyone who's cleaned the break room&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;01:35&quot;&gt;01:35&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;least recently should be their turn next.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;01:38&quot;&gt;01:38&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Or if they've never cleaned it.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;01:39&quot;&gt;01:39&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Whoever's microwave fish most recently&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;01:41&quot;&gt;01:41&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;should be the tiebreaker after that&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;01:44&quot;&gt;01:44&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;because they're the problem.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;01:46&quot;&gt;01:46&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And next, if that's still a tie,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;01:49&quot;&gt;01:49&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;if all those conditions are met,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;01:51&quot;&gt;01:51&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;then we should have the more senior people&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;01:53&quot;&gt;01:53&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;in the organization be responsible for cleaning.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;01:56&quot;&gt;01:56&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Servant leadership and all that.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;01:57&quot;&gt;01:57&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So CEO cleans the before staff&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:00&quot;&gt;02:00&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and then the last tiebreaker is whoever's located closest&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:03&quot;&gt;02:03&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;to the break room using latitude and longitude.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:06&quot;&gt;02:06&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And so that's our exercise today.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:11&quot;&gt;02:11&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So let's go ahead and get started.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:13&quot;&gt;02:13&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;We're gonna open up vs code.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:14&quot;&gt;02:14&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;I've already done some of the work here&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:16&quot;&gt;02:16&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;to just sort of like flesh things out.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:18&quot;&gt;02:18&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So we've got users, we've got a break room,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:21&quot;&gt;02:21&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;we've got a even a stub method&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:22&quot;&gt;02:22&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;for sorts break room duty roster&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:27&quot;&gt;02:27&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and a sort method.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:28&quot;&gt;02:28&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;You can see that these default (indistinct) here are just&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:30&quot;&gt;02:30&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;gonna generate a break room example and user examples.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:33&quot;&gt;02:33&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So break room has a name, latitude, longitude&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:36&quot;&gt;02:36&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;whether it's clean or not.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:37&quot;&gt;02:37&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And these are just using the faker gem to make up fake ones.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:40&quot;&gt;02:40&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;I'll share all this code later.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:42&quot;&gt;02:42&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And a user has name, active, the accommodations&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:44&quot;&gt;02:44&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;that they have.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:45&quot;&gt;02:45&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Last clean break room, last microwaved fish,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:47&quot;&gt;02:47&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;level, lat, longitude and so forth.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:50&quot;&gt;02:50&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;All right, so one way we could do this is,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:53&quot;&gt;02:53&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and one of my favorite ways to do it.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:55&quot;&gt;02:55&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;It's not the fastest way on the planet,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:56&quot;&gt;02:56&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;but we're already in memory with Ruby.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:58&quot;&gt;02:58&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So presumably we couldn't sort this in a database.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:59&quot;&gt;02:59&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;If you could just do this&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:00&quot;&gt;03:00&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;with an order by of course that would be faster.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:02&quot;&gt;03:02&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;But in this case,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:03&quot;&gt;03:03&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;we've got some custom criteria that we wanna search.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:05&quot;&gt;03:05&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Maybe we don't have a whole lot of employees&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:07&quot;&gt;03:07&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;so it's safe to just pull all the users in&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:09&quot;&gt;03:09&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and sort in memory with Ruby.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:11&quot;&gt;03:11&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And so we're gonna do that using enumerable dot sort by.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:14&quot;&gt;03:14&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Sort by and user.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:18&quot;&gt;03:18&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So we take all the users, we get a user&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:21&quot;&gt;03:21&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and then we can sort by any one condition.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:22&quot;&gt;03:22&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So we could just say,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:23&quot;&gt;03:23&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;user.active and now that would be true and false.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:28&quot;&gt;03:28&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So we run this file here&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:31&quot;&gt;03:31&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;which is gonna call sorts break room duty roster.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:36&quot;&gt;03:36&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And it calls sort and then describes the first 10 items.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:40&quot;&gt;03:40&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;However, it didn't do that&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:41&quot;&gt;03:41&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;because it tried to compare true and false.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:44&quot;&gt;03:44&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So those are not comparable.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:45&quot;&gt;03:45&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;That means that like a lot of the work here&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:47&quot;&gt;03:47&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;is gonna gonna be taking non-comparable things&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:50&quot;&gt;03:50&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;like two Boolean values&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:52&quot;&gt;03:52&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and making them comparable like numbers.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:54&quot;&gt;03:54&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So if they're active then we'll say zero.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:57&quot;&gt;03:57&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And if they're not active, we'll say one.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:59&quot;&gt;03:59&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So that the active stuff is lower value and goes above,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;04:03&quot;&gt;04:03&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;goes first before stuff with a higher value of one.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;04:06&quot;&gt;04:06&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So that means the active stuff will be sorted at the top&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;04:09&quot;&gt;04:09&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and we should be able to see, okay, cool, active stuff.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;04:11&quot;&gt;04:11&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Now one of the cool facts of how sorting works&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;04:13&quot;&gt;04:13&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;in Ruby is that arrays are sorted one element at a time.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;04:16&quot;&gt;04:16&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So that means that we can actually have multiple conditions.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;04:20&quot;&gt;04:20&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;We could say first show me all the active users on top&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;04:24&quot;&gt;04:24&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and then we were talking about mobility accommodations.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;04:27&quot;&gt;04:27&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;We could say, user.accommodations&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;04:33&quot;&gt;04:33&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;I'm not good at spelling this.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;04:35&quot;&gt;04:35&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;I wish auto complete saved me.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;04:37&quot;&gt;04:37&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Include mobility.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;04:40&quot;&gt;04:40&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Same sort of trick here we have to use (indistinct)&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;04:43&quot;&gt;04:43&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;to convert this into something that's comparable.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;04:45&quot;&gt;04:45&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;We're gonna do the opposite&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;04:46&quot;&gt;04:46&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;'cause we want this to be descending.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;04:47&quot;&gt;04:47&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So if you have such an accommodation&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;04:50&quot;&gt;04:50&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;we're gonna say one.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;04:53&quot;&gt;04:53&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And if not, then we're gonna say zero.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;04:55&quot;&gt;04:55&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So that means that the folks&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;04:58&quot;&gt;04:58&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;with the mobility impairment would not be asked to go&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:00&quot;&gt;05:00&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and clean the break room&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:01&quot;&gt;05:01&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and folks that do,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:02&quot;&gt;05:02&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;they'd do not.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:06&quot;&gt;05:06&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;They'd sort top.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:07&quot;&gt;05:07&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So it's basically just like fling all this stuff&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:09&quot;&gt;05:09&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;to the top and all these people to the bottom&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:10&quot;&gt;05:10&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;of this list as as the first couple criteria&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:14&quot;&gt;05:14&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;while we get to our other sorting criteria.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:17&quot;&gt;05:17&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;All right?&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:18&quot;&gt;05:18&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So we could run that here&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:19&quot;&gt;05:19&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and we should be able to scan the list&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:22&quot;&gt;05:22&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and not see any mobility accommodations they might have&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:25&quot;&gt;05:25&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;like another one there.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:30&quot;&gt;05:30&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;At any given time we can kind of just look&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:31&quot;&gt;05:31&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;at like which tiebreaker are we looking at?&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:33&quot;&gt;05:33&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;By commenting out the ones above us.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:36&quot;&gt;05:36&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And yeah it looks good.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:38&quot;&gt;05:38&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;We're not sorting the opposite way.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:40&quot;&gt;05:40&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;All right, the next case&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:42&quot;&gt;05:42&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;that we have now this is time based&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:44&quot;&gt;05:44&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;is when did they clean the break room?&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:48&quot;&gt;05:48&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Last cleaned break room app.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:51&quot;&gt;05:51&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;It's hard to type and talk at the same time.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:54&quot;&gt;05:54&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Here we can just sort by the date, right?&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:57&quot;&gt;05:57&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Except we can't do that because we have some nil cases.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;06:02&quot;&gt;06:02&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And again, nil is not comparable&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;06:04&quot;&gt;06:04&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;with much of anything by default.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;06:05&quot;&gt;06:05&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And so comparison of array with array failed&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;06:08&quot;&gt;06:08&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;this is all served by gives you if any...&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;06:11&quot;&gt;06:11&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;There's a thousand arrays of arrays in here.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;06:13&quot;&gt;06:13&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;If any single one of them failed&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;06:14&quot;&gt;06:14&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;all you get is argument error.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;06:15&quot;&gt;06:15&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;It doesn't tell you anything.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;06:17&quot;&gt;06:17&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So when you get into the Put gem,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;06:19&quot;&gt;06:19&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;there's a Put.description or Put.debug,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;06:23&quot;&gt;06:23&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;sorry method.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;06:24&quot;&gt;06:24&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And you can pass it this array of array&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;06:26&quot;&gt;06:26&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and it'll try to give you some sense&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;06:27&quot;&gt;06:27&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;of where our comparison is breaking down.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;06:29&quot;&gt;06:29&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;But failing that,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;06:30&quot;&gt;06:30&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;all we gotta do is we gotta know nils are not okay.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;06:33&quot;&gt;06:33&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So we can say &quot;Hey, if it's nil, maybe&quot;&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;06:38&quot;&gt;06:38&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Oh yeah double.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;06:39&quot;&gt;06:39&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Turners are so tricky when you have a predicate method.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;06:42&quot;&gt;06:42&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;We could say time parse&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;06:44&quot;&gt;06:44&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;give it a long, long ago value like 1999.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;06:48&quot;&gt;06:48&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Okay?&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;06:49&quot;&gt;06:49&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Otherwise we will give you&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;06:51&quot;&gt;06:51&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;the user last cleaned break room at value.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;06:55&quot;&gt;06:55&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So that should give us probably a bunch&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;06:57&quot;&gt;06:57&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;of people with nil cleaned break room mats.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;07:00&quot;&gt;07:00&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Yeah, at the very top the nil ones.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;07:03&quot;&gt;07:03&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;There's only a couple and then,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;07:06&quot;&gt;07:06&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;oh yeah, there's like seven or eight.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;07:08&quot;&gt;07:08&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Then yeah, these ones are not very recent.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;07:10&quot;&gt;07:10&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;They're 2021.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;07:11&quot;&gt;07:11&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;I think we're only generating dates out a year in a arrears.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;07:15&quot;&gt;07:15&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So that's cool.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;07:16&quot;&gt;07:16&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And then the next date was user last microwaved fish at.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;07:24&quot;&gt;07:24&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Now we can't just do this&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;07:26&quot;&gt;07:26&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;because if it was just the date,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;07:29&quot;&gt;07:29&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;it would be ascending.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;07:30&quot;&gt;07:30&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And so if it's ascending.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;07:32&quot;&gt;07:32&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;it's gonna actually be the most recent&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;07:35&quot;&gt;07:35&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;fish microwavings would go to the bottom of the list.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;07:39&quot;&gt;07:39&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Additionally, we're gonna have some nils in there&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;07:41&quot;&gt;07:41&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;'cause some people will have never microwaved fish.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;07:43&quot;&gt;07:43&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And so here we could say,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;07:44&quot;&gt;07:44&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;&quot;All right, first of all if it's nil,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;07:49&quot;&gt;07:49&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;so would we put a time in the future?&quot;&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;07:51&quot;&gt;07:51&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;No, we wouldn't do that 'cause like we wanna get&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;07:53&quot;&gt;07:53&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;to something that's like going to ascend in the right order.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;07:56&quot;&gt;07:56&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And one way to do that would be to like&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;07:58&quot;&gt;07:58&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;think of the duration,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;07:59&quot;&gt;07:59&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;like how long has it been since the last microwave fish?&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:01&quot;&gt;08:01&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So we could do that by...&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:04&quot;&gt;08:04&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Just to illustrate time.now minus when you did this.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:09&quot;&gt;08:09&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Now that would be a duration.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:13&quot;&gt;08:13&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;If I run this though, I'm still gonna have nil.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:14&quot;&gt;08:14&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So it's gonna be, I can't convert that.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:16&quot;&gt;08:16&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So instead of a turner,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:18&quot;&gt;08:18&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;another thing I might do is like a short circuit&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:20&quot;&gt;08:20&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;or a statement.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:21&quot;&gt;08:21&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;I could just say time.now.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:25&quot;&gt;08:25&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Of course if I say zero,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:27&quot;&gt;08:27&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;that'll make it very, very low&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:29&quot;&gt;08:29&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;which I'll sort it higher.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:31&quot;&gt;08:31&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Oh goodness.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:32&quot;&gt;08:32&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;If I say zero, that'll make it high.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:34&quot;&gt;08:34&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Yes.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:35&quot;&gt;08:35&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So that's what I want I wanna say so.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:40&quot;&gt;08:40&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;To isolate to just this condition&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:41&quot;&gt;08:41&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;we can comment on this stuff and then take a look.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:44&quot;&gt;08:44&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So we're gonna run again.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:47&quot;&gt;08:47&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Array with array failed again.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:48&quot;&gt;08:48&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Oh no, what'd I do?&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:52&quot;&gt;08:52&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;What did I do?&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:54&quot;&gt;08:54&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Oh.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:59&quot;&gt;08:59&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;We're gonna just parse a very old date again&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;09:01&quot;&gt;09:01&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;1900-01-01.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;09:06&quot;&gt;09:06&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Somebody's probably screaming at their screen.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;09:08&quot;&gt;09:08&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;All right, last clean breaker, not last microwave.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;09:11&quot;&gt;09:11&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So, so, so, so good.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;09:12&quot;&gt;09:12&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;No nils.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;09:13&quot;&gt;09:13&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Just very recent microwave incidents.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;09:17&quot;&gt;09:17&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So that's one way we could do that one.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;09:20&quot;&gt;09:20&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;All right, so comment.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;09:22&quot;&gt;09:22&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Uncomment these ones.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;09:24&quot;&gt;09:24&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;All right, next up we have these levels&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;09:25&quot;&gt;09:25&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and if you looked at how this is generated,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;09:29&quot;&gt;09:29&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;you'd see randomly, your staff manager,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;09:32&quot;&gt;09:32&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;director, VPC suite.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;09:33&quot;&gt;09:33&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;These are symbols and they're not gonna&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;09:36&quot;&gt;09:36&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;naturally be sortable.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;09:38&quot;&gt;09:38&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So we can do that ourselves.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;09:39&quot;&gt;09:39&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;We could make a hash of numeric values,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;09:41&quot;&gt;09:41&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;or we could do like a case statement.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;09:44&quot;&gt;09:44&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So user.level, when,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;09:49&quot;&gt;09:49&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;staff then one when manager,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;09:55&quot;&gt;09:55&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;then two win director,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;09:58&quot;&gt;09:58&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;then three when vp,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;10:01&quot;&gt;10:01&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;then four.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;10:02&quot;&gt;10:02&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And finally when you're in the c_suite,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;10:04&quot;&gt;10:04&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;you're the highest ranking.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;10:06&quot;&gt;10:06&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So you're then five and then end of course.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;10:10&quot;&gt;10:10&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Okay, so if I run this,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;10:11&quot;&gt;10:11&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;it won't work 'cause I forgot a comma.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;10:15&quot;&gt;10:15&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Comma okay, try that again.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;10:19&quot;&gt;10:19&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;All right, so that did a thing.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;10:21&quot;&gt;10:21&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;But let's check that the sort actually worked first.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;10:27&quot;&gt;10:27&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;By isolating to just that case&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;10:30&quot;&gt;10:30&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and no it didn't.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;10:33&quot;&gt;10:33&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;It's showing staff on top.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;10:34&quot;&gt;10:34&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And that's because one comes before five.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;10:36&quot;&gt;10:36&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So a trick that we can do is we can say negative one times&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;10:39&quot;&gt;10:39&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and then the negative five will come up first.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;10:43&quot;&gt;10:43&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And cool these are all now in the c_suite.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;10:45&quot;&gt;10:45&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So that condition works.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;10:46&quot;&gt;10:46&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;The final condition we had was about distance.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;10:50&quot;&gt;10:50&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So I already wrote a little plain ole Ruby object&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;10:52&quot;&gt;10:52&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;called GetsDistance using the geo kit gem.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;10:56&quot;&gt;10:56&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So GetsDistance.new.get user.lat, user.long.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:02&quot;&gt;11:02&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And then the break room has a latitude&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:04&quot;&gt;11:04&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and a longitude as well.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:07&quot;&gt;11:07&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And that'll give me a value.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:09&quot;&gt;11:09&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;I'm gonna again just focus on isolating one thing at a time.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:13&quot;&gt;11:13&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;If I ran this, it'll blow up.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:16&quot;&gt;11:16&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Because additionally,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:18&quot;&gt;11:18&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;some users may not have a location there.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:20&quot;&gt;11:20&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So if there's any nils,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:21&quot;&gt;11:21&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;we're gonna get a nil.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:22&quot;&gt;11:22&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And then nils aren't comparable.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:23&quot;&gt;11:23&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And you're now very familiar&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:25&quot;&gt;11:25&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and expert at this sort by pattern.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:26&quot;&gt;11:26&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;All right, so we're gonna just do a quick breakover&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:29&quot;&gt;11:29&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and say minimally distant is what?&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:36&quot;&gt;11:36&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So we want a very high number&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:37&quot;&gt;11:37&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;to push you to the bottom of the list.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:39&quot;&gt;11:39&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And high number would be like float infinity.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:41&quot;&gt;11:41&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;There we go.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:45&quot;&gt;11:45&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Cool.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:46&quot;&gt;11:46&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And so if we look at these lat and longs&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:48&quot;&gt;11:48&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;you can see that they're kind of close together.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:49&quot;&gt;11:49&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;I don't know where the break room is&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:51&quot;&gt;11:51&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;but one presumes, it's near that.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:53&quot;&gt;11:53&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;All right, so those are all our conditions.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:56&quot;&gt;11:56&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Let's uncomment them all and run it.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:58&quot;&gt;11:58&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Again, we don't have any tests&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;12:00&quot;&gt;12:00&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and all this data constantly keeps changing&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;12:02&quot;&gt;12:02&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;but it seems pretty right.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;12:04&quot;&gt;12:04&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Okay, so yeah, people who've never cleaned before&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;12:07&quot;&gt;12:07&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;but are active,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;12:08&quot;&gt;12:08&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;those are gonna float to the top.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;12:09&quot;&gt;12:09&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;All right, so let's start talking about the Put gem.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;12:14&quot;&gt;12:14&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So first we're going to,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;12:16&quot;&gt;12:16&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;let's see, take a look at our&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;12:19&quot;&gt;12:19&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;readme so it's testdouble/Put.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;12:21&quot;&gt;12:21&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Gem install Put.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;12:22&quot;&gt;12:22&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;You put Put in your gem pile.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;12:25&quot;&gt;12:25&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;It's three character names.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;12:26&quot;&gt;12:26&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So I got excited.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;12:27&quot;&gt;12:27&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;But like the API is pretty straightforward.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;12:29&quot;&gt;12:29&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;You have like Put first, Put last, Put ascending&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;12:32&quot;&gt;12:32&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;but it's not like a top level api.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;12:33&quot;&gt;12:33&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;It's meant to pair with sort by.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;12:34&quot;&gt;12:34&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And that's why I think an example is gonna be&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;12:36&quot;&gt;12:36&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;the best way to show everyone.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;12:37&quot;&gt;12:37&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;All right, so let's add Put to our gem file Put&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;12:41&quot;&gt;12:41&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and then we're going to bundle.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;12:45&quot;&gt;12:45&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Bundle up.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;12:46&quot;&gt;12:46&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Great require Put.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;12:49&quot;&gt;12:49&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Cool, let's just do one thing at a time.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;12:53&quot;&gt;12:53&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So first of all, we know that active users we wanna put&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;12:56&quot;&gt;12:56&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;at the front or the top or first.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;12:59&quot;&gt;12:59&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So we're gonna say put first if user.active&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;13:03&quot;&gt;13:03&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;that's all we're gonna say.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;13:04&quot;&gt;13:04&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Remove that.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;13:05&quot;&gt;13:05&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Now because that's an in line if statement.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;13:09&quot;&gt;13:09&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;We need to wrap it in parenthesis&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;13:11&quot;&gt;13:11&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;so the parser knows what to do with us.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;13:13&quot;&gt;13:13&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;We've run that.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;13:14&quot;&gt;13:14&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Good, everyone's active.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;13:16&quot;&gt;13:16&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So that one's right.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;13:18&quot;&gt;13:18&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Now, we actually wanna Put last&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;13:20&quot;&gt;13:20&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;if you have a mobility accommodation.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;13:22&quot;&gt;13:22&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So we're gonna say Put last&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;13:24&quot;&gt;13:24&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;if user.accommodations.mobility.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;13:30&quot;&gt;13:30&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Okay.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;13:32&quot;&gt;13:32&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And we can see real quick.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;13:39&quot;&gt;13:39&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Didn't see any mobility.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;13:40&quot;&gt;13:40&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So that's sorted in the right order I think.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;13:43&quot;&gt;13:43&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Next up the break room thing.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;13:45&quot;&gt;13:45&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Now what's nice about Put,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;13:47&quot;&gt;13:47&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;is it's nil safe by default.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;13:49&quot;&gt;13:49&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So we don't have to worry about all these nil cases.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;13:51&quot;&gt;13:51&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;We can actually just say&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;13:52&quot;&gt;13:52&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;&quot;Put ascending user.last cleaned break room at&quot;.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;13:57&quot;&gt;13:57&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And that would be all we need to do except&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;13:58&quot;&gt;13:58&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;for the fact that if you've never cleaned the break room&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;14:00&quot;&gt;14:00&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;before we actually want you,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;14:01&quot;&gt;14:01&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;it'll be nil and we want you to be at the top of the list.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;14:04&quot;&gt;14:04&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;By default, nils will go to the bottom of the list&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;14:06&quot;&gt;14:06&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;'cause usually they just don't matter.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;14:07&quot;&gt;14:07&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;But this is the opposite case.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;14:08&quot;&gt;14:08&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So we can say nils first true&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;14:10&quot;&gt;14:10&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;with this optional keyword argument.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;14:12&quot;&gt;14:12&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;All right, so let's whack that.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;14:15&quot;&gt;14:15&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Take a look, see if this seems to work.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;14:19&quot;&gt;14:19&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Yeah, so you can see these relatively distant cleanings&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;14:22&quot;&gt;14:22&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;followed by nil.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;14:23&quot;&gt;14:23&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So all but seven people had cleaned at some point&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;14:27&quot;&gt;14:27&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and then it's back to like 2021, September.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;14:30&quot;&gt;14:30&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Okay, this next case here,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;14:32&quot;&gt;14:32&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;we had broken down and kind of computed a duration&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;14:35&quot;&gt;14:35&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;to get it into a descending order.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;14:36&quot;&gt;14:36&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;But we don't have to do that&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;14:37&quot;&gt;14:37&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;because Put actually will have a descending method&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;14:40&quot;&gt;14:40&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and what it does is it's the same as ascending&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;14:43&quot;&gt;14:43&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;except it'll just like negative-fy the result&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;14:46&quot;&gt;14:46&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;of the comparison operator of A to B.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;14:49&quot;&gt;14:49&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And so it'll just know that if it's given a time,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;14:54&quot;&gt;14:54&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;that the newest time should go on top.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;14:58&quot;&gt;14:58&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So we can say last microwaved fish at,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:02&quot;&gt;15:02&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and here we want the nils to go on the bottom&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:04&quot;&gt;15:04&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;'cause people who've never microwave fish&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:06&quot;&gt;15:06&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;shouldn't be more responsible for cleaning the break room.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:09&quot;&gt;15:09&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And so we can just say put descending last microwaved fish&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:12&quot;&gt;15:12&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and that should work.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:14&quot;&gt;15:14&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And we're gonna check it.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:16&quot;&gt;15:16&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;By just commenting everything out that we got so far.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:20&quot;&gt;15:20&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Run that.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:21&quot;&gt;15:21&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And you can see we've got some very recent&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:24&quot;&gt;15:24&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;fish microwaving incidents in just a few days ago&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:27&quot;&gt;15:27&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;in September, 2022.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:29&quot;&gt;15:29&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;All right, now we got this case statement&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:33&quot;&gt;15:33&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;of ranks or levels inside the organization,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:36&quot;&gt;15:36&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;numerified and then multiplied by negative one.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:39&quot;&gt;15:39&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So here we want to have you go descending by rank.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:45&quot;&gt;15:45&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So Put descending and then we can actually have&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:49&quot;&gt;15:49&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;the same case statement.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:50&quot;&gt;15:50&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;We just get rid of that negative one.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:55&quot;&gt;15:55&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Now it's a little bit weird&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:56&quot;&gt;15:56&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;looking at a case statement like this,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:57&quot;&gt;15:57&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;it probably makes sense to extract it&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:58&quot;&gt;15:58&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;or add a method to user,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:01&quot;&gt;16:01&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;but I think that's fine for now.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:03&quot;&gt;16:03&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And we can just...&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:04&quot;&gt;16:04&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Again, can't hurt to double check,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:06&quot;&gt;16:06&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;run&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:09&quot;&gt;16:09&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;this and see.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:11&quot;&gt;16:11&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;yeah, level c_suite.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:13&quot;&gt;16:13&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;All right.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:14&quot;&gt;16:14&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Okay, commenting out this one.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:16&quot;&gt;16:16&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So we can take a look at the distance.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:17&quot;&gt;16:17&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;This should be really easy.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:18&quot;&gt;16:18&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;We just get rid of the nil check&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:20&quot;&gt;16:20&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;because it handles nils for us.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:24&quot;&gt;16:24&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;All right, so that's an example of...&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:28&quot;&gt;16:28&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Maybe you could have done almost all of this&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:30&quot;&gt;16:30&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;in a database order by statement&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:32&quot;&gt;16:32&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;but then this last one would've been difficult&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:33&quot;&gt;16:33&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;with translating levels to numbers.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:37&quot;&gt;16:37&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And then this last one might have been very, very difficult&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:39&quot;&gt;16:39&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;unless you have like a post GIS or something&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:42&quot;&gt;16:42&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;in your database to compare the distance between two points.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:45&quot;&gt;16:45&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And so we had to do this in Ruby,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:48&quot;&gt;16:48&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;for example, just to get this distance comparison.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:50&quot;&gt;16:50&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And here we are.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:51&quot;&gt;16:51&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;You can see it still seems to work.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:53&quot;&gt;16:53&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;All right, so uncommenting this&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:57&quot;&gt;16:57&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and just sort of taking it all in,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:58&quot;&gt;16:58&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and hiding our terminal.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;17:00&quot;&gt;17:00&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;You can sort of see like it's way clearer.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;17:02&quot;&gt;17:02&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;It's still not beautiful code&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;17:04&quot;&gt;17:04&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;but if you've seen sort by done before&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;17:05&quot;&gt;17:05&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;you can kind of see,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;17:06&quot;&gt;17:06&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;&quot;Okay, so top top of the list if they're active,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;17:09&quot;&gt;17:09&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;last if they've got a mobility impairment,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;17:11&quot;&gt;17:11&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;ascending order for who's cleaned the break room&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;17:16&quot;&gt;17:16&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;least recently, and if they've never,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;17:18&quot;&gt;17:18&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;go the to the top and so on and so forth.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;17:21&quot;&gt;17:21&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And so that's roughly how you might use Put&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;17:26&quot;&gt;17:26&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;to sort a list of stuff based on complex&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;17:29&quot;&gt;17:29&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;or numerous criteria.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;17:33&quot;&gt;17:33&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And so yeah it's a fun little gem.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;17:35&quot;&gt;17:35&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;That's all it does.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;17:36&quot;&gt;17:36&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;It just makes sort by blocks like this a little bit clearer&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;17:40&quot;&gt;17:40&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;but I hope that you'll think of it next time&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;17:41&quot;&gt;17:41&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;that you gotta sort stuff in Ruby&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;17:43&quot;&gt;17:43&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and you got a lot of conditions&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;17:45&quot;&gt;17:45&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and you don't want to create a whole bunch reams&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;17:47&quot;&gt;17:47&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and reams of objects to do a lot of complex logic.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;17:50&quot;&gt;17:50&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Sort by can do the heavy lifting for you.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;17:52&quot;&gt;17:52&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So I hope you find this useful&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;17:54&quot;&gt;17:54&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and if you have any comments, feedback, or questions,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;17:57&quot;&gt;17:57&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;feel free to tweet at me, email me or leave a comment.&lt;/dd&gt;&lt;/dl&gt;
</description>
    </item>
    
    <item>
      <title>Double Agent Profile: Eve Ragins</title>
      <link>https://blog.testdouble.com/posts/2022-09-26-agent-profile-eve-ragins/</link>
      <pubDate>Mon, 26 Sep 2022 00:00:00 +0000</pubDate>
      
      
      <author>hello+rss@testdouble.com (Eve Ragins)</author>
      <guid>https://blog.testdouble.com/posts/2022-09-26-agent-profile-eve-ragins/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Name:&lt;/strong&gt; Eve Ragins&lt;br&gt;
&lt;strong&gt;Designation:&lt;/strong&gt; Agent 00138&lt;br&gt;
&lt;strong&gt;Double Agent Role:&lt;/strong&gt; Senior Software Consultant&lt;br&gt;
&lt;strong&gt;Special Skills:&lt;/strong&gt; Finding gaps. Filling gaps. Distilling complexity. Solving the hard problems.&lt;br&gt;
&lt;strong&gt;Aliases:&lt;/strong&gt; &lt;a href=&quot;https://github.com/emragins&quot;&gt;GitHub&lt;/a&gt;, &lt;a href=&quot;https://www.linkedin.com/in/emragins&quot;&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Location:&lt;/strong&gt; Soon-to-be Nomad&lt;br&gt;
&lt;strong&gt;Favorite Emoji:&lt;/strong&gt; ü§î&lt;/p&gt;



&lt;h3 id=&quot;what-impact-are-you-proudest-of-in-your-career&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#what-impact-are-you-proudest-of-in-your-career&quot;&gt;What impact are you proudest of in your career?&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;ve built at least a couple core backend systems that ‚Äî to the best of my knowledge ‚Äî still serve as the backbones for mission-critical systems today. The two that come to mind are one for the WA Employment Security Department which is like glue for making batch jobs, and the other is some code which let us build modern apps on top of a mainframe. Impactfully, I&amp;rsquo;m proud of these because those systems have enabled scores of other developers to be manyfold more productive and focus on business functionality.&lt;/p&gt;
&lt;p&gt;And it feels good to have designed something which lasted. I know for the batch processing system, many people have tried to offer more &amp;ldquo;off-the-shelf&amp;rdquo; alternatives (like service buses), but none of those solutions have the same combination of functionality that make it easy for both developers and production support to do their jobs.&lt;/p&gt;



&lt;h3 id=&quot;looking-ahead-what-has-you-most-excited-for-the-next-year-at-work&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#looking-ahead-what-has-you-most-excited-for-the-next-year-at-work&quot;&gt;Looking ahead, what has you most excited for the next year at work?&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;ve spent most of my career as an individual contributor, and with Test Double&amp;rsquo;s focus on growth, I&amp;rsquo;m looking forward to growing into growing others. And it&amp;rsquo;s also kind of scary, like, who am I to advise somebody else?&lt;/p&gt;



&lt;h3 id=&quot;what-is-your-favorite-thing-about-being-a-double-agent-at-test-double&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#what-is-your-favorite-thing-about-being-a-double-agent-at-test-double&quot;&gt;What is your favorite thing about being a Double Agent at Test Double?&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;The culture here is amazing. I&amp;rsquo;ve seen many times before where there&amp;rsquo;s the stated culture and the lived culture and how they don&amp;rsquo;t align. At Test Double, they align. Leadership in particular has been very intentional about not just saying &amp;ldquo;here&amp;rsquo;s our culture,&amp;rdquo; but living it AND having systems and processes in place which affirm and reinforce the culture.&lt;/p&gt;



&lt;h3 id=&quot;what-do-you-think-makes-test-double-unique&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#what-do-you-think-makes-test-double-unique&quot;&gt;What do you think makes Test Double unique?&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;Going back to the above, the culture. And their mission is very clear. And as with culture, there are systems and processes in place which affirm and reinforce the mission. And (again with systems and processes in place), they hire based on alignment to the above in addition to technical skills. It&amp;rsquo;s easy for one negative person to act as gravity well and bring down everybody else. But Test Double&amp;rsquo;s managed to achieve the opposite: they seem to have achieved a critical mass towards positivity.&lt;/p&gt;



&lt;h3 id=&quot;what-have-you-been-thinking-about-a-lot-lately-in-software-development-and-why&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#what-have-you-been-thinking-about-a-lot-lately-in-software-development-and-why&quot;&gt;What have you been thinking about a lot lately in software development, and why?&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;The way it permeates our lives. The way that the &amp;ldquo;minimum&amp;rdquo; is now &lt;em&gt;so big&lt;/em&gt;. We (collectively) keep iterating on how to make creating software more efficient: new languages and tooling, &amp;ldquo;no code&amp;rdquo; solutions, and now AI-assisted development. And there&amp;rsquo;s been a shift, though I don&amp;rsquo;t think we&amp;rsquo;re fully there yet, where instead of providing a suite of preferences and pre-defined functionality, we&amp;rsquo;re going to introduce more and more &amp;ldquo;programmable&amp;rdquo; solutions. Game mods are a great example of this, but it&amp;rsquo;s extending to household appliances and I don&amp;rsquo;t even know what else. I&amp;rsquo;m actually kind of a Luddite.&lt;/p&gt;
&lt;p&gt;Why? Not sure, but I suppose the way that it impacts society, how we relate to each other, and how we collectively approach the world.&lt;/p&gt;



&lt;h3 id=&quot;tell-me-about-something-memorable-that-happened-to-you-and-what-you-learned-from-it&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#tell-me-about-something-memorable-that-happened-to-you-and-what-you-learned-from-it&quot;&gt;Tell me about something memorable that happened to you and what you learned from it.&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;That&amp;rsquo;s a tough one. And I&amp;rsquo;m guessing you don&amp;rsquo;t mean mistaking a curb for a driveway in the dark. (Nothing bad happened, but I sure freaked out the cars coming the other direction. And myself.)&lt;/p&gt;
&lt;p&gt;More seriously, the things that come to mind are a bit &lt;em&gt;too much&lt;/em&gt; for this. So, as a happy medium, as I&amp;rsquo;ve been trying to clear out house to be a nomad, it became obvious that some things I was holding on to as &amp;ldquo;it could be useful some day&amp;rdquo; were literally just trash. I should throw trash away sooner, though I really don&amp;rsquo;t like throwing things away. I was pretty into Captain Planet as a kid and Earth Day was near the top of my favorite holidays list.&lt;/p&gt;



&lt;h3 id=&quot;what-has-you-most-excited-about-this-year-outside-of-work&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#what-has-you-most-excited-about-this-year-outside-of-work&quot;&gt;What has you most excited about this year outside of work?&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;m going to try to be a nomad! It&amp;rsquo;s been wanting to do something like this for years. Right before the pandemic hit I&amp;rsquo;d just landed a 100% remote gig; but our team had to go through cancelling tickets and hotels for an in-person meet-and-greet. What a time. But I&amp;rsquo;ve finally gotten around to taking real actual steps and building momentum. Fingers crossed, in a couple weeks I&amp;rsquo;ll be home-less. Though unfortunately due to timing with other things, I don&amp;rsquo;t think I&amp;rsquo;ll be able to really embrace a nomadic life until next year.&lt;/p&gt;



&lt;h3 id=&quot;what-bookpodcastmovietv-show-have-you-been-thinking-about-a-lot-lately-and-why&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#what-bookpodcastmovietv-show-have-you-been-thinking-about-a-lot-lately-and-why&quot;&gt;What book/podcast/movie/TV show have you been thinking about a lot lately, and why?&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;m currently reading &lt;a href=&quot;https://us.macmillan.com/books/9781250186430/amemorycalledempire&quot;&gt;&lt;em&gt;A Memory Called Empire&lt;/em&gt;&lt;/a&gt;, recommended by a friend, and it&amp;rsquo;s enjoyable.&lt;/p&gt;
&lt;p&gt;Several months ago, maybe longer, I started reading &lt;a href=&quot;https://www.goodreads.com/book/show/19063.The_Book_Thief&quot;&gt;&lt;em&gt;The Book Thief&lt;/em&gt;&lt;/a&gt;, and it&amp;rsquo;s a beautiful book. And poignant. Something about the way it&amp;rsquo;s written made WWII, the Holocaust, and how it impacted so many lives more real than anything I&amp;rsquo;d read or seen before. It&amp;rsquo;s stuck with me.&lt;/p&gt;



&lt;h3 id=&quot;what-is-the-biggest-lesson-the-pandemic-taught-you&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#what-is-the-biggest-lesson-the-pandemic-taught-you&quot;&gt;What is the biggest lesson the pandemic taught you?&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;ve always been an introvert and rather a homebody, so I feel comfortable saying that it didn&amp;rsquo;t impact me nearly as much as it did most people. For me personally, 2020 was actually a pretty good year, especially when compared with the ones leading up to it.&lt;/p&gt;
&lt;p&gt;To answer the question, though, I suppose that we, each of us, are masters of our own journey. Maybe that&amp;rsquo;s just because it coincided with other changes in my life, but somehow felt even more true with the pandemic.&lt;/p&gt;



&lt;h3 id=&quot;whats-something-interesting-about-you-thats-not-on-your-resume-or-linkedin&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#whats-something-interesting-about-you-thats-not-on-your-resume-or-linkedin&quot;&gt;What‚Äôs something interesting about you that‚Äôs not on your resume or LinkedIn?&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;I feel like I&amp;rsquo;ve shared quite a bit. For something else, though, I&amp;rsquo;ve done a little bit of animal fostering ‚Äî my current tally is 4 dogs and 6 bunny rabbits. I like knowing that because I&amp;rsquo;ve spent the time to learn an animal&amp;rsquo;s personality, the chances of a good long-term adoption go up dramatically. It&amp;rsquo;s worth it. And I get a short-term pet and lots of cute pictures. The cute pictures are hard to beat.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This interview is based on shared documentation with Eve Ragins and Cathy Colliver. It may or may not self-destruct.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reflecting on what it means to go back home</title>
      <link>https://blog.testdouble.com/posts/2022-09-20-what-it-means-to-go-back-home/</link>
      <pubDate>Tue, 20 Sep 2022 00:00:00 +0000</pubDate>
      
      
      <author>hello+rss@testdouble.com (Anya Iverova)</author>
      <guid>https://blog.testdouble.com/posts/2022-09-20-what-it-means-to-go-back-home/</guid>
      <description>&lt;p&gt;As some of you may already know, I was born in Ukraine, in a city called Kharkiv. My mother made the difficult decision to leave the country in pursuit of a better life for the two of us in America, and at 5 years old, I became an immigrant on the other side of the world.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://cdn-blog.testdouble.com/img/what-it-means-to-go-home/ukraine-today-tomorrow-always.5f7b83b85a0afbaba062925d82d3a80fafe7d4525fb9faa4c5839c60cceba7b6.jpg&quot; alt=&quot;Painting of a woman in traditional Ukrainian dress embracing her daughter while standing in a field of grain.&quot; title=&quot;Painting of a woman in traditional Ukrainian dress embracing her daughter while standing in a field of grain.&quot;/&gt;
  &lt;figcaption&gt;
 A painting by my mother, Yelena Liberman, &quot;Ukraine - Today, Tomorrow, and Always!&quot;
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;When Russia invaded Ukraine, I was flooded with memories, revealing Ukraine‚Äôs significance in my life. Every trip I‚Äôd ever taken, every family member I‚Äôd met, studying the Russian language year after year. Every moment I‚Äôd ever spent with my family, sitting across from my cousins, bringing them gifts from America, big suitcases filled with requested items to make their lives a bit easier, bear hugs from my grandmother. Every memory kept flooding to the surface, hitting me like a ton of bricks, all mixing with my present reality of being an American, safe and privileged, watching the war from afar. I realized through this process that it takes the threat of losing your home to recognize its significance in your life.&lt;/p&gt;
&lt;p&gt;Since the start of the invasion, many of you have lent your support. Due to shock, I have had little to say back. Although it still pains me to write about Ukraine, it is also true that the Ukrainian people, their history, and the current war are far bigger than my feelings.
I want to share with you all a small snippet of my memories of Ukraine and a few charities you can donate to if you‚Äôre so moved.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I was 16 years old when I traveled back to Ukraine. I can still remember arriving at the airport, stricken by the unusual uniforms of the soldiers with badges of sky-blue and yellow flags sewn into the jackets, their serious young faces protecting the country they call home.&lt;/p&gt;
&lt;p&gt;On that trip, I reunited with my grandmother, uncle, cousins, and aunts, along with all of my extended family members. Over the course of several weeks, I traveled Ukraine from top to bottom, visiting more family members along the way. Starting in the north, in Kyiv, I walked through the 1500-year-old city, admiring the myriad of architecture like &lt;a href=&quot;https://www.dailyartmagazine.com/saint-sophia-in-kyiv/&quot;&gt;Saint Sophia‚Äôs Cathedral&lt;/a&gt; and &lt;a href=&quot;https://discover-ukraine.info/places/kyiv/kyiv/868&quot;&gt;Maidan Nezoleshnosti&lt;/a&gt; (‚ÄúIndependence Square‚Äù), the winding cobblestone streets of &lt;a href=&quot;https://en.wikipedia.org/wiki/Andriivskyi_Descent&quot;&gt;Andreevski Spusk&lt;/a&gt;, and of course, &lt;a href=&quot;https://nomadparadise.com/ukrainian-desserts/&quot;&gt;ordering loads of delicious pastries&lt;/a&gt; from street vendors.&lt;/p&gt;
&lt;p&gt;We continued our travels to my grandmother‚Äôs home in Novaya Kahovka, a city built seemingly overnight during the Soviet era. My grandmother lived in the same one-bedroom apartment her entire adult life. 50 years‚Äô worth of memories in that small, stale space. But as a child returning to her roots, I always remembered it as somehow warm, familial, and full of little treasures passed down from generation to generation.&lt;/p&gt;
&lt;p&gt;Moving further south to the countryside, we visited Lazurne. I stayed in my great-aunt&amp;rsquo;s house, where photos of Stalin and Lenin and other historical memorabilia adorned the walls. I was stricken that the house had no electricity. Pumping water from a well left my younger self with a deeper insight into the things I had already taken for granted moving to America.&lt;/p&gt;
&lt;p&gt;I‚Äôll spare you all the details of my later comings-and-goings, where language, culture, and family were my focus and so important to me. But instead, I would ask you to reflect on what it means to you: to go back home. Because when the war began in February, it dawned on me that my internal strength is not somehow special or unique to my upbringing, but rather, it is rooted in the foundations of my home.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Many people have reached out to me over the past few months offering a listening ear and support and have asked how you can help. I have been speaking to cousins of mine who are currently displaced in Lviv after their towns were destroyed. They have told me that donations to the following charities can go a long way:
&lt;a href=&quot;https://prytulafoundation.org/&quot;&gt;Prytula Foundation&lt;/a&gt;
&lt;a href=&quot;https://u24.gov.ua/&quot;&gt;United 24&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In addition, I am personal friends with the Ukrainian co-founders of &lt;a href=&quot;https://www.theworldforukraine.org/&quot;&gt;The World for Ukraine&lt;/a&gt;. They are a small (team of two!) non-profit group based in South Carolina, sending large monthly shipments of medical trauma kits and other medical supplies.&lt;/p&gt;
&lt;p&gt;If you feel moved to help, it would mean so much to my family and me to know we were part of the fight and helped in some way.&lt;/p&gt;
&lt;p&gt;Thank you for reading!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>React and React Native workshops ‚Äî Fall 2022</title>
      <link>https://blog.testdouble.com/posts/2022-09-19-react-and-react-native-workshops-fall-2022/</link>
      <pubDate>Mon, 19 Sep 2022 00:00:00 +0000</pubDate>
      
      
      <author>hello+rss@testdouble.com (Josh Justice)</author>
      <guid>https://blog.testdouble.com/posts/2022-09-19-react-and-react-native-workshops-fall-2022/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m offering workshops on a variety of React and React Native topics this fall. Most of them are available virtually, so you can join from anywhere with an internet connection. (I bet you have one of those if you&amp;rsquo;re reading this!) They&amp;rsquo;re offered as part of larger conferences with lots of great speakers and additional workshops included in the ticket price, too.&lt;/p&gt;
&lt;p&gt;Here are the topics I&amp;rsquo;ll lead workshops on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#designing-effective-tests-with-react-testing-library&quot;&gt;React Testing Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#testing-react-apps-with-react-testing-library-and-cypress&quot;&gt;React Testing Library + Cypress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#introduction-to-react-native-testing-library&quot;&gt;React Native Testing Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#building-for-web-and-mobile-with-expo&quot;&gt;Building for Web and Mobile with Expo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h1 id=&quot;designing-effective-tests-with-react-testing-library&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#designing-effective-tests-with-react-testing-library&quot;&gt;Designing effective tests with React Testing Library&lt;/a&gt;
  
&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Length: 3 hours&lt;/li&gt;
&lt;li&gt;Location: virtual&lt;/li&gt;
&lt;li&gt;Date: Dec 7 at &lt;a href=&quot;https://reactday.berlin/&quot;&gt;React Day Berlin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;React Testing Library is a great framework for React component tests because there are a lot of questions it answers for you. But that doesn‚Äôt mean testing is easy: there are still a lot of questions you have to figure out for yourself. In this three-hour workshop we‚Äôll introduce a mental model for how to think about designing your component tests that will help you answer those questions. I&amp;rsquo;ve found that this mental model helps me see how to test each bit of logic, decide whether or not to mock dependencies, and improve the design of my components.&lt;/p&gt;



&lt;h1 id=&quot;testing-react-apps-with-react-testing-library-and-cypress&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#testing-react-apps-with-react-testing-library-and-cypress&quot;&gt;Testing React apps with React Testing Library and Cypress&lt;/a&gt;
  
&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Length: full day&lt;/li&gt;
&lt;li&gt;Location: in-person in Atlanta, GA&lt;/li&gt;
&lt;li&gt;Date: Nov 7 at &lt;a href=&quot;https://2022.connect.tech/&quot;&gt;connect.tech&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this full-day workshop we&amp;rsquo;ll cover everything from the 3-hour React Testing Library workshop, then we&amp;rsquo;ll dive into Cypress to learn how to write end-to-end tests that complement your component tests. We&amp;rsquo;ll see how the two types of test work together to help ensure you have maximum confidence for all edge cases, the fastest and most reliable test suite possible, and feedback to help you improve the design of your code.&lt;/p&gt;



&lt;h1 id=&quot;introduction-to-react-native-testing-library&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#introduction-to-react-native-testing-library&quot;&gt;Introduction to React Native Testing Library&lt;/a&gt;
  
&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Length: 3 hours&lt;/li&gt;
&lt;li&gt;Location: virtual&lt;/li&gt;
&lt;li&gt;Date: Oct 28 at &lt;a href=&quot;https://reactadvanced.com/&quot;&gt;React Advanced London&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One of the many benefits of React Native is that you have the same great testing API available that&amp;rsquo;s familiar and proven from React on the web. In this workshop we&amp;rsquo;ll introduce React Native Testing Library along with the same mental model for component tests from the RTL workshop. We&amp;rsquo;ll also cover how this mental model helps you navigate the challenge of intermixed JavaScript and native code in React Native libraries.&lt;/p&gt;



&lt;h1 id=&quot;building-for-web-and-mobile-with-expo&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#building-for-web-and-mobile-with-expo&quot;&gt;Building for web and mobile with Expo&lt;/a&gt;
  
&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Length: 3 hours&lt;/li&gt;
&lt;li&gt;Location: virtual&lt;/li&gt;
&lt;li&gt;Dates:
&lt;ul&gt;
&lt;li&gt;Oct 27 at &lt;a href=&quot;https://reactadvanced.com/&quot;&gt;React Advanced London&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dec 6 at &lt;a href=&quot;https://reactday.berlin/&quot;&gt;React Day Berlin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;React Native allows you to deploy the same codebase to both iOS and Android, and &lt;a href=&quot;https://necolas.github.io/react-native-web/&quot;&gt;React Native Web&lt;/a&gt; allows you to deploy that same codebase to a third platform: the web. React Native Web has enabled me as a solo developer to create two open-source apps, each deployed to both mobile and web. And it can help your organization target platforms you aren&amp;rsquo;t yet targeting and minimize costly duplicate work. In this workshop we&amp;rsquo;ll set up the skeleton for a React Native Web app and walk through the unique concerns of a React Native Web codebase so that you&amp;rsquo;re ready to hit the ground running.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>One year growing the People of Color Employee Resource Group</title>
      <link>https://blog.testdouble.com/posts/2022-09-13-one-year-of-the-people-of-color-employee-resource-group/</link>
      <pubDate>Tue, 13 Sep 2022 00:00:00 +0000</pubDate>
      
      
      <author>hello+rss@testdouble.com (Ali Ibrahim)</author>
      <guid>https://blog.testdouble.com/posts/2022-09-13-one-year-of-the-people-of-color-employee-resource-group/</guid>
      <description>&lt;p&gt;Test Double&amp;rsquo;s People of Color Employee Resource Group (ERG) put its first year in the books! As one of the first ERGs at Test Double, this year was one to celebrate as we worked to build a community inside the company that focuses on progressing our careers and fostering interconnectedness.&lt;/p&gt;



&lt;h2 id=&quot;building-community-inside-the-erg&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#building-community-inside-the-erg&quot;&gt;Building community inside the ERG&lt;/a&gt;
  
&lt;/h2&gt;
&lt;p&gt;As a 100% remote company, it can be easy to become isolated as you get heads-down on work. The ERG works to build interconnectedness between the people of color in Test Double. We hold regularly recurring meetings that cover lots of topics. Sometimes we use icebreakers or games to get to know each other better. Other times, we hold brainstorming sessions to figure out what our priorities should be or ways that we can support each other better. These meetings have helped us build a stronger sense of community.&lt;/p&gt;



&lt;h2 id=&quot;improving-recruitment-pipeline-by-improving-visibility&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#improving-recruitment-pipeline-by-improving-visibility&quot;&gt;Improving recruitment pipeline by improving visibility&lt;/a&gt;
  
&lt;/h2&gt;
&lt;p&gt;Test Double is a predominantly white company, but we strive for inclusivity, and the ERG works to help build our recruitment pipeline. This year we worked to improve the visibility of Test Double&amp;rsquo;s people of color outside of the company by promoting content creation, getting featured on the Test Double blog, and getting involved in interview profiles.&lt;/p&gt;



&lt;h3 id=&quot;blog-posts&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#blog-posts&quot;&gt;Blog posts&lt;/a&gt;
  
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.testdouble.com/posts/2022-04-12-how-environment-variables-make-your-ruby-test-suite-flaky/&quot;&gt;How environment variables make your Ruby test suite flaky, Ali  Ibrahim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.testdouble.com/posts/2021-08-05-life-of-a-software-consultant/&quot;&gt;4 Reasons to Be a Software Consultant, Landon Gray&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.testdouble.com/posts/2021-06-22-what-weve-learned-about-pride/&quot;&gt;What we&amp;rsquo;ve learned about Pride, Jaquel Rogers Robertson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.testdouble.com/posts/2022-09-06-why-are-we-adding-another-modal/&quot;&gt;Why Are We Adding Another Modal?, Minnie Lee&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h3 id=&quot;talks&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#talks&quot;&gt;Talks&lt;/a&gt;
  
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.testdouble.com/talks/2022-02-01-babies-just-want-to-have-fun/&quot;&gt;Babies just want to have fun, Ali Ibrahim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.testdouble.com/talks/2021-11-23-mastering-macro-machine/&quot;&gt;Mastering the Macro Machine, Camilo Payan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=YkuZPwlCm9w&quot;&gt;The Value Of A Small Pull Request, Glenn Harmon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h3 id=&quot;profiles&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#profiles&quot;&gt;Profiles&lt;/a&gt;
  
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.testdouble.com/posts/2022-07-26-agent-profile-sukhraj-singh/&quot;&gt;Sukhraj Singh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.testdouble.com/posts/2021-10-08-agent-profile-glenn-harmon/&quot;&gt;Glenn Harmon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.testdouble.com/posts/2021-09-27-agent-profile-viral-patel/&quot;&gt;Viral Patel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.testdouble.com/posts/2021-07-16-agent-profile-minnie-lee/&quot;&gt;Minnie Lee&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.testdouble.com/posts/2021-07-30-agent-profile-ali-ibrahim/&quot;&gt;Ali Ibrahim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h2 id=&quot;progressing-members&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#progressing-members&quot;&gt;Progressing members&lt;/a&gt;
  
&lt;/h2&gt;
&lt;p&gt;Creating content doesn&amp;rsquo;t just build visibility for people of color outside of Test Double, it also improves our career prospects. The ERG brought in Test Double leadership to field questions about the promotion and progression processes at Test Double, and we worked to support each other through those processes. All of this helped several ERG members get promoted in the last year. ü•≥&lt;/p&gt;



&lt;h2 id=&quot;growing-the-erg&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#growing-the-erg&quot;&gt;Growing the ERG&lt;/a&gt;
  
&lt;/h2&gt;
&lt;p&gt;What&amp;rsquo;s next? The People of Color ERG grew and changed over the last year. We want to keep growing the number of people of color at Test Double and the impact that we have inside and outside the organization.&lt;/p&gt;
&lt;p&gt;With the thoughtfulness, intelligence, and creativity that everyone brings to Test Double, there&amp;rsquo;s no doubt that the group will continue to grow and build!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why are we adding another modal?</title>
      <link>https://blog.testdouble.com/posts/2022-09-06-why-are-we-adding-another-modal/</link>
      <pubDate>Tue, 06 Sep 2022 00:00:00 +0000</pubDate>
      
      
      <author>hello+rss@testdouble.com (Minnie Lee)</author>
      <guid>https://blog.testdouble.com/posts/2022-09-06-why-are-we-adding-another-modal/</guid>
      <description>&lt;p&gt;Oftentimes as developers, we are handed what to build‚Äîwith most of the requirements pretty set in stone‚Äîand then asked to fulfill whatever that may be. Sure we might have a meeting or two to discuss possible roadblocks around implementation or ask some questions for clarification. But wouldn‚Äôt it be better if we were involved earlier in product contribution?&lt;/p&gt;
&lt;p&gt;What if we collaborated with the product team to build something better? Or even put a pause on something being built because nobody took into account how it would affect a specific demographic of users? Sometimes, it can feel like there isn‚Äôt enough trust being given to software developers, even though we are the ones implementing the solution.&lt;/p&gt;
&lt;p&gt;I recently read about &lt;a href=&quot;https://www.nytimes.com/interactive/2022/08/14/business/worker-productivity-tracking.html&quot;&gt;companies monitoring their remote employees&lt;/a&gt; by tracking their productivity through keystrokes, idle time, etc. To me, this screams: ‚ÄúI don‚Äôt trust you to do the job that I hired you to do, and I‚Äôm going to watch your every move to ensure that you are a good investment.‚Äù Sounds like a real fun time and a surefire way to demotivate people very quickly. However, there are companies that exist that want to include you in important conversations so that you can make an impact earlier because they trust your expertise and they value your thoughts and opinions.&lt;/p&gt;
&lt;p&gt;So, how do we get to that point where we know the product well enough? When you know how a product is being used day-to-day by end users, you can start contributing your own ideas of how to make the product better. What if one of us becomes the next Flamin‚Äô Hot Cheetos inventor of the tech world? What if we were so close to the product we could know the immediate impact of our contributions? Would that give devs a renewed sense of purpose? Would this cut down on attrition?&lt;/p&gt;
&lt;p&gt;Here are some questions I encourage devs to ask themselves:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do you use the product that you‚Äôve built? If not, why?&lt;/li&gt;
&lt;li&gt;Do you know how it is being used?&lt;/li&gt;
&lt;li&gt;Do you know what features users use the most and what features they are requesting or wish were part of the product?&lt;/li&gt;
&lt;li&gt;Are there features that you feel are hindering the user experience in any way or might be confusing?&lt;/li&gt;
&lt;li&gt;What about accessibility?&lt;/li&gt;
&lt;li&gt;Do you know which browsers they use?&lt;/li&gt;
&lt;li&gt;What type of device are they using to use the product?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Asking these types of questions‚Äîand being given the opportunities to contribute to the overall vision of the product‚Äîcreates many benefits for the individual contributors and the company overall. Having worked at and with a few companies that adopted this approach, here are some of the benefits I experienced and witnessed. All of these contribute to happy employees who generally stick around for longer than average.&lt;/p&gt;



&lt;h2 id=&quot;more-autonomy-through-creativity&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#more-autonomy-through-creativity&quot;&gt;More autonomy through creativity&lt;/a&gt;
  
&lt;/h2&gt;



&lt;h3 id=&quot;create-a-greater-sense-of-purpose-and-empowerment-which-leads-to-lower-attrition-rates&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#create-a-greater-sense-of-purpose-and-empowerment-which-leads-to-lower-attrition-rates&quot;&gt;Create a greater sense of purpose and empowerment, which leads to lower attrition rates&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;Anytime you notice someone celebrating more than five years at a company in the software industry, it feels surprising. There is a myriad of reasons why people decide to move on from a company, but what about the ones that stay?&lt;/p&gt;
&lt;p&gt;I enjoy working in this industry because I enjoy being challenged and the breadth and variety of work I come across, especially working for a consultancy. In my personal experience‚Äîworking for a few product companies and consulting for them as well‚Äîcompanies that stand out are driven by creativity and innovation and also encourage and include their employees to be a part of the decisions behind the product itself.&lt;/p&gt;
&lt;p&gt;We spend a large part of our lives working. When we‚Äôre not exercising our creativity, it is a rather dull affair. I feel more valued, supported, and connected when I‚Äôm encouraged to actively participate and contribute by bringing my unique perspective and experiences to the table. This led me to stay or wish I was on the client engagement longer.&lt;/p&gt;



&lt;h2 id=&quot;empathy-towards-the-end-user&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#empathy-towards-the-end-user&quot;&gt;Empathy towards the end user&lt;/a&gt;
  
&lt;/h2&gt;



&lt;h3 id=&quot;more-care-and-responsibility-to-developing-a-product-that-makes-sense&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#more-care-and-responsibility-to-developing-a-product-that-makes-sense&quot;&gt;More care and responsibility to developing a product that makes sense&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;I distinctly remember a story about how one of my friends had to open up the JS console to fix the HTML on a broken form so his friend could submit something for her green card. And that wasn‚Äôt the only issue! I‚Äôm sure we all can think of at least one app or website that was confusing, clunky, or frustrating to navigate.&lt;/p&gt;
&lt;p&gt;When I was trusted to be part of the process and success of the product I was building, I took the initiative to better understand how the product was being used.&lt;/p&gt;
&lt;p&gt;I was invested as a result of being invested in by others. Funny how that works, right?&lt;/p&gt;
&lt;p&gt;As the company further invested in me, I took it upon myself to dig deeper. I even worked closely with the end users I was immediately impacting whenever we released a new feature. I sat in on user study groups and meetings around different user workflows and did brainstorming sessions on features to enhance the product and user experience.&lt;/p&gt;
&lt;p&gt;I was able to do these things because I took the initiative to ask to be included. It was incredibly rewarding‚Äîeven when there were fires to be put out‚Äîbecause we received immediate feedback on what was working and what wasn‚Äôt. It kept me accountable and made me more mindful of what we were pushing out. I wanted to make sure the end users were happy and that we were building a product that made their lives easier.&lt;/p&gt;



&lt;h2 id=&quot;more-connection-and-trust&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#more-connection-and-trust&quot;&gt;More connection and trust&lt;/a&gt;
  
&lt;/h2&gt;



&lt;h3 id=&quot;build-trust-within-teams-and-the-organization-as-a-whole&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#build-trust-within-teams-and-the-organization-as-a-whole&quot;&gt;Build trust within teams and the organization as a whole&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;I‚Äôm pretty sure being micromanaged is pretty high on the list of reasons people burn out and leave. It can be incredibly demoralizing to have someone hovering around you as if at any moment you‚Äôll do irreversible damage. That‚Äôs how I‚Äôve felt in the past. I already have enough of my own self-doubts with a forever shadow of imposter syndrome, which I have learned to embrace and use to my advantage. Thanks.&lt;/p&gt;
&lt;p&gt;Now that I‚Äôve experienced what it is like to work in an environment where trust was immediately given, it gave me the space to be creative and come up with solutions in a way that made sense to me, which was empowering. That trust extended to my teammates as well, and I grew to lean on them and ask them for their thoughts and opinions on almost everything. This was not out of insecurity or fear but out of accountability and inclusivity. I wanted to make sure that what we were building made sense to all of us because, as a team, we were responsible for all of it.&lt;/p&gt;
&lt;p&gt;We were all owners, and together it was on all of us to ensure that we delivered what was promised and more. This led to very close collaborations, where on average, I paired with the same rotation of people at least once a day‚Äîeven if it was just to hop on a call to ensure we were on the same page. Some of my favorite memories were with a team of people I worked with closely for 3 years. Other engineering teams heard about our team and how close and comfortable we were. Some even expressed jealousy around the camaraderie and fun atmosphere we had built.&lt;/p&gt;



&lt;h2 id=&quot;expand-your-opportunities&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#expand-your-opportunities&quot;&gt;Expand your opportunities&lt;/a&gt;
  
&lt;/h2&gt;



&lt;h3 id=&quot;the-possible-creation-of-new-positions-through-cross-team-collaboration&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#the-possible-creation-of-new-positions-through-cross-team-collaboration&quot;&gt;The possible creation of new positions through cross-team collaboration&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;As a dev, there‚Äôs a general path for growth and opportunity which doesn‚Äôt really deviate from what we do fundamentally. However, it has been my experience that when you‚Äôre collaborating with so many different parts of the organization, you get exposed to all sorts of things. For some, it can create a desire to explore a different position entirely or even a desire for some type of hybrid role that doesn‚Äôt currently exist.&lt;/p&gt;
&lt;p&gt;When companies invest in their employees, it can oftentimes lead to the creation of new roles, so the individual is continuously inspired and encouraged and excited. This also solidifies how important it is to include other people‚Äôs perspectives and experiences in the mix.&lt;/p&gt;
&lt;p&gt;I am grateful that at my previous company, I gained strong project management and product management skills because it was required and expected of me. As a result, I feel like consulting came to me pretty naturally. One of my favorite topics to read about on the side is behavioral economics. I am very curious about team dynamics and individual behaviors. I feel fortunate to observe other companies‚Äô processes, team management, leadership, etc. I honestly find it very exciting and something to look forward to.&lt;/p&gt;
&lt;p&gt;Whatever it may be that sparks excitement and interest in you, there are companies out there that are interested in helping you explore those areas. There are companies out there that can help you grow. There are companies out there who will encourage and empower you to find new ways to contribute.&lt;/p&gt;
&lt;p&gt;It was in these types of environments that I was given full autonomy to make the most immediate impact on what we were building. As a result, I gained skills to build a better product‚Äîso we weren‚Äôt asking in every other planning meeting why we were building yet another modal‚Äîand what we were going to do moving forward to better serve our customers.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Stateless forms with the Rails Attributes API</title>
      <link>https://blog.testdouble.com/posts/2022-08-30-stateless-forms-with-the-rails-attributes-api/</link>
      <pubDate>Tue, 30 Aug 2022 00:00:00 +0000</pubDate>
      
      
      <author>justin@testdouble.com (Justin Searls)</author>
      <guid>https://blog.testdouble.com/posts/2022-08-30-stateless-forms-with-the-rails-attributes-api/</guid>
      <description>&lt;p&gt;One of the ironies of working with Ruby on Rails is that making a feature &lt;em&gt;do
less&lt;/em&gt; often results in &lt;em&gt;more work&lt;/em&gt;. For a great example of this, consider the
ingredients that go into a standard Rails form: route, controller, ERB template,
Active Record model.  If you do things &amp;ldquo;The Rails Way&amp;rdquo;, we could have everything
working in just a few minutes.&lt;/p&gt;
&lt;p&gt;Now take that form and swap out the Active Record models in favor of plain ol'
Ruby objects. Suddenly nothing works! (That&amp;rsquo;s what we get for going off the
Rails, I guess.)&lt;/p&gt;
&lt;p&gt;I recently had to work through this myself, but arrived at a surprisingly simple
solution enabled by the sorta-public-but-still-kinda-private &lt;a href=&quot;https://api.rubyonrails.org/classes/ActiveRecord/Attributes/ClassMethods.html&quot;&gt;Attributes
API&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this post, we&amp;rsquo;ll walk through why rendering forms for non-Active Record model
objects is so difficult and how mixing in the Attributes API can make things
&lt;strong&gt;an awful lot easier&lt;/strong&gt; on ourselves.&lt;/p&gt;



&lt;h2 id=&quot;how-might-we-make-a-filterable-list&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#how-might-we-make-a-filterable-list&quot;&gt;How might we make a filterable list?&lt;/a&gt;
  
&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;Why &lt;em&gt;wouldn&amp;rsquo;t&lt;/em&gt; you want to persist a form?&amp;rdquo;, a hypothetical antagonist might
ask. You might respond that one good example of an ephemeral, unpersisted form
would be criteria fields used to filter a list of items. Something like this, to
illustrate:&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://cdn-blog.testdouble.com/img/stateless-forms-with-the-rails-attributes-api/form.85084b239ac626c905682181df3c1efb65f3a5c518b9db98b0cfc10e2e376a0f.png&quot; alt=&quot;A form with price, color, and date filters&quot; title=&quot;A form with price, color, and date filters&quot;/&gt;
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Let&amp;rsquo;s suppose the app will filter a list of items based on the provided
criteria. These conditions don&amp;rsquo;t need to be persisted themselves‚Äîthey&amp;rsquo;re
inherently ephemeral, and a simple stateless form is all the feature calls for.&lt;/p&gt;
&lt;p&gt;In this post, we&amp;rsquo;ll build the form step-by-step, and we&amp;rsquo;ll see why the
Attributes API is a great choice for capturing values from unpersisted form
fields.&lt;/p&gt;



&lt;h2 id=&quot;building-a-form-with-plain-ol-ruby-objects&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#building-a-form-with-plain-ol-ruby-objects&quot;&gt;Building a form with plain ol' Ruby objects&lt;/a&gt;
  
&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s start off by adding a date field.&lt;/p&gt;
&lt;p&gt;The easiest thing to do would be to add each filter field as an instance
variable, first in the controller action:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;@available_on &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; params&lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;:available_on&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;]&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;||&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;Time&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;zone&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;today
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And then in the view:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#f92672&quot;&gt;&amp;lt;%=&lt;/span&gt; f&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;date_field &lt;span style=&quot;color:#e6db74&quot;&gt;:available_on&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;value&lt;/span&gt;: @available_on &lt;span style=&quot;color:#f92672&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Storing each field in an instance variable will work, but it won&amp;rsquo;t scale very
well if we have a lot of filters, if a different set of filters should appear
based on the type of list, or if certain types of filters might appear multiple
times.&lt;/p&gt;
&lt;p&gt;Knowing this, we might decide to create a plain ol' Ruby object (a
&amp;ldquo;&lt;a href=&quot;http://blog.jayfields.com/2007/10/ruby-poro.html&quot;&gt;PORO&lt;/a&gt;&amp;quot;) to encapsulate the
user&amp;rsquo;s input:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;Filter&lt;/span&gt;
  &lt;span style=&quot;color:#66d9ef&quot;&gt;attr_reader&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;:available_on&lt;/span&gt;

  &lt;span style=&quot;color:#66d9ef&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;initialize&lt;/span&gt;(&lt;span style=&quot;color:#e6db74&quot;&gt;available_on&lt;/span&gt;:)
    @available_on &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; available_on &lt;span style=&quot;color:#f92672&quot;&gt;||&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;Time&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;zone&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;today
  &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And update the field:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#f92672&quot;&gt;&amp;lt;%=&lt;/span&gt; f&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;date_field &lt;span style=&quot;color:#e6db74&quot;&gt;:available_on&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;value&lt;/span&gt;: @filter&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;available_on &lt;span style=&quot;color:#f92672&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Because I tend to write a lot of repetitive-looking PORO value objects, I tend
to reach for &lt;a href=&quot;https://ruby-doc.org/core-3.1.2/Struct.html&quot;&gt;Struct&lt;/a&gt; in cases like
this. This value could be reworked as:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;Filter&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;Struct&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;new(&lt;span style=&quot;color:#e6db74&quot;&gt;:available_on&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;keyword_init&lt;/span&gt;: &lt;span style=&quot;color:#66d9ef&quot;&gt;true&lt;/span&gt;) &lt;span style=&quot;color:#66d9ef&quot;&gt;do&lt;/span&gt;
  &lt;span style=&quot;color:#66d9ef&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;initialize&lt;/span&gt;(&lt;span style=&quot;color:#f92672&quot;&gt;**&lt;/span&gt;kwargs)
    &lt;span style=&quot;color:#66d9ef&quot;&gt;super&lt;/span&gt;
    self&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;available_on &lt;span style=&quot;color:#f92672&quot;&gt;||=&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;Time&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;zone&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;today
  &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;On first load, all three of the above approaches will render the form fine, and
will continue rendering the selected value correctly after each form submission.&lt;/p&gt;
&lt;p&gt;However, actually using this date as a &lt;code&gt;Date&lt;/code&gt; will prove problematic. Adding
this filter operation to our controller action would work on the initial render:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;@items&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;select { &lt;span style=&quot;color:#f92672&quot;&gt;|&lt;/span&gt;item&lt;span style=&quot;color:#f92672&quot;&gt;|&lt;/span&gt; item&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;available_on &lt;span style=&quot;color:#f92672&quot;&gt;&amp;lt;=&lt;/span&gt; @filter&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;available_on }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But after each form submission, it&amp;rsquo;ll raise an error:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-fallback&quot; data-lang=&quot;fallback&quot;&gt;ArgumentError: comparison of Date with String failed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This happens because we&amp;rsquo;ve gone off the Rails. It&amp;rsquo;s now &lt;em&gt;our&lt;/em&gt; job to cast
submitted form values from &lt;code&gt;String&lt;/code&gt; into whatever we intend them to be. The
reason we don&amp;rsquo;t normally need to worry about this when we&amp;rsquo;re building forms of
Active Record models is because Rails looks at the underlying database table and
says, &amp;ldquo;oh, &lt;code&gt;available_on&lt;/code&gt; is a SQL &lt;code&gt;DATE&lt;/code&gt; column, so I&amp;rsquo;ll parse this
&lt;code&gt;&amp;quot;2022-10-05&amp;quot;&lt;/code&gt; string I got from the form as a Ruby &lt;code&gt;Date&lt;/code&gt;&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Without a database table to inspect, and because form submissions collapse every
value into a &lt;code&gt;String&lt;/code&gt;, neither Ruby nor Rails will know what to do for us.
Ruby&amp;rsquo;s dynamic typing is usually a convenience boost, but this is one case where
we&amp;rsquo;ll need to be explicit about types.&lt;/p&gt;
&lt;p&gt;We could try to update our Struct to convert the value in the initializer, in a
custom writer method, or a custom reader method. Here&amp;rsquo;s one way we might hack
up the initializer:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;Filter&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;Struct&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;new(&lt;span style=&quot;color:#e6db74&quot;&gt;:available_on&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;keyword_init&lt;/span&gt;: &lt;span style=&quot;color:#66d9ef&quot;&gt;true&lt;/span&gt;) &lt;span style=&quot;color:#66d9ef&quot;&gt;do&lt;/span&gt;
  &lt;span style=&quot;color:#66d9ef&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;initialize&lt;/span&gt;(&lt;span style=&quot;color:#f92672&quot;&gt;**&lt;/span&gt;kwargs)
    &lt;span style=&quot;color:#66d9ef&quot;&gt;super&lt;/span&gt;
    self&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;available_on &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;if&lt;/span&gt; kwargs&lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;:available_on&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;].&lt;/span&gt;present?
      &lt;span style=&quot;color:#66d9ef&quot;&gt;Date&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;parse(kwargs&lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;:available_on&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;]&lt;/span&gt;)
    &lt;span style=&quot;color:#66d9ef&quot;&gt;else&lt;/span&gt;
      &lt;span style=&quot;color:#66d9ef&quot;&gt;Time&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;zone&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;today
    &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
  &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But just look at that. We don&amp;rsquo;t want a mess like that to propagate every time we
add a non-string field to a form! Besides, this doesn&amp;rsquo;t even work, as this
approach would be defeated if anyone called the attribute&amp;rsquo;s writer method (e.g.
&lt;code&gt;@filter.available_on = &amp;quot;2022-10-05&amp;quot;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re anything like me, you&amp;rsquo;ll start thinking about the scope of the rest of
the application and the next place your head will go is to ask, &amp;ldquo;should we
extract a utility for defining value classes with typed attributes?&amp;rdquo; The
answer to that question is, of course, &lt;strong&gt;no&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;Instead (and you may have seen this coming), the Rails Attributes API is a
better answer. It can already do all of this for us, and it would allow us to
refactor our value object into:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;Filter&lt;/span&gt;
  &lt;span style=&quot;color:#66d9ef&quot;&gt;include&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;ActiveModel&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;::&lt;/span&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;Model&lt;/span&gt;
  &lt;span style=&quot;color:#66d9ef&quot;&gt;include&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;ActiveModel&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;::&lt;/span&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;Attributes&lt;/span&gt;

  attribute &lt;span style=&quot;color:#e6db74&quot;&gt;:available_on&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;:date&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And the action to:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;@filter &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;Filter&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;new(&lt;span style=&quot;color:#e6db74&quot;&gt;available_on&lt;/span&gt;: params&lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;:available_on&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;]&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;||&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;Time&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;zone&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;today)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will actually work! Even if instantiated with a string, you&amp;rsquo;ll always get a &lt;code&gt;Date&lt;/code&gt; back:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;filter &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;Filter&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;new(&lt;span style=&quot;color:#e6db74&quot;&gt;available_on&lt;/span&gt;: &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;2022-10-05&amp;#34;&lt;/span&gt;)
filter&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;available_on&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;class &lt;span style=&quot;color:#75715e&quot;&gt;# =&amp;gt; Date&lt;/span&gt;
filter&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;attributes&lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;available_on&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;].&lt;/span&gt;class &lt;span style=&quot;color:#75715e&quot;&gt;# =&amp;gt; Date&lt;/span&gt;
filter&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;available_on &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;2022-11-01&amp;#34;&lt;/span&gt;
filter&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;available_on&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;inspect &lt;span style=&quot;color:#75715e&quot;&gt;# =&amp;gt; &amp;#34;Tue, 01 Nov 2022&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But now that our value object quacks a lot more like a Rails model, we can
actually go all the way and pass our &lt;code&gt;Filter&lt;/code&gt; object to the form builder.&lt;/p&gt;



&lt;h2 id=&quot;setting-an-attributes-object-as-the-form-builders-model&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#setting-an-attributes-object-as-the-form-builders-model&quot;&gt;Setting an Attributes object as the form builder&amp;rsquo;s model&lt;/a&gt;
  
&lt;/h2&gt;
&lt;p&gt;We can make things even easier by passing any value that includes &lt;code&gt;ActiveModel::Attributes&lt;/code&gt; as the &lt;code&gt;model:&lt;/code&gt; keyword argument to &lt;code&gt;form_with&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#f92672&quot;&gt;&amp;lt;%=&lt;/span&gt; form_with &lt;span style=&quot;color:#e6db74&quot;&gt;model&lt;/span&gt;: @filter, &lt;span style=&quot;color:#e6db74&quot;&gt;url&lt;/span&gt;: items_path, method: &lt;span style=&quot;color:#e6db74&quot;&gt;:get&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;do&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;|&lt;/span&gt;f&lt;span style=&quot;color:#f92672&quot;&gt;|&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now the form can take responsibility for setting each field&amp;rsquo;s value, allowing us
to simplify this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#f92672&quot;&gt;&amp;lt;%=&lt;/span&gt; f&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;date_field &lt;span style=&quot;color:#e6db74&quot;&gt;:available_on&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;value&lt;/span&gt;: @filters&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;available_on &lt;span style=&quot;color:#f92672&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Into this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#f92672&quot;&gt;&amp;lt;%=&lt;/span&gt; f&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;date_field &lt;span style=&quot;color:#e6db74&quot;&gt;:available_on&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When we make this change, the &lt;code&gt;:available_on&lt;/code&gt; param will no longer be on the
top-level of the &lt;code&gt;params&lt;/code&gt; object, but rather grouped under a &lt;code&gt;filter&lt;/code&gt; key, so we
need to update the controller action to match:&lt;/p&gt;
&lt;div class=&quot;aside-wrap&quot;&gt;
  &lt;p class=&quot;aside&quot;&gt;This change has the added benefit of passing to &lt;code&gt;Filter.new&lt;/code&gt; only what fields
are actually present, whereas passing &lt;code&gt;nil&lt;/code&gt; or &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt; explicitly to keyword
arguments would defeat most approaches to setting default values in an
initializer.&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;@filter &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;Filter&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;new(params&lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;:filter&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;].&lt;/span&gt;permit(&lt;span style=&quot;color:#e6db74&quot;&gt;:available_on&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Because this change removes our &lt;code&gt;|| Time.zone.today&lt;/code&gt; short-circuit, we&amp;rsquo;ll need a
different way to set a default value for the &lt;code&gt;available_on&lt;/code&gt;. Good news: the
Attributes API can help us here, too! All we need to do is add a &lt;code&gt;default:&lt;/code&gt; to
the attribute definition:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;attribute &lt;span style=&quot;color:#e6db74&quot;&gt;:available_on&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;:date&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;default&lt;/span&gt;: &lt;span style=&quot;color:#f92672&quot;&gt;-&amp;gt;&lt;/span&gt; { &lt;span style=&quot;color:#66d9ef&quot;&gt;Time&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;zone&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;today }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&quot;array-attributes-pair-well-with-multi-select-fields&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#array-attributes-pair-well-with-multi-select-fields&quot;&gt;Array attributes pair well with multi-select fields&lt;/a&gt;
  
&lt;/h2&gt;
&lt;p&gt;Dates are relatively straightforward, but what about groups of checkboxes‚Äîlike
the ones pictured above, allowing users to filter items by color? Because the
Attributes API is the same code that enables &lt;a href=&quot;https://guides.rubyonrails.org/active_record_postgresql.html#array&quot;&gt;Active Record to support Postgres
Array
columns&lt;/a&gt;, we
can create array attributes here, as well!&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s define a &lt;code&gt;colors&lt;/code&gt; array attribute to our filter:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;attribute &lt;span style=&quot;color:#e6db74&quot;&gt;:colors&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;array&lt;/span&gt;: &lt;span style=&quot;color:#66d9ef&quot;&gt;true&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;default&lt;/span&gt;: &lt;span style=&quot;color:#f92672&quot;&gt;-&amp;gt;&lt;/span&gt; { &lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;royal_blue&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;]&lt;/span&gt; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And add them to our form:&lt;/p&gt;
&lt;div class=&quot;aside-wrap&quot;&gt;
  &lt;p class=&quot;aside&quot;&gt;The call to
&lt;a href=&quot;https://api.rubyonrails.org/classes/ActionView/Helpers/FormOptionsHelper.html#method-i-collection_check_boxes&quot;&gt;collection_check_boxes&lt;/a&gt;
is a little tricky, because the method expects as its third and fourth arguments
the names of methods for each element&amp;rsquo;s value and name, respectively.  Since
we&amp;rsquo;re passing a 2D array, we can tell Rails to call &lt;code&gt;Array#first&lt;/code&gt; and
&lt;code&gt;Array#second&lt;/code&gt; on each item and it&amp;rsquo;ll &amp;ldquo;just work&amp;rdquo;&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#f92672&quot;&gt;&amp;lt;%=&lt;/span&gt; f&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;collection_check_boxes &lt;span style=&quot;color:#e6db74&quot;&gt;:colors&lt;/span&gt;, &lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt;
  &lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;blue&amp;#34;&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;Blue&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;]&lt;/span&gt;,
  &lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;royal_blue&amp;#34;&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;Royal Blue&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;]&lt;/span&gt;,
  &lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;navy_blue&amp;#34;&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;Navy Blue&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;]&lt;/span&gt;,
  &lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;raspberry_blue&amp;#34;&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;Blue Raspberry&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;]&lt;/span&gt;
&lt;span style=&quot;color:#f92672&quot;&gt;]&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;:first&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;:second&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And pass them to &lt;code&gt;Filter.new&lt;/code&gt; (note that &lt;code&gt;permit&lt;/code&gt; requires us to pass &lt;code&gt;colors&lt;/code&gt;
as an array):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;@filter &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;Filter&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;new(
  params&lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;:filter&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;].&lt;/span&gt;permit(&lt;span style=&quot;color:#e6db74&quot;&gt;:available_on&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;colors&lt;/span&gt;: &lt;span style=&quot;color:#f92672&quot;&gt;[]&lt;/span&gt;)
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s all we need to see the checkboxes appear correctly on initial and
post-submission renders of the form. If you look at the value returned, you&amp;rsquo;ll
see an extra element with an empty string (due to a hidden field that Rails
includes to ensure a value is submitted even if no items are checked):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#f92672&quot;&gt;&amp;gt;&lt;/span&gt; @filter&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;colors
&lt;span style=&quot;color:#f92672&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;royal_blue&amp;#34;&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;navy_blue&amp;#34;&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;raspberry_blue&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can work around this by either passing &lt;code&gt;include_hidden: false&lt;/code&gt; to
&lt;code&gt;collection_check_boxes&lt;/code&gt; or defining a custom &lt;code&gt;colors=&lt;/code&gt; writer to scrub the
blank value (impressively, the latter will also correctly handle any &lt;code&gt;colors&lt;/code&gt;
passed to the initializer):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;Filter&lt;/span&gt;
  &lt;span style=&quot;color:#75715e&quot;&gt;# ‚Ä¶&lt;/span&gt;
  &lt;span style=&quot;color:#66d9ef&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;colors&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;(colors)
    &lt;span style=&quot;color:#66d9ef&quot;&gt;super&lt;/span&gt;(colors&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;reject(&lt;span style=&quot;color:#f92672&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;:blank?&lt;/span&gt;))
  &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&quot;writing-validations-for-our-attributes&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#writing-validations-for-our-attributes&quot;&gt;Writing validations for our attributes&lt;/a&gt;
  
&lt;/h2&gt;
&lt;p&gt;Validations are another great feature of Active Record, but because they&amp;rsquo;re
actually implemented on &lt;code&gt;ActiveModel::Model&lt;/code&gt; we also have access to the
&lt;a href=&quot;https://guides.rubyonrails.org/v7.0/active_record_validations.html&quot;&gt;validations
API&lt;/a&gt; in our
&lt;code&gt;Filter&lt;/code&gt; objects, as well! (Earlier, we included &lt;code&gt;ActiveModel::Model&lt;/code&gt; along with
&lt;code&gt;ActiveModel::Attributes&lt;/code&gt; to ensure the initializer was set up appropriately.)&lt;/p&gt;
&lt;p&gt;For this example, let&amp;rsquo;s start by adding a min and max price as attributes to
&lt;code&gt;Filter&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;attribute &lt;span style=&quot;color:#e6db74&quot;&gt;:min_price&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;:float&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;default&lt;/span&gt;: &lt;span style=&quot;color:#f92672&quot;&gt;-&amp;gt;&lt;/span&gt; { &lt;span style=&quot;color:#ae81ff&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#ae81ff&quot;&gt;00&lt;/span&gt; }
attribute &lt;span style=&quot;color:#e6db74&quot;&gt;:max_price&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;:float&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;default&lt;/span&gt;: &lt;span style=&quot;color:#f92672&quot;&gt;-&amp;gt;&lt;/span&gt; { &lt;span style=&quot;color:#ae81ff&quot;&gt;100&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#ae81ff&quot;&gt;00&lt;/span&gt; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And form fields:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-fallback&quot; data-lang=&quot;fallback&quot;&gt;&amp;lt;%= f.number_field :min_price %&amp;gt;
&amp;lt;%= f.number_field :max_price %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then update the controller&amp;rsquo;s invocation of &lt;code&gt;Filter.new&lt;/code&gt; to include them:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;@filter &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;Filter&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;new(params&lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;:filter&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;].&lt;/span&gt;permit(
  &lt;span style=&quot;color:#e6db74&quot;&gt;:available_on&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;:min_price&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;:max_price&lt;/span&gt;,
  &lt;span style=&quot;color:#e6db74&quot;&gt;colors&lt;/span&gt;: &lt;span style=&quot;color:#f92672&quot;&gt;[]&lt;/span&gt;
))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Out of the box, there&amp;rsquo;s nothing stopping a user from specifying a minimum price
that&amp;rsquo;s higher than the maximum price. We could attempt to handle that edge case
gracefully by adding a simple validation to ensure that &lt;code&gt;max_price&lt;/code&gt; is equal to
or less than &lt;code&gt;min_price&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But since this class only exists in memory, maybe it makes sense to do something
less drastic than show the user an error message.  Here&amp;rsquo;s how we might simply
clamp the &lt;code&gt;min_price&lt;/code&gt; field&amp;rsquo;s value to ensure it does not exceed the max:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;Filter&lt;/span&gt;
  &lt;span style=&quot;color:#75715e&quot;&gt;# ‚Ä¶&lt;/span&gt;
  validate &lt;span style=&quot;color:#e6db74&quot;&gt;:min_isnt_more_than_max&lt;/span&gt;
  &lt;span style=&quot;color:#66d9ef&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;min_isnt_more_than_max&lt;/span&gt;
    &lt;span style=&quot;color:#66d9ef&quot;&gt;if&lt;/span&gt; min_price &lt;span style=&quot;color:#f92672&quot;&gt;&amp;gt;&lt;/span&gt; max_price
      self&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;min_price &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; max_price
    &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
  &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then if we update our controller action to call &lt;code&gt;@filter.validate&lt;/code&gt; before
rendering the form, any &lt;code&gt;min_price&lt;/code&gt; that exceeded the &lt;code&gt;max_price&lt;/code&gt; would be set
to the value of &lt;code&gt;max_price&lt;/code&gt;. Nice!&lt;/p&gt;



&lt;h2 id=&quot;defining-custom-attribute-types&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#defining-custom-attribute-types&quot;&gt;Defining custom attribute types&lt;/a&gt;
  
&lt;/h2&gt;
&lt;p&gt;Discerning readers will have grimaced when they saw a monetary attribute being
set to a &lt;code&gt;float&lt;/code&gt;. Currency values are often used in math, and combining
&lt;a href=&quot;https://en.wikipedia.org/wiki/IEEE_754-2008_revision&quot;&gt;fractional floats with
division&lt;/a&gt; is a great way
to end up with an inexact result. Instead, many people store the fractional
portion (cents, in the case of dollars) as an integer and then convert the value
to an accuracy-preserving
&lt;a href=&quot;https://ruby-doc.org/stdlib-3.1.2/libdoc/bigdecimal/rdoc/BigDecimal.html&quot;&gt;BigDecimal&lt;/a&gt;
or &lt;code&gt;String&lt;/code&gt; representation when presenting the value to a user.&lt;/p&gt;
&lt;p&gt;The Attributes API gives us &lt;a href=&quot;https://api.rubyonrails.org/classes/ActiveRecord/Attributes/ClassMethods.html&quot;&gt;a
mechanism&lt;/a&gt;
for defining and registering custom types that can be helpful in accomplishing
this sort of type bifurcation. It&amp;rsquo;s primarily designed for serializing values to
the database and deserializing values from the database, however, so it&amp;rsquo;s a
little finnicky for use in stateless forms (as you&amp;rsquo;ll soon see).&lt;/p&gt;
&lt;p&gt;Below, we&amp;rsquo;ll create a custom type that defines a &lt;code&gt;cast&lt;/code&gt; method which will branch
on the not-completely-bulletproof heuristic of assuming &lt;code&gt;Numeric&lt;/code&gt; values are
already in cents and any other values will need to be converted from dollars.
This should work in our simple case, because every value from the form
submission will be a &lt;code&gt;String&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;So we could start with a custom type like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;Cents&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;::&lt;/span&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;Type&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;::&lt;/span&gt;Integer
  &lt;span style=&quot;color:#66d9ef&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;cast&lt;/span&gt;(value)
    &lt;span style=&quot;color:#66d9ef&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;super&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;if&lt;/span&gt; value&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;is_a?(&lt;span style=&quot;color:#66d9ef&quot;&gt;Numeric&lt;/span&gt;)

    price_in_dollars &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; value&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;to_s&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;delete(&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;)&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;to_d
    price_in_cents &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; (price_in_dollars &lt;span style=&quot;color:#f92672&quot;&gt;*&lt;/span&gt; &lt;span style=&quot;color:#ae81ff&quot;&gt;100&lt;/span&gt;)&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;to_i
    &lt;span style=&quot;color:#66d9ef&quot;&gt;super&lt;/span&gt;(price_in_cents)
  &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This way, if a string is set to an attribute of this type (whether from the form
via an initializer or by the setter method), any non-&lt;code&gt;Numeric&lt;/code&gt; values will be
assumed to be dollar representations and converted to cent integers. And if a
&lt;code&gt;Numeric&lt;/code&gt; value is set (for example, if we manually construct the value object
from code), it will be left unchanged.&lt;/p&gt;
&lt;p&gt;Next, we can globally register our custom attribute type to a symbol name:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;ActiveModel&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;::&lt;/span&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;Type&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;register(&lt;span style=&quot;color:#e6db74&quot;&gt;:cents&lt;/span&gt;, &lt;span style=&quot;color:#66d9ef&quot;&gt;Cents&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then we can update our price attributes to use the new type:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;attribute &lt;span style=&quot;color:#e6db74&quot;&gt;:min_price&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;:cents&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;default&lt;/span&gt;: &lt;span style=&quot;color:#f92672&quot;&gt;-&amp;gt;&lt;/span&gt; { &lt;span style=&quot;color:#ae81ff&quot;&gt;50_00&lt;/span&gt; }
attribute &lt;span style=&quot;color:#e6db74&quot;&gt;:max_price&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;:cents&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;default&lt;/span&gt;: &lt;span style=&quot;color:#f92672&quot;&gt;-&amp;gt;&lt;/span&gt; { &lt;span style=&quot;color:#ae81ff&quot;&gt;100_00&lt;/span&gt; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that we also updated our default values from floats to integer cent values.&lt;/p&gt;
&lt;p&gt;Now, and here&amp;rsquo;s the tricky part: how do we make the form display these cent
values as dollars? The Attributes API itself doesn&amp;rsquo;t expose any presentational
methods that might do this for us, so we need to define a method that will
convert integral cents to dollars. Here&amp;rsquo;s a class method we could add to &lt;code&gt;Cents&lt;/code&gt;
that converts them to strings, replete with a leading &lt;code&gt;$&lt;/code&gt; character to be extra
fancy:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;Cents&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;::&lt;/span&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;Type&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;::&lt;/span&gt;Integer
  &lt;span style=&quot;color:#66d9ef&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;self&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#a6e22e&quot;&gt;dollarize&lt;/span&gt;(value)
    price_in_cents &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; value&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;to_d
    &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;$&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;#{&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;%.2f&amp;#34;&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;%&lt;/span&gt; (price_in_cents &lt;span style=&quot;color:#f92672&quot;&gt;/&lt;/span&gt; &lt;span style=&quot;color:#ae81ff&quot;&gt;100&lt;/span&gt;)&lt;span style=&quot;color:#e6db74&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;&lt;/span&gt;
  &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
  &lt;span style=&quot;color:#75715e&quot;&gt;# ‚Ä¶&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Again, because this is a custom method, we need to call it from the form, which
we can do by referencing the attribute value from the form builder, like so:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-fallback&quot; data-lang=&quot;fallback&quot;&gt;Min:
&amp;lt;%= f.text_field :min_price, value: Cents.dollarize(f.object.min_price) %&amp;gt;
Max:
&amp;lt;%= f.text_field :max_price, value: Cents.dollarize(f.object.max_price) %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This approach effectively split our value between a presentational mode (string
dollars) and a more useful and portable logical value (integer cents).  Caution
is warranted, though. Introducing a custom attribute type is a significant
enough deviation from the path of least surprise that I&amp;rsquo;d only consider doing so
if it provided enough meaningful expressiveness to make up for the added code
complexity.&lt;/p&gt;



&lt;h2 id=&quot;building-dynamic-forms-with-nested-attributes&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#building-dynamic-forms-with-nested-attributes&quot;&gt;Building dynamic forms with nested attributes&lt;/a&gt;
  
&lt;/h2&gt;
&lt;p&gt;Suppose that we decide to expand the feature&amp;rsquo;s functionality so that the number
and kinds of filter fields can vary dynamically. To accommodate this, we would
need to split up our &lt;code&gt;Filter&lt;/code&gt; object to support a form that grows and shrinks to
allow arbitrarily many criteria types.&lt;/p&gt;
&lt;div class=&quot;aside-wrap&quot;&gt;
  &lt;p class=&quot;aside&quot;&gt;If you&amp;rsquo;ve ever tried to generate &lt;code&gt;f.fields_for&lt;/code&gt; over a loop of nested hashes or
&lt;code&gt;Struct&lt;/code&gt; objects, it&amp;rsquo;s likely that all you remember is how painful it was.
Rather than document the four or five edge cases that one needs to cover when
manually generating nested fields, I&amp;rsquo;ll instead ask you take my word for it that
iterating over an array of &lt;code&gt;ActiveModel::Attributes&lt;/code&gt; objects is a &lt;em&gt;lot&lt;/em&gt;
easier.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;We&amp;rsquo;ve built up quite a lot of the code in this post line-by-line, but the best
way to illustrate this more fundamental change is to share it all at once.&lt;/p&gt;
&lt;p&gt;First, if we decide to extract each category of criteria out of the &lt;code&gt;Filter&lt;/code&gt;
class and into its own standalone class, here&amp;rsquo;s what it might look like if we
were trying not to get too fancy with metaprogramming:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;module&lt;/span&gt; Criteria
  &lt;span style=&quot;color:#66d9ef&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;self&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#a6e22e&quot;&gt;type_for&lt;/span&gt;(name)
    all&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;find { &lt;span style=&quot;color:#f92672&quot;&gt;|&lt;/span&gt;criteria_type&lt;span style=&quot;color:#f92672&quot;&gt;|&lt;/span&gt;
      criteria_type&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;type_name&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;to_s &lt;span style=&quot;color:#f92672&quot;&gt;==&lt;/span&gt; name&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;to_s
    }
  &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;

  &lt;span style=&quot;color:#66d9ef&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;self&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#a6e22e&quot;&gt;all&lt;/span&gt;
    &lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt;
      &lt;span style=&quot;color:#66d9ef&quot;&gt;Price&lt;/span&gt;,
      &lt;span style=&quot;color:#66d9ef&quot;&gt;AvailableOn&lt;/span&gt;,
      &lt;span style=&quot;color:#66d9ef&quot;&gt;Colors&lt;/span&gt;
    &lt;span style=&quot;color:#f92672&quot;&gt;]&lt;/span&gt;
  &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;

  &lt;span style=&quot;color:#66d9ef&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;Base&lt;/span&gt;
    &lt;span style=&quot;color:#66d9ef&quot;&gt;include&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;ActiveModel&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;::&lt;/span&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;Model&lt;/span&gt;
    &lt;span style=&quot;color:#66d9ef&quot;&gt;include&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;ActiveModel&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;::&lt;/span&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;Attributes&lt;/span&gt;

    attribute &lt;span style=&quot;color:#e6db74&quot;&gt;:id&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;:integer&lt;/span&gt;
  &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;

  &lt;span style=&quot;color:#66d9ef&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;Price&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;Base&lt;/span&gt;
    attribute &lt;span style=&quot;color:#e6db74&quot;&gt;:min_price&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;:float&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;default&lt;/span&gt;: &lt;span style=&quot;color:#ae81ff&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#ae81ff&quot;&gt;00&lt;/span&gt;
    attribute &lt;span style=&quot;color:#e6db74&quot;&gt;:max_price&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;:float&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;default&lt;/span&gt;: &lt;span style=&quot;color:#ae81ff&quot;&gt;100&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#ae81ff&quot;&gt;00&lt;/span&gt;

    &lt;span style=&quot;color:#66d9ef&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;self&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#a6e22e&quot;&gt;type_name&lt;/span&gt;
      &lt;span style=&quot;color:#e6db74&quot;&gt;:price&lt;/span&gt;
    &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
  &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;

  &lt;span style=&quot;color:#66d9ef&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;AvailableOn&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;Base&lt;/span&gt;
    attribute &lt;span style=&quot;color:#e6db74&quot;&gt;:date&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;:date&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;default&lt;/span&gt;: &lt;span style=&quot;color:#66d9ef&quot;&gt;Time&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;zone&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;today

    &lt;span style=&quot;color:#66d9ef&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;self&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#a6e22e&quot;&gt;type_name&lt;/span&gt;
      &lt;span style=&quot;color:#e6db74&quot;&gt;:available_on&lt;/span&gt;
    &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
  &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;

  &lt;span style=&quot;color:#66d9ef&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;Colors&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;Base&lt;/span&gt;
    attribute &lt;span style=&quot;color:#e6db74&quot;&gt;:colors&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;array&lt;/span&gt;: &lt;span style=&quot;color:#66d9ef&quot;&gt;true&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;default&lt;/span&gt;: &lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;royal_blue&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;]&lt;/span&gt;

    &lt;span style=&quot;color:#66d9ef&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;self&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#a6e22e&quot;&gt;type_name&lt;/span&gt;
      &lt;span style=&quot;color:#e6db74&quot;&gt;:colors&lt;/span&gt;
    &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;

    &lt;span style=&quot;color:#66d9ef&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;self&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#a6e22e&quot;&gt;supported_colors&lt;/span&gt;
      &lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt;
        &lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;blue&amp;#34;&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;Blue&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;]&lt;/span&gt;,
        &lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;royal_blue&amp;#34;&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;Royal Blue&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;]&lt;/span&gt;,
        &lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;navy_blue&amp;#34;&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;Navy Blue&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;]&lt;/span&gt;,
        &lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;raspberry_blue&amp;#34;&lt;/span&gt;, &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;Blue Raspberry&amp;#34;&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;]&lt;/span&gt;
      &lt;span style=&quot;color:#f92672&quot;&gt;]&lt;/span&gt;
    &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;

    &lt;span style=&quot;color:#66d9ef&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;colors&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt;(colors)
      &lt;span style=&quot;color:#66d9ef&quot;&gt;super&lt;/span&gt;(colors&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;select(&lt;span style=&quot;color:#f92672&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;:present?&lt;/span&gt;))
    &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
  &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It&amp;rsquo;s longer, sure, but ready to be mixed and matched!&lt;/p&gt;
&lt;p&gt;Next, we would need to rewrite our controller action to consider both the
initial render flow as well as each re-render when the form is updated:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;ItemsController&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span style=&quot;color:#66d9ef&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#a6e22e&quot;&gt;index&lt;/span&gt;
    @items &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;Item&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;all
    @criteria &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;if&lt;/span&gt; params&lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;:criteria_attributes&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;].&lt;/span&gt;present? &lt;span style=&quot;color:#f92672&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; params&lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;:commit&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;]&lt;/span&gt; &lt;span style=&quot;color:#f92672&quot;&gt;!=&lt;/span&gt; &lt;span style=&quot;color:#e6db74&quot;&gt;&amp;#34;Reset&amp;#34;&lt;/span&gt;
      params&lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;:criteria_attributes&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;].&lt;/span&gt;values&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;map { &lt;span style=&quot;color:#f92672&quot;&gt;|&lt;/span&gt;criteria&lt;span style=&quot;color:#f92672&quot;&gt;|&lt;/span&gt;
        criteria_class &lt;span style=&quot;color:#f92672&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color:#66d9ef&quot;&gt;Criteria&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;type_for(criteria&lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color:#e6db74&quot;&gt;:type_name&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;]&lt;/span&gt;)
        criteria_class&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;new(criteria&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;except(&lt;span style=&quot;color:#e6db74&quot;&gt;:type_name&lt;/span&gt;))
      }
    &lt;span style=&quot;color:#66d9ef&quot;&gt;else&lt;/span&gt;
      &lt;span style=&quot;color:#f92672&quot;&gt;[&lt;/span&gt;
        &lt;span style=&quot;color:#66d9ef&quot;&gt;Criteria&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;::&lt;/span&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;Price&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;new(id: &lt;span style=&quot;color:#ae81ff&quot;&gt;0&lt;/span&gt;),
        &lt;span style=&quot;color:#66d9ef&quot;&gt;Criteria&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;::&lt;/span&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;AvailableOn&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;new(id: &lt;span style=&quot;color:#ae81ff&quot;&gt;1&lt;/span&gt;),
        &lt;span style=&quot;color:#66d9ef&quot;&gt;Criteria&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;::&lt;/span&gt;&lt;span style=&quot;color:#66d9ef&quot;&gt;Colors&lt;/span&gt;&lt;span style=&quot;color:#f92672&quot;&gt;.&lt;/span&gt;new(id: &lt;span style=&quot;color:#ae81ff&quot;&gt;2&lt;/span&gt;)
      &lt;span style=&quot;color:#f92672&quot;&gt;]&lt;/span&gt;
    &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
  &lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;
&lt;span style=&quot;color:#66d9ef&quot;&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that the &lt;code&gt;else&lt;/code&gt; expression above is the base case for rendering an empty
form, and it&amp;rsquo;s here that we define which &lt;code&gt;Criteria&lt;/code&gt; classes are instantiated and
in what order. Also, it&amp;rsquo;s worth noting that any object passed to &lt;code&gt;fields_for&lt;/code&gt;
must return a distinct &lt;code&gt;id&lt;/code&gt; in order for Rails to keep it separate it from its
siblings in &lt;code&gt;params&lt;/code&gt;. The value itself doesn&amp;rsquo;t matter, but keeping it sequential
makes it easier to debug.&lt;/p&gt;
&lt;p&gt;The last big change is to the view:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-fallback&quot; data-lang=&quot;fallback&quot;&gt;&amp;lt;div&amp;gt;
  &amp;lt;%= form_with url: items_path, method: :get do |f| %&amp;gt;
    &amp;lt;ol&amp;gt;
      &amp;lt;% @criteria.each.with_index do |criteria, i| %&amp;gt;
        &amp;lt;li&amp;gt;
          &amp;lt;%= f.fields_for &amp;#34;criteria_attributes[]&amp;#34;, criteria do |ff| %&amp;gt;
            &amp;lt;%= ff.hidden_field :id, value: i %&amp;gt;
            &amp;lt;%= ff.hidden_field :type_name, value: criteria.class.type_name %&amp;gt;
            &amp;lt;%= render partial: criteria.class.type_name.to_s,
              locals: { ff: ff }
            %&amp;gt;
          &amp;lt;% end %&amp;gt;
        &amp;lt;/li&amp;gt;
      &amp;lt;% end %&amp;gt;
    &amp;lt;/ol&amp;gt;
    &amp;lt;div&amp;gt;
      &amp;lt;%= f.submit value: &amp;#34;Reset&amp;#34; %&amp;gt;
      &amp;lt;%= f.submit value: &amp;#34;Update&amp;#34; %&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;% end %&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Each of the form fields would then reside in a partial matching their class&amp;rsquo;s
&lt;code&gt;type_name&lt;/code&gt;. In &lt;code&gt;app/views/items/_available_on.html.erb&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-fallback&quot; data-lang=&quot;fallback&quot;&gt;&amp;lt;%= ff.date_field :date %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In &lt;code&gt;app/views/items/_colors.html.erb&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-fallback&quot; data-lang=&quot;fallback&quot;&gt;&amp;lt;%= ff.collection_check_boxes :colors,
  Criteria::Colors.supported_colors, :first, :second %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And in &lt;code&gt;app/views/items/_price.html.erb&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot; style=&quot;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&quot;&gt;&lt;code class=&quot;language-fallback&quot; data-lang=&quot;fallback&quot;&gt;Min: &amp;lt;%= ff.number_field :min_price %&amp;gt;
Max: &amp;lt;%= ff.number_field :max_price %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In aggregate, this might feel like a lot of code, but hopefully it provides some
clarity and may even serve as a starting point if you&amp;rsquo;re looking to build
something similar.&lt;/p&gt;



&lt;h2 id=&quot;the-rail-less-traveled&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#the-rail-less-traveled&quot;&gt;The rail less traveled&lt;/a&gt;
  
&lt;/h2&gt;
&lt;p&gt;When working with Ruby on Rails, it can often feel like any deviation from &amp;ldquo;The
Rails Way&amp;rdquo; is akin to voiding the warranty on a new car: whatever goes wrong,
you&amp;rsquo;re on your own. There were times when this rang true, but it&amp;rsquo;s genuinely
impressive how modular Rails has become without sacrificing the
batteries-included defaults that made it famous. And while Rails 7 is still very
much &lt;a href=&quot;https://dhh.dk/2012/rails-is-omakase.html&quot;&gt;omakase&lt;/a&gt;, it&amp;rsquo;s never been more
accommodating of individual dietary restrictions.&lt;/p&gt;
&lt;p&gt;This problem also serves as an interesting example of the tension between
lexical complexity‚Äîthat is, how much code we carry and how gnarly it is to
maintain‚Äîas compared to operational complexity‚Äîthe actual actions a program
takes when it is run. Because Rails makes the reasonable assumption that most
forms are backed by a database record, writing a database-free form that
performs many fewer operations at run-time actually requires significantly &lt;em&gt;more
code&lt;/em&gt;.  Both computing resources and programmer time cost money, but striking
the right balance of trade-offs like these often requires careful thought and
lots of context.&lt;/p&gt;
&lt;p&gt;If your team could use more developers who appreciate the nuanced decisions
needed to write great software, then you&amp;rsquo;re in luck‚Äîthat&amp;rsquo;s exactly what Test
Double &lt;a href=&quot;https://testdouble.com/services&quot;&gt;sells&lt;/a&gt;! We&amp;rsquo;d love to &lt;a href=&quot;https://testdouble.com/contact&quot;&gt;talk to
you&lt;/a&gt; if you might be able to use our help. üíö&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Double Agent Profile: Robby Thompson</title>
      <link>https://blog.testdouble.com/posts/2022-08-23-agent-profile-robby-thompson/</link>
      <pubDate>Tue, 23 Aug 2022 00:00:00 +0000</pubDate>
      
      
      <author>hello+rss@testdouble.com (Robby Thompson)</author>
      <guid>https://blog.testdouble.com/posts/2022-08-23-agent-profile-robby-thompson/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Name:&lt;/strong&gt; Robby Thompson&lt;br&gt;
&lt;strong&gt;Designation:&lt;/strong&gt; Agent 00119&lt;br&gt;
&lt;strong&gt;Double Agent Role:&lt;/strong&gt;  Senior Software Engineer&lt;br&gt;
&lt;strong&gt;Special Skills:&lt;/strong&gt;  Being a mentor and willing to help out with just about anything&lt;br&gt;
&lt;strong&gt;Aliases:&lt;/strong&gt; &lt;a href=&quot;https://github.com/robsdudeson&quot;&gt;github/robsdudeson&lt;/a&gt;, &lt;a href=&quot;https://www.linkedin.com/in/robbythompson/&quot;&gt;linkedin/robby.thompson&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Location:&lt;/strong&gt; Circleville, OH&lt;br&gt;
&lt;strong&gt;Favorite Emoji:&lt;/strong&gt; &lt;img src=&quot;https://cdn-blog.testdouble.com/img/profile-robby-thompson/man-shrugging.aeaaf0679c510773bee2f4be3b17a67884223ab347a5c336fb54feb546c42178.png&quot; alt=&quot;man shrugging emoji&quot; /&gt;
&lt;/p&gt;



&lt;h3 id=&quot;what-impact-are-you-proudest-of-in-your-career&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#what-impact-are-you-proudest-of-in-your-career&quot;&gt;What impact are you proudest of in your career?&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;I can‚Äôt pinpoint a single moment or project that would qualify here.  However, what excites me is working with others on hard problems while helping them learn and strive for those ‚Äúah ha!‚Äù moments. I get more out of those experiences‚Äîwhen I‚Äôm with someone who I‚Äôve helped come around to a new understanding of something they‚Äôre working on. I especially enjoy helping more junior developers work through problems and seeing their thought process grow and evolve. I end up learning so much more about people and our industry from those sessions than I feel like I do when I work solo on a project or listen to a podcast.&lt;/p&gt;



&lt;h3 id=&quot;looking-ahead-what-has-you-most-excited-for-the-next-year-at-work&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#looking-ahead-what-has-you-most-excited-for-the-next-year-at-work&quot;&gt;Looking ahead, what has you most excited for the next year at work?&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;I‚Äôm hoping to be able to meet more of my fellow agents in person. With all of the lockdowns, and ongoing concerns, meeting folks since I started last October has been mostly virtual.&lt;/p&gt;



&lt;h3 id=&quot;what-is-your-favorite-thing-about-being-a-double-agent-at-test-double&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#what-is-your-favorite-thing-about-being-a-double-agent-at-test-double&quot;&gt;What is your favorite thing about being a Double Agent at Test Double?&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;It‚Äôs hard to nail down one thing as my favorite. I‚Äôve got two things that drew me and are keeping me at Test Double. One of those is our ability to come into a client‚Äôs environment and start adding value on day one. It&amp;rsquo;s really great to be able to come in and make an impact early on and watch it build as the engagement goes on. The other thing is our ability to branch out and grow based on our interests. From being able to spend time learning about some technology or skill with our personal development time, to knowing that client engagements will come to an end, there is no shortage of opportunity for learning and growth.&lt;/p&gt;



&lt;h3 id=&quot;what-do-you-think-makes-test-double-unique&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#what-do-you-think-makes-test-double-unique&quot;&gt;What do you think makes Test Double unique?&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;I think there are two main things that make Test Double unique:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Working with folks who all seem aligned on the same mission overall.&lt;/li&gt;
&lt;li&gt;Being employee owned.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are unique because in many environments I‚Äôve been in, folks are beholden mainly to products, business stakeholders, or shareholders. These folks are often different people, and therefore have conflicting goals. As a result, there tends to be more difficulty in attaining a decent solution that makes everyone happy without having to compromise big things along the way. With our mission being to help the world make better software, the fact that everyone here is constantly trying to level up their skills in the field, and we all have a real stake in the company, it really brings out a drive that is genuine and contagious.&lt;/p&gt;



&lt;h3 id=&quot;what-have-you-been-thinking-about-a-lot-lately-in-software-development-and-why&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#what-have-you-been-thinking-about-a-lot-lately-in-software-development-and-why&quot;&gt;What have you been thinking about a lot lately in software development, and why?&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;As someone new to consulting, I‚Äôve been thinking a lot about being someone with primarily a product background who can transition and share experiences to make client teams better. This has come with a lot of reading about other consultants‚Äô experience but also trying to forge relationships with peers at the client.&lt;/p&gt;



&lt;h3 id=&quot;tell-me-about-something-memorable-that-happened-to-you-and-what-you-learned-from-it&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#tell-me-about-something-memorable-that-happened-to-you-and-what-you-learned-from-it&quot;&gt;Tell me about something memorable that happened to you and what you learned from it.&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;There has been more than one time in my career when I put too much of myself into the work and lost sight of the important things. From spending 60-80 hours/week working to working so much in a short stint that I was taken to ER for stress related issues, I‚Äôve learned the importance of making sure there is some level of harmony with my obligations and things I enjoy doing. We‚Äôre here only for a brief time in the grand scale of it all; it‚Äôs not worth missing out on things that make life worth living to make a few more dollars or trying to climb some abstract hierarchy.&lt;/p&gt;



&lt;h3 id=&quot;what-has-you-most-excited-about-this-year-outside-of-work&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#what-has-you-most-excited-about-this-year-outside-of-work&quot;&gt;What has you most excited about this year outside of work?&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;I‚Äôm still coming down from a trip my family and I took to California in June.  We spent three weeks on the road with our pull-behind camper and drove to Phoenix then up to Lake Tahoe before coming home. Between all of that we stopped at five national parks, a few campgrounds, and some very memorable  boondocking spots. Beyond that, I‚Äôm looking forward to more camping (both with the camper and tent camping). Being on the road for those three weeks really reminded me how much I love being outside and sharing that experience with my family.&lt;/p&gt;



&lt;h3 id=&quot;what-bookpodcastmovietv-show-have-you-been-thinking-about-a-lot-lately-and-why&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#what-bookpodcastmovietv-show-have-you-been-thinking-about-a-lot-lately-and-why&quot;&gt;What book/podcast/movie/TV show have you been thinking about a lot lately, and why?&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;I recently finished up &lt;a href=&quot;https://en.wikipedia.org/wiki/The_Obstacle_Is_the_Way&quot;&gt;‚ÄúThe Obstacle is the Way‚Äù&lt;/a&gt; by Ryan Holiday. With everything going on in the world and just how life gets more complicated from year to year, I‚Äôve been reaching for a deeper, practical understanding of what it means ‚Äúto be.‚Äù  This has most recently pulled me into learning more about Stoicism through contemporary authors as well as the classics such as Marcus Aurelius, Socrates, and Seneca.&lt;/p&gt;



&lt;h3 id=&quot;what-is-the-biggest-lesson-the-pandemic-taught-you&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#what-is-the-biggest-lesson-the-pandemic-taught-you&quot;&gt;What is the biggest lesson the pandemic taught you?&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;To slow down and take stock periodically. In the early days of the pandemic, not being sure how bad things were going to get made me appreciate the fact that things shut down and I was able to spend more time with family since we couldn‚Äôt go anywhere. This just reminded me of the importance of not letting external factors get in the way of the connection I have with them.&lt;/p&gt;



&lt;h3 id=&quot;whats-something-interesting-about-you-thats-not-on-your-resume-or-linkedin&quot;&gt;
  
    &lt;a class=&quot;heading-anchor&quot; href=&quot;#whats-something-interesting-about-you-thats-not-on-your-resume-or-linkedin&quot;&gt;What‚Äôs something interesting about you that‚Äôs not on your resume or LinkedIn?&lt;/a&gt;
  
&lt;/h3&gt;
&lt;p&gt;A few years back, I helped build our current house. It was a situation where I was somewhat close to the builder and as a result, was able to pour the footers for the house, chip in on framing, some rough carpentry, and help on various levels on finishing the house. Outside of all of that, I wired my entire house and installed every fixture (with some consulting help from an electrician). This was honestly one of the coolest experiences in my life. From the physical labor to knowing that my family would be about to enjoy it for years to come is something I‚Äôm very proud of and really enjoyed doing.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This interview is based on shared documentation with Robby Thompson and Cathy Colliver. It may or may not self-destruct.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Debugging Ruby on Rails with Visual Studio Code</title>
      <link>https://blog.testdouble.com/talks/2022-08-22-debugging-ruby-on-rails-with-vscode/</link>
      <pubDate>Mon, 22 Aug 2022 00:00:00 +0000</pubDate>
      
      
      <author>justin@testdouble.com (Justin Searls)</author>
      <guid>https://blog.testdouble.com/talks/2022-08-22-debugging-ruby-on-rails-with-vscode/</guid>
      <description>&lt;p&gt;If you use VS Code for Ruby development or you&amp;rsquo;re looking for ways to improve
your debugging workflow in your Rails app, you&amp;rsquo;ll want to &lt;a href=&quot;https://youtu.be/e_RKkgiimXE&quot;&gt;check out this
screencast&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There have been a ton of quality of life improvements to Ruby over the past few
years, and one of the headline features of last year&amp;rsquo;s &lt;a href=&quot;https://www.ruby-lang.org/en/news/2021/12/25/ruby-3-1-0-released/&quot;&gt;3.1
release&lt;/a&gt; was
a dramatic overhaul of the long-neglected &lt;code&gt;lib/debug.rb&lt;/code&gt; as a new gem
&lt;a href=&quot;https://github.com/ruby/debug&quot;&gt;debug.gem&lt;/a&gt;, led by &lt;a href=&quot;https://github.com/ko1&quot;&gt;Koichi
Sasada&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Aside from providing a more pleasant, feature-rich command line interface with
many features you know and love from &lt;a href=&quot;https://github.com/pry/pry&quot;&gt;pry&lt;/a&gt; and
&lt;a href=&quot;https://github.com/deivid-rodriguez/byebug&quot;&gt;Byebug&lt;/a&gt;, the new debug gem can also
communicate with GUI front-ends like VS Code. This allows you to attach VS Code&amp;rsquo;s
IDE-like &lt;a href=&quot;https://code.visualstudio.com/docs/editor/debugging&quot;&gt;debugger
interface&lt;/a&gt; to any running
Ruby process without interfering with your shell&amp;rsquo;s &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams&quot;&gt;STDIN and
STDOUT&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is made all the more important if you&amp;rsquo;re starting a new app in Rails 7 and
using &lt;a href=&quot;https://github.com/evanw/esbuild&quot;&gt;esbuild&lt;/a&gt;, because Rails will generate a
new &lt;code&gt;bin/dev&lt;/code&gt; script that combines your Rails server, CSS watcher, and JS
bundler into a single process managed by
&lt;a href=&quot;https://github.com/ddollar/foreman&quot;&gt;foreman&lt;/a&gt;. This is really convenient for
running your Rails app with a single command, but it&amp;rsquo;s a nightmare for trying to
interrogate the system with an interactive debugger.&lt;/p&gt;
&lt;p&gt;But it turns out, it&amp;rsquo;s not a nightmare! It&amp;rsquo;s actually pretty awesome!&lt;/p&gt;
&lt;p&gt;As this screencast shows, you can have the best of all worlds if you launch your
Rails process with the new debug gem&amp;rsquo;s &lt;code&gt;rdbg&lt;/code&gt; command and then attach a remote
debugger separately. Not only do you get a single command to run your collective
development servers, you can easily set breakpoints and catch them right in your
editor!&lt;/p&gt;
&lt;p&gt;A couple other resources mentioned in the screencast:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Koichi&amp;rsquo;s awesome &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=KoichiSasada.vscode-rdbg&quot;&gt;rdbg extension for VS
Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ArturoDent.launch-config&quot;&gt;launch
configs&lt;/a&gt;
extension for running a custom launch config with a key binding&lt;/li&gt;
&lt;/ul&gt;
&lt;dl class=&quot;transcript transcript--inverted&quot; data-video-player-transcript&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;00:00&quot;&gt;00:00&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;(upbeat tune playing)&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;00:03&quot;&gt;00:03&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;- I am starting to play with VS Code, Visual Studio Code&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;00:06&quot;&gt;00:06&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and getting my Ruby on Rails configuration&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;00:09&quot;&gt;00:09&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;just how I like it.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;00:10&quot;&gt;00:10&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And one thing that I came across was that&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;00:12&quot;&gt;00:12&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;the debugging story has gotten very, very, very, very good&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;00:16&quot;&gt;00:16&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;in Ruby 3.1, where up until this point&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;00:19&quot;&gt;00:19&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;it actually lagged behind most other languages,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;00:22&quot;&gt;00:22&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;of course being super dynamic interpreted language,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;00:24&quot;&gt;00:24&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;you would expect that to a certain extent,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;00:28&quot;&gt;00:28&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;but Koichi Sasada in particular,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;00:30&quot;&gt;00:30&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;has really put in a lot of work&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;00:31&quot;&gt;00:31&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;to modernize the Ruby builtin debugging facilities&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;00:36&quot;&gt;00:36&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;as well as a gem called debug&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;00:39&quot;&gt;00:39&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;that will allow us to actually use&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;00:41&quot;&gt;00:41&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;the native VS Code debugger to debug our stuff.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;00:45&quot;&gt;00:45&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And I just discovered this yesterday&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;00:46&quot;&gt;00:46&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and I realize a lot of people probably don't know this yet.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;00:48&quot;&gt;00:48&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So I'm going to walk through a little bit&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;00:50&quot;&gt;00:50&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;of like the Rails, so using Ruby on Rails 7.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;00:53&quot;&gt;00:53&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;A little bit about like why debugging has gotten trickier&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;00:56&quot;&gt;00:56&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;even though it's gotten more advanced for Rails 7,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;01:02&quot;&gt;01:02&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;as well as how to wire everything up to VS Code.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;01:05&quot;&gt;01:05&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So you can use like a nice vanilla out of the box&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;01:07&quot;&gt;01:07&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Rails 7 installation, and also take advantage&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;01:10&quot;&gt;01:10&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;of the new fancy debugging facilities&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;01:13&quot;&gt;01:13&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;that are much more native feeling in something&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;01:15&quot;&gt;01:15&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;like VS Code and, and surely other, you know, kind of&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;01:18&quot;&gt;01:18&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;like more batteries included editors like RubyMine.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;01:21&quot;&gt;01:21&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;All right, So we're gonna start&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;01:23&quot;&gt;01:23&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;with just making a new application, I suppose.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;01:29&quot;&gt;01:29&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So let's go into a code directory&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;01:31&quot;&gt;01:31&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and I'm gonna make a new,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;01:35&quot;&gt;01:35&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;well, first of all let's check our versions, right,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;01:36&quot;&gt;01:36&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;because time keeps moving.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;01:41&quot;&gt;01:41&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;I'm not great at typing.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;01:42&quot;&gt;01:42&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Okay. So we're on Ruby 3.1.2 Rails 7.0.3.1.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;01:46&quot;&gt;01:46&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;We're gonna make a Rails new app.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;01:48&quot;&gt;01:48&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;We're gonna call it rebug.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;01:50&quot;&gt;01:50&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And this time we're gonna use esbuild as opposed&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;01:53&quot;&gt;01:53&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;to Webpacker, or as opposed to, you know, Sprockets&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;01:57&quot;&gt;01:57&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;for a JavaScript concatenation.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;01:59&quot;&gt;01:59&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And we're also gonna set it up to say&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:00&quot;&gt;02:00&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;hey we wanna use tailwind for CSS.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:04&quot;&gt;02:04&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;We're not gonna actually write any tailwind today&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:05&quot;&gt;02:05&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;but I wanna create an environment and then,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:08&quot;&gt;02:08&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;oh yeah and Propshaft as opposed to Sprocket.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:10&quot;&gt;02:10&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So, so Propshaft is a more modern, more live,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:14&quot;&gt;02:14&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;simple&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:16&quot;&gt;02:16&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;asset&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:18&quot;&gt;02:18&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;pipeline&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:19&quot;&gt;02:19&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Asset manager to like do the stuff&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:21&quot;&gt;02:21&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;with the application dot CSS and, and&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:23&quot;&gt;02:23&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;application dot JS without necessarily like considering&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:28&quot;&gt;02:28&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;all the stuff Sprockets had to do with like stuff&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:31&quot;&gt;02:31&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;like actively transpiling CoffeeScript and SAS.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:34&quot;&gt;02:34&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So it's just a simpler one.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:36&quot;&gt;02:36&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;When we do a new application this way&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:39&quot;&gt;02:39&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;it's actually going to, by default,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:41&quot;&gt;02:41&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;create a procfile dot dev file.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:44&quot;&gt;02:44&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And when it creates that procfile dot dev,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:46&quot;&gt;02:46&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;that is like going to be actually invoked whenever&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:49&quot;&gt;02:49&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;we say bin slash dev.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:51&quot;&gt;02:51&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So you might be familiar with over the last many years,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:54&quot;&gt;02:54&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;running your Rails app in one terminal window,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:56&quot;&gt;02:56&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and then your Webpacker in another one,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;02:59&quot;&gt;02:59&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;because it's kind of gotten outta hand&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:01&quot;&gt;03:01&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;You can, you can see the procfile dot dev&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:05&quot;&gt;03:05&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;pop into rebug,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:08&quot;&gt;03:08&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;You can take a look at it.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:09&quot;&gt;03:09&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So here we have now a web process, a JavaScript process,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:13&quot;&gt;03:13&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and a CSS process, cause we're using JS bundling,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:15&quot;&gt;03:15&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;CSS bundling, and then of course&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:18&quot;&gt;03:18&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;you had to run your Rails server.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:19&quot;&gt;03:19&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And so that's just like, keeping three terminals open&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:20&quot;&gt;03:20&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;is too much and you can&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:22&quot;&gt;03:22&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;of course you can still go and run Rails s&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:25&quot;&gt;03:25&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and you can you can run yarn build and so forth,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:28&quot;&gt;03:28&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;but you can also run this new bin dev&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:31&quot;&gt;03:31&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;that's built in for you as a bin stub.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:33&quot;&gt;03:33&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And so it'll just&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:35&quot;&gt;03:35&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;All it does is make sure that that foreman is installed&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:38&quot;&gt;03:38&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and then it'll start foreman, nothing fancy.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:40&quot;&gt;03:40&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So if we run bin dev like that&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:41&quot;&gt;03:41&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;you'll get some color coding&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:42&quot;&gt;03:42&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and it'll run all three of these things at once.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:45&quot;&gt;03:45&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;All right.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:46&quot;&gt;03:46&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So that's our application, I suppose if I just run it now&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:50&quot;&gt;03:50&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and I let's say open up,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:58&quot;&gt;03:58&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Neat. All right,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;03:58&quot;&gt;03:58&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So I got a Rails thing.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;04:02&quot;&gt;04:02&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;I'm running my Rails&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;04:03&quot;&gt;04:03&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and now I'm gonna start writing some code.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;04:05&quot;&gt;04:05&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And like I said, I'm getting into VS Code.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;04:07&quot;&gt;04:07&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So we're gonna open up VS Code here.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;04:10&quot;&gt;04:10&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;All right, so I'm in VS Code,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;04:11&quot;&gt;04:11&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;everything is new again, nothing's committed.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;04:13&quot;&gt;04:13&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So we're just gonna ignore the commit status&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;04:15&quot;&gt;04:15&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;for everything today.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;04:16&quot;&gt;04:16&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And we're gonna make just a couple adjustments.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;04:19&quot;&gt;04:19&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;We're gonna start writing some code here.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;04:21&quot;&gt;04:21&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So I'm gonna get rid of the default Rails stuff.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;04:24&quot;&gt;04:24&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And I'm gonna say&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;04:25&quot;&gt;04:25&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;we're gonna cover resources called things.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;04:27&quot;&gt;04:27&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And the root of our application is gonna be things index&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;04:31&quot;&gt;04:31&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;which is gonna necessitate a things controller&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;04:35&quot;&gt;04:35&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;which we can take a look over here.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;04:38&quot;&gt;04:38&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;We can say, Hey, all right,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;04:39&quot;&gt;04:39&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So things controller dot RB,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;04:42&quot;&gt;04:42&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;boom.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;04:43&quot;&gt;04:43&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And then, I'm still getting used to the VIM emulation&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;04:47&quot;&gt;04:47&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;inside of this thing, it's pretty good. Fine.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;04:51&quot;&gt;04:51&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;I don't love it, but all the other kind of perks&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;04:54&quot;&gt;04:54&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;are enough to keep me interested.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;04:57&quot;&gt;04:57&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;All right.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;04:58&quot;&gt;04:58&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Let's see.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;04:59&quot;&gt;04:59&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Okay. So now I've got a things controller&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:03&quot;&gt;05:03&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;things index is my root,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:05&quot;&gt;05:05&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and I just wanna render&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:08&quot;&gt;05:08&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;some JSON.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:09&quot;&gt;05:09&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So let's say like&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:12&quot;&gt;05:12&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;now&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:14&quot;&gt;05:14&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and actually let's make a variable&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:16&quot;&gt;05:16&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;so we have something to debug.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:18&quot;&gt;05:18&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So now equals time dot zone dot new&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:25&quot;&gt;05:25&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;or time dot zone dot now?&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:27&quot;&gt;05:27&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;I always forget. Yeah. time dot zone dot now.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:28&quot;&gt;05:28&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Okay, so then we're gonna render some JSON now got it.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:31&quot;&gt;05:31&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And the standard of course&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:32&quot;&gt;05:32&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;is gonna remind me to remove the white space.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:35&quot;&gt;05:35&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;All right.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:36&quot;&gt;05:36&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So if I look at local host 3000, now I get my,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:41&quot;&gt;05:41&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;you can see it up in the corner, the JSON.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:43&quot;&gt;05:43&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;All right, neat.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:44&quot;&gt;05:44&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So let's say that I am in the, you know&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:49&quot;&gt;05:49&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;I want a debugger.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:50&quot;&gt;05:50&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Now you might be familiar with pry or byebug,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:53&quot;&gt;05:53&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;in Rails 7 They changed the default,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:55&quot;&gt;05:55&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and maybe this is starting with 3.1,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:57&quot;&gt;05:57&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;It would make sense if it was,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;05:58&quot;&gt;05:58&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;they changed the default to actually debug here.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;06:00&quot;&gt;06:00&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So you can see there's a whole guide&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;06:02&quot;&gt;06:02&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;on the changes to debugging.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;06:04&quot;&gt;06:04&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Here's the debug gem and which platforms it supports.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;06:07&quot;&gt;06:07&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And so we're gonna have a different set of commands now,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;06:11&quot;&gt;06:11&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;you can still use, Binding, IRB and other stuff,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;06:14&quot;&gt;06:14&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;but we're gonna just say&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;06:15&quot;&gt;06:15&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;debugger here to put in a debug point,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;06:17&quot;&gt;06:17&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and then gonna take a look at our terminal.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;06:21&quot;&gt;06:21&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Now, if I refresh the page at this point,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;06:23&quot;&gt;06:23&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;I do indeed catch the debugger.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;06:24&quot;&gt;06:24&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;You can see the debugger here,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;06:26&quot;&gt;06:26&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;you can see the nice, like, where am I?&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;06:28&quot;&gt;06:28&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;But like foreman and foreman-like stuff like&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;06:31&quot;&gt;06:31&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;I imagine Hivemind, Overmind and similar&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;06:34&quot;&gt;06:34&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;process splitting, aggregating tools&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;06:36&quot;&gt;06:36&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;for running multiple processes in one shell is not designed&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;06:40&quot;&gt;06:40&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;for like capturing standard in particularly gracefully.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;06:42&quot;&gt;06:42&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So if I wanna type like, okay, so now,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;06:45&quot;&gt;06:45&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;oh well that doesn't do what I want, really.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;06:47&quot;&gt;06:47&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And if I say C and I run, will it actually continue?&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;06:52&quot;&gt;06:52&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Like maybe not continue command completed, okay, cool.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;06:57&quot;&gt;06:57&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And so it's just like not a particularly graceful way&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;07:00&quot;&gt;07:00&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;to be like, all right.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;07:00&quot;&gt;07:00&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So LS now.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;07:04&quot;&gt;07:04&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And it didn't actually,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;07:05&quot;&gt;07:05&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;it's like list command.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;07:06&quot;&gt;07:06&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;It's clearly not picking up all&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;07:08&quot;&gt;07:08&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;of my keystrokes in order, which is to be expected.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;07:11&quot;&gt;07:11&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;I mean, that's not,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;07:13&quot;&gt;07:13&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;this is not like the most delightful debugging experience.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;07:16&quot;&gt;07:16&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So of course like what I could do&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;07:19&quot;&gt;07:19&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;if I killed everything,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;07:22&quot;&gt;07:22&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Okay, cool.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;07:23&quot;&gt;07:23&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So what I could do of course is I could just like&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;07:25&quot;&gt;07:25&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;go back to the, the good old days of running bin Rails S&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;07:28&quot;&gt;07:28&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and I could, let's say load this page again.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;07:32&quot;&gt;07:32&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Now I get my debugger and I can, you know, if you've&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;07:34&quot;&gt;07:34&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;if you used pry, there's a new outline command&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;07:38&quot;&gt;07:38&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;that'll give you all of the methods&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;07:40&quot;&gt;07:40&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;just like pry's LS command, which is really&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;07:43&quot;&gt;07:43&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;like my favorite reason for using pry's to figure out&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;07:45&quot;&gt;07:45&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;you know, like what are the methods on this thing?&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;07:48&quot;&gt;07:48&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And LS is indeed&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;07:51&quot;&gt;07:51&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;an alias of outline for people used to that,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;07:53&quot;&gt;07:53&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;but it just like RDBG&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;07:58&quot;&gt;07:58&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;allows you to do like, you know&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:01&quot;&gt;08:01&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;break point debugger commands, like continue&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:05&quot;&gt;08:05&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and c, even a queue for quit.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:08&quot;&gt;08:08&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;You can get these little things, like step over or step.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:13&quot;&gt;08:13&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;I don't know if step in or step over is a default for step.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:16&quot;&gt;08:16&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So that's like, neat.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:18&quot;&gt;08:18&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;You can, you can do all that stuff.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:19&quot;&gt;08:19&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;You can look at variables.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:20&quot;&gt;08:20&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;You can of course, like ask questions, like now dot day&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:23&quot;&gt;08:23&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;that's just like the traditional debugging facility.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:25&quot;&gt;08:25&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;But of course we lose the procfile running everything&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:28&quot;&gt;08:28&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;for us, and we'd be going back to three.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:29&quot;&gt;08:29&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So like, what I wanna avoid, right,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:31&quot;&gt;08:31&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Whenever I'm programming is I wanna get fast feedback&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:33&quot;&gt;08:33&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and I wanna have a quick way to hook&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:35&quot;&gt;08:35&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;in to a particular thing without necessarily&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:37&quot;&gt;08:37&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;going over to another terminal and&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:39&quot;&gt;08:39&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;killing all my servers and then starting all over again&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:41&quot;&gt;08:41&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and then trying to get everything into the same state.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:43&quot;&gt;08:43&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So what I want instead is to make it really easy&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:45&quot;&gt;08:45&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;just attach and detach a debugger&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:46&quot;&gt;08:46&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;from whatever my process is, and I wanna run the process&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:48&quot;&gt;08:48&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;in the most convenient way possible.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:50&quot;&gt;08:50&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So here we go.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:50&quot;&gt;08:50&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So we're gonna exit.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:53&quot;&gt;08:53&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;alright, we quit our server.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:55&quot;&gt;08:55&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;We're we're not gonna run things that way anymore.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;08:58&quot;&gt;08:58&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And instead,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;09:00&quot;&gt;09:00&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;what we can do is we can think&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;09:02&quot;&gt;09:02&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;about this new tool called RDBG&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;09:05&quot;&gt;09:05&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;which comes along with the debug gem,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;09:09&quot;&gt;09:09&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;which Koichi has written, which is sort of inheriting&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;09:12&quot;&gt;09:12&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;the old lib debug from Ruby.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;09:17&quot;&gt;09:17&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And we can actually say, let's see RDBG&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;09:19&quot;&gt;09:19&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and you can just give it tac c&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;09:21&quot;&gt;09:21&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and then you can give it a command&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;09:25&quot;&gt;09:25&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and what it'll do is it'll actually&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;09:27&quot;&gt;09:27&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;launch whatever your command is&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;09:29&quot;&gt;09:29&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;but first pause and attach to the debugger to it.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;09:33&quot;&gt;09:33&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And we can just say, continue here.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;09:34&quot;&gt;09:34&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And it's just running our service, we can refresh the page,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;09:37&quot;&gt;09:37&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;we catch the thing.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;09:38&quot;&gt;09:38&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;This is not that dissimilar, of course&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;09:40&quot;&gt;09:40&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;from just like writing debugger in there.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;09:42&quot;&gt;09:42&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;But what's interesting is like&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;09:43&quot;&gt;09:43&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;if you learn this command a bit,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;09:47&quot;&gt;09:47&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;you can see how&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;09:49&quot;&gt;09:49&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;you can start to build up what you might be interested in.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;09:51&quot;&gt;09:51&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So we can say like tac end for example&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;09:54&quot;&gt;09:54&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and it'll run nonstop.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;09:57&quot;&gt;09:57&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;It'll just run for us&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;10:00&quot;&gt;10:00&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;it won't do that initial pause.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;10:02&quot;&gt;10:02&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Great.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;10:05&quot;&gt;10:05&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Okay. Quit.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;10:06&quot;&gt;10:06&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Okay. And then you can also tell it to open a particular&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;10:12&quot;&gt;10:12&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;front end for the debugger.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;10:14&quot;&gt;10:14&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And now by default, that front end is RDBG.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;10:16&quot;&gt;10:16&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;That's like what we've been doing, now, instead&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;10:19&quot;&gt;10:19&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;what we're gonna do is we're gonna actually like launch this&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;10:21&quot;&gt;10:21&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;with VS Code.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;10:24&quot;&gt;10:24&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;We're just gonna take a couple steps because by default,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;10:26&quot;&gt;10:26&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;it's not gonna just magically work&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;10:31&quot;&gt;10:31&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;because we don't have any sort of like awareness of&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;10:34&quot;&gt;10:34&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;the Ruby debugger in VS Code.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;10:36&quot;&gt;10:36&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So what we're gonna do is we're gonna go over&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;10:38&quot;&gt;10:38&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;to the extensions world, We're gonna say&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;10:41&quot;&gt;10:41&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;search for VS Code RDBG and hope that we find it.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;10:46&quot;&gt;10:46&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;There we go.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;10:47&quot;&gt;10:47&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So Koichi also wrote this VS Code RDBG Ruby debugger,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;10:51&quot;&gt;10:51&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;We're gonna install it here.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;10:56&quot;&gt;10:56&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And because I don't trust VS Code just yet,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;10:58&quot;&gt;10:58&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;even though it's all JavaScript and cool,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:00&quot;&gt;11:00&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;I am going to quit out entirely.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:04&quot;&gt;11:04&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Quit that too.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:07&quot;&gt;11:07&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And I'm gonna run&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:09&quot;&gt;11:09&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;this again.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:10&quot;&gt;11:10&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;It's going to attach VS Code here&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:12&quot;&gt;11:12&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;I can see I'm attached now to a VS Code debugger,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:19&quot;&gt;11:19&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and if I refresh the page, I'm here, I'm in the debugger.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:22&quot;&gt;11:22&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Now I'm again, I'm in an arbitrary window though.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:24&quot;&gt;11:24&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;I'm not in like my application window right now&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:27&quot;&gt;11:27&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;but I can see like, okay, cool.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:28&quot;&gt;11:28&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;I have, now I've got like a step a debugger.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:31&quot;&gt;11:31&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;These commands up here I can like&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:32&quot;&gt;11:32&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;step over a line and so forth.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:34&quot;&gt;11:34&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;I also have this debug console in addition to my terminal.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:36&quot;&gt;11:36&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So I could run the terminal here,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:37&quot;&gt;11:37&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;but you can see I'm like in this variable&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:40&quot;&gt;11:40&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;like folders like this Tempter.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:41&quot;&gt;11:41&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So it's not quite perfect, but I can get in like this.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:44&quot;&gt;11:44&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Now, if I wanted to fold this into my application&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:49&quot;&gt;11:49&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;what I could do instead is I could actually wire this&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:52&quot;&gt;11:52&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;in as a launch configuration&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:55&quot;&gt;11:55&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;to attach manually to a running process.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;11:58&quot;&gt;11:58&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So let's try doing that, it's a little bit finicky,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;12:00&quot;&gt;12:00&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;I haven't figured out the exact order of what to do&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;12:03&quot;&gt;12:03&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;with this stuff, but we're gonna quit out again.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;12:07&quot;&gt;12:07&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;I'm gonna go here, we've exited that,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;12:10&quot;&gt;12:10&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;I'm going to run code period&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;12:11&quot;&gt;12:11&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;to open up Visual Studio Code to a particular place.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;12:14&quot;&gt;12:14&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;I've got this extension now down here, the VS Code debugger,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;12:18&quot;&gt;12:18&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;I'm going to now make a launch config.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;12:23&quot;&gt;12:23&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;I'm gonna do this.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;12:24&quot;&gt;12:24&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Now you can see it's got two different launch configs&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;12:27&quot;&gt;12:27&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;by default, the debugger, the current file with RDBG.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;12:30&quot;&gt;12:30&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;I'm not gonna use that one today,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;12:31&quot;&gt;12:31&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;That's actually more self explanatory,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;12:35&quot;&gt;12:35&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;but I do wanna be able to attach with RDBG.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;12:39&quot;&gt;12:39&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And so you can see this right here.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;12:43&quot;&gt;12:43&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And so what I'm gonna do&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;12:46&quot;&gt;12:46&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;is I'm going to just&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;12:47&quot;&gt;12:47&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;from the terminal window here,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;12:51&quot;&gt;12:51&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;sticking in the terminal.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;12:54&quot;&gt;12:54&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;I'm going to run&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;12:58&quot;&gt;12:58&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;that same command that we just had over in my terminal.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;13:01&quot;&gt;13:01&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;I'm starting to get at more and more stuff into&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;13:03&quot;&gt;13:03&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;VS Code in the interest of living the, the sweet IDE life.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;13:09&quot;&gt;13:09&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Okay. So I'm gonna run that here.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;13:14&quot;&gt;13:14&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Now I'm running and I can run attached with RDBG.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;13:20&quot;&gt;13:20&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Okay. Now I refresh the page&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;13:22&quot;&gt;13:22&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and I am inside now, my actual like, you know project.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;13:27&quot;&gt;13:27&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So if I'm looking at the Explorer view, it's synced up&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;13:29&quot;&gt;13:29&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;with where I am in my source code.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;13:31&quot;&gt;13:31&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And I'm right at that debugger&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;13:32&quot;&gt;13:32&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and I can still type into my debugger console.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;13:35&quot;&gt;13:35&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So that's pretty slick.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;13:36&quot;&gt;13:36&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;I can hit play and I can continue.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;13:38&quot;&gt;13:38&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;In fact, I can remove the debugger now&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;13:40&quot;&gt;13:40&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;that I'm like, sort of attached to a session&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;13:45&quot;&gt;13:45&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;or I know how to attach to a session, I can actually&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;13:48&quot;&gt;13:48&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;create a break point here by just making&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;13:51&quot;&gt;13:51&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;a little red dot here in the gutter.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;13:53&quot;&gt;13:53&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And now when I visit the page,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;13:58&quot;&gt;13:58&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;it should have caught that,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;14:02&quot;&gt;14:02&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;it didn't catch that.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;14:04&quot;&gt;14:04&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Okay. So why isn't the debugger going?&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;14:08&quot;&gt;14:08&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Did I, no, I got a break point.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;14:12&quot;&gt;14:12&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;What did I do wrong?&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;14:21&quot;&gt;14:21&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Restart.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;14:27&quot;&gt;14:27&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;That probably was the wrong thing to do.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;14:29&quot;&gt;14:29&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Did it quit? No.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;14:31&quot;&gt;14:31&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Cannot find attachable Ruby project.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;14:32&quot;&gt;14:32&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Okay. So I'm gonna try that one more time.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;14:35&quot;&gt;14:35&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;That's surprising.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;14:36&quot;&gt;14:36&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;It's worked every time until I do it on video, naturally.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;14:40&quot;&gt;14:40&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Ah, shoot.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;14:44&quot;&gt;14:44&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Oh yeah, I didn't actually attach I that time.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;14:47&quot;&gt;14:47&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Okay. So I'm attached now.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;14:49&quot;&gt;14:49&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;I got my debugger.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;14:51&quot;&gt;14:51&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;I refresh, cool. And I'm here.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;14:54&quot;&gt;14:54&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And if I refresh again, it should reattach. Okay. So&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;14:59&quot;&gt;14:59&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;it works usually,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:01&quot;&gt;15:01&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;don't feel bad if things don't work the first time for you,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:04&quot;&gt;15:04&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;the biggest, most fun part of being a programmer&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:07&quot;&gt;15:07&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;is the banging your head up against a wall&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:08&quot;&gt;15:08&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and then getting different results&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:09&quot;&gt;15:09&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;each time you try something.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:12&quot;&gt;15:12&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;All right.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:13&quot;&gt;15:13&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So now I can debug whenever&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:16&quot;&gt;15:16&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and I create little break points.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:19&quot;&gt;15:19&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;I can enable disable the break points&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:21&quot;&gt;15:21&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;this tiny little view down here, itty-bitty guy.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:26&quot;&gt;15:26&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;I'll see the break point there&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:27&quot;&gt;15:27&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and I can enable disable it from a central place.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:31&quot;&gt;15:31&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Of course, you know, like if you're familiar&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:32&quot;&gt;15:32&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;with step debuggers, all of the step commands are up here&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:36&quot;&gt;15:36&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and you can also kind of expand here&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:37&quot;&gt;15:37&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and look in at whatever your state is.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:39&quot;&gt;15:39&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;There's nothing interesting here&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:40&quot;&gt;15:40&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;cause I'm just like on the top level a controller&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:42&quot;&gt;15:42&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and I don't have any of my own code,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:43&quot;&gt;15:43&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;but if you're in like a class&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:44&quot;&gt;15:44&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and you had like, you know, state&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:45&quot;&gt;15:45&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;or you had other things going on&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:46&quot;&gt;15:46&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;or you had a big call stack&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:48&quot;&gt;15:48&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;you'd have interesting stuff to look at.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:50&quot;&gt;15:50&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And of course the call stack here&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:51&quot;&gt;15:51&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;is split up because Puma by default has a gajillion servers.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:56&quot;&gt;15:56&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Okay. So we've got, now we've made a lot of progress.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;15:58&quot;&gt;15:58&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;We've got a new Rails application.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:00&quot;&gt;16:00&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;It's using&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:02&quot;&gt;16:02&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;this new debug gem.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:04&quot;&gt;16:04&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;We've got the debug gem looking at VS Code&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:07&quot;&gt;16:07&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and we're almost where we wanna be&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:09&quot;&gt;16:09&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;except we're still just running bin Rails S&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:11&quot;&gt;16:11&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;to get a debugger, which is not quite where we wanna be.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:15&quot;&gt;16:15&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;We wanna be running that new bin dev command&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:17&quot;&gt;16:17&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;which is gonna run foreman.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:18&quot;&gt;16:18&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So that's gonna require us to go&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:21&quot;&gt;16:21&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and take a look at procfile dot dev.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:25&quot;&gt;16:25&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And here we can actually just put exactly what we had&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:28&quot;&gt;16:28&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;from our terminal using&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:30&quot;&gt;16:30&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;RDGB tac n&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:33&quot;&gt;16:33&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;tac tac open vscode&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:37&quot;&gt;16:37&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and then leave that remaining tac tac&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:41&quot;&gt;16:41&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and a space&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:42&quot;&gt;16:42&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;so that the command that runs is this right here.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:45&quot;&gt;16:45&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Now this is like a generated file, but it lives in the&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:48&quot;&gt;16:48&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;in the root of the project,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:49&quot;&gt;16:49&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and so we can safely edit it&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:51&quot;&gt;16:51&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and just know that if like we do rerun, a Rails generator&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:55&quot;&gt;16:55&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;we might have to like, you know&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:56&quot;&gt;16:56&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;deal with this in version history.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;16:57&quot;&gt;16:57&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;But like, this is ours, we can do this if we want.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;17:00&quot;&gt;17:00&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Now it says VS Code here,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;17:03&quot;&gt;17:03&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;I can show you a trick later to like&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;17:05&quot;&gt;17:05&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;extract that away into an environment variable&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;17:07&quot;&gt;17:07&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;because maybe not everyone on your project uses&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;17:08&quot;&gt;17:08&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;VS Code and still wants to run bin dev, but let's go ahead&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;17:11&quot;&gt;17:11&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and try running bin dev here in our terminal.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;17:14&quot;&gt;17:14&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So now we're starting three different processes up&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;17:17&quot;&gt;17:17&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;now with this debugger, like I just accidentally showed you&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;17:21&quot;&gt;17:21&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;if you refresh the page, it won't catch&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;17:23&quot;&gt;17:23&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;by default because we've not attached a debugger to it.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;17:26&quot;&gt;17:26&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;But with this break point,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;17:30&quot;&gt;17:30&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;we can, you know, launch and there's a way to launch control&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;17:33&quot;&gt;17:33&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;I think is the name of the extension here. Launch.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;17:39&quot;&gt;17:39&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Launch configs.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;17:41&quot;&gt;17:41&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;This, this little relatively unknown extension&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;17:43&quot;&gt;17:43&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;will allow you to make keyboard shortcuts&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;17:46&quot;&gt;17:46&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;for launch configs and so I would probably&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;17:48&quot;&gt;17:48&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;just bind this to something like command shift,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;17:53&quot;&gt;17:53&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;alt R or D or something.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;17:55&quot;&gt;17:55&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;But anyway, I'm gonna run this now,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;17:58&quot;&gt;17:58&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;when I run it, it's gonna be running, I refresh&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;18:02&quot;&gt;18:02&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and now I've caught my debugger&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;18:03&quot;&gt;18:03&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and you can see I've done that&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;18:04&quot;&gt;18:04&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;without goofing up all of the output in the main foreman.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;18:09&quot;&gt;18:09&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;In fact, I hit play, you can see the debugger got connected,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;18:12&quot;&gt;18:12&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;but then it just finished the request&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;18:13&quot;&gt;18:13&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;standard in standard out didn't get all goofy&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;18:15&quot;&gt;18:15&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and wonky in the process.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;18:17&quot;&gt;18:17&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So that was pretty cool.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;18:19&quot;&gt;18:19&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;We got through a lot, the little trick that I use&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;18:23&quot;&gt;18:23&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;for avoiding having like any editor specific stuff&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;18:28&quot;&gt;18:28&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;in my procfile is you can use an environment variable&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;18:33&quot;&gt;18:33&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;instead, you can do like an expression here&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;18:35&quot;&gt;18:35&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;because this is ultimately just gonna be processed&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;18:37&quot;&gt;18:37&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;by your shell.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;18:39&quot;&gt;18:39&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;You can say RDBG, This is a custom variable that you can own&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;18:43&quot;&gt;18:43&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;that you can create, and then you can set a default for it.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;18:46&quot;&gt;18:46&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So maybe you just make it RDBG by default,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;18:49&quot;&gt;18:49&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;which of course as we've shown, is not particularly&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;18:51&quot;&gt;18:51&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;user friendly when you're running via foreman,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;18:53&quot;&gt;18:53&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;but it's the most obvious thing.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;18:55&quot;&gt;18:55&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And so now when we run it, I've actually already set&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;18:59&quot;&gt;18:59&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;that variable in my profile as a user.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;19:02&quot;&gt;19:02&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So if I like, you know, echo this out&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;19:03&quot;&gt;19:03&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;you can see it says VS Code.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;19:05&quot;&gt;19:05&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And now I can run bin dev, when I run bin dev.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;19:08&quot;&gt;19:08&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And this is a second verse saying, this is the first kind&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;19:12&quot;&gt;19:12&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;of thing I've attached&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;19:14&quot;&gt;19:14&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;with RDBG,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;19:16&quot;&gt;19:16&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;I'll get used to that eventually&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;19:18&quot;&gt;19:18&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;I'll refresh this page&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;19:19&quot;&gt;19:19&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and then you can see I'm caught again.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;19:21&quot;&gt;19:21&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So that way I can when time comes to commit all this to git&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;19:25&quot;&gt;19:25&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;I don't have to have VS Code,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;19:26&quot;&gt;19:26&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;the word VS Code or any one particular tool anywhere&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;19:29&quot;&gt;19:29&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;in my, you know, git repository, it can all be agnostic.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;19:32&quot;&gt;19:32&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;And yeah, so like this is pretty darn slick,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;19:35&quot;&gt;19:35&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;in my opinion, like, you know it gets you that kinda like,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;19:38&quot;&gt;19:38&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;you know, neat introspective&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;19:41&quot;&gt;19:41&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;IDE feel without any of the gross like lock in&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;19:45&quot;&gt;19:45&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and proprietary-ness&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;19:47&quot;&gt;19:47&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;or slowness, it's actually like really fast.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;19:49&quot;&gt;19:49&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So kudos to Koichi and the rest of the Ruby core&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;19:53&quot;&gt;19:53&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and Ruby committers team.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;19:55&quot;&gt;19:55&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Ruby 3.1 is just like Ruby 3.0 before it, it keeps coming&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;19:59&quot;&gt;19:59&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;with like more and more quality of life stuff,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;20:01&quot;&gt;20:01&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and so if you haven't upgraded a 3.0&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;20:04&quot;&gt;20:04&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;or to 3.1, when you do I strongly encourage you to check out&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;20:08&quot;&gt;20:08&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;a lot of the talks from the last couple years of RubyKaigi,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;20:11&quot;&gt;20:11&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;RubyKaigi takeout, they they've done&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;20:13&quot;&gt;20:13&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;lots of great videos in English&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;20:15&quot;&gt;20:15&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;about all of the improvements that they've made to the&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;20:21&quot;&gt;20:21&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;IRB, to the&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;20:24&quot;&gt;20:24&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;read line, input output stuff like to&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;20:25&quot;&gt;20:25&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;make the interactive shell really useful,&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;20:27&quot;&gt;20:27&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and now this RDBG stuff supporting any arbitrary&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;20:30&quot;&gt;20:30&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;debugger front end is this really slick.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;20:31&quot;&gt;20:31&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So thanks again to our friends&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;20:34&quot;&gt;20:34&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;on the Ruby core team and, and the other Ruby&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;20:36&quot;&gt;20:36&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;committers who who've made this just so great.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;20:40&quot;&gt;20:40&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So I'm really excited to like, you know&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;20:41&quot;&gt;20:41&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;start developing Rails this way and having like a&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;20:44&quot;&gt;20:44&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;a nicer debugger story than I've had before.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;20:46&quot;&gt;20:46&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Cause it ultimately just means faster feedback&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;20:48&quot;&gt;20:48&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;and getting answers to the questions&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;20:50&quot;&gt;20:50&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;that I have for my computer faster.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;20:51&quot;&gt;20:51&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;So check it out and I hope you have a great time.&lt;/dd&gt;
          &lt;dt class=&quot;transcript__time&quot; data-time=&quot;20:54&quot;&gt;20:54&lt;/dt&gt;&lt;dd class=&quot;transcript__text&quot;&gt;Thanks for watching.&lt;/dd&gt;&lt;/dl&gt;
</description>
    </item>
    
  </channel>
</rss>
