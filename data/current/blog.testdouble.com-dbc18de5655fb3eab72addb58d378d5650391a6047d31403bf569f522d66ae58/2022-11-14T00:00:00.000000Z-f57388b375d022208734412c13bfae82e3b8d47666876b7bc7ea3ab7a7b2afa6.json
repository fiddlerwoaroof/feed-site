{
  "title":"S.O.S.(F).: Save Our Submittable (Forms)",
  "date":"2022-11-14T00:00:00.000000Z",
  "author":null,
  "id":"https://blog.testdouble.com/posts/2022-11-14-save-our-submittable-forms/",
  "link":"https://blog.testdouble.com/posts/2022-11-14-save-our-submittable-forms/",
  "content":"\n\n\n<h2 id=\"based-on-a-true-story\">\n  \n    <a class=\"heading-anchor\" href=\"#based-on-a-true-story\">Based on a true story</a>\n  \n</h2>\n<p>Once upon a time, not too long ago, I was a new developer. Fresh out of my bootcamp, I was in love with React and Node and wanted to write code that was flashy and new inside. Code that leaned on hooks to build cool UI things.</p>\n<p>When I was asked to implement an onboarding feature for new users, I jumped in with glee. We wanted to do a questionnaire. We were working on a single page application, and to avoid overwhelming the users with questions too quickly we decided a transition between questions was in order.</p>\n<p>“Wow!,” I thought.</p>\n<p>“A set of components that all need to collect information?”</p>\n<p>“I should control all these from one place, and then bundle up that data!”</p>\n<p>“A single component can manage all the state.”</p>\n<p>“And then submit it to the backend!”</p>\n<p>Like every new bootcamp grad, I said: “I know what this needs! A custom hook!”</p>\n<p>So I implemented it. The state got unwieldy. I didn’t abstract things properly. When we wanted to change the order of the questions, well … you can imagine.</p>\n<p>Then we needed to validate emails. Some was backend validation, sure, but mostly we wanted to make sure the right gist of an email was there before we submit.</p>\n<p>Of course, it was a bad user experience to navigate back through all 20 pages in the questionnaire to edit that email. So we made a cool new component to summarize everything. While we’re here, let’s allow for edits in this summary—in case we made a mistake along the way! Naturally, we can show the validation errors here, too.</p>\n<p>Do you see where I’m going?</p>\n<div class=\"highlight\"><pre tabindex=\"0\"><code class=\"language-javascript\"><span>const</span> <span>TotallyNotAForm</span> <span>=</span> () =&gt; {\n    <span>const</span> {\n        <span>email</span>,\n        <span>setEmail</span>,\n        <span>phoneNumber</span>,\n        <span>setPhoneNumber</span>,\n        <span>insuranceChoice</span>,\n        <span>setInsuranceChoice</span>,\n        <span>submitTotallyNotAForm</span>\n    } <span>=</span> <span>useTotallyNotAFormDataHook</span>()\n    <span>// Add a  WHOLE LOT MORE to this list, and you get the point\n</span><span></span>\n    <span>const</span> [<span>currentQuestion</span>, <span>setCurrentQuestion</span>] <span>=</span> <span>useState</span>(<span>1</span>)\n\n    <span>const</span> <span>nextQuestion</span> <span>=</span> () =&gt; {\n        <span>setCurrentQuestion</span>(<span>currentQuestion</span> <span>+</span> <span>1</span>)\n    }\n\n    <span>return</span> (\n        <span>&lt;&gt;</span>\n            {<span>currentQuestion</span> <span>===</span> <span>1</span> <span>&amp;&amp;</span>\n                <span>&lt;</span><span>Question</span> <span>text</span><span>=</span><span>&quot;What's your email?&quot;</span> \n                          <span>response</span><span>=</span>{<span>setEmail</span>} <span>value</span><span>=</span>{<span>email</span>} \n                          <span>nextQuestion</span><span>=</span>{<span>nextQuestion</span>}<span>/&gt;</span>\n            }\n            {<span>currentQuestion</span> <span>===</span> <span>2</span> <span>&amp;&amp;</span>\n                <span>&lt;</span><span>Question</span> <span>text</span><span>=</span><span>&quot;What's your phone number?&quot;</span> \n                          <span>response</span><span>=</span>{<span>setPhoneNumber</span>} <span>value</span><span>=</span>{<span>phoneNumber</span>}\n                          <span>nextQuestion</span><span>=</span>{<span>nextQuestion</span>}<span>/&gt;</span>\n            }\n            {<span>currentQuestion</span> <span>===</span> <span>3</span> <span>&amp;&amp;</span>\n                <span>&lt;</span><span>Question</span> <span>text</span><span>=</span><span>&quot;Please Select Your Type of Insurance&quot;</span> \n                          <span>response</span><span>=</span>{<span>setInsuranceChoice</span>} \n                          <span>value</span><span>=</span>{<span>insuranceChoice</span>} \n                          <span>nextQuestion</span><span>=</span>{<span>nextQuestion</span>}<span>/&gt;</span>\n            }\n\n            { <span>/* 20 some other question components later */</span> }\n\n            {<span>currentQuestion</span> <span>===</span> <span>24</span> <span>&amp;&amp;</span> \n                <span>&lt;</span><span>SummarizeAndEditAnswers</span> <span>submit</span><span>=</span>{<span>submitTotallyNotAForm</span>}\n                <span>/*\n</span><span>                you better believe every single thing from the\n</span><span>                hook got passed in here too! \n</span><span>                * */</span>\n                <span>/&gt;</span>}\n        <span>&lt;</span><span>/&gt;</span>\n    )\n}\n</code></pre></div><p>In my mind this was <em>way cooler than some stinky old form</em>. This was <em>modern</em>. I did a cool abstraction of the idea of a question, so that code is <em>totally reusable, man</em>.</p>\n<p>Please don’t ask questions about how I decided what type of input field to render.</p>\n<p>Also <em>please</em> don’t ask about how the validations worked. There was a bunch of props on the <code>&lt;Question /&gt;</code> component that had to do with an ‘error’ state, and just … bleh.</p>\n<p><em><strong>Pretty please</strong></em> don’t ask about how the hook had to mangle data to make it conform to what our API expected. Or how it manipulated the API response to indicate validation errors. Or how I chose to style the errors.</p>\n<p>In retrospect, I did a huge disservice to my teammates, and to our client. I introduced a lot of tech debt that required refactoring. We had to decouple the <code>Question</code> component, introduce a Router, and lean on contexts to pass things around more elegantly. I misused the cool tools from the start, but the end result required an <em>unreasonable</em> amount of tools to wire up and make work properly.</p>\n<p>The “summary view” should have been feature one.</p>\n<p><strong>I should have just built a form</strong>.</p>\n\n\n\n<h2 id=\"whats-in-a-form\">\n  \n    <a class=\"heading-anchor\" href=\"#whats-in-a-form\">What’s in a form?</a>\n  \n</h2>\n<p>Let’s be honest. There’s a whole lot of work on the Internet that’s about collecting and representing user input data. Digital paperwork makes up a significant portion of what websites have to do. Better, more intuitive paperwork? Hopefully, yes! But paperwork all the same.</p>\n<p>Why on earth are we contorting ourselves into all sort of strange shapes? Why are we creating beautiful single page experiences out of what is essentially just <em>cruft</em> enabling us to do the actually cool stuff?</p>\n<p>Naturally, I did make mistakes being that fresh into my career. The blame does not lie solely at the feet of React here. I misused the tool. I lacked insight into what was valuable to our users. I had not come across any wisdom about how to do the fundamentally boring, necessary evil, form building in a sleek way. I wanted to use React in a way that made me feel clever.</p>\n<p>I think, therein, lies the rub. Contrast my horribly misguided form with tools offered elsewhere.</p>\n\n\n\n<h2 id=\"many-tiny-things-make-a-big-thing\">\n  \n    <a class=\"heading-anchor\" href=\"#many-tiny-things-make-a-big-thing\">Many tiny things make a big thing</a>\n  \n</h2>\n<p>The most basic app every full stack web framework tutorial starts with is building a blog. A blog with posts and comments. Those tutorials interact with the <code>Comment</code> and <code>Post</code> model directly. They generate some HTML, handle validations, and often bundle the <code>Create</code> and <code>Edit</code> views naturally. We get a lot of the behind the scenes details for free.</p>\n<p>Standalone JavaScript front ends have to package up a heck of a lot of context. We denormalize from our backend understanding of our domain to drive behaviour on the front end. Even the most basic of forms in React has to understand, or be given tools to:</p>\n<ul>\n<li>render input fields</li>\n<li>control input field values</li>\n<li>package the data to be sent</li>\n<li>send data to the API</li>\n<li>request state from the backend, for our edit view</li>\n<li>shove the data into the edit view appropriately</li>\n<li>handle success responses from the backend</li>\n<li>handle failure responses from the backend</li>\n<li>handle validation errors from the backend</li>\n<li>implement its own front-end validations</li>\n<li>manage the current state of the form being filled out</li>\n<li>share code between create / edit views</li>\n</ul>\n<p>If we want to implement multiple views for a single form, you then also have to consider a whole host of other challenges:</p>\n<ul>\n<li>state management across component levels</li>\n<li>passing state around</li>\n<li>appropriate component abstractions</li>\n<li>controlling the form inputs</li>\n<li>giving the form the ability to submit itself</li>\n</ul>\n<p>What a delicate dance of things we must consider. No wonder Early-Career-Daniel bungled it.</p>\n\n\n\n<h1 id=\"its-not-a-react-problem\">\n  \n    <a class=\"heading-anchor\" href=\"#its-not-a-react-problem\">It’s not a React problem</a>\n  \n</h1>\n<p>I don’t mean to harp on React here. It doesn’t matter what front end library we’re using, we have to attend to these matters. The proliferation of packages that are all about building better form components, or managing our form data, or validating our forms, or even simply how to do a specific type of user input, each in their chosen component library tells me just how big this problem is.\nAngular has Reactive Forms, and Vue has a whole bunch of these too.</p>\n<p>We are innately giving up a whole heck of a lot of things, and introducing a lot of complexity by making super slick form UIs with standalone JavaScript component libraries.</p>\n<p>I think we should be asking some questions of ourselves here.</p>\n<ul>\n<li>Is this a reasonable tradeoff?</li>\n<li>Do we really want to inflict all this pain on ourselves? On our early-career developers?</li>\n<li>How much time in our cycles are we wasting on the gritty cruft that is the reality of digital paperwork?</li>\n<li>Do we need to reach for a standalone front end to make those digital documents?</li>\n<li>Is this approach mandatory to effectively create an experience for users to share their details with us?</li>\n</ul>\n<p>I’ve seen some really challenging React forms crumble under the self-inflicted complexity of managing all those steps in the delicate dance.</p>\n<p>How many of our forms have fallen into disrepair, and make our users grit their teeth and suffer because they’re just <em>broken</em>?</p>\n<p>The model had new validations enforced, and now the front end can’t edit any of the old entries because those validations fail.</p>\n<p>The form didn’t validate, and the component didn’t handle the response properly so it re-rendered and we lost all the user input.</p>\n<p>Are we winning the user experience game, or are the forms defeating us?</p>\n\n\n\n<h2 id=\"sosf\">\n  \n    <a class=\"heading-anchor\" href=\"#sosf\">S.O.S.(F).</a>\n  \n</h2>\n<p><strong>Save our Submittable Forms.</strong></p>\n<p>Ultimately, I’m not you. I’m not on your project.</p>\n<p>Maybe all your forms are tiny. One or two entries that are easy to keep in state, easy to format into a post request, and easy to validate.</p>\n<p>Or, maybe your forms are like mine. Growing in complexity, adding new features, taking new shapes, bloating, struggling to swim under the weight of model changes, denormalized domain details, controlling state, and data formatting and,</p>\n<p>and,</p>\n<p>and.</p>\n<p>I’m sending out an <strong>S.O.S.(F).</strong></p>\n<p>PS: I hope you’ll come with me. I have an idea to share with you soon.</p>\n"
}