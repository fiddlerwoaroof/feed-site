{
  "title":"How to balance software architecture goals with limited resources",
  "date":"2022-10-26T00:00:00.000000Z",
  "author":null,
  "id":"https://blog.testdouble.com/posts/2022-10-26-resources-vs-architectural-changes/",
  "link":"https://blog.testdouble.com/posts/2022-10-26-resources-vs-architectural-changes/",
  "content":"<p>I’m reminded of a survival RPG where you’re stranded somewhere, and you need to either escape the island or build a life-sustaining place to live. You have a couple things provided for you—some food, some water, and maybe a talking travelogue—but you know it’s not enough to last. You’ll need to ration and be strategic about how to use your resources and potentially acquire more resources to succeed. You’ll probably even want to build some tools along the way.</p>\n<p>Trying to introduce architectural changes while balancing resources feels roughly similar—except the stakes of getting it wrong could be wasting millions of dollars as opposed to watching a sad montage wherein your character dies.</p>\n<p>To clarify a couple terms for project inclusivity, “resources” is used very broadly here. It could be time, money, know-how, infrastructure, etc. It could arguably be stakeholder buy-in, too, but that’s a different blog post.  <em>Sometimes “resources” includes “personnel”, but let’s try to break that cycle: People are people, and a lack indicates a lack of time, money, or know-how.  This isn’t to diminish the very real challenges which come from being understaffed, though.</em></p>\n<p>“Architecture” here is also used two-fold. Possibly you’re on a green-field project and don’t have architecture yet per se, but more likely you’re on an existing project and need to do some kind of overhaul or expansion. This post will focus on the latter and assume that you already have at least a live MVP.</p>\n\n\n\n<h2 id=\"do-you-know-where-youre-going\">\n  \n    <a class=\"heading-anchor\" href=\"#do-you-know-where-youre-going\">Do you know where you’re going?</a>\n  \n</h2>\n<p>Your current situation isn’t good or you wouldn’t be thinking of architectural changes. This is, of course, relative, and could range anywhere from <em>“mildly annoying”</em> to <em>“our system is actively falling over and we can’t put out fires fast enough”</em>.</p>\n\n\n\n<h3 id=\"why-do-you-want-to-change-the-architecture\">\n  \n    <a class=\"heading-anchor\" href=\"#why-do-you-want-to-change-the-architecture\">Why do you want to change the architecture?</a>\n  \n</h3>\n<ul>\n<li>What specifically about the current architecture isn’t working?</li>\n<li>How is it impacting your team’s morale?</li>\n<li>How is it impacting your team’s ability to adapt to new business requirements or fix bugs? (Obligatory reminder that complicated != better)</li>\n<li>What is the most pressing issue that you need to overcome?</li>\n<li>What are you really trying to accomplish?</li>\n</ul>\n\n\n\n<h3 id=\"envision-the-end-state\">\n  \n    <a class=\"heading-anchor\" href=\"#envision-the-end-state\">Envision the end state.</a>\n  \n</h3>\n<p>Really think about this.</p>\n<ul>\n<li>How will your basic use cases work?</li>\n<li>What about the most complicated use case or two?</li>\n<li>What about <em>likely</em> use cases the business has expressed a desire for but you haven’t been able to implement?</li>\n</ul>\n\n\n\n<h3 id=\"get-detailed\">\n  \n    <a class=\"heading-anchor\" href=\"#get-detailed\">Get Detailed</a>\n  \n</h3>\n<p>Don’t be hand-wavey when planning.</p>\n<p>Take the time to <strong>break it down, map it out, share it with your team, and <em>accept criticism</em>.</strong></p>\n<p>For a non-exhaustive list of things to consider:</p>\n<ul>\n<li>How will the database(s) need to change?</li>\n<li>How will your APIs change? Are you going to set up a new version or aim for backwards compatibility (which maybe you can phase out over time)?</li>\n<li>What about the UI?</li>\n<li>How will the above impact developer productivity? Do you need to plan for training or additional tooling?</li>\n<li>How will you handle production support? Consider both “external” support teams if you have them as well as ensuring that your team will be set up for success when issues come up.</li>\n<li>What will need to happen to your test and deployment pipelines? What are the security implications and how will you address them?</li>\n</ul>\n<p>If this sounds like a lot, it’s because it is. If you’re worried this sounds like waterfall but you’re an agile shop, well, you’re not wrong. (More on this later.) The point of this exercise isn’t to build a master plan and stick to it, but instead to develop enough definition that you can confidently approach with agility.</p>\n<p>I encourage you to use your best judgement on just how detailed you should get. I’ll also give you this real-world tale:</p>\n<p><em>The setting was at a small IoT start-up, we had an MVP out the door, and we were trying to introduce a new device which would toggle on or off based on nearby other devices. The most popular solution was to have “on the ground” radio communication between the devices. The alternate solution was to have coordination done in the cloud.  After getting extremely detailed—down to the task level—on the effort for each, we ended up implementing the cloud approach with distant future plans to construct the “on the ground” version.  I don’t think the “on the ground” contingent ever finished tasking things out—the delta was just that much, and it was only through this exercise that it became apparent.</em></p>\n\n\n\n<h2 id=\"can-you-afford-the-end-state\">\n  \n    <a class=\"heading-anchor\" href=\"#can-you-afford-the-end-state\">Can you afford the end state?</a>\n  \n</h2>\n<p>Since this is an article about resources, it’s worth asking if you’ll be able to afford the end state before even thinking about <em>how</em> you’re going to achieve it.</p>\n<p>For example, if the architectural plan calls for cloud resources, do you have the budget? (Maybe going all-in on AWS with an API Gateway that wraps Kafka which puts something on EventBridge which then triggers chains of Lambda calls with Step Functions while using SNS sounds <em>perfect</em> in the hypothetical, but each of those touch points costs money. <em>Scenario slightly exaggerated for effect.</em>)</p>\n<p>If it’s using a new technology, will you be able to afford the time it takes your team to learn how to maintain it in production or to pay for consultants in the interim? What if in learning your team makes honest mistakes which cost even more money?</p>\n<p>If the answer to “Can you afford the end state?” is “No”, then you might need to go back to the drawing board to redefine what the end state is. Alternatively, and this is probably true anyway, you should start thinking about how to slice the architecture up so that you can deliver the necessary value now with a plan for the rest of it when funding allows. More on this later.</p>\n\n\n\n<h2 id=\"do-you-currently-have-the-resources-to-get-there\">\n  \n    <a class=\"heading-anchor\" href=\"#do-you-currently-have-the-resources-to-get-there\">Do you currently have the resources to get there?</a>\n  \n</h2>\n<p>Probably not, or you’d just go for it. \uD83D\uDE42</p>\n<p>So, <strong>where do you have wiggle room?</strong></p>\n<p>In the project triangle, there are three points for cost, time, and scope.</p>\n<p>Let’s tweak the names just a little to align more closely with what we’re dealing with: paying people (cost), team bandwidth (time), and new releases for bug fixes or features (scope). Since staffing costs typically well-exceed other operating costs, those are the focus here.</p>\n<p>If at this point you’re thinking that you have no wiggle room at all—that you’re already operating on a shoestring, your team is working overtime, and there’s no way you can divert from bug and feature work…you’ll just have to be more creative.</p>\n<p>In most circumstances, no obvious wiggle room will mean delaying releases and deferring scope. You can also try negotiating for more money. I <em>don’t</em> recommend asking your team to work harder or for longer hours or less pay—that ultimately results in mistakes, burnout, resentment, or all of the above. Not good.</p>\n\n\n\n<h3 id=\"if-your-largest-wiggle-room-is-team-bandwidth\">\n  \n    <a class=\"heading-anchor\" href=\"#if-your-largest-wiggle-room-is-team-bandwidth\">If your largest wiggle room is team bandwidth…</a>\n  \n</h3>\n<p>Let some of your team focus on architecture. Add in pairing time so that the people who aren’t focusing on it can contribute, and it will make the learning curve much smaller when the new architecture is complete.</p>\n\n\n\n<h3 id=\"if-your-largest-wiggle-room-is-cash\">\n  \n    <a class=\"heading-anchor\" href=\"#if-your-largest-wiggle-room-is-cash\">If your largest wiggle room is cash…</a>\n  \n</h3>\n<p>Consider bringing on more staff, even in the short-term. Don’t forget that it will take these staff a little bit of time to ramp up and that they will need some of your team’s time.</p>\n\n\n\n<h3 id=\"if-your-wiggle-room-is-bug-fixes-and-features\">\n  \n    <a class=\"heading-anchor\" href=\"#if-your-wiggle-room-is-bug-fixes-and-features\">If your wiggle room is bug fixes and features…</a>\n  \n</h3>\n<p>You’ll need to start setting expectations with stakeholders that, in order to be able to deliver what they want efficiently in the future, or at all, you’ll need to slow down and focus on some <a href=\"https://blog.testdouble.com/posts/2022-01-20-stop-paying-debts-start-maintaining-code/\">technical house-keeping</a>.</p>\n<p>In all cases, bringing on <a href=\"https://link.testdouble.com/blog-stuff-like-that\">consultants who have already done this successfully</a> can save you time and money in the long run.</p>\n\n\n\n<h2 id=\"how-are-you-going-to-get-there\">\n  \n    <a class=\"heading-anchor\" href=\"#how-are-you-going-to-get-there\">How are you going to get there?</a>\n  \n</h2>\n<p>You know where you want to go. And you know that when you get there, it will be rainbows and unicorns. \uD83C\uDF08\uD83E\uDD84</p>\n<p>And, unfortunately, it’s probably not in your power to just pause time while the plan comes to bear. <a href=\"https://medium.com/swlh/engineering-vs-product-turning-tension-into-triumph-1caf331332d\">And it shouldn’t be.</a> Plan for a slow transition where your team keeps the lights on while also working towards a new architectural future. This is where agility comes in.</p>\n<p>Go back to your end state, look at all the components and all the changes that it will take to get there.</p>\n<ul>\n<li>What depends on what?</li>\n<li>What can you peel away while still adding value?</li>\n<li>What can you defer since there’s limited near-term value?</li>\n<li>What can you start implementing cleanly? Maybe there are some new columns you can add to a database or maybe you can refactor part of your code to allow for alternate routing.</li>\n</ul>\n<p>Most likely there are some parts of your vision that you can start implementing <em>soon</em> and that will provide value <em>soon</em>.</p>\n<p>What’s the absolute least that you can do to unblock a key feature request or address a gnarly part of the application?</p>\n<p>Or</p>\n<p>What’s the smallest thing you can do that doesn’t negatively impact other functionality but still sets you up for the future?</p>\n\n\n\n<h3 id=\"plan-to-move-in-phases-balancing-delivery-and-architecture-at-every-step\">\n  \n    <a class=\"heading-anchor\" href=\"#plan-to-move-in-phases-balancing-delivery-and-architecture-at-every-step\">Plan to move in phases balancing delivery and architecture at every step.</a>\n  \n</h3>\n<ul>\n<li>Slow down on the releases, but don’t stop them unless you absolutely have to.</li>\n<li>Provide value.</li>\n<li>Prove to your stakeholders why letting you have some time for house-keeping will help you keep up with them.</li>\n<li>Where at all possible, draw direct lines between features that they want, what’s blocking them technically, and what else they get from the change.</li>\n</ul>\n<p>For example, <em>“I know you really want those reports, but we need to transform our data to be hierarchical in order to build them for you. In order to do that, though, we need to first change how our devices are identified to be more robust as hardware changes. Here’s our plan for that, here’s the expected timeline, and here’s where we currently are. Also, by changing how our devices are identified, it will allow for features C, D, and E in the future, which we wouldn’t have been able to do previously.&quot;</em></p>\n<p>It should also be said that by going incrementally, the new code gets rolled in with the old code—and this is a good thing. It gets tested, and as the old code changes the new code will also be updated as opposed to being off in a branch somewhere resulting in multi-day merge sessions. Having some covering tests here, too, can go a very long way toward confidently being able to roll out changes.</p>\n\n\n\n<h3 id=\"consider-avoiding-choosing-a-feature-to-implement-in-the-new-way\">\n  \n    <a class=\"heading-anchor\" href=\"#consider-avoiding-choosing-a-feature-to-implement-in-the-new-way\">Consider avoiding choosing a feature to implement in the “new” way.</a>\n  \n</h3>\n<p>Have a new architectural plan? Have a new feature? It might seem like an obvious strategy to branch off and do the feature in an entirely new way. But in practice what I’ve seen happen is that the rest of the application never gets updated. In the worst case, the new feature ends up being the only one done in the new style in production, and then you’re stuck maintaining it separately from everything else. Now you’ve added to technical debt.</p>\n<p>That isn’t to say it’s never a good idea, but unless you really want to do a re-write or maintain two different applications, make it as easy as possible for your existing code to slide into new patterns.</p>\n<p>My current theory for why this approach goes awry: when starting with a blank page, the delta between the new and the old ends up being just a bit too much to overcome.</p>\n<p>Just…be careful if you go this route.</p>\n<p>Circling back around, the potential for an architecural plan to go astray is why having a clear not hand-wavy plan of where you want to end up is <em>so important</em> to introducing architectural changes successfully.</p>\n\n\n\n<h2 id=\"in-summary\">\n  \n    <a class=\"heading-anchor\" href=\"#in-summary\">In Summary</a>\n  \n</h2>\n<ol>\n<li>Know where you want to go.\n<ul>\n<li>Is it <em>really</em> a good end-state?</li>\n<li>Do you need to do a spike or two to affirm assumptions?</li>\n</ul>\n</li>\n<li>Publicize where you want to go in as much audience-appropriate detail as possible.</li>\n<li>Lean into the places where you have wiggle room on the project triage (cost / time / scope)</li>\n<li>Break your target architecture down into small workable chunks.\n<ul>\n<li>What are the dependencies?</li>\n<li>Do you have covering tests?  (If not, make some!)</li>\n</ul>\n</li>\n<li>Tie business features and bug fixes directly to architectural changes and vice-versa.</li>\n<li>Plan to release changes in as small chunks as possible.</li>\n<li>Earn (or re-affirm) the trust of your stakeholders by delivering timely quality.</li>\n<li>Enlist outside support for any of the above (<a href=\"https://link.testdouble.com/blog-talk-to-us\">Like us, maybe.</a>\n\uD83D\uDE0E)</li>\n</ol>\n"
}