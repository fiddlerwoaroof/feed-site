{
  "title":"Check the hardware",
  "date":"2021-08-22T19:35:39.000000-07:00",
  "author":"/u/TheNobleMustelid",
  "id":"t3_p9qm1y",
  "link":"https://www.reddit.com/r/talesfromtechsupport/comments/p9qm1y/check_the_hardware/",
  "content":"<div class=\"md\"><p>TL;DR at the end.</p> <p>Some years ago I needed a particular sort of sensor for my biology research. It was neither high-precision nor particularly complex, but it was strange. No one sold anything like it. So I designed and built the sensors I needed on a minimal budget, on a scratched-up table at home, using a soldering iron half my own age. And then, through a series of improbable events, this sensor got a lot of attention. It made the college I work at look good and to this day if you search for my real name what you’ll probably find is the college’s press releases about how my device will solve world hunger and cure AIDS while you sleep. As an indication that even the college did not believe this they rewarded me with a $15 gift certificate at the local coffee shop.</p> <p>However, the computer science (CS) department did notice that I had just done something that looked very much like “Internet of Things” and made me an offer: instead of building my next device on a table at home using a soldering iron from the Late Paleolithic I could use their very nice lab, with lots of equipment, and even raid their parts bins, as long as I also passed off some of my knowledge to their students. And so I ended up spending a lot of time in the CS lab. This story comes from that time. Some details of actual projects have been fuzzed because specific projects would de-anonymize me quite easily.</p> <p>On the day this story begins I am in lab laying out a circuit. As I am doing so I am chatting with the students, a small group who I have come to know fairly well, who spend most of their free time in the lab tinkering with things. One student, who I will dub Hamilcar (who doesn’t like the Second Punic War?) calls me over for troubleshooting.</p> <p>I get up from my chair, careful to bring my cup of coffee with me. When troubleshooting with students a cup of coffee is essential, because you can raise it to your face and take a sip from it to hide the fact that while your voice is saying, “That happens sometimes,” your face is saying, “I don’t think you’ve fully recovered from that brain injury.”</p> <p>Hamilcar’s project involves a speaker. He’s quite early on in working on it and only has the speaker attached to an audio control board/amplifier which is, in turn, attached to an Arduino. (Arduinos are programmable microcontrollers.) Hamilcar points to his screen where a small program is open in an IDE. “This [points] should play a small tune through here [points]. But nothing is happening.”</p> <p>“When did it break?” I ask.</p> <p>“It never worked,” he responds.</p> <p>This seems strange. I question him a bit more. As I think we all know the right way to build this device would be: 1) wire up the speaker, run current through and make sure you hear something. 2) write a tiny piece of code that just makes some sort of noise, verify that you can get the code on the Arduino and get noise out of the speaker. 3) turn “make a noise” into “make these specific noises”. What Hamilcar has done is wire everything together, write a giant block of code, and then test it.</p> <p>“Have you checked the hardware?” I ask. Always start troubleshooting at step zero. I then have to explain that I mean “have you done anything to verify that the hardware works?”</p> <p>“It’s wired correctly,” Hamilcar says. This is not what I asked.</p> <p>“Have you ever gotten any sound out of that speaker?” I ask. “A blip when you plugged it in? A short code snippet that just makes it hum? Anything to test it?”</p> <p>“No!” Hamilcar exclaims, clearly unreasonably annoyed by these questions. Other students look up from their projects and stare at him in surprise. “It’s plugged in correctly! I’m not an idiot!”</p> <p>I bring my coffee cup up to my face and take a long sip. “But did you test it?”</p> <p>“No!” Hamilcar yells. I understand, a bit, where his frustration is coming from. He does have some real skills from his own, independent study, and nothing he’s done yet has been able to showcase this. He feels like we don’t believe that he knows things. On the other hand, he’s being an ass.</p> <p>I bring the coffee cup down and give Hamilcar The Look. If you ever find yourself teaching teenagers or young adults make sure to practice The Look. Done correctly, the victim should feel the chill of the coming winter creeping into their bones and hear the distant howl of the first wolves picking up their trail. “This is,” I say, gesturing expansively with my coffee mug while continuing to glare, “Computer SCIENCE. We TEST things. Check your hardware.” I then remind him that the day before I had wasted time debugging a bad solder joint.</p> <p>Hamilcar makes his saving throw against The Look. “I know how to solder!”</p> <p>I point out that the years of his life are but a blink of my eye, and that while I had learned to solder as the great ice sheets retreated at the end of the Younger Dryas he had learned to solder two weeks earlier, from me. And that his solder joints still closely resembled metal potatoes.</p> <p>“You’re not helping!”</p> <p>“No,” I finally agreed, “I’m not. And I won’t, until you check your hardware.” Then I walked back to my bench. And thus began the descent into madness.</p> <p>Day One: Hamilcar has discovered that Arduinos are not very good at keeping time by themselves. He has a theory that this is, somehow, messing up the speaker. Perhaps the sound frequencies are being compressed into the ultrasonic, or something. He’s fiddling around with clock chips, which are really only needed when your time intervals are hours or days. Obviously, this just further complicates his untested circuit and doesn’t help.</p> <p>Day Two: Hamilcar spends an hour undoing his clock chip changes from yesterday. He is now convinced that he is running the Arduino at the wrong internal clock speed. This can happen to the chip-brain of the Arduino but only if you buy that chip yourself and wire it up. Inside an Arduino that won’t happen.</p> <p>Day Three: Hamilcar is now propounding a new theory to the other students. Arduinos use a C-derived coding language. But what if this language does not handle global and local variables in the same way? Much like the Carthaginian invasion of Italy, this theory serves only to cause a lot of destruction and get people angry without actually making any progress towards winning the war.</p> <p>Day Four: Hamilcar is bouncing his latest idea off another student. At this point Hamilcar’s broken circuit and his refusal to test the hardware have become a running joke. Before he gets past the first sentence of his new theory the other student asks, “Have you checked the hardware?” Hamilcar explodes in anger. The other students just shake their heads, and I eventually have to tell him to use his inside voice.</p> <p>Day Five: Hamilcar is hunched over his station, muttering something in an unknown language. Is this a dark ritual to the old gods of blood and fire, meant to strike me down for questioning his soldering skills? Has he completely snapped and is speaking in a new language that makes sense only to him? I listen more closely. No, he’s just swearing continuously under his breath.</p> <p>Day Six is a Saturday. As a biologist I sometimes have to come in to work on a weekend to keep my living study subjects, well, living. I had also glued some pieces together on a device on Friday, so I swing by the CS lab to see if they set up correctly, and, if so, to glue the next set.</p> <p>The lab is quiet, empty of students. As much as I like joking around with the students it’s relaxing to be alone and able to focus. I finish my own project and decide to check Hamilcar’s project. If I can debug it I’ll steer him correctly on Monday.</p> <p>There’s no multimeter on Hamilcar’s station (of course) but once I grab one his power and ground check out. The Arduino is pinned-out correctly, and I’m getting power where I should there, too. The audio controller/amplifier is a bit of a mystery. I haven’t used this design before. I unlock the computer and find that Hamilcar already has the wiring diagram open. Power is solid. Ground is ground. LVL is….not attached to anything. What the hell is LVL, anyway? I know that the chip can do much more complicated things than what Hamilcar is doing with it, so maybe it’s not needed. But debugging means figuring out what things are. I find a webpage where someone is using LVL on this chip in their own circuit. I look at what they seem to be doing with it. It’s not amazingly helpful. I bend over to poke at the chip with the multimeter, just to see if I can tell if LVL is output or input. As my head gets close to the chip I hear a faint sound in the quiet of the room. I pick up the speaker and put it up to my ear. It’s playing a tune. Right. LVL. As in “sound level”. Thirty seconds later I’ve decoded the wiring diagram and have LVL attached to 5V power. The speaker is humming out a tune clear as day. I leave a text file open on the computer. “Checked your hardware. Amplifier on chip was not powered.”</p> <p>Two months later we’re sitting in lab. A new student loudly complains to no one in particular that his starter exercise (get an LED to blink) isn’t working. “Did your LED power on solidly when you first plugged it in?” I ask.</p> <p>“No,” the new student says. “Does that matter?”</p> <p>A wave of apocalyptic fury breaks over us, a roar of sound and anger. It’s Hamilcar. “CHECK YOUR DAMN HARDWARE!”</p> <p>TL;DR: Student has an issue with a program. I tell him to check the hardware. He doesn’t. It’s the hardware.</p> </div>   submitted by   <a href=\"https://www.reddit.com/user/TheNobleMustelid\"> /u/TheNobleMustelid </a> <br> <span><a href=\"https://www.reddit.com/r/talesfromtechsupport/comments/p9qm1y/check_the_hardware/\">[link]</a></span>   <span><a href=\"https://www.reddit.com/r/talesfromtechsupport/comments/p9qm1y/check_the_hardware/\">[comments]</a></span>"
}