{
  "title":"Encapsulation in Functional Programming",
  "date":"2022-10-24T05:54:00.000000Z",
  "author":"Mark Seemann",
  "id":"https://blog.ploeh.dk/2022/10/24/encapsulation-in-functional-programming",
  "link":"https://blog.ploeh.dk/2022/10/24/encapsulation-in-functional-programming/",
  "content":"\n\n\n<div id=\"post\">\n\t<p>\n\t\t<em>Encapsulation is only relevant for object-oriented programming, right?</em>\n\t</p>\n\t<p>\n\t\tThe concept of <em>encapsulation</em> is closely related to object-oriented programming (OOP), and you rarely hear the word in discussions about (statically-typed) functional programming (FP). I will argue, however, that the notion is relevant in FP as well. Typically, it just appears with a different catchphrase.\n\t</p>\n\t<h3 id=\"f0f64bfaaa6f4d22b990fae4775a8b89\">\n\t\tContracts <a href=\"#f0f64bfaaa6f4d22b990fae4775a8b89\" title=\"permalink\">#</a>\n\t</h3>\n\t<p>\n\t\tI base my understanding of encapsulation on <a href=\"/ref/oosc\">Object-Oriented Software Construction</a>. I've tried to distil it in my Pluralsight course <a href=\"/encapsulation-and-solid\">Encapsulation and SOLID</a>.\n\t</p>\n\t<p>\n\t\tIn short, encapsulation denotes the distinction between an object's contract and its implementation. An object should fulfil its contract in such a way that client code doesn't need to know about its implementation.\n\t</p>\n\t<p>\n\t\tContracts, according to <a href=\"https://en.wikipedia.org/wiki/Bertrand_Meyer\">Bertrand Meyer</a>, describe three properties of objects:\n\t</p>\n\t<ul>\n\t\t<li>Preconditions: What client code must fulfil in order to successfully interact with the object.</li>\n\t\t<li>Invariants: Statements about the object that are always true.</li>\n\t\t<li>Postconditions: Statements that are guaranteed to be true after a successful interaction between client code and object.</li>\n\t</ul>\n\t<p>\n\t\tYou can replace <em>object</em> with <em>value</em> and I'd argue that the same concerns are relevant in FP.\n\t</p>\n\t<p>\n\t\tIn OOP <em>invariants</em> often point to the properties of an object that are guaranteed to remain even in the face of state mutation. As you change the state of an object, the object should guarantee that its state remains valid. These are the properties (i.e. <em>qualities</em>, <em>traits</em>, <em>attributes</em>) that don't vary - i.e. are <em>invariant</em>.\n\t</p>\n\t<p>\n\t\tAn example would be helpful around here.\n\t</p>\n\t<h3 id=\"72a37691c0c14d4a8673d52f25e7c3e2\">\n\t\tTable mutation <a href=\"#72a37691c0c14d4a8673d52f25e7c3e2\" title=\"permalink\">#</a>\n\t</h3>\n\t<p>\n\t\tConsider an object that models a table in a restaurant. You may, for example, be working on <a href=\"/2020/01/27/the-maitre-d-kata\">the Ma√Ætre d' kata</a>. In short, you may decide to model a table as being one of two kinds: Standard tables and communal tables. You can reserve seats at communal tables, but you still share the table with other people.\n\t</p>\n\t<p>\n\t\tYou may decide to model the problem in such a way that when you reserve the table, you change the state of the object. You may decide to describe the contract of <code>Table</code> objects like this:\n\t</p>\n\t<ul>\n\t\t<li>Preconditions\n\t\t\t<ul>\n\t\t\t\t<li>To create a <code>Table</code> object, you must supply a type (standard or communal).</li>\n\t\t\t\t<li>To create a <code>Table</code> object, you must supply the size of the table, which is a measure of its capacity; i.e. how many people can sit at it.</li>\n\t\t\t\t<li>The capacity must be a natural number. <em>One</em> (1) is the smallest valid capacity.</li>\n\t\t\t\t<li>When reserving a table, you must supply a valid reservation.</li>\n\t\t\t\t<li>When reserving a table, the reservation quantity must be less than or equal to the table's remaining capacity.</li>\n\t\t\t</ul>\n\t\t</li>\n\t\t<li>Invariants\n\t\t\t<ul>\n\t\t\t\t<li>The table capacity doesn't change.</li>\n\t\t\t\t<li>The table type doesn't change.</li>\n\t\t\t\t<li>The number of remaining seats is never negative.</li>\n\t\t\t\t<li>The number of remaining seats is never greater than the table's capacity.</li>\n\t\t\t</ul>\n\t\t</li>\n\t\t<li>Postconditions\n\t\t\t<ul>\n\t\t\t\t<li>After reserving a table, the number of remaining seats can't be greater than the previous number of remaining seats minus the reservation quantity.</li>\n\t\t\t</ul>\n\t\t</li>\n\t</ul>\n\t<p>\n\t\tThis list may be incomplete, and if you add more operations, you may have to elaborate on what that means to the contract.\n\t</p>\n\t<p>\n\t\tIn C# you may implement a <code>Table</code> class like this:\n\t</p>\n\t<p>\n\t\t<pre><span>public</span> <span>sealed</span> <span>class</span> <span>Table</span>\n{\n    <span>private</span> <span>readonly</span> List&lt;Reservation&gt; reservations;\n \n    <span>public</span> <span>Table</span>(<span>int</span> capacity, TableType type)\n    {\n        <span>if</span> (capacity &lt; 1)\n            <span>throw</span> <span>new</span> ArgumentOutOfRangeException(\n                nameof(capacity),\n                <span>$&quot;Capacity must be greater than zero, but was: </span>{capacity}<span>.&quot;</span>);\n \n        reservations = <span>new</span> List&lt;Reservation&gt;();\n        Capacity = capacity;\n        Type = type;\n        RemaingSeats = capacity;\n    }\n \n    <span>public</span> <span>int</span> Capacity { <span>get</span>; }\n    <span>public</span> TableType Type { <span>get</span>; }\n    <span>public</span> <span>int</span> RemaingSeats { <span>get</span>; <span>private</span> <span>set</span>; }\n \n    <span>public</span> <span>void</span> Reserve(Reservation reservation)\n    {\n        <span>if</span> (RemaingSeats &lt; reservation.Quantity)\n            <span>throw</span> <span>new</span> InvalidOperationException(\n                <span>&quot;The table has no remaining seats.&quot;</span>);\n \n        <span>if</span> (Type == TableType.Communal)\n            RemaingSeats -= reservation.Quantity;\n        <span>else</span>\n            RemaingSeats = 0;\n \n        reservations.Add(reservation);\n    }\n}</pre>\n\t</p>\n\t<p>\n\t\tThis class has good encapsulation because it makes sure to fulfil the contract. You can't put it in an invalid state.\n\t</p>\n\t<h3 id=\"b37e173371f249d99f80d12d64b2bee2\">\n\t\tImmutable Table <a href=\"#b37e173371f249d99f80d12d64b2bee2\" title=\"permalink\">#</a>\n\t</h3>\n\t<p>\n\t\tNotice that two of the invariants for the above <code>Table</code> class is that the table can't change type or capacity. While OOP often revolves around state mutation, it seems reasonable that some data is immutable. A table doesn't all of a sudden change size.\n\t</p>\n\t<p>\n\t\tIn FP data is immutable. Data doesn't change. Thus, data has that invariant property.\n\t</p>\n\t<p>\n\t\tIf you consider the above contract, it still applies to FP. The specifics change, though. You'll no longer be dealing with <code>Table</code> objects, but rather <code>Table</code> data, and to make reservations, you call a function that returns a new <code>Table</code> value.\n\t</p>\n\t<p>\n\t\tIn <a href=\"https://fsharp.org/\">F#</a> you could model a <code>Table</code> like this:\n\t</p>\n\t<p>\n\t\t<pre><span>type</span> Table = <span>private</span> Standard <span>of</span> int * Reservation list | Communal <span>of</span> int * Reservation list\n \n<span>module</span> Table =\n    <span>let</span> standard capacity =\n        <span>if</span> 0 &lt; capacity\n        <span>then</span> Some (Standard (capacity, []))\n        <span>else</span> None\n \n    <span>let</span> communal capacity =\n        <span>if</span> 0 &lt; capacity\n        <span>then</span> Some (Communal (capacity, []))\n        <span>else</span> None\n        \n    <span>let</span> remainingSeats = <span>function</span>\n        | Standard (capacity, []) <span>-&gt;</span> capacity\n        | Standard _ <span>-&gt;</span> 0\n        | Communal (capacity, rs) <span>-&gt;</span> capacity - List.sumBy (<span>fun</span> r <span>-&gt;</span> r.Quantity) rs\n \n    <span>let</span> reserve r t =\n        <span>match</span> t <span>with</span>\n        | Standard (capacity, []) <span>when</span> r.Quantity &lt;= remainingSeats t <span>-&gt;</span>\n            Some (Standard (capacity, [r]))\n        | Communal (capacity, rs) <span>when</span> r.Quantity &lt;= remainingSeats t <span>-&gt;</span>\n            Some (Communal (capacity, r :: rs))\n        | _ <span>-&gt;</span> None</pre>\n\t</p>\n\t<p>\n\t\tWhile you'll often hear fsharpers say that one should <a href=\"https://blog.janestreet.com/effective-ml-video/\">make illegal states unrepresentable</a>, in practice you often have to rely on <a href=\"https://www.hillelwayne.com/post/constructive/\">predicative</a> data to enforce contracts. I've done this here by making the <code>Table</code> cases <code>private</code>. Code outside the module can't directly create <code>Table</code> data. Instead, it'll have to use one of two functions: <code>Table.standard</code> or <code>Table.communal</code>. These are functions that return <code>Table option</code> values.\n\t</p>\n\t<p>\n\t\tThat's the idiomatic way to model predicative data in statically typed FP. In <a href=\"https://www.haskell.org/\">Haskell</a> such functions are called <a href=\"https://wiki.haskell.org/Smart_constructors\">smart constructors</a>.\n\t</p>\n\t<p>\n\t\tStatically typed FP typically use <a href=\"/2022/04/25/the-maybe-monad\">Maybe</a> (<code>Option</code>) or <a href=\"/2022/05/09/an-either-monad\">Either</a> (<code>Result</code>) values to communicate failure, rather than throwing exceptions, but apart from that a smart constructor is just an object constructor.\n\t</p>\n\t<p>\n\t\tThe above F# <code>Table</code> API implements the same contract as the OOP version.\n\t</p>\n\t<p>\n\t\tIf you want to see a more elaborate example of modelling table and reservations in F#, see <a href=\"/2020/04/27/an-f-implementation-of-the-maitre-d-kata\">An F# implementation of the Ma√Ætre d' kata</a>.\n\t</p>\n\t<h3 id=\"78027bc1d1414c2fa3604a68c9df6418\">\n\t\tFunctional contracts in OOP languages <a href=\"#78027bc1d1414c2fa3604a68c9df6418\" title=\"permalink\">#</a>\n\t</h3>\n\t<p>\n\t\tYou can adopt many FP concepts in OOP languages. My book <a href=\"/2021/06/14/new-book-code-that-fits-in-your-head\">Code That Fits in Your Head</a> contains sample code in C# that implements an online restaurant reservation system. It includes a <code>Table</code> class that, at first glance, looks like the above C# class.\n\t</p>\n\t<p>\n\t\tWhile it has the same contract, the book's <code>Table</code> class is implemented with the FP design principles in mind. Thus, it's an immutable class with this API:\n\t</p>\n\t<p>\n\t\t<pre><span>public</span> <span>sealed</span> <span>class</span> <span>Table</span>\n{\n    <span>public</span> <span>static</span> Table Standard(<span>int</span> seats)\n \n    <span>public</span> <span>static</span> Table Communal(<span>int</span> seats)\n \n    <span>public</span> <span>int</span> Capacity { <span>get</span>; }\n \n    <span>public</span> <span>int</span> RemainingSeats { <span>get</span>; }\n  \n    <span>public</span> Table Reserve(Reservation reservation)\n \n    <span>public</span> T Accept&lt;<span>T</span>&gt;(ITableVisitor&lt;T&gt; visitor)\n \n    <span>public</span> <span>override</span> <span>bool</span> Equals(<span>object</span>? obj)\n \n    <span>public</span> <span>override</span> <span>int</span> GetHashCode()\n}</pre>\n\t</p>\n\t<p>\n\t\tNotice that the <code>Reserve</code> method returns a <code>Table</code> object. That's the table with the reservation associated. The original <code>Table</code> instance remains unchanged.\n\t</p>\n\t<p>\n\t\tThe entire book is written in the <a href=\"https://www.destroyallsoftware.com/screencasts/catalog/functional-core-imperative-shell\">Functional Core, Imperative Shell</a> architecture, so all domain models are immutable objects with <a href=\"https://en.wikipedia.org/wiki/Pure_function\">pure functions</a> as methods.\n\t</p>\n\t<p>\n\t\tThe objects still have contracts. They have proper encapsulation.\n\t</p>\n\t<h3 id=\"ca2409555a5b4efe9b98e1c65e77256d\">\n\t\tConclusion <a href=\"#ca2409555a5b4efe9b98e1c65e77256d\" title=\"permalink\">#</a>\n\t</h3>\n\t<p>\n\t\tFunctional programmers may not use the term <em>encapsulation</em> much, but that doesn't mean that they don't share that kind of concern. They often throw around the phrase <em>make illegal states unrepresentable</em> or talk about smart constructors or <a href=\"https://en.wikipedia.org/wiki/Partial_function\">partial versus total functions</a>. It's clear that they care about data modelling that prevents mistakes.\n\t</p>\n\t<p>\n\t\tThe object-oriented notion of <em>encapsulation</em> is ultimately about separating the affordances of an API from its implementation details. An object's contract is an abstract description of the properties (i.e. <em>qualities</em>, <em>traits</em>, or <em>attributes</em>) of the object.\n\t</p>\n\t<p>\n\t\tFunctional programmers care so much about the properties of data and functions that <em>property-based testing</em> is often the preferred way to perform automated testing.\n\t</p>\n\t<p>\n\t\tPerhaps you can find a functional programmer who might be slightly offended if you suggest that he or she should consider encapsulation. If so, suggest instead that he or she considers the properties of functions and data.\n\t</p>\n</div>\n\n<div id=\"comments\">\n\t<hr>\n\t<h2 id=\"comments-header\">\n\t\tComments\n\t</h2>\n<div class=\"comment\" id=\"bb616acbc1ac41cb8f937fe7175ce061\">\n\t<div class=\"comment-author\"><a href=\"http://www.raboof.com/\">Atif Aziz</a></div>\n\t<div class=\"comment-content\">\n\t\t<p>\n\t\t\tI wonder what's the goal of illustrating OOP-ish examples exclusively in C# and FP-ish ones in F# when you could stick to just one language for the reader. It might not always be as effective depending on the topic, but for encapsulation and the examples shown in this article, a C# version would read just as effective as an F# one. I mean when you get round to making your points in the <strong>Immutable Table</strong> section of your article, you could demonstrate the ideas with a C# version that's nearly identical to and reads as succinct as the F# version:\n\t\t</p>\n<pre><span>#nullable</span> <span>enable</span>\n \n<span>readonly</span> <span>record</span> <span>struct</span> <span>Reservation</span>(<span>int</span> <span>Quantity</span>);\n<span>abstract</span> <span>record</span> <span>Table</span>;\n<span>record</span> <span>StandardTable</span>(<span>int</span> <span>Capacity</span>, <span>Reservation</span>? <span>Reservation</span>): <span>Table</span>;\n<span>record</span> <span>CommunalTable</span>(<span>int</span> <span>Capacity</span>, <span>ImmutableArray</span>&lt;<span>Reservation</span>&gt; <span>Reservations</span>): <span>Table</span>;\n \n<span>static</span> <span>class</span> <span>TableModule</span>\n{\n    <span>public</span> <span>static</span> <span>StandardTable</span>? <span>Standard</span>(<span>int</span> <span>capacity</span>) =&gt;\n        0 &lt; capacity ? <span>new</span> <span>StandardTable</span>(capacity, <span>null</span>) : <span>null</span>;\n \n    <span>public</span> <span>static</span> <span>CommunalTable</span>? <span>Communal</span>(<span>int</span> <span>capacity</span>) =&gt;\n        0 &lt; capacity ? <span>new</span> <span>CommunalTable</span>(capacity, <span>ImmutableArray</span>&lt;<span>Reservation</span>&gt;.Empty) : <span>null</span>;\n \n    <span>public</span> <span>static</span> <span>int</span> <span>RemainingSeats</span>(<span>this</span> <span>Table</span> <span>table</span>) =&gt; table <span>switch</span>\n    {\n        <span>StandardTable</span> { <span>Reservation</span>: <span>null</span> } t =&gt; t.<span>Capacity</span>,\n        <span>StandardTable</span> =&gt; 0,\n        <span>CommunalTable</span> <span>t</span> =&gt; t.<span>Capacity</span> - t.<span>Reservations</span>.Sum(<span>r</span> =&gt; r.Quantity)\n    };\n \n    <span>public</span> <span>static</span> <span>Table</span>? <span>Reserve</span>(<span>this</span> <span>Table</span> <span>table</span>, <span>Reservation</span> <span>r</span>) =&gt; table <span>switch</span>\n    {\n        <span>StandardTable</span> <span>t</span> <span>when</span> r.<span>Quantity</span> &lt;= t.<span>RemainingSeats</span>() =&gt; t <span>with</span> { <span>Reservation</span> = r },\n        <span>CommunalTable</span> <span>t</span> <span>when</span> r.<span>Quantity</span> &lt;= t.<span>RemainingSeats</span>() =&gt; t <span>with</span> { <span>Reservations</span> = t.<span>Reservations</span>.Add(r) },\n        <span>_</span> =&gt; <span>null</span>,\n    };\n}\n</pre>\n\t\t<p>\n\t\t\tThis way, I can just point someone to your article for enlightenment, \uD83D\uDE09 but not leave them feeling frustrated that they need F# to (practice and) model around data instead of state mutating objects. It might still be worthwhile to show an F# version to draw the similarities and also call out some differences; like <code>Table</code> being a true discriminated union in F#, and while it appears to be emulated in C#, they desugar to the same thing in terms of CLR types and hierarchies.\n\t\t</p>\n\t\t<p>\n\t\t\tBy the way, in the C# example above, I modeled the standard table variant differently because if it can hold only one reservation at a time then the model should reflect that.\n\t\t</p>\n\t</div>\n\t<div class=\"comment-date\">2022-10-27 16:09 UTC</div>\n</div>\n\n\t<div class=\"comment\" id=\"7069ea2b33a64a1caf7247c3a1543bac\">\n\t\t<div class=\"comment-author\"><a href=\"/\">Mark Seemann</a></div>\n\t\t<div class=\"comment-content\">\n\t\t\t<p>\n\t\t\t\tAtif, thank you for supplying and example of an immutable C# implementation.\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tI already have an example of an immutable, functional C# implementation in <a href=\"/2021/06/14/new-book-code-that-fits-in-your-head\">Code That Fits in Your Head</a>, so I wanted to supply something else here. I also tend to find it interesting to compare how to model similar ideas in different languages, and it felt natural to supply an F# example to show how a 'natural' FP implementation might look.\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tYour point is valid, though, so I'm not insisting that this was the right decision.\n\t\t\t</p>\n\t\t</div>\n\t\t<div class=\"comment-date\">2022-10-28 8:50 UTC</div>\n\t</div>\n</div><hr>\n   \t\tThis blog is totally free, but if you like it, please consider <a href=\"https://blog.ploeh.dk/support\">supporting it</a>."
}