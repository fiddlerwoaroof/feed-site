{
  "title":"Test which reminded me why I don't really like RSpec",
  "date":"2022-11-03T09:53:38.000000Z",
  "author":null,
  "id":"tag:blog.arkency.com,2022-11-03:/test-which-reminded-me-why-i-dont-really-like-rspec/",
  "link":"https://blog.arkency.com/test-which-reminded-me-why-i-dont-really-like-rspec/",
  "content":"<h1 id=\"test_which_reminded_me_why_i_don__39_t_really_like_rspec\">Test which reminded me why I don’t really like RSpec</h1>\n<p>Recently, our friend from a different software company asked us for some help with <a href=\"https://github.com/mbj/mutant\">mutant</a> setup. We asked to share a sample test to discover what can be wrong. When I read the snippet on a slack channel, I had immediately written: </p>\n\n<p>— <em>Oh man, this example reminds me why I don’t like RSpec.</em> </p>\n\n<p>— <em>Feel free to review it, it’s written by one of our juniors and I need to give him some feedback soon.</em> — he responded.</p>\n\n\n\n<p>Just to be clear: I have no problem with the <em>RSpec</em> library itself. It’s a great tool, I’ve used it in several projects, but I don’t like how a lot of people utilise it. Let’s have a look at it.</p>\n\n<p>Let’s have a look at the original example:</p>\n<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"c1\"># frozen_string_literal: true</span>\n\n<span class=\"nb\">require</span> <span class=\"s2\">&quot;rails_helper&quot;</span>\n\n<span class=\"no\">RSpec</span><span class=\"p\">.</span><span class=\"nf\">describe</span> <span class=\"no\">Api</span><span class=\"o\">::</span><span class=\"no\">Students</span><span class=\"o\">::</span><span class=\"no\">Update</span> <span class=\"k\">do</span>\n  <span class=\"n\">let</span><span class=\"p\">(</span><span class=\"ss\">:user</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">create</span><span class=\"p\">(</span><span class=\"ss\">:user</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n  <span class=\"n\">let</span><span class=\"p\">(</span><span class=\"ss\">:params</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"p\">{</span> <span class=\"ss\">last_name: </span><span class=\"s2\">&quot;something&quot;</span> <span class=\"p\">}</span> <span class=\"p\">}</span>\n  <span class=\"n\">subject</span><span class=\"p\">(</span><span class=\"ss\">:result</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">described_class</span><span class=\"p\">.</span><span class=\"nf\">call</span><span class=\"p\">(</span><span class=\"ss\">current_user: </span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"ss\">params: </span><span class=\"n\">params</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n\n  <span class=\"n\">context</span> <span class=\"s2\">&quot;when user is a student&quot;</span> <span class=\"k\">do</span>\n    <span class=\"n\">it</span> <span class=\"p\">{</span> <span class=\"n\">is_expected</span><span class=\"p\">.</span><span class=\"nf\">to</span> <span class=\"n\">be_success</span> <span class=\"p\">}</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"n\">context</span> <span class=\"s2\">&quot;when user is teacher&quot;</span> <span class=\"k\">do</span>\n    <span class=\"n\">let</span><span class=\"p\">(</span><span class=\"ss\">:user</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">create</span><span class=\"p\">(</span><span class=\"ss\">:user</span><span class=\"p\">,</span> <span class=\"ss\">:teacher</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n    <span class=\"n\">it</span> <span class=\"p\">{</span> <span class=\"n\">is_expected</span><span class=\"p\">.</span><span class=\"nf\">to</span> <span class=\"n\">be_failure</span> <span class=\"p\">}</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"n\">describe</span> <span class=\"s2\">&quot;checking Address update&quot;</span> <span class=\"k\">do</span>\n    <span class=\"n\">let</span><span class=\"p\">(</span><span class=\"ss\">:new_zip_code</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"no\">Faker</span><span class=\"o\">::</span><span class=\"no\">Address</span><span class=\"p\">.</span><span class=\"nf\">zip_code</span> <span class=\"p\">}</span>\n    <span class=\"n\">before</span> <span class=\"p\">{</span> <span class=\"n\">params</span><span class=\"p\">[</span><span class=\"ss\">:zip_code</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">new_zip_code</span> <span class=\"p\">}</span>\n\n    <span class=\"n\">context</span> <span class=\"s2\">&quot;when user has address and want to change something in their address&quot;</span> <span class=\"k\">do</span>\n      <span class=\"n\">let!</span><span class=\"p\">(</span><span class=\"ss\">:address</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">create</span><span class=\"p\">(</span><span class=\"ss\">:address</span><span class=\"p\">,</span> <span class=\"ss\">owner: </span><span class=\"n\">user</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n\n      <span class=\"n\">it</span> <span class=\"s2\">&quot;will succeed&quot;</span> <span class=\"k\">do</span>\n        <span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"nf\">success?</span><span class=\"p\">).</span><span class=\"nf\">to</span> <span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"kp\">true</span><span class=\"p\">)</span>\n        <span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"p\">.</span><span class=\"nf\">reload</span><span class=\"p\">.</span><span class=\"nf\">zip_code</span><span class=\"p\">).</span><span class=\"nf\">to</span> <span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"n\">new_zip_code</span><span class=\"p\">)</span>\n      <span class=\"k\">end</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"n\">context</span> <span class=\"s2\">&quot;when user has not have any address and want to change something in their address&quot;</span> <span class=\"k\">do</span>\n      <span class=\"n\">let</span><span class=\"p\">(</span><span class=\"ss\">:new_zip_code</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"no\">Faker</span><span class=\"o\">::</span><span class=\"no\">Address</span><span class=\"p\">.</span><span class=\"nf\">zip_code</span> <span class=\"p\">}</span>\n      <span class=\"n\">before</span> <span class=\"p\">{</span> <span class=\"n\">params</span><span class=\"p\">[</span><span class=\"ss\">:zip_code</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">new_zip_code</span> <span class=\"p\">}</span>\n      <span class=\"n\">it</span> <span class=\"p\">{</span> <span class=\"n\">is_expected</span><span class=\"p\">.</span><span class=\"nf\">to</span> <span class=\"n\">be_success</span> <span class=\"p\">}</span>\n      <span class=\"n\">it</span> <span class=\"s2\">&quot;create address with given params&quot;</span> <span class=\"k\">do</span>\n        <span class=\"n\">expect</span> <span class=\"p\">{</span> <span class=\"n\">result</span> <span class=\"p\">}.</span><span class=\"nf\">to</span> <span class=\"n\">change</span><span class=\"p\">(</span><span class=\"no\">Address</span><span class=\"p\">.</span><span class=\"nf\">all</span><span class=\"p\">,</span> <span class=\"ss\">:count</span><span class=\"p\">).</span><span class=\"nf\">from</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">).</span><span class=\"nf\">to</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"no\">Address</span><span class=\"p\">.</span><span class=\"nf\">last</span><span class=\"p\">.</span><span class=\"nf\">zip_code</span><span class=\"p\">).</span><span class=\"nf\">to</span> <span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"n\">new_zip_code</span><span class=\"p\">)</span>\n        <span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">.</span><span class=\"nf\">address</span><span class=\"p\">).</span><span class=\"nf\">to</span> <span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"no\">Address</span><span class=\"p\">.</span><span class=\"nf\">last</span><span class=\"p\">)</span>\n      <span class=\"k\">end</span>\n    <span class=\"k\">end</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"n\">describe</span> <span class=\"s2\">&quot;checking parent update&quot;</span> <span class=\"k\">do</span>\n    <span class=\"n\">let</span><span class=\"p\">(</span><span class=\"ss\">:parent_first_name</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"no\">Faker</span><span class=\"o\">::</span><span class=\"no\">Name</span><span class=\"p\">.</span><span class=\"nf\">female_first_name</span> <span class=\"p\">}</span>\n    <span class=\"n\">let</span><span class=\"p\">(</span><span class=\"ss\">:params</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"p\">{</span> <span class=\"ss\">parent: </span><span class=\"p\">{</span> <span class=\"ss\">first_name: </span><span class=\"n\">parent_first_name</span> <span class=\"p\">}</span> <span class=\"p\">}</span> <span class=\"p\">}</span>\n\n    <span class=\"n\">context</span> <span class=\"s2\">&quot;when user has parent and want to change something&quot;</span> <span class=\"k\">do</span>\n      <span class=\"n\">let</span><span class=\"p\">(</span><span class=\"ss\">:parent</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">create</span><span class=\"p\">(</span><span class=\"ss\">:parent</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n      <span class=\"n\">let</span><span class=\"p\">(</span><span class=\"ss\">:user</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">create</span><span class=\"p\">(</span><span class=\"ss\">:user</span><span class=\"p\">,</span> <span class=\"ss\">profession: </span><span class=\"n\">student</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n      <span class=\"n\">let</span><span class=\"p\">(</span><span class=\"ss\">:student</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">create</span><span class=\"p\">(</span><span class=\"ss\">:student</span><span class=\"p\">,</span> <span class=\"ss\">parent: </span><span class=\"n\">parent</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n\n      <span class=\"n\">it</span> <span class=\"p\">{</span> <span class=\"n\">is_expected</span><span class=\"p\">.</span><span class=\"nf\">to</span> <span class=\"n\">be_success</span> <span class=\"p\">}</span>\n      <span class=\"n\">it</span> <span class=\"s2\">&quot;will succeed&quot;</span> <span class=\"k\">do</span>\n        <span class=\"n\">result</span>\n        <span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"n\">parent</span><span class=\"p\">.</span><span class=\"nf\">reload</span><span class=\"p\">.</span><span class=\"nf\">first_name</span><span class=\"p\">).</span><span class=\"nf\">to</span> <span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"n\">parent_first_name</span><span class=\"p\">)</span>\n      <span class=\"k\">end</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"n\">context</span> <span class=\"s2\">&quot;when user has not have any parent and want to change something in their parent&quot;</span> <span class=\"k\">do</span>\n      <span class=\"n\">it</span> <span class=\"p\">{</span> <span class=\"n\">is_expected</span><span class=\"p\">.</span><span class=\"nf\">to</span> <span class=\"n\">be_success</span> <span class=\"p\">}</span>\n      <span class=\"n\">it</span> <span class=\"s2\">&quot;will create parent with given params&quot;</span> <span class=\"k\">do</span>\n        <span class=\"n\">expect</span> <span class=\"p\">{</span> <span class=\"n\">result</span> <span class=\"p\">}.</span><span class=\"nf\">to</span> <span class=\"n\">change</span><span class=\"p\">(</span><span class=\"no\">Parent</span><span class=\"p\">.</span><span class=\"nf\">all</span><span class=\"p\">,</span> <span class=\"ss\">:count</span><span class=\"p\">).</span><span class=\"nf\">from</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">).</span><span class=\"nf\">to</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"no\">Parent</span><span class=\"p\">.</span><span class=\"nf\">last</span><span class=\"p\">.</span><span class=\"nf\">reload</span><span class=\"p\">.</span><span class=\"nf\">first_name</span><span class=\"p\">).</span><span class=\"nf\">to</span> <span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"n\">parent_first_name</span><span class=\"p\">)</span>\n        <span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">.</span><span class=\"nf\">profession</span><span class=\"p\">.</span><span class=\"nf\">parent</span><span class=\"p\">).</span><span class=\"nf\">to</span> <span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"no\">Parent</span><span class=\"p\">.</span><span class=\"nf\">last</span><span class=\"p\">)</span>\n      <span class=\"k\">end</span>\n    <span class=\"k\">end</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>Here’s a list of my thoughts after reading test above:</p>\n\n<ul>\n<li>RSpec specific syntax sugar to actual test code ratio is too d*mn high</li>\n<li>Tests should be verbose about their subject, not about the plumbing around.</li>\n<li>I don’t get what the test is about, it’s unreadable because of the nested <code>it</code> in <code>context</code></li>\n</ul>\n\n<p>— <em>hey, but we have IDEs which can fold the blocks of code…</em></p>\n\n<p>— <em>Cool, but not here on Slack, nor on GitHub where you usually make your code reviews. I simply don’t want to jump around the file to see what’s the input to a service call.</em></p>\n\n<ul>\n<li>Setup is done through <code>FactoryBot</code> which sets some artificial database state, often not following the business rules (if your business rules live in <code>ActiveRecord</code> models — I’m sorry, we’re past that since years). It’s better to use domain services to setup the initial state. I’ve seen a lot of codebases struggling with gigantic test execution time because of too many database object being created because of how <code>FactoryBot</code> was used.</li>\n<li><code>context</code> is only used to overwrite <code>let</code>, so there’s different setup in different examples. Why not keep the structure flat and do the setup explicit in every example? If you need something different that declared in <code>let</code>, just use local variable in the example. <code>let</code> is great for specifying dependencies and things that don’t change per each test case.</li>\n<li>The main input to this class giving different outcomes are <code>params</code> — this should be clearly visible how they differ in the input and what output they give, why not pass them explicitly to <code>call</code>?</li>\n<li>Scope the test expectations, making assertion on <code>Parent.all</code> won’t give any guarantee that the service assigned data to a desired <code>Parent</code> object.</li>\n</ul>\n\n<p>Talk is cheap, so I did a 5 minutes refactoring resulting in this:</p>\n<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"c1\"># frozen_string_literal: true</span>\n\n<span class=\"nb\">require</span> <span class=\"s2\">&quot;rails_helper&quot;</span>\n\n<span class=\"no\">RSpec</span><span class=\"p\">.</span><span class=\"nf\">describe</span> <span class=\"no\">Api</span><span class=\"o\">::</span><span class=\"no\">Students</span><span class=\"o\">::</span><span class=\"no\">Update</span> <span class=\"k\">do</span>\n  <span class=\"nb\">test</span> <span class=\"s2\">&quot;when user is a student&quot;</span> <span class=\"k\">do</span>\n    <span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"no\">Api</span><span class=\"o\">::</span><span class=\"no\">Students</span><span class=\"o\">::</span><span class=\"no\">Update</span><span class=\"p\">.</span><span class=\"nf\">call</span><span class=\"p\">(</span><span class=\"ss\">current_user: </span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"ss\">params: </span><span class=\"p\">{</span> <span class=\"ss\">last_name: </span><span class=\"s2\">&quot;something&quot;</span> <span class=\"p\">})).</span><span class=\"nf\">to</span> <span class=\"n\">be_success</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"nb\">test</span> <span class=\"s2\">&quot;when user is a teacher&quot;</span> <span class=\"k\">do</span>\n    <span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"no\">Api</span><span class=\"o\">::</span><span class=\"no\">Students</span><span class=\"o\">::</span><span class=\"no\">Update</span><span class=\"p\">.</span><span class=\"nf\">call</span><span class=\"p\">(</span><span class=\"ss\">current_user: </span><span class=\"n\">teacher</span><span class=\"p\">,</span> <span class=\"ss\">params: </span><span class=\"p\">{</span> <span class=\"ss\">last_name: </span><span class=\"s2\">&quot;something&quot;</span> <span class=\"p\">})).</span><span class=\"nf\">to</span> <span class=\"n\">be_failure</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"nb\">test</span> <span class=\"s2\">&quot;when user has address and want to change something in their address will succeed&quot;</span> <span class=\"k\">do</span>\n    <span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"n\">create</span><span class=\"p\">(</span><span class=\"ss\">:address</span><span class=\"p\">,</span> <span class=\"ss\">owner: </span><span class=\"n\">user</span><span class=\"p\">)</span>\n\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"no\">Api</span><span class=\"o\">::</span><span class=\"no\">Students</span><span class=\"o\">::</span><span class=\"no\">Update</span><span class=\"p\">.</span><span class=\"nf\">call</span><span class=\"p\">(</span><span class=\"ss\">current_user: </span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"ss\">params: </span><span class=\"p\">{</span> <span class=\"ss\">last_name: </span><span class=\"s2\">&quot;something&quot;</span><span class=\"p\">,</span> <span class=\"ss\">zip_code: </span><span class=\"n\">new_zip_code</span> <span class=\"p\">})</span>\n\n    <span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"nf\">success?</span><span class=\"p\">).</span><span class=\"nf\">to</span> <span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"kp\">true</span><span class=\"p\">)</span>\n    <span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"p\">.</span><span class=\"nf\">reload</span><span class=\"p\">.</span><span class=\"nf\">zip_code</span><span class=\"p\">).</span><span class=\"nf\">to</span> <span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"n\">new_zip_code</span><span class=\"p\">)</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"nb\">test</span> <span class=\"s2\">&quot;when user has not have any address and want to change something in their address create address with given params&quot;</span> <span class=\"k\">do</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span>\n      <span class=\"n\">expect</span> <span class=\"p\">{</span>\n        <span class=\"no\">Api</span><span class=\"o\">::</span><span class=\"no\">Students</span><span class=\"o\">::</span><span class=\"no\">Update</span><span class=\"p\">.</span><span class=\"nf\">call</span><span class=\"p\">(</span><span class=\"ss\">current_user: </span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"ss\">params: </span><span class=\"p\">{</span> <span class=\"ss\">last_name: </span><span class=\"s2\">&quot;something&quot;</span><span class=\"p\">,</span> <span class=\"ss\">zip_code: </span><span class=\"n\">new_zip_code</span> <span class=\"p\">})</span>\n      <span class=\"p\">}.</span><span class=\"nf\">to</span> <span class=\"n\">change</span><span class=\"p\">(</span><span class=\"no\">Address</span><span class=\"p\">.</span><span class=\"nf\">all</span><span class=\"p\">,</span> <span class=\"ss\">:count</span><span class=\"p\">).</span><span class=\"nf\">from</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">).</span><span class=\"nf\">to</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n    <span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"nf\">success?</span><span class=\"p\">).</span><span class=\"nf\">to</span> <span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"kp\">true</span><span class=\"p\">)</span>\n    <span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"no\">Address</span><span class=\"p\">.</span><span class=\"nf\">last</span><span class=\"p\">.</span><span class=\"nf\">zip_code</span><span class=\"p\">).</span><span class=\"nf\">to</span> <span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"n\">new_zip_code</span><span class=\"p\">)</span>\n    <span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">.</span><span class=\"nf\">address</span><span class=\"p\">).</span><span class=\"nf\">to</span> <span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"no\">Address</span><span class=\"p\">.</span><span class=\"nf\">last</span><span class=\"p\">)</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"nb\">test</span> <span class=\"s2\">&quot;when user has parent and want to change something&quot;</span> <span class=\"k\">do</span>\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">create</span><span class=\"p\">(</span><span class=\"ss\">:user</span><span class=\"p\">,</span> <span class=\"ss\">profession: </span><span class=\"n\">student</span><span class=\"p\">)</span>\n\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"no\">Api</span><span class=\"o\">::</span><span class=\"no\">Students</span><span class=\"o\">::</span><span class=\"no\">Update</span><span class=\"p\">.</span><span class=\"nf\">call</span><span class=\"p\">(</span><span class=\"ss\">current_user: </span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"ss\">params: </span><span class=\"p\">{</span> <span class=\"ss\">parent: </span><span class=\"p\">{</span> <span class=\"ss\">first_name: </span><span class=\"n\">parent_first_name</span> <span class=\"p\">}</span> <span class=\"p\">})</span>\n\n    <span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">).</span><span class=\"nf\">to</span> <span class=\"n\">be_success</span>\n    <span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"n\">parent</span><span class=\"p\">.</span><span class=\"nf\">reload</span><span class=\"p\">.</span><span class=\"nf\">first_name</span><span class=\"p\">).</span><span class=\"nf\">to</span> <span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"n\">parent_first_name</span><span class=\"p\">)</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"nb\">test</span> <span class=\"s2\">&quot;when user has not have any parent and want to change something in their parent&quot;</span> <span class=\"k\">do</span>\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">create</span><span class=\"p\">(</span><span class=\"ss\">:user</span><span class=\"p\">,</span> <span class=\"ss\">profession: </span><span class=\"n\">student</span><span class=\"p\">)</span>\n\n    <span class=\"n\">result</span> <span class=\"o\">=</span>\n      <span class=\"n\">expect</span> <span class=\"p\">{</span>\n        <span class=\"no\">Api</span><span class=\"o\">::</span><span class=\"no\">Students</span><span class=\"o\">::</span><span class=\"no\">Update</span><span class=\"p\">.</span><span class=\"nf\">call</span><span class=\"p\">(</span><span class=\"ss\">current_user: </span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"ss\">params: </span><span class=\"p\">{</span> <span class=\"ss\">parent: </span><span class=\"p\">{</span> <span class=\"ss\">first_name: </span><span class=\"n\">parent_first_name</span> <span class=\"p\">}</span> <span class=\"p\">})</span>\n      <span class=\"p\">}.</span><span class=\"nf\">to</span> <span class=\"n\">change</span><span class=\"p\">(</span><span class=\"no\">Parent</span><span class=\"p\">.</span><span class=\"nf\">all</span><span class=\"p\">,</span> <span class=\"ss\">:count</span><span class=\"p\">).</span><span class=\"nf\">from</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">).</span><span class=\"nf\">to</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n    <span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">).</span><span class=\"nf\">to</span> <span class=\"n\">be_success</span>\n    <span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"no\">Parent</span><span class=\"p\">.</span><span class=\"nf\">last</span><span class=\"p\">.</span><span class=\"nf\">reload</span><span class=\"p\">.</span><span class=\"nf\">first_name</span><span class=\"p\">).</span><span class=\"nf\">to</span> <span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"n\">parent_first_name</span><span class=\"p\">)</span>\n    <span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">.</span><span class=\"nf\">profession</span><span class=\"p\">.</span><span class=\"nf\">parent</span><span class=\"p\">).</span><span class=\"nf\">to</span> <span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"no\">Parent</span><span class=\"p\">.</span><span class=\"nf\">last</span><span class=\"p\">)</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"n\">let</span><span class=\"p\">(</span><span class=\"ss\">:user</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">create</span><span class=\"p\">(</span><span class=\"ss\">:user</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n  <span class=\"n\">let</span><span class=\"p\">(</span><span class=\"ss\">:teacher</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">create</span><span class=\"p\">(</span><span class=\"ss\">:user</span><span class=\"p\">,</span> <span class=\"ss\">:teacher</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n  <span class=\"n\">let</span><span class=\"p\">(</span><span class=\"ss\">:student</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">create</span><span class=\"p\">(</span><span class=\"ss\">:student</span><span class=\"p\">,</span> <span class=\"ss\">parent: </span><span class=\"n\">parent</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n  <span class=\"n\">let</span><span class=\"p\">(</span><span class=\"ss\">:parent</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">create</span><span class=\"p\">(</span><span class=\"ss\">:parent</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n  <span class=\"n\">let</span><span class=\"p\">(</span><span class=\"ss\">:new_zip_code</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"no\">Faker</span><span class=\"o\">::</span><span class=\"no\">Address</span><span class=\"p\">.</span><span class=\"nf\">zip_code</span> <span class=\"p\">}</span>\n  <span class=\"n\">let</span><span class=\"p\">(</span><span class=\"ss\">:parent_first_name</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"no\">Fake</span><span class=\"o\">::</span><span class=\"no\">Name</span><span class=\"p\">.</span><span class=\"nf\">female_first_name</span> <span class=\"p\">}</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>What are your thoughts? Which version is more readable to you?</p>\n"
}