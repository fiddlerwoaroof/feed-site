{
  "title":"How we got struck by 5–year–old implementation",
  "date":"2022-11-15T13:59:22.000000Z",
  "author":null,
  "id":"tag:blog.arkency.com,2022-11-15:/how-we-got-struck-by-5-year-old-implementation/",
  "link":"https://blog.arkency.com/how-we-got-struck-by-5-year-old-implementation/",
  "content":"<h1 id=\"how_we_got_struck_by_5_year_old_implementation\">How we got struck by 5–year–old implementation</h1>\n<p>Recently we discovered that we were wrong on computing lock key for acquiring advisory locks. It was already covered as an update to <a href=\"https://blog.arkency.com/how-to-build-a-read-model-with-rails-event-store-projection/#we_were_wrong_on_computing_lock_key\">article about building read models</a>, but we thought that telling the whole story behind the issue could be interesting for you.</p>\n\n\n<h2 id=\"why_we_needed_advisory_lock\">Why we needed advisory lock</h2>\n<p>Please, have a look at this asynchronous event handler. There are two bounded contexts involved:</p>\n\n<ul>\n<li>Banking — it takes care of bank account’s technical information coming from 3rd party service</li>\n<li>Accounting — it is interested in bank accounts but in terms of doing bookkeeping job like putting initial balance and its further changes into specific <a href=\"https://en.wikipedia.org/wiki/Account_(bookkeeping)\">accounts</a></li>\n</ul>\n\n<p>When bank account is created in <em>Banking</em> we need to reflect that in <em>Accounting</em> and provide bookkeeping identifier for that account. It is done under certain rules, eg. all the bank accounts need to own parent code <code>512000</code> and code which follows previous one like <code>512101</code>, <code>512102</code>, <code>512103</code>, etc.</p>\n<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"c1\"># frozen_string_literal: true</span>\n\n<span class=\"k\">module</span> <span class=\"nn\">Accounting</span>\n  <span class=\"k\">class</span> <span class=\"nc\">CreateBankAccount</span> <span class=\"o\">&lt;</span> <span class=\"no\">Infra</span><span class=\"o\">::</span><span class=\"no\">EventHandler</span>\n    <span class=\"k\">def</span> <span class=\"nf\">call</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">)</span>\n      <span class=\"n\">tenant</span> <span class=\"o\">=</span> <span class=\"o\">::</span><span class=\"no\">Account</span><span class=\"p\">.</span><span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">.</span><span class=\"nf\">data</span><span class=\"p\">.</span><span class=\"nf\">fetch</span><span class=\"p\">(</span><span class=\"ss\">:tenant_id</span><span class=\"p\">))</span>\n      <span class=\"n\">bank_account</span> <span class=\"o\">=</span> <span class=\"o\">::</span><span class=\"no\">BankAccount</span><span class=\"p\">.</span><span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">.</span><span class=\"nf\">data</span><span class=\"p\">.</span><span class=\"nf\">fetch</span><span class=\"p\">(</span><span class=\"ss\">:id</span><span class=\"p\">))</span>\n      <span class=\"n\">bookkeeping_account</span> <span class=\"o\">=</span> <span class=\"no\">BookkeepingAccount</span><span class=\"p\">.</span><span class=\"nf\">for</span><span class=\"p\">(</span><span class=\"n\">bank_account</span><span class=\"p\">)</span>\n\n      <span class=\"no\">BankAccount</span><span class=\"p\">.</span><span class=\"nf\">create!</span><span class=\"p\">(</span>\n        <span class=\"ss\">tenant: </span><span class=\"n\">tenant</span><span class=\"p\">,</span>\n        <span class=\"ss\">name: </span><span class=\"s2\">&quot;</span><span class=\"si\">#{</span><span class=\"n\">bookkeeping_account</span><span class=\"p\">.</span><span class=\"nf\">code</span><span class=\"si\">}</span><span class=\"s2\"> – Bank&quot;</span><span class=\"p\">,</span>\n        <span class=\"ss\">display_name: </span><span class=\"s2\">&quot;Bank&quot;</span><span class=\"p\">,</span>\n        <span class=\"ss\">code: </span><span class=\"n\">bookkeeping_account</span><span class=\"p\">.</span><span class=\"nf\">code</span><span class=\"p\">,</span> <span class=\"c1\"># eg. 512101</span>\n        <span class=\"ss\">parent_code: </span><span class=\"n\">bookkeeping_account</span><span class=\"p\">.</span><span class=\"nf\">parent_code</span><span class=\"p\">,</span> <span class=\"c1\"># eg. 512000</span>\n      <span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>The code above is prone to concurrency issues. The business logic won’t allow creating two <code>Accounting::BankAccount</code> with the same <code>code</code> for the given tenant. <code>ActiveRecord::RecordNotUnique</code> would pop up soon, obviously.</p>\n<h2 id=\"advisory_locks_to_the_rescue\">Advisory locks to the rescue</h2>\n<p>In 2017 while working on a different project, we came with idea of using <a href=\"https://www.postgresql.org/docs/9.4/explicit-locking.html#ADVISORY-LOCKS\">advisory locks</a> to implement pessimistic locking, <a href=\"https://www.postgresql.org/docs/9.4/functions-admin.html#FUNCTIONS-ADVISORY-LOCKS\"><code>pg_advisory_xact_lock(key bigint)</code></a> specifically:</p>\n\n<blockquote>\n<p><code>pg_advisory_xact_lock</code> works the same as <code>pg_advisory_lock</code>, except the lock is automatically released at the end of the current transaction and cannot be released explicitly.</p>\n\n<p><code>pg_advisory_lock</code> locks an application-defined resource, which can be identified either by a single 64-bit key value or two 32-bit key values (note that these two key spaces do not overlap).</p>\n</blockquote>\n\n<p>We needed a way to generate big integer to be passed as argument to <code>pg_advisory_xact_lock</code>. Using <a href=\"https://ruby-doc.org/core-3.1.2/Object.html#method-i-hash\"><code>Object#hash</code></a> for that purpose sounded natural since it <em>generates an Integer hash value for this object</em>.</p>\n\n<p>Quick spike to verify our hypothesis:</p>\n<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"n\">uuid</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;a2e920fd-c51a-44a8-924d-5dc6aaba9884&quot;</span>\n<span class=\"n\">lock_nr</span> <span class=\"o\">=</span> <span class=\"n\">uuid</span><span class=\"p\">.</span><span class=\"nf\">hash</span>\n<span class=\"no\">ActiveRecord</span><span class=\"o\">::</span><span class=\"no\">Base</span><span class=\"p\">.</span><span class=\"nf\">transaction</span> <span class=\"k\">do</span>\n  <span class=\"nb\">puts</span> <span class=\"s2\">&quot;trying to obtain lock - </span><span class=\"si\">#{</span><span class=\"no\">Time</span><span class=\"p\">.</span><span class=\"nf\">now</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n  <span class=\"no\">ActiveRecord</span><span class=\"o\">::</span><span class=\"no\">Base</span><span class=\"p\">.</span><span class=\"nf\">connection</span><span class=\"p\">.</span><span class=\"nf\">execute</span> <span class=\"s2\">&quot;SELECT pg_advisory_xact_lock(</span><span class=\"si\">#{</span><span class=\"n\">lock_nr</span><span class=\"si\">}</span><span class=\"s2\">)&quot;</span>\n  <span class=\"nb\">puts</span> <span class=\"s2\">&quot;lock granted, sleeping - </span><span class=\"si\">#{</span><span class=\"no\">Time</span><span class=\"p\">.</span><span class=\"nf\">now</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n  <span class=\"nb\">sleep</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n<span class=\"nb\">puts</span> <span class=\"s2\">&quot;lock released - </span><span class=\"si\">#{</span><span class=\"no\">Time</span><span class=\"p\">.</span><span class=\"nf\">now</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n</code></pre></div>\n<p>Lock no. 1:</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>   (0.5ms)  BEGIN\ntrying to obtain lock - 2017-06-28 10:05:44 +0200\n   (0.7ms)  SELECT pg_advisory_xact_lock(1924743033351481473)\nlock granted, sleeping - 2017-06-28 10:05:44 +0200\n</code></pre></div>\n<p>Lock no. 2:</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>trying to obtain lock - 2017-06-28 10:05:46 +0200\n   (48570.8ms)  SELECT pg_advisory_xact_lock(1924743033351481473)\nlock granted, sleeping - 2017-06-28 10:06:34 +0200\n</code></pre></div>\n<p>Proof of concept worked. Let’s implement it then:</p>\n<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"c1\"># frozen_string_literal: true</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ApplicationRecord</span> <span class=\"o\">&lt;</span> <span class=\"no\">ActiveRecord</span><span class=\"o\">::</span><span class=\"no\">Base</span>\n  <span class=\"nb\">self</span><span class=\"p\">.</span><span class=\"nf\">abstract_class</span> <span class=\"o\">=</span> <span class=\"kp\">true</span>\n\n  <span class=\"k\">def</span> <span class=\"nc\">self</span><span class=\"o\">.</span><span class=\"nf\">with_advisory_lock</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"n\">transaction</span> <span class=\"k\">do</span>\n      <span class=\"n\">bigint</span> <span class=\"o\">=</span> <span class=\"n\">args</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">.</span><span class=\"nf\">hash</span>\n      <span class=\"no\">ApplicationRecord</span><span class=\"p\">.</span><span class=\"nf\">connection</span><span class=\"p\">.</span><span class=\"nf\">execute</span><span class=\"p\">(</span><span class=\"s2\">&quot;SELECT pg_advisory_xact_lock(</span><span class=\"si\">#{</span><span class=\"n\">bigint</span><span class=\"si\">}</span><span class=\"s2\">)&quot;</span><span class=\"p\">)</span>\n      <span class=\"k\">yield</span>\n    <span class=\"k\">end</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">module</span> <span class=\"nn\">Accounting</span>\n  <span class=\"k\">class</span> <span class=\"nc\">CreateBankAccount</span> <span class=\"o\">&lt;</span> <span class=\"no\">Infra</span><span class=\"o\">::</span><span class=\"no\">EventHandler</span>\n    <span class=\"k\">def</span> <span class=\"nf\">call</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">)</span>\n      <span class=\"n\">tenant</span> <span class=\"o\">=</span> <span class=\"o\">::</span><span class=\"no\">Account</span><span class=\"p\">.</span><span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">.</span><span class=\"nf\">data</span><span class=\"p\">.</span><span class=\"nf\">fetch</span><span class=\"p\">(</span><span class=\"ss\">:tenant_id</span><span class=\"p\">))</span>\n      <span class=\"n\">bank_account</span> <span class=\"o\">=</span> <span class=\"o\">::</span><span class=\"no\">BankAccount</span><span class=\"p\">.</span><span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">.</span><span class=\"nf\">data</span><span class=\"p\">.</span><span class=\"nf\">fetch</span><span class=\"p\">(</span><span class=\"ss\">:id</span><span class=\"p\">))</span>\n\n      <span class=\"no\">ApplicationRecord</span><span class=\"p\">.</span><span class=\"nf\">with_advisory_lock</span><span class=\"p\">(</span><span class=\"n\">tenant</span><span class=\"p\">.</span><span class=\"nf\">id</span><span class=\"p\">)</span> <span class=\"k\">do</span>\n        <span class=\"n\">bookkeeping_account</span> <span class=\"o\">=</span> <span class=\"no\">BookkeepingAccount</span><span class=\"p\">.</span><span class=\"nf\">for</span><span class=\"p\">(</span><span class=\"n\">bank_account</span><span class=\"p\">)</span>\n\n        <span class=\"no\">BankAccount</span><span class=\"p\">.</span><span class=\"nf\">create!</span><span class=\"p\">(</span>\n          <span class=\"ss\">tenant: </span><span class=\"n\">tenant</span><span class=\"p\">,</span>\n          <span class=\"ss\">name: </span><span class=\"s2\">&quot;</span><span class=\"si\">#{</span><span class=\"n\">bookkeeping_account</span><span class=\"p\">.</span><span class=\"nf\">code</span><span class=\"si\">}</span><span class=\"s2\"> – Bank&quot;</span><span class=\"p\">,</span>\n          <span class=\"ss\">display_name: </span><span class=\"s2\">&quot;Bank&quot;</span><span class=\"p\">,</span>\n          <span class=\"ss\">code: </span><span class=\"n\">bookkeeping_account</span><span class=\"p\">.</span><span class=\"nf\">code</span><span class=\"p\">,</span>\n          <span class=\"ss\">parent_code: </span><span class=\"n\">bookkeeping_account</span><span class=\"p\">.</span><span class=\"nf\">parent_code</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n      <span class=\"k\">end</span>\n    <span class=\"k\">end</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p><code>tenant_id</code> was taken as the input value for calculating <em>big integer</em> since we needed to guarantee the uniqueness in scope of the tenant.</p>\n<h2 id=\"testing_for_concurrency_issues\">Testing for concurrency issues</h2>\n<p>In 2015 Robert wrote a post on <a href=\"https://blog.arkency.com/2015/09/testing-race-conditions/\">Testing race conditions in Rails apps</a>. Since then, we know well how to test concurrent code, don’t we?</p>\n<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"c1\"># frozen_string_literal: true</span>\n\n<span class=\"nb\">require_relative</span> <span class=\"s2\">&quot;test_helper&quot;</span>\n<span class=\"nb\">require</span> <span class=\"s2\">&quot;database_cleaner/active_record&quot;</span>\n\n<span class=\"k\">module</span> <span class=\"nn\">Accounting</span>\n  <span class=\"k\">class</span> <span class=\"nc\">OnBankAccountCreatedConcurrencyTest</span> <span class=\"o\">&lt;</span> <span class=\"no\">TestCase</span>\n    <span class=\"nb\">self</span><span class=\"p\">.</span><span class=\"nf\">use_transactional_tests</span> <span class=\"o\">=</span> <span class=\"kp\">false</span>\n\n    <span class=\"n\">setup</span> <span class=\"p\">{</span> <span class=\"no\">DatabaseCleaner</span><span class=\"p\">.</span><span class=\"nf\">strategy</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"ss\">:truncation</span><span class=\"p\">]</span> <span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_concurrency</span>\n      <span class=\"k\">begin</span>\n        <span class=\"n\">concurrency_level</span> <span class=\"o\">=</span> <span class=\"no\">ActiveRecord</span><span class=\"o\">::</span><span class=\"no\">Base</span><span class=\"p\">.</span><span class=\"nf\">connection</span><span class=\"p\">.</span><span class=\"nf\">pool</span><span class=\"p\">.</span><span class=\"nf\">size</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n        <span class=\"n\">assert</span> <span class=\"n\">concurrency_level</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">4</span>\n\n        <span class=\"n\">bank_accounts</span> <span class=\"o\">=</span> <span class=\"n\">concurrency_level</span><span class=\"p\">.</span><span class=\"nf\">times</span><span class=\"p\">.</span><span class=\"nf\">map</span> <span class=\"p\">{</span> <span class=\"n\">create_bank_account</span> <span class=\"p\">}</span>\n\n        <span class=\"n\">fail_occurred</span> <span class=\"o\">=</span> <span class=\"kp\">false</span>\n        <span class=\"n\">wait_for_it</span> <span class=\"o\">=</span> <span class=\"kp\">true</span>\n\n        <span class=\"no\">Thread</span><span class=\"p\">.</span><span class=\"nf\">abort_on_exception</span> <span class=\"o\">=</span> <span class=\"kp\">true</span>\n        <span class=\"n\">threads</span> <span class=\"o\">=</span>\n          <span class=\"n\">concurrency_level</span><span class=\"p\">.</span><span class=\"nf\">times</span><span class=\"p\">.</span><span class=\"nf\">map</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">i</span><span class=\"o\">|</span>\n            <span class=\"no\">Thread</span><span class=\"p\">.</span><span class=\"nf\">new</span> <span class=\"k\">do</span>\n              <span class=\"kp\">true</span> <span class=\"k\">while</span> <span class=\"n\">wait_for_it</span>\n              <span class=\"k\">begin</span>\n                <span class=\"no\">Accounting</span><span class=\"o\">::</span><span class=\"no\">CreateBankAccount</span><span class=\"p\">.</span><span class=\"nf\">new</span><span class=\"p\">.</span><span class=\"nf\">call</span><span class=\"p\">(</span>\n                  <span class=\"no\">Banking</span><span class=\"o\">::</span><span class=\"no\">BankAccountCreated</span><span class=\"p\">.</span><span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"ss\">data: </span><span class=\"p\">{</span> <span class=\"ss\">tenant_id: </span><span class=\"mi\">2137</span><span class=\"p\">,</span> <span class=\"ss\">id: </span><span class=\"n\">bank_accounts</span><span class=\"p\">.</span><span class=\"nf\">fetch</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">).</span><span class=\"nf\">id</span> <span class=\"p\">}),</span>\n                <span class=\"p\">)</span>\n              <span class=\"k\">rescue</span> <span class=\"no\">ActiveRecord</span><span class=\"o\">::</span><span class=\"no\">RecordNotUnique</span>\n                <span class=\"n\">fail_occurred</span> <span class=\"o\">=</span> <span class=\"kp\">true</span>\n              <span class=\"k\">end</span>\n            <span class=\"k\">end</span>\n          <span class=\"k\">end</span>\n        <span class=\"n\">wait_for_it</span> <span class=\"o\">=</span> <span class=\"kp\">false</span>\n        <span class=\"n\">threads</span><span class=\"p\">.</span><span class=\"nf\">each</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"ss\">:join</span><span class=\"p\">)</span>\n\n        <span class=\"n\">refute</span> <span class=\"n\">fail_occurred</span>\n        <span class=\"n\">assert_equal</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"no\">Accounting</span><span class=\"o\">::</span><span class=\"no\">BankAccount</span><span class=\"p\">.</span><span class=\"nf\">of_tenant</span><span class=\"p\">(</span><span class=\"mi\">2137</span><span class=\"p\">).</span><span class=\"nf\">where</span><span class=\"p\">(</span><span class=\"ss\">parent_code: </span><span class=\"mi\">512_000</span><span class=\"p\">).</span><span class=\"nf\">size</span>\n      <span class=\"k\">ensure</span>\n        <span class=\"no\">ActiveRecord</span><span class=\"o\">::</span><span class=\"no\">Base</span><span class=\"p\">.</span><span class=\"nf\">connection_pool</span><span class=\"p\">.</span><span class=\"nf\">disconnect!</span>\n      <span class=\"k\">end</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"n\">teardown</span> <span class=\"p\">{</span> <span class=\"no\">DatabaseCleaner</span><span class=\"p\">.</span><span class=\"nf\">clean</span> <span class=\"p\">}</span>\n\n    <span class=\"kp\">private</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">create_bank_account</span>\n      <span class=\"no\">BankAccount</span><span class=\"p\">.</span><span class=\"nf\">create!</span><span class=\"p\">(</span>\n        <span class=\"ss\">connector_id: </span><span class=\"mi\">12_345</span><span class=\"p\">,</span>\n        <span class=\"ss\">balance_currency: </span><span class=\"no\">Money</span><span class=\"o\">::</span><span class=\"no\">Currency</span><span class=\"p\">.</span><span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"s2\">&quot;EUR&quot;</span><span class=\"p\">).</span><span class=\"nf\">iso_code</span><span class=\"p\">,</span>\n        <span class=\"ss\">balance_value: </span><span class=\"mf\">1_000_000.00</span><span class=\"p\">,</span>\n        <span class=\"ss\">external_id: </span><span class=\"no\">SecureRandom</span><span class=\"p\">.</span><span class=\"nf\">uuid</span><span class=\"p\">,</span>\n      <span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>The test was green, code was acting properly, so we shipped the code to production and slept well.</p>\n<h2 id=\"everything_was_fine_until_it_wasn__39_t\">Everything was fine until it wasn’t</h2>\n<p>Few years later, <code>ActiveRecord::RecordNotUnique</code> strikes back. We were intrigued why this had happened, but had no clue. The issue was self healing, since the code was run asynchronously on sidekiq with retries on failure. Quick investigations didn’t bring answer to the problem. The issue wasn’t a trouble to the app, but it was rather popping up in Honeybadger making developers scratch their head again and again.</p>\n\n<p>Then our teammate get those flashbacks from past project. He reminded himself that from time to time the similar issue occurred with advisory lock acquired in the same manner. You start discussing stack differences between those projects, what has changed in the past few months</p>\n\n<p><em>— Oh, we’ve added another sidekiq process</em></p>\n\n<p>You instantly run two separate <code>irb</code> processes to check whether this might be the case:</p>\n\n<p>Process no. 1:</p>\n<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"n\">irb</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">):</span><span class=\"mo\">001</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span> <span class=\"mi\">123456</span><span class=\"p\">.</span><span class=\"nf\">hash</span>\n<span class=\"o\">=&gt;</span> <span class=\"o\">-</span><span class=\"mi\">169614201293062129</span>\n</code></pre></div>\n<p>Process no. 2:</p>\n<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"n\">irb</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">):</span><span class=\"mo\">001</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span> <span class=\"mi\">123456</span><span class=\"p\">.</span><span class=\"nf\">hash</span>\n<span class=\"o\">=&gt;</span> <span class=\"o\">-</span><span class=\"mi\">4474522856021669622</span>\n</code></pre></div>\n<p><em>— Boom! Roasted…</em></p>\n<h2 id=\"properly_compute_your_lock_key\">Properly compute your lock key</h2>\n<p>Our initial implementation of <code>advisory_lock</code> method didn’t provide identical hash across different MRI processes and code was prone to <code>ActiveRecord::RecordNotUnique</code> errors:</p>\n<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"c1\"># frozen_string_literal: true</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ApplicationRecord</span> <span class=\"o\">&lt;</span> <span class=\"no\">ActiveRecord</span><span class=\"o\">::</span><span class=\"no\">Base</span>\n  <span class=\"nb\">self</span><span class=\"p\">.</span><span class=\"nf\">abstract_class</span> <span class=\"o\">=</span> <span class=\"kp\">true</span>\n\n  <span class=\"k\">def</span> <span class=\"nc\">self</span><span class=\"o\">.</span><span class=\"nf\">with_advisory_lock</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"n\">transaction</span> <span class=\"k\">do</span>\n      <span class=\"n\">bigint</span> <span class=\"o\">=</span> <span class=\"n\">args</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">.</span><span class=\"nf\">hash</span>\n      <span class=\"no\">ApplicationRecord</span><span class=\"p\">.</span><span class=\"nf\">connection</span><span class=\"p\">.</span><span class=\"nf\">execute</span><span class=\"p\">(</span><span class=\"s2\">&quot;SELECT pg_advisory_xact_lock(</span><span class=\"si\">#{</span><span class=\"n\">bigint</span><span class=\"si\">}</span><span class=\"s2\">)&quot;</span><span class=\"p\">)</span>\n      <span class=\"k\">yield</span>\n    <span class=\"k\">end</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>It required two different processes using two separate database connections to prove that previous <code>advisory_lock</code> didn’t work as expected and allowed share of the same resource. Test setup didn’t meet this criteria both in dev environment nor on CI.</p>\n\n<p>There’s important note on that in Ruby’s <a href=\"https://ruby-doc.org/core-3.1.2/Object.html#method-i-hash\">Object#hash</a> docs being the key to our issues:</p>\n\n<blockquote>\n<p>The hash value for an object may not be identical across invocations or implementations of Ruby. If you need a stable identifier across Ruby invocations and implementations you will need to generate one with a custom method.</p>\n</blockquote>\n\n<p>We fixed it by creating custom <code>hash_64()</code> function in our PostgreSQL database:</p>\n<div class=\"highlight\"><pre class=\"highlight sql\"><code><span class=\"k\">create</span> <span class=\"k\">function</span> <span class=\"n\">hash_64</span><span class=\"p\">(</span><span class=\"n\">_identifier</span> <span class=\"nb\">character</span> <span class=\"nb\">varying</span><span class=\"p\">)</span> <span class=\"k\">returns</span> <span class=\"nb\">bigint</span>\n    <span class=\"k\">language</span> <span class=\"n\">plpgsql</span>\n<span class=\"k\">as</span>\n<span class=\"err\">$$</span>\n<span class=\"k\">DECLARE</span>\n<span class=\"n\">hash</span> <span class=\"nb\">bigint</span><span class=\"p\">;</span>\n<span class=\"k\">BEGIN</span>\n  <span class=\"k\">select</span> <span class=\"k\">left</span><span class=\"p\">(</span><span class=\"s1\">'x'</span> <span class=\"o\">||</span> <span class=\"n\">md5</span><span class=\"p\">(</span><span class=\"n\">_identifier</span><span class=\"p\">),</span> <span class=\"mi\">16</span><span class=\"p\">)::</span><span class=\"nb\">bit</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">)::</span><span class=\"nb\">bigint</span> <span class=\"k\">into</span> <span class=\"n\">hash</span><span class=\"p\">;</span>\n  <span class=\"k\">return</span> <span class=\"n\">hash</span><span class=\"p\">;</span>\n  <span class=\"k\">END</span><span class=\"p\">;</span>\n  <span class=\"err\">$$</span><span class=\"p\">;</span>\n\n<span class=\"k\">alter</span> <span class=\"k\">function</span> <span class=\"n\">hash_64</span><span class=\"p\">(</span><span class=\"nb\">varchar</span><span class=\"p\">)</span> <span class=\"k\">owner</span> <span class=\"k\">to</span> <span class=\"n\">dbuser</span><span class=\"p\">;</span>\n\n</code></pre></div>\n<p>It was then used to fix the implementation of <code>advisory_lock</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"c1\"># frozen_string_literal: true</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ApplicationRecord</span> <span class=\"o\">&lt;</span> <span class=\"no\">ActiveRecord</span><span class=\"o\">::</span><span class=\"no\">Base</span>\n  <span class=\"nb\">self</span><span class=\"p\">.</span><span class=\"nf\">abstract_class</span> <span class=\"o\">=</span> <span class=\"kp\">true</span>\n\n  <span class=\"k\">def</span> <span class=\"nc\">self</span><span class=\"o\">.</span><span class=\"nf\">with_advisory_lock</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"n\">transaction</span> <span class=\"k\">do</span>\n      <span class=\"no\">ApplicationRecord</span><span class=\"p\">.</span><span class=\"nf\">connection</span><span class=\"p\">.</span><span class=\"nf\">execute</span><span class=\"p\">(</span><span class=\"s2\">&quot;SELECT pg_advisory_xact_lock(hash_64('</span><span class=\"si\">#{</span><span class=\"n\">args</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"si\">}</span><span class=\"s2\">'))&quot;</span><span class=\"p\">)</span>\n      <span class=\"k\">yield</span>\n    <span class=\"k\">end</span>\n  <span class=\"k\">end</span>\n</code></pre></div>\n<p>The <code>hash_64()</code> implementation was taken from <a href=\"https://github.com/eventide-project/message-store-postgres/commit/272a848e0f19851e255a28d8c7dee2ba66e98997\">Eventide</a> codebase.</p>\n\n<p>There are other alternative solutions, like use of <a href=\"https://ruby-doc.org/stdlib-2.5.3/libdoc/zlib/rdoc/Zlib.html#method-c-crc32\"><code>Zlib#crc32</code></a> if you prefer to stick with Ruby to compute lock key:</p>\n<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"c1\"># frozen_string_literal: true</span>\n<span class=\"k\">class</span> <span class=\"nc\">ApplicationRecord</span> <span class=\"o\">&lt;</span> <span class=\"no\">ActiveRecord</span><span class=\"o\">::</span><span class=\"no\">Base</span>\n  <span class=\"nb\">self</span><span class=\"p\">.</span><span class=\"nf\">abstract_class</span> <span class=\"o\">=</span> <span class=\"kp\">true</span>\n\n  <span class=\"k\">def</span> <span class=\"nc\">self</span><span class=\"o\">.</span><span class=\"nf\">with_advisory_lock</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"n\">transaction</span> <span class=\"k\">do</span>\n      <span class=\"no\">ApplicationRecord</span><span class=\"p\">.</span><span class=\"nf\">connection</span><span class=\"p\">.</span><span class=\"nf\">execute</span><span class=\"p\">(</span><span class=\"s2\">&quot;SELECT pg_advisory_xact_lock(</span><span class=\"si\">#{</span><span class=\"no\">Zlib</span><span class=\"p\">.</span><span class=\"nf\">crc32</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">)&quot;</span><span class=\"p\">)</span>\n      <span class=\"k\">yield</span>\n    <span class=\"k\">end</span>\n  <span class=\"k\">end</span>\n</code></pre></div>"
}