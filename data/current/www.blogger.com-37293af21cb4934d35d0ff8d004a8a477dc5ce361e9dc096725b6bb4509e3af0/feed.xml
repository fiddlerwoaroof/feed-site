<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet  href="http://www.blogger.com/styles/atom.css" type="text/css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:openSearch="http://a9.com/-/spec/opensearchrss/1.0/" xmlns:blogger="http://schemas.google.com/blogger/2008" xmlns:georss="http://www.georss.org/georss" xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0"><id>tag:blogger.com,1999:blog-1777990983847811806</id><updated>2021-08-31T06:52:52.010-07:00</updated><title type="text">Haskell for all</title><subtitle type="html"/><link rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml" href="https://www.haskellforall.com/feeds/posts/default"><link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default"><link rel="alternate" type="text/html" href="https://www.haskellforall.com/"><link rel="hub" href="http://pubsubhubbub.appspot.com/"><link rel="next" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default?start-index=26&amp;max-results=25"><author><name>Gabriel Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/></author><generator version="7.00" uri="http://www.blogger.com">Blogger</generator><openSearch:totalResults>147</openSearch:totalResults><openSearch:startIndex>1</openSearch:startIndex><openSearch:itemsPerPage>25</openSearch:itemsPerPage><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-7712329497884133684</id><published>2021-08-27T08:22:00.001-07:00</published><updated>2021-08-27T08:22:33.127-07:00</updated><title type="text">Naming function arguments in Dhall</title><content type="html">&lt;!DOCTYPE html&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;utf-8&quot; /&gt;  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;  &lt;title&gt;doc-args&lt;/title&gt;  &lt;style&gt;    html {       line-height: 1.5;       font-family: Georgia, serif;       font-size: 20px;       color: #1a1a1a;       background-color: #fdfdfd;     }     body {       margin: 0 auto;       max-width: 36em;       padding-left: 50px;       padding-right: 50px;       padding-top: 50px;       padding-bottom: 50px;       hyphens: auto;       word-wrap: break-word;       text-rendering: optimizeLegibility;       font-kerning: normal;     }     @media (max-width: 600px) {       body {         font-size: 0.9em;         padding: 1em;       }     }     @media print {       body {         background-color: transparent;         color: black;         font-size: 12pt;       }       p, h2, h3 {         orphans: 3;         widows: 3;       }       h2, h3, h4 {         page-break-after: avoid;       }     }     p {       margin: 1em 0;     }     a {       color: #1a1a1a;     }     a:visited {       color: #1a1a1a;     }     img {       max-width: 100%;     }     h1, h2, h3, h4, h5, h6 {       margin-top: 1.4em;     }     h5, h6 {       font-size: 1em;       font-style: italic;     }     h6 {       font-weight: normal;     }     ol, ul {       padding-left: 1.7em;       margin-top: 1em;     }     li &gt; ol, li &gt; ul {       margin-top: 0;     }     blockquote {       margin: 1em 0 1em 1.7em;       padding-left: 1em;       border-left: 2px solid #e6e6e6;       color: #606060;     }     code {       font-family: Menlo, Monaco, 'Lucida Console', Consolas, monospace;       font-size: 85%;       margin: 0;     }     pre {       margin: 1em 0;       overflow: auto;     }     pre code {       padding: 0;       overflow: visible;     }     .sourceCode {      background-color: transparent;      overflow: visible;     }     hr {       background-color: #1a1a1a;       border: none;       height: 1px;       margin: 1em 0;     }     table {       margin: 1em 0;       border-collapse: collapse;       width: 100%;       overflow-x: auto;       display: block;       font-variant-numeric: lining-nums tabular-nums;     }     table caption {       margin-bottom: 0.75em;     }     tbody {       margin-top: 0.5em;       border-top: 1px solid #1a1a1a;       border-bottom: 1px solid #1a1a1a;     }     th {       border-top: 1px solid #1a1a1a;       padding: 0.25em 0.5em 0.25em 0.5em;     }     td {       padding: 0.125em 0.5em 0.25em 0.5em;     }     header {       margin-bottom: 4em;       text-align: center;     }     #TOC li {       list-style: none;     }     #TOC a:not(:hover) {       text-decoration: none;     }     code{white-space: pre-wrap;}     span.smallcaps{font-variant: small-caps;}     span.underline{text-decoration: underline;}     div.column{display: inline-block; vertical-align: top; width: 50%;}     div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}     ul.task-list{list-style: none;}     pre &gt; code.sourceCode { white-space: pre; position: relative; }     pre &gt; code.sourceCode &gt; span { display: inline-block; line-height: 1.25; }     pre &gt; code.sourceCode &gt; span:empty { height: 1.2em; }     .sourceCode { overflow: visible; }     code.sourceCode &gt; span { color: inherit; text-decoration: inherit; }     div.sourceCode { margin: 1em 0; }     pre.sourceCode { margin: 0; }     @media screen {     div.sourceCode { overflow: auto; }     }     @media print {     pre &gt; code.sourceCode { white-space: pre-wrap; }     pre &gt; code.sourceCode &gt; span { text-indent: -5em; padding-left: 5em; }     }     pre.numberSource code       { counter-reset: source-line 0; }     pre.numberSource code &gt; span       { position: relative; left: -4em; counter-increment: source-line; }     pre.numberSource code &gt; span &gt; a:first-child::before       { content: counter(source-line);         position: relative; left: -1em; text-align: right; vertical-align: baseline;         border: none; display: inline-block;         -webkit-touch-callout: none; -webkit-user-select: none;         -khtml-user-select: none; -moz-user-select: none;         -ms-user-select: none; user-select: none;         padding: 0 4px; width: 4em;         color: #aaaaaa;       }     pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }     div.sourceCode       {   }     @media screen {     pre &gt; code.sourceCode &gt; span &gt; a:first-child::before { text-decoration: underline; }     }     code span.al { color: #ff0000; font-weight: bold; } /* Alert */     code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */     code span.at { color: #7d9029; } /* Attribute */     code span.bn { color: #40a070; } /* BaseN */     code span.bu { } /* BuiltIn */     code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */     code span.ch { color: #4070a0; } /* Char */     code span.cn { color: #880000; } /* Constant */     code span.co { color: #60a0b0; font-style: italic; } /* Comment */     code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */     code span.do { color: #ba2121; font-style: italic; } /* Documentation */     code span.dt { color: #902000; } /* DataType */     code span.dv { color: #40a070; } /* DecVal */     code span.er { color: #ff0000; font-weight: bold; } /* Error */     code span.ex { } /* Extension */     code span.fl { color: #40a070; } /* Float */     code span.fu { color: #06287e; } /* Function */     code span.im { } /* Import */     code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */     code span.kw { color: #007020; font-weight: bold; } /* Keyword */     code span.op { color: #666666; } /* Operator */     code span.ot { color: #007020; } /* Other */     code span.pp { color: #bc7a00; } /* Preprocessor */     code span.sc { color: #4070a0; } /* SpecialChar */     code span.ss { color: #bb6688; } /* SpecialString */     code span.st { color: #4070a0; } /* String */     code span.va { color: #19177c; } /* Variable */     code span.vs { color: #4070a0; } /* VerbatimString */     code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */     .display.math{display: block; text-align: center; margin: 0.5rem auto;}   &lt;/style&gt;  &lt;!--[if lt IE 9]&gt;    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;  &lt;![endif]--&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;This post showcases some neat &lt;a href=&quot;https://dhall-lang.org/&quot;&gt;Dhall&lt;/a&gt; language features for improving the readability of types that I think other languages should steal.&lt;/p&gt;&lt;p&gt;To motivate this post, consider the following Haskell type for &lt;a href=&quot;https://hackage.haskell.org/package/text-1.2.5.0/docs/Data-Text.html#v:replace&quot;&gt;&lt;code&gt;Data.Text.replace&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;replace ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This function replaces all occurrences of a substring with another substring, but you wouldn’t be able to easily guess which argument is which from the type alone.&lt;/p&gt;&lt;p&gt;Fortunately, the function does have Haddock-level documentation in the form of comments for each function argument:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;replace&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;    ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;#cb2-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;-- ^ @needle@ to search for.  If this string is empty, an&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-4&quot;&gt;&lt;a href=&quot;#cb2-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;-- error will occur.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-5&quot;&gt;&lt;a href=&quot;#cb2-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-6&quot;&gt;&lt;a href=&quot;#cb2-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;-- ^ @replacement@ to replace @needle@ with.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-7&quot;&gt;&lt;a href=&quot;#cb2-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-8&quot;&gt;&lt;a href=&quot;#cb2-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;-- ^ @haystack@ in which to search.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-9&quot;&gt;&lt;a href=&quot;#cb2-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… but what if you could provide a hint to what each argument does within the type itself?&lt;/p&gt;&lt;h4 id=&quot;naming-function-arguments-using-forall&quot;&gt;Naming function arguments using &lt;code&gt;∀&lt;/code&gt; / &lt;code&gt;forall&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;Well, in Dhall you can, and here is the equivalent Dhall type:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; dhall repl&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;#cb3-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;⊢ &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;/&lt;/span&gt;replace&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-3&quot;&gt;&lt;a href=&quot;#cb3-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-4&quot;&gt;&lt;a href=&quot;#cb3-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;∀(needle &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;) → ∀(replacement &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;) → ∀(haystack &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;) → &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… or if you prefer ASCII syntax then that is the same as this type:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;#cb4-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;forall&lt;/span&gt; (needle &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-2&quot;&gt;&lt;a href=&quot;#cb4-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;forall&lt;/span&gt; (replacement &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-3&quot;&gt;&lt;a href=&quot;#cb4-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;forall&lt;/span&gt; (haystack &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-4&quot;&gt;&lt;a href=&quot;#cb4-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here we’ve tagged each function argument with the argument’s name. In fact, you don’t need to do this explicitly. Dhall will automatically infer named function argument types when you create user-defined functions:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;#cb5-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;⊢ &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; λ(name &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;) → &lt;span class=&quot;st&quot;&gt;&amp;quot;Hello, ${name}&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-2&quot;&gt;&lt;a href=&quot;#cb5-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-3&quot;&gt;&lt;a href=&quot;#cb5-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;∀(name &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;) → &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In many cases these names are “cosmetic”, meaning that they have no effect on type-checking. For example, as far as the type-checker is concerned the following function type:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb6&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb6-1&quot;&gt;&lt;a href=&quot;#cb6-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;∀(name &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;) → &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… is the exact same as the following simpler function type (they are α-equivalent):&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb7&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb7-1&quot;&gt;&lt;a href=&quot;#cb7-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt; → &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, sometimes these names are not cosmetic! The simplest example is a polymorphic function (a.k.a. a “generic” function), like the following polymorphic identity function:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb8&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb8-1&quot;&gt;&lt;a href=&quot;#cb8-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; identity&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-2&quot;&gt;&lt;a href=&quot;#cb8-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ∀(a &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Type&lt;/span&gt;) → a → a&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-3&quot;&gt;&lt;a href=&quot;#cb8-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; λ(a &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Type&lt;/span&gt;) → λ(x &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; a) → x&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-4&quot;&gt;&lt;a href=&quot;#cb8-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-5&quot;&gt;&lt;a href=&quot;#cb8-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;  identity&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here we’ve used the &lt;code&gt;∀&lt;/code&gt; to name the first function argument &lt;code&gt;a&lt;/code&gt;, which lets us reference that name downstream within the same type.&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb9&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb9-1&quot;&gt;&lt;a href=&quot;#cb9-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; identity&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb9-2&quot;&gt;&lt;a href=&quot;#cb9-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;       &lt;span class=&quot;co&quot;&gt;-- We&amp;#39;re naming our first function argument `a` …&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb9-3&quot;&gt;&lt;a href=&quot;#cb9-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;       &lt;span class=&quot;co&quot;&gt;-- ↓&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb9-4&quot;&gt;&lt;a href=&quot;#cb9-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ∀(a &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Type&lt;/span&gt;) → a → a&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb9-5&quot;&gt;&lt;a href=&quot;#cb9-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                   &lt;span class=&quot;co&quot;&gt;-- ↑   ↑&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb9-6&quot;&gt;&lt;a href=&quot;#cb9-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                   &lt;span class=&quot;co&quot;&gt;-- … so that we can reference the value of the first function&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb9-7&quot;&gt;&lt;a href=&quot;#cb9-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                   &lt;span class=&quot;co&quot;&gt;-- argument downstream within the same type&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb9-8&quot;&gt;&lt;a href=&quot;#cb9-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; λ(a &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Type&lt;/span&gt;) → λ(x &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; a) → x&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb9-9&quot;&gt;&lt;a href=&quot;#cb9-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb9-10&quot;&gt;&lt;a href=&quot;#cb9-10&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;  identity&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, unlike other languages, Dhall also lets us name the second function argument using the exact same syntax, even though our second function argument is not a &lt;code&gt;Type&lt;/code&gt;:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb10&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb10-1&quot;&gt;&lt;a href=&quot;#cb10-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; identity&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-2&quot;&gt;&lt;a href=&quot;#cb10-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ∀(a &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Type&lt;/span&gt;) → ∀(x &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; a) → a&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-3&quot;&gt;&lt;a href=&quot;#cb10-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; λ(a &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Type&lt;/span&gt;) → λ(x &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; a) → x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In fact, this is actually the type that the interpreter would have inferred if we had omitted the type annotation. The name of this second function argument is cosmetic, though.&lt;/p&gt;&lt;p&gt;Another example where the argument name is not cosmetic is the following hypothetical Dhall type for a safe division function that rejects &lt;code&gt;0&lt;/code&gt; denominators at type-checking time:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb11&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb11-1&quot;&gt;&lt;a href=&quot;#cb11-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;divide&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-2&quot;&gt;&lt;a href=&quot;#cb11-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ∀(&lt;span class=&quot;fu&quot;&gt;denominator&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt;) →&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-3&quot;&gt;&lt;a href=&quot;#cb11-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      ∀(proof &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;/&lt;/span&gt;isZero &lt;span class=&quot;fu&quot;&gt;denominator&lt;/span&gt; ≡ &lt;span class=&quot;dt&quot;&gt;False&lt;/span&gt;) →&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-4&quot;&gt;&lt;a href=&quot;#cb11-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      ∀(&lt;span class=&quot;fu&quot;&gt;numerator&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt;) →&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-5&quot;&gt;&lt;a href=&quot;#cb11-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This division function takes three arguments instead of the usual two:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;The first argument is the denominator&lt;/p&gt;&lt;p&gt;… as you may have guessed from the helpful type-level name&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The second function argument requires a proof that &lt;code&gt;denominator&lt;/code&gt; is non-zero&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Side note: This proof obligation is satisfied by &lt;code&gt;assert : False ≡ False&lt;/code&gt; so long as &lt;code&gt;denominator&lt;/code&gt; is not &lt;code&gt;0&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The third argument is the numerator&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;By naming the first argument &lt;code&gt;denominator&lt;/code&gt;, we can refer to the &lt;em&gt;value&lt;/em&gt; of the first argument within the &lt;em&gt;type&lt;/em&gt; of the second argument:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb12&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb12-1&quot;&gt;&lt;a href=&quot;#cb12-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;divide&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-2&quot;&gt;&lt;a href=&quot;#cb12-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;--  We&amp;#39;re referring to the value of the first argument …&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-3&quot;&gt;&lt;a href=&quot;#cb12-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;--  ↓&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-4&quot;&gt;&lt;a href=&quot;#cb12-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ∀(&lt;span class=&quot;fu&quot;&gt;denominator&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt;) →&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-5&quot;&gt;&lt;a href=&quot;#cb12-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;--                         … within the type of the second argument&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-6&quot;&gt;&lt;a href=&quot;#cb12-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;--                         ↓&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-7&quot;&gt;&lt;a href=&quot;#cb12-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      ∀(proof &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;/&lt;/span&gt;isZero &lt;span class=&quot;fu&quot;&gt;denominator&lt;/span&gt; ≡ &lt;span class=&quot;dt&quot;&gt;False&lt;/span&gt;) →&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-8&quot;&gt;&lt;a href=&quot;#cb12-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;--  ↑&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-9&quot;&gt;&lt;a href=&quot;#cb12-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;--  These names are still cosmetic, though&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-10&quot;&gt;&lt;a href=&quot;#cb12-10&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;--  ↓&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-11&quot;&gt;&lt;a href=&quot;#cb12-11&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      ∀(&lt;span class=&quot;fu&quot;&gt;numerator&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt;) →&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-12&quot;&gt;&lt;a href=&quot;#cb12-12&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You might wonder why Dhall uses the &lt;code&gt;∀&lt;/code&gt; / &lt;code&gt;forall&lt;/code&gt; keyword for this purpose, since typically most languages only use &lt;code&gt;forall&lt;/code&gt; to create polymorphic (a.k.a. “generic”) functions. This is because Dhall is implemented as a &lt;a href=&quot;https://en.wikipedia.org/wiki/Pure_type_system&quot;&gt;pure type system&lt;/a&gt;, meaning that Dhall uniformly handles term-level function arguments and type-level function arguments in the exact same way. They’re both special cases of &lt;a href=&quot;https://en.wikipedia.org/wiki/Dependent_type#%CE%A0_type&quot;&gt;Π types&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The following paper does a really good job explaining pure type systems and Π types:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.microsoft.com/en-us/research/wp-content/uploads/1997/01/henk.pdf&quot;&gt;Henk: a typed intermediate language&lt;/a&gt;,&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;… and that’s actually where I stole this trick from.&lt;/p&gt;&lt;p&gt;Really the correct symbol to use is &lt;code&gt;Π&lt;/code&gt; and not &lt;code&gt;∀&lt;/code&gt;, but there isn’t a great way to input &lt;code&gt;Π&lt;/code&gt; as ASCII. The Henk paper suggests using &lt;code&gt;|~|&lt;/code&gt; as the ASCII counterpart to &lt;code&gt;Π&lt;/code&gt;, but that didn’t seem right to me. I went with &lt;code&gt;∀&lt;/code&gt; / &lt;code&gt;forall&lt;/code&gt; because there’s already prior art for using those for type arguments.&lt;/p&gt;&lt;h4 id=&quot;anonymous-record-types&quot;&gt;Anonymous record types&lt;/h4&gt;&lt;p&gt;There is another approach to naming function arguments that doesn’t require a pure type system at all: anonymous record types.&lt;/p&gt;&lt;p&gt;For example, we could have changed the &lt;code&gt;Text/replace&lt;/code&gt; function to have this type:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb13&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb13-1&quot;&gt;&lt;a href=&quot;#cb13-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;{ needle &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;, replacement &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;, haystack &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt; } → &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That’s pretty clear, too, and can be done in any language that supports anonymous record types, including Dhall, &lt;a href=&quot;https://fsharp.org/&quot;&gt;F#&lt;/a&gt;, &lt;a href=&quot;https://www.purescript.org/&quot;&gt;PureScript&lt;/a&gt;, &lt;a href=&quot;https://elm-lang.org/&quot;&gt;Elm&lt;/a&gt;, and &lt;a href=&quot;https://ocaml.org/&quot;&gt;OCaml&lt;/a&gt;.&lt;/p&gt;&lt;h4 id=&quot;naming-type-parameters&quot;&gt;Naming type parameters&lt;/h4&gt;&lt;p&gt;You can also use the above two tricks to name type arguments for type constructors, too.&lt;/p&gt;&lt;p&gt;For example, we can define a &lt;code&gt;Map&lt;/code&gt; type constructor to be a list of key-value pairs:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb14&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb14-1&quot;&gt;&lt;a href=&quot;#cb14-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-2&quot;&gt;&lt;a href=&quot;#cb14-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      λ(key &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Type&lt;/span&gt;) →&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-3&quot;&gt;&lt;a href=&quot;#cb14-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      λ(value &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Type&lt;/span&gt;) →&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-4&quot;&gt;&lt;a href=&quot;#cb14-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;List&lt;/span&gt; { mapKey &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; key, mapValue &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; value }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… which we would use like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb15&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb15-1&quot;&gt;&lt;a href=&quot;#cb15-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;⊢ &lt;span class=&quot;dt&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-2&quot;&gt;&lt;a href=&quot;#cb15-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-3&quot;&gt;&lt;a href=&quot;#cb15-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;List&lt;/span&gt; { mapKey &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;, mapValue &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt; }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… and the inferred type names the arguments to our &lt;code&gt;Map&lt;/code&gt; type constructor:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb16&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb16-1&quot;&gt;&lt;a href=&quot;#cb16-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;⊢ &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Map&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb16-2&quot;&gt;&lt;a href=&quot;#cb16-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb16-3&quot;&gt;&lt;a href=&quot;#cb16-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;∀(key &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Type&lt;/span&gt;) → ∀(value &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Type&lt;/span&gt;) → &lt;span class=&quot;dt&quot;&gt;Type&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can also use anonymous records to name type arguments, too! For example, we could have instead defined &lt;code&gt;Map&lt;/code&gt; as:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb17&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb17-1&quot;&gt;&lt;a href=&quot;#cb17-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb17-2&quot;&gt;&lt;a href=&quot;#cb17-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      λ(args &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; { key &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Type&lt;/span&gt;, value &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Type&lt;/span&gt; }) →&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb17-3&quot;&gt;&lt;a href=&quot;#cb17-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;List&lt;/span&gt; { mapKey &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; args&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;key, mapValue &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; args&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;value }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… which we would use like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb18&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb18-1&quot;&gt;&lt;a href=&quot;#cb18-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;⊢ &lt;span class=&quot;dt&quot;&gt;Map&lt;/span&gt; { key &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;, value &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt; }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-2&quot;&gt;&lt;a href=&quot;#cb18-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-3&quot;&gt;&lt;a href=&quot;#cb18-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;List&lt;/span&gt; { mapKey &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;, mapValue &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt; }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… and this latter &lt;code&gt;Map&lt;/code&gt; would have an inferred type of:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb19&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb19-1&quot;&gt;&lt;a href=&quot;#cb19-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;⊢ &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Map&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-2&quot;&gt;&lt;a href=&quot;#cb19-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-3&quot;&gt;&lt;a href=&quot;#cb19-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;∀(args &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; { key &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Type&lt;/span&gt;, value &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Type&lt;/span&gt; }) → &lt;span class=&quot;dt&quot;&gt;Type&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Pretty neat! Not many languages can pass type constructor arguments as named fields of a record.&lt;/p&gt;&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;&lt;p&gt;Hopefully this gives language designers some ideas for how they can add language support for naming function arguments.&lt;/p&gt;&lt;p&gt;Unfortunately, my favorite language (&lt;a href=&quot;https://www.haskell.org/&quot;&gt;Haskell&lt;/a&gt;) does not exactly support these features, so sometimes people work around this by using &lt;code&gt;newtype&lt;/code&gt;s to name function arguments. I’ve never been of fan of this approach, especially if the newtype is not opaque and this post does a good job of explaining why:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://lexi-lambda.github.io/blog/2020/11/01/names-are-not-type-safety/&quot;&gt;Names are not type safety&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;However, you can simulate this trick in Haskell using something like what the &lt;code&gt;vulkan&lt;/code&gt; package does, which is to use &lt;code&gt;DataKinds&lt;/code&gt; and &lt;code&gt;TypeOperators&lt;/code&gt; to create a type-level operator that lets you associate arbitrary name data with types:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb20&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb20-1&quot;&gt;&lt;a href=&quot;#cb20-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; (&lt;span class=&quot;ot&quot;&gt;name ::&lt;/span&gt; k) &lt;span class=&quot;op&quot;&gt;:::&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… which the package uses like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb21&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb21-1&quot;&gt;&lt;a href=&quot;#cb21-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;cmdDraw&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb21-2&quot;&gt;&lt;a href=&quot;#cb21-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;    ::&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;forall&lt;/span&gt; io &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;MonadIO&lt;/span&gt; io)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb21-3&quot;&gt;&lt;a href=&quot;#cb21-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;-- | @commandBuffer@ is the command buffer into which the command is&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb21-4&quot;&gt;&lt;a href=&quot;#cb21-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;       &lt;span class=&quot;co&quot;&gt;-- recorded.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb21-5&quot;&gt;&lt;a href=&quot;#cb21-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;       &lt;span class=&quot;dt&quot;&gt;CommandBuffer&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb21-6&quot;&gt;&lt;a href=&quot;#cb21-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;-- | @vertexCount@ is the number of vertices to draw.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb21-7&quot;&gt;&lt;a href=&quot;#cb21-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;       (&lt;span class=&quot;st&quot;&gt;&amp;quot;vertexCount&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Word32&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb21-8&quot;&gt;&lt;a href=&quot;#cb21-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;-- | @instanceCount@ is the number of instances to draw.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb21-9&quot;&gt;&lt;a href=&quot;#cb21-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;       (&lt;span class=&quot;st&quot;&gt;&amp;quot;instanceCount&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Word32&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb21-10&quot;&gt;&lt;a href=&quot;#cb21-10&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;-- | @firstVertex@ is the index of the first vertex to draw.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb21-11&quot;&gt;&lt;a href=&quot;#cb21-11&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;       (&lt;span class=&quot;st&quot;&gt;&amp;quot;firstVertex&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Word32&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb21-12&quot;&gt;&lt;a href=&quot;#cb21-12&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;-- | @firstInstance@ is the instance ID of the first instance to draw.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb21-13&quot;&gt;&lt;a href=&quot;#cb21-13&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;       (&lt;span class=&quot;st&quot;&gt;&amp;quot;firstInstance&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Word32&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb21-14&quot;&gt;&lt;a href=&quot;#cb21-14&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; io ()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;These names are ignored by the type-checker, just like the equivalent cosmetic names in Dhall.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</content><link rel="replies" type="application/atom+xml" href="https://www.haskellforall.com/feeds/7712329497884133684/comments/default" title="Post Comments"><link rel="replies" type="text/html" href="https://www.haskellforall.com/2021/08/naming-function-arguments-in-dhall.html#comment-form" title="0 Comments"><link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/7712329497884133684"><link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/7712329497884133684"><link rel="alternate" type="text/html" href="https://www.haskellforall.com/2021/08/naming-function-arguments-in-dhall.html" title="Naming function arguments in Dhall"><author><name>Gabriel Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-6319221858421997722</id><published>2021-08-13T08:07:00.002-07:00</published><updated>2021-08-14T13:01:54.620-07:00</updated><title type="text">Namespaced De Bruijn indices</title><content type="html">&lt;!DOCTYPE html&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;utf-8&quot; /&gt;  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;  &lt;title&gt;namespaced-debruijn&lt;/title&gt;  &lt;style&gt;    html {       line-height: 1.5;       font-family: Georgia, serif;       font-size: 20px;       color: #1a1a1a;       background-color: #fdfdfd;     }     body {       margin: 0 auto;       max-width: 36em;       padding-left: 50px;       padding-right: 50px;       padding-top: 50px;       padding-bottom: 50px;       hyphens: auto;       word-wrap: break-word;       text-rendering: optimizeLegibility;       font-kerning: normal;     }     @media (max-width: 600px) {       body {         font-size: 0.9em;         padding: 1em;       }     }     @media print {       body {         background-color: transparent;         color: black;         font-size: 12pt;       }       p, h2, h3 {         orphans: 3;         widows: 3;       }       h2, h3, h4 {         page-break-after: avoid;       }     }     p {       margin: 1em 0;     }     a {       color: #1a1a1a;     }     a:visited {       color: #1a1a1a;     }     img {       max-width: 100%;     }     h1, h2, h3, h4, h5, h6 {       margin-top: 1.4em;     }     h5, h6 {       font-size: 1em;       font-style: italic;     }     h6 {       font-weight: normal;     }     ol, ul {       padding-left: 1.7em;       margin-top: 1em;     }     li &gt; ol, li &gt; ul {       margin-top: 0;     }     blockquote {       margin: 1em 0 1em 1.7em;       padding-left: 1em;       border-left: 2px solid #e6e6e6;       color: #606060;     }     code {       font-family: Menlo, Monaco, 'Lucida Console', Consolas, monospace;       font-size: 85%;       margin: 0;     }     pre {       margin: 1em 0;       overflow: auto;     }     pre code {       padding: 0;       overflow: visible;     }     .sourceCode {      background-color: transparent;      overflow: visible;     }     hr {       background-color: #1a1a1a;       border: none;       height: 1px;       margin: 1em 0;     }     table {       margin: 1em 0;       border-collapse: collapse;       width: 100%;       overflow-x: auto;       display: block;       font-variant-numeric: lining-nums tabular-nums;     }     table caption {       margin-bottom: 0.75em;     }     tbody {       margin-top: 0.5em;       border-top: 1px solid #1a1a1a;       border-bottom: 1px solid #1a1a1a;     }     th {       border-top: 1px solid #1a1a1a;       padding: 0.25em 0.5em 0.25em 0.5em;     }     td {       padding: 0.125em 0.5em 0.25em 0.5em;     }     header {       margin-bottom: 4em;       text-align: center;     }     #TOC li {       list-style: none;     }     #TOC a:not(:hover) {       text-decoration: none;     }     code{white-space: pre-wrap;}     span.smallcaps{font-variant: small-caps;}     span.underline{text-decoration: underline;}     div.column{display: inline-block; vertical-align: top; width: 50%;}     div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}     ul.task-list{list-style: none;}     pre &gt; code.sourceCode { white-space: pre; position: relative; }     pre &gt; code.sourceCode &gt; span { display: inline-block; line-height: 1.25; }     pre &gt; code.sourceCode &gt; span:empty { height: 1.2em; }     .sourceCode { overflow: visible; }     code.sourceCode &gt; span { color: inherit; text-decoration: inherit; }     div.sourceCode { margin: 1em 0; }     pre.sourceCode { margin: 0; }     @media screen {     div.sourceCode { overflow: auto; }     }     @media print {     pre &gt; code.sourceCode { white-space: pre-wrap; }     pre &gt; code.sourceCode &gt; span { text-indent: -5em; padding-left: 5em; }     }     pre.numberSource code       { counter-reset: source-line 0; }     pre.numberSource code &gt; span       { position: relative; left: -4em; counter-increment: source-line; }     pre.numberSource code &gt; span &gt; a:first-child::before       { content: counter(source-line);         position: relative; left: -1em; text-align: right; vertical-align: baseline;         border: none; display: inline-block;         -webkit-touch-callout: none; -webkit-user-select: none;         -khtml-user-select: none; -moz-user-select: none;         -ms-user-select: none; user-select: none;         padding: 0 4px; width: 4em;         color: #aaaaaa;       }     pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }     div.sourceCode       {   }     @media screen {     pre &gt; code.sourceCode &gt; span &gt; a:first-child::before { text-decoration: underline; }     }     code span.al { color: #ff0000; font-weight: bold; } /* Alert */     code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */     code span.at { color: #7d9029; } /* Attribute */     code span.bn { color: #40a070; } /* BaseN */     code span.bu { } /* BuiltIn */     code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */     code span.ch { color: #4070a0; } /* Char */     code span.cn { color: #880000; } /* Constant */     code span.co { color: #60a0b0; font-style: italic; } /* Comment */     code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */     code span.do { color: #ba2121; font-style: italic; } /* Documentation */     code span.dt { color: #902000; } /* DataType */     code span.dv { color: #40a070; } /* DecVal */     code span.er { color: #ff0000; font-weight: bold; } /* Error */     code span.ex { } /* Extension */     code span.fl { color: #40a070; } /* Float */     code span.fu { color: #06287e; } /* Function */     code span.im { } /* Import */     code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */     code span.kw { color: #007020; font-weight: bold; } /* Keyword */     code span.op { color: #666666; } /* Operator */     code span.ot { color: #007020; } /* Other */     code span.pp { color: #bc7a00; } /* Preprocessor */     code span.sc { color: #4070a0; } /* SpecialChar */     code span.ss { color: #bb6688; } /* SpecialString */     code span.st { color: #4070a0; } /* String */     code span.va { color: #19177c; } /* Variable */     code span.vs { color: #4070a0; } /* VerbatimString */     code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */     .display.math{display: block; text-align: center; margin: 0.5rem auto;}   &lt;/style&gt;  &lt;!--[if lt IE 9]&gt;    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;  &lt;![endif]--&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;In this post I share a trick I use for dealing with bound variables in &lt;a href=&quot;https://dhall-lang.org/&quot;&gt;Dhall&lt;/a&gt; that I thought might be useful for other interpreted programming languages. I have no idea if this trick has been introduced before but if it has then just let me know and I’ll acknowledge any prior art here.&lt;/p&gt;&lt;p&gt;Edit: Todd Wilson points out that Mark-Oliver Stehr’s &lt;a href=&quot;https://www.sciencedirect.com/science/article/pii/S1571066105801252&quot;&gt;CINNI&lt;/a&gt; originally introduced this idea.&lt;/p&gt;&lt;p&gt;The brief explanation of the trick is: instead of choosing between a named or a nameless representation for bound variables you can get the best of both worlds by namespacing De Bruijn indices by variable names. This simplifies the implementation and in some cases improves the end user’s experience.&lt;/p&gt;&lt;p&gt;The rest of this post is a longer explanation of the above summary, starting with an explanation of the trick and followed by a review of the benefits of this approach.&lt;/p&gt;&lt;h4 id=&quot;background&quot;&gt;Background&lt;/h4&gt;&lt;p&gt;I’d like to first explain what I mean by “named” and “nameless” representations before I explain the trick.&lt;/p&gt;&lt;p&gt;A named representation of the lambda calculus syntax tree typically looks something like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Syntax&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Variable&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;#cb1-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Lambda&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Syntax&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-4&quot;&gt;&lt;a href=&quot;#cb1-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Apply&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Syntax&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Syntax&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For example, if the user wrote the following Haskell-like code:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;\f &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; f x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… then that would correspond to this syntax tree:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;example ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Syntax&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;#cb3-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;example &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Lambda&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;f&amp;quot;&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Lambda&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Apply&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Variable&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;f&amp;quot;&lt;/span&gt;) (&lt;span class=&quot;dt&quot;&gt;Variable&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The named representation has the nice property that it preserves the original variable names … well, sort of. This representation definitely preserves the variable names when you initially parse the code into the syntax tree, but if you β-reduce an expression you can potentially run into problems.&lt;/p&gt;&lt;p&gt;For example, consider this expression:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;#cb4-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;\x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; (\y &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; y) x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… which corresponds to this syntax tree:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;#cb5-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Lambda&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Apply&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Lambda&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;y&amp;quot;&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Lambda&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Variable&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;y&amp;quot;&lt;/span&gt;))) (&lt;span class=&quot;dt&quot;&gt;Variable&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you try to β-reduce &lt;code&gt;(\y -&amp;gt; \x -&amp;gt; y) x&lt;/code&gt; without renaming any variables then you get the following incorrect result:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb6&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb6-1&quot;&gt;&lt;a href=&quot;#cb6-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;\x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This bug is known as “name capture” and capture-avoiding substitution requires renaming one of the variables named &lt;code&gt;x&lt;/code&gt; so that the inner &lt;code&gt;x&lt;/code&gt; does not shadow the outer &lt;code&gt;x&lt;/code&gt;. For example, we could fix the problem by renaming the outer &lt;code&gt;x&lt;/code&gt; to &lt;code&gt;x1&lt;/code&gt; like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb7&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb7-1&quot;&gt;&lt;a href=&quot;#cb7-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;\x1 &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; x1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A nameless representation tries to work around these name capture issues by replacing the variable names with numeric indices (known as &lt;a href=&quot;https://en.wikipedia.org/wiki/De_Bruijn_index&quot;&gt;De Bruijn indices&lt;/a&gt;):&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb8&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb8-1&quot;&gt;&lt;a href=&quot;#cb8-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Syntax&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-2&quot;&gt;&lt;a href=&quot;#cb8-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Variable&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-3&quot;&gt;&lt;a href=&quot;#cb8-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Lambda&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Syntax&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-4&quot;&gt;&lt;a href=&quot;#cb8-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Apply&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Syntax&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Syntax&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For example, code like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb9&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb9-1&quot;&gt;&lt;a href=&quot;#cb9-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;\f &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; f x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… corresponds to this nameless representation:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb10&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb10-1&quot;&gt;&lt;a href=&quot;#cb10-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;example ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Syntax&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-2&quot;&gt;&lt;a href=&quot;#cb10-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;example &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Lambda&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Lambda&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Apply&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Variable&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) (&lt;span class=&quot;dt&quot;&gt;Variable&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Carefully note that the &lt;code&gt;Lambda&lt;/code&gt; constructor now has no field for the bound variable name, so it’s as if the user had instead written:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb11&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb11-1&quot;&gt;&lt;a href=&quot;#cb11-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;\ &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \ &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… using &lt;code&gt;@n&lt;/code&gt; to represent the variable whose De Bruijn index is &lt;code&gt;n&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;The numeric De Bruijn indices refer to bound variables. Specifically, the numeric index &lt;code&gt;0&lt;/code&gt; refers to the “closest” or “innermost” variable bound by a lambda:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb12&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb12-1&quot;&gt;&lt;a href=&quot;#cb12-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--                This 0 index …&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-2&quot;&gt;&lt;a href=&quot;#cb12-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--                ↓&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-3&quot;&gt;&lt;a href=&quot;#cb12-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    \ &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \ &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-4&quot;&gt;&lt;a href=&quot;#cb12-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--       ↑ … refers to the variable bound by this lambda&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… and incrementing the index moves to the next outermost lambda:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb13&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb13-1&quot;&gt;&lt;a href=&quot;#cb13-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--             This 1 index …&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-2&quot;&gt;&lt;a href=&quot;#cb13-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--             ↓&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-3&quot;&gt;&lt;a href=&quot;#cb13-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    \ &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \ &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-4&quot;&gt;&lt;a href=&quot;#cb13-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--  ↑ … refers to the variable bound by this lambda&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;De Bruijn indices avoid name collisions between bound variables, but they require you to do additional work if you wish to preserve the original variable names. There are several ways to do so, and I’ll present my preferred approach.&lt;/p&gt;&lt;h4 id=&quot;the-trick---part-1&quot;&gt;The trick - Part 1&lt;/h4&gt;&lt;p&gt;We can get the best of both worlds by combining the named and nameless representations into a hybrid representation like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb14&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb14-1&quot;&gt;&lt;a href=&quot;#cb14-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Syntax&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-2&quot;&gt;&lt;a href=&quot;#cb14-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Variable&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-3&quot;&gt;&lt;a href=&quot;#cb14-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Lambda&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Syntax&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-4&quot;&gt;&lt;a href=&quot;#cb14-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Apply&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Syntax&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Syntax&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I call this representation “namespaced De Bruijn indices”.&lt;/p&gt;&lt;p&gt;This is almost the exact same as our named representation, except that we have now added an &lt;code&gt;Int&lt;/code&gt; field to the &lt;code&gt;Variable&lt;/code&gt; constructor. This &lt;code&gt;Int&lt;/code&gt; field is morally the same as the De Bruijn index in the nameless representation, except that this time the De Bruijn index is “namespaced” to a specific variable name.&lt;/p&gt;&lt;p&gt;The easiest way to explain this is with a few examples.&lt;/p&gt;&lt;p&gt;The following expression:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb15&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb15-1&quot;&gt;&lt;a href=&quot;#cb15-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;\x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \y &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; x&lt;span class=&quot;op&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… corresponds to this syntax tree:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb16&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb16-1&quot;&gt;&lt;a href=&quot;#cb16-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Lambda&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Lambda&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;y&amp;quot;&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Lambda&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Variable&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… and this curried function returns the third function argument:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb17&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb17-1&quot;&gt;&lt;a href=&quot;#cb17-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--                    This …&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb17-2&quot;&gt;&lt;a href=&quot;#cb17-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--                    ↓&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb17-3&quot;&gt;&lt;a href=&quot;#cb17-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    \x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \y &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; x&lt;span class=&quot;op&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb17-4&quot;&gt;&lt;a href=&quot;#cb17-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--               ↑ … refers to this bound variable&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… because that is the innermost bound variable named &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Similarly, the following expression:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb18&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb18-1&quot;&gt;&lt;a href=&quot;#cb18-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;\x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \y &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; y&lt;span class=&quot;op&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… corresponds to this syntax tree:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb19&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb19-1&quot;&gt;&lt;a href=&quot;#cb19-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Lambda&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Lambda&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;y&amp;quot;&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Lambda&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Variable&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;y&amp;quot;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… which returns the second function argument:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb20&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb20-1&quot;&gt;&lt;a href=&quot;#cb20-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--                    This …&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb20-2&quot;&gt;&lt;a href=&quot;#cb20-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--                    ↓&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb20-3&quot;&gt;&lt;a href=&quot;#cb20-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    \x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \y &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; y&lt;span class=&quot;op&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb20-4&quot;&gt;&lt;a href=&quot;#cb20-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--         ↑ … refers to this bound variable&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… because that is the innermost bound variable named &lt;code&gt;y&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Carefully note that our variable still has a De Bruijn index of 0, but we ignore the innermost bound variable named &lt;code&gt;x&lt;/code&gt; because we also pair our De Bruijn index with name of the variable we are referring to (&lt;code&gt;y&lt;/code&gt;) so we only count bound variables named &lt;code&gt;y&lt;/code&gt; when resolving the De Bruijn index.&lt;/p&gt;&lt;p&gt;Finally, the following expression:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb21&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb21-1&quot;&gt;&lt;a href=&quot;#cb21-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;\x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \y &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; x&lt;span class=&quot;op&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… corresponds to this syntax tree:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb22&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb22-1&quot;&gt;&lt;a href=&quot;#cb22-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Lambda&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Lambda&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;y&amp;quot;&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Lambda&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Variable&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… which returns the first function argument:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb23&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb23-1&quot;&gt;&lt;a href=&quot;#cb23-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--                    This …&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb23-2&quot;&gt;&lt;a href=&quot;#cb23-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--                    ↓&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb23-3&quot;&gt;&lt;a href=&quot;#cb23-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    \x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \y &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; x&lt;span class=&quot;op&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb23-4&quot;&gt;&lt;a href=&quot;#cb23-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--   ↑ … refers to this bound variable&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The De Bruijn index is 1, which means that it refers to the second innermost (0-indexed) bound variable named &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Notice how this representation lets us refer to &lt;a href=&quot;https://en.wikipedia.org/wiki/Variable_shadowing&quot;&gt;shadowed variables&lt;/a&gt; by their index. These De Bruijn indices are not an internal implementation detail, but are actually available to the user as part of the surface syntax of the language.&lt;/p&gt;&lt;p&gt;However, we want to avoid littering the code with these De Bruijn indices, which brings us to the second part of the trick.&lt;/p&gt;&lt;h4 id=&quot;the-trick---part-2&quot;&gt;The trick - Part 2&lt;/h4&gt;&lt;p&gt;The next step is to add syntactic sugar to the language by allowing users to omit the index in the source code, which defaults the index to &lt;code&gt;0&lt;/code&gt;. This means that an expression that never references shadowed variables never needs to specify a De Bruijn index.&lt;/p&gt;&lt;p&gt;For example, instead of writing this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb24&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb24-1&quot;&gt;&lt;a href=&quot;#cb24-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;\x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \y &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; x&lt;span class=&quot;op&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… we can elide the index to simplify the code to:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb25&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb25-1&quot;&gt;&lt;a href=&quot;#cb25-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;\x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \y &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… which will still parse as:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb26&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb26-1&quot;&gt;&lt;a href=&quot;#cb26-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Lambda&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Lambda&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;y&amp;quot;&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Lambda&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Variable&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Similarly, we can simplify this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb27&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb27-1&quot;&gt;&lt;a href=&quot;#cb27-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;\x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \y &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; y&lt;span class=&quot;op&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… to this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb28&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb28-1&quot;&gt;&lt;a href=&quot;#cb28-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;\x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \y &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; y&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… which will still parse as:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb29&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb29-1&quot;&gt;&lt;a href=&quot;#cb29-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Lambda&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Lambda&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;y&amp;quot;&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Lambda&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Variable&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;y&amp;quot;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, we cannot use this syntactic sugar to simplify the final example:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb30&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb30-1&quot;&gt;&lt;a href=&quot;#cb30-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;\x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \y &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; x&lt;span class=&quot;op&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… since the index is non-zero. Any code that references a shadowed variable still needs to use an explicit De Bruijn index to do so.&lt;/p&gt;&lt;p&gt;Vice versa, we also omit zero indices when pretty-printing code. When we pretty-print this syntax tree:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb31&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb31-1&quot;&gt;&lt;a href=&quot;#cb31-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Lambda&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Lambda&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;y&amp;quot;&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Lambda&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Variable&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… we don’t include the index:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb32&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb32-1&quot;&gt;&lt;a href=&quot;#cb32-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;\x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \y &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This syntactic sugar ensures that most users do not need to be aware that indices exist at all when writing code. The user only encounters the indices in two scenarios:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;The user wishes to explicitly reference a shadowed variable&lt;/p&gt;&lt;p&gt;For example, in the following expression:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb33&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb33-1&quot;&gt;&lt;a href=&quot;#cb33-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;\x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \y &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; x&lt;span class=&quot;op&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… the user might prefer to use the built-in language support for disambiguating variables of the same name rather than renaming one of the two variables named &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The indices appear in a β-reduced result&lt;/p&gt;&lt;p&gt;For example, this expression has no user-visible De Bruijn indices:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb34&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb34-1&quot;&gt;&lt;a href=&quot;#cb34-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;\x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; (\y &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; y) x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… but if you β-reduce the expression (I’ll cover how in the &lt;a href=&quot;#appendix---implementation&quot;&gt;Appendix&lt;/a&gt;) and pretty-print the β-reduced expression then the result will introduce a non-zero De Bruijn index to disambiguate the two variables named &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb35&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb35-1&quot;&gt;&lt;a href=&quot;#cb35-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;\x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; x&lt;span class=&quot;op&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;In fact, the latter scenario is the reason I originally adopted this trick: I wanted to be able to display β-reduced functions to the end user while preserving the original variable names as much as possible.&lt;/p&gt;&lt;p&gt;Note that De Bruijn indices don’t appear when a β-reduced expression does not reference any shadowed variables. For example, if you β-reduce this expression:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb36&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb36-1&quot;&gt;&lt;a href=&quot;#cb36-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;(\f &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; f f) (\x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; x)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… the result has no De Bruijn index (because the index is 0 and is therefore elided by the pretty-printer):&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb37&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb37-1&quot;&gt;&lt;a href=&quot;#cb37-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;\x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&quot;the-trick---part-3&quot;&gt;The trick - Part 3&lt;/h4&gt;&lt;p&gt;One of the benefits of the traditional nameless representation using (non-namespaced) De Bruijn indices is that you get α-equivalence for free. Two nameless expressions are α-equivalent if they are syntactically identical. We can build upon this useful property to derive a compact algorithm for α-equivalence of “namespaced De Bruijn indices”.&lt;/p&gt;&lt;p&gt;The trick is to recognize that namespaced De Bruijn indices reduce to ordinary De Bruijn indices in the degenerate case when you rename all variables to the same name. I’ll call this renaming process “α-reduction”.&lt;/p&gt;&lt;p&gt;For example, if we α-reduce the following expression by renaming all of the: variables to &lt;code&gt;_&lt;/code&gt;:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb38&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb38-1&quot;&gt;&lt;a href=&quot;#cb38-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;\x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \y &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; x&lt;span class=&quot;op&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… then we get this result:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb39&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb39-1&quot;&gt;&lt;a href=&quot;#cb39-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;\_ &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \_ &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \_ &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; _&lt;span class=&quot;op&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;See the &lt;a href=&quot;#appendix---implementation&quot;&gt;Appendix&lt;/a&gt; for the α-reduction algorithm.&lt;/p&gt;&lt;p&gt;Equipped with α-reduction, then we can derive α-equivalence: two expressions are α-equivalent if their α-reduced forms are syntactically identical.&lt;/p&gt;&lt;p&gt;For example, this expression:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb40&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb40-1&quot;&gt;&lt;a href=&quot;#cb40-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;\x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… and this expression:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb41&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb41-1&quot;&gt;&lt;a href=&quot;#cb41-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;\y &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; y&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… both α-reduce to:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb42&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb42-1&quot;&gt;&lt;a href=&quot;#cb42-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;\_ &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; _&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… so they are α-equivalent.&lt;/p&gt;&lt;h4 id=&quot;benefits&quot;&gt;Benefits&lt;/h4&gt;&lt;p&gt;There are a few benefits of using this trick that motivate me to use this in all of my interpreted languages:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;This trick improves the readability of β-reduced functions&lt;/p&gt;&lt;p&gt;β-reduced functions preserve the original variable names and this trick doesn’t suffer from the rename-related name pollution that plagues other capture-avoiding substitution algorithms. In particular, β-reduced expressions only display De Bruijn indices when absolutely necessary (if they reference a shadowed variable) and they otherwise use the original pristine variable names.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;This trick simplifies the internal implementation&lt;/p&gt;&lt;p&gt;You don’t need to maintain two separate syntax trees for a named and nameless representation. You can use the same syntax tree for both since any named syntax tree can be α-reduced to give the equivalent nameless syntax tree.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;This trick enables userland support for referencing shadowed variables&lt;/p&gt;&lt;p&gt;I know some people think that referencing shadowed variable names is a misfeature. However, I personally feel that resolving name collisions by adding &lt;code&gt;'&lt;/code&gt; or &lt;code&gt;_&lt;/code&gt; characters to the end of variable names is less principled than having language support for resolving name collisions using optional De Bruijn indices.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;(Not shown) This trick can sometimes improve type errors&lt;/p&gt;&lt;p&gt;To be precise, this trick improves the inferred types displayed in error messages when using explicit universal quantification.&lt;/p&gt;&lt;p&gt;Type variables also have to avoid name collisions, so if you use the same namespaced De Bruijn representation for your types then you avoid polluting your inferred types and error messages with junk type variables like &lt;code&gt;a14&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;This post doesn’t cover the equivalent type-level trick, but you can refer to the &lt;a href=&quot;https://github.com/dhall-lang/dhall-lang/tree/master/standard&quot;&gt;Dhall standard&lt;/a&gt; if you need an example of a language that uses this trick.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;&lt;p&gt;I believe that namespaced De Bruijn indices are most appropriate for languages that are (A) strongly normalizing (like Dhall) and (B) interpreted, because such languages tend to support pretty-printing β-reduced functions.&lt;/p&gt;&lt;p&gt;I think this trick is also useful to a lesser extent for all interpreted languages, if only because the implementation is (in my opinion) simpler and more elegant than other algorithms for capture-avoiding substitution (See the &lt;a href=&quot;#appendix---implementation&quot;&gt;Appendix&lt;/a&gt; below).&lt;/p&gt;&lt;p&gt;On the other hand, compiled languages will likely not benefit much from this trick since they typically have no need to preserve the original variable names and they also will use an intermediate representation that is very different from the concrete syntax tree.&lt;/p&gt;&lt;h4 id=&quot;appendix---implementation&quot;&gt;Appendix - Implementation&lt;/h4&gt;&lt;p&gt;This section provides Haskell code specifying how to α-reduce and β-reduce a syntax tree that uses namespaced De Bruijn indices.&lt;/p&gt;&lt;p&gt;This reference implementation is not the most efficient implementation, but it’s the simplest one which I use for pedagogical purposes. If you’re interested in efficiency then check out my &lt;a href=&quot;https://github.com/Gabriel439/grace&quot;&gt;Grace&lt;/a&gt; project, which mixes this trick with the more efficient &lt;a href=&quot;https://en.wikipedia.org/wiki/Normalisation_by_evaluation&quot;&gt;normalization-by-evaluation&lt;/a&gt; algorithm.&lt;/p&gt;&lt;p&gt;I also don’t include code for the parser or pretty-printer, because the only interesting part is the syntactic sugar for handling variables with a De Bruijn index of &lt;code&gt;0&lt;/code&gt;. Again, check out &lt;a href=&quot;https://github.com/Gabriel439/grace&quot;&gt;Grace&lt;/a&gt; if you want to refer to a more complete implementation.&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb43&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb43-1&quot;&gt;&lt;a href=&quot;#cb43-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- | Syntax tree&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-2&quot;&gt;&lt;a href=&quot;#cb43-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Syntax&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-3&quot;&gt;&lt;a href=&quot;#cb43-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Variable&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-4&quot;&gt;&lt;a href=&quot;#cb43-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Lambda&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Syntax&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-5&quot;&gt;&lt;a href=&quot;#cb43-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Apply&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Syntax&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Syntax&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-6&quot;&gt;&lt;a href=&quot;#cb43-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Eq&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-7&quot;&gt;&lt;a href=&quot;#cb43-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-8&quot;&gt;&lt;a href=&quot;#cb43-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;{-| Increase the index of all bound variables matching the given variable name&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-9&quot;&gt;&lt;a href=&quot;#cb43-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-10&quot;&gt;&lt;a href=&quot;#cb43-10&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;    This is modified from the Shifting definition in Pierce&amp;#39;s \&amp;quot;Types and&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-11&quot;&gt;&lt;a href=&quot;#cb43-11&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;    Programming Languages\&amp;quot; by adding an additional argument for the namespace&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-12&quot;&gt;&lt;a href=&quot;#cb43-12&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;    to shift&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-13&quot;&gt;&lt;a href=&quot;#cb43-13&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-14&quot;&gt;&lt;a href=&quot;#cb43-14&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;shift&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-15&quot;&gt;&lt;a href=&quot;#cb43-15&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;    ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-16&quot;&gt;&lt;a href=&quot;#cb43-16&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;-- ^ The amount to shift by&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-17&quot;&gt;&lt;a href=&quot;#cb43-17&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-18&quot;&gt;&lt;a href=&quot;#cb43-18&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;-- ^ The variable name to match (a.k.a. the namespace)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-19&quot;&gt;&lt;a href=&quot;#cb43-19&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-20&quot;&gt;&lt;a href=&quot;#cb43-20&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;-- ^ The minimum bound for which indices to shift&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-21&quot;&gt;&lt;a href=&quot;#cb43-21&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Syntax&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-22&quot;&gt;&lt;a href=&quot;#cb43-22&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;-- ^ The expression to shift&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-23&quot;&gt;&lt;a href=&quot;#cb43-23&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Syntax&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-24&quot;&gt;&lt;a href=&quot;#cb43-24&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;shift offset namespace minIndex syntax &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-25&quot;&gt;&lt;a href=&quot;#cb43-25&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; syntax &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-26&quot;&gt;&lt;a href=&quot;#cb43-26&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Variable&lt;/span&gt; name &lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Variable&lt;/span&gt; name index&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-27&quot;&gt;&lt;a href=&quot;#cb43-27&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-28&quot;&gt;&lt;a href=&quot;#cb43-28&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            index&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-29&quot;&gt;&lt;a href=&quot;#cb43-29&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; name &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; namespace &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; minIndex &lt;span class=&quot;op&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; offset&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-30&quot;&gt;&lt;a href=&quot;#cb43-30&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;otherwise&lt;/span&gt;                              &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-31&quot;&gt;&lt;a href=&quot;#cb43-31&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-32&quot;&gt;&lt;a href=&quot;#cb43-32&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Lambda&lt;/span&gt; name body &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Lambda&lt;/span&gt; name body&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-33&quot;&gt;&lt;a href=&quot;#cb43-33&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-34&quot;&gt;&lt;a href=&quot;#cb43-34&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            minIndex&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-35&quot;&gt;&lt;a href=&quot;#cb43-35&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; name &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; namespace &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; minIndex &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-36&quot;&gt;&lt;a href=&quot;#cb43-36&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;otherwise&lt;/span&gt;         &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; minIndex&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-37&quot;&gt;&lt;a href=&quot;#cb43-37&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-38&quot;&gt;&lt;a href=&quot;#cb43-38&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            body&amp;#39; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; shift offset namespace minIndex&amp;#39; body&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-39&quot;&gt;&lt;a href=&quot;#cb43-39&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-40&quot;&gt;&lt;a href=&quot;#cb43-40&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Apply&lt;/span&gt; function argument &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Apply&lt;/span&gt; function&amp;#39; argument&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-41&quot;&gt;&lt;a href=&quot;#cb43-41&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-42&quot;&gt;&lt;a href=&quot;#cb43-42&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            function&amp;#39; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; shift offset namespace minIndex function&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-43&quot;&gt;&lt;a href=&quot;#cb43-43&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-44&quot;&gt;&lt;a href=&quot;#cb43-44&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            argument&amp;#39; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; shift offset namespace minIndex argument&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-45&quot;&gt;&lt;a href=&quot;#cb43-45&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-46&quot;&gt;&lt;a href=&quot;#cb43-46&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;{-| Substitute the given variable name and index with an expression&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-47&quot;&gt;&lt;a href=&quot;#cb43-47&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-48&quot;&gt;&lt;a href=&quot;#cb43-48&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;    This is modified from the Substitution definition in Pierce&amp;#39;s \&amp;quot;Types and&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-49&quot;&gt;&lt;a href=&quot;#cb43-49&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;    Programming Languages\&amp;quot; by adding an additional argument for the variable&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-50&quot;&gt;&lt;a href=&quot;#cb43-50&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;    index&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-51&quot;&gt;&lt;a href=&quot;#cb43-51&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-52&quot;&gt;&lt;a href=&quot;#cb43-52&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;substitute&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-53&quot;&gt;&lt;a href=&quot;#cb43-53&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;    ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Syntax&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-54&quot;&gt;&lt;a href=&quot;#cb43-54&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;-- ^ The expression to substitute into&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-55&quot;&gt;&lt;a href=&quot;#cb43-55&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-56&quot;&gt;&lt;a href=&quot;#cb43-56&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;-- ^ The name of the variable to replace&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-57&quot;&gt;&lt;a href=&quot;#cb43-57&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-58&quot;&gt;&lt;a href=&quot;#cb43-58&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;-- ^ The index of the variable to replace&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-59&quot;&gt;&lt;a href=&quot;#cb43-59&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Syntax&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-60&quot;&gt;&lt;a href=&quot;#cb43-60&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;-- ^ The expression to substitute in place of the given variable&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-61&quot;&gt;&lt;a href=&quot;#cb43-61&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Syntax&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-62&quot;&gt;&lt;a href=&quot;#cb43-62&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;substitute expression name &lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt; replacement &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-63&quot;&gt;&lt;a href=&quot;#cb43-63&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; expression &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-64&quot;&gt;&lt;a href=&quot;#cb43-64&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Variable&lt;/span&gt; name&amp;#39; index&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-65&quot;&gt;&lt;a href=&quot;#cb43-65&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; name &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; name&amp;#39; &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; index&amp;#39; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; replacement&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-66&quot;&gt;&lt;a href=&quot;#cb43-66&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;otherwise&lt;/span&gt;                        &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Variable&lt;/span&gt; name&amp;#39; index&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-67&quot;&gt;&lt;a href=&quot;#cb43-67&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-68&quot;&gt;&lt;a href=&quot;#cb43-68&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Lambda&lt;/span&gt; name&amp;#39; body &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Lambda&lt;/span&gt; name&amp;#39; body&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-69&quot;&gt;&lt;a href=&quot;#cb43-69&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-70&quot;&gt;&lt;a href=&quot;#cb43-70&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            index&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-71&quot;&gt;&lt;a href=&quot;#cb43-71&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; name &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; name&amp;#39; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-72&quot;&gt;&lt;a href=&quot;#cb43-72&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;otherwise&lt;/span&gt;     &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-73&quot;&gt;&lt;a href=&quot;#cb43-73&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-74&quot;&gt;&lt;a href=&quot;#cb43-74&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            shiftedBody &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; shift &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; name&amp;#39; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; replacement&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-75&quot;&gt;&lt;a href=&quot;#cb43-75&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-76&quot;&gt;&lt;a href=&quot;#cb43-76&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            body&amp;#39; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; substitute body name index&amp;#39; shiftedBody&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-77&quot;&gt;&lt;a href=&quot;#cb43-77&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-78&quot;&gt;&lt;a href=&quot;#cb43-78&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Apply&lt;/span&gt; function argument &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Apply&lt;/span&gt; function&amp;#39; argument&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-79&quot;&gt;&lt;a href=&quot;#cb43-79&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-80&quot;&gt;&lt;a href=&quot;#cb43-80&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            function&amp;#39; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; substitute function name &lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt; replacement&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-81&quot;&gt;&lt;a href=&quot;#cb43-81&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-82&quot;&gt;&lt;a href=&quot;#cb43-82&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            argument&amp;#39; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; substitute argument name &lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt; replacement&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-83&quot;&gt;&lt;a href=&quot;#cb43-83&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-84&quot;&gt;&lt;a href=&quot;#cb43-84&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- | β-reduce an expression&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-85&quot;&gt;&lt;a href=&quot;#cb43-85&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;betaReduce ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Syntax&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Syntax&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-86&quot;&gt;&lt;a href=&quot;#cb43-86&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;betaReduce syntax &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-87&quot;&gt;&lt;a href=&quot;#cb43-87&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; syntax &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-88&quot;&gt;&lt;a href=&quot;#cb43-88&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Variable&lt;/span&gt; name &lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Variable&lt;/span&gt; name &lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-89&quot;&gt;&lt;a href=&quot;#cb43-89&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-90&quot;&gt;&lt;a href=&quot;#cb43-90&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Lambda&lt;/span&gt; name body &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Lambda&lt;/span&gt; name body&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-91&quot;&gt;&lt;a href=&quot;#cb43-91&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-92&quot;&gt;&lt;a href=&quot;#cb43-92&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            body&amp;#39; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; betaReduce body&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-93&quot;&gt;&lt;a href=&quot;#cb43-93&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-94&quot;&gt;&lt;a href=&quot;#cb43-94&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Apply&lt;/span&gt; function argument &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-95&quot;&gt;&lt;a href=&quot;#cb43-95&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; function&amp;#39; &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-96&quot;&gt;&lt;a href=&quot;#cb43-96&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Lambda&lt;/span&gt; name body &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; body&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-97&quot;&gt;&lt;a href=&quot;#cb43-97&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-98&quot;&gt;&lt;a href=&quot;#cb43-98&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                    shiftedArgument &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; shift &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; name &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; argument&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-99&quot;&gt;&lt;a href=&quot;#cb43-99&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-100&quot;&gt;&lt;a href=&quot;#cb43-100&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                    substitutedBody &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; substitute body name &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; shiftedArgument&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-101&quot;&gt;&lt;a href=&quot;#cb43-101&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-102&quot;&gt;&lt;a href=&quot;#cb43-102&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                    unshiftedBody &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; shift (&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) name &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; substitutedBody&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-103&quot;&gt;&lt;a href=&quot;#cb43-103&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-104&quot;&gt;&lt;a href=&quot;#cb43-104&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                    body&amp;#39; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; betaReduce unshiftedBody&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-105&quot;&gt;&lt;a href=&quot;#cb43-105&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-106&quot;&gt;&lt;a href=&quot;#cb43-106&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                _ &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Apply&lt;/span&gt; function&amp;#39; argument&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-107&quot;&gt;&lt;a href=&quot;#cb43-107&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-108&quot;&gt;&lt;a href=&quot;#cb43-108&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            function&amp;#39; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; betaReduce function&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-109&quot;&gt;&lt;a href=&quot;#cb43-109&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-110&quot;&gt;&lt;a href=&quot;#cb43-110&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            argument&amp;#39; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; betaReduce argument&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-111&quot;&gt;&lt;a href=&quot;#cb43-111&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-112&quot;&gt;&lt;a href=&quot;#cb43-112&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- | α-reduce an expression&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-113&quot;&gt;&lt;a href=&quot;#cb43-113&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;alphaReduce ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Syntax&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Syntax&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-114&quot;&gt;&lt;a href=&quot;#cb43-114&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;alphaReduce syntax &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-115&quot;&gt;&lt;a href=&quot;#cb43-115&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; syntax &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-116&quot;&gt;&lt;a href=&quot;#cb43-116&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Variable&lt;/span&gt; name &lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Variable&lt;/span&gt; name &lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-117&quot;&gt;&lt;a href=&quot;#cb43-117&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-118&quot;&gt;&lt;a href=&quot;#cb43-118&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Lambda&lt;/span&gt; name body &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Lambda&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;_&amp;quot;&lt;/span&gt; body&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-119&quot;&gt;&lt;a href=&quot;#cb43-119&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-120&quot;&gt;&lt;a href=&quot;#cb43-120&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            shiftedBody &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; shift &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;_&amp;quot;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; body&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-121&quot;&gt;&lt;a href=&quot;#cb43-121&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-122&quot;&gt;&lt;a href=&quot;#cb43-122&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            substitutedBody &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; substitute shiftedBody name &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Variable&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;_&amp;quot;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-123&quot;&gt;&lt;a href=&quot;#cb43-123&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-124&quot;&gt;&lt;a href=&quot;#cb43-124&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            unshiftedBody &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; shift (&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) name &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; substitutedBody&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-125&quot;&gt;&lt;a href=&quot;#cb43-125&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-126&quot;&gt;&lt;a href=&quot;#cb43-126&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            body&amp;#39; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; alphaReduce unshiftedBody&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-127&quot;&gt;&lt;a href=&quot;#cb43-127&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-128&quot;&gt;&lt;a href=&quot;#cb43-128&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Apply&lt;/span&gt; function argument &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Apply&lt;/span&gt; function&amp;#39; argument&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-129&quot;&gt;&lt;a href=&quot;#cb43-129&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-130&quot;&gt;&lt;a href=&quot;#cb43-130&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            function&amp;#39; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; alphaReduce function&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-131&quot;&gt;&lt;a href=&quot;#cb43-131&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-132&quot;&gt;&lt;a href=&quot;#cb43-132&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            argument&amp;#39; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; alphaReduce argument&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-133&quot;&gt;&lt;a href=&quot;#cb43-133&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-134&quot;&gt;&lt;a href=&quot;#cb43-134&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- | Returns `True` if the two input expressions are α-equivalent&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-135&quot;&gt;&lt;a href=&quot;#cb43-135&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;alphaEquivalent ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Syntax&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Syntax&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb43-136&quot;&gt;&lt;a href=&quot;#cb43-136&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;alphaEquivalent left right &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; alphaReduce left &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; alphaReduce right&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&quot;appendix---history&quot;&gt;Appendix - History&lt;/h4&gt;&lt;p&gt;I actually first introduced this feature in &lt;a href=&quot;https://github.com/Gabriel439/Haskell-Morte-Library&quot;&gt;Morte&lt;/a&gt;, not Dhall. The idea originated from the discussion on this &lt;a href=&quot;https://github.com/Gabriel439/Haskell-Morte-Library/issues/1&quot;&gt;issue&lt;/a&gt;.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</content><link rel="replies" type="application/atom+xml" href="https://www.haskellforall.com/feeds/6319221858421997722/comments/default" title="Post Comments"><link rel="replies" type="text/html" href="https://www.haskellforall.com/2021/08/namespaced-de-bruijn-indices.html#comment-form" title="3 Comments"><link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/6319221858421997722"><link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/6319221858421997722"><link rel="alternate" type="text/html" href="https://www.haskellforall.com/2021/08/namespaced-de-bruijn-indices.html" title="Namespaced De Bruijn indices"><author><name>Gabriel Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/></author><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-7368009850157400604</id><published>2021-06-04T07:49:00.000-07:00</published><updated>2021-06-04T07:49:51.454-07:00</updated><title type="text">Probability for Slay the Spire fanatics</title><content type="html">&lt;!DOCTYPE html&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;utf-8&quot; /&gt;  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;  &lt;title&gt;probability&lt;/title&gt;  &lt;style&gt;    html {       line-height: 1.5;       font-family: Georgia, serif;       font-size: 20px;       color: #1a1a1a;       background-color: #fdfdfd;     }     body {       margin: 0 auto;       max-width: 36em;       padding-left: 50px;       padding-right: 50px;       padding-top: 50px;       padding-bottom: 50px;       hyphens: auto;       word-wrap: break-word;       text-rendering: optimizeLegibility;       font-kerning: normal;     }     @media (max-width: 600px) {       body {         font-size: 0.9em;         padding: 1em;       }     }     @media print {       body {         background-color: transparent;         color: black;         font-size: 12pt;       }       p, h2, h3 {         orphans: 3;         widows: 3;       }       h2, h3, h4 {         page-break-after: avoid;       }     }     p {       margin: 1em 0;     }     a {       color: #1a1a1a;     }     a:visited {       color: #1a1a1a;     }     img {       max-width: 100%;     }     h1, h2, h3, h4, h5, h6 {       margin-top: 1.4em;     }     h5, h6 {       font-size: 1em;       font-style: italic;     }     h6 {       font-weight: normal;     }     ol, ul {       padding-left: 1.7em;       margin-top: 1em;     }     li &gt; ol, li &gt; ul {       margin-top: 0;     }     blockquote {       margin: 1em 0 1em 1.7em;       padding-left: 1em;       border-left: 2px solid #e6e6e6;       color: #606060;     }     code {       font-family: Menlo, Monaco, 'Lucida Console', Consolas, monospace;       font-size: 85%;       margin: 0;     }     pre {       margin: 1em 0;       overflow: auto;     }     pre code {       padding: 0;       overflow: visible;     }     .sourceCode {      background-color: transparent;      overflow: visible;     }     hr {       background-color: #1a1a1a;       border: none;       height: 1px;       margin: 1em 0;     }     table {       margin: 1em 0;       border-collapse: collapse;       width: 100%;       overflow-x: auto;       display: block;       font-variant-numeric: lining-nums tabular-nums;     }     table caption {       margin-bottom: 0.75em;     }     tbody {       margin-top: 0.5em;       border-top: 1px solid #1a1a1a;       border-bottom: 1px solid #1a1a1a;     }     th {       border-top: 1px solid #1a1a1a;       padding: 0.25em 0.5em 0.25em 0.5em;     }     td {       padding: 0.125em 0.5em 0.25em 0.5em;     }     header {       margin-bottom: 4em;       text-align: center;     }     #TOC li {       list-style: none;     }     #TOC a:not(:hover) {       text-decoration: none;     }     code{white-space: pre-wrap;}     span.smallcaps{font-variant: small-caps;}     span.underline{text-decoration: underline;}     div.column{display: inline-block; vertical-align: top; width: 50%;}     div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}     ul.task-list{list-style: none;}     pre &gt; code.sourceCode { white-space: pre; position: relative; }     pre &gt; code.sourceCode &gt; span { display: inline-block; line-height: 1.25; }     pre &gt; code.sourceCode &gt; span:empty { height: 1.2em; }     .sourceCode { overflow: visible; }     code.sourceCode &gt; span { color: inherit; text-decoration: inherit; }     div.sourceCode { margin: 1em 0; }     pre.sourceCode { margin: 0; }     @media screen {     div.sourceCode { overflow: auto; }     }     @media print {     pre &gt; code.sourceCode { white-space: pre-wrap; }     pre &gt; code.sourceCode &gt; span { text-indent: -5em; padding-left: 5em; }     }     pre.numberSource code       { counter-reset: source-line 0; }     pre.numberSource code &gt; span       { position: relative; left: -4em; counter-increment: source-line; }     pre.numberSource code &gt; span &gt; a:first-child::before       { content: counter(source-line);         position: relative; left: -1em; text-align: right; vertical-align: baseline;         border: none; display: inline-block;         -webkit-touch-callout: none; -webkit-user-select: none;         -khtml-user-select: none; -moz-user-select: none;         -ms-user-select: none; user-select: none;         padding: 0 4px; width: 4em;         color: #aaaaaa;       }     pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }     div.sourceCode       {   }     @media screen {     pre &gt; code.sourceCode &gt; span &gt; a:first-child::before { text-decoration: underline; }     }     code span.al { color: #ff0000; font-weight: bold; } /* Alert */     code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */     code span.at { color: #7d9029; } /* Attribute */     code span.bn { color: #40a070; } /* BaseN */     code span.bu { } /* BuiltIn */     code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */     code span.ch { color: #4070a0; } /* Char */     code span.cn { color: #880000; } /* Constant */     code span.co { color: #60a0b0; font-style: italic; } /* Comment */     code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */     code span.do { color: #ba2121; font-style: italic; } /* Documentation */     code span.dt { color: #902000; } /* DataType */     code span.dv { color: #40a070; } /* DecVal */     code span.er { color: #ff0000; font-weight: bold; } /* Error */     code span.ex { } /* Extension */     code span.fl { color: #40a070; } /* Float */     code span.fu { color: #06287e; } /* Function */     code span.im { } /* Import */     code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */     code span.kw { color: #007020; font-weight: bold; } /* Keyword */     code span.op { color: #666666; } /* Operator */     code span.ot { color: #007020; } /* Other */     code span.pp { color: #bc7a00; } /* Preprocessor */     code span.sc { color: #4070a0; } /* SpecialChar */     code span.ss { color: #bb6688; } /* SpecialString */     code span.st { color: #4070a0; } /* String */     code span.va { color: #19177c; } /* Variable */     code span.vs { color: #4070a0; } /* VerbatimString */     code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */     .display.math{display: block; text-align: center; margin: 0.5rem auto;}   &lt;/style&gt;  &lt;!--[if lt IE 9]&gt;    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;  &lt;![endif]--&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;I’m a huge fan of &lt;a href=&quot;https://www.megacrit.com/&quot;&gt;Slay the Spire&lt;/a&gt; and I wanted to share a small probability trick I’ve learned that has helped me improve my game by calculating the odds of “greedy” plays succeeding. This trick will likely also benefit other games based on cards or probability, too, but the examples from this post will be specific to Slay the Spire.&lt;/p&gt;&lt;p&gt;The general problem I was trying to solve is:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;I have a deck containing &lt;code&gt;N&lt;/code&gt; desirable cards out of &lt;code&gt;D&lt;/code&gt; total cards. If I draw &lt;code&gt;H&lt;/code&gt; cards from that deck, what is the chance that I draw (exactly / at least / at most) &lt;code&gt;M&lt;/code&gt; desirable cards?&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;This sort of question comes up often in card games, including complex ones (like Slay the Spire) or simpler ones (like poker). Here are some concrete examples of how this relates to Slay the Spire:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;“Next turn I draw 5 cards. What is the likelihood that I draw at least 3 Strikes if there are 7 cards left in the deck, 4 of which are Strikes”.&lt;/p&gt;&lt;p&gt;(Answer: 5 / 7 ≈ 71% chance)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;“One Neow bonus lets me lose 7 max HP to select from 1 of 3 random rare cards. Right now I’m only interested in 6 of the 17 possible rare cards, so what is the chance that I random at least 1 of those 6?”&lt;/p&gt;&lt;p&gt;(Answer: 103 / 136 ≈ 76% chance)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The nice thing about Slay the Spire is that it’s a turn-based single-player game, so (unlike poker) you can take &lt;strong&gt;all&lt;/strong&gt; the time you want when deciding your turn and nobody will rush you to hurry up. This means that I can safely geek out on these sorts of probability calculations to increase my likelihood of winning.&lt;/p&gt;&lt;p&gt;In this post I’ll first present the solution to the above probability question (both as a mathematical formula and as code) and then explain why the formula works.&lt;/p&gt;&lt;h4 id=&quot;the-formula&quot;&gt;The formula&lt;/h4&gt;&lt;p&gt;Before presenting the solution to the above problem, I’d first like to reframe the problem using more precise set notation to avoid ambiguity:&lt;/p&gt;&lt;p&gt;Define &lt;code&gt;U&lt;/code&gt; to be the &lt;a href=&quot;https://en.wikipedia.org/wiki/Universal_set&quot;&gt;universal set&lt;/a&gt; of all cards in the deck and then define two (potentially overlapping) subsets of those cards:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;A&lt;/code&gt;: The set of cards that are drawn&lt;/li&gt;&lt;li&gt;&lt;code&gt;B&lt;/code&gt;: The set of cards that are desirable&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Let’s also define &lt;code&gt;¬&lt;/code&gt; to mean &lt;a href=&quot;https://en.wikipedia.org/wiki/Complement_(set_theory)&quot;&gt;set complement&lt;/a&gt;, such that:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;¬A&lt;/code&gt; means the set of cards that are not drawn&lt;/li&gt;&lt;li&gt;&lt;code&gt;¬B&lt;/code&gt; means the set of cards that are undesirable&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Finally, we’ll use &lt;code&gt;∩&lt;/code&gt; to denote &lt;a href=&quot;https://en.wikipedia.org/wiki/Intersection_(set_theory)&quot;&gt;set intersection&lt;/a&gt;, which we will use to define four non-overlapping (i.e. &lt;a href=&quot;https://en.wikipedia.org/wiki/Disjoint_sets&quot;&gt;disjoint&lt;/a&gt;) sets:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;           ¬B │       B&lt;br /&gt;    ┌─────────┼─────────┐&lt;br /&gt; ¬A │ ¬A ∩ ¬B │ ¬A ∩  B │&lt;br /&gt;────┼─────────┼─────────┤&lt;br /&gt;  A │  A ∩ ¬B │  A ∩ ¬B │&lt;br /&gt;    └─────────┴─────────┘&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;… where:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;A ∩ B&lt;/code&gt; means the set of cards that are drawn and desirable&lt;/li&gt;&lt;li&gt;&lt;code&gt;A ∩ ¬B&lt;/code&gt; means the set of cards that are drawn, but undesirable&lt;/li&gt;&lt;li&gt;&lt;code&gt;¬A ∩ B&lt;/code&gt; means the set of cards that are desirable, but not drawn&lt;/li&gt;&lt;li&gt;&lt;code&gt;¬A ∩ ¬B&lt;/code&gt; means the set of cards that are neither desirable nor drawn&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Then the problem becomes:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;If the size of the sets &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; are fixed, what is the probability that their overlap (i.e. the set &lt;code&gt;A ∩ B&lt;/code&gt;) has a given size?&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;I use this presentation to highlight that:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The problem isn’t really specific to cards. It will work for arbitrary sets&lt;/li&gt;&lt;li&gt;The problem isn’t specific to drawing cards or desirable cards. It works for any two subsets of cards&lt;/li&gt;&lt;li&gt;The problem is symmetric with respect to A and B. If we swap the size of the two subsets of cards we expect to get the same answer&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Using &lt;code&gt;|S|&lt;/code&gt; to denote the size (i.e. &lt;a href=&quot;https://en.wikipedia.org/wiki/Cardinality&quot;&gt;cardinality&lt;/a&gt;) of a set S and using &lt;code&gt;!&lt;/code&gt; to denote &lt;a href=&quot;https://en.wikipedia.org/wiki/Factorial&quot;&gt;factorial&lt;/a&gt;, then the probability of two subsets of fixed sizes overlapping by a given size is:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;                |A|! × |¬A|! × |B|! × |¬B|!&lt;br /&gt;p = ────────────────────────────────────────────────────&lt;br /&gt;    |A ∩ B|! × |A ∩ ¬B|! × |¬A ∩ B|! × |¬A ∩ ¬B|! × |U|!&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With this solution in hand, we can solve our original problem by just renaming the variables:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;I have a deck containing &lt;code&gt;|B|&lt;/code&gt; desirable cards out of &lt;code&gt;|U|&lt;/code&gt; total cards. If I draw &lt;code&gt;|A|&lt;/code&gt; cards from that deck, what is the chance that I draw (exactly / at least / at most) &lt;code&gt;|A ∩ B|&lt;/code&gt; desirable cards?&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;We already have the solution for the case where we draw exactly &lt;code&gt;|A ∩ B|&lt;/code&gt; desirable cards. From that we can compute the solutions for drawing at most or at least &lt;code&gt;|A ∩ B|&lt;/code&gt; desirable cards.&lt;/p&gt;&lt;h4 id=&quot;the-code&quot;&gt;The code&lt;/h4&gt;&lt;p&gt;If you still don’t follow along, I translate the above solution into Haskell code in this section.&lt;/p&gt;&lt;p&gt;Note that even though the previous formula depends on the sizes of nine sets:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;|U|&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;|A|&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;|¬A|&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;|B|&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;|¬B|&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;|A ∩ B|&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;|A ∩ ¬B|&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;|¬A ∩ B|&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;|¬A ∩ ¬B|&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;… there are really only four degrees of freedom, because the size of the following four disjoint sets:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;|A ∩ B|&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;|A ∩ ¬B|&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;|¬A ∩ B|&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;|¬A ∩ ¬B|&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;… uniquely determine the sizes of the other sets, because:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;| A| = | A ∩  B| + | A ∩ ¬B|&lt;br /&gt;|¬A| = |¬A ∩  B| + |¬A ∩ ¬B|&lt;br /&gt;| B| = | A ∩  B| + |¬A ∩  B|&lt;br /&gt;|¬B| = | A ∩ ¬B| + |¬A ∩ ¬B|&lt;br /&gt;| U| = | A ∩  B| + | A ∩ ¬B| + |¬A ∩  B| + |¬A ∩ ¬B|&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;… so each function in our API will only take four function arguments, corresponding to the size of those four disjoint sets. There are other ways we could define the API that use a different four degrees of freedom, but I find this interface to be the simplest and most symmetric.&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;#cb4-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Probability&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-2&quot;&gt;&lt;a href=&quot;#cb4-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-3&quot;&gt;&lt;a href=&quot;#cb4-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Numeric.Natural&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-4&quot;&gt;&lt;a href=&quot;#cb4-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-5&quot;&gt;&lt;a href=&quot;#cb4-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Use exact Rational arithmetic by default instead of floating point arithmetic&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-6&quot;&gt;&lt;a href=&quot;#cb4-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;default (&lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Rational&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-7&quot;&gt;&lt;a href=&quot;#cb4-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-8&quot;&gt;&lt;a href=&quot;#cb4-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Obligatory: http://www.willamette.edu/~fruehr/haskell/evolution.html?&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-9&quot;&gt;&lt;a href=&quot;#cb4-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;factorial ::&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Enum&lt;/span&gt; n, &lt;span class=&quot;dt&quot;&gt;Num&lt;/span&gt; n) &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; n &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; n&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-10&quot;&gt;&lt;a href=&quot;#cb4-10&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;factorial n &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;product&lt;/span&gt; [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;..&lt;/span&gt;n]&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-11&quot;&gt;&lt;a href=&quot;#cb4-11&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-12&quot;&gt;&lt;a href=&quot;#cb4-12&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;{-| The probability that two sets of sizes @|A|@ and @|B|@ overlap by a set of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-13&quot;&gt;&lt;a href=&quot;#cb4-13&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;    exactly size @|A ∩ B|@&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-14&quot;&gt;&lt;a href=&quot;#cb4-14&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-15&quot;&gt;&lt;a href=&quot;#cb4-15&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;    prop&amp;gt; exactly 1 0 0 a === 1 % (a + 1)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-16&quot;&gt;&lt;a href=&quot;#cb4-16&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;    prop&amp;gt; exactly a b 0 0 === 1&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-17&quot;&gt;&lt;a href=&quot;#cb4-17&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;    prop&amp;gt; exactly a 0 b 0 === 1&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-18&quot;&gt;&lt;a href=&quot;#cb4-18&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;    prop&amp;gt; exactly a b c d === exactly a c b d&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-19&quot;&gt;&lt;a href=&quot;#cb4-19&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-20&quot;&gt;&lt;a href=&quot;#cb4-20&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;exactly&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-21&quot;&gt;&lt;a href=&quot;#cb4-21&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;    ::&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Enum&lt;/span&gt; n, &lt;span class=&quot;dt&quot;&gt;Fractional&lt;/span&gt; n)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-22&quot;&gt;&lt;a href=&quot;#cb4-22&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-23&quot;&gt;&lt;a href=&quot;#cb4-23&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;-- ^ The size of @|A ∩ B|@&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-24&quot;&gt;&lt;a href=&quot;#cb4-24&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-25&quot;&gt;&lt;a href=&quot;#cb4-25&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;-- ^ The size of @|A ∩ ¬B|@&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-26&quot;&gt;&lt;a href=&quot;#cb4-26&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-27&quot;&gt;&lt;a href=&quot;#cb4-27&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;-- ^ The size of @|¬A ∩ B|@&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-28&quot;&gt;&lt;a href=&quot;#cb4-28&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-29&quot;&gt;&lt;a href=&quot;#cb4-29&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;-- ^ The size of @|¬A ∩ ¬B|@&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-30&quot;&gt;&lt;a href=&quot;#cb4-30&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; n&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-31&quot;&gt;&lt;a href=&quot;#cb4-31&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;exactly _AB _AnotB _BnotA notAB &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-32&quot;&gt;&lt;a href=&quot;#cb4-32&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;fromIntegral&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;numerator&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fromIntegral&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;denominator&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-33&quot;&gt;&lt;a href=&quot;#cb4-33&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-34&quot;&gt;&lt;a href=&quot;#cb4-34&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    _A &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; _AB &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; _AnotB&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-35&quot;&gt;&lt;a href=&quot;#cb4-35&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    _B &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; _AB &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; _BnotA&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-36&quot;&gt;&lt;a href=&quot;#cb4-36&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-37&quot;&gt;&lt;a href=&quot;#cb4-37&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    notB &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; _AnotB &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; notAB&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-38&quot;&gt;&lt;a href=&quot;#cb4-38&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    notA &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; _BnotA &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; notAB&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-39&quot;&gt;&lt;a href=&quot;#cb4-39&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-40&quot;&gt;&lt;a href=&quot;#cb4-40&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    _U &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; _AB &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; _AnotB &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; _BnotA &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; notAB&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-41&quot;&gt;&lt;a href=&quot;#cb4-41&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-42&quot;&gt;&lt;a href=&quot;#cb4-42&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;numerator&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;product&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;map&lt;/span&gt; factorial [ _A, notA, _B, notB ])&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-43&quot;&gt;&lt;a href=&quot;#cb4-43&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-44&quot;&gt;&lt;a href=&quot;#cb4-44&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;denominator&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;product&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;map&lt;/span&gt; factorial [ _AB, _AnotB, _BnotA, notAB, _U ])&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-45&quot;&gt;&lt;a href=&quot;#cb4-45&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-46&quot;&gt;&lt;a href=&quot;#cb4-46&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;{-| The probability that two sets of sizes @|A|@ and @|B|@ overlap by a set of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-47&quot;&gt;&lt;a href=&quot;#cb4-47&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;    at least size @|A ∩ B|@&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-48&quot;&gt;&lt;a href=&quot;#cb4-48&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-49&quot;&gt;&lt;a href=&quot;#cb4-49&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;    prop&amp;gt; atLeast 0 a b c === 1&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-50&quot;&gt;&lt;a href=&quot;#cb4-50&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;    prop&amp;gt; atLeast a b c d === atMost a c b d&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-51&quot;&gt;&lt;a href=&quot;#cb4-51&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-52&quot;&gt;&lt;a href=&quot;#cb4-52&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;atLeast&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-53&quot;&gt;&lt;a href=&quot;#cb4-53&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;    ::&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Enum&lt;/span&gt; n, &lt;span class=&quot;dt&quot;&gt;Fractional&lt;/span&gt; n)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-54&quot;&gt;&lt;a href=&quot;#cb4-54&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-55&quot;&gt;&lt;a href=&quot;#cb4-55&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;-- ^ The minimum size of @|A ∩ B|@&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-56&quot;&gt;&lt;a href=&quot;#cb4-56&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-57&quot;&gt;&lt;a href=&quot;#cb4-57&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;-- ^ The maximum size of @|A ∩ ¬B|@&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-58&quot;&gt;&lt;a href=&quot;#cb4-58&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-59&quot;&gt;&lt;a href=&quot;#cb4-59&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;-- ^ The maximum size of @|¬A ∩ B|@&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-60&quot;&gt;&lt;a href=&quot;#cb4-60&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-61&quot;&gt;&lt;a href=&quot;#cb4-61&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;-- ^ The minimum size of @|¬A ∩ ¬B|@&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-62&quot;&gt;&lt;a href=&quot;#cb4-62&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; n&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-63&quot;&gt;&lt;a href=&quot;#cb4-63&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;atLeast _AB _AnotB _BnotA notAB &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;sum&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;map&lt;/span&gt; overshootBy [&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;..&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;min&lt;/span&gt; _AnotB _BnotA)])&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-64&quot;&gt;&lt;a href=&quot;#cb4-64&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-65&quot;&gt;&lt;a href=&quot;#cb4-65&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    overshootBy x &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; exactly (_AB &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; x) (_AnotB &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; x) (_BnotA &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; x) (notAB &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; x)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-66&quot;&gt;&lt;a href=&quot;#cb4-66&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-67&quot;&gt;&lt;a href=&quot;#cb4-67&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;{-| The probability that two sets of sizes @|A|@ and @|B|@ overlap by a set of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-68&quot;&gt;&lt;a href=&quot;#cb4-68&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;    at most size @|A ∩ B|@&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-69&quot;&gt;&lt;a href=&quot;#cb4-69&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-70&quot;&gt;&lt;a href=&quot;#cb4-70&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;    prop&amp;gt; atMost 0 a b c === exactly 0 a b c&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-71&quot;&gt;&lt;a href=&quot;#cb4-71&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;    prop&amp;gt; atMost a 0 b c === 1&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-72&quot;&gt;&lt;a href=&quot;#cb4-72&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;    prop&amp;gt; atMost a b 0 c === 1&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-73&quot;&gt;&lt;a href=&quot;#cb4-73&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;    prop&amp;gt; atMost a b c d === atMost a c b d&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-74&quot;&gt;&lt;a href=&quot;#cb4-74&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;    prop&amp;gt; atMost a b c d + atLeast a b c d === 1 + exactly a b c d&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-75&quot;&gt;&lt;a href=&quot;#cb4-75&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-76&quot;&gt;&lt;a href=&quot;#cb4-76&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;atMost&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-77&quot;&gt;&lt;a href=&quot;#cb4-77&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;    ::&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Enum&lt;/span&gt; n, &lt;span class=&quot;dt&quot;&gt;Fractional&lt;/span&gt; n)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-78&quot;&gt;&lt;a href=&quot;#cb4-78&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-79&quot;&gt;&lt;a href=&quot;#cb4-79&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;-- ^ The maximum size of @|A ∩ B|@&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-80&quot;&gt;&lt;a href=&quot;#cb4-80&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-81&quot;&gt;&lt;a href=&quot;#cb4-81&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;-- ^ The minimum size of @|A ∩ ¬B|@&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-82&quot;&gt;&lt;a href=&quot;#cb4-82&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-83&quot;&gt;&lt;a href=&quot;#cb4-83&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;-- ^ The minimum size of @|¬A ∩ B|@&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-84&quot;&gt;&lt;a href=&quot;#cb4-84&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-85&quot;&gt;&lt;a href=&quot;#cb4-85&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;-- ^ The maximum size of @|¬A ∩ ¬B|@&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-86&quot;&gt;&lt;a href=&quot;#cb4-86&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; n&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-87&quot;&gt;&lt;a href=&quot;#cb4-87&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;atMost _AB _AnotB _BnotA notAB &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;sum&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;map&lt;/span&gt; undershootBy [&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;..&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;min&lt;/span&gt; _AB notAB)])&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-88&quot;&gt;&lt;a href=&quot;#cb4-88&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-89&quot;&gt;&lt;a href=&quot;#cb4-89&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    undershootBy x &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; exactly (_AB &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; x) (_AnotB &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; x) (_BnotA &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; x) (notAB &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; x)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Exercise:&lt;/strong&gt; If you don’t use Haskell, try to port the above functions to your favorite programming language.&lt;/p&gt;&lt;h4 id=&quot;examples&quot;&gt;Examples&lt;/h4&gt;&lt;p&gt;Let’s test drive the above utilities on the example scenarios from Slay the Spire.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;“Next turn I draw 5 cards. What is the likelihood that I draw at least 3 Strikes if there are 7 cards left in the deck, 4 of which are Strikes”.&lt;/p&gt;&lt;p&gt;Here, we will be using the &lt;code&gt;atLeast&lt;/code&gt; function with the following input sizes for each disjoint set:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;| A ∩  B| = 3&lt;/code&gt; - We wish to draw at least 3 Strike cards&lt;/li&gt;&lt;li&gt;&lt;code&gt;| A ∩ ¬B| = 2&lt;/code&gt; - We wish to draw at most 2 non-Strike cards&lt;/li&gt;&lt;li&gt;&lt;code&gt;|¬A ∩  B| = 1&lt;/code&gt; - We wish to leave at most 1 Strike card in the deck&lt;/li&gt;&lt;li&gt;&lt;code&gt;|¬A ∩ ¬B| = 1&lt;/code&gt; - We wish to leave at least 1 non-Strike card in the deck&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;… which gives us a 5 in 7 chance:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;#cb5-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; atLeast &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-2&quot;&gt;&lt;a href=&quot;#cb5-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Exercise:&lt;/strong&gt; Use the &lt;code&gt;atMost&lt;/code&gt; function to compute the chance of falling short by drawing at most 2 Strikes.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;“One Neow bonus lets me lose 7 max HP to select from 1 of 3 random rare cards. Right now I’m only interested in 6 of the 17 possible rare cards, so what is the chance that I random at least 1 of those 6?”&lt;/p&gt;&lt;p&gt;This will also use the &lt;code&gt;atLeast&lt;/code&gt; function with the following input sizes for each disjoint set:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;| A ∩  B| = 1&lt;/code&gt; - We wish to draw at least 1 desired rare card&lt;/li&gt;&lt;li&gt;&lt;code&gt;| A ∩ ¬B| = 2&lt;/code&gt; - We wish to draw at most 2 undesirable rare cards&lt;/li&gt;&lt;li&gt;&lt;code&gt;|¬A ∩  B| = 5&lt;/code&gt; - We wish to leave at most 5 desirable cards in the pool&lt;/li&gt;&lt;li&gt;&lt;code&gt;|¬A ∩ ¬B| = 9&lt;/code&gt; - We wish to leave at least 9 undesirable cards in the pool&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;… which gives us a 103 in 136 chance:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb6&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb6-1&quot;&gt;&lt;a href=&quot;#cb6-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; atLeast &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-2&quot;&gt;&lt;a href=&quot;#cb6-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dv&quot;&gt;103&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;136&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Exercise:&lt;/strong&gt; Use the &lt;code&gt;exactly&lt;/code&gt; function to compute the chance of randoming 0 desirable cards.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&quot;explanation&quot;&gt;Explanation&lt;/h4&gt;&lt;p&gt;This section provides a semi-rigorous explanation of why the formula works, although probably not rigorous enough to be called a proof.&lt;/p&gt;&lt;p&gt;The probability of drawing a correct hand is:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;    {The number of correct hands}&lt;br /&gt;p = ──────────────────────────────&lt;br /&gt;    {The number of possible hands}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The number of possible hands is the number of ways that we can draw a hand of size &lt;code&gt;|A|&lt;/code&gt; (without replacement) from a pool of &lt;code&gt;|U|&lt;/code&gt; cards (our deck):&lt;/p&gt;&lt;pre&gt;&lt;code&gt;{The number of possible hands} = |U| choose |A|&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Similarly, the number of correct hands is the product of:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;the number of ways to draw &lt;code&gt;|A ∩ B|&lt;/code&gt; desirable cards from a pool of &lt;code&gt;|B|&lt;/code&gt; desirable cards and&lt;/li&gt;&lt;li&gt;the number of ways to draw &lt;code&gt;|A ∩ ¬B|&lt;/code&gt; undesirable cards from a pool of &lt;code&gt;|¬B|&lt;/code&gt; undesirable cards&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code&gt;{The number of correct hands} = (|B| choose |A ∩ B|) × (|¬B| choose |A ∩ ¬B|)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Putting that together gives:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;    (|B| choose |A ∩ B|) × (|¬B| choose |A ∩ ¬B|)&lt;br /&gt;p = ─────────────────────────────────────────────&lt;br /&gt;                   |U| choose |A|&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then we can use the &lt;a href=&quot;https://en.wikipedia.org/wiki/Combination&quot;&gt;“&lt;code&gt;n&lt;/code&gt; choose &lt;code&gt;k&lt;/code&gt;”&lt;/a&gt; formula for computing the number of ways to select &lt;code&gt;n&lt;/code&gt; cards from a pool of &lt;code&gt;k&lt;/code&gt; cards without replacement, which gives us:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;            |B|!                   |¬B|!&lt;br /&gt;    ──────────────────── × ──────────────────────&lt;br /&gt;    |A ∩ B|! × |¬A ∩ B|!   |A ∩ ¬B|! × |¬A ∩ ¬B|!&lt;br /&gt;p = ─────────────────────────────────────────────&lt;br /&gt;                        |U|!&lt;br /&gt;                    ───────────&lt;br /&gt;                    |A|! × |¬A|&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;… and then if we simplify that we get our original formula:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;                |A|! × |¬A|! × |B|! × |¬B|!&lt;br /&gt;p = ────────────────────────────────────────────────────&lt;br /&gt;    |A ∩ B|! × |A ∩ ¬B|! × |¬A ∩ B|! × |¬A ∩ ¬B|! × |U|!&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;&lt;p&gt;Unfortunately, this formula is quite difficult to do in one’s head so I usually load these utility functions into a Haskell REPL to do the math on tricky turns. I haven’t yet figured out an easy heuristic for getting a quick and approximate answer for this sort of probability calculation.&lt;/p&gt;&lt;p&gt;However, if you’re willing to take the time to compute the odds this sort of calculation can quickly add up to improving your odds of winning a Slay the Spire run. I often use this trick to compute the &lt;a href=&quot;https://en.wikipedia.org/wiki/Expected_value&quot;&gt;expectation value&lt;/a&gt; of greedy plays which can save quite a bit of health or potions over the course of a run.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</content><link rel="replies" type="application/atom+xml" href="https://www.haskellforall.com/feeds/7368009850157400604/comments/default" title="Post Comments"><link rel="replies" type="text/html" href="https://www.haskellforall.com/2021/06/probability-for-slay-spire-fanatics.html#comment-form" title="0 Comments"><link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/7368009850157400604"><link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/7368009850157400604"><link rel="alternate" type="text/html" href="https://www.haskellforall.com/2021/06/probability-for-slay-spire-fanatics.html" title="Probability for Slay the Spire fanatics"><author><name>Gabriel Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-1686573336927857047</id><published>2021-05-19T09:00:00.001-07:00</published><updated>2021-05-19T09:00:00.187-07:00</updated><title type="text">Module organization guidelines for Haskell projects</title><content type="html">&lt;!DOCTYPE html&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;utf-8&quot; /&gt;  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;  &lt;title&gt;modules&lt;/title&gt;  &lt;style&gt;    html {       line-height: 1.5;       font-family: Georgia, serif;       font-size: 20px;       color: #1a1a1a;       background-color: #fdfdfd;     }     body {       margin: 0 auto;       max-width: 36em;       padding-left: 50px;       padding-right: 50px;       padding-top: 50px;       padding-bottom: 50px;       hyphens: auto;       word-wrap: break-word;       text-rendering: optimizeLegibility;       font-kerning: normal;     }     @media (max-width: 600px) {       body {         font-size: 0.9em;         padding: 1em;       }     }     @media print {       body {         background-color: transparent;         color: black;         font-size: 12pt;       }       p, h2, h3 {         orphans: 3;         widows: 3;       }       h2, h3, h4 {         page-break-after: avoid;       }     }     p {       margin: 1em 0;     }     a {       color: #1a1a1a;     }     a:visited {       color: #1a1a1a;     }     img {       max-width: 100%;     }     h1, h2, h3, h4, h5, h6 {       margin-top: 1.4em;     }     h5, h6 {       font-size: 1em;       font-style: italic;     }     h6 {       font-weight: normal;     }     ol, ul {       padding-left: 1.7em;       margin-top: 1em;     }     li &gt; ol, li &gt; ul {       margin-top: 0;     }     blockquote {       margin: 1em 0 1em 1.7em;       padding-left: 1em;       border-left: 2px solid #e6e6e6;       color: #606060;     }     code {       font-family: Menlo, Monaco, 'Lucida Console', Consolas, monospace;       font-size: 85%;       margin: 0;     }     pre {       margin: 1em 0;       overflow: auto;     }     pre code {       padding: 0;       overflow: visible;     }     .sourceCode {      background-color: transparent;      overflow: visible;     }     hr {       background-color: #1a1a1a;       border: none;       height: 1px;       margin: 1em 0;     }     table {       margin: 1em 0;       border-collapse: collapse;       width: 100%;       overflow-x: auto;       display: block;       font-variant-numeric: lining-nums tabular-nums;     }     table caption {       margin-bottom: 0.75em;     }     tbody {       margin-top: 0.5em;       border-top: 1px solid #1a1a1a;       border-bottom: 1px solid #1a1a1a;     }     th {       border-top: 1px solid #1a1a1a;       padding: 0.25em 0.5em 0.25em 0.5em;     }     td {       padding: 0.125em 0.5em 0.25em 0.5em;     }     header {       margin-bottom: 4em;       text-align: center;     }     #TOC li {       list-style: none;     }     #TOC a:not(:hover) {       text-decoration: none;     }     code{white-space: pre-wrap;}     span.smallcaps{font-variant: small-caps;}     span.underline{text-decoration: underline;}     div.column{display: inline-block; vertical-align: top; width: 50%;}     div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}     ul.task-list{list-style: none;}     pre &gt; code.sourceCode { white-space: pre; position: relative; }     pre &gt; code.sourceCode &gt; span { display: inline-block; line-height: 1.25; }     pre &gt; code.sourceCode &gt; span:empty { height: 1.2em; }     .sourceCode { overflow: visible; }     code.sourceCode &gt; span { color: inherit; text-decoration: inherit; }     div.sourceCode { margin: 1em 0; }     pre.sourceCode { margin: 0; }     @media screen {     div.sourceCode { overflow: auto; }     }     @media print {     pre &gt; code.sourceCode { white-space: pre-wrap; }     pre &gt; code.sourceCode &gt; span { text-indent: -5em; padding-left: 5em; }     }     pre.numberSource code       { counter-reset: source-line 0; }     pre.numberSource code &gt; span       { position: relative; left: -4em; counter-increment: source-line; }     pre.numberSource code &gt; span &gt; a:first-child::before       { content: counter(source-line);         position: relative; left: -1em; text-align: right; vertical-align: baseline;         border: none; display: inline-block;         -webkit-touch-callout: none; -webkit-user-select: none;         -khtml-user-select: none; -moz-user-select: none;         -ms-user-select: none; user-select: none;         padding: 0 4px; width: 4em;         color: #aaaaaa;       }     pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }     div.sourceCode       {   }     @media screen {     pre &gt; code.sourceCode &gt; span &gt; a:first-child::before { text-decoration: underline; }     }     code span.al { color: #ff0000; font-weight: bold; } /* Alert */     code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */     code span.at { color: #7d9029; } /* Attribute */     code span.bn { color: #40a070; } /* BaseN */     code span.bu { } /* BuiltIn */     code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */     code span.ch { color: #4070a0; } /* Char */     code span.cn { color: #880000; } /* Constant */     code span.co { color: #60a0b0; font-style: italic; } /* Comment */     code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */     code span.do { color: #ba2121; font-style: italic; } /* Documentation */     code span.dt { color: #902000; } /* DataType */     code span.dv { color: #40a070; } /* DecVal */     code span.er { color: #ff0000; font-weight: bold; } /* Error */     code span.ex { } /* Extension */     code span.fl { color: #40a070; } /* Float */     code span.fu { color: #06287e; } /* Function */     code span.im { } /* Import */     code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */     code span.kw { color: #007020; font-weight: bold; } /* Keyword */     code span.op { color: #666666; } /* Operator */     code span.ot { color: #007020; } /* Other */     code span.pp { color: #bc7a00; } /* Preprocessor */     code span.sc { color: #4070a0; } /* SpecialChar */     code span.ss { color: #bb6688; } /* SpecialString */     code span.st { color: #4070a0; } /* String */     code span.va { color: #19177c; } /* Variable */     code span.vs { color: #4070a0; } /* VerbatimString */     code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */     .display.math{display: block; text-align: center; margin: 0.5rem auto;}   &lt;/style&gt;  &lt;!--[if lt IE 9]&gt;    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;  &lt;![endif]--&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;This post collects a random assortment of guidelines I commonly share for how to organize Haskell projects.&lt;/p&gt;&lt;h4 id=&quot;organize-modules-vertically-not-horizontally&quot;&gt;Organize modules “vertically”, not “horizontally”&lt;/h4&gt;&lt;p&gt;The glib summary of this rule is: don’t create a “Types” or “Constants” module.&lt;/p&gt;&lt;p&gt;“Vertically” organized modules are modules that group related functionality within the same module. For example, vertically-oriented modules for a simple interpreter might be:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;A &lt;code&gt;Syntax&lt;/code&gt; module&lt;/p&gt;&lt;p&gt;… which contains the concrete syntax tree type and utilities for traversing, viewing, or editing that tree.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;A &lt;code&gt;Parsing&lt;/code&gt; module&lt;/p&gt;&lt;p&gt;… which contains (or imports/re-exports) the parser type, a parser for the syntax tree, and error messages specific to parsing.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;An &lt;code&gt;Infer&lt;/code&gt; module&lt;/p&gt;&lt;p&gt;… which contains the the type inference logic, exception types, and error messages specific to type-checking.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;An &lt;code&gt;Evaluation&lt;/code&gt; module&lt;/p&gt;&lt;p&gt;… which logic for evaluating an expression, including possibly a separate data structure for a fully-evaluated abstract syntax tree.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;A &lt;code&gt;Pretty&lt;/code&gt; module&lt;/p&gt;&lt;p&gt;… which specifies how to pretty-print or otherwise format expressions for display.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;“Horizontally” organized modules mean that you organize code into modules based on which language features or imports the code relies upon. For example, horizontally-oriented modules for the same interpreter might be:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;A &lt;code&gt;Types&lt;/code&gt; module&lt;/p&gt;&lt;p&gt;… which contains almost all types, including the concrete syntax tree, abstract syntax tree, parsing-related types, and exception types.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;A &lt;code&gt;Lib&lt;/code&gt; module&lt;/p&gt;&lt;p&gt;… which contains almost all functions, including the parsers, type inference code, evaluator, and prettyprinter.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;A &lt;code&gt;Constants&lt;/code&gt; module&lt;/p&gt;&lt;p&gt;… which contains almost all constants (including all error messages, timeouts, and help text).&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;An &lt;code&gt;App&lt;/code&gt; module&lt;/p&gt;&lt;p&gt;… which contains the &lt;code&gt;main&lt;/code&gt; entry point for the program.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;There are a few reasons I prefer vertical module organization over horizontal module organization:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Vertically-organized modules are easier to split into smaller packages&lt;/p&gt;&lt;p&gt;For example, in a vertically-organized project I could separate out the &lt;code&gt;Syntax&lt;/code&gt;, &lt;code&gt;Parser&lt;/code&gt;, and &lt;code&gt;Pretty&lt;/code&gt; modules into a separate standalone package, which could be used by other people to create an automatic code formatter for my language without having to depend on the type-checking or evaluation logic.&lt;/p&gt;&lt;p&gt;Conversely, there would be little benefit in separating out a &lt;code&gt;Types&lt;/code&gt; module from the equivalent horizontally-organized package. Typically, horizontal modules are so tightly coupled to one another that no subset of the modules is useful in isolation.&lt;/p&gt;&lt;p&gt;The separability of vertical modules is an even bigger feature for proprietary projects that aspire to eventually open source their work. Vertically-organized projects are easier to open source a few modules at a time while keeping the proprietary pieces internal.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Vertically-organized modules tend to promote more granular and incremental build graphs&lt;/p&gt;&lt;p&gt;In a horizontally-organized project, each new type you add to the &lt;code&gt;Types&lt;/code&gt; module forces a rebuild of the entire package. In a vertically-organized project, if I completely rewrite the type-checking logic then only other modules that depend on type-checking will rebuild (and typically very few depend on type-checking).&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Vertically-organized modules tend to group related changes&lt;/p&gt;&lt;p&gt;A common issue in a horizontally-organized project is that every change touches almost every module, making new contributions harder and making related functionality more difficult to discover. In a vertically-organized project related changes tend to fall within the same module.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&quot;naming-conventions&quot;&gt;Naming conventions&lt;/h4&gt;&lt;p&gt;I like to use the convention that the default module to import is the same as the package name, except replacing &lt;code&gt;-&lt;/code&gt; with &lt;code&gt;.&lt;/code&gt; and capitalizing words.&lt;/p&gt;&lt;p&gt;For example, if your package name is &lt;code&gt;foo-bar-baz&lt;/code&gt;, then the default module the user imports to use your package is &lt;code&gt;Foo.Bar.Baz&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Packages following this module naming convention typically do not have module names beginning with &lt;code&gt;Control.&lt;/code&gt; or &lt;code&gt;Data.&lt;/code&gt; prefixes (unless the package name happens to begin with a &lt;code&gt;control-&lt;/code&gt; or &lt;code&gt;data-&lt;/code&gt; prefix).&lt;/p&gt;&lt;p&gt;There are a few reasons I suggest this convention:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Users can easily infer which module to import from the package name&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;It tends to lead to shorter module names&lt;/p&gt;&lt;p&gt;For example, the &lt;code&gt;prettyprinter&lt;/code&gt; package recently switched to this idiom, which changed the default import from &lt;code&gt;Data.Text.Prettyprint.Doc&lt;/code&gt; to &lt;code&gt;Prettyprinter&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;It reduces module naming clashes between packages&lt;/p&gt;&lt;p&gt;The reasoning is that you are already claiming global namespace when naming a package, so should why not also globally reserve the module of the same name, too?&lt;/p&gt;&lt;p&gt;However, this won’t completely eliminate the potential for name clashes for other non-default modules that your package exports.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&quot;the-god-library-stanza&quot;&gt;The “God” library stanza&lt;/h4&gt;&lt;p&gt;This is a tip &lt;strong&gt;for proprietary projects only&lt;/strong&gt;: put all of your project’s code into one giant library stanza in your &lt;code&gt;.cabal&lt;/code&gt; file, including the entrypoint logic (like your command-line interface), tests, and benchmarks. Then every other stanza in the &lt;code&gt;.cabal&lt;/code&gt; file (i.e. the executables, test suites, and benchmarks) should just be a thin wrapper around something exported from one of your “library” modules.&lt;/p&gt;&lt;p&gt;For example, suppose that your package is named &lt;code&gt;foo&lt;/code&gt; which builds an executable named &lt;code&gt;bar&lt;/code&gt;. Your &lt;code&gt;foo.cabal&lt;/code&gt; file would look like this (with only the relevant parts shown):&lt;/p&gt;&lt;pre class=&quot;cabal&quot;&gt;&lt;code&gt;name: foo&lt;br /&gt;…&lt;br /&gt;&lt;br /&gt;library&lt;br /&gt;  hs-source-dirs: src&lt;br /&gt;  exposed-modules:&lt;br /&gt;    Foo.Bar&lt;br /&gt;  …&lt;br /&gt;&lt;br /&gt;executable bar&lt;br /&gt;  hs-source-dirs: bar&lt;br /&gt;  main-is: Main.hs&lt;br /&gt;  …&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;… where &lt;code&gt;src/Foo/Bar.hs&lt;/code&gt; would look like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- ./src/Foo/Bar.hs&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Foo.Bar&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;#cb2-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-4&quot;&gt;&lt;a href=&quot;#cb2-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;…&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-5&quot;&gt;&lt;a href=&quot;#cb2-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-6&quot;&gt;&lt;a href=&quot;#cb2-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;main ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;IO&lt;/span&gt; ()&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-7&quot;&gt;&lt;a href=&quot;#cb2-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;main &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; … &lt;span class=&quot;co&quot;&gt;-- Your real `main` goes here&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… and &lt;code&gt;bar/Main.hs&lt;/code&gt; is a trivial wrapper around &lt;code&gt;Foo.Bar.main&lt;/code&gt;:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- ./bar/Main.hs&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;#cb3-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-3&quot;&gt;&lt;a href=&quot;#cb3-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-4&quot;&gt;&lt;a href=&quot;#cb3-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-5&quot;&gt;&lt;a href=&quot;#cb3-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;qualified&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Foo.Bar&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-6&quot;&gt;&lt;a href=&quot;#cb3-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-7&quot;&gt;&lt;a href=&quot;#cb3-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;main ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;IO&lt;/span&gt; ()&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-8&quot;&gt;&lt;a href=&quot;#cb3-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;main &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; Foo.Bar.main&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This tip specifically works around &lt;code&gt;cabal repl&lt;/code&gt;’s poor support for handling changes that span multiple project stanzas (both &lt;code&gt;cabal v1-repl&lt;/code&gt; and &lt;code&gt;cabal v2-repl&lt;/code&gt; appear to have the problem).&lt;/p&gt;&lt;p&gt;To illustrate the issue, suppose that you use &lt;code&gt;cabal repl&lt;/code&gt; to load the executable logic for the project like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;#cb4-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; cabal repl exe:bar&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-2&quot;&gt;&lt;a href=&quot;#cb4-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;…&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-3&quot;&gt;&lt;a href=&quot;#cb4-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;*Main&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now if you change the &lt;code&gt;Foo.Bar&lt;/code&gt; module and &lt;code&gt;:reload&lt;/code&gt; the REPL, the REPL will not reflect the changes you made. This is a pain whenever you need to test changes that span your library and an executable, your library and a test suite, or your library and a benchmark.&lt;/p&gt;&lt;p&gt;Also, if you load an executable / test suite / benchmark into the REPL that depends on a separate library stanza then &lt;code&gt;cabal repl&lt;/code&gt; will force you to generate object code for the library stanza, which is slow. Contrast that with using &lt;code&gt;cabal repl&lt;/code&gt; to only load the library stanza, which will be faster because it won’t generate object code.&lt;/p&gt;&lt;p&gt;Moreover, &lt;code&gt;ghcid&lt;/code&gt; uses &lt;code&gt;cabal repl&lt;/code&gt; to power its fast type-checking loop, which means that &lt;code&gt;ghcid&lt;/code&gt; also does not work well if you need to quickly switch between changes to the library stanza and other project stanzas.&lt;/p&gt;&lt;p&gt;The fix to all of these problems is: put all of your project’s logic into the library stanza and use only the library stanza as basis for your interactive development. Everything else (your executables, your test suites, and your benchmarks) is just a trivial wrapper around something exported from the library.&lt;/p&gt;&lt;p&gt;I don’t recommend this solution for open source projects, though. If you do this for a public package then your end users will hate you because your package’s library section will depend on test packages or benchmarking packages that can’t be disabled. In contrast, proprietary codebases rarely care about gratuitous dependencies (in my experience).&lt;/p&gt;&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;&lt;p&gt;Those are all of the tips I can think of at the moment. Leave a comment if you think I missed another common practice.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</content><link rel="replies" type="application/atom+xml" href="https://www.haskellforall.com/feeds/1686573336927857047/comments/default" title="Post Comments"><link rel="replies" type="text/html" href="https://www.haskellforall.com/2021/05/module-organization-guidelines-for.html#comment-form" title="6 Comments"><link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/1686573336927857047"><link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/1686573336927857047"><link rel="alternate" type="text/html" href="https://www.haskellforall.com/2021/05/module-organization-guidelines-for.html" title="Module organization guidelines for Haskell projects"><author><name>Gabriel Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/></author><thr:total>6</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-5207997287285777304</id><published>2021-05-05T07:48:00.000-07:00</published><updated>2021-05-05T07:48:53.878-07:00</updated><title type="text">The trick to avoid deeply-nested error-handling code</title><content type="html">&lt;!DOCTYPE html&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;utf-8&quot; /&gt;  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;  &lt;title&gt;either-trick&lt;/title&gt;  &lt;style&gt;    code{white-space: pre-wrap;}     span.smallcaps{font-variant: small-caps;}     span.underline{text-decoration: underline;}     div.column{display: inline-block; vertical-align: top; width: 50%;}     div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}     ul.task-list{list-style: none;}     pre &gt; code.sourceCode { white-space: pre; position: relative; }     pre &gt; code.sourceCode &gt; span { display: inline-block; line-height: 1.25; }     pre &gt; code.sourceCode &gt; span:empty { height: 1.2em; }     code.sourceCode &gt; span { color: inherit; text-decoration: inherit; }     div.sourceCode { margin: 1em 0; }     pre.sourceCode { margin: 0; }     @media screen {     div.sourceCode { overflow: auto; }     }     @media print {     pre &gt; code.sourceCode { white-space: pre-wrap; }     pre &gt; code.sourceCode &gt; span { text-indent: -5em; padding-left: 5em; }     }     pre.numberSource code       { counter-reset: source-line 0; }     pre.numberSource code &gt; span       { position: relative; left: -4em; counter-increment: source-line; }     pre.numberSource code &gt; span &gt; a:first-child::before       { content: counter(source-line);         position: relative; left: -1em; text-align: right; vertical-align: baseline;         border: none; display: inline-block;         -webkit-touch-callout: none; -webkit-user-select: none;         -khtml-user-select: none; -moz-user-select: none;         -ms-user-select: none; user-select: none;         padding: 0 4px; width: 4em;         color: #aaaaaa;       }     pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }     div.sourceCode       {   }     @media screen {     pre &gt; code.sourceCode &gt; span &gt; a:first-child::before { text-decoration: underline; }     }     code span.al { color: #ff0000; font-weight: bold; } /* Alert */     code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */     code span.at { color: #7d9029; } /* Attribute */     code span.bn { color: #40a070; } /* BaseN */     code span.bu { } /* BuiltIn */     code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */     code span.ch { color: #4070a0; } /* Char */     code span.cn { color: #880000; } /* Constant */     code span.co { color: #60a0b0; font-style: italic; } /* Comment */     code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */     code span.do { color: #ba2121; font-style: italic; } /* Documentation */     code span.dt { color: #902000; } /* DataType */     code span.dv { color: #40a070; } /* DecVal */     code span.er { color: #ff0000; font-weight: bold; } /* Error */     code span.ex { } /* Extension */     code span.fl { color: #40a070; } /* Float */     code span.fu { color: #06287e; } /* Function */     code span.im { } /* Import */     code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */     code span.kw { color: #007020; font-weight: bold; } /* Keyword */     code span.op { color: #666666; } /* Operator */     code span.ot { color: #007020; } /* Other */     code span.pp { color: #bc7a00; } /* Preprocessor */     code span.sc { color: #4070a0; } /* SpecialChar */     code span.ss { color: #bb6688; } /* SpecialString */     code span.st { color: #4070a0; } /* String */     code span.va { color: #19177c; } /* Variable */     code span.vs { color: #4070a0; } /* VerbatimString */     code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */   &lt;/style&gt;  &lt;!--[if lt IE 9]&gt;    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;  &lt;![endif]--&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;This post documents a small trick that I use to avoid deeply-nested error-handling code. This trick is a common piece of Haskell folklore that many people either learn from others or figure out on their own, but I’m not sure what the official name of this trick is (so I had difficulty searching for prior art explaining this trick). However, I’ve taught this trick to others enough times that I think it merits a blog post of its own.&lt;/p&gt;&lt;p&gt;This post assumes some familiarity with Haskell’s &lt;code&gt;Either&lt;/code&gt; type and &lt;code&gt;do&lt;/code&gt; notation, but the &lt;a href=&quot;#appendix&quot;&gt;Appendix&lt;/a&gt; at the end of the post will walk through all of the details using equational reasoning if you’re having trouble following along with how things work.&lt;/p&gt;&lt;h4 id=&quot;the-motivating-example&quot;&gt;The motivating example&lt;/h4&gt;&lt;p&gt;Let’s begin from the following contrived &lt;code&gt;Either&lt;/code&gt;-based example that uses deeply nested error-handling:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;{-# LANGUAGE NamedFieldPuns #-}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;#cb1-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text.Read&lt;/span&gt; (readMaybe)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-4&quot;&gt;&lt;a href=&quot;#cb1-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-5&quot;&gt;&lt;a href=&quot;#cb1-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt; {&lt;span class=&quot;ot&quot;&gt; age ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;,&lt;span class=&quot;ot&quot;&gt; alive ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt; } &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-6&quot;&gt;&lt;a href=&quot;#cb1-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-7&quot;&gt;&lt;a href=&quot;#cb1-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;example ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Either&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-8&quot;&gt;&lt;a href=&quot;#cb1-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;example ageString aliveString &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-9&quot;&gt;&lt;a href=&quot;#cb1-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; readMaybe ageString &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-10&quot;&gt;&lt;a href=&quot;#cb1-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-11&quot;&gt;&lt;a href=&quot;#cb1-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Invalid age string&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-12&quot;&gt;&lt;a href=&quot;#cb1-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-13&quot;&gt;&lt;a href=&quot;#cb1-13&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; age &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-14&quot;&gt;&lt;a href=&quot;#cb1-14&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; age &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-15&quot;&gt;&lt;a href=&quot;#cb1-15&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-16&quot;&gt;&lt;a href=&quot;#cb1-16&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;                    &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Negative age&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-17&quot;&gt;&lt;a href=&quot;#cb1-17&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-18&quot;&gt;&lt;a href=&quot;#cb1-18&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-19&quot;&gt;&lt;a href=&quot;#cb1-19&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;                    &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; readMaybe aliveString &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-20&quot;&gt;&lt;a href=&quot;#cb1-20&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;                        &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-21&quot;&gt;&lt;a href=&quot;#cb1-21&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;                            &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Invalid alive string&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-22&quot;&gt;&lt;a href=&quot;#cb1-22&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-23&quot;&gt;&lt;a href=&quot;#cb1-23&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;                        &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; alive &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-24&quot;&gt;&lt;a href=&quot;#cb1-24&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;                            &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{ age, alive }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… which we can use like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; example &lt;span class=&quot;st&quot;&gt;&amp;quot;24&amp;quot;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;True&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Right&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt; {age &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;24&lt;/span&gt;, alive &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;True&lt;/span&gt;})&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;#cb2-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-4&quot;&gt;&lt;a href=&quot;#cb2-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; example &lt;span class=&quot;st&quot;&gt;&amp;quot;24&amp;quot;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-5&quot;&gt;&lt;a href=&quot;#cb2-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Invalid alive string&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-6&quot;&gt;&lt;a href=&quot;#cb2-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-7&quot;&gt;&lt;a href=&quot;#cb2-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; example &lt;span class=&quot;st&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;True&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-8&quot;&gt;&lt;a href=&quot;#cb2-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Invalid age string&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-9&quot;&gt;&lt;a href=&quot;#cb2-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-10&quot;&gt;&lt;a href=&quot;#cb2-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; example &lt;span class=&quot;st&quot;&gt;&amp;quot;-5&amp;quot;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;True&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-11&quot;&gt;&lt;a href=&quot;#cb2-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Negative age&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice how the above coding style increases the nesting / indentation level every time we parse or validate the input in some way. We could conserve indentation by using 2-space indents or indenting only once for each level of nesting:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;{-# LANGUAGE NamedFieldPuns #-}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;#cb3-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-3&quot;&gt;&lt;a href=&quot;#cb3-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text.Read&lt;/span&gt; (readMaybe)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-4&quot;&gt;&lt;a href=&quot;#cb3-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-5&quot;&gt;&lt;a href=&quot;#cb3-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt; {&lt;span class=&quot;ot&quot;&gt; age ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;,&lt;span class=&quot;ot&quot;&gt; alive ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt; } &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-6&quot;&gt;&lt;a href=&quot;#cb3-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-7&quot;&gt;&lt;a href=&quot;#cb3-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;example ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Either&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-8&quot;&gt;&lt;a href=&quot;#cb3-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;example ageString aliveString &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; readMaybe ageString &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-9&quot;&gt;&lt;a href=&quot;#cb3-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;  &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Invalid age string&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-10&quot;&gt;&lt;a href=&quot;#cb3-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; age &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; age &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-11&quot;&gt;&lt;a href=&quot;#cb3-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Negative age&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-12&quot;&gt;&lt;a href=&quot;#cb3-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; readMaybe aliveString &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-13&quot;&gt;&lt;a href=&quot;#cb3-13&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Invalid alive string&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-14&quot;&gt;&lt;a href=&quot;#cb3-14&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; alive &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{ age, alive }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, I think most people writing code like that would prefer to keep the indentation level stable, no matter how many validations the code requires.&lt;/p&gt;&lt;h4 id=&quot;the-trick&quot;&gt;The trick&lt;/h4&gt;&lt;p&gt;Fortunately, we can avoid nesting the code with the following change:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;#cb4-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;{-# LANGUAGE NamedFieldPuns #-}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-2&quot;&gt;&lt;a href=&quot;#cb4-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-3&quot;&gt;&lt;a href=&quot;#cb4-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text.Read&lt;/span&gt; (readMaybe)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-4&quot;&gt;&lt;a href=&quot;#cb4-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-5&quot;&gt;&lt;a href=&quot;#cb4-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt; {&lt;span class=&quot;ot&quot;&gt; age ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;,&lt;span class=&quot;ot&quot;&gt; alive ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt; } &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-6&quot;&gt;&lt;a href=&quot;#cb4-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-7&quot;&gt;&lt;a href=&quot;#cb4-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;example ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Either&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-8&quot;&gt;&lt;a href=&quot;#cb4-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;example ageString aliveString &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-9&quot;&gt;&lt;a href=&quot;#cb4-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    age &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; readMaybe ageString &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-10&quot;&gt;&lt;a href=&quot;#cb4-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;  &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Invalid age string&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-11&quot;&gt;&lt;a href=&quot;#cb4-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; age &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; age&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-12&quot;&gt;&lt;a href=&quot;#cb4-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-13&quot;&gt;&lt;a href=&quot;#cb4-13&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; age &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-14&quot;&gt;&lt;a href=&quot;#cb4-14&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Negative age&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-15&quot;&gt;&lt;a href=&quot;#cb4-15&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; ()&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-16&quot;&gt;&lt;a href=&quot;#cb4-16&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-17&quot;&gt;&lt;a href=&quot;#cb4-17&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    alive &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; readMaybe aliveString &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-18&quot;&gt;&lt;a href=&quot;#cb4-18&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Invalid alive string&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-19&quot;&gt;&lt;a href=&quot;#cb4-19&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; alive &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; alive&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-20&quot;&gt;&lt;a href=&quot;#cb4-20&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-21&quot;&gt;&lt;a href=&quot;#cb4-21&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{ age, alive }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here we make use of several useful properties:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;return&lt;/code&gt; in Haskell &lt;em&gt;does not&lt;/em&gt; short-circuit or exit from the surrounding code&lt;/p&gt;&lt;p&gt;In fact, some Haskell programmers prefer to use &lt;code&gt;pure&lt;/code&gt; (a synonym for &lt;code&gt;return&lt;/code&gt;) to better convey the absence of short-circuiting behavior:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;#cb5-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;{-# LANGUAGE NamedFieldPuns #-}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-2&quot;&gt;&lt;a href=&quot;#cb5-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-3&quot;&gt;&lt;a href=&quot;#cb5-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text.Read&lt;/span&gt; (readMaybe)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-4&quot;&gt;&lt;a href=&quot;#cb5-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-5&quot;&gt;&lt;a href=&quot;#cb5-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt; {&lt;span class=&quot;ot&quot;&gt; age ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;,&lt;span class=&quot;ot&quot;&gt; alive ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt; } &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-6&quot;&gt;&lt;a href=&quot;#cb5-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-7&quot;&gt;&lt;a href=&quot;#cb5-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;example ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Either&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-8&quot;&gt;&lt;a href=&quot;#cb5-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;example ageString aliveString &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-9&quot;&gt;&lt;a href=&quot;#cb5-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    age &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; readMaybe ageString &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-10&quot;&gt;&lt;a href=&quot;#cb5-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;  &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Invalid age string&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-11&quot;&gt;&lt;a href=&quot;#cb5-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; age &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; age&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-12&quot;&gt;&lt;a href=&quot;#cb5-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-13&quot;&gt;&lt;a href=&quot;#cb5-13&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; age &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-14&quot;&gt;&lt;a href=&quot;#cb5-14&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Negative age&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-15&quot;&gt;&lt;a href=&quot;#cb5-15&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; ()&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-16&quot;&gt;&lt;a href=&quot;#cb5-16&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-17&quot;&gt;&lt;a href=&quot;#cb5-17&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    alive &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; readMaybe aliveString &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-18&quot;&gt;&lt;a href=&quot;#cb5-18&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Invalid alive string&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-19&quot;&gt;&lt;a href=&quot;#cb5-19&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; alive &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; alive&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-20&quot;&gt;&lt;a href=&quot;#cb5-20&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-21&quot;&gt;&lt;a href=&quot;#cb5-21&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{ age, alive }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;Left&lt;/code&gt; &lt;em&gt;does&lt;/em&gt; short-circuit from the surrounding code&lt;/p&gt;&lt;p&gt;In fact, we can define a synonym for &lt;code&gt;Left&lt;/code&gt; named &lt;code&gt;throw&lt;/code&gt; if we want to better convey the presence of short-circuiting behavior::&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb6&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb6-1&quot;&gt;&lt;a href=&quot;#cb6-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;{-# LANGUAGE NamedFieldPuns #-}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-2&quot;&gt;&lt;a href=&quot;#cb6-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-3&quot;&gt;&lt;a href=&quot;#cb6-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text.Read&lt;/span&gt; (readMaybe)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-4&quot;&gt;&lt;a href=&quot;#cb6-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-5&quot;&gt;&lt;a href=&quot;#cb6-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt; {&lt;span class=&quot;ot&quot;&gt; age ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;,&lt;span class=&quot;ot&quot;&gt; alive ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt; } &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-6&quot;&gt;&lt;a href=&quot;#cb6-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-7&quot;&gt;&lt;a href=&quot;#cb6-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;example ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Either&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-8&quot;&gt;&lt;a href=&quot;#cb6-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;example ageString aliveString &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-9&quot;&gt;&lt;a href=&quot;#cb6-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    age &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; readMaybe ageString &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-10&quot;&gt;&lt;a href=&quot;#cb6-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;  &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; throw &lt;span class=&quot;st&quot;&gt;&amp;quot;Invalid age string&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-11&quot;&gt;&lt;a href=&quot;#cb6-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; age &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; age&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-12&quot;&gt;&lt;a href=&quot;#cb6-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-13&quot;&gt;&lt;a href=&quot;#cb6-13&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; age &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-14&quot;&gt;&lt;a href=&quot;#cb6-14&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt; throw &lt;span class=&quot;st&quot;&gt;&amp;quot;Negative age&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-15&quot;&gt;&lt;a href=&quot;#cb6-15&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; ()&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-16&quot;&gt;&lt;a href=&quot;#cb6-16&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-17&quot;&gt;&lt;a href=&quot;#cb6-17&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    alive &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; readMaybe aliveString &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-18&quot;&gt;&lt;a href=&quot;#cb6-18&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; throw &lt;span class=&quot;st&quot;&gt;&amp;quot;Invalid alive string&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-19&quot;&gt;&lt;a href=&quot;#cb6-19&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; alive &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; alive&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-20&quot;&gt;&lt;a href=&quot;#cb6-20&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-21&quot;&gt;&lt;a href=&quot;#cb6-21&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{ age, alive }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-22&quot;&gt;&lt;a href=&quot;#cb6-22&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-23&quot;&gt;&lt;a href=&quot;#cb6-23&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;throw ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Either&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; a&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-24&quot;&gt;&lt;a href=&quot;#cb6-24&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;throw &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;Left&lt;/code&gt; / &lt;code&gt;throw&lt;/code&gt; “return” any type of value&lt;/p&gt;&lt;p&gt;If you look at the type of &lt;code&gt;throw&lt;/code&gt;, the “return” type is a polymorphic type &lt;code&gt;a&lt;/code&gt; because &lt;code&gt;throw&lt;/code&gt; short-circuits (and therefore doesn’t need to return a real value of that type).&lt;/p&gt;&lt;p&gt;This is why the type checker doesn’t complain when we do this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb7&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb7-1&quot;&gt;&lt;a href=&quot;#cb7-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;age &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; readMaybe ageString &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-2&quot;&gt;&lt;a href=&quot;#cb7-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;  &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; throw &lt;span class=&quot;st&quot;&gt;&amp;quot;Invalid age string&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-3&quot;&gt;&lt;a href=&quot;#cb7-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; age &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; age&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… because both branches of the &lt;code&gt;case&lt;/code&gt; expression type-check as an expression that “return”s an &lt;code&gt;Int&lt;/code&gt;. The left branch type-checks as a branch that returns an &lt;code&gt;Int&lt;/code&gt; because it cheats and never needs to return anything and the right branch returns a bona-fide &lt;code&gt;Int&lt;/code&gt; (the &lt;code&gt;age&lt;/code&gt;).&lt;/p&gt;&lt;p&gt;We can make this explicit by giving both branches of the &lt;code&gt;case&lt;/code&gt; expression an explicit type annotation:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb8&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb8-1&quot;&gt;&lt;a href=&quot;#cb8-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;age &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; readMaybe ageString &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-2&quot;&gt;&lt;a href=&quot;#cb8-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;  &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; throw &lt;span class=&quot;st&quot;&gt;&amp;quot;Invalid age string&amp;quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Either&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-3&quot;&gt;&lt;a href=&quot;#cb8-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; age &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; age                   ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Either&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This means that both branches of a &lt;code&gt;case&lt;/code&gt; expression will always share the same return type if at least one branch is a &lt;code&gt;Left&lt;/code&gt; / &lt;code&gt;throw&lt;/code&gt;. Similarly, both branches of an &lt;code&gt;if&lt;/code&gt; expression will share the same return type if at least one branch is a &lt;code&gt;Left&lt;/code&gt; / &lt;code&gt;throw&lt;/code&gt;:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb9&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb9-1&quot;&gt;&lt;a href=&quot;#cb9-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; age &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb9-2&quot;&gt;&lt;a href=&quot;#cb9-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt; throw &lt;span class=&quot;st&quot;&gt;&amp;quot;Negative age&amp;quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Either&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; ()&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb9-3&quot;&gt;&lt;a href=&quot;#cb9-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ()              ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Either&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; ()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;We can return a value from a &lt;code&gt;case&lt;/code&gt; expression&lt;/p&gt;&lt;p&gt;New Haskell programmers might not realize that &lt;code&gt;case&lt;/code&gt; expressions can return a value (just like any other expression), which means that their result can be stored as a new value within the surrounding scope:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb10&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb10-1&quot;&gt;&lt;a href=&quot;#cb10-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;age &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; readMaybe ageString &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-2&quot;&gt;&lt;a href=&quot;#cb10-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;  &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; throw &lt;span class=&quot;st&quot;&gt;&amp;quot;Invalid age string&amp;quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Either&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-3&quot;&gt;&lt;a href=&quot;#cb10-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; age &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; age                   ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Either&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The type-checker doesn’t mind that only the second branch returns a valid &lt;code&gt;age&lt;/code&gt; because it knows that the outer &lt;code&gt;age&lt;/code&gt; is unreachable if the first branch short-circuits. This understanding is not built into the compiler, but is rather an emergent property of how &lt;code&gt;do&lt;/code&gt; notation works for &lt;code&gt;Either&lt;/code&gt;. See the &lt;a href=&quot;#appendix&quot;&gt;Appendix&lt;/a&gt; for a fully-worked equational reasoning example showing why this works.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&quot;combinators&quot;&gt;Combinators&lt;/h4&gt;&lt;p&gt;You can build upon this trick by defining helpful utility functions to simplify things further. For example, I sometimes like to define the following helper function:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb11&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb11-1&quot;&gt;&lt;a href=&quot;#cb11-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;orDie ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Maybe&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Either&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; a&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-2&quot;&gt;&lt;a href=&quot;#cb11-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; a  &lt;span class=&quot;ot&quot;&gt;`orDie`&lt;/span&gt; _      &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; a&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-3&quot;&gt;&lt;a href=&quot;#cb11-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;`orDie`&lt;/span&gt; string &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; string&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-4&quot;&gt;&lt;a href=&quot;#cb11-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-5&quot;&gt;&lt;a href=&quot;#cb11-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;{- Equivalent, more explicit, implementation:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-6&quot;&gt;&lt;a href=&quot;#cb11-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-7&quot;&gt;&lt;a href=&quot;#cb11-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;maybe `orDie` string =&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-8&quot;&gt;&lt;a href=&quot;#cb11-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;    case maybe of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-9&quot;&gt;&lt;a href=&quot;#cb11-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;        Nothing -&amp;gt; Left string&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-10&quot;&gt;&lt;a href=&quot;#cb11-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;        Just a  -&amp;gt; return a&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-11&quot;&gt;&lt;a href=&quot;#cb11-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… which you can use like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb12&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb12-1&quot;&gt;&lt;a href=&quot;#cb12-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;{-# LANGUAGE NamedFieldPuns #-}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-2&quot;&gt;&lt;a href=&quot;#cb12-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-3&quot;&gt;&lt;a href=&quot;#cb12-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text.Read&lt;/span&gt; (readMaybe)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-4&quot;&gt;&lt;a href=&quot;#cb12-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-5&quot;&gt;&lt;a href=&quot;#cb12-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt; {&lt;span class=&quot;ot&quot;&gt; age ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;,&lt;span class=&quot;ot&quot;&gt; alive ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt; } &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-6&quot;&gt;&lt;a href=&quot;#cb12-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-7&quot;&gt;&lt;a href=&quot;#cb12-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;orDie ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Maybe&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Either&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; a&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-8&quot;&gt;&lt;a href=&quot;#cb12-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; a  &lt;span class=&quot;ot&quot;&gt;`orDie`&lt;/span&gt; _      &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Right&lt;/span&gt; a&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-9&quot;&gt;&lt;a href=&quot;#cb12-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;`orDie`&lt;/span&gt; string &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; string&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-10&quot;&gt;&lt;a href=&quot;#cb12-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-11&quot;&gt;&lt;a href=&quot;#cb12-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;example ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Either&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-12&quot;&gt;&lt;a href=&quot;#cb12-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;example ageString aliveString &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-13&quot;&gt;&lt;a href=&quot;#cb12-13&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    age &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; readMaybe ageString &lt;span class=&quot;ot&quot;&gt;`orDie`&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Invalid age string&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-14&quot;&gt;&lt;a href=&quot;#cb12-14&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-15&quot;&gt;&lt;a href=&quot;#cb12-15&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; age &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-16&quot;&gt;&lt;a href=&quot;#cb12-16&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Negative age&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-17&quot;&gt;&lt;a href=&quot;#cb12-17&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; ()&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-18&quot;&gt;&lt;a href=&quot;#cb12-18&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-19&quot;&gt;&lt;a href=&quot;#cb12-19&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    alive &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; readMaybe aliveString &lt;span class=&quot;ot&quot;&gt;`orDie`&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Invalid alive string&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-20&quot;&gt;&lt;a href=&quot;#cb12-20&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-21&quot;&gt;&lt;a href=&quot;#cb12-21&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{ age, alive }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… which is even more clear (in my opinion).&lt;/p&gt;&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;&lt;p&gt;That is the entirety of the trick. You can return values from &lt;code&gt;case&lt;/code&gt; expressions to avoid deeply-nesting your &lt;code&gt;Either&lt;/code&gt; code, or you can define utility functions (such as &lt;code&gt;orDie&lt;/code&gt;) which do essentially the same thing.&lt;/p&gt;&lt;p&gt;This trick applies equally well to any other &lt;code&gt;Monad&lt;/code&gt; that supports some notion of short-circuiting on failure, such as &lt;code&gt;ExceptT&lt;/code&gt; (from &lt;code&gt;transformers&lt;/code&gt; / &lt;code&gt;mtl&lt;/code&gt;). The only essential ingredient is some &lt;code&gt;throw&lt;/code&gt;-like function that short-circuits and therefore has a polymorphic return type.&lt;/p&gt;&lt;h4 id=&quot;appendix&quot;&gt;Appendix&lt;/h4&gt;&lt;p&gt;You can build a better intuition for why this works using &lt;a href=&quot;https://www.haskellforall.com/2013/12/equational-reasoning.html&quot;&gt;equational reasoning&lt;/a&gt;. We’ll begin from an example usage of our function and at each step of the process we will either desugar the code or substitute one subexpression with another equal subexpression.&lt;/p&gt;&lt;p&gt;In all of the examples, we’ll begin from this definition for the &lt;code&gt;example&lt;/code&gt; function:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb13&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb13-1&quot;&gt;&lt;a href=&quot;#cb13-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;example ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Either&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-2&quot;&gt;&lt;a href=&quot;#cb13-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;example ageString aliveString &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-3&quot;&gt;&lt;a href=&quot;#cb13-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    age &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; readMaybe ageString &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-4&quot;&gt;&lt;a href=&quot;#cb13-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;  &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Invalid age string&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-5&quot;&gt;&lt;a href=&quot;#cb13-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; age &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; age&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-6&quot;&gt;&lt;a href=&quot;#cb13-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-7&quot;&gt;&lt;a href=&quot;#cb13-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; age &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-8&quot;&gt;&lt;a href=&quot;#cb13-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Negative age&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-9&quot;&gt;&lt;a href=&quot;#cb13-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; ()&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-10&quot;&gt;&lt;a href=&quot;#cb13-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-11&quot;&gt;&lt;a href=&quot;#cb13-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    alive &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; readMaybe aliveString &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-12&quot;&gt;&lt;a href=&quot;#cb13-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Invalid alive string&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-13&quot;&gt;&lt;a href=&quot;#cb13-13&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; alive &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; alive&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-14&quot;&gt;&lt;a href=&quot;#cb13-14&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-15&quot;&gt;&lt;a href=&quot;#cb13-15&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{ age, alive }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let’s first begin with the example that fails the most quickly:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb14&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb14-1&quot;&gt;&lt;a href=&quot;#cb14-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;example &lt;span class=&quot;st&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;True&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-2&quot;&gt;&lt;a href=&quot;#cb14-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-3&quot;&gt;&lt;a href=&quot;#cb14-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Substitute `example` with its definition:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-4&quot;&gt;&lt;a href=&quot;#cb14-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-5&quot;&gt;&lt;a href=&quot;#cb14-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- … replacing `ageString` with `&amp;quot;&amp;quot;`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-6&quot;&gt;&lt;a href=&quot;#cb14-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-7&quot;&gt;&lt;a href=&quot;#cb14-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- … replacing `aliveString` with `&amp;quot;True&amp;quot;`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-8&quot;&gt;&lt;a href=&quot;#cb14-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;  age &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; readMaybe &lt;span class=&quot;st&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-9&quot;&gt;&lt;a href=&quot;#cb14-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;  &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Invalid age string&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-10&quot;&gt;&lt;a href=&quot;#cb14-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; age &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; age&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-11&quot;&gt;&lt;a href=&quot;#cb14-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-12&quot;&gt;&lt;a href=&quot;#cb14-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; age &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-13&quot;&gt;&lt;a href=&quot;#cb14-13&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Negative age&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-14&quot;&gt;&lt;a href=&quot;#cb14-14&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; ()&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-15&quot;&gt;&lt;a href=&quot;#cb14-15&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-16&quot;&gt;&lt;a href=&quot;#cb14-16&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    alive &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; readMaybe &lt;span class=&quot;st&quot;&gt;&amp;quot;True&amp;quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-17&quot;&gt;&lt;a href=&quot;#cb14-17&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Invalid alive string&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-18&quot;&gt;&lt;a href=&quot;#cb14-18&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; alive &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; alive&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-19&quot;&gt;&lt;a href=&quot;#cb14-19&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-20&quot;&gt;&lt;a href=&quot;#cb14-20&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{ age, alive }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-21&quot;&gt;&lt;a href=&quot;#cb14-21&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-22&quot;&gt;&lt;a href=&quot;#cb14-22&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Definition of `readMaybe` (not shown):&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-23&quot;&gt;&lt;a href=&quot;#cb14-23&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-24&quot;&gt;&lt;a href=&quot;#cb14-24&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- (readMaybe &amp;quot;&amp;quot; :: Maybe Int) = Nothing&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-25&quot;&gt;&lt;a href=&quot;#cb14-25&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;  age &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-26&quot;&gt;&lt;a href=&quot;#cb14-26&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;  &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Invalid age string&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-27&quot;&gt;&lt;a href=&quot;#cb14-27&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; age &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; age&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-28&quot;&gt;&lt;a href=&quot;#cb14-28&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-29&quot;&gt;&lt;a href=&quot;#cb14-29&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; age &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-30&quot;&gt;&lt;a href=&quot;#cb14-30&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Negative age&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-31&quot;&gt;&lt;a href=&quot;#cb14-31&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; ()&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-32&quot;&gt;&lt;a href=&quot;#cb14-32&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-33&quot;&gt;&lt;a href=&quot;#cb14-33&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    alive &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; readMaybe &lt;span class=&quot;st&quot;&gt;&amp;quot;True&amp;quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-34&quot;&gt;&lt;a href=&quot;#cb14-34&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Invalid alive string&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-35&quot;&gt;&lt;a href=&quot;#cb14-35&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; alive &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; alive&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-36&quot;&gt;&lt;a href=&quot;#cb14-36&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-37&quot;&gt;&lt;a href=&quot;#cb14-37&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{ age, alive }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-38&quot;&gt;&lt;a href=&quot;#cb14-38&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-39&quot;&gt;&lt;a href=&quot;#cb14-39&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Simplify the first `case` expression&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-40&quot;&gt;&lt;a href=&quot;#cb14-40&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;  age &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Invalid age string&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-41&quot;&gt;&lt;a href=&quot;#cb14-41&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-42&quot;&gt;&lt;a href=&quot;#cb14-42&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; age &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-43&quot;&gt;&lt;a href=&quot;#cb14-43&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Negative age&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-44&quot;&gt;&lt;a href=&quot;#cb14-44&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; ()&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-45&quot;&gt;&lt;a href=&quot;#cb14-45&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-46&quot;&gt;&lt;a href=&quot;#cb14-46&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    alive &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; readMaybe &lt;span class=&quot;st&quot;&gt;&amp;quot;True&amp;quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-47&quot;&gt;&lt;a href=&quot;#cb14-47&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Invalid alive string&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-48&quot;&gt;&lt;a href=&quot;#cb14-48&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; alive &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; alive&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-49&quot;&gt;&lt;a href=&quot;#cb14-49&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-50&quot;&gt;&lt;a href=&quot;#cb14-50&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{ age, alive }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-51&quot;&gt;&lt;a href=&quot;#cb14-51&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-52&quot;&gt;&lt;a href=&quot;#cb14-52&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Desugar `do` notation one step&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-53&quot;&gt;&lt;a href=&quot;#cb14-53&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-54&quot;&gt;&lt;a href=&quot;#cb14-54&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- (do age &amp;lt;- m; n) = (m &amp;gt;&amp;gt;= \age -&amp;gt; n)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-55&quot;&gt;&lt;a href=&quot;#cb14-55&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Invalid age string&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \age &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-56&quot;&gt;&lt;a href=&quot;#cb14-56&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; age &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-57&quot;&gt;&lt;a href=&quot;#cb14-57&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Negative age&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-58&quot;&gt;&lt;a href=&quot;#cb14-58&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; ()&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-59&quot;&gt;&lt;a href=&quot;#cb14-59&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-60&quot;&gt;&lt;a href=&quot;#cb14-60&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        alive &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; readMaybe &lt;span class=&quot;st&quot;&gt;&amp;quot;True&amp;quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-61&quot;&gt;&lt;a href=&quot;#cb14-61&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Invalid alive string&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-62&quot;&gt;&lt;a href=&quot;#cb14-62&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; alive &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; alive&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-63&quot;&gt;&lt;a href=&quot;#cb14-63&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-64&quot;&gt;&lt;a href=&quot;#cb14-64&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{ age, alive }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-65&quot;&gt;&lt;a href=&quot;#cb14-65&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-66&quot;&gt;&lt;a href=&quot;#cb14-66&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Definition of `&amp;gt;&amp;gt;=` for `Either`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-67&quot;&gt;&lt;a href=&quot;#cb14-67&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-68&quot;&gt;&lt;a href=&quot;#cb14-68&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- (Left x &amp;gt;&amp;gt;= _) = (Left x)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-69&quot;&gt;&lt;a href=&quot;#cb14-69&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Invalid age string&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… and we’re done! The key step is the last bit where we simplify &lt;code&gt;(Left … &amp;gt;&amp;gt;= _)&lt;/code&gt; to &lt;code&gt;(Left …)&lt;/code&gt;, which is how &lt;code&gt;Either&lt;/code&gt; short-circuits on failure. Because this simplification does not use the downstream code everything type-checks just fine even though we never supply a valid &lt;code&gt;age&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;For completeness, let’s also walk through the example where everything succeeds:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb15&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb15-1&quot;&gt;&lt;a href=&quot;#cb15-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;example &lt;span class=&quot;st&quot;&gt;&amp;quot;24&amp;quot;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;True&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-2&quot;&gt;&lt;a href=&quot;#cb15-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-3&quot;&gt;&lt;a href=&quot;#cb15-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Substitute `example` with its definition:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-4&quot;&gt;&lt;a href=&quot;#cb15-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-5&quot;&gt;&lt;a href=&quot;#cb15-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- … replacing `ageString` with `&amp;quot;24&amp;quot;`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-6&quot;&gt;&lt;a href=&quot;#cb15-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-7&quot;&gt;&lt;a href=&quot;#cb15-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- … replacing `aliveString` with `&amp;quot;True&amp;quot;`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-8&quot;&gt;&lt;a href=&quot;#cb15-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;  age &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; readMaybe &lt;span class=&quot;st&quot;&gt;&amp;quot;24&amp;quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-9&quot;&gt;&lt;a href=&quot;#cb15-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;  &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Invalid age string&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-10&quot;&gt;&lt;a href=&quot;#cb15-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; age &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; age&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-11&quot;&gt;&lt;a href=&quot;#cb15-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-12&quot;&gt;&lt;a href=&quot;#cb15-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; age &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-13&quot;&gt;&lt;a href=&quot;#cb15-13&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Negative age&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-14&quot;&gt;&lt;a href=&quot;#cb15-14&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; ()&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-15&quot;&gt;&lt;a href=&quot;#cb15-15&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-16&quot;&gt;&lt;a href=&quot;#cb15-16&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    alive &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; readMaybe &lt;span class=&quot;st&quot;&gt;&amp;quot;True&amp;quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-17&quot;&gt;&lt;a href=&quot;#cb15-17&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Invalid alive string&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-18&quot;&gt;&lt;a href=&quot;#cb15-18&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; alive &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; alive&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-19&quot;&gt;&lt;a href=&quot;#cb15-19&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-20&quot;&gt;&lt;a href=&quot;#cb15-20&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{ age, alive }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-21&quot;&gt;&lt;a href=&quot;#cb15-21&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-22&quot;&gt;&lt;a href=&quot;#cb15-22&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Definition of `readMaybe` (not shown):&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-23&quot;&gt;&lt;a href=&quot;#cb15-23&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-24&quot;&gt;&lt;a href=&quot;#cb15-24&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- (readMaybe &amp;quot;24&amp;quot; :: Maybe Int) = (Just 24)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-25&quot;&gt;&lt;a href=&quot;#cb15-25&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;  age &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-26&quot;&gt;&lt;a href=&quot;#cb15-26&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;  &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Invalid age string&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-27&quot;&gt;&lt;a href=&quot;#cb15-27&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; age &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; age&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-28&quot;&gt;&lt;a href=&quot;#cb15-28&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-29&quot;&gt;&lt;a href=&quot;#cb15-29&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; age &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-30&quot;&gt;&lt;a href=&quot;#cb15-30&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Negative age&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-31&quot;&gt;&lt;a href=&quot;#cb15-31&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; ()&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-32&quot;&gt;&lt;a href=&quot;#cb15-32&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-33&quot;&gt;&lt;a href=&quot;#cb15-33&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    alive &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; readMaybe &lt;span class=&quot;st&quot;&gt;&amp;quot;True&amp;quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-34&quot;&gt;&lt;a href=&quot;#cb15-34&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Invalid alive string&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-35&quot;&gt;&lt;a href=&quot;#cb15-35&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; alive &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; alive&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-36&quot;&gt;&lt;a href=&quot;#cb15-36&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-37&quot;&gt;&lt;a href=&quot;#cb15-37&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{ age, alive }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-38&quot;&gt;&lt;a href=&quot;#cb15-38&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-39&quot;&gt;&lt;a href=&quot;#cb15-39&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Simplify the first `case` expression&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-40&quot;&gt;&lt;a href=&quot;#cb15-40&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;  age &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;24&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-41&quot;&gt;&lt;a href=&quot;#cb15-41&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-42&quot;&gt;&lt;a href=&quot;#cb15-42&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; age &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-43&quot;&gt;&lt;a href=&quot;#cb15-43&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Negative age&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-44&quot;&gt;&lt;a href=&quot;#cb15-44&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; ()&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-45&quot;&gt;&lt;a href=&quot;#cb15-45&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-46&quot;&gt;&lt;a href=&quot;#cb15-46&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    alive &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; readMaybe &lt;span class=&quot;st&quot;&gt;&amp;quot;True&amp;quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-47&quot;&gt;&lt;a href=&quot;#cb15-47&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Invalid alive string&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-48&quot;&gt;&lt;a href=&quot;#cb15-48&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; alive &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; alive&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-49&quot;&gt;&lt;a href=&quot;#cb15-49&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-50&quot;&gt;&lt;a href=&quot;#cb15-50&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{ age, alive }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-51&quot;&gt;&lt;a href=&quot;#cb15-51&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-52&quot;&gt;&lt;a href=&quot;#cb15-52&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- return = Right&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-53&quot;&gt;&lt;a href=&quot;#cb15-53&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;  age &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Right&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;24&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-54&quot;&gt;&lt;a href=&quot;#cb15-54&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-55&quot;&gt;&lt;a href=&quot;#cb15-55&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; age &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-56&quot;&gt;&lt;a href=&quot;#cb15-56&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Negative age&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-57&quot;&gt;&lt;a href=&quot;#cb15-57&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; ()&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-58&quot;&gt;&lt;a href=&quot;#cb15-58&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-59&quot;&gt;&lt;a href=&quot;#cb15-59&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    alive &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; readMaybe &lt;span class=&quot;st&quot;&gt;&amp;quot;True&amp;quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-60&quot;&gt;&lt;a href=&quot;#cb15-60&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Invalid alive string&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-61&quot;&gt;&lt;a href=&quot;#cb15-61&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; alive &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; alive&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-62&quot;&gt;&lt;a href=&quot;#cb15-62&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-63&quot;&gt;&lt;a href=&quot;#cb15-63&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{ age, alive }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-64&quot;&gt;&lt;a href=&quot;#cb15-64&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-65&quot;&gt;&lt;a href=&quot;#cb15-65&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Desugar `do` notation one step&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-66&quot;&gt;&lt;a href=&quot;#cb15-66&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-67&quot;&gt;&lt;a href=&quot;#cb15-67&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- (do age &amp;lt;- m; n) = (m &amp;gt;&amp;gt;= \age -&amp;gt; n)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-68&quot;&gt;&lt;a href=&quot;#cb15-68&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Right&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \age &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-69&quot;&gt;&lt;a href=&quot;#cb15-69&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; age &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-70&quot;&gt;&lt;a href=&quot;#cb15-70&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Negative age&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-71&quot;&gt;&lt;a href=&quot;#cb15-71&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; ()&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-72&quot;&gt;&lt;a href=&quot;#cb15-72&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-73&quot;&gt;&lt;a href=&quot;#cb15-73&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        alive &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; readMaybe &lt;span class=&quot;st&quot;&gt;&amp;quot;True&amp;quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-74&quot;&gt;&lt;a href=&quot;#cb15-74&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Invalid alive string&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-75&quot;&gt;&lt;a href=&quot;#cb15-75&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; alive &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; alive&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-76&quot;&gt;&lt;a href=&quot;#cb15-76&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-77&quot;&gt;&lt;a href=&quot;#cb15-77&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{ age, alive }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-78&quot;&gt;&lt;a href=&quot;#cb15-78&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-79&quot;&gt;&lt;a href=&quot;#cb15-79&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Definition of `&amp;gt;&amp;gt;=` for `Either`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-80&quot;&gt;&lt;a href=&quot;#cb15-80&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-81&quot;&gt;&lt;a href=&quot;#cb15-81&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- (Right x &amp;gt;&amp;gt;= f) = (f x)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-82&quot;&gt;&lt;a href=&quot;#cb15-82&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-83&quot;&gt;&lt;a href=&quot;#cb15-83&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- This means that we substitute `age` with `24`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-84&quot;&gt;&lt;a href=&quot;#cb15-84&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-85&quot;&gt;&lt;a href=&quot;#cb15-85&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Negative age&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-86&quot;&gt;&lt;a href=&quot;#cb15-86&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; ()&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-87&quot;&gt;&lt;a href=&quot;#cb15-87&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-88&quot;&gt;&lt;a href=&quot;#cb15-88&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    alive &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; readMaybe &lt;span class=&quot;st&quot;&gt;&amp;quot;True&amp;quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-89&quot;&gt;&lt;a href=&quot;#cb15-89&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Invalid alive string&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-90&quot;&gt;&lt;a href=&quot;#cb15-90&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; alive &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; alive&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-91&quot;&gt;&lt;a href=&quot;#cb15-91&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-92&quot;&gt;&lt;a href=&quot;#cb15-92&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{ age &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;24&lt;/span&gt;, alive }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-93&quot;&gt;&lt;a href=&quot;#cb15-93&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-94&quot;&gt;&lt;a href=&quot;#cb15-94&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- (24 &amp;lt; 0) = False&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-95&quot;&gt;&lt;a href=&quot;#cb15-95&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-96&quot;&gt;&lt;a href=&quot;#cb15-96&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Negative age&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-97&quot;&gt;&lt;a href=&quot;#cb15-97&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; ()&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-98&quot;&gt;&lt;a href=&quot;#cb15-98&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-99&quot;&gt;&lt;a href=&quot;#cb15-99&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    alive &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; readMaybe &lt;span class=&quot;st&quot;&gt;&amp;quot;True&amp;quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-100&quot;&gt;&lt;a href=&quot;#cb15-100&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Invalid alive string&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-101&quot;&gt;&lt;a href=&quot;#cb15-101&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; alive &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; alive&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-102&quot;&gt;&lt;a href=&quot;#cb15-102&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-103&quot;&gt;&lt;a href=&quot;#cb15-103&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{ age &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;24&lt;/span&gt;, alive }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-104&quot;&gt;&lt;a href=&quot;#cb15-104&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-105&quot;&gt;&lt;a href=&quot;#cb15-105&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- (if False then l else r) = r&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-106&quot;&gt;&lt;a href=&quot;#cb15-106&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; ()&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-107&quot;&gt;&lt;a href=&quot;#cb15-107&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-108&quot;&gt;&lt;a href=&quot;#cb15-108&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    alive &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; readMaybe &lt;span class=&quot;st&quot;&gt;&amp;quot;True&amp;quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-109&quot;&gt;&lt;a href=&quot;#cb15-109&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Invalid alive string&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-110&quot;&gt;&lt;a href=&quot;#cb15-110&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; alive &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; alive&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-111&quot;&gt;&lt;a href=&quot;#cb15-111&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-112&quot;&gt;&lt;a href=&quot;#cb15-112&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{ age &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;24&lt;/span&gt;, alive }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-113&quot;&gt;&lt;a href=&quot;#cb15-113&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-114&quot;&gt;&lt;a href=&quot;#cb15-114&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- return = Right&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-115&quot;&gt;&lt;a href=&quot;#cb15-115&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;  &lt;span class=&quot;dt&quot;&gt;Right&lt;/span&gt; ()&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-116&quot;&gt;&lt;a href=&quot;#cb15-116&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-117&quot;&gt;&lt;a href=&quot;#cb15-117&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    alive &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; readMaybe &lt;span class=&quot;st&quot;&gt;&amp;quot;True&amp;quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-118&quot;&gt;&lt;a href=&quot;#cb15-118&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Invalid alive string&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-119&quot;&gt;&lt;a href=&quot;#cb15-119&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; alive &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; alive&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-120&quot;&gt;&lt;a href=&quot;#cb15-120&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-121&quot;&gt;&lt;a href=&quot;#cb15-121&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{ age &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;24&lt;/span&gt;, alive }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-122&quot;&gt;&lt;a href=&quot;#cb15-122&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-123&quot;&gt;&lt;a href=&quot;#cb15-123&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- (do m; n) = (do _ &amp;lt;- m; n)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-124&quot;&gt;&lt;a href=&quot;#cb15-124&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;  _ &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Right&lt;/span&gt; ()&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-125&quot;&gt;&lt;a href=&quot;#cb15-125&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-126&quot;&gt;&lt;a href=&quot;#cb15-126&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    alive &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; readMaybe &lt;span class=&quot;st&quot;&gt;&amp;quot;True&amp;quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-127&quot;&gt;&lt;a href=&quot;#cb15-127&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Invalid alive string&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-128&quot;&gt;&lt;a href=&quot;#cb15-128&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; alive &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; alive&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-129&quot;&gt;&lt;a href=&quot;#cb15-129&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-130&quot;&gt;&lt;a href=&quot;#cb15-130&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{ age &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;24&lt;/span&gt;, alive }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-131&quot;&gt;&lt;a href=&quot;#cb15-131&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-132&quot;&gt;&lt;a href=&quot;#cb15-132&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Desugar `do` notation one step&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-133&quot;&gt;&lt;a href=&quot;#cb15-133&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-134&quot;&gt;&lt;a href=&quot;#cb15-134&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- (do age &amp;lt;- m; n) = (m &amp;gt;&amp;gt;= \age -&amp;gt; n)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-135&quot;&gt;&lt;a href=&quot;#cb15-135&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Right&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; _ &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-136&quot;&gt;&lt;a href=&quot;#cb15-136&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;  alive &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; readMaybe &lt;span class=&quot;st&quot;&gt;&amp;quot;True&amp;quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-137&quot;&gt;&lt;a href=&quot;#cb15-137&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Invalid alive string&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-138&quot;&gt;&lt;a href=&quot;#cb15-138&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; alive &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; alive&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-139&quot;&gt;&lt;a href=&quot;#cb15-139&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-140&quot;&gt;&lt;a href=&quot;#cb15-140&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{ age &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;24&lt;/span&gt;, alive }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-141&quot;&gt;&lt;a href=&quot;#cb15-141&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-142&quot;&gt;&lt;a href=&quot;#cb15-142&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Definition of `&amp;gt;&amp;gt;=` for `Either`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-143&quot;&gt;&lt;a href=&quot;#cb15-143&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-144&quot;&gt;&lt;a href=&quot;#cb15-144&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- (Right x &amp;gt;&amp;gt;= f) = (f x)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-145&quot;&gt;&lt;a href=&quot;#cb15-145&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-146&quot;&gt;&lt;a href=&quot;#cb15-146&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- This means that we substitute `_` (unused) with `()`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-147&quot;&gt;&lt;a href=&quot;#cb15-147&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;  alive &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; readMaybe &lt;span class=&quot;st&quot;&gt;&amp;quot;True&amp;quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-148&quot;&gt;&lt;a href=&quot;#cb15-148&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Invalid alive string&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-149&quot;&gt;&lt;a href=&quot;#cb15-149&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; alive &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; alive&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-150&quot;&gt;&lt;a href=&quot;#cb15-150&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-151&quot;&gt;&lt;a href=&quot;#cb15-151&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{ age &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;24&lt;/span&gt;, alive }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-152&quot;&gt;&lt;a href=&quot;#cb15-152&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-153&quot;&gt;&lt;a href=&quot;#cb15-153&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Definition of `readMaybe` (not shown):&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-154&quot;&gt;&lt;a href=&quot;#cb15-154&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-155&quot;&gt;&lt;a href=&quot;#cb15-155&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- (readMaybe &amp;quot;True&amp;quot; :: Maybe Bool) = (Just True)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-156&quot;&gt;&lt;a href=&quot;#cb15-156&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;  alive &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-157&quot;&gt;&lt;a href=&quot;#cb15-157&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Invalid alive string&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-158&quot;&gt;&lt;a href=&quot;#cb15-158&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; alive &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; alive&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-159&quot;&gt;&lt;a href=&quot;#cb15-159&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-160&quot;&gt;&lt;a href=&quot;#cb15-160&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{ age &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;24&lt;/span&gt;, alive }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-161&quot;&gt;&lt;a href=&quot;#cb15-161&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-162&quot;&gt;&lt;a href=&quot;#cb15-162&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Simplify the `case` expression&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-163&quot;&gt;&lt;a href=&quot;#cb15-163&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;  alive &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-164&quot;&gt;&lt;a href=&quot;#cb15-164&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-165&quot;&gt;&lt;a href=&quot;#cb15-165&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{ age &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;24&lt;/span&gt;, alive }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-166&quot;&gt;&lt;a href=&quot;#cb15-166&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-167&quot;&gt;&lt;a href=&quot;#cb15-167&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- return = Right&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-168&quot;&gt;&lt;a href=&quot;#cb15-168&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;  alive &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Right&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-169&quot;&gt;&lt;a href=&quot;#cb15-169&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-170&quot;&gt;&lt;a href=&quot;#cb15-170&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{ age &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;24&lt;/span&gt;, alive }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-171&quot;&gt;&lt;a href=&quot;#cb15-171&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-172&quot;&gt;&lt;a href=&quot;#cb15-172&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Desugar `do` notation one step&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-173&quot;&gt;&lt;a href=&quot;#cb15-173&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-174&quot;&gt;&lt;a href=&quot;#cb15-174&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- (do age &amp;lt;- m; n) = (m &amp;gt;&amp;gt;= \age -&amp;gt; n)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-175&quot;&gt;&lt;a href=&quot;#cb15-175&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Right&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \alive &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-176&quot;&gt;&lt;a href=&quot;#cb15-176&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{ age &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;24&lt;/span&gt;, alive }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-177&quot;&gt;&lt;a href=&quot;#cb15-177&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-178&quot;&gt;&lt;a href=&quot;#cb15-178&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Definition of `&amp;gt;&amp;gt;=` for `Either`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-179&quot;&gt;&lt;a href=&quot;#cb15-179&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-180&quot;&gt;&lt;a href=&quot;#cb15-180&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- (Right x &amp;gt;&amp;gt;= f) = (f x)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-181&quot;&gt;&lt;a href=&quot;#cb15-181&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-182&quot;&gt;&lt;a href=&quot;#cb15-182&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- This means that we substitute `alive` with `True`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-183&quot;&gt;&lt;a href=&quot;#cb15-183&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{ age &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;24&lt;/span&gt;, alive &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;True&lt;/span&gt; }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-184&quot;&gt;&lt;a href=&quot;#cb15-184&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-185&quot;&gt;&lt;a href=&quot;#cb15-185&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Desugar `do` notation&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-186&quot;&gt;&lt;a href=&quot;#cb15-186&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-187&quot;&gt;&lt;a href=&quot;#cb15-187&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- do m = m&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-188&quot;&gt;&lt;a href=&quot;#cb15-188&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{ age &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;24&lt;/span&gt;, alive &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;True&lt;/span&gt; }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-189&quot;&gt;&lt;a href=&quot;#cb15-189&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-190&quot;&gt;&lt;a href=&quot;#cb15-190&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- return = Right&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-191&quot;&gt;&lt;a href=&quot;#cb15-191&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Right&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{ age &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;24&lt;/span&gt;, alive &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;True&lt;/span&gt; }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As an exercise, you can try to extrapolate between those two examples to reason through what happens when we evaluate the remaining two examples which fail somewhere in between:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb16&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb16-1&quot;&gt;&lt;a href=&quot;#cb16-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; example &lt;span class=&quot;st&quot;&gt;&amp;quot;24&amp;quot;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb16-2&quot;&gt;&lt;a href=&quot;#cb16-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb16-3&quot;&gt;&lt;a href=&quot;#cb16-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; example &lt;span class=&quot;st&quot;&gt;&amp;quot;-5&amp;quot;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;True&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</content><link rel="replies" type="application/atom+xml" href="https://www.haskellforall.com/feeds/5207997287285777304/comments/default" title="Post Comments"><link rel="replies" type="text/html" href="https://www.haskellforall.com/2021/05/the-trick-to-avoid-deeply-nested-error.html#comment-form" title="4 Comments"><link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/5207997287285777304"><link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/5207997287285777304"><link rel="alternate" type="text/html" href="https://www.haskellforall.com/2021/05/the-trick-to-avoid-deeply-nested-error.html" title="The trick to avoid deeply-nested error-handling code"><author><name>Gabriel Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/></author><thr:total>4</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-4658684348940366742</id><published>2021-04-21T08:55:00.002-07:00</published><updated>2021-04-21T08:58:01.026-07:00</updated><title type="text">The end of history for programming</title><content type="html">&lt;!DOCTYPE html&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;utf-8&quot; /&gt;  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;  &lt;title&gt;history&lt;/title&gt;  &lt;style&gt;    html {       line-height: 1.5;       font-family: Georgia, serif;       font-size: 20px;       color: #1a1a1a;       background-color: #fdfdfd;     }     body {       margin: 0 auto;       max-width: 36em;       padding-left: 50px;       padding-right: 50px;       padding-top: 50px;       padding-bottom: 50px;       hyphens: auto;       word-wrap: break-word;       text-rendering: optimizeLegibility;       font-kerning: normal;     }     @media (max-width: 600px) {       body {         font-size: 0.9em;         padding: 1em;       }     }     @media print {       body {         background-color: transparent;         color: black;         font-size: 12pt;       }       p, h2, h3 {         orphans: 3;         widows: 3;       }       h2, h3, h4 {         page-break-after: avoid;       }     }     p {       margin: 1em 0;     }     /*     a {       color: #1a1a1a;     }     a:visited {       color: #1a1a1a;     }     */     img {       max-width: 100%;     }     h1, h2, h3, h4, h5, h6 {       margin-top: 1.4em;     }     h5, h6 {       font-size: 1em;       font-style: italic;     }     h6 {       font-weight: normal;     }     ol, ul {       padding-left: 1.7em;       margin-top: 1em;     }     li &gt; ol, li &gt; ul {       margin-top: 0;     }     blockquote {       margin: 1em 0 1em 1.7em;       padding-left: 1em;       border-left: 2px solid #e6e6e6;       color: #606060;     }     code {       font-family: Menlo, Monaco, 'Lucida Console', Consolas, monospace;       font-size: 85%;       margin: 0;     }     pre {       margin: 1em 0;       overflow: auto;     }     pre code {       padding: 0;       overflow: visible;     }     .sourceCode {      background-color: transparent;      overflow: visible;     }     hr {       background-color: #1a1a1a;       border: none;       height: 1px;       margin: 1em 0;     }     table {       margin: 1em 0;       border-collapse: collapse;       width: 100%;       overflow-x: auto;       display: block;       font-variant-numeric: lining-nums tabular-nums;     }     table caption {       margin-bottom: 0.75em;     }     tbody {       margin-top: 0.5em;       border-top: 1px solid #1a1a1a;       border-bottom: 1px solid #1a1a1a;     }     th {       border-top: 1px solid #1a1a1a;       padding: 0.25em 0.5em 0.25em 0.5em;     }     td {       padding: 0.125em 0.5em 0.25em 0.5em;     }     header {       margin-bottom: 4em;       text-align: center;     }     #TOC li {       list-style: none;     }     #TOC a:not(:hover) {       text-decoration: none;     }     code{white-space: pre-wrap;}     span.smallcaps{font-variant: small-caps;}     span.underline{text-decoration: underline;}     div.column{display: inline-block; vertical-align: top; width: 50%;}     div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}     ul.task-list{list-style: none;}     pre &gt; code.sourceCode { white-space: pre; position: relative; }     pre &gt; code.sourceCode &gt; span { display: inline-block; line-height: 1.25; }     pre &gt; code.sourceCode &gt; span:empty { height: 1.2em; }     .sourceCode { overflow: visible; }     code.sourceCode &gt; span { color: inherit; text-decoration: inherit; }     div.sourceCode { margin: 1em 0; }     pre.sourceCode { margin: 0; }     @media screen {     div.sourceCode { overflow: auto; }     }     @media print {     pre &gt; code.sourceCode { white-space: pre-wrap; }     pre &gt; code.sourceCode &gt; span { text-indent: -5em; padding-left: 5em; }     }     pre.numberSource code       { counter-reset: source-line 0; }     pre.numberSource code &gt; span       { position: relative; left: -4em; counter-increment: source-line; }     pre.numberSource code &gt; span &gt; a:first-child::before       { content: counter(source-line);         position: relative; left: -1em; text-align: right; vertical-align: baseline;         border: none; display: inline-block;         -webkit-touch-callout: none; -webkit-user-select: none;         -khtml-user-select: none; -moz-user-select: none;         -ms-user-select: none; user-select: none;         padding: 0 4px; width: 4em;         color: #aaaaaa;       }     pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }     div.sourceCode       {   }     @media screen {     pre &gt; code.sourceCode &gt; span &gt; a:first-child::before { text-decoration: underline; }     }     code span.al { color: #ff0000; font-weight: bold; } /* Alert */     code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */     code span.at { color: #7d9029; } /* Attribute */     code span.bn { color: #40a070; } /* BaseN */     code span.bu { } /* BuiltIn */     code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */     code span.ch { color: #4070a0; } /* Char */     code span.cn { color: #880000; } /* Constant */     code span.co { color: #60a0b0; font-style: italic; } /* Comment */     code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */     code span.do { color: #ba2121; font-style: italic; } /* Documentation */     code span.dt { color: #902000; } /* DataType */     code span.dv { color: #40a070; } /* DecVal */     code span.er { color: #ff0000; font-weight: bold; } /* Error */     code span.ex { } /* Extension */     code span.fl { color: #40a070; } /* Float */     code span.fu { color: #06287e; } /* Function */     code span.im { } /* Import */     code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */     code span.kw { color: #007020; font-weight: bold; } /* Keyword */     code span.op { color: #666666; } /* Operator */     code span.ot { color: #007020; } /* Other */     code span.pp { color: #bc7a00; } /* Preprocessor */     code span.sc { color: #4070a0; } /* SpecialChar */     code span.ss { color: #bb6688; } /* SpecialString */     code span.st { color: #4070a0; } /* String */     code span.va { color: #19177c; } /* Variable */     code span.vs { color: #4070a0; } /* VerbatimString */     code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */     .display.math{display: block; text-align: center; margin: 0.5rem auto;}   &lt;/style&gt;  &lt;!--[if lt IE 9]&gt;    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;  &lt;![endif]--&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;I spend quite a bit of time thinking about what the &lt;a href=&quot;https://en.wikipedia.org/wiki/End_of_history&quot;&gt;end of history&lt;/a&gt; for programming might look like. By the “end of history” I mean the point beyond which programming paradigms would not evolve significantly.&lt;/p&gt;&lt;p&gt;I care about programming’s “destiny” because I prefer to work on open source projects that bring us closer to that final programming paradigm. In my experience, this sort of work has greater longevity, higher impact, and helps move the whole field of programming forward.&lt;/p&gt;&lt;p&gt;So what would the end of history look like for programming? Is it:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;… already here?&lt;/p&gt;&lt;p&gt;Some people treat programming as a solved problem and view all new languages and paradigms as reskins of old languages or paradigms. From their point of view all that remains is to refine our craft by slowly optimizing things, weeding out bugs or addressing non-technical issues like people management or funding.&lt;/p&gt;&lt;p&gt;I personally do not subscribe to this philosophy because I believe, at a very minimum, that functional programming paradigms will slowly displace object-oriented and imperative programming paradigms (although functional programming might not necessarily be the final programming paradigm).&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;… artificial intelligence?&lt;/p&gt;&lt;p&gt;Maybe machines will translate our natural language instructions into code for us, relieving us of the burden of precisely communicating our intent. Or maybe some sufficiently smart AI-powered IDE will auto-complete most of our program for us.&lt;/p&gt;&lt;p&gt;I don’t believe this either, and I think Dijkstra did an excellent job of dismantling this line of reasoning in his essay: &lt;a href=&quot;https://www.cs.utexas.edu/users/EWD/transcriptions/EWD06xx/EWD667.html&quot;&gt;On the foolishness of “natural language programming”&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Truthfully, I’m not certain what is the correct answer, but I’ll present my own guess for what the end of history for programming looks like.&lt;/p&gt;&lt;h4 id=&quot;mathematical-dsls&quot;&gt;Mathematical DSLs&lt;/h4&gt;&lt;p&gt;My view is that the next logical step for programming is to split into two non-overlapping programming domains:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;runtime building for …&lt;/li&gt;&lt;li&gt;… mathematical programming languages&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Specifically, I expect programming languages to evolve to become more mathematical in nature where the programs users author to communicate their intent resemble pure mathematical expressions.&lt;/p&gt;&lt;p&gt;For example, consider the following mathematical specifications of the boolean logical “and” operator and the function composition operator:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;True&lt;/span&gt;  &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; x     &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; x&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;x     &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;True&lt;/span&gt;  &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; x&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;#cb1-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-4&quot;&gt;&lt;a href=&quot;#cb1-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-5&quot;&gt;&lt;a href=&quot;#cb1-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;(f &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; g)(x) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; f(g(x))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;These mathematical specifications are also executable Haskell code (albeit with extra parentheses to resemble mainstream function syntax). Haskell is one example of a programming language where the code aspires to resemble pure mathematical expressions and definitions.&lt;/p&gt;&lt;p&gt;Any language presenting such an idealized mathematical interface requires introducing a significant amount of complexity “under the hood” since the real world is messy. This is where runtime building comes into play to gloss over such ugly details.&lt;/p&gt;&lt;p&gt;In other words, I’m predicting that the end of history for programming is to become an interface bridging pure mathematical expressions to the real world.&lt;/p&gt;&lt;h4 id=&quot;the-past-and-present&quot;&gt;The past and present&lt;/h4&gt;&lt;p&gt;Let me give a few examples of where this trend towards mathematical userland code is already playing out:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Memory management&lt;/p&gt;&lt;p&gt;Manual memory management used to be a “userland” concern for most programming languages, but the general trend for new languages is automatic memory management (with the exception of Rust). Memory management used to be an explicit side effect that programmers had to care about and pushing memory management down into the runtime (via garbage collection or other methods) has made programming languages more pure, allowing them to get one step closer to idealized mathematical expressions.&lt;/p&gt;&lt;p&gt;Indeed, Rust is the exception that proves the rule, as Rust is widely viewed as better suited for building runtimes rather than being used for high-level specification of intent.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Functional programming (especially purely functional programming)&lt;/p&gt;&lt;p&gt;Functional programming is a large step towards programming in a more mathematical style that prefers:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;expressions over statements&lt;/li&gt;&lt;li&gt;pure functions over side effects&lt;/li&gt;&lt;li&gt;algebraic datatypes over objects&lt;/li&gt;&lt;li&gt;recursion over loops&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I cover this in more detail in &lt;a href=&quot;https://www.haskellforall.com/2020/10/why-i-prefer-functional-programming.html&quot;&gt;Why I prefer functional programming&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;However, functional programming is not a free win. Supporting higher-order functions and closures efficiently isn’t easy (especially for compiled languages), which is why less sophisticated language implementations tend to be more imperative and less functional.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Evaluation order (especially laziness)&lt;/p&gt;&lt;p&gt;I’ve always felt that “lazy evaluation” doesn’t do a good job of selling the benefits of Haskell’s evaluation model. I prefer to think of Haskell as having “automatic evaluation management”&lt;a href=&quot;#fn1&quot; class=&quot;footnote-ref&quot; id=&quot;fnref1&quot; role=&quot;doc-noteref&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;. In other words, the programmer specifies the expressions as a graph of dependent computations and the runtime figures out the most efficient order in which to reduce the graph.&lt;/p&gt;&lt;p&gt;This is yet another example of where we push something that used to be a userland concern (order of evaluation) into the runtime. Glossing over evaluation order frees us to specify things in a more mathematical style, because in mathematics the evaluation order is similarly irrelevant.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&quot;the-present-and-future&quot;&gt;The present and future&lt;/h4&gt;&lt;p&gt;A common pattern emerges when we study the above trends:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Push a userland concern into a runtime concern, which:&lt;/li&gt;&lt;li&gt;… makes programs more closely resemble pure mathematical expressions, and:&lt;/li&gt;&lt;li&gt;… significantly increases the complexity of the runtime.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;You might wonder: what are some other userland concerns that might eventually get pushed into runtime concerns in the near future? Some examples I can think of are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Package management&lt;/p&gt;&lt;p&gt;This one is so near in the future that it’s already happening (see: Nix and Dhall). Both languages provide built-in support for fetching code, rather than handling packages out-of-band using a standalone package management tool. This language-level support allows programs to embed external code as if it were a pure sub-expression, more closely approximating the mathematical ideal.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Error handling&lt;/p&gt;&lt;p&gt;This one requires more explanation: I view type systems as the logical conclusion of pushing error handling into the “runtime” (actually, into the type-checker, not the runtime, to be pedantic). Dhall is an example of a language that takes this idea to the extreme: Dhall has no userland support for raising or catching errors because all errors are type errors&lt;a href=&quot;#fn2&quot; class=&quot;footnote-ref&quot; id=&quot;fnref2&quot; role=&quot;doc-noteref&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Advances in &lt;a href=&quot;https://en.wikipedia.org/wiki/Dependent_type&quot;&gt;dependently-typed&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Total_functional_programming&quot;&gt;total&lt;/a&gt; functional programming languages get us closer to this ideal of pushing error handling into a runtime concern.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Logging&lt;/p&gt;&lt;p&gt;I’m actually surprised that language support for pervasively logging everything hasn’t been done already (or maybe it has happened and I missed it). It seems like a pretty mundane thing languages could implement, especially for application domains that are not performance-sensitive.&lt;/p&gt;&lt;p&gt;Many languages already support profiling, and it seems like it wouldn’t be a big leap to turn profiling support into logging support if the user is willing to spend their performance budget on logging.&lt;/p&gt;&lt;p&gt;Logging is one of those classic side effects that is an ugly detail that “ruins” code that would have otherwise been pure and mathematical.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Services&lt;/p&gt;&lt;p&gt;Service-oriented architectures are another thing that tends to get in the way of writing pure side-effect-free code.&lt;/p&gt;&lt;p&gt;I’m not exactly sure what a service-oriented language runtime would look like, but I don’t think current “serverless” solutions are what I have in mind. Something like AWS Lambda is still too low-level to promote code that is mathematical in nature. Like, if any part of the programming process involves using a separate tool to deploy or manage the serverless code then that is a significant departure from authoring pure mathematical expressions. There needs to be something like a “Nix or Dhall for serverless code”.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;&lt;p&gt;You might criticize my prediction by claiming that it’s not falsifiable. It seems like I could explain away any new development in programming as falling into the runtime building or mathematical expression category.&lt;/p&gt;&lt;p&gt;That’s why I’d like to stress a key pillar of the prediction: runtimes and mathematical expressions will become more sharply divided over time. This is the actual substance of the prediction and we can infer a few corrolaries from that prediction.&lt;/p&gt;&lt;p&gt;Currently, many mainstream programming paradigms and engineering organizations conflate the two responsibilities, so you end up with people authoring software projects that mix operational logic (runtime concerns) and “business logic” (mathematical intent).&lt;/p&gt;&lt;p&gt;What I predict will happen is that the field of engineering will begin to generate a sharp demand for people with experience in programming language theory or programming language engineering. These people will be responsible for building special-purpose languages and runtimes that abstract away as many operational concerns as possible to support pure mathematical domain-specific languages for their respective enterprise. These languages will in turn be used by a separate group of people whose aim is to translate human intent into mathematical expressions.&lt;/p&gt;&lt;p&gt;One consequence of this prediction is that you’ll begin to see a &lt;a href=&quot;https://en.wikipedia.org/wiki/Cambrian_explosion&quot;&gt;Cambrian explosion&lt;/a&gt; of programming languages in the near future. Naturally as language engineers push more operational concerns into the runtime they will need to more closely tailor the runtime to specific purposes or organizational needs rather than trying to author a general-purpose language. In other words, there will be a marked fragmentation of language runtimes (and type-checkers) as each new language adapts to their respective niche.&lt;/p&gt;&lt;p&gt;Despite runtime fragmentation, you will see the opposite trend in userland code: programs authored in these disparate languages will begin to more closely resemble one another as they become more mathematical in nature. In a sense, mathematical expressions will become the portable “lingua franca” of userland code, especially as non-mathematical concerns get pushed into each respective language’s runtime.&lt;/p&gt;&lt;p&gt;That is a prediction that is much easier to falsify.&lt;/p&gt;&lt;p&gt;Also, if you like this post then you will probably also enjoy the seminal paper: &lt;a href=&quot;https://www.cs.cmu.edu/~crary/819-f09/Landin66.pdf&quot;&gt;The Next 700 Programming Languages&lt;/a&gt;.&lt;/p&gt;&lt;section class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li id=&quot;fn1&quot; role=&quot;doc-endnote&quot;&gt;&lt;p&gt;Also, this interpretation is not that far from the truth as the Haskell standard only specifies a non-strict evaluation strategy. GHC is lazy, but Haskell the language standard does not require implementations to be lazy. For more details, see: &lt;a href=&quot;https://wiki.haskell.org/Lazy_vs._non-strict&quot;&gt;Lazy vs. non-strict&lt;/a&gt;&lt;a href=&quot;#fnref1&quot; class=&quot;footnote-back&quot; role=&quot;doc-backlink&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li id=&quot;fn2&quot; role=&quot;doc-endnote&quot;&gt;&lt;p&gt;Okay, this is a bit of an over-simplification because Dhall has support for &lt;code&gt;Optional&lt;/code&gt; values and you can model errors using unions in Dhall, but they are not commonly used in this way and idiomatically most Dhall code in the wild uses the type-checker to catch errors. Dhall is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Total_functional_programming&quot;&gt;total functional programming language&lt;/a&gt; and the language goes to significant lengths to discourage runtime errors, like forbidding comparing &lt;code&gt;Text&lt;/code&gt; values for equality. Also, the language is technically dependently typed and supports testing arbitrary code at type-checking time to catch errors statically.&lt;a href=&quot;#fnref2&quot; class=&quot;footnote-back&quot; role=&quot;doc-backlink&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/section&gt;&lt;/body&gt;&lt;/html&gt;</content><link rel="replies" type="application/atom+xml" href="https://www.haskellforall.com/feeds/4658684348940366742/comments/default" title="Post Comments"><link rel="replies" type="text/html" href="https://www.haskellforall.com/2021/04/the-end-of-history-for-programming.html#comment-form" title="8 Comments"><link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/4658684348940366742"><link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/4658684348940366742"><link rel="alternate" type="text/html" href="https://www.haskellforall.com/2021/04/the-end-of-history-for-programming.html" title="The end of history for programming"><author><name>Gabriel Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/></author><thr:total>8</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-8974576498304916431</id><published>2021-04-08T08:52:00.001-07:00</published><updated>2021-04-08T08:54:01.843-07:00</updated><title type="text">How to replace Proxy with AllowAmbiguousTypes</title><content type="html">&lt;!DOCTYPE html&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;utf-8&quot; /&gt;  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;  &lt;title&gt;no-proxy&lt;/title&gt;  &lt;style&gt;    code{white-space: pre-wrap;}     span.smallcaps{font-variant: small-caps;}     span.underline{text-decoration: underline;}     div.column{display: inline-block; vertical-align: top; width: 50%;}     div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}     ul.task-list{list-style: none;}     pre &gt; code.sourceCode { white-space: pre; position: relative; }     pre &gt; code.sourceCode &gt; span { display: inline-block; line-height: 1.25; }     pre &gt; code.sourceCode &gt; span:empty { height: 1.2em; }     code.sourceCode &gt; span { color: inherit; text-decoration: inherit; }     div.sourceCode { margin: 1em 0; }     pre.sourceCode { margin: 0; }     @media screen {     div.sourceCode { overflow: auto; }     }     @media print {     pre &gt; code.sourceCode { white-space: pre-wrap; }     pre &gt; code.sourceCode &gt; span { text-indent: -5em; padding-left: 5em; }     }     pre.numberSource code       { counter-reset: source-line 0; }     pre.numberSource code &gt; span       { position: relative; left: -4em; counter-increment: source-line; }     pre.numberSource code &gt; span &gt; a:first-child::before       { content: counter(source-line);         position: relative; left: -1em; text-align: right; vertical-align: baseline;         border: none; display: inline-block;         -webkit-touch-callout: none; -webkit-user-select: none;         -khtml-user-select: none; -moz-user-select: none;         -ms-user-select: none; user-select: none;         padding: 0 4px; width: 4em;         color: #aaaaaa;       }     pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }     div.sourceCode       {   }     @media screen {     pre &gt; code.sourceCode &gt; span &gt; a:first-child::before { text-decoration: underline; }     }     code span.al { color: #ff0000; font-weight: bold; } /* Alert */     code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */     code span.at { color: #7d9029; } /* Attribute */     code span.bn { color: #40a070; } /* BaseN */     code span.bu { } /* BuiltIn */     code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */     code span.ch { color: #4070a0; } /* Char */     code span.cn { color: #880000; } /* Constant */     code span.co { color: #60a0b0; font-style: italic; } /* Comment */     code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */     code span.do { color: #ba2121; font-style: italic; } /* Documentation */     code span.dt { color: #902000; } /* DataType */     code span.dv { color: #40a070; } /* DecVal */     code span.er { color: #ff0000; font-weight: bold; } /* Error */     code span.ex { } /* Extension */     code span.fl { color: #40a070; } /* Float */     code span.fu { color: #06287e; } /* Function */     code span.im { } /* Import */     code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */     code span.kw { color: #007020; font-weight: bold; } /* Keyword */     code span.op { color: #666666; } /* Operator */     code span.ot { color: #007020; } /* Other */     code span.pp { color: #bc7a00; } /* Preprocessor */     code span.sc { color: #4070a0; } /* SpecialChar */     code span.ss { color: #bb6688; } /* SpecialString */     code span.st { color: #4070a0; } /* String */     code span.va { color: #19177c; } /* Variable */     code span.vs { color: #4070a0; } /* VerbatimString */     code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */   &lt;/style&gt;  &lt;!--[if lt IE 9]&gt;    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;  &lt;![endif]--&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;This post is essentially a longer version of &lt;a href=&quot;https://www.reddit.com/r/haskell/comments/6ufnmr/scrap_your_proxy_arguments_with_typeapplications/&quot;&gt;this Reddit post&lt;/a&gt; by &lt;a href=&quot;https://github.com/AshleyYakeley&quot;&gt;Ashley Yakeley&lt;/a&gt; that provides more explanation and historical context.&lt;/p&gt;&lt;p&gt;Sometimes in Haskell you need to write a function that “dispatches” only on a type and not on a value of that type. Using the example from the above post, we might want to write a function that, given an input type, prints the name of that type.&lt;/p&gt;&lt;h4 id=&quot;approach-1---undefined&quot;&gt;Approach 1 - &lt;code&gt;undefined&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;One naive approach would be to do this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;TypeName&lt;/span&gt; a &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;    typeName ::&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;#cb1-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-4&quot;&gt;&lt;a href=&quot;#cb1-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;TypeName&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-5&quot;&gt;&lt;a href=&quot;#cb1-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    typeName _ &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Bool&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-6&quot;&gt;&lt;a href=&quot;#cb1-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-7&quot;&gt;&lt;a href=&quot;#cb1-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;TypeName&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-8&quot;&gt;&lt;a href=&quot;#cb1-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    typeName _ &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Int&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… which we could use like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; typeName &lt;span class=&quot;dt&quot;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;Bool&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;#cb2-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; typeName (&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-4&quot;&gt;&lt;a href=&quot;#cb2-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;Int&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, this approach does not work well because we must provide the &lt;code&gt;typeName&lt;/code&gt; method with a concrete value of type &lt;code&gt;a&lt;/code&gt;. Not only is this superfluous (we don’t care which value we supply) but in some cases we might not even be able to supply such a value.&lt;/p&gt;&lt;p&gt;For example, consider this instance:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Data.Void&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Void&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;#cb3-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-3&quot;&gt;&lt;a href=&quot;#cb3-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;TypeName&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-4&quot;&gt;&lt;a href=&quot;#cb3-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    typeName _ &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Void&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There is a perfectly valid name associated with this type, but we cannot retrieve the name without cheating because we cannot produce a (total) value of type &lt;code&gt;Void&lt;/code&gt;. Instead, we have to use something like &lt;code&gt;undefined&lt;/code&gt;:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;#cb4-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; typeName (&lt;span class=&quot;fu&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Void&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-2&quot;&gt;&lt;a href=&quot;#cb4-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;Void&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;base&lt;/code&gt; package uses this &lt;code&gt;undefined&lt;/code&gt;-based approach. For example, &lt;code&gt;Foreign.Storable&lt;/code&gt; provides a &lt;code&gt;sizeOf&lt;/code&gt; function that works just like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;#cb5-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Storable&lt;/span&gt; a &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-2&quot;&gt;&lt;a href=&quot;#cb5-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;-- | Computes the storage requirements (in bytes) of the argument. The value&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-3&quot;&gt;&lt;a href=&quot;#cb5-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;-- of the argument is not used.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-4&quot;&gt;&lt;a href=&quot;#cb5-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;    sizeOf ::&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-5&quot;&gt;&lt;a href=&quot;#cb5-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-6&quot;&gt;&lt;a href=&quot;#cb5-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… and to this day the idiomatic way to use &lt;code&gt;sizeOf&lt;/code&gt; is to provide a fake value using &lt;code&gt;undefined&lt;/code&gt;:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb6&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb6-1&quot;&gt;&lt;a href=&quot;#cb6-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; sizeOf (&lt;span class=&quot;fu&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-2&quot;&gt;&lt;a href=&quot;#cb6-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This works because &lt;code&gt;sizeOf&lt;/code&gt; never evaluates its argument. It’s technically safe, albeit not very appealing to depend on &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;&lt;h4 id=&quot;approach-2a---proxy&quot;&gt;Approach 2A - &lt;code&gt;Proxy&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;The next evolution of this approach was to use the &lt;code&gt;Proxy&lt;/code&gt; type (now part of &lt;code&gt;base&lt;/code&gt; in the &lt;a href=&quot;https://hackage.haskell.org/package/base/docs/Data-Proxy.html&quot;&gt;&lt;code&gt;Data.Proxy&lt;/code&gt;&lt;/a&gt; module). As the documentation notes:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Historically, &lt;code&gt;Proxy :: Proxy a&lt;/code&gt; is a safer alternative to the &lt;code&gt;undefined :: a&lt;/code&gt; idiom.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;I’m not exactly sure what the name &lt;code&gt;Proxy&lt;/code&gt; was originally meant to convey, but I believe the intention was that a term (the &lt;code&gt;Proxy&lt;/code&gt; constructor) stands in as a “proxy” for a type (specifically, the type argument to the &lt;code&gt;Proxy&lt;/code&gt; type constructor).&lt;/p&gt;&lt;p&gt;We can amend our original example to use the &lt;code&gt;Proxy&lt;/code&gt; type like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb7&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb7-1&quot;&gt;&lt;a href=&quot;#cb7-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Data.Proxy&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Proxy&lt;/span&gt;(..))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-2&quot;&gt;&lt;a href=&quot;#cb7-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Data.Void&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Void&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-3&quot;&gt;&lt;a href=&quot;#cb7-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-4&quot;&gt;&lt;a href=&quot;#cb7-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;TypeName&lt;/span&gt; a &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-5&quot;&gt;&lt;a href=&quot;#cb7-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;    typeName ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Proxy&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-6&quot;&gt;&lt;a href=&quot;#cb7-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-7&quot;&gt;&lt;a href=&quot;#cb7-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;TypeName&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-8&quot;&gt;&lt;a href=&quot;#cb7-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    typeName _ &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Bool&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-9&quot;&gt;&lt;a href=&quot;#cb7-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-10&quot;&gt;&lt;a href=&quot;#cb7-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;TypeName&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-11&quot;&gt;&lt;a href=&quot;#cb7-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    typeName _ &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Int&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-12&quot;&gt;&lt;a href=&quot;#cb7-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-13&quot;&gt;&lt;a href=&quot;#cb7-13&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;TypeName&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-14&quot;&gt;&lt;a href=&quot;#cb7-14&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    typeName _ &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Void&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… and now we can safely get the name of a type without providing a specific value of that type. Instead we always provide a &lt;code&gt;Proxy&lt;/code&gt; constructor and give it a type annotation which “stores” the type we wish to use:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb8&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb8-1&quot;&gt;&lt;a href=&quot;#cb8-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; typeName (&lt;span class=&quot;dt&quot;&gt;Proxy&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Proxy&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-2&quot;&gt;&lt;a href=&quot;#cb8-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;Bool&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-3&quot;&gt;&lt;a href=&quot;#cb8-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; typeName (&lt;span class=&quot;dt&quot;&gt;Proxy&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Proxy&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-4&quot;&gt;&lt;a href=&quot;#cb8-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;Int&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-5&quot;&gt;&lt;a href=&quot;#cb8-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; typeName (&lt;span class=&quot;dt&quot;&gt;Proxy&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Proxy&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Void&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-6&quot;&gt;&lt;a href=&quot;#cb8-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;Void&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can simplify that a little bit by enabling the &lt;code&gt;TypeApplications&lt;/code&gt; language extension, which permits us to write this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb9&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb9-1&quot;&gt;&lt;a href=&quot;#cb9-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;set &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;XTypeApplications&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb9-2&quot;&gt;&lt;a href=&quot;#cb9-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; typeName (&lt;span class=&quot;dt&quot;&gt;Proxy&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb9-3&quot;&gt;&lt;a href=&quot;#cb9-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;Bool&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb9-4&quot;&gt;&lt;a href=&quot;#cb9-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; typeName (&lt;span class=&quot;dt&quot;&gt;Proxy&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb9-5&quot;&gt;&lt;a href=&quot;#cb9-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;Int&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb9-6&quot;&gt;&lt;a href=&quot;#cb9-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; typeName (&lt;span class=&quot;dt&quot;&gt;Proxy&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;Void&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb9-7&quot;&gt;&lt;a href=&quot;#cb9-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;Void&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… or this if we prefer:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb10&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb10-1&quot;&gt;&lt;a href=&quot;#cb10-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; typeName &lt;span class=&quot;op&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Proxy&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-2&quot;&gt;&lt;a href=&quot;#cb10-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;Bool&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-3&quot;&gt;&lt;a href=&quot;#cb10-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; typeName &lt;span class=&quot;op&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Proxy&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-4&quot;&gt;&lt;a href=&quot;#cb10-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;Int&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-5&quot;&gt;&lt;a href=&quot;#cb10-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; typeName &lt;span class=&quot;op&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Proxy&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-6&quot;&gt;&lt;a href=&quot;#cb10-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;Void&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&quot;approach-2b---proxy&quot;&gt;Approach 2B - &lt;code&gt;proxy&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;A minor variation on the previous approach is to use &lt;code&gt;proxy&lt;/code&gt; (with a lowercase “p”) in the typeclass definition:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb11&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb11-1&quot;&gt;&lt;a href=&quot;#cb11-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Data.Void&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Void&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-2&quot;&gt;&lt;a href=&quot;#cb11-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-3&quot;&gt;&lt;a href=&quot;#cb11-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;TypeName&lt;/span&gt; a &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-4&quot;&gt;&lt;a href=&quot;#cb11-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;    typeName ::&lt;/span&gt; proxy a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-5&quot;&gt;&lt;a href=&quot;#cb11-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;--          ↑&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-6&quot;&gt;&lt;a href=&quot;#cb11-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-7&quot;&gt;&lt;a href=&quot;#cb11-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;TypeName&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-8&quot;&gt;&lt;a href=&quot;#cb11-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    typeName _ &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Bool&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-9&quot;&gt;&lt;a href=&quot;#cb11-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-10&quot;&gt;&lt;a href=&quot;#cb11-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;TypeName&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-11&quot;&gt;&lt;a href=&quot;#cb11-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    typeName _ &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Int&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-12&quot;&gt;&lt;a href=&quot;#cb11-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-13&quot;&gt;&lt;a href=&quot;#cb11-13&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;TypeName&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-14&quot;&gt;&lt;a href=&quot;#cb11-14&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    typeName _ &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Void&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Everything else works the same, but now neither the author nor the consumer of the typeclass needs to depend on the &lt;code&gt;Data.Proxy&lt;/code&gt; module specifically. For example, the consumer could use any other type constructor just fine:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb12&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb12-1&quot;&gt;&lt;a href=&quot;#cb12-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; typeName ([]&lt;span class=&quot;ot&quot;&gt; ::&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;])  &lt;span class=&quot;co&quot;&gt;-- Technically legal, but weird&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-2&quot;&gt;&lt;a href=&quot;#cb12-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;Int&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… or (more likely) the consumer could define their own &lt;code&gt;Proxy&lt;/code&gt; type to use instead of the one from &lt;code&gt;Data.Proxy&lt;/code&gt;, which would also work fine:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb13&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb13-1&quot;&gt;&lt;a href=&quot;#cb13-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Proxy&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Proxy&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-2&quot;&gt;&lt;a href=&quot;#cb13-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; typeName (&lt;span class=&quot;dt&quot;&gt;Proxy&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Proxy&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-3&quot;&gt;&lt;a href=&quot;#cb13-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;Int&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This trick helped back when &lt;code&gt;Proxy&lt;/code&gt; was not a part of the &lt;code&gt;base&lt;/code&gt; package. Even now that &lt;code&gt;Proxy&lt;/code&gt; is in &lt;code&gt;base&lt;/code&gt; you still see this trick when people author typeclass instances because it’s easier and there’s no downside.&lt;/p&gt;&lt;p&gt;Both of these &lt;code&gt;Proxy&lt;/code&gt;-based solutions are definitely better than using &lt;code&gt;undefined&lt;/code&gt;, but they are both still a bit unsatisfying because we have to supply a &lt;code&gt;Proxy&lt;/code&gt; argument to specify the desired type. The ideal user experience should only require the type and the type alone as an input to our function.&lt;/p&gt;&lt;h4 id=&quot;approach-3---allowambiguoustypes-typeapplications&quot;&gt;Approach 3 - &lt;code&gt;AllowAmbiguousTypes&lt;/code&gt; + &lt;code&gt;TypeApplications&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;We previously noted that we could shorten the &lt;code&gt;Proxy&lt;/code&gt;-based solution by using &lt;code&gt;TypeApplications&lt;/code&gt;:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb14&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb14-1&quot;&gt;&lt;a href=&quot;#cb14-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; typeName &lt;span class=&quot;op&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Proxy&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-2&quot;&gt;&lt;a href=&quot;#cb14-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;Bool&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Well, what if we could shorten things even further and just drop the &lt;code&gt;Proxy&lt;/code&gt;, like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb15&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb15-1&quot;&gt;&lt;a href=&quot;#cb15-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; typeName &lt;span class=&quot;op&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Actually, we can! This brings us to a more recent approach (the one summarized in the linked Reddit post), which is to use &lt;code&gt;AllowAmbiguousTypes&lt;/code&gt; + &lt;code&gt;TypeApplications&lt;/code&gt;, like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb16&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb16-1&quot;&gt;&lt;a href=&quot;#cb16-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;{-# LANGUAGE AllowAmbiguousTypes #-}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb16-2&quot;&gt;&lt;a href=&quot;#cb16-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb16-3&quot;&gt;&lt;a href=&quot;#cb16-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Data.Void&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Void&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb16-4&quot;&gt;&lt;a href=&quot;#cb16-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb16-5&quot;&gt;&lt;a href=&quot;#cb16-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;TypeName&lt;/span&gt; a &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb16-6&quot;&gt;&lt;a href=&quot;#cb16-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;    typeName ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb16-7&quot;&gt;&lt;a href=&quot;#cb16-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb16-8&quot;&gt;&lt;a href=&quot;#cb16-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;TypeName&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb16-9&quot;&gt;&lt;a href=&quot;#cb16-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    typeName &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Bool&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb16-10&quot;&gt;&lt;a href=&quot;#cb16-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb16-11&quot;&gt;&lt;a href=&quot;#cb16-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;TypeName&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb16-12&quot;&gt;&lt;a href=&quot;#cb16-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    typeName &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Int&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb16-13&quot;&gt;&lt;a href=&quot;#cb16-13&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb16-14&quot;&gt;&lt;a href=&quot;#cb16-14&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;TypeName&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb16-15&quot;&gt;&lt;a href=&quot;#cb16-15&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    typeName &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Void&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… which we can invoke like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb17&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb17-1&quot;&gt;&lt;a href=&quot;#cb17-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;set &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;XTypeApplications&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb17-2&quot;&gt;&lt;a href=&quot;#cb17-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; typeName &lt;span class=&quot;op&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb17-3&quot;&gt;&lt;a href=&quot;#cb17-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;Bool&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb17-4&quot;&gt;&lt;a href=&quot;#cb17-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; typeName &lt;span class=&quot;op&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb17-5&quot;&gt;&lt;a href=&quot;#cb17-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;Int&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb17-6&quot;&gt;&lt;a href=&quot;#cb17-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; typeName &lt;span class=&quot;op&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;Void&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb17-7&quot;&gt;&lt;a href=&quot;#cb17-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;Void&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The use of &lt;code&gt;TypeApplications&lt;/code&gt; is essential, since otherwise GHC would have no way to infer which typeclass instance we meant. Even a type annotation would not work:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb18&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb18-1&quot;&gt;&lt;a href=&quot;#cb18-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; typeName ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;-- Clearly, this type annotation is not very helpful&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-2&quot;&gt;&lt;a href=&quot;#cb18-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-3&quot;&gt;&lt;a href=&quot;#cb18-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;interactive&lt;span class=&quot;op&quot;&gt;&amp;gt;:&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-4&quot;&gt;&lt;a href=&quot;#cb18-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    • &lt;span class=&quot;dt&quot;&gt;Ambiguous&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; variable ‘a0’ arising from a use &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt; ‘typeName’&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-5&quot;&gt;&lt;a href=&quot;#cb18-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      prevents the constraint ‘(&lt;span class=&quot;dt&quot;&gt;TypeName&lt;/span&gt; a0)’ from being solved&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-6&quot;&gt;&lt;a href=&quot;#cb18-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;dt&quot;&gt;Probable&lt;/span&gt; fix&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; use a &lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; annotation to specify what ‘a0’ should be&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-7&quot;&gt;&lt;a href=&quot;#cb18-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;dt&quot;&gt;These&lt;/span&gt; potential instances exist&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-8&quot;&gt;&lt;a href=&quot;#cb18-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; [safe] &lt;span class=&quot;dt&quot;&gt;TypeName&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;-- Defined at Example.hs:14:10&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-9&quot;&gt;&lt;a href=&quot;#cb18-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; [safe] &lt;span class=&quot;dt&quot;&gt;TypeName&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;-- Defined at Example.hs:8:10&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-10&quot;&gt;&lt;a href=&quot;#cb18-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; [safe] &lt;span class=&quot;dt&quot;&gt;TypeName&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;-- Defined at Example.hs:11:10&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-11&quot;&gt;&lt;a href=&quot;#cb18-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    • &lt;span class=&quot;dt&quot;&gt;In&lt;/span&gt; the expression&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; typeName ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-12&quot;&gt;&lt;a href=&quot;#cb18-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;dt&quot;&gt;In&lt;/span&gt; an equation for ‘it’&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; it &lt;span class=&quot;ot&quot;&gt;= typeName ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Type applications work here because you can think of a polymorphic function as really having one extra function argument: the polymorphic type. I elaborate on this a bit in my post on &lt;a href=&quot;https://www.haskellforall.com/2015/10/polymorphism-for-dummies.html&quot;&gt;Polymorphism for dummies&lt;/a&gt;, but the basic idea is that &lt;code&gt;TypeApplications&lt;/code&gt; makes this extra function argument for the type explicit. This means that you can directly tell the compiler which type to use by “applying” the function to the right type instead of trying to indirectly persuade the compiler into using the the right type with a type annotation.&lt;/p&gt;&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;&lt;p&gt;My personal preference is to use the last approach with &lt;code&gt;AllowAmbiguousTypes&lt;/code&gt; and &lt;code&gt;TypeApplications&lt;/code&gt;. Not only is it more concise, but it also appeals to my own coding aesthetic. Specifically, guiding compiler behavior using type-annotations feels more like &lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_programming&quot;&gt;logic programming&lt;/a&gt; to me and using explicit type abstractions and &lt;code&gt;TypeApplications&lt;/code&gt; feels more like functional programming to me (and I tend to prefer functional programming over logic programming).&lt;/p&gt;&lt;p&gt;However, the &lt;code&gt;Proxy&lt;/code&gt;-based approach requires no language extensions, so that approach might appeal to you if you prefer to use the simplest subset of the language possible.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</content><link rel="replies" type="application/atom+xml" href="https://www.haskellforall.com/feeds/8974576498304916431/comments/default" title="Post Comments"><link rel="replies" type="text/html" href="https://www.haskellforall.com/2021/04/how-to-replace-proxy-with.html#comment-form" title="0 Comments"><link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/8974576498304916431"><link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/8974576498304916431"><link rel="alternate" type="text/html" href="https://www.haskellforall.com/2021/04/how-to-replace-proxy-with.html" title="How to replace Proxy with AllowAmbiguousTypes"><author><name>Gabriel Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-446837723524958645</id><published>2021-02-06T07:07:00.002-08:00</published><updated>2021-02-07T12:50:17.654-08:00</updated><title type="text">Folds are constructor substitution</title><content type="html">&lt;!DOCTYPE html&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;utf-8&quot; /&gt;  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;  &lt;title&gt;folds&lt;/title&gt;  &lt;style&gt;    code{white-space: pre-wrap;}     span.smallcaps{font-variant: small-caps;}     span.underline{text-decoration: underline;}     div.column{display: inline-block; vertical-align: top; width: 50%;}     div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}     ul.task-list{list-style: none;}     pre &gt; code.sourceCode { white-space: pre; position: relative; }     pre &gt; code.sourceCode &gt; span { display: inline-block; line-height: 1.25; }     pre &gt; code.sourceCode &gt; span:empty { height: 1.2em; }     code.sourceCode &gt; span { color: inherit; text-decoration: inherit; }     div.sourceCode { margin: 1em 0; }     pre.sourceCode { margin: 0; }     @media screen {     div.sourceCode { overflow: auto; }     }     @media print {     pre &gt; code.sourceCode { white-space: pre-wrap; }     pre &gt; code.sourceCode &gt; span { text-indent: -5em; padding-left: 5em; }     }     pre.numberSource code       { counter-reset: source-line 0; }     pre.numberSource code &gt; span       { position: relative; left: -4em; counter-increment: source-line; }     pre.numberSource code &gt; span &gt; a:first-child::before       { content: counter(source-line);         position: relative; left: -1em; text-align: right; vertical-align: baseline;         border: none; display: inline-block;         -webkit-touch-callout: none; -webkit-user-select: none;         -khtml-user-select: none; -moz-user-select: none;         -ms-user-select: none; user-select: none;         padding: 0 4px; width: 4em;         color: #aaaaaa;       }     pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }     div.sourceCode       {   }     @media screen {     pre &gt; code.sourceCode &gt; span &gt; a:first-child::before { text-decoration: underline; }     }     code span.al { color: #ff0000; font-weight: bold; } /* Alert */     code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */     code span.at { color: #7d9029; } /* Attribute */     code span.bn { color: #40a070; } /* BaseN */     code span.bu { } /* BuiltIn */     code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */     code span.ch { color: #4070a0; } /* Char */     code span.cn { color: #880000; } /* Constant */     code span.co { color: #60a0b0; font-style: italic; } /* Comment */     code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */     code span.do { color: #ba2121; font-style: italic; } /* Documentation */     code span.dt { color: #902000; } /* DataType */     code span.dv { color: #40a070; } /* DecVal */     code span.er { color: #ff0000; font-weight: bold; } /* Error */     code span.ex { } /* Extension */     code span.fl { color: #40a070; } /* Float */     code span.fu { color: #06287e; } /* Function */     code span.im { } /* Import */     code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */     code span.kw { color: #007020; font-weight: bold; } /* Keyword */     code span.op { color: #666666; } /* Operator */     code span.ot { color: #007020; } /* Other */     code span.pp { color: #bc7a00; } /* Preprocessor */     code span.sc { color: #4070a0; } /* SpecialChar */     code span.ss { color: #bb6688; } /* SpecialString */     code span.st { color: #4070a0; } /* String */     code span.va { color: #19177c; } /* Variable */     code span.vs { color: #4070a0; } /* VerbatimString */     code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */     .display.math{display: block; text-align: center; margin: 0.5rem auto;}   &lt;/style&gt;  &lt;!--[if lt IE 9]&gt;    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;  &lt;![endif]--&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;I notice that functional programming beginners and experts understand the word “fold” to mean subtly different things, so I’d like to explain what experienced functional programmers usually mean when they use the term “fold”. This post assumes a passing familiarity with Haskell.&lt;/p&gt;&lt;h4 id=&quot;overview&quot;&gt;Overview&lt;/h4&gt;&lt;p&gt;A “fold” is a function that replaces all constructors of a datatype with corresponding expressions. “fold”s are not limited to lists, linear sequences, or even containers; you can fold any inductively defined datatype.&lt;/p&gt;&lt;p&gt;To explain the more general notion of a “fold”, we’ll consider three representative data structures:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;lists&lt;/li&gt;&lt;li&gt;&lt;code&gt;Maybe&lt;/code&gt; values&lt;/li&gt;&lt;li&gt;binary trees&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;… and show how we can automatically derive the “one true fold” for each data structure by following the same general principle.&lt;/p&gt;&lt;h4 id=&quot;lists&quot;&gt;Lists&lt;/h4&gt;&lt;p&gt;Many beginners understand the word “fold” to be a way to reduce some collection of values (e.g. a list) to a single value. For example, in Haskell you can add up the elements of a list like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ::&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;] &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;sum&lt;/span&gt; xs &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;foldr&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;) &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; xs&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… where &lt;code&gt;sum&lt;/code&gt; reduces a sequence of &lt;code&gt;Int&lt;/code&gt;s to a single &lt;code&gt;Int&lt;/code&gt; by starting from an initial accumulator value of &lt;code&gt;0&lt;/code&gt; and then “folding” each element of the list into the accumulator using &lt;code&gt;(+)&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Haskell’s standard library provides at least two fold functions named &lt;code&gt;foldl&lt;/code&gt; and &lt;code&gt;foldr&lt;/code&gt;, but only &lt;code&gt;foldr&lt;/code&gt; is the “canonical” fold for a list. By “canonical” I mean that &lt;code&gt;foldr&lt;/code&gt; is the only fold that works by substituting list constructors.&lt;/p&gt;&lt;p&gt;We can more easily see this if we define our own linked list type with explicitly named constructors:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;List&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Cons&lt;/span&gt; a (&lt;span class=&quot;dt&quot;&gt;List&lt;/span&gt; a) &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Nil&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… where instead of writing a list as &lt;code&gt;[ 1, 2, 3 ]&lt;/code&gt; we instead will write such a list as:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;example ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;#cb3-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;example &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Cons&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Cons&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Cons&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Nil&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is a very unergonomic representation for a list, but bear with me!&lt;/p&gt;&lt;p&gt;We can implement the “canonical” fold for the above &lt;code&gt;List&lt;/code&gt; type as a function that takes two arguments:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The first argument (named &lt;code&gt;cons&lt;/code&gt;) replaces all occurrences of the &lt;code&gt;Cons&lt;/code&gt; constructor&lt;/li&gt;&lt;li&gt;The second argument (named &lt;code&gt;nil&lt;/code&gt;) replaces all occurrences of the &lt;code&gt;Nil&lt;/code&gt; constructor&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The implementation of the canonical fold looks like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;#cb4-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;fold ::&lt;/span&gt; (a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; list &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; list) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; list &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;List&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; list&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-2&quot;&gt;&lt;a href=&quot;#cb4-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;fold cons nil (&lt;span class=&quot;dt&quot;&gt;Cons&lt;/span&gt; x xs) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; cons x (fold cons nil xs)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-3&quot;&gt;&lt;a href=&quot;#cb4-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;fold cons nil  &lt;span class=&quot;dt&quot;&gt;Nil&lt;/span&gt;        &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; nil&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You might not necessarily follow how that implementation works, so a more direct way to appreciate how &lt;code&gt;fold&lt;/code&gt; works is to see how the function behaves on some sample inputs:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;#cb5-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- The general case, step-by-step&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-2&quot;&gt;&lt;a href=&quot;#cb5-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;fold cons nil (&lt;span class=&quot;dt&quot;&gt;Cons&lt;/span&gt; x (&lt;span class=&quot;dt&quot;&gt;Cons&lt;/span&gt; y (&lt;span class=&quot;dt&quot;&gt;Cons&lt;/span&gt; z &lt;span class=&quot;dt&quot;&gt;Nil&lt;/span&gt;)))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-3&quot;&gt;&lt;a href=&quot;#cb5-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; cons x (fold cons nil (&lt;span class=&quot;dt&quot;&gt;Cons&lt;/span&gt; y (&lt;span class=&quot;dt&quot;&gt;Cons&lt;/span&gt; z &lt;span class=&quot;dt&quot;&gt;Nil&lt;/span&gt;)))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-4&quot;&gt;&lt;a href=&quot;#cb5-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; cons x (cons y (fold cons nil (&lt;span class=&quot;dt&quot;&gt;Cons&lt;/span&gt; z &lt;span class=&quot;dt&quot;&gt;Nil&lt;/span&gt;)))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-5&quot;&gt;&lt;a href=&quot;#cb5-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; cons x (cons y (cons z (fold cons nil &lt;span class=&quot;dt&quot;&gt;Nil&lt;/span&gt;)))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-6&quot;&gt;&lt;a href=&quot;#cb5-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; cons x (cons y (cons z nil))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-7&quot;&gt;&lt;a href=&quot;#cb5-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-8&quot;&gt;&lt;a href=&quot;#cb5-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Add up the elements of the list, but skipping more steps this time&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-9&quot;&gt;&lt;a href=&quot;#cb5-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;fold (&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;) &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Cons&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Cons&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Cons&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Nil&lt;/span&gt;)))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-10&quot;&gt;&lt;a href=&quot;#cb5-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;) &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; ((&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;) &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; ((&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;) &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-11&quot;&gt;&lt;a href=&quot;#cb5-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; (&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; (&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-12&quot;&gt;&lt;a href=&quot;#cb5-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-13&quot;&gt;&lt;a href=&quot;#cb5-13&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-14&quot;&gt;&lt;a href=&quot;#cb5-14&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Calculate the list length&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-15&quot;&gt;&lt;a href=&quot;#cb5-15&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;fold (\_ n &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; n &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Cons&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;True&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Cons&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;False&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Cons&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Nil&lt;/span&gt;)))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-16&quot;&gt;&lt;a href=&quot;#cb5-16&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (\_ n &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; n &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;dt&quot;&gt;True&lt;/span&gt; ((\_ n &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; n &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;dt&quot;&gt;False&lt;/span&gt; ((\_ n &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; n &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;dt&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-17&quot;&gt;&lt;a href=&quot;#cb5-17&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (\_ n &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; n &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;dt&quot;&gt;True&lt;/span&gt; ((\_ n &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; n &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;dt&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-18&quot;&gt;&lt;a href=&quot;#cb5-18&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (\_ n &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; n &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;dt&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-19&quot;&gt;&lt;a href=&quot;#cb5-19&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice that if we format the type of &lt;code&gt;fold&lt;/code&gt; a bit we can see that the type of each argument to &lt;code&gt;fold&lt;/code&gt; (sort of) matches the type of the corresponding constructor they replace:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb6&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb6-1&quot;&gt;&lt;a href=&quot;#cb6-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;fold&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-2&quot;&gt;&lt;a href=&quot;#cb6-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;    ::&lt;/span&gt; (a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; list &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; list)  &lt;span class=&quot;co&quot;&gt;-- Cons :: a -&amp;gt; List a -&amp;gt; List a&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-3&quot;&gt;&lt;a href=&quot;#cb6-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; list                 &lt;span class=&quot;co&quot;&gt;-- Nil  :: List a&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-4&quot;&gt;&lt;a href=&quot;#cb6-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;List&lt;/span&gt; a&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-5&quot;&gt;&lt;a href=&quot;#cb6-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; list&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above type, &lt;code&gt;list&lt;/code&gt; is actually a type variable and we could have used any name for that type variable instead of &lt;code&gt;list&lt;/code&gt;, such as &lt;code&gt;b&lt;/code&gt;. In fact, if we were to replace &lt;code&gt;list&lt;/code&gt; with &lt;code&gt;b&lt;/code&gt;, we would get essentially the same type as &lt;code&gt;foldr&lt;/code&gt; for Haskell lists:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb7&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb7-1&quot;&gt;&lt;a href=&quot;#cb7-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Our `fold` type, replacing `list` with `b`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-2&quot;&gt;&lt;a href=&quot;#cb7-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;fold&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-3&quot;&gt;&lt;a href=&quot;#cb7-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;    ::&lt;/span&gt; (a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; b &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; b)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-4&quot;&gt;&lt;a href=&quot;#cb7-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; b&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-5&quot;&gt;&lt;a href=&quot;#cb7-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;List&lt;/span&gt; a&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-6&quot;&gt;&lt;a href=&quot;#cb7-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; b&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-7&quot;&gt;&lt;a href=&quot;#cb7-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-8&quot;&gt;&lt;a href=&quot;#cb7-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Now compare that type to the `foldr` type from the Prelude:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-9&quot;&gt;&lt;a href=&quot;#cb7-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;foldr&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-10&quot;&gt;&lt;a href=&quot;#cb7-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;    ::&lt;/span&gt; (a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; b &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; b)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-11&quot;&gt;&lt;a href=&quot;#cb7-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; b&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-12&quot;&gt;&lt;a href=&quot;#cb7-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; [a]&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-13&quot;&gt;&lt;a href=&quot;#cb7-13&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; b&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We commonly use folds to reduce a &lt;code&gt;List&lt;/code&gt; to a single scalar value, but folds are actually much more general-purpose than that and they can be used to transform one data structure into another data structure. For example, we can use the same &lt;code&gt;fold&lt;/code&gt; function to convert our clumsy &lt;code&gt;List&lt;/code&gt; type into the standard Haskell list type, like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb8&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb8-1&quot;&gt;&lt;a href=&quot;#cb8-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;fold (&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;) [] (&lt;span class=&quot;dt&quot;&gt;Cons&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Cons&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Cons&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Nil&lt;/span&gt;)))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-2&quot;&gt;&lt;a href=&quot;#cb8-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;) &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; ((&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;) &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; ((&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;) &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; []))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-3&quot;&gt;&lt;a href=&quot;#cb8-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; (&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; (&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; []))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-4&quot;&gt;&lt;a href=&quot;#cb8-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; [ &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&quot;maybe&quot;&gt;&lt;code&gt;Maybe&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;Folds are not limited to recursive data types. For example, here is the canonical &lt;code&gt;fold&lt;/code&gt; for Haskell’s &lt;code&gt;Maybe&lt;/code&gt; type, which is not recursive:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb9&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb9-1&quot;&gt;&lt;a href=&quot;#cb9-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Maybe&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; a&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb9-2&quot;&gt;&lt;a href=&quot;#cb9-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb9-3&quot;&gt;&lt;a href=&quot;#cb9-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;fold ::&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;maybe&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; (a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;maybe&lt;/span&gt;) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Maybe&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;maybe&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb9-4&quot;&gt;&lt;a href=&quot;#cb9-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;fold nothing just  &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;  &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; nothing&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb9-5&quot;&gt;&lt;a href=&quot;#cb9-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;fold nothing just (&lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; x ) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; just x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In fact, this function already exists in Haskell’s standard library by the name of &lt;code&gt;maybe&lt;/code&gt;:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb10&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb10-1&quot;&gt;&lt;a href=&quot;#cb10-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;maybe&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ::&lt;/span&gt; b &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; (a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Maybe&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; b&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-2&quot;&gt;&lt;a href=&quot;#cb10-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;maybe&lt;/span&gt; n _ &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;  &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; n&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-3&quot;&gt;&lt;a href=&quot;#cb10-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;maybe&lt;/span&gt; _ f (&lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; x) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; f x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once you think of folds in terms of constructor substitution you can quickly spot these canonical folds for other types.&lt;/p&gt;&lt;h4 id=&quot;binary-trees&quot;&gt;Binary trees&lt;/h4&gt;&lt;p&gt;What about more complex data structures, like the following binary &lt;code&gt;Tree&lt;/code&gt; type?&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb11&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb11-1&quot;&gt;&lt;a href=&quot;#cb11-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Tree&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Node&lt;/span&gt; a (&lt;span class=&quot;dt&quot;&gt;Tree&lt;/span&gt; a) (&lt;span class=&quot;dt&quot;&gt;Tree&lt;/span&gt; a) &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Leaf&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This sort of fold is still straightforward to write, by applying the same principle of constructor substitution:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb12&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb12-1&quot;&gt;&lt;a href=&quot;#cb12-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;fold ::&lt;/span&gt; (a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; tree &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; tree &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; tree) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; tree &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Tree&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; tree&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-2&quot;&gt;&lt;a href=&quot;#cb12-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;fold node leaf (&lt;span class=&quot;dt&quot;&gt;Node&lt;/span&gt; x l r) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; node x (fold node leaf l) (fold node leaf r)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-3&quot;&gt;&lt;a href=&quot;#cb12-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;fold node leaf  &lt;span class=&quot;dt&quot;&gt;Leaf&lt;/span&gt;        &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; leaf&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We only need to keep recursively descending over the &lt;code&gt;Tree&lt;/code&gt;, replacing constructors as we go.&lt;/p&gt;&lt;p&gt;We can use this &lt;code&gt;fold&lt;/code&gt; to reduce the &lt;code&gt;Tree&lt;/code&gt; to a single value, like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb13&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb13-1&quot;&gt;&lt;a href=&quot;#cb13-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Add up all the nodes in the tree&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-2&quot;&gt;&lt;a href=&quot;#cb13-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;fold (\x l r &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; l &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; r) &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Leaf&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Leaf&lt;/span&gt;) (&lt;span class=&quot;dt&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Leaf&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Leaf&lt;/span&gt;))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-3&quot;&gt;&lt;a href=&quot;#cb13-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (\x l r &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; l &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; r) &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-4&quot;&gt;&lt;a href=&quot;#cb13-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        ((\x l r &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; l &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; r) &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-5&quot;&gt;&lt;a href=&quot;#cb13-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        ((\x l r &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; l &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; r) &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-6&quot;&gt;&lt;a href=&quot;#cb13-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (\x l r &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; l &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; r) &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-7&quot;&gt;&lt;a href=&quot;#cb13-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        (&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-8&quot;&gt;&lt;a href=&quot;#cb13-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        (&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-9&quot;&gt;&lt;a href=&quot;#cb13-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (\x l r &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; l &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; r) &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-10&quot;&gt;&lt;a href=&quot;#cb13-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-11&quot;&gt;&lt;a href=&quot;#cb13-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-12&quot;&gt;&lt;a href=&quot;#cb13-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-13&quot;&gt;&lt;a href=&quot;#cb13-13&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… or we can use the same &lt;code&gt;fold&lt;/code&gt; function to transform the &lt;code&gt;Tree&lt;/code&gt; into another data structure, like a list:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb14&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb14-1&quot;&gt;&lt;a href=&quot;#cb14-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- List `Tree` elements in pre-order&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-2&quot;&gt;&lt;a href=&quot;#cb14-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;fold (\x l r &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; l &lt;span class=&quot;op&quot;&gt;++&lt;/span&gt; r) [] (&lt;span class=&quot;dt&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Leaf&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Leaf&lt;/span&gt;) (&lt;span class=&quot;dt&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Leaf&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Leaf&lt;/span&gt;))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-3&quot;&gt;&lt;a href=&quot;#cb14-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (\x l r &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; l &lt;span class=&quot;op&quot;&gt;++&lt;/span&gt; r) &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-4&quot;&gt;&lt;a href=&quot;#cb14-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        ((\x l r &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; l &lt;span class=&quot;op&quot;&gt;++&lt;/span&gt; r) &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; [] [])&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-5&quot;&gt;&lt;a href=&quot;#cb14-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        ((\x l r &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; l &lt;span class=&quot;op&quot;&gt;++&lt;/span&gt; r) &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; [] [])&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-6&quot;&gt;&lt;a href=&quot;#cb14-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (\x l r &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; l &lt;span class=&quot;op&quot;&gt;++&lt;/span&gt; r) &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-7&quot;&gt;&lt;a href=&quot;#cb14-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        (&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [] &lt;span class=&quot;op&quot;&gt;++&lt;/span&gt; [])&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-8&quot;&gt;&lt;a href=&quot;#cb14-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        (&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [] &lt;span class=&quot;op&quot;&gt;++&lt;/span&gt; [])&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-9&quot;&gt;&lt;a href=&quot;#cb14-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (\x l r &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; l &lt;span class=&quot;op&quot;&gt;++&lt;/span&gt; r) &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-10&quot;&gt;&lt;a href=&quot;#cb14-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        [&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-11&quot;&gt;&lt;a href=&quot;#cb14-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        [&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-12&quot;&gt;&lt;a href=&quot;#cb14-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (\x l r &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; l &lt;span class=&quot;op&quot;&gt;++&lt;/span&gt; r) &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-13&quot;&gt;&lt;a href=&quot;#cb14-13&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        [&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-14&quot;&gt;&lt;a href=&quot;#cb14-14&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        [&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-15&quot;&gt;&lt;a href=&quot;#cb14-15&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;++&lt;/span&gt; [&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-16&quot;&gt;&lt;a href=&quot;#cb14-16&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… even use the &lt;code&gt;fold&lt;/code&gt; to reverse the tree:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb15&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb15-1&quot;&gt;&lt;a href=&quot;#cb15-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;fold (\x l r &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Node&lt;/span&gt; x r l) &lt;span class=&quot;dt&quot;&gt;Leaf&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Leaf&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Leaf&lt;/span&gt;) (&lt;span class=&quot;dt&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Leaf&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Leaf&lt;/span&gt;))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-2&quot;&gt;&lt;a href=&quot;#cb15-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (\x l r &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Node&lt;/span&gt; x r l) &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-3&quot;&gt;&lt;a href=&quot;#cb15-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        ((\x l r &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Node&lt;/span&gt; x r l) &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Leaf&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Leaf&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-4&quot;&gt;&lt;a href=&quot;#cb15-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        ((\x l r &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Node&lt;/span&gt; x r l) &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Leaf&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Leaf&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-5&quot;&gt;&lt;a href=&quot;#cb15-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (\x l r &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Node&lt;/span&gt; x r l) &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-6&quot;&gt;&lt;a href=&quot;#cb15-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        (&lt;span class=&quot;dt&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Leaf&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Leaf&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-7&quot;&gt;&lt;a href=&quot;#cb15-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        (&lt;span class=&quot;dt&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Leaf&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Leaf&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-8&quot;&gt;&lt;a href=&quot;#cb15-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Leaf&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Leaf&lt;/span&gt;) (&lt;span class=&quot;dt&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Leaf&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Leaf&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&quot;generality&quot;&gt;Generality&lt;/h4&gt;&lt;p&gt;At this point you might be wondering: “what &lt;em&gt;can’t&lt;/em&gt; a fold do?”. The answer is: you can do essentially anything with a fold, although it might not necessarily be the most efficient solution to your problem. You can think of a fold as the most general-purpose interface for consuming a data structure because the &lt;code&gt;fold&lt;/code&gt; interface is a “lossless” way to process a data structure.&lt;/p&gt;&lt;p&gt;To see why a fold is a “lossless” interface, let’s revisit the &lt;code&gt;fold&lt;/code&gt; function for &lt;code&gt;Tree&lt;/code&gt;s and this time we will pass in the &lt;code&gt;Node&lt;/code&gt; and &lt;code&gt;Leaf&lt;/code&gt; constructors as the inputs to the &lt;code&gt;fold&lt;/code&gt;. In other words, we will replace all occurrences of &lt;code&gt;Node&lt;/code&gt; with &lt;code&gt;Node&lt;/code&gt; and replace all occurrences of &lt;code&gt;Leaf&lt;/code&gt; with &lt;code&gt;Leaf&lt;/code&gt;:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb16&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb16-1&quot;&gt;&lt;a href=&quot;#cb16-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;fold &lt;span class=&quot;dt&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Leaf&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Leaf&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Leaf&lt;/span&gt;) (&lt;span class=&quot;dt&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Leaf&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Leaf&lt;/span&gt;))&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb16-2&quot;&gt;&lt;a href=&quot;#cb16-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Leaf&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Leaf&lt;/span&gt;) (&lt;span class=&quot;dt&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Leaf&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Leaf&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This gives us back the original data structure, demonstrating how we always have the option for a &lt;code&gt;fold&lt;/code&gt; to recover the original pristine input. This is what I mean when I say that a fold is a lossless interface.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</content><link rel="replies" type="application/atom+xml" href="https://www.haskellforall.com/feeds/446837723524958645/comments/default" title="Post Comments"><link rel="replies" type="text/html" href="https://www.haskellforall.com/2021/02/folds-are-constructor-substitution.html#comment-form" title="5 Comments"><link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/446837723524958645"><link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/446837723524958645"><link rel="alternate" type="text/html" href="https://www.haskellforall.com/2021/02/folds-are-constructor-substitution.html" title="Folds are constructor substitution"><author><name>Gabriel Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/></author><thr:total>5</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-1414190323498104045</id><published>2021-01-31T11:22:00.000-08:00</published><updated>2021-01-31T11:22:13.626-08:00</updated><title type="text">Dynamic type errors lack relevance</title><content type="html">&lt;!DOCTYPE html&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;utf-8&quot; /&gt;  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;  &lt;title&gt;pure-exceptions&lt;/title&gt;  &lt;style&gt;    code{white-space: pre-wrap;}     span.smallcaps{font-variant: small-caps;}     span.underline{text-decoration: underline;}     div.column{display: inline-block; vertical-align: top; width: 50%;}     div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}     ul.task-list{list-style: none;}     pre &gt; code.sourceCode { white-space: pre; position: relative; }     pre &gt; code.sourceCode &gt; span { display: inline-block; line-height: 1.25; }     pre &gt; code.sourceCode &gt; span:empty { height: 1.2em; }     code.sourceCode &gt; span { color: inherit; text-decoration: inherit; }     div.sourceCode { margin: 1em 0; }     pre.sourceCode { margin: 0; }     @media screen {     div.sourceCode { overflow: auto; }     }     @media print {     pre &gt; code.sourceCode { white-space: pre-wrap; }     pre &gt; code.sourceCode &gt; span { text-indent: -5em; padding-left: 5em; }     }     pre.numberSource code       { counter-reset: source-line 0; }     pre.numberSource code &gt; span       { position: relative; left: -4em; counter-increment: source-line; }     pre.numberSource code &gt; span &gt; a:first-child::before       { content: counter(source-line);         position: relative; left: -1em; text-align: right; vertical-align: baseline;         border: none; display: inline-block;         -webkit-touch-callout: none; -webkit-user-select: none;         -khtml-user-select: none; -moz-user-select: none;         -ms-user-select: none; user-select: none;         padding: 0 4px; width: 4em;         color: #aaaaaa;       }     pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }     div.sourceCode       {   }     @media screen {     pre &gt; code.sourceCode &gt; span &gt; a:first-child::before { text-decoration: underline; }     }     code span.al { color: #ff0000; font-weight: bold; } /* Alert */     code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */     code span.at { color: #7d9029; } /* Attribute */     code span.bn { color: #40a070; } /* BaseN */     code span.bu { } /* BuiltIn */     code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */     code span.ch { color: #4070a0; } /* Char */     code span.cn { color: #880000; } /* Constant */     code span.co { color: #60a0b0; font-style: italic; } /* Comment */     code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */     code span.do { color: #ba2121; font-style: italic; } /* Documentation */     code span.dt { color: #902000; } /* DataType */     code span.dv { color: #40a070; } /* DecVal */     code span.er { color: #ff0000; font-weight: bold; } /* Error */     code span.ex { } /* Extension */     code span.fl { color: #40a070; } /* Float */     code span.fu { color: #06287e; } /* Function */     code span.im { } /* Import */     code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */     code span.kw { color: #007020; font-weight: bold; } /* Keyword */     code span.op { color: #666666; } /* Operator */     code span.ot { color: #007020; } /* Other */     code span.pp { color: #bc7a00; } /* Preprocessor */     code span.sc { color: #4070a0; } /* SpecialChar */     code span.ss { color: #bb6688; } /* SpecialString */     code span.st { color: #4070a0; } /* String */     code span.va { color: #19177c; } /* Variable */     code span.vs { color: #4070a0; } /* VerbatimString */     code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */   &lt;/style&gt;  &lt;!--[if lt IE 9]&gt;    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;  &lt;![endif]--&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;Proponents of statically typed languages commonly motivate types as a way to safely detect bugs ahead of time. For example, consider the following Python program that attempts to increment a number stored in &lt;code&gt;counter.txt&lt;/code&gt;:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# ./increment.py&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;#cb1-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;#39;counter.txt&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; handle:&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-4&quot;&gt;&lt;a href=&quot;#cb1-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    x &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; handle.readline()&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-5&quot;&gt;&lt;a href=&quot;#cb1-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-6&quot;&gt;&lt;a href=&quot;#cb1-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;cf&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;#39;counter.txt&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;) &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; handle:&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-7&quot;&gt;&lt;a href=&quot;#cb1-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    handle.write(&lt;span class=&quot;bu&quot;&gt;int&lt;/span&gt;(x) &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This program contains a type error, but by the time we find out it’s too late: our program will have already wiped the contents of &lt;code&gt;counter.txt&lt;/code&gt; by opening the file as a writable handle:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;$ &lt;span class=&quot;bu&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;st&quot;&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; ./counter.txt&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;#cb2-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;$ &lt;span class=&quot;fu&quot;&gt;cat&lt;/span&gt; counter.txt&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-4&quot;&gt;&lt;a href=&quot;#cb2-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-5&quot;&gt;&lt;a href=&quot;#cb2-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-6&quot;&gt;&lt;a href=&quot;#cb2-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;$ &lt;span class=&quot;ex&quot;&gt;python&lt;/span&gt; increment.py&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-7&quot;&gt;&lt;a href=&quot;#cb2-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;Traceback&lt;/span&gt; (most recent call last)&lt;span class=&quot;bu&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-8&quot;&gt;&lt;a href=&quot;#cb2-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;increment.py&amp;quot;&lt;/span&gt;, line 5, in &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;module&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-9&quot;&gt;&lt;a href=&quot;#cb2-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ex&quot;&gt;handle.write&lt;/span&gt;(int(x) &lt;span class=&quot;ex&quot;&gt;+&lt;/span&gt; 1)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-10&quot;&gt;&lt;a href=&quot;#cb2-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;TypeError&lt;/span&gt;: expected a string or other character buffer object&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-11&quot;&gt;&lt;a href=&quot;#cb2-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-12&quot;&gt;&lt;a href=&quot;#cb2-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;$ &lt;span class=&quot;fu&quot;&gt;cat&lt;/span&gt; counter.txt  # The contents of the file were lost&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Defenders of dynamically typed languages sometimes counter that these pitfalls do not matter when runtime failures are mostly harmless. If you want to find errors in your program, just run the program!&lt;/p&gt;&lt;p&gt;As an extreme example, Nix is a purely functional language with a dynamic type system, and you can safely interpret a Nix program ahead of time to detect errors since Nix evaluation has no side effects&lt;a href=&quot;#fn1&quot; class=&quot;footnote-ref&quot; id=&quot;fnref1&quot; role=&quot;doc-noteref&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;. Consequently, Nix proponents sometimes reason that these dynamic type errors are functionally indistinguishable from static type errors thanks to Nix’s purity.&lt;/p&gt;&lt;p&gt;However, dynamic types are not a substitute for static types, even in a purely functional language like Nix. To see why, consider the following Nix expression, which attempts to render a structured value as command-line options:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode nix&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# ./options.nix&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;#cb3-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-3&quot;&gt;&lt;a href=&quot;#cb3-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;bu&quot;&gt;let&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-4&quot;&gt;&lt;a href=&quot;#cb3-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;pkgs&lt;/span&gt; = import &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;nixpkgs&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; { };&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-5&quot;&gt;&lt;a href=&quot;#cb3-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-6&quot;&gt;&lt;a href=&quot;#cb3-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;bu&quot;&gt;enable&lt;/span&gt; = option: &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${option}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;=true&amp;quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-7&quot;&gt;&lt;a href=&quot;#cb3-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-8&quot;&gt;&lt;a href=&quot;#cb3-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;disable&lt;/span&gt; = option: &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${option}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;=false&amp;quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-9&quot;&gt;&lt;a href=&quot;#cb3-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-10&quot;&gt;&lt;a href=&quot;#cb3-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-11&quot;&gt;&lt;a href=&quot;#cb3-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;pkgs.lib.cli.toGNUCommandLine&lt;/span&gt; { }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-12&quot;&gt;&lt;a href=&quot;#cb3-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ex&quot;&gt;option&lt;/span&gt; = [&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-13&quot;&gt;&lt;a href=&quot;#cb3-13&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;st&quot;&gt;&amp;quot;max-jobs=5&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-14&quot;&gt;&lt;a href=&quot;#cb3-14&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;st&quot;&gt;&amp;quot;cores=4&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-15&quot;&gt;&lt;a href=&quot;#cb3-15&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;bu&quot;&gt;enable&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;fallback&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-16&quot;&gt;&lt;a href=&quot;#cb3-16&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      ];&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-17&quot;&gt;&lt;a href=&quot;#cb3-17&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The intention was to produce this result:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode nix&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;#cb4-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;bu&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;--option&amp;quot;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;max-jobs=5&amp;quot;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;--option&amp;quot;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;cores=4&amp;quot;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;--option&amp;quot;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;fallback=true&amp;quot;&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt; ]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… but we actually get a dynamic type error when we interpret the expression:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ nix-instantiate --eval options.nix --strict&lt;br /&gt;error: evaluation aborted with the following error message: &amp;#39;generators.mkValueStringDefault: functions not supported: &amp;lt;λ&amp;gt;&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This error message is not very helpful, and it’s not due to a lack of effort, funding, or attention. This sort of poor user experience is inherent to any dynamic type system.&lt;/p&gt;&lt;p&gt;The fundamental issue is that in a dynamically typed language you cannot explain errors to the user in terms of the source code they wrote. In other words, dynamic type errors commonly fail to be &lt;strong&gt;relevant&lt;/strong&gt; to the user.&lt;/p&gt;&lt;p&gt;For example, if Nix had a typical static type system, then the diagnostic might have looked something like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb6&quot;&gt;&lt;pre class=&quot;sourceCode nix&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb6-1&quot;&gt;&lt;a href=&quot;#cb6-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# ./options.nix&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-2&quot;&gt;&lt;a href=&quot;#cb6-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-3&quot;&gt;&lt;a href=&quot;#cb6-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;bu&quot;&gt;let&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-4&quot;&gt;&lt;a href=&quot;#cb6-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;pkgs&lt;/span&gt; = import &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;nixpkgs&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; { };&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-5&quot;&gt;&lt;a href=&quot;#cb6-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-6&quot;&gt;&lt;a href=&quot;#cb6-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;bu&quot;&gt;enable&lt;/span&gt; = option: &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${option}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;=true&amp;quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-7&quot;&gt;&lt;a href=&quot;#cb6-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-8&quot;&gt;&lt;a href=&quot;#cb6-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;disable&lt;/span&gt; = option: &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${option}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;=false&amp;quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-9&quot;&gt;&lt;a href=&quot;#cb6-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-10&quot;&gt;&lt;a href=&quot;#cb6-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-11&quot;&gt;&lt;a href=&quot;#cb6-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;pkgs.lib.cli.toGNUCommandLine&lt;/span&gt; { }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-12&quot;&gt;&lt;a href=&quot;#cb6-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ex&quot;&gt;option&lt;/span&gt; = [&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-13&quot;&gt;&lt;a href=&quot;#cb6-13&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;st&quot;&gt;&amp;quot;max-jobs=5&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-14&quot;&gt;&lt;a href=&quot;#cb6-14&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;st&quot;&gt;&amp;quot;cores=4&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-15&quot;&gt;&lt;a href=&quot;#cb6-15&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;bu&quot;&gt;enable&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;fallback&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-16&quot;&gt;&lt;a href=&quot;#cb6-16&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;#       ~~~~~~&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-17&quot;&gt;&lt;a href=&quot;#cb6-17&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;#       This element of the list is not a string&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-18&quot;&gt;&lt;a href=&quot;#cb6-18&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      ];&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-19&quot;&gt;&lt;a href=&quot;#cb6-19&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This sort of diagnostic helps us more easily discern that we forgot to parenthesize &lt;code&gt;(enable &quot;fallback&quot;)&lt;/code&gt;, so the &lt;code&gt;enable&lt;/code&gt; function is treated as another list element.&lt;/p&gt;&lt;p&gt;In a dynamic type system, type errors can potentially be far removed from the code that the user wrote. From Nix’s point of view, the actual error is that somewhere in the middle of interpretation it is trying to apply a &lt;code&gt;mkValueStringDefault&lt;/code&gt; utility function to the user’s &lt;code&gt;exclaim&lt;/code&gt; function:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb7&quot;&gt;&lt;pre class=&quot;sourceCode nix&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb7-1&quot;&gt;&lt;a href=&quot;#cb7-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;mkValueStringDefault&lt;/span&gt; enable&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… but by that point the Nix interpreter is no longer “thinking” in terms of the original program the user wrote, so any interpreter diagnostics will have difficulty explaining the error in terms that the user can understand. For example:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;In the middle of interpretation any offending subexpressions are abstract syntax trees, not source code&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Some of these abstract syntax trees may be functions or closures that cannot be (easily) displayed to the user&lt;/p&gt;&lt;p&gt;We see this above where the error message is unable to render the &lt;code&gt;enable&lt;/code&gt; function so it falls back to displaying &lt;code&gt;&amp;lt;λ&amp;gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Intermediate evaluation results might not correspond to the source code at all&lt;/p&gt;&lt;p&gt;For example, the user might not understand where &lt;code&gt;mkValueStringDefault&lt;/code&gt; is originating from in the absence of a stack trace.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Even if we could trace subexpressions to their original source code the user still might not be able to work backwards from the dynamic type error to the real problem.&lt;/p&gt;&lt;p&gt;In other words, even if we showed the user the call site for the &lt;code&gt;mkValueStringDefault&lt;/code&gt; function they still wouldn’t necessarily understand why &lt;code&gt;exclaim&lt;/code&gt; is the function argument.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;In fact, the example error message came out better than I expected. The reason why is because somebody took the time to add a custom error message to the &lt;code&gt;mkValueStringDefault&lt;/code&gt; utility instead of falling back on the interpreter throwing a dynamic type error:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb8&quot;&gt;&lt;pre class=&quot;sourceCode nix&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb8-1&quot;&gt;&lt;a href=&quot;#cb8-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;mkValueStringDefault&lt;/span&gt; = {}: &lt;span class=&quot;ex&quot;&gt;v&lt;/span&gt;: with builtins&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-2&quot;&gt;&lt;a href=&quot;#cb8-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;bu&quot;&gt;let&lt;/span&gt; err = t: v: abort&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-3&quot;&gt;&lt;a href=&quot;#cb8-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;kw&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;generators.mkValueStringDefault: &amp;quot;&lt;/span&gt; &lt;span class=&quot;ex&quot;&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-4&quot;&gt;&lt;a href=&quot;#cb8-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;           &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${t}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt; not supported: &lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${toPretty&lt;/span&gt;&lt;span class=&quot;er&quot;&gt; {&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt; v}&amp;quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-5&quot;&gt;&lt;a href=&quot;#cb8-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;  …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Had they not done so then the error message would have been even further disconnected from the user’s experience. This only reinforces that the relevance of error messages is inversely proportional to the extent to which we avail ourselves of the dynamic type system.&lt;/p&gt;&lt;p&gt;This is why I prefer to lean on static type systems as much as possible to detect errors, because they tend to do a better job of “explaining” what went wrong than dynamic type systems.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Note: The criticisms in this post also apply to exceptions in general (where you can view dynamic types as a special case of exceptions auto-generated by the interpreter). Exceptions also need to be supplemented by stack traces, logging, or debuggers in order to improve their relevance.&lt;/p&gt;&lt;/blockquote&gt;&lt;section class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li id=&quot;fn1&quot; role=&quot;doc-endnote&quot;&gt;&lt;p&gt;Technically, Nix evaluation can trigger builds via “import from derivation”. However, with appropriate sandboxing even builds are mostly harmless. Either way, just assume for the purpose of discussion that Nix evaluation is safe. After all, any unsafety in evaluation only makes the case for static types even stronger.&lt;a href=&quot;#fnref1&quot; class=&quot;footnote-back&quot; role=&quot;doc-backlink&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/section&gt;&lt;/body&gt;&lt;/html&gt;</content><link rel="replies" type="application/atom+xml" href="https://www.haskellforall.com/feeds/1414190323498104045/comments/default" title="Post Comments"><link rel="replies" type="text/html" href="https://www.haskellforall.com/2021/01/dynamic-type-errors-lack-relevance.html#comment-form" title="5 Comments"><link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/1414190323498104045"><link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/1414190323498104045"><link rel="alternate" type="text/html" href="https://www.haskellforall.com/2021/01/dynamic-type-errors-lack-relevance.html" title="Dynamic type errors lack relevance"><author><name>Gabriel Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/></author><thr:total>5</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-8137932186432001110</id><published>2021-01-04T08:09:00.003-08:00</published><updated>2021-01-05T08:05:43.565-08:00</updated><title type="text">The visitor pattern is essentially the same thing as Church encoding</title><content type="html">&lt;!DOCTYPE html&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;utf-8&quot; /&gt;  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;  &lt;title&gt;church-encoding&lt;/title&gt;  &lt;style&gt;    code{white-space: pre-wrap;}     span.smallcaps{font-variant: small-caps;}     span.underline{text-decoration: underline;}     div.column{display: inline-block; vertical-align: top; width: 50%;}     div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}     ul.task-list{list-style: none;}     pre &gt; code.sourceCode { white-space: pre; position: relative; }     pre &gt; code.sourceCode &gt; span { display: inline-block; line-height: 1.25; }     pre &gt; code.sourceCode &gt; span:empty { height: 1.2em; }     code.sourceCode &gt; span { color: inherit; text-decoration: inherit; }     div.sourceCode { margin: 1em 0; }     pre.sourceCode { margin: 0; }     @media screen {     div.sourceCode { overflow: auto; }     }     @media print {     pre &gt; code.sourceCode { white-space: pre-wrap; }     pre &gt; code.sourceCode &gt; span { text-indent: -5em; padding-left: 5em; }     }     pre.numberSource code       { counter-reset: source-line 0; }     pre.numberSource code &gt; span       { position: relative; left: -4em; counter-increment: source-line; }     pre.numberSource code &gt; span &gt; a:first-child::before       { content: counter(source-line);         position: relative; left: -1em; text-align: right; vertical-align: baseline;         border: none; display: inline-block;         -webkit-touch-callout: none; -webkit-user-select: none;         -khtml-user-select: none; -moz-user-select: none;         -ms-user-select: none; user-select: none;         padding: 0 4px; width: 4em;         color: #aaaaaa;       }     pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }     div.sourceCode       {   }     @media screen {     pre &gt; code.sourceCode &gt; span &gt; a:first-child::before { text-decoration: underline; }     }     code span.al { color: #ff0000; font-weight: bold; } /* Alert */     code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */     code span.at { color: #7d9029; } /* Attribute */     code span.bn { color: #40a070; } /* BaseN */     code span.bu { } /* BuiltIn */     code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */     code span.ch { color: #4070a0; } /* Char */     code span.cn { color: #880000; } /* Constant */     code span.co { color: #60a0b0; font-style: italic; } /* Comment */     code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */     code span.do { color: #ba2121; font-style: italic; } /* Documentation */     code span.dt { color: #902000; } /* DataType */     code span.dv { color: #40a070; } /* DecVal */     code span.er { color: #ff0000; font-weight: bold; } /* Error */     code span.ex { } /* Extension */     code span.fl { color: #40a070; } /* Float */     code span.fu { color: #06287e; } /* Function */     code span.im { } /* Import */     code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */     code span.kw { color: #007020; font-weight: bold; } /* Keyword */     code span.op { color: #666666; } /* Operator */     code span.ot { color: #007020; } /* Other */     code span.pp { color: #bc7a00; } /* Preprocessor */     code span.sc { color: #4070a0; } /* SpecialChar */     code span.ss { color: #bb6688; } /* SpecialString */     code span.st { color: #4070a0; } /* String */     code span.va { color: #19177c; } /* Variable */     code span.vs { color: #4070a0; } /* VerbatimString */     code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */     .display.math{display: block; text-align: center; margin: 0.5rem auto;}   &lt;/style&gt;  &lt;!--[if lt IE 9]&gt;    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;  &lt;![endif]--&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;This post explains how the &lt;a href=&quot;https://en.wikipedia.org/wiki/Visitor_pattern&quot;&gt;visitor pattern&lt;/a&gt; is essentially the same thing as &lt;a href=&quot;https://en.wikipedia.org/wiki/Church_encoding&quot;&gt;Church encoding&lt;/a&gt; (or Böhm-Berarducci encoding). This post also explains how you can usefully employ the visitor pattern / Church encoding / Böhm-Berarducci encoding to expand your programming toolbox.&lt;/p&gt;&lt;h4 id=&quot;background&quot;&gt;Background&lt;/h4&gt;&lt;p&gt;Church encoding is named after &lt;a href=&quot;https://en.wikipedia.org/wiki/Alonzo_Church&quot;&gt;Alonzo Church&lt;/a&gt;, who discovered that you could model any type of data structure in the untyped lambda calculus using only functions. The context for this was that he was trying to show that lambda calculus could be treated as a universal computational engine, even though the only features it supported were functions.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Later on, Corrado Böhm and Alessandro Berarducci devised the equivalent solution in a typed lambda calculus (specifically, System F):&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.sciencedirect.com/science/article/pii/0304397585901355&quot;&gt;Automatic synthesis of typed Λ-programs on term algebras&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;… so I’ll use “Church encoding” when talking about this trick in the context of an untyped language and use “Böhm-Berarducci” encoding when talking about the same trick in the context of a typed language. If we’re not talking about any specific language then I’ll use “Church encoding”.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;In particular, you can model the following types of data structures using language support for functions and nothing else:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;records / structs (known as “product types” if you want to get fancy)&lt;/p&gt;&lt;p&gt;The “product” of two types &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; is a type that stores both an &lt;code&gt;A&lt;/code&gt; &lt;strong&gt;and&lt;/strong&gt; a &lt;code&gt;B&lt;/code&gt; (e.g. a record with two fields, where the first field has type &lt;code&gt;A&lt;/code&gt; and the second has type &lt;code&gt;B&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;enums / tagged unions (known as “sum types”)&lt;/p&gt;&lt;p&gt;The “sum” of two types &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; is a type that stores either an &lt;code&gt;A&lt;/code&gt; &lt;strong&gt;or&lt;/strong&gt; a &lt;code&gt;B&lt;/code&gt;. (e.g. a tagged union where the first tag stores a value of type &lt;code&gt;A&lt;/code&gt; and the second tag stores a value of type &lt;code&gt;B&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;recursive data structures&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;… and if you can precisely model product types, sum types, and recursion, then you can essentially model any data structure. I’m oversimplifying things, but that’s close enough to true for our purposes.&lt;/p&gt;&lt;h4 id=&quot;relevance&quot;&gt;Relevance&lt;/h4&gt;&lt;p&gt;The reason we care about Church-encoding is because not all programming languages natively support sum types or recursion (although most programming languages support product types in the form of records / structs).&lt;/p&gt;&lt;p&gt;However, most programming languages &lt;em&gt;do&lt;/em&gt; support functions, so if we have functions then we can use them as a “backdoor” to introduce support for sum types or recursion into our language. This is the essence of the visitor pattern: using functions to Church-encode sum types or recursion into a language that does not natively support sum types or recursion.&lt;/p&gt;&lt;p&gt;To illustrate this, suppose that we begin from the following Haskell code:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Shape&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Circle&lt;/span&gt;{&lt;span class=&quot;ot&quot;&gt; x ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt;,&lt;span class=&quot;ot&quot;&gt; y ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt;,&lt;span class=&quot;ot&quot;&gt; r ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;#cb1-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Rectangle&lt;/span&gt;{&lt;span class=&quot;ot&quot;&gt; x ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt;,&lt;span class=&quot;ot&quot;&gt; y ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt;,&lt;span class=&quot;ot&quot;&gt; w ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt;,&lt;span class=&quot;ot&quot;&gt; h ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-4&quot;&gt;&lt;a href=&quot;#cb1-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-5&quot;&gt;&lt;a href=&quot;#cb1-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;exampleCircle ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Shape&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-6&quot;&gt;&lt;a href=&quot;#cb1-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;exampleCircle &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Circle&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;2.0&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;1.4&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;4.5&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-7&quot;&gt;&lt;a href=&quot;#cb1-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-8&quot;&gt;&lt;a href=&quot;#cb1-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;exampleRectangle ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Shape&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-9&quot;&gt;&lt;a href=&quot;#cb1-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;exampleRectangle &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Rectangle&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;1.3&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;3.1&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;10.3&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;7.7&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-10&quot;&gt;&lt;a href=&quot;#cb1-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-11&quot;&gt;&lt;a href=&quot;#cb1-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;area ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Shape&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-12&quot;&gt;&lt;a href=&quot;#cb1-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;area shape &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; shape &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-13&quot;&gt;&lt;a href=&quot;#cb1-13&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;Circle&lt;/span&gt;    x y r   &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-14&quot;&gt;&lt;a href=&quot;#cb1-14&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;Rectangle&lt;/span&gt; x y w h &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; w &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; h&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-15&quot;&gt;&lt;a href=&quot;#cb1-15&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-16&quot;&gt;&lt;a href=&quot;#cb1-16&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;main ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;IO&lt;/span&gt; ()&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-17&quot;&gt;&lt;a href=&quot;#cb1-17&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;main &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-18&quot;&gt;&lt;a href=&quot;#cb1-18&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;print&lt;/span&gt; (area exampleCircle)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-19&quot;&gt;&lt;a href=&quot;#cb1-19&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;print&lt;/span&gt; (area exampleRectangle)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… but then we hypothetically disable Haskell’s support for algebraic data types. How would we amend our example to still work in such a restricted subset of the language?&lt;/p&gt;&lt;p&gt;We’d use Böhm-Berarducci encoding (the typed version of Church-encoding), and the solution would look like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;{-# LANGUAGE RankNTypes #-}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;#cb2-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- | This plays the same role as the old `Shape` type&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-4&quot;&gt;&lt;a href=&quot;#cb2-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Shape&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;forall&lt;/span&gt; shape&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-5&quot;&gt;&lt;a href=&quot;#cb2-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;  (&lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; shape)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-6&quot;&gt;&lt;a href=&quot;#cb2-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; shape)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-7&quot;&gt;&lt;a href=&quot;#cb2-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; shape&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-8&quot;&gt;&lt;a href=&quot;#cb2-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-9&quot;&gt;&lt;a href=&quot;#cb2-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- | This plays the same role as the old `Circle` constructor&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-10&quot;&gt;&lt;a href=&quot;#cb2-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;_Circle ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Shape&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-11&quot;&gt;&lt;a href=&quot;#cb2-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;_Circle x y r &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; \_Circle _Rectangle &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; _Circle x y r&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-12&quot;&gt;&lt;a href=&quot;#cb2-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-13&quot;&gt;&lt;a href=&quot;#cb2-13&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- | This plays the same role as the old `Rectangle` constructor&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-14&quot;&gt;&lt;a href=&quot;#cb2-14&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;_Rectangle ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Shape&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-15&quot;&gt;&lt;a href=&quot;#cb2-15&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;_Rectangle x y w h &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; \_Circle _Rectangle &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; _Rectangle x y w h&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-16&quot;&gt;&lt;a href=&quot;#cb2-16&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-17&quot;&gt;&lt;a href=&quot;#cb2-17&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;exampleCircle ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Shape&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-18&quot;&gt;&lt;a href=&quot;#cb2-18&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;exampleCircle &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; _Circle &lt;span class=&quot;fl&quot;&gt;2.0&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;1.4&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;4.5&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-19&quot;&gt;&lt;a href=&quot;#cb2-19&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-20&quot;&gt;&lt;a href=&quot;#cb2-20&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;exampleRectangle ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Shape&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-21&quot;&gt;&lt;a href=&quot;#cb2-21&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;exampleRectangle &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; _Rectangle &lt;span class=&quot;fl&quot;&gt;1.3&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;3.1&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;10.3&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;7.7&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-22&quot;&gt;&lt;a href=&quot;#cb2-22&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-23&quot;&gt;&lt;a href=&quot;#cb2-23&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;area ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Shape&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-24&quot;&gt;&lt;a href=&quot;#cb2-24&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;area shape &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; shape&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-25&quot;&gt;&lt;a href=&quot;#cb2-25&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    (\x y r   &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-26&quot;&gt;&lt;a href=&quot;#cb2-26&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    (\x y w h &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; w &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; h)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-27&quot;&gt;&lt;a href=&quot;#cb2-27&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-28&quot;&gt;&lt;a href=&quot;#cb2-28&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;main ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;IO&lt;/span&gt; ()&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-29&quot;&gt;&lt;a href=&quot;#cb2-29&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;main &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-30&quot;&gt;&lt;a href=&quot;#cb2-30&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;print&lt;/span&gt; (area exampleCircle)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-31&quot;&gt;&lt;a href=&quot;#cb2-31&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;print&lt;/span&gt; (area exampleRectangle)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The key is the new representation of the &lt;code&gt;Shape&lt;/code&gt; type, which is the type of a higher-order function. In fact, if we squint we might recognize that the &lt;code&gt;Shape&lt;/code&gt; type synonym:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Shape&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;forall&lt;/span&gt; shape&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;#cb3-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;  (&lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; shape)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-3&quot;&gt;&lt;a href=&quot;#cb3-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; shape)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-4&quot;&gt;&lt;a href=&quot;#cb3-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; shape&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… looks an awful lot like a GADT-style definition for the &lt;code&gt;Shape&lt;/code&gt; type:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;#cb4-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;{-# LANGUAGE GADTs #-}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-2&quot;&gt;&lt;a href=&quot;#cb4-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-3&quot;&gt;&lt;a href=&quot;#cb4-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Shape&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-4&quot;&gt;&lt;a href=&quot;#cb4-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;Circle&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;    ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Shape&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-5&quot;&gt;&lt;a href=&quot;#cb4-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;Rectangle&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Shape&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is not a coincidence! Essentially, Böhm-Berarducci encoding models a type as a function that expects each “constructor” as a function argument that has the same type as that constructor. I put “constructor” in quotes since we never actually use a real constructor. Those function arguments are place-holders that will remain abstract until we attempt to “pattern match” on a value of type &lt;code&gt;Shape&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;In the &lt;code&gt;area&lt;/code&gt; function we “pattern match” on &lt;code&gt;Shape&lt;/code&gt; by supplying handlers instead of constructors. To make this explicit, let’s use &lt;a href=&quot;https://www.haskellforall.com/2013/12/equational-reasoning.html&quot;&gt;equational reasoning&lt;/a&gt; to see what happens when we evaluate &lt;code&gt;area exampleCircle&lt;/code&gt;:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;#cb5-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;area exampleCircle&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-2&quot;&gt;&lt;a href=&quot;#cb5-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-3&quot;&gt;&lt;a href=&quot;#cb5-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Substitute the `area` function with its definition&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-4&quot;&gt;&lt;a href=&quot;#cb5-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; exampleCircle&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-5&quot;&gt;&lt;a href=&quot;#cb5-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    (\x y r   &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-6&quot;&gt;&lt;a href=&quot;#cb5-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    (\x y w h &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; w &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; h)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-7&quot;&gt;&lt;a href=&quot;#cb5-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-8&quot;&gt;&lt;a href=&quot;#cb5-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Substitute `exampleCircle` with its definition&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-9&quot;&gt;&lt;a href=&quot;#cb5-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; _Circle &lt;span class=&quot;fl&quot;&gt;2.0&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;1.4&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;4.5&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-10&quot;&gt;&lt;a href=&quot;#cb5-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    (\x y r   &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-11&quot;&gt;&lt;a href=&quot;#cb5-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    (\x y w h &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; w &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; h)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-12&quot;&gt;&lt;a href=&quot;#cb5-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-13&quot;&gt;&lt;a href=&quot;#cb5-13&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Substitute the `_Circle` function with its definition&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-14&quot;&gt;&lt;a href=&quot;#cb5-14&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (\_Circle _Rectangle &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; _Circle &lt;span class=&quot;fl&quot;&gt;2.0&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;1.4&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;4.5&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-15&quot;&gt;&lt;a href=&quot;#cb5-15&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    (\x y r   &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-16&quot;&gt;&lt;a href=&quot;#cb5-16&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    (\x y w h &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; w &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; h)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-17&quot;&gt;&lt;a href=&quot;#cb5-17&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-18&quot;&gt;&lt;a href=&quot;#cb5-18&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Evaluate the outer-most anonymous function&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-19&quot;&gt;&lt;a href=&quot;#cb5-19&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (\x y r &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;fl&quot;&gt;2.0&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;1.4&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;4.5&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-20&quot;&gt;&lt;a href=&quot;#cb5-20&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-21&quot;&gt;&lt;a href=&quot;#cb5-21&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Evaluate the anonymous function&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-22&quot;&gt;&lt;a href=&quot;#cb5-22&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;4.5&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In other words, Church encoding / Böhm-Berarducci encoding both work by maintaining a fiction that eventually somebody will provide us the “real” constructors right up until we actually need them. Then when we “pattern match” on the value we pull a last-minute bait-and-switch and use each “handler” of the pattern match where the constructor would normally go and everything works out so that we don’t need the constructor after all. Church-encoding is sort of like the functional programming equivalent of &lt;a href=&quot;https://en.wikipedia.org/wiki/Fake_it_till_you_make_it&quot;&gt;“fake it until you make it”&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The same trick works for recursive data structures as well. For example, the way that we Böhm-Berarducci-encode this Haskell data structure:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb6&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb6-1&quot;&gt;&lt;a href=&quot;#cb6-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Tree&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Tree&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Tree&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Leaf&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-2&quot;&gt;&lt;a href=&quot;#cb6-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-3&quot;&gt;&lt;a href=&quot;#cb6-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;exampleTree ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Tree&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-4&quot;&gt;&lt;a href=&quot;#cb6-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;exampleTree &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Leaf&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Leaf&lt;/span&gt;) (&lt;span class=&quot;dt&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Leaf&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Leaf&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-5&quot;&gt;&lt;a href=&quot;#cb6-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-6&quot;&gt;&lt;a href=&quot;#cb6-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;preorder ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Tree&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-7&quot;&gt;&lt;a href=&quot;#cb6-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;preorder tree &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; tree &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-8&quot;&gt;&lt;a href=&quot;#cb6-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;Node&lt;/span&gt; value left right &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; value &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; preorder left &lt;span class=&quot;op&quot;&gt;++&lt;/span&gt; preorder right&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-9&quot;&gt;&lt;a href=&quot;#cb6-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;Leaf&lt;/span&gt;                  &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; []&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-10&quot;&gt;&lt;a href=&quot;#cb6-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-11&quot;&gt;&lt;a href=&quot;#cb6-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;main ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;IO&lt;/span&gt; ()&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-12&quot;&gt;&lt;a href=&quot;#cb6-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;main &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;print&lt;/span&gt; (preorder exampleTree)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… is like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb7&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb7-1&quot;&gt;&lt;a href=&quot;#cb7-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;{-# LANGUAGE RankNTypes #-}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-2&quot;&gt;&lt;a href=&quot;#cb7-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-3&quot;&gt;&lt;a href=&quot;#cb7-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Tree&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;forall&lt;/span&gt; tree&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-4&quot;&gt;&lt;a href=&quot;#cb7-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;  (&lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; tree &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; tree &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; tree)  &lt;span class=&quot;co&quot;&gt;-- Node :: Int -&amp;gt; Tree -&amp;gt; Tree -&amp;gt; Tree&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-5&quot;&gt;&lt;a href=&quot;#cb7-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; tree                           &lt;span class=&quot;co&quot;&gt;-- Leaf :: Tree&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-6&quot;&gt;&lt;a href=&quot;#cb7-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; tree&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-7&quot;&gt;&lt;a href=&quot;#cb7-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-8&quot;&gt;&lt;a href=&quot;#cb7-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;_Node ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Tree&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Tree&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Tree&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-9&quot;&gt;&lt;a href=&quot;#cb7-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;_Node value left right &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-10&quot;&gt;&lt;a href=&quot;#cb7-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    \_Node _Leaf &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; _Node value (left _Node _Leaf) (right _Node _Leaf)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-11&quot;&gt;&lt;a href=&quot;#cb7-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-12&quot;&gt;&lt;a href=&quot;#cb7-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;_Leaf ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Tree&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-13&quot;&gt;&lt;a href=&quot;#cb7-13&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;_Leaf &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; \_Node _Leaf &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; _Leaf&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-14&quot;&gt;&lt;a href=&quot;#cb7-14&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-15&quot;&gt;&lt;a href=&quot;#cb7-15&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;exampleTree ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Tree&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-16&quot;&gt;&lt;a href=&quot;#cb7-16&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;exampleTree &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; _Node &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; (_Node &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; _Leaf _Leaf) (_Node &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; _Leaf _Leaf)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-17&quot;&gt;&lt;a href=&quot;#cb7-17&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-18&quot;&gt;&lt;a href=&quot;#cb7-18&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;preorder ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Tree&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-19&quot;&gt;&lt;a href=&quot;#cb7-19&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;preorder tree &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; tree&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-20&quot;&gt;&lt;a href=&quot;#cb7-20&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    (\value left right &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; value &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; left &lt;span class=&quot;op&quot;&gt;++&lt;/span&gt; right)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-21&quot;&gt;&lt;a href=&quot;#cb7-21&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    []&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-22&quot;&gt;&lt;a href=&quot;#cb7-22&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-23&quot;&gt;&lt;a href=&quot;#cb7-23&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;main ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;IO&lt;/span&gt; ()&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-24&quot;&gt;&lt;a href=&quot;#cb7-24&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;main &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;print&lt;/span&gt; (preorder exampleTree)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This time the translation is not quite as mechanical as before, due to the introduction of recursion. In particular, two differences stand out.&lt;/p&gt;&lt;p&gt;First, the way we encode the &lt;code&gt;_Node&lt;/code&gt; constructor is not as straightforward as we thought:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb8&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb8-1&quot;&gt;&lt;a href=&quot;#cb8-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;_Node ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Tree&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Tree&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Tree&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-2&quot;&gt;&lt;a href=&quot;#cb8-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;_Node value left right &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-3&quot;&gt;&lt;a href=&quot;#cb8-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    \_Node _Leaf &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; _Node value (left _Node _Leaf) (right _Node _Leaf)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is because we need to thread through the &lt;code&gt;_Node&lt;/code&gt; / &lt;code&gt;_Leaf&lt;/code&gt; function arguments through to the node’s children.&lt;/p&gt;&lt;p&gt;Second, the way we consume the &lt;code&gt;Tree&lt;/code&gt; is also different. Compare the original code:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb9&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb9-1&quot;&gt;&lt;a href=&quot;#cb9-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;preorder ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Tree&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb9-2&quot;&gt;&lt;a href=&quot;#cb9-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;preorder tree &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; tree &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb9-3&quot;&gt;&lt;a href=&quot;#cb9-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;Node&lt;/span&gt; value left right &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; value &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; preorder left &lt;span class=&quot;op&quot;&gt;++&lt;/span&gt; preorder right&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb9-4&quot;&gt;&lt;a href=&quot;#cb9-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;Leaf&lt;/span&gt;                  &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; []&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… to the Böhm-Berarducci-encoded version:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb10&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb10-1&quot;&gt;&lt;a href=&quot;#cb10-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;preorder ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Tree&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-2&quot;&gt;&lt;a href=&quot;#cb10-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;preorder tree &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; tree&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-3&quot;&gt;&lt;a href=&quot;#cb10-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    (\value left right &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; value &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; left &lt;span class=&quot;op&quot;&gt;++&lt;/span&gt; right)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-4&quot;&gt;&lt;a href=&quot;#cb10-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    []&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The latter version doesn’t require the &lt;code&gt;preorder&lt;/code&gt; function to recursively call itself. The &lt;code&gt;preorder&lt;/code&gt; function is performing a task that is morally recursive but the &lt;code&gt;preorder&lt;/code&gt; function is, strictly speaking, not recursive at all.&lt;/p&gt;&lt;p&gt;In fact, if we look at the Böhm-Berarducci-encoded solution closely we see that we never use recursion anywhere within the code! There are no recursive datatypes and there are also no recursive functions, yet somehow we still managed to encode a recursive data type and recursive functions on that type. This is what I mean when I say that Church encoding / Böhm-Berarducci encoding let you encode recursion in a language that does not natively support recursion. Our code would work just fine in a recursion-free subset of Haskell!&lt;/p&gt;&lt;p&gt;For example, &lt;a href=&quot;https://dhall-lang.org/&quot;&gt;Dhall&lt;/a&gt; is a real example of a language that does not natively support recursion and Dhall uses this same trick to model recursive data types and recursive functions:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://docs.dhall-lang.org/howtos/How-to-translate-recursive-code-to-Dhall.html&quot;&gt;How to translate recursive code to Dhall&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;That post goes into more detail about the algorithm for Böhm-Berarducci-encoding Haskell types, so you might find that post useful if the above examples were not sufficiently intuitive or clear.&lt;/p&gt;&lt;h4 id=&quot;visitor-pattern&quot;&gt;Visitor pattern&lt;/h4&gt;&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Visitor_pattern&quot;&gt;visitor pattern&lt;/a&gt; is a special case of Church encoding / Böhm Berarducci encoding. I’m not going to provide a standalone explanation of the visitor pattern since the linked Wikipedia page already does that. This section will focus on explaining the correspondence between Church encoding / Böhm-Berarducci encoding and the visitor pattern.&lt;/p&gt;&lt;p&gt;The exact correspondence goes like this. Given:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;a Church-encoded / Böhm-Berarducci-encoded type &lt;code&gt;T&lt;/code&gt;&lt;/p&gt;&lt;p&gt;e.g. &lt;code&gt;Shape&lt;/code&gt; in the first example&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;… with constructors &lt;code&gt;C₀&lt;/code&gt;, &lt;code&gt;C₁&lt;/code&gt;, &lt;code&gt;C₂&lt;/code&gt;, …&lt;/p&gt;&lt;p&gt;e.g. &lt;code&gt;Circle&lt;/code&gt;, &lt;code&gt;Rectangle&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;… and values of type &lt;code&gt;T&lt;/code&gt; named &lt;code&gt;v₀&lt;/code&gt;, &lt;code&gt;v₁&lt;/code&gt;, &lt;code&gt;v₂&lt;/code&gt;, …&lt;/p&gt;&lt;p&gt;e.g. &lt;code&gt;exampleCircle&lt;/code&gt;, &lt;code&gt;exampleRectangle&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;… then the correspondence (using terminology from the Wikipedia article) is:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;The “element” class corresponds to the type &lt;code&gt;T&lt;/code&gt;&lt;/p&gt;&lt;p&gt;e.g. &lt;code&gt;Shape&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;A “concrete element” (i.e. an object of the “element” class) corresponds to a constructor for the type &lt;code&gt;T&lt;/code&gt;&lt;/p&gt;&lt;p&gt;e.g. &lt;code&gt;Circle&lt;/code&gt;, &lt;code&gt;Rectangle&lt;/code&gt;&lt;/p&gt;&lt;p&gt;The &lt;code&gt;accept&lt;/code&gt; method of the element selects which handler from the visitor to use, in the same way that our Church-encoded constructors would select one handler (named after the matching constructor) out of all the handler functions supplied to them.&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb11&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb11-1&quot;&gt;&lt;a href=&quot;#cb11-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;_Circle ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Shape&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-2&quot;&gt;&lt;a href=&quot;#cb11-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;_Circle x y r &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; \_Circle _Rectangle &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; _Circle x y r&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-3&quot;&gt;&lt;a href=&quot;#cb11-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-4&quot;&gt;&lt;a href=&quot;#cb11-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;_Rectangle ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Shape&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-5&quot;&gt;&lt;a href=&quot;#cb11-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;_Rectangle x y w h &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; \_Circle _Rectangle &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; _Rectangle x y w h&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;A “visitor” class corresponds to the type of a function that pattern matches on a value of type &lt;code&gt;T&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Specifically, a “visitor” class is equivalent to the following Haskell type:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb12&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb12-1&quot;&gt;&lt;a href=&quot;#cb12-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;IO&lt;/span&gt; ()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is more restrictive than Böhm-Berarducci encoding, which permits pattern matches that return any type of value, like our &lt;code&gt;area&lt;/code&gt; function, which returns a &lt;code&gt;Double&lt;/code&gt;. In other words, Böhm-Berarducci encoding is not limited to just performing side effects when “visiting” constructors.&lt;/p&gt;&lt;p&gt;(Edit: &lt;a href=&quot;https://twitter.com/travisbrown/status/1346411026275827714&quot;&gt;Travis Brown&lt;/a&gt; notes that the visitor pattern is not restricted to performing side effects. This might be an idiosyncracy of how Wikipedia presents the design pattern)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;A “concrete visitor” (i.e. an object of the “visitor” class) corresponds to a function that “pattern matches” on a value of type &lt;code&gt;T&lt;/code&gt;&lt;/p&gt;&lt;p&gt;e.g. &lt;code&gt;area&lt;/code&gt;&lt;/p&gt;&lt;p&gt;… where each overloaded &lt;code&gt;visit&lt;/code&gt; method of the visitor corresponds to a branch of our Church-encoded “pattern match”:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb13&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb13-1&quot;&gt;&lt;a href=&quot;#cb13-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;area ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Shape&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-2&quot;&gt;&lt;a href=&quot;#cb13-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;area shape &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; shape&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-3&quot;&gt;&lt;a href=&quot;#cb13-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    (\x y r   &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-4&quot;&gt;&lt;a href=&quot;#cb13-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    (\x y w h &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; w &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; h)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The “client” corresponds to a value of type &lt;code&gt;T&lt;/code&gt;&lt;/p&gt;&lt;p&gt;e.g. &lt;code&gt;exampleCircle&lt;/code&gt;, &lt;code&gt;exampleRectangle&lt;/code&gt;:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb14&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb14-1&quot;&gt;&lt;a href=&quot;#cb14-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;exampleCircle ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Shape&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-2&quot;&gt;&lt;a href=&quot;#cb14-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;exampleCircle &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; _Circle &lt;span class=&quot;fl&quot;&gt;2.0&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;1.4&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;4.5&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-3&quot;&gt;&lt;a href=&quot;#cb14-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-4&quot;&gt;&lt;a href=&quot;#cb14-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;exampleRectangle ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Shape&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-5&quot;&gt;&lt;a href=&quot;#cb14-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;exampleRectangle &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; _Rectangle &lt;span class=&quot;fl&quot;&gt;1.3&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;3.1&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;10.3&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;7.7&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The Wikipedia explanation of the visitor pattern adds the wrinkle that the client can represent more than one such value. In my opinion, what the visitor pattern should say is that the client can be a recursive value which may have self-similar children (like our example &lt;code&gt;Tree&lt;/code&gt;). This small change would improve the correspondence between the visitor pattern and Church-encoding.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&quot;limitations-of-böhm-berarducci-encoding&quot;&gt;Limitations of Böhm-Berarducci encoding&lt;/h4&gt;&lt;p&gt;Church encoding works in any untyped language, but Böhm-Berarducci encoding does not work in all typed languages!&lt;/p&gt;&lt;p&gt;Specifically, Böhm-Berarducci only works in general for languages that support polymorphic types (a.k.a. &lt;a href=&quot;https://en.wikipedia.org/wiki/Generic_programming&quot;&gt;generic programming&lt;/a&gt;). This is because the type of a Böhm-Berarducci-encoded value is a polymorphic type:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb15&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb15-1&quot;&gt;&lt;a href=&quot;#cb15-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Shape&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;forall&lt;/span&gt; shape&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-2&quot;&gt;&lt;a href=&quot;#cb15-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;  (&lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; shape)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-3&quot;&gt;&lt;a href=&quot;#cb15-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; shape)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-4&quot;&gt;&lt;a href=&quot;#cb15-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; shape&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… but such a type cannot be represented in a language that lacks polymorphism. So what the visitor pattern commonly does to work around this limitation is to pick a specific &lt;code&gt;result&lt;/code&gt; type, and since there isn’t a one-size-fits-all type, they’ll usually make the result a side effect, as if we had specialized the universally quantified type to &lt;code&gt;IO ()&lt;/code&gt;:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb16&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb16-1&quot;&gt;&lt;a href=&quot;#cb16-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Shape&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb16-2&quot;&gt;&lt;a href=&quot;#cb16-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;  (&lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;IO&lt;/span&gt; ())&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb16-3&quot;&gt;&lt;a href=&quot;#cb16-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;IO&lt;/span&gt; ())&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb16-4&quot;&gt;&lt;a href=&quot;#cb16-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;IO&lt;/span&gt; ()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is why Go has great difficulty modeling sum types accurately, because Go does not support polymorphism (“generics”) and therefore Böhm-Berarducci encoding does not work in general for introducing sum types in Go. This is also why people with programming language theory backgrounds make a bigger deal out of Go’s lack of generics than Go’s lack of sum types, because if Go had generics then people could work around the lack of sum types using a Böhm-Berarducci encoding.&lt;/p&gt;&lt;h4 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h4&gt;&lt;p&gt;Hopefully this gives you a better idea of what Church encoding and Böhm-Berarducci encoding are and how they relate to the visitor pattern.&lt;/p&gt;&lt;p&gt;In my opinion, Böhm-Berarducci encoding is a bigger deal in statically-typed languages because it provides a way to introduce sum types and recursion into a language in a type-safe way that makes invalid states unrepresentable. Conversely, Church encoding is not as big of a deal in dynamically-typed languages because a Church-encoded type is still vulnerable to runtime exceptions.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</content><link rel="replies" type="application/atom+xml" href="https://www.haskellforall.com/feeds/8137932186432001110/comments/default" title="Post Comments"><link rel="replies" type="text/html" href="https://www.haskellforall.com/2021/01/the-visitor-pattern-is-essentially-same.html#comment-form" title="11 Comments"><link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/8137932186432001110"><link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/8137932186432001110"><link rel="alternate" type="text/html" href="https://www.haskellforall.com/2021/01/the-visitor-pattern-is-essentially-same.html" title="The visitor pattern is essentially the same thing as Church encoding"><author><name>Gabriel Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/></author><thr:total>11</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-2413163564294714149</id><published>2020-12-04T09:11:00.000-08:00</published><updated>2020-12-04T09:11:41.667-08:00</updated><title type="text">Recruiting for diversity is not lowering the bar</title><content type="html">&lt;!DOCTYPE html&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;utf-8&quot; /&gt;  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;  &lt;title&gt;diversity&lt;/title&gt;  &lt;style&gt;    code{white-space: pre-wrap;}     span.smallcaps{font-variant: small-caps;}     span.underline{text-decoration: underline;}     div.column{display: inline-block; vertical-align: top; width: 50%;}     div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}     ul.task-list{list-style: none;}     .display.math{display: block; text-align: center; margin: 0.5rem auto;}   &lt;/style&gt;  &lt;!--[if lt IE 9]&gt;    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;  &lt;![endif]--&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;I believe there are &lt;a href=&quot;https://www.scientificamerican.com/article/how-diversity-makes-us-smarter/&quot;&gt;multiple reasons why hiring processes should account for diversity&lt;/a&gt;, but I’d like to use this post to address a common counterargument that people raise in discussions about diversity.&lt;/p&gt;&lt;p&gt;The argument typically goes like this: &lt;a href=&quot;https://techcrunch.com/2015/11/05/twitter-svp-of-engineering-on-his-comments-about-diversity-i-did-a-poor-job-communicating/&quot;&gt;“diversity is important, but we won’t lower the bar”&lt;/a&gt;. I believe that this line of reasoning is flawed in a few ways that I’d like to highlight.&lt;/p&gt;&lt;h4 id=&quot;the-blub-paradox&quot;&gt;The blub paradox&lt;/h4&gt;&lt;p&gt;One common source of hiring bias is the inability to recognize or appreciate strengths greater than or different from one one’s own strengths. I would like to make an analogy to Paul Graham’s post on &lt;a href=&quot;http://www.paulgraham.com/avg.html&quot;&gt;Beating the Averages&lt;/a&gt;:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;As long as our hypothetical Blub programmer is looking down the power continuum, he knows he’s looking down. Languages less powerful than Blub are obviously less powerful, because they’re missing some feature he’s used to. But when our hypothetical Blub programmer looks in the other direction, up the power continuum, he doesn’t realize he’s looking up. What he sees are merely weird languages. He probably considers them about equivalent in power to Blub, but with all this other hairy stuff thrown in as well. Blub is good enough for him, because he thinks in Blub.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;The above bias that people apply when evaluating programming languages also applies when evaluating candidates! People naturally prefer to hire people who share similar strengths, because they recognize and appreciate the value of those strengths. However, when confronted with strengths different from their own they may not interview for those strengths or even recognize them as strengths at all. Quite the opposite: they may view the candidate as “weird” or “not a culture fit” for not cultivating the “right” strengths.&lt;/p&gt;&lt;p&gt;The notion of a “hiring bar” presumes that candidates can all be ordered on a line and those on one side of some cutoff should not be hired. This linear metaphor reinforces our biases around hiring candidates whose strengths align with our own: “Let’s take what I’m good at, and aim to hire somebody who is at least 10% better at that”.&lt;/p&gt;&lt;h4 id=&quot;overcoming-adversity&quot;&gt;Overcoming adversity&lt;/h4&gt;&lt;p&gt;“Diversity hires” can also be much stronger than you appreciate, even when you evaluate them according to strengths that you are trained to recognize.&lt;/p&gt;&lt;p&gt;This is because underrepresented minorities often have to swim upstream against &lt;a href=&quot;https://en.wikipedia.org/wiki/Institutionalized_discrimination&quot;&gt;institutionalized discrimination&lt;/a&gt; and work harder just to reach the same accomplishments and milestones as their majority peers. A minority candidate can outperform your initial impression of them if you can remove these discriminatory barriers within your workplace.&lt;/p&gt;&lt;h4 id=&quot;recruiting-diverse-candidates-does-not-lower-the-bar&quot;&gt;Recruiting diverse candidates does not lower the bar&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://www.forbes.com/sites/paologaudiano/2017/10/23/how-to-increase-diversity-without-lowering-the-bar/?sh=7b7c2f366581&quot;&gt;This post&lt;/a&gt; explains the concept well:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;First, the idea that reaching a more diverse talent pool requires lowering the bar on quality reflects an insidious form of prejudice: somehow the pool of talent is thought of as a monolithic block, the top of which is predominantly white and male; it is only by going farther down from the top that more diverse candidates can be found. In reality, companies that struggle to attract diverse candidates are probably not making the effort to look in the right places.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Recruiting underrepresented minorities does not dilute the talent pool, unless you assume that you are already interviewing the best of the best (unlikely). In reality, you’re likely recruiting people who are easiest to find: those who already share the same professional networks and backgrounds.&lt;/p&gt;&lt;p&gt;This sort of bias minimizes recruiting costs, but at the expense of diversity and also the expense of the quality of hires. Explicitly recruiting for diversity challenges your recruiting process to expand beyond its comfort zone, increasing the access to talent and the quality of your hires.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</content><link rel="replies" type="application/atom+xml" href="https://www.haskellforall.com/feeds/2413163564294714149/comments/default" title="Post Comments"><link rel="replies" type="text/html" href="https://www.haskellforall.com/2020/12/recruiting-for-diversity-is-not.html#comment-form" title="4 Comments"><link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/2413163564294714149"><link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/2413163564294714149"><link rel="alternate" type="text/html" href="https://www.haskellforall.com/2020/12/recruiting-for-diversity-is-not.html" title="Recruiting for diversity is not lowering the bar"><author><name>Gabriel Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/></author><thr:total>4</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-5021321668654472536</id><published>2020-11-19T18:18:00.004-08:00</published><updated>2020-11-19T19:49:30.225-08:00</updated><title type="text">How to use NixOS for lightweight integration tests</title><content type="html">&lt;!DOCTYPE html&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;utf-8&quot; /&gt;  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;  &lt;title&gt;nixos-test&lt;/title&gt;  &lt;style&gt;    code{white-space: pre-wrap;}     span.smallcaps{font-variant: small-caps;}     span.underline{text-decoration: underline;}     div.column{display: inline-block; vertical-align: top; width: 50%;}     div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}     ul.task-list{list-style: none;}     pre &gt; code.sourceCode { white-space: pre; position: relative; }     pre &gt; code.sourceCode &gt; span { display: inline-block; line-height: 1.25; }     pre &gt; code.sourceCode &gt; span:empty { height: 1.2em; }     code.sourceCode &gt; span { color: inherit; text-decoration: inherit; }     div.sourceCode { margin: 1em 0; }     pre.sourceCode { margin: 0; }     @media screen {     div.sourceCode { overflow: auto; }     }     @media print {     pre &gt; code.sourceCode { white-space: pre-wrap; }     pre &gt; code.sourceCode &gt; span { text-indent: -5em; padding-left: 5em; }     }     pre.numberSource code       { counter-reset: source-line 0; }     pre.numberSource code &gt; span       { position: relative; left: -4em; counter-increment: source-line; }     pre.numberSource code &gt; span &gt; a:first-child::before       { content: counter(source-line);         position: relative; left: -1em; text-align: right; vertical-align: baseline;         border: none; display: inline-block;         -webkit-touch-callout: none; -webkit-user-select: none;         -khtml-user-select: none; -moz-user-select: none;         -ms-user-select: none; user-select: none;         padding: 0 4px; width: 4em;         color: #aaaaaa;       }     pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }     div.sourceCode       {   }     @media screen {     pre &gt; code.sourceCode &gt; span &gt; a:first-child::before { text-decoration: underline; }     }     code span.al { color: #ff0000; font-weight: bold; } /* Alert */     code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */     code span.at { color: #7d9029; } /* Attribute */     code span.bn { color: #40a070; } /* BaseN */     code span.bu { } /* BuiltIn */     code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */     code span.ch { color: #4070a0; } /* Char */     code span.cn { color: #880000; } /* Constant */     code span.co { color: #60a0b0; font-style: italic; } /* Comment */     code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */     code span.do { color: #ba2121; font-style: italic; } /* Documentation */     code span.dt { color: #902000; } /* DataType */     code span.dv { color: #40a070; } /* DecVal */     code span.er { color: #ff0000; font-weight: bold; } /* Error */     code span.ex { } /* Extension */     code span.fl { color: #40a070; } /* Float */     code span.fu { color: #06287e; } /* Function */     code span.im { } /* Import */     code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */     code span.kw { color: #007020; font-weight: bold; } /* Keyword */     code span.op { color: #666666; } /* Operator */     code span.ot { color: #007020; } /* Other */     code span.pp { color: #bc7a00; } /* Preprocessor */     code span.sc { color: #4070a0; } /* SpecialChar */     code span.ss { color: #bb6688; } /* SpecialString */     code span.st { color: #4070a0; } /* String */     code span.va { color: #19177c; } /* Variable */     code span.vs { color: #4070a0; } /* VerbatimString */     code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */   &lt;/style&gt;  &lt;!--[if lt IE 9]&gt;    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;  &lt;![endif]--&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;If you use Nix in some capacity then you should check out the NixOS integration test system, which provides an easy way to test services that run inside one or more QEMU virtual machines.&lt;/p&gt;&lt;p&gt;NixOS tests are (in my opinion) way ahead of other integration test systems, but the only way to properly illustrate their value is to walk through a real-world example to highlight their salient features.&lt;/p&gt;&lt;h4 id=&quot;the-motivating-example&quot;&gt;The motivating example&lt;/h4&gt;&lt;p&gt;This post will motivate NixOS tests by using them to detect an error in &lt;a href=&quot;https://postgrest.org/en/v7.0.0/tutorials/tut0.html&quot;&gt;the official &lt;code&gt;postgrest&lt;/code&gt; tutorial&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;You can skim the above tutorial to get a sense of the steps involved, but I’ll also summarize them here:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Run &lt;code&gt;postgres&lt;/code&gt; in a &lt;code&gt;docker&lt;/code&gt; container&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Download &lt;code&gt;postgrest&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Set up the database by running these commands:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode sql&quot;&gt;&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; api.todos (&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt; serial &lt;span class=&quot;kw&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;key&lt;/span&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;#cb1-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  done &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-4&quot;&gt;&lt;a href=&quot;#cb1-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  task text &lt;span class=&quot;kw&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-5&quot;&gt;&lt;a href=&quot;#cb1-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  due timestamptz&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-6&quot;&gt;&lt;a href=&quot;#cb1-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-7&quot;&gt;&lt;a href=&quot;#cb1-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-8&quot;&gt;&lt;a href=&quot;#cb1-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; api.todos (task) &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-9&quot;&gt;&lt;a href=&quot;#cb1-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  (&lt;span class=&quot;st&quot;&gt;&amp;#39;finish tutorial 0&amp;#39;&lt;/span&gt;), (&lt;span class=&quot;st&quot;&gt;&amp;#39;pat self on back&amp;#39;&lt;/span&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-10&quot;&gt;&lt;a href=&quot;#cb1-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-11&quot;&gt;&lt;a href=&quot;#cb1-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;role&lt;/span&gt; web_anon nologin;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-12&quot;&gt;&lt;a href=&quot;#cb1-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-13&quot;&gt;&lt;a href=&quot;#cb1-13&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;grant&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;usage&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;schema&lt;/span&gt; api &lt;span class=&quot;kw&quot;&gt;to&lt;/span&gt; web_anon;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-14&quot;&gt;&lt;a href=&quot;#cb1-14&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;grant&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;on&lt;/span&gt; api.todos &lt;span class=&quot;kw&quot;&gt;to&lt;/span&gt; web_anon;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-15&quot;&gt;&lt;a href=&quot;#cb1-15&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-16&quot;&gt;&lt;a href=&quot;#cb1-16&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;role&lt;/span&gt; authenticator noinherit login &lt;span class=&quot;kw&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;mysecretpassword&amp;#39;&lt;/span&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-17&quot;&gt;&lt;a href=&quot;#cb1-17&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;grant&lt;/span&gt; web_anon &lt;span class=&quot;kw&quot;&gt;to&lt;/span&gt; authenticator;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Save the following configuration to &lt;code&gt;tutorial.conf&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;db-uri = &amp;quot;postgres://authenticator:mysecretpassword@localhost:5433/postgres&amp;quot;&lt;br /&gt;db-schema = &amp;quot;api&amp;quot;&lt;br /&gt;db-anon-role = &amp;quot;web_anon&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Run &lt;code&gt;./postgrest tutorial.conf&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Check that it’s working using:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;$ &lt;span class=&quot;ex&quot;&gt;curl&lt;/span&gt; http://localhost:3000/todos&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… which should return:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode json&quot;&gt;&lt;code class=&quot;sourceCode json&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;#cb4-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-2&quot;&gt;&lt;a href=&quot;#cb4-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-3&quot;&gt;&lt;a href=&quot;#cb4-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-4&quot;&gt;&lt;a href=&quot;#cb4-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;&amp;quot;done&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-5&quot;&gt;&lt;a href=&quot;#cb4-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;&amp;quot;task&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;finish tutorial 0&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-6&quot;&gt;&lt;a href=&quot;#cb4-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;&amp;quot;due&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-7&quot;&gt;&lt;a href=&quot;#cb4-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-8&quot;&gt;&lt;a href=&quot;#cb4-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-9&quot;&gt;&lt;a href=&quot;#cb4-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-10&quot;&gt;&lt;a href=&quot;#cb4-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;&amp;quot;done&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-11&quot;&gt;&lt;a href=&quot;#cb4-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;&amp;quot;task&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;pat self on back&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-12&quot;&gt;&lt;a href=&quot;#cb4-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;&amp;quot;due&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-13&quot;&gt;&lt;a href=&quot;#cb4-13&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-14&quot;&gt;&lt;a href=&quot;#cb4-14&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;These are quite a few manual steps, and if I were a &lt;code&gt;postgrest&lt;/code&gt; maintainer then it would be a pain to check that they still work for every new software release. In practice, most maintainers write and check a tutorial once and then never check again unless users report errors. This is a shame, because one of the most important functions of a tutorial is to inspire confidence:&lt;/p&gt;&lt;blockquote&gt;&lt;h5 id=&quot;make-sure-that-your-tutorial-works&quot;&gt;Make sure that your tutorial works&lt;/h5&gt;&lt;p&gt;One of your jobs as a tutor is to inspire the beginner’s confidence: in the software, in the tutorial, in the tutor and, of course, in their own ability to achieve what’s being asked of them.&lt;/p&gt;&lt;p&gt;There are many things that contribute to this. A friendly tone helps, as does consistent use of language, and a logical progression through the material. But the single most important thing is that &lt;strong&gt;what you ask the beginner to do must work&lt;/strong&gt;. The learner needs to see that the actions you ask them to take have the effect you say they will have.&lt;/p&gt;&lt;p&gt;If the learner’s actions produce an error or unexpected results, your tutorial has failed - even if it’s not your fault. When your students are there with you, you can rescue them; if they’re reading your documentation on their own you can’t - so you have to prevent that from happening in advance. This is without doubt easier said than done.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://documentation.divio.com/tutorials/&quot;&gt;&lt;code&gt;documentation.divio.com&lt;/code&gt; - Tutorials&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;p&gt;Fortunately, we can codify the manual steps from the tutorial into a NixOS configuration for a virtual machine, which is a declarative specification of our system’s desired state:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre class=&quot;sourceCode nix&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;#cb5-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# ./postgrest-tutorial.nix&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-2&quot;&gt;&lt;a href=&quot;#cb5-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-3&quot;&gt;&lt;a href=&quot;#cb5-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;bu&quot;&gt;let&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-4&quot;&gt;&lt;a href=&quot;#cb5-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;# For extra determinism&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-5&quot;&gt;&lt;a href=&quot;#cb5-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;nixpkgs&lt;/span&gt; =&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-6&quot;&gt;&lt;a href=&quot;#cb5-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ex&quot;&gt;builtins.fetchTarball&lt;/span&gt; {&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-7&quot;&gt;&lt;a href=&quot;#cb5-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;ex&quot;&gt;url&lt;/span&gt; = &lt;span class=&quot;st&quot;&gt;&amp;quot;https://github.com/NixOS/nixpkgs/archive/58f9c4c7d3a42c912362ca68577162e38ea8edfb.tar.gz&amp;quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-8&quot;&gt;&lt;a href=&quot;#cb5-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-9&quot;&gt;&lt;a href=&quot;#cb5-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;ex&quot;&gt;sha256&lt;/span&gt; = &lt;span class=&quot;st&quot;&gt;&amp;quot;1517dy07jf4zhzknqbgm617lgjxsn7a6k1vgq61c67f6h55qs5ij&amp;quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-10&quot;&gt;&lt;a href=&quot;#cb5-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    };&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-11&quot;&gt;&lt;a href=&quot;#cb5-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-12&quot;&gt;&lt;a href=&quot;#cb5-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;# Single source of truth for all tutorial constants&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-13&quot;&gt;&lt;a href=&quot;#cb5-13&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;database&lt;/span&gt; = &lt;span class=&quot;st&quot;&gt;&amp;quot;postgres&amp;quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-14&quot;&gt;&lt;a href=&quot;#cb5-14&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;schema&lt;/span&gt;   = &lt;span class=&quot;st&quot;&gt;&amp;quot;api&amp;quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-15&quot;&gt;&lt;a href=&quot;#cb5-15&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;table&lt;/span&gt;    = &lt;span class=&quot;st&quot;&gt;&amp;quot;todos&amp;quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-16&quot;&gt;&lt;a href=&quot;#cb5-16&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;username&lt;/span&gt; = &lt;span class=&quot;st&quot;&gt;&amp;quot;authenticator&amp;quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-17&quot;&gt;&lt;a href=&quot;#cb5-17&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;password&lt;/span&gt; = &lt;span class=&quot;st&quot;&gt;&amp;quot;mysecretpassword&amp;quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-18&quot;&gt;&lt;a href=&quot;#cb5-18&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;webRole&lt;/span&gt;  = &lt;span class=&quot;st&quot;&gt;&amp;quot;web_anon&amp;quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-19&quot;&gt;&lt;a href=&quot;#cb5-19&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-20&quot;&gt;&lt;a href=&quot;#cb5-20&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;nixos&lt;/span&gt; =&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-21&quot;&gt;&lt;a href=&quot;#cb5-21&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ex&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${nixpkgs}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;/nixos&amp;quot;&lt;/span&gt; {&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-22&quot;&gt;&lt;a href=&quot;#cb5-22&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;ex&quot;&gt;system&lt;/span&gt; = &lt;span class=&quot;st&quot;&gt;&amp;quot;x86_64-linux&amp;quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-23&quot;&gt;&lt;a href=&quot;#cb5-23&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-24&quot;&gt;&lt;a href=&quot;#cb5-24&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;ex&quot;&gt;configuration&lt;/span&gt; = { config, pkgs, ... }: &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-25&quot;&gt;&lt;a href=&quot;#cb5-25&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;co&quot;&gt;# Open the default port for `postgrest` in the firewall&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-26&quot;&gt;&lt;a href=&quot;#cb5-26&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;ex&quot;&gt;networking.firewall.allowedTCPPorts&lt;/span&gt; = [ 3000 ]&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-27&quot;&gt;&lt;a href=&quot;#cb5-27&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-28&quot;&gt;&lt;a href=&quot;#cb5-28&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;ex&quot;&gt;services.postgresql&lt;/span&gt; = {&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-29&quot;&gt;&lt;a href=&quot;#cb5-29&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;bu&quot;&gt;enable&lt;/span&gt; = true&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-30&quot;&gt;&lt;a href=&quot;#cb5-30&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-31&quot;&gt;&lt;a href=&quot;#cb5-31&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;ex&quot;&gt;initialScript&lt;/span&gt; = pkgs.writeText &lt;span class=&quot;st&quot;&gt;&amp;quot;initialScript.sql&amp;quot;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-32&quot;&gt;&lt;a href=&quot;#cb5-32&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;ex&quot;&gt;create&lt;/span&gt; schema &lt;span class=&quot;va&quot;&gt;${schema}&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-33&quot;&gt;&lt;a href=&quot;#cb5-33&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-34&quot;&gt;&lt;a href=&quot;#cb5-34&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;ex&quot;&gt;create&lt;/span&gt; table &lt;span class=&quot;va&quot;&gt;${schema}&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;${table}&lt;/span&gt; (&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-35&quot;&gt;&lt;a href=&quot;#cb5-35&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;              &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; serial primary key,&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-36&quot;&gt;&lt;a href=&quot;#cb5-36&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;              &lt;span class=&quot;kw&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;ex&quot;&gt;boolean&lt;/span&gt; not null default false,&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-37&quot;&gt;&lt;a href=&quot;#cb5-37&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;              &lt;span class=&quot;ex&quot;&gt;task&lt;/span&gt; text not null,&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-38&quot;&gt;&lt;a href=&quot;#cb5-38&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;              &lt;span class=&quot;ex&quot;&gt;due&lt;/span&gt; timestamptz&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-39&quot;&gt;&lt;a href=&quot;#cb5-39&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            );&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-40&quot;&gt;&lt;a href=&quot;#cb5-40&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-41&quot;&gt;&lt;a href=&quot;#cb5-41&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;ex&quot;&gt;insert&lt;/span&gt; into &lt;span class=&quot;va&quot;&gt;${schema}&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;${table}&lt;/span&gt; (task) &lt;span class=&quot;ex&quot;&gt;values&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-42&quot;&gt;&lt;a href=&quot;#cb5-42&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;              &lt;span class=&quot;kw&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;#39;finish tutorial 0&amp;#39;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;kw&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;#39;pat self on back&amp;#39;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-43&quot;&gt;&lt;a href=&quot;#cb5-43&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-44&quot;&gt;&lt;a href=&quot;#cb5-44&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;ex&quot;&gt;create&lt;/span&gt; role &lt;span class=&quot;va&quot;&gt;${webRole}&lt;/span&gt; nologin&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-45&quot;&gt;&lt;a href=&quot;#cb5-45&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-46&quot;&gt;&lt;a href=&quot;#cb5-46&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;ex&quot;&gt;grant&lt;/span&gt; usage on schema &lt;span class=&quot;va&quot;&gt;${schema}&lt;/span&gt; to &lt;span class=&quot;va&quot;&gt;${webRole}&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-47&quot;&gt;&lt;a href=&quot;#cb5-47&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;ex&quot;&gt;grant&lt;/span&gt; select on &lt;span class=&quot;va&quot;&gt;${schema}&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;${table}&lt;/span&gt; to &lt;span class=&quot;va&quot;&gt;${webRole}&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-48&quot;&gt;&lt;a href=&quot;#cb5-48&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-49&quot;&gt;&lt;a href=&quot;#cb5-49&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;ex&quot;&gt;create&lt;/span&gt; role &lt;span class=&quot;va&quot;&gt;${username}&lt;/span&gt; noinherit login password &lt;span class=&quot;st&quot;&gt;&amp;#39;${password}&amp;#39;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-50&quot;&gt;&lt;a href=&quot;#cb5-50&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;ex&quot;&gt;grant&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;${webRole}&lt;/span&gt; to &lt;span class=&quot;va&quot;&gt;${username}&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-51&quot;&gt;&lt;a href=&quot;#cb5-51&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;st&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-52&quot;&gt;&lt;a href=&quot;#cb5-52&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-53&quot;&gt;&lt;a href=&quot;#cb5-53&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-54&quot;&gt;&lt;a href=&quot;#cb5-54&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;fu&quot;&gt;users&lt;/span&gt; = {&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-55&quot;&gt;&lt;a href=&quot;#cb5-55&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;ex&quot;&gt;mutableUsers&lt;/span&gt; = false&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-56&quot;&gt;&lt;a href=&quot;#cb5-56&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-57&quot;&gt;&lt;a href=&quot;#cb5-57&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;fu&quot;&gt;users&lt;/span&gt; = {&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-58&quot;&gt;&lt;a href=&quot;#cb5-58&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;co&quot;&gt;# For ease of debugging the VM as the `root` user&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-59&quot;&gt;&lt;a href=&quot;#cb5-59&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;ex&quot;&gt;root.password&lt;/span&gt; = &lt;span class=&quot;st&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-60&quot;&gt;&lt;a href=&quot;#cb5-60&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-61&quot;&gt;&lt;a href=&quot;#cb5-61&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;co&quot;&gt;# Create a system user that matches the database user so that we&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-62&quot;&gt;&lt;a href=&quot;#cb5-62&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;co&quot;&gt;# can use peer authentication.  The tutorial defines a password,&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-63&quot;&gt;&lt;a href=&quot;#cb5-63&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;co&quot;&gt;# but it&amp;#39;s not necessary.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-64&quot;&gt;&lt;a href=&quot;#cb5-64&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${username}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;ex&quot;&gt;.isSystemUser&lt;/span&gt; = true&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-65&quot;&gt;&lt;a href=&quot;#cb5-65&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;          };&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-66&quot;&gt;&lt;a href=&quot;#cb5-66&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        };&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-67&quot;&gt;&lt;a href=&quot;#cb5-67&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-68&quot;&gt;&lt;a href=&quot;#cb5-68&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;ex&quot;&gt;systemd.services.postgrest&lt;/span&gt; = {&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-69&quot;&gt;&lt;a href=&quot;#cb5-69&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;ex&quot;&gt;wantedBy&lt;/span&gt; = [ &lt;span class=&quot;st&quot;&gt;&amp;quot;multi-user.target&amp;quot;&lt;/span&gt; ]&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-70&quot;&gt;&lt;a href=&quot;#cb5-70&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-71&quot;&gt;&lt;a href=&quot;#cb5-71&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;ex&quot;&gt;after&lt;/span&gt; = [ &lt;span class=&quot;st&quot;&gt;&amp;quot;postgresql.service&amp;quot;&lt;/span&gt; ]&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-72&quot;&gt;&lt;a href=&quot;#cb5-72&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-73&quot;&gt;&lt;a href=&quot;#cb5-73&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;ex&quot;&gt;script&lt;/span&gt; =&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-74&quot;&gt;&lt;a href=&quot;#cb5-74&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;bu&quot;&gt;let&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-75&quot;&gt;&lt;a href=&quot;#cb5-75&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;              &lt;span class=&quot;ex&quot;&gt;configuration&lt;/span&gt; = pkgs.writeText &lt;span class=&quot;st&quot;&gt;&amp;quot;tutorial.conf&amp;quot;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-76&quot;&gt;&lt;a href=&quot;#cb5-76&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;ex&quot;&gt;db-uri&lt;/span&gt; = &lt;span class=&quot;st&quot;&gt;&amp;quot;postgres://&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${username}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${password}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;@localhost:&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${toString&lt;/span&gt;&lt;span class=&quot;er&quot;&gt; config.services.postgresql.port&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${database}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-77&quot;&gt;&lt;a href=&quot;#cb5-77&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;ex&quot;&gt;db-schema&lt;/span&gt; = &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${schema}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-78&quot;&gt;&lt;a href=&quot;#cb5-78&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;ex&quot;&gt;db-anon-role&lt;/span&gt; = &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${username}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-79&quot;&gt;&lt;a href=&quot;#cb5-79&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;              &lt;span class=&quot;st&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-80&quot;&gt;&lt;a href=&quot;#cb5-80&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-81&quot;&gt;&lt;a href=&quot;#cb5-81&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-82&quot;&gt;&lt;a href=&quot;#cb5-82&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;              &lt;span class=&quot;st&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-83&quot;&gt;&lt;a href=&quot;#cb5-83&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;va&quot;&gt;${pkgs&lt;/span&gt;&lt;span class=&quot;er&quot;&gt;.haskellPackages.postgrest&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;ex&quot;&gt;/bin/postgrest&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;${configuration}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-84&quot;&gt;&lt;a href=&quot;#cb5-84&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;              &lt;span class=&quot;st&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-85&quot;&gt;&lt;a href=&quot;#cb5-85&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-86&quot;&gt;&lt;a href=&quot;#cb5-86&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;ex&quot;&gt;serviceConfig.User&lt;/span&gt; = username&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-87&quot;&gt;&lt;a href=&quot;#cb5-87&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        };&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-88&quot;&gt;&lt;a href=&quot;#cb5-88&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-89&quot;&gt;&lt;a href=&quot;#cb5-89&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;co&quot;&gt;# Uncomment the next line for running QEMU on a non-graphical system&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-90&quot;&gt;&lt;a href=&quot;#cb5-90&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;co&quot;&gt;# virtualisation.graphics = false;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-91&quot;&gt;&lt;a href=&quot;#cb5-91&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      };&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-92&quot;&gt;&lt;a href=&quot;#cb5-92&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    };&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-93&quot;&gt;&lt;a href=&quot;#cb5-93&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-94&quot;&gt;&lt;a href=&quot;#cb5-94&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-95&quot;&gt;&lt;a href=&quot;#cb5-95&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;nixos.vm&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can then build and run this tutorial virtual machine by running the following commands:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb6&quot;&gt;&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb6-1&quot;&gt;&lt;a href=&quot;#cb6-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;$ &lt;span class=&quot;ex&quot;&gt;nix&lt;/span&gt; build --file ./postgrest-tutorial.nix&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-2&quot;&gt;&lt;a href=&quot;#cb6-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-3&quot;&gt;&lt;a href=&quot;#cb6-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;$ &lt;span class=&quot;va&quot;&gt;QEMU_NET_OPTS=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;#39;hostfwd=tcp::3000-:3000&amp;#39;&lt;/span&gt; &lt;span class=&quot;ex&quot;&gt;result/bin/run-nixos-vm&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That spins up a VM and prompts us to log in when the VM is ready:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb7&quot;&gt;&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb7-1&quot;&gt;&lt;a href=&quot;#cb7-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;ex&quot;&gt;Welcome&lt;/span&gt; to NixOS 20.09pre-git (x86_64) &lt;span class=&quot;ex&quot;&gt;-&lt;/span&gt; ttyS0 &lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-2&quot;&gt;&lt;a href=&quot;#cb7-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-3&quot;&gt;&lt;a href=&quot;#cb7-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;Run&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;nixos-help&amp;#39;&lt;/span&gt; for the NixOS manual.&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-4&quot;&gt;&lt;a href=&quot;#cb7-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-5&quot;&gt;&lt;a href=&quot;#cb7-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;nixos&lt;/span&gt; login: &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, before we log in, we can test if &lt;code&gt;postgrest&lt;/code&gt; is working using the same &lt;code&gt;curl&lt;/code&gt; command from the tutorial:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb8&quot;&gt;&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb8-1&quot;&gt;&lt;a href=&quot;#cb8-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;$ &lt;span class=&quot;ex&quot;&gt;curl&lt;/span&gt; http://localhost:3000/todos&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb9&quot;&gt;&lt;pre class=&quot;sourceCode json&quot;&gt;&lt;code class=&quot;sourceCode json&quot;&gt;&lt;span id=&quot;cb9-1&quot;&gt;&lt;a href=&quot;#cb9-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;&amp;quot;hint&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;&amp;quot;details&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;&amp;quot;code&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;42501&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;permission denied for schema api&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Wait, what? We were supposed to get:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb10&quot;&gt;&lt;pre class=&quot;sourceCode json&quot;&gt;&lt;code class=&quot;sourceCode json&quot;&gt;&lt;span id=&quot;cb10-1&quot;&gt;&lt;a href=&quot;#cb10-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-2&quot;&gt;&lt;a href=&quot;#cb10-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-3&quot;&gt;&lt;a href=&quot;#cb10-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-4&quot;&gt;&lt;a href=&quot;#cb10-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;&amp;quot;done&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-5&quot;&gt;&lt;a href=&quot;#cb10-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;&amp;quot;task&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;finish tutorial 0&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-6&quot;&gt;&lt;a href=&quot;#cb10-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;&amp;quot;due&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-7&quot;&gt;&lt;a href=&quot;#cb10-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-8&quot;&gt;&lt;a href=&quot;#cb10-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-9&quot;&gt;&lt;a href=&quot;#cb10-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-10&quot;&gt;&lt;a href=&quot;#cb10-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;&amp;quot;done&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-11&quot;&gt;&lt;a href=&quot;#cb10-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;&amp;quot;task&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;pat self on back&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-12&quot;&gt;&lt;a href=&quot;#cb10-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;&amp;quot;due&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-13&quot;&gt;&lt;a href=&quot;#cb10-13&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-14&quot;&gt;&lt;a href=&quot;#cb10-14&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… but apparently something is wrong with the database’s permissions.&lt;/p&gt;&lt;p&gt;Fortunately, we can log into the VM as the &lt;code&gt;root&lt;/code&gt; user with an empty password to test the database permissions. Once we log into the system we can further log into the database as the &lt;code&gt;authenticator&lt;/code&gt; user:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb11&quot;&gt;&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb11-1&quot;&gt;&lt;a href=&quot;#cb11-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;ex&quot;&gt;Welcome&lt;/span&gt; to NixOS 20.09pre-git (x86_64) &lt;span class=&quot;ex&quot;&gt;-&lt;/span&gt; ttyS0 &lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-2&quot;&gt;&lt;a href=&quot;#cb11-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-3&quot;&gt;&lt;a href=&quot;#cb11-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;Run&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;nixos-help&amp;#39;&lt;/span&gt; for the NixOS manual.&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-4&quot;&gt;&lt;a href=&quot;#cb11-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-5&quot;&gt;&lt;a href=&quot;#cb11-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;nixos&lt;/span&gt; login: root&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;Enter&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-6&quot;&gt;&lt;a href=&quot;#cb11-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;Password&lt;/span&gt;: &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;Enter&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-7&quot;&gt;&lt;a href=&quot;#cb11-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-8&quot;&gt;&lt;a href=&quot;#cb11-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;[&lt;span class=&quot;ex&quot;&gt;root@nixos&lt;/span&gt;:~]# sudo --user authenticator psql postgres&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-9&quot;&gt;&lt;a href=&quot;#cb11-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;psql&lt;/span&gt; (11.9)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-10&quot;&gt;&lt;a href=&quot;#cb11-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;help&amp;quot;&lt;/span&gt; for help.&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-11&quot;&gt;&lt;a href=&quot;#cb11-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-12&quot;&gt;&lt;a href=&quot;#cb11-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;va&quot;&gt;postgres=&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we can test to see if the &lt;code&gt;authenticator&lt;/code&gt; user is able to access the &lt;code&gt;api.todos&lt;/code&gt; table:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb12&quot;&gt;&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb12-1&quot;&gt;&lt;a href=&quot;#cb12-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;va&quot;&gt;postgres=&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;ex&quot;&gt;SELECT&lt;/span&gt; * FROM api.todos&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-2&quot;&gt;&lt;a href=&quot;#cb12-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;ERROR&lt;/span&gt;:  permission denied for schema api&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-3&quot;&gt;&lt;a href=&quot;#cb12-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;LINE&lt;/span&gt; 1: SELECT * FROM api.todos&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Good: we can reproduce the problem, but what might be the cause?&lt;/p&gt;&lt;p&gt;As it turns out, the tutorial instructions appear to not configure the &lt;code&gt;authenticator&lt;/code&gt; role correctly. Specifically, the &lt;code&gt;noinherit&lt;/code&gt; in the following commands is the reason we can’t directly access the &lt;code&gt;schema&lt;/code&gt; api:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb13&quot;&gt;&lt;pre class=&quot;sourceCode sql&quot;&gt;&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span id=&quot;cb13-1&quot;&gt;&lt;a href=&quot;#cb13-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;role&lt;/span&gt; authenticator noinherit login &lt;span class=&quot;kw&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;mysecretpassword&amp;#39;&lt;/span&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb13-2&quot;&gt;&lt;a href=&quot;#cb13-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;grant&lt;/span&gt; web_anon &lt;span class=&quot;kw&quot;&gt;to&lt;/span&gt; authenticator;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;noinherit&lt;/code&gt; setting prevents the &lt;code&gt;authenticator&lt;/code&gt; user from automatically assuming all permissions associated with the &lt;code&gt;web_anon&lt;/code&gt; user. Instead, the &lt;code&gt;authenticator&lt;/code&gt; user has to explicitly use the &lt;code&gt;SET ROLE&lt;/code&gt; command to assume such permissions, and we can verify that at the database prompt:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;postgres=&amp;gt; SET ROLE web_anon;&lt;br /&gt;SET&lt;br /&gt;postgres=&amp;gt; SELECT * FROM api.todos;&lt;br /&gt; id | done |       task        | due &lt;br /&gt;----+------+-------------------+-----&lt;br /&gt;  1 | f    | finish tutorial 0 | &lt;br /&gt;  2 | f    | pat self on back  | &lt;br /&gt;(2 rows)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Mystery solved! We can test our hypothesis by changing that &lt;code&gt;noinherit&lt;/code&gt; to &lt;code&gt;inherit&lt;/code&gt;:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb15&quot;&gt;&lt;pre class=&quot;sourceCode sql&quot;&gt;&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span id=&quot;cb15-1&quot;&gt;&lt;a href=&quot;#cb15-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;role&lt;/span&gt; authenticator inherit login &lt;span class=&quot;kw&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;mysecretpassword&amp;#39;&lt;/span&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-2&quot;&gt;&lt;a href=&quot;#cb15-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;grant&lt;/span&gt; web_anon &lt;span class=&quot;kw&quot;&gt;to&lt;/span&gt; authenticator;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… then we can restart the VM to check that things now work by:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;typing &lt;kbd&gt;CTRL&lt;/kbd&gt;-&lt;kbd&gt;a&lt;/kbd&gt; &lt;kbd&gt;c&lt;/kbd&gt; and entering &lt;code&gt;quit&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;running the following commands:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb16&quot;&gt;&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb16-1&quot;&gt;&lt;a href=&quot;#cb16-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;$ &lt;span class=&quot;fu&quot;&gt;rm&lt;/span&gt; nixos.qcow2  # Remove the old VM&lt;span class=&quot;st&quot;&gt;&amp;#39;s disk image so we start fresh&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb16-2&quot;&gt;&lt;a href=&quot;#cb16-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;st&quot;&gt;$ nix build --file ./postgrest-tutorial.nix  # The rest is the same as before&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb16-3&quot;&gt;&lt;a href=&quot;#cb16-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;st&quot;&gt;$ QEMU_NET_OPTS=&amp;#39;&lt;/span&gt;hostfwd=tcp::3000-:3000&lt;span class=&quot;st&quot;&gt;&amp;#39; result/bin/run-nixos-vm&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;… and now the &lt;code&gt;curl&lt;/code&gt; example from the tutorial works:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb17&quot;&gt;&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb17-1&quot;&gt;&lt;a href=&quot;#cb17-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;$ &lt;span class=&quot;ex&quot;&gt;curl&lt;/span&gt; http://localhost:3000/todos&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb18&quot;&gt;&lt;pre class=&quot;sourceCode json&quot;&gt;&lt;code class=&quot;sourceCode json&quot;&gt;&lt;span id=&quot;cb18-1&quot;&gt;&lt;a href=&quot;#cb18-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;&amp;quot;done&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;&amp;quot;task&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;finish tutorial 0&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;&amp;quot;due&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-2&quot;&gt;&lt;a href=&quot;#cb18-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt; &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;&amp;quot;done&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;&amp;quot;task&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;pat self on back&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;&amp;quot;due&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But wait, there’s more!&lt;/p&gt;&lt;h4 id=&quot;automated-testing&quot;&gt;Automated testing&lt;/h4&gt;&lt;p&gt;We don’t have to manually setup/teardown VMs and run &lt;code&gt;curl&lt;/code&gt; commands. We can automate the entire process from end-to-end by using NixOS’s support for &lt;a href=&quot;https://nixos.org/manual/nixos/stable/index.html#sec-nixos-tests&quot;&gt;automated integration tests&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;If we follow the instructions from the NixOS manual, then the automated integration test looks like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb19&quot;&gt;&lt;pre class=&quot;sourceCode nix&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb19-1&quot;&gt;&lt;a href=&quot;#cb19-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;# ./postgrest-tutorial.nix&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-2&quot;&gt;&lt;a href=&quot;#cb19-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-3&quot;&gt;&lt;a href=&quot;#cb19-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;bu&quot;&gt;let&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-4&quot;&gt;&lt;a href=&quot;#cb19-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;# For extra determinism&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-5&quot;&gt;&lt;a href=&quot;#cb19-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;nixpkgs&lt;/span&gt; =&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-6&quot;&gt;&lt;a href=&quot;#cb19-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ex&quot;&gt;builtins.fetchTarball&lt;/span&gt; {&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-7&quot;&gt;&lt;a href=&quot;#cb19-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;ex&quot;&gt;url&lt;/span&gt; = &lt;span class=&quot;st&quot;&gt;&amp;quot;https://github.com/NixOS/nixpkgs/archive/58f9c4c7d3a42c912362ca68577162e38ea8edfb.tar.gz&amp;quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-8&quot;&gt;&lt;a href=&quot;#cb19-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-9&quot;&gt;&lt;a href=&quot;#cb19-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;ex&quot;&gt;sha256&lt;/span&gt; = &lt;span class=&quot;st&quot;&gt;&amp;quot;1517dy07jf4zhzknqbgm617lgjxsn7a6k1vgq61c67f6h55qs5ij&amp;quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-10&quot;&gt;&lt;a href=&quot;#cb19-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    };&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-11&quot;&gt;&lt;a href=&quot;#cb19-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-12&quot;&gt;&lt;a href=&quot;#cb19-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;# Single source of truth for all tutorial constants&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-13&quot;&gt;&lt;a href=&quot;#cb19-13&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;database&lt;/span&gt;      = &lt;span class=&quot;st&quot;&gt;&amp;quot;postgres&amp;quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-14&quot;&gt;&lt;a href=&quot;#cb19-14&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;schema&lt;/span&gt;        = &lt;span class=&quot;st&quot;&gt;&amp;quot;api&amp;quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-15&quot;&gt;&lt;a href=&quot;#cb19-15&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;table&lt;/span&gt;         = &lt;span class=&quot;st&quot;&gt;&amp;quot;todos&amp;quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-16&quot;&gt;&lt;a href=&quot;#cb19-16&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;username&lt;/span&gt;      = &lt;span class=&quot;st&quot;&gt;&amp;quot;authenticator&amp;quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-17&quot;&gt;&lt;a href=&quot;#cb19-17&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;password&lt;/span&gt;      = &lt;span class=&quot;st&quot;&gt;&amp;quot;mysecretpassword&amp;quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-18&quot;&gt;&lt;a href=&quot;#cb19-18&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;webRole&lt;/span&gt;       = &lt;span class=&quot;st&quot;&gt;&amp;quot;web_anon&amp;quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-19&quot;&gt;&lt;a href=&quot;#cb19-19&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;postgrestPort&lt;/span&gt; = 3000&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-20&quot;&gt;&lt;a href=&quot;#cb19-20&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-21&quot;&gt;&lt;a href=&quot;#cb19-21&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-22&quot;&gt;&lt;a href=&quot;#cb19-22&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ex&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${nixpkgs}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;/nixos/tests/make-test-python.nix&amp;quot;&lt;/span&gt; ({ pkgs, ...}: &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-23&quot;&gt;&lt;a href=&quot;#cb19-23&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ex&quot;&gt;system&lt;/span&gt; = &lt;span class=&quot;st&quot;&gt;&amp;quot;x86_64-linux&amp;quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-24&quot;&gt;&lt;a href=&quot;#cb19-24&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-25&quot;&gt;&lt;a href=&quot;#cb19-25&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ex&quot;&gt;nodes&lt;/span&gt; = {&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-26&quot;&gt;&lt;a href=&quot;#cb19-26&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;ex&quot;&gt;server&lt;/span&gt; = { config, pkgs, ... &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;: &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-27&quot;&gt;&lt;a href=&quot;#cb19-27&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;co&quot;&gt;# Open the default port for `postgrest` in the firewall&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-28&quot;&gt;&lt;a href=&quot;#cb19-28&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;ex&quot;&gt;networking.firewall.allowedTCPPorts&lt;/span&gt; = [ postgrestPort ]&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-29&quot;&gt;&lt;a href=&quot;#cb19-29&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-30&quot;&gt;&lt;a href=&quot;#cb19-30&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;ex&quot;&gt;services.postgresql&lt;/span&gt; = {&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-31&quot;&gt;&lt;a href=&quot;#cb19-31&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;bu&quot;&gt;enable&lt;/span&gt; = true&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-32&quot;&gt;&lt;a href=&quot;#cb19-32&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-33&quot;&gt;&lt;a href=&quot;#cb19-33&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;ex&quot;&gt;initialScript&lt;/span&gt; = pkgs.writeText &lt;span class=&quot;st&quot;&gt;&amp;quot;initialScript.sql&amp;quot;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-34&quot;&gt;&lt;a href=&quot;#cb19-34&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;ex&quot;&gt;create&lt;/span&gt; schema &lt;span class=&quot;va&quot;&gt;${schema}&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-35&quot;&gt;&lt;a href=&quot;#cb19-35&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-36&quot;&gt;&lt;a href=&quot;#cb19-36&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;ex&quot;&gt;create&lt;/span&gt; table &lt;span class=&quot;va&quot;&gt;${schema}&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;${table}&lt;/span&gt; (&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-37&quot;&gt;&lt;a href=&quot;#cb19-37&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;              &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; serial primary key,&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-38&quot;&gt;&lt;a href=&quot;#cb19-38&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;              &lt;span class=&quot;kw&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;ex&quot;&gt;boolean&lt;/span&gt; not null default false,&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-39&quot;&gt;&lt;a href=&quot;#cb19-39&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;              &lt;span class=&quot;ex&quot;&gt;task&lt;/span&gt; text not null,&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-40&quot;&gt;&lt;a href=&quot;#cb19-40&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;              &lt;span class=&quot;ex&quot;&gt;due&lt;/span&gt; timestamptz&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-41&quot;&gt;&lt;a href=&quot;#cb19-41&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            );&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-42&quot;&gt;&lt;a href=&quot;#cb19-42&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-43&quot;&gt;&lt;a href=&quot;#cb19-43&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;ex&quot;&gt;insert&lt;/span&gt; into &lt;span class=&quot;va&quot;&gt;${schema}&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;${table}&lt;/span&gt; (task) &lt;span class=&quot;ex&quot;&gt;values&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-44&quot;&gt;&lt;a href=&quot;#cb19-44&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;              &lt;span class=&quot;kw&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;#39;finish tutorial 0&amp;#39;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;kw&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;#39;pat self on back&amp;#39;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-45&quot;&gt;&lt;a href=&quot;#cb19-45&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-46&quot;&gt;&lt;a href=&quot;#cb19-46&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;ex&quot;&gt;create&lt;/span&gt; role &lt;span class=&quot;va&quot;&gt;${webRole}&lt;/span&gt; nologin&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-47&quot;&gt;&lt;a href=&quot;#cb19-47&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-48&quot;&gt;&lt;a href=&quot;#cb19-48&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;ex&quot;&gt;grant&lt;/span&gt; usage on schema &lt;span class=&quot;va&quot;&gt;${schema}&lt;/span&gt; to &lt;span class=&quot;va&quot;&gt;${webRole}&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-49&quot;&gt;&lt;a href=&quot;#cb19-49&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;ex&quot;&gt;grant&lt;/span&gt; select on &lt;span class=&quot;va&quot;&gt;${schema}&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;${table}&lt;/span&gt; to &lt;span class=&quot;va&quot;&gt;${webRole}&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-50&quot;&gt;&lt;a href=&quot;#cb19-50&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-51&quot;&gt;&lt;a href=&quot;#cb19-51&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;ex&quot;&gt;create&lt;/span&gt; role &lt;span class=&quot;va&quot;&gt;${username}&lt;/span&gt; inherit login password &lt;span class=&quot;st&quot;&gt;&amp;#39;${password}&amp;#39;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-52&quot;&gt;&lt;a href=&quot;#cb19-52&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;ex&quot;&gt;grant&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;${webRole}&lt;/span&gt; to &lt;span class=&quot;va&quot;&gt;${username}&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-53&quot;&gt;&lt;a href=&quot;#cb19-53&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;st&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-54&quot;&gt;&lt;a href=&quot;#cb19-54&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-55&quot;&gt;&lt;a href=&quot;#cb19-55&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-56&quot;&gt;&lt;a href=&quot;#cb19-56&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;fu&quot;&gt;users&lt;/span&gt; = {&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-57&quot;&gt;&lt;a href=&quot;#cb19-57&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;ex&quot;&gt;mutableUsers&lt;/span&gt; = false&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-58&quot;&gt;&lt;a href=&quot;#cb19-58&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-59&quot;&gt;&lt;a href=&quot;#cb19-59&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;fu&quot;&gt;users&lt;/span&gt; = {&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-60&quot;&gt;&lt;a href=&quot;#cb19-60&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;co&quot;&gt;# For ease of debugging the VM as the `root` user&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-61&quot;&gt;&lt;a href=&quot;#cb19-61&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;ex&quot;&gt;root.password&lt;/span&gt; = &lt;span class=&quot;st&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-62&quot;&gt;&lt;a href=&quot;#cb19-62&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-63&quot;&gt;&lt;a href=&quot;#cb19-63&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;co&quot;&gt;# Create a system user that matches the database user so that we&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-64&quot;&gt;&lt;a href=&quot;#cb19-64&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;co&quot;&gt;# can use peer authentication.  The tutorial defines a password,&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-65&quot;&gt;&lt;a href=&quot;#cb19-65&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;co&quot;&gt;# but it&amp;#39;s not necessary.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-66&quot;&gt;&lt;a href=&quot;#cb19-66&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${username}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;ex&quot;&gt;.isSystemUser&lt;/span&gt; = true&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-67&quot;&gt;&lt;a href=&quot;#cb19-67&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;          };&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-68&quot;&gt;&lt;a href=&quot;#cb19-68&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        };&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-69&quot;&gt;&lt;a href=&quot;#cb19-69&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-70&quot;&gt;&lt;a href=&quot;#cb19-70&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;ex&quot;&gt;systemd.services.postgrest&lt;/span&gt; = {&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-71&quot;&gt;&lt;a href=&quot;#cb19-71&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;ex&quot;&gt;wantedBy&lt;/span&gt; = [ &lt;span class=&quot;st&quot;&gt;&amp;quot;multi-user.target&amp;quot;&lt;/span&gt; ]&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-72&quot;&gt;&lt;a href=&quot;#cb19-72&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-73&quot;&gt;&lt;a href=&quot;#cb19-73&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;ex&quot;&gt;after&lt;/span&gt; = [ &lt;span class=&quot;st&quot;&gt;&amp;quot;postgresql.service&amp;quot;&lt;/span&gt; ]&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-74&quot;&gt;&lt;a href=&quot;#cb19-74&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-75&quot;&gt;&lt;a href=&quot;#cb19-75&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;ex&quot;&gt;script&lt;/span&gt; =&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-76&quot;&gt;&lt;a href=&quot;#cb19-76&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;bu&quot;&gt;let&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-77&quot;&gt;&lt;a href=&quot;#cb19-77&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;              &lt;span class=&quot;ex&quot;&gt;configuration&lt;/span&gt; = pkgs.writeText &lt;span class=&quot;st&quot;&gt;&amp;quot;tutorial.conf&amp;quot;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-78&quot;&gt;&lt;a href=&quot;#cb19-78&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;ex&quot;&gt;db-uri&lt;/span&gt; = &lt;span class=&quot;st&quot;&gt;&amp;quot;postgres://&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${username}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${password}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;@localhost:&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${toString&lt;/span&gt;&lt;span class=&quot;er&quot;&gt; config.services.postgresql.port&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${database}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-79&quot;&gt;&lt;a href=&quot;#cb19-79&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;ex&quot;&gt;db-schema&lt;/span&gt; = &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${schema}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-80&quot;&gt;&lt;a href=&quot;#cb19-80&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;ex&quot;&gt;db-anon-role&lt;/span&gt; = &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${username}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-81&quot;&gt;&lt;a href=&quot;#cb19-81&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;              &lt;span class=&quot;st&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-82&quot;&gt;&lt;a href=&quot;#cb19-82&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-83&quot;&gt;&lt;a href=&quot;#cb19-83&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-84&quot;&gt;&lt;a href=&quot;#cb19-84&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;              &lt;span class=&quot;st&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-85&quot;&gt;&lt;a href=&quot;#cb19-85&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;va&quot;&gt;${pkgs&lt;/span&gt;&lt;span class=&quot;er&quot;&gt;.haskellPackages.postgrest&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;ex&quot;&gt;/bin/postgrest&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;${configuration}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-86&quot;&gt;&lt;a href=&quot;#cb19-86&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;              &lt;span class=&quot;st&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-87&quot;&gt;&lt;a href=&quot;#cb19-87&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-88&quot;&gt;&lt;a href=&quot;#cb19-88&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;ex&quot;&gt;serviceConfig.User&lt;/span&gt; = username&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-89&quot;&gt;&lt;a href=&quot;#cb19-89&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        };&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-90&quot;&gt;&lt;a href=&quot;#cb19-90&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-91&quot;&gt;&lt;a href=&quot;#cb19-91&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;co&quot;&gt;# Uncomment the next line for running QEMU on a non-graphical system&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-92&quot;&gt;&lt;a href=&quot;#cb19-92&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;co&quot;&gt;# virtualisation.graphics = false;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-93&quot;&gt;&lt;a href=&quot;#cb19-93&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      };&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-94&quot;&gt;&lt;a href=&quot;#cb19-94&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-95&quot;&gt;&lt;a href=&quot;#cb19-95&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;ex&quot;&gt;client&lt;/span&gt; = { };&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-96&quot;&gt;&lt;a href=&quot;#cb19-96&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    };&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-97&quot;&gt;&lt;a href=&quot;#cb19-97&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-98&quot;&gt;&lt;a href=&quot;#cb19-98&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ex&quot;&gt;testScript&lt;/span&gt; =&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-99&quot;&gt;&lt;a href=&quot;#cb19-99&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;st&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-100&quot;&gt;&lt;a href=&quot;#cb19-100&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;ex&quot;&gt;import&lt;/span&gt; json&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-101&quot;&gt;&lt;a href=&quot;#cb19-101&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;ex&quot;&gt;import&lt;/span&gt; sys&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-102&quot;&gt;&lt;a href=&quot;#cb19-102&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-103&quot;&gt;&lt;a href=&quot;#cb19-103&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;fu&quot;&gt;start_all()&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-104&quot;&gt;&lt;a href=&quot;#cb19-104&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-105&quot;&gt;&lt;a href=&quot;#cb19-105&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;ex&quot;&gt;server.wait_for_open_port&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;${toString&lt;/span&gt;&lt;span class=&quot;er&quot;&gt; postgrestPort&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;}&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-106&quot;&gt;&lt;a href=&quot;#cb19-106&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-107&quot;&gt;&lt;a href=&quot;#cb19-107&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;ex&quot;&gt;expected&lt;/span&gt; = [&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-108&quot;&gt;&lt;a href=&quot;#cb19-108&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;          {&lt;span class=&quot;st&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span class=&quot;ex&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;done&amp;quot;&lt;/span&gt;: False, &lt;span class=&quot;st&quot;&gt;&amp;quot;task&amp;quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&amp;quot;finish tutorial 0&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;due&amp;quot;&lt;/span&gt;: None},&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-109&quot;&gt;&lt;a href=&quot;#cb19-109&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;          {&lt;span class=&quot;st&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span class=&quot;ex&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;done&amp;quot;&lt;/span&gt;: False, &lt;span class=&quot;st&quot;&gt;&amp;quot;task&amp;quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&amp;quot;pat self on back&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;due&amp;quot;&lt;/span&gt;: None},&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-110&quot;&gt;&lt;a href=&quot;#cb19-110&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      ]&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-111&quot;&gt;&lt;a href=&quot;#cb19-111&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-112&quot;&gt;&lt;a href=&quot;#cb19-112&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;ex&quot;&gt;actual&lt;/span&gt; = json.loads(&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-113&quot;&gt;&lt;a href=&quot;#cb19-113&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;ex&quot;&gt;client.succeed&lt;/span&gt;(&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-114&quot;&gt;&lt;a href=&quot;#cb19-114&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;              &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${pkgs&lt;/span&gt;&lt;span class=&quot;er&quot;&gt;.curl&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;/bin/curl http://server:&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${toString&lt;/span&gt;&lt;span class=&quot;er&quot;&gt; postgrestPort&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${table}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-115&quot;&gt;&lt;a href=&quot;#cb19-115&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;          )&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-116&quot;&gt;&lt;a href=&quot;#cb19-116&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      )&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-117&quot;&gt;&lt;a href=&quot;#cb19-117&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-118&quot;&gt;&lt;a href=&quot;#cb19-118&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ex&quot;&gt;expected&lt;/span&gt; != actual:&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-119&quot;&gt;&lt;a href=&quot;#cb19-119&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;ex&quot;&gt;sys.exit&lt;/span&gt;(1)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-120&quot;&gt;&lt;a href=&quot;#cb19-120&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;st&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb19-121&quot;&gt;&lt;a href=&quot;#cb19-121&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  })&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… and you can run the test with the following command:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb20&quot;&gt;&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb20-1&quot;&gt;&lt;a href=&quot;#cb20-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;$ &lt;span class=&quot;ex&quot;&gt;nix&lt;/span&gt; build --file ./postgrest-tutorial.nix&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… which will silently succeed with a &lt;code&gt;0&lt;/code&gt; exit code if the test passes, or fail with an error message otherwise.&lt;/p&gt;&lt;p&gt;The above example highlights a few neat aspects of the NixOS test framework:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;You can test more than one VM at a time&lt;/p&gt;&lt;p&gt;The above test creates two VMs:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;One VM named &lt;code&gt;server&lt;/code&gt; which hosts &lt;code&gt;postgres&lt;/code&gt; + &lt;code&gt;postgrest&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;One VM named &lt;code&gt;client&lt;/code&gt; where we initiate our &lt;code&gt;curl&lt;/code&gt; commands&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;… so that we can verify that everything works even when &lt;code&gt;curl&lt;/code&gt; is run from a separate machine. For example, this comes in handy for testing firewall rules.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;You can write the test and orchestration logic in Python&lt;/p&gt;&lt;p&gt;This means that we can use Python not only to run the &lt;code&gt;curl&lt;/code&gt; subprocess, but to also compare the result against a golden JSON output.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;&lt;p&gt;This NixOS test framework is &lt;a href=&quot;https://www.youtube.com/watch?v=HguulqttqkQ&quot;&gt;streets ahead&lt;/a&gt; of other integration test frameworks that I’ve worked with:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;The test is deterministic&lt;/p&gt;&lt;p&gt;The above example will continue to work a decade from now because all transitive dependencies are fully pinned by the NixOS specification.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The test is reproducible&lt;/p&gt;&lt;p&gt;We don’t need to specify out-of-band instructions for how to obtain or install test dependencies. The only thing users globally install is Nix.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The test is compact&lt;/p&gt;&lt;p&gt;The whole thing fits in a single 120-line file with generous whitespace and formatting (although you have the option of splitting into more files if you prefer)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The test is fully isolated&lt;/p&gt;&lt;p&gt;The test does not mutate any shared resources or files and the test runs within an isolated network, so we can run multiple integration tests in parallel on the same machine for building a test matrix.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The test is fast&lt;/p&gt;&lt;p&gt;You might think that a VM-based test is slow compare to a container-based one, but the entire test run, including VM setup and teardown, only takes about 10 seconds.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The test is written in a fully-featured language&lt;/p&gt;&lt;p&gt;We can use Nix’s support for programming language features to reduce repetition. For example, this is why we can consolidate all test constants to be defined in one place so that there is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Single_source_of_truth&quot;&gt;single source of truth&lt;/a&gt; for everything.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;So if you’re already trying out Nix, I highly encourage you to give the NixOS integration test framework a try for the above reasons.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</content><link rel="replies" type="application/atom+xml" href="https://www.haskellforall.com/feeds/5021321668654472536/comments/default" title="Post Comments"><link rel="replies" type="text/html" href="https://www.haskellforall.com/2020/11/how-to-use-nixos-for-lightweight.html#comment-form" title="3 Comments"><link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/5021321668654472536"><link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/5021321668654472536"><link rel="alternate" type="text/html" href="https://www.haskellforall.com/2020/11/how-to-use-nixos-for-lightweight.html" title="How to use NixOS for lightweight integration tests"><author><name>Gabriel Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/></author><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-5829187892816107059</id><published>2020-11-10T09:05:00.001-08:00</published><updated>2020-11-10T09:05:55.040-08:00</updated><title type="text">Pretty-print syntax trees with this one simple trick</title><content type="html">&lt;!DOCTYPE html&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;utf-8&quot; /&gt;  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;  &lt;title&gt;prettyprint&lt;/title&gt;  &lt;style&gt;    code{white-space: pre-wrap;}     span.smallcaps{font-variant: small-caps;}     span.underline{text-decoration: underline;}     div.column{display: inline-block; vertical-align: top; width: 50%;}     div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}     ul.task-list{list-style: none;}     pre &gt; code.sourceCode { white-space: pre; position: relative; }     pre &gt; code.sourceCode &gt; span { display: inline-block; line-height: 1.25; }     pre &gt; code.sourceCode &gt; span:empty { height: 1.2em; }     code.sourceCode &gt; span { color: inherit; text-decoration: inherit; }     div.sourceCode { margin: 1em 0; }     pre.sourceCode { margin: 0; }     @media screen {     div.sourceCode { overflow: auto; }     }     @media print {     pre &gt; code.sourceCode { white-space: pre-wrap; }     pre &gt; code.sourceCode &gt; span { text-indent: -5em; padding-left: 5em; }     }     pre.numberSource code       { counter-reset: source-line 0; }     pre.numberSource code &gt; span       { position: relative; left: -4em; counter-increment: source-line; }     pre.numberSource code &gt; span &gt; a:first-child::before       { content: counter(source-line);         position: relative; left: -1em; text-align: right; vertical-align: baseline;         border: none; display: inline-block;         -webkit-touch-callout: none; -webkit-user-select: none;         -khtml-user-select: none; -moz-user-select: none;         -ms-user-select: none; user-select: none;         padding: 0 4px; width: 4em;         color: #aaaaaa;       }     pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }     div.sourceCode       {   }     @media screen {     pre &gt; code.sourceCode &gt; span &gt; a:first-child::before { text-decoration: underline; }     }     code span.al { color: #ff0000; font-weight: bold; } /* Alert */     code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */     code span.at { color: #7d9029; } /* Attribute */     code span.bn { color: #40a070; } /* BaseN */     code span.bu { } /* BuiltIn */     code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */     code span.ch { color: #4070a0; } /* Char */     code span.cn { color: #880000; } /* Constant */     code span.co { color: #60a0b0; font-style: italic; } /* Comment */     code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */     code span.do { color: #ba2121; font-style: italic; } /* Documentation */     code span.dt { color: #902000; } /* DataType */     code span.dv { color: #40a070; } /* DecVal */     code span.er { color: #ff0000; font-weight: bold; } /* Error */     code span.ex { } /* Extension */     code span.fl { color: #40a070; } /* Float */     code span.fu { color: #06287e; } /* Function */     code span.im { } /* Import */     code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */     code span.kw { color: #007020; font-weight: bold; } /* Keyword */     code span.op { color: #666666; } /* Operator */     code span.ot { color: #007020; } /* Other */     code span.pp { color: #bc7a00; } /* Preprocessor */     code span.sc { color: #4070a0; } /* SpecialChar */     code span.ss { color: #bb6688; } /* SpecialString */     code span.st { color: #4070a0; } /* String */     code span.va { color: #19177c; } /* Variable */     code span.vs { color: #4070a0; } /* VerbatimString */     code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */   &lt;/style&gt;  &lt;!--[if lt IE 9]&gt;    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;  &lt;![endif]--&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;I want to share a simple trick for pretty-printing syntax trees with the correct precedence that I’ve been using in my own interpreter projects. I believe this trick has been shared before, but I don’t know what the name of it is, so I wasn’t able to easily search for prior art. If somebody knows where this idea originated from then I can update this post to credit the original.&lt;/p&gt;&lt;p&gt;To illustrate the trick, I’d like to begin from the following Haskell type for a lambda calculus expression:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Expression&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Lambda&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Expression&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;#cb1-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Expression&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Expression&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-4&quot;&gt;&lt;a href=&quot;#cb1-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Variable&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… and a matching grammar for parsing such an expression (using the same notation that the &lt;code&gt;happy&lt;/code&gt; package uses):&lt;/p&gt;&lt;pre class=&quot;abnf&quot;&gt;&lt;code&gt;Expression&lt;br /&gt;  : &amp;#39;\\&amp;#39; label &amp;#39;-&amp;gt;&amp;#39; Expression                { Lambda $2 $4      }&lt;br /&gt;  | ApplicationExpression                     { $1                }&lt;br /&gt;&lt;br /&gt;ApplicationExpression&lt;br /&gt;  : ApplicationExpression VariableExpression  { Application $1 $2 }&lt;br /&gt;  | VariableExpression                        { $1                }&lt;br /&gt;&lt;br /&gt;VariableExpression&lt;br /&gt;  : label                                     { Variable $1       }&lt;br /&gt;  | &amp;#39;(&amp;#39; Expression &amp;#39;)&amp;#39;                        { $2                }&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;the-trick&quot;&gt;The trick&lt;/h4&gt;&lt;p&gt;We can pretty-print that &lt;code&gt;Expression&lt;/code&gt; type with the correct precedence without having to keep track of any precedence level. Instead, all we have to do is to write the pretty-printer to match the shape of the grammar, like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;prettyExpression ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Expression&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;#cb3-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;prettyExpression (&lt;span class=&quot;dt&quot;&gt;Lambda&lt;/span&gt; x e) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-3&quot;&gt;&lt;a href=&quot;#cb3-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;st&quot;&gt;&amp;quot;\\&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot; -&amp;gt; &amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; prettyExpression e&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-4&quot;&gt;&lt;a href=&quot;#cb3-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;prettyExpression other &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-5&quot;&gt;&lt;a href=&quot;#cb3-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    prettyApplicationExpression other&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-6&quot;&gt;&lt;a href=&quot;#cb3-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-7&quot;&gt;&lt;a href=&quot;#cb3-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;prettyApplicationExpression ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Expression&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-8&quot;&gt;&lt;a href=&quot;#cb3-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;prettyApplicationExpression (&lt;span class=&quot;dt&quot;&gt;Application&lt;/span&gt; f x) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-9&quot;&gt;&lt;a href=&quot;#cb3-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    prettyApplicationExpression f &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; prettyVariableExpression x&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-10&quot;&gt;&lt;a href=&quot;#cb3-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;prettyApplicationExpression other &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-11&quot;&gt;&lt;a href=&quot;#cb3-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    prettyVariableExpression other&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-12&quot;&gt;&lt;a href=&quot;#cb3-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-13&quot;&gt;&lt;a href=&quot;#cb3-13&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;prettyVariableExpression ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Expression&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-14&quot;&gt;&lt;a href=&quot;#cb3-14&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;prettyVariableExpression (&lt;span class=&quot;dt&quot;&gt;Variable&lt;/span&gt; x) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-15&quot;&gt;&lt;a href=&quot;#cb3-15&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    x&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-16&quot;&gt;&lt;a href=&quot;#cb3-16&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;prettyVariableExpression other &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-17&quot;&gt;&lt;a href=&quot;#cb3-17&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;st&quot;&gt;&amp;quot;(&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; prettyExpression other &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;)&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The pretty-printing logic closely follows the grammar&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Create one &lt;code&gt;pretty…&lt;/code&gt; function for each nonterminal symbol in the grammar&lt;/p&gt;&lt;p&gt;For example, since we have a nonterminal symbol named &lt;code&gt;ApplicationExpression&lt;/code&gt;, we create a matching pretty-printing function named &lt;code&gt;prettyApplicationExpression&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Each &lt;code&gt;pretty…&lt;/code&gt; function matches one pattern per alternative in the grammar&lt;/p&gt;&lt;p&gt;In other words, if the production rule for &lt;code&gt;ApplicationExpression&lt;/code&gt; has two alternatives, then the &lt;code&gt;prettyApplicationExpression&lt;/code&gt; matches two patterns corresponding to each of the two alternatives, respectively.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Pretty-print non-terminal symbols using the matching pretty-printing function&lt;/p&gt;&lt;p&gt;For example, we pretty-print a function’s argument using &lt;code&gt;prettyVariableExpression&lt;/code&gt; since we used the &lt;code&gt;VariableExpression&lt;/code&gt; nonterminal symbol to parse that argument.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Pretty-print terminal symbols in the obvious way&lt;/p&gt;&lt;p&gt;… with any necessary whitespace&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;That’s the entire trick! If you follow those simple rules then the prettyprinter will automatically respect precedence, inserting parentheses in the right places and eliding parentheses when they are not necessary.&lt;/p&gt;&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;&lt;p&gt;There is one major downside to this trick: if you add a new constructor to your syntax tree and you forget to update the pretty-printer then your pretty-printer will infinitely loop. This is pretty annoying as you might imagine.&lt;/p&gt;&lt;p&gt;The main upside to this trick is that pretty-printer logic is very simple to write, so mechanical that you could probably automate it (although I’m not sure if somebody has done so, yet).&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</content><link rel="replies" type="application/atom+xml" href="https://www.haskellforall.com/feeds/5829187892816107059/comments/default" title="Post Comments"><link rel="replies" type="text/html" href="https://www.haskellforall.com/2020/11/pretty-print-syntax-trees-with-this-one.html#comment-form" title="3 Comments"><link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/5829187892816107059"><link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/5829187892816107059"><link rel="alternate" type="text/html" href="https://www.haskellforall.com/2020/11/pretty-print-syntax-trees-with-this-one.html" title="Pretty-print syntax trees with this one simple trick"><author><name>Gabriel Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/></author><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-452020658041246379</id><published>2020-10-30T07:51:00.001-07:00</published><updated>2020-10-30T13:42:21.975-07:00</updated><title type="text">Why I prefer functional programming</title><content type="html">&lt;!DOCTYPE html&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;utf-8&quot; /&gt;  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;  &lt;title&gt;functional&lt;/title&gt;  &lt;style&gt;    code{white-space: pre-wrap;}     span.smallcaps{font-variant: small-caps;}     span.underline{text-decoration: underline;}     div.column{display: inline-block; vertical-align: top; width: 50%;}     div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}     ul.task-list{list-style: none;}   &lt;/style&gt;  &lt;!--[if lt IE 9]&gt;    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;  &lt;![endif]--&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;This post explains why I stick with functional programming, using a rationale that a non-functional programmer can relate to.&lt;/p&gt;&lt;p&gt;The reason is actually pretty simple: functional programming idioms are more enduring and portable than idioms from other programming paradigms (such as procedural or object-oriented programming). To explain why, I need to first define what I understand “functional programming” to mean (which is admittedly an imprecise and vague term).&lt;/p&gt;&lt;p&gt;I personally use the term “functional programming” to denote a style of programming where you restrict yourself as much as possible to the following language features:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Scalars, including: &lt;ul&gt;&lt;li&gt;Numbers&lt;/li&gt;&lt;li&gt;Strings&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Algebraic data types, including: &lt;ul&gt;&lt;li&gt;Records&lt;/li&gt;&lt;li&gt;Tagged unions, including: &lt;ul&gt;&lt;li&gt;Bools&lt;/li&gt;&lt;li&gt;Optional values&lt;/li&gt;&lt;li&gt;Enums&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Recursion, including: &lt;ul&gt;&lt;li&gt;Lists&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;First-class functions&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Carefully note what’s absent from the list. We don’t mention:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Classes / Objects&lt;/li&gt;&lt;li&gt;Mutation&lt;/li&gt;&lt;li&gt;Structured programming idioms (e.g. &lt;code&gt;for&lt;/code&gt; / &lt;code&gt;while&lt;/code&gt; loops)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;That’s not to say that those features are &lt;em&gt;banned&lt;/em&gt; from my definition of functional programming. Think of the definition as more of a “tech radar” where the former set of features fall in the “Adopt” category and the latter set of features fall in the “Hold” category.&lt;/p&gt;&lt;p&gt;So what distinguishes the former “approved” features from the latter “discouraged” features? The approved language features are “timeless”. You’re always going to need numbers, lists, strings, functions, records, etc. They aren’t even specific to programming: they predate programming and originate from good old-fashioned math. If your language doesn’t support one or more of those features you will run into difficulties modeling some problem domains.&lt;/p&gt;&lt;p&gt;However, once you verse yourself in functional programming idioms you realize that you don’t actually need much else beyond those features:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Error handling? Use a tagged union (e.g. &lt;code&gt;Either&lt;/code&gt; / &lt;code&gt;Result&lt;/code&gt;)&lt;/li&gt;&lt;li&gt;Loops? Use recursion&lt;/li&gt;&lt;li&gt;Dependency injection? Use a higher-order function&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;When you view things in that light you begin to view other programming idioms as window dressing that comes and goes; not fundamental to the discipline of software engineering.&lt;/p&gt;&lt;p&gt;Moreover, using “timeless” primitives fosters a programming style that is more portable than most. Most functional programming idioms can be ported to any language, with the notable exception of recursion and generalized tagged unions (which not all languages support). However, functional programmers learn how to translate recursion and tagged unions to equivalent idioms in other languages (e.g. loops and the visitor pattern, respectively). However, if you try to port object-oriented idioms to a non-object-oriented language you’re going to have a bad time — likewise for porting imperative idioms to a functional programming language.&lt;/p&gt;&lt;p&gt;This is why my tech radar marks functional programming as “Adopt” and marks other programming paradigms as “Hold”.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</content><link rel="replies" type="application/atom+xml" href="https://www.haskellforall.com/feeds/452020658041246379/comments/default" title="Post Comments"><link rel="replies" type="text/html" href="https://www.haskellforall.com/2020/10/why-i-prefer-functional-programming.html#comment-form" title="8 Comments"><link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/452020658041246379"><link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/452020658041246379"><link rel="alternate" type="text/html" href="https://www.haskellforall.com/2020/10/why-i-prefer-functional-programming.html" title="Why I prefer functional programming"><author><name>Gabriel Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/></author><thr:total>8</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-6349570406012585360</id><published>2020-07-27T08:14:00.006-07:00</published><updated>2020-07-28T13:12:14.068-07:00</updated><title type="text">The golden rule of software quality</title><content type="html">&lt;!DOCTYPE html&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;utf-8&quot; /&gt;  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;  &lt;title&gt;golden-rule&lt;/title&gt;  &lt;style&gt;      code{white-space: pre-wrap;}       span.smallcaps{font-variant: small-caps;}       span.underline{text-decoration: underline;}       div.column{display: inline-block; vertical-align: top; width: 50%;}   &lt;/style&gt;  &lt;style&gt;pre &gt; code.sourceCode { white-space: pre; position: relative; } pre &gt; code.sourceCode &gt; span { display: inline-block; line-height: 1.25; } pre &gt; code.sourceCode &gt; span:empty { height: 1.2em; } code.sourceCode &gt; span { color: inherit; text-decoration: inherit; } div.sourceCode { margin: 1em 0; } pre.sourceCode { margin: 0; } @media screen { div.sourceCode { overflow: auto; } } @media print { pre &gt; code.sourceCode { white-space: pre-wrap; } pre &gt; code.sourceCode &gt; span { text-indent: -5em; padding-left: 5em; } } pre.numberSource code   { counter-reset: source-line 0; } pre.numberSource code &gt; span   { position: relative; left: -4em; counter-increment: source-line; } pre.numberSource code &gt; span &gt; a:first-child::before   { content: counter(source-line);     position: relative; left: -1em; text-align: right; vertical-align: baseline;     border: none; display: inline-block;     -webkit-touch-callout: none; -webkit-user-select: none;     -khtml-user-select: none; -moz-user-select: none;     -ms-user-select: none; user-select: none;     padding: 0 4px; width: 4em;     color: #aaaaaa;   } pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; } div.sourceCode   {   } @media screen { pre &gt; code.sourceCode &gt; span &gt; a:first-child::before { text-decoration: underline; } } code span.al { color: #ff0000; font-weight: bold; } /* Alert */ code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */ code span.at { color: #7d9029; } /* Attribute */ code span.bn { color: #40a070; } /* BaseN */ code span.bu { } /* BuiltIn */ code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */ code span.ch { color: #4070a0; } /* Char */ code span.cn { color: #880000; } /* Constant */ code span.co { color: #60a0b0; font-style: italic; } /* Comment */ code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */ code span.do { color: #ba2121; font-style: italic; } /* Documentation */ code span.dt { color: #902000; } /* DataType */ code span.dv { color: #40a070; } /* DecVal */ code span.er { color: #ff0000; font-weight: bold; } /* Error */ code span.ex { } /* Extension */ code span.fl { color: #40a070; } /* Float */ code span.fu { color: #06287e; } /* Function */ code span.im { } /* Import */ code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */ code span.kw { color: #007020; font-weight: bold; } /* Keyword */ code span.op { color: #666666; } /* Operator */ code span.ot { color: #007020; } /* Other */ code span.pp { color: #bc7a00; } /* Preprocessor */ code span.sc { color: #4070a0; } /* SpecialChar */ code span.ss { color: #bb6688; } /* SpecialString */ code span.st { color: #4070a0; } /* String */ code span.va { color: #19177c; } /* Variable */ code span.vs { color: #4070a0; } /* VerbatimString */ code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */   &lt;/style&gt;  &lt;!--[if lt IE 9]&gt;    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;  &lt;![endif]--&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;This post summarizes a rule of thumb that I commonly cite in software quality discussions, so that I can link to my own post to save time. I have taken to calling this the “golden rule of software quality” because the rule is succinct and generalizable.&lt;/p&gt;&lt;p&gt;The golden rule is:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Prefer to push fixes upstream instead of working around problems downstream&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;… and I’ll explain implications of this rule for a few software engineering tradeoffs (using examples from the Haskell community and ecosystem).&lt;/p&gt;&lt;p&gt;Disclaimer: The golden rule of software quality bears no relationship to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Golden_Rule&quot;&gt;golden rule&lt;/a&gt; of treating others as you want to be treated.&lt;/p&gt;&lt;h4 id=&quot;third-party-dependencies&quot;&gt;Third-party dependencies&lt;/h4&gt;&lt;p&gt;Most developers rely on third-party dependencies or tools for their projects, but the same developers rarely give thought to fixing or improving that same third-party code. Instead, they tend to succumb to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Bystander_effect&quot;&gt;bystander effect&lt;/a&gt;, meaning that the more widely used a project, the more a person assumes that some other developer will take care of any problems for them. Consequently, these same developers tend to work around problems in widely used tools.&lt;/p&gt;&lt;p&gt;For example, for the longest time Haskell did not support a “dot” syntax for accessing record fields, something that the community worked around downstream through a variety of packages (including &lt;code&gt;lens&lt;/code&gt;) to simulate an approximation of dot syntax within the language. This approach had some upsides (accessors were first class), but several downsides such as poor type inference, poor error messages, and lack of editor support for field completions. Only recently did &lt;a href=&quot;https://github.com/ndmitchell&quot;&gt;Neil Mitchell&lt;/a&gt; and &lt;a href=&quot;https://github.com/shayne-fletcher&quot;&gt;Shayne Fletcher&lt;/a&gt; upstream this feature directly into the language via the &lt;a href=&quot;https://github.com/ghc-proposals/ghc-proposals/pull/282&quot;&gt;&lt;code&gt;RecordDotSyntax&lt;/code&gt; proposal&lt;/a&gt;, solving the root of the problem.&lt;/p&gt;&lt;p&gt;The golden rule of software quality implies that you should prefer to directly improve the tools and packages that you depend on (“push fixes upstream”) instead of hacking around the problem locally (“working around problems downstream”). These sorts of upstream improvements can be made directly to:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Your editor / IDE&lt;/li&gt;&lt;li&gt;Your command-line shell&lt;/li&gt;&lt;li&gt;Programming languages you use&lt;/li&gt;&lt;li&gt;Packages that you depend on&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Note that this is not always possible (especially if upstream is hostile to outside contributions), but don’t give up before at least trying to do so.&lt;/p&gt;&lt;h4 id=&quot;typed-apis&quot;&gt;Typed APIs&lt;/h4&gt;&lt;p&gt;Function types can also follow this same precept. For example, there are two ways that one can assign a “safe” (total) type to the &lt;code&gt;head&lt;/code&gt; function for obtaining the first value in a list.&lt;/p&gt;&lt;p&gt;The first approach pushes error handling downstream:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Return the first value wrapped in a `Just` if present, `Nothing` otherwise&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ::&lt;/span&gt; [a] &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Maybe&lt;/span&gt; a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… and the second approach pushes the requirements upstream:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Return the first value of a list, which never fails if the list is `NonEmpty`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;NonEmpty&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The golden rule states that you should prefer the latter type signature for &lt;code&gt;head&lt;/code&gt; (that requires a &lt;code&gt;NonEmpty&lt;/code&gt; input) since this type pushes the fix upstream by not allowing the user to supply an empty list in the first place. More generally, if you take this rule to its logical conclusion you end up making &lt;a href=&quot;https://fsharpforfunandprofit.com/posts/designing-with-types-making-illegal-states-unrepresentable/&quot;&gt;illegal states unrepresentable&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Contrast this with the former type signature for &lt;code&gt;head&lt;/code&gt; that works around a potentially empty list by returning a &lt;code&gt;Maybe&lt;/code&gt;. This type promotes catching errors later in the process, which reduces quality since we don’t fail as quickly as we should. You can improve quality by failing fast at the true upstream root of the problem instead of debugging indirect downstream symptoms of the problem.&lt;/p&gt;&lt;h4 id=&quot;social-divisions&quot;&gt;Social divisions&lt;/h4&gt;&lt;p&gt;I’m a firm believer in &lt;a href=&quot;https://en.wikipedia.org/wiki/Conway%27s_law&quot;&gt;Conway’s Law&lt;/a&gt;, which says:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization’s communication structure.&lt;/p&gt;&lt;p&gt;— Melvin E. Conway&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;… which I sometimes paraphrase as “social divisions lead to technical divisions”.&lt;/p&gt;&lt;p&gt;If social issues are upstream of technical issues, the golden rule implies that we should prefer fixing root causes (social friction) instead of attempting to mask social disagreements with technical solutions.&lt;/p&gt;&lt;p&gt;The classic example of this within the Haskell community is the &lt;code&gt;cabal&lt;/code&gt; vs. &lt;code&gt;stack&lt;/code&gt; divide, which originated out of divisions between FPComplete and Cabal contributors (Corrected based on feedback from the Haskell subreddit). The failure to resolve the upstream friction between the paid and open source contributors led to an attempt to work around the problem downstream with a technical solution by creating a parallel install tool. This in turn fragmented the Haskell community, leading to a poor and confusing experience for first-time users.&lt;/p&gt;&lt;p&gt;That’s not to imply that the divide in the community could have been resolved (maybe the differences between paid contributors and open source volunteers were irreconcilable), but the example still illustrates the marked impact on quality of failing to fix issues at the source.&lt;/p&gt;&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;&lt;p&gt;Carefully note that the golden rule of software quality does not mandate that you have to fix problems upstream. The rule advises that you should prefer to upstream fixes, all other things equal. Sometimes other considerations can prevent one from doing so (such as limitations on time or money). However, when quality is paramount then you should strive to observe the rule!&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</content><link rel="replies" type="application/atom+xml" href="https://www.haskellforall.com/feeds/6349570406012585360/comments/default" title="Post Comments"><link rel="replies" type="text/html" href="https://www.haskellforall.com/2020/07/the-golden-rule-of-software-quality.html#comment-form" title="7 Comments"><link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/6349570406012585360"><link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/6349570406012585360"><link rel="alternate" type="text/html" href="https://www.haskellforall.com/2020/07/the-golden-rule-of-software-quality.html" title="The golden rule of software quality"><author><name>Gabriel Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/></author><thr:total>7</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-3587246150666897293</id><published>2020-07-13T18:39:00.003-07:00</published><updated>2020-07-27T14:37:56.335-07:00</updated><title type="text">Record constructors</title><content type="html">&lt;!DOCTYPE html&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;utf-8&quot; /&gt;  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;  &lt;title&gt;records&lt;/title&gt;  &lt;style&gt;    code{white-space: pre-wrap;}     span.smallcaps{font-variant: small-caps;}     span.underline{text-decoration: underline;}     div.column{display: inline-block; vertical-align: top; width: 50%;}     div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}     ul.task-list{list-style: none;}     pre &gt; code.sourceCode { white-space: pre; position: relative; }     pre &gt; code.sourceCode &gt; span { display: inline-block; line-height: 1.25; }     pre &gt; code.sourceCode &gt; span:empty { height: 1.2em; }     code.sourceCode &gt; span { color: inherit; text-decoration: inherit; }     div.sourceCode { margin: 1em 0; }     pre.sourceCode { margin: 0; }     @media screen {     div.sourceCode { overflow: auto; }     }     @media print {     pre &gt; code.sourceCode { white-space: pre-wrap; }     pre &gt; code.sourceCode &gt; span { text-indent: -5em; padding-left: 5em; }     }     pre.numberSource code       { counter-reset: source-line 0; }     pre.numberSource code &gt; span       { position: relative; left: -4em; counter-increment: source-line; }     pre.numberSource code &gt; span &gt; a:first-child::before       { content: counter(source-line);         position: relative; left: -1em; text-align: right; vertical-align: baseline;         border: none; display: inline-block;         -webkit-touch-callout: none; -webkit-user-select: none;         -khtml-user-select: none; -moz-user-select: none;         -ms-user-select: none; user-select: none;         padding: 0 4px; width: 4em;         color: #aaaaaa;       }     pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }     div.sourceCode       {   }     @media screen {     pre &gt; code.sourceCode &gt; span &gt; a:first-child::before { text-decoration: underline; }     }     code span.al { color: #ff0000; font-weight: bold; } /* Alert */     code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */     code span.at { color: #7d9029; } /* Attribute */     code span.bn { color: #40a070; } /* BaseN */     code span.bu { } /* BuiltIn */     code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */     code span.ch { color: #4070a0; } /* Char */     code span.cn { color: #880000; } /* Constant */     code span.co { color: #60a0b0; font-style: italic; } /* Comment */     code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */     code span.do { color: #ba2121; font-style: italic; } /* Documentation */     code span.dt { color: #902000; } /* DataType */     code span.dv { color: #40a070; } /* DecVal */     code span.er { color: #ff0000; font-weight: bold; } /* Error */     code span.ex { } /* Extension */     code span.fl { color: #40a070; } /* Float */     code span.fu { color: #06287e; } /* Function */     code span.im { } /* Import */     code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */     code span.kw { color: #007020; font-weight: bold; } /* Keyword */     code span.op { color: #666666; } /* Operator */     code span.ot { color: #007020; } /* Other */     code span.pp { color: #bc7a00; } /* Preprocessor */     code span.sc { color: #4070a0; } /* SpecialChar */     code span.ss { color: #bb6688; } /* SpecialString */     code span.st { color: #4070a0; } /* String */     code span.va { color: #19177c; } /* Variable */     code span.vs { color: #4070a0; } /* VerbatimString */     code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */   &lt;/style&gt;  &lt;!--[if lt IE 9]&gt;    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;  &lt;![endif]--&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;This is a short post documenting various record-related idioms in the Haskell ecosystem. First-time package users can use this post to better understand record API idioms they encounter in the wild.&lt;/p&gt;&lt;p&gt;For package authors, I also include a brief recommendation near the end of the post explaining which idiom I personally prefer.&lt;/p&gt;&lt;h4 id=&quot;the-example&quot;&gt;The example&lt;/h4&gt;&lt;p&gt;I’ll use the following record type as the running example for this post:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Example&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;#cb1-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{&lt;span class=&quot;ot&quot;&gt; name ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; ,&lt;span class=&quot;ot&quot;&gt; admin ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt; }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are a few ways you can create a &lt;code&gt;Person&lt;/code&gt; record if the package author exports the record constructors.&lt;/p&gt;&lt;p&gt;The simplest approach requires no extensions. You can initialize the value of every field in a single expression, like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;example ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot;&gt;&lt;/a&gt;example &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{ name &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;John Doe&amp;quot;&lt;/span&gt;, admin &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;True&lt;/span&gt; }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Some record literals can get quite large, so the language provides two extensions which can help with record assembly.&lt;/p&gt;&lt;p&gt;First, you can use the &lt;code&gt;NamedFieldPuns&lt;/code&gt; extension, to author a record like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;{-# LANGUAGE NamedFieldPuns #-}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;#cb3-2&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-3&quot;&gt;&lt;a href=&quot;#cb3-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;example ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-4&quot;&gt;&lt;a href=&quot;#cb3-4&quot;&gt;&lt;/a&gt;example &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{ name, admin }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-5&quot;&gt;&lt;a href=&quot;#cb3-5&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-6&quot;&gt;&lt;a href=&quot;#cb3-6&quot;&gt;&lt;/a&gt;    name &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;John Doe&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-7&quot;&gt;&lt;a href=&quot;#cb3-7&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-8&quot;&gt;&lt;a href=&quot;#cb3-8&quot;&gt;&lt;/a&gt;    admin &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This works because the &lt;code&gt;NamedFieldPuns&lt;/code&gt; extension translates &lt;code&gt;Person{ name, admin }&lt;/code&gt; to &lt;code&gt;Person{ name = name, admin = admin }&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;RecordWildCards&lt;/code&gt; extension goes a step further and allows you to initialize a record literal without naming all of the fields (again), like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;#cb4-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;{-# LANGUAGE RecordWildCards #-}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-2&quot;&gt;&lt;a href=&quot;#cb4-2&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-3&quot;&gt;&lt;a href=&quot;#cb4-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;example ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-4&quot;&gt;&lt;a href=&quot;#cb4-4&quot;&gt;&lt;/a&gt;example &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{&lt;span class=&quot;op&quot;&gt;..&lt;/span&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-5&quot;&gt;&lt;a href=&quot;#cb4-5&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-6&quot;&gt;&lt;a href=&quot;#cb4-6&quot;&gt;&lt;/a&gt;    name &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;John Doe&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-7&quot;&gt;&lt;a href=&quot;#cb4-7&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-8&quot;&gt;&lt;a href=&quot;#cb4-8&quot;&gt;&lt;/a&gt;    admin &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Vice versa, you can destructure a record literal in a few ways. For example, you can access record fields using accessor functions:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;#cb5-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;render ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-2&quot;&gt;&lt;a href=&quot;#cb5-2&quot;&gt;&lt;/a&gt;render person &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; name person &lt;span class=&quot;op&quot;&gt;++&lt;/span&gt; suffix&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-3&quot;&gt;&lt;a href=&quot;#cb5-3&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb5-4&quot;&gt;&lt;a href=&quot;#cb5-4&quot;&gt;&lt;/a&gt;    suffix &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; admin person &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot; - Admin&amp;quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… or you can pattern match on a record literal:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb6&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb6-1&quot;&gt;&lt;a href=&quot;#cb6-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;render ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-2&quot;&gt;&lt;a href=&quot;#cb6-2&quot;&gt;&lt;/a&gt;render &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{ name &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; name, admin &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; admin } &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; name &lt;span class=&quot;op&quot;&gt;++&lt;/span&gt; suffix&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-3&quot;&gt;&lt;a href=&quot;#cb6-3&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-4&quot;&gt;&lt;a href=&quot;#cb6-4&quot;&gt;&lt;/a&gt;    suffix &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; admin &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot; - Admin&amp;quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… or you can use the &lt;code&gt;NamedFieldPuns&lt;/code&gt; extension (which also works in reverse):&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb7&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb7-1&quot;&gt;&lt;a href=&quot;#cb7-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;render ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-2&quot;&gt;&lt;a href=&quot;#cb7-2&quot;&gt;&lt;/a&gt;render &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{ name, admin } &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; name &lt;span class=&quot;op&quot;&gt;++&lt;/span&gt; suffix&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-3&quot;&gt;&lt;a href=&quot;#cb7-3&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-4&quot;&gt;&lt;a href=&quot;#cb7-4&quot;&gt;&lt;/a&gt;    suffix &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; admin &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot; - Admin&amp;quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… or you can use the &lt;code&gt;RecordWildCards&lt;/code&gt; extension (which also works in reverse):&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb8&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb8-1&quot;&gt;&lt;a href=&quot;#cb8-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;render ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-2&quot;&gt;&lt;a href=&quot;#cb8-2&quot;&gt;&lt;/a&gt;render &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{&lt;span class=&quot;op&quot;&gt;..&lt;/span&gt;} &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; name &lt;span class=&quot;op&quot;&gt;++&lt;/span&gt; suffix&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-3&quot;&gt;&lt;a href=&quot;#cb8-3&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-4&quot;&gt;&lt;a href=&quot;#cb8-4&quot;&gt;&lt;/a&gt;    suffix &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; admin &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot; - Admin&amp;quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Also, once the &lt;code&gt;RecordDotSyntax&lt;/code&gt; extension is available you can use ordinary dot syntax to access record fields:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb9&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb9-1&quot;&gt;&lt;a href=&quot;#cb9-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;render ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb9-2&quot;&gt;&lt;a href=&quot;#cb9-2&quot;&gt;&lt;/a&gt;render person &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; person&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;op&quot;&gt;++&lt;/span&gt; suffix&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb9-3&quot;&gt;&lt;a href=&quot;#cb9-3&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb9-4&quot;&gt;&lt;a href=&quot;#cb9-4&quot;&gt;&lt;/a&gt;    suffix &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; person&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;admin &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot; - Admin&amp;quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&quot;opaque-record-types&quot;&gt;Opaque record types&lt;/h4&gt;&lt;p&gt;Some Haskell packages will elect to not export the record constructor. When they do so they will instead provide a function that initializes a record value with all required fields and defaults the remaining fields.&lt;/p&gt;&lt;p&gt;For example, suppose the &lt;code&gt;name&lt;/code&gt; field were required for our &lt;code&gt;Person&lt;/code&gt; type and the &lt;code&gt;admin&lt;/code&gt; field were optional (defaulting to &lt;code&gt;False&lt;/code&gt;). The API might look like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb10&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb10-1&quot;&gt;&lt;a href=&quot;#cb10-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Example&lt;/span&gt; (&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-2&quot;&gt;&lt;a href=&quot;#cb10-2&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;(name, admin)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-3&quot;&gt;&lt;a href=&quot;#cb10-3&quot;&gt;&lt;/a&gt;    , makePerson&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-4&quot;&gt;&lt;a href=&quot;#cb10-4&quot;&gt;&lt;/a&gt;    ) &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-5&quot;&gt;&lt;a href=&quot;#cb10-5&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-6&quot;&gt;&lt;a href=&quot;#cb10-6&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{&lt;span class=&quot;ot&quot;&gt; name ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;,&lt;span class=&quot;ot&quot;&gt; admin ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt; }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-7&quot;&gt;&lt;a href=&quot;#cb10-7&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-8&quot;&gt;&lt;a href=&quot;#cb10-8&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;makePerson ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb10-9&quot;&gt;&lt;a href=&quot;#cb10-9&quot;&gt;&lt;/a&gt;makePerson name &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{ name &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; name, admin &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;False&lt;/span&gt; }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Carefully note that the module exports the &lt;code&gt;Person&lt;/code&gt; type and all of the fields, but not the &lt;code&gt;Person&lt;/code&gt; constructor. So the only way that a user can create a &lt;code&gt;Person&lt;/code&gt; record is to use the &lt;code&gt;makePerson&lt;/code&gt; “smart constructor”. The typical idiom goes like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb11&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb11-1&quot;&gt;&lt;a href=&quot;#cb11-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;example ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-2&quot;&gt;&lt;a href=&quot;#cb11-2&quot;&gt;&lt;/a&gt;example &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (makePerson &lt;span class=&quot;st&quot;&gt;&amp;quot;John Doe&amp;quot;&lt;/span&gt;){ admin &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;True&lt;/span&gt; }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In other words, the user is supposed to initialize required fields using the “smart constructor” and then set the remaining non-required fields using record syntax. This works because you can update a record type using exported fields even if the constructor is not exported.&lt;/p&gt;&lt;p&gt;The &lt;a href=&quot;https://hackage.haskell.org/package/wai&quot;&gt;&lt;code&gt;wai&lt;/code&gt; package&lt;/a&gt; is one of the more commonly used packages that observes this idiom. For example, &lt;a href=&quot;https://hackage.haskell.org/package/wai-3.2.2.1/docs/Network-Wai.html#t:Request&quot;&gt;the &lt;code&gt;Request&lt;/code&gt; record is opaque&lt;/a&gt; but the accessors are still exported, so you can create a &lt;a href=&quot;https://hackage.haskell.org/package/wai-3.2.2.1/docs/Network-Wai.html#v:defaultRequest&quot;&gt;&lt;code&gt;defaultRequest&lt;/code&gt;&lt;/a&gt; and then update that &lt;code&gt;Request&lt;/code&gt; using record syntax:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb12&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb12-1&quot;&gt;&lt;a href=&quot;#cb12-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;example ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Request&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-2&quot;&gt;&lt;a href=&quot;#cb12-2&quot;&gt;&lt;/a&gt;example &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; defaultRequest{ requestMethod &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;GET&amp;quot;&lt;/span&gt;, isSecure &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;True&lt;/span&gt; }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… and you can still access fields using the exported accessor functions:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb13&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb13-1&quot;&gt;&lt;a href=&quot;#cb13-1&quot;&gt;&lt;/a&gt;requestMethod example&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This approach also works in conjunction with &lt;code&gt;NamedFieldPuns&lt;/code&gt; for assembly (but not disassembly), so something like this valid:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb14&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb14-1&quot;&gt;&lt;a href=&quot;#cb14-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;example ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Request&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-2&quot;&gt;&lt;a href=&quot;#cb14-2&quot;&gt;&lt;/a&gt;example &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; defaultRequest{ requestMethod, isSecure }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-3&quot;&gt;&lt;a href=&quot;#cb14-3&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-4&quot;&gt;&lt;a href=&quot;#cb14-4&quot;&gt;&lt;/a&gt;    requestMethod &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;GET&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-5&quot;&gt;&lt;a href=&quot;#cb14-5&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-6&quot;&gt;&lt;a href=&quot;#cb14-6&quot;&gt;&lt;/a&gt;    isSecure &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, this approach does not work with the &lt;code&gt;RecordWildCards&lt;/code&gt; language extension.&lt;/p&gt;&lt;p&gt;Some other packages go a step further and instead of exporting the accessors they export lenses for the accessor fields. For example, the &lt;code&gt;amazonka-*&lt;/code&gt; family of packages does this, leading to record construction code like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb15&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb15-1&quot;&gt;&lt;a href=&quot;#cb15-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;example ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;PutObject&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-2&quot;&gt;&lt;a href=&quot;#cb15-2&quot;&gt;&lt;/a&gt;example &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-3&quot;&gt;&lt;a href=&quot;#cb15-3&quot;&gt;&lt;/a&gt;    putObject &lt;span class=&quot;st&quot;&gt;&amp;quot;my-example-bucket&amp;quot;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;some-key&amp;quot;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;some-body&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-4&quot;&gt;&lt;a href=&quot;#cb15-4&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;&amp;amp;&lt;/span&gt; poContentLength &lt;span class=&quot;op&quot;&gt;.~&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-5&quot;&gt;&lt;a href=&quot;#cb15-5&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;&amp;amp;&lt;/span&gt; poStorageClass  &lt;span class=&quot;op&quot;&gt;.~&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;ReducedRedundancy&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… and you access fields using the lenses:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb16&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb16-1&quot;&gt;&lt;a href=&quot;#cb16-1&quot;&gt;&lt;/a&gt;view poContentLength example&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&quot;my-recommendation&quot;&gt;My recommendation&lt;/h4&gt;&lt;p&gt;I believe that package authors should prefer to export record constructors instead of using smart constructors. Specifically, the smart constructor idiom requires too much specialized language knowledge to create a record, something that should be an introductory task for a functional programming language.&lt;/p&gt;&lt;p&gt;Package authors typically justify smart constructors to improve API stability since they permit adding new default-valued fields in a backwards compatible way. However, I personally do not weight such stability highly (both as a package author and a package user) because Haskell is a typed language and these changes are easy for reverse dependencies to accommodate with the aid of the type-checker.&lt;/p&gt;&lt;p&gt;I place a higher premium on improving the experience for new contributors so that Haskell projects can more easily take root within a polyglot engineering organization. Management tends to be less reluctant to accept Haskell projects within their organization if they feel that other teams can confidently contribute to the Haskell code.&lt;/p&gt;&lt;h4 id=&quot;future-directions&quot;&gt;Future directions&lt;/h4&gt;&lt;p&gt;One long-term solution that could provide the best of both worlds is if the language had first-class support for default-valued fields. In other words, perhaps you could author a record type like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb17&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb17-1&quot;&gt;&lt;a href=&quot;#cb17-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{&lt;span class=&quot;ot&quot;&gt; name ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; ,&lt;span class=&quot;ot&quot;&gt; admin ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;False&lt;/span&gt; }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… and then you could safely omit default-valued fields when initializing a record. Of course, I haven’t fully thought through the implications of such a change.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</content><link rel="replies" type="application/atom+xml" href="https://www.haskellforall.com/feeds/3587246150666897293/comments/default" title="Post Comments"><link rel="replies" type="text/html" href="https://www.haskellforall.com/2020/07/record-constructors.html#comment-form" title="6 Comments"><link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/3587246150666897293"><link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/3587246150666897293"><link rel="alternate" type="text/html" href="https://www.haskellforall.com/2020/07/record-constructors.html" title="Record constructors"><author><name>Gabriel Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/></author><thr:total>6</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-8948542367026898409</id><published>2020-04-21T08:02:00.000-07:00</published><updated>2020-04-21T08:02:06.749-07:00</updated><title type="text">Blazing fast Fibonacci numbers using Monoids</title><content type="html">&lt;!DOCTYPE html&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;utf-8&quot; /&gt;  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;  &lt;title&gt;fibonacci&lt;/title&gt;  &lt;style&gt;    code{white-space: pre-wrap;}     span.smallcaps{font-variant: small-caps;}     span.underline{text-decoration: underline;}     div.column{display: inline-block; vertical-align: top; width: 50%;}     div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}     ul.task-list{list-style: none;}     pre &gt; code.sourceCode { white-space: pre; position: relative; }     pre &gt; code.sourceCode &gt; span { display: inline-block; line-height: 1.25; }     pre &gt; code.sourceCode &gt; span:empty { height: 1.2em; }     code.sourceCode &gt; span { color: inherit; text-decoration: inherit; }     div.sourceCode { margin: 1em 0; }     pre.sourceCode { margin: 0; }     @media screen {     div.sourceCode { overflow: auto; }     }     @media print {     pre &gt; code.sourceCode { white-space: pre-wrap; }     pre &gt; code.sourceCode &gt; span { text-indent: -5em; padding-left: 5em; }     }     pre.numberSource code       { counter-reset: source-line 0; }     pre.numberSource code &gt; span       { position: relative; left: -4em; counter-increment: source-line; }     pre.numberSource code &gt; span &gt; a:first-child::before       { content: counter(source-line);         position: relative; left: -1em; text-align: right; vertical-align: baseline;         border: none; display: inline-block;         -webkit-touch-callout: none; -webkit-user-select: none;         -khtml-user-select: none; -moz-user-select: none;         -ms-user-select: none; user-select: none;         padding: 0 4px; width: 4em;         color: #aaaaaa;       }     pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }     div.sourceCode       {   }     @media screen {     pre &gt; code.sourceCode &gt; span &gt; a:first-child::before { text-decoration: underline; }     }     code span.al { color: #ff0000; font-weight: bold; } /* Alert */     code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */     code span.at { color: #7d9029; } /* Attribute */     code span.bn { color: #40a070; } /* BaseN */     code span.bu { } /* BuiltIn */     code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */     code span.ch { color: #4070a0; } /* Char */     code span.cn { color: #880000; } /* Constant */     code span.co { color: #60a0b0; font-style: italic; } /* Comment */     code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */     code span.do { color: #ba2121; font-style: italic; } /* Documentation */     code span.dt { color: #902000; } /* DataType */     code span.dv { color: #40a070; } /* DecVal */     code span.er { color: #ff0000; font-weight: bold; } /* Error */     code span.ex { } /* Extension */     code span.fl { color: #40a070; } /* Float */     code span.fu { color: #06287e; } /* Function */     code span.im { } /* Import */     code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */     code span.kw { color: #007020; font-weight: bold; } /* Keyword */     code span.op { color: #666666; } /* Operator */     code span.ot { color: #007020; } /* Other */     code span.pp { color: #bc7a00; } /* Preprocessor */     code span.sc { color: #4070a0; } /* SpecialChar */     code span.ss { color: #bb6688; } /* SpecialString */     code span.st { color: #4070a0; } /* String */     code span.va { color: #19177c; } /* Variable */     code span.vs { color: #4070a0; } /* VerbatimString */     code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */   &lt;/style&gt;  &lt;!--[if lt IE 9]&gt;    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;  &lt;![endif]--&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;This post illustrates a nifty application of Haskell’s standard library to solve a numeric problem.&lt;/p&gt;&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Fibonacci_number&quot;&gt;Fibonacci series&lt;/a&gt; is a well-known sequence of numbers defined by the following rules:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot;&gt;&lt;/a&gt;f(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot;&gt;&lt;/a&gt;f(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;#cb1-3&quot;&gt;&lt;/a&gt;f(n) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; f(n &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; f(n &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In fact, that’s not only a specification of the Fibonacci numbers: that’s also valid Haskell code (with a few gratuitous parentheses to resemble traditional mathematical notation).&lt;/p&gt;&lt;p&gt;However, that solution is inefficient and you can instead use one of two “closed form” solutions for the Fibonacci numbers.&lt;/p&gt;&lt;p&gt;The first solution says that you can compute the Nth fibonacci number using the following formula:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Fibonacci_number#Closed-form_expression&quot;&gt;Wikipedia - Fibonacci number - Closed-form expression&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot;&gt;&lt;/a&gt;f(n) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (φ&lt;span class=&quot;op&quot;&gt;^&lt;/span&gt;n &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; ψ&lt;span class=&quot;op&quot;&gt;^&lt;/span&gt;n) &lt;span class=&quot;op&quot;&gt;/&lt;/span&gt; (φ &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; ψ)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;#cb2-3&quot;&gt;&lt;/a&gt;    φ &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;sqrt&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;)) &lt;span class=&quot;op&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-4&quot;&gt;&lt;a href=&quot;#cb2-4&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb2-5&quot;&gt;&lt;a href=&quot;#cb2-5&quot;&gt;&lt;/a&gt;    ψ &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;sqrt&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;)) &lt;span class=&quot;op&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… which is also valid Haskell code.&lt;/p&gt;&lt;p&gt;Unfortunately, the above solution has two issues when translated to a computer algorithm using &lt;a href=&quot;https://en.wikipedia.org/wiki/IEEE_754&quot;&gt;IEEE 754 floating-point numbers&lt;/a&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;These floating point numbers suffer from floating point imprecision:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; f(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;#cb3-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fl&quot;&gt;54.99999999999999&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;These floating point numbers cannot handle values larger than ~1.8 × 10³⁰⁸ (the maximum double-precision floating point number)&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;#cb4-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; f(&lt;span class=&quot;dv&quot;&gt;10000&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb4-2&quot;&gt;&lt;a href=&quot;#cb4-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Infinity&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I instead prefer the second closed form solution using matrix arithmetic, which you can find here:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Fibonacci_number#Matrix_form&quot;&gt;Wikipedia - Fibonacci number - Matrix form&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I will present a minor variation on that solution which is essentially the same solution.&lt;/p&gt;&lt;p&gt;You can compute the Nth Fibonacci number by using the following matrix multiplication expression:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;-- Okay, this is not valid Haskell 😌&lt;br /&gt;             ┌   ┐ⁿ ┌ ┐&lt;br /&gt;             │0 1│  │0│&lt;br /&gt;f(n) = [1 0] │1 1│  │1│&lt;br /&gt;             └   ┘  └ ┘&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There are two reasons I prefer this matrix-based closed-form solution:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;This solution doesn’t require floating point numbers&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;You can more easily generalize this solution to other arithmetic sequences&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To expand upon the latter point, if you have an arithmetic sequence of the form:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb6&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb6-1&quot;&gt;&lt;a href=&quot;#cb6-1&quot;&gt;&lt;/a&gt;f(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; a₁&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-2&quot;&gt;&lt;a href=&quot;#cb6-2&quot;&gt;&lt;/a&gt;f(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; a₂&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-3&quot;&gt;&lt;a href=&quot;#cb6-3&quot;&gt;&lt;/a&gt;…&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-4&quot;&gt;&lt;a href=&quot;#cb6-4&quot;&gt;&lt;/a&gt;f(m) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; aₘ&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb6-5&quot;&gt;&lt;a href=&quot;#cb6-5&quot;&gt;&lt;/a&gt;f(n) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; b₁ × f(n &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; b₂ × f(n &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; … &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; bₘ × f(n &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; m)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… then the closed-form matrix solution is:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb7&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb7-1&quot;&gt;&lt;a href=&quot;#cb7-1&quot;&gt;&lt;/a&gt;                 ┌          ┐ⁿ ┌  ┐&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-2&quot;&gt;&lt;a href=&quot;#cb7-2&quot;&gt;&lt;/a&gt;                 │&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;  … │  │a₁│&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-3&quot;&gt;&lt;a href=&quot;#cb7-3&quot;&gt;&lt;/a&gt;                 │…  &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; │  │a₂│&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-4&quot;&gt;&lt;a href=&quot;#cb7-4&quot;&gt;&lt;/a&gt;                 │&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;  … &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; │  │… │&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-5&quot;&gt;&lt;a href=&quot;#cb7-5&quot;&gt;&lt;/a&gt;f(n) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; … &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;] │bₘ … b₂ b₁│  │aₘ│&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb7-6&quot;&gt;&lt;a href=&quot;#cb7-6&quot;&gt;&lt;/a&gt;                 └          ┘  └  ┘&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For now, though, we’ll stick to Fibonacci numbers, which we can implement efficiently in Haskell in less than 30 lines of code.&lt;/p&gt;&lt;p&gt;First, we’ll define a quick and dirty 2×2 matrix type as a record of four fields:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb8&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb8-1&quot;&gt;&lt;a href=&quot;#cb8-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Matrix2x2&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Matrix&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-2&quot;&gt;&lt;a href=&quot;#cb8-2&quot;&gt;&lt;/a&gt;    {&lt;span class=&quot;ot&quot;&gt; x00 ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Integer&lt;/span&gt;,&lt;span class=&quot;ot&quot;&gt; x01 ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Integer&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-3&quot;&gt;&lt;a href=&quot;#cb8-3&quot;&gt;&lt;/a&gt;    ,&lt;span class=&quot;ot&quot;&gt; x10 ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Integer&lt;/span&gt;,&lt;span class=&quot;ot&quot;&gt; x11 ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Integer&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb8-4&quot;&gt;&lt;a href=&quot;#cb8-4&quot;&gt;&lt;/a&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Haskell does have linear algebra packages, but I wanted to keep this solution as dependency-free as possible.&lt;/p&gt;&lt;p&gt;Then we’ll define matrix multiplication for this type using Haskell’s &lt;code&gt;Semigroup&lt;/code&gt; class, which you can think of as a generic interface for any operator that is associative:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb9&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb9-1&quot;&gt;&lt;a href=&quot;#cb9-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Semigroup&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Matrix2x2&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb9-2&quot;&gt;&lt;a href=&quot;#cb9-2&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;Matrix&lt;/span&gt; l00 l01 l10 l11 &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Matrix&lt;/span&gt; r00 r01 r10 r11 &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb9-3&quot;&gt;&lt;a href=&quot;#cb9-3&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Matrix&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb9-4&quot;&gt;&lt;a href=&quot;#cb9-4&quot;&gt;&lt;/a&gt;            { x00 &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; l00 &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; r00 &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; l01 &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; r10, x01 &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; l00 &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; r01 &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; l01 &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; r11&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb9-5&quot;&gt;&lt;a href=&quot;#cb9-5&quot;&gt;&lt;/a&gt;            , x10 &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; l10 &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; r00 &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; l11 &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; r10, x11 &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; l10 &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; r01 &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; l11 &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; r11&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb9-6&quot;&gt;&lt;a href=&quot;#cb9-6&quot;&gt;&lt;/a&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We’ll see why we implement this general interface in &lt;em&gt;just&lt;/em&gt; a second.&lt;/p&gt;&lt;p&gt;The only rule for this &lt;code&gt;Semigroup&lt;/code&gt; interface is that the operator we implement must obey the following associativity law:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb10&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb10-1&quot;&gt;&lt;a href=&quot;#cb10-1&quot;&gt;&lt;/a&gt;(x &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; y) &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; z &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (y &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; z)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… and matrix multiplication is indeed associative.&lt;/p&gt;&lt;p&gt;Next, we implement the &lt;code&gt;Monoid&lt;/code&gt; interface, which is essentially the same as the &lt;code&gt;Semigroup&lt;/code&gt; interface except with an additional &lt;code&gt;mempty&lt;/code&gt; value. This value is the “identity” of the corresponding &lt;code&gt;Semigroup&lt;/code&gt; operation, meaning that the value obeys the following “identity laws”:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb11&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb11-1&quot;&gt;&lt;a href=&quot;#cb11-1&quot;&gt;&lt;/a&gt;x &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; x&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-2&quot;&gt;&lt;a href=&quot;#cb11-2&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb11-3&quot;&gt;&lt;a href=&quot;#cb11-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; x &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since our &lt;code&gt;Semigroup&lt;/code&gt; operation is matrix multiplication, the corresponding identity value is … the identity matrix (and now you know how it got that name):&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb12&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb12-1&quot;&gt;&lt;a href=&quot;#cb12-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Monoid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Matrix2x2&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-2&quot;&gt;&lt;a href=&quot;#cb12-2&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-3&quot;&gt;&lt;a href=&quot;#cb12-3&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Matrix&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-4&quot;&gt;&lt;a href=&quot;#cb12-4&quot;&gt;&lt;/a&gt;            { x00 &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, x01 &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-5&quot;&gt;&lt;a href=&quot;#cb12-5&quot;&gt;&lt;/a&gt;            , x10 &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, x11 &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb12-6&quot;&gt;&lt;a href=&quot;#cb12-6&quot;&gt;&lt;/a&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, in order to translate this expression to Haskell:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;             ┌   ┐ⁿ ┌ ┐&lt;br /&gt;             │0 1│  │0│&lt;br /&gt;f(n) = [1 0] │1 1│  │1│&lt;br /&gt;             └   ┘  └ ┘&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;… we need a fast way to exponentiate our &lt;code&gt;Matrix2x2&lt;/code&gt; type. Fortunately, we can do so using the &lt;code&gt;mtimesDefault&lt;/code&gt; utility from Haskell’s standard library, which works for any type that implements &lt;code&gt;Monoid&lt;/code&gt;:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb14&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb14-1&quot;&gt;&lt;a href=&quot;#cb14-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- | Repeat a value @n@ times.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-2&quot;&gt;&lt;a href=&quot;#cb14-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-3&quot;&gt;&lt;a href=&quot;#cb14-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- &amp;gt; mtimesDefault n a = a &amp;lt;&amp;gt; a &amp;lt;&amp;gt; ... &amp;lt;&amp;gt; a  -- using &amp;lt;&amp;gt; (n-1) times&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-4&quot;&gt;&lt;a href=&quot;#cb14-4&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-5&quot;&gt;&lt;a href=&quot;#cb14-5&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Implemented using &amp;#39;stimes&amp;#39; and &amp;#39;mempty&amp;#39;.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb14-6&quot;&gt;&lt;a href=&quot;#cb14-6&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;mtimesDefault ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Monoid&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is why I chose to implement the &lt;code&gt;Semigroup&lt;/code&gt; and &lt;code&gt;Monoid&lt;/code&gt; interface, because when we do so we can use the above utility for free. The &lt;code&gt;mtimesDefault&lt;/code&gt; function works for any type that implements those two interfaces (like our &lt;code&gt;Matrix2x2&lt;/code&gt; type). This means that in order to exponentiate a matrix, I only need to write &lt;code&gt;mtimesDefault n matrix&lt;/code&gt;, which will multiply our &lt;code&gt;matrix&lt;/code&gt; by itself &lt;code&gt;n&lt;/code&gt; times.&lt;/p&gt;&lt;p&gt;The documentation for this utility fails to note one important detail: &lt;code&gt;mtimesDefault&lt;/code&gt; will compute the result in only O(log(n)) operations using the trick known as &lt;a href=&quot;https://en.wikipedia.org/wiki/Exponentiation_by_squaring&quot;&gt;exponentiation by squaring&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;This leads to the solution for our elegant and efficient fibonacci function, which is:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb15&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb15-1&quot;&gt;&lt;a href=&quot;#cb15-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;qualified&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Data.Semigroup&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Semigroup&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-2&quot;&gt;&lt;a href=&quot;#cb15-2&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-3&quot;&gt;&lt;a href=&quot;#cb15-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;f ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Integer&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-4&quot;&gt;&lt;a href=&quot;#cb15-4&quot;&gt;&lt;/a&gt;f n &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; x01 (Semigroup.mtimesDefault n matrix)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-5&quot;&gt;&lt;a href=&quot;#cb15-5&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-6&quot;&gt;&lt;a href=&quot;#cb15-6&quot;&gt;&lt;/a&gt;    matrix &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-7&quot;&gt;&lt;a href=&quot;#cb15-7&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Matrix&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-8&quot;&gt;&lt;a href=&quot;#cb15-8&quot;&gt;&lt;/a&gt;            { x00 &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, x01 &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-9&quot;&gt;&lt;a href=&quot;#cb15-9&quot;&gt;&lt;/a&gt;            , x10 &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, x11 &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb15-10&quot;&gt;&lt;a href=&quot;#cb15-10&quot;&gt;&lt;/a&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here I’ve added one last simplification, which skips the final vector multiplications by instead extracting the value in the top right corner of our 2×2 matrix. This simplification works for the fibonacci numbers, but does not necessarily work for the general solution of computing an arbitrary arithmetic sequence.&lt;/p&gt;&lt;p&gt;Let’s quickly eyeball that things work:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb16&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb16-1&quot;&gt;&lt;a href=&quot;#cb16-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;map&lt;/span&gt; f [&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb16-2&quot;&gt;&lt;a href=&quot;#cb16-2&quot;&gt;&lt;/a&gt;[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;13&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;21&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;34&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;55&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;89&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;144&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;233&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;377&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;610&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;987&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;1597&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;2584&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;4181&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;6765&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… and now we can compute extraordinarily large Fibonacci numbers, even more quickly than the computer can display them:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb17&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb17-1&quot;&gt;&lt;a href=&quot;#cb17-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; f(&lt;span class=&quot;dv&quot;&gt;100000&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb17-2&quot;&gt;&lt;a href=&quot;#cb17-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dv&quot;&gt;25974069347221724166155034021275915414880485386517696584724770703952534543511273&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb17-3&quot;&gt;&lt;a href=&quot;#cb17-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dv&quot;&gt;68626555677283671674475463758722307443211163839947387509103096569738218830449305&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb17-4&quot;&gt;&lt;a href=&quot;#cb17-4&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dv&quot;&gt;22876385313349213530267927895670105127657827163560807305053220024323311438398651&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb17-5&quot;&gt;&lt;a href=&quot;#cb17-5&quot;&gt;&lt;/a&gt;…&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb17-6&quot;&gt;&lt;a href=&quot;#cb17-6&quot;&gt;&lt;/a&gt;🌺 &lt;span class=&quot;dv&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;lines&lt;/span&gt; later 🌺&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb17-7&quot;&gt;&lt;a href=&quot;#cb17-7&quot;&gt;&lt;/a&gt;…&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb17-8&quot;&gt;&lt;a href=&quot;#cb17-8&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dv&quot;&gt;03835085621908060270866604873585849001704200923929789193938125116798421788115209&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb17-9&quot;&gt;&lt;a href=&quot;#cb17-9&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dv&quot;&gt;25913043557232163566089560351438388393901895316627435560997001569978028923636234&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb17-10&quot;&gt;&lt;a href=&quot;#cb17-10&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dv&quot;&gt;9895374653428746875&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… in fact, you can easily compute up to &lt;code&gt;f(10^8)&lt;/code&gt; in a couple of seconds using this code (not shown, because the result takes far longer to print than to compute).&lt;/p&gt;&lt;h2 id=&quot;appendix&quot;&gt;Appendix&lt;/h2&gt;&lt;p&gt;Here is the complete example in case you want to test this out on your own:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb18&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb18-1&quot;&gt;&lt;a href=&quot;#cb18-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Fibonacci&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-2&quot;&gt;&lt;a href=&quot;#cb18-2&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-3&quot;&gt;&lt;a href=&quot;#cb18-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;qualified&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Data.Semigroup&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Semigroup&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-4&quot;&gt;&lt;a href=&quot;#cb18-4&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-5&quot;&gt;&lt;a href=&quot;#cb18-5&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Matrix2x2&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Matrix&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-6&quot;&gt;&lt;a href=&quot;#cb18-6&quot;&gt;&lt;/a&gt;    {&lt;span class=&quot;ot&quot;&gt; x00 ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Integer&lt;/span&gt;,&lt;span class=&quot;ot&quot;&gt; x01 ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Integer&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-7&quot;&gt;&lt;a href=&quot;#cb18-7&quot;&gt;&lt;/a&gt;    ,&lt;span class=&quot;ot&quot;&gt; x10 ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Integer&lt;/span&gt;,&lt;span class=&quot;ot&quot;&gt; x11 ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Integer&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-8&quot;&gt;&lt;a href=&quot;#cb18-8&quot;&gt;&lt;/a&gt;    }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-9&quot;&gt;&lt;a href=&quot;#cb18-9&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-10&quot;&gt;&lt;a href=&quot;#cb18-10&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Monoid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Matrix2x2&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-11&quot;&gt;&lt;a href=&quot;#cb18-11&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-12&quot;&gt;&lt;a href=&quot;#cb18-12&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Matrix&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-13&quot;&gt;&lt;a href=&quot;#cb18-13&quot;&gt;&lt;/a&gt;            { x00 &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, x01 &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-14&quot;&gt;&lt;a href=&quot;#cb18-14&quot;&gt;&lt;/a&gt;            , x10 &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, x11 &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-15&quot;&gt;&lt;a href=&quot;#cb18-15&quot;&gt;&lt;/a&gt;            }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-16&quot;&gt;&lt;a href=&quot;#cb18-16&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-17&quot;&gt;&lt;a href=&quot;#cb18-17&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Semigroup&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Matrix2x2&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-18&quot;&gt;&lt;a href=&quot;#cb18-18&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;Matrix&lt;/span&gt; l00 l01 l10 l11 &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Matrix&lt;/span&gt; r00 r01 r10 r11 &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-19&quot;&gt;&lt;a href=&quot;#cb18-19&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Matrix&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-20&quot;&gt;&lt;a href=&quot;#cb18-20&quot;&gt;&lt;/a&gt;            { x00 &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; l00 &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; r00 &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; l01 &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; r10, x01 &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; l00 &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; r01 &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; l01 &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; r11&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-21&quot;&gt;&lt;a href=&quot;#cb18-21&quot;&gt;&lt;/a&gt;            , x10 &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; l10 &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; r00 &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; l11 &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; r10, x11 &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; l10 &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; r01 &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; l11 &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; r11&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-22&quot;&gt;&lt;a href=&quot;#cb18-22&quot;&gt;&lt;/a&gt;            }&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-23&quot;&gt;&lt;a href=&quot;#cb18-23&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-24&quot;&gt;&lt;a href=&quot;#cb18-24&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;f ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Integer&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-25&quot;&gt;&lt;a href=&quot;#cb18-25&quot;&gt;&lt;/a&gt;f n &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; x01 (Semigroup.mtimesDefault n matrix)&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-26&quot;&gt;&lt;a href=&quot;#cb18-26&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-27&quot;&gt;&lt;a href=&quot;#cb18-27&quot;&gt;&lt;/a&gt;    matrix &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-28&quot;&gt;&lt;a href=&quot;#cb18-28&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Matrix&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-29&quot;&gt;&lt;a href=&quot;#cb18-29&quot;&gt;&lt;/a&gt;            { x00 &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, x01 &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-30&quot;&gt;&lt;a href=&quot;#cb18-30&quot;&gt;&lt;/a&gt;            , x10 &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, x11 &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;cb18-31&quot;&gt;&lt;a href=&quot;#cb18-31&quot;&gt;&lt;/a&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</content><link rel="replies" type="application/atom+xml" href="https://www.haskellforall.com/feeds/8948542367026898409/comments/default" title="Post Comments"><link rel="replies" type="text/html" href="https://www.haskellforall.com/2020/04/blazing-fast-fibonacci-numbers-using.html#comment-form" title="8 Comments"><link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/8948542367026898409"><link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/8948542367026898409"><link rel="alternate" type="text/html" href="https://www.haskellforall.com/2020/04/blazing-fast-fibonacci-numbers-using.html" title="Blazing fast Fibonacci numbers using Monoids"><author><name>Gabriel Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/></author><thr:total>8</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-540511836820567620</id><published>2020-02-10T07:32:00.000-08:00</published><updated>2020-02-10T07:32:47.891-08:00</updated><title type="text">Dhall Survey Results (2019-2020)</title><content type="html">&lt;!DOCTYPE html&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;utf-8&quot; /&gt;  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;  &lt;title&gt;dhall-2020&lt;/title&gt;  &lt;style type=&quot;text/css&quot;&gt;      code{white-space: pre-wrap;}       span.smallcaps{font-variant: small-caps;}       span.underline{text-decoration: underline;}       div.column{display: inline-block; vertical-align: top; width: 50%;}   &lt;/style&gt;  &lt;!--[if lt IE 9]&gt;    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;  &lt;![endif]--&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;The results are in for this year’s Dhall survey, which you can find here:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://docs.google.com/forms/d/128Rdo10eu730qIqi2pLEkBXzkDGZhs81_ONk4AraP60/edit#responses&quot;&gt;Dhall 2019-2020 Survey&lt;/a&gt; - Visually nicer, but requires completing the survey&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://docs.google.com/spreadsheets/d/1tpSXopLK67nP6W4MpfwUW9VhFCAdUBePk_2H5LqIEBM/edit?usp=sharing&quot;&gt;Dhall 2019-2020 Survey - Spreadsheet&lt;/a&gt; - If you haven’t completed the survey&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;You might also want to compare to the summary of last year’s survey:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://www.haskellforall.com/2019/02/dhall-survey-results-2019-2019.html&quot;&gt;Dhall Survey Results (2018-2019)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Note that I will not include all write-in responses, but you can consult the above links if you want to read them all. I will only highlight responses that are representative of clear themes in survey feedback. I am also omitting praise from this summary (which I greatly appreciate, though!), because I would like to draw attention to what needs improvement.&lt;/p&gt;&lt;h2 id=&quot;adoption&quot;&gt;Adoption&lt;/h2&gt;&lt;p&gt;This year a greater number of survey respondents reported using Dhall at work:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Which option best describes your usage of Dhall:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;9 (14.3%)&lt;/code&gt; - Never used Dhall&lt;/li&gt;&lt;li&gt;&lt;code&gt;13 (20.6%)&lt;/code&gt; - Briefly tried Dhall&lt;/li&gt;&lt;li&gt;&lt;code&gt;11 (17.5%)&lt;/code&gt; - Use Dhall (but only for personal projects)&lt;/li&gt;&lt;li&gt;&lt;code&gt;11 (17.5%)&lt;/code&gt; - Use Dhall at work (but only me)&lt;/li&gt;&lt;li&gt;&lt;code&gt;19 (30.2%)&lt;/code&gt; - Use Dhall at work along with coworkers&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;… compared to last year:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;7 (11.7%)&lt;/code&gt; - Never used it&lt;/li&gt;&lt;li&gt;&lt;code&gt;22 (36.7%)&lt;/code&gt; - Briefly tried it out&lt;/li&gt;&lt;li&gt;&lt;code&gt;11 (18.3%)&lt;/code&gt; - Use it for my personal projects&lt;/li&gt;&lt;li&gt;&lt;code&gt;19 (31.7%)&lt;/code&gt; - Use it at work&lt;/li&gt;&lt;li&gt;&lt;code&gt;1 ( 1.7%)&lt;/code&gt; - Write in: Trying to convince work people to use it&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;… even though fewer people completed the survey this year (down from 73 responses to 64).&lt;/p&gt;&lt;p&gt;The most likely reason for the smaller number of responses was the greater length of the survey. This will also likely influence the distribution of responses since people more interested in Dhall will be more motivated to complete this year’s longer survey. Next year I will probably trim the survey down again in order to gather a larger sample size.&lt;/p&gt;&lt;p&gt;Even taking that into account, the number of respondents using Dhall at work grew in absolute terms.&lt;/p&gt;&lt;p&gt;This year’s survey added a new category to distinguish whether people using Dhall at work were doing so alone or alongside their coworkers. I was pleased to see that Dhall users do not appear to have difficulty persuading their coworkers to use Dhall.&lt;/p&gt;&lt;h2 id=&quot;reasons-to-adopt&quot;&gt;Reasons to adopt&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;What do you use Dhall for?&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;CI / CD / Ops (especially Kubernetes) continue to be the most prominent use cases for using Dhall:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Writing environment variables for configurations of containerized application&lt;/p&gt;&lt;p&gt;deployment configs and secrets management&lt;/p&gt;&lt;p&gt;Higher-level common configuration from which tool configuration is derived.&lt;/p&gt;&lt;p&gt;project configuration (CI, K8s, etc) &amp;amp; templating&lt;/p&gt;&lt;p&gt;Generating ECS task definitions&lt;/p&gt;&lt;p&gt;SRE/DevOps related configuration&lt;/p&gt;&lt;p&gt;Kubernetes mostly + some glue config with AWS&lt;/p&gt;&lt;p&gt;Kubernetes config&lt;/p&gt;&lt;p&gt;Mostly for kubernetes cluster configuration.&lt;/p&gt;&lt;p&gt;Configuration of my custom build system&lt;/p&gt;&lt;p&gt;dhall-kubernetes&lt;/p&gt;&lt;p&gt;Concourse Pipelines&lt;/p&gt;&lt;p&gt;publish interfaces for Ansible roles to make their usage easier through Dhall based config&lt;/p&gt;&lt;p&gt;Simple configuration for Haskell app, prototype kubernetes cluster config&lt;/p&gt;&lt;p&gt;Generate the yaml passed to –values for helm. Some gitlab ci configuration.&lt;/p&gt;&lt;p&gt;Application server configuration, database replacement&lt;/p&gt;&lt;p&gt;Setting up Docker Compose files for parts of our product to be used for automatic testing.&lt;/p&gt;&lt;p&gt;Configuration of application in kubernetes&lt;/p&gt;&lt;p&gt;Kubernetes management and shared config (application and infrastructure)&lt;/p&gt;&lt;p&gt;Generating yaml and build files&lt;/p&gt;&lt;p&gt;CI setup (generate ansible yml files)&lt;/p&gt;&lt;p&gt;Built bitbucket pipeline typing. Also internal configuration for a pdf-filler application.&lt;/p&gt;&lt;p&gt;Ansible config&lt;/p&gt;&lt;p&gt;For configuration and build utility (combinded with Shake)&lt;/p&gt;&lt;p&gt;Package definitions for a Linux ports tree builder I was building&lt;/p&gt;&lt;p&gt;Customer-specific configuration files&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;My favorite response was:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Dhall is the configuration format for my company’s product&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;However, there were still a few responses that didn’t fall into one of the DevOps use cases:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Defining a schema for metadata&lt;/p&gt;&lt;p&gt;Test data generation&lt;/p&gt;&lt;p&gt;Configuration of a personal chat bot, dhall-cabal,&lt;/p&gt;&lt;p&gt;Game data, templating LaTeX, canonical source of truth (upstream of JSON) for Elm apps.&lt;/p&gt;&lt;p&gt;dzen-dhall&lt;/p&gt;&lt;p&gt;Configuration for personal projects and generating DBC files at work&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;One surprising result was that only person wrote in Spago (PureScript’s package manager) as how they used Dhall:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;PureScript through spago&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;… even though 7 survey respondents reported using Spago in a subsequent section! In fact, 5 of them wrote in completely different use cases for Dhall. This suggests a potential issue with the survey design: people might have chosen not to write in answers that were already covered by subsequent questions.&lt;/p&gt;&lt;p&gt;Other responses simply noted that Dhall is a programmable configuration language:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Adding a small amount of automation to config generation&lt;/p&gt;&lt;p&gt;Move non-turing-complete data out of config/programs, declarative programs that get interpreted as data&lt;/p&gt;&lt;p&gt;Configuration&lt;/p&gt;&lt;p&gt;Configuration&lt;/p&gt;&lt;p&gt;…configuration&lt;/p&gt;&lt;p&gt;configuration&lt;/p&gt;&lt;p&gt;Configuration generation&lt;/p&gt;&lt;p&gt;Generate yaml configuration files&lt;/p&gt;&lt;p&gt;configuration of programs written in haskell&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;the-pitch&quot;&gt;The pitch&lt;/h2&gt;&lt;p&gt;One of the things we do periodically is refine our “pitch”, based on feedback from users (including, but not limited to, these surveys). This section covers reasons to use Dhall in users’ own words when they answered:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Why do you use Dhall?&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;One of the most interesting answers to me was from the same respondent who said that Dhall was the configuration format for their company’s product. In their own words:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Because YAML is horrible. Because having multiple configuration files for a single product is horrible and dhall is the best “big config file” format.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;The above pitch must be pretty compelling for a company to embrace Dhall to that extent. In fact, the latter half of the pitch is fairly similar to the one currently used by &lt;a href=&quot;https://dhall-lang.org/&quot;&gt;dhall-lang.org&lt;/a&gt;, focusing on Dhall’s suitability for configuration “in the large”, although we’ve recently de-emphasized replacing YAML specifically. Several commercial users provided input into that branding (and one of them could have been the same person who left the above feedback).&lt;/p&gt;&lt;p&gt;Being a “big config file” format can imply many different virtues, but in my experience users usually mean the the following programming language features:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Types (to reduce errors at scale)&lt;/li&gt;&lt;li&gt;Functions (to avoid repeating one’s self)&lt;/li&gt;&lt;li&gt;Imports (to have a single source of truth that one can import)&lt;/li&gt;&lt;li&gt;Integrations (to unify disparate configuration formats)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;… and several responses were related to these “scale”-related reasons to adopt:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Consistent typing across deployment configs and environments&lt;/p&gt;&lt;p&gt;strong types, functions and remote (decentralised) importing&lt;/p&gt;&lt;p&gt;Type safety, avoid writing yaml by hand&lt;/p&gt;&lt;p&gt;It allows us to provide a function via environment variable&lt;/p&gt;&lt;p&gt;Higher-level common configuration from which tool configuration is derived.&lt;/p&gt;&lt;p&gt;It replaced a lot of redundant JSON configs; adding new services is a lot quicker now, and cross-cutting changes less painful&lt;/p&gt;&lt;p&gt;To avoid copy&amp;amp;paste and the maintanance problems caused by it&lt;/p&gt;&lt;p&gt;Type safety, safe imports, no YAML indentation madness.&lt;/p&gt;&lt;p&gt;To help reduce code duplication and avoid errors in the values and keys of configuration filez. Mainly used it so far to help setup a more maintainable set of Kinect clusters and users for myself, which also made it easier to add.&lt;/p&gt;&lt;p&gt;It has a strong type system&lt;/p&gt;&lt;p&gt;Type-safety, the ability to move a lot of logic/formatting (e.g. in templating) into Dhall proper, the ability to represent ADTs/union types.&lt;/p&gt;&lt;p&gt;Abstraction!&lt;/p&gt;&lt;p&gt;Because i can abstract boilerplate&lt;/p&gt;&lt;p&gt;It provides a sane language for configuring systems (with types and abstraction)&lt;/p&gt;&lt;p&gt;Type checking, configuration typo safety, factorising yaml&lt;/p&gt;&lt;p&gt;Abstract useful config + defaults&lt;/p&gt;&lt;p&gt;Doesn’t have the weird gotchas of yaml. Possible to make DRY config files.&lt;/p&gt;&lt;p&gt;The main reason has been to decrease duplication.&lt;/p&gt;&lt;p&gt;type safety&lt;/p&gt;&lt;p&gt;I love the idea of strongly typed config, and also the programming aspect means there is less chance for error since you can reuse a component instead of copy/paste. I have been pushing for dhall at work as there have been very severe incidents at work from bad config files&lt;/p&gt;&lt;p&gt;Strong type safety&lt;/p&gt;&lt;p&gt;I like the ability to evaluate expressions, value substitution&lt;/p&gt;&lt;p&gt;Strong types and non-repetitive abstractions. Ease of publishing modules&lt;/p&gt;&lt;p&gt;our CI setup is now big and has lots of commonalities between projects. dhall helps us avoid preventable mistakes thanks to type checks and allows us to share common config with functions&lt;/p&gt;&lt;p&gt;it’s typed and avoids repetition&lt;/p&gt;&lt;p&gt;Not repeating common parts of configuration (like Kubernetes YAML hell)&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Normally a general-purpose programming language can also do these things, and several respondents noted why they preferred Dhall over a general-purpose language:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;It’s non-Turing-complete, but allows imports and static typing&lt;/p&gt;&lt;p&gt;It’s convenient and provides a good power-to-weight ratio&lt;/p&gt;&lt;p&gt;Only non-turing-complete config language that is based on a lambda calculus (and is modern/not a hobby project)&lt;/p&gt;&lt;p&gt;Because it won’t crash at runtime (totality)&lt;/p&gt;&lt;p&gt;It is by far the most well-wrought typed configuration language&lt;/p&gt;&lt;p&gt;I want to use something with proper type theory behind it and dhall is actually almost useful for some problems we have at work&lt;/p&gt;&lt;p&gt;It’s a nice config language&lt;/p&gt;&lt;p&gt;It’s quick, compact and type-safe&lt;/p&gt;&lt;p&gt;simple but effektive system f, i like that&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Others explained the motivation in terms of the current solution they were struggling with and trying to replace (commonly YAML):&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;To make sense of this pile of configuration mess&lt;/p&gt;&lt;p&gt;Verifying and reading through our combo of custom scripts, chef, and other solutions was a nightmare&lt;/p&gt;&lt;p&gt;so I don’t need to create my own configuration language and other existing ones suck more (json, yaml, that weird python thing…)&lt;/p&gt;&lt;p&gt;Because YAML and database were not the choices&lt;/p&gt;&lt;p&gt;For all the benefits over YAML&lt;/p&gt;&lt;p&gt;better helm-templates&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;documentation&quot;&gt;Documentation&lt;/h2&gt;&lt;p&gt;This year we asked people what needed better documentation to see if there were any blind spots in our current coverage:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;What needs better documentation?&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Like last year, people most commonly requested documentation on best practices and design patterns:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Recursive things. (This has been discussed on Slack somewhat.)&lt;/p&gt;&lt;p&gt;Packaging&lt;/p&gt;&lt;p&gt;I’d love a manual on best practices and a contributing guide to the Haskell implementation&lt;/p&gt;&lt;p&gt;Cookbooks&lt;/p&gt;&lt;p&gt;The prelude/standard library, or rather, surfacing documentation centrally in browsable form&lt;/p&gt;&lt;p&gt;How to create defaults, for records with optional values. How to design types with backward compatibility in mind.&lt;/p&gt;&lt;p&gt;Nested record updating, though the blog post shows some improvement here with the default types :: syntax.&lt;/p&gt;&lt;p&gt;How to make use of dhall at the peripheries of a large project.&lt;/p&gt;&lt;p&gt;How to deal with generated files (!), e.g. CI yaml config; how to include dhall projects into nix configs (dhallToNix); best practices for pre-caching imports&lt;/p&gt;&lt;p&gt;Imports section could be a bit more extensive like import prelude, import private repos (GitHub, BitBucket), multi imports. currently the information is scattered around various pages.&lt;/p&gt;&lt;p&gt;Perhaps patterns. For example, we have { a :: ty1, b:: Maybe ty2} and want users to be able to write { a = val } without b = None or default \ { a = val }&lt;/p&gt;&lt;p&gt;(this is probably because I didn’t google it properly), how to properly deal with freezing and updating hashes&lt;/p&gt;&lt;p&gt;Best practices and real-world examples. I’d love to use something like Dhall for managing configuration at work, but it’s very hard to tell if it will handle my usecases well, and it’s hard to dive in and try it out because I don’t know if I’m doing it right&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;We have made progress on that front in two forms:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;The &lt;a href=&quot;https://github.com/Gabriel439/dhall-manual&quot;&gt;Dhall Configuration Language Manual&lt;/a&gt;&lt;/p&gt;&lt;p&gt;This manual was created as a series of how-to guides for common tasks and idioms related to the language. Feedback from these surveys helps inform what topics I choose for each chapter.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Some design patterns became language features&lt;/p&gt;&lt;p&gt;The most notable example this year is standardizing support for the record completion operator for better handling of defaults&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;In fact, several improvements year (and some currently in progress) are directly inspired by my work on the book. Any time I describe a workflow that seems too painful I make changes to the language, tooling, or ecosystem to smooth things over.&lt;/p&gt;&lt;p&gt;Besides the book, the thing most likely to improve over the coming year is packaging, documenting, and discovering new Dhall packages. For example, I just created a Google Summer of Code project proposal for a student work on a documentation generator for Dhall packages:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/haskell-org/summer-of-haskell/blob/master/content/ideas/dhall-documentation-generator.md&quot;&gt;Proposal: Documentation generator for the Dhall configuration language&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The second most common request was to improve documentation for the core language features:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Still not sure how the &lt;code&gt;merge&lt;/code&gt; keyword works.&lt;/p&gt;&lt;p&gt;i somehow have trouble finding the doc page about record operations and iirc the record projection thing where you take the a subset of a record’s field is not included in the page listing records operations&lt;/p&gt;&lt;p&gt;Importing of other files&lt;/p&gt;&lt;p&gt;The introduction to FP. Lots of devs work in Go, Ruby, etc and need help thinking about polymorphism with sum types. Also more clarification on the &lt;code&gt;let...in&lt;/code&gt; syntax in early guides and an explanation on why you need :let in the repl.&lt;/p&gt;&lt;p&gt;I tend to have a hard time finding comprehensive info on syntactic features and end up hearing about them on guthub issues&lt;/p&gt;&lt;p&gt;Common errors like “-/+” syntax, “not a function”&lt;/p&gt;&lt;p&gt;the type system&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;This is understandable because the closest thing Dhall has to a complete resource on this is the Haskell implementation’s tutorial:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://hackage.haskell.org/package/dhall/docs/Dhall-Tutorial.html&quot;&gt;Haskell tutorial for Dhall&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;One of my short-term goals is to translate this into a language-independent tutorial.&lt;/p&gt;&lt;p&gt;There is an existing language-independent tutorial for translating Dhall to JSON:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://docs.dhall-lang.org/tutorials/Getting-started_Generate-JSON-or-YAML.html&quot;&gt;Getting started: Generate JSON or YAML&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;… but that doesn’t cover all of the language features like the Haskell tutorial does.&lt;/p&gt;&lt;h2 id=&quot;language-bindings&quot;&gt;Language bindings&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Which language bindings do you currently use?&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;37 (84.1%)&lt;/code&gt; - Haskell&lt;/li&gt;&lt;li&gt;&lt;code&gt;6 (13.6%)&lt;/code&gt; - Bash&lt;/li&gt;&lt;li&gt;&lt;code&gt;5 (11.4%)&lt;/code&gt; - Nix&lt;/li&gt;&lt;li&gt;&lt;code&gt;3 ( 6.8%)&lt;/code&gt; - Ruby&lt;/li&gt;&lt;li&gt;&lt;code&gt;2 ( 4.5%)&lt;/code&gt; - Rust&lt;/li&gt;&lt;li&gt;&lt;code&gt;1 ( 2.3%)&lt;/code&gt; - Golang&lt;/li&gt;&lt;li&gt;&lt;code&gt;1 ( 2.3%)&lt;/code&gt; - Swift&lt;/li&gt;&lt;li&gt;&lt;code&gt;0 ( 0.0%)&lt;/code&gt; - Clojure&lt;/li&gt;&lt;li&gt;&lt;code&gt;0 ( 0.0%)&lt;/code&gt; - Eta&lt;/li&gt;&lt;li&gt;&lt;code&gt;0 ( 0.0%)&lt;/code&gt; - Java (via Eta)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The number of Haskell users is not surprising given that the Haskell implementation also powers the shared command-line tools, like &lt;code&gt;dhall&lt;/code&gt;/&lt;code&gt;dhall-to-{json,yaml}&lt;/code&gt;/&lt;code&gt;dhall-lsp-server&lt;/code&gt;. Many Dhall users do not use Haskell the language and instead use the Haskell implementation to generate JSON or YAML from Dhall while waiting for a language binding for their preferred language.&lt;/p&gt;&lt;p&gt;I think the one response for Swift might have been a mistaken answer intended for the next section. As far as I know there currently are not Dhall bindings to Swift (not even ones in progress).&lt;/p&gt;&lt;p&gt;One of the interesting take-aways from the above question is that the JVM is one of the areas where Dhall is not being used as a native language binding despite existing bindings. I get the impression that most JVM users are waiting for Java/Scala bindings.&lt;/p&gt;&lt;h2 id=&quot;desired-language-bindings&quot;&gt;Desired language bindings&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Which language bindings would you like to see get more attention?&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;17 (39.5%)&lt;/code&gt; - Python&lt;/li&gt;&lt;li&gt;&lt;code&gt;12 (27.9%)&lt;/code&gt; - Scala&lt;/li&gt;&lt;li&gt;&lt;code&gt;11 (25.6%)&lt;/code&gt; - PureScript&lt;/li&gt;&lt;li&gt;&lt;code&gt;9 (20.9%)&lt;/code&gt; - JavaScript&lt;/li&gt;&lt;li&gt;&lt;code&gt;7 (16.4%)&lt;/code&gt; - Go&lt;/li&gt;&lt;li&gt;&lt;code&gt;7 (16.3%)&lt;/code&gt; - Java&lt;/li&gt;&lt;li&gt;&lt;code&gt;3 ( 7.0%)&lt;/code&gt; - C++&lt;/li&gt;&lt;li&gt;&lt;code&gt;3 ( 7.0%)&lt;/code&gt; - Elm&lt;/li&gt;&lt;li&gt;&lt;code&gt;2 ( 4.7%)&lt;/code&gt; - C#&lt;/li&gt;&lt;li&gt;&lt;code&gt;2 ( 4.7%)&lt;/code&gt; - Kotlin&lt;/li&gt;&lt;li&gt;&lt;code&gt;2 ( 4.7%)&lt;/code&gt; - Rust&lt;/li&gt;&lt;li&gt;&lt;code&gt;1 ( 2.3%)&lt;/code&gt; - Swift&lt;/li&gt;&lt;li&gt;&lt;code&gt;1 ( 2.3%)&lt;/code&gt; - TypeScript&lt;/li&gt;&lt;li&gt;&lt;code&gt;1 ( 2.3%)&lt;/code&gt; - PHP&lt;/li&gt;&lt;li&gt;&lt;code&gt;1 ( 2.3%)&lt;/code&gt; - Perl&lt;/li&gt;&lt;li&gt;&lt;code&gt;1 ( 2.3%)&lt;/code&gt; - C&lt;/li&gt;&lt;li&gt;&lt;code&gt;1 ( 2.3%)&lt;/code&gt; - A C/Rust library so all the other langs can bind to&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Python is an interesting response because at one point there was progress on a &lt;a href=&quot;https://github.com/SupraSummus/dhall-python&quot;&gt;Python binding to Dhall&lt;/a&gt;, but that stalled out.&lt;/p&gt;&lt;p&gt;The demand for Python makes sense because Python is used heavily in Dhall’s primary use case (CI / CD / Ops), alongside Go. In fact, Go was listed as well, although possibly not mentioned as often due to the &lt;a href=&quot;https://github.com/philandstuff/dhall-golang&quot;&gt;Go binding to Dhall&lt;/a&gt; being far closer to completion.&lt;/p&gt;&lt;p&gt;In fact, the Go binding just announced the first release candidate for version 1.0.0:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://discourse.dhall-lang.org/t/dhall-golang-v1-0-0-rc-1-released/152&quot;&gt;Dhall-golang v1.0.0-rc.1 released&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Note that survey respondents preferred bindings in functional languages over their more widely used imperative counterparts. For example, there was greater demand for Scala compared to Java and greater demand for PureScript compared to JavaScript. This might owe to Dhall’s functional programming heritage.&lt;/p&gt;&lt;p&gt;A few survey respondents appear to not be aware that there is a complete &lt;a href=&quot;https://github.com/Nadrieril/dhall-rust&quot;&gt;Rust binding to Dhall&lt;/a&gt; now available. This is understandable, though, given that the Rust binding only officially announced recently.&lt;/p&gt;&lt;h2 id=&quot;integrations&quot;&gt;Integrations&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Which of the following integrations do you use?&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;26 (63.4%)&lt;/code&gt; - JSON (via &lt;code&gt;dhall-to-json&lt;/code&gt;)&lt;/li&gt;&lt;li&gt;&lt;code&gt;25 (61.0%)&lt;/code&gt; - YAML (via &lt;code&gt;dhall-to-yaml&lt;/code&gt;)&lt;/li&gt;&lt;li&gt;&lt;code&gt;10 (24.4%)&lt;/code&gt; - Kubernetes (via &lt;code&gt;dhall-to-kubernetes&lt;/code&gt;)&lt;/li&gt;&lt;li&gt;&lt;code&gt;7 (17.1%)&lt;/code&gt; - JSON (via &lt;code&gt;Prelude.JSON.render&lt;/code&gt;)&lt;/li&gt;&lt;li&gt;&lt;code&gt;7 (17.1%)&lt;/code&gt; - &lt;code&gt;purescript-packages&lt;/code&gt; (via &lt;code&gt;spago&lt;/code&gt;)&lt;/li&gt;&lt;li&gt;&lt;code&gt;5 (12.2%)&lt;/code&gt; - YAML (via &lt;code&gt;Prelude.JSON.renderYAML&lt;/code&gt;)&lt;/li&gt;&lt;li&gt;&lt;code&gt;3 ( 7.3%)&lt;/code&gt; - Cabal (via &lt;code&gt;dhall-to-cabal&lt;/code&gt;)&lt;/li&gt;&lt;li&gt;&lt;code&gt;1 ( 2.4%)&lt;/code&gt; - Write-in: Nix (via &lt;code&gt;dhall-to-nix&lt;/code&gt;)&lt;/li&gt;&lt;li&gt;&lt;code&gt;0 ( 0.0%)&lt;/code&gt; - XML (via &lt;code&gt;dhall-to-xml&lt;/code&gt;)&lt;/li&gt;&lt;li&gt;&lt;code&gt;0 ( 0.0%)&lt;/code&gt; - XML (via &lt;code&gt;Prelude.XML.render&lt;/code&gt;)&lt;/li&gt;&lt;li&gt;&lt;code&gt;0 ( 0.0%)&lt;/code&gt; - TOML (via JSON)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The thing I take away from the above numbers is that a large number of people would still benefit from language bindings and they currently work around the absence of a language binding by generating JSON/YAML.&lt;/p&gt;&lt;h2 id=&quot;desired-integrations&quot;&gt;Desired integrations&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Which integrations would you like to see get more attention?&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;22 (68.8%)&lt;/code&gt; - Terraform&lt;/li&gt;&lt;li&gt;&lt;code&gt;11 (34.4%)&lt;/code&gt; - Docker Compose&lt;/li&gt;&lt;li&gt;&lt;code&gt;9 (28.1%)&lt;/code&gt; - HCL&lt;/li&gt;&lt;li&gt;&lt;code&gt;8 (25.0%)&lt;/code&gt; - Prometheus&lt;/li&gt;&lt;li&gt;&lt;code&gt;4 (12.5%)&lt;/code&gt; - Packer&lt;/li&gt;&lt;li&gt;&lt;code&gt;2 ( 6.3%)&lt;/code&gt; - INI&lt;/li&gt;&lt;li&gt;&lt;code&gt;2 ( 6.3%)&lt;/code&gt; - Concourse&lt;/li&gt;&lt;li&gt;&lt;code&gt;2 ( 3.1%)&lt;/code&gt; - Write-in: Ansible&lt;/li&gt;&lt;li&gt;&lt;code&gt;1 ( 3.1%)&lt;/code&gt; - GoCD&lt;/li&gt;&lt;li&gt;&lt;code&gt;1 ( 3.1%)&lt;/code&gt; - Write-in: Grafana&lt;/li&gt;&lt;li&gt;&lt;code&gt;1 ( 3.1%)&lt;/code&gt; - Write-in: Nix, Nixops&lt;/li&gt;&lt;li&gt;&lt;code&gt;1 ( 3.1%)&lt;/code&gt; - Write-in: Dockerfile&lt;/li&gt;&lt;li&gt;&lt;code&gt;1 ( 3.1%)&lt;/code&gt; - Write-in: Google Cloud Builder&lt;/li&gt;&lt;li&gt;&lt;code&gt;1 ( 3.1%)&lt;/code&gt; - Write-in: Travis&lt;/li&gt;&lt;li&gt;&lt;code&gt;1 ( 3.1%)&lt;/code&gt; - Write-in: Vault&lt;/li&gt;&lt;li&gt;&lt;code&gt;1 ( 3.1%)&lt;/code&gt; - Write-in: GitHub Actions&lt;/li&gt;&lt;li&gt;&lt;code&gt;1 ( 3.1%)&lt;/code&gt; - Write-in: Drone CI&lt;/li&gt;&lt;li&gt;&lt;code&gt;1 ( 3.1%)&lt;/code&gt; - Write-in: CloudFormation&lt;/li&gt;&lt;li&gt;&lt;code&gt;1 ( 3.1%)&lt;/code&gt; - Write-in: Jenkins&lt;/li&gt;&lt;li&gt;&lt;code&gt;1 ( 3.1%)&lt;/code&gt; - Write-in: TOML&lt;/li&gt;&lt;li&gt;&lt;code&gt;1 ( 3.1%)&lt;/code&gt; - Write-in: Bitbucket pipelines&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Terraform was far and away the most requested integration. One of the interesting challenges about this potential integration is figuring out what is the right way to integrate Dhall with Terraform because Terraform has its own programming features (like a DSL for defining function-like modules).&lt;/p&gt;&lt;h2 id=&quot;dhall-packages&quot;&gt;Dhall packages&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Which of the following Dhall packages do you use?&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;32 (100.0%)&lt;/code&gt; - &lt;code&gt;Prelude&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;4 ( 12.5%)&lt;/code&gt; - &lt;code&gt;dhall-packages&lt;/code&gt; (Dhall monorepo)&lt;/li&gt;&lt;li&gt;&lt;code&gt;1 (  3.1%)&lt;/code&gt; - &lt;code&gt;hpack-dhall&lt;/code&gt; (&lt;code&gt;hpack&lt;/code&gt; bindings)&lt;/li&gt;&lt;li&gt;&lt;code&gt;1 (  3.1%)&lt;/code&gt; - &lt;code&gt;github-actions-dhall&lt;/code&gt; (GitHub Actions bindings)&lt;/li&gt;&lt;li&gt;&lt;code&gt;1 (  3.1%)&lt;/code&gt; - &lt;code&gt;dhall-terraform&lt;/code&gt; (Terraform bindings)&lt;/li&gt;&lt;li&gt;&lt;code&gt;1 (  3.1%)&lt;/code&gt; - &lt;code&gt;dhall-semver&lt;/code&gt; (Semantic versions)&lt;/li&gt;&lt;li&gt;&lt;code&gt;1 (  3.1%)&lt;/code&gt; - &lt;code&gt;dhall-concourse&lt;/code&gt; (Concourse bindings)&lt;/li&gt;&lt;li&gt;&lt;code&gt;1 (  3.1%)&lt;/code&gt; - &lt;code&gt;dhall-bhat&lt;/code&gt; (Haskell type classes in Dhall)&lt;/li&gt;&lt;li&gt;&lt;code&gt;1 (  3.1%)&lt;/code&gt; - &lt;code&gt;dada&lt;/code&gt; (Recursion schemes)&lt;/li&gt;&lt;li&gt;&lt;code&gt;0 (  0.0%)&lt;/code&gt; - &lt;code&gt;dho&lt;/code&gt; (CircleCI bindings)&lt;/li&gt;&lt;li&gt;&lt;code&gt;0 (  0.0%)&lt;/code&gt; - &lt;code&gt;dhallql&lt;/code&gt; (Query language)&lt;/li&gt;&lt;li&gt;&lt;code&gt;0 (  0.0%)&lt;/code&gt; - &lt;code&gt;dhallia&lt;/code&gt; (Dhall as an IDL)&lt;/li&gt;&lt;li&gt;&lt;code&gt;0 (  0.0%)&lt;/code&gt; - &lt;code&gt;cpkg&lt;/code&gt; (C package manager)&lt;/li&gt;&lt;li&gt;&lt;code&gt;0 (  0.0%)&lt;/code&gt; - &lt;code&gt;caterwaul&lt;/code&gt; (Category theory)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Unsurprisingly, most people use the Prelude. The thing that did catch my eye was how many respondents used &lt;code&gt;dhall-packages&lt;/code&gt; (mainly because I hadn’t realized how fast it had grown since the last time I checked it out).&lt;/p&gt;&lt;p&gt;&lt;code&gt;dhall-packages&lt;/code&gt; appears to have the potential to grow into the Dhall analog of &lt;a href=&quot;https://github.com/helm/helm&quot;&gt;Helm&lt;/a&gt;, meaning a repository containing useful types and predefined recipes for deploying Kubernetes services. I can see this repository easily giving Dhall a competitive edge in the Kubernetes space since I know quite a few people are looking for a Helm alternative without the headaches associated with templating YAML.&lt;/p&gt;&lt;h2 id=&quot;ascii-vs-unicode&quot;&gt;ASCII vs Unicode&lt;/h2&gt;&lt;p&gt;&lt;code&gt;dhall format&lt;/code&gt; tries to be as opinionated as possible, but currently permits one way to customize behavior: the tool can either emit Unicode symbols (e.g. &lt;code&gt;λ&lt;/code&gt;, &lt;code&gt;→&lt;/code&gt;, &lt;code&gt;∀&lt;/code&gt;) or ASCII symbols (e.g. &lt;code&gt;\&lt;/code&gt;, &lt;code&gt;-&amp;gt;&lt;/code&gt;, &lt;code&gt;forall&lt;/code&gt;).&lt;/p&gt;&lt;p&gt;I asked several questions about ASCII versus Unicode to see if there was a possibility of standardizing on one or the other. Unfortunately, people were split in this regard. The only thing they agreed upon was that they preferred not to input Unicode symbols directly:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Do you prefer to input ASCII or Unicode symbols in your editor (before formatting the code)?&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;58 (93.5%)&lt;/code&gt; - ASCII&lt;/li&gt;&lt;li&gt;&lt;code&gt;4 ( 6.5%)&lt;/code&gt; - Unicode&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;… but on the other two questions people split pretty evenly, with a slight preference for Unicode:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;How do you format your code?&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;24 (42.9%)&lt;/code&gt; - Unicode&lt;/li&gt;&lt;li&gt;&lt;code&gt;22 (39.3%)&lt;/code&gt; - ASCII&lt;/li&gt;&lt;li&gt;&lt;code&gt;6 (10.7%)&lt;/code&gt; - I don’t format my code&lt;/li&gt;&lt;li&gt;&lt;code&gt;4 ( 7.3%)&lt;/code&gt; - Other&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Do you prefer to read Dhall code that uses ASCII or Unicode symbols?&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;28 (50.9%)&lt;/code&gt; - Unicode&lt;/li&gt;&lt;li&gt;&lt;code&gt;25 (45.5%)&lt;/code&gt; - ASCII&lt;/li&gt;&lt;li&gt;&lt;code&gt;2 ( 3.6%)&lt;/code&gt; - Other&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;What’s interesting is that you get clearer preferences when you slice the data by how much people use Dhall.&lt;/p&gt;&lt;p&gt;For example, people who have never used Dhall or briefly tried Dhall prefer ASCII by roughly a 3-to-1 margin:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;How do you format your code?&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;10 (66.7%)&lt;/code&gt; - ASCII&lt;/li&gt;&lt;li&gt;&lt;code&gt;3 (20.0%)&lt;/code&gt; - I don’t format my code&lt;/li&gt;&lt;li&gt;&lt;code&gt;2 (13.3%)&lt;/code&gt; - Unicode&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Do you prefer to read Dhall code that uses ASCII or Unicode symbols?&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;12 (75.0%)&lt;/code&gt; - ASCII&lt;/li&gt;&lt;li&gt;&lt;code&gt;4 (25.0%)&lt;/code&gt; - Unicode&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;… whereas other categories (e.g. personal projects or work) prefer Unicode by roughly a 2-to-1 margin:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;How do you format your code?&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;22 (55.0%)&lt;/code&gt; - Unicode&lt;/li&gt;&lt;li&gt;&lt;code&gt;11 (27.5%)&lt;/code&gt; - ASCII&lt;/li&gt;&lt;li&gt;&lt;code&gt;4 (10.0%)&lt;/code&gt; - Other&lt;/li&gt;&lt;li&gt;&lt;code&gt;3 ( 7.5%)&lt;/code&gt; - I don’t format my code&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Do you prefer to read Dhall code that uses ASCII or Unicode symbols?&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;23 (60.5%)&lt;/code&gt; - Unicode&lt;/li&gt;&lt;li&gt;&lt;code&gt;13 (34.2%)&lt;/code&gt; - ASCII&lt;/li&gt;&lt;li&gt;&lt;code&gt;2 ( 5.3%)&lt;/code&gt; - Other&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;There are several possible ways to interpret that evidence:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Perhaps Dhall could expand its potential audience by formatting ASCII&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Perhaps people prefer the Unicode syntax the more they use Dhall&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Perhaps there is a “founder effect” since originally &lt;code&gt;dhall format&lt;/code&gt; only supported Unicode&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Either way, I don’t plan on making any changes to &lt;code&gt;dhall format&lt;/code&gt; immediately, but I will use this data to inform future formatting discussions on &lt;a href=&quot;https://discourse.dhall-lang.org/&quot;&gt;Discourse&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;One person also added Unicode-related feedback in the “Other feedback” section:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;I feel strongly that unicode symbols are not worth supporting indefinitely, as they typically can’t be typed and add mental overhead when reading. The symbols themselves also have a mathematical bent, which can be intimidating for those not well versed in math / logic programming.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;growth&quot;&gt;Growth&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Would anything encourage you to use Dhall more often?&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Language bindings:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;I wish there was a good way to do nix through dhall, but I don’t have any good suggestions.&lt;/p&gt;&lt;p&gt;something like the dhall Haskell library for purescript&lt;/p&gt;&lt;p&gt;Js/purescript bindings in release state. …&lt;/p&gt;&lt;p&gt;Scala/JVM bindings (Eta is suboptimal &amp;amp; unmaintained) …&lt;/p&gt;&lt;p&gt;python bindings&lt;/p&gt;&lt;p&gt;Successfully getting my work on board with it (which means having a perfect golang integration)&lt;/p&gt;&lt;p&gt;Getting more bindings for things I use&lt;/p&gt;&lt;p&gt;better docs; bindings for the JVM languages&lt;/p&gt;&lt;p&gt;Bindings on other languages (hard to get people to contribute on a project using the Haskell impl)&lt;/p&gt;&lt;p&gt;Better Python support, so I can sell it to colleagues who use Python.&lt;/p&gt;&lt;p&gt;Better (documented) language bindings.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Packages/Integrations:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;I’d love to use it in more places, eg to replace all of our terraform code or CI configuration; currently those integrations just aren’t there and I don’t have time to bridge the gap&lt;/p&gt;&lt;p&gt;More libraries / packages. I think dhall needs a richer ecosystem. In particular i’d love complete terraform bindings and more kubernetes packages (a la helm)&lt;/p&gt;&lt;p&gt;First class Kubernetes, Terraform, Vault, Ansible integration.&lt;/p&gt;&lt;p&gt;When I looked at Dhall most recently, it wasn’t obvious to me that an ecosystem of packages was springing up around it. Might want to add a link (or a more prominent one if there is already one and I missed it).&lt;/p&gt;&lt;p&gt;More packages (like dhall-kubernetes)&lt;/p&gt;&lt;p&gt;… Also, better Terraform/HCL bindings, Ansible integration, or integrations for common CI systems (Jenkins/jenkins-job-builder, CircleCI, GoCD, etc)&lt;/p&gt;&lt;p&gt;… more integrations (I would like to be able to configure EVERYTHING using Dhall ^^)&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Tooling:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Better performance&lt;/p&gt;&lt;p&gt;better (especially more concise) Error messages&lt;/p&gt;&lt;p&gt;structural editor with auto-completion based on symbols in scope and with automatic let-floating&lt;/p&gt;&lt;p&gt;Speed and ergonomics of the Emacs integration. Currently it’s terribly slow to type check.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Language features:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Ability to import YAML without yaml-to-dhall&lt;/p&gt;&lt;p&gt;nested record updates&lt;/p&gt;&lt;p&gt;Usage unicode chars in imported filenames without quotes&lt;/p&gt;&lt;p&gt;… Also Text/Double operations and possibly comparisons. I understand and agree with the reasons this hasn’t been done, but finding a way to do this without compromising the goal of the language would add so much potential&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Formatting improvements:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Vonderhaar-style dhall format. Long multi-line literals with interpolations become really illegible currently. More built-ins. Text becoming non-opaque. The ability to expose multiple things from a record (this is currently being discussed).&lt;/p&gt;&lt;p&gt;Ultimately it was the autoformatter/idomatic formatting of Dhall that turned me off. I wanted my package format to be clear and readable to people new to my project but the idomatic was very messy in my eyes. Here’s a comparison of Dhall and the TCL inspired pkg definition format I came up with: https://gist.github.com/wezm/dfdce829964c410e2c521aa3ca132ddd&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Social proof:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Popularity&lt;/p&gt;&lt;p&gt;Popularity is the big one so I could get away with it more at work. …&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Documentation:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;… Better docs to educate team members with.&lt;/p&gt;&lt;p&gt;Better starter documentation. maybe also how to put in place Dhall build in CI?&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Other unassorted responses:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Hard to describe in one line, but an easier way to get values in and out of larger dhall projects (github issue 676 being a symptom of this)&lt;/p&gt;&lt;p&gt;For work maybe a convincing reason to use it in place of yaml. For personal, making it easier to support backward compatiblity in types.&lt;/p&gt;&lt;p&gt;The different type hack for multiple resources in a single Kubernetes file made me drop it, I could’ve never recommended it to my coworkers over worse (as in, worse is better) templating solutions.&lt;/p&gt;&lt;p&gt;Issue #1521&lt;/p&gt;&lt;p&gt;Generation of Dhall types from Haskell types; Easier extension with own functions&lt;/p&gt;&lt;p&gt;A nice bidirectional typechecker for less type annotation burden&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;contributions&quot;&gt;Contributions&lt;/h2&gt;&lt;p&gt;One thing I checked is if there were any barriers to adoption that we were not aware of:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Would anything encourage you to contribute to the Dhall ecosystem more often?&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;There were not many common themes that stood out, so I’ll include the responses verbatim:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Maybe some links to resources on how to get started with programming theory (eg. info on type notation for the standard, parser, “compiler”, etc). Basically I feel I probably just need to learn more, but I’m not entirely sure what.&lt;/p&gt;&lt;p&gt;Nope, as a new contributor this year, the Dhall community has been an absolute delight to start contributing to.&lt;/p&gt;&lt;p&gt;better reporting for missing env vars (not one by one)&lt;/p&gt;&lt;p&gt;better personal usecases&lt;/p&gt;&lt;p&gt;No - I already want to do a lot more!&lt;/p&gt;&lt;p&gt;A contributing guide to the haskell implementation&lt;/p&gt;&lt;p&gt;Linked Haskell tutorials and perhaps partial (or early) implementations of dhall features&lt;/p&gt;&lt;p&gt;Perhaps simplified core language? I sometimes think that the language is large and difficult, especially around “safety guarantees” features, and it might make it harder to develop a new language binding.&lt;/p&gt;&lt;p&gt;Using it at work&lt;/p&gt;&lt;p&gt;I found it difficult to generate dhall-kubernetes bindings&lt;/p&gt;&lt;p&gt;The ecosystem seems to be very contributor-friendly, but I don’t have enough time at the moment.&lt;/p&gt;&lt;p&gt;Getting standards for repo layout, documentation, discovery&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;… and my favorite response was:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;There’s a ‘good first issue’ label that’s attached to no issues.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;&lt;p&gt;The main thing I concluded from the survey feedback is that people want us to focus on ease of integration, especially language bindings, and especially Python language bindings.&lt;/p&gt;&lt;p&gt;A major change from last year’s feedback was the dramatic drop in requests for better documentation / examples / use cases. People appear to understand the motivation for the language and how to use Dhall to solve their problems and now they care more about streamlining the integration process as much as possible.&lt;/p&gt;&lt;p&gt;If this is your first time hearing about the survey you can still complete the survey:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://forms.gle/jh7VVj2rfWrjW28h9&quot;&gt;Dhall 2019-2020 Survey&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I receive e-mail notifications when people complete the survey so I will be aware of any feedback you provide this way. Also, completing the survey will let you browse the survey results more easily.&lt;/p&gt;&lt;p&gt;Before concluding this post, I would like to highlight that this year’s survey used &lt;a href=&quot;https://www.electionscience.org/library/approval-voting/&quot;&gt;approval voting&lt;/a&gt; to let people select their preferred language bindings. If you’re a person frustrated with a political system based on &lt;a href=&quot;https://en.wikipedia.org/wiki/First-past-the-post_voting&quot;&gt;first-past-the-post voting&lt;/a&gt;, I encourage you to research approval voting as an alternative voting method with a higher power-to-weight ratio (simpler than ranked choice voting and produces better outcomes).&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</content><link rel="replies" type="application/atom+xml" href="https://www.haskellforall.com/feeds/540511836820567620/comments/default" title="Post Comments"><link rel="replies" type="text/html" href="https://www.haskellforall.com/2020/02/dhall-survey-results-2019-2020.html#comment-form" title="0 Comments"><link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/540511836820567620"><link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/540511836820567620"><link rel="alternate" type="text/html" href="https://www.haskellforall.com/2020/02/dhall-survey-results-2019-2020.html" title="Dhall Survey Results (2019-2020)"><author><name>Gabriel Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-1769035961754898198</id><published>2020-01-17T06:43:00.000-08:00</published><updated>2020-01-17T06:43:29.067-08:00</updated><title type="text">Why Dhall advertises the absence of Turing-completeness</title><content type="html">&lt;!DOCTYPE html&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;utf-8&quot; /&gt;  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;  &lt;title&gt;total2&lt;/title&gt;  &lt;style&gt;      code{white-space: pre-wrap;}       span.smallcaps{font-variant: small-caps;}       span.underline{text-decoration: underline;}       div.column{display: inline-block; vertical-align: top; width: 50%;}   &lt;/style&gt;  &lt;!--[if lt IE 9]&gt;    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;  &lt;![endif]--&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;Several people have asked why I make a big deal out of &lt;a href=&quot;http://dhall-lang.org/&quot;&gt;the Dhall configuration language&lt;/a&gt; being “total” (i.e. not Turing-complete) and this post will summarize the two main reasons:&lt;/p&gt;&lt;ol type=&quot;1&quot;&gt;&lt;li&gt;&lt;p&gt;If Dhall is total, that implies that the language got several other things correct&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;“Not Turing-complete” is a signaling mechanism that appeals to Dhall’s target audience&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&quot;because-of-the-implication&quot;&gt;“Because of the Implication”&lt;/h2&gt;&lt;p&gt;The absence of Turing completeness &lt;em&gt;per se&lt;/em&gt; does not provide many safety guarantees. Many people have correctly noted that you can craft compact Dhall functions that can take longer than the age of the universe to evaluate. I even provide a convenient implementation of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Ackermann_function&quot;&gt;Ackermann function&lt;/a&gt; in Dhall to make it as easy as possible for people to foil the interpreter:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://gist.github.com/Gabriel439/77f715350ecc0443eed5fa613ac6b78e&quot;&gt;Ackermann function in Dhall&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;However, a total language like Dhall needs to get several other things correct in order to be able to guarantee that the language is not Turing complete. There are multiple ways you can eliminate Turing-completeness from a language, but nearly all of them improve the language in some way.&lt;/p&gt;&lt;p&gt;For example, the way Dhall eliminates Turing-completeness is:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Eliminating general recursion&lt;/p&gt;&lt;p&gt;… which protects against common mistakes that introduce infinite loops&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Having a strong type system&lt;/p&gt;&lt;p&gt;… especially one with no escape hatches for reintroducing general recursion&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Forbidding arbitrary side effects&lt;/p&gt;&lt;p&gt;… which can also be another way to backdoor general recursion into a language&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;These three features are widely viewed as &lt;em&gt;good things&lt;/em&gt; in their own right by people who care about language security, regardless of whether they are employed in service of eliminating Turing-completeness.&lt;/p&gt;&lt;p&gt;In other words, Turing-completeness functions as a convenient “umbrella” or “shorthand” for other safety features that LangSec advocates promote.&lt;/p&gt;&lt;h2 id=&quot;shibboleth&quot;&gt;Shibboleth&lt;/h2&gt;&lt;p&gt;According to Wikipedia a &lt;a href=&quot;https://en.wikipedia.org/wiki/Shibboleth&quot;&gt;shibboleth&lt;/a&gt; is:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;… a custom or tradition, usually a choice of phrasing or even a single word that distinguishes one group of people from another. Shibboleths have been used throughout history in many societies as passwords, simple ways of self-identification, signaling loyalty and affinity, maintaining traditional segregation, or protecting from real or perceived threats.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;The phrase “not Turing-complete” is one such shibboleth. People who oppose the use of general-purpose programming languages for configuration files use this phrase as a signaling mechanism. This choice of words communicates to like-minded people that they share the same values as the Dhall community and agree on the right balance between configuration files being data vs. being programs.&lt;/p&gt;&lt;p&gt;If you follow online arguments about programmable configuration files, the discussion almost invariably follows this pattern:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Person A:&lt;/strong&gt; “Configuration files should be inert so that they are easier to understand and manipulate”&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Person B:&lt;/strong&gt; “Software enginering practices like types and DRY can prevent config-induced production outages. Configs should be written in a general-purpose programming language.”&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Person A:&lt;/strong&gt; “But configuration files should not be Turing-complete!”&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Usually, what “Person A” actually meant to say was something like:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;configuration files should not permit arbitrary side effects&lt;/li&gt;&lt;li&gt;configuration files should not enable excessive indirection or obfuscation&lt;/li&gt;&lt;li&gt;configuration files should not crash or throw exceptions&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;… and none of those desires necessarily imply the absence of Turing-completeness!&lt;/p&gt;&lt;p&gt;However, for historical reasons all of the “Person A”s of the world rallied behind the absence of Turing-completeness as their banner. When I advertise that Dhall is not Turing-complete I’m signaling to them that they “belong here” with the rest of the Dhall community.&lt;/p&gt;&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;&lt;p&gt;In my view, those two points make the strongest case for not being Turing complete. However, if you think I missed an important point just let me know.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</content><link rel="replies" type="application/atom+xml" href="https://www.haskellforall.com/feeds/1769035961754898198/comments/default" title="Post Comments"><link rel="replies" type="text/html" href="https://www.haskellforall.com/2020/01/why-dhall-advertises-absence-of-turing.html#comment-form" title="2 Comments"><link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/1769035961754898198"><link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/1769035961754898198"><link rel="alternate" type="text/html" href="https://www.haskellforall.com/2020/01/why-dhall-advertises-absence-of-turing.html" title="Why Dhall advertises the absence of Turing-completeness"><author><name>Gabriel Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-2271956862386717403</id><published>2020-01-05T10:17:00.000-08:00</published><updated>2020-01-05T13:55:15.349-08:00</updated><title type="text">Dhall - Year in review (2019-2020)</title><content type="html">&lt;!DOCTYPE html&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;utf-8&quot; /&gt;  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;  &lt;title&gt;dhall-2020&lt;/title&gt;  &lt;style type=&quot;text/css&quot;&gt;      code{white-space: pre-wrap;}       span.smallcaps{font-variant: small-caps;}       span.underline{text-decoration: underline;}       div.column{display: inline-block; vertical-align: top; width: 50%;}   &lt;/style&gt;  &lt;style type=&quot;text/css&quot;&gt;a.sourceLine { display: inline-block; line-height: 1.25; } a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; } a.sourceLine:empty { height: 1.2em; } .sourceCode { overflow: visible; } code.sourceCode { white-space: pre; position: relative; } div.sourceCode { margin: 1em 0; } pre.sourceCode { margin: 0; } @media screen { div.sourceCode { overflow: auto; } } @media print { code.sourceCode { white-space: pre-wrap; } a.sourceLine { text-indent: -1em; padding-left: 1em; } } pre.numberSource a.sourceLine   { position: relative; left: -4em; } pre.numberSource a.sourceLine::before   { content: attr(data-line-number);     position: relative; left: -1em; text-align: right; vertical-align: baseline;     border: none; pointer-events: all; display: inline-block;     -webkit-touch-callout: none; -webkit-user-select: none;     -khtml-user-select: none; -moz-user-select: none;     -ms-user-select: none; user-select: none;     padding: 0 4px; width: 4em;     color: #aaaaaa;   } pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; } div.sourceCode   {  } @media screen { a.sourceLine::before { text-decoration: underline; } } code span.al { color: #ff0000; font-weight: bold; } /* Alert */ code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */ code span.at { color: #7d9029; } /* Attribute */ code span.bn { color: #40a070; } /* BaseN */ code span.bu { } /* BuiltIn */ code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */ code span.ch { color: #4070a0; } /* Char */ code span.cn { color: #880000; } /* Constant */ code span.co { color: #60a0b0; font-style: italic; } /* Comment */ code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */ code span.do { color: #ba2121; font-style: italic; } /* Documentation */ code span.dt { color: #902000; } /* DataType */ code span.dv { color: #40a070; } /* DecVal */ code span.er { color: #ff0000; font-weight: bold; } /* Error */ code span.ex { } /* Extension */ code span.fl { color: #40a070; } /* Float */ code span.fu { color: #06287e; } /* Function */ code span.im { } /* Import */ code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */ code span.kw { color: #007020; font-weight: bold; } /* Keyword */ code span.op { color: #666666; } /* Operator */ code span.ot { color: #007020; } /* Other */ code span.pp { color: #bc7a00; } /* Preprocessor */ code span.sc { color: #4070a0; } /* SpecialChar */ code span.ss { color: #bb6688; } /* SpecialString */ code span.st { color: #4070a0; } /* String */ code span.va { color: #19177c; } /* Variable */ code span.vs { color: #4070a0; } /* VerbatimString */ code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */   &lt;/style&gt;  &lt;!--[if lt IE 9]&gt;    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;  &lt;![endif]--&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;The Dhall configuration language is now three years old and this post reviews progress in 2019 and the future direction of the language in 2020.&lt;/p&gt;&lt;p&gt;If you’re not familiar with Dhall, you might want to visit the &lt;a href=&quot;https://dhall-lang.org/&quot;&gt;official website&lt;/a&gt; for the language. This post assumes familiarity and interest in the language.&lt;/p&gt;&lt;p&gt;I would like to use this post to advertise a short survey you can take if you would like to provide feedback that informs the direction of the language:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://forms.gle/jh7VVj2rfWrjW28h9&quot;&gt;Dhall 2019-2020 Survey&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;language-bindings&quot;&gt;Language bindings&lt;/h2&gt;&lt;p&gt;Last year’s survey indicated that many respondents were keen on additional language bindings, which this section covers.&lt;/p&gt;&lt;p&gt;This year there is a new officially supported language binding! 🎉&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;dhall-rust&lt;/code&gt; - &lt;a href=&quot;https://github.com/Nadrieril/dhall-rust&quot;&gt;Rust bindings to Dhall&lt;/a&gt; by &lt;a href=&quot;https://github.com/Nadrieril&quot;&gt;Nadrieril&lt;/a&gt;&lt;/p&gt;&lt;p&gt;I’m excited about this binding, both because Rust is an awesome language and also because I believe this paves the way for C/C++ bindings (and transitively any language that can interop with C)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;There is also one new language binding close to completion:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;dhall-golang&lt;/code&gt; - &lt;a href=&quot;https://github.com/philandstuff/dhall-golang&quot;&gt;Go bindings to Dhall&lt;/a&gt; by &lt;a href=&quot;https://github.com/philandstuff&quot;&gt;Philip Potter&lt;/a&gt;&lt;/p&gt;&lt;p&gt;This binding is not yet official, but I’m mentioning here in case interested parties might want to contribute. If you are interested in contributing then &lt;a href=&quot;https://discourse.dhall-lang.org/t/state-of-dhall-golang/77&quot;&gt;this thread&lt;/a&gt; is a good starting point.&lt;/p&gt;&lt;p&gt;This is a binding that I believe would improve the user experience for one of Dhall’s largest audiences (Ops / CI / CD), since many tools in this domain (such as Kubernetes) are written in Go.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If there is a language binding that you would most like to see the &lt;a href=&quot;https://forms.gle/jh7VVj2rfWrjW28h9&quot;&gt;survey&lt;/a&gt; includes a question to let you advertise your wish list for language bindings.&lt;/p&gt;&lt;p&gt;As I mentioned last year, I have no plans to implement any new language bindings myself. However, there are always things I can do to improve the likelihood of new language bindings popping up:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Error messages&lt;/p&gt;&lt;p&gt;I’ve noticed that a major barrier for a new implementation is adding quality error messages.&lt;/p&gt;&lt;p&gt;One solution to this problem may be taking the error messages for the Haskell implementation and upstreaming them into shared templates that all implementations can reuse (and improve upon)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Reference implementation&lt;/p&gt;&lt;p&gt;One idea I’ve floated a few times recently is having a simplified reference implementation in some programming language instead of using natural deduction as the notation for specifying language semantics. This might help ease the life of people who are not as familiar with programming language theory and its notation.&lt;/p&gt;&lt;p&gt;For example, the current Haskell implementation is not suitable as a reference implementation because it operates under a lot of constraints that are not relevant to the standard (such as customization, formatting, and performance).&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Simplify the standard&lt;/p&gt;&lt;p&gt;This year we removed several stale features (such as old-style &lt;code&gt;Optional&lt;/code&gt; literals and old-style union literals) in the interest of decreasing the cost for language binding maintainers.&lt;/p&gt;&lt;p&gt;There is also one feature that in my eyes is “on the chopping block”, which is the language’s &lt;code&gt;using&lt;/code&gt; keyword for custom headers. This feature is one of the more complex ones to implement correctly and doesn’t appear to be carrying its own weight. There also may be preferable alternatives to this feature that don’t require language support (such as &lt;code&gt;.netrc&lt;/code&gt; files).&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;integrations&quot;&gt;Integrations&lt;/h2&gt;&lt;p&gt;There are other integrations that are not language bindings, which this section covers.&lt;/p&gt;&lt;h3 id=&quot;purescript-package-sets&quot;&gt;PureScript package sets&lt;/h3&gt;&lt;p&gt;Dhall is now the officially supported way of specifying PureScript package sets:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/purescript/package-sets&quot;&gt;&lt;code&gt;purescript/package-sets&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;… and there is a new PureScript build tool named &lt;code&gt;spago&lt;/code&gt; that provides the command-line interface to using these package sets:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/spacchetti/spago&quot;&gt;&lt;code&gt;spacchetti/spago&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;There are several contributors to both of these repositories, so I can’t acknowledge them all, but I would like to give special mention to &lt;a href=&quot;https://github.com/justinwoo&quot;&gt;Justin Woo&lt;/a&gt; and &lt;a href=&quot;https://github.com/f-f&quot;&gt;Fabrizio Ferrai&lt;/a&gt; for bootstrapping these projects.&lt;/p&gt;&lt;p&gt;This integration is the largest case I’m aware of where Dhall is not being used for its own sake but rather as a required configuration format for another tool.&lt;/p&gt;&lt;h3 id=&quot;yamljson&quot;&gt;YAML/JSON&lt;/h3&gt;&lt;p&gt;Last year we added support for converting Dhall to JSON/YAML and this year &lt;a href=&quot;https://github.com/antislava&quot;&gt;antislava&lt;/a&gt; and &lt;a href=&quot;https://github.com/robbiemcmichael&quot;&gt;Robbie McMichael&lt;/a&gt; also added support for converting JSON/YAML to Dhall. Specifically, there are two new &lt;code&gt;json-to-dhall&lt;/code&gt; and &lt;code&gt;yaml-to-dhall&lt;/code&gt; executables that you can use.&lt;/p&gt;&lt;p&gt;This addressed a common point of feedback from users that migrating existing YAML configuration files to Dhall was tedious and error-prone. Now the process can be automated.&lt;/p&gt;&lt;p&gt;This year we also added Prelude support for JSON and YAML. Specifically:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;There is a new &lt;code&gt;Prelude.JSON.Type&lt;/code&gt; that can model arbitrary schema-free JSON or YAML&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;There is a new &lt;code&gt;Prelude.JSON.render&lt;/code&gt; utility that can render expressions of the above type as JSON or YAML &lt;code&gt;Text&lt;/code&gt; that is guaranteed to be well-formed&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Here is an example of how it works:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-1&quot; data-line-number=&quot;1&quot;&gt;&lt;span class=&quot;co&quot;&gt;-- ./example.dhall&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-2&quot; data-line-number=&quot;2&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-3&quot; data-line-number=&quot;3&quot;&gt;&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;JSON&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; https&lt;span class=&quot;fu&quot;&gt;://&lt;/span&gt;prelude&lt;span class=&quot;fu&quot;&gt;.&lt;/span&gt;dhall&lt;span class=&quot;fu&quot;&gt;-&lt;/span&gt;lang&lt;span class=&quot;fu&quot;&gt;.&lt;/span&gt;org&lt;span class=&quot;fu&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;/&lt;/span&gt;package&lt;span class=&quot;fu&quot;&gt;.&lt;/span&gt;dhall&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-4&quot; data-line-number=&quot;4&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-5&quot; data-line-number=&quot;5&quot;&gt;&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; value &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-6&quot; data-line-number=&quot;6&quot;&gt;      JSON.object&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-7&quot; data-line-number=&quot;7&quot;&gt;        ( toMap&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-8&quot; data-line-number=&quot;8&quot;&gt;            { foo &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; JSON.array [ JSON.number &lt;span class=&quot;fl&quot;&gt;1.0&lt;/span&gt;, JSON.bool &lt;span class=&quot;dt&quot;&gt;True&lt;/span&gt; ]&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-9&quot; data-line-number=&quot;9&quot;&gt;            , bar &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; JSON.string &lt;span class=&quot;st&quot;&gt;&amp;quot;ABC&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-10&quot; data-line-number=&quot;10&quot;&gt;            }&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-11&quot; data-line-number=&quot;11&quot;&gt;        )&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-12&quot; data-line-number=&quot;12&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-13&quot; data-line-number=&quot;13&quot;&gt;&lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;  &amp;#39;&amp;#39;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-14&quot; data-line-number=&quot;14&quot;&gt;    &lt;span class=&quot;dt&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-15&quot; data-line-number=&quot;15&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-16&quot; data-line-number=&quot;16&quot;&gt;    &lt;span class=&quot;fu&quot;&gt;$&lt;/span&gt;{JSON.render value}&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-17&quot; data-line-number=&quot;17&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-18&quot; data-line-number=&quot;18&quot;&gt;    &lt;span class=&quot;dt&quot;&gt;YAML&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-19&quot; data-line-number=&quot;19&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-20&quot; data-line-number=&quot;20&quot;&gt;    &lt;span class=&quot;fu&quot;&gt;$&lt;/span&gt;{JSON.renderYAML value}&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-21&quot; data-line-number=&quot;21&quot;&gt;    &amp;#39;&amp;#39;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb2-1&quot; data-line-number=&quot;1&quot;&gt;$ &lt;span class=&quot;ex&quot;&gt;dhall&lt;/span&gt; text --file example.dhall&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb2-2&quot; data-line-number=&quot;2&quot;&gt;&lt;span class=&quot;ex&quot;&gt;JSON&lt;/span&gt;:&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb2-3&quot; data-line-number=&quot;3&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb2-4&quot; data-line-number=&quot;4&quot;&gt;&lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&amp;quot;ABC&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;:&lt;span class=&quot;bu&quot;&gt; [&lt;/span&gt; 1.0, true&lt;span class=&quot;bu&quot;&gt; ]&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb2-5&quot; data-line-number=&quot;5&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb2-6&quot; data-line-number=&quot;6&quot;&gt;&lt;span class=&quot;ex&quot;&gt;YAML&lt;/span&gt;:&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb2-7&quot; data-line-number=&quot;7&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb2-8&quot; data-line-number=&quot;8&quot;&gt;! &lt;span class=&quot;st&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&amp;quot;ABC&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb2-9&quot; data-line-number=&quot;9&quot;&gt;! &lt;span class=&quot;st&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;:&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb2-10&quot; data-line-number=&quot;10&quot;&gt;  &lt;span class=&quot;ex&quot;&gt;-&lt;/span&gt; 1.0&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb2-11&quot; data-line-number=&quot;11&quot;&gt;  &lt;span class=&quot;ex&quot;&gt;-&lt;/span&gt; true&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In other words, there is a now a “pure Dhall” implementation of JSON/YAML support, although it is not as featureful as the &lt;code&gt;dhall-to-{json,yaml}&lt;/code&gt; executables.&lt;/p&gt;&lt;p&gt;Special thanks to &lt;a href=&quot;https://github.com/matheus23&quot;&gt;Philipp Krüger&lt;/a&gt; for contributing &lt;code&gt;Prelude.JSON.renderYAML&lt;/code&gt;!&lt;/p&gt;&lt;p&gt;On top of that, &lt;code&gt;{yaml,json}-to-dhall&lt;/code&gt; and &lt;code&gt;dhall-to-{yaml,json}&lt;/code&gt; both natively support the schema-free &lt;code&gt;JSON&lt;/code&gt; type from the Prelude, which means that you can now incrementally migrate YAML/JSON configuration files. You can learn more about this from the following chapter in the Dhall Configuration Language Manual:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/Gabriel439/dhall-manual/blob/f6d198d1b34483c007db0c70dda82594c875237e/manuscript/01-YamlToDhall.md&quot;&gt;How to convert an existing YAML configuration file to Dhall&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;xml&quot;&gt;XML&lt;/h3&gt;&lt;p&gt;Thanks to &lt;a href=&quot;https://github.com/singpolyma&quot;&gt;Stephen Weber&lt;/a&gt; Dhall now supports XML:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://git.sr.ht/%7Esingpolyma/dhall-xml-ruby&quot;&gt;dhall-xml-ruby&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The above package provides &lt;code&gt;dhall-to-xml&lt;/code&gt; and &lt;code&gt;xml-to-dhall&lt;/code&gt; utilities for converting between Dhall and XML. This package also provides a Ruby API to this functionality as well.&lt;/p&gt;&lt;p&gt;This fills one of the big omissions in supported configuration formats that we had last year, so I’m very thankful for this contribution.&lt;/p&gt;&lt;h3 id=&quot;rails&quot;&gt;Rails&lt;/h3&gt;&lt;p&gt;The same &lt;a href=&quot;https://github.com/singpolyma&quot;&gt;Stephen Weber&lt;/a&gt; also contributed Rails support for Dhall:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://rubygems.org/gems/dhall-rails&quot;&gt;&lt;code&gt;dhall-rails&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;… so that you can use Dhall as the configuration file format for a Rails app instead of YAML.&lt;/p&gt;&lt;h3 id=&quot;c-package-management&quot;&gt;C package management&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/vmchale&quot;&gt;Vanessa McHale&lt;/a&gt; built a C package manager named with an emphasis on cross compilation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/vmchale/cpkg&quot;&gt;&lt;code&gt;cpkg&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The &lt;a href=&quot;https://github.com/vmchale/cpkg/blob/master/pkgs/pkg-set.dhall&quot;&gt;current package set&lt;/a&gt; already supports a surprisingly large number of C packages!&lt;/p&gt;&lt;p&gt;I also find this project fascinating because I’ve seen a few people discuss what Nixpkgs (the Nix package repository) might look like if it were redone from the ground up in terms of Dhall. &lt;code&gt;cpkg&lt;/code&gt; most closely resembles how I imagined it would be organized.&lt;/p&gt;&lt;h2 id=&quot;language-improvements&quot;&gt;Language improvements&lt;/h2&gt;&lt;p&gt;Last year some survey respondents were interested more in improvements to the language ergonomics rather than specific integrations, so this section covers new language enhancements.&lt;/p&gt;&lt;h3 id=&quot;consuming-packages&quot;&gt;Consuming packages&lt;/h3&gt;&lt;p&gt;One thing we improved this year was the experience for people consuming Dhall packages.&lt;/p&gt;&lt;p&gt;Probably the biggest improvement was changing to “stable hashes”, where we stopped using the standard version as an input to semantic hashes. Users complained about each new version of the standard breaking their integrity checks, and now that is a thing of the past. This means that expressions authored for older versions of the language are now far more likely to work for newer language versions when protected by an integrity check.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ocharles&quot;&gt;Oliver Charles&lt;/a&gt; also contributed another large improvement by standardizing support for mixed records of types and terms. This means that package authors can now serve both types and terms from the same top-level &lt;code&gt;package.dhall&lt;/code&gt; file instead of having to author separate &lt;code&gt;types.dhall&lt;/code&gt; and &lt;code&gt;terms.dhall&lt;/code&gt; files.&lt;/p&gt;&lt;p&gt;For example, the Prelude now serves both terms and types from a single package:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb3-1&quot; data-line-number=&quot;1&quot;&gt;&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Prelude&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; https&lt;span class=&quot;fu&quot;&gt;://&lt;/span&gt;prelude&lt;span class=&quot;fu&quot;&gt;.&lt;/span&gt;dhall&lt;span class=&quot;fu&quot;&gt;-&lt;/span&gt;lang&lt;span class=&quot;fu&quot;&gt;.&lt;/span&gt;org&lt;span class=&quot;fu&quot;&gt;/&lt;/span&gt;package&lt;span class=&quot;fu&quot;&gt;.&lt;/span&gt;dhall&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb3-2&quot; data-line-number=&quot;2&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb3-3&quot; data-line-number=&quot;3&quot;&gt;&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; example&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb3-4&quot; data-line-number=&quot;4&quot;&gt;    &lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Prelude.Map.Type&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb3-5&quot; data-line-number=&quot;5&quot;&gt;    &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; Prelude.Map.empty &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb3-6&quot; data-line-number=&quot;6&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb3-7&quot; data-line-number=&quot;7&quot;&gt;&lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;  example&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above example also illustrates how field names no longer need to be escaped if they conflict with reserved names (like &lt;code&gt;Type&lt;/code&gt;). This improves the ergonomics of using the Prelude which had several field names that conflicted with built-in language types and previously had to be escaped with backticks.&lt;/p&gt;&lt;h3 id=&quot;authoring-packages&quot;&gt;Authoring packages&lt;/h3&gt;&lt;p&gt;We also improved the experience for users authoring new packages. Dhall now has language support for tests so that package authors do not need to implement testing infrastructure out of band.&lt;/p&gt;&lt;p&gt;You can find several examples of this in the Prelude, such as the tests for the &lt;code&gt;Prelude.Natural.greaterThan&lt;/code&gt; utility:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb4-1&quot; data-line-number=&quot;1&quot;&gt;&lt;span class=&quot;co&quot;&gt;{-&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb4-2&quot; data-line-number=&quot;2&quot;&gt;&lt;span class=&quot;co&quot;&gt;`greaterThan` checks if one Natural is strictly greater than another.&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb4-3&quot; data-line-number=&quot;3&quot;&gt;&lt;span class=&quot;co&quot;&gt;-}&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb4-4&quot; data-line-number=&quot;4&quot;&gt;&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; lessThan &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb4-5&quot; data-line-number=&quot;5&quot;&gt;        &lt;span class=&quot;fu&quot;&gt;./&lt;/span&gt;lessThan sha256&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt;3381b66749290769badf8855d8a3f4af62e8de52d1364d838a9d1e20c94fa70c&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb4-6&quot; data-line-number=&quot;6&quot;&gt;      &lt;span class=&quot;fu&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;./&lt;/span&gt;lessThan&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb4-7&quot; data-line-number=&quot;7&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb4-8&quot; data-line-number=&quot;8&quot;&gt;&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; greaterThan&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb4-9&quot; data-line-number=&quot;9&quot;&gt;    &lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;→&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;→&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb4-10&quot; data-line-number=&quot;10&quot;&gt;    &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; λ(x &lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt;) &lt;span class=&quot;ot&quot;&gt;→&lt;/span&gt; λ(y &lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt;) &lt;span class=&quot;ot&quot;&gt;→&lt;/span&gt; lessThan y x&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb4-11&quot; data-line-number=&quot;11&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb4-12&quot; data-line-number=&quot;12&quot;&gt;&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; example0 &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; assert &lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; greaterThan &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt; ≡ &lt;span class=&quot;dt&quot;&gt;False&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb4-13&quot; data-line-number=&quot;13&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb4-14&quot; data-line-number=&quot;14&quot;&gt;&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; example1 &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; assert &lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; greaterThan &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt; ≡ &lt;span class=&quot;dt&quot;&gt;False&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb4-15&quot; data-line-number=&quot;15&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb4-16&quot; data-line-number=&quot;16&quot;&gt;&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; example2 &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; assert &lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; greaterThan &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt; ≡ &lt;span class=&quot;dt&quot;&gt;True&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb4-17&quot; data-line-number=&quot;17&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb4-18&quot; data-line-number=&quot;18&quot;&gt;&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; property0 &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; λ(n &lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt;) &lt;span class=&quot;ot&quot;&gt;→&lt;/span&gt; assert &lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; greaterThan &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; n ≡ &lt;span class=&quot;dt&quot;&gt;False&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb4-19&quot; data-line-number=&quot;19&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb4-20&quot; data-line-number=&quot;20&quot;&gt;&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; property1 &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; λ(n &lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt;) &lt;span class=&quot;ot&quot;&gt;→&lt;/span&gt; assert &lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; greaterThan n n ≡ &lt;span class=&quot;dt&quot;&gt;False&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb4-21&quot; data-line-number=&quot;21&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb4-22&quot; data-line-number=&quot;22&quot;&gt;&lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;  greaterThan&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above example shows how you can not only write unit tests but in limited cases you can also write property tests. For example, the above &lt;code&gt;property0&lt;/code&gt; test verifies that &lt;code&gt;greaterThan n n&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt; for all possible values of &lt;code&gt;n&lt;/code&gt;.&lt;/p&gt;&lt;h3 id=&quot;dependent-types&quot;&gt;Dependent types&lt;/h3&gt;&lt;p&gt;Language support for tests is a subset of a larger change: dependent types. Dhall is now a &lt;em&gt;technically&lt;/em&gt; dependently-typed language, meaning that you can take advantage of some basic features of dependent types, such as:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Type-level assertions (i.e. the tests we just covered)&lt;/li&gt;&lt;li&gt;Type-level literals (such as &lt;code&gt;Natural&lt;/code&gt; and &lt;code&gt;Text&lt;/code&gt;)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;… but you cannot do more sophisticated things like length-indexed &lt;code&gt;List&lt;/code&gt;s.&lt;/p&gt;&lt;h3 id=&quot;tomap-keyword&quot;&gt;&lt;code&gt;toMap&lt;/code&gt; keyword&lt;/h3&gt;&lt;p&gt;This year &lt;a href=&quot;https://github.com/blamario&quot;&gt;Mario Blažević&lt;/a&gt; added a new &lt;code&gt;toMap&lt;/code&gt; keyword for converting Dhall records to homogeneous lists of key-value pairs (a.k.a. &lt;code&gt;Map&lt;/code&gt;s):&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb5-1&quot; data-line-number=&quot;1&quot;&gt;$ &lt;span class=&quot;ex&quot;&gt;dhall&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;toMap { foo = 1, bar = 2 }&amp;#39;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb5-2&quot; data-line-number=&quot;2&quot;&gt;&lt;span class=&quot;bu&quot;&gt;[&lt;/span&gt; { mapKey &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;, mapValue &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; 2 }, { mapKey &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;, mapValue &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; 1 }&lt;span class=&quot;bu&quot;&gt; ]&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Dhall users frequently requested this feature for supporting JSON/YAML-based formats. These formats commonly use dictionaries with a variable set of fields, but this led to an impedance mismatch when interoperating with a typed language like Dhall because Dhall records are not homogeneous maps and the type of a Dhall record changes when you add or remove fields.&lt;/p&gt;&lt;p&gt;Normally the idiomatic way to model a homogeneous &lt;code&gt;Map&lt;/code&gt; in Dhall would be a &lt;code&gt;List&lt;/code&gt; of key-value pairs (since you can add or remove key-value pairs without changing the type of a &lt;code&gt;List&lt;/code&gt;), but that’s less ergonomic than using a record. The &lt;code&gt;toMap&lt;/code&gt; keyword gives users the best of both worlds: they can use Dhall’s record notation to ergonomically author values that they can convert to homogeneous &lt;code&gt;Map&lt;/code&gt;s using &lt;code&gt;toMap&lt;/code&gt;.&lt;/p&gt;&lt;h3 id=&quot;the-operator-for-record-completion&quot;&gt;The &lt;code&gt;::&lt;/code&gt; operator for record completion&lt;/h3&gt;&lt;p&gt;Several users complained about the language’s support for records with defaultable fields, so we added a new operator to make this more ergonomic.&lt;/p&gt;&lt;p&gt;This example illustrates how the operator works:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb6&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb6-1&quot; data-line-number=&quot;1&quot;&gt;&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb6-2&quot; data-line-number=&quot;2&quot;&gt;      { &lt;span class=&quot;dt&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; { name &lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;, age &lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Optional&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt; }&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb6-3&quot; data-line-number=&quot;3&quot;&gt;      , default &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; { age &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt; }&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb6-4&quot; data-line-number=&quot;4&quot;&gt;      }&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb6-5&quot; data-line-number=&quot;5&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb6-6&quot; data-line-number=&quot;6&quot;&gt;&lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;  [ &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;::&lt;/span&gt;{ name &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;John Doe&amp;quot;&lt;/span&gt; }&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb6-7&quot; data-line-number=&quot;7&quot;&gt;    , &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;::&lt;/span&gt;{ name &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Mary Jane&amp;quot;&lt;/span&gt;, age &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;24&lt;/span&gt; }&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb6-8&quot; data-line-number=&quot;8&quot;&gt;    ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In other words, given a “schema” record (such as &lt;code&gt;Person&lt;/code&gt;) containing a record type and a record of default values, you can use that schema to instantiate a record, defaulting all fields that are not specified.&lt;/p&gt;&lt;p&gt;The operator is “syntactic sugar”. When you write:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb7&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb7-1&quot; data-line-number=&quot;1&quot;&gt;&lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;::&lt;/span&gt;{ name &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;John Doe&amp;quot;&lt;/span&gt; }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… that “desugars” to:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb8&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb8-1&quot; data-line-number=&quot;1&quot;&gt;(Person.default &lt;span class=&quot;fu&quot;&gt;//&lt;/span&gt; { name &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;John Doe&amp;quot;&lt;/span&gt; }) &lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person.Type&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Also, &lt;code&gt;dhall format&lt;/code&gt; will recognize this operator and format the operator compactly for large nested records authored using this operator.&lt;/p&gt;&lt;p&gt;The easiest way to motivate this change is to compare the &lt;code&gt;dhall-kubernetes&lt;/code&gt; simple deployment example before and after using this operator. Before, using the &lt;code&gt;//&lt;/code&gt; operator and old formatting rules, the example looked like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb9&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-1&quot; data-line-number=&quot;1&quot;&gt;&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; types &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-2&quot; data-line-number=&quot;2&quot;&gt;      &lt;span class=&quot;fu&quot;&gt;../&lt;/span&gt;types&lt;span class=&quot;fu&quot;&gt;.&lt;/span&gt;dhall sha256&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt;e48e21b807dad217a6c3e631fcaf3e950062310bfb4a8bbcecc330eb7b2f60ed&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-3&quot; data-line-number=&quot;3&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-4&quot; data-line-number=&quot;4&quot;&gt;&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; defaults &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-5&quot; data-line-number=&quot;5&quot;&gt;      &lt;span class=&quot;fu&quot;&gt;../&lt;/span&gt;defaults&lt;span class=&quot;fu&quot;&gt;.&lt;/span&gt;dhall sha256&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt;98bf62170e7785da6f627a06980c5788a5b8bdd0d1e61bb7c141beef18a3129c&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-6&quot; data-line-number=&quot;6&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-7&quot; data-line-number=&quot;7&quot;&gt;&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; deployment&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-8&quot; data-line-number=&quot;8&quot;&gt;    &lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; types&lt;span class=&quot;fu&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;Deployment&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-9&quot; data-line-number=&quot;9&quot;&gt;    &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt;     defaults&lt;span class=&quot;fu&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;Deployment&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-10&quot; data-line-number=&quot;10&quot;&gt;      &lt;span class=&quot;fu&quot;&gt;//&lt;/span&gt;  { metadata &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-11&quot; data-line-number=&quot;11&quot;&gt;              defaults&lt;span class=&quot;fu&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;ObjectMeta&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;//&lt;/span&gt; { name &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;nginx&amp;quot;&lt;/span&gt; }&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-12&quot; data-line-number=&quot;12&quot;&gt;          , spec &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-13&quot; data-line-number=&quot;13&quot;&gt;              &lt;span class=&quot;dt&quot;&gt;Some&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-14&quot; data-line-number=&quot;14&quot;&gt;              (     defaults&lt;span class=&quot;fu&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;DeploymentSpec&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-15&quot; data-line-number=&quot;15&quot;&gt;                &lt;span class=&quot;fu&quot;&gt;//&lt;/span&gt;  { replicas &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-16&quot; data-line-number=&quot;16&quot;&gt;                        &lt;span class=&quot;dt&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-17&quot; data-line-number=&quot;17&quot;&gt;                    , template &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-18&quot; data-line-number=&quot;18&quot;&gt;                            defaults&lt;span class=&quot;fu&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;PodTemplateSpec&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-19&quot; data-line-number=&quot;19&quot;&gt;                        &lt;span class=&quot;fu&quot;&gt;//&lt;/span&gt;  { metadata &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-20&quot; data-line-number=&quot;20&quot;&gt;                                defaults&lt;span class=&quot;fu&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;ObjectMeta&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;//&lt;/span&gt; { name &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;nginx&amp;quot;&lt;/span&gt; }&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-21&quot; data-line-number=&quot;21&quot;&gt;                            , spec &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-22&quot; data-line-number=&quot;22&quot;&gt;                                &lt;span class=&quot;dt&quot;&gt;Some&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-23&quot; data-line-number=&quot;23&quot;&gt;                                (     defaults&lt;span class=&quot;fu&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;PodSpec&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-24&quot; data-line-number=&quot;24&quot;&gt;                                  &lt;span class=&quot;fu&quot;&gt;//&lt;/span&gt;  { containers &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-25&quot; data-line-number=&quot;25&quot;&gt;                                          [     defaults&lt;span class=&quot;fu&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;Container&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-26&quot; data-line-number=&quot;26&quot;&gt;                                            &lt;span class=&quot;fu&quot;&gt;//&lt;/span&gt;  { name &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-27&quot; data-line-number=&quot;27&quot;&gt;                                                    &lt;span class=&quot;st&quot;&gt;&amp;quot;nginx&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-28&quot; data-line-number=&quot;28&quot;&gt;                                                , image &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-29&quot; data-line-number=&quot;29&quot;&gt;                                                    &lt;span class=&quot;dt&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;nginx:1.15.3&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-30&quot; data-line-number=&quot;30&quot;&gt;                                                , ports &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-31&quot; data-line-number=&quot;31&quot;&gt;                                                    [     defaults&lt;span class=&quot;fu&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;ContainerPort&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-32&quot; data-line-number=&quot;32&quot;&gt;                                                      &lt;span class=&quot;fu&quot;&gt;//&lt;/span&gt;  { containerPort &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;80&lt;/span&gt; }&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-33&quot; data-line-number=&quot;33&quot;&gt;                                                    ]&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-34&quot; data-line-number=&quot;34&quot;&gt;                                                }&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-35&quot; data-line-number=&quot;35&quot;&gt;                                          ]&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-36&quot; data-line-number=&quot;36&quot;&gt;                                      }&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-37&quot; data-line-number=&quot;37&quot;&gt;                                )&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-38&quot; data-line-number=&quot;38&quot;&gt;                            }&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-39&quot; data-line-number=&quot;39&quot;&gt;                    }&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-40&quot; data-line-number=&quot;40&quot;&gt;              )&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-41&quot; data-line-number=&quot;41&quot;&gt;          }&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-42&quot; data-line-number=&quot;42&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb9-43&quot; data-line-number=&quot;43&quot;&gt;&lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;  deployment&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now the most recent iteration of the example looks like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb10&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb10-1&quot; data-line-number=&quot;1&quot;&gt;&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; kubernetes &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb10-2&quot; data-line-number=&quot;2&quot;&gt;      &lt;span class=&quot;fu&quot;&gt;../&lt;/span&gt;package&lt;span class=&quot;fu&quot;&gt;.&lt;/span&gt;dhall sha256&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt;0a6949aabfb5a1250f08c4e3a533024d4705bea98ace08d8d107417e54a9648a&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb10-3&quot; data-line-number=&quot;3&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb10-4&quot; data-line-number=&quot;4&quot;&gt;&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; deployment &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb10-5&quot; data-line-number=&quot;5&quot;&gt;      kubernetes&lt;span class=&quot;fu&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;Deployment&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;::&lt;/span&gt;{&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb10-6&quot; data-line-number=&quot;6&quot;&gt;      , metadata &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; kubernetes&lt;span class=&quot;fu&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;ObjectMeta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;::&lt;/span&gt;{ name &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;nginx&amp;quot;&lt;/span&gt; }&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb10-7&quot; data-line-number=&quot;7&quot;&gt;      , spec &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Some&lt;/span&gt; kubernetes&lt;span class=&quot;fu&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;DeploymentSpec&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;::&lt;/span&gt;{&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb10-8&quot; data-line-number=&quot;8&quot;&gt;        , replicas &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb10-9&quot; data-line-number=&quot;9&quot;&gt;        , template &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; kubernetes&lt;span class=&quot;fu&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;PodTemplateSpec&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;::&lt;/span&gt;{&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb10-10&quot; data-line-number=&quot;10&quot;&gt;          , metadata &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; kubernetes&lt;span class=&quot;fu&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;ObjectMeta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;::&lt;/span&gt;{ name &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;nginx&amp;quot;&lt;/span&gt; }&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb10-11&quot; data-line-number=&quot;11&quot;&gt;          , spec &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Some&lt;/span&gt; kubernetes&lt;span class=&quot;fu&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;PodSpec&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;::&lt;/span&gt;{&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb10-12&quot; data-line-number=&quot;12&quot;&gt;            , containers &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb10-13&quot; data-line-number=&quot;13&quot;&gt;              [ kubernetes&lt;span class=&quot;fu&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;Container&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;::&lt;/span&gt;{&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb10-14&quot; data-line-number=&quot;14&quot;&gt;                , name &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;nginx&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb10-15&quot; data-line-number=&quot;15&quot;&gt;                , image &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;nginx:1.15.3&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb10-16&quot; data-line-number=&quot;16&quot;&gt;                , ports &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; [ kubernetes&lt;span class=&quot;fu&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;ContainerPort&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;::&lt;/span&gt;{ containerPort &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;80&lt;/span&gt; } ]&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb10-17&quot; data-line-number=&quot;17&quot;&gt;                }&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb10-18&quot; data-line-number=&quot;18&quot;&gt;              ]&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb10-19&quot; data-line-number=&quot;19&quot;&gt;            }&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb10-20&quot; data-line-number=&quot;20&quot;&gt;          }&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb10-21&quot; data-line-number=&quot;21&quot;&gt;        }&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb10-22&quot; data-line-number=&quot;22&quot;&gt;      }&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb10-23&quot; data-line-number=&quot;23&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb10-24&quot; data-line-number=&quot;24&quot;&gt;&lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;  deployment&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&quot;new-built-ins&quot;&gt;New built-ins&lt;/h3&gt;&lt;p&gt;One change with a high power-to-weight ratio was adding new built-ins. Without listing all of them, the key changes were:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;Integer&lt;/code&gt;s are no longer opaque. You can convert back and forth between &lt;code&gt;Integer&lt;/code&gt; and &lt;code&gt;Natural&lt;/code&gt; and therefore implement arbitrary arithmetic on &lt;code&gt;Integer&lt;/code&gt;s.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Some new built-ins enabled new efficient Prelude utilities that would have been prohibitively slow otherwise&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Some things that used to require external command-line tools can now be implemented entirely within the language (such as modeling and rendering JSON/YAML in “pure Dhall” as mentioned above)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Note that &lt;code&gt;Text&lt;/code&gt; is still opaque, although I predict that is the most likely thing that will change over the next year if we continue to add new built-ins.&lt;/p&gt;&lt;h3 id=&quot;enums&quot;&gt;Enums&lt;/h3&gt;&lt;p&gt;Enums are now much more ergonomic in Dhall, as the following example illustrates:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb11&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb11-1&quot; data-line-number=&quot;1&quot;&gt;&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;DayOfWeek&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb11-2&quot; data-line-number=&quot;2&quot;&gt;      &lt;span class=&quot;fu&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Sunday&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Monday&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Tuesday&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Wednesday&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Thursday&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Friday&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Saturday&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb11-3&quot; data-line-number=&quot;3&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb11-4&quot; data-line-number=&quot;4&quot;&gt;&lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;  [ &lt;span class=&quot;dt&quot;&gt;DayOfWeek.Sunday&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;DayOfWeek.Tuesday&lt;/span&gt; ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;More generally, union alternatives can now be empty, like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb12&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb12-1&quot; data-line-number=&quot;1&quot;&gt;&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Age&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Known&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Unknown&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb12-2&quot; data-line-number=&quot;2&quot;&gt;  &lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb12-3&quot; data-line-number=&quot;3&quot;&gt;&lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;  [ &lt;span class=&quot;dt&quot;&gt;Age.Known&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;24&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Age.Unknown&lt;/span&gt; ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… and enums are the special case where all alternatives are empty.&lt;/p&gt;&lt;p&gt;Before this change users would have to use an alternative type of &lt;code&gt;{}&lt;/code&gt;, like this:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb13&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb13-1&quot; data-line-number=&quot;1&quot;&gt;&lt;span class=&quot;co&quot;&gt;-- The old way of doing things:&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb13-2&quot; data-line-number=&quot;2&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb13-3&quot; data-line-number=&quot;3&quot;&gt;&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Age&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Known&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Unknown&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; {} &lt;span class=&quot;fu&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb13-4&quot; data-line-number=&quot;4&quot;&gt;  &lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb13-5&quot; data-line-number=&quot;5&quot;&gt;&lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;  [ &lt;span class=&quot;dt&quot;&gt;Age.Known&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;24&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Age.Unknown&lt;/span&gt; {&lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt;} ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… which made things more verbose both for authors and consumers of Dhall packages.&lt;/p&gt;&lt;h2 id=&quot;tooling-improvements&quot;&gt;Tooling improvements&lt;/h2&gt;&lt;p&gt;This section covers improvements to the the tooling in order to provide a more complete development experience.&lt;/p&gt;&lt;h3 id=&quot;language-server&quot;&gt;Language server&lt;/h3&gt;&lt;p&gt;Last year I stated that one of our goals was to create a Dhall language server for broader better editor support and I’m happy to announce that we accomplished that goal!&lt;/p&gt;&lt;p&gt;Credit goes to both &lt;a href=&quot;https://github.com/PanAeon&quot;&gt;PanAeon&lt;/a&gt; (who authored the initial implementation) and &lt;a href=&quot;https://github.com/EggBaconAndSpam&quot;&gt;Folkmar Ramcke&lt;/a&gt; (who greatly expanded upon the initial implementation as part of a Google Summer of Code project).&lt;/p&gt;&lt;p&gt;You can read the final report at the end of Folkmar’s work here:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/EggBaconAndSpam/eggbaconandspam.github.io/blob/master/posts/2019-08-22-final-report.md&quot;&gt;Final Report: Dhall Language Server&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;… and this GIF gives a sample of what the language server can do:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://dhall-lang.org/img/completion.gif&quot; /&gt;&lt;/p&gt;&lt;p&gt;The language server was tested to work with &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=panaeon.vscode-dhall-lsp-server&quot;&gt;VSCode&lt;/a&gt; but in principle should work with any editor that supports the language server protocol with a small amount of work. I’ve personally tested that the language server works fine with Vim/Neovim.&lt;/p&gt;&lt;p&gt;If you have any issues getting the language server working with your editor of choice just let us know as we plan to polish and document the setup process for a wide variety of editors.&lt;/p&gt;&lt;p&gt;Also, we continue to add new features to language server based on user feedback. If you have cool ideas for how to make the editor experience more amazing please share them with us!&lt;/p&gt;&lt;h3 id=&quot;pre-built-executables-for-all-platforms&quot;&gt;Pre-built executables for all platforms&lt;/h3&gt;&lt;p&gt;Several users contributed continuous delivery support so that we could automatically generate pre-built executables for the shared command-line tools, including the &lt;code&gt;dhall&lt;/code&gt; command and &lt;code&gt;dhall-lsp-server&lt;/code&gt; (the language server).&lt;/p&gt;&lt;p&gt;That means that for each new release you can download pre-built executables for:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Windows&lt;/li&gt;&lt;li&gt;OS X&lt;/li&gt;&lt;li&gt;Linux&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;… from this page:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/dhall-lang/dhall-haskell/releases&quot;&gt;&lt;code&gt;dhall-lang/dhall-haskell&lt;/code&gt; - Releases&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;docker-support&quot;&gt;Docker support&lt;/h3&gt;&lt;p&gt;You can also obtain &lt;code&gt;docker&lt;/code&gt; containers for many of the command-line tools for ease of integration with your company’s container-based infrastructure:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://hub.docker.com/u/dhallhaskell&quot;&gt;Docker Hub - &lt;code&gt;dhallhaskell&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;performance&quot;&gt;Performance&lt;/h3&gt;&lt;p&gt;The Haskell implementation (which powers the &lt;code&gt;dhall&lt;/code&gt; tool and the language server) has undergone some dramatic performance improvements over the last year.&lt;/p&gt;&lt;p&gt;Most of these performance improvements were in response to the following two pressures on the language:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;The language server requires a snappy feedback loop for productive editing&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;People are commonly using Dhall on very large program configurations (like &lt;code&gt;dhall-kubernetes&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;There is still room for improvement, but it is markedly better for all Dhall configuration files and orders of magnitude faster in many cases compared to a year ago.&lt;/p&gt;&lt;h3 id=&quot;formatting-improvements&quot;&gt;Formatting improvements&lt;/h3&gt;&lt;p&gt;The standard formatter is probably one of the things I get the most feedback about (mostly criticism 🙂), so I’ve spent some time this year on improving the formatter in the following ways:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;let&lt;/code&gt;-related comments are now preserved&lt;/p&gt;&lt;p&gt;… and I plan to expand support for preserving more comments&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Expressions are now much more compact than before&lt;/p&gt;&lt;p&gt;… such as in the &lt;code&gt;dhall-kubernetes&lt;/code&gt; sample code above&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Additionally, I recently started a discussion about potentially switching to ASCII as the default for formatting code, which you can follow here:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://discourse.dhall-lang.org/t/change-dhall-format-to-use-ascii-by-default/115/22&quot;&gt;Change &lt;code&gt;dhall format&lt;/code&gt; to use ASCII by default?&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The outcome of that discussion was to add several new survey questions to assess whether people prefer to read and write Dhall code using ASCII or Unicode. So if you have strong opinions about this then please take the survey!&lt;/p&gt;&lt;h3 id=&quot;dhall-packages&quot;&gt;Dhall packages&lt;/h3&gt;&lt;p&gt;Another significant component of the Dhall ecosystem is packages written within the language.&lt;/p&gt;&lt;p&gt;Dhall differentiates itself from other programmable file formats (e.g. Jsonnet) by having hundreds of open source packages built around the language that support for a variety of tools and formats (especially in the Ops / CI / CD domain).&lt;/p&gt;&lt;p&gt;In fact, Dhall’s open source footprint large enough this year that GitHub now recognizes Dhall as a supported file format. This means that files with a &lt;code&gt;.dhall&lt;/code&gt; extension now enjoy syntax highlighting on GitHub and show up in language statistics for projects.&lt;/p&gt;&lt;p&gt;Here are some example Dhall bindings to various formats added last year:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/vmchale/github-actions-dhall&quot;&gt;GitHub actions&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/amarrella/aws-lambda-dhall-runtime&quot;&gt;AWS lambda functions&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/RyanSiu1995/dhall-kong&quot;&gt;Kong&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/dzen-dhall/dzen-dhall&quot;&gt;Dzen&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/robertjlooby/dhall-ssh-config&quot;&gt;SSH configurations&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I’m highly grateful for every person who improves the ecosystem. In fact, I randomly stalk Dhall packages on GitHub to inform language design by seeing how people use Dhall “in the wild”.&lt;/p&gt;&lt;h2 id=&quot;shared-infrastructure&quot;&gt;Shared infrastructure&lt;/h2&gt;&lt;p&gt;We made two main improvements to shared infrastructure for the Dhall community this year:&lt;/p&gt;&lt;h3 id=&quot;documentation&quot;&gt;Documentation&lt;/h3&gt;&lt;p&gt;The Dhall wiki has been moved to &lt;a href=&quot;https://docs.dhall-lang.org&quot;&gt;docs.dhall-lang.org&lt;/a&gt; thanks to work by &lt;a href=&quot;https://github.com/TristanCacqueray&quot;&gt;Tristan de Cacqueray&lt;/a&gt;. This means that:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;The documentation is now generated using Sphinx&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The documentation is now much easier to contribute to as it is under version control here:&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/dhall-lang/dhall-lang/tree/master/docs&quot;&gt;&lt;code&gt;dhall-lang/docs&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;So if you would like to improve the documentation you can now open a pull request to do so!&lt;/p&gt;&lt;h3 id=&quot;discourse&quot;&gt;Discourse&lt;/h3&gt;&lt;p&gt;We also have a new Discourse forum hosted at &lt;a href=&quot;https://discourse.dhall-lang.org&quot;&gt;discourse.dhall-lang.org&lt;/a&gt; that you can use to discuss anything Dhall-related.&lt;/p&gt;&lt;p&gt;We’ve been using the forum so far for announcing projects / releases and also as a sounding board for ideas.&lt;/p&gt;&lt;h2 id=&quot;funding&quot;&gt;Funding&lt;/h2&gt;&lt;p&gt;Last year I solicited ideas for funding improvements to the Dhall ecosystem and this year we followed through on three different funding mechanisms:&lt;/p&gt;&lt;h3 id=&quot;google-summer-of-code&quot;&gt;Google Summer of Code&lt;/h3&gt;&lt;p&gt;The most successful funding source by far was Google’s Summer of Code grant that funded Folkmar Ramcke to develop the language server. I plan to try this again for the upcoming summer and I will also recommend that other Dhall projects and language bindings try this out, too. Besides providing a generous source of funding (thank you, Google 🙇‍♂️) this program is an excellent opportunity to bring in new contributors to the ecosystem.&lt;/p&gt;&lt;h3 id=&quot;open-collective&quot;&gt;Open Collective&lt;/h3&gt;&lt;p&gt;Another thing we set up this year is an Open Collective for Dhall so that we can accept donations from companies and individuals. We started this only a few months ago and thanks to people’s generosity we’ve accumulated over $500 in donations.&lt;/p&gt;&lt;p&gt;I would like to give special thanks to our first backer:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/mitchellwrosen&quot;&gt;Mitchell Rosen&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;… and our largest backer:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.meshcloud.io/en/meshcloud/&quot;&gt;meshcloud GmbH&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;We plan to use these donations to fund projects that (A) benefit the entire Dhall community and (B) bring in new contributors, so your donations help promote a vibrant and growing developer community around the language.&lt;/p&gt;&lt;p&gt;Our first such project was to implement “pure Dhall” support for rendering YAML:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://discourse.dhall-lang.org/t/expense-proposal-pure-dhall-function-to-render-yaml/92&quot;&gt;Expense proposal: Pure Dhall function to render YAML&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;… and we have another proposal in progress to fund documenting the setup process for the language server for various editors:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://discourse.dhall-lang.org/t/expense-proposal-document-language-server-setup/121&quot;&gt;Expense proposal: Document language server setup&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If you would like to donate, you can do so here:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://opencollective.com/dhall&quot;&gt;Open Collective - Dhall&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;book&quot;&gt;Book&lt;/h3&gt;&lt;p&gt;I’m also working on the following book:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/Gabriel439/dhall-manual&quot;&gt;The Dhall Configuration Language Manual&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;My plan is to make the book freely available using LeanPub but to give users the option to pay for the book, with all proceeds going to the above Open Collective for Dhall.&lt;/p&gt;&lt;p&gt;One of the strongest pieces of survey feedback we got was that users were willing to pay for Dhall-related merchandise (especially books) and they were highly eager for documentation regarding best practices for the language. This book intends to address both of those points of feedback.&lt;/p&gt;&lt;p&gt;I expect that at the current rate of progress the book will likely be done by the end of this year, but you can already begin reading the chapters that I’ve completed so far:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/Gabriel439/dhall-manual/blob/f6d198d1b34483c007db0c70dda82594c875237e/manuscript/00-Introduction.md&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/Gabriel439/dhall-manual/blob/f6d198d1b34483c007db0c70dda82594c875237e/manuscript/01-YamlToDhall.md&quot;&gt;How to convert an existing YAML configuration file to Dhall&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/Gabriel439/dhall-manual/blob/f6d198d1b34483c007db0c70dda82594c875237e/manuscript/02-Refactors.md&quot;&gt;How to safely refactor a configuration file&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/Gabriel439/dhall-manual/blob/f6d198d1b34483c007db0c70dda82594c875237e/manuscript/03-Defaults.md&quot;&gt;How to simplify records with many defaults&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;future-directions&quot;&gt;Future directions&lt;/h2&gt;&lt;h3 id=&quot;marketing&quot;&gt;Marketing&lt;/h3&gt;&lt;p&gt;One of the things that’s slowly changing about the language is how we market ourselves. People following the language know that we’ve recently revamped the website:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://dhall-lang.org/&quot;&gt;dhall-lang.org&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;… and changed our “slogan” to “Maintainable configuration files”.&lt;/p&gt;&lt;p&gt;One difference from last year is that we’re no longer trying to replace all uses for YAML. User feedback indicated that some uses of YAML were better served by TOML rather than Dhall. Specifically, small (~10 line) configuration files for simple command-line tools were cases where TOML was a better default choice than Dhall.&lt;/p&gt;&lt;p&gt;On the other hand, we find that users that deal with very large and fragmented program configurations tend to prefer Dhall due the language’s support for features that promote maintainability and reduce total cost of ownership.&lt;/p&gt;&lt;p&gt;I continue to prioritize Ops / CI / CD use cases, but I no longer try to displace YAML for use cases where TOML would be a more appropriate choice.&lt;/p&gt;&lt;h3 id=&quot;completing-the-dhall-manual&quot;&gt;Completing the Dhall manual&lt;/h3&gt;&lt;p&gt;One of my personal goals is to complete the Dhall manual to help people confidently recommend Dhall to others by providing high-quality material to help onboard their coworkers. I expect this will help accelerate language adoption quite a bit.&lt;/p&gt;&lt;h3 id=&quot;polish-the-language-server&quot;&gt;Polish the language server&lt;/h3&gt;&lt;p&gt;The language server is another area of development that I see as highly promising. Although we currently provide common features like type-on-hover and intelligent auto-completion I still think there is a lot of untapped potential here to really “wow” new users by showcasing Dhall’s strengths.&lt;/p&gt;&lt;p&gt;People currently have &lt;strong&gt;really&lt;/strong&gt; low expectations for programmable file formats, so I view the quality of the language server implementation as being a way that Dhall can rapidly differentiate itself from competing programmable file formats. In particular, Dhall is one of the few typed configuration formats and quality editor support is one of the easiest ways to convey the importance of using a typed language.&lt;/p&gt;&lt;h3 id=&quot;packaging-for-various-distributions&quot;&gt;Packaging for various distributions&lt;/h3&gt;&lt;p&gt;One thing that the Dhall ecosystem would benefit from is packaging, not just for Linux distributions but other platforms as well. We made progress this year by adding support for Brew and Docker, but there are still important omissions for other platforms, such as:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Windows (e.g. Nuget)&lt;/li&gt;&lt;li&gt;Linux (e.g. Debian/Fedora/Arch)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This one of the areas where I have the greatest difficulty making progress because each package repository tends to have a pretty high barrier to entry in my experience. If you are somebody who has experience with any of the above package repositories and could help me get started I would appreciate it!&lt;/p&gt;&lt;h3 id=&quot;package-discovery&quot;&gt;Package discovery&lt;/h3&gt;&lt;p&gt;I mentioned earlier that Dhall is growing quite a large open source package footprint, but these packages are not easy to discover.&lt;/p&gt;&lt;p&gt;One effort to address this is:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/EarnestResearch/dhall-packages&quot;&gt;&lt;code&gt;EarnestResearch/dhall-packages&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;… which is working to create a “mono-repo” of Dhall packages to promote discoverability.&lt;/p&gt;&lt;p&gt;In addition to that, the language probably also needs a standard documentation generator. There have been a few nascent efforts along these lines this year, but at some point we need to take this idea “all the way”.&lt;/p&gt;&lt;h3 id=&quot;library-of-kubernetes-utilities&quot;&gt;Library of Kubernetes utilities&lt;/h3&gt;&lt;p&gt;Last year I mentioned that I would spend some time on a new Ops-related Dhall integration and I quickly gravitated towards improving the existing &lt;code&gt;dhall-kubernetes&lt;/code&gt; integration. After familarizing myself with Kubernetes I realized that this is a use case that is served well by Dhall since Kubernetes configurations are highly unmaintainable.&lt;/p&gt;&lt;p&gt;Programmable Kubernetes configuration files are a bit of a crowded field (a cottage industry, really), with a steady stream of new entrants (like Pulumi, Cue, and Tanka). That said, I’m fairly confident that with some attention Dhall can become the best-in-class solution in this space.&lt;/p&gt;&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;&lt;p&gt;I would like thank everybody who contributed last year, and I apologize if I forgot to acknowledge your contribution.&lt;/p&gt;&lt;p&gt;This post is not an exhaustive list of what happened over the last year. If you would like to learn more, the best places to start are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/dhall-lang/dhall-lang/releases&quot;&gt;The release page for the language standard&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://twitter.com/dhall_lang&quot;&gt;The dhall_lang Twitter acccount&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://discourse.dhall-lang.org/&quot;&gt;The Dhall Discourse forum&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Please don’t forget to take our yearly survey to provide feedback on the language or to inform the future direction:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://forms.gle/jh7VVj2rfWrjW28h9&quot;&gt;Dhall 2019-2020 Survey&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;In a month I will follow up with another post reviewing the survey feedback.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</content><link rel="replies" type="application/atom+xml" href="https://www.haskellforall.com/feeds/2271956862386717403/comments/default" title="Post Comments"><link rel="replies" type="text/html" href="https://www.haskellforall.com/2020/01/dhall-year-in-review-2019-2020.html#comment-form" title="0 Comments"><link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/2271956862386717403"><link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/2271956862386717403"><link rel="alternate" type="text/html" href="https://www.haskellforall.com/2020/01/dhall-year-in-review-2019-2020.html" title="Dhall - Year in review (2019-2020)"><author><name>Gabriel Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-3822178455234125487</id><published>2019-12-12T08:59:00.000-08:00</published><updated>2019-12-12T08:59:26.428-08:00</updated><title type="text">Prefer to use fail for IO exceptions</title><content type="html">&lt;!DOCTYPE html&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;utf-8&quot; /&gt;  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;  &lt;title&gt;fail&lt;/title&gt;  &lt;style type=&quot;text/css&quot;&gt;      code{white-space: pre-wrap;}       span.smallcaps{font-variant: small-caps;}       span.underline{text-decoration: underline;}       div.column{display: inline-block; vertical-align: top; width: 50%;}   &lt;/style&gt;  &lt;style type=&quot;text/css&quot;&gt;a.sourceLine { display: inline-block; line-height: 1.25; } a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; } a.sourceLine:empty { height: 1.2em; } .sourceCode { overflow: visible; } code.sourceCode { white-space: pre; position: relative; } div.sourceCode { margin: 1em 0; } pre.sourceCode { margin: 0; } @media screen { div.sourceCode { overflow: auto; } } @media print { code.sourceCode { white-space: pre-wrap; } a.sourceLine { text-indent: -1em; padding-left: 1em; } } pre.numberSource a.sourceLine   { position: relative; left: -4em; } pre.numberSource a.sourceLine::before   { content: attr(title);     position: relative; left: -1em; text-align: right; vertical-align: baseline;     border: none; pointer-events: all; display: inline-block;     -webkit-touch-callout: none; -webkit-user-select: none;     -khtml-user-select: none; -moz-user-select: none;     -ms-user-select: none; user-select: none;     padding: 0 4px; width: 4em;     color: #aaaaaa;   } pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; } div.sourceCode   {  } @media screen { a.sourceLine::before { text-decoration: underline; } } code span.al { color: #ff0000; font-weight: bold; } /* Alert */ code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */ code span.at { color: #7d9029; } /* Attribute */ code span.bn { color: #40a070; } /* BaseN */ code span.bu { } /* BuiltIn */ code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */ code span.ch { color: #4070a0; } /* Char */ code span.cn { color: #880000; } /* Constant */ code span.co { color: #60a0b0; font-style: italic; } /* Comment */ code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */ code span.do { color: #ba2121; font-style: italic; } /* Documentation */ code span.dt { color: #902000; } /* DataType */ code span.dv { color: #40a070; } /* DecVal */ code span.er { color: #ff0000; font-weight: bold; } /* Error */ code span.ex { } /* Extension */ code span.fl { color: #40a070; } /* Float */ code span.fu { color: #06287e; } /* Function */ code span.im { } /* Import */ code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */ code span.kw { color: #007020; font-weight: bold; } /* Keyword */ code span.op { color: #666666; } /* Operator */ code span.ot { color: #007020; } /* Other */ code span.pp { color: #bc7a00; } /* Preprocessor */ code span.sc { color: #4070a0; } /* SpecialChar */ code span.ss { color: #bb6688; } /* SpecialString */ code span.st { color: #4070a0; } /* String */ code span.va { color: #19177c; } /* Variable */ code span.vs { color: #4070a0; } /* VerbatimString */ code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */   &lt;/style&gt;  &lt;!--[if lt IE 9]&gt;    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;  &lt;![endif]--&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;This post briefly explains why I commonly suggest that people replace &lt;code&gt;error&lt;/code&gt; with &lt;code&gt;fail&lt;/code&gt; when raising &lt;code&gt;IOException&lt;/code&gt;s.&lt;/p&gt;&lt;p&gt;The main difference between &lt;code&gt;error&lt;/code&gt; and &lt;code&gt;fail&lt;/code&gt; can be summarized by the following equations:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-1&quot; title=&quot;1&quot;&gt;&lt;span class=&quot;fu&quot;&gt;error&lt;/span&gt; string &lt;span class=&quot;ot&quot;&gt;`seq`&lt;/span&gt; x &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;error&lt;/span&gt; string&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-2&quot; title=&quot;2&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-3&quot; title=&quot;3&quot;&gt;&lt;span class=&quot;fu&quot;&gt;fail&lt;/span&gt; string &lt;span class=&quot;ot&quot;&gt;`seq`&lt;/span&gt; x &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; x&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In other words, any attempt to evaluate an expression that is an &lt;code&gt;error&lt;/code&gt; will raise the error. Evaluating an expression that is a &lt;code&gt;fail&lt;/code&gt; does not raise the error or trigger any side effects.&lt;/p&gt;&lt;p&gt;Why does this matter? One of the nice properties of Haskell is that Haskell separates effect order from evaluation order. For example, evaluating a &lt;code&gt;print&lt;/code&gt; statement is not the same thing as running it:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb2-1&quot; title=&quot;1&quot;&gt;&lt;span class=&quot;ot&quot;&gt;{-# LANGUAGE BangPatterns #-}&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb2-2&quot; title=&quot;2&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb2-3&quot; title=&quot;3&quot;&gt;&lt;span class=&quot;co&quot;&gt;-- This program only prints &amp;quot;2&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb2-4&quot; title=&quot;4&quot;&gt;&lt;span class=&quot;ot&quot;&gt;main ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;IO&lt;/span&gt; ()&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb2-5&quot; title=&quot;5&quot;&gt;main &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb2-6&quot; title=&quot;6&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;!&lt;/span&gt;x &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb2-7&quot; title=&quot;7&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb2-8&quot; title=&quot;8&quot;&gt;    &lt;span class=&quot;fu&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This insensitivity to evaluation order makes Haskell code easier to maintain. Specifically, this insensitivity frees us from concerning ourselves with evaluation order in the same way garbage collection frees us from concerning ourselves with memory management.&lt;/p&gt;&lt;p&gt;Once we begin using evaluation-sensitive primitives such as &lt;code&gt;error&lt;/code&gt; we necessarily need to program with greater caution than before. Now any time we manipulate a subroutine of type &lt;code&gt;IO a&lt;/code&gt; we need to take care not to prematurely force the thunk storing that subroutine.&lt;/p&gt;&lt;p&gt;How likely are we to prematurely evaluate a subroutine? Truthfully, not very likely, but fortunately taking the extra precaution to use &lt;code&gt;fail&lt;/code&gt; is not only theoretically safer, it is also one character shorter than using &lt;code&gt;error&lt;/code&gt;.&lt;/p&gt;&lt;h2 id=&quot;limitations&quot;&gt;Limitations&lt;/h2&gt;&lt;p&gt;Note that this advice applies solely to the case of raising &lt;code&gt;IOException&lt;/code&gt;s within an &lt;code&gt;IO&lt;/code&gt; subroutine. &lt;code&gt;fail&lt;/code&gt; is not necessarily safer than &lt;code&gt;error&lt;/code&gt; in other cases, because &lt;code&gt;fail&lt;/code&gt; is a method of the &lt;code&gt;MonadFail&lt;/code&gt; typeclass and the typeclass does not guarantee in general that &lt;code&gt;fail&lt;/code&gt; is safe.&lt;/p&gt;&lt;p&gt;&lt;code&gt;fail&lt;/code&gt; happens to do the correct thing for &lt;code&gt;IO&lt;/code&gt;:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb3-1&quot; title=&quot;1&quot;&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;MonadFail&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb3-2&quot; title=&quot;2&quot;&gt;    &lt;span class=&quot;fu&quot;&gt;fail&lt;/span&gt; string &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; throwIO (&lt;span class=&quot;fu&quot;&gt;userError&lt;/span&gt; string)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… but for other &lt;code&gt;MonadFail&lt;/code&gt; instances &lt;code&gt;fail&lt;/code&gt; could be a synonym for &lt;code&gt;error&lt;/code&gt; and offer no additional protective value.&lt;/p&gt;&lt;p&gt;If you want to future-proof your code and ensure that you never use the wrong &lt;code&gt;MonadFail&lt;/code&gt; instance, you can do one of two things:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Enable the &lt;code&gt;TypeApplications&lt;/code&gt; language extension and write &lt;code&gt;fail @IO string&lt;/code&gt;&lt;/li&gt;&lt;li&gt;Use &lt;code&gt;Control.Exception.throwIO (userError string)&lt;/code&gt; instead of &lt;code&gt;fail&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;However, even if you choose not to future-proof your code &lt;code&gt;fail&lt;/code&gt; is still no worse than &lt;code&gt;error&lt;/code&gt; in this regard.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</content><link rel="replies" type="application/atom+xml" href="https://www.haskellforall.com/feeds/3822178455234125487/comments/default" title="Post Comments"><link rel="replies" type="text/html" href="https://www.haskellforall.com/2019/12/prefer-to-use-fail-for-io-exceptions.html#comment-form" title="0 Comments"><link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/3822178455234125487"><link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/3822178455234125487"><link rel="alternate" type="text/html" href="https://www.haskellforall.com/2019/12/prefer-to-use-fail-for-io-exceptions.html" title="Prefer to use fail for IO exceptions"><author><name>Gabriel Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-1632132347762509344</id><published>2019-06-16T09:39:00.001-07:00</published><updated>2019-06-16T09:39:52.493-07:00</updated><title type="text">The CAP theorem for software engineering</title><content type="html">&lt;!DOCTYPE html&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;utf-8&quot; /&gt;  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;  &lt;title&gt;cap&lt;/title&gt;  &lt;style&gt;      code{white-space: pre-wrap;}       span.smallcaps{font-variant: small-caps;}       span.underline{text-decoration: underline;}       div.column{display: inline-block; vertical-align: top; width: 50%;}   &lt;/style&gt;  &lt;!--[if lt IE 9]&gt;    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;  &lt;![endif]--&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;The &lt;strong&gt;CAP&lt;/strong&gt; theorem says that distributed computing systems cannot simultaneously guarantee all three of:&lt;/p&gt;&lt;blockquote&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;C&lt;/strong&gt;onsistency - Every read receives the most recent write or an error&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;vailability - Every request receives a (non-error) response - without the guarantee that it contains the most recent write&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;P&lt;/strong&gt;artition tolerance - The system continues to operate despite an arbitrary number of messages being dropped (or delayed) by the network between nodes&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Source: &lt;a href=&quot;https://en.wikipedia.org/wiki/CAP_theorem&quot;&gt;CAP theorem - Wikipedia&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Since we cannot guarantee all three, we must typically sacrifice at least one of those guarantees (i.e. sacrifice availability or sacrifice partition tolerance).&lt;/p&gt;&lt;p&gt;However, what if we were to squint and apply the CAP theorem to another distributed system: a team of software engineers working towards a common goal.&lt;/p&gt;&lt;p&gt;In particular:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;What if our data store were a distributed version control system?&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;What if our “nodes” were software developers instead of machines?&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If we view engineering through this lens, we can recognize many common software engineering tradeoffs as special cases of CAP theorem tradeoffs. In other words, many architectural patterns also require us sacrifice at least one of consistency, availability, or partition tolerance among developers.&lt;/p&gt;&lt;p&gt;Before we get into examples, I’d like to review two points that come up in most discussions of the CAP theorem:&lt;/p&gt;&lt;h2 id=&quot;partition-tolerance&quot;&gt;Partition tolerance&lt;/h2&gt;&lt;p&gt;What does it mean to sacrifice partition tolerance? In the context of machines, this would require us to rule out the possibility of any sort of network failure.&lt;/p&gt;&lt;p&gt;Now replace machines with developers. We’d have to assume that people never miscommunicate, lose internet access, or fetch the wrong branch.&lt;/p&gt;&lt;p&gt;The possibility of partitions are what make a system a distributed system, so we’re usually not interested in the option of sacrificing partition tolerance. That would be like a computing system with only one machine or a team with only one developer.&lt;/p&gt;&lt;p&gt;Instead, we’ll typically focus on sacrificing either availability or consistency.&lt;/p&gt;&lt;h2 id=&quot;spectrums-of-tradeoffs&quot;&gt;Spectrums of tradeoffs&lt;/h2&gt;&lt;p&gt;In most systems you’re always sacrificing all three of consistency, availability, and partition tolerance to some degree if you look closely enough. For example, even a healthy machine is not 100% available if you consider that even the fastest network request still has an irreducible delay of around a few hundred microseconds on today’s machines.&lt;/p&gt;&lt;p&gt;In practice, we ignore these vanishingly small inconsistencies or inavailabilities, but they still illustrate a general pattern: we can think of system health/availability/consistency as spectrums rather than boolean options.&lt;/p&gt;&lt;p&gt;For example, if we say we choose availability over consistency, we really mean that we choose to make our system’s unavailability vanishingly small and that our system &lt;em&gt;could&lt;/em&gt; be consistent, but not all the time. Indeed, if our hardware or network were both fast and extremely reliable we could enjoy both high consistency and high availability, but when things fail then we need to prioritize which of consistency or availability that we sacrifice to accommodate that failure.&lt;/p&gt;&lt;p&gt;We can also choose to sacrifice a non-trivial amount of both availability and consistency. Sometimes exclusively prioritizing one or the other is not the right engineering choice!&lt;/p&gt;&lt;p&gt;With those caveats out of the way, let’s view some common software engineering tradeoffs through the lens of the CAP theorem.&lt;/p&gt;&lt;h2 id=&quot;monorepo-vs.-polyrepo&quot;&gt;Monorepo vs. Polyrepo&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;In revision control systems, a monorepo (syllabic abbreviation of monolithic repository) is a software development strategy where code for many projects are stored in the same repository&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Source: &lt;a href=&quot;https://en.wikipedia.org/wiki/Monorepo&quot;&gt;Monorepo: Wikipedia&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;p&gt;A “polyrepo” is the opposite software development strategy where each project gets a different source repository. In a monorepo, projects depend on each other by their relative paths. In a polyrepo, a project can depend on another project by referencing a specific release/revision/build of the dependency.&lt;/p&gt;&lt;p&gt;The tradeoff between a monorepo and a polyrepo is a tradeoff between consistency and availability. A monorepo prioritizes consistency over availability. Conversely, a polyrepo prioritizes availability over consistency.&lt;/p&gt;&lt;p&gt;To see why, let’s pretend that project A depends on project B and we wish to make a breaking change to project B that requires matching fixes to project A. Let’s also assume that we have some sort of continuous integration that ensures that the &lt;code&gt;master&lt;/code&gt; branch of any repository must build and pass tests.&lt;/p&gt;&lt;p&gt;In a polyrepo, we can make the breaking change to the &lt;code&gt;master&lt;/code&gt; branch of project B before we are prepared to make the matching fix to project A. The continuous integration that we run for project B’s repository does not check that other “downstream” projects that depend on B will continue to build if they incorporate the change. In this scenario, we’ve deferred the work of integrating the two projects together and left the system in a state where the &lt;code&gt;master&lt;/code&gt; branch of project B is not compatible with the &lt;code&gt;master&lt;/code&gt; branch of project A. (Note: the &lt;code&gt;master&lt;/code&gt; branch of project A may still build and pass tests, but only because it depends on an older version of project B).&lt;/p&gt;&lt;p&gt;In a monorepo, we must bundle the breaking change to project B and the fix to project A in a single logical commit to the &lt;code&gt;master&lt;/code&gt; branch of our monorepo. The continuous integration for the monorepo prevents us from leaving the &lt;code&gt;master&lt;/code&gt; branch in a state where some of the projects don’t build. Fixing these package incompatibilities up-front will delay merging work into the &lt;code&gt;master&lt;/code&gt; branch (i.e. sacrificing availability of our work product) but imposing this restriction ensures that the entire software engineering organization has a unified view of the codebase (i.e. preserving consistency).&lt;/p&gt;&lt;p&gt;To make the analogy precise, let’s revisit the original definitions of consistency, availability, and partition tolerance:&lt;/p&gt;&lt;blockquote&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;C&lt;/strong&gt;onsistency - Every read receives the most recent write or an error&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;vailability - Every request receives a (non-error) response - without the guarantee that it contains the most recent write&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;P&lt;/strong&gt;artition tolerance - The system continues to operate despite an arbitrary number of messages being dropped (or delayed) by the network between nodes&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;p&gt;… and change them to reflect the metaphor of a distributed team of developers collaborating via GitHub/GitLab:&lt;/p&gt;&lt;blockquote&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;C&lt;/strong&gt;onsistency - Every &lt;code&gt;git pull&lt;/code&gt; receives the latest versions of all dependencies&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;vailability - Every pull request succeeds - without the guarantee that it contains the latest versions of all dependencies&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;P&lt;/strong&gt;artition tolerance - &lt;code&gt;git&lt;/code&gt; operations continue to work even if GitHub/GitLab is unavailable&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;trunk-based-development-vs.-long-lived-branches&quot;&gt;Trunk based development vs. Long-lived branches&lt;/h2&gt;&lt;p&gt;Our previous scenario assumed that each repository was using “trunk-based development”, defined as:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;A source-control branching model, where developers collaborate on code in a single branch called “trunk” [and] resist any pressure to create other long-lived development branches by employing documented techniques.&lt;/p&gt;&lt;p&gt;Source: &lt;a href=&quot;https://trunkbaseddevelopment.com/&quot;&gt;trunkbaseddevelopment.com&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;The opposite of trunk-based development is “long-lived branches” that are not the &lt;code&gt;master&lt;/code&gt; branch (i.e. the “trunk” branch).&lt;/p&gt;&lt;p&gt;Here are some examples of long-lived branches you’ll commonly find in the wild:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;A &lt;code&gt;develop&lt;/code&gt; branch that is used as a the base branch of pull requests. This &lt;code&gt;develop&lt;/code&gt; branch is periodically merged into &lt;code&gt;master&lt;/code&gt; (typically at release boundaries)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Release branches that are suported for months or years (i.e. &lt;a href=&quot;https://en.wikipedia.org/wiki/Long-term_support&quot;&gt;long-term support&lt;/a&gt; releases)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Feature branches that people work on for an extended period of time before merging their work into &lt;code&gt;master&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The choice between trunk-based development and long-lived branches is a choice between consistency and availability. Trunk-based development prioritizes consistency over availability. Long-lived branches prioritize availability over consistency.&lt;/p&gt;&lt;p&gt;To see why, imagine merging a feature branch over a year old back into the &lt;code&gt;master&lt;/code&gt; branch. You’ll likely run into a large number of merge conflicts because up until now you sacrificed consistency by basing your work on an old version of the &lt;code&gt;master&lt;/code&gt; branch. However, perhaps you would have slowed down your iteration speed (i.e. sacrificing availability of your local work product) if you had to ensure that each of your commits built against the latest &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;You might notice that trunk-based development vs. long-lived branches closely parallels monorepo vs. polyrepo. Indeed, organizations that prefer monorepos also tend to prefer trunk-based development because they both reflect the same preference for developers sharing a unified view of the codebase. Vice versa, organizations that prefer polyrepo also tend to prefer long-lived branches because both choices emerge from the same preference to prioritize availability of developers’ work product. These are not perfect correlations, though.&lt;/p&gt;&lt;h2 id=&quot;continuous-integration-vs.-test-team&quot;&gt;Continuous integration vs. Test team&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;Continuous Integration (CI) is a development practice that requires developers to integrate code into a shared repository several times a day. Each check-in is then verified by an automated build, allowing teams to detect problems early.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Source: &lt;a href=&quot;https://www.thoughtworks.com/continuous-integration&quot;&gt;thoughtworks.com - Continous Integration&lt;/a&gt;&lt;/p&gt;&lt;p&gt;So far we’ve been assuming the use of continuous integration to ensure that master stays “green”, but not all organization operate that way. Some don’t use continuous integration and rely on a test team to identify integration issues.&lt;/p&gt;&lt;p&gt;You can probably guess where this is going:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Continuous integration prioritizes consistency over availability&lt;/li&gt;&lt;li&gt;Use of a test team prioritizes availability over consistency&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The more you rely on continuous integration, the more you need to catch (and fix) errors up front since the error-detection process is automated. The more you rely on a test team the more developers tend to defer detection of errors and bugs, leaving the system in a potentially buggy state for features not covered by automated states.&lt;/p&gt;&lt;p&gt;Organizations that use a test team prioritize availability of developers’ work product, but at the expense of possibly deferring consistency between components system-wide. Vice-versa, organizations that rely on continuous integration prioritize consistency of the fully integrated system, albeit sometimes at the expense of the progress of certain components.&lt;/p&gt;&lt;h2 id=&quot;spectrums&quot;&gt;Spectrums&lt;/h2&gt;&lt;p&gt;Remember that each one of these choices is really a spectrum. For example:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Many monorepos are partially polyrepos, too, if you count their third-party dependencies. The only true monorepo is one with no external dependencies&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The distinction between trunk-based development and long-lived branches is a matter of degree. There isn’t a bright line that separates a short-lived branch from a long-lived one.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Many organizations use a mix of continuous integration (to catch low-level issues) and a test team (to catch high-level issues). Also, every organization has an implicit test team: their customers, who will report bugs that even the best automation will miss.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;&lt;p&gt;This post is not an exhaustive list of software engineering tradeoffs that mirror the CAP theorem. I’ll wager that as you read this several other examples came to mind. Once you recognize the pattern you will begin to see this tension between consistency and availability everywhere (even outside of software engineering).&lt;/p&gt;&lt;p&gt;Hopefully this post can help provide a consistent language for talking about these choices so that people can frame these discussions in terms of their organization’s core preference for consistency vs availability. For example, maybe in the course of reading this you noticed that your organization prefers availability in some cases but consistency in others. Maybe that’s a mistake you need to correct or maybe it’s an inevitability since we can never truly have 100% availability or 100% consistency.&lt;/p&gt;&lt;p&gt;You might be interested in what happens if you take availability or consistency to their logical conclusion. For example, &lt;a href=&quot;https://twitter.com/KentBeck&quot;&gt;Kent Beck&lt;/a&gt; experiments with an extreme preference for consistency over availability in &lt;a href=&quot;https://medium.com/@kentbeck_7670/test-commit-revert-870bbd756864&quot;&gt;test &amp;amp;&amp;amp; commit || revert&lt;/a&gt;. Or to put it more humorously:&lt;/p&gt;&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;“Don’t say you practice Continuous Integration if your editor isn’t autosaving to production” &lt;/p&gt;— Epic beard dude (&lt;span class=&quot;citation&quot; data-cites=&quot;davigoli&quot;&gt;@davigoli&lt;/span&gt;) &lt;a href=&quot;https://twitter.com/davigoli/status/1086850635549425664?ref_src=twsrc%5Etfw&quot;&gt;January 20, 2019&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;p&gt;On the other hand, if you prioritize availability over consistency at all costs you get … the open source ecosystem.&lt;/p&gt;&lt;p&gt;This is not the first post exploring the relationship between the CAP theorem and software development. For example, &lt;a href=&quot;https://twitter.com/jessitron&quot;&gt;Jessica Kerr&lt;/a&gt; already explored this idea of treating teams as distributed systems in &lt;a href=&quot;https://blog.jessitron.com/2016/05/07/tradeoffs-in-coordination-among-teams/&quot;&gt;Tradeoffs in Coordination Among Teams&lt;/a&gt;.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</content><link rel="replies" type="application/atom+xml" href="https://www.haskellforall.com/feeds/1632132347762509344/comments/default" title="Post Comments"><link rel="replies" type="text/html" href="https://www.haskellforall.com/2019/06/the-cap-theorem-for-software-engineering.html#comment-form" title="2 Comments"><link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/1632132347762509344"><link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/1632132347762509344"><link rel="alternate" type="text/html" href="https://www.haskellforall.com/2019/06/the-cap-theorem-for-software-engineering.html" title="The CAP theorem for software engineering"><author><name>Gabriel Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-7456732020423274609</id><published>2019-05-14T06:48:00.000-07:00</published><updated>2019-05-14T06:48:42.356-07:00</updated><title type="text">Release early and often</title><content type="html">&lt;!DOCTYPE html&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;utf-8&quot; /&gt;  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;  &lt;title&gt;release-frequently&lt;/title&gt;  &lt;style&gt;      code{white-space: pre-wrap;}       span.smallcaps{font-variant: small-caps;}       span.underline{text-decoration: underline;}       div.column{display: inline-block; vertical-align: top; width: 50%;}   &lt;/style&gt;  &lt;!--[if lt IE 9]&gt;    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;  &lt;![endif]--&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;This post summarizes the virtues of cutting frequent releases for software projects. You might find this post useful if you are trying to convince others to release more frequently (such as your company or an open source project you contribute to).&lt;/p&gt;&lt;h4 id=&quot;easing-migration&quot;&gt;Easing migration&lt;/h4&gt;&lt;p&gt;Frequent releases provide a smoother migration path for end-users of your software.&lt;/p&gt;&lt;p&gt;For example, suppose that your software is currently version “1.0” and you have two breaking changes (“A” and “B”) that you plan to make. Now consider the following two release strategies&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Release strategy #0 - More frequent releases&lt;/p&gt;&lt;pre&gt;&lt;code&gt;* Version 1.0&lt;br /&gt;    * Initial release&lt;br /&gt;&lt;br /&gt;* Version 2.0&lt;br /&gt;    * BREAKING CHANGE: A&lt;br /&gt;&lt;br /&gt;* Version 3.0&lt;br /&gt;    * BREAKING CHANGE: B&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Release strategy #1 - Less frequent releases&lt;/p&gt;&lt;pre&gt;&lt;code&gt;* Version 1.0&lt;br /&gt;    * Initial release&lt;br /&gt;&lt;br /&gt;* Version 2.0&lt;br /&gt;    * BREAKING CHANGE: A&lt;br /&gt;    * BREAKING CHANGE: B&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The first release strategy is better from the end-user’s point of view because they have the option to upgrade in two smaller steps. In other words, they can upgrade from version 1.0 to version 2.0 and then upgrade from version 2.0 to version 3.0 at a later date.&lt;/p&gt;&lt;p&gt;Under both release strategies users can elect to skip straight to the latest release if they are willing to pay down the full upgrade cost up front, but releasing more frequently provides users the option to pay down the upgrade cost in smaller installments. To make an analogy: walking up a staircase is easier than scaling a sheer cliff of the same height.&lt;/p&gt;&lt;p&gt;In particular, you want to avoid the catastrophic scenario where a large number of users refuse to upgrade if one release bundles too many breaking changes. The textbook example of this is the Python 2 to 3 upgrade where a large fraction of the community refused to upgrade because too many breaking changes were bundled into a single release instead of spread out over several releases.&lt;/p&gt;&lt;h4 id=&quot;keeping-trains-running-on-time&quot;&gt;Keeping trains running on time&lt;/h4&gt;&lt;p&gt;You don’t need to delay a release to wait for a particular feature if you release frequently. Just postpone the change for the next release if it’s not ready. After all, if you release frequently then the next release is right around the corner.&lt;/p&gt;&lt;p&gt;Conversely, if you release infrequently, you will frequently run into the following vicious cycle:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Important feature X is close to completion but perhaps not quite ready to merge&lt;/p&gt;&lt;p&gt;Perhaps the feature has insufficient tests or there are unresolved concerns during code review&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;A new release is about to be cut&lt;/p&gt;&lt;p&gt;Should you wait to merge feature X? It might be a long time (3 months?) before the next release, even though X could be ready with just 1 more week of work.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;You choose to delay the release to wait for important feature X&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Now another important feature Y requests to also slip in before the release&lt;/p&gt;&lt;p&gt;… further delaying the release&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;3 months have passed and you still haven’t cut the release&lt;/p&gt;&lt;p&gt;New features keep (justifiably) slipping in out of fear that they will have to otherwise wait for the next release&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Eventually you do cut a release, but each iteration of this process decreases the release frequency and compounds the problem. The less frequently you release software the more incentive to slip in last-minute changes before the release cutoff, further delaying the release. Even worse, the longer you wait to cut each release the greater the pressure to compromise on quality to get the release out the door.&lt;/p&gt;&lt;p&gt;Sticking to a strict and frequent release schedule staves off this vicious cycle because then you can always safely postpone incomplete features to the next release.&lt;/p&gt;&lt;h4 id=&quot;avoiding-crunch-time&quot;&gt;Avoiding “crunch time”&lt;/h4&gt;&lt;p&gt;Infrequent “big bang” releases create pressure for developers to work excessive hours in the lead up to a release cutoff. This can happen even when developers are unpaid, such as on open source projects: the peer pressure of holding up the release for others can induce people to work unhealthy schedules they wouldn’t work otherwise.&lt;/p&gt;&lt;p&gt;I won’t claim that frequent release schedules will prevent paid developers from working late nights and weekends, but at least management can’t hide behind a looming release deadline to justify the overtime.&lt;/p&gt;&lt;h4 id=&quot;accelerating-the-feedback-loop&quot;&gt;Accelerating the feedback loop&lt;/h4&gt;&lt;p&gt;Releases are opportunities to correct course because you don’t know how users will react to a feature until you put the feature into their hands. If you implement a feature and the next release is 3 month away, that’s 3 months where you don’t know if the feature is what the user actually needs.&lt;/p&gt;&lt;p&gt;Even worse: suppose that the first implementation of the feature does not do what the user wants: now you have to wait another 3 months to get the next iteration of the feature into their hands. That slow feedback loop is a recipe for a poorly-designed product.&lt;/p&gt;&lt;h4 id=&quot;incentivizing-automation&quot;&gt;Incentivizing automation&lt;/h4&gt;&lt;p&gt;Fast release cycles force you to automate and accelerate release-related processes that you would otherwise do manually (i.e. continuous integration), including:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Testing&lt;/li&gt;&lt;li&gt;Publication of software artifacts&lt;/li&gt;&lt;li&gt;Collecting quality and health metrics&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;That automation in turn means that you spend more time in the long run developing features and less time delivering them to end users.&lt;/p&gt;&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;&lt;p&gt;Releasing more frequently isn’t free: as the previous section suggests, you need to invest in automation to be able to make frequent releases a reality.&lt;/p&gt;&lt;p&gt;However, I do hope that people reading this post will recognize when symptoms of infrequent releases creep up on them so that they can get ahead of them and make the case to others to invest in improving release frequency.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</content><link rel="replies" type="application/atom+xml" href="https://www.haskellforall.com/feeds/7456732020423274609/comments/default" title="Post Comments"><link rel="replies" type="text/html" href="https://www.haskellforall.com/2019/05/release-early-and-often.html#comment-form" title="1 Comments"><link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/7456732020423274609"><link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/7456732020423274609"><link rel="alternate" type="text/html" href="https://www.haskellforall.com/2019/05/release-early-and-often.html" title="Release early and often"><author><name>Gabriel Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-1539059792083178423</id><published>2019-02-21T19:52:00.000-08:00</published><updated>2020-02-02T06:04:10.821-08:00</updated><title type="text">Dhall Survey Results (2018-2019)</title><content type="html">&lt;!DOCTYPE html&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;utf-8&quot; /&gt;  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;  &lt;title&gt;2018-2019-dhall-survey&lt;/title&gt;  &lt;style type=&quot;text/css&quot;&gt;      code{white-space: pre-wrap;}       span.smallcaps{font-variant: small-caps;}       span.underline{text-decoration: underline;}       div.column{display: inline-block; vertical-align: top; width: 50%;}   &lt;/style&gt;  &lt;!--[if lt IE 9]&gt;    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;  &lt;![endif]--&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;The results from the latest Dhall survey are in, which you can view here:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://docs.google.com/forms/d/181DW46MkYtYeSMR2mZSA0r0_RJyhqKxNfXwvpeOI8wY/edit#responses&quot;&gt;Dhall 2018-2019 Survey - Responses&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;… and I would like to thank everybody who took the time to participate in the survey!&lt;/p&gt;&lt;h2 id=&quot;adoption&quot;&gt;Adoption&lt;/h2&gt;&lt;p&gt;This year 61 people completed the survey (compared to 19 last year), so we have a greater sample size to inform the future direction of the language.&lt;/p&gt;&lt;p&gt;Here is the breakdown of how often people used Dhall:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;07 (11.7%)&lt;/code&gt; - Never used it&lt;/li&gt;&lt;li&gt;&lt;code&gt;22 (36.7%)&lt;/code&gt; - Briefly tried it out&lt;/li&gt;&lt;li&gt;&lt;code&gt;11 (18.3%)&lt;/code&gt; - Use it for my personal projects&lt;/li&gt;&lt;li&gt;&lt;code&gt;19 (31.7%)&lt;/code&gt; - Use it at work&lt;/li&gt;&lt;li&gt;&lt;code&gt;01 (01.7%)&lt;/code&gt; - Trying to convince work people to use it&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I was pleasantly surprised by the fact that more people use Dhall at work than those who use Dhall solely for personal projects. That suggests to me that people who do enjoy using Dhall do not have difficulty getting permission from their manager or coworkers to also use Dhall at work. I could be wrong, though, because there might be sampling bias or insufficient data to get accurate numbers. Those numbers also don’t necessarily imply that people have convinced their coworkers to use Dhall and I plan to update the survey next year to ask about that, too.&lt;/p&gt;&lt;p&gt;Let me know if you think I’m wrong and you have difficulty getting permission to use Dhall at work. Providing a smooth adoption path has always been a high priority for me because I know from experience the difficulty of introducing new tools at work.&lt;/p&gt;&lt;h2 id=&quot;reasons-to-adopt&quot;&gt;Reasons to adopt&lt;/h2&gt;&lt;p&gt;Most people confirmed that they use Dhall for ops-related use cases:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Kubernetes only at the moment, but more to follow&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;To generate Kubernetes YAML configuration files&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Kubernetes, Terraform and application configs&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;I’m still evaluating it. Currently I’m generating Prometheus (YAML) configuration from it.&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;As of now I am trying it to use it for generating concourse pipelines. I work at a very ops heavy company, I can see couple of our proprietary tools could also leverage dhall.&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Kubernetes, custom config for Haskell projects&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;configuring GoCD yaml pipelines, https://github.com/tomzo/gocd-yaml-config-plugin&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Generating config for Terraform, Packer and for our application configuration.&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;I’m trialing it for configuring various tools configured with yaml or json like docker-compose and some internal haskell tools.&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Description language for a Terraform replacement tool.&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;… generate yaml files then read by ansible&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;We use it to validate we have all the required (and no excess) variables set for our deploy scripts via type checking. If we add a variable to one environment, but miss others, the builds abort before being shipped to the world. …&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Configuration files for Elm, Packer …&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Replace Nix code with something saner and generate configuration for Kubernetes.&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Kubernetes, Kops, Concourse, Terraform, application config&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;The other specific use cases I noticed were:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;configuring build tools&lt;/li&gt;&lt;li&gt;command-line interface&lt;/li&gt;&lt;li&gt;backend service configuration&lt;/li&gt;&lt;li&gt;wire format for transmitting code&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This feedback is consistent with my understanding of how Dhall is used in the wild.&lt;/p&gt;&lt;p&gt;Each year I try port a difficult configuration file format to Dhall to stress test the language design. Last year I ported the &lt;a href=&quot;https://github.com/dhall-lang/dhall-nethack&quot;&gt;&lt;code&gt;nethack&lt;/code&gt; configuration format&lt;/a&gt; to Dhall and this year I plan to port an ops-related configuration format with a weakly-typed schema to inform the language design process.&lt;/p&gt;&lt;h2 id=&quot;document-best-practices&quot;&gt;Document best practices&lt;/h2&gt;&lt;p&gt;Survey respondents very commonly requested use cases, cook books, design patterns, real-world examples, and project structure guidelines. This was far-and-away the most consistent feedback from the survey:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;More real world examples, like CLI application config files. Or web server-client communication examples.&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;More blog posts/tutorials on use cases&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Resources on the next steps beyond learning syntax: how to structure Dhall code, how to organise your files, design patterns, etc.&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Guides/pointers to regular things like newtypes, String equality, Homogeneous record/map constraints?&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;A set of documented best practices for doing common things&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;What would make me really happy is to see some guidelines, patterns or examples for how to support evolving schemas for clients you don’t control. …&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Full list of possible uses with detailed examples and comparisons with similar tools.&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Add several complete realistic examples (besides the existing snippets).&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Learning curve through examples, starter apps, tutorials&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;… docs, examples&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;… basic usage patterns (newtypes, sums, comparisons)&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;A use-case.&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;I think Dhall should develop on making its way into common use cases boosting its clout in the industry.&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;End-user ergonomics and patterns. Pain points will come up rapidly if you start writing libraries to configure various popular tools. Those pain points should guide possible changes to the language, and the patterns developed need to be put front and center in a cookbook or something because there are many ways to tackle problems in Dhall and the best ways aren’t always obvious.&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Widely used, typical use cases. Most people configure something “simple”, show me how Dhall can improve my workflow (validation against a “schema”, deduplication, sharing of common config between applications). The initial impression from the Dhall Github and website is that its very powerful but most configuration is dead simple, just very verbose…&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Documentation.&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Docs, …&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;examples how to approach a domain generically…&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Last time I checked, the Dhall doc was very focused on the language itself, and the configuration part was kind of forgotten. Also, having the example with unicode syntax, while cool, make them hard/impossible to type along. I think having a few more docs about basic usecase to translate an existing json/yaml config into dhall would help adoption.&lt;/p&gt;&lt;p&gt;Nothing fancy with language feature, simply having a statically typed configuration, and optionally a type safe way to read it and map it to host language structure would be a very good start already.&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Documentation should provide more pointers to idiomatic code. We based most of our current development off the dhall-kubernetes model which leads to dozens of boilerplate type imports at the beginning of files just to see how dhall-terraform makes all of their types available in a single expression ( https://github.com/blast-hardcheese/dhall-terraform/blob/master/Terraform/Providers/Datadog/Types.dhall ). Writing a cookbook would help with this.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;This is also consistent with the highest rated funding mechanism: “Books and/or merchandise” (See below). I suspect that most people who selected that option were interested in the book.&lt;/p&gt;&lt;p&gt;This feedback surprised me because I was still overly focused on improving the documentation for lower-level language features. So thank you to everybody who pointed this out because this was a huge blind spot of mine.&lt;/p&gt;&lt;p&gt;So my plan is to initially focus on documenting the current state-of-the-art best practices as one of my highest priorities and keeping that document up to date as the language evolves. This sort of technical writing is also the kind of thing I enjoy doing anyway! :)&lt;/p&gt;&lt;h2 id=&quot;language-bindings-andor-integrations&quot;&gt;Language bindings and/or integrations&lt;/h2&gt;&lt;p&gt;People also very commonly requested more language bindings and integrations with existing tools:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;python library. having haskell is great, but we have a lot of python and C# as well and it would be great to use it from there too&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Bindings for languages I have to work with (Java/Python).&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Integration with NixOS&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Tighter integration with Nix&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;… would like to use it for nix&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Compilation to Java, Haskell, etc.&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Scala integration, complete Kubernetes API in dhall-kubernetes&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;More DSLs a-la dhall-kubernetes. IMHO the assurance to have a well-formed (in the sense of API conformance) config, is a huge plus.&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;A complete Scala implementation, as we use almost only Scala at work&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;A JSON-&amp;gt;dhall process would be a big help to import complex data sources. There is a dhall-terraform effort underway, but we have decently large number of terraform (HCL) files, and being able to convert HCL-&amp;gt;json-&amp;gt;dhall would mean I’m completely free of some really annoying restrictions HCL imposes on me.&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Import from Jason/yaml&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Python interpreter and syntax highlight in github&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;… more language/tool integration&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Language Bindings …&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;More language bindings (e.g. Go and Python are two big Ops markets)&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;I think golang bindings would potentially help with lots of the things I care about in my day job: terraform, prometheus, kubernetes, cloud foundry…&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;other language integration&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Bindings/libraries for other languages.&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Language bindings, …&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Getting more software to adopt dhall is a novel goal. But I see the modern ops world is full of golang software which would require golang bindings for dhall. It’s probably not a good language to write the bindings (or anything really), but it’s popularity might mean that for dhall’s success golang bindings are necessary.&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Having more good language implementation, into industrial programming languages, and get rid of Yaml.&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Bindings to increase adoption.&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;More languages…Ocaml maybe?&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Cleanbindings https://wiki.clean.cs.ru.nl/&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;More integrations.&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Using dhall from more languages would help adoption IMO. A statically-compiled lib with bindings in JS, python, java/scala would be good (and less work than implementing the language itself in all those languages). More projects like dhall-kubernetes are also a good way to drive adoption.&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Being able to more quickly add it to existing code bases would be helpful. Going from JSON-&amp;gt;dhall and then dhall being able to spit out nix/json, without needing a linter for the down stream languages makes life easier. …&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;I do plan to address the request to import Dhall values from JSON this year and this issue tracks the discussion and work on that:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/dhall-lang/dhall-lang/issues/121&quot;&gt;Discussion: Support from importing from JSON&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;On the other hand, I do not yet plan to personally contribute a new language binding, mainly because I want to distribute control of the language evolution process. Each reimplementation of the language gets a vote on proposed language changes and if I contribute more than one language binding then I get a disproportionate voice. Instead, I focus on making it as easy as possible for others to port the language by improving the documentation and automation surrounding the language standard.&lt;/p&gt;&lt;p&gt;I have no intention of becoming a benevolent dictator-for-life over the language. For example, the other voting member (Fabrizio Ferrai, who maintains the Clojure bindings to Dhall) plans to author their own interpretation of the survey feedback to parallel this post. Also, hopefully there will be two new voting members this year since the Python and PureScript language bindings are getting close to completion.&lt;/p&gt;&lt;p&gt;However, I can still help recruit donations for both new and existing language bindings. If you work on any language binding to Dhall and you would like to be paid for your work then set up a Patreon account or similar donation mechanism and I will help advertise that. This is an area where I recommend using distributed, non-corporate sources of funding to ensure that the language evolution process remains as democratic as possible.&lt;/p&gt;&lt;h2 id=&quot;performance&quot;&gt;Performance&lt;/h2&gt;&lt;p&gt;Performance was another common theme:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Faster performance; …&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Speed. I’d really like to mix it into things more freely as a templating language, but it’s too noticeable a slow down.&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;If dhall-kubernetes finally becomes fast, our whole infrastructure config set (at Wire) can move there&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Performance and UX. Performance currently is very bad for large dhall projects (like dhall-kubernetes)&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Performance for larger scale usage (such as nix)&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Speed.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;I agree with this feedback and improving performance is generally a never-ending process because every time I improve the interpreter performance people begin using the language for even more ambitious projects that strain the interpreter (myself included).&lt;/p&gt;&lt;p&gt;Because performance is an open-ended problem this is one of the areas I’m most likely to solicit donations to fund somebody to improve interpreter performance. That would also free me up to do more technical writing for the Dhall ecosystem.&lt;/p&gt;&lt;p&gt;If you are able and willing to improve the performance of the interpreter then let me know and I’ll work with you to secure some donation mechanism to fund your work. I am reasonably confident there are a few companies using Dhall that would fund improvements to interpreter performance. Similarly, if you are a company that can spare some budget to fund performance improvements, also reach out to me :)&lt;/p&gt;&lt;h2 id=&quot;default-record-values&quot;&gt;Default record values&lt;/h2&gt;&lt;p&gt;Another common theme was that people are struggling to port Dhall to some configuration formats that have optionally present keys:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Optionally present keys in a dictionary&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;… Defaults for records&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Having optionals that don’t need to be maked with None when not present&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;I’d love Dhall to become a type-safe version of Nix (the language) or a handy language for configuration files, but there are no optionally present keys in dictionaries now, so I cannot use Dhall for config files yet. Currently I’ll just stick with YAML&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Dhall actually does have a design pattern for this sort of idiom, which is to override a default record with the present values, like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;defaultRecord // { foo = 1 }&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;… so this might just be another case for needing better documentation for best practices. However, if you are not satisfied with that idiom then I invite you to open an issue on the issue tracker with your thoughts on the subject:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/dhall-lang/dhall-lang/issues&quot; class=&quot;uri&quot;&gt;https://github.com/dhall-lang/dhall-lang/issues&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;language-stability-migration&quot;&gt;Language stability / migration&lt;/h2&gt;&lt;p&gt;People are beginning to request greater language stability as they begin to adopt Dhall at work:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Greater stability in the core language and prelude. There have been a bunch of changes last year, that while I agree with their purpose, I cranked down on adding more usage of Dhall until the ecosystem is more stable to avoid version brittleness&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Smoother transitions between standard versions. Maybe if the last two versions of standard were supported we could provide deprecation warnings, and have something like &lt;code&gt;rehash&lt;/code&gt; subcommand. This would allow us to update hash of existing imports only if existing (old) hash is valid.&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;ol type=&quot;1&quot;&gt;&lt;li&gt;Stabilizing the language standard; 2. Stabilizing the prelude API.&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;… stability of upstream packages&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;There is one feature in the pipeline which should improve things here, which is support for stable hashes (i.e. semantic integrity checks):&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/dhall-lang/dhall-lang/pull/362&quot;&gt;Don’t tag encoded expressions with their version&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This pain point was one of the most commonly cited issues with upgrading to the next language version and this will be available in the next release of the language standard and the Haskell interpreter (along with backwards-compatible support for older semantic integrity checks).&lt;/p&gt;&lt;p&gt;Besides that, I don’t expect new language features to be too disruptive at this point. At this point I expect most new features to the language to be additive to the language and the most disruption that users might run into is some identifier becoming a reserved keyword.&lt;/p&gt;&lt;p&gt;Also, the Haskell implementation takes pains to make the migration process smoother by providing &lt;code&gt;dhall lint&lt;/code&gt; support for migrating old code to new idioms. For example, &lt;code&gt;dhall lint&lt;/code&gt; will automatically rewrite the old syntax for &lt;code&gt;Optional&lt;/code&gt; literals to use the newer syntax.&lt;/p&gt;&lt;p&gt;One of the features of the Dhall language’s standardization process is that every new language binding adds a new vote on proposed changes, which raises the bar for changing the language. So as the language grows more mainstream I expect the language standard to stabilize due to this effect.&lt;/p&gt;&lt;h2 id=&quot;no-unicode-in-examples&quot;&gt;No Unicode in examples&lt;/h2&gt;&lt;p&gt;Three respondents disliked the use of Unicode in tutorials and examples. This was an unusually specific point of feedback that recurred a few times throughout the responses:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Get rid of unicode. It is cool but it really scares off beginners to see examples with unicode.&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Better documentation, without unicode symbols.&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;removing unicode syntax&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;I don’t have any objection to switching examples to use ASCII instead of Unicode, so I will do that. I think Unicode is prettier, but if it gets in the way of the learning process then I’ll switch to ASCII.&lt;/p&gt;&lt;p&gt;For people who hate Unicode syntax, period, the &lt;code&gt;dhall&lt;/code&gt; command-line tool also supports an &lt;code&gt;--ascii&lt;/code&gt; flag for emitting ASCII when formatting or linting code.&lt;/p&gt;&lt;h2 id=&quot;developer-experience&quot;&gt;Developer experience&lt;/h2&gt;&lt;p&gt;Most of the developer experience feedback revolved around editor support, although there were a few other recommendations:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Better error messages (I mean, I can tell a lot of work has gone into them, which i really appreciate, but I am still often baffled by them)&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;A community mailing list where I could ask dumb questions when I get stuck. There’s a stackoverflow tag but it seems quite low-traffic so I was put off by that.&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;… editor support&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;… editor integrations, …&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Release on OSX/Windows …&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Type / syntax errors that are easier to visually parse.&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Ergonomics - language server, support for auto-complete in editors, seeing type errors in the editor without needing to run the dhall executable separately&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;I love Gabriel’s idea on LSP support to provide support for all editors in his state of Dhall address blog post. Making the development experience (including stability of the language) will be key to letting the configs loose outside of the services team which is a little more adept at employing functional and typed methods and tools than our Ruby applications developers on the adjacent team we support.&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;I’d love to be able to specify a dhall file as an argument to dhall/dhall-to-* rather than feeding to STDIN. Pipes and redirection can get clumsy when incorporating into scripts.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;As I mentioned in my previous post, one goal we have for this year is to add a Dhall implementation of the language server protocol:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/dhall-lang/dhall-lang/issues/312&quot;&gt;Create Dhall language server&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;… and as I’m writing up this post a contributor has already done some initial groundwork on this (see the above issue).&lt;/p&gt;&lt;h2 id=&quot;other-language-features&quot;&gt;Other language features&lt;/h2&gt;&lt;p&gt;The most commonly requested language feature was (bidirectional) type inference:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Type inference&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Also, having to literally specify type parameters to everything forces you to name and define all sorts of intermediate types, which makes things very messy. I don’t know enough about Dhall to know if this is possible/desirable to avoid&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Lack of gradual typing for type arguments is the biggest deal breaker - it breaks the whole “gradual typing” story&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Easing migrating existing large structures to Dhall by ensuring gradual typing is viable&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;I don’t expect Dhall to get bidirectional type inference at this point. The two main reasons are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;This is harder to standardize and port to multiple languages&lt;/li&gt;&lt;li&gt;This would be very disruptive at a point where we are trying to stabilize the language&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;So in my opinion that ship has sailed, although I no longer have veto power over proposed changes so there is still always the possibility that somebody puts forth a compelling proposal for type inference that proves me wrong.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Building maps in yaml/json with a dynamic set of keys is a challenge. The other side of the fence is less strongly typed and so they define fields that may or may not be present, or are keyed on userland values. This sucks but if dhall is going to target tools that use yaml/json, there needs to be a way with good ergonomics to build those values. …&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;I do plan on adding better support for working with weakly-typed dictionaries. As I mentioned earlier, I plan to port one of the more difficult ops-related configuration formats to Dhall to guide the language design and this will inform how I propose to support these weakly-typed dictionaries.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Turing completeness&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;I don’t plan on making the language Turing-complete. The absence of Turing completeness is Dhall’s &lt;em&gt;sine qua non&lt;/em&gt;.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;The ability to to simple math on anything other than Nats. Being able to add or multiply two Doubles would vastly increase Dhall’s usefulness to me.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;I’d recommend opening an issue for this if you are interested in &lt;code&gt;Double&lt;/code&gt; arithmetic. There is a bit to discuss here that won’t fit in this post:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/dhall-lang/dhall-lang/issues&quot; class=&quot;uri&quot;&gt;https://github.com/dhall-lang/dhall-lang/issues&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;ol type=&quot;1&quot;&gt;&lt;li&gt;Simpler syntax for input data to write configuration files. 2. Recursion.&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;&lt;p&gt;I’m not sure if (1) would be solved by the planned support for importing from JSON (as JSON syntax is still a bit clumsy for people to author in my opinion), but at the moment there aren’t any other plans along those lines.&lt;/p&gt;&lt;p&gt;I also don’t think Dhall will get native language support for recursion (or at least not anytime soon). Recursion will likely remain a design pattern, as described in this document:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/dhall-lang/dhall-lang/wiki/How-to-translate-recursive-code-to-Dhall&quot;&gt;How to translate recursive code to Dhall&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;… rather than a language feature.&lt;/p&gt;&lt;h2 id=&quot;preserving-comments&quot;&gt;Preserving comments&lt;/h2&gt;&lt;p&gt;Two people specifically requested support for fixing a very specific bug, which is that the Haskell implementation swallows all comments except the leading comment when formatting code:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Preserving comments in the output of &lt;code&gt;dhall lint&lt;/code&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;https://github.com/dhall-lang/dhall-haskell/issues/145&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;I hope to get to this soon, because I understand what a pain this is (it bites me, too).&lt;/p&gt;&lt;h2 id=&quot;packaging&quot;&gt;Packaging&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;Better “package” story. …&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Packaging/versioning. Importing from URL makes builds prone to flakiness, local caching helps but is insufficient. Currently using Make to clone repositories at given tags and import locally, which can be a hassle since Make won’t fetch transitive dependencies for the types/expressions that are cloned. Expressions which import types off local disk refer to relative locations, which are prone to breakage if those locations change i.e. due to refactoring. Some kind of standard which allows for a Cargo-style definition of imported types, locked to a version, with a separate lifecycle for resolving imports would improve stability.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;I’m a bit resistant to this feedback (although I might have misunderstood it). I think the traditional packaging model adds a lot of unnecessary complexity to distributing code. I view Dhall as the “Bash of functional programming”, where the way you author code is you just save a file and the way you consume code is you refer directly to the file you want (except that Dhall fixes some mistakes Bash made in this regard).&lt;/p&gt;&lt;p&gt;The other reason I question the traditional packaging model is that I don’t see the value that it adds above hosting Dhall code on GitHub or GitLab, especially given that Dhall can import from URLs and resolve relative references correctly.&lt;/p&gt;&lt;p&gt;However, I do think there is value in making Dhall packages easier to discover, browse, and document (i.e. like Hackage for the Haskell ecosystem).&lt;/p&gt;&lt;h2 id=&quot;possibly-old-interpreters&quot;&gt;Possibly old interpreters&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;… less verbose support for using union types more easily&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Making it simpler to declare Sum types&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;I believe these respondents may be using an older version of the interpreter because this should be addressed in the latest release of the language and Haskell interpreter. See this page for more details:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/dhall-lang/dhall-lang/wiki/Migration%3A-Deprecation-of-constructors-keyword&quot;&gt;Migration: Deprecation of constructors keyword&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;However, reading this makes me realize that next year I should add a question asking respondents what implementation and what version they use. That would also help me gauge how long to support deprecated features (such as the &lt;code&gt;constructors&lt;/code&gt; keyword).&lt;/p&gt;&lt;h2 id=&quot;funding&quot;&gt;Funding&lt;/h2&gt;&lt;p&gt;“Books and/or merchandise” was the clear leader for funding mechanism, although I suspect that’s primarily because people want a book (paid or not) based on the overwhelming feedback in favor of documentation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Books and/or merchandise - 24 (52.2%)&lt;/li&gt;&lt;li&gt;Crowdfunding (recurring) - i.e. Patreon - 18 (39.1%)&lt;/li&gt;&lt;li&gt;Donation button - 14 (30.4%)&lt;/li&gt;&lt;li&gt;Project bounties - 14 (30.4%)&lt;/li&gt;&lt;li&gt;Crowdfunding (one-time) i.e. Kickstarter - 9 (19.6%)&lt;/li&gt;&lt;li&gt;Opening PRS myself :) - 1 (2.2%)&lt;/li&gt;&lt;li&gt;Consulting - 1 (2.2%)&lt;/li&gt;&lt;li&gt;Open source sponsorship - 1 (2.2%)&lt;/li&gt;&lt;li&gt;Company donation for time/moral license - 1 (2.2%)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Note that I also plan to apply for grants for open source work. I didn’t list that as a funding option because my mind was already made up on that.&lt;/p&gt;&lt;p&gt;The funding mechanism that surprised me the most was “Donation button”. I thought that was something that people didn’t really do any more (i.e. not “hip”), but it was tied for third-most popular funding mechanism.&lt;/p&gt;&lt;p&gt;I didn’t list consulting as one of the funding mechanisms (which one respondent had to write in), because I’ve heard from a few sources that consulting can create perverse incentives because simplifying things means fewer billable hours. However, on more reflection I think it might be worth getting corporate sponsorship for performance improvements to the language (as previously mentioned), because that’s less likely to create the wrong incentives or lead to undue corporate influence over the language evolution.&lt;/p&gt;&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;&lt;p&gt;This post doesn’t include the comments of praise in the interest of modesty, but I did read them all and really appreciated them! 🙂&lt;/p&gt;&lt;p&gt;Hopefully this gives people an idea of where my current priorities are at and also helps others understand how they might be able to contribute to the Dhall ecosystem, too!&lt;/p&gt;&lt;p&gt;Also, if this post is the first you are hearing about the survey, you can still &lt;a href=&quot;https://goo.gl/forms/GPxXEfHYLq1TNnox2&quot;&gt;complete the survey&lt;/a&gt; and I’ll read your response even if it won’t be summarized in this post. I still get an e-mail notification for each new submission.&lt;/p&gt;&lt;p&gt;You can also use the Dhall language’s &lt;a href=&quot;https://github.com/dhall-lang/dhall-lang/issues&quot;&gt;issue tracker&lt;/a&gt; to provide feedback of any kind, too. For more details on how to discuss, propose, or contribute changes, see the following guide:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/dhall-lang/dhall-lang/blob/master/.github/CONTRIBUTING.md&quot;&gt;Contributing to Dhall&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;</content><link rel="replies" type="application/atom+xml" href="https://www.haskellforall.com/feeds/1539059792083178423/comments/default" title="Post Comments"><link rel="replies" type="text/html" href="https://www.haskellforall.com/2019/02/dhall-survey-results-2019-2019.html#comment-form" title="0 Comments"><link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/1539059792083178423"><link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/1539059792083178423"><link rel="alternate" type="text/html" href="https://www.haskellforall.com/2019/02/dhall-survey-results-2019-2019.html" title="Dhall Survey Results (2018-2019)"><author><name>Gabriel Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-1549573487761750647</id><published>2019-02-11T18:13:00.001-08:00</published><updated>2019-02-11T18:28:44.946-08:00</updated><title type="text">Haskell command-line utility using GHC generics</title><content type="html">&lt;!DOCTYPE html&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;utf-8&quot; /&gt;  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;  &lt;title&gt;cli-twitter&lt;/title&gt;  &lt;style type=&quot;text/css&quot;&gt;      code{white-space: pre-wrap;}       span.smallcaps{font-variant: small-caps;}       span.underline{text-decoration: underline;}       div.column{display: inline-block; vertical-align: top; width: 50%;}   &lt;/style&gt;  &lt;style type=&quot;text/css&quot;&gt;a.sourceLine { display: inline-block; line-height: 1.25; } a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; } a.sourceLine:empty { height: 1.2em; } .sourceCode { overflow: visible; } code.sourceCode { white-space: pre; position: relative; } div.sourceCode { margin: 1em 0; } pre.sourceCode { margin: 0; } @media screen { div.sourceCode { overflow: auto; } } @media print { code.sourceCode { white-space: pre-wrap; } a.sourceLine { text-indent: -1em; padding-left: 1em; } } pre.numberSource a.sourceLine   { position: relative; left: -4em; } pre.numberSource a.sourceLine::before   { content: attr(data-line-number);     position: relative; left: -1em; text-align: right; vertical-align: baseline;     border: none; pointer-events: all; display: inline-block;     -webkit-touch-callout: none; -webkit-user-select: none;     -khtml-user-select: none; -moz-user-select: none;     -ms-user-select: none; user-select: none;     padding: 0 4px; width: 4em;     color: #aaaaaa;   } pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; } div.sourceCode   {  } @media screen { a.sourceLine::before { text-decoration: underline; } } code span.al { color: #ff0000; font-weight: bold; } /* Alert */ code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */ code span.at { color: #7d9029; } /* Attribute */ code span.bn { color: #40a070; } /* BaseN */ code span.bu { } /* BuiltIn */ code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */ code span.ch { color: #4070a0; } /* Char */ code span.cn { color: #880000; } /* Constant */ code span.co { color: #60a0b0; font-style: italic; } /* Comment */ code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */ code span.do { color: #ba2121; font-style: italic; } /* Documentation */ code span.dt { color: #902000; } /* DataType */ code span.dv { color: #40a070; } /* DecVal */ code span.er { color: #ff0000; font-weight: bold; } /* Error */ code span.ex { } /* Extension */ code span.fl { color: #40a070; } /* Float */ code span.fu { color: #06287e; } /* Function */ code span.im { } /* Import */ code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */ code span.kw { color: #007020; font-weight: bold; } /* Keyword */ code span.op { color: #666666; } /* Operator */ code span.ot { color: #007020; } /* Other */ code span.pp { color: #bc7a00; } /* Preprocessor */ code span.sc { color: #4070a0; } /* SpecialChar */ code span.ss { color: #bb6688; } /* SpecialString */ code span.st { color: #4070a0; } /* String */ code span.va { color: #19177c; } /* Variable */ code span.vs { color: #4070a0; } /* VerbatimString */ code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */   &lt;/style&gt;  &lt;!--[if lt IE 9]&gt;    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;  &lt;![endif]--&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;Today, &lt;a href=&quot;https://twitter.com/jusrin00&quot;&gt;Justin Woo&lt;/a&gt; wrote a post about writing a &lt;a href=&quot;https://qiita.com/kimagure/items/9b33a5fa48baf105abe4&quot;&gt;simple Haskell command-line utility with minimal dependencies&lt;/a&gt;. The utility is a small wrapper around the &lt;code&gt;nix-prefetch-git&lt;/code&gt; command.&lt;/p&gt;&lt;p&gt;In the post he called out people who recommend overly complex solutions on Twitter:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Nowadays if you read about Haskell on Twitter, you will quickly find that everyone is constantly screaming about some “advanced” techniques and trying to flex on each other&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;However, I hope to show that we can simplify his original solution by taking advantage of just one feature: Haskell’s support for generating code from data-type definitions. My aim is to convince you that this Haskell feature improves code clarity without increasing the difficulty. If anything, I consider this version less difficult both to read and write.&lt;/p&gt;&lt;p&gt;Without much ado, here is my solution to the same problem (official Twitter edition):&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-1&quot; data-line-number=&quot;1&quot;&gt;&lt;span class=&quot;ot&quot;&gt;{-# LANGUAGE DeriveAnyClass        #-}&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-2&quot; data-line-number=&quot;2&quot;&gt;&lt;span class=&quot;ot&quot;&gt;{-# LANGUAGE DeriveGeneric         #-}&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-3&quot; data-line-number=&quot;3&quot;&gt;&lt;span class=&quot;ot&quot;&gt;{-# LANGUAGE DuplicateRecordFields #-}&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-4&quot; data-line-number=&quot;4&quot;&gt;&lt;span class=&quot;ot&quot;&gt;{-# LANGUAGE OverloadedStrings     #-}&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-5&quot; data-line-number=&quot;5&quot;&gt;&lt;span class=&quot;ot&quot;&gt;{-# LANGUAGE RecordWildCards       #-}&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-6&quot; data-line-number=&quot;6&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-7&quot; data-line-number=&quot;7&quot;&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Data.Aeson&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;FromJSON&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;ToJSON&lt;/span&gt;)&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-8&quot; data-line-number=&quot;8&quot;&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Data.Text&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;)&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-9&quot; data-line-number=&quot;9&quot;&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Options.Generic&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Generic&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;ParseRecord&lt;/span&gt;)&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-10&quot; data-line-number=&quot;10&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-11&quot; data-line-number=&quot;11&quot;&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;qualified&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Data.Aeson&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-12&quot; data-line-number=&quot;12&quot;&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;qualified&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Data.ByteString.Lazy&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-13&quot; data-line-number=&quot;13&quot;&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;qualified&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Data.Text.Encoding&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-14&quot; data-line-number=&quot;14&quot;&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;qualified&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Data.Text.IO&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-15&quot; data-line-number=&quot;15&quot;&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;qualified&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Options.Generic&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-16&quot; data-line-number=&quot;16&quot;&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;qualified&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Turtle&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-17&quot; data-line-number=&quot;17&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-18&quot; data-line-number=&quot;18&quot;&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Options&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Options&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-19&quot; data-line-number=&quot;19&quot;&gt;    {&lt;span class=&quot;ot&quot;&gt; branch   ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-20&quot; data-line-number=&quot;20&quot;&gt;    ,&lt;span class=&quot;ot&quot;&gt; fetchgit ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-21&quot; data-line-number=&quot;21&quot;&gt;    ,&lt;span class=&quot;ot&quot;&gt; hashOnly ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-22&quot; data-line-number=&quot;22&quot;&gt;    ,&lt;span class=&quot;ot&quot;&gt; owner    ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-23&quot; data-line-number=&quot;23&quot;&gt;    ,&lt;span class=&quot;ot&quot;&gt; repo     ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-24&quot; data-line-number=&quot;24&quot;&gt;    ,&lt;span class=&quot;ot&quot;&gt; rev      ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-25&quot; data-line-number=&quot;25&quot;&gt;    } &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Generic&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;ParseRecord&lt;/span&gt;)&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-26&quot; data-line-number=&quot;26&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-27&quot; data-line-number=&quot;27&quot;&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;NixPrefetchGitOutput&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;NixPrefetchGitOutput&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-28&quot; data-line-number=&quot;28&quot;&gt;    {&lt;span class=&quot;ot&quot;&gt; url             ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-29&quot; data-line-number=&quot;29&quot;&gt;    ,&lt;span class=&quot;ot&quot;&gt; rev             ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-30&quot; data-line-number=&quot;30&quot;&gt;    ,&lt;span class=&quot;ot&quot;&gt; date            ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-31&quot; data-line-number=&quot;31&quot;&gt;    ,&lt;span class=&quot;ot&quot;&gt; sha256          ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-32&quot; data-line-number=&quot;32&quot;&gt;    ,&lt;span class=&quot;ot&quot;&gt; fetchSubmodules ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-33&quot; data-line-number=&quot;33&quot;&gt;    } &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Generic&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;FromJSON&lt;/span&gt;)&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-34&quot; data-line-number=&quot;34&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-35&quot; data-line-number=&quot;35&quot;&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;GitTemplate&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;GitTemplate&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-36&quot; data-line-number=&quot;36&quot;&gt;    {&lt;span class=&quot;ot&quot;&gt; url    ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-37&quot; data-line-number=&quot;37&quot;&gt;    ,&lt;span class=&quot;ot&quot;&gt; sha256 ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-38&quot; data-line-number=&quot;38&quot;&gt;    } &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Generic&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;ToJSON&lt;/span&gt;)&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-39&quot; data-line-number=&quot;39&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-40&quot; data-line-number=&quot;40&quot;&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;GitHubTemplate&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;GitHubTemplate&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-41&quot; data-line-number=&quot;41&quot;&gt;    {&lt;span class=&quot;ot&quot;&gt; owner  ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-42&quot; data-line-number=&quot;42&quot;&gt;    ,&lt;span class=&quot;ot&quot;&gt; repo   ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-43&quot; data-line-number=&quot;43&quot;&gt;    ,&lt;span class=&quot;ot&quot;&gt; rev    ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-44&quot; data-line-number=&quot;44&quot;&gt;    ,&lt;span class=&quot;ot&quot;&gt; sha256 ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-45&quot; data-line-number=&quot;45&quot;&gt;    } &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Generic&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;ToJSON&lt;/span&gt;)&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-46&quot; data-line-number=&quot;46&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-47&quot; data-line-number=&quot;47&quot;&gt;&lt;span class=&quot;ot&quot;&gt;main ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;IO&lt;/span&gt; ()&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-48&quot; data-line-number=&quot;48&quot;&gt;main &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-49&quot; data-line-number=&quot;49&quot;&gt;    &lt;span class=&quot;dt&quot;&gt;Options&lt;/span&gt; {&lt;span class=&quot;fu&quot;&gt;..&lt;/span&gt;} &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; Options.Generic.getRecord &lt;span class=&quot;st&quot;&gt;&amp;quot;Wrapper around nix-prefetch-git&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-50&quot; data-line-number=&quot;50&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-51&quot; data-line-number=&quot;51&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; revisionFlag &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; (rev, branch) &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-52&quot; data-line-number=&quot;52&quot;&gt;            (&lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; r , &lt;span class=&quot;dt&quot;&gt;True&lt;/span&gt; ) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;--rev origin/&amp;quot;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; r&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-53&quot; data-line-number=&quot;53&quot;&gt;            (&lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; r , &lt;span class=&quot;dt&quot;&gt;False&lt;/span&gt;) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;--rev &amp;quot;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; r&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-54&quot; data-line-number=&quot;54&quot;&gt;            (&lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;, _    ) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-55&quot; data-line-number=&quot;55&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-56&quot; data-line-number=&quot;56&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; url &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;https://github.com/&amp;quot;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; owner &lt;span class=&quot;fu&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; repo &lt;span class=&quot;fu&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;.git/&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-57&quot; data-line-number=&quot;57&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-58&quot; data-line-number=&quot;58&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; command &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-59&quot; data-line-number=&quot;59&quot;&gt;            &lt;span class=&quot;st&quot;&gt;&amp;quot;GIT_TERMINAL_PROMPT=0 nix-prefetch-git &amp;quot;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; url &lt;span class=&quot;fu&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot; --quiet &amp;quot;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; revisionFlag&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-60&quot; data-line-number=&quot;60&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-61&quot; data-line-number=&quot;61&quot;&gt;    text &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; Turtle.strict (Turtle.inshell command Turtle.empty)&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-62&quot; data-line-number=&quot;62&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-63&quot; data-line-number=&quot;63&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; bytes &lt;span class=&quot;fu&quot;&gt;=&lt;/span&gt; Data.Text.Encoding.encodeUtf8 text&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-64&quot; data-line-number=&quot;64&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-65&quot; data-line-number=&quot;65&quot;&gt;    &lt;span class=&quot;dt&quot;&gt;NixPrefetchGitOutput&lt;/span&gt; {&lt;span class=&quot;fu&quot;&gt;..&lt;/span&gt;} &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; Data.Aeson.eitherDecodeStrict bytes &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-66&quot; data-line-number=&quot;66&quot;&gt;        &lt;span class=&quot;dt&quot;&gt;Left&lt;/span&gt;  string &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; fail string&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-67&quot; data-line-number=&quot;67&quot;&gt;        &lt;span class=&quot;dt&quot;&gt;Right&lt;/span&gt; result &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; return result&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-68&quot; data-line-number=&quot;68&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-69&quot; data-line-number=&quot;69&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; hashOnly&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-70&quot; data-line-number=&quot;70&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt; Data.Text.IO.putStrLn sha256&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-71&quot; data-line-number=&quot;71&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; fetchgit&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-72&quot; data-line-number=&quot;72&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt; Data.ByteString.Lazy.putStr (Data.Aeson.encode (&lt;span class=&quot;dt&quot;&gt;GitTemplate&lt;/span&gt; {&lt;span class=&quot;fu&quot;&gt;..&lt;/span&gt;}))&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-73&quot; data-line-number=&quot;73&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; Data.ByteString.Lazy.putStr (Data.Aeson.encode (&lt;span class=&quot;dt&quot;&gt;GitHubTemplate&lt;/span&gt; {&lt;span class=&quot;fu&quot;&gt;..&lt;/span&gt;}))&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This solution takes advantage of two libraries:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;optparse-generic&lt;/code&gt;&lt;/p&gt;&lt;p&gt;This is a library I authored which auto-generates a command-line interface (i.e. argument parser) from a Haskell datatype definition.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;aeson&lt;/code&gt;&lt;/p&gt;&lt;p&gt;This is a library that generates JSON encoders/decoders from Haskell datatype definitions.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Both libraries take advantage of GHC’s support for generating code statically from datatype definitions. This support is known as “GHC generics”. While a bit tricky for a library author to support, it’s very easy for a library user to consume.&lt;/p&gt;&lt;p&gt;All a user has to do is enable two extensions:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb2-1&quot; data-line-number=&quot;1&quot;&gt;&lt;span class=&quot;ot&quot;&gt;{-# LANGUAGE DeriveAnyClass #-}&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb2-2&quot; data-line-number=&quot;2&quot;&gt;&lt;span class=&quot;ot&quot;&gt;{-# LANGUAGE DeriveGeneric  #-}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… and then they can auto-generate an instance for any typeclass that implements GHC generics support by adding a line like this to the end of their data type:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb3-1&quot; data-line-number=&quot;1&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Generic&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;SomeTypeClass&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can see that in the above example, replacing &lt;code&gt;SomeTypeClass&lt;/code&gt; with &lt;code&gt;FromJSON&lt;/code&gt;, &lt;code&gt;ToJSON&lt;/code&gt;, and &lt;code&gt;ParseRecord&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;And that’s it. There’s really not much more to it than that. The result is significantly shorter than the original example (which still omitted quite a bit of code) and (in my opinion) easier to follow because actual program logic isn’t diluted by superficial encoding/decoding concerns.&lt;/p&gt;&lt;p&gt;I will note that the original solution only requires using libraries that are provided as part of a default GHC installation. However, given that the example is a wrapper around &lt;code&gt;nix-prefetch-git&lt;/code&gt; then that implies that the user already has Nix installed, so they can obtain the necessary libraries by running this command:&lt;/p&gt;&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb4-1&quot; data-line-number=&quot;1&quot;&gt;$ &lt;span class=&quot;ex&quot;&gt;nix-shell&lt;/span&gt; --packages \&lt;/a&gt;&lt;br /&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb4-2&quot; data-line-number=&quot;2&quot;&gt;  &lt;span class=&quot;st&quot;&gt;&amp;#39;haskellPackages.ghcWithPackages (p: [ p.turtle p.optparse-generic p.aeson ])&amp;#39;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… which is one of the reasons I like to use Nix.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</content><link rel="replies" type="application/atom+xml" href="https://www.haskellforall.com/feeds/1549573487761750647/comments/default" title="Post Comments"><link rel="replies" type="text/html" href="https://www.haskellforall.com/2019/02/haskell-command-line-utility-using-ghc.html#comment-form" title="6 Comments"><link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/1549573487761750647"><link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/1777990983847811806/posts/default/1549573487761750647"><link rel="alternate" type="text/html" href="https://www.haskellforall.com/2019/02/haskell-command-line-utility-using-ghc.html" title="Haskell command-line utility using GHC generics"><author><name>Gabriel Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/></author><thr:total>6</thr:total></entry></feed>