{
  "title":"Maintaining Sanity With Ruby Under A Lockdown.",
  "date":"2022-11-01T08:30:30.000000Z",
  "author":"Yous",
  "id":"https://manny.codes/maintaining-sanity-with-ruby-under-a-lockdown",
  "link":"https://manny.codes/maintaining-sanity-with-ruby-under-a-lockdown/",
  "content":"<p><img src=\"/images/maintaining_sanity_with_ruby_under_a_lockdown.png\" alt=\"Maintaining Sanity with Ruby Under A Lockdown.\" title=\"Maintaining Sanity with Ruby Under A Lockdown.\"></p>\n\n<h2 id=\"the-virus\">The Virus</h2>\n\n<p>I had read a lot about plagues and pandemics years back wondering how and why these viruses spring up, wreak havoc and then just vanish into thin air! I realised these outbreaks were periodic, spanning several months if not years. Little did I know that my generation would be living through one.</p>\n\n<p>Another question I pondered was if these pandemics are cyclic, why haven’t we in the 21st century, with all the advancements in technology and medicine, learned anything about how to prevent these epidemics and pandemics, most of which are endemic? Perhaps we aren’t the most intelligent species in the universe after all.</p>\n\n<p>I’m deeply saddened and brokenhearted by how lives are being lost, and how society has been repressed to react to combat the virus with all the social distancing measures and lockdowns, a looming deep recession and all the detrimental side effects this virus has triggered. Besides people losing loved ones, jobs are being lost, making it even tougher for some of us to find new projects to work on.</p>\n\n<p>Back in 2015, Bill Gates gave a <a href=\"https://www.youtube.com/watch?v=6Af6b_wyiwI\">TED talk</a> that I’m sure nobody knew about until now. Had our politicians and leaders paid heed and played germ games instead of war games, prepared and braced for the worse with viral outbreaks adequately, and had some governments not suppressed public health information, this probably wouldn’t have happened… not at this scale.</p>\n\n<p>It’s not all bitter for some of us. In these hard times, we need something to distract us from the reality of what’s happening. For most, it’s our families, pets, games, watching all the Harry Potter series or anything you can hold on to indoors. For me, it’s Ruby.</p>\n\n<p>I’ll be leaving the virus issue to the virologists. We’re Rubyists, let’s talk about Ruby, shall we?</p>\n\n<p>The last fifteen days have passed very swiftly for me. Any day now, I hope to wake up and read a news headline: “Virus conquered, Everyone Go Out and Play!” (That’d be a horrible headline if I were a journalist). I’ve spent 99.8% of all this time indoors reading and learning, mostly about Ruby and astrophysics. To keep me from going insane, I decided to build something.</p>\n\n<h2 id=\"what-i-built\">What I Built</h2>\n\n<p>I built a <strong>command-line interface (CLI)</strong>. To me, this sort of stuff takes more time than if I were to build a web app. If anything can occupy my time, I’d beg for it at this time. Of course, I’d want to use my time meaningfully.</p>\n\n<p>It was supposed to be a straightforward CLI app, 500 lines of code maximum, and it was during this process that I learned first hand that the complexity of building software increases exponentially with time and added features. If you create two conditions and they have branches, and those branches happen to have more branches, you’re in a for a treat.</p>\n\n<p>Currently, the CLI that was meant to be a simple one has about 2500 lines of code, and it’s not even halfway through what I envisioned. That’s good because it means I get to learn even more about Ruby while:</p>\n\n<ul>\n  <li>Building something “useful”.</li>\n  <li>Not getting bored and going crazy.</li>\n  <li>Keeping my mind off the current situation.</li>\n</ul>\n\n<p>I named the CLI <a href=\"https://github.com/siaw23/kovid\">kovid</a>. So much for creativity. You should bear with me on this one if you know the hard problems of computer science.</p>\n\n<p><br></p>\n<center><blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">There are 2 hard problems in computer science: cache invalidation, naming things, and off-by-1 errors.</p>— Leon Bambrick (@secretGeek) <a href=\"https://twitter.com/secretGeek/status/7269997868?ref_src=twsrc%5Etfw\">January 1, 2010</a></blockquote> </center>\n<p><br></p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">kovid</code> just does one thing: it lets you filter and compare the data we have on the coronavirus. I intend to add another feature so it returns data as JSON that others can use in their apps, bringing the tally of things <code class=\"language-plaintext highlighter-rouge\">kovid</code> can do to two. For now, you can fetch and compare statistics on any given country or state, or get aggregated data on entire continents. It’s an easy way to access information: it saves you the clicks, scrolls and swipes of navigating a traditional web app.</p>\n\n<p>With <code class=\"language-plaintext highlighter-rouge\">kovid</code>, comparing data on countries is as easy as typing <code class=\"language-plaintext highlighter-rouge\">kovid compare poland ghana usa</code>.</p>\n\n<p><img src=\"/images/kovid_compare.png\" alt=\"kovid comparing coronavirus statistics\" title=\"kovid comparing coronavirus statistics.\"></p>\n\n<p>You can also query individual countries with a command like <code class=\"language-plaintext highlighter-rouge\">kovid check croatia</code>.</p>\n\n<p><img src=\"/images/kovid_check.png\" alt=\"kovid check coronavirus statistics\" title=\"kovid check coronavirus statistics.\"></p>\n\n<p>Because I spend a lot of time in the terminal, I think this is easier than having to leave the terminal, launching a browser and clicking around. The data comes from the <a href=\"https://gisanddata.maps.arcgis.com/apps/opsdashboard/index.html#/bda7594740fd40299423467b48e9ecf6\">Center for Systems Science and Engineering</a> at Johns Hopkins University and <a href=\"https://www.worldometers.info/coronavirus/\">worldometers.info</a>.</p>\n\n<h2 id=\"how-i-built-it\">How I Built It</h2>\n\n<p>When the thought of building a CLI sprang to mind, I started looking for free APIs that’d provide the data I needed. To my dismay, I discovered many people are making money off this crisis, potentially at the cost of human lives.  I started thinking of ways to build a free API myself. The first idea was to scrape Wikipedia, but I ruled that out when I noticed Wikipedia is rather slow at publishing data, so I got back to searching until I came across <a href=\"https://github.com/disease-sh/API\">disease.sh</a>. A group of awesome developers had already noticed the problem and built a scraper for data from <a href=\"https://www.worldometers.info/coronavirus/\">worldometers.info</a> and Johns Hopkins University.</p>\n\n<p>Let’s get building!</p>\n\n<p>I grabbed a few gems that I’m already used to, like <code class=\"language-plaintext highlighter-rouge\">terminal-table</code> and <code class=\"language-plaintext highlighter-rouge\">thor</code>, to start with. I wanted then to cache requests and started looking for caching solutions for a CLI. <a href=\"https://github.com/havenwood\">Shannon Skipper</a>, my Ruby Jedi,  from whom I’ve learned a lot over the years, then recommended <code class=\"language-plaintext highlighter-rouge\">typhoeus</code>. I looked it up and decided it’s a good pick, so I went for it.</p>\n\n<p>Primarily, <code class=\"language-plaintext highlighter-rouge\">kovid</code> is built by connecting these tools and navigating NovelCOVID/API to mould the data I need out of it. There isn’t much to it. The process of building the CLI, the little hurdles and the joy of working with Ruby and passing the time, is what mattered to me the most. I’m still building on top of <code class=\"language-plaintext highlighter-rouge\">kovid</code> and enjoying the ride with new knowledge and tricks. This process keeps me sane as much as it is rewarding and relaxing at the same time.</p>\n\n<p>The code is available <a href=\"https://github.com/siaw23/kovid\">on GitHub</a>.</p>\n\n<h2 id=\"what-i-learned\">What I Learned</h2>\n\n<p>The plot twist of building a seemingly useless CLI is not the product itself. It’s learning, passing time meaningfully. For such a tiny CLI. I’ve learned a lot through Shannon and another Ruby Jedi, <a href=\"https://github.com/gr33n7007h\">Lee</a>. The funny thing about learning, not just about Ruby but any subject, is: the more you learn, the more you realise how much you don’t know.</p>\n\n<blockquote>\n  <p>As our island of knowledge grows, so does the shore of our ignorance.</p>\n\n  <p>– John Archibald Wheeler</p>\n</blockquote>\n\n<p>For this reason, I try to stay very humble to the point that sometimes, people perceive this as stupidity. Playing with <code class=\"language-plaintext highlighter-rouge\">kovid</code> has taught me countless things. I’ll list a few.</p>\n\n<h3 id=\"hashmerge-only-accepts-multiple-args-in-ruby-260\">Hash#merge only accepts multiple args in Ruby &gt;=2.6.0.</h3>\n\n<p>If you’re merging a hash you’d expect something like this to work:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">tail</span> <span class=\"o\">=</span> <span class=\"n\">country_array</span>\n  <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">.</span><span class=\"nf\">merge</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">tail</span><span class=\"p\">)</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">|</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"n\">left</span> <span class=\"o\">+</span> <span class=\"n\">right</span> <span class=\"k\">unless</span> <span class=\"sx\">%w[country countryInfo]</span><span class=\"p\">.</span><span class=\"nf\">include?</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n  <span class=\"k\">end</span><span class=\"p\">.</span><span class=\"nf\">compact</span>\n</code></pre></div></div>\n\n<p>It does indeed work, but only if you’re using a <a href=\"https://rubylatestversion.com/\">Ruby version</a>  &gt;=2.6.0. Any Ruby version below 2.6.0 would result in <a href=\"https://github.com/siaw23/kovid/issues/77\">complaints</a> because it wasn’t until Ruby 2.6.0 that Hash#merge got support for multiple arguments.</p>\n\n<p>There were multiple fixes for this. One was to use the <a href=\"https://github.com/marcandre/backports\">backports</a> gem, but grabbing a whole gem for this would be silly. In the end, we reached for a more sensible solution to rewrite the above as:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">country_array</span><span class=\"p\">.</span><span class=\"nf\">inject</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">base</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"o\">|</span>\n          <span class=\"n\">base</span><span class=\"p\">.</span><span class=\"nf\">merge</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">)</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">|</span>\n            <span class=\"c1\"># ...</span>\n            <span class=\"n\">left</span> <span class=\"o\">+</span> <span class=\"n\">right</span> <span class=\"k\">unless</span> <span class=\"sx\">%w[country countryInfo]</span><span class=\"p\">.</span><span class=\"nf\">include?</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n          <span class=\"k\">end</span>\n        <span class=\"k\">end</span><span class=\"p\">.</span><span class=\"nf\">compact</span>\n</code></pre></div></div>\n\n<h3 id=\"hacking-codepoints-to-create-flag-emoji\">Hacking codepoints to create flag emoji.</h3>\n\n<p>If you look at the <code class=\"language-plaintext highlighter-rouge\">kovid</code> screenshots above, you’ll notice they have flags attached to the countries. My initial idea on adding emoji to a terminal table was to build a gem that, given an <a href=\"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\">ISO 3166-1 alpha-2</a> code, would spit out a flag emoji – This is somewhat naive but naive only if you <i>know</i> of a better solution.</p>\n\n<p>Back in the day, I discovered that flag emoji used “two-letter” ISO alpha-2 codes of the country they represented. I never thought about how these grapheme clusters could be programmatically manipulated to produce the flags that I wanted, though.</p>\n\n<p>To see the individual graphemes you could do</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"s1\">'\uD83C\uDDED\uD83C\uDDF9'</span><span class=\"p\">.</span><span class=\"nf\">codepoints</span><span class=\"p\">.</span><span class=\"nf\">map</span> <span class=\"p\">{</span> <span class=\"o\">|</span><span class=\"n\">codepoint</span><span class=\"o\">|</span> <span class=\"n\">codepoint</span><span class=\"p\">.</span><span class=\"nf\">chr</span> <span class=\"s1\">'utf-8'</span> <span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>which returns</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">[</span><span class=\"s2\">&quot;\uD83C\uDDED&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;\uD83C\uDDF9&quot;</span><span class=\"p\">]</span>\n</code></pre></div></div>\n\n<p>and to get the codepoints of this same flag <code class=\"language-plaintext highlighter-rouge\">'\uD83C\uDDED\uD83C\uDDF9'.codepoints</code> would be enough to return <code class=\"language-plaintext highlighter-rouge\">[127469, 127481]</code>.</p>\n\n<p>With this new-found knowledge, let’s see how we can easily exploit Unicode, so we don’t have to create a gem that just spits out flag emoji.</p>\n\n<p>Here’s a method that does that:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"no\">COUNTRY_LETTERS</span> <span class=\"o\">=</span> <span class=\"s1\">'A'</span><span class=\"p\">.</span><span class=\"nf\">upto</span><span class=\"p\">(</span><span class=\"s1\">'Z'</span><span class=\"p\">).</span><span class=\"nf\">with_index</span><span class=\"p\">(</span><span class=\"mi\">127_462</span><span class=\"p\">).</span><span class=\"nf\">to_h</span><span class=\"p\">.</span><span class=\"nf\">freeze</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">country_emoji</span><span class=\"p\">(</span><span class=\"n\">iso</span><span class=\"p\">)</span>\n  <span class=\"no\">COUNTRY_LETTERS</span><span class=\"p\">.</span><span class=\"nf\">values_at</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">iso</span><span class=\"p\">.</span><span class=\"nf\">chars</span><span class=\"p\">).</span><span class=\"nf\">pack</span><span class=\"p\">(</span><span class=\"s1\">'U*'</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>Step-by-step, the <code class=\"language-plaintext highlighter-rouge\">COUNTRY_LETTERS</code> constants maps values of ASCII <code class=\"language-plaintext highlighter-rouge\">A</code> starting with <code class=\"language-plaintext highlighter-rouge\">127_462</code> through to <code class=\"language-plaintext highlighter-rouge\">Z</code>. The returned hash looks like this:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"s2\">&quot;A&quot;</span><span class=\"o\">=&gt;</span><span class=\"mi\">127462</span><span class=\"p\">,</span> <span class=\"s2\">&quot;B&quot;</span><span class=\"o\">=&gt;</span><span class=\"mi\">127463</span><span class=\"p\">,</span> <span class=\"s2\">&quot;C&quot;</span><span class=\"o\">=&gt;</span><span class=\"mi\">127464</span><span class=\"p\">,</span> <span class=\"s2\">&quot;D&quot;</span><span class=\"o\">=&gt;</span><span class=\"mi\">127465</span><span class=\"p\">,</span> <span class=\"s2\">&quot;E&quot;</span><span class=\"o\">=&gt;</span><span class=\"mi\">127466</span><span class=\"p\">,</span> <span class=\"s2\">&quot;F&quot;</span><span class=\"o\">=&gt;</span><span class=\"mi\">127467</span><span class=\"p\">,</span> <span class=\"s2\">&quot;G&quot;</span><span class=\"o\">=&gt;</span><span class=\"mi\">127468</span><span class=\"p\">,</span> <span class=\"s2\">&quot;H&quot;</span><span class=\"o\">=&gt;</span><span class=\"mi\">127469</span><span class=\"p\">,</span> <span class=\"s2\">&quot;I&quot;</span><span class=\"o\">=&gt;</span><span class=\"mi\">127470</span><span class=\"p\">,</span> <span class=\"s2\">&quot;J&quot;</span><span class=\"o\">=&gt;</span><span class=\"mi\">127471</span><span class=\"p\">,</span> <span class=\"s2\">&quot;K&quot;</span><span class=\"o\">=&gt;</span><span class=\"mi\">127472</span><span class=\"p\">,</span> <span class=\"s2\">&quot;L&quot;</span><span class=\"o\">=&gt;</span><span class=\"mi\">127473</span><span class=\"p\">,</span> <span class=\"s2\">&quot;M&quot;</span><span class=\"o\">=&gt;</span><span class=\"mi\">127474</span><span class=\"p\">,</span> <span class=\"s2\">&quot;N&quot;</span><span class=\"o\">=&gt;</span><span class=\"mi\">127475</span><span class=\"p\">,</span> <span class=\"s2\">&quot;O&quot;</span><span class=\"o\">=&gt;</span><span class=\"mi\">127476</span><span class=\"p\">,</span> <span class=\"s2\">&quot;P&quot;</span><span class=\"o\">=&gt;</span><span class=\"mi\">127477</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Q&quot;</span><span class=\"o\">=&gt;</span><span class=\"mi\">127478</span><span class=\"p\">,</span> <span class=\"s2\">&quot;R&quot;</span><span class=\"o\">=&gt;</span><span class=\"mi\">127479</span><span class=\"p\">,</span> <span class=\"s2\">&quot;S&quot;</span><span class=\"o\">=&gt;</span><span class=\"mi\">127480</span><span class=\"p\">,</span> <span class=\"s2\">&quot;T&quot;</span><span class=\"o\">=&gt;</span><span class=\"mi\">127481</span><span class=\"p\">,</span> <span class=\"s2\">&quot;U&quot;</span><span class=\"o\">=&gt;</span><span class=\"mi\">127482</span><span class=\"p\">,</span> <span class=\"s2\">&quot;V&quot;</span><span class=\"o\">=&gt;</span><span class=\"mi\">127483</span><span class=\"p\">,</span> <span class=\"s2\">&quot;W&quot;</span><span class=\"o\">=&gt;</span><span class=\"mi\">127484</span><span class=\"p\">,</span> <span class=\"s2\">&quot;X&quot;</span><span class=\"o\">=&gt;</span><span class=\"mi\">127485</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Y&quot;</span><span class=\"o\">=&gt;</span><span class=\"mi\">127486</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Z&quot;</span><span class=\"o\">=&gt;</span><span class=\"mi\">127487</span><span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The values are the codepoints of the graphemes that we’ll combine (pack) to get our emoji flag. So for this method, given a string of say <code class=\"language-plaintext highlighter-rouge\">&quot;GH&quot;</code>, it’d split the string into an array and <code class=\"language-plaintext highlighter-rouge\">#pack</code> them into a binary sequence with the <code class=\"language-plaintext highlighter-rouge\">U*</code> directive. The <code class=\"language-plaintext highlighter-rouge\">U*</code> directive means “UTF-8 character”.</p>\n\n<p>With this <code class=\"language-plaintext highlighter-rouge\">p country_emoji(&quot;PL&quot;)</code> would return <code class=\"language-plaintext highlighter-rouge\">\uD83C\uDDF5\uD83C\uDDF1</code>. Nifty right?</p>\n\n<h3 id=\"zero-width-space-zwsp\">Zero-width space (ZWSP).</h3>\n\n<p>Take a peek at the screenshot of <code class=\"language-plaintext highlighter-rouge\">kovid</code> above and compare that to this screenshot:</p>\n\n<p><img src=\"/images/kovid_check_zero_width.png\" alt=\"kovid zero-width space\" title=\"kovid zero-width space.\"></p>\n\n<p>You might notice that the flag emoji huddles against the text and the <code class=\"language-plaintext highlighter-rouge\">|</code> character at the end on that row draws in. It appears the <code class=\"language-plaintext highlighter-rouge\">terminal-table</code> gem only cares about ASCII characters. There was no easy way to fix this unless the <code class=\"language-plaintext highlighter-rouge\">country_emoji(iso)</code> method is rewritten as:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">country_emoji</span><span class=\"p\">(</span><span class=\"n\">iso</span><span class=\"p\">)</span>\n  <span class=\"no\">COUNTRY_LETTERS</span><span class=\"p\">.</span><span class=\"nf\">values_at</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">iso</span><span class=\"p\">.</span><span class=\"nf\">chars</span><span class=\"p\">).</span><span class=\"nf\">pack</span><span class=\"p\">(</span><span class=\"s1\">'U*'</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"p\">\\</span>\n    <span class=\"mi\">8203</span><span class=\"p\">.</span><span class=\"nf\">chr</span><span class=\"p\">(</span><span class=\"no\">Encoding</span><span class=\"o\">::</span><span class=\"no\">UTF_8</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">8203.chr(Encoding::UTF_8)</code> adds a zero-width space.</p>\n\n<blockquote>\n  <p>The zero-width space is a code point (a number) in a character set, that does not represent a written symbol used in computerised typesetting to indicate word boundaries to text processing systems when using scripts that do not use explicit spacing.</p>\n\n  <p>They are used as in-band signalling to cause effects other than the addition of a symbol to the text.</p>\n\n  <p>– Wikipedia</p>\n</blockquote>\n\n<p>There are a few of them: <code class=\"language-plaintext highlighter-rouge\">[8203, 8204, 8205, 8288, 65279]</code>.</p>\n\n<h3 id=\"hashreject-returns-nil-when-it-rejects-nothing\">Hash#reject! returns <code class=\"language-plaintext highlighter-rouge\">nil</code> when it rejects nothing.</h3>\n\n<p>In <code class=\"language-plaintext highlighter-rouge\">kovid</code> the command to check historical data looks like this: <code class=\"language-plaintext highlighter-rouge\">kovid history usa</code>. The corresponding code is:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"k\">def</span> <span class=\"nf\">history</span><span class=\"p\">(</span><span class=\"n\">country</span><span class=\"p\">,</span> <span class=\"n\">last</span><span class=\"p\">)</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"n\">stats</span> <span class=\"o\">=</span> <span class=\"k\">if</span> <span class=\"n\">last</span>\n              <span class=\"n\">transpose</span><span class=\"p\">(</span><span class=\"n\">country</span><span class=\"p\">).</span><span class=\"nf\">last</span><span class=\"p\">(</span><span class=\"n\">last</span><span class=\"p\">.</span><span class=\"nf\">to_i</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span>\n              <span class=\"n\">transpose</span><span class=\"p\">(</span><span class=\"n\">country</span><span class=\"p\">)</span>\n            <span class=\"k\">end</span>\n\n    <span class=\"n\">dates</span> <span class=\"o\">=</span> <span class=\"k\">if</span> <span class=\"n\">last</span>\n              <span class=\"n\">country</span><span class=\"p\">[</span><span class=\"s1\">'timeline'</span><span class=\"p\">][</span><span class=\"s1\">'cases'</span><span class=\"p\">].</span><span class=\"nf\">keys</span><span class=\"p\">.</span><span class=\"nf\">last</span><span class=\"p\">(</span><span class=\"n\">last</span><span class=\"p\">.</span><span class=\"nf\">to_i</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span>\n              <span class=\"n\">country</span><span class=\"p\">[</span><span class=\"s1\">'timeline'</span><span class=\"p\">][</span><span class=\"s1\">'cases'</span><span class=\"p\">].</span><span class=\"nf\">keys</span>\n            <span class=\"k\">end</span>\n\n    <span class=\"k\">unless</span> <span class=\"n\">last</span>\n      <span class=\"n\">stats</span> <span class=\"o\">=</span> <span class=\"n\">stats</span><span class=\"p\">.</span><span class=\"nf\">reject!</span> <span class=\"p\">{</span> <span class=\"o\">|</span><span class=\"n\">stat</span><span class=\"o\">|</span> <span class=\"n\">stat</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nf\">to_i</span><span class=\"p\">.</span><span class=\"nf\">zero?</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">stat</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"nf\">to_i</span><span class=\"p\">.</span><span class=\"nf\">zero?</span> <span class=\"p\">}</span>\n      <span class=\"n\">dates</span> <span class=\"o\">=</span> <span class=\"n\">dates</span><span class=\"p\">.</span><span class=\"nf\">last</span><span class=\"p\">(</span><span class=\"n\">stats</span><span class=\"p\">.</span><span class=\"nf\">count</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"c1\"># ...</span>\n  <span class=\"k\">end</span>\n</code></pre></div></div>\n<p>I would run <code class=\"language-plaintext highlighter-rouge\">kovid history usa</code> and get <code class=\"language-plaintext highlighter-rouge\">undefined method 'count' for nil:NilClass (NoMethodError)</code> without immediately knowing why because <code class=\"language-plaintext highlighter-rouge\">binding.irb</code> told me <code class=\"language-plaintext highlighter-rouge\">stats</code> defined earlier is not <code class=\"language-plaintext highlighter-rouge\">nil</code>. How is it <code class=\"language-plaintext highlighter-rouge\">nil</code> in the <code class=\"language-plaintext highlighter-rouge\">unless</code> block then? I  pushed this aside to work on other features, until <a href=\"https://github.com/siaw23/kovid/commit/3a8f84411e885de91a8a2134961ef766ed64a91b\">a PR came in from a contributor</a>. When I saw that, I went to the documentation only to find:</p>\n\n<blockquote>\n  <p>reject!() public</p>\n\n  <p>Equivalent to #delete_if, but returns nil if no changes were made.</p>\n</blockquote>\n\n<p>Why did I think a banged method on an Enumerable worked like <code class=\"language-plaintext highlighter-rouge\">Array#map!</code>? This made me more attentive when it comes to Ruby methods with a <code class=\"language-plaintext highlighter-rouge\">!</code>. It’s unsafe to assume that a method you’re used to behaves similarly to another method that works on an Enumerable.</p>\n\n<h3 id=\"adiós-bindingpry-hola-bindingirb\">Adiós <code class=\"language-plaintext highlighter-rouge\">binding.pry</code>. Hola <code class=\"language-plaintext highlighter-rouge\">binding.irb</code>.</h3>\n\n<p>Ruby 2.4.0 introduced <code class=\"language-plaintext highlighter-rouge\">binding.irb</code> – This is an excellent addition. While I’m very appreciative of Pry, I must say, the added hassle of having to install something extra and require it sometimes gets in the way. With Ruby versions higher than 2.4.0, you can add <code class=\"language-plaintext highlighter-rouge\">binding.irb</code> anywhere without additional steps to debug your code. This, though seemingly small, is a boost to productivity. While building <code class=\"language-plaintext highlighter-rouge\">kovid</code>, I added <code class=\"language-plaintext highlighter-rouge\">binding.irb</code> to my toolchain, and that’s what I’ll be using henceforth.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>We don’t know how long this pandemic will last, or when a vaccine will come out to help us fight it, there isn’t much we can do other than follow procedures and be extra vigilant about hygiene. I only hope this doesn’t last as long as previous pandemics, and that we can succeed in flattening the curve.</p>\n\n<p>I don’t know about you, but for me, this situation is more than depressing. I’m happy I have Ruby. I find solace in Ruby. Building toy applications takes my mind off the devastation we’re experiencing in these times. Whatever you find relief in, stick to it as long as it’s a safe routine. I’m sure, like with all other adversities that humanity has suffered, this too shall pass.</p>\n\n<p>#StayHome. Stay safe.</p>"
}