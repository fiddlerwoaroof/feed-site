<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title>V8</title><subtitle>The V8 JavaScript engine</subtitle><link href="https://v8.dev/blog.atom" rel="self"><link href="https://v8.dev/"><updated>2022-06-17T00:00:00Z</updated><id>https://v8.dev/</id><author><name>Mathias Bynens</name></author><entry><title>Discontinuing release blog posts</title><link href="https://v8.dev/blog/discontinuing-release-posts"><updated>2022-06-17T00:00:00Z</updated><id>https://v8.dev/blog/discontinuing-release-posts</id><author><name>Shu-yu Guo (@shu_)</name></author><content type="html">&lt;p&gt;Historically, there has been a blog post for each new release branch of V8. You may have noticed there has not been a release blog post since v9.9. From v10.0 onward, we are discontinuing release blog posts for each new branch. But don’t worry, all the information you were used to getting via release blog posts are still available! Read on to see where to find that information going forward.&lt;/p&gt;
&lt;h2 id=&quot;release-schedule-and-current-version&quot; tabindex=&quot;-1&quot;&gt;Release schedule and current version &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.dev/blog/discontinuing-release-posts#release-schedule-and-current-version&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Were you reading the release blog posts to determine the most up-to-date release of V8?&lt;/p&gt;
&lt;p&gt;V8 is on Chrome's release schedule. For the most current stable release of V8, please consult the &lt;a href=&quot;https://chromestatus.com/roadmap&quot;&gt;Chrome release roadmap&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Every four weeks, we create a new branch of V8 as part of our &lt;a href=&quot;https://v8.dev/docs/release-process&quot;&gt;release process&lt;/a&gt;. Each version is branched from V8’s Git main branch immediately before a Chrome Beta milestone. Such branches are in beta and become releases in coordination with the &lt;a href=&quot;https://chromestatus.com/roadmap&quot;&gt;Chrome release roadmap&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To find a particular V8 branch for a Chrome version:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Take the Chrome version and divide by 10 to get the V8 version. For example, Chrome 102 is V8 10.2.&lt;/li&gt;
&lt;li&gt;For a version number X.Y, its branch can be found at the URL of the following form:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;https://chromium.googlesource.com/v8/v8.git/+log/branch-heads/X.Y
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For example, the 10.2 branch can be found at &lt;a href=&quot;https://chromium.googlesource.com/v8/v8.git/+log/branch-heads/10.2&quot;&gt;https://chromium.googlesource.com/v8/v8.git/+log/branch-heads/10.2&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For more on version numbers and branches, please see &lt;a href=&quot;https://v8.dev/docs/version-numbers&quot;&gt;our detailed article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For a V8 version X.Y, developers with an active V8 checkout can use &lt;code&gt;git checkout -b X.Y -t branch-heads/X.Y&lt;/code&gt; to experiment with the new features in that version.&lt;/p&gt;
&lt;h2 id=&quot;new-javascript-or-webassembly-features&quot; tabindex=&quot;-1&quot;&gt;New JavaScript or WebAssembly features &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.dev/blog/discontinuing-release-posts#new-javascript-or-webassembly-features&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Were you reading the release blog posts to find out what new JavaScript or WebAssembly features were implemented behind a flag or were turned on by default?&lt;/p&gt;
&lt;p&gt;Please consult the &lt;a href=&quot;https://chromestatus.com/roadmap&quot;&gt;Chrome release roadmap&lt;/a&gt;, which lists new features and their milestones for each release.&lt;/p&gt;
&lt;p&gt;Note that &lt;a href=&quot;https://v8.dev/features&quot;&gt;the separate, deep-dive feature articles&lt;/a&gt; may be published before or after the feature has been implemented in V8.&lt;/p&gt;
&lt;h2 id=&quot;notable-performance-improvements&quot; tabindex=&quot;-1&quot;&gt;Notable performance improvements &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.dev/blog/discontinuing-release-posts#notable-performance-improvements&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Were you reading the release blog posts to learn about notable performance improvements?&lt;/p&gt;
&lt;p&gt;Going forward, we will write independent blog posts for performance improvements that we wish to call out, as we have done so in the past for improvements like &lt;a href=&quot;https://v8.dev/blog/sparkplug&quot;&gt;Sparkplug&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;api-changes&quot; tabindex=&quot;-1&quot;&gt;API changes &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.dev/blog/discontinuing-release-posts#api-changes&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Were you reading the release blog posts to learn about API changes?&lt;/p&gt;
&lt;p&gt;To see the list of commits that modified the V8 API between an earlier version A.B and a later version X.Y, please use &lt;code&gt;git log branch-heads/A.B..branch-heads/X.Y include/v8\*.h&lt;/code&gt; in an active V8 checkout.&lt;/p&gt;
</content></entry><entry><title>Retrofitting temporal memory safety on C++</title><link href="https://v8.dev/blog/retrofitting-temporal-memory-safety-on-c++"><updated>2022-06-14T00:00:00Z</updated><id>https://v8.dev/blog/retrofitting-temporal-memory-safety-on-c++</id><author><name>Anton Bikineev, Michael Lippautz (@mlippautz), Hannes Payer (@PayerHannes)</name></author><content type="html">&lt;div class=&quot;note&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This post was originally posted on the &lt;a href=&quot;https://security.googleblog.com/2022/05/retrofitting-temporal-memory-safety-on-c.html&quot;&gt;Google Security Blog&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://security.googleblog.com/2021/09/an-update-on-memory-safety-in-chrome.html&quot;&gt;Memory safety in Chrome&lt;/a&gt; is an ever-ongoing effort to protect our users. We are constantly experimenting with different technologies to stay ahead of malicious actors. In this spirit, this post is about our journey of using heap scanning technologies to improve memory safety of C++.&lt;/p&gt;
&lt;p&gt;Let’s start at the beginning though. Throughout the lifetime of an application its state is generally represented in memory. Temporal memory safety refers to the problem of guaranteeing that memory is always accessed with the most up to date information of its structure, its type. C++ unfortunately does not provide such guarantees. While there is appetite for different languages than C++ with stronger memory safety guarantees, large codebases such as Chromium will use C++ for the foreseeable future.&lt;/p&gt;
&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; foo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;delete&lt;/span&gt; foo&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// The memory location pointed to by foo is not representing&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// a Foo object anymore, as the object has been deleted (freed).&lt;/span&gt;&lt;br /&gt;foo&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the example above, &lt;code&gt;foo&lt;/code&gt; is used after its memory has been returned to the underlying system. The out-of-date pointer is called a &lt;a href=&quot;https://en.wikipedia.org/wiki/Dangling_pointer&quot;&gt;dangling pointer&lt;/a&gt; and any access through it results in a use-after-free (UAF) access. In the best case such errors result in well-defined crashes, in the worst case they cause subtle breakage that can be exploited by malicious actors.&lt;/p&gt;
&lt;p&gt;UAFs are often hard to spot in larger codebases where ownership of objects is transferred between various components. The general problem is so widespread that to this date both industry and academia regularly come up with mitigation strategies. The examples are endless: C++ smart pointers of all kinds are used to better define and manage ownership on application level; static analysis in compilers is used to avoid compiling problematic code in the first place; where static analysis fails, dynamic tools such as &lt;a href=&quot;https://github.com/google/sanitizers&quot;&gt;C++ sanitizers&lt;/a&gt; can intercept accesses and catch problems on specific executions.&lt;/p&gt;
&lt;p&gt;Chrome’s use of C++ is sadly no different here and the majority of &lt;a href=&quot;https://www.chromium.org/Home/chromium-security/memory-safety/&quot;&gt;high-severity security bugs are UAF issues&lt;/a&gt;. In order to catch issues before they reach production, all of the aforementioned techniques are used. In addition to regular tests, fuzzers ensure that there’s always new input to work with for dynamic tools. Chrome even goes further and employs a C++ garbage collector called &lt;a href=&quot;https://v8.dev/blog/oilpan-library&quot;&gt;Oilpan&lt;/a&gt; which deviates from regular C++ semantics but provides temporal memory safety where used. Where such deviation is unreasonable, a new kind of smart pointer called &lt;a href=&quot;https://security.googleblog.com/2021/09/an-update-on-memory-safety-in-chrome.html&quot;&gt;MiraclePtr&lt;/a&gt; was introduced recently to deterministically crash on accesses to dangling pointers when used. Oilpan, MiraclePtr, and smart-pointer-based solutions require significant adoptions of the application code.&lt;/p&gt;
&lt;p&gt;Over the last decade, another approach has seen some success: memory quarantine. The basic idea is to put explicitly freed memory into quarantine and only make it available when a certain safety condition is reached. Microsoft has shipped versions of this mitigation in its browsers: &lt;a href=&quot;https://securityintelligence.com/understanding-ies-new-exploit-mitigations-the-memory-protector-and-the-isolated-heap/&quot;&gt;MemoryProtector&lt;/a&gt; in Internet Explorer in 2014 and its successor &lt;a href=&quot;https://securityintelligence.com/memgc-use-after-free-exploit-mitigation-in-edge-and-ie-on-windows-10/&quot;&gt;MemGC&lt;/a&gt; in (pre-Chromium) Edge in 2015. In the &lt;a href=&quot;https://a13xp0p0v.github.io/2020/11/30/slab-quarantine.html&quot;&gt;Linux kernel&lt;/a&gt; a probabilistic approach was used where memory was eventually just recycled. And this approach has seen attention in academia in recent years with the &lt;a href=&quot;https://www.cst.cam.ac.uk/blog/tmj32/addressing-temporal-memory-safety&quot;&gt;MarkUs paper&lt;/a&gt;. The rest of this article summarizes our journey of experimenting with quarantines and heap scanning in Chrome.&lt;/p&gt;
&lt;p&gt;(At this point, one may ask where memory tagging fits into this picture – keep on reading!)&lt;/p&gt;
&lt;h2 id=&quot;quarantining-and-heap-scanning%2C-the-basics&quot; tabindex=&quot;-1&quot;&gt;Quarantining and heap scanning, the basics &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.dev/blog/retrofitting-temporal-memory-safety-on-c++#quarantining-and-heap-scanning%2C-the-basics&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The main idea behind assuring temporal safety with quarantining and heap scanning is to avoid reusing memory until it has been proven that there are no more (dangling) pointers referring to it. To avoid changing C++ user code or its semantics, the memory allocator providing &lt;code&gt;new&lt;/code&gt; and &lt;code&gt;delete&lt;/code&gt; is intercepted.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.dev/_img/retrofitting-temporal-memory-safety-on-c++/basics.svg&quot; alt=&quot;&quot; width=&quot;804&quot; height=&quot;351&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;Figure 1: quarantine basics&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;Upon invoking &lt;code&gt;delete&lt;/code&gt;, the memory is actually put in a quarantine, where it is unavailable for being reused for subsequent &lt;code&gt;new&lt;/code&gt; calls by the application. At some point a heap scan is triggered which scans the whole heap, much like a garbage collector, to find references to quarantined memory blocks. Blocks that have no incoming references from the regular application memory are transferred back to the allocator where they can be reused for subsequent allocations.&lt;/p&gt;
&lt;p&gt;There are various hardening options which come with a performance cost:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Overwrite the quarantined memory with special values (e.g. zero);&lt;/li&gt;
&lt;li&gt;Stop all application threads when the scan is running or scan the heap concurrently;&lt;/li&gt;
&lt;li&gt;Intercept memory writes (e.g. by page protection) to catch pointer updates;&lt;/li&gt;
&lt;li&gt;Scan memory word by word for possible pointers (conservative handling) or provide descriptors for objects (precise handling);&lt;/li&gt;
&lt;li&gt;Segregation of application memory in safe and unsafe partitions to opt-out certain objects which are either performance sensitive or can be statically proven as being safe to skip;&lt;/li&gt;
&lt;li&gt;Scan the execution stack in addition to just scanning heap memory;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We call the collection of different versions of these algorithms &lt;em&gt;StarScan&lt;/em&gt; [stɑː skæn], or &lt;em&gt;*Scan&lt;/em&gt; for short.&lt;/p&gt;
&lt;h2 id=&quot;reality-check&quot; tabindex=&quot;-1&quot;&gt;Reality check &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.dev/blog/retrofitting-temporal-memory-safety-on-c++#reality-check&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We apply *Scan to the unmanaged parts of the renderer process and use &lt;a href=&quot;https://browserbench.org/Speedometer2.0/&quot;&gt;Speedometer2&lt;/a&gt; to evaluate the performance impact.&lt;/p&gt;
&lt;p&gt;We have experimented with different versions of *Scan. To minimize performance overhead as much as possible though, we evaluate a configuration that uses a separate thread to scan the heap and avoids clearing of quarantined memory eagerly on &lt;code&gt;delete&lt;/code&gt; but rather clears quarantined memory when running *Scan. We opt in all memory allocated with &lt;code&gt;new&lt;/code&gt; and don’t discriminate between allocation sites and types for simplicity in the first implementation.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.dev/_img/retrofitting-temporal-memory-safety-on-c++/separate-thread.svg&quot; alt=&quot;&quot; width=&quot;821&quot; height=&quot;415&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;Figure 2: Scanning in separate thread&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;Note that the proposed version of *Scan is not complete. Concretely, a malicious actor may exploit a race condition with the scanning thread by moving a dangling pointer from an unscanned to an already scanned memory region. Fixing this race condition requires keeping track of writes into blocks of already scanned memory, by e.g. using memory protection mechanisms to intercept those accesses, or stopping all application threads in safepoints from mutating the object graph altogether. Either way, solving this issue comes at a performance cost and exhibits an interesting performance and security trade-off. Note that this kind of attack is not generic and does not work for all UAF. Problems such as depicted in the introduction would not be prone to such attacks as the dangling pointer is not copied around.&lt;/p&gt;
&lt;p&gt;Since the security benefits really depend on the granularity of such safepoints and we want to experiment with the fastest possible version, we disabled safepoints altogether.&lt;/p&gt;
&lt;p&gt;Running our basic version on Speedometer2 regresses the total score by 8%. Bummer…&lt;/p&gt;
&lt;p&gt;Where does all this overhead come from? Unsurprisingly, heap scanning is memory bound and quite expensive as the entire user memory must be walked and examined for references by the scanning thread.&lt;/p&gt;
&lt;p&gt;To reduce the regression we implemented various optimizations that improve the raw scanning speed. Naturally, the fastest way to scan memory is to not scan it at all and so we partitioned the heap into two classes: memory that can contain pointers and memory that we can statically prove to not contain pointers, e.g. strings. We avoid scanning memory that cannot contain any pointers. Note that such memory is still part of the quarantine, it is just not scanned.&lt;/p&gt;
&lt;p&gt;We extended this mechanism to also cover allocations that serve as backing memory for other allocators, e.g., zone memory that is managed by V8 for the optimizing JavaScript compiler. Such zones are always discarded at once (c.f. region-based memory management) and temporal safety is established through other means in V8.&lt;/p&gt;
&lt;p&gt;On top, we applied several micro optimizations to speed up and eliminate computations: we use helper tables for pointer filtering; rely on SIMD for the memory-bound scanning loop; and minimize the number of fetches and lock-prefixed instructions.&lt;/p&gt;
&lt;p&gt;We also improve upon the initial scheduling algorithm that just starts a heap scan when reaching a certain limit by adjusting how much time we spent in scanning compared to actually executing the application code (c.f. mutator utilization in &lt;a href=&quot;https://dl.acm.org/doi/10.1145/604131.604155&quot;&gt;garbage collection literature&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;In the end, the algorithm is still memory bound and scanning remains a noticeably expensive procedure. The optimizations helped to reduce the Speedometer2 regression from 8% down to 2%.&lt;/p&gt;
&lt;p&gt;While we improved raw scanning time, the fact that memory sits in a quarantine increases the overall working set of a process. To further quantify this overhead, we use a selected set of &lt;a href=&quot;https://chromium.googlesource.com/catapult/&quot;&gt;Chrome’s real-world browsing benchmarks&lt;/a&gt; to measure memory consumption. *Scan in the renderer process regresses memory consumption by about 12%. It’s this increase of the working set that leads to more memory being paged in which is noticeable on application fast paths.&lt;/p&gt;
&lt;h2 id=&quot;hardware-memory-tagging-to-the-rescue&quot; tabindex=&quot;-1&quot;&gt;Hardware memory tagging to the rescue &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.dev/blog/retrofitting-temporal-memory-safety-on-c++#hardware-memory-tagging-to-the-rescue&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;MTE (Memory Tagging Extension) is a new extension on the ARM v8.5A architecture that helps with detecting errors in software memory use. These errors can be spatial errors (e.g. out-of-bounds accesses) or temporal errors (use-after-free). The extension works as follows. Every 16 bytes of memory are assigned a 4-bit tag. Pointers are also assigned a 4-bit tag. The allocator is responsible for returning a pointer with the same tag as the allocated memory. The load and store instructions verify that the pointer and memory tags match. In case the tags of the memory location and the pointer do not match a hardware exception is raised.&lt;/p&gt;
&lt;p&gt;MTE doesn’t offer a deterministic protection against use-after-free. Since the number of tag bits is finite there is a chance that the tag of the memory and the pointer match due to overflow. With 4 bits, only 16 reallocations are enough to have the tags match. A malicious actor may exploit the tag bit overflow to get a use-after-free by just waiting until the tag of a dangling pointer matches (again) the memory it is pointing to.&lt;/p&gt;
&lt;p&gt;*Scan can be used to fix this problematic corner case. On each &lt;code&gt;delete&lt;/code&gt; call the tag for the underlying memory block gets incremented by the MTE mechanism. Most of the time the block will be available for reallocation as the tag can be incremented within the 4-bit range. Stale pointers would refer to the old tag and thus reliably crash on dereference. Upon overflowing the tag, the object is then put into quarantine and processed by *Scan. Once the scan verifies that there are no more dangling pointers to this block of memory, it is returned back to the allocator. This reduces the number of scans and their accompanying cost by ~16x.&lt;/p&gt;
&lt;p&gt;The following picture depicts this mechanism. The pointer to &lt;code&gt;foo&lt;/code&gt; initially has a tag of &lt;code&gt;0x0E&lt;/code&gt; which allows it to be incremented once again for allocating &lt;code&gt;bar&lt;/code&gt;. Upon invoking &lt;code&gt;delete&lt;/code&gt; for &lt;code&gt;bar&lt;/code&gt; the tag overflows and the memory is actually put into quarantine of *Scan.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.dev/_img/retrofitting-temporal-memory-safety-on-c++/mte.svg&quot; alt=&quot;&quot; width=&quot;741&quot; height=&quot;439&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;Figure 3: MTE&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;We got our hands on some actual hardware supporting MTE and redid the experiments in the renderer process. The results are promising as the regression on Speedometer was within noise and we only regressed memory footprint by around 1% on Chrome’s real-world browsing stories.&lt;/p&gt;
&lt;p&gt;Is this some actual &lt;a href=&quot;https://en.wikipedia.org/wiki/No_free_lunch_theorem&quot;&gt;free lunch&lt;/a&gt;? Turns out that MTE comes with some cost which has already been paid for. Specifically, PartitionAlloc, which is Chrome’s underlying allocator, already performs the tag management operations for all MTE-enabled devices by default. Also, for security reasons, memory should really be zeroed eagerly. To quantify these costs, we ran experiments on an early hardware prototype that supports MTE in several configurations:&lt;/p&gt;
&lt;p&gt;A. MTE disabled and without zeroing memory;&lt;br /&gt;
B. MTE disabled but with zeroing memory;&lt;br /&gt;
C. MTE enabled without *Scan;&lt;br /&gt;
D. MTE enabled with *Scan;&lt;/p&gt;
&lt;p&gt;(We are also aware that there’s synchronous and asynchronous MTE which also affects determinism and performance. For the sake of this experiment we kept using the asynchronous mode.)&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.dev/_img/retrofitting-temporal-memory-safety-on-c++/mte-regression.svg&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;371&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;Figure 4: MTE regression&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;The results show that MTE and memory zeroing come with some cost which is around 2% on Speedometer2. Note that neither PartitionAlloc, nor hardware has been optimized for these scenarios yet. The experiment also shows that adding *Scan on top of MTE comes without measurable cost.&lt;/p&gt;
&lt;h2 id=&quot;conclusions&quot; tabindex=&quot;-1&quot;&gt;Conclusions &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.dev/blog/retrofitting-temporal-memory-safety-on-c++#conclusions&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;C++ allows for writing high-performance applications but this comes at a price, security. Hardware memory tagging may fix some security pitfalls of C++, while still allowing high performance. We are looking forward to see a more broad adoption of hardware memory tagging in the future and suggest using *Scan on top of hardware memory tagging to fix temporal memory safety for C++. Both the used MTE hardware and the implementation of *Scan are prototypes and we expect that there is still room for performance optimizations.&lt;/p&gt;
</content></entry><entry><title>Faster initialization of instances with new class features</title><link href="https://v8.dev/blog/faster-class-features"><updated>2022-04-20T00:00:00Z</updated><id>https://v8.dev/blog/faster-class-features</id><author><name>Joyee Cheung, instance initializer</name></author><content type="html">&lt;p&gt;Class fields have been shipped in V8 since v7.2 and private class methods have been shipped since v8.4. After the proposals reached stage 4 in 2021, work had begun to improve the support of the new class features in V8 - until then, there had been two main issues affecting their adoption:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The initialization of class fields and private methods was much slower than the assignment of ordinary properties.&lt;/li&gt;
&lt;li&gt;The class field initializers were broken in &lt;a href=&quot;https://v8.dev/blog/custom-startup-snapshots&quot;&gt;startup snapshots&lt;/a&gt; used by embedders like Node.js and Deno to speed up the bootstrapping of themselves or user applications.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first issue has been fixed in V8 v9.7 and the fix for the second issue has been released in V8 v10.0. This post covers how the first issue was fixed, for another read about the fix of the snapshot issue, check out &lt;a href=&quot;https://joyeecheung.github.io/blog/2022/04/14/fixing-snapshot-support-of-class-fields-in-v8/&quot;&gt;this post&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;optimizing-class-fields&quot; tabindex=&quot;-1&quot;&gt;Optimizing class fields &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.dev/blog/faster-class-features#optimizing-class-fields&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To get rid of the performance gap between the assignment of ordinary properties and the initialization of class fields, we updated the existing &lt;a href=&quot;https://mathiasbynens.be/notes/shapes-ics&quot;&gt;inline cache (IC) system&lt;/a&gt; to work with the latter. Before v9.7, V8 always used a costly runtime call for class field initializations. With v9.7, when V8 considers the pattern of the initialization to be predictable enough, it uses a new IC to speed up the operation just like what it does for assignments of ordinary properties.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.dev/_img/faster-class-features/class-fields-performance-optimized.svg&quot; alt=&quot;&quot; width=&quot;2452&quot; height=&quot;1329&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;Performance of initializations, optimized&lt;/figcaption&gt;&lt;/figure&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.dev/_img/faster-class-features/class-fields-performance-interpreted.svg&quot; alt=&quot;&quot; width=&quot;2452&quot; height=&quot;1329&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;Performance of initializations, interpreted&lt;/figcaption&gt;&lt;/figure&gt;
&lt;h3 id=&quot;the-original-implementation-of-class-fields&quot; tabindex=&quot;-1&quot;&gt;The original implementation of class fields &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.dev/blog/faster-class-features#the-original-implementation-of-class-fields&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To implement private fields, V8 makes use of the internal private symbols — they are an internal V8 data structure similar to standard &lt;code&gt;Symbol&lt;/code&gt;s, except not enumerable when used as a property key. Take this class for an example:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  #a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;#a&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;V8 would collect the class field initializers (&lt;code&gt;#a = 0&lt;/code&gt; and &lt;code&gt;b = this.#a&lt;/code&gt;) and generate a synthetic instance member function with the initializers as the function body. The bytecode generated for this synthetic function used to be something like this:&lt;/p&gt;
&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Load the private name symbol for `#a` into r1&lt;/span&gt;&lt;br /&gt;LdaImmutableCurrentContextSlot &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;Star r1&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Load 0 into r2&lt;/span&gt;&lt;br /&gt;LdaZero&lt;br /&gt;Star r2&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Move the target into r0&lt;/span&gt;&lt;br /&gt;Mov &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; r0&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Use the %AddPrivateField() runtime function to store 0 as the value of&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// the property keyed by the private name symbol `#a` in the instance,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// that is, `#a = 0`.&lt;/span&gt;&lt;br /&gt;CallRuntime &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;AddPrivateField&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; r0&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;r2&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Load the property name `b` into r1&lt;/span&gt;&lt;br /&gt;LdaConstant &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;Star r1&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Load the private name symbol for `#a`&lt;/span&gt;&lt;br /&gt;LdaImmutableCurrentContextSlot &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Load the value of the property keyed by `#a` from the instance into r2&lt;/span&gt;&lt;br /&gt;LdaKeyedProperty &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;Star r2&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Move the target into r0&lt;/span&gt;&lt;br /&gt;Mov &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; r0&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Use the %CreateDataProperty() runtime function to store the property keyed&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// by `#a` as the value of the property keyed by `b`, that is, `b = this.#a`&lt;/span&gt;&lt;br /&gt;CallRuntime &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;CreateDataProperty&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; r0&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;r2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Compare the class in the previous snippet to a class like this:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_a&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Technically these two classes are not equivalent, even ignoring the difference in visibility between &lt;code&gt;this.#a&lt;/code&gt; and &lt;code&gt;this._a&lt;/code&gt;. The specification mandates &amp;quot;define&amp;quot; semantics instead of &amp;quot;set&amp;quot; semantics. That is, the initialization of class fields does not trigger setters or &lt;code&gt;set&lt;/code&gt; Proxy traps. So an approximation of the first class should use &lt;code&gt;Object.defineProperty()&lt;/code&gt; instead of simple assignments to initialize the properties. In addition, it should throw if the private field already exists in the instance (in case the target being initialized is overridden in the base constructor to be another instance):&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// What the %AddPrivateField() call roughly translates to:&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; _a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;PrivateSymbol&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'#a'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_a &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;TypeError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'Cannot initialize #a twice on the same object'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;defineProperty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;writable&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;configurable&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;enumerable&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// What the %CreateDataProperty() call roughly translates to:&lt;/span&gt;&lt;br /&gt;    Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;defineProperty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;writable&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;configurable&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;enumerable&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;_a&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To implement the specified semantics before the proposal finalized, V8 used calls to runtime functions since they are more flexible. As shown in the bytecode above, the initialization of public fields was implemented with &lt;code&gt;%CreateDataProperty()&lt;/code&gt; runtime calls, while the initialization of private fields was implemented with &lt;code&gt;%AddPrivateField()&lt;/code&gt;. Since calling into the runtime incurs a significant overhead, the initialization of class fields was much slower compared to the assignment of ordinary object properties.&lt;/p&gt;
&lt;p&gt;In most use cases, however, the semantic differences are insignificant. It would be nice to have the performance of the optimized assignments of properties in these cases — so a more optimal implementation was created after the proposal finalized.&lt;/p&gt;
&lt;h3 id=&quot;optimizing-private-class-fields-and-computed-public-class-fields&quot; tabindex=&quot;-1&quot;&gt;Optimizing private class fields and computed public class fields &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.dev/blog/faster-class-features#optimizing-private-class-fields-and-computed-public-class-fields&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To speed up initialization of private class fields and computed public class fields, the implementation introduced a new machinery to plug into the &lt;a href=&quot;https://mathiasbynens.be/notes/shapes-ics&quot;&gt;inline cache (IC) system&lt;/a&gt; when handling these operations. This new machinery comes in three cooperating pieces:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In the bytecode generator, a new bytecode &lt;code&gt;DefineKeyedOwnProperty&lt;/code&gt;. This gets emitted when generating code for the &lt;code&gt;ClassLiteral::Property&lt;/code&gt; AST nodes representing class field initializers.&lt;/li&gt;
&lt;li&gt;In the TurboFan JIT, a corresponding IR opcode &lt;code&gt;JSDefineKeyedOwnProperty&lt;/code&gt;, which can be compiled from the new bytecode.&lt;/li&gt;
&lt;li&gt;In the IC system, a new &lt;code&gt;DefineKeyedOwnIC&lt;/code&gt; that is used in the interpreter handler of the new bytecode as well as the code compiled from the new IR opcode. To simplify the implementation, the new IC reuses some of the code in &lt;code&gt;KeyedStoreIC&lt;/code&gt; which was intended for ordinary property stores.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now when V8 encounters this class:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  #a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It generates the following bytecode for the initializer &lt;code&gt;#a = 0&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Load the private name symbol for `#a` into r1&lt;/span&gt;&lt;br /&gt;LdaImmutableCurrentContextSlot &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;Star0&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Use the DefineKeyedOwnProperty bytecode to store 0 as the value of&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// the property keyed by the private name symbol `#a` in the instance,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// that is, `#a = 0`.&lt;/span&gt;&lt;br /&gt;LdaZero&lt;br /&gt;DefineKeyedOwnProperty &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; r0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When the initializer is executed enough times, V8 allocates one &lt;a href=&quot;https://ponyfoo.com/articles/an-introduction-to-speculative-optimization-in-v8&quot;&gt;feedback vector slot&lt;/a&gt; for each field being initialized. The slot contains the key of the field being added (in the case of the private field, the private name symbol) and a pair of &lt;a href=&quot;https://v8.dev/docs/hidden-classes&quot;&gt;hidden classes&lt;/a&gt; between which the instance has been transitioning as the result of field initialization. In subsequent initializations, the IC uses the feedback to see if the fields are initialized in the same order on instances with the same hidden classes. If the initialization matches the pattern that V8 has seen before (which is usually the case), V8 takes the fast path and performs the initialization with pre-generated code instead of calling into the runtime, thus speeding up the operation. If the initialization does not match a pattern that V8 has seen before, it falls back to a runtime call to deal with the slow cases.&lt;/p&gt;
&lt;h3 id=&quot;optimizing-named-public-class-fields&quot; tabindex=&quot;-1&quot;&gt;Optimizing named public class fields &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.dev/blog/faster-class-features#optimizing-named-public-class-fields&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To speed up initialization of named public class fields, we reused the existing &lt;code&gt;DefineNamedOwnProperty&lt;/code&gt; bytecode which calls into &lt;code&gt;DefineNamedOwnIC&lt;/code&gt; either in the interpreter or through the code compiled from the &lt;code&gt;JSDefineNamedOwnProperty&lt;/code&gt; IR opcode.&lt;/p&gt;
&lt;p&gt;Now when V8 encounters this class:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  #a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;#a&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It generates the following bytecode for the &lt;code&gt;b = this.#a&lt;/code&gt; initializer:&lt;/p&gt;
&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Load the private name symbol for `#a`&lt;/span&gt;&lt;br /&gt;LdaImmutableCurrentContextSlot &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Load the value of the property keyed by `#a` from the instance into r2&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Note: LdaKeyedProperty is renamed to GetKeyedProperty in the refactoring&lt;/span&gt;&lt;br /&gt;GetKeyedProperty &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Use the DefineKeyedOwnProperty bytecode to store the property keyed&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// by `#a` as the value of the property keyed by `b`, that is, `b = this.#a;`&lt;/span&gt;&lt;br /&gt;DefineNamedOwnProperty &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The original &lt;code&gt;DefineNamedOwnIC&lt;/code&gt; machinery could not be simply plugged into the handling of the named public class fields, since it was originally intended only for object literal initialization. Previously it expected the target being initialized to be an object that has not yet been touched by the user since its creation, which was always true for object literals, but the class fields can be initialized on user-defined objects when the class extends a base class whose constructor overrides the target:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Proxy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;defineProperty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;object&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; key&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; desc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;          console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'object:'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; object&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;          console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'key:'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; key&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;          console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'desc:'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; desc&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  #b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// Not observable.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// object: { a: 1 },&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// key: 'a',&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// desc: {value: 2, writable: true, enumerable: true, configurable: true}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To deal with these targets, we patched the IC to fall back to the runtime when it sees that the object being initialized is a proxy, if the field being defined already exists on the object, or if the object just has a hidden class that the IC has not seen before. It is still possible to optimize the edge cases if they become common enough, but so far it seems better to trade the performance of them for simplicity of the implementation.&lt;/p&gt;
&lt;h2 id=&quot;optimizing-private-methods&quot; tabindex=&quot;-1&quot;&gt;Optimizing private methods &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.dev/blog/faster-class-features#optimizing-private-methods&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;the-implementation-of-private-methods&quot; tabindex=&quot;-1&quot;&gt;The implementation of private methods &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.dev/blog/faster-class-features#the-implementation-of-private-methods&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In &lt;a href=&quot;https://tc39.es/ecma262/#sec-privatemethodoraccessoradd&quot;&gt;the specification&lt;/a&gt;, the private methods are described as if they are installed on the instances but not on the class. In order to save memory, however, V8's implementation stores the private methods along with a private brand symbol in a context associated with the class. When the constructor is invoked, V8 only stores a reference to that context in the instance, with the private brand symbol as the key.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.dev/_img/faster-class-features/class-evaluation-and-instantiation.svg&quot; alt=&quot;&quot; width=&quot;780&quot; height=&quot;415&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;Evaluation and instantiation of classes with private methods&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;When the private methods are accessed, V8 walks the context chain starting from the execution context to find the class context, reads a statically known slot from the found context to get the private brand symbol for the class, then checks if the instance has a property keyed by this brand symbol to see if the instance is created from this class. If the brand check passes, V8 loads the private method from another known slot in the same context and completes the access.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.dev/_img/faster-class-features/access-private-methods.svg&quot; alt=&quot;&quot; width=&quot;828&quot; height=&quot;412&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;Access of private methods&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;Take this snippet as an example:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;#a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;V8 used to generate the following bytecode for the constructor of &lt;code&gt;A&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Load the private brand symbol for class A from the context&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// and store it into r1.&lt;/span&gt;&lt;br /&gt;LdaImmutableCurrentContextSlot &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;Star r1&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Load the target into r0.&lt;/span&gt;&lt;br /&gt;Mov &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; r0&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Load the current context into r2.&lt;/span&gt;&lt;br /&gt;Mov &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;context&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; r2&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Call the runtime %AddPrivateBrand() function to store the context in&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// the instance with the private brand as key.&lt;/span&gt;&lt;br /&gt;CallRuntime &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;AddPrivateBrand&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; r0&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;r2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since there was also a call to the runtime function &lt;code&gt;%AddPrivateBrand()&lt;/code&gt;, the overhead made the constructor much slower than constructors of classes with only public methods.&lt;/p&gt;
&lt;h3 id=&quot;optimizing-initialization-of-private-brands&quot; tabindex=&quot;-1&quot;&gt;Optimizing initialization of private brands &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.dev/blog/faster-class-features#optimizing-initialization-of-private-brands&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To speed up the installation of the private brands, in most cases we just reuse the &lt;code&gt;DefineKeyedOwnProperty&lt;/code&gt; machinery added for the optimization of private fields:&lt;/p&gt;
&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Load the private brand symbol for class A from the context&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// and store it into r1&lt;/span&gt;&lt;br /&gt;LdaImmutableCurrentContextSlot &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;Star0&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Use the DefineKeyedOwnProperty bytecode to store the&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// context in the instance with the private brand as key&lt;/span&gt;&lt;br /&gt;Ldar &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;context&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;DefineKeyedOwnProperty &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; r0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://v8.dev/_img/faster-class-features/private-methods-performance.svg&quot; alt=&quot;&quot; width=&quot;2462&quot; height=&quot;1329&quot; loading=&quot;lazy&quot; /&gt;&lt;figcaption&gt;Performance of instance initializations of classes with different methods&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;There is a caveat, however: if the class is a derived class whose constructor calls &lt;code&gt;super()&lt;/code&gt;,  the initialization of the private methods - and in our case, the installation of the private brand symbol - has to happen after &lt;code&gt;super()&lt;/code&gt; returns:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// This throws from a new B() call because super() has not yet returned.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;callMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;#method&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;callMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;#method&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As described before, when initializing the brand, V8 also stores a reference to the class context in the instance. This reference isn't used in brand checks, but is instead intended for the debugger to retrieve a list of private methods from the instance without knowing which class it is constructed from. When &lt;code&gt;super()&lt;/code&gt; is invoked directly in the constructor, V8 can simply load the context from the context register (which is what &lt;code&gt;Mov &amp;lt;context&amp;gt;, r2&lt;/code&gt; or &lt;code&gt;Ldar &amp;lt;context&amp;gt;&lt;/code&gt; in the bytecodes above does) to perform the initialization, but &lt;code&gt;super()&lt;/code&gt; can also be invoked from a nested arrow function, which in turn can be invoked from a different context. In this case, V8 falls back to a runtime function (still named &lt;code&gt;%AddPrivateBrand()&lt;/code&gt;) to look for the class context in the context chain instead of relying on the context register. For example, for the &lt;code&gt;callSuper&lt;/code&gt; function below:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;#method&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;callSuper&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// ...do something&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;callSuper&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;V8 now generates the following bytecode:&lt;/p&gt;
&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Invoke the super constructor to construct the instance&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// and store it into r3.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Load the private brand symbol from the class context at&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// depth 1 from the current context and store it into r4&lt;/span&gt;&lt;br /&gt;LdaImmutableContextSlot &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;context&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;Star4&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Load the depth 1 as an Smi into r6&lt;/span&gt;&lt;br /&gt;LdaSmi &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;Star6&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Load the current context into r5&lt;/span&gt;&lt;br /&gt;Mov &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;context&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; r5&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Use the %AddPrivateBrand() to locate the class context at&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// depth 1 from the current context and store it in the instance&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// with the private brand symbol as key&lt;/span&gt;&lt;br /&gt;CallRuntime &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;AddPrivateBrand&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; r3&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;r6&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this case the cost of the runtime call is back so initializing instances of this class is still going to be slower compared to initializing instances of classes with only public methods. It is possible to use a dedicated bytecode to implement what &lt;code&gt;%AddPrivateBrand()&lt;/code&gt; does, but since invoking &lt;code&gt;super()&lt;/code&gt; in a nested arrow function is quite rare, we again traded the performance for simplicity of the implementation.&lt;/p&gt;
&lt;h2 id=&quot;final-notes&quot; tabindex=&quot;-1&quot;&gt;Final notes &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.dev/blog/faster-class-features#final-notes&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The work mentioned in this blog post is also included in the &lt;a href=&quot;https://nodejs.org/en/blog/announcements/v18-release-announce/&quot;&gt;Node.js 18.0.0 release&lt;/a&gt;. Previously, Node.js switched to symbol properties in a few built-in classes that had been using private fields in order to include them into the embedded bootstrap snapshot as well as to improve the performance of the constructors (see &lt;a href=&quot;https://www.nearform.com/blog/node-js-and-the-struggles-of-being-an-eventtarget/&quot;&gt;this blog post&lt;/a&gt; for more context). With the improved support of class features in V8, Node.js &lt;a href=&quot;https://github.com/nodejs/node/pull/42361&quot;&gt;switched back to private class fields&lt;/a&gt; in these classes and Node.js's benchmarks showed that &lt;a href=&quot;https://github.com/nodejs/node/pull/42361#issuecomment-1068961385&quot;&gt;these changes did not introduce any performance regressions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks to Igalia and Bloomberg for contributing this implementation!&lt;/p&gt;
</content></entry><entry><title>V8 release v9.9</title><link href="https://v8.dev/blog/v8-release-99"><updated>2022-01-31T00:00:00Z</updated><id>https://v8.dev/blog/v8-release-99</id><author><name>Ingvar Stepanyan (@RReverser), at his 99%</name></author><content type="html">&lt;p&gt;Every four weeks, we create a new branch of V8 as part of our &lt;a href=&quot;https://v8.dev/docs/release-process&quot;&gt;release process&lt;/a&gt;. Each version is branched from V8’s Git main immediately before a Chrome Beta milestone. Today we’re pleased to announce our newest branch, &lt;a href=&quot;https://chromium.googlesource.com/v8/v8.git/+log/branch-heads/9.9&quot;&gt;V8 version 9.9&lt;/a&gt;, which is in beta until its release in coordination with Chrome 99 Stable in several weeks. V8 v9.9 is filled with all sorts of developer-facing goodies. This post provides a preview of some of the highlights in anticipation of the release.&lt;/p&gt;
&lt;h2 id=&quot;javascript&quot; tabindex=&quot;-1&quot;&gt;JavaScript &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.dev/blog/v8-release-99#javascript&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;intl.locale-extensions&quot; tabindex=&quot;-1&quot;&gt;Intl.Locale extensions &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.dev/blog/v8-release-99#intl.locale-extensions&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In v7.4 we launched the &lt;a href=&quot;https://v8.dev/blog/v8-release-74#intl.locale&quot;&gt;&lt;code&gt;Intl.Locale&lt;/code&gt; API&lt;/a&gt;. With v9.9, we added seven new properties to the &lt;code&gt;Intl.Locale&lt;/code&gt; object: &lt;code&gt;calendars&lt;/code&gt;, &lt;code&gt;collations&lt;/code&gt;, &lt;code&gt;hourCycles&lt;/code&gt;, &lt;code&gt;numberingSystems&lt;/code&gt;, &lt;code&gt;timeZones&lt;/code&gt;, &lt;code&gt;textInfo&lt;/code&gt;, and &lt;code&gt;weekInfo&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;calendars&lt;/code&gt;, &lt;code&gt;collations&lt;/code&gt;, &lt;code&gt;hourCycles&lt;/code&gt;, &lt;code&gt;numberingSystems&lt;/code&gt;, and &lt;code&gt;timeZones&lt;/code&gt; property of &lt;code&gt;Intl.Locale&lt;/code&gt; return an array of preferred identifiers of those in common use, designed to be use with other &lt;code&gt;Intl&lt;/code&gt; API:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; arabicEgyptLocale &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Intl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Locale&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'ar-EG'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// ar-EG&lt;/span&gt;&lt;br /&gt;arabicEgyptLocale&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;calendars&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// ['gregory', 'coptic', 'islamic', 'islamic-civil', 'islamic-tbla']&lt;/span&gt;&lt;br /&gt;arabicEgyptLocale&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;collations&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// ['compat', 'emoji', 'eor']&lt;/span&gt;&lt;br /&gt;arabicEgyptLocale&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;hourCycles&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// ['h12']&lt;/span&gt;&lt;br /&gt;arabicEgyptLocale&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;numberingSystems&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// ['arab']&lt;/span&gt;&lt;br /&gt;arabicEgyptLocale&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;timeZones&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// ['Africa/Cairo']&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;textInfo&lt;/code&gt; property of &lt;code&gt;Intl.Locale&lt;/code&gt; returns an object to specify the information related to text. Currently it only has one property, &lt;code&gt;direction&lt;/code&gt;, to indicate default directionality for text in the locale. It is designed to be used for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir&quot;&gt;HTML &lt;code&gt;dir&lt;/code&gt; attribute&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/direction&quot;&gt;CSS &lt;code&gt;direction&lt;/code&gt; property&lt;/a&gt;. It indicates the ordering of characters - &lt;code&gt;ltr&lt;/code&gt; (left-to-right) or &lt;code&gt;rtl&lt;/code&gt; (right-to-left):&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;arabicEgyptLocale&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;textInfo&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// { direction: 'rtl' }&lt;/span&gt;&lt;br /&gt;japaneseLocale&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;textInfo&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// { direction: 'ltr' }&lt;/span&gt;&lt;br /&gt;chineseTaiwanLocale&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;textInfo&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// { direction: 'ltr' }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;weekInfo&lt;/code&gt; property of &lt;code&gt;Intl.Locale&lt;/code&gt; returns an object to specify the information related to week. The &lt;code&gt;firstDay&lt;/code&gt; property in the return object is a number, ranging from 1 to 7, indicating which day of the week is considered the first day, for calendar purposes. 1 specifies Monday, 2 - Tuesday, 3 - Wednesday, 4 - Thursday, 5 - Friday, 6 - Saturday, and 7 - Sunday. The &lt;code&gt;minimalDays&lt;/code&gt; property in the return object is the minimum days required in the first week of a month or year, for calendar purposes. The &lt;code&gt;weekend&lt;/code&gt; property in the return object is an array of integers, usually with two elements, encoded the same as &lt;code&gt;firstDay&lt;/code&gt;. It indicates which days of the week are considered as part of the 'weekend', for calendar purposes. Notice that the number of days in the weekend are different in each locale and may not be contiguous.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;arabicEgyptLocale&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;weekInfo&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// {firstDay: 6, weekend: [5, 6], minimalDays: 1}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// First day of the week is Saturday. Weekend is Friday and Saturday.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// The first week of a month or a year is a week which has at least 1&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// day in that month or year.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;intl-enumeration&quot; tabindex=&quot;-1&quot;&gt;Intl Enumeration &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.dev/blog/v8-release-99#intl-enumeration&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In v9.9, we added a new function &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/supportedValuesOf&quot;&gt;&lt;code&gt;Intl.supportedValuesOf(code)&lt;/code&gt;&lt;/a&gt; that returns the array of supported identifiers in v8 for the Intl APIs. The supported &lt;code&gt;code&lt;/code&gt; values are &lt;code&gt;calendar&lt;/code&gt;, &lt;code&gt;collation&lt;/code&gt;, &lt;code&gt;currency&lt;/code&gt;,&lt;code&gt;numberingSystem&lt;/code&gt;, &lt;code&gt;timeZone&lt;/code&gt;, and &lt;code&gt;unit&lt;/code&gt;. The information in this new method is designed to allow web developers to easily discover which value is supported by the implementation.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;Intl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;supportedValuesOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'calendar'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// ['buddhist', 'chinese', 'coptic', 'dangi', ...]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Intl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;supportedValuesOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'collation'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// ['big5han', 'compat', 'dict', 'emoji', ...]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Intl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;supportedValuesOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'currency'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// ['ADP', 'AED', 'AFA', 'AFN', 'ALK', 'ALL', 'AMD', ...]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Intl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;supportedValuesOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'numberingSystem'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// ['adlm', 'ahom', 'arab', 'arabext', 'bali', ...]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Intl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;supportedValuesOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'timeZone'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// ['Africa/Abidjan', 'Africa/Accra', 'Africa/Addis_Ababa', 'Africa/Algiers', ...]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Intl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;supportedValuesOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'unit'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// ['acre', 'bit', 'byte', 'celsius', 'centimeter', ...]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;v8-api&quot; tabindex=&quot;-1&quot;&gt;V8 API &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.dev/blog/v8-release-99#v8-api&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Please use &lt;code&gt;git log branch-heads/9.8..branch-heads/9.9 include/v8\*.h&lt;/code&gt; to get a list of the API changes.&lt;/p&gt;
&lt;p&gt;Developers with an active V8 checkout can use &lt;code&gt;git checkout -b 9.9 -t branch-heads/9.9&lt;/code&gt; to experiment with the new features in V8 v9.9. Alternatively you can &lt;a href=&quot;https://www.google.com/chrome/browser/beta.html&quot;&gt;subscribe to Chrome’s Beta channel&lt;/a&gt; and try the new features out yourself soon.&lt;/p&gt;
</content></entry><entry><title>Oilpan library</title><link href="https://v8.dev/blog/oilpan-library"><updated>2021-11-10T00:00:00Z</updated><id>https://v8.dev/blog/oilpan-library</id><author><name>Anton Bikineev, Omer Katz (@omerktz), and Michael Lippautz (@mlippautz), efficient and effective file movers</name></author><content type="html">&lt;p&gt;While the title of this post may suggest taking a deep dive into a collection of books around oil pans – which, considering construction norms for pans, is a topic with a surprising amount of literature – we are instead looking a bit closer at Oilpan, a C++ garbage collector that is hosted through V8 as a library since V8 v9.4.&lt;/p&gt;
&lt;p&gt;Oilpan is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Tracing_garbage_collection&quot;&gt;trace-based garbage collector&lt;/a&gt;, meaning that it determines live objects by traversing an object graph in a marking phase. Dead objects are then reclaimed in a sweeping phase, which we have &lt;a href=&quot;https://v8.dev/blog/high-performance-cpp-gc&quot;&gt;blogged about in the past&lt;/a&gt;. Both phases may run interleaved or parallel to actual C++ application code. Reference handling for heap objects is precise, and conservative for the native stack. This means that Oilpan knows where references are on the heap but has to scan the memory assuming random bit sequences represent pointers for the stack. Oilpan also supports compaction (defragmenting the heap) for certain objects when garbage collection runs without a native stack.&lt;/p&gt;
&lt;p&gt;So, what’s the deal with providing it as a library through V8?&lt;/p&gt;
&lt;p&gt;Blink, being forked from WebKit, originally used reference counting, a &lt;a href=&quot;https://en.cppreference.com/w/cpp/memory/shared_ptr&quot;&gt;well-known paradigm for C++ code&lt;/a&gt;, for managing its on-heap memory. Reference counting is supposed to solve memory management issues but is known to be prone to memory leaks due to cycles. On top of this inherent problem, Blink also suffered from &lt;a href=&quot;https://en.wikipedia.org/wiki/Dangling_pointer&quot;&gt;use-after-free issues&lt;/a&gt; as sometimes reference counting would be omitted for performance reasons. Oilpan was initially developed specifically for Blink to simplify the programming model and get rid of memory leaks and use-after-free issues. We believe Oilpan succeeded in simplifying the model and also in making the code more secure.&lt;/p&gt;
&lt;p&gt;Another maybe less pronounced reason for introducing Oilpan in Blink was to aid integration into other garbage collected systems such as V8 which eventually materialized in implementing the &lt;a href=&quot;https://v8.dev/blog/tracing-js-dom&quot;&gt;unified JavaScript and C++ heap&lt;/a&gt; where Oilpan takes care of processing C++ objects. With more and more object hierarchies being managed and better integration with V8, Oilpan became increasingly complex over time and the team realized that they were reinventing the same concepts as in V8’s garbage collector and solving the same problems. Integration in Blink required building around 30k targets to actually run a hello world garbage collection test for unified heap.&lt;/p&gt;
&lt;p&gt;Early 2020, we started a journey in carving out Oilpan from Blink and encapsulating it into a library. We decided to host the code in V8, reuse abstractions where possible, and do some spring cleaning on the garbage collection interface. In addition to fixing all of the aforementioned issues, &lt;a href=&quot;https://docs.google.com/document/d/1ylZ25WF82emOwmi_Pg-uU6BI1A-mIbX_MG9V87OFRD8/&quot;&gt;a library&lt;/a&gt; would also enable other projects to make use of garbage-collected C++. We launched the library in V8 v9.4 and enabled it in Blink starting in Chromium M94.&lt;/p&gt;
&lt;h2 id=&quot;what%E2%80%99s-in-the-box%3F&quot; tabindex=&quot;-1&quot;&gt;What’s in the box? &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.dev/blog/oilpan-library#what%E2%80%99s-in-the-box%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Similar to the rest of V8, Oilpan now provides a &lt;a href=&quot;https://chromium.googlesource.com/v8/v8.git/+/HEAD/include/cppgc/&quot;&gt;stable API&lt;/a&gt; and embedders may rely on the regular &lt;a href=&quot;https://v8.dev/docs/api&quot;&gt;V8 conventions&lt;/a&gt;. For example, this means that APIs are properly documented (see &lt;a href=&quot;https://chromium.googlesource.com/v8/v8.git/+/main/include/cppgc/garbage-collected.h#17&quot;&gt;GarbageCollected&lt;/a&gt;) and will go through a deprecation period in case they are subject to being removed or changed.&lt;/p&gt;
&lt;p&gt;The core of Oilpan is available as a stand-alone C++ garbage collector in the &lt;code&gt;cppgc&lt;/code&gt; namespace. The setup also allows for reusing an existing V8 platform to create a heap for managed C++ objects. Garbage collections can be configured to run automatically, integrating in the task infrastructure or can be triggered explicitly considering the native stack as well. The idea is to allow embedders that just want managed C++ objects to avoid dealing with V8 as a whole, see this &lt;a href=&quot;https://chromium.googlesource.com/v8/v8.git/+/main/samples/cppgc/hello-world.cc&quot;&gt;hello world program&lt;/a&gt; as an example. An embedder of this configuration is PDFium which uses Oilpan’s stand-alone version for &lt;a href=&quot;https://groups.google.com/a/chromium.org/g/chromium-dev/c/RAqBXZWsADo/m/9NH0uGqCAAAJ?utm_medium=email&amp;amp;utm_source=footer&quot;&gt;securing XFA&lt;/a&gt; which allows for more dynamic PDF content.&lt;/p&gt;
&lt;p&gt;Conveniently, tests for the core of Oilpan use this setup which means that it’s a matter of seconds to build and run a specific garbage collection test. As of today, &lt;a href=&quot;https://source.chromium.org/chromium/chromium/src/+/main:v8/test/unittests/heap/cppgc/&quot;&gt;&amp;gt;400 of such unit tests&lt;/a&gt; for the core of Oilpan exist. The setup also serves as a playground to experiment and try out new things and may be used to validate assumptions around raw performance.&lt;/p&gt;
&lt;p&gt;Oilpan library also takes care of processing C++ objects when running with the unified heap through V8 which allows full tangling of C++ and JavaScript object graphs. This configuration is used in Blink for managing the C++ memory of the DOM and more. Oilpan also exposes a trait system that allows for extending the core of the garbage collector with types that have very specific needs for determining liveness. This way it is possible for Blink to provide its own collection libraries that even allow building JavaScript-style ephemeron maps (&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap&quot;&gt;&lt;code&gt;WeakMap&lt;/code&gt;&lt;/a&gt;) in C++. We don’t recommend this to everyone but it shows what this system is capable of in case there’s a need for customization.&lt;/p&gt;
&lt;h2 id=&quot;where-are-we-headed%3F&quot; tabindex=&quot;-1&quot;&gt;Where are we headed? &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.dev/blog/oilpan-library#where-are-we-headed%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Oilpan library provides us with a solid foundation that we can now leverage to improve performance. Where we would previously need to specify garbage collection specific functionality on V8’s public API to interact with Oilpan, we can now directly implement what we need. This allows for fast iteration and also taking shortcuts and improving performance where possible.&lt;/p&gt;
&lt;p&gt;We also see potential in providing certain basic containers directly through Oilpan to avoid reinventing the wheel. This would allow other embedders to benefit from data structures that were previously created specifically for Blink.&lt;/p&gt;
&lt;p&gt;Seeing a bright future for Oilpan, we would like to mention that the existing &lt;a href=&quot;https://source.chromium.org/chromium/chromium/src/+/main:v8/include/v8-embedder-heap.h;l=75&quot;&gt;&lt;code&gt;EmbedderHeapTracer&lt;/code&gt;&lt;/a&gt; APIs are not going to be further improved and may be deprecated at some point. Assuming embedders making use of such APIs already implemented their own tracing system, migrating to Oilpan should be as simple as just allocating the C++ objects on a newly created &lt;a href=&quot;https://source.chromium.org/chromium/chromium/src/+/main:v8/include/v8-cppgc.h;l=91&quot;&gt;Oilpan heap&lt;/a&gt; that is then attached to a V8 Isolate. Existing infrastructure for modeling references such as &lt;a href=&quot;https://source.chromium.org/chromium/chromium/src/+/main:v8/include/v8-traced-handle.h;l=334&quot;&gt;&lt;code&gt;TracedReference&lt;/code&gt;&lt;/a&gt; (for references into V8) and &lt;a href=&quot;https://source.chromium.org/chromium/chromium/src/+/main:v8/include/v8-object.h;l=502&quot;&gt;internal fields&lt;/a&gt; (for references outgoing from V8) are supported by Oilpan.&lt;/p&gt;
&lt;p&gt;Stay tuned for more garbage collection improvements in the future!&lt;/p&gt;
&lt;p&gt;Encountering issues, or have suggestions? Let us know:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;mailto:oilpan-dev@chromium.org&quot;&gt;oilpan-dev@chromium.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Monorail: &lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/entry?template=Defect+report+from+user&amp;amp;components=Blink%3EGarbageCollection&quot;&gt;Blink&amp;gt;GarbageCollection&lt;/a&gt; (Chromium), &lt;a href=&quot;https://bugs.chromium.org/p/v8/issues/entry?template=Defect+report+from+user&amp;amp;components=Oilpan&quot;&gt;Oilpan&lt;/a&gt; (V8)&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><title>V8 release v9.7</title><link href="https://v8.dev/blog/v8-release-97"><updated>2021-11-05T00:00:00Z</updated><id>https://v8.dev/blog/v8-release-97</id><author><name>Ingvar Stepanyan (@RReverser)</name></author><content type="html">&lt;p&gt;Every four weeks, we create a new branch of V8 as part of our &lt;a href=&quot;https://v8.dev/docs/release-process&quot;&gt;release process&lt;/a&gt;. Each version is branched from V8’s Git main immediately before a Chrome Beta milestone. Today we’re pleased to announce our newest branch, &lt;a href=&quot;https://chromium.googlesource.com/v8/v8.git/+log/branch-heads/9.7&quot;&gt;V8 version 9.7&lt;/a&gt;, which is in beta until its release in coordination with Chrome 97 Stable in several weeks. V8 v9.7 is filled with all sorts of developer-facing goodies. This post provides a preview of some of the highlights in anticipation of the release.&lt;/p&gt;
&lt;h2 id=&quot;javascript&quot; tabindex=&quot;-1&quot;&gt;JavaScript &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.dev/blog/v8-release-97#javascript&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;findlast-and-findlastindex-array-methods&quot; tabindex=&quot;-1&quot;&gt;&lt;code&gt;findLast&lt;/code&gt; and &lt;code&gt;findLastIndex&lt;/code&gt; array methods &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.dev/blog/v8-release-97#findlast-and-findlastindex-array-methods&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;findLast&lt;/code&gt; and &lt;code&gt;findLastIndex&lt;/code&gt; methods on &lt;code&gt;Array&lt;/code&gt;s and &lt;code&gt;TypedArray&lt;/code&gt;s find elements that match a predicate from the end of an array.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findLast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; el &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// → 4 (last even element)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These methods are available without a flag starting in v9.7.&lt;/p&gt;
&lt;p&gt;For more details, please see our &lt;a href=&quot;https://v8.dev/features/finding-in-arrays#finding-elements-from-the-end&quot;&gt;feature explainer&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;v8-api&quot; tabindex=&quot;-1&quot;&gt;V8 API &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.dev/blog/v8-release-97#v8-api&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Please use &lt;code&gt;git log branch-heads/9.6..branch-heads/9.7 include/v8\*.h&lt;/code&gt; to get a list of the API changes.&lt;/p&gt;
&lt;p&gt;Developers with an active V8 checkout can use &lt;code&gt;git checkout -b 9.7 -t branch-heads/9.7&lt;/code&gt; to experiment with the new features in V8 v9.7. Alternatively you can &lt;a href=&quot;https://www.google.com/chrome/browser/beta.html&quot;&gt;subscribe to Chrome’s Beta channel&lt;/a&gt; and try the new features out yourself soon.&lt;/p&gt;
</content></entry><entry><title>WebAssembly Dynamic Tiering ready to try in Chrome 96</title><link href="https://v8.dev/blog/wasm-dynamic-tiering"><updated>2021-10-29T00:00:00Z</updated><id>https://v8.dev/blog/wasm-dynamic-tiering</id><author><name>Andreas Haas — Tierisch fun</name></author><content type="html">&lt;p&gt;V8 has two compilers to compile WebAssembly code to machine code that can then be executed: the baseline compiler &lt;strong&gt;Liftoff&lt;/strong&gt; and the optimizing compiler &lt;strong&gt;TurboFan&lt;/strong&gt;. Liftoff can generate code much faster than TurboFan, which allows fast startup time. TurboFan, on the other hand, can generate faster code, which allows high peak performance.&lt;/p&gt;
&lt;p&gt;In the current configuration of Chrome a WebAssembly module first gets compiled completely by Liftoff. After Liftoff compilation is finished, the whole module gets compiled again immediately in the background by TurboFan. With streaming compilation, TurboFan compilation can start earlier if Liftoff compiles WebAssembly code faster than the WebAssembly code is downloaded. The initial Liftoff compilation allows fast startup time, whereas the TurboFan compilation in the background provides high peak performance as soon as possible. More details about Liftoff, TurboFan, and the whole compilation process can be found in a &lt;a href=&quot;https://v8.dev/docs/wasm-compilation-pipeline&quot;&gt;separate document&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Compiling the whole WebAssembly module with TurboFan provides the best possible performance once compilation is completed, but that comes at a cost:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The CPU cores that execute TurboFan compilation in the background can block other tasks that would require the CPU, e.g. workers of the web application.&lt;/li&gt;
&lt;li&gt;TurboFan compilation of unimportant functions may delay the TurboFan compilation of more important functions, which may delay the web application to reach full performance.&lt;/li&gt;
&lt;li&gt;Some WebAssembly functions may never get executed, and spending resources on compiling these functions with TurboFan may not be worth it.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;dynamic-tiering&quot; tabindex=&quot;-1&quot;&gt;Dynamic tiering &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.dev/blog/wasm-dynamic-tiering#dynamic-tiering&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Dynamic tiering should alleviate these issues by compiling only those functions with TurboFan that actually get executed multiple times. Thereby dynamic tiering can change the performance of web applications in several ways: dynamic tiering can speed up startup time by reducing the load on CPUs and thereby allowing startup tasks other than WebAssembly compilation to use the CPU more. Dynamic tiering can also slow down performance by delaying TurboFan compilation for important functions. As V8 does not use on-stack-replacement for WebAssembly code, the execution can be stuck in a loop in Liftoff code, for example. Also code caching is affected, because Chrome only caches TurboFan code, and all functions that never qualify for TurboFan compilation get compiled with Liftoff at startup even when the compiled WebAssembly module already exists in cache.&lt;/p&gt;
&lt;h2 id=&quot;how-to-try-it-out&quot; tabindex=&quot;-1&quot;&gt;How to try it out &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.dev/blog/wasm-dynamic-tiering#how-to-try-it-out&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We encourage interested developers to experiment with the performance impact of dynamic tiering on their web applications. This will allow us to react and avoid potential performance regressions early. Dynamic tiering can be enabled locally by running Chrome with the command line flag &lt;code&gt;--enable-blink-features=WebAssemblyDynamicTiering&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;V8 embedders who want to enable dynamic tiering can do so by setting the V8 flag &lt;code&gt;--wasm-dynamic-tiering&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;testing-in-the-field-with-an-origin-trial&quot; tabindex=&quot;-1&quot;&gt;Testing in the field with an Origin Trial &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.dev/blog/wasm-dynamic-tiering#testing-in-the-field-with-an-origin-trial&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Running Chrome with a command line flag is something a developer can do, but it should not be expected from an end user. To experiment with your application in the field, it is possible to join what is called an &lt;a href=&quot;https://github.com/GoogleChrome/OriginTrials/blob/gh-pages/developer-guide.md&quot;&gt;Origin Trial&lt;/a&gt;. Origin trials allow you to try out experimental features with end users through a special token that is tied to a domain. This special token enables WebAssembly dynamic tiering for the end user on specific pages that include the token. To obtain your own token to run an origin trial, &lt;a href=&quot;https://developer.chrome.com/origintrials/#/view_trial/3716595592487501825&quot;&gt;use the application form&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;give-us-feedback&quot; tabindex=&quot;-1&quot;&gt;Give us feedback &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.dev/blog/wasm-dynamic-tiering#give-us-feedback&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We're looking for feedback from developers trying out this feature as it'll help to get the heuristics right on when TurboFan compilation is useful, and when TurboFan compilation does not pay off and can be avoided. The best way to send feedback is to &lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/detail?id=1260322&quot;&gt;report issues&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>V8 release v9.6</title><link href="https://v8.dev/blog/v8-release-96"><updated>2021-10-13T00:00:00Z</updated><id>https://v8.dev/blog/v8-release-96</id><author><name>Ingvar Stepanyan (@RReverser)</name></author><content type="html">&lt;p&gt;Every four weeks, we create a new branch of V8 as part of our &lt;a href=&quot;https://v8.dev/docs/release-process&quot;&gt;release process&lt;/a&gt;. Each version is branched from V8’s Git master immediately before a Chrome Beta milestone. Today we’re pleased to announce our newest branch, &lt;a href=&quot;https://chromium.googlesource.com/v8/v8.git/+log/branch-heads/9.6&quot;&gt;V8 version 9.6&lt;/a&gt;, which is in beta until its release in coordination with Chrome 96 Stable in several weeks. V8 v9.6 is filled with all sorts of developer-facing goodies. This post provides a preview of some of the highlights in anticipation of the release.&lt;/p&gt;
&lt;h2 id=&quot;webassembly&quot; tabindex=&quot;-1&quot;&gt;WebAssembly &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.dev/blog/v8-release-96#webassembly&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;reference-types&quot; tabindex=&quot;-1&quot;&gt;Reference Types &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.dev/blog/v8-release-96#reference-types&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/WebAssembly/reference-types/blob/master/proposals/reference-types/Overview.md&quot;&gt;Reference Types proposal&lt;/a&gt;, shipped in V8 v9.6, allows using external references from JavaScript opaquely in WebAssembly modules. The &lt;code&gt;externref&lt;/code&gt; (formerly known as &lt;code&gt;anyref&lt;/code&gt;) data type provides a secure way of holding a reference to a JavaScript object and is fully integrated with V8's garbage collector.&lt;/p&gt;
&lt;p&gt;Few toolchains that already have optional support for reference types are &lt;a href=&quot;https://rustwasm.github.io/wasm-bindgen/reference/reference-types.html&quot;&gt;wasm-bindgen for Rust&lt;/a&gt; and &lt;a href=&quot;https://www.assemblyscript.org/compiler.html#command-line-options&quot;&gt;AssemblyScript&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;v8-api&quot; tabindex=&quot;-1&quot;&gt;V8 API &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.dev/blog/v8-release-96#v8-api&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Please use &lt;code&gt;git log branch-heads/9.5..branch-heads/9.6 include/v8\*.h&lt;/code&gt; to get a list of the API changes.&lt;/p&gt;
&lt;p&gt;Developers with an active V8 checkout can use &lt;code&gt;git checkout -b 9.6 -t branch-heads/9.6&lt;/code&gt; to experiment with the new features in V8 v9.6. Alternatively you can &lt;a href=&quot;https://www.google.com/chrome/browser/beta.html&quot;&gt;subscribe to Chrome’s Beta channel&lt;/a&gt; and try the new features out yourself soon.&lt;/p&gt;
</content></entry><entry><title>V8 release v9.5</title><link href="https://v8.dev/blog/v8-release-95"><updated>2021-09-21T00:00:00Z</updated><id>https://v8.dev/blog/v8-release-95</id><author><name>Ingvar Stepanyan (@RReverser)</name></author><content type="html">&lt;p&gt;Every four weeks, we create a new branch of V8 as part of our &lt;a href=&quot;https://v8.dev/docs/release-process&quot;&gt;release process&lt;/a&gt;. Each version is branched from V8’s Git master immediately before a Chrome Beta milestone. Today we’re pleased to announce our newest branch, &lt;a href=&quot;https://chromium.googlesource.com/v8/v8.git/+log/branch-heads/9.5&quot;&gt;V8 version 9.5&lt;/a&gt;, which is in beta until its release in coordination with Chrome 95 Stable in several weeks. V8 v9.5 is filled with all sorts of developer-facing goodies. This post provides a preview of some of the highlights in anticipation of the release.&lt;/p&gt;
&lt;h2 id=&quot;javascript&quot; tabindex=&quot;-1&quot;&gt;JavaScript &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.dev/blog/v8-release-95#javascript&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;intl.displaynames-v2&quot; tabindex=&quot;-1&quot;&gt;&lt;code&gt;Intl.DisplayNames&lt;/code&gt; v2 &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.dev/blog/v8-release-95#intl.displaynames-v2&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In v8.1 we launched the &lt;a href=&quot;https://v8.dev/features/intl-displaynames&quot;&gt;&lt;code&gt;Intl.DisplayNames&lt;/code&gt; API&lt;/a&gt; API in Chrome 81, with supported types “language”, “region”, “script”, and “currency”. With v9.5, we now have added two new supported types: “calendar” and “dateTimeField”. They return the display names of different calendar types and date time fields correspondingly:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; esCalendarNames &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Intl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DisplayNames&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'es'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'calendar'&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; frDateTimeFieldNames &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Intl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DisplayNames&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'fr'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'dateTimeField'&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;esCalendarNames&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'roc'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// &quot;calendario de la República de China&quot;&lt;/span&gt;&lt;br /&gt;frDateTimeFieldNames&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'month'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &quot;mois&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We also enhanced the support for the “language” type with a new languageDisplay option, which could be either “standard” or “dialect” (as the default value if not specified):&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; jaDialectLanguageNames &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Intl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DisplayNames&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'ja'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'language'&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; jaStandardLanguageNames &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Intl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DisplayNames&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'ja'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'language'&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;languageDisplay&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'standard'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;jaDialectLanguageNames&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'en-US'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// &quot;アメリカ英語&quot;&lt;/span&gt;&lt;br /&gt;jaDialectLanguageNames&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'en-AU'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// &quot;オーストラリア英語&quot;&lt;/span&gt;&lt;br /&gt;jaDialectLanguageNames&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'en-GB'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// &quot;イギリス英語&quot;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;jaStandardLanguageNames&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'en-US'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &quot;英語 (アメリカ合衆国)&quot;&lt;/span&gt;&lt;br /&gt;jaStandardLanguageNames&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'en-AU'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &quot;英語 (オーストラリア)&quot;&lt;/span&gt;&lt;br /&gt;jaStandardLanguageNames&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'en-GB'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &quot;英語 (イギリス)&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;extended-timezonename-option&quot; tabindex=&quot;-1&quot;&gt;Extended &lt;code&gt;timeZoneName&lt;/code&gt; option &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.dev/blog/v8-release-95#extended-timezonename-option&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Intl.DateTimeFormat API&lt;/code&gt; in v9.5 now supports four new values for the &lt;code&gt;timeZoneName&lt;/code&gt; option:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“shortGeneric” to output the name of the time zone as in a short generic non-location format, such as “PT”, “ET”,  without indicating whether it is under daylight saving time.&lt;/li&gt;
&lt;li&gt;“longGeneric” to output the name of the time zone as in a short generic non-location format, such as “Pacific Time”, “Mountain Time”, without indicating whether it is under daylight saving time.&lt;/li&gt;
&lt;li&gt;“shortOffset” to output the name of the time zone as in the short localized GMT format, such as “GMT-8”.&lt;/li&gt;
&lt;li&gt;“longOffset” to output the name of the time zone as in the long localized GMT format, such as “GMT-0800”.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;webassembly&quot; tabindex=&quot;-1&quot;&gt;WebAssembly &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.dev/blog/v8-release-95#webassembly&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;exception-handling&quot; tabindex=&quot;-1&quot;&gt;Exception Handling &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.dev/blog/v8-release-95#exception-handling&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;V8 now supports the &lt;a href=&quot;https://github.com/WebAssembly/exception-handling/blob/master/proposals/exception-handling/Exceptions.md&quot;&gt;WebAssembly Exception Handling (Wasm EH) proposal&lt;/a&gt; so that modules compiled with a compatible toolchain (e.g. &lt;a href=&quot;https://emscripten.org/docs/porting/exceptions.html&quot;&gt;Emscripten&lt;/a&gt;) can be executed in V8. The proposal is designed to keep the overhead low compared to the previous workarounds using JavaScript.&lt;/p&gt;
&lt;p&gt;For example, we compiled the &lt;a href=&quot;https://github.com/WebAssembly/binaryen/&quot;&gt;Binaryen&lt;/a&gt; optimizer to WebAssembly with old and new exception handling implementations.&lt;/p&gt;
&lt;p&gt;When exception handling is enabled, the code size increase &lt;a href=&quot;https://github.com/WebAssembly/exception-handling/issues/20#issuecomment-919716209&quot;&gt;goes down from about 43% for the old JavaScript-based exception handling to only 9% for the new Wasm EH feature&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When we ran &lt;code&gt;wasm-opt.wasm -O3&lt;/code&gt; on a few big test files, Wasm EH's version showed no performance loss compared to the baseline without exceptions, while JavaScript-based EH version took around 30% longer.&lt;/p&gt;
&lt;p&gt;However, Binaryen uses exception checking sparsely. In exception-heavy workloads the performance difference is expected to be even larger.&lt;/p&gt;
&lt;h2 id=&quot;v8-api&quot; tabindex=&quot;-1&quot;&gt;V8 API &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.dev/blog/v8-release-95#v8-api&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The main v8.h header file has been split into several parts which can be included separately. For instance &lt;code&gt;v8-isolate.h&lt;/code&gt; now contains the &lt;code&gt;v8::Isolate class&lt;/code&gt;. Many header files that declare methods passing &lt;code&gt;v8::Local&amp;lt;T&amp;gt;&lt;/code&gt; can now import &lt;code&gt;v8-forward.h&lt;/code&gt; to get the definition of &lt;code&gt;v8::Local&lt;/code&gt; and all v8 heap object types.&lt;/p&gt;
&lt;p&gt;Please use &lt;code&gt;git log branch-heads/9.4..branch-heads/9.5 include/v8\*.h&lt;/code&gt; to get a list of the API changes.&lt;/p&gt;
&lt;p&gt;Developers with an active V8 checkout can use &lt;code&gt;git checkout -b 9.5 -t branch-heads/9.5&lt;/code&gt; to experiment with the new features in V8 v9.5. Alternatively you can &lt;a href=&quot;https://www.google.com/chrome/browser/beta.html&quot;&gt;subscribe to Chrome’s Beta channel&lt;/a&gt; and try the new features out yourself soon.&lt;/p&gt;
</content></entry><entry><title>V8 release v9.4</title><link href="https://v8.dev/blog/v8-release-94"><updated>2021-09-06T00:00:00Z</updated><id>https://v8.dev/blog/v8-release-94</id><author><name>Ingvar Stepanyan (@RReverser)</name></author><content type="html">&lt;p&gt;Every six weeks, we create a new branch of V8 as part of our &lt;a href=&quot;https://v8.dev/docs/release-process&quot;&gt;release process&lt;/a&gt;. Each version is branched from V8’s Git master immediately before a Chrome Beta milestone. Today we’re pleased to announce our newest branch, &lt;a href=&quot;https://chromium.googlesource.com/v8/v8.git/+log/branch-heads/9.4&quot;&gt;V8 version 9.4&lt;/a&gt;, which is in beta until its release in coordination with Chrome 94 Stable in several weeks. V8 v9.4 is filled with all sorts of developer-facing goodies. This post provides a preview of some of the highlights in anticipation of the release.&lt;/p&gt;
&lt;h2 id=&quot;javascript&quot; tabindex=&quot;-1&quot;&gt;JavaScript &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.dev/blog/v8-release-94#javascript&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;class-static-initialization-blocks&quot; tabindex=&quot;-1&quot;&gt;Class static initialization blocks &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.dev/blog/v8-release-94#class-static-initialization-blocks&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Classes get the ability to group code that should run once per class evaluation via static initialization blocks.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// This block will run when the class itself is evaluated&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;C's static block&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Starting in v9.4, class static initialization blocks will be available without a need for the &lt;code&gt;--harmony-class-static-blocks&lt;/code&gt; flag. For all the detailed semantics around the scoping of these blocks, please see &lt;a href=&quot;https://v8.dev/features/class-static-initializer-blocks&quot;&gt;our explainer&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;v8-api&quot; tabindex=&quot;-1&quot;&gt;V8 API &lt;a class=&quot;bookmark&quot; href=&quot;https://v8.dev/blog/v8-release-94#v8-api&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Please use &lt;code&gt;git log branch-heads/9.3..branch-heads/9.4 include/v8.h&lt;/code&gt; to get a list of the API changes.&lt;/p&gt;
&lt;p&gt;Developers with an active V8 checkout can use &lt;code&gt;git checkout -b 9.4 -t branch-heads/9.4&lt;/code&gt; to experiment with the new features in V8 v9.4. Alternatively you can &lt;a href=&quot;https://www.google.com/chrome/browser/beta.html&quot;&gt;subscribe to Chrome’s Beta channel&lt;/a&gt; and try the new features out yourself soon.&lt;/p&gt;
</content></entry></feed>