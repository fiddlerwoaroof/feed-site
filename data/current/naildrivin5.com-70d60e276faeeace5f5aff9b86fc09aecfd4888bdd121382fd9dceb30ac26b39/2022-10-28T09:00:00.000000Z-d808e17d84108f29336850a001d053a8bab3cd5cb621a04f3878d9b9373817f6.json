{
  "title":"How I Use Tachyons for CSS",
  "date":"2022-10-28T09:00:00.000000Z",
  "author":null,
  "id":"https://naildrivin5.com/blog/2022/10/28/how-i-use-tachyons-for-css",
  "link":"https://naildrivin5.com/blog/2022/10/28/how-i-use-tachyons-for-css.html",
  "content":"<p>I’ve long come to prefer the “functional” style of CSS, where each class represents a single CSS property set to a single value. I learned this from <a href=\"https://mrmrs.cc\">Adam Morse</a>, author of <a href=\"http://tachyons.io\">Tachyons</a>, which is a older framework, but it still checks out.  I’m not here to advocate for this style (read <a href=\"https://mrmrs.cc/writing/scalable-css\">Adam’s post</a> for that), but to talk about how I use SASS to create higher-level re-usable styles with Tachyons, achieve the best of all worlds when managing CSS, all without some unstable, unfriendly JavaScript toolchain.</p>\n\n\n\n<p>One benefit of Tachyhons-like frameworks is that you don’t have to create a named component or\nsemantic class for everything you want to style.  If you only ever need a padded box with a grey\nrounded border one time in your app, you can just create it directly:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;pa2 ba br3 b--gray&quot;</span><span class=\"nt\">&gt;</span>\nSome Stuff\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div></div>\n\n<p>But even modest apps will end up with reusable components.  A common example is a button.   You might have a button like so:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">&quot;#&quot;</span> <span class=\"na\">class=</span><span class=\"s\">&quot;ph3 pv2 ba br3 white b--green bg-green&quot;</span><span class=\"nt\">&gt;</span>\n  Click Me\n<span class=\"nt\">&lt;/a&gt;</span>\n</code></pre></div></div>\n\n<aside>\n<a href=\"#\">\n  Click Me\n</a>\n</aside>\n\n<p>(This says that our horizontal padding is the 3rd step of our design system’s spacing, our\nvertical spacing is the 2nd step (smaller), our border radius is the 3rd roundest, our text is\nwhite and both our background and border colors are the green from our design system. Great.)</p>\n\n<p>If we need to use a button like this a lot, we don’t want to repeat that string of classes. In\nfact, that is often what makes people bristle at this style.</p>\n\n<h2 id=\"remove-trivial-duplication-with-your-templating-system\">Remove Trivial Duplication with Your Templating System</h2>\n\n<p>This type of duplication, where you need almost identical markup in several places, can be\neliminated using the templating system of your web framework. In Rails, you could make a partial:</p>\n\n<div class=\"language-erb highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">&lt;%=</span> <span class=\"n\">render</span> <span class=\"ss\">partial: </span><span class=\"s2\">&quot;shared/button&quot;</span><span class=\"p\">,</span>\n           <span class=\"ss\">locals: </span><span class=\"p\">{</span> <span class=\"ss\">href: </span><span class=\"s2\">&quot;#&quot;</span><span class=\"p\">,</span> <span class=\"ss\">label: </span><span class=\"s2\">&quot;Click Me&quot;</span> <span class=\"p\">}</span> <span class=\"cp\">%&gt;</span>\n</code></pre></div></div>\n\n<p>Or you could make a helper:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">button</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"p\">,</span><span class=\"n\">href</span><span class=\"p\">)</span>\n  <span class=\"n\">link_to</span> <span class=\"n\">label</span><span class=\"p\">,</span> <span class=\"n\">href</span><span class=\"p\">,</span>\n          <span class=\"ss\">class: </span><span class=\"s2\">&quot;ph3 pv2 ba br3 white b--green bg-green&quot;</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>The good thing about this is that your reusable components are modeled the same way, regardless\nof what is being re-used.  In the case of our button, we are re-using styles, but we could also\nmake a component that reuses some display logic, or one that has both.  Regardless, they are\nmanaged the same way (you can also use the wonderful <a href=\"https://viewcomponent.org\">ViewComponent library</a>).</p>\n\n<p>Sometimes, you want to reuse only some of those classes.</p>\n\n<h2 id=\"more-complex-re-use-can-create-problems\">More Complex Re-use Can Create Problems</h2>\n\n<p>Consider the need for a secondary button:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">&quot;#&quot;</span> <span class=\"na\">class=</span><span class=\"s\">&quot;ph3 pv2 ba br3 green b--green bg-white&quot;</span><span class=\"nt\">&gt;</span>\n  I'm Also Here\n<span class=\"nt\">&lt;/a&gt;</span>\n</code></pre></div></div>\n\n<aside>\n<a href=\"#\">\n  I'm also here\n</a>\n</aside>\n\n<p>This is similar to our original button, but uses different colors.  It also has a slightly different design. Our primary button is a solid background whereas our secondary button has an outline.</p>\n\n<p>We could allow the re-use of the common classes as a parameter to our helper:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">button</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"p\">,</span><span class=\"n\">href</span><span class=\"p\">,</span> <span class=\"ss\">colors: </span><span class=\"s2\">&quot;white b--green bg-green&quot;</span><span class=\"p\">)</span>\n  <span class=\"n\">link_to</span> <span class=\"n\">label</span><span class=\"p\">,</span> <span class=\"n\">href</span><span class=\"p\">,</span> <span class=\"ss\">class: </span><span class=\"s2\">&quot;ph3 pv2 ba br3 </span><span class=\"si\">#{</span><span class=\"n\">colors</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>Which is used thusly:</p>\n\n<div class=\"language-erb highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">&lt;%=</span> <span class=\"n\">button</span><span class=\"p\">(</span><span class=\"s2\">&quot;I'm Also Here&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;#&quot;</span><span class=\"p\">,</span>\n           <span class=\"ss\">colors: </span><span class=\"s2\">&quot;green, g--green bg-white&quot;</span><span class=\"p\">)</span> <span class=\"cp\">%&gt;</span>\n</code></pre></div></div>\n\n<p>This can become unwieldy.  If we acknowledge that we <em>do</em> have a reusable component on our hands,\nit might be better if we had a class like <code class=\"language-plaintext highlighter-rouge\">button-base</code> that defined everything about every\nbutton that is consistent.  We could then use it like so:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">&quot;#&quot;</span> <span class=\"na\">class=</span><span class=\"s\">&quot;button-base white b--green bg-green&quot;</span><span class=\"nt\">&gt;</span>\n  Click Me\n<span class=\"nt\">&lt;/a&gt;</span>\n<span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">&quot;#&quot;</span> <span class=\"na\">class=</span><span class=\"s\">&quot;button-base green b--green bg-white&quot;</span><span class=\"nt\">&gt;</span>\n  I'm also here\n<span class=\"nt\">&lt;/a&gt;</span>\n</code></pre></div></div>\n\n<p>The problem is that it’s not clear how to do this without some uncomfortable duplication.</p>\n\n<div class=\"language-css highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nc\">.button-base</span> <span class=\"p\">{</span>\n  <span class=\"nl\">border-style</span><span class=\"p\">:</span> <span class=\"nb\">solid</span><span class=\"p\">;</span>\n  <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"err\">???</span><span class=\"p\">;</span>\n  <span class=\"nl\">border-radius</span><span class=\"p\">:</span> <span class=\"err\">???</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>To provide values for <code class=\"language-plaintext highlighter-rouge\">padding</code> and <code class=\"language-plaintext highlighter-rouge\">border-radius</code> we can duplicate the sizes, thus creating\nproblematic duplication:</p>\n\n<div class=\"language-css highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nc\">.button-base</span> <span class=\"p\">{</span>\n  <span class=\"nl\">border-style</span><span class=\"p\">:</span> <span class=\"nb\">solid</span><span class=\"p\">;</span>\n  <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">2rem</span> <span class=\"m\">4rem</span><span class=\"p\">;</span>  <span class=\"c\">/* Where did these values come from?! */</span>\n  <span class=\"nl\">border-radius</span><span class=\"p\">:</span> <span class=\"m\">2rem</span><span class=\"p\">;</span> <span class=\"c\">/* Where did these values come from?! */</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>We could use CSS variables, assuming Tachyons makes them available:</p>\n\n<div class=\"language-css highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nc\">.button-base</span> <span class=\"p\">{</span>\n  <span class=\"nl\">border-style</span><span class=\"p\">:</span> <span class=\"nb\">solid</span><span class=\"p\">;</span>\n  <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"n\">var</span><span class=\"p\">(</span><span class=\"n\">--spacing-small</span><span class=\"p\">)</span>\n           <span class=\"n\">var</span><span class=\"p\">(</span><span class=\"n\">--spacing-medium</span><span class=\"p\">);</span>\n  <span class=\"nl\">border-radius</span><span class=\"p\">:</span> <span class=\"n\">var</span><span class=\"p\">(</span><span class=\"n\">--border-radius-medium</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>This re-uses our design system, but now we have two ways to specify values: the classes that\nTachyons provides, and the variables it uses to produce its classes.</p>\n\n<p><a href=\"https://sass-lang.com\">SASS</a> allows us to address this.</p>\n\n<h2 id=\"sass-can-re-use-classes\">SASS Can Re-use Classes</h2>\n\n<p>If we use the Tachyons SASS port, we can do this:</p>\n\n<div class=\"language-scss highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nc\">.button-base</span> <span class=\"p\">{</span>\n  <span class=\"k\">@extend</span> <span class=\"nc\">.ph3</span><span class=\"p\">;</span>\n  <span class=\"k\">@extend</span> <span class=\"nc\">.pv2</span><span class=\"p\">;</span>\n  <span class=\"k\">@extend</span> <span class=\"nc\">.ba</span><span class=\"p\">;</span>\n  <span class=\"k\">@extend</span> <span class=\"nc\">.br3</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>This is the best of all worlds:</p>\n\n<ul>\n  <li>Whenever we specify a CSS property, we have exactly one way to do it: using the Tachyons class, either directly in our HTML, or via <code class=\"language-plaintext highlighter-rouge\">@extend</code> in SASS.</li>\n  <li>We don’t have to name components that aren’t reusable just so we can style them.</li>\n  <li>We <em>can</em> name components that <em>are</em> reusable to control how our design system evolves and allow new code to more easily know what standard styles are in place: any class defined in our main <code class=\"language-plaintext highlighter-rouge\">.scss</code> file is an intended-to-be-reused component.</li>\n</ul>\n\n<p>This technique also provides benefits when you need to write CSS to solve a problem Tachyons\ncannot.</p>\n\n<h2 id=\"sass-extend-works-for-complex-components-too\">SASS <code class=\"language-plaintext highlighter-rouge\">@extend</code> Works for Complex Components, too</h2>\n\n<p>An example of something that Tachyons alone cannot easily style is a custom checkbox, where you need to style against pseudo-selectors to achieve the design.  I’m sure there are other ways to do this, but this is a way I have done it that demonstrates the technique.</p>\n\n<p>Instead of using Tachyons classes in our HTML, we change to a <a href=\"https://getbem.com/introduction/\">BEM-like</a> style:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;styled-checkbox-container&quot;</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;label</span> <span class=\"na\">for=</span><span class=\"s\">&quot;confirm&quot;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;checkbox&quot;</span> <span class=\"na\">id=</span><span class=\"s\">&quot;confirm&quot;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;styled-checkbox&quot;</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;styled-checkbox-check&quot;</span><span class=\"nt\">&gt;</span><span class=\"ni\">&amp;check;</span><span class=\"nt\">&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;styled-checkbox-label&quot;</span><span class=\"nt\">&gt;</span>\n      I get it\n    <span class=\"nt\">&lt;/div&gt;</span>\n  <span class=\"nt\">&lt;/label&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n\n</code></pre></div></div>\n\n<p>We define <code class=\"language-plaintext highlighter-rouge\">.styled-checkbox-container</code>, <code class=\"language-plaintext highlighter-rouge\">.styled-checkbox</code>, <code class=\"language-plaintext highlighter-rouge\">.styled-checkbox-check</code>, and\n<code class=\"language-plaintext highlighter-rouge\">.styled-checkbox-label</code> in our app’s <code class=\"language-plaintext highlighter-rouge\">.scss</code> file, which will be just a series of <code class=\"language-plaintext highlighter-rouge\">@extend</code>\ncalls to Tachyons classes:</p>\n\n<div class=\"language-scss highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nc\">.styled-checkbox-container</span> <span class=\"nt\">input</span><span class=\"o\">[</span><span class=\"nt\">type</span><span class=\"o\">=</span><span class=\"nt\">checkbox</span><span class=\"o\">]</span> <span class=\"p\">{</span>\n  <span class=\"k\">@extend</span> <span class=\"nc\">.absolute</span><span class=\"p\">;</span> <span class=\"c1\">// absolute position</span>\n  <span class=\"k\">@extend</span> <span class=\"nc\">.o-0</span><span class=\"nd\">:</span>      <span class=\"o\">//</span> <span class=\"nt\">opacity</span> <span class=\"nt\">0</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.styled-checkbox-container</span> <span class=\"nt\">input</span> <span class=\"o\">~</span> <span class=\"nc\">.styled-checkbox</span> <span class=\"p\">{</span>\n  <span class=\"k\">@extend</span> <span class=\"nc\">.b--moon-gray</span><span class=\"p\">;</span> <span class=\"c1\">// border moon gray</span>\n  <span class=\"k\">@extend</span> <span class=\"nc\">.ba</span><span class=\"p\">;</span>           <span class=\"c1\">// has a border</span>\n  <span class=\"k\">@extend</span> <span class=\"nc\">.dib</span><span class=\"p\">;</span>          <span class=\"c1\">// display inline block</span>\n  <span class=\"k\">@extend</span> <span class=\"nc\">.h2</span><span class=\"p\">;</span>           <span class=\"c1\">// height using 2nd level of scale</span>\n  <span class=\"k\">@extend</span> <span class=\"nc\">.pointer</span><span class=\"p\">;</span>      <span class=\"c1\">// pointer cursor on hover</span>\n  <span class=\"k\">@extend</span> <span class=\"nc\">.tc</span><span class=\"p\">;</span>           <span class=\"c1\">// text centered</span>\n  <span class=\"k\">@extend</span> <span class=\"nc\">.w2</span><span class=\"p\">;</span>           <span class=\"c1\">// width using 2nd level of scale</span>\n  <span class=\"nc\">.styled-checkbox-check</span> <span class=\"p\">{</span>\n    <span class=\"k\">@extend</span> <span class=\"nc\">.dn</span><span class=\"p\">;</span>         <span class=\"c1\">// display none</span>\n    <span class=\"k\">@extend</span> <span class=\"nc\">.f4</span><span class=\"p\">;</span>         <span class=\"c1\">// font size is fourth in our scale</span>\n    <span class=\"k\">@extend</span> <span class=\"nc\">.pa1</span><span class=\"p\">;</span>        <span class=\"c1\">// padding first in scale</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"nc\">.styled-checkbox-container</span> <span class=\"nt\">input</span> <span class=\"o\">~</span> <span class=\"nc\">.styled-checkbox</span> <span class=\"p\">{</span>\n  <span class=\"k\">@extend</span> <span class=\"nc\">.br2</span><span class=\"p\">;</span>          <span class=\"c1\">// border radius 2nd in scale</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.styled-checkbox-container</span> <span class=\"nt\">input</span> <span class=\"o\">~</span> <span class=\"nc\">.styled-checkbox-label</span> <span class=\"p\">{</span>\n  <span class=\"k\">@extend</span> <span class=\"nc\">.b--transparent</span><span class=\"p\">;</span> <span class=\"c1\">// transparent border</span>\n  <span class=\"k\">@extend</span> <span class=\"nc\">.ba</span><span class=\"p\">;</span>             <span class=\"c1\">// has a border</span>\n  <span class=\"k\">@extend</span> <span class=\"nc\">.br2</span><span class=\"p\">;</span>            <span class=\"c1\">// radius second in scale</span>\n  <span class=\"k\">@extend</span> <span class=\"nc\">.dib</span><span class=\"p\">;</span>            <span class=\"c1\">// display inline block</span>\n  <span class=\"k\">@extend</span> <span class=\"nc\">.f4</span><span class=\"p\">;</span>             <span class=\"c1\">// font size fourth in scale</span>\n  <span class=\"k\">@extend</span> <span class=\"nc\">.fw3</span><span class=\"p\">;</span>            <span class=\"c1\">// font weight 300</span>\n  <span class=\"k\">@extend</span> <span class=\"nc\">.ml2</span><span class=\"p\">;</span>            <span class=\"c1\">// margin left second in scale</span>\n  <span class=\"k\">@extend</span> <span class=\"nc\">.pa2</span><span class=\"p\">;</span>            <span class=\"c1\">// padding second in scale</span>\n  <span class=\"k\">@extend</span> <span class=\"nc\">.w-80</span><span class=\"p\">;</span>           <span class=\"c1\">// 80% width</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<div></div>\n\n<p>Again, we have exactly one way to set CSS properties - the Tachyons classes.  And again, this is\nthe best of all worlds because we <em>can</em> do this if we need to, with a minimum of duplication, but\nwe don’t have to.</p>\n\n<p>And, we don’t need a complicated JavaScript toolchain. We just need SASS, which is\na battle-hardened, build-time-only, stable tool.</p>\n\n"
}