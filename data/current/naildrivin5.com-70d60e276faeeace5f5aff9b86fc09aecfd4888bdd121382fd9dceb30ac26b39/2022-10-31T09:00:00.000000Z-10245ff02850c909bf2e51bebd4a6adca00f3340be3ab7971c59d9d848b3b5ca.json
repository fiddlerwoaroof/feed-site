{
  "title":"Wrap Third Party APIs in Service Wrappers to Simplify Your Code",
  "date":"2022-10-31T09:00:00.000000Z",
  "author":null,
  "id":"https://naildrivin5.com/blog/2022/10/31/wrap-third-party-apis-in-service-wrappers-to-simplify-your-code",
  "link":"https://naildrivin5.com/blog/2022/10/31/wrap-third-party-apis-in-service-wrappers-to-simplify-your-code.html",
  "content":"<p>The app I work on has a lot of API integrations.  These API calls are often tied into\nvarious business processes.  By wrapping an adapter around each API, presenting only the\nfeatures of that API my app needs, I can more easily manage and test my app. It also provides\nclear documentation about how my app uses each API.  I’ve heard this called a <em>service wrapper</em> and it’s incredibly useful.</p>\n\n\n\n<h2 id=\"third-party-integrations-make-everything-complicated\">Third Party Integrations Make Everything Complicated</h2>\n\n<p>Integrating with a third party API carries a host of problems, but most of the boil down to:</p>\n\n<ul>\n  <li>Any codepath that uses the API can be hard to test since you have to mock HTTP calls or the\nclient library, both of which are often complex.</li>\n  <li>The API has many more features than you need, often implemented in a way that makes your use-case overcomplicated.  We’ve all built massive hashes that contain only a few bits of relevant\ndata in them, just to satisfy a highly-generalized API call.</li>\n</ul>\n\n<div></div>\n\n<p><a href=\"https://stripe.com/docs/api/payment_intents/create\">Stripe’s Payment Intents API</a> is a great\nexample. It’s highly flexible, handling many use-cases.  But, if all you need to do is charge a\ncard on file, you end up with a somewhat complicated call no matter what.</p>\n\n<p>The <em>service wrapper</em> I’ll demonstrate below will wrap Stripe in a simplified—but still\nStripe-like—API that only does what we need.  The resulting class creates a boundary that is easier to mock for upstream tests and easier to test and manage for assuring a good integration.</p>\n\n<p>Let’s see the problem directly and derive the service wrapper.</p>\n\n<h2 id=\"a-naive-integration-with-everything-inline\">A Naive Integration with Everything Inline</h2>\n\n<p>Suppose our company, Example Co, sells products to customers. We have a routine that is triggered when an order ships.  That routine will charge the customer the price of the order plus shipping, as well as performing some basic bookkeeping.  The domain is outlined in this figure:</p>\n\n<figure>\n<a href=\"/images/service-wrapper-domain.png\"><img src=\"/images/service-wrapper-domain.png\" alt=\"A rough class diagram showing the relationship to the domain objects described in the text of this pst\"></a>\n<figcaption>\nClick image to embiggen.\n</figcaption>\n</figure>\n\n<p>The code will accept an <code class=\"language-plaintext highlighter-rouge\">order</code>, which is related to a <code class=\"language-plaintext highlighter-rouge\">customer</code>, a <code class=\"language-plaintext highlighter-rouge\">product</code>, and a\n<code class=\"language-plaintext highlighter-rouge\">shipping_method</code>.  The customer also has several <code class=\"language-plaintext highlighter-rouge\">payment_method</code> objects representing cards\nthey have added previously.  One is marked <code class=\"language-plaintext highlighter-rouge\">primary</code>, and that’s what we want to use here.</p>\n\n<p>We’ll create a <code class=\"language-plaintext highlighter-rouge\">charge</code> that represents our charge with Stripe, and that will relate to the order, plus record Stripe’s ID.  A <code class=\"language-plaintext highlighter-rouge\">charge</code> also has an <code class=\"language-plaintext highlighter-rouge\">externalizable_id</code> which uniquely identifies the charge in our system so we can share it with Stripe (but not expose our database keys).</p>\n\n<p>Here’s the method with all the code in it in one big blob. This method looks like what you might produce during TDD before you’ve done any refactoring:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">on_order_shipped</span><span class=\"p\">(</span><span class=\"n\">order</span><span class=\"p\">)</span>\n  <span class=\"n\">customer</span>       <span class=\"o\">=</span> <span class=\"n\">order</span><span class=\"p\">.</span><span class=\"nf\">customer</span>\n  <span class=\"n\">payment_method</span> <span class=\"o\">=</span> <span class=\"n\">customer</span><span class=\"p\">.</span><span class=\"nf\">payment_methods</span><span class=\"p\">.</span><span class=\"nf\">primary</span>\n  <span class=\"n\">product</span>        <span class=\"o\">=</span> <span class=\"n\">order</span><span class=\"p\">.</span><span class=\"nf\">product</span>\n  <span class=\"n\">shipping_cost</span>  <span class=\"o\">=</span> <span class=\"n\">order</span><span class=\"p\">.</span><span class=\"nf\">shipping_method</span><span class=\"p\">.</span><span class=\"nf\">price_cents</span>\n\n  <span class=\"n\">total_price</span> <span class=\"o\">=</span> <span class=\"n\">product</span><span class=\"p\">.</span><span class=\"nf\">price_cents</span> <span class=\"o\">+</span> <span class=\"n\">shipping_cost</span>\n\n  <span class=\"n\">charge</span> <span class=\"o\">=</span> <span class=\"no\">Charge</span><span class=\"p\">.</span><span class=\"nf\">create!</span><span class=\"p\">(</span>\n    <span class=\"ss\">order: </span><span class=\"n\">order</span><span class=\"p\">,</span>\n    <span class=\"ss\">amount_cents: </span><span class=\"n\">total_price</span>\n  <span class=\"p\">)</span>\n\n  <span class=\"n\">stripe_args</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"ss\">currency: </span><span class=\"s2\">&quot;usd&quot;</span><span class=\"p\">,</span>\n    <span class=\"ss\">confirm: </span><span class=\"kp\">true</span><span class=\"p\">,</span>\n    <span class=\"ss\">off_session: </span><span class=\"kp\">true</span><span class=\"p\">,</span>\n    <span class=\"ss\">amount: </span><span class=\"n\">total_price</span><span class=\"p\">,</span>\n    <span class=\"ss\">description: </span><span class=\"s2\">&quot;Purchase of </span><span class=\"si\">#{</span><span class=\"n\">product</span><span class=\"p\">.</span><span class=\"nf\">name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n    <span class=\"ss\">receipt_email: </span><span class=\"n\">customer</span><span class=\"p\">.</span><span class=\"nf\">email</span><span class=\"p\">,</span>\n    <span class=\"ss\">payment_method: </span><span class=\"n\">payment_method</span><span class=\"p\">.</span><span class=\"nf\">id</span><span class=\"p\">,</span>\n    <span class=\"ss\">metadata: </span><span class=\"p\">{</span>\n      <span class=\"ss\">example_co_id: </span><span class=\"n\">charge</span><span class=\"p\">.</span><span class=\"nf\">externalizable_id</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"n\">payment_intent</span> <span class=\"o\">=</span> <span class=\"no\">Stripe</span><span class=\"o\">::</span><span class=\"no\">PaymentIntent</span><span class=\"p\">.</span><span class=\"nf\">create</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span>\n\n  <span class=\"k\">if</span> <span class=\"n\">payment_intent</span><span class=\"p\">.</span><span class=\"nf\">charges</span><span class=\"p\">.</span><span class=\"nf\">count</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span>\n    <span class=\"c1\"># Imagine a more sophisticated error handling</span>\n    <span class=\"c1\"># strategy here...</span>\n    <span class=\"k\">raise</span> <span class=\"s2\">&quot;Expected exactly one charge&quot;</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"n\">stripe_charge</span> <span class=\"o\">=</span> <span class=\"n\">payment_intent</span><span class=\"p\">.</span><span class=\"nf\">charges</span><span class=\"p\">.</span><span class=\"nf\">first</span>\n\n  <span class=\"n\">charge</span><span class=\"p\">.</span><span class=\"nf\">update!</span><span class=\"p\">(</span><span class=\"ss\">stripe_id: </span><span class=\"n\">stripe_charge</span><span class=\"p\">.</span><span class=\"nf\">id</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>This method is a bit long, and the simplest thing we can do to clean it up is to extract the\nStripe stuff into a private method, like so:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">on_order_shipped</span><span class=\"p\">(</span><span class=\"n\">order</span><span class=\"p\">)</span>\n  <span class=\"n\">customer</span>       <span class=\"o\">=</span> <span class=\"n\">order</span><span class=\"p\">.</span><span class=\"nf\">customer</span>\n  <span class=\"n\">payment_method</span> <span class=\"o\">=</span> <span class=\"n\">customer</span><span class=\"p\">.</span><span class=\"nf\">payment_methods</span><span class=\"p\">.</span><span class=\"nf\">primary</span>\n  <span class=\"n\">product</span>        <span class=\"o\">=</span> <span class=\"n\">order</span><span class=\"p\">.</span><span class=\"nf\">product</span>\n  <span class=\"n\">shipping_cost</span>  <span class=\"o\">=</span> <span class=\"n\">order</span><span class=\"p\">.</span><span class=\"nf\">shipping_method</span><span class=\"p\">.</span><span class=\"nf\">price_cents</span>\n\n  <span class=\"n\">total_price</span> <span class=\"o\">=</span> <span class=\"n\">product</span><span class=\"p\">.</span><span class=\"nf\">price_cents</span> <span class=\"o\">+</span> <span class=\"n\">shipping_cost</span>\n\n  <span class=\"n\">charge</span> <span class=\"o\">=</span> <span class=\"no\">Charge</span><span class=\"p\">.</span><span class=\"nf\">create!</span><span class=\"p\">(</span>\n    <span class=\"ss\">order: </span><span class=\"n\">order</span><span class=\"p\">,</span>\n    <span class=\"ss\">amount_cents: </span><span class=\"n\">total_price</span>\n  <span class=\"p\">)</span>\n\n  <span class=\"n\">stripe_charge</span> <span class=\"o\">=</span> <span class=\"n\">charge_stripe</span><span class=\"p\">(</span><span class=\"n\">customer</span><span class=\"p\">,</span>        <span class=\"c1\"># &lt;---</span>\n                                <span class=\"n\">payment_method</span><span class=\"p\">,</span>  <span class=\"c1\"># &lt;---</span>\n                                <span class=\"n\">total_price</span><span class=\"p\">,</span>     <span class=\"c1\"># &lt;---</span>\n                                <span class=\"n\">product</span><span class=\"p\">,</span>         <span class=\"c1\"># &lt;---</span>\n                                <span class=\"n\">charge</span><span class=\"p\">)</span>          <span class=\"c1\"># &lt;---</span>\n\n  <span class=\"n\">charge</span><span class=\"p\">.</span><span class=\"nf\">update!</span><span class=\"p\">(</span><span class=\"ss\">stripe_id: </span><span class=\"n\">stripe_charge</span><span class=\"p\">.</span><span class=\"nf\">id</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n\n<span class=\"kp\">private</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">charge_stripe</span><span class=\"p\">(</span><span class=\"n\">customer</span><span class=\"p\">,</span>\n                  <span class=\"n\">payment_method</span><span class=\"p\">,</span>\n                  <span class=\"n\">total_price</span><span class=\"p\">,</span>\n                  <span class=\"n\">product</span><span class=\"p\">,</span>\n                  <span class=\"n\">charge</span><span class=\"p\">)</span>\n  <span class=\"n\">stripe_args</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"ss\">currency: </span><span class=\"s2\">&quot;usd&quot;</span><span class=\"p\">,</span>\n    <span class=\"ss\">confirm: </span><span class=\"kp\">true</span><span class=\"p\">,</span>\n    <span class=\"ss\">off_session: </span><span class=\"kp\">true</span><span class=\"p\">,</span>\n    <span class=\"ss\">amount: </span><span class=\"n\">total_price</span><span class=\"p\">,</span>\n    <span class=\"ss\">description: </span><span class=\"s2\">&quot;Purchase of </span><span class=\"si\">#{</span><span class=\"n\">product</span><span class=\"p\">.</span><span class=\"nf\">name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n    <span class=\"ss\">receipt_email: </span><span class=\"n\">customer</span><span class=\"p\">.</span><span class=\"nf\">email</span><span class=\"p\">,</span>\n    <span class=\"ss\">payment_method: </span><span class=\"n\">payment_method</span><span class=\"p\">.</span><span class=\"nf\">id</span><span class=\"p\">,</span>\n    <span class=\"ss\">metadata: </span><span class=\"p\">{</span>\n      <span class=\"ss\">example_co_id: </span><span class=\"n\">charge</span><span class=\"p\">.</span><span class=\"nf\">externalizable_id</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"n\">payment_intent</span> <span class=\"o\">=</span> <span class=\"no\">Stripe</span><span class=\"o\">::</span><span class=\"no\">PaymentIntent</span><span class=\"p\">.</span><span class=\"nf\">create</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span>\n\n  <span class=\"k\">if</span> <span class=\"n\">payment_intent</span><span class=\"p\">.</span><span class=\"nf\">charges</span><span class=\"p\">.</span><span class=\"nf\">count</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">raise</span> <span class=\"s2\">&quot;Expected exactly one charge&quot;</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"n\">payment_intent</span><span class=\"p\">.</span><span class=\"nf\">charges</span><span class=\"p\">.</span><span class=\"nf\">first</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>Although this cleans up the code for <code class=\"language-plaintext highlighter-rouge\">on_order_shipped</code>, it’s still problematic to test.  We have\nto test that we are using the right card, calculating the proper price, <em>and</em> calling Stripe in just the right way (as well as handling errors from Stripe).</p>\n\n<p>To mock our call to Stripe requires assembling a large hash and creating a mock object for Stripe to return that wraps its charge id. Or, we have to set up an HTTP-mocking system like VCR, which is unpleasant and flaky.  None of this has to do with the core logic of the routine, which is calculate the price.</p>\n\n<p>The problem is that the seam created by our private method isn’t right.</p>\n\n<h2 id=\"a-boundary-at-the-wrong-place-makes-things-worse\">A Boundary At the Wrong Place Makes Things Worse</h2>\n\n<p>Our private method may seem like it could be the public method of a new class. We can then mock\nthat class to test our method and not worry about Stripe’s API.  Since this will wrap our\nintegration with Stripe (a web service), let’s call this class a <em>service wrapper</em>.  Here’s what that looks like:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Stripe::ServiceWrapper</span>\n  <span class=\"k\">def</span> <span class=\"nf\">charge</span><span class=\"p\">(</span><span class=\"n\">customer</span><span class=\"p\">,</span>\n             <span class=\"n\">payment_method</span><span class=\"p\">,</span>\n             <span class=\"n\">total_price</span><span class=\"p\">,</span>\n             <span class=\"n\">product</span><span class=\"p\">,</span>\n             <span class=\"n\">charge</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># all the code from before</span>\n\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>This is an improvement, but it uncovers a third behavior of the original method, which is to\nmap our domain to Stripe’s.  That mapping is now inside <code class=\"language-plaintext highlighter-rouge\">Stripe::ServiceWrapper</code>, and it’s\ntightly coupled to the use-case of charging for a shipped order.</p>\n\n<p>This creates an immediate problem in that we need to create several Active Records just to test\nthis method, but it’s also not a very useful method for charging credit cards for other reasons\nthan the shipment of an order.</p>\n\n<p>We’ve created the wrong boundary.  We need a boundary between our domain and Stripe’s.  Let’s try\nto create that.</p>\n\n<h2 id=\"service-wrappers-should-be-in-the-domain-of-the-service-not-your-app\">Service Wrappers Should be in the Domain of the Service, not Your App</h2>\n\n<p>Let’s change the service wrapper so that it <em>does not</em> map our domain to Stripe’s and instead\nacts like a simplified API from Stripe itself.  We don’t need the full power of the payment\nintents API, we only need to charge an amount to a card and send a receipt email.</p>\n\n<p>Meaning, we want a method that accepts:</p>\n\n<ul>\n  <li>A Stripe payment method ID</li>\n  <li>An amount to charge</li>\n  <li>An email where a receipt will be sent</li>\n  <li>A description to go in that email</li>\n  <li>Some sort of ID from our system to go into the metadata</li>\n</ul>\n\n<p>Our routine uses the payment intents API, and in addition to creating a payment intent, it also\n“confirms” it, which is Stripe’s way of saying it will actually charge the card.</p>\n\n<p>Here it is written in the domain of Stripe:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Stripe::ServiceWrapper</span>\n  <span class=\"k\">def</span> <span class=\"nf\">create_and_confirm_payment_intent</span><span class=\"p\">(</span>\n    <span class=\"n\">payment_method_id</span><span class=\"p\">:,</span>\n    <span class=\"n\">receipt_email</span><span class=\"p\">:,</span>\n    <span class=\"n\">description</span><span class=\"p\">:,</span>\n    <span class=\"n\">amount_cents</span><span class=\"p\">:,</span>\n    <span class=\"n\">example_co_id</span><span class=\"p\">:)</span>\n\n    <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n\n      <span class=\"ss\">currency: </span><span class=\"s2\">&quot;usd&quot;</span><span class=\"p\">,</span>\n      <span class=\"ss\">confirm: </span><span class=\"kp\">true</span><span class=\"p\">,</span>\n      <span class=\"ss\">off_session: </span><span class=\"kp\">true</span><span class=\"p\">,</span>\n\n      <span class=\"ss\">amount: </span><span class=\"n\">amount_cents</span><span class=\"p\">,</span>\n      <span class=\"ss\">description: </span><span class=\"n\">description</span><span class=\"p\">,</span>\n      <span class=\"ss\">receipt_email: </span><span class=\"n\">receipt_email</span><span class=\"p\">,</span>\n      <span class=\"ss\">payment_method: </span><span class=\"n\">payment_method_id</span><span class=\"p\">,</span>\n      <span class=\"ss\">metadata: </span><span class=\"p\">{</span>\n        <span class=\"ss\">example_co_id: </span><span class=\"n\">example_co_id</span><span class=\"p\">,</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">payment_intent</span> <span class=\"o\">=</span> <span class=\"no\">Stripe</span><span class=\"o\">::</span><span class=\"no\">PaymentIntent</span><span class=\"p\">.</span><span class=\"nf\">create</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">payment_intent</span><span class=\"p\">.</span><span class=\"nf\">charges</span><span class=\"p\">.</span><span class=\"nf\">count</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span>\n      <span class=\"c1\"># Imagine a more sophisticated error handling</span>\n      <span class=\"c1\"># strategy here...</span>\n      <span class=\"k\">raise</span> <span class=\"s2\">&quot;Expected exactly one charge&quot;</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"n\">charge</span> <span class=\"o\">=</span> <span class=\"n\">payment_intent</span><span class=\"p\">.</span><span class=\"nf\">charges</span><span class=\"p\">.</span><span class=\"nf\">first</span>\n    <span class=\"n\">charge</span><span class=\"p\">.</span><span class=\"nf\">id</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>Now, <code class=\"language-plaintext highlighter-rouge\">Stripe::ServiceWrapper</code> has nothing to do with our domain. It’s just a much simpler method\nto charge a card in Stripe.  The argument names use Stripe’s domain, save for <code class=\"language-plaintext highlighter-rouge\">example_co_id</code>.  This is preferable to a metadata hash because this value will show up in Stripe’s web UI and it’s part of the <em>Stripe</em> API we are creating.  It’s specific to us on purpose.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">on_order_shipped</code> will now call <code class=\"language-plaintext highlighter-rouge\">create_and_confirm_payment_intent</code>, but the job of mapping our domain to Stripe’s will revert back to <code class=\"language-plaintext highlighter-rouge\">on_order_shipped</code>:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">on_order_shipped</span><span class=\"p\">(</span><span class=\"n\">order</span><span class=\"p\">)</span>\n  <span class=\"n\">customer</span>       <span class=\"o\">=</span> <span class=\"n\">order</span><span class=\"p\">.</span><span class=\"nf\">customer</span>\n  <span class=\"n\">payment_method</span> <span class=\"o\">=</span> <span class=\"n\">customer</span><span class=\"p\">.</span><span class=\"nf\">payment_methods</span><span class=\"p\">.</span><span class=\"nf\">primary</span>\n  <span class=\"n\">product</span>        <span class=\"o\">=</span> <span class=\"n\">order</span><span class=\"p\">.</span><span class=\"nf\">product</span>\n  <span class=\"n\">shipping_cost</span>  <span class=\"o\">=</span> <span class=\"n\">order</span><span class=\"p\">.</span><span class=\"nf\">shipping_method</span><span class=\"p\">.</span><span class=\"nf\">price_cents</span>\n\n  <span class=\"n\">total_price</span> <span class=\"o\">=</span> <span class=\"n\">product</span><span class=\"p\">.</span><span class=\"nf\">price_cents</span> <span class=\"o\">+</span> <span class=\"n\">shipping_cost</span>\n\n  <span class=\"n\">charge</span> <span class=\"o\">=</span> <span class=\"no\">Charge</span><span class=\"p\">.</span><span class=\"nf\">create!</span><span class=\"p\">(</span>\n    <span class=\"ss\">order: </span><span class=\"n\">order</span><span class=\"p\">,</span>\n    <span class=\"ss\">amount_cents: </span><span class=\"n\">total_price</span>\n  <span class=\"p\">)</span>\n\n  <span class=\"n\">service_wrapper</span> <span class=\"o\">=</span> <span class=\"no\">Stripe</span><span class=\"o\">::</span><span class=\"no\">ServiceWrapper</span><span class=\"p\">.</span><span class=\"nf\">new</span>\n\n  <span class=\"n\">stripe_id</span> <span class=\"o\">=</span> <span class=\"n\">service_wrapper</span><span class=\"p\">.</span><span class=\"nf\">create_and_confirm_payment_intent</span><span class=\"p\">(</span>\n      <span class=\"ss\">payment_method_id: </span><span class=\"n\">payment_method</span><span class=\"p\">.</span><span class=\"nf\">id</span><span class=\"p\">,</span>\n          <span class=\"ss\">receipt_email: </span><span class=\"n\">customer</span><span class=\"p\">.</span><span class=\"nf\">email</span><span class=\"p\">,</span>\n            <span class=\"ss\">description: </span><span class=\"n\">description</span><span class=\"p\">,</span>\n           <span class=\"ss\">amount_cents: </span><span class=\"n\">total_price</span><span class=\"p\">,</span>\n          <span class=\"ss\">example_co_id: </span><span class=\"n\">charge</span><span class=\"p\">.</span><span class=\"nf\">externalizable_id</span><span class=\"p\">)</span>\n\n  <span class=\"n\">charge</span><span class=\"p\">.</span><span class=\"nf\">update!</span><span class=\"p\">(</span><span class=\"ss\">stripe_id: </span><span class=\"n\">stripe_id</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>Note that our invocation now provides a clear mapping of our domain to Stripe’s, in the context\nof the operation being performed inside <code class=\"language-plaintext highlighter-rouge\">on_order_shipped</code>.  The service wrapper doesn’t need access to our domain objects, nor we to theirs.  This is a good boundary between the two systems.</p>\n\n<p>I’ve repeated this pattern of extraction over and over again that I now start any code requiring\nan API integration with a service wrapper just like the one we created.</p>\n\n<h2 id=\"four-properties-of-a-service-wrapper\">Four Properties of a Service Wrapper</h2>\n\n<p>I <em>always</em> make a service wrapper, and I start it to suit whatever use-case is driving the\nintegration.  The service wrapper can be enhanced as the app needs it to, but it always\nrepresents exactly and only how the app uses the wrapped service.</p>\n\n<p>These classes should have these properties to maximize their effectiveness:</p>\n\n<ul>\n  <li>Methods should be named in the language of the <em>service</em>, not the language of the app.</li>\n  <li>Arguments should use the domain of the <em>service</em>, not the domain of the app.</li>\n  <li>Arguments should be whatever type is directly needed by the service, so passing in complex stuff like Active Record should be avoided.</li>\n  <li>The return value should not be a complex object from the third party, but ideally only what data a caller will need (often nothing at all). If it must be a complex object, its name or properties should be in the domain of the service.</li>\n</ul>\n\n<p>A class with the properties above can be more easily mocked in a test of a class that uses it.\nFor example:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"n\">customer</span>        <span class=\"o\">=</span> <span class=\"n\">create</span><span class=\"p\">(</span><span class=\"ss\">:customer</span><span class=\"p\">)</span>\n<span class=\"n\">payment_method</span>  <span class=\"o\">=</span> <span class=\"n\">create</span><span class=\"p\">(</span><span class=\"ss\">:payment_method</span><span class=\"p\">,</span>\n                         <span class=\"ss\">customer: </span><span class=\"n\">customer</span><span class=\"p\">,</span>\n                         <span class=\"ss\">stripe_id: </span><span class=\"s2\">&quot;9876&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">product</span>         <span class=\"o\">=</span> <span class=\"n\">create</span><span class=\"p\">(</span><span class=\"ss\">:product</span><span class=\"p\">,</span>\n                         <span class=\"ss\">name: </span><span class=\"s2\">&quot;Stembolt&quot;</span><span class=\"p\">,</span>\n                         <span class=\"ss\">price_cents: </span><span class=\"mi\">45_98</span><span class=\"p\">)</span>\n<span class=\"n\">shipping_method</span> <span class=\"o\">=</span> <span class=\"n\">create</span><span class=\"p\">(</span><span class=\"ss\">:shipping_method</span><span class=\"p\">,</span>\n                         <span class=\"ss\">price_cents: </span><span class=\"mi\">4_32</span><span class=\"p\">)</span>\n<span class=\"n\">order</span>           <span class=\"o\">=</span> <span class=\"n\">create</span><span class=\"p\">(</span><span class=\"ss\">:order</span><span class=\"p\">,</span>\n                         <span class=\"ss\">product: </span><span class=\"n\">product</span><span class=\"p\">,</span>\n                         <span class=\"ss\">customer: </span><span class=\"n\">customer</span><span class=\"p\">,</span>\n                         <span class=\"ss\">shipping_method: </span><span class=\"n\">shipping_method</span><span class=\"p\">)</span>\n\n<span class=\"n\">stripe_charge_id</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;12345&quot;</span>\n\n<span class=\"n\">allow</span><span class=\"p\">(</span><span class=\"n\">stripe_service_wrapper</span><span class=\"p\">).</span><span class=\"nf\">to</span> <span class=\"n\">receive</span><span class=\"p\">(</span>\n    <span class=\"ss\">:create_and_confirm_payment_intent</span>\n  <span class=\"p\">).</span><span class=\"nf\">and_return</span><span class=\"p\">(</span><span class=\"no\">OpenStruct</span><span class=\"p\">.</span><span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"ss\">id: </span><span class=\"n\">stripe_charge_id</span><span class=\"p\">))</span>\n\n<span class=\"n\">subject</span><span class=\"p\">.</span><span class=\"nf\">on_order_shipped</span><span class=\"p\">(</span><span class=\"n\">order</span><span class=\"p\">)</span>\n\n<span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"n\">order</span><span class=\"p\">.</span><span class=\"nf\">charge</span><span class=\"p\">).</span><span class=\"nf\">not_to</span>       <span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"kp\">nil</span><span class=\"p\">)</span>\n<span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"n\">order</span><span class=\"p\">.</span><span class=\"nf\">charge</span><span class=\"p\">.</span><span class=\"nf\">stripe_id</span><span class=\"p\">).</span><span class=\"nf\">to</span> <span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"s2\">&quot;12345&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"n\">stripe_service_wrapper</span><span class=\"p\">).</span><span class=\"nf\">to</span> <span class=\"n\">have_recieved</span><span class=\"p\">(</span>\n    <span class=\"ss\">:create_and_confirm_payment_intent</span>\n  <span class=\"p\">).</span><span class=\"nf\">with</span><span class=\"p\">(</span>\n    <span class=\"ss\">payment_method_id: </span><span class=\"s2\">&quot;9876&quot;</span><span class=\"p\">,</span>\n    <span class=\"ss\">receipt_email: </span><span class=\"s2\">&quot;pat@example.com&quot;</span><span class=\"p\">,</span>\n    <span class=\"ss\">description: </span><span class=\"s2\">&quot;Purcahase of Stembolt&quot;</span><span class=\"p\">,</span>\n    <span class=\"ss\">amount_cents: </span><span class=\"mi\">50_30</span><span class=\"p\">,</span>\n    <span class=\"ss\">example_co_id: </span><span class=\"n\">order</span><span class=\"p\">.</span><span class=\"nf\">charge_id</span><span class=\"p\">,</span>\n  <span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>This mock expectation is much clearer than if we’d mocked Stripe’s API client, since it only\ncontains information relevant to our domain and this specific use-case.</p>\n\n<p>This leaves the question of how to ensure the service wrapper itself is working.</p>\n\n<h2 id=\"apply-multiple-techniques-to-ensure-the-service-wrapper-works\">Apply Multiple Techniques to Ensure the Service Wrapper Works</h2>\n\n<p>Regardless of how we model our integration, third party services always present a testing\nproblem, since you can’t always call into the service directly, setting up HTTP-mocking systems\nis brittle and flaky, and mock-only unit tests don’t give much confidence.</p>\n\n<p>Remember, tests are only one strategy available to ensure the proper functioning of our system.\nThere are other techniques we can use.  I find success combining these four techniques:</p>\n\n<ul>\n  <li>The service wrapper pattern itself yields a class that has little or no branching or data transformation logic.  The methods often look like example integration code and so tend to be\npretty simple.</li>\n  <li>A basic unit test of the wrapper that mocks the client or the HTTP library (but not HTTP itself) can make sure there’s no typos or syntax errors, as well as handle coverage of any branching that might be needed.</li>\n  <li>At least one integration test of an end-to-end feature is set up to call into the actual service or it’s dedicated testing environment (assuming that’s possible). This might be flaky, but it’s only one test and allows you to call the service before shipping to production.</li>\n  <li>Use background jobs for any codepath that will call the service wrapper.  The jobs must be\nidempotent and you must have adequate monitoring of your background job system.  If anything goes\nwrong, you’ll be notified, can fix it, and retry the jobs.</li>\n</ul>\n\n<p>These techniques aren’t enough on their own. You have to bring them all together.  The primary app I work on at the time of this writing has <em>many</em> third party integrations, and while I’ve certainly experienced a wide variety of failure modes, there has never been user impact and rarely business impact.</p>\n\n<p>Next time you do an API integration, no matter how simple the API might seem, try creating a\nservice wrapper.</p>\n\n"
}