{
  "title":"Ruby multiline String",
  "date":"2022-11-07T09:19:42.000000Z",
  "author":null,
  "id":"https://bootrails.com/blog/ruby-multiline-string/",
  "link":"https://bootrails.com/blog/ruby-multiline-string/",
  "content":"<h2 id=\"what-is-a-multiline-string\">What is a multiline string ?</h2>\n<p>A multiline string is a string that, when displayed, returns the output in more than one line.</p>\n<pre class=\"language-ruby \"><code class=\"language-ruby\"><span>message = </span><span>&quot;</span><span>Hello!\n</span><span>This is my first multiline string.</span><span>&quot;\n</span><span>\n</span><span>p</span><span> message\n</span><span># =&gt; Hello!\n</span><span># =&gt; This is my first multiline string.\n</span></code></pre>\n<p>With Ruby, there are different ways to create multiline strings. In this article, we will go over the main methodologies and highlight their functionalities. But before that, there are two things that are relevant when writing multiline strings.</p>\n<h2 id=\"the-two-main-aspects-to-consider-before-writing-a-multiline-string\">The two main aspects to consider before writing a multiline string</h2>\n<p>You might consider these two aspects before choosing the methodology to write a multiline string:</p>\n<ol>\n<li>If you want to <strong>include or exclude the blank spaces</strong> before each line (in your code). Note that this also includes indentation.</li>\n<li>If you need to <a href=\"https://en.wikipedia.org/wiki/String_interpolation#:~:text=String%20interpolation%20is%20common%20in,Tcl%20and%20most%20Unix%20shells.\"><strong>interpolate variables</strong> within your string</a>.</li>\n</ol>\n<h2 id=\"single-and-double-quotes\">Single and double quotes</h2>\n<p>The most common way of writing strings with more than one line is by using either <strong>single quotes</strong> or <strong>double quotes</strong>. The characteristics of this method are:</p>\n<ul>\n<li>Single quotes do not allow interpolation, while double quotes do.</li>\n<li>It preserves any blank spaces at the beginning of each line.</li>\n<li>If your string includes quotes as part of its content, make sure to use the opposite quotes to encapsulate your string.</li>\n<li>You can create line breaks in your code even if you write in one line by using <code>\\n</code>.</li>\n</ul>\n<pre class=\"language-ruby \"><code class=\"language-ruby\"><span>name </span><span>= </span><span>&quot;</span><span>Christian</span><span>&quot;\n</span><span>\n</span><span>message = </span><span>&quot;</span><span>Hello </span><span>#{</span><span>name</span><span>}</span><span>,</span><span>\\n</span><span>How are you?\n</span><span>       Note the blank spaces here.</span><span>&quot;\n</span><span>p</span><span> message\n</span><span>\n</span><span># =&gt; Hello Christian,\n</span><span># =&gt; How are you?\n</span><span># =&gt;      Note the blank spaces here.\n</span></code></pre>\n<h2 id=\"multiple-lines-with-heredoc\">Multiple lines with HEREDOC</h2>\n<p><strong>Heredoc</strong> is a particular syntax that relies on a <strong>delimiting identifier</strong> to write multiline strings. The identifier is used at the beginning (after <code>&lt;&lt;</code>) and the end of the string, and it can be any word/character in capital letters.  Normally, and as best practice, developers use the words <code>HEREDOC</code>, <code>TEXT</code> or <code>EOF</code>. When using Heredoc notation, please consider that:</p>\n<ul>\n<li>It allows interpolation.</li>\n<li>It keeps blank spaces and indentations at the beginning of each line. But if you wish to ignore indentation, you can do so by using the special character <code>~</code> after <code>&lt;&lt;</code>.</li>\n</ul>\n<pre class=\"language-ruby \"><code class=\"language-ruby\"><span>name </span><span>= </span><span>&quot;</span><span>Marie</span><span>&quot;\n</span><span>\n</span><span>message = </span><span>&lt;&lt;TEXT\n</span><span>    Hi, </span><span>#{</span><span>name</span><span>}</span><span>!\n</span><span>      How are you?\n</span><span>TEXT\n</span><span>\n</span><span>p</span><span> message\n</span><span>\n</span><span># =&gt;     Hi, Marie!\n</span><span># =&gt;       How are you?\n</span></code></pre>\n<p>Now using <code>~</code>:</p>\n<pre class=\"language-ruby \"><code class=\"language-ruby\"><span>name </span><span>= </span><span>&quot;</span><span>Marie</span><span>&quot;\n</span><span>\n</span><span>message = </span><span>&lt;&lt;~TEXT\n</span><span>  Hi, </span><span>#{</span><span>name</span><span>}</span><span>!\n</span><span>  What's up?\n</span><span>  </span><span>TEXT\n</span><span>\n</span><span>p</span><span> message\n</span><span>\n</span><span># =&gt; Hi, Marie!\n</span><span># =&gt; What's up?\n</span></code></pre>\n<p>Note that indentation is also ignored on the last delimiter, TEXT. If you need to ignore indentation just in that line, you can use <code>-</code> instead of <code>~</code>.</p>\n<h2 id=\"multiple-lines-thanks-to-the-percent-sign\">Multiple lines thanks to the percent sign (%)</h2>\n<p>Finally, the last method to create strings with more than one line is by using % notation. It has several forms, but the most common syntax is <code>%q(YOUR_STRING)</code>.  The characteristics of this method are:</p>\n<ul>\n<li><code>%q</code>does not allow interpolation, but <code>%Q</code> does.</li>\n<li>It keeps indentations and blank spaces.</li>\n</ul>\n<pre class=\"language-ruby \"><code class=\"language-ruby\"><span>string = </span><span>%q(</span><span>This is the longest\n</span><span>loooooongest string\n</span><span>    I have ever written\n</span><span>)\n</span><span>\n</span><span>p</span><span> string\n</span><span>\n</span><span># =&gt; This is the longest\n</span><span># =&gt; loooooongest string\n</span><span># =&gt;    I have ever written\n</span></code></pre>\n<h2 id=\"summary\">Summary</h2>\n<p>We have summed up the different ways to create multiline strings with Ruby. Knowing the characteristics of each method, should help you understand when to use each option to write efficient and readable code. Remember to check other entries that will <a href=\"https://www.bootrails.com/categories/ruby/\">help you write efficient Ruby code</a>!</p>\n<p>On a final note, keep in mind that <a href=\"https://bootrails.com/blog/how-to-define-and-use-a-ruby-hash/\">when defining hashes and arrays</a> we can use strings, and that also includes multiline strings!</p>\n"
}