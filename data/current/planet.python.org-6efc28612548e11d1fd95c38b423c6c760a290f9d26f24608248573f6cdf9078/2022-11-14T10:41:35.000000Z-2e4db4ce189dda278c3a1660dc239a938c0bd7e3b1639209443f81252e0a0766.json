{
  "title":"Zato Blog: IMAP and OAuth2 Integrations with Microsoft 365",
  "date":"2022-11-14T10:41:35.000000Z",
  "author":null,
  "id":"https://zato.io/blog/posts/imap-oauth2-microsoft365.html",
  "link":"https://zato.io/blog/posts/imap-oauth2-microsoft365.html",
  "content":"<img src=\"https://zato.io/blog/blog/images/3.2-imap/ms365.jpg\"> \n\n\n<p>Microsoft 365 requires for all IMAP connections to use OAuth2. This can be challenging to configure\nin server-side automation and orchestration processes so Zato offers an easy way that lets you read and send emails\nwithout a need for getting into low-level OAuth2 details.</p>\n<p>Consider a common orchestration scenario - a business partner sends automated emails with attachments that\nneed to be parsed, some information needs to be extracted and processed accordingly.</p>\n<p>Before OAuth2, an automation process would receive from Azure administrators a dedicated IMAP account with a username\nand password.</p>\n<p>Now, however, in addition to creating an IMAP account, administrators will need to create and configure a few more\nresources that the orchestration service will use. Note that the password to the IMAP account will never be used.</p>\n<p>Administrators need to:</p>\n<ul>\n<li>Register an Azure client app representing your service that uses IMAP</li>\n<li>Grant this app a couple of Microsoft Graph application permissions:\n<ul>\n<li>Mail.ReadWrite</li>\n<li>Mail.Send</li>\n</ul>\n</li>\n</ul>\n<p>Next, administrators need to give you a few pieces of information about the app:</p>\n<ul>\n<li>Application (client) ID</li>\n<li>Tenant (directory) ID</li>\n<li>Client secret</li>\n</ul>\n<p>Additionally, you still need to receive the IMAP username (an e-mail address). It is just that you do not need its\ncorresponding password.</p>\n<h2 id=\"in-dashboard\">In Dashboard</h2>\n<p>The first step is to create a new connection in your Zato Dashboard - this will establish an OAuth2-using connection\nthat Zato will manage and your Python code will not have to do anything else,\nall the underlying OAuth2 tokens will keep refreshing as needed, the platform will take care of everything.</p>\n<p>Having received the configuration details from Azure administrators, you can open your Zato Dashboard and navigate\nto IMAP connections:</p>\n\n    <img src=\"https://zato.io/blog/blog/images/3.2-imap/ms365-imap-menu.png\"> \n\n\n<p>Fill out the form as below, choosing “Microsoft 365” as the server type. The other type, “Generic IMAP” is used for\nthe classical case of IMAP with a username and password:</p>\n\n    <img src=\"https://zato.io/blog/blog/images/3.2-imap/ms365-imap-create-form.png\"> \n\n\n<p>Change the secret and click Ping to confirm that the connection is configured correctly:</p>\n\n    <img src=\"https://zato.io/blog/blog/images/3.2-imap/ms365-imap-secret-ping.png\"> \n\n\n<h2 id=\"in-python\">In Python</h2>\n<p>Use the code below to receive emails. Note that it merely needs to refer to a connection definition by its\nname and there is no need for any usage of OAuth2 here:</p>\n<div class=\"highlight\"><pre tabindex=\"0\"><code class=\"language-python\"><span><span><span># -*- coding: utf-8 -*-</span>\n</span></span><span><span>\n</span></span><span><span><span># Zato</span>\n</span></span><span><span><span>from</span> zato.server.service <span>import</span> Service\n</span></span><span><span>\n</span></span><span><span><span>class</span> <span>MyService</span>(Service):\n</span></span><span><span>\n</span></span><span><span>    <span>def</span> <span>handle</span>(self):\n</span></span><span><span>\n</span></span><span><span>        <span># Connect to a Microsoft 365 IMAP connection by its name ..</span>\n</span></span><span><span>        conn <span>=</span> self<span>.</span>email<span>.</span>imap<span>.</span>get(<span>'My Automation'</span>)<span>.</span>conn\n</span></span><span><span>\n</span></span><span><span>        <span># .. get all messages matching filter criteria (&quot;unread&quot; by default)..</span>\n</span></span><span><span>        <span>for</span> msg_id, msg <span>in</span> conn<span>.</span>get():\n</span></span><span><span>\n</span></span><span><span>            <span># .. and access each of them.</span>\n</span></span><span><span>            self<span>.</span>logger<span>.</span>info(msg<span>.</span>data)\n</span></span></code></pre></div><p>This is everything that is needed for integrations with IMAP using Microsoft 365 although we can still go further.\nFor instance, to create a scheduled job to periodically invoke the service, go to the Scheduler job\nin Dashboard:</p>\n\n    <img src=\"https://zato.io/blog/blog/images/3.2-imap/imap-scheduler-menu.png\"> \n\n\n<p>In this case, we decide to have a job that runs once per hour:</p>\n\n    <img src=\"https://zato.io/blog/blog/images/3.2-imap/imap-scheduler-form.png\"> \n\n\n<p>As expected, clicking OK will suffice for the job to start in background. It is as simple as that.</p>\n<h2 id=\"next-steps\">Next steps</h2>\n<ul>\n<li>\n<p>Start <a href=\"https://zato.io/docs/tutorial/01.html?b\">the tutorial</a> to learn more technical details about Zato, including its architecture,\ninstallation and usage. After completing it, you will have a multi-protocol service representing a sample scenario\noften seen in banking systems with several applications cooperating to provide a single and consistent API to its callers.</p>\n</li>\n<li>\n<p>Check more <a href=\"https://zato.io/en/docs/3.2/dev/index.html\">resources for developers</a> and <a href=\"https://zato.io/en/docs/3.2/intro/screenshots.html\">screenshots</a>.</p>\n</li>\n<li>\n<p>Para aprender más sobre las integraciones de Zato y API en español, haga <a href=\"https://zato.io/docs/intro/overview-high-level-es.html?b\">clic aquí</a></p>\n</li>\n</ul>"
}