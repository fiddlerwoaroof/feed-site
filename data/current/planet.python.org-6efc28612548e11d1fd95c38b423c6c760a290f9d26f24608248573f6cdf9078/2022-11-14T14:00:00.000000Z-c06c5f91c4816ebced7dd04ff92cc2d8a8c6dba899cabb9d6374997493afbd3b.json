{
  "title":"Real Python: Python REST APIs With Flask, Connexion, and SQLAlchemy – Part 1",
  "date":"2022-11-14T14:00:00.000000Z",
  "author":null,
  "id":"https://realpython.com/flask-connexion-rest-api/",
  "link":"https://realpython.com/flask-connexion-rest-api/",
  "content":"<div><p>Most modern web applications are powered by a <strong>REST API</strong> under the hood. That way, developers can separate the front-end code from the back-end logic, and users can interact with the interface dynamically. In this three-part tutorial series, you’ll build a REST API with the <strong>Flask web framework</strong>.</p>\n<p>You’ll create a foundation with a basic Flask project then add endpoints and connect them to a <strong>SQLite database</strong>. You’ll test your API with <strong>Swagger UI API documentation</strong> that you’ll build along the way.</p>\n<p><strong>In the first part of this tutorial series, you’ll learn how to:</strong></p>\n<ul>\n<li>Build a base <strong>Flask</strong> project with a <strong>REST API</strong></li>\n<li>Handle <strong>HTTP requests</strong> with <strong>Connexion</strong></li>\n<li>Define <strong>API endpoints</strong> using the <strong>OpenAPI</strong> specification</li>\n<li>Interact with your <strong>API</strong> to manage data</li>\n<li>Build <strong>API documentation</strong> with <strong>Swagger UI</strong></li>\n</ul>\n<p>After finishing the first part of this series, you’ll move on to the second part, where you’ll learn to use a proper database to store your data permanently instead of relying on in-memory storage.</p>\n<p>This tutorial series is a hand-on guide on how to create a REST API with Flask and interact with it using <a href=\"https://en.wikipedia.org/wiki/Create,_read,_update_and_delete\">CRUD operations</a>. If you want to refresh your knowledge on working with APIs, then you can give <a href=\"https://realpython.com/api-integration-in-python/\">Python and REST APIs: Interacting With Web Services</a> a read.</p>\n<p>You can download the code for the first part of this project by clicking the link below:</p>\n<div class=\"alert alert-warning\">\n<p><strong>Source Code:</strong> <a href=\"https://realpython.com/bonus/flask-connexion-rest-api-part-1-code/\" class=\"alert-link\">Click here to download the free source code</a> that you’ll use to build a REST API with the Flask web framework.</p>\n</div>\n<h2 id=\"demo\">Demo<a class=\"headerlink\" href=\"https://realpython.com/atom.xml#demo\" title=\"Permanent link\"></a></h2>\n<p>In this three-part tutorial series, you’ll build a REST API to keep track of notes for people that may visit you throughout the year. In this tutorial, you’ll create people like the <a href=\"https://en.wikipedia.org/wiki/Tooth_fairy\">Tooth Fairy</a>, the <a href=\"https://en.wikipedia.org/wiki/Easter_Bunny\">Easter Bunny</a>, and <a href=\"https://en.wikipedia.org/wiki/Knecht_Ruprecht\">Knecht Ruprecht</a>. </p>\n<p>Ideally, you want to be on good terms with all three of them. That’s why you’ll send them notes, to increase the chance of getting valuable gifts from them.</p>\n<p>You can interact with your application by leveraging the API documentation. Along the way, you’ll build a basic front end that reflects the contents of your database:</p>\n\n  <div class=\"embed-responsive embed-responsive-16by9 rounded mb-3 border\">\n    \n  </div>\n\n\n\n<p>In the first part of this series, you’ll create a base Flask project and plug in your first API endpoints. At the end of this part, you’ll be able to see a list of people in the front end and manage each person in the back end:</p>\n\n  <div class=\"embed-responsive embed-responsive-16by9 rounded mb-3 border\">\n    \n  </div>\n\n\n\n<p>By leveraging Swagger UI, you’ll create handy documentation for your API along the way. That way, you’ll have the opportunity to test how your API works at each stage of this tutorial and get a useful overview of all your endpoints.</p>\n<h2 id=\"planning-part-one\">Planning Part One<a class=\"headerlink\" href=\"https://realpython.com/atom.xml#planning-part-one\" title=\"Permanent link\"></a></h2>\n<p>Besides building the Flask project foundation, you’re going to create a REST API that provides access to a collection of people and to the individuals within that collection. Here’s the API design for the people collection:</p>\n<div class=\"table-responsive\">\n<table class=\"table table-hover\">\n<thead>\n<tr>\n<th class=\"text-left\">Action</th>\n<th class=\"text-left\">HTTP Verb</th>\n<th class=\"text-left\">URL Path</th>\n<th class=\"text-left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"text-left\">Read</td>\n<td class=\"text-left\"><code>GET</code></td>\n<td class=\"text-left\"><code>/api/people</code></td>\n<td class=\"text-left\">Read a collection of people.</td>\n</tr>\n<tr>\n<td class=\"text-left\">Create</td>\n<td class=\"text-left\"><code>POST</code></td>\n<td class=\"text-left\"><code>/api/people</code></td>\n<td class=\"text-left\">Create a new person.</td>\n</tr>\n<tr>\n<td class=\"text-left\">Read</td>\n<td class=\"text-left\"><code>GET</code></td>\n<td class=\"text-left\"><code>/api/people/&lt;lname&gt;</code></td>\n<td class=\"text-left\">Read a particular person.</td>\n</tr>\n<tr>\n<td class=\"text-left\">Update</td>\n<td class=\"text-left\"><code>PUT</code></td>\n<td class=\"text-left\"><code>/api/people/&lt;lname&gt;</code></td>\n<td class=\"text-left\">Update an existing person.</td>\n</tr>\n<tr>\n<td class=\"text-left\">Delete</td>\n<td class=\"text-left\"><code>DELETE</code></td>\n<td class=\"text-left\"><code>/api/people/&lt;lname&gt;</code></td>\n<td class=\"text-left\">Delete an existing person.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>The REST API that you’ll be building will serve a simple people data structure where the people are keyed to the last name, and any updates are marked with a new timestamp.</p>\n<p>The dataset that you’ll be working with looks like this:</p>\n<div class=\"highlight python\"><pre><span></span><code><span class=\"n\">PEOPLE</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;Fairy&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;fname&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Tooth&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;lname&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Fairy&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;timestamp&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;2022-10-08 09:15:10&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">&quot;Ruprecht&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;fname&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Knecht&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;lname&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Ruprecht&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;timestamp&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;2022-10-08 09:15:13&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">&quot;Bunny&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;fname&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Easter&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;lname&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Bunny&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;timestamp&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;2022-10-08 09:15:27&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>One of the purposes of an API is to decouple the data from the application that uses it, thereby hiding the data implementation details. Later in this tutorial series, you’ll save your data in a database. But for the start, an in-memory data structure works fine.</p>\n<h2 id=\"getting-started\">Getting Started<a class=\"headerlink\" href=\"https://realpython.com/atom.xml#getting-started\" title=\"Permanent link\"></a></h2>\n<p>In this section, you’ll prepare the development environment for your Flask REST API project. First, you’ll create a <strong>virtual environment</strong> and install all the <strong>dependencies</strong> that you need for your project.</p>\n</div><h2><a href=\"https://realpython.com/flask-connexion-rest-api/?utm_source=realpython&amp;utm_medium=rss\">Read the full article at https://realpython.com/flask-connexion-rest-api/ »</a></h2>\n        <hr>\n        <p><em>[ Improve Your Python With \uD83D\uDC0D Python Tricks \uD83D\uDC8C – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href=\"https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer\">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>"
}