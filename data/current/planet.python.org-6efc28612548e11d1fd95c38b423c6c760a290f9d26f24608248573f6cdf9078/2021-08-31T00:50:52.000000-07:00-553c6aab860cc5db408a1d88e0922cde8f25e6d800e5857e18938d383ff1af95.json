{
  "title":"PyBites: How to handle environment variables in Python",
  "date":"2021-08-31T00:50:52.000000-07:00",
  "author":null,
  "id":"https://pybit.es/articles/how-to-handle-environment-variables-in-python/",
  "link":"https://pybit.es/articles/how-to-handle-environment-variables-in-python/",
  "content":"<p>In this article I will share 3 libraries I often use to isolate my environment variables from production code.</p>\n\n\n\n<p>Why is this important? </p>\n\n\n\n<h2>Separate config from code</h2>\n\n\n\n<p>As we can read in <a href=\"https://12factor.net/config\" rel=\"noreferrer noopener\">The Twelve-Factor App / III. Config</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Apps sometimes store config as constants in the code. This is a violation of twelve-factor, which requires <strong>strict separation of config from code</strong>.</p><cite>https://12factor.net/config</cite></blockquote>\n\n\n\n<p>Basically you want to be able to make config changes <strong>independently</strong> from code changes.</p>\n\n\n\n<p>We also want to hide secret keys and API credentials! Notice that git is very persistent (PyCon talk: <a href=\"https://www.youtube.com/watch?v=2uaTPmNvH0I\" rel=\"noreferrer noopener\">Oops, I committed my password to GitHub</a>) so it’s important to get this right from the start.</p>\n\n\n\n<h2>First package: python-dotenv</h2>\n\n\n\n<p>These days I mostly use <a href=\"https://pypi.org/project/python-dotenv/\" rel=\"noreferrer noopener\"><code>python-dotenv</code></a> which makes this straightforward.</p>\n\n\n\n<p>First install the library and add it to your requirements (or if you use <a href=\"https://www.youtube.com/watch?v=G-OAVLBFxbw\" rel=\"noreferrer noopener\">Poetry</a> it will automatically update your <code>.toml</code> file):</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pip install python-dotenv</code></pre>\n\n\n\n<p>Secondly make an <code>.env</code> file with your environment variables in it.</p>\n\n\n\n<p><strong>It’s important that you ignore this file with git</strong>, otherwise you will end up committing sensitive data to your repo / project.</p>\n\n\n\n<p>What I usually do is commit an empty <code>.env-example</code> (or <code>.env-template</code>) file so other developers know what they should set (see examples <a href=\"https://github.com/PyBites-Open-Source/pbreadinglist/blob/develop/.env-template\" rel=\"noreferrer noopener\">here</a> and <a href=\"https://github.com/bbelderbos/youtube-thumbnails/blob/main/.env-template\" rel=\"noreferrer noopener\">here</a>). </p>\n\n\n\n<p>So a new developer (or me checking out the repo on another machine) can do a <code>cp .env-template .env</code> and populate the variables. As the (checked out) <code>.gitignore</code> file contains <code>.env</code>, git won’t show it as a file to be staged for commit.</p>\n\n\n\n<p>Then, to load in the variables from this file we use two lines of code:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from dotenv import load_dotenv\n\nload_dotenv()</code></pre>\n\n\n\n<p>You can now access the environment variables using <code>os.environ</code>, <a href=\"https://github.com/bbelderbos/youtube-thumbnails/blob/main/thumbs.py\" rel=\"noreferrer noopener\">for example</a>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>BACKGROUND_IMG = os.environ[&quot;THUMB_BACKGROUND_IMAGE&quot;]\nFONT_FILE = os.environ[&quot;THUMB_FONT_TTF_FILE&quot;]</code></pre>\n\n\n\n<p>To load the config without touching the environment, you can use <code>dotenv_values(&quot;.env&quot;)</code> which works the same as <code>load_dotenv</code>, except it doesn’t touch the environment, it just returns a dict with the values parsed from the <code>.env</code> file.</p>\n\n\n\n<p>Check out <a href=\"https://pypi.org/project/python-dotenv/\" rel=\"noreferrer noopener\">the README</a> for additional options.</p>\n\n\n\n<h2>Second package: python-decouple</h2>\n\n\n\n<p>Another library I have been using a lot with Django is <code><a href=\"https://pypi.org/project/python-decouple/\" rel=\"noreferrer noopener\">python-decouple</a></code>.</p>\n\n\n\n<p>The process is pretty similar:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pip install python-decouple</code></pre>\n\n\n\n<p>Create an <code>.env</code> file with your config variables and “gitignore” it.</p>\n\n\n\n<p>Then in your code you can use the <code>config</code> object. As per the example in the docs:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from decouple import config\n\nSECRET_KEY = config('SECRET_KEY')\nDEBUG = config('DEBUG', default=False, cast=bool)\nEMAIL_HOST = config('EMAIL_HOST', default='localhost')\nEMAIL_PORT = config('EMAIL_PORT', default=25, cast=int)</code></pre>\n\n\n\n<p>The casting and the ability to specify defaults are really convenient.</p>\n\n\n\n<p>Another useful option is the <code>Csv</code> helper. For example having this in our <code>.env</code> file for <a href=\"https://testandcode.com/83\" rel=\"noreferrer noopener\">our platform</a> (a Django app):</p>\n\n\n\n<pre class=\"wp-block-code\"><code>ALLOWED_HOSTS=.localhost, .herokuapp.com</code></pre>\n\n\n\n<p>We can retrieve this variable in <code>settings.py</code> like this:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>ALLOWED_HOSTS = config('ALLOWED_HOSTS', cast=Csv())</code></pre>\n\n\n\n<h2>Third package: dj-database-url</h2>\n\n\n\n<p>And while we are here, there is one more package I want to show you: <a href=\"https://pypi.org/project/dj-database-url/\" rel=\"noreferrer noopener\"><code>dj-database-url</code></a>, which makes it easier to load in your database URL. </p>\n\n\n\n<p>As per the docs:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>The dj_database_url.config method returns a Django database connection dictionary, populated with all the data specified in your URL. There is also a conn_max_age argument to easily enable Django’s connection pool.</p><cite>https://pypi.org/project/dj-database-url/</cite></blockquote>\n\n\n\n<p>And here is how to use it:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import dj_database_url\n\nDATABASES = {\n    'default': dj_database_url.config(\n        default=config('DATABASE_URL')\n    )\n}</code></pre>\n\n\n\n<p>Nice and clean!</p>\n\n\n\n<p>This is what I mostly use, for more options, check out <code>python-decouple</code>‘s README <a href=\"https://pypi.org/project/python-decouple/\" rel=\"noreferrer noopener\">here</a>.</p>\n\n\n\n<hr class=\"wp-block-separator\"></hr>\n\n\n\n<h2>Python Tips</h2>\n\n\n\n<p>As a recap, here is the <code>python-decouple</code> code in a concise tip you can easily paste into your project:</p>\n\n\n\n<pre class=\"wp-block-code\"><code># pip install python-decouple dj-database-url\n\nfrom decouple import config, Csv\nimport dj_database_url\n\nSECRET_KEY = config('SECRET_KEY')\nDEBUG = config('DEBUG', default=False, cast=bool)\nALLOWED_HOSTS = config('ALLOWED_HOSTS', cast=Csv())\n\nDATABASES = {\n    'default': dj_database_url.config(\n        default=config('DATABASE_URL')\n    )\n}</code></pre>\n\n\n\n<p>We love <strong>practical tips</strong> like these, to get our growing collection check out our book: <em><a href=\"http://pybit.es/tips\" rel=\"noreferrer noopener\">PyBites Python Tips – 250 Bulletproof Python Tips That Will Instantly Make You A Better Developer</a></em></p>\n\n\n\n<p>And with that we got a wrap. I hope this has been useful and will make it easier for you to <em>separate config from code</em>, which I wholeheartedly agree with <a href=\"https://12factor.net/\" rel=\"noreferrer noopener\">The Twelve-Factor App</a>, is important.</p>\n\n\n\n<p>— Bob</p>"
}