{
  "title":"Python Morsels: Accessing command-line arguments in Python",
  "date":"2021-08-30T08:00:00.000000-07:00",
  "author":null,
  "id":"https://www.pythonmorsels.com/topics/accessing-command-line-arguments-python/",
  "link":"https://www.pythonmorsels.com/topics/accessing-command-line-arguments-python/",
  "content":"<a href=\"https://www.pythonmorsels.com/topics/accessing-command-line-arguments-python/\">\n  <img class=\"img-fluid\" src=\"https://i.vimeocdn.com/filter/overlay?src0=https%3A%2F%2Fi.vimeocdn.com%2Fvideo%2F1193492986_1920x1080&amp;src1=http%3A%2F%2Ff.vimeocdn.com%2Fp%2Fimages%2Fcrawler_play.png\">\n</a>\n<h2>Transcript</h2>\n<p>What if we wanted to <strong>pass information to our Python program</strong> to change the way that it runs?\nOne of the most common ways to do this is with <strong>command-line arguments</strong>.</p>\n<h3>Passing command-line arguments</h3>\n<p>When you run a program from your system command-line, you can pass in arguments:</p>\n<p>Here we have a program called <code>greet.py</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Hello world&quot;</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>Here we're calling this program:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ python3 greet.py\nHello world\n</code></pre></div>\n\n<h3>Function arguments vs command-line arguments</h3>\n<p>The word &quot;argument&quot; is a loaded term.</p>\n<p>In Python we have <strong>function arguments</strong> which are <strong>inputs to a function</strong>.\nBut <em>command-line arguments</em><em> are </em><em>inputs to an entire program</em>*.</p>\n<p>So function arguments and command-line arguments are not very related, except that they're both <em>inputs</em> into something.</p>\n<h3>Python accepts whatever command-line arguments we give it</h3>\n<p>What do you think will happen if we passed an argument to our <code>greet.py</code> program, as we run it through Python?</p>\n<div class=\"codehilite\"><pre><span></span><code>$ python3 greet.py Trey\n</code></pre></div>\n\n<p>Our <code>greet.py</code> program doesn't use command-line arguments at all.\nIt's just a single line of code:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Hello world&quot;</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>So what's your guess?\nWill python print <code>Hello world</code>?\nWill it print <code>Hello Trey</code>?\nWill we get an error?\nSomething else?</p>\n<p>When we run this <code>greet.py</code> program with the argument <code>Trey</code> we see <code>Hello world</code> printed out:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ python3 greet.py Trey\nHello world\n</code></pre></div>\n\n<p>That's a little bit odd.</p>\n<p>Python is just <strong>ignoring whatever argument we passed</strong> to this program.\nPython <strong>stores all the arguments</strong> that we give it, but it doesn't <em>do</em> anything with the arguments: it's up to us (the implementer of this program) to do something with them.</p>\n<h3>Where are command-line arguments stored?</h3>\n<p>Python stores command-line arguments in the <code>sys</code> module within a list called <code>argv</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Hello world&quot;</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>The <code>sys.argv</code> list has all of the arguments passed to our Python program:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ python3 greet.py Trey\n<span class=\"o\">[</span><span class=\"s1\">'greet.py'</span>, <span class=\"s1\">'Trey'</span><span class=\"o\">]</span>\nHello world\n</code></pre></div>\n\n<p>Our <code>sys.argv</code> list here has two things in it, our program name and the argument we've passed in.</p>\n<div class=\"codehilite\"><pre><span></span><code>$ python3 greet.py Trey\n<span class=\"o\">[</span><span class=\"s1\">'greet.py'</span>, <span class=\"s1\">'Trey'</span><span class=\"o\">]</span>\n</code></pre></div>\n\n<p>The <strong>first thing in <code>sys.argv</code></strong> is always going to be <strong>our program name</strong>.</p>\n<h3>Accessing command-line arguments</h3>\n<p>If we wanted to grab the argument after our program name we could read the second item (index <code>1</code>) from <code>sys.argv</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Hello&quot;</span><span class=\"p\">,</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n</code></pre></div>\n\n<p>We're assuming we get an argument passed in and we're printing that argument out:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ python3 greet.py Trey\nHello Trey\n$ python3 greet.py Carol\nHello Carol\n</code></pre></div>\n\n<p>If I pass more than one argument our program is currently just <em>ignoring</em> everything after that first argument:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ python3 greet.py Trey Hunner\nHello Trey\n</code></pre></div>\n\n<p>What if we pass too few arguments?</p>\n<div class=\"codehilite\"><pre><span></span><code>$ python3 greet.py\nTraceback <span class=\"o\">(</span>most recent call last<span class=\"o\">)</span>:\n  File <span class=\"s2\">&quot;/home/trey/greet.py&quot;</span>, line <span class=\"m\">3</span>, <span class=\"k\">in</span> &lt;module&gt;\n    print<span class=\"o\">(</span><span class=\"s2\">&quot;Hello&quot;</span>, sys.argv<span class=\"o\">[</span><span class=\"m\">1</span><span class=\"o\">])</span>\nIndexError: list index out of range\n</code></pre></div>\n\n<p>If we pass in two few arguments we'll get an <code>IndexError</code> (because <code>sys.argv</code> doesn't have an index <code>1</code> in this case).</p>\n<p>Processing <code>sys.argv</code> <em>manually</em> is something that you should only do for <strong>very simple Python programs</strong>: programs that don't need much complex command-line argument processing and ideally only do this for programs that are <em>just for your use</em>.</p>\n<h3>Python provides all command-line arguments as strings</h3>\n<p>Let's take a look at another example.\nHere we have a program called <code>add.py</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"n\">program</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>This program takes <code>sys.argv</code> and unpacks it into three variables: the program name, and whatever two arguments are given after that:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">program</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span>\n</code></pre></div>\n\n<p>Then it adds those arguments together and prints them out:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>What should we see when we run <code>add.py</code> with <code>2</code> and <code>3</code>?</p>\n<div class=\"codehilite\"><pre><span></span><code>$ python3 add.py <span class=\"m\">2</span> <span class=\"m\">3</span>\n</code></pre></div>\n\n<p>Take a guess.</p>\n<p>6?</p>\n<p>5?</p>\n<p>100?</p>\n<p>Here's what we see when we run <code>add.py</code> with <code>2</code> and <code>3</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ python3 add.py <span class=\"m\">2</span> <span class=\"m\">3</span>\n<span class=\"m\">23</span>\n</code></pre></div>\n\n<p>Weird, right?\nClearly 2 plus 3 is not 23, or at least it shouldn't be 23, and yet that's what we see.</p>\n<p>If we <code>print</code> out <code>sys.argv</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"n\">program</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>We'll see that it's a list of strings:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ python3 add.py <span class=\"m\">2</span> <span class=\"m\">3</span>\n<span class=\"o\">[</span><span class=\"s1\">'add.py'</span>, <span class=\"s1\">'2'</span>, <span class=\"s1\">'3'</span><span class=\"o\">]</span>\n</code></pre></div>\n\n<p><strong>Python stores all command-line arguments as strings</strong> because all command-line arguments are given to Python <strong>as text</strong> by the operating system.\nPython doesn't do any processing with them; it's <em>up to us</em> to make meaning of these arguments.</p>\n<p>So if we want <code>2</code> and <code>3</code> to be numbers, we'll have to convert them to numbers ourselves:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"n\">program</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">))</span>\n</code></pre></div>\n\n<p>Now we finally see the result we're expecting:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ python3 add.py <span class=\"m\">2</span> <span class=\"m\">3</span>\n<span class=\"m\">5</span>.0\n</code></pre></div>\n\n<h3>Summary</h3>\n<p>If you need to make a very simple command-line interface (one that's just for you) and it doesn't need to be friendly, you can <strong>read <code>sys.argv</code> to <em>manually</em> process the arguments</strong> coming into your program.\nBut if you need something more complex, you should probably use a proper command-line argument processing tool (like Python's <code>argparse</code> module).</p>"
}