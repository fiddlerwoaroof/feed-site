{
  "title":"Python for Beginners: Custom JSON Decoder in Python",
  "date":"2022-11-16T14:00:00.000000Z",
  "author":null,
  "id":"https://www.pythonforbeginners.com/basics/custom-json-decoder-in-python",
  "link":"https://www.pythonforbeginners.com/basics/custom-json-decoder-in-python",
  "content":"<p>JSON objects are one of the most efficient tools to communicate with web applications. When we receive a JSON file, we need to convert it into a python object to use it in our python program. In this article, we will discuss different ways to create and use a custom JSON decoder in Python.</p>\n\n\n\n<p>Before continuing with the article, I suggest you read this article on <a href=\"https://www.pythonforbeginners.com/basics/working-with-json-files-in-python\" rel=\"noreferrer noopener\">working with JSON files in Python if yo</a>u don’t know how to work with simple JSON objects.</p>\n\n\n\n<div class=\"wp-block-ht-block-toc is-style-rounded htoc htoc--position-wide toc-list-style-numbered\"><span class=\"htoc__title\"><span class=\"ht_toc_title\">Table of Contents</span><span class=\"htoc__toggle\"></span></span><div class=\"htoc__itemswrap\"><ol class=\"ht_toc_list\"><li class=\"\"><a href=\"https://www.pythonforbeginners.com/feed#htoc-how-to-convert-json-to-python-object\">How to Convert JSON to Python object?</a><ol class=\"ht_toc_child_list\"><li class=\"\"><a href=\"https://www.pythonforbeginners.com/feed#htoc-json-file-to-python-object-using-the-load-method\">JSON File to Python Object Using the load() Method</a></li></ol></li><li class=\"\"><a href=\"https://www.pythonforbeginners.com/feed#htoc-json-string-to-python-object-using-loads-method\">Json String to Python Object Using loads() Method</a></li><li class=\"\"><a href=\"https://www.pythonforbeginners.com/feed#htoc-json-file-to-python-object-using-jsondecoder-class\">JSON File to Python Object Using JSONDecoder Class</a></li><li class=\"\"><a href=\"https://www.pythonforbeginners.com/feed#htoc-nested-json-file-to-python-object-using-custom-decoder-class\">Nested JSON File to Python Object Using Custom Decoder Class</a></li><li class=\"\"><a href=\"https://www.pythonforbeginners.com/feed#htoc-conclusion\">Conclusion</a></li></ol></div></div>\n\n\n\n<h2 id=\"htoc-how-to-convert-json-to-python-object\">How to Convert JSON to Python object?</h2>\n\n\n\n<p>You can convert a JSON file or string to a python object using the <code>load()</code> method, the <code>loads()</code> method, or the JSONDecoder class. Let us discuss each method one by one.</p>\n\n\n\n<h3 id=\"htoc-json-file-to-python-object-using-the-load-method\">JSON File to Python Object Using the load() Method</h3>\n\n\n\n<p>The<code> load()</code> method takes a file pointer to a JSON file and returns a <a href=\"https://www.pythonforbeginners.com/dictionary/how-to-use-dictionaries-in-python\" rel=\"noreferrer noopener\">python dictionary</a> object. For instance, we have the following JSON file. </p>\n\n\n\n<img width=\"575\" height=\"143\" src=\"https://www.pythonforbeginners.com/wp-content/uploads/image-8.png\" alt=\"\" class=\"wp-image-10983\">JSON object\n\n\n\n<p>When we convert this file to a python object using the <code>load()</code> method, we get a python dictionary as shown in the following example.</p>\n\n\n\n<pre class=\"wp-block-code language-python\"><code>import json\nfp=open(&quot;simplestudent.json&quot;)\nmyDict=json.load(fp)\nprint(&quot;The python object is:&quot;)\nprint(myDict)</code></pre>\n\n\n\n<p>Output</p>\n\n\n\n<pre class=\"wp-block-code language-python\"><code>The python object is:\n{'Name': 'Aditya', 'Age': 23}</code></pre>\n\n\n\n<p>If you want to get a python object instead of the dictionary, we need to create a custom JSON decoder. For this, we will create a function that takes the dictionary returned by the <code>load()</code> method and converts it into a python object. We will pass the function to the <code>object_hook</code> parameter in the <code>load()</code> method while encoding the JSON file. You can observe this in the following example.</p>\n\n\n\n<pre class=\"wp-block-code language-python\"><code>import json\nclass Student:\n    def __init__(self, name, age):\n        self.Name=name\n        self.Age=age\ndef SimpleDecoderFunction(jsonDict):\n    return Student(jsonDict[&quot;Name&quot;],jsonDict[&quot;Age&quot;])\nfp=open(&quot;simplestudent.json&quot;,&quot;r&quot;)\npython_obj=json.load(fp,object_hook=SimpleDecoderFunction)\nprint(&quot;The python object is:&quot;)\nprint(python_obj)</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code language-python\"><code>The python object is:\n&lt;__main__.Student object at 0x7fe1c87a36a0&gt;</code></pre>\n\n\n\n<p>In the above example, we have defined a <code>Student</code> class. We have also defined a <code>SimpleDecoderFunction()</code> function. When we pass the <code>SimpleDecoderFunction()</code> to the <code>load() </code>method while decoding a JSON object, the created python dictionary object is first sent to the <code>SimpleDecoderFunction()</code>. The <code>SimpleDecoderFunction() </code>takes the dictionary and converts it into a python object of the <code>Student</code> class that we get as the output of the <code>load()</code> method.</p>\n\n\n\n<h2 id=\"htoc-json-string-to-python-object-using-loads-method\">Json String to Python Object Using loads() Method</h2>\n\n\n\n<p>If you have a JSON string instead of a JSON file, you can convert it into a python object using the <code>loads() </code>method. The <code>loads()</code> method takes a JSON string as its input argument and returns a python dictionary as shown in the following example.</p>\n\n\n\n<pre class=\"wp-block-code language-python\"><code>import json\njsonStr='{&quot;Name&quot;: &quot;Aditya&quot;, &quot;Age&quot;: 23}'\npython_obj=json.loads(jsonStr)\nprint(&quot;The python object is:&quot;)\nprint(python_obj)</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code language-python\"><code>The python object is:\n{'Name': 'Aditya', 'Age': 23}</code></pre>\n\n\n\n<p>To convert a JSON string to a python object using the <code>loads()</code> method, you can use a custom JSON decoder function and the <code>object_hook</code> parameter as shown below.</p>\n\n\n\n<pre class=\"wp-block-code language-python\"><code>import json\nclass Student:\n    def __init__(self, name, age):\n        self.Name=name\n        self.Age=age\ndef SimpleDecoderFunction(jsonDict):\n    return Student(jsonDict[&quot;Name&quot;],jsonDict[&quot;Age&quot;])\njsonStr='{&quot;Name&quot;: &quot;Aditya&quot;, &quot;Age&quot;: 23}'\npython_obj=json.loads(jsonStr,object_hook=SimpleDecoderFunction)\nprint(&quot;The python object is:&quot;)\nprint(python_obj)</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code language-python\"><code>The python object is:\n&lt;__main__.Student object at 0x7fe1c87a17b0&gt;</code></pre>\n\n\n\n<p>You can observe that the <code>loads()</code> method works in a similar manner to the<code> load()</code> method. The only difference is that it reads the JSON object from a string instead of a file. </p>\n\n\n\n<p>Instead of using the <code>load() </code>method and the <code>loads() </code>method, we can also create a decoder using the JSONDecoder class to convert JSON objects into python objects.</p>\n\n\n\n<p>Suggested Reading: If you are into machine learning, you can read this article on <a href=\"https://codinginfinite.com/mlops-a-complete-guide-for-beginners/\" rel=\"noreferrer noopener\">mlops for beginners</a>. You might also like this article on <a href=\"https://codinginfinite.com/clustering-for-mixed-data-types-in-python/\" rel=\"noreferrer noopener\">clustering mixed data types in Python</a>.</p>\n\n\n\n<h2 id=\"htoc-json-file-to-python-object-using-jsondecoder-class\">JSON File to Python Object Using JSONDecoder Class</h2>\n\n\n\n<p>The JSONDecoder class constructor has the following syntax</p>\n\n\n\n<pre class=\"wp-block-code language-python\"><code>class json.JSONDecoder(*, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, strict=True, object_pairs_hook=None)</code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<ul><li>The <code>object_hook</code> parameter is used to create custom JSON decoders. The <code>object_hook</code> parameter takes a function as its input argument. The function is called with the object literal decoded from the JSON. In the output, the return value of the function is used instead of the dict. </li><li>The <code>parse_float</code> parameter is used to convert any floating point number in the JSON to another data type. By default, the <code>float()</code> function is called with the strings containing floating point numbers in the JSON while decoding. If we specify a function in the <code>parse_float</code> parameter,  the decoder passes the string containing a floating point number to the function and the output of the function is used in the python object. This parameter can be used if you want to convert the floats to ints or other data types while loading the JSON itself.</li><li>The <code>parse_int</code> parameter is used to convert any integer in the JSON to another data type. By default, the <code>int()</code> function is called with the strings containing integers in the JSON. If we specify a function in the <code>parse_int</code> parameter,  the decoder passes the string containing the integer to the function and the output of the function is used in the python object. This parameter can be used if you want to convert the integers to floats or other data types while loading the JSON itself. The default <code>parse_int</code> of <code>int()</code> now limits the maximum length of the integer string via the interpreter’s integer string conversion length limitation to help avoid denial of service attacks.</li><li>The <code>parse_constant</code> parameter is used to load <code>NaN</code>,<code> -Infinity</code>, and <code>+Infinity</code> from JSON to custom python values. The <code>parse_constant</code> parameter takes a function as its input argument. While the execution of the decoder,  <code>NaN</code>, <code>-Infinity,</code> and <code>+Infinity</code> are passed to the function, and the return value is used in the python object.</li><li>The <code>object_pairs_hook</code> is an optional parameter that takes a function as its input argument. The function is called with the result of any object literal decoded with an ordered list of pairs. The return value of <code>object_pairs_hook</code> is used instead of the dict. This feature can be used to implement custom decoders. If <code>object_hook</code> is also defined, the <code>object_pairs_hook</code> takes priority.</li></ul>\n\n\n\n<p>After execution, the <code>JSONDecoder()</code> constructor returns a JSON decoder. We can invoke the <code>decode()</code> method on the JSON decoder to obtain a python dictionary from a JSON string as shown below.</p>\n\n\n\n<pre class=\"wp-block-code language-python\"><code>import json\njsonStr='{&quot;Name&quot;: &quot;Aditya&quot;, &quot;Age&quot;: 23}'\nprint(&quot;The JSON string is:&quot;)\nprint(jsonStr)\nmyDict=json.JSONDecoder().decode(jsonStr)\nprint(&quot;The python object is:&quot;)\nprint(myDict)</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code language-python\"><code>The JSON string is:\n{&quot;Name&quot;: &quot;Aditya&quot;, &quot;Age&quot;: 23}\nThe python object is:\n{'Name': 'Aditya', 'Age': 23}</code></pre>\n\n\n\n<p>In the above example, we first create a JSONDecoder object using the <code>JSONDecoder()</code> constructor. After that, we invoke the<code> decode()</code> method on the JSONDecoder object. The <code>decode()</code> object takes a JSON string as its input argument and returns a Python dictionary.</p>\n\n\n\n<p>To convert a JSON string to a custom python object, you can use the <code>object_hook</code> parameter in the <code>JSONDecoder()</code> constructor. The <code>JSONDecoder() </code>constructor takes a function as its input argument. The function must take the dictionary which is the normal output while decoding and convert it to a custom python object. For instance, consider the following example.</p>\n\n\n\n<pre class=\"wp-block-code language-python\"><code>import json\nclass Student:\n    def __init__(self, name, age):\n        self.Name=name\n        self.Age=age\ndef SimpleDecoderFunction(jsonDict):\n    return Student(jsonDict[&quot;Name&quot;],jsonDict[&quot;Age&quot;])\njsonStr='{&quot;Name&quot;: &quot;Aditya&quot;, &quot;Age&quot;: 23}'\npython_obj=json.JSONDecoder(object_hook=SimpleDecoderFunction).decode(jsonStr)\nprint(&quot;The python object is:&quot;)\nprint(python_obj)</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code language-python\"><code>The python object is:\n&lt;__main__.Student object at 0x7fe1c87a32b0&gt;</code></pre>\n\n\n\n<h2 id=\"htoc-nested-json-file-to-python-object-using-custom-decoder-class\">Nested JSON File to Python Object Using Custom Decoder Class</h2>\n\n\n\n<p>Converting a flat JSON file to a python object is easy as all the values in the JSON object are of primitive data types when converted to a dictionary. However, decoding nested JSON objects gives us nested dictionaries.  </p>\n\n\n\n<img width=\"575\" height=\"143\" src=\"https://www.pythonforbeginners.com/wp-content/uploads/image-9.png\" alt=\"\" class=\"wp-image-10985\">\n\n\n\n<p>If we convert the above string to JSON, we will get a nested dictionary as shown below.</p>\n\n\n\n<pre class=\"wp-block-code language-python\"><code>import json\njsonStr='{&quot;__type__&quot;: &quot;Student&quot;,&quot;Name&quot;: &quot;Aditya&quot;, &quot;Age&quot;: 23, &quot;Details&quot;: {&quot;__type__&quot;: &quot;Details&quot;,&quot;Height&quot;: 160, &quot;Weight&quot;: 60}}'\npython_obj=json.JSONDecoder().decode(jsonStr)\nprint(&quot;The python object is:&quot;)\nprint(python_obj)</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code language-python\"><code>The python object is:\n{'__type__': 'Student', 'Name': 'Aditya', 'Age': 23, 'Details': {'__type__': 'Details', 'Height': 160, 'Weight': 60}}</code></pre>\n\n\n\n<p>For converting nested JSON files to python objects, there should be a key-value pair in the JSON that determines the type of python object that we want to create. If the JSON object contains the type of the python object to be created, we can define a custom function that takes the dictionary loaded from the JSON object and converts it into a python object. Then, we will pass the function to the <code>object_hook</code> parameter in the <code>load() </code>method. After this, the <code>load()</code> method will return a custom python object instead of a dictionary. You can observe this in the following example.</p>\n\n\n\n<pre class=\"wp-block-code language-python\"><code>class Student:\n    def __init__(self, name, age,details):\n        self.Name=name\n        self.Age=age\n        self.Details=details\nclass Details:\n    def __init__(self, height, weight):\n        self.Height=height\n        self.Weight=weight\ndef ComplexDecoderFunction(jsonDict):\n    if '__type__' in jsonDict and jsonDict['__type__'] == 'Student':\n        return Student(jsonDict['Name'], jsonDict['Age'], jsonDict['Details'])\n    if '__type__' in jsonDict and jsonDict['__type__'] == 'Details':\n        return Details(jsonDict['Height'], jsonDict['Weight'])\n    \nfp=open(&quot;complexstudent.json&quot;)\npython_obj=json.load(fp,object_hook=ComplexDecoderFunction)\nprint(&quot;The python object is:&quot;)\nprint(python_obj)\nfp.close()</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code language-python\"><code>The python object is:\n&lt;__main__.Student object at 0x7fe1c87a2d70&gt;</code></pre>\n\n\n\n<p>In the above example, we have defined a <code>Details</code> class with attributes <code>Height</code> and <code>Weight</code>. We have also defined the <code>Student</code> class with the attributes <code>Name</code>, <code>Age</code>, and <code>Details</code>. </p>\n\n\n\n<p>To convert the input nested dictionary to a python object, we have defined a custom JSON decoder function <code>ComplexDecoderFunction()</code>. The input json object has the attribute <code>__type__ </code>to specify the class of python object to which the object can be converted.  The process of encoding complex python objects to JSON is discussed in this article on <a href=\"https://www.pythonforbeginners.com/basics/custom-json-encoder-in-python\" rel=\"noreferrer noopener\">custom json encoder in Python.</a></p>\n\n\n\n<p>The <code>load() </code>method passes the outer dictionary and the inner dictionary to the  <code>ComplexDecoderFunction()</code>. The function checks the class to which the dictionary has to be converted using the <code>__type__</code> attribute and returns a python object of the appropriate type. The <code>load()</code> method then returns the complete python object.</p>\n\n\n\n<p>If you want to obtain a python object from a json string instead of a file, you can use the <code>loads() </code>method instead of the<code> load()</code> method as shown in the following example.</p>\n\n\n\n<pre class=\"wp-block-code language-python\"><code>class Student:\n    def __init__(self, name, age,details):\n        self.Name=name\n        self.Age=age\n        self.Details=details\nclass Details:\n    def __init__(self, height, weight):\n        self.Height=height\n        self.Weight=weight\ndef ComplexDecoderFunction(jsonDict):\n    if '__type__' in jsonDict and jsonDict['__type__'] == 'Student':\n        return Student(jsonDict['Name'], jsonDict['Age'], jsonDict['Details'])\n    if '__type__' in jsonDict and jsonDict['__type__'] == 'Details':\n        return Details(jsonDict['Height'], jsonDict['Weight'])\n    \njsonStr='{&quot;__type__&quot;: &quot;Student&quot;,&quot;Name&quot;: &quot;Aditya&quot;, &quot;Age&quot;: 23, &quot;Details&quot;: {&quot;__type__&quot;: &quot;Details&quot;,&quot;Height&quot;: 160, &quot;Weight&quot;: 60}}'\npython_obj=json.loads(jsonStr,object_hook=ComplexDecoderFunction)\nprint(&quot;The python object is:&quot;)\nprint(python_obj)</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code language-python\"><code>The python object is:\n&lt;__main__.Student object at 0x7fe1c87a1f90&gt;</code></pre>\n\n\n\n<p>You can also create a custom decoder for nested json strings to create a python object using the <code>JSONDecoder()</code> constructor as shown below.</p>\n\n\n\n<pre class=\"wp-block-code language-python\"><code>class Student:\n    def __init__(self, name, age,details):\n        self.Name=name\n        self.Age=age\n        self.Details=details\nclass Details:\n    def __init__(self, height, weight):\n        self.Height=height\n        self.Weight=weight\ndef ComplexDecoderFunction(jsonDict):\n    if '__type__' in jsonDict and jsonDict['__type__'] == 'Student':\n        return Student(jsonDict['Name'], jsonDict['Age'], jsonDict['Details'])\n    if '__type__' in jsonDict and jsonDict['__type__'] == 'Details':\n        return Details(jsonDict['Height'], jsonDict['Weight'])\n    \njsonStr='{&quot;__type__&quot;: &quot;Student&quot;,&quot;Name&quot;: &quot;Aditya&quot;, &quot;Age&quot;: 23, &quot;Details&quot;: {&quot;__type__&quot;: &quot;Details&quot;,&quot;Height&quot;: 160, &quot;Weight&quot;: 60}}'\npython_obj=json.JSONDecoder(object_hook=ComplexDecoderFunction).decode(jsonStr)\nprint(&quot;The python object is:&quot;)\nprint(python_obj)</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code language-python\"><code>The python object is:\n&lt;__main__.Student object at 0x7fe1c87a31f0&gt;</code></pre>\n\n\n\n<h2 id=\"htoc-conclusion\">Conclusion</h2>\n\n\n\n<p>In this article, we have discussed different ways to create a custom json decoder in python. To learn more about python programming, you can read this article on how to <a href=\"https://codinginfinite.com/python-chat-application-tutorial-source-code/\" rel=\"noreferrer noopener\">create a chat app in Python</a>. You might also like this article on <a href=\"https://codinginfinite.com/linear-regression-using-sklearn-in-python/\" rel=\"noreferrer noopener\">linear regression using the sklearn</a> module in Python.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://www.pythonforbeginners.com/basics/custom-json-decoder-in-python\">Custom JSON Decoder in Python</a> appeared first on <a rel=\"nofollow\" href=\"https://www.pythonforbeginners.com\">PythonForBeginners.com</a>.</p>"
}