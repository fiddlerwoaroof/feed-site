<?xml version="1.0"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/">

<channel>
	<title>Planet Python</title>
	<link>http://planetpython.org/</link>
	<language>en</language>
	<description>Planet Python - http://planetpython.org/</description>

<item>
	<title>Sebastian Witowski: How to Benchmark (Python) Code</title>
	<guid>https://switowski.com/blog/how-to-benchmark-python-code/</guid>
	<link>https://switowski.com/blog/how-to-benchmark-python-code/</link>
	<description>&lt;p&gt;While preparing to write the &amp;quot;Writing Faster Python&amp;quot; series, the first problem I faced was &amp;quot;How do I benchmark a piece of code in an objective yet uncomplicated way&amp;quot;.&lt;/p&gt;
&lt;p&gt;I could run &lt;code&gt;python -m timeit &amp;lt;piece of code&amp;gt;&lt;/code&gt;, which is probably the simplest way of measuring how long it takes to execute some code&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://switowski.com/blog/how-to-benchmark-python-code/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;. But maybe it's too simple, and I owe my readers some way of benchmarking that won't be interfered by sudden CPU spikes on my computer?&lt;/p&gt;
&lt;p&gt;So here are a couple of different tools and techniques I tried. At the end of the article, I will tell you which one I chose and why. Plus, I will give you some rules of thumb for when each tool might be handy.&lt;/p&gt;
&lt;h2 id=&quot;python-m-timeit&quot; tabindex=&quot;-1&quot;&gt;python -m timeit &lt;a class=&quot;direct-link&quot; href=&quot;https://switowski.com/blog/how-to-benchmark-python-code/#python-m-timeit&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The easiest way to measure how long it takes to run some code is to use the &lt;a href=&quot;https://docs.python.org/3/library/timeit.html&quot;&gt;timeit&lt;/a&gt; module. You can write &lt;code&gt;python -m timeit your_code()&lt;/code&gt;, and Python will print out how long it took to run whatever &lt;code&gt;your_code()&lt;/code&gt; does. I like to put the code I want to benchmark inside a function for more clarity, but you don't have to do this. You can directly write multiple Python statements separated by semicolons, and that will work just fine. For example, to see how long it takes to sum up the first 1,000,000 numbers, we can run this code:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;python -m timeit &lt;span class=&quot;token string&quot;&gt;&quot;sum(range(1_000_001))&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt; loops, best of &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;: &lt;span class=&quot;token number&quot;&gt;11.5&lt;/span&gt; msec per loop&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, &lt;code&gt;python -m timeit&lt;/code&gt; approach has a major drawback - it doesn't separate the setup code from the code you want to benchmark. Let's say you have an import statement that takes a relatively long time to import compared to executing a function from that module. One such import can be &lt;code&gt;import numpy&lt;/code&gt;. If we benchmark those two lines of code:&lt;/p&gt;
&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; numpy&lt;br /&gt;numpy&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;arange&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the import will take most of the time during the benchmark. But you probably don't want to benchmark how long it takes to import modules. You want to see how long it takes to execute some functions from that module.&lt;/p&gt;
&lt;h2 id=&quot;python-m-timeit-s-setup-code&quot; tabindex=&quot;-1&quot;&gt;python -m timeit -s &amp;quot;setup code&amp;quot; &lt;a class=&quot;direct-link&quot; href=&quot;https://switowski.com/blog/how-to-benchmark-python-code/#python-m-timeit-s-setup-code&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To separate the setup code from the benchmarks, timeit supports &lt;code&gt;-s&lt;/code&gt; parameter. Whatever code you pass here will be executed but won't be part of the benchmarks. So we can improve the above code and run it like this: &lt;code&gt;python -m timeit -s &amp;quot;import numpy&amp;quot; &amp;quot;numpy.arange(10)&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;python-m-timeit-s-setup-code-n-10000&quot; tabindex=&quot;-1&quot;&gt;python -m timeit -s &amp;quot;setup code&amp;quot; -n 10000 &lt;a class=&quot;direct-link&quot; href=&quot;https://switowski.com/blog/how-to-benchmark-python-code/#python-m-timeit-s-setup-code-n-10000&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We can be a bit more strict and decide to execute our code the same number of times each time. By default, if you don't specify the '-n' (or --number) parameter, timeit will try to run your code 1, 2, 5, 10, 20, ... until the total execution time exceeds 0.2 seconds. A slow function will be executed once, but a very fast one will run thousands of times. If you think executing different code snippets a different number of times affects your benchmarks, you can set this parameter to a predefined number.&lt;/p&gt;
&lt;h2 id=&quot;docker&quot; tabindex=&quot;-1&quot;&gt;docker &lt;a class=&quot;direct-link&quot; href=&quot;https://switowski.com/blog/how-to-benchmark-python-code/#docker&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the issues with running benchmarks with &lt;code&gt;python -m timeit&lt;/code&gt; is that sometimes other processes on your computer might affect the Python process and randomly slow it down. For example, I've noticed that if I run my benchmarks with all the usual applications open (multiple Chrome instances with plenty of tabs, Teams and other messenger apps, etc.), they all take a bit longer than when I close basically all the apps on my computer.&lt;/p&gt;
&lt;p&gt;So while trying to figure out how to avoid this situation, I decided to try to run my benchmarks in Docker. I came up with the following solution:
&lt;code&gt;docker run -w /home -it -v $(pwd):/home python:3.10.4-alpine python -m timeit -s &amp;quot;&amp;lt;some setup code&amp;gt;&amp;quot; &amp;quot;my_function()&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The above code will:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Run Python alpine Docker container (a small, barebones image with Python).&lt;/li&gt;
&lt;li&gt;Mount the current folder inside the Docker container (so we can access the files we want to benchmark).&lt;/li&gt;
&lt;li&gt;Run the same timeit command as before.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And the results &lt;em&gt;seemed&lt;/em&gt; more consistent than without using Docker. Rerunning benchmarks multiple times, I was getting results with smaller deviations. I still had a deviation - some runs were slightly slower, and some were slightly faster. However, that was the case for short code examples (running under 1 second). For longer code examples (running at least a few seconds), the difference between runs was even around 5% (I've tested docker with my bubble sort example from &lt;a href=&quot;https://switowski.com/blog/how-to-benchmark-python-code/blog/upgrade-your-python-version/&quot;&gt;Upgrade Your Python Version&lt;/a&gt; article). So, as one vigilant commenter suggested, Docker doesn't really help much here.&lt;/p&gt;
&lt;h2 id=&quot;python-benchmarking-libraries&quot; tabindex=&quot;-1&quot;&gt;Python benchmarking libraries &lt;a class=&quot;direct-link&quot; href=&quot;https://switowski.com/blog/how-to-benchmark-python-code/#python-benchmarking-libraries&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At some point, you might decide that getting a &amp;quot;best of 5&amp;quot; number that timeit returns by default is not enough. What if I need to know what's the most pessimistic scenario (the maximum time it took to run my code)? Or what's the difference between the slowest and fastest run? Is this difference huge, and my function runs in a completely unpredictable amount of time? Or is it so tiny that it's almost negligible?&lt;/p&gt;
&lt;p&gt;There are better benchmarking tools that offer more statistics about your code.&lt;/p&gt;
&lt;h3 id=&quot;rich-bench&quot; tabindex=&quot;-1&quot;&gt;rich-bench &lt;a class=&quot;direct-link&quot; href=&quot;https://switowski.com/blog/how-to-benchmark-python-code/#rich-bench&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first tool I checked was the &lt;a href=&quot;https://github.com/tonybaloney/rich-bench&quot;&gt;rich-bench&lt;/a&gt; package that was created by Anthony Shaw together with his &lt;a href=&quot;https://github.com/tonybaloney/anti-patterns&quot;&gt;anti-patterns&lt;/a&gt; repository for a PyCon talk. This small tool can benchmark a set of files with different code examples and present the results in a nicely formatted table. Each benchmark will compare two different functions and present the mean, min, and max of the results, so you can easily see the spread between the results.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;richbench in action&quot; class=&quot;&quot; src=&quot;https://switowski.com/img/tVenp5rnN2-250.jpeg&quot; width=&quot;1840&quot; height=&quot;397&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;pyperf&quot; tabindex=&quot;-1&quot;&gt;pyperf &lt;a class=&quot;direct-link&quot; href=&quot;https://switowski.com/blog/how-to-benchmark-python-code/#pyperf&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you need a more advanced benchmarking tool, you probably can't go wrong if you choose the official tool used by the &lt;a href=&quot;https://pyperformance.readthedocs.io/&quot;&gt;Python Performance Benchmark Suite&lt;/a&gt; - &lt;em&gt;an authoritative source of benchmarks for all Python implementations.&lt;/em&gt; &lt;a href=&quot;https://github.com/psf/pyperf&quot;&gt;pyperf&lt;/a&gt; is an exhaustive tool with many different features, including automatic calibration, detection of unstable results, tracking memory usage, and different modes of work, depending if you want to compare different pieces of code or get a bunch of stats for one function.&lt;/p&gt;
&lt;p&gt;Let's see an example. For the benchmarks, I will use a simple but inefficient function to calculate a sum of powers of the first 1,000,000 numbers:
&lt;code&gt;sum(n * n for n in range(1_000_001))&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here is the output from timeit module:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ python -m timeit &lt;span class=&quot;token string&quot;&gt;&quot;sum(n * n for n in range(1_000_001))&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; loops, best of &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;: &lt;span class=&quot;token number&quot;&gt;41&lt;/span&gt; msec per loop&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here is the output of the &lt;code&gt;pyperf&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ python -m pyperf timeit &lt;span class=&quot;token string&quot;&gt;&quot;sum(n * n for n in range(1_000_001))&quot;&lt;/span&gt; -o bench.json&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.&lt;br /&gt;Mean +- std dev: &lt;span class=&quot;token number&quot;&gt;41.5&lt;/span&gt; ms +- &lt;span class=&quot;token number&quot;&gt;1.1&lt;/span&gt; ms&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The results are very similar, but with the &lt;code&gt;-o&lt;/code&gt; parameter, we told pyperf to store the benchmark results in a JSON file, so now we can analyze them and get much more information:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ python -m pyperf stats bench.json&lt;br /&gt;Total duration: &lt;span class=&quot;token number&quot;&gt;14.5&lt;/span&gt; sec&lt;br /&gt;Start date: &lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-11-09 &lt;span class=&quot;token number&quot;&gt;18&lt;/span&gt;:19:37&lt;br /&gt;End date: &lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-11-09 &lt;span class=&quot;token number&quot;&gt;18&lt;/span&gt;:19:53&lt;br /&gt;Raw value minimum: &lt;span class=&quot;token number&quot;&gt;163&lt;/span&gt; ms&lt;br /&gt;Raw value maximum: &lt;span class=&quot;token number&quot;&gt;198&lt;/span&gt; ms&lt;br /&gt;&lt;br /&gt;Number of calibration run: &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;br /&gt;Number of run with values: &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;br /&gt;Total number of run: &lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Number of warmup per run: &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;br /&gt;Number of value per run: &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;br /&gt;Loop iterations per value: &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;br /&gt;Total number of values: &lt;span class=&quot;token number&quot;&gt;60&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Minimum:         &lt;span class=&quot;token number&quot;&gt;40.8&lt;/span&gt; ms&lt;br /&gt;Median +- MAD:   &lt;span class=&quot;token number&quot;&gt;41.3&lt;/span&gt; ms +- &lt;span class=&quot;token number&quot;&gt;0.2&lt;/span&gt; ms&lt;br /&gt;Mean +- std dev: &lt;span class=&quot;token number&quot;&gt;41.5&lt;/span&gt; ms +- &lt;span class=&quot;token number&quot;&gt;1.1&lt;/span&gt; ms&lt;br /&gt;Maximum:         &lt;span class=&quot;token number&quot;&gt;49.6&lt;/span&gt; ms&lt;br /&gt;&lt;br /&gt;  0th percentile: &lt;span class=&quot;token number&quot;&gt;40.8&lt;/span&gt; ms &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;-2% of the mean&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; -- minimum&lt;br /&gt;  5th percentile: &lt;span class=&quot;token number&quot;&gt;40.9&lt;/span&gt; ms &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;-1% of the mean&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt; 25th percentile: &lt;span class=&quot;token number&quot;&gt;41.2&lt;/span&gt; ms &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;-1% of the mean&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; -- Q1&lt;br /&gt; 50th percentile: &lt;span class=&quot;token number&quot;&gt;41.3&lt;/span&gt; ms &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;-0% of the mean&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; -- median&lt;br /&gt; 75th percentile: &lt;span class=&quot;token number&quot;&gt;41.5&lt;/span&gt; ms &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;+0% of the mean&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; -- Q3&lt;br /&gt; 95th percentile: &lt;span class=&quot;token number&quot;&gt;41.9&lt;/span&gt; ms &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;+1% of the mean&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;100th percentile: &lt;span class=&quot;token number&quot;&gt;49.6&lt;/span&gt; ms &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;+20% of the mean&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; -- maximum&lt;br /&gt;&lt;br /&gt;Number of outlier &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;out of &lt;span class=&quot;token number&quot;&gt;40.7&lt;/span&gt; ms&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;41.9&lt;/span&gt; ms&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;: &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;hyperfine&quot; tabindex=&quot;-1&quot;&gt;hyperfine &lt;a class=&quot;direct-link&quot; href=&quot;https://switowski.com/blog/how-to-benchmark-python-code/#hyperfine&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;And in case you want to benchmark some code that is not Python code, there is always the &lt;a href=&quot;https://github.com/sharkdp/hyperfine&quot;&gt;hyperfine&lt;/a&gt; that can be used to benchmark any CLI command. hyperfine has a similar set of features as the pyperf does. It automatically does warmup runs, clears the cache, and detect statistical outliers. And all that, with nice progress bars and colors, just makes the output looks beautiful.&lt;/p&gt;
&lt;p&gt;You can run it for one command, and it will return the usual information like the mean, min, and max time, standard deviation, number of runs, etc. But you can also pass multiple commands, and you will get a comparison of which one was faster:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;hyperfine in action&quot; class=&quot;&quot; src=&quot;https://switowski.com/img/Ns5BwziReF-250.jpeg&quot; width=&quot;1840&quot; height=&quot;553&quot; /&gt;
&lt;img alt=&quot;hyperfine in action&quot; class=&quot;&quot; src=&quot;https://switowski.com/img/LKhj3Qc88A-250.jpeg&quot; width=&quot;1840&quot; height=&quot;552&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;timeit-is-just-fine-for-me&quot; tabindex=&quot;-1&quot;&gt;timeit is just fine...for me &lt;a class=&quot;direct-link&quot; href=&quot;https://switowski.com/blog/how-to-benchmark-python-code/#timeit-is-just-fine-for-me&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the end, I chose a very simple way of benchmarking: &lt;code&gt;python -m timeit -s &amp;quot;setup code&amp;quot; &amp;quot;code to benchmark&amp;quot;&lt;/code&gt;. I don't have to use the &lt;em&gt;perfect&lt;/em&gt; benchmarking method (if it even exists). . That would be necessary if I were to benchmark one piece of code and share the results with the world. I couldn't use a random, inefficient method of measuring and tell you &amp;quot;this piece of code is bad because it runs in 15 seconds&amp;quot;. You could use a better benchmarking tool, run it on a powerful computer and end up with the same code running in 1.5 seconds.&lt;/p&gt;
&lt;p&gt;Comparing two pieces of code is a different story. Sure, a good, reliable benchmarking methodology is important. But in the end, we care about the relative speed difference between the code examples. If my computer runs &amp;quot;Example A&amp;quot; in 10 seconds and &amp;quot;Example B&amp;quot; in 20 seconds, but your computer runs them in 5 and 10 seconds respectively, we can both conclude that &amp;quot;Example B&amp;quot; is twice as slow.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;timeit&lt;/code&gt; is good enough. It lets me separate the setup code from the actual code I want to benchmark. And if you want to run the same benchmarks on your computer, you can do this right away. You already have &lt;code&gt;timeit&lt;/code&gt; installed with your distribution of Python. You don't have to install any additional library or set up Docker.&lt;/p&gt;
&lt;p&gt;Much more important thing than the most accurate tool is how you set up your benchmarks.&lt;/p&gt;
&lt;h2 id=&quot;beware-of-how-you-structure-your-code&quot; tabindex=&quot;-1&quot;&gt;Beware of how you structure your code &lt;a class=&quot;direct-link&quot; href=&quot;https://switowski.com/blog/how-to-benchmark-python-code/#beware-of-how-you-structure-your-code&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Running benchmarks is the easy part. The tricky part is to remember to write your code in a way that won't &amp;quot;cheat&amp;quot;. When I first wrote &lt;a href=&quot;https://switowski.com/blog/sorting-lists/&quot;&gt;Sorting Lists&lt;/a&gt; article, I was so happy to find that &lt;code&gt;sort()&lt;/code&gt; was so much faster than &lt;code&gt;sorted()&lt;/code&gt;. &amp;quot;OMG, I found the holy grail of sorting in Python&amp;quot; - I thought. Then someone pointed out that &lt;code&gt;list.sort()&lt;/code&gt; sorts the list in place. So if I run my benchmarks, the first iteration will sort the list (which is slow), and each next iteration will sort an already sorted list (which is much faster). I had to update my article and start paying more attention to how I organize my benchmarks.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://switowski.com/blog/how-to-benchmark-python-code/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Depending on your use case, you might reach for a different tool to benchmark your code:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;python -m timeit &amp;quot;some code&amp;quot;&lt;/code&gt; for the simplest, easiest-to-run benchmarks where you just want to get &lt;em&gt;&amp;quot;a number&amp;quot;&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;python -m timeit -s &amp;quot;setup code&amp;quot; &amp;quot;some code&amp;quot;&lt;/code&gt; is a much more useful version if you want to separate some setup code from the actual benchmarks.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker&lt;/code&gt; - while it looked like it did a better job separating my benchmarks from other processes, thus lowering the deviation between runs, after thorough testing, that seemed to be the case for very short examples. For longer ones it didn't really change much.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rich-bench&lt;/code&gt; looks like a nice solution if you need a dedicated tool with additional statistics like min, max, median, and nice output formatting. But you will need to set up your benchmarks in a specific structure that rich-bench requires.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pyperf&lt;/code&gt; gives you the most advanced set of statistics about your code. And it's used by the official Python benchmarks, so it's an excellent tool for advanced benchmarks.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hyperfine&lt;/code&gt; is a great tool to benchmark any command, not only Python code. Or to compare two different commands.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr class=&quot;footnotes-sep&quot; /&gt;

&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;Ok, technically, I could print the current time with &lt;code&gt;time.time()&lt;/code&gt;, run my code, print &lt;code&gt;time.time()&lt;/code&gt; again, and subtract those two values. But, come on, that't not simple, that's rudimentary. &lt;a href=&quot;https://switowski.com/blog/how-to-benchmark-python-code/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
	<pubDate>Thu, 17 Nov 2022 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Real Python: Python REST APIs With Flask, Connexion, and SQLAlchemy – Part 2</title>
	<guid>https://realpython.com/flask-connexion-rest-api-part-2/</guid>
	<link>https://realpython.com/flask-connexion-rest-api-part-2/</link>
	<description>&lt;div&gt;&lt;p&gt;Most modern web applications are powered by a &lt;strong&gt;REST API&lt;/strong&gt; under the hood. That way, developers can separate the front-end code from the back-end logic, and users can interact with the interface dynamically. In this three-part tutorial series, you’re building a REST API with the &lt;strong&gt;Flask web framework&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You’ve created a foundation with a basic Flask project and added endpoints, which you’ll connect to a &lt;strong&gt;SQLite database&lt;/strong&gt;. You’re also testing your API with &lt;strong&gt;Swagger UI API documentation&lt;/strong&gt; that you’re building along the way.&lt;/p&gt;
&lt;p&gt;In the &lt;a href=&quot;https://realpython.com/flask-connexion-rest-api/&quot;&gt;first part&lt;/a&gt;, you used Flask and Connexion to create a REST API providing CRUD operations to an in-memory structure called &lt;code&gt;PEOPLE&lt;/code&gt;. By doing so, you learned how the Connexion module helps you build a nice REST API and interactive documentation. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In the second part of this tutorial series, you’ll learn how to:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Write &lt;strong&gt;SQL commands&lt;/strong&gt; in Python&lt;/li&gt;
&lt;li&gt;Configure a &lt;strong&gt;SQLite database&lt;/strong&gt; for your Flask project&lt;/li&gt;
&lt;li&gt;Use &lt;strong&gt;SQLAlchemy&lt;/strong&gt; to save Python objects to your database&lt;/li&gt;
&lt;li&gt;Leverage the &lt;strong&gt;Marshmallow library&lt;/strong&gt; to serialize data&lt;/li&gt;
&lt;li&gt;Connect your &lt;strong&gt;REST API&lt;/strong&gt; with your database&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After finishing the second part of this series, you’ll move on to the third part, where you’ll extend your REST API with the functionality to add notes to a person. &lt;/p&gt;
&lt;p&gt;You can download the code for the second part of this project by clicking the link below:&lt;/p&gt;
&lt;div class=&quot;alert alert-warning&quot;&gt;
&lt;p&gt;&lt;strong&gt;Source Code:&lt;/strong&gt; &lt;a href=&quot;https://realpython.com/bonus/flask-connexion-rest-api-part-2-code/&quot; class=&quot;alert-link&quot;&gt;Click here to download the free source code&lt;/a&gt; that you’ll use to continue building a REST API with the Flask web framework.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;demo&quot;&gt;Demo&lt;a class=&quot;headerlink&quot; href=&quot;https://realpython.com/atom.xml#demo&quot; title=&quot;Permanent link&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In this three-part tutorial series, you’re building a REST API to keep track of notes for people that may visit you throughout the year. You’ll create people like the &lt;a href=&quot;https://en.wikipedia.org/wiki/Tooth_fairy&quot;&gt;Tooth Fairy&lt;/a&gt;, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Easter_Bunny&quot;&gt;Easter Bunny&lt;/a&gt;, and &lt;a href=&quot;https://en.wikipedia.org/wiki/Knecht_Ruprecht&quot;&gt;Knecht Ruprecht&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Ideally, you want to be on good terms with all three of them. That’s why you’ll send them notes, to increase the chance of getting valuable gifts from them.&lt;/p&gt;
&lt;p&gt;You can interact with your application by leveraging the API documentation. Along the way, you’re also building a basic front end that reflects the contents of your database:&lt;/p&gt;

  &lt;div class=&quot;embed-responsive embed-responsive-16by9 rounded mb-3 border&quot;&gt;
    
  &lt;/div&gt;



&lt;p&gt;In the second part of this series, you’ll enhance the back end of your application by adding a proper database. That way, you’ll persist your data even when you restart your app:&lt;/p&gt;

  &lt;div class=&quot;embed-responsive embed-responsive-16by9 rounded mb-3 border&quot;&gt;
    
  &lt;/div&gt;



&lt;p&gt;With your Swagger UI documentation, you’ll be able to interact with your REST API and make sure that everything works as intended.&lt;/p&gt;
&lt;h2 id=&quot;planning-part-two&quot;&gt;Planning Part Two&lt;a class=&quot;headerlink&quot; href=&quot;https://realpython.com/atom.xml#planning-part-two&quot; title=&quot;Permanent link&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the first part of this tutorial series, you worked with a &lt;code&gt;PEOPLE&lt;/code&gt; dictionary to store your data. The dataset looked like this:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;PEOPLE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;Fairy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;fname&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Tooth&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;lname&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Fairy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;timestamp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;2022-10-08 09:15:10&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;Ruprecht&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;fname&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Knecht&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;lname&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Ruprecht&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;timestamp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;2022-10-08 09:15:13&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;Bunny&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;fname&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Easter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;lname&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Bunny&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;timestamp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;2022-10-08 09:15:27&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This data structure was handy to get your project up to speed. However, any data that you added with your REST API to &lt;code&gt;PEOPLE&lt;/code&gt; got lost when you restarted your app.&lt;/p&gt;
&lt;p&gt;In this part, you’ll be translating your &lt;code&gt;PEOPLE&lt;/code&gt; data structure into a database table that’ll look like this:&lt;/p&gt;
&lt;div class=&quot;table-responsive&quot;&gt;
&lt;table class=&quot;table table-hover&quot;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;lname&lt;/th&gt;
&lt;th&gt;fname&lt;/th&gt;
&lt;th&gt;timestamp&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Fairy&lt;/td&gt;
&lt;td&gt;Tooth&lt;/td&gt;
&lt;td&gt;2022-10-08 09:15:10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Ruprecht&lt;/td&gt;
&lt;td&gt;Knecht&lt;/td&gt;
&lt;td&gt;2022-10-08 09:15:13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Bunny&lt;/td&gt;
&lt;td&gt;Easter&lt;/td&gt;
&lt;td&gt;2022-10-08 09:15:27&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;You won’t make any changes to your REST API endpoints in this tutorial. But the changes that you’ll make in the back end will be significant, and you’ll end up with a much more versatile codebase to help scale your Flask project up in the future.&lt;/p&gt;
&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;a class=&quot;headerlink&quot; href=&quot;https://realpython.com/atom.xml#getting-started&quot; title=&quot;Permanent link&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In this section, you’ll check in with the Flask REST API project that you’re working on. You want to make sure that it’s ready for the next steps in this tutorial series. &lt;/p&gt;
&lt;/div&gt;&lt;h2&gt;&lt;a href=&quot;https://realpython.com/flask-connexion-rest-api-part-2/?utm_source=realpython&amp;utm_medium=rss&quot;&gt;Read the full article at https://realpython.com/flask-connexion-rest-api-part-2/ »&lt;/a&gt;&lt;/h2&gt;
        &lt;hr /&gt;
        &lt;p&gt;&lt;em&gt;[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp;amp; sweet Python Trick delivered to your inbox every couple of days. &lt;a href=&quot;https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer&quot;&gt;&amp;gt;&amp;gt; Click here to learn more and see examples&lt;/a&gt; ]&lt;/em&gt;&lt;/p&gt;</description>
	<pubDate>Wed, 16 Nov 2022 14:00:00 +0000</pubDate>
</item>
<item>
	<title>Python for Beginners: Custom JSON Decoder in Python</title>
	<guid>https://www.pythonforbeginners.com/basics/custom-json-decoder-in-python</guid>
	<link>https://www.pythonforbeginners.com/basics/custom-json-decoder-in-python</link>
	<description>&lt;p&gt;JSON objects are one of the most efficient tools to communicate with web applications. When we receive a JSON file, we need to convert it into a python object to use it in our python program. In this article, we will discuss different ways to create and use a custom JSON decoder in Python.&lt;/p&gt;



&lt;p&gt;Before continuing with the article, I suggest you read this article on &lt;a href=&quot;https://www.pythonforbeginners.com/basics/working-with-json-files-in-python&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;working with JSON files in Python if yo&lt;/a&gt;u don&amp;#8217;t know how to work with simple JSON objects.&lt;/p&gt;



&lt;div class=&quot;wp-block-ht-block-toc is-style-rounded htoc htoc--position-wide toc-list-style-numbered&quot;&gt;&lt;span class=&quot;htoc__title&quot;&gt;&lt;span class=&quot;ht_toc_title&quot;&gt;Table of Contents&lt;/span&gt;&lt;span class=&quot;htoc__toggle&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;div class=&quot;htoc__itemswrap&quot;&gt;&lt;ol class=&quot;ht_toc_list&quot;&gt;&lt;li class=&quot;&quot;&gt;&lt;a href=&quot;https://www.pythonforbeginners.com/feed#htoc-how-to-convert-json-to-python-object&quot;&gt;How to Convert JSON to Python object?&lt;/a&gt;&lt;ol class=&quot;ht_toc_child_list&quot;&gt;&lt;li class=&quot;&quot;&gt;&lt;a href=&quot;https://www.pythonforbeginners.com/feed#htoc-json-file-to-python-object-using-the-load-method&quot;&gt;JSON File to Python Object Using the load() Method&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;a href=&quot;https://www.pythonforbeginners.com/feed#htoc-json-string-to-python-object-using-loads-method&quot;&gt;Json String to Python Object Using loads() Method&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;a href=&quot;https://www.pythonforbeginners.com/feed#htoc-json-file-to-python-object-using-jsondecoder-class&quot;&gt;JSON File to Python Object Using JSONDecoder Class&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;a href=&quot;https://www.pythonforbeginners.com/feed#htoc-nested-json-file-to-python-object-using-custom-decoder-class&quot;&gt;Nested JSON File to Python Object Using Custom Decoder Class&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;a href=&quot;https://www.pythonforbeginners.com/feed#htoc-conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;



&lt;h2 id=&quot;htoc-how-to-convert-json-to-python-object&quot;&gt;How to Convert JSON to Python object?&lt;/h2&gt;



&lt;p&gt;You can convert a JSON file or string to a python object using the &lt;code&gt;load()&lt;/code&gt; method, the &lt;code&gt;loads()&lt;/code&gt; method, or the JSONDecoder class. Let us discuss each method one by one.&lt;/p&gt;



&lt;h3 id=&quot;htoc-json-file-to-python-object-using-the-load-method&quot;&gt;JSON File to Python Object Using the load() Method&lt;/h3&gt;



&lt;p&gt;The&lt;code&gt; load()&lt;/code&gt; method takes a file pointer to a JSON file and returns a &lt;a href=&quot;https://www.pythonforbeginners.com/dictionary/how-to-use-dictionaries-in-python&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;python dictionary&lt;/a&gt; object. For instance, we have the following JSON file. &lt;/p&gt;



&lt;img width=&quot;575&quot; height=&quot;143&quot; src=&quot;https://www.pythonforbeginners.com/wp-content/uploads/image-8.png&quot; alt=&quot;&quot; class=&quot;wp-image-10983&quot; /&gt;JSON object



&lt;p&gt;When we convert this file to a python object using the &lt;code&gt;load()&lt;/code&gt; method, we get a python dictionary as shown in the following example.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;import json
fp=open(&quot;simplestudent.json&quot;)
myDict=json.load(fp)
print(&quot;The python object is:&quot;)
print(myDict)&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Output&lt;/p&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;The python object is:
{'Name': 'Aditya', 'Age': 23}&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;If you want to get a python object instead of the dictionary, we need to create a custom JSON decoder. For this, we will create a function that takes the dictionary returned by the &lt;code&gt;load()&lt;/code&gt; method and converts it into a python object. We will pass the function to the &lt;code&gt;object_hook&lt;/code&gt; parameter in the &lt;code&gt;load()&lt;/code&gt; method while encoding the JSON file. You can observe this in the following example.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;import json
class Student:
    def __init__(self, name, age):
        self.Name=name
        self.Age=age
def SimpleDecoderFunction(jsonDict):
    return Student(jsonDict&amp;#091;&quot;Name&quot;],jsonDict&amp;#091;&quot;Age&quot;])
fp=open(&quot;simplestudent.json&quot;,&quot;r&quot;)
python_obj=json.load(fp,object_hook=SimpleDecoderFunction)
print(&quot;The python object is:&quot;)
print(python_obj)&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Output:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;The python object is:
&amp;lt;__main__.Student object at 0x7fe1c87a36a0&amp;gt;&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;In the above example, we have defined a &lt;code&gt;Student&lt;/code&gt; class. We have also defined a &lt;code&gt;SimpleDecoderFunction()&lt;/code&gt; function. When we pass the &lt;code&gt;SimpleDecoderFunction()&lt;/code&gt; to the &lt;code&gt;load() &lt;/code&gt;method while decoding a JSON object, the created python dictionary object is first sent to the &lt;code&gt;SimpleDecoderFunction()&lt;/code&gt;. The &lt;code&gt;SimpleDecoderFunction() &lt;/code&gt;takes the dictionary and converts it into a python object of the &lt;code&gt;Student&lt;/code&gt; class that we get as the output of the &lt;code&gt;load()&lt;/code&gt; method.&lt;/p&gt;



&lt;h2 id=&quot;htoc-json-string-to-python-object-using-loads-method&quot;&gt;Json String to Python Object Using loads() Method&lt;/h2&gt;



&lt;p&gt;If you have a JSON string instead of a JSON file, you can convert it into a python object using the &lt;code&gt;loads() &lt;/code&gt;method. The &lt;code&gt;loads()&lt;/code&gt; method takes a JSON string as its input argument and returns a python dictionary as shown in the following example.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;import json
jsonStr='{&quot;Name&quot;: &quot;Aditya&quot;, &quot;Age&quot;: 23}'
python_obj=json.loads(jsonStr)
print(&quot;The python object is:&quot;)
print(python_obj)&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Output:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;The python object is:
{'Name': 'Aditya', 'Age': 23}&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;To convert a JSON string to a python object using the &lt;code&gt;loads()&lt;/code&gt; method, you can use a custom JSON decoder function and the &lt;code&gt;object_hook&lt;/code&gt; parameter as shown below.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;import json
class Student:
    def __init__(self, name, age):
        self.Name=name
        self.Age=age
def SimpleDecoderFunction(jsonDict):
    return Student(jsonDict&amp;#091;&quot;Name&quot;],jsonDict&amp;#091;&quot;Age&quot;])
jsonStr='{&quot;Name&quot;: &quot;Aditya&quot;, &quot;Age&quot;: 23}'
python_obj=json.loads(jsonStr,object_hook=SimpleDecoderFunction)
print(&quot;The python object is:&quot;)
print(python_obj)&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Output:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;The python object is:
&amp;lt;__main__.Student object at 0x7fe1c87a17b0&amp;gt;&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;You can observe that the &lt;code&gt;loads()&lt;/code&gt; method works in a similar manner to the&lt;code&gt; load()&lt;/code&gt; method. The only difference is that it reads the JSON object from a string instead of a file. &lt;/p&gt;



&lt;p&gt;Instead of using the &lt;code&gt;load() &lt;/code&gt;method and the &lt;code&gt;loads() &lt;/code&gt;method, we can also create a decoder using the JSONDecoder class to convert JSON objects into python objects.&lt;/p&gt;



&lt;p&gt;Suggested Reading: If you are into machine learning, you can read this article on &lt;a href=&quot;https://codinginfinite.com/mlops-a-complete-guide-for-beginners/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;mlops for beginners&lt;/a&gt;. You might also like this article on &lt;a href=&quot;https://codinginfinite.com/clustering-for-mixed-data-types-in-python/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;clustering mixed data types in Python&lt;/a&gt;.&lt;/p&gt;



&lt;h2 id=&quot;htoc-json-file-to-python-object-using-jsondecoder-class&quot;&gt;JSON File to Python Object Using JSONDecoder Class&lt;/h2&gt;



&lt;p&gt;The JSONDecoder class constructor has the following syntax&lt;/p&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;class json.JSONDecoder(*, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, strict=True, object_pairs_hook=None)&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Here,&lt;/p&gt;



&lt;ul&gt;&lt;li&gt;The &lt;code&gt;object_hook&lt;/code&gt; parameter is used to create custom JSON decoders. The &lt;code&gt;object_hook&lt;/code&gt; parameter takes a function as its input argument. The function is called with the object literal decoded from the JSON. In the output, the return value of the function is used instead of the dict.&amp;nbsp;&lt;/li&gt;&lt;li&gt;The &lt;code&gt;parse_float&lt;/code&gt; parameter is used to convert any floating point number in the JSON to another data type. By default, the &lt;code&gt;float()&lt;/code&gt; function is called with the strings containing floating point numbers in the JSON while decoding. If we specify a function in the &lt;code&gt;parse_float&lt;/code&gt; parameter,&amp;nbsp; the decoder passes the string containing a floating point number to the function and the output of the function is used in the python object. This parameter can be used if you want to convert the floats to ints or other data types while loading the JSON itself.&lt;/li&gt;&lt;li&gt;The &lt;code&gt;parse_int&lt;/code&gt; parameter is used to convert any integer in the JSON to another data type. By default, the &lt;code&gt;int()&lt;/code&gt; function is called with the strings containing integers in the JSON. If we specify a function in the &lt;code&gt;parse_int&lt;/code&gt; parameter,&amp;nbsp; the decoder passes the string containing the integer to the function and the output of the function is used in the python object. This parameter can be used if you want to convert the integers to floats or other data types while loading the JSON itself. The default &lt;code&gt;parse_int&lt;/code&gt; of &lt;code&gt;int()&lt;/code&gt; now limits the maximum length of the integer string via the interpreter’s integer string conversion length limitation to help avoid denial of service attacks.&lt;/li&gt;&lt;li&gt;The &lt;code&gt;parse_constant&lt;/code&gt; parameter is used to load &lt;code&gt;NaN&lt;/code&gt;,&lt;code&gt; -Infinity&lt;/code&gt;, and &lt;code&gt;+Infinity&lt;/code&gt; from JSON to custom python values. The &lt;code&gt;parse_constant&lt;/code&gt; parameter takes a function as its input argument. While the execution of the decoder,&amp;nbsp; &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;-Infinity,&lt;/code&gt; and &lt;code&gt;+Infinity&lt;/code&gt; are passed to the function, and the return value is used in the python object.&lt;/li&gt;&lt;li&gt;The &lt;code&gt;object_pairs_hook&lt;/code&gt; is an optional parameter that takes a function as its input argument. The function is called with the result of any object literal decoded with an ordered list of pairs. The return value of &lt;code&gt;object_pairs_hook&lt;/code&gt; is used instead of the dict. This feature can be used to implement custom decoders. If &lt;code&gt;object_hook&lt;/code&gt; is also defined, the &lt;code&gt;object_pairs_hook&lt;/code&gt; takes priority.&lt;/li&gt;&lt;/ul&gt;



&lt;p&gt;After execution, the &lt;code&gt;JSONDecoder()&lt;/code&gt; constructor returns a JSON decoder. We can invoke the &lt;code&gt;decode()&lt;/code&gt; method on the JSON decoder to obtain a python dictionary from a JSON string as shown below.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;import json
jsonStr='{&quot;Name&quot;: &quot;Aditya&quot;, &quot;Age&quot;: 23}'
print(&quot;The JSON string is:&quot;)
print(jsonStr)
myDict=json.JSONDecoder().decode(jsonStr)
print(&quot;The python object is:&quot;)
print(myDict)&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Output:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;The JSON string is:
{&quot;Name&quot;: &quot;Aditya&quot;, &quot;Age&quot;: 23}
The python object is:
{'Name': 'Aditya', 'Age': 23}&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;In the above example, we first create a JSONDecoder object using the &lt;code&gt;JSONDecoder()&lt;/code&gt; constructor. After that, we invoke the&lt;code&gt; decode()&lt;/code&gt; method on the JSONDecoder object. The &lt;code&gt;decode()&lt;/code&gt; object takes a JSON string as its input argument and returns a Python dictionary.&lt;/p&gt;



&lt;p&gt;To convert a JSON string to a custom python object, you can use the &lt;code&gt;object_hook&lt;/code&gt; parameter in the &lt;code&gt;JSONDecoder()&lt;/code&gt; constructor. The &lt;code&gt;JSONDecoder() &lt;/code&gt;constructor takes a function as its input argument. The function must take the dictionary which is the normal output while decoding and convert it to a custom python object. For instance, consider the following example.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;import json
class Student:
    def __init__(self, name, age):
        self.Name=name
        self.Age=age
def SimpleDecoderFunction(jsonDict):
    return Student(jsonDict&amp;#091;&quot;Name&quot;],jsonDict&amp;#091;&quot;Age&quot;])
jsonStr='{&quot;Name&quot;: &quot;Aditya&quot;, &quot;Age&quot;: 23}'
python_obj=json.JSONDecoder(object_hook=SimpleDecoderFunction).decode(jsonStr)
print(&quot;The python object is:&quot;)
print(python_obj)&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Output:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;The python object is:
&amp;lt;__main__.Student object at 0x7fe1c87a32b0&amp;gt;&lt;/code&gt;&lt;/pre&gt;



&lt;h2 id=&quot;htoc-nested-json-file-to-python-object-using-custom-decoder-class&quot;&gt;Nested JSON File to Python Object Using Custom Decoder Class&lt;/h2&gt;



&lt;p&gt;Converting a flat JSON file to a python object is easy as all the values in the JSON object are of primitive data types when converted to a dictionary. However, decoding nested JSON objects gives us nested dictionaries.&amp;nbsp;&amp;nbsp;&lt;/p&gt;



&lt;img width=&quot;575&quot; height=&quot;143&quot; src=&quot;https://www.pythonforbeginners.com/wp-content/uploads/image-9.png&quot; alt=&quot;&quot; class=&quot;wp-image-10985&quot; /&gt;



&lt;p&gt;If we convert the above string to JSON, we will get a nested dictionary as shown below.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;import json
jsonStr='{&quot;__type__&quot;: &quot;Student&quot;,&quot;Name&quot;: &quot;Aditya&quot;, &quot;Age&quot;: 23, &quot;Details&quot;: {&quot;__type__&quot;: &quot;Details&quot;,&quot;Height&quot;: 160, &quot;Weight&quot;: 60}}'
python_obj=json.JSONDecoder().decode(jsonStr)
print(&quot;The python object is:&quot;)
print(python_obj)&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Output:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;The python object is:
{'__type__': 'Student', 'Name': 'Aditya', 'Age': 23, 'Details': {'__type__': 'Details', 'Height': 160, 'Weight': 60}}&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;For converting nested JSON files to python objects, there should be a key-value pair in the JSON that determines the type of python object that we want to create. If the JSON object contains the type of the python object to be created, we can define a custom function that takes the dictionary loaded from the JSON object and converts it into a python object. Then, we will pass the function to the &lt;code&gt;object_hook&lt;/code&gt; parameter in the &lt;code&gt;load() &lt;/code&gt;method. After this, the &lt;code&gt;load()&lt;/code&gt; method will return a custom python object instead of a dictionary. You can observe this in the following example.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;class Student:
    def __init__(self, name, age,details):
        self.Name=name
        self.Age=age
        self.Details=details
class Details:
    def __init__(self, height, weight):
        self.Height=height
        self.Weight=weight
def ComplexDecoderFunction(jsonDict):
    if '__type__' in jsonDict and jsonDict&amp;#091;'__type__'] == 'Student':
        return Student(jsonDict&amp;#091;'Name'], jsonDict&amp;#091;'Age'], jsonDict&amp;#091;'Details'])
    if '__type__' in jsonDict and jsonDict&amp;#091;'__type__'] == 'Details':
        return Details(jsonDict&amp;#091;'Height'], jsonDict&amp;#091;'Weight'])
    
fp=open(&quot;complexstudent.json&quot;)
python_obj=json.load(fp,object_hook=ComplexDecoderFunction)
print(&quot;The python object is:&quot;)
print(python_obj)
fp.close()&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Output:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;The python object is:
&amp;lt;__main__.Student object at 0x7fe1c87a2d70&amp;gt;&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;In the above example, we have defined a &lt;code&gt;Details&lt;/code&gt; class with attributes &lt;code&gt;Height&lt;/code&gt; and &lt;code&gt;Weight&lt;/code&gt;. We have also defined the &lt;code&gt;Student&lt;/code&gt; class with the attributes &lt;code&gt;Name&lt;/code&gt;, &lt;code&gt;Age&lt;/code&gt;, and &lt;code&gt;Details&lt;/code&gt;. &lt;/p&gt;



&lt;p&gt;To convert the input nested dictionary to a python object, we have defined a custom JSON decoder function &lt;code&gt;ComplexDecoderFunction()&lt;/code&gt;. The input json object has the attribute &lt;code&gt;__type__ &lt;/code&gt;to specify the class of python object to which the object can be converted.  The process of encoding complex python objects to JSON is discussed in this article on &lt;a href=&quot;https://www.pythonforbeginners.com/basics/custom-json-encoder-in-python&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;custom json encoder in Python.&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;The &lt;code&gt;load() &lt;/code&gt;method passes the outer dictionary and the inner dictionary to the  &lt;code&gt;ComplexDecoderFunction()&lt;/code&gt;. The function checks the class to which the dictionary has to be converted using the &lt;code&gt;__type__&lt;/code&gt; attribute and returns a python object of the appropriate type. The &lt;code&gt;load()&lt;/code&gt; method then returns the complete python object.&lt;/p&gt;



&lt;p&gt;If you want to obtain a python object from a json string instead of a file, you can use the &lt;code&gt;loads() &lt;/code&gt;method instead of the&lt;code&gt; load()&lt;/code&gt; method as shown in the following example.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;class Student:
    def __init__(self, name, age,details):
        self.Name=name
        self.Age=age
        self.Details=details
class Details:
    def __init__(self, height, weight):
        self.Height=height
        self.Weight=weight
def ComplexDecoderFunction(jsonDict):
    if '__type__' in jsonDict and jsonDict&amp;#091;'__type__'] == 'Student':
        return Student(jsonDict&amp;#091;'Name'], jsonDict&amp;#091;'Age'], jsonDict&amp;#091;'Details'])
    if '__type__' in jsonDict and jsonDict&amp;#091;'__type__'] == 'Details':
        return Details(jsonDict&amp;#091;'Height'], jsonDict&amp;#091;'Weight'])
    
jsonStr='{&quot;__type__&quot;: &quot;Student&quot;,&quot;Name&quot;: &quot;Aditya&quot;, &quot;Age&quot;: 23, &quot;Details&quot;: {&quot;__type__&quot;: &quot;Details&quot;,&quot;Height&quot;: 160, &quot;Weight&quot;: 60}}'
python_obj=json.loads(jsonStr,object_hook=ComplexDecoderFunction)
print(&quot;The python object is:&quot;)
print(python_obj)&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Output:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;The python object is:
&amp;lt;__main__.Student object at 0x7fe1c87a1f90&amp;gt;&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;You can also create a custom decoder for nested json strings to create a python object using the &lt;code&gt;JSONDecoder()&lt;/code&gt; constructor as shown below.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;class Student:
    def __init__(self, name, age,details):
        self.Name=name
        self.Age=age
        self.Details=details
class Details:
    def __init__(self, height, weight):
        self.Height=height
        self.Weight=weight
def ComplexDecoderFunction(jsonDict):
    if '__type__' in jsonDict and jsonDict&amp;#091;'__type__'] == 'Student':
        return Student(jsonDict&amp;#091;'Name'], jsonDict&amp;#091;'Age'], jsonDict&amp;#091;'Details'])
    if '__type__' in jsonDict and jsonDict&amp;#091;'__type__'] == 'Details':
        return Details(jsonDict&amp;#091;'Height'], jsonDict&amp;#091;'Weight'])
    
jsonStr='{&quot;__type__&quot;: &quot;Student&quot;,&quot;Name&quot;: &quot;Aditya&quot;, &quot;Age&quot;: 23, &quot;Details&quot;: {&quot;__type__&quot;: &quot;Details&quot;,&quot;Height&quot;: 160, &quot;Weight&quot;: 60}}'
python_obj=json.JSONDecoder(object_hook=ComplexDecoderFunction).decode(jsonStr)
print(&quot;The python object is:&quot;)
print(python_obj)&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Output:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;The python object is:
&amp;lt;__main__.Student object at 0x7fe1c87a31f0&amp;gt;&lt;/code&gt;&lt;/pre&gt;



&lt;h2 id=&quot;htoc-conclusion&quot;&gt;Conclusion&lt;/h2&gt;



&lt;p&gt;In this article, we have discussed different ways to create a custom json decoder in python. To learn more about python programming, you can read this article on how to &lt;a href=&quot;https://codinginfinite.com/python-chat-application-tutorial-source-code/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;create a chat app in Python&lt;/a&gt;. You might also like this article on &lt;a href=&quot;https://codinginfinite.com/linear-regression-using-sklearn-in-python/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;linear regression using the sklearn&lt;/a&gt; module in Python.&lt;/p&gt;
&lt;p&gt;The post &lt;a rel=&quot;nofollow&quot; href=&quot;https://www.pythonforbeginners.com/basics/custom-json-decoder-in-python&quot;&gt;Custom JSON Decoder in Python&lt;/a&gt; appeared first on &lt;a rel=&quot;nofollow&quot; href=&quot;https://www.pythonforbeginners.com&quot;&gt;PythonForBeginners.com&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Wed, 16 Nov 2022 14:00:00 +0000</pubDate>
</item>
<item>
	<title>Kushal Das: Johnnycanencrypt 0.11.0 released</title>
	<guid>https://kushaldas.in/posts/johnnycanencrypt-0-11-0-released.html</guid>
	<link>https://kushaldas.in/posts/johnnycanencrypt-0-11-0-released.html</link>
	<description>&lt;!--
.. title: Johnnycanencrypt 0.11.0 released
.. slug: johnnycanencrypt-0-11-0-released
.. date: 2022-11-16T12:53:31+00:00
.. tags: Debian, Fedora, OpenPGP, Privacy, Python, Rust, Security
.. link:
.. description:
.. type: text
--&gt;
&lt;p&gt;A couple of days ago I &lt;a href=&quot;https://github.com/kushaldas/johnnycanencrypt/releases/tag/v0.11.0&quot;&gt;released Johnnycanencrypt v0.11.0&lt;/a&gt;. It is a Python module for OpenPGP written in Rust.&lt;/p&gt;
&lt;p&gt;The most interesting update is for Linux users, now we have pre-built wheels
for Python 3.8, 3.9, 3.10 &amp;amp; 3.11. You can just install that via &lt;code&gt;python3 -m pip install johnnycanencrypt&lt;/code&gt;. You can also do the same on Intel Macs (for Python
3.10 and 3.11). But, I failed to build for Apple Silicon systems. I will work
on it in the coming weeks.&lt;/p&gt;
&lt;p&gt;To know the Yubikey card version we can call &lt;code&gt;get_card_version&lt;/code&gt; function written in Rust.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; rjce.get_card_version()
(4, 3, 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or directly use the function &lt;code&gt;get_card_touch_policies&lt;/code&gt; to get a list of policies for the current
Yubikey.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; import johnnycanencrypt as jce
&amp;gt;&amp;gt;&amp;gt; jce.get_card_touch_policies()
[TouchMode.On, TouchMode.Off, TouchMode.Fixed]

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we now can also set the touch policies for a given Yubikey. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;rjce.set_keyslot_touch_policy(
    b&amp;quot;12345678&amp;quot;, rjce.KeySlot.Authentication, rjce.TouchMode.On
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will be nice to see what people will build on top this. I also missed to blog about the &lt;a href=&quot;https://github.com/kushaldas/johnnycanencrypt/releases/tag/v0.10.0&quot;&gt;v0.10.0&lt;/a&gt; release. You should that changelog too.&lt;/p&gt;</description>
	<pubDate>Wed, 16 Nov 2022 12:53:31 +0000</pubDate>
</item>
<item>
	<title>Django Weblog: 2023 DSF Board Candidates</title>
	<guid>https://www.djangoproject.com/weblog/2022/nov/15/2023-dsf-board-candidates-list/</guid>
	<link>https://www.djangoproject.com/weblog/2022/nov/15/2023-dsf-board-candidates-list/</link>
	<description>Thank you to the thirty individuals who have chosen to stand for election. 

Our deepest gratitude goes to our departing board members for your contributions and commitment to the Django community.
&lt;ul&gt;
&lt;li&gt;Anna Makarudze&lt;/li&gt;
&lt;li&gt;Mfon Eti-mfon&lt;/li&gt;
&lt;li&gt;William Vincent&lt;/li&gt;
&lt;li&gt;Žan Anderle&lt;/li&gt;
&lt;/ul&gt;
DSF members please take the time to review the candidates so that you can make an informed vote. Clicking on a candidates name will expand their candidate statement.
&lt;hr /&gt;
&lt;strong&gt;Daniel Andrlik&lt;/strong&gt; &lt;i&gt;King of Prussia, PA, USA&lt;/i&gt;&lt;br /&gt;&lt;small&gt;Secretary&lt;/small&gt;&lt;blockquote&gt;&lt;p&gt;I’m passionate about Django as a web framework, though my professional experience has been primarily in management roles. In addition, I’ve previously served on the board of directors for for non-profit transportation agencies for disabled individuals. As a result I both have experience with the internal processes of running a non-profit entity and also am passionate about outreach to historically disadvantaged individuals.  &lt;/p&gt;&lt;/blockquote&gt;&lt;hr /&gt;
&lt;strong&gt;Aaron Bassett&lt;/strong&gt; &lt;i&gt;Florida, USA&lt;/i&gt;&lt;br /&gt;&lt;small&gt;President, Vice President&lt;/small&gt;&lt;blockquote&gt;&lt;p&gt;It appears this year that several members of the board will be stepping down. It saddens me to see them go as I have really enjoyed serving with them over the years. The work they have done, mostly behind the scenes, has been vital to the ongoing success of Django and the community as a whole. I cannot thank them enough.&lt;br /&gt;
&lt;br /&gt;I am also excited at the potential for new people to join the board. I can't wait to see what fresh ideas and initiatives they bring.&lt;br /&gt;
&lt;br /&gt;As a previous VP and long serving member of the board I have a lot of experience and knowledge that I believe would be valuable to these new members. I am nominating myself so that I can provide some continuity and context to the board during this time of transition. &lt;/p&gt;&lt;/blockquote&gt;&lt;hr /&gt;
&lt;strong&gt;Peter Baumgartner&lt;/strong&gt; &lt;i&gt;Colorado, USA&lt;/i&gt;&lt;br /&gt;&lt;small&gt;President, Vice President, Treasurer&lt;/small&gt;&lt;blockquote&gt;&lt;p&gt;I've been a part of the Django community for over 15 years. I'm an open-source contributor, a regular speaker at DjangoCon US, and the co-author of High Performance Django.&lt;br /&gt; In 2007, I founded Lincoln Loop, a web agency that leverages Django extensively in its work. Lincoln Loop has financially sponsored the DSF and DjangoCon for many years, and I'm looking for other ways to give back to a community that has given us so much.&lt;br /&gt;
&lt;br /&gt;At Lincoln Loop, I have to wear many hats and deeply understand the financial ramifications of our decisions as a company. I believe the experience of running a business will be directly applicable to a position on the DSF board, and I look forward to applying that experience if elected.&lt;/p&gt;&lt;/blockquote&gt;&lt;hr /&gt;
&lt;strong&gt;Vicent Coll Borreda&lt;/strong&gt; &lt;i&gt;Spain, Alicante&lt;/i&gt;&lt;br /&gt;&lt;small&gt;President, Vice President, Treasurer, Secretary&lt;/small&gt;&lt;blockquote&gt;&lt;p&gt;I consider myself a very fun person who generates a good teamwork environment knowing when a smile is needed and when concentration and seriousness are needed, at the same time I always try to help my colleagues to be more proactive while learning. quickly from people better than me. Also, above all, I consider myself a problem solver.&lt;/p&gt;&lt;/blockquote&gt;&lt;hr /&gt;
&lt;strong&gt;Ryan Cheley&lt;/strong&gt; &lt;i&gt;California, United States&lt;/i&gt;&lt;br /&gt;&lt;small&gt;Treasurer, Secretary&lt;/small&gt;&lt;blockquote&gt;&lt;p&gt;As a member of the Django Software Foundation Board may goals are to:&lt;br /&gt;
&lt;br /&gt;1. Ensure that applications developed using Django can be easily deployed by advocating for &quot;production settings&quot; as part of the &quot;batteries included&quot; aspect of Django&lt;br /&gt;
2. Make it easier to contribute to Django&lt;br /&gt;
&lt;br /&gt;I have been using Django since 2018 and have contributed a couple of documentation updates to DjangoProject.com. 
&lt;br /&gt;Additionally, I have made several contributions to DjangoPackages.org.&lt;br /&gt;
&lt;br /&gt;I attended my first DjangoCon US in October of 2022 and I was inspired by the inclusive and welcoming people I encountered.  I would love to become more involved and find more ways to give back to this amazing community. 
&lt;br /&gt;Ryan&lt;/p&gt;&lt;/blockquote&gt;&lt;hr /&gt;
&lt;strong&gt;Gajendra Deshpande&lt;/strong&gt; &lt;i&gt;India&lt;/i&gt;&lt;br /&gt;&lt;small&gt;Vice President&lt;/small&gt;&lt;blockquote&gt;&lt;p&gt;Hello Everyone, 
&lt;br /&gt;I am Gajendra Deshpande, and I am using Python since 2013 for academic research and development activities. I develop prototypes and applications in Natural Language Processing, Machine Learning, Cyber Security, and Web applications using Python and its ecosystem. I am working as a faculty of Computer Science and run a start-up in cyber security. I am an active member of the PyCon India community and served as program committee lead for PyCon India 2021. I have presented approximately 80 talks, 20 Workshops, and 15 posters across the globe at prestigious conferences like DjangoCon US, DjangoCon EU, DjangoCongress Japan, PyData Global, PyCon APAC, PyCon AU, EuroPython, SciPy India, SciPy USA, PyCon USA, JuliaCon, FOSDEM, and several other Python and FOSS conferences. I have helped Python and FOSS Conferences by reviewing the talk and tutorial proposals, mentoring first-time speakers, participating in the discussions, and organizing the events. I am passionate about community work and would love to continue contributing to the Django community. I believe that as a member of the DSF board I can contribute to the community more effectively.&lt;br /&gt;
&lt;br /&gt;Goals as a DSF board member (2023)&lt;br /&gt;
1. Start regional Django communities (especially in Asia and other regions) to spread awareness about Django. Introduce more people to the Django community and facilitate them to become contributors to the community in various capacities such as Speakers, Volunteers, and core Django developers.&lt;br /&gt;
&lt;br /&gt;2. Work as a facilitator to start more regional Django conferences (e.g., DjangoCon Asia) and City level chapters in the Global South. I started the BelPy conference in 2021 which is a regional conference in Belagavi, India. I have Initiated the organization of Django conference and grow it to DjangoCon in Asia region like DjangoCon US and DjangoCon EU. The Django Conference is in the planning stage and will be organized in the last week of March or the first week of April 2023. Our university has agreed to host the same at no cost.&lt;br /&gt;
&lt;br /&gt;3. Work with industries to develop Python/Django courses and enable the adoption of industry-aligned Python/Django courses in universities and colleges. These courses can be offered as a part of the curriculum wherever possible or as add-on courses. The goal is to make more people employable in a short time using the “Train-to-Deploy” approach. The courses shall be made available free of cost to the Python/Django community and especially for those who are suffering from economic hardships.&lt;br /&gt;
&lt;br /&gt;4. Work with start-ups for adoption of Django in product development thereby encourage them to contribute towards and Python/Django community and DSF. 
&lt;br /&gt;5. Create awareness among people regarding the activities of DSF, Python/Django conferences, Projects, and grants. Motivate and mentor people from diverse backgrounds to apply for grants and projects.&lt;br /&gt;
&lt;br /&gt;
6. Work with present DSF board members and actively contribute to the Django community especially in Global South to increase inclusivity and diversity.&lt;br /&gt;
&lt;br /&gt;For more information about me kindly visit https://gcdeshpande.github.io/&lt;br /&gt;
&lt;br /&gt;Thank you everyone for stopping by and going through my nomination. I ask for your vote, and I look forward to earning your trust to serve the Python community.&lt;br /&gt;
&lt;br /&gt;Stay Safe. Take Care.&lt;br /&gt;
&lt;br /&gt;Best Regards&lt;br /&gt;
&lt;br /&gt;Gajendra Deshpande&lt;/p&gt;&lt;/blockquote&gt;&lt;hr /&gt;
&lt;strong&gt;Thomas Dignan&lt;/strong&gt; &lt;i&gt;Edinburgh Scotland UK&lt;/i&gt;&lt;br /&gt;&lt;small&gt;President, Vice President&lt;/small&gt;&lt;blockquote&gt;&lt;p&gt;Hello,
&lt;br /&gt;I am interested in running for the President or Vice President position of the Django DSF Board.&lt;br /&gt;
&lt;br /&gt;I am currently managing director of Tracesense (Tracesense.com) and our main technology uses the Django Framework.&lt;br /&gt;
&lt;br /&gt;Without the Django Framework we would not have such a great product to offer to our customers.&lt;br /&gt;
&lt;br /&gt;Previously to running Tracesense I have senior management experience in the manufacturing industry from a variety of roles including IT Manager, Production Manager, H&amp;amp;S Manager etc.&lt;br /&gt;
&lt;br /&gt;When i discovered Django i fell in love with coding &amp;amp; want to see it continue to develop and be used into the future.&lt;br /&gt;
&lt;br /&gt;I can commit to minimum of the required time stated although when required I can commit more of my time.&lt;br /&gt;
&lt;br /&gt;Thanks&lt;br /&gt;
Tom&lt;br /&gt;
&lt;/p&gt;&lt;/blockquote&gt;&lt;hr /&gt;
&lt;strong&gt;Mohamed Amine Fouzai&lt;/strong&gt; &lt;i&gt;Tunisia&lt;/i&gt;&lt;br /&gt;&lt;small&gt;President&lt;/small&gt;&lt;blockquote&gt;&lt;p&gt;comunity improvment in tunisia ,developing new ideas and enhance django ecosystems&lt;/p&gt;&lt;/blockquote&gt;&lt;hr /&gt;
&lt;strong&gt;Jon Gould&lt;/strong&gt; &lt;i&gt;United Kingdom&lt;/i&gt;&lt;br /&gt;&lt;small&gt;&lt;/small&gt;&lt;blockquote&gt;&lt;p&gt;I have a long term involvement within the Django community in the UK. I first learned about Django in 2008 and have been involved in the community since. Rather than being a coder or technical, I am a recruiter. For the last 14 years, I have worked with companies and developers that use Django. I have hosted, run and attended Django meetups and conferences throughout this time. If elected to the board I have a lot of experience I can offer from a non-technical perspective to draw upon. I have a different way of thinking and a perspective from the outside.&lt;br /&gt;&lt;br /&gt;
I would be particularly interested in working on fundraising projects and increasing external understanding of what the DSF does and needs support with. I see this as working with sponsors/donors on behalf of the DSF to help raise awareness beyond the &quot;logo on the website&quot;. This is not necessarily about increasing the direct ROI for sponsors but appealing to the bigger organisations who use Django to encourage donations and tech support. I believe that everyone working with Django should contribute in whatever way they can to help improve Django for everyone. As an example, I have pledged to give 5% of my company's annual profits to the DSF.&lt;br /&gt;&lt;br /&gt;
Away from fundraising, I can see that participation in the DSF can be promoted further within the wider Django community. With over a million users of Django globally there is a missed opportunity to bring more people together to support the DSF and guarantee its future. Tech companies now routinely employ people specifically to work in DevRel/DevAdvocacy roles for their products. I don't think that employing someone via the DSF to do this is viable but there must be some members already who would be passionate enough to volunteer to do this on our behalf. I would also be interested in contributing in this area as a board member.&lt;br /&gt; &lt;br /&gt;
I owe the success in my career to the Django community and see now as the perfect time to give back. I am in the early stages of building my own business and flexible with my time, allowing me to concentrate on projects that are important to me both personally and professionally. Being on the board of the DSF would be an honour and a privilege and I would work as hard on this as I would my own business. &lt;br /&gt;&lt;br /&gt;
To add some context, over the years, I have helped over 250 Django developers secure roles and I have been involved and helped with the following groups/events.&lt;br /&gt;&lt;br /&gt;
DJUGL - (Django User Group London) co-organised, organised, sponsored and hosted consistently from 2010-2019&lt;br /&gt;
London Django Meetup - Regular attendee, promote through socials&lt;br /&gt;
Django.Social - meetup group that I started earlier this year to bring people together regularly without the organising that a meetup takes. Simple, free and engaging meetups. Currently groups set up in London, Berlin, New York and Porto&lt;br /&gt;
DjangoDay Copenhagen 2022 - supporter and speaker (lightning talk)&lt;br /&gt;
DjangoCon Europe 2022 - Sponsor, attendee, Lightning talk and helped organise and run the conference party&lt;br /&gt;
London Python Meetup - Currently on the team of organisers, working to find sponsors, venues and speakers. Event re-launched this year.&lt;br /&gt;
Reading Python Dojo - Host and Sponsor, I previously helped the Reading Python Dojo (2 years) by providing a venue and the refreshments.&lt;br /&gt;
&lt;/p&gt;&lt;/blockquote&gt;&lt;hr /&gt;
&lt;strong&gt;Kel Hanna&lt;/strong&gt; &lt;i&gt;Durham, NC&lt;/i&gt;&lt;br /&gt;&lt;small&gt;&lt;/small&gt;&lt;blockquote&gt;&lt;p&gt;I am a perpetual learner committed to improving workplace culture through the lens of human-centered organizational design. I connect dots. I set the table for decision-making. I help people build meaningful partnerships that expand cooperative collaboration and inspire creative action. I help humans get work done. 
&lt;br /&gt;https://nervous-scallop-431.notion.site/The-Tesseract-s-Guide-for-Attempting-Tessellations-c7f9a9107593452a9e1cd8877eda448a&lt;/p&gt;&lt;/blockquote&gt;&lt;hr /&gt;
&lt;strong&gt;Irfan Harun&lt;/strong&gt; &lt;i&gt;Ahmedabad, India&lt;/i&gt;&lt;br /&gt;&lt;small&gt;Secretary&lt;/small&gt;&lt;blockquote&gt;&lt;p&gt;Django had been my bread and butter. Lives of people around me has been uplifted since I started working on Django. It only makes sense to give back to community in terms of knowledge, experience and\n\n time.&lt;/p&gt;&lt;/blockquote&gt;&lt;hr /&gt;
&lt;strong&gt;Jacob Kaplan-Moss&lt;/strong&gt; &lt;i&gt;Oregon&lt;/i&gt;&lt;br /&gt;&lt;small&gt;&lt;/small&gt;&lt;blockquote&gt;&lt;p&gt;Hi, I'm Jacob. I was one of the original maintainers of Django, and was the original founder and first President of the DSF. But I haven't been directly involved in Django for years: I haven't contributed code in like a decade, and I haven't been involved in the DSF since steeping down as President in 2010-ish. I'm feeling ready to get involved again, and I think joining the DSF board is a way I can be most helpful. I'd be coming back to the DSF with a bunch of experience in executive leadership and more experience working with nonprofits. I think I can apply those skills, along with my general knowledge of the Django community, to push things forward.&lt;br /&gt;
What that means, specifically, isn't entirely clear yet. I'd plan to spend the first months of my board term asking a bunch of questions and listening. I'd want to talk to our membership, our sponsors, members of the development community, etc., about what the DSF is doing well, what we could be doing better, and where we need to grow. Then I'd, you know, work on those things&lt;br /&gt;
&lt;br /&gt;I have some hypotheses already: I think we could be better-supporting DjangoCons in the US and especially EU; I think we could be expanding our sponsorship base substantially; I think we could be supporting the Django Fellows in more ways; I think we could be expanding where and how we spend our funds to move the framework forward. But these are all hypoethesis; I'd want to validate that these are indeed useful lines of work before diving in.&lt;/p&gt;&lt;/blockquote&gt;&lt;hr /&gt;
&lt;strong&gt;Sanyam Khurana&lt;/strong&gt; &lt;i&gt;New Delhi, India&lt;/i&gt;&lt;br /&gt;&lt;small&gt;President, Vice President, Treasurer, Secretary&lt;/small&gt;&lt;blockquote&gt;&lt;p&gt;I've been a CPython bug-triager, contributor to Django and maintainer of djangoproject.com&lt;br /&gt;
&lt;br /&gt;I was part of core-organizing team for PyCon India from 2016 - 2018, where I helped with logistics, venue selection, registration desk, website updates, etc. I've also volunteered and spoken at DjangoCon AU 2018, DjangoCon US 2018 and DjangoCon US 2022.&lt;br /&gt;
&lt;br /&gt;I've been an individual DSF member since 2018. I'd like to work with DSF board. My idea is to provide mentorship opportunities to people who are willing to contribute to Django. I strongly feel that there are contributors out there, but many of them do not feel they have the skill-set to contribute to an open source project. Contributing to a very mature framework like Django is very intimidating and overwhelming for people who are looking to make their first-contribution. I think DSF board can provide mentorship programme to help people getting onboarded to the project and a safe space where their questions can be answered.&lt;br /&gt;
&lt;br /&gt;I owe all my learnings to the community because what I've learned has always because of contributing to open source projects and I think being part of the board would be great learning experience for me, and hopefully I can help Django to move forward and give back to the community which is so supportive. In the first year, I would ideally like to be in a supportive role to understand the process from the people who are more experienced.&lt;br /&gt;
&lt;/p&gt;&lt;/blockquote&gt;&lt;hr /&gt;
&lt;strong&gt;Chaim Kirby&lt;/strong&gt; &lt;i&gt;Maryland, USA&lt;/i&gt;&lt;br /&gt;&lt;small&gt;President&lt;/small&gt;&lt;blockquote&gt;&lt;p&gt;It has been a privilege to serve on the DSF board for the last two years. I am running for another term because I still have goals that I want to realize for myself and the DSF.&lt;br /&gt;
Over the last two years serving a year as Secretary and another as Vice President I have worked to be a proactive member of the board. I take pride in having created the membership survey that recently circulated, so as to hopefully provide the next board steps towards a roadmap on how better to serve and integrate the DSF membership. I believe my most lasting contribution of the last two years will be the new staggered two year board terms that I proposed and drafted. It should act as a guarantee of continuation of institutional knowledge&lt;br /&gt;&lt;br /&gt;
But there is so much more work to be done. If re-elected I would want to focus on three areas that I think are crucial for the long term health of the DSF and Django community.&lt;br /&gt;&lt;br /&gt;
First, I want to explore and implement a shift of the Board from a position of bureaucratic oversight to one of mission, vision, and governance. Everything the board and DSF does should be evaluated in the light of our state mission to Support and Promote the development and use of Django; to Protect the Intellectual Property and long term-viability of Django; and to Advance the state of the art in Web development. We have been especially lax in the Promote aspect of our charter.&lt;br /&gt;&lt;br /&gt;
Second, I hope to expand the ranks of our membership. Not just for the sake of a bigger number, but because the DSF membership is our most dedicated individuals and the DSF’s first line of support for furthering our goals. Asking the same dedicated individuals for support will result in burn out and an empty bench when we are looking to a new generation of leaders and assistance in our mission.&lt;br /&gt;&lt;br /&gt;
Third, engage the growing membership with the work of mission, vision, and governance. Having more people able and comfortable contributing to the DSF and Django community is out best bulwark against falling into obscurity or irrelevance.&lt;br /&gt;&lt;br /&gt;
My experiences to this point gives me the skill and confidence to believe that I am the right person to help the DSF achieve all of these things, and more. I know it takes more work than the hour long monthly board meeting, effort that I have and will continue to give. As an engineer of over 20 years I can contribute to the technical aspects a growing DSF will require. As a trained attorney I can support and informally advise the board on topics that touch legal areas. And as a current member of the Board I can provide institutional knowledge, continuity, and insight to the next board.&lt;br /&gt;&lt;br /&gt;
I hope that I have served you well my last two terms on the board, and I hope you believe that I deserve your vote for another term. Thank you
&lt;/p&gt;&lt;/blockquote&gt;&lt;hr /&gt;
&lt;strong&gt;Marcelo Elizeche Landó&lt;/strong&gt; &lt;i&gt;Paraguay&lt;/i&gt;&lt;br /&gt;&lt;small&gt;&lt;/small&gt;&lt;blockquote&gt;&lt;p&gt;For this nomination I will like to cover a few things: My motivation, my background and what from my point of view will be good for improving Django the community.&lt;br /&gt;
&lt;br /&gt;Motivation&lt;br /&gt;
If I have to be honest before assisting to DjangoConUS I have never thought about the Django Community apart from the Python community. That changed for me when I saw this great community that supports their members but also tries to make any newcomer (as I was) as welcomed as a longtime member.&lt;br /&gt;
A few Django Community members suggested that I should run as a board member and I thought that could be interesting to help the community in any capacity. Also not many people know about and how wonderful this community is and I'd like that to be known worldwide and I think I can help with that :)&lt;br /&gt;
&lt;br /&gt;
I feel awkward nominating myself [0,1] as a Board Member for the Django Software Foundation, so I asked some friends from the Python community in Paraguay to help me write about myself for my background, so here we go:&lt;br /&gt;
&lt;br /&gt;Background:&lt;br /&gt;
I’m the co-founder and organizer of the Paraguayan Python community. In 2015 I co-organized the first PyDay in Paraguay, which was a rotund success [2] (seriously, see those pictures!), and started the community's momentum.&lt;br /&gt;
&lt;br /&gt;Since then, I have organized dozens of community events all over the country [3], as well as workshops [4]. My efforts have not only consolidated the community, but also turned it into the most successful and active community to date in Paraguay [5], with over a thousand members (no small feat for a small country).&lt;br /&gt;
&lt;br /&gt;Besides these efforts, I helped popularize Django as a tool for social activism. I’m the creator of AyudaPy [6], a platform that enabled thousands of Paraguayans to help each other during the worst of the COVID-19 pandemic [7,8,9] and I gave a talk about this project at DjangoConUS 2022. I’m also the creator of ListaHu [9](also made with Django), a platform that helps people protect their privacy and assets from extortionists and scammers using crowdsourcing [11]. I’m also the co-creator of AireLibre [12], a community-managed network of air quality sensors.&lt;br /&gt;
&lt;br /&gt;Improving Django:&lt;br /&gt;
&lt;br /&gt;* I think one of the main issues with Django adoption is the learning curve, there's so many different external tutorials for but the official tutorial is kinda of basic. I would like help to create a few other django tutorials from what I learnt in the first one so Django is not intimidating for newcomers.&lt;br /&gt;
&lt;br /&gt;* Another thing that could make the Django experience better is at least suggesting a few deploy strategies so newcomers can have a full picture of what it means to successfully deploy a Django Application in production.&lt;br /&gt;
&lt;br /&gt;* After you manage to use and understand one of Django's issues that sometimes is difficult is to get a Job using Django, one thing that could help is create a new Job Posting board with “better” data as: compensation, salary range and required level.&lt;br /&gt;
&lt;br /&gt;* From the top of my head I would think that the Spanish documentation is great(and it is) but probably we’re not sure how great it is for other languages, for that I would love to add to the Django Developer Survey this kind of data: Preferred or used Language, locale, and how good the documentation is in the native language of the developer. Knowing what to fix and where to ask for help is the first step for improving.&lt;br /&gt;
&lt;br /&gt;I think that the current path of this community is the right one and I would be so honored if I have the chance to contribute to this community as a board member.&lt;br /&gt;
&lt;br /&gt;Refs:&lt;br /&gt;
0. marce@melizeche.com&lt;br /&gt;
1. https://melizeche.com&lt;br /&gt;
2. https://elblogdehumitos.com/posts/pydayasuncion-un-exito-arrollador/&lt;br /&gt;
3. https://www.meetup.com/Python-Paraguay/events/past/&lt;br /&gt;
4. https://twitter.com/melizeche/status/1114298187395883008&lt;br /&gt;
5. https://t.me/pythonparaguay&lt;br /&gt;
6. https://ayudapy.org&lt;br /&gt;
7.https://cienciasdelsur.com/2020/04/14/covid-19-web-permite-conseguir-alimentos-y-medicamentos-a-miles-de-paraguayos/&lt;br /&gt;
8. https://www.youtube.com/watch?v=XK-tqP57tS8&lt;br /&gt;
9. https://www.youtube.com/watch?v=8msEDu9lCxU&lt;br /&gt;
10. https://listahu.org&lt;br /&gt;
11. https://us.pycon.org/2018/schedule/presentation/234/&lt;br /&gt;
12. https://airelib.re&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;&lt;/blockquote&gt;&lt;hr /&gt;
&lt;strong&gt;Mariana Bedran Lesche&lt;/strong&gt; &lt;i&gt;Recife, Brasil&lt;/i&gt;&lt;br /&gt;&lt;small&gt;Secretary&lt;/small&gt;&lt;blockquote&gt;&lt;p&gt;I've been part of the Python community in Brazil since 2008 when I started to attend the coding dojo sessions in Rio that year. Programming was a hobby for me for a long time until I decided I didn't want to work as a teacher anymore and looked at coding as an alternative to my career. After changing professions I got more involved with the Python community and got the chance to attend more conferences as my income grew. I've given talks in local, national and intenatinal events and I have been a volunteer in some events. I worked as an instructor in a Django Girls tutorial, I helped organize a regional Python conference in Brazil (Python Nordeste 2019), I was part of the Django Con Europe 2021 content selection group and this year I've been part of the work group responsible for the financial aid for the Python Brasil conference. I've only started in this area because of the time and effort other people dedicated to this community, so I think it's only fair that I give some of that back by keeping this community moving.&lt;br /&gt;
&lt;br /&gt;In the last few years we've seen great changes in the Brazilian Python community. We have more people from underrepresented groups each year in our local and national conferences and groups. I'd like to bring some of that experience to help the Django community to reach more people.&lt;/p&gt;&lt;/blockquote&gt;&lt;hr /&gt;
&lt;strong&gt;Oscar Martin Cortez Martinez&lt;/strong&gt; &lt;i&gt;Nicaragua/Colombia&lt;/i&gt;&lt;br /&gt;&lt;small&gt;Vice President, Secretary&lt;/small&gt;&lt;blockquote&gt;&lt;p&gt;I've been thinking a lot about this, and when I look back in my time I see the Django version 1.3 with the cherry views package and how much my life and the Django ecosystem has changed since that moment until today. I own more to Django, than what I can offer to itself, but then I think this opportunity will be a good moment for me to return something to the Django project and the community.&lt;br /&gt;
&lt;br /&gt;Coming from a country under development has taught me from the first hand what people needs in order to succeed in their career, and how harder is to start and achieve something. If I have the opportunity to join the DSF I'll work harder to improve the relation between Latin America communities and the DSF, help make the DjangoCon more accesible to under represented groups with initiative such as DjangoCharlas, and as well produce more localized content to enhance the skills of newcomers developers. &lt;/p&gt;&lt;/blockquote&gt;&lt;hr /&gt;
&lt;strong&gt;Nyasha Matongo&lt;/strong&gt; &lt;i&gt;Zimbabwe&lt;/i&gt;&lt;br /&gt;&lt;small&gt;Secretary&lt;/small&gt;&lt;blockquote&gt;&lt;p&gt;I'm a Django enthusiast. I love volunteering for django coding classes and teaching students around the continent on the benefits of Django. &lt;/p&gt;&lt;/blockquote&gt;&lt;hr /&gt;
&lt;strong&gt;Katie McLaughlin &lt;/strong&gt; &lt;i&gt;Melbourne, Australia&lt;/i&gt;&lt;br /&gt;&lt;small&gt;&lt;/small&gt;&lt;blockquote&gt;&lt;p&gt;I have previously served on the DSF (and PSF), and would like to offer my service to help continue to not only keep the lights on, but also help enable those from the community who wish to enact change in how the DSF does things. 
&lt;br /&gt;I am a previous DjangoCon keynote, speaker, organiser and volunteer across EU, US, and AU.&lt;br /&gt;
&lt;br /&gt;Bias disclaimer: I am a developer advocate for Google Cloud, working with Python, Django, and Serverless. My unsuccessful nomination to the board will not preclude me from continuing my advocacy. Depending how voting is run, do not vote for me if you feel other under-representative voices should be heard. I have served time on the DSF, others should get the chance above me. &lt;/p&gt;&lt;/blockquote&gt;&lt;hr /&gt;
&lt;strong&gt;Paolo Melchiorre&lt;/strong&gt; &lt;i&gt;Italy&lt;/i&gt;&lt;br /&gt;&lt;small&gt;Vice President&lt;/small&gt;&lt;blockquote&gt;&lt;p&gt;I’ve been a Django developer for more than 10 years, in which I’ve contributed in various areas: documentation, code, website (in particular full-text search) and Italian translation. I’ve presented a lot of Django talks in meetups and conferences, including DjangoCon. I’ve organized and participated in many sprints on Django. I’ve written many articles on Django and I’m a promoter of Django online. I participated as a coach in DjangoGirls workshops and I’m organizing one in my city.&lt;br /&gt;
&lt;br /&gt;Each of these activities has made me grow as a developer, community member and human being and I think serving on the DSF board can be a way to give back to the Django community what I have received.&lt;br /&gt;
&lt;br /&gt;As a member of the DSF board I’d like to bring a different point of view, close to newcomers, who live and work in small realities and who do not speak English as their first language or do not speak it at all. I’d like to work to remove some language and cultural barriers that still remain for some members of the community. I’d like to give a boost to the development of great new features with the organization of Sprint dedicated to Django code. I’d like to increase collaboration with the Python community and create synergies with other sub-communities to make Django grow again on the web.&lt;/p&gt;&lt;/blockquote&gt;&lt;hr /&gt;
&lt;strong&gt;Kátia Yoshime Nakamura&lt;/strong&gt; &lt;i&gt;Berlin, Germany&lt;/i&gt;&lt;br /&gt;&lt;small&gt;&lt;/small&gt;&lt;blockquote&gt;&lt;p&gt;I would like to be reelected to continue contributing with the DSF Board. I've been part of the DSF Board since 2020 and the last 3 years brought us many challenges. I want to bring more ideas to continue supporting our community - bringing more diversity and inclusiveness. Besides that, I'd like to help establishing a long term plan for the Django Conferences (specifically in Europe but hopefully beyond that) as the the DjangoCon liaison.&lt;/p&gt;&lt;/blockquote&gt;&lt;hr /&gt;
&lt;strong&gt;Renato Oliveira&lt;/strong&gt; &lt;i&gt;Recife, Brazil&lt;/i&gt;&lt;br /&gt;&lt;small&gt;&lt;/small&gt;&lt;blockquote&gt;&lt;p&gt;I've been part of the Python community since 2010. Helped organize dozens of local group meetings and one edition of Python Brasil (Brazilian PyCon) in 2014 while serving on the Associação Python Brasil (Brazilian PSF) board. I owe most of my professional achievements to the Python and Django community, and I'd like to give back to the community. Also, something I'd like to see is more Django Conferences around the world. It is a privilege to travel abroad, so I'd like to help foment conferences in other continents so more people can experience what just a few of us can.&lt;/p&gt;&lt;/blockquote&gt;&lt;hr /&gt;
&lt;strong&gt;Carewen Owen&lt;/strong&gt; &lt;i&gt;Edmonton, Canada (moving to the UK early 2023)&lt;/i&gt;&lt;br /&gt;&lt;small&gt;&lt;/small&gt;&lt;blockquote&gt;&lt;p&gt;During my time with using the Django web development framework, I have encountered many examples of the best of the Open Source spirit. I have received help from other more experienced Django developers in learning how to unlock the potential of this outstanding framework. With this in mind, I am motivated to put my name forward to serve on the DSF Board.&lt;br /&gt;
&lt;br /&gt;I would like to highlight my experience as both a Volunteer Instructor and Trainer with the Board Development Program (Alberta, Canada): https://www.alberta.ca/board-development-program.aspx. More specifically, I have experience in educating Not For Profit Boards in governance best practices in evolving from good to great, and have served on a number of Boards. 
&lt;br /&gt;In contemplating whether or not to put my name forward, I engaged in a brief assessment of the DSF based on externally available information and email exchanges with the current DSF Board. Through this I learned of plans to lay out a &quot;path from a wholly volunteer-run organization to something more formal with actual paid staff.&quot; I can think of no better time for the quality of DSF's governance to be given attention than this; for such a path can only benefit from the evolution of the DSF's Board governance practices.&lt;br /&gt;
&lt;br /&gt;It is often the reality that Board members are asked to do much with little. Great Not For Profit governance is the unsung hero of many a meaningful endeavour. However, with this self-nomination I am not only offering a high-level plan for consideration and discussion, but I am also putting my name forward to do the legwork to help organize and make this happen. 
&lt;br /&gt;However, evolving, improving, Board governance is not a solitary endeavour. The reality is, even though I will happily do much of the legwork there will be a need for others to collaborate, and for the Board as a whole to receive recommendations and ratify what is to be done. And yet, I have confidence that good people always find a way to make great things happen.&lt;br /&gt;
&lt;br /&gt;To help with understanding what I am proposing I am including a draft high-level plan for what I propose is required. Should the DSF Membership vote for me to become a Board member I will be proposing the following:&lt;br /&gt;
&lt;br /&gt;1) Create a Terms of Reference (ToR) policy for committee formation and reporting. ToRs provide clarity for:&lt;br /&gt;
- The type of committee (Standing/Sub-committee/Ad hoc) and its general purpose&lt;br /&gt;
- Committee composition and meeting schedule&lt;br /&gt;
- Committee resource allocation&lt;br /&gt;
- Specific committee objectives, including reporting target dates&lt;br /&gt;
- Committee evaluation process&lt;br /&gt;
- And finally, key duties and responsibilities (authority/reporting)&lt;br /&gt;
&lt;br /&gt;
2) The DSF Board strike a &quot;Governance Evolution and Maturation&quot; Committee (GEM):&lt;br /&gt;
- The first committee to utilize the newly formed ToR Policy would be the GEM Committee&lt;br /&gt;
- GEM would be given the authority to, Investigate and report on the current DSF Governance structure, and to take action as ratified by the DSF Board&lt;br /&gt;
- As a DSF Board member I would be willing to chair this committee.&lt;br /&gt;
- I recommend a total of 3-5 volunteers for this committee with experience in Board governance best-practices, organizational development, and/or change management&lt;br /&gt;
&lt;br /&gt;
3) Implement the first-year GEM plan. While it is very early to offer more than a high-level plan, and I have barely scratched the surface through preliminary analysis, I offer the following to support discussion:&lt;br /&gt;
- Review existing DSF bylaws&lt;br /&gt;
&lt;br /&gt;- Draft a DSF Policy framework:&lt;br /&gt;
- - For those conversant with such matters I would pull upon my past experience with Alberta's Board Development Program's framework. This framework has the following sections:&lt;br /&gt;
- - - Purpose: Who the DSF is and what it intends to do (Purpose/Vision/Mission)&lt;br /&gt;
- - - Board Self-Governance: How the Board governs and assesses itself&lt;br /&gt;
- - - Progress: How things get done, operations, budgeting, people&lt;br /&gt;
- - - Identity: How the Board communicates with the membership/community and advocates for its Purpose, Vision and Mission&lt;br /&gt;
- - This activity would pull together various existing policies into a central organized body, and identify new policies to be brought forward to the Board&lt;br /&gt;
&lt;br /&gt;- Identify information management requirements and evaluate existing information management within the DSF for the purpose of bylaw and policy availability:&lt;br /&gt;
- - Not only does documentation need to be accounted for, but also management of this information needs to be reviewed&lt;br /&gt;
- - If there is an existing DSF Committee engaged in such activity I would recommend collaboration between the two committees (no need to re-invent the wheel or blur GEM's mandate)&lt;br /&gt;
&lt;br /&gt;- Provide internal consulting to other DSF Committees in drafting and presenting their ToR to the DSF Board&lt;br /&gt;
&lt;br /&gt;
I would anticipate that the first year could see great progress. While the above list may seem complex, I also bring experience and resources to train those who have interest in volunteering with the GEM Committee as necessary. 
&lt;br /&gt;I believe that the DSF currently has a good foundation for its future evolution. My proposal is that we now engage in an effort to take it from good to great! 
&lt;br /&gt;Thank you for your consideration.&lt;/p&gt;&lt;/blockquote&gt;&lt;hr /&gt;
&lt;strong&gt;Vishvajit Pathak &lt;/strong&gt; &lt;i&gt;Pune, India &lt;/i&gt;&lt;br /&gt;&lt;small&gt;President, Vice President, Treasurer, Secretary&lt;/small&gt;&lt;blockquote&gt;&lt;p&gt;I have been using python for all my professional life( &gt;10y). My startup marsdevs.com runs on python so it's time for me give it back to the community. &lt;/p&gt;&lt;/blockquote&gt;&lt;hr /&gt;
&lt;strong&gt;Kuldeep Pisda&lt;/strong&gt; &lt;i&gt;Raipur, CG, India&lt;/i&gt;&lt;br /&gt;&lt;small&gt;Treasurer, Secretary&lt;/small&gt;&lt;blockquote&gt;&lt;p&gt;I have been a django develoepr for the past several years, and am a fan of the Django in general. I have been an advocate of open source softwares, and would love to be a part of the journey of the Django framework. If selected I would love to spend some time focusing on the promotion, growth and development of the Django Developers across the globe.&lt;/p&gt;&lt;/blockquote&gt;&lt;hr /&gt;
&lt;strong&gt;Ed Rivas&lt;/strong&gt; &lt;i&gt;El Salvador&lt;/i&gt;&lt;br /&gt;&lt;small&gt;&lt;/small&gt;&lt;blockquote&gt;&lt;p&gt;Django means a lot to me. It single handedly got me into programing in general and Python specifically over a decade ago, and it stands in my mind as THE model of what a healthy open source community looks like.&lt;br /&gt;
&lt;br /&gt;I've been a DSF member for a while, but after the latest djangocon US and careful consideration I believe it's time for me to take a more active role in the advancement of Django and its community around the world. I'm not interested in a particular seat on the board but would love to help realize new initiatives such as a mentorship program, new sponsorship opportunities, and a renewed focus on the Spanish speaking community&lt;/p&gt;&lt;/blockquote&gt;&lt;hr /&gt;
&lt;strong&gt;Cagil Ulusahin Sonmez&lt;/strong&gt; &lt;i&gt;London/UK, formerly Istanbul/Turkey&lt;/i&gt;&lt;br /&gt;&lt;small&gt;President, Vice President&lt;/small&gt;&lt;blockquote&gt;&lt;p&gt;I have started using Django since its early days (~2008) and have been building Django/Python apps since.&lt;br /&gt;
&lt;br /&gt;Between 2015-2018, I have co-organised more than 10 DjangoGirls events in Istanbul and other cities in Turkey. I learned a lot being part of the DjangoGirls community. For this reason, I am trying to give back to the community. That is also one of the reasons why I started co-organising the London Django Meetup since 2018. Also I'm happy to be part of the organiser team of the first-ever PyCon Turkey too. PyCon Turkey happened with the help of the Django community supporting the idea in the DjangoCon Europe 2019.&lt;br /&gt;
&lt;br /&gt;I regularly attend DjangoCons and different Python conferences and volunteer as much as I can. Attending conferences was a privilege I got after moving to the UK. I want to share that privilege with those communities who cannot attend the events, mostly due to financial reasons. Thus, I am also very interested in supporting the funding of open-source projects and looking forward to supporting DSF as a board member and working on grants, reports, and improving the corporate sponsor experience/relations. 
&lt;br /&gt;Another topic is diversity. I think the best way I can help increase diversity is by being more present as an underrepresented gender and member of a minority group. 
&lt;br /&gt;We need to make sure we have more role models from underrepresented groups. I believe that is the key to increase the diversity within our communities. So one of my motivations for joining the board is to work on diversity and inclusion within the community. The support of DSF and PSF plays a crucial role for many local communities and the individuals within those groups. (I experienced that firsthand as one of the members of the local Turkish Django community.)&lt;br /&gt;
&lt;br /&gt;I believe our Django (and Python) community is very special. We are better when we are working together, sharing, and supporting each other. I am hoping we can make every individual member of the community feel included.&lt;/p&gt;&lt;/blockquote&gt;&lt;hr /&gt;
&lt;strong&gt;Arsalan Wahidi&lt;/strong&gt; &lt;i&gt;Afghanistan&lt;/i&gt;&lt;br /&gt;&lt;small&gt;Treasurer, Secretary&lt;/small&gt;&lt;blockquote&gt;&lt;p&gt;I am welling to work abroad.&lt;/p&gt;&lt;/blockquote&gt;&lt;hr /&gt;
&lt;strong&gt;Carina C. Zona&lt;/strong&gt; &lt;i&gt;Europe&lt;/i&gt;&lt;br /&gt;&lt;small&gt;&lt;/small&gt;&lt;blockquote&gt;&lt;p&gt;The extent of warmth, generosity, and inclusiveness in Django community stands out among open source communities. Django Software Foundation is at its best when it serves as a champion for the good ideas percolating up from this global community's members and connects budding organizers with transformative resources such as information, referrals, funding, mentorship, partnerships, and moral support. My goal is to work on strengthening DSF's capacity to provide seed resources sustainably.&lt;br /&gt;
&lt;br /&gt;This would be my first year on DSF's board, so my initial agenda is to build on momentum developed by the previous board, while helping DSF solidify its role as a stable source of assistance for grassroots Django communities around the world. What I would bring to that: (a) commitment to upholding the spirit of Django's welcoming culture, and (b) decades of experience in supporting and promoting open source community development, diversity and inclusion, nonprofit fundraising, and empathetic leadership. This is work that I am passionate about anyway, and here it is opportunity to pay forward the kindness this community has always shown me.&lt;/p&gt;&lt;/blockquote&gt;&lt;hr /&gt;
&lt;strong&gt;Cory Zue&lt;/strong&gt; &lt;i&gt;Cape Town, South Africa&lt;/i&gt;&lt;br /&gt;&lt;small&gt;Vice President, Treasurer, Secretary&lt;/small&gt;&lt;blockquote&gt;&lt;p&gt;I'm applying to the board because I saw a tweet that I thought perfectly applied to me.[1] Django has been invaluable in my career and I would love the opportunity to give back to the project with my time and skills. 
&lt;br /&gt;While I've never contributed to the Django codebase, I have been involved with Django and the community for more than 10 years. I was CTO for 11 years of the technology startup and social enterprise, Dimagi[2]. While at Dimagi, I ran the team that built what is (to my knowledge) the biggest open-source Django application in the world[3], as measured by code contributions. I currently earn a living working for myself building my own software products with Django[4], or for the Django ecosystem[5]. It would not be an exaggeration to say that I currently rely on Django for the overwhelming share of my income and success.&lt;br /&gt;
&lt;br /&gt;What would I bring to the board? Hopefully quite a lot.&lt;br /&gt;
&lt;br /&gt;First and foremost, I’m an avid Django user. I understand what it’s like to build web applications with Django as well as anyone. This means I know who the Django stakeholders are, which makes it easier for me to reach, understand and communicate with them.&lt;br /&gt;
&lt;br /&gt;I also know how to work with people. While leading a team of 30+ people I learned how to work with different personalities, build consensus, and make difficult collaborative decisions. My experience stewarding a large open-source product means that I understand how to build and nurture communities of developers. More recently I’ve focused more on writing (including creating educational content for Django developers[6][7]), which should help with any DSF communications that need to go out. 
&lt;br /&gt;And I understand the non-technical aspects of organizations. My work as an executive at a 200-person company, as well as running my own small businesses, have exposed me to many other aspects relevant to the DSF, including finances, fundraising, marketing, and governance.&lt;br /&gt;
&lt;br /&gt;Finally, because I currently work for myself and have a good amount of independence, I'm confident I will be able to make the time to invest in the DSF however I can be useful. I control my own time, so when I commit that time to support this board, I know I’ll be able to deliver on this commitment. I’ve been actively looking this past year for ways to use my time to “give back” to my communities - and serving the Django software community would be a great way for me to do so.&lt;br /&gt;
&lt;br /&gt;To some extent my personal success is tied to the success of Django, which makes me strongly incentivized to do what I can to ensure the continued success of Django. I’d be happy to do that in whatever capacity the DSF thinks would be useful.&lt;br /&gt;
&lt;br /&gt;Thanks for your consideration. :)&lt;br /&gt;
&lt;br /&gt;[1]: https://twitter.com/jacobian/status/1583162695309631488&lt;br /&gt;
[2]: https://www.dimagi.com/&lt;br /&gt;
[3]: https://github.com/dimagi/commcare-hq&lt;br /&gt;
[4]: https://www.placecard.me/&lt;br /&gt;
[5]: https://www.saaspegasus.com/&lt;br /&gt;
[6]: https://www.saaspegasus.com/guides/&lt;br /&gt;
[7]: https://www.youtube.com/watch?v=bz33cFQIC9Q&lt;br /&gt;
&lt;/p&gt;&lt;/blockquote&gt;&lt;hr /&gt;</description>
	<pubDate>Wed, 16 Nov 2022 02:36:01 +0000</pubDate>
</item>
<item>
	<title>Brett Cannon: MVPy: Minimum Viable Python</title>
	<guid>https://snarky.ca/mvpy-minimum-viable-python/</guid>
	<link>https://snarky.ca/mvpy-minimum-viable-python/</link>
	<description>&lt;p&gt;Over 29 posts spanning 2 years, this is the final post in my &lt;a href=&quot;https://snarky.ca/tag/syntactic-sugar/&quot;&gt;blog series on Python&amp;amp;aposs syntactic sugar&lt;/a&gt;. I had set out to find all of the Python 3.8 syntax that could be rewritten if you were to run a tool over a single Python source file in isolation and still end up with reasonably similar semantics (i.e. no whole-program analysis, &lt;code&gt;globals()&lt;/code&gt; having different keys was okay). Surprisingly, it turns out to be easier to list what syntax you &lt;strong&gt;can&amp;amp;apost&lt;/strong&gt; rewrite than re-iterate all the syntax that you can rewrite!&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://docs.python.org/3.8/reference/lexical_analysis.html#integer-literals&quot;&gt;Integers&lt;/a&gt; (as the base for other literals like bytes)&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://docs.python.org/3.8/reference/expressions.html#calls&quot;&gt;Function calls&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;&lt;a href=&quot;https://docs.python.org/3.8/reference/simple_stmts.html#assignment-statements&quot;&gt;=&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;&lt;li&gt;Function definitions&lt;/li&gt;&lt;li&gt;&lt;code&gt;&lt;a href=&quot;https://docs.python.org/3.8/reference/simple_stmts.html#the-global-statement&quot;&gt;global&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;&lt;a href=&quot;https://docs.python.org/3.8/reference/simple_stmts.html#the-nonlocal-statement&quot;&gt;nonlocal&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;&lt;a href=&quot;https://docs.python.org/3.8/reference/simple_stmts.html#the-return-statement&quot;&gt;return&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;&lt;a href=&quot;https://docs.python.org/3.8/reference/simple_stmts.html#the-yield-statement&quot;&gt;yield&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;&lt;a href=&quot;https://docs.python.org/3.8/reference/simple_stmts.html#the-del-statement&quot;&gt;del&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#the-try-statement&quot;&gt;&lt;code&gt;try&lt;/code&gt;/&lt;code&gt;except&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#the-while-statement&quot;&gt;while&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;All other syntax can devolve to this core set of syntax. I call this subset of syntax the &lt;em&gt;Minimum Viable Python (MVPy)&lt;/em&gt; you need to make Python function as a whole&lt;em&gt;. &lt;/em&gt;If you can implement this subset of the language, then you can do a syntactic translation to support the rest of Python&amp;amp;aposs syntax (although admittedly it might be a bit faster if you directly implemented all the syntax &amp;#x1F609;).&lt;/p&gt;&lt;p&gt;If you look at what syntax is left, it pretty much aligns to what is required to implement a Turing machine:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Read/write data (&lt;code&gt;=&lt;/code&gt;, &amp;#xA0;&lt;code&gt;:=&lt;/code&gt;, and integers)&lt;/li&gt;&lt;li&gt;Make decisions about data (&lt;code&gt;while&lt;/code&gt; and &lt;code&gt;try&lt;/code&gt;)&lt;/li&gt;&lt;li&gt;Do things to that data (everything involving defining and using functions)&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;You might not be as productive in this subset of the language as you would be with all the syntax available in Python 3.8 (and later), but you should still be able to accomplish the same things given enough time and patience.&lt;/p&gt;&lt;h2 id=&quot;addendum&quot;&gt;Addendum&lt;/h2&gt;&lt;p&gt;Since the initial publication of this post on 2022-08-14, I was able to unravel even more syntax than I initially thought. This post has been updated to reflect those later realizations.&lt;/p&gt;</description>
	<pubDate>Wed, 16 Nov 2022 01:01:00 +0000</pubDate>
</item>
<item>
	<title>Brett Cannon: Unravelling `lambda` expressions</title>
	<guid>https://snarky.ca/unraveling-lambda-expressions/</guid>
	<link>https://snarky.ca/unraveling-lambda-expressions/</link>
	<description>&lt;p&gt;When I first wrote my series on &lt;a href=&quot;https://snarky.ca/tag/syntactic-sugar/&quot;&gt;Python&amp;amp;aposs syntactic sugar&lt;/a&gt;, I left out &lt;a href=&quot;https://docs.python.org/3.8/reference/expressions.html#lambda&quot;&gt;&lt;code&gt;lambda&lt;/code&gt; expressions&lt;/a&gt; as I knew I couldn&amp;amp;apost unravel them without &lt;a href=&quot;https://snarky.ca/unravelling-assignment-expressions/&quot;&gt;unravelling assignment expressions&lt;/a&gt;. Luckily, I solved that problem, so now I can unravel &lt;code&gt;lambda&lt;/code&gt;!&lt;/p&gt;&lt;p&gt;If you read the language specification it tells you how a &lt;code&gt;lambda&lt;/code&gt; expression unravels semantically. Going from &lt;code&gt;lambda A: B&lt;/code&gt; gets you:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def &amp;lt;lambda&amp;gt;(A):
    return B&lt;/code&gt;&lt;/pre&gt;Simple unravelling of &lt;code&gt;lambda A: B&lt;/code&gt;&lt;p&gt;Now in a proper unravelling, that function would be given a temporary name and then you would call it in the appropriate place, e.g. &lt;code&gt;x + (lambda A: A)(y)&lt;/code&gt; would unravel to:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def _lambda(A):
    return A

x + _lambda(y)&lt;/code&gt;&lt;/pre&gt;Simple unravelling of &lt;code&gt;x + (lambda A: A)(y)&lt;/code&gt;&lt;p&gt;But the one small detail we are missing is the function name: it technically needs to be &lt;code&gt;&amp;lt;lambda&amp;gt;&lt;/code&gt;. Now we could be thorough and change the function &lt;strong&gt;and &lt;/strong&gt;code object&amp;amp;aposs names to match, but I don&amp;amp;apost think many people will check the code object for the name, so we will keep this simple and only worry about the function name:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def _lambda(A):
    return A
_lambda.__name__ = &amp;quot;&amp;lt;lambda&amp;gt;&amp;quot;&lt;/code&gt;&lt;/pre&gt;Unravelling of &lt;code&gt;lambda A: A&lt;/code&gt;&lt;p&gt;With the unravelling to a function complete, the only other detail to mention is unravelling for everything else still needs to be applied, including assignment expressions. That way any created variable due to an assignment expression operates as expected.&lt;/p&gt;</description>
	<pubDate>Wed, 16 Nov 2022 01:00:29 +0000</pubDate>
</item>
<item>
	<title>PyCoder’s Weekly: Issue #551 (Nov. 15, 2022)</title>
	<guid>https://pycoders.com/issues/551</guid>
	<link>https://pycoders.com/issues/551</link>
	<description>&lt;p&gt; &lt;span&gt;#551 – NOVEMBER 15, 2022&lt;/span&gt;&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/issues/551/feed&quot;&gt;View in Browser »&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://pycoders.com&quot;&gt;&lt;img alt=&quot;The PyCoder&amp;rsquo;s Weekly Logo&quot; src=&quot;https://cdn.pycoders.com/37bdf31dc645f968ffb90196e5d38ff5&quot; /&gt;&lt;/a&gt;&lt;/p&gt; &lt;hr /&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/9847/feed&quot; target=&quot;_blank&quot;&gt;Refactoring: Prepare Your Code to Get Help&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; In this Code Conversation video course, you&amp;rsquo;ll explore the steps you can take to get help when you&amp;rsquo;re stuck while coding. You&amp;rsquo;ll investigate how to clean up your code to focus on the question you have. Along the way, you&amp;rsquo;ll learn how to handle errors and use custom exceptions.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/9847/feed&quot; target=&quot;_blank&quot;&gt;REAL PYTHON&lt;/a&gt;&lt;/span&gt; &lt;span&gt;course&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/9859/feed&quot; target=&quot;_blank&quot;&gt;Write Chrome Extensions… in Python!&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; Until recently you could only write Chrome Extensions in JavaScript. Now with PyScript, you can write them in Python. This article shows you how to get started writing a simple extension.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/9859/feed&quot; target=&quot;_blank&quot;&gt;PETE FISON&lt;/a&gt; • Shared by &lt;a href=&quot;https://pycoders.com/link/9850/feed&quot; target=&quot;_blank&quot;&gt;Pete Fison&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/9843/feed&quot; target=&quot;_blank&quot;&gt;Automatic Speech-to-Text With Understanding in One, Easy API&lt;/a&gt;&lt;/h3&gt; &lt;a href=&quot;https://pycoders.com/link/9843/feed&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://cdn.pycoders.com/f5c30c58e9c2d109ae623b03a3defe42&quot; alt=&quot;alt&quot; /&gt;&lt;/a&gt; &lt;p&gt; Python developers from companies like Spotify, Rasa and Twilio chose Deepgram&amp;rsquo;s speech-to-text API because it provides accurate, usable transcripts with understanding features like summarization, language detection and sentiment analysis.  &lt;a href=&quot;https://pycoders.com/link/9843/feed&quot; target=&quot;_blank&quot;&gt;Your first 200 hours are free →&lt;/a&gt;&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/9843/feed&quot; target=&quot;_blank&quot;&gt;DEEPGRAM&lt;/a&gt;&lt;/span&gt; &lt;span&gt;sponsor&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/9856/feed&quot; target=&quot;_blank&quot;&gt;Python Asyncio: The Complete Guide&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; This comprehensive guide shows you everything you&amp;rsquo;d ever want to know about asynchronous programming with coroutines and the &lt;code&gt;asyncio&lt;/code&gt; library in Python.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/9856/feed&quot; target=&quot;_blank&quot;&gt;JASON BROWNLEE&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/9851/feed&quot; target=&quot;_blank&quot;&gt;EuroPython 2022 Videos Released&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/9851/feed&quot; target=&quot;_blank&quot;&gt;YOUTUBE&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/9871/feed&quot; target=&quot;_blank&quot;&gt;PyCon US Looking for Remote Volunteers&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/9871/feed&quot; target=&quot;_blank&quot;&gt;PYCON US GOOGLE FORM&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;h2&gt;Discussions&lt;/h2&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/9863/feed&quot; target=&quot;_blank&quot;&gt;Stop Requiring Only One Assertion Per Unit Test&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/9863/feed&quot; target=&quot;_blank&quot;&gt;HACKER NEWS&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/9862/feed&quot; target=&quot;_blank&quot;&gt;How Do I Find My &amp;ldquo;Purpose&amp;rdquo;?&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/9862/feed&quot; target=&quot;_blank&quot;&gt;HACKER NEWS&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;h2&gt;Python Jobs&lt;/h2&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/9848/feed&quot; target=&quot;_blank&quot;&gt;Software Engineer - Weissman Lab (Cambridge, MA, USA)&lt;/a&gt;&lt;/h3&gt; &lt;p&gt;&lt;a href=&quot;https://pycoders.com/link/9848/feed&quot; target=&quot;_blank&quot;&gt;Whitehead Institute for Biomedical Research&lt;/a&gt;&lt;/p&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/9866/feed&quot; target=&quot;_blank&quot;&gt;Senior Software Engineer (Python, Qt, Linux) (Anywhere)&lt;/a&gt;&lt;/h3&gt; &lt;p&gt;&lt;a href=&quot;https://pycoders.com/link/9866/feed&quot; target=&quot;_blank&quot;&gt;VIOLET&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://www.pythonjobshq.com?utm_source=newsletter&amp;utm_campaign=pycoders551&amp;utm_medium=feed&quot; target=&quot;_blank&quot;&gt;More Python Jobs &amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt; &lt;h2&gt;Articles &amp;amp; Tutorials&lt;/h2&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/9845/feed&quot; target=&quot;_blank&quot;&gt;Develop Your Pipelines as Code With the Dagger Python SDK&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; Dagger is a programmable CI/CD engine that uses code for configuration instead of YAML. They&amp;rsquo;ve recently released a Python SDK, you can now manage your pipeline in the same language as your code. See also the &lt;a href=&quot;https://pycoders.com/link/9846/feed&quot; target=&quot;_blank&quot;&gt;Hacker News Discussion&lt;/a&gt; about the launch.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/9845/feed&quot; target=&quot;_blank&quot;&gt;DAGGER.IO&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/9860/feed&quot; target=&quot;_blank&quot;&gt;Using a Raspberry Pi as a Portable PyPI Server&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; At PyCon Africa, Vuyisile got into several conversations about the challenges of coding with limited or spotty internet connections. But what if you could take PyPI with you? This article shows you how to build a portable PyPI server on Raspberry Pi hardware.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/9860/feed&quot; target=&quot;_blank&quot;&gt;VUYISILE NDLOVU&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/9877/feed&quot; target=&quot;_blank&quot;&gt;Leverage the Power of OpenTelemetry With TelemetryHub by Scout APM&lt;/a&gt;&lt;/h3&gt; &lt;a href=&quot;https://pycoders.com/link/9877/feed&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://cdn.pycoders.com/7a7faf1828ccdfe30729ae1f76000f80&quot; alt=&quot;alt&quot; /&gt;&lt;/a&gt; &lt;p&gt; If you&amp;rsquo;re in need of observability, than look no further than TelemetryHub. TelemetryHub enables you to spend less time troubleshooting your complicated systems and more time concentrating on what matters by providing a &lt;a href=&quot;https://pycoders.com/link/9877/feed&quot; target=&quot;_blank&quot;&gt;wide variety of observability microservices →&lt;/a&gt;&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/9877/feed&quot; target=&quot;_blank&quot;&gt;SCOUT APM&lt;/a&gt;&lt;/span&gt; &lt;span&gt;sponsor&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/9857/feed&quot; target=&quot;_blank&quot;&gt;Getters and Setters: Manage Attributes in Python&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; In this tutorial, you&amp;rsquo;ll learn what getter and setter methods are, how Python properties are preferred over getters and setters when dealing with attribute access and mutation, and when to use getter and setter methods instead of properties in Python.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/9857/feed&quot; target=&quot;_blank&quot;&gt;REAL PYTHON&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/9875/feed&quot; target=&quot;_blank&quot;&gt;Building Generator Pipelines in Python&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; Generator pipelines allow you to string calls together so that the output of one call is the input of the next one in the pipeline. The article shows you how to build generator pipelines using function composition.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/9875/feed&quot; target=&quot;_blank&quot;&gt;MARCIN KOZAK&lt;/a&gt; • Shared by &lt;a href=&quot;https://pycoders.com/link/9867/feed&quot; target=&quot;_blank&quot;&gt;Marcin&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/9852/feed&quot; target=&quot;_blank&quot;&gt;Inline Caches in the Skybison Python Runtime&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; Inline caching is a popular technique for optimizing dynamic language runtimes. This article covers how such caching was implemented in Skybison, an experimental Python runtime.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/9852/feed&quot; target=&quot;_blank&quot;&gt;MAX BERNSTEIN&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/9876/feed&quot; target=&quot;_blank&quot;&gt;How to Build a Modular Arithmetic Library in Python&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; Learn how to create a library for modular arithmetic, using operator overloading and redefining the built-in functions for NumPy all while modeling the fun &amp;ldquo;Lights Out&amp;rdquo; game.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/9876/feed&quot; target=&quot;_blank&quot;&gt;ALEJANDRO SÁNCHEZ YALÍ.&lt;/a&gt; • Shared by Mirjam Guesgen&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/9849/feed&quot; target=&quot;_blank&quot;&gt;A Python 3.11 &amp;ldquo;Gotcha&amp;rdquo;&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; As not all packages have caught up with the Python 3.11 release, upgrading your system early may run into problems. This article details the gotchas James ran into.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/9849/feed&quot; target=&quot;_blank&quot;&gt;JAMES BENNETT&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/9841/feed&quot; target=&quot;_blank&quot;&gt;The Past, Present, and Future of Notebooks&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; Data science notebooks have come a long way since first introduced back in 1988. Here&amp;rsquo;s the 101 on how we got here, where the market is at, and predictions for the future.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/9841/feed&quot; target=&quot;_blank&quot;&gt;DEEPNOTE&lt;/a&gt;&lt;/span&gt; &lt;span&gt;sponsor&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/9861/feed&quot; target=&quot;_blank&quot;&gt;How to Filter Django QuerySets&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; A tutorial on creating QuerySets with Django ORM and filtering the data. Includes how to convert QuerySets into lists with 15 different examples.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/9861/feed&quot; target=&quot;_blank&quot;&gt;ALICE RIDGWAY&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/9874/feed&quot; target=&quot;_blank&quot;&gt;Django Forms Within Modal Dialogs Using HTMX&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; This article shows you step-by-step how to use the &lt;code&gt;django-crispy-forms&lt;/code&gt; library with HTMX to build modal dialogs with Bootstrap.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/9874/feed&quot; target=&quot;_blank&quot;&gt;AIDAS BENDORAITIS&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;h2&gt;Projects &amp;amp; Code&lt;/h2&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/9844/feed&quot; target=&quot;_blank&quot;&gt;typer: Build Great CLIs Using Type Hints&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/9844/feed&quot; target=&quot;_blank&quot;&gt;GITHUB.COM/TIANGOLO&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/9853/feed&quot; target=&quot;_blank&quot;&gt;videocr: OCR Videos in macOS&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/9853/feed&quot; target=&quot;_blank&quot;&gt;GITHUB.COM/PETERC&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/9868/feed&quot; target=&quot;_blank&quot;&gt;flastapi: FastAPI-like Interface Plugin for Flask&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/9868/feed&quot; target=&quot;_blank&quot;&gt;GITHUB.COM/MAARTEN-DP&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/9854/feed&quot; target=&quot;_blank&quot;&gt;jc: JSON-ify the Output of Common Tools&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/9854/feed&quot; target=&quot;_blank&quot;&gt;GITHUB.COM/KELLYJONBRAZIL&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://github.com/metafy-social/daily-python-scripts&quot; target=&quot;_blank&quot;&gt;daily-python-scripts: A Repository of Scripts for Daily Tasks&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &lt;span&gt;&lt;a href=&quot;https://github.com/metafy-social/daily-python-scripts&quot; target=&quot;_blank&quot;&gt;GITHUB.COM/METAFY-SOCIAL&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;h2&gt;Events&lt;/h2&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/9872/feed&quot; target=&quot;_blank&quot;&gt;Heidelberg Python Meetup&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; November 16, 2022&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/9872/feed&quot; target=&quot;_blank&quot;&gt;MEETUP.COM&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/9873/feed&quot; target=&quot;_blank&quot;&gt;Weekly Real Python Office Hours Q&amp;amp;A (Virtual)&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; November 16, 2022&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/9873/feed&quot; target=&quot;_blank&quot;&gt;REALPYTHON.COM&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/9864/feed&quot; target=&quot;_blank&quot;&gt;PyCon US 2023 Call for Proposals&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; November 17, 2022&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/9864/feed&quot; target=&quot;_blank&quot;&gt;ZOOM.US&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/9869/feed&quot; target=&quot;_blank&quot;&gt;PyLadies Dublin&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; November 17, 2022&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/9869/feed&quot; target=&quot;_blank&quot;&gt;PYLADIES.COM&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/9858/feed&quot; target=&quot;_blank&quot;&gt;MadPUG&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; November 17 to November 18, 2022&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/9858/feed&quot; target=&quot;_blank&quot;&gt;MEETUP.COM&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/9865/feed&quot; target=&quot;_blank&quot;&gt;Karlsruhe Python User Group (KaPy)&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; November 18, 2022&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/9865/feed&quot; target=&quot;_blank&quot;&gt;BL0RG.NET&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;hr /&gt; &lt;p&gt;Happy Pythoning!&lt;br /&gt;This was PyCoder&amp;rsquo;s Weekly Issue #551.&lt;br /&gt;&lt;a href=&quot;https://pycoders.com/issues/551/feed&quot;&gt;View in Browser »&lt;/a&gt;&lt;/p&gt; &lt;img src=&quot;https://pycoders.com/issues/551/open/feed&quot; width=&quot;1&quot; height=&quot;1&quot; alt=&quot;alt&quot; /&gt; 
        &lt;hr /&gt;
        &lt;p&gt;&lt;em&gt;[ Subscribe to 🐍 PyCoder&amp;rsquo;s Weekly 💌 – Get the best Python news, articles, and tutorials delivered to your inbox once a week &lt;a href=&quot;https://pycoders.com/?utm_source=pycoders&amp;utm_medium=feed&amp;utm_campaign=footer&quot;&gt;&amp;gt;&amp;gt; Click here to learn more&lt;/a&gt; ]&lt;/em&gt;&lt;/p&gt;</description>
	<pubDate>Tue, 15 Nov 2022 19:30:00 +0000</pubDate>
</item>
<item>
	<title>PyBites: Software Engineering and Entrepreneurship</title>
	<guid>https://pybit.es/articles/pp95-software-engineering-and-entrepreneurship/</guid>
	<link>https://pybit.es/articles/pp95-software-engineering-and-entrepreneurship/</link>
	<description>&lt;p&gt;Listen here:&lt;/p&gt;



&lt;div id=&quot;buzzsprout-player-11689797&quot;&gt;&lt;/div&gt;



&lt;p&gt;This week we talk with&amp;nbsp;&lt;a href=&quot;https://www.linkedin.com/in/yujiantang/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Yujian&lt;/a&gt;, software developer and entrepreneur.&lt;/p&gt;



&lt;p&gt;We dive into: &lt;br /&gt;&amp;#8211; His background. &lt;br /&gt;&amp;#8211; Why he uses Python and the switch from Java. &lt;br /&gt;&amp;#8211; His core Python focus these days + cool side projects he&amp;#8217;s maintaining. &lt;br /&gt;&amp;#8211; How entrepreneurship is fundamentally different from software engineering. &lt;br /&gt;&amp;#8211; &lt;a href=&quot;https://www.linkedin.com/feed/update/urn:li:activity:6994728802186670080/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;His viral post&lt;/a&gt; on certificates vs the reality of looking things up as a programmer.&lt;br /&gt;&amp;#8211; Book tips (&lt;a href=&quot;https://pybitesbooks.com/books/620pAgAAQBAJ&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;The hard things about hard things&lt;/a&gt;, &lt;a href=&quot;https://pybitesbooks.com/books/_o0fonSV16cC&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;The startup of you&lt;/a&gt; and &lt;a href=&quot;https://pybitesbooks.com/books/pFoJCgAAQBAJ&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Grit&lt;/a&gt;).&lt;br /&gt;&amp;#8211; And of course the importance of &lt;em&gt;mindset&lt;/em&gt; as a developer (we cannot leave out the Julian question right?!)&lt;/p&gt;



&lt;p&gt;Enjoy this episode and&amp;nbsp;&lt;a href=&quot;https://www.linkedin.com/in/yujiantang/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;connect with Yujian on LinkedIn&lt;/a&gt;&amp;nbsp;or&amp;nbsp;&lt;a href=&quot;https://pybit.es/community/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;on our Slack&lt;/a&gt;.&lt;/p&gt;



&lt;p&gt;Other mentioned links:&lt;br /&gt;&amp;#8211;&amp;nbsp;&lt;a href=&quot;https://github.com/The-Text-API/pynlp-lib&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;His PyNLP-lib opensource project&lt;/a&gt;&lt;br /&gt;&amp;#8211;&amp;nbsp;&lt;a href=&quot;https://pythonalgos.com/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;His PythonAlgos blog&lt;/a&gt;&lt;br /&gt;&amp;#8211;&amp;nbsp;&lt;a href=&quot;https://www.thetextapi.com/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;The Text API&lt;/a&gt;&lt;/p&gt;</description>
	<pubDate>Tue, 15 Nov 2022 19:19:34 +0000</pubDate>
</item>
<item>
	<title>Kushal Das: Tor 0.4.7.11 is ready</title>
	<guid>https://kushaldas.in/posts/tor-0-4-7-11-is-ready.html</guid>
	<link>https://kushaldas.in/posts/tor-0-4-7-11-is-ready.html</link>
	<description>&lt;!--
.. title: Tor 0.4.7.11 is ready
.. slug: tor-0-4-7-11-is-ready
.. date: 2022-11-15T16:47:31+00:00
.. tags: Tor, Network, Security, Python, Fedora, CentOS, Almalinux, RPM
.. link:
.. description:
.. type: text
--&gt;
&lt;p&gt;&lt;img src=&quot;https://kushaldas.in/images/tor_logo.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Today I built and pushed the Tor RPM(s) for 0.4.7.11. Please
make sure that you upgrade your relays and bridges. I have the updated package for Fedora 37 too (which also released today).&lt;/p&gt;
&lt;p&gt;You can know more about the Tor's RPM respository at &lt;a href=&quot;https://support.torproject.org/rpm/&quot;&gt;https://support.torproject.org/rpm/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you have any queries, feel free to find us over #tor or #tor-relay channel on OFTC.&lt;/p&gt;</description>
	<pubDate>Tue, 15 Nov 2022 16:47:31 +0000</pubDate>
</item>
<item>
	<title>Real Python: Deploy a Django App With Gunicorn and Nginx</title>
	<guid>https://realpython.com/courses/django-app-with-gunicorn-nginx/</guid>
	<link>https://realpython.com/courses/django-app-with-gunicorn-nginx/</link>
	<description>&lt;p&gt;Taking a &lt;strong&gt;Django&lt;/strong&gt; app from development to production is a demanding but rewarding process. In this video course, you&amp;rsquo;ll go through that process step by step. You&amp;rsquo;ll start at square one with a no-frills Django application then add in &lt;strong&gt;Gunicorn&lt;/strong&gt;, &lt;strong&gt;Nginx&lt;/strong&gt;, and &lt;strong&gt;domain registration&lt;/strong&gt;. After working through this video course, you&amp;rsquo;ll be better equipped to take your Django app into production and serve it to the world.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In this video course, you&amp;rsquo;ll learn&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How you can take your Django app &lt;strong&gt;from development to production&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;How you can &lt;strong&gt;host your app&lt;/strong&gt; on a real-world public domain&lt;/li&gt;
&lt;li&gt;How to introduce &lt;strong&gt;Gunicorn&lt;/strong&gt; and &lt;strong&gt;Nginx&lt;/strong&gt; into the request and response chain&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To make the most out of this video course, you should have an introductory-level &lt;a href=&quot;https://realpython.com/learning-paths/python3-introduction/&quot;&gt;understanding of Python&lt;/a&gt;, &lt;a href=&quot;https://realpython.com/tutorials/django/&quot;&gt;Django&lt;/a&gt;, and the high-level mechanics of HTTP requests.&lt;/p&gt;
        &lt;hr /&gt;
        &lt;p&gt;&lt;em&gt;[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp;amp; sweet Python Trick delivered to your inbox every couple of days. &lt;a href=&quot;https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer&quot;&gt;&amp;gt;&amp;gt; Click here to learn more and see examples&lt;/a&gt; ]&lt;/em&gt;&lt;/p&gt;</description>
	<pubDate>Tue, 15 Nov 2022 14:00:00 +0000</pubDate>
</item>
<item>
	<title>Made With Mu: Announcing a new stable release: 1.2.0</title>
	<guid>https://madewith.mu/mu/users/2022/11/15/mu-1-2-0.html</guid>
	<link>https://madewith.mu/mu/users/2022/11/15/mu-1-2-0.html</link>
	<description>&lt;p&gt;Mu is a Pythonic beginner’s code editor created by volunteers in the community.&lt;/p&gt;

&lt;p&gt;It provides an easy answer to the question beginners always ask, “but how do I
start?”.&lt;/p&gt;

&lt;p&gt;Simple, &lt;a href=&quot;https://codewith.mu/en/download&quot;&gt;download Mu&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Today, we’re delighted to announce the next stable release of Mu: 1.2.0.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://madewith.mu/assets/snek.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This release introduces Snek mode, fixes some minor bugs, addresses some usability gremlins and adjusts some capabilities to make things tidier. Much of this work was done over the summer at the code-sprints at EuroPython 2022 in Dublin. Kudos and thanks to all the new contributors to Mu.&lt;/p&gt;

&lt;p&gt;What’s new?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Thanks to &lt;a href=&quot;https://github.com/keith-packard&quot;&gt;@keith-packard&lt;/a&gt; for Snek mode. &lt;a href=&quot;https://sneklang.org/&quot; rel=&quot;nofollow&quot;&gt;Snek&lt;/a&gt; is a   Python inspired language for processors too small even to run MicroPython.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tmontes&quot;&gt;@tmontes&lt;/a&gt; contributed changes so Mu builds to Linux AppImages (an easy way to   package application for Linux).&lt;/li&gt;
&lt;li&gt;Minor fixes by &lt;a href=&quot;https://github.com/stratakis&quot;&gt;@stratakis&lt;/a&gt; in the Russian translation.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/carlosperate&quot;&gt;@carlosperate&lt;/a&gt; fixed many minor glitches and gremlins.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/carlosperate&quot;&gt;@carlosperate&lt;/a&gt; was on fire with fixes needed to ensure Mu continues to work with very old versions of OSX (as used in many educational institutions).&lt;/li&gt;
&lt;li&gt;Again, thanks to &lt;a href=&quot;https://github.com/carlosperate&quot;&gt;@carlosperate&lt;/a&gt;, AppImage with Wayland no longer requires the setting  of an environment variable to make it work properly.&lt;/li&gt;
&lt;li&gt;The web mode includes simple and easy to use integration with beginner and education friendly web hosts, &lt;a href=&quot;https://pythonanywhere.com/&quot;&gt;PythonAnywhere&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/agdales&quot;&gt;@agdales&lt;/a&gt;, &lt;a href=&quot;https://github.com/Jeffrey04&quot;&gt;@Jeffrey04&lt;/a&gt;, &lt;a href=&quot;https://github.com/johannaengland&quot;&gt;@johannaengland&lt;/a&gt; and &lt;a href=&quot;https://github.com/AnjaVerboven&quot;&gt;@AnjaVerboven&lt;/a&gt; contributed new messages of the day as part of their onboarding at EuroPython.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tonybaloney&quot;&gt;@tonybaloney&lt;/a&gt; contributed several Windows based fixes and clean-ups.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/johannaengland&quot;&gt;@johannaengland&lt;/a&gt; and &lt;a href=&quot;https://github.com/prcutler&quot;&gt;@prcutler&lt;/a&gt; were on fire tidying up and fixing docs at  EuroPython.&lt;/li&gt;
&lt;li&gt;A bug was fixed in the web mode relating to the resolution and/or recreation of the assets directory (in which images, css and templates were to be found).&lt;/li&gt;
&lt;li&gt;Or friend at Adafruit, &lt;a href=&quot;https://github.com/tannewt&quot;&gt;@tannewt&lt;/a&gt; made the necessary changes so Mu handles OSC commands gracefully (see the &lt;a href=&quot;https://github.com/mu-editor/mu/pull/2326&quot;&gt;PR&lt;/a&gt; for more details).&lt;/li&gt;
&lt;li&gt;New contributor, &lt;a href=&quot;https://github.com/zigit&quot;&gt;@zigit&lt;/a&gt; ensured &quot;Unexpected Maker&quot; based ESP boards are correctly detected.&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href=&quot;https://github.com/Jayman2000&quot;&gt;@Jayman2000&lt;/a&gt;, error messages are correctly capitalized (or not) to avoid potential confusion.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;That's it, and a huge thanks to everyone who has contributed code,
documentation, bug reports, feedback and encouragement..!&lt;/p&gt;</description>
	<pubDate>Tue, 15 Nov 2022 10:30:00 +0000</pubDate>
</item>
<item>
	<title>Python Insider: Python 3.12.0 alpha 2 released</title>
	<guid>https://pythoninsider.blogspot.com/2022/11/python-3120-alpha-2-released.html</guid>
	<link>https://pythoninsider.blogspot.com/2022/11/python-3120-alpha-2-released.html</link>
	<description>&lt;p&gt;I'm pleased to announce the release of Python 3.12 alpha 2.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.python.org/downloads/release/python-3120a2/&quot;&gt;https://www.python.org/downloads/release/python-3120a2/&lt;/a&gt;&lt;/p&gt;&lt;div&gt;&lt;b&gt;This is an early developer preview of Python 3.12.&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;h1&gt;Major new features of the 3.12 series, compared to 3.11&lt;/h1&gt;&lt;div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Python 3.12 is still in development. This release, 3.12.0a2 is the second of seven planned alpha releases.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Alpha releases are intended to make it easier to test the current state of new features and bug fixes and to test the release process.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;During the alpha phase, features may be added up until the start of the beta phase (2023-05-08) and, if necessary, may be modified or deleted up until the release candidate phase (2023-07-31). Please keep in mind that this is a preview release and its use is &lt;b&gt;not &lt;/b&gt;recommended for production environments.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Many new features for Python 3.12 are still being planned and written. Among the new major new features and changes so far:&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;Even more improved error messages. More exceptions potentially caused by typos now make suggestions to the user.&lt;/li&gt;&lt;li&gt;Support for the Linux &lt;span&gt;perf&lt;/span&gt;&amp;nbsp;profiler to report Python function names in traces.&lt;/li&gt;&lt;li&gt;The deprecated &lt;span&gt;wstr&lt;/span&gt; and &lt;span&gt;wstr_length&lt;/span&gt; members of the C implementation of unicode objects were removed, per &lt;a href=&quot;https://peps.python.org/pep-0623/&quot;&gt;PEP 623&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;In the &lt;span&gt;unittest&lt;/span&gt; module, a number of long deprecated methods and classes were removed. (They had been deprecated since Python 3.1 or 3.2).&lt;/li&gt;&lt;li&gt;The deprecated &lt;span&gt;smtpd&lt;/span&gt; and &lt;span&gt;distutils&lt;/span&gt; modules have been removed (see &lt;a href=&quot;https://peps.python.org/pep-0594/&quot;&gt;PEP 594&lt;/a&gt; and &lt;a href=&quot;https://peps.python.org/pep-0632/&quot;&gt;PEP 632&lt;/a&gt;). The &lt;span&gt;setuptools&lt;/span&gt; package (installed by default in virtualenvs and many other places) continues to provide the &lt;span&gt;distutils&lt;/span&gt; module.&lt;/li&gt;&lt;li&gt;A number of other old, broken and deprecated functions, classes and methods have been removed.&lt;/li&gt;&lt;li&gt;&lt;span&gt;(Hey, &lt;b&gt;fellow core developer&lt;/b&gt;, if a feature you find important is missing from this list, &lt;a href=&quot;mailto:thomas@python.org&quot;&gt;let Thomas know&lt;/a&gt;.)&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;For more details on the changes in Python 3.12, see &lt;a href=&quot;https://docs.python.org/dev/whatsnew/3.12.html&quot;&gt;What's New In Python 3.12&lt;/a&gt;. The next pre-release of Python 3.12 will be 3.12.0a3, currently scheduled for 2022-12-05.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h1&gt;More resources&lt;/h1&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://docs.python.org/3.12/&quot;&gt;Online Documentation&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.python.org/dev/peps/pep-0693/&quot;&gt;PEP 693&lt;/a&gt;,&amp;nbsp;the 3.12 Release Schedule&lt;/li&gt;&lt;li&gt;Report bugs at &lt;a href=&quot;https://github.com/python/cpython/issues&quot;&gt;https://github.com/python/cpython/issues&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.python.org/psf/donations/&quot;&gt;Help fund Python and its community&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;h1&gt;&lt;br /&gt;&lt;/h1&gt;&lt;h1&gt;And now for something completely different&lt;/h1&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;blockquote&gt;&lt;div&gt;&lt;div&gt;&lt;span&gt;Life, believe, is not a dream&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;So dark as sages say;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;Oft a little morning rain&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;Foretells a pleasant day.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;Sometimes there are clouds of gloom,&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;But these are transient all;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;If the shower will make the roses bloom,&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;O why lament its fall?&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;Rapidly, merrily,&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;Life's sunny hours flit by,&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;Gratefully, cheerily,&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;Enjoy them as they fly!&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;What though Death at times steps in&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;And calls our Best away?&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;What though sorrow seems to win,&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;O'er hope, a heavy sway?&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;Yet hope again elastic springs,&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;Unconquered, though she fell;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;Still buoyant are her golden wings,&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;Still strong to bear us well.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;Manfully, fearlessly,&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;The day of trial bear,&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;For gloriously, victoriously,&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;Can courage quell despair!&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;div&gt;&lt;i&gt;Life&lt;/i&gt;, by Charlotte Brontë, from &lt;i&gt;Poems by Currer, Ellis, and Acton Bell&lt;/i&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Charlotte wrote about the publishing under pseudonyms by her and her sisters, Emily and Anne, in a preface to Emily's &lt;i&gt;Wuthering Heights&lt;/i&gt;:&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;&lt;div&gt;&lt;div&gt;Averse to personal publicity, we veiled our own names under those of Currer, Ellis and Acton Bell; the ambiguous choice being dictated by a sort of conscientious scruple at assuming Christian names positively masculine, while we did not like to declare ourselves women, because – without at that time suspecting that our mode of writing and thinking was not what is called &quot;feminine&quot; – we had a vague impression that authoresses are liable to be looked on with prejudice; we had noticed how critics sometimes use for their chastisement the weapon of personality, and for their reward, a flattery, which is not true praise.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;h1&gt;&lt;br /&gt;&lt;/h1&gt;&lt;h1&gt;Enjoy the new releases&lt;/h1&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Thanks to all of the many volunteers who help make Python Development and these releases possible! Please consider supporting our efforts by volunteering yourself or through organization contributions to the Python Software Foundation.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;a href=&quot;https://www.python.org/psf/&quot;&gt;https://www.python.org/psf/&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Your release team,&lt;/div&gt;&lt;div&gt;Thomas Wouters&lt;/div&gt;&lt;div&gt;Ned Deily&lt;/div&gt;&lt;div&gt;Steve Dower&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 15 Nov 2022 08:06:31 +0000</pubDate>
</item>
<item>
	<title>Talk Python to Me: #390: Mastodon for Python Devs</title>
	<guid>https://talkpython.fm/episodes/show/390/mastodon-for-python-devs</guid>
	<link>https://talkpython.fm/episodes/show/390/mastodon-for-python-devs</link>
	<description>Wondering what Mastodon is all about? More importantly, what does it offer Python developers and other open source folks compared to Twitter? There is a huge amount of interest in the tech community about what's happening at Twitter and whether they should expand to or even move to a new location. So I decided to put together a set of experienced Python developers who have been Mastodon inhabitants for a long time to discuss what this unexpected shift means for one of our important online watering holes.  
&amp;lt;br/&amp;gt;

&amp;lt;br/&amp;gt;
On this episode you'll meet Gina Häußge, Simon Willison, and Juan Luis Cano Rodríguez. We're going to have a great time talking about the technology and the culture of Mastodon from this Python perspective.&amp;lt;br/&amp;gt;
&amp;lt;br/&amp;gt;
&amp;lt;strong&amp;gt;Links from the show&amp;lt;/strong&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;br/&amp;gt;
&amp;lt;div&amp;gt;&amp;lt;b&amp;gt;Gina on Mastodon&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://chaos.social/@foosel&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;chaos.social/@foosel&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;Juan on Mastodon&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://social.juanlu.space/@astrojuanlu&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;social.juanlu.space/@astrojuanlu&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;Simon on Mastodon&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://fedi.simonwillison.net/@simon&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;simonwillison.net/@simon&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;Carol on Mastodon&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://hachyderm.io/@willingc&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;@willingc@hachyderm.io&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;Michael on Mastodon&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://fosstodon.org/@mkennedy&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;fosstodon.org/@mkennedy&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;Talk Python on Mastodon&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://fosstodon.org/@talkpython&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;fosstodon.org/@talkpython&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;Mastodon&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://joinmastodon.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;joinmastodon.org&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;Fosstodon&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://fosstodon.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;fosstodon.org&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;Mastodon is just blogs article&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://simonwillison.net/2022/Nov/8/mastodon-is-just-blogs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;simonwillison.net&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;C-Suite Folks Resign at Twitter&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://twitter.com/CaseyNewton/status/1590724257608134657&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;twitter.com&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;The Importance of Choosing the Correct Mastodon Instance&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://carlchenet.com/the-importance-of-choosing-the-correct-mastodon-instance/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;carlchenet.com&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;Wizard to choose your instance&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://instances.social&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;instances.social&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;Here’s how a Twitter engineer says it will break in the coming weeks&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://www.technologyreview.com/2022/11/08/1062886/heres-how-a-twitter-engineer-says-it-will-break-in-the-coming-weeks/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;technologyreview.com&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;Dealing with unwanted content&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://docs.joinmastodon.org/user/moderating/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;docs.joinmastodon.org&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;Twitter poll on moving to Mastodon&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://twitter.com/mkennedy/status/1590783881187577857&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;twitter.com&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;Toot package&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://pypi.org/project/toot/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;pypi.org&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;Takahe server&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://github.com/andrewgodwin/takahe&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;github.com&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;Validating your Github account on your Mastodon profile&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://mastodon.social/@shanselman/109317379036473093&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;mastodon.social&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;Twitter’s potential collapse could wipe out vast records of recent human history&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://www.technologyreview.com/2022/11/11/1063162/twitters-imminent-collapse-could-wipe-out-vast-records-of-recent-human-history/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;technologyreview.com&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;Simon's Streaming API&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://gist.github.com/simonw/bac2bfb7973832d97d7b023898eae885&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;gist.github.com&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;Mastodon 4.0 is out (day after recording)&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://mastodon.social/@Mastodon/109344018834782353&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;mastodon.social&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;Watch this episode on YouTube&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://www.youtube.com/watch?v=LhBfMoR3bvI&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;youtube.com&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;Episode transcripts&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://talkpython.fm/episodes/transcript/390/mastodon-for-python-devs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;talkpython.fm&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;--- Stay in touch with us ---&amp;lt;/b&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;Subscribe to us on YouTube&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://talkpython.fm/youtube&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;youtube.com&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;Follow Talk Python on Mastodon&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://fosstodon.org/web/@talkpython&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;&amp;lt;i class=&quot;fa-brands fa-mastodon&quot;&amp;gt;&amp;lt;/i&amp;gt;talkpython&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;Follow Michael on Mastodon&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://fosstodon.org/web/@mkennedy&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;&amp;lt;i class=&quot;fa-brands fa-mastodon&quot;&amp;gt;&amp;lt;/i&amp;gt;mkennedy&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;strong&amp;gt;Sponsors&amp;lt;/strong&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;a href='https://talkpython.fm/awsinsiders'&amp;gt;AWS Insiders&amp;lt;/a&amp;gt;&amp;lt;br&amp;gt;
&amp;lt;a href='https://talkpython.fm/foundershub'&amp;gt;Microsoft&amp;lt;/a&amp;gt;&amp;lt;br&amp;gt;
&amp;lt;a href='https://talkpython.fm/assemblyai'&amp;gt;AssemblyAI&amp;lt;/a&amp;gt;&amp;lt;br&amp;gt;
&amp;lt;a href='https://talkpython.fm/training'&amp;gt;Talk Python Training&amp;lt;/a&amp;gt;</description>
	<pubDate>Tue, 15 Nov 2022 08:00:00 +0000</pubDate>
</item>
<item>
	<title>Python Bytes: #310 Calling All Tools for Readmes</title>
	<guid>https://pythonbytes.fm/episodes/show/310/calling-all-tools-for-readmes</guid>
	<link>https://pythonbytes.fm/episodes/show/310/calling-all-tools-for-readmes</link>
	<description>&amp;lt;a href='https://www.youtube.com/watch?v=jH9scQESXJY' style='font-weight: bold;'&amp;gt;Watch on YouTube&amp;lt;/a&amp;gt;&amp;lt;br&amp;gt;
&amp;lt;br&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;About the show&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;Sponsored by &amp;lt;a href=&quot;http://pythonbytes.fm/foundershub2022&quot;&amp;gt;&amp;lt;strong&amp;gt;Microsoft for Startups Founders Hub&amp;lt;/strong&amp;gt;&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;Special guest: &amp;lt;/p&amp;gt;

&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;&amp;lt;a href=&quot;https://amhopkins.com/&quot;&amp;gt;Adam Hopkins&amp;lt;/a&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;&amp;lt;a href=&quot;https://sanicbook.com/&quot;&amp;gt;Python Web Development with Sanic&amp;lt;/a&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Brian #1:&amp;lt;/strong&amp;gt; &amp;lt;a href=&quot;https://pybit.es/articles/tips-for-clean-code-in-python/&quot;&amp;gt;&amp;lt;strong&amp;gt;Tips for clean code in Python&amp;lt;/strong&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Bob Belderbos&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Generally some great tips to think about to keep code maintainable:
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Smaller units. Break things up into single responsibility. SRP: Single Responsibility Principle&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Move magic numbers into constants or parameters.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Avoid global scope. (even though it’s not really global)&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Use linters and auto-formatters.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Use very narrow try/except blocks.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Idiomatic Python. (Although I agree, this is a weird one as it’s hard for new people to follow).&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Pay attention to data structure choice and learn to utilize standard structures and those in collections.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Use the standard libary.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Use mappings&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Flat is better than nested.&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;But I’m gonna focus on the “smaller units” because it applies to modules as well.
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Try to keep modules organized such that you can keep relevant and related code concepts in your head.&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Michael #2:&amp;lt;/strong&amp;gt; &amp;lt;strong&amp;gt;Mastodon is picking up speed&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&quot;https://fosstodon.org/web/@pythonbytes&quot;&amp;gt;&amp;lt;strong&amp;gt;@pythonbytes@fosstodon.org&amp;lt;/strong&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&quot;https://fosstodon.org/@mkennedy&quot;&amp;gt;&amp;lt;strong&amp;gt;@mkennedy@fosstodon.org&amp;lt;/strong&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&quot;https://fosstodon.org/@brianokken&quot;&amp;gt;&amp;lt;strong&amp;gt;@brianokken@fosstodon.org&amp;lt;/strong&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;&amp;lt;a href=&quot;https://fosstodon.org/@admhpkns&quot;&amp;gt;@admhpkns@fosstodon.org&amp;lt;/a&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;I’m calling this a “Mastodon First” strategy rather than “Let’s burn down Twitter and scatter”&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Just &amp;lt;a href=&quot;https://talkpython.fm/episodes/show/390/mastodon-for-python-devs&quot;&amp;gt;&amp;lt;strong&amp;gt;did a Talk Python&amp;lt;/strong&amp;gt;&amp;lt;/a&amp;gt; about it&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Money in mouth: I became &amp;lt;a href=&quot;https://www.patreon.com/fosstodon&quot;&amp;gt;&amp;lt;strong&amp;gt;a patreon of Fosstodon&amp;lt;/strong&amp;gt;&amp;lt;/a&amp;gt; and &amp;lt;a href=&quot;https://patreon.com/mastodon&quot;&amp;gt;&amp;lt;strong&amp;gt;Mastodon’s company&amp;lt;/strong&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Mastodon is open source, &amp;lt;a href=&quot;https://github.com/mastodon/mastodon&quot;&amp;gt;&amp;lt;strong&amp;gt;find it here&amp;lt;/strong&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&quot;https://www.technologyreview.com/2022/11/11/1063162/twitters-imminent-collapse-could-wipe-out-vast-records-of-recent-human-history/&quot;&amp;gt;&amp;lt;strong&amp;gt;Twitter’s potential collapse could wipe out vast records of recent human history&amp;lt;/strong&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Python’s API for Mastodon: &amp;lt;a href=&quot;https://pypi.org/project/toot/&quot;&amp;gt;&amp;lt;strong&amp;gt;toot&amp;lt;/strong&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Download a proper Twitter archive with &amp;lt;a href=&quot;https://mathstodon.xyz/@timhutton/109316834651128246&quot;&amp;gt;&amp;lt;strong&amp;gt;this Python script&amp;lt;/strong&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;&amp;lt;a href=&quot;https://fosstodon.org/@mkennedy/109334951352292627&quot;&amp;gt;Integrated the API into stream deck&amp;lt;/a&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;You can install it as a PWA:
&amp;lt;img src=&quot;https://python-bytes-static.nyc3.digitaloceanspaces.com/install-mastodon.png&quot; alt=&quot;&quot; /&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Adam&amp;lt;/strong&amp;gt; &amp;lt;strong&amp;gt;#3:&amp;lt;/strong&amp;gt; &amp;lt;strong&amp;gt;Correction to Sanic Worker Manager in v22.9&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&quot;https://pythonbytes.fm/episodes/show/308/conference-season-is-heating-up&quot;&amp;gt;&amp;lt;strong&amp;gt;Episode #308&amp;lt;/strong&amp;gt;&amp;lt;/a&amp;gt; covered a recent article published on a new feature in Sanic v22.9 &amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Blog article: &amp;lt;strong&amp;gt;&amp;lt;a href=&quot;https://amhopkins.com/posts/background-job-worker.html&quot;&amp;gt;Pushing work to the background of your Sanic app&amp;lt;/a&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;The segment focused on the celery-like job queue in Sanic&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Clarification:
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Goal of the feature is to bring a consistent development experience from dev thru prod&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Enables usage of multiprocessing-safe shared objects&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Simple pattern for managing multiple long-running processes&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;&amp;lt;a href=&quot;https://sanic.dev/en/guide/release-notes/v22.9.html&quot;&amp;gt;Release notes for Sanic v22.9&amp;lt;/a&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;&amp;lt;a href=&quot;https://sanic.dev/en/guide/deployment/manager.html&quot;&amp;gt;Sanic documentation on the Worker Manager&amp;lt;/a&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Brian #4:&amp;lt;/strong&amp;gt; &amp;lt;strong&amp;gt;Some FastAPI news, and some great READMEs.&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&quot;https://fastapi.tiangolo.com/release-notes/#0870&quot;&amp;gt;FastAPI 0.87.0&amp;lt;/a&amp;gt; has some interesting notes
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Upgraded &amp;lt;a href=&quot;https://github.com/encode/starlette/releases/tag/0.21.0&quot;&amp;gt;Starlette&amp;lt;/a&amp;gt;, which includes TestClient based on HTTPX instead of Requests&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Since that might break some peoples use of TestClient, someone named Kludex built &amp;lt;a href=&quot;https://github.com/Kludex/bump-testclient&quot;&amp;gt;bump-testclient&amp;lt;/a&amp;gt; to help automatically convert test code to the new interface. That’s so cool!&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Use &amp;lt;a href=&quot;https://pypi.org/project/ruff/&quot;&amp;gt;Ruff&amp;lt;/a&amp;gt; for linting&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Add a &amp;lt;a href=&quot;https://fastapi.tiangolo.com/help-fastapi/#help-maintain-fastapi&quot;&amp;gt;Help Maintain FastAPI&amp;lt;/a&amp;gt; section to the docs that emphasizes that it’s super helpful to:
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Help others with issues&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Review PRs&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Both of those sections have other expanded sections to describe what that means.&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;The FastAPI commitment to great documentation is amazing and worth emulating.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;It also has a really good &amp;lt;a href=&quot;https://github.com/tiangolo/fastapi&quot;&amp;gt;README&amp;lt;/a&amp;gt;.
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Interesting sponsors section. Cool way for a popular project to get maintenance funding.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Testimonials. It’s like a sales landing page, which really, a README kinda is.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Other common good practices and cool items
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Images&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Some use of collapsable sections.&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Other notable READMEs
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&quot;https://pypi.org/project/pytest/&quot;&amp;gt;pytest&amp;lt;/a&amp;gt; 
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;short example right away to show how simple it can be to use.&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&quot;https://github.com/Textualize/textual&quot;&amp;gt;textual&amp;lt;/a&amp;gt; and &amp;lt;a href=&quot;https://github.com/Textualize/rich&quot;&amp;gt;rich&amp;lt;/a&amp;gt; 
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;great use of images and short examples&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;highlighting often missed features, such as pretty and inspect&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Utilizing expandable/collapsable sections for longer examples&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&quot;https://pypi.org/project/httpx/&quot;&amp;gt;httpx&amp;lt;/a&amp;gt; 
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;like pytest, shows a small example quickly, &amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;redirects many other sections to more thorough docs.&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Michael #5:&amp;lt;/strong&amp;gt; &amp;lt;a href=&quot;https://twitter.com/btskinn/status/1587987145444163585?s=12&amp;amp;amp;t=tE1LoCVynDVdhocfaMhNHw&quot;&amp;gt;&amp;lt;strong&amp;gt;Closevember&amp;lt;/strong&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;An annual event focused on sustainable open source development practices and maintainer well-being.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Let's support open source maintainers by helping them close issues and pull requests throughout November.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Over at &amp;lt;a href=&quot;https://closember.org&quot;&amp;gt;&amp;lt;strong&amp;gt;closember.org&amp;lt;/strong&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;em&amp;gt;Contributing&amp;lt;/em&amp;gt; to a project carries a number of responsibilities, in order to make it as easy as possible for a project to receive that contribution.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;For Maintainers: How to Get Ready&amp;lt;/strong&amp;gt; (&amp;lt;a href=&quot;https://closember.org&quot;&amp;gt;&amp;lt;strong&amp;gt;see site&amp;lt;/strong&amp;gt;&amp;lt;/a&amp;gt;)
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;If you only want assistance with closing some issues and PRs, then tag your repo with &amp;lt;code&amp;gt;closember&amp;lt;/code&amp;gt; and you’re all set.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;One thing that we often find helpful is to declutter our physical and digital environment: tidying our desks a bit, decluttering our computers’ desktops, unsubscribing from some email lists ... that sort of thing.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;I did this this month actually. Spent 6 hours completely rebuilding my desk to have zero wires and look tidy and clean (hint: 3m of industrial velcro and things stuck upside down) and formatted my computer to a fresh OS after two years.&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;For the Community: How to Participate&amp;lt;/strong&amp;gt; (&amp;lt;a href=&quot;https://closember.org&quot;&amp;gt;&amp;lt;strong&amp;gt;see site&amp;lt;/strong&amp;gt;&amp;lt;/a&amp;gt;)
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;If you’ve never used GitHub before, your first step is going to be &amp;lt;a href=&quot;https://github.com/signup&quot;&amp;gt;signing up for a free account&amp;lt;/a&amp;gt;.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Also, if you’re super new to git: &amp;lt;a href=&quot;https://talkpython.fm/git&quot;&amp;gt;&amp;lt;strong&amp;gt;talkpython.fm/git&amp;lt;/strong&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;If you’ve opened issues or PRs on projects in the past, you can start by taking a look at &amp;lt;a href=&quot;https://github.com/issues&quot;&amp;gt;your own GitHub issues&amp;lt;/a&amp;gt; and &amp;lt;a href=&quot;https://github.com/pulls&quot;&amp;gt;your own PRs&amp;lt;/a&amp;gt; to see if any of them are outdated or have already been fixed—if so, close them! &amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;After that, start browsing projects: take a look at your favorite projects and see if they’ve been tagged with &amp;lt;code&amp;gt;closember&amp;lt;/code&amp;gt;, or browse the &amp;lt;a href=&quot;https://github.com/topics/closember&quot;&amp;gt;list of&amp;lt;/a&amp;gt; &amp;lt;a href=&quot;https://github.com/topics/closember&quot;&amp;gt;closember&amp;lt;/a&amp;gt; &amp;lt;a href=&quot;https://github.com/topics/closember&quot;&amp;gt;projects&amp;lt;/a&amp;gt;.&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Check out the close boards (on the site)&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Adam&amp;lt;/strong&amp;gt; &amp;lt;strong&amp;gt;#6:&amp;lt;/strong&amp;gt; &amp;lt;strong&amp;gt;Super simple “Cache with async power” using Cashews&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Recently popped up in my &amp;lt;a href=&quot;https://github.com/explore&quot;&amp;gt;GitHub Explore&amp;lt;/a&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&quot;https://github.com/Krukov/cashews&quot;&amp;gt;Cashews:&amp;lt;/a&amp;gt; &amp;lt;em&amp;gt;Async cache framework with simple API to build fast and reliable applications&amp;lt;/em&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Super simple out-of-the-box API
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;supports in memory, Redis, DiskCache (local sqlite)&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;one-line setup then implemented as a decorator&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Human-friendly TTL values: example “3h”&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Client-side caching - For example, if you are using Redis backend you do not need to make a network call on every cache request&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Strategies for common cache issues
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;cache hits, early recalculation, soft TTL, resource locking, &amp;lt;strong&amp;gt;rate limiting!&amp;lt;/strong&amp;gt;, circuit breaker&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Has its own interface for middleware&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Extras&amp;lt;/strong&amp;gt; &amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;Michael:&amp;lt;/p&amp;gt;

&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&quot;https://mas.to/@davidism/109342591948410223&quot;&amp;gt;Take the PSF survey&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;

&amp;lt;p&amp;gt;Adam: &amp;lt;/p&amp;gt;

&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Voting season is upon us: &amp;lt;strong&amp;gt;Python Steering Council &amp;lt;a href=&quot;https://discuss.python.org/t/steering-council-nominations-are-now-open-2023-term/21062/2&quot;&amp;gt;nominations are open&amp;lt;/a&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Joke:&amp;lt;/strong&amp;gt; &amp;lt;a href=&quot;https://fosstodon.org/web/@mav@hackers.town/109315711016629418&quot;&amp;gt;&amp;lt;strong&amp;gt;JavaScript has been Banned from Twitter&amp;lt;/strong&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;</description>
	<pubDate>Tue, 15 Nov 2022 08:00:00 +0000</pubDate>
</item>
<item>
	<title>Paolo Melchiorre: Intervista Pythonista - Ep 31</title>
	<guid>https://www.paulox.net/2022/11/15/intervista-pythonista-31/</guid>
	<link>https://www.paulox.net/2022/11/15/intervista-pythonista-31/</link>
	<description>&lt;p&gt;Python Milano presents Intervista Pythonista. We give a voice to Italian Pythonistas and get to know them closely with short interviews. Presented by Marco Santoni and Cesare&amp;nbsp;Placanica.&lt;/p&gt;</description>
	<pubDate>Mon, 14 Nov 2022 23:00:00 +0000</pubDate>
</item>
<item>
	<title>Luke Plant: Tools for rewriting Python code</title>
	<guid>https://lukeplant.me.uk/blog/posts/tools-for-rewriting-python-code/</guid>
	<link>https://lukeplant.me.uk/blog/posts/tools-for-rewriting-python-code/</link>
	<description>&lt;p&gt;When writing (or reviewing) code, you have better things to do than concern
yourself with low-level details about coding style or other changes that are
essentially mechanical in nature. Thankfully, the tooling ecosystem for doing
these kind of boring changes to Python code has become much stronger in the past
few years.&lt;/p&gt;
&lt;p&gt;Below is my collection, with some alternatives and recommendations. These all go
beyond being &lt;a class=&quot;reference external&quot; href=&quot;https://en.wikipedia.org/wiki/Lint_(software)&quot;&gt;linters&lt;/a&gt;, which
only report problems, to being able to fix your code automatically. Most of
these work really well with tools like &lt;a class=&quot;reference external&quot; href=&quot;https://pre-commit.com/&quot;&gt;pre-commit&lt;/a&gt;
so that by the time you come to code review, all the boring stuff is already
fixed.&lt;/p&gt;

&lt;h2&gt;Formatting and coding style&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psf/black&quot;&gt;Black&lt;/a&gt; is probably the most populate Python
code formatter today.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/google/yapf&quot;&gt;YAPF&lt;/a&gt; is another with a similar ethos to
Black, but less popular AFAIK, and I don’t use it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/hhatto/autopep8&quot;&gt;autopep8&lt;/a&gt; doesn’t go as far as Black or
YAPF - it fixes &lt;a class=&quot;reference external&quot; href=&quot;https://pep8.org/&quot;&gt;PEP8&lt;/a&gt; violations but otherwise leaves
your code alone. This is useful for cases where people aren’t quite ready for
Black yet.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/PyCQA/isort&quot;&gt;isort&lt;/a&gt; and &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/asottile/reorder_python_imports&quot;&gt;reorder_python_imports&lt;/a&gt; will sort your Python
imports for you.&lt;/p&gt;
&lt;p&gt;I personally prefer the former, isort. &lt;code class=&quot;docutils literal&quot;&gt;reorder_python_imports&lt;/code&gt; has a much
more verbose style, resulting in many lines for imports. This is useful for
reducing merge conflicts, but with the other tools listed here, I don’t find
those much of a problem — if you aren’t sure which imports are still needed,
include them all and let isort remove the duplicates, and autoflake remove the
unneeded ones.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/spookylukey/table-format&quot;&gt;table-format&lt;/a&gt; makes it easy
to have aligned columns in your Python source code.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Upgrades&lt;/h2&gt;
&lt;p&gt;The following tools will do upgrades on your code:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/asottile/pyupgrade&quot;&gt;pyupgrade&lt;/a&gt; — moves code to the most modern Python idioms.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/PyCQA/isort&quot;&gt;flynt&lt;/a&gt; — rewrites older string formatting
code using &lt;code class=&quot;docutils literal&quot;&gt;%&lt;/code&gt; to use &lt;code class=&quot;docutils literal&quot;&gt;.format&lt;/code&gt; and/or f-strings where possible.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/adamchainz/django-upgrade&quot;&gt;django-upgrade&lt;/a&gt; and
&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/browniebroke/django-codemod&quot;&gt;django-codemod&lt;/a&gt; — include
various fixes for breaking changes or new features in Django.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/asottile/setup-py-upgrade&quot;&gt;setup-py-upgrade&lt;/a&gt; — upgrades
your &lt;code class=&quot;docutils literal&quot;&gt;setup.py&lt;/code&gt; to a &lt;code class=&quot;docutils literal&quot;&gt;setup.cfg&lt;/code&gt; file.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Type hints&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/instagram/MonkeyType&quot;&gt;Monkeytype&lt;/a&gt; and &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/dropbox/pyannotate&quot;&gt;pyannotate&lt;/a&gt; — add type hints based on
instrumented test suite runs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/google/pytype&quot;&gt;pytype&lt;/a&gt; — this does type checking and
produces &lt;code class=&quot;docutils literal&quot;&gt;.pyi&lt;/code&gt; files based on inference, and also includes a &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;merge-pyi&lt;/span&gt;&lt;/code&gt;
tool that can merge &lt;code class=&quot;docutils literal&quot;&gt;.pyi&lt;/code&gt; files into &lt;code class=&quot;docutils literal&quot;&gt;.py&lt;/code&gt; files.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/JelleZijlstra/autotyping&quot;&gt;autotyping&lt;/a&gt; — a tool to add
type hints for various cases where this can be done automatically.&lt;/p&gt;
&lt;p&gt;(As a comment, I’m not wild about some of these automated changes. Annotating
&lt;code class=&quot;docutils literal&quot;&gt;__str__&lt;/code&gt; with &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;-&amp;gt;&lt;/span&gt; str&lt;/code&gt;, when &lt;a class=&quot;reference external&quot; href=&quot;https://docs.python.org/3/reference/datamodel.html#object.__str__&quot;&gt;it is required to be a str&lt;/a&gt;, seems
like a failure of our static typing tools, and it adds a lot of noise.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/hauntsaninja/no_implicit_optional&quot;&gt;no_implicit_optional&lt;/a&gt;
— a small tool to make some type hints more compliant with &lt;a class=&quot;reference external&quot; href=&quot;https://peps.python.org/pep-0484/&quot;&gt;PEP 484&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Refactoring&lt;/h2&gt;
&lt;p&gt;Many IDEs/editors provide a bunch of tools to rewrite Python code (for example
doing renames), often by integrating with &lt;a class=&quot;reference external&quot; href=&quot;https://en.wikipedia.org/wiki/Language_Server_Protocol&quot;&gt;language servers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In VSCode, the default is &lt;a class=&quot;reference external&quot; href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance&quot;&gt;Pylance&lt;/a&gt;
which is proprietary and can only be used with VSCode. However, &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/microsoft/pyright&quot;&gt;pyright&lt;/a&gt; powers most of its functionality, and
is Open Source. As well as being a command line static type checker, it also
functions as a language server, and it’s the one I use from Emacs at the moment.&lt;/p&gt;
&lt;p&gt;One of the issues I find is that these is that they can be hard to use from the
command line, to be able to do more automated refactoring — in fact I haven’t
found a good way to do so, other than scripting things using &lt;a class=&quot;reference external&quot; href=&quot;https://en.wikipedia.org/wiki/Emacs_Lisp&quot;&gt;elisp&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So here are some other tools that are designed for more stand-alone use and have
some refactoring features:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python-rope/rope&quot;&gt;rope&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/davidhalter/jedi/&quot;&gt;jedi&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Other&lt;/h2&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/PyCQA/autoflake&quot;&gt;autoflake&lt;/a&gt; — remove unused imports.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/Instagram/Fixit&quot;&gt;Fixit&lt;/a&gt; — custom linting rules with automatic fixes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/Zac-HD/shed&quot;&gt;shed&lt;/a&gt; — bundles together a few of the above.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Write your own&lt;/h2&gt;
&lt;p&gt;Finally, there are great libraries like &lt;a class=&quot;reference external&quot; href=&quot;https://libcst.readthedocs.io/en/latest/index.html&quot;&gt;libCST&lt;/a&gt; that will help you to
manipulate Python code but without losing comments etc., so that writing your
own tool to do this is no longer a massive task.&lt;/p&gt;
&lt;p&gt;Also looking for packages that depend on LibCST, &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/Instagram/LibCST/network/dependents?dependent_type=PACKAGE&quot;&gt;on GitHub&lt;/a&gt;
or on &lt;a class=&quot;reference external&quot; href=&quot;https://libraries.io/pypi/libcst/dependents&quot;&gt;libraries.io&lt;/a&gt;, is a great
way to find more tools like this.&lt;/p&gt;
&lt;p&gt;Have fun writing code to fix your code!&lt;/p&gt;</description>
	<pubDate>Mon, 14 Nov 2022 16:07:02 +0000</pubDate>
</item>
<item>
	<title>Python Morsels: Python's ternary operator</title>
	<guid>https://www.pythonmorsels.com/ternary-operator/</guid>
	<link>https://www.pythonmorsels.com/ternary-operator/</link>
	<description>&lt;p&gt;Python doesn't have the traditional ternary operator that most programming languages do. Instead we have &quot;conditional expressions&quot;.&lt;/p&gt;


&lt;div&gt;
  
    &lt;img width=&quot;480&quot; height=&quot;270&quot; src=&quot;https://i.vimeocdn.com/filter/overlay?src0=https%3A%2F%2Fi.vimeocdn.com%2Fvideo%2F1511959578-e8432b619f1a9ad1e15eca2ad3baeb3ca8332810a7c76a613e2dcfe3dfae3341-d_1920x1080&amp;src1=http%3A%2F%2Ff.vimeocdn.com%2Fp%2Fimages%2Fcrawler_play.png&quot; /&gt;
  
  &lt;p&gt;
  &lt;strong&gt;Table of contents&lt;/strong&gt;
  &lt;ol&gt;
  
  &lt;li&gt;&lt;a href=&quot;https://www.pythonmorsels.com/ternary-operator/#python-doesnt-have-typical-ternary-operators&quot; target=&quot;_blank&quot;&gt;Python doesn't have typical ternary operators&lt;/a&gt;&lt;/li&gt;
  
  &lt;li&gt;&lt;a href=&quot;https://www.pythonmorsels.com/ternary-operator/#pythons-conditional-expressions-aka-inline-if&quot; target=&quot;_blank&quot;&gt;Python's conditional expressions (a.k.a. inline &lt;code&gt;if&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt;
  
  &lt;li&gt;&lt;a href=&quot;https://www.pythonmorsels.com/ternary-operator/#readability-of-conditional-expressions&quot; target=&quot;_blank&quot;&gt;Readability of conditional expressions&lt;/a&gt;&lt;/li&gt;
  
  &lt;li&gt;&lt;a href=&quot;https://www.pythonmorsels.com/ternary-operator/#pythons-ternary-equivalent-is-inside-out&quot; target=&quot;_blank&quot;&gt;Python's ternary-equivalent is inside-out&lt;/a&gt;&lt;/li&gt;
  
  &lt;/ol&gt;
  &lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
  
    &lt;h2&gt;Python doesn't have typical ternary operators&lt;/h2&gt;
    
      
        &lt;p&gt;Here we have an &lt;code&gt;if&lt;/code&gt;-&lt;code&gt;else&lt;/code&gt; statement:&lt;/p&gt;

      
        &lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;noun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;item&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;noun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;items&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


      
        &lt;p&gt;Many programming languages allow you to take code like this, that &lt;strong&gt;assigns a variable to one of two values based on a condition&lt;/strong&gt;, and turn that into a single line of code:&lt;/p&gt;

      
        &lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;noun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;item&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;items&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


      
        &lt;p&gt;That strange &lt;code&gt;?&lt;/code&gt;...&lt;code&gt;:&lt;/code&gt; syntax is often called a &lt;strong&gt;ternary operator&lt;/strong&gt;.&lt;/p&gt;

      
        &lt;p&gt;Python doesn't support that syntax: that isn't valid Python code.
Instead, we have something called &lt;strong&gt;a conditional expression&lt;/strong&gt;.&lt;/p&gt;

      
    
  
    &lt;h2&gt;Python's conditional expressions (a.k.a. inline &lt;code&gt;if&lt;/code&gt;)&lt;/h2&gt;
    
      &lt;p&gt;Python's &lt;strong&gt;conditional expression&lt;/strong&gt; looks like …&lt;/p&gt;
    
  
&lt;/div&gt;
&lt;h3&gt;&lt;a href=&quot;https://www.pythonmorsels.com/ternary-operator/&quot; target=&quot;_blank&quot;&gt;Read the full article: https://www.pythonmorsels.com/ternary-operator/&lt;/a&gt;&lt;/h3&gt;</description>
	<pubDate>Mon, 14 Nov 2022 16:00:00 +0000</pubDate>
</item>
<item>
	<title>Real Python: Python REST APIs With Flask, Connexion, and SQLAlchemy – Part 1</title>
	<guid>https://realpython.com/flask-connexion-rest-api/</guid>
	<link>https://realpython.com/flask-connexion-rest-api/</link>
	<description>&lt;div&gt;&lt;p&gt;Most modern web applications are powered by a &lt;strong&gt;REST API&lt;/strong&gt; under the hood. That way, developers can separate the front-end code from the back-end logic, and users can interact with the interface dynamically. In this three-part tutorial series, you’ll build a REST API with the &lt;strong&gt;Flask web framework&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You’ll create a foundation with a basic Flask project then add endpoints and connect them to a &lt;strong&gt;SQLite database&lt;/strong&gt;. You’ll test your API with &lt;strong&gt;Swagger UI API documentation&lt;/strong&gt; that you’ll build along the way.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In the first part of this tutorial series, you’ll learn how to:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Build a base &lt;strong&gt;Flask&lt;/strong&gt; project with a &lt;strong&gt;REST API&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Handle &lt;strong&gt;HTTP requests&lt;/strong&gt; with &lt;strong&gt;Connexion&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Define &lt;strong&gt;API endpoints&lt;/strong&gt; using the &lt;strong&gt;OpenAPI&lt;/strong&gt; specification&lt;/li&gt;
&lt;li&gt;Interact with your &lt;strong&gt;API&lt;/strong&gt; to manage data&lt;/li&gt;
&lt;li&gt;Build &lt;strong&gt;API documentation&lt;/strong&gt; with &lt;strong&gt;Swagger UI&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After finishing the first part of this series, you’ll move on to the second part, where you’ll learn to use a proper database to store your data permanently instead of relying on in-memory storage.&lt;/p&gt;
&lt;p&gt;This tutorial series is a hand-on guide on how to create a REST API with Flask and interact with it using &lt;a href=&quot;https://en.wikipedia.org/wiki/Create,_read,_update_and_delete&quot;&gt;CRUD operations&lt;/a&gt;. If you want to refresh your knowledge on working with APIs, then you can give &lt;a href=&quot;https://realpython.com/api-integration-in-python/&quot;&gt;Python and REST APIs: Interacting With Web Services&lt;/a&gt; a read.&lt;/p&gt;
&lt;p&gt;You can download the code for the first part of this project by clicking the link below:&lt;/p&gt;
&lt;div class=&quot;alert alert-warning&quot;&gt;
&lt;p&gt;&lt;strong&gt;Source Code:&lt;/strong&gt; &lt;a href=&quot;https://realpython.com/bonus/flask-connexion-rest-api-part-1-code/&quot; class=&quot;alert-link&quot;&gt;Click here to download the free source code&lt;/a&gt; that you’ll use to build a REST API with the Flask web framework.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;demo&quot;&gt;Demo&lt;a class=&quot;headerlink&quot; href=&quot;https://realpython.com/atom.xml#demo&quot; title=&quot;Permanent link&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In this three-part tutorial series, you’ll build a REST API to keep track of notes for people that may visit you throughout the year. In this tutorial, you’ll create people like the &lt;a href=&quot;https://en.wikipedia.org/wiki/Tooth_fairy&quot;&gt;Tooth Fairy&lt;/a&gt;, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Easter_Bunny&quot;&gt;Easter Bunny&lt;/a&gt;, and &lt;a href=&quot;https://en.wikipedia.org/wiki/Knecht_Ruprecht&quot;&gt;Knecht Ruprecht&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Ideally, you want to be on good terms with all three of them. That’s why you’ll send them notes, to increase the chance of getting valuable gifts from them.&lt;/p&gt;
&lt;p&gt;You can interact with your application by leveraging the API documentation. Along the way, you’ll build a basic front end that reflects the contents of your database:&lt;/p&gt;

  &lt;div class=&quot;embed-responsive embed-responsive-16by9 rounded mb-3 border&quot;&gt;
    
  &lt;/div&gt;



&lt;p&gt;In the first part of this series, you’ll create a base Flask project and plug in your first API endpoints. At the end of this part, you’ll be able to see a list of people in the front end and manage each person in the back end:&lt;/p&gt;

  &lt;div class=&quot;embed-responsive embed-responsive-16by9 rounded mb-3 border&quot;&gt;
    
  &lt;/div&gt;



&lt;p&gt;By leveraging Swagger UI, you’ll create handy documentation for your API along the way. That way, you’ll have the opportunity to test how your API works at each stage of this tutorial and get a useful overview of all your endpoints.&lt;/p&gt;
&lt;h2 id=&quot;planning-part-one&quot;&gt;Planning Part One&lt;a class=&quot;headerlink&quot; href=&quot;https://realpython.com/atom.xml#planning-part-one&quot; title=&quot;Permanent link&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Besides building the Flask project foundation, you’re going to create a REST API that provides access to a collection of people and to the individuals within that collection. Here’s the API design for the people collection:&lt;/p&gt;
&lt;div class=&quot;table-responsive&quot;&gt;
&lt;table class=&quot;table table-hover&quot;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;text-left&quot;&gt;Action&lt;/th&gt;
&lt;th class=&quot;text-left&quot;&gt;HTTP Verb&lt;/th&gt;
&lt;th class=&quot;text-left&quot;&gt;URL Path&lt;/th&gt;
&lt;th class=&quot;text-left&quot;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;text-left&quot;&gt;Read&lt;/td&gt;
&lt;td class=&quot;text-left&quot;&gt;&lt;code&gt;GET&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;text-left&quot;&gt;&lt;code&gt;/api/people&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;text-left&quot;&gt;Read a collection of people.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;text-left&quot;&gt;Create&lt;/td&gt;
&lt;td class=&quot;text-left&quot;&gt;&lt;code&gt;POST&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;text-left&quot;&gt;&lt;code&gt;/api/people&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;text-left&quot;&gt;Create a new person.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;text-left&quot;&gt;Read&lt;/td&gt;
&lt;td class=&quot;text-left&quot;&gt;&lt;code&gt;GET&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;text-left&quot;&gt;&lt;code&gt;/api/people/&amp;lt;lname&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;text-left&quot;&gt;Read a particular person.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;text-left&quot;&gt;Update&lt;/td&gt;
&lt;td class=&quot;text-left&quot;&gt;&lt;code&gt;PUT&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;text-left&quot;&gt;&lt;code&gt;/api/people/&amp;lt;lname&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;text-left&quot;&gt;Update an existing person.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;text-left&quot;&gt;Delete&lt;/td&gt;
&lt;td class=&quot;text-left&quot;&gt;&lt;code&gt;DELETE&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;text-left&quot;&gt;&lt;code&gt;/api/people/&amp;lt;lname&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;text-left&quot;&gt;Delete an existing person.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;The REST API that you’ll be building will serve a simple people data structure where the people are keyed to the last name, and any updates are marked with a new timestamp.&lt;/p&gt;
&lt;p&gt;The dataset that you’ll be working with looks like this:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;PEOPLE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;Fairy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;fname&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Tooth&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;lname&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Fairy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;timestamp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;2022-10-08 09:15:10&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;Ruprecht&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;fname&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Knecht&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;lname&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Ruprecht&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;timestamp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;2022-10-08 09:15:13&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;Bunny&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;fname&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Easter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;lname&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Bunny&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;timestamp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;2022-10-08 09:15:27&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One of the purposes of an API is to decouple the data from the application that uses it, thereby hiding the data implementation details. Later in this tutorial series, you’ll save your data in a database. But for the start, an in-memory data structure works fine.&lt;/p&gt;
&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;a class=&quot;headerlink&quot; href=&quot;https://realpython.com/atom.xml#getting-started&quot; title=&quot;Permanent link&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In this section, you’ll prepare the development environment for your Flask REST API project. First, you’ll create a &lt;strong&gt;virtual environment&lt;/strong&gt; and install all the &lt;strong&gt;dependencies&lt;/strong&gt; that you need for your project.&lt;/p&gt;
&lt;/div&gt;&lt;h2&gt;&lt;a href=&quot;https://realpython.com/flask-connexion-rest-api/?utm_source=realpython&amp;utm_medium=rss&quot;&gt;Read the full article at https://realpython.com/flask-connexion-rest-api/ »&lt;/a&gt;&lt;/h2&gt;
        &lt;hr /&gt;
        &lt;p&gt;&lt;em&gt;[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp;amp; sweet Python Trick delivered to your inbox every couple of days. &lt;a href=&quot;https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer&quot;&gt;&amp;gt;&amp;gt; Click here to learn more and see examples&lt;/a&gt; ]&lt;/em&gt;&lt;/p&gt;</description>
	<pubDate>Mon, 14 Nov 2022 14:00:00 +0000</pubDate>
</item>
<item>
	<title>Python for Beginners: Working with JSON Files in Python</title>
	<guid>https://www.pythonforbeginners.com/basics/working-with-json-files-in-python</guid>
	<link>https://www.pythonforbeginners.com/basics/working-with-json-files-in-python</link>
	<description>&lt;p&gt;JSON Files are one of the most used data formats for communication between two web applications. In this article, we will discuss what JSON objects are and how can we work with JSON files in Python.&lt;/p&gt;



&lt;div class=&quot;wp-block-ht-block-toc is-style-rounded htoc htoc--position-wide toc-list-style-numbered&quot;&gt;&lt;span class=&quot;htoc__title&quot;&gt;&lt;span class=&quot;ht_toc_title&quot;&gt;Table of Contents&lt;/span&gt;&lt;span class=&quot;htoc__toggle&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;div class=&quot;htoc__itemswrap&quot;&gt;&lt;ol class=&quot;ht_toc_list&quot;&gt;&lt;li class=&quot;&quot;&gt;&lt;a href=&quot;https://www.pythonforbeginners.com/feed#htoc-what-is-json-object&quot;&gt;What is JSON Object?&lt;/a&gt;&lt;ol class=&quot;ht_toc_child_list&quot;&gt;&lt;li class=&quot;&quot;&gt;&lt;a href=&quot;https://www.pythonforbeginners.com/feed#htoc-what-is-a-nested-json-object&quot;&gt;What is a Nested JSON Object?&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;a href=&quot;https://www.pythonforbeginners.com/feed#htoc-the-syntax-for-defining-json-objects&quot;&gt;The Syntax For Defining JSON Objects&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;a href=&quot;https://www.pythonforbeginners.com/feed#htoc-working-with-json-files-in-python&quot;&gt;Working with JSON Files in Python&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;a href=&quot;https://www.pythonforbeginners.com/feed#htoc-python-object-to-json-file&quot;&gt;Python Object to JSON File&lt;/a&gt;&lt;ol class=&quot;ht_toc_child_list&quot;&gt;&lt;li class=&quot;&quot;&gt;&lt;a href=&quot;https://www.pythonforbeginners.com/feed#htoc-the-dump-method&quot;&gt;The dump() Method&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;a href=&quot;https://www.pythonforbeginners.com/feed#htoc-python-object-to-json-string&quot;&gt;Python Object to JSON String&lt;/a&gt;&lt;ol class=&quot;ht_toc_child_list&quot;&gt;&lt;li class=&quot;&quot;&gt;&lt;a href=&quot;https://www.pythonforbeginners.com/feed#htoc-the-dumps-method&quot;&gt;The dumps() Method&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;a href=&quot;https://www.pythonforbeginners.com/feed#htoc-python-object-to-json-string-using-jsonencoder-class&quot;&gt;Python Object to JSON String Using JSONEncoder Class&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;a href=&quot;https://www.pythonforbeginners.com/feed#htoc-load-json-files-to-python-object&quot;&gt;Load JSON Files to Python Object&lt;/a&gt;&lt;ol class=&quot;ht_toc_child_list&quot;&gt;&lt;li class=&quot;&quot;&gt;&lt;a href=&quot;https://www.pythonforbeginners.com/feed#htoc-the-load-method&quot;&gt;The load() Method&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;a href=&quot;https://www.pythonforbeginners.com/feed#htoc-convert-json-string-to-python-object&quot;&gt;Convert JSON String to Python Object&lt;/a&gt;&lt;ol class=&quot;ht_toc_child_list&quot;&gt;&lt;li class=&quot;&quot;&gt;&lt;a href=&quot;https://www.pythonforbeginners.com/feed#htoc-the-loads-method&quot;&gt;The loads() Method&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;a href=&quot;https://www.pythonforbeginners.com/feed#htoc-json-string-to-python-dictionary-using-jsondecoder-class&quot;&gt;JSON String to Python Dictionary Using JSONDecoder Class&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;a href=&quot;https://www.pythonforbeginners.com/feed#htoc-why-use-json-files-with-python-for-data-transmission&quot;&gt;Why Use JSON Files With Python for Data Transmission?&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;&quot;&gt;&lt;a href=&quot;https://www.pythonforbeginners.com/feed#htoc-conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;



&lt;h2 id=&quot;htoc-what-is-json-object&quot;&gt;What is JSON Object?&lt;/h2&gt;



&lt;p&gt;JSON is an acronym for JavaScript Object Notation. It is a standard text-based format for representing data in a structured manner using key-value pairs. It is most commonly used for transmitting data between web applications. The JSON files have &lt;code&gt;.json&lt;/code&gt; extension.&lt;/p&gt;



&lt;p&gt;Following is an example of a JSON object.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;{&quot;Name&quot;: &quot;Aditya&quot;, &quot;Age&quot;:23, &quot;Height&quot;:181}&lt;/code&gt;&lt;/pre&gt;



&lt;h3 id=&quot;htoc-what-is-a-nested-json-object&quot;&gt;What is a Nested JSON Object?&lt;/h3&gt;



&lt;p&gt;A nested JSON object is a JSON object containing another JSON object as the associated value for one or more keys. We can also use a nested JSON object for transmitting data. For example, consider the following JSON object.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;{ 
    &quot;coffee&quot;: {
        &quot;region&quot;: &amp;#091;
            {&quot;id&quot;:1, &quot;name&quot;: &quot;John Doe&quot;},
            {&quot;id&quot;:2, &quot;name&quot;: &quot;Don Josh&quot;}
        ],
        &quot;country&quot;: {&quot;id&quot;:2, &quot;company&quot;: &quot;ACME&quot;}
    }, 
    &quot;brewing&quot;: {
        &quot;region&quot;: &amp;#091;
            {&quot;id&quot;:1, &quot;name&quot;: &quot;John Doe&quot;},
            {&quot;id&quot;:2, &quot;name&quot;: &quot;Don Josh&quot;}
        ],
        &quot;country&quot;: {&quot;id&quot;:2, &quot;company&quot;: &quot;ACME&quot;}
    }
}
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;The above JSON object is a nested JSON object. You can observe the following.&lt;/p&gt;



&lt;ul&gt;&lt;li&gt;In the outer object, we have two keys namely &lt;code&gt;“coffee”&lt;/code&gt; and &lt;code&gt;“brewing”.&lt;/code&gt;&amp;nbsp;&lt;/li&gt;&lt;li&gt;The &lt;code&gt;“coffee”&lt;/code&gt; and &lt;code&gt;“brewing”&lt;/code&gt; keys contain other JSON objects as their values. Hence, the given JSON object is a nested JSON object.&amp;nbsp;&lt;/li&gt;&lt;li&gt;Inside&amp;nbsp; &lt;code&gt;“coffee” &lt;/code&gt;and &lt;code&gt;“brewing”&lt;/code&gt;, we have two keys namely &lt;code&gt;“region”&lt;/code&gt; and &lt;code&gt;“country”&lt;/code&gt;. The&lt;code&gt; “country”&lt;/code&gt; contains another JSON object as its key while the &lt;code&gt;“region”&lt;/code&gt; contains a list of JSON objects.&lt;/li&gt;&lt;/ul&gt;



&lt;p&gt;So, a nested JSON object can contain another JSON object or a list of JSON objects.&lt;/p&gt;



&lt;h2 id=&quot;htoc-the-syntax-for-defining-json-objects&quot;&gt;The Syntax For Defining JSON Objects&lt;/h2&gt;



&lt;p&gt;As you can observe in the above two examples, a JSON object has the following syntax.&lt;/p&gt;



&lt;ul&gt;&lt;li&gt;The data is present in key-value pairs in a similar manner to a python dictionary.&amp;nbsp;&lt;/li&gt;&lt;li&gt;The keys and values in a JSON string are separated by a colon &lt;code&gt;(:)&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;Each key-value pair in a JSON object is separated by a comma &lt;code&gt;(,)&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;The entire data in a JSON object is enclosed by curly brackets&lt;code&gt; ({ })&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;The string values and keys are enclosed in double quotes &lt;code&gt;(“ ”)&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;The arrays are enclosed in square brackets&lt;code&gt; ([ ])&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;The values in an array are separated by a comma. The values in the array can be a JSON object, an array, or a literal of any permitted data type.&lt;/li&gt;&lt;li&gt;The keys in the JSON object are of string data type. On the other hand, the associated values can be one of the permitted data types. The permitted data types are string, number, object, array, boolean or null.&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;



&lt;h2 id=&quot;htoc-working-with-json-files-in-python&quot;&gt;Working with JSON Files in Python&lt;/h2&gt;



&lt;p&gt;Python provides us with the JSON module to work with JSON strings and files in Python. Let us now discuss how to convert a python object to a JSON object and vice versa.&lt;/p&gt;



&lt;h2 id=&quot;htoc-python-object-to-json-file&quot;&gt;Python Object to JSON File&lt;/h2&gt;



&lt;p&gt;We can convert a python object to a JSON file using the dump() method.&lt;/p&gt;



&lt;h3 id=&quot;htoc-the-dump-method&quot;&gt;The dump() Method&lt;/h3&gt;



&lt;p&gt;The &lt;code&gt;dump()&lt;/code&gt; method has the following syntax.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;json.dump(python_obj, fp, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw)&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Here,&amp;nbsp;&lt;/p&gt;



&lt;ul&gt;&lt;li&gt;The &lt;code&gt;python_obj&lt;/code&gt; parameter takes a python object that needs to be converted to a JSON file. The object can be a number, string, dictionary, list, or custom python object.&amp;nbsp;&lt;/li&gt;&lt;li&gt;The &lt;code&gt;fp&lt;/code&gt; parameter takes a file pointer as its input argument. After opening a file with a &lt;code&gt;.json&lt;/code&gt; extension in write mode, you can pass it to the &lt;code&gt;fp&lt;/code&gt; parameter. After execution, the contents of the &lt;code&gt;python_obj&lt;/code&gt; are saved to the file pointed by &lt;code&gt;fp&lt;/code&gt; in JSON format.&lt;/li&gt;&lt;li&gt;A key in a python object can be of any data type. However, all the data types cannot be converted to JSON format. When we try to create a JSON file from a python object or a dictionary with keys having data types other than &lt;code&gt;str&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt;, and &lt;code&gt;None&lt;/code&gt;, the &lt;code&gt;dump()&lt;/code&gt; method raises a &lt;a href=&quot;https://www.pythonforbeginners.com/basics/typeerror-in-python&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;TypeError exception&lt;/a&gt;. The &lt;code&gt;skipkeys&lt;/code&gt; parameter helps us handle data in such situations. When we set &lt;code&gt;skipkeys&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt;, the &lt;code&gt;dump()&lt;/code&gt; method skips the keys having incompatible data types instead of running into a TypeError exception.&lt;/li&gt;&lt;li&gt;The &lt;code&gt;ensure_ascii&lt;/code&gt; parameter is used to make sure that all the characters in the output JSON file are ASCII characters. When &lt;code&gt;ensure_ascii&lt;/code&gt; is set to &lt;code&gt;True&lt;/code&gt;, all the non-ASCII characters in &lt;code&gt;python_obj&lt;/code&gt; are skipped. If it is set to &lt;code&gt;False&lt;/code&gt;, the non-ASCII characters are saved to the JSON file as is.&lt;/li&gt;&lt;li&gt;The &lt;code&gt;check_circular&lt;/code&gt; parameter is used to make sure that the &lt;code&gt;dump()&lt;/code&gt; method performs circular reference checks for container types. If &lt;code&gt;check_circular&lt;/code&gt; is set to &lt;code&gt;False&lt;/code&gt;, the circular reference check is skipped. In this case, a circular reference will cause the program to run into RecursionError exception.&lt;/li&gt;&lt;li&gt;The &lt;code&gt;allow_nan&lt;/code&gt; parameter is used to convert &lt;code&gt;NaN&lt;/code&gt; and infinity values to JSON format. When &lt;code&gt;allow_nan&lt;/code&gt; is set to &lt;code&gt;True&lt;/code&gt;, the &lt;code&gt;dump()&lt;/code&gt; method converts &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;+inf&lt;/code&gt;, and &lt;code&gt;-inf &lt;/code&gt;to JavaScript &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;Infinity&lt;/code&gt;, &lt;code&gt;-Infinity&lt;/code&gt; respectively. When &lt;code&gt;allow_nan&lt;/code&gt; is set to &lt;code&gt;False&lt;/code&gt;, the &lt;code&gt;dump()&lt;/code&gt; method raises a&lt;a href=&quot;https://www.pythonforbeginners.com/exceptions/valueerror-invalid-literal-for-int-with-base-10&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt; ValueError exception&lt;/a&gt; when it finds &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;+inf&lt;/code&gt;, or &lt;code&gt;-inf &lt;/code&gt;in &lt;code&gt;python_obj&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;The &lt;code&gt;cls&lt;/code&gt; parameter is used when we want to convert custom python objects to JSON. For converting a custom object to JSON, we need to define a&amp;nbsp; custom &lt;code&gt;JSONEncoder&lt;/code&gt; subclass and pass it to the &lt;code&gt;cls&lt;/code&gt; parameter.&lt;/li&gt;&lt;li&gt;The &lt;code&gt;indent&lt;/code&gt; parameter is used to specify the indentation in the JSON object. When the &lt;code&gt;indent&lt;/code&gt; parameter is set to &lt;code&gt;None&lt;/code&gt; or a negative integer, the JSON object is in the most compact representation. When the &lt;code&gt;indent&lt;/code&gt; parameter is set to a positive integer value, it indents that many spaces per level in the JSON object created from the &lt;code&gt;dump()&lt;/code&gt; method. When the &lt;code&gt;indent&lt;/code&gt; is set to a string, the string is used as the indentation character. When the &lt;code&gt;indent&lt;/code&gt; is set to 0 or an empty string, a new line is introduced for each level of indentation.&lt;/li&gt;&lt;li&gt;By default, the key-value pairs of a JSON object are separated by a comma and the key is separated from the values using a colon character. To specify a new separator for the keys and items,&amp;nbsp; you can pass a tuple containing two characters to the &lt;code&gt;separators&lt;/code&gt; parameter. The first character of the tuple becomes the separator for the key and value. The second element of the tuple becomes a separator for different items. When the &lt;code&gt;indent&lt;/code&gt; parameter is set to &lt;code&gt;None&lt;/code&gt;, the default value for the &lt;code&gt;separators&lt;/code&gt; parameter is &lt;code&gt;(', ', ': ')&lt;/code&gt;. Otherwise, the default value for the &lt;code&gt;separators&lt;/code&gt; parameter is &lt;code&gt;(',', ': ')&lt;/code&gt;. To get the most compact JSON object, you should remove whitespaces from the separators and use &lt;code&gt;(',', ':')&lt;/code&gt; as an input argument to the &lt;code&gt;separators&lt;/code&gt; parameter.&lt;/li&gt;&lt;li&gt;When the &lt;code&gt;dump() &lt;/code&gt;method gets a non-serializable object in the &lt;code&gt;python_obj&lt;/code&gt; parameter, it raises a TypeError exception. You can use the &lt;code&gt;default&lt;/code&gt; parameter to handle this case. The &lt;code&gt;default&lt;/code&gt; parameter takes a function as its input argument. The function should return a JSON-encodable version of the object or raise a TypeError.&amp;nbsp;&lt;/li&gt;&lt;li&gt;The &lt;code&gt;sort_keys&lt;/code&gt; parameter is used in the &lt;code&gt;dump() &lt;/code&gt;method if you want the keys of the JSON object in a sorted manner. If the &lt;code&gt;sort_keys&lt;/code&gt; parameter is set to &lt;code&gt;True&lt;/code&gt;, the keys of the output JSON object are sorted in a lexicographic manner.&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;



&lt;p&gt;After execution, the &lt;code&gt;dump()&lt;/code&gt; method saves the JSON file to the given file pointer.  You can observe this in the following example.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;import json
myStr=&quot;Aditya Raj&quot;
fp=open(&quot;fromstring.json&quot;,&quot;w&quot;)
json.dump(myStr, fp)
fp.close()&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Output:&lt;/p&gt;



&lt;img width=&quot;575&quot; height=&quot;143&quot; src=&quot;https://www.pythonforbeginners.com/wp-content/uploads/image.png&quot; alt=&quot;&quot; class=&quot;wp-image-10968&quot; /&gt;



&lt;p&gt;In the above example, we have converted the string &lt;code&gt;&quot;Aditya Raj&quot; &lt;/code&gt;to a JSON file named &lt;code&gt;fromstring.json&lt;/code&gt;. For this, we first opened the &lt;code&gt;fromstring.json&lt;/code&gt; file in write mode using the &lt;code&gt;open()&lt;/code&gt; function. The &lt;code&gt;open()&lt;/code&gt; function takes the file name and the literal &lt;code&gt;&quot;w&quot;&lt;/code&gt; as its input argument. After execution, it opens the file in write mode and returns a file pointer. We pass the file pointer and the input string to the &lt;code&gt;dump()&lt;/code&gt; method. After execution, the &lt;code&gt;dump()&lt;/code&gt; method saves the JSON object in the file.&lt;/p&gt;



&lt;p&gt;Finally, we closed the file using the &lt;code&gt;close()&lt;/code&gt; method. If you don&amp;#8217;t close the file, any data written to the file will not be saved. Hence, it is an important step.&lt;/p&gt;



&lt;p&gt;You can also convert objects like lists and dictionaries to JSON files using the &lt;code&gt;dumps()&lt;/code&gt; method in Python as shown below.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;import json
myDict={&quot;Name&quot;: &quot;Aditya&quot;, &quot;Age&quot;: 23}
fp=open(&quot;fromdict.json&quot;,&quot;w&quot;)
json.dump(myDict, fp)
fp.close()&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Output:&lt;/p&gt;



&lt;img width=&quot;575&quot; height=&quot;143&quot; src=&quot;https://www.pythonforbeginners.com/wp-content/uploads/image-2.png&quot; alt=&quot;&quot; class=&quot;wp-image-10970&quot; /&gt;



&lt;p&gt;In this article, we have converted a&lt;a href=&quot;https://www.pythonforbeginners.com/dictionary/how-to-use-dictionaries-in-python&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt; python dictionary&lt;/a&gt; to a JSON  file in python. Similarly, you can also convert a list to JSON file using the &lt;code&gt;dump() &lt;/code&gt;method.&lt;/p&gt;



&lt;p&gt;For converting custom python objects to JSON, you can read this article on &lt;a href=&quot;https://www.pythonforbeginners.com/basics/custom-json-encoder-in-python&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;custom JSON encoder in Python&lt;/a&gt;.&lt;/p&gt;



&lt;h2 id=&quot;htoc-python-object-to-json-string&quot;&gt;Python Object to JSON String&lt;/h2&gt;



&lt;h3 id=&quot;htoc-the-dumps-method&quot;&gt;The dumps() Method&lt;/h3&gt;



&lt;p&gt;The dumps() method is used to convert a python object to a JSON formatted string. It has the following syntax.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;json.dumps(python_obj, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw)&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;All the parameters in the &lt;code&gt;dumps()&lt;/code&gt; method have the same meaning as the respective parameters in the&lt;code&gt; dump() &lt;/code&gt;method. The only difference is that the &lt;code&gt;dump()&lt;/code&gt; method saves the JSON object to a file and the &lt;code&gt;dumps()&lt;/code&gt; method returns a JSON formatted string after execution.&amp;nbsp; You can observe this in the following example.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;import json
myStr=&quot;Aditya Raj&quot;
print(&quot;The input string is:&quot;)
print(myStr)
jsonStr=json.dumps(myStr)
print(&quot;The JSON string is:&quot;)
print(jsonStr)&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Output:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;The input string is:
Aditya Raj
The JSON string is:
&quot;Aditya Raj&quot;&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;You can also convert objects like lists and dictionaries to JSON strings using the &lt;code&gt;dumps()&lt;/code&gt; method in Python as shown below.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;import json
myDict={&quot;Name&quot;: &quot;Aditya&quot;, &quot;Age&quot;: 23}
print(&quot;The dictionary is:&quot;)
print(myDict)
jsonStr=json.dumps(myDict)
print(&quot;The JSON string is:&quot;)
print(jsonStr)&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Output&lt;/p&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;The dictionary is:
{'Name': 'Aditya', 'Age': 23}
The JSON string is:
{&quot;Name&quot;: &quot;Aditya&quot;, &quot;Age&quot;: 23}&lt;/code&gt;&lt;/pre&gt;



&lt;h2 id=&quot;htoc-python-object-to-json-string-using-jsonencoder-class&quot;&gt;Python Object to JSON String Using JSONEncoder Class&lt;/h2&gt;



&lt;p&gt;The JSONEncoder class is used to create default and custom JSON encoders for converting python objects to JSON format. The &lt;code&gt;JSONEncoder()&lt;/code&gt; constructor, when executed, returns a JSONEncoder object.&lt;/p&gt;



&lt;p&gt;We can invoke the &lt;code&gt;encode()&lt;/code&gt; method on the JSONEncoder object to create a JSON string from a python object. The &lt;code&gt;encode() &lt;/code&gt;method, when invoked on a JSONEncoder object, takes a python object as its input argument and returns the JSON representation of the python object. You can observe this in the following example.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;import json
myStr=&quot;Aditya Raj&quot;
print(&quot;The input string is:&quot;)
print(myStr)
jsonStr=json.JSONEncoder().encode(myStr)
print(&quot;The JSON string is:&quot;)
print(jsonStr)&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Output:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;The input string is:
Aditya Raj
The JSON string is:
&quot;Aditya Raj&quot;&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;In this example, we first created a JSONEncoder object using the &lt;code&gt;JSONEncoder()&lt;/code&gt; constructor. Then, we used the &lt;code&gt;encode() &lt;/code&gt;method to convert a python string to a JSON string. &lt;/p&gt;



&lt;p&gt;Instead of primitive data types, you can also convert container objects such as lists and dictionaries to JSON format as shown below.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;import json
myDict={&quot;Name&quot;: &quot;Aditya&quot;, &quot;Age&quot;: 23}
print(&quot;The dictionary is:&quot;)
print(myDict)
jsonStr=json.JSONEncoder().encode(myDict)
print(&quot;The JSON string is:&quot;)
print(jsonStr)&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Output:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;The dictionary is:
{'Name': 'Aditya', 'Age': 23}
The JSON string is:
{&quot;Name&quot;: &quot;Aditya&quot;, &quot;Age&quot;: 23}&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Suggested Reading: If you are into machine learning, you can read this article on &lt;a href=&quot;https://codinginfinite.com/mlops-a-complete-guide-for-beginners/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;mlops for beginners&lt;/a&gt;. You might also like this article on &lt;a href=&quot;https://codinginfinite.com/clustering-for-mixed-data-types-in-python/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;clustering mixed data types in Python&lt;/a&gt;.&lt;/p&gt;



&lt;h2 id=&quot;htoc-load-json-files-to-python-object&quot;&gt;Load JSON Files to Python Object&lt;/h2&gt;



&lt;p&gt;We can load JSON files to python objects using the &lt;code&gt;load()&lt;/code&gt; method.&lt;/p&gt;



&lt;h3 id=&quot;htoc-the-load-method&quot;&gt;The load() Method&lt;/h3&gt;



&lt;p&gt;The syntax for the &lt;code&gt;load()&lt;/code&gt; method is as follows.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;json.load(fp, *, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)&lt;/code&gt;&lt;/pre&gt;



&lt;ul&gt;&lt;li&gt;The &lt;code&gt;fp&lt;/code&gt; parameter is the file pointer to the file object containing the JSON file.&amp;nbsp;&lt;/li&gt;&lt;li&gt;The &lt;code&gt;cls&lt;/code&gt; parameter is used when we want to convert JSON to a custom python object. For converting JSON to a custom object, we need to define a&amp;nbsp; custom JSONDecoder subclass and pass it to the &lt;code&gt;cls&lt;/code&gt; parameter.&lt;/li&gt;&lt;li&gt;The &lt;code&gt;object_hook&lt;/code&gt; parameter is used to create custom JSON decoders. The &lt;code&gt;object_hook&lt;/code&gt; parameter takes a function as its input argument. The function is called with the object literal decoded from the JSON. In the output, the return value of the function is used instead of the dict.&amp;nbsp;&lt;/li&gt;&lt;li&gt;The &lt;code&gt;parse_float&lt;/code&gt; parameter is used to convert any floating point number in the JSON to another data type. By default, the &lt;code&gt;float()&lt;/code&gt; function is called with the strings containing floating point numbers in the JSON. If we specify a function in the &lt;code&gt;parse_float&lt;/code&gt; parameter,&amp;nbsp; the &lt;code&gt;load() &lt;/code&gt;method passes the string containing a floating point number to the function and the output of the function is used in the python object. This parameter can be used if you want to convert the floats to ints or other data types while loading the JSON itself.&lt;/li&gt;&lt;li&gt;The &lt;code&gt;parse_int&lt;/code&gt; parameter is used to convert any integer in the JSON to another data type. By default, the &lt;code&gt;int()&lt;/code&gt; function is called with the strings containing integers in the JSON. If we specify a function in the &lt;code&gt;parse_int&lt;/code&gt; parameter,&amp;nbsp; the &lt;code&gt;load()&lt;/code&gt; method passes the string containing the integer to the function and the output of the function is used in the python object. This parameter can be used if you want to convert the integers to floats or other data types while loading the JSON itself. The default &lt;code&gt;parse_int&lt;/code&gt; of &lt;code&gt;int()&lt;/code&gt; now limits the maximum length of the integer string via the interpreter’s integer string conversion length limitation to help avoid denial of service attacks.&lt;/li&gt;&lt;li&gt;The &lt;code&gt;parse_constant&lt;/code&gt; parameter is used to load &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;-Infinity&lt;/code&gt;, and &lt;code&gt;+Infinity&lt;/code&gt; from JSON to custom python values. The &lt;code&gt;parse_constant&lt;/code&gt; parameter takes a function as its input argument. While the execution of the &lt;code&gt;load()&lt;/code&gt; function,&amp;nbsp; &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;-Infinity&lt;/code&gt;, and &lt;code&gt;+Infinity&lt;/code&gt; are passed to the function, and the return value is used in the python object.&lt;/li&gt;&lt;li&gt;The &lt;code&gt;object_pairs_hook&lt;/code&gt; is an optional parameter that takes a function as its input argument. The function is called with the result of any object literal decoded with an ordered list of pairs. The return value of &lt;code&gt;object_pairs_hook&lt;/code&gt; is used instead of the dict. This feature can be used to implement custom decoders. If &lt;code&gt;object_hook&lt;/code&gt; is also defined, the &lt;code&gt;object_pairs_hook&lt;/code&gt; takes priority.&lt;/li&gt;&lt;/ul&gt;



&lt;p&gt;&amp;nbsp;After execution, the &lt;code&gt;load()&lt;/code&gt; method returns a python object. For instance, consider the following JSON file.&lt;/p&gt;



&lt;img width=&quot;575&quot; height=&quot;143&quot; src=&quot;https://www.pythonforbeginners.com/wp-content/uploads/image-3.png&quot; alt=&quot;&quot; class=&quot;wp-image-10972&quot; /&gt;



&lt;p&gt;When we convert the above JSON file to a python object using the &lt;code&gt;load()&lt;/code&gt; method, we will get a python dictionary.&lt;/p&gt;



&lt;p&gt;You can convert JSON files to python objects using the &lt;code&gt;load()&lt;/code&gt; method as shown below.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;import json
fp=open(&quot;simplestudent.json&quot;,&quot;r&quot;)
myDict=json.load(fp)
print(&quot;The python object is:&quot;)
print(myDict)
fp.close()&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Output:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;The python object is:
{'Name': 'Aditya', 'Age': 23}&lt;/code&gt;&lt;/pre&gt;



&lt;h2 id=&quot;htoc-convert-json-string-to-python-object&quot;&gt;Convert JSON String to Python Object&lt;/h2&gt;



&lt;p&gt;To convert a JSON string to a python object, we can use the loads() method or the JSONDecoder class.&lt;/p&gt;



&lt;h3 id=&quot;htoc-the-loads-method&quot;&gt;The loads() Method&lt;/h3&gt;



&lt;p&gt;The&lt;code&gt; loads()&lt;/code&gt; method is used to load a JSON string into a python object. It has the following syntax.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;json.loads(json_string, *, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Here, the &lt;code&gt;json_string&lt;/code&gt; parameter denotes the JSON string that has to be converted to a python object. All other parameters in the &lt;code&gt;loads()&lt;/code&gt; method are the same as in the &lt;code&gt;load() &lt;/code&gt;method. After execution, the &lt;code&gt;loads()&lt;/code&gt; method returns a python object as shown below.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;import json
jsonStr='{&quot;Name&quot;: &quot;Aditya&quot;, &quot;Age&quot;: 23}'
print(&quot;The JSON string is:&quot;)
print(jsonStr)
myDict=json.loads(jsonStr)
print(&quot;The python object is:&quot;)
print(myDict)&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Output:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;The JSON string is:
{&quot;Name&quot;: &quot;Aditya&quot;, &quot;Age&quot;: 23}
The python object is:
{'Name': 'Aditya', 'Age': 23}&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;In this example, you can observe that we have converted a JSON string to a python dictionary using the &lt;code&gt;loads()&lt;/code&gt; method.&lt;/p&gt;



&lt;h2 id=&quot;htoc-json-string-to-python-dictionary-using-jsondecoder-class&quot;&gt;JSON String to Python Dictionary Using JSONDecoder Class&lt;/h2&gt;



&lt;p&gt;The JSONDecoder class is used  to create custom JSON decoders in Python. To convert a JSON string to a python object using the JSONDecoder class, we will first execute the &lt;code&gt;JSONDecoder() &lt;/code&gt;constructor. The JSONDecoder constructor returns a JSONDecoder object after execution. &lt;/p&gt;



&lt;p&gt;We will invoke the &lt;code&gt;decode()&lt;/code&gt; method on the JSONDecoder object to create a python object from the JSON string. The &lt;code&gt;decode()&lt;/code&gt; method takes a JSON string and returns a python object as shown in the following example.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;import json
jsonStr='{&quot;Name&quot;: &quot;Aditya&quot;, &quot;Age&quot;: 23}'
print(&quot;The JSON string is:&quot;)
print(jsonStr)
myDict=json.JSONDecoder().decode(jsonStr)
print(&quot;The python object is:&quot;)
print(myDict)&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Output:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;The JSON string is:
{&quot;Name&quot;: &quot;Aditya&quot;, &quot;Age&quot;: 23}
The python object is:
{'Name': 'Aditya', 'Age': 23}&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;By default, the &lt;code&gt;load()&lt;/code&gt; method, &lt;code&gt;loads()&lt;/code&gt; method and the &lt;code&gt;decode()&lt;/code&gt; function return a python dictionary. To convert a JSON object directly into a custom python object, you can read this article on &lt;a href=&quot;https://www.pythonforbeginners.com/basics/custom-json-decoder-in-python&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;custom JSON decoder in Python&lt;/a&gt;.&lt;/p&gt;



&lt;h2 id=&quot;htoc-why-use-json-files-with-python-for-data-transmission&quot;&gt;Why Use JSON Files With Python for Data Transmission?&lt;/h2&gt;



&lt;ul&gt;&lt;li&gt;The JSON Format is syntactically similar to primitive python objects. Hence, it is easy to convert a python object to JSON and send it over the network. To send custom python objects, we can define encoders and decoders and easily transmit data in JSON format.&amp;nbsp;&lt;/li&gt;&lt;li&gt;The JSON data is in text format. Hence, we can send it to any application. Also, it can be handled by any programming language as all programming languages support text data.&lt;/li&gt;&lt;li&gt;The JSON format is extremely lightweight. It can easily be sent over HTTP and HTTPS due to its small size.&lt;/li&gt;&lt;li&gt;JSON is easy to read, structured using key-value pairs, and doesn’t have many closing or opening tags unlike other formats such as XML.&lt;/li&gt;&lt;li&gt;Almost every major language has dedicated libraries for handling JSON data. So, even if you are using different programming languages in different teams, your software modules can easily communicate with each other using JSON.&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;



&lt;h2 id=&quot;htoc-conclusion&quot;&gt;Conclusion&lt;/h2&gt;



&lt;p&gt;In this article, we have discussed working with JSON files in Python.To learn more about python programming, you can read this article on how to &lt;a href=&quot;https://codinginfinite.com/python-chat-application-tutorial-source-code/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;create a chat app in Python&lt;/a&gt;. You might also like this article on &lt;a href=&quot;https://codinginfinite.com/linear-regression-using-sklearn-in-python/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;linear regression using the sklearn&lt;/a&gt; module in Python.&lt;/p&gt;



&lt;p&gt;Stay tuned for more informative articles.&lt;/p&gt;



&lt;p&gt;Happy Learning!&lt;/p&gt;
&lt;p&gt;The post &lt;a rel=&quot;nofollow&quot; href=&quot;https://www.pythonforbeginners.com/basics/working-with-json-files-in-python&quot;&gt;Working with JSON Files in Python&lt;/a&gt; appeared first on &lt;a rel=&quot;nofollow&quot; href=&quot;https://www.pythonforbeginners.com&quot;&gt;PythonForBeginners.com&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Mon, 14 Nov 2022 14:00:00 +0000</pubDate>
</item>
<item>
	<title>Mike Driscoll: PyDev of the Week: Sarah Abderemane</title>
	<guid>https://www.blog.pythonlibrary.org/2022/11/14/pydev-of-the-week-sarah-abderemane/</guid>
	<link>https://www.blog.pythonlibrary.org/2022/11/14/pydev-of-the-week-sarah-abderemane/</link>
	<description>&lt;p dir=&quot;ltr&quot;&gt;This week we welcome Sarah Abderemane (&lt;a href=&quot;https://twitter.com/sabderemane_&quot;&gt;@sabderemane_&lt;/a&gt;) as our PyDev of the Week! Sarah is a full-stack developer who is very active in the Django community. You can learn more about Sarah by checking out her &lt;a href=&quot;https://sarahabd.com/blog&quot;&gt;website&lt;/a&gt; or visiting Sarah's &lt;a href=&quot;https://github.com/sabderemane&quot;&gt;GitHub Profile&lt;/a&gt;.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Let's spend some time getting to know Sarah better!&lt;/p&gt;
&lt;h2 dir=&quot;ltr&quot;&gt;Can you tell us a little about yourself (hobbies, education, etc):&lt;/h2&gt;
&lt;p dir=&quot;ltr&quot;&gt;Hi, I'm a software developer for a few years now and I’m currently working at TKT Thinking Technology in Paris, France.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;I got a master's degree in Computer Science while working for them. Before that, I had a professional degree in web and mobile design and integration and a two-year university degree in marketing techniques. I started to learn programming by myself after my degree in marketing techniques. I continued my studies in this way because I liked it.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;I spend most of my spare time contributing to open source projects on &lt;span class=&quot;il&quot;&gt;Python&lt;/span&gt; ecosystem, in particular in Django projects, as I love this community. I volunteer for Django conferences, especially as a mentor for the Django Girls. Moreover, I’m organizing Django Paris Meetups as I’m living in France and helping djangonauts via&lt;a href=&quot;https://discord.gg/57MMPEES&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt; Discord&lt;/a&gt;.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;When I'm not in front of the computer, I'm enjoying dancing especially dancehall and hip hop style and watching series on diverse streaming platform. Also, I never say no to chocolate or sweets...&lt;/p&gt;
&lt;h2 dir=&quot;ltr&quot;&gt;Why did you start using &lt;span class=&quot;il&quot;&gt;Python&lt;/span&gt;?&lt;/h2&gt;
&lt;p dir=&quot;ltr&quot;&gt;During my first year of master, I was studying in block release training with &lt;span class=&quot;il&quot;&gt;weeks&lt;/span&gt; at school and &lt;span class=&quot;il&quot;&gt;weeks&lt;/span&gt; in a company. I discovered &lt;span class=&quot;il&quot;&gt;Python&lt;/span&gt; with my mentor for some company’s projects while I was learning PHP during the courses. I really liked the &lt;span class=&quot;il&quot;&gt;Python&lt;/span&gt; language so I started to learn about it in my free time.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;What other programming languages do you know and which is your favorite?&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;I know PHP as I said before, HTML, CSS, JavaScript and I know some Bash. I learned Go in High School. I also used C and Java when I started programming but that was a long time ago.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;I wouldn't say, I have a favorite programming language apart from &lt;span class=&quot;il&quot;&gt;Python&lt;/span&gt;, but I really like JavaScript besides it.&lt;/p&gt;
&lt;h2 dir=&quot;ltr&quot;&gt;What projects are you working on now?&lt;/h2&gt;
&lt;p dir=&quot;ltr&quot;&gt;I’m checking to move the &lt;a href=&quot;https://github.com/python/bedevere&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Bedevere&lt;/a&gt; bot for pull requests in &lt;span class=&quot;il&quot;&gt;Python&lt;/span&gt; to GitHub Actions and I’m currently implementing a dark mode in Django documentation. You can already check my work in the documentation haha, but there are still some parts which have no dark mode like the issue tracker. I’m also trying to improve the accessibility in Django project.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Aside from my Django contribution, I’m working on multiple projects at my job but the last one was about a platform to help professionals search and compare real estate transactions in a few clicks.&lt;/p&gt;
&lt;h2 dir=&quot;ltr&quot;&gt;Which &lt;span class=&quot;il&quot;&gt;Python&lt;/span&gt; libraries are your favorite (core or 3rd party)?&lt;/h2&gt;
&lt;p dir=&quot;ltr&quot;&gt;I think my favorite &lt;span class=&quot;il&quot;&gt;python&lt;/span&gt; libraries would be itertools and collections from core and pandas which is amazing as a 3rd party library.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Why did you choose Django over other &lt;span class=&quot;il&quot;&gt;Python&lt;/span&gt; web frameworks?&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;I wouldn’t say I choose Django over other &lt;span class=&quot;il&quot;&gt;python&lt;/span&gt; web frameworks, but I’m trying to choose the best framework according the project I have to do, and most of the time, Django suits well my needs.&lt;/p&gt;
&lt;h2 dir=&quot;ltr&quot;&gt;What are the top three things in Django that you like?&lt;/h2&gt;
&lt;p dir=&quot;ltr&quot;&gt;As a developer, I really like the simplicity of using it, but if I had to pick 3 things I would say:&lt;/p&gt;
&lt;ul&gt;
&lt;li dir=&quot;ltr&quot;&gt;
&lt;p dir=&quot;ltr&quot;&gt;The admin, you can have something ready very quickly.&lt;/p&gt;
&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;
&lt;p dir=&quot;ltr&quot;&gt;The ORM, it’s really powerful and you can do so many things easily.&lt;/p&gt;
&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;
&lt;p dir=&quot;ltr&quot;&gt;The documentation, it’s one of the most complete in the world of open source software for a project of this scale.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 dir=&quot;ltr&quot;&gt;Is there anything else you’d like to say?&lt;/h2&gt;
&lt;p dir=&quot;ltr&quot;&gt;I started writing and sharing more on &lt;a href=&quot;https://twitter.com/sabderemane_&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Twitter&lt;/a&gt; and on my &lt;a href=&quot;https://sarahabd.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;blog&lt;/a&gt;. I really made some great connections to awesome people, I really appreciate meeting new folks &lt;img class=&quot;an1&quot; src=&quot;https://fonts.gstatic.com/s/e/notoemoji/14.0/1f642/72.png&quot; alt=&quot;????&quot; /&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;If you want to start to contribute to in Django ecosystem or need some help with your contribution, don’t hesitate to ask questions in discord, I’m not so far and there is always someone to help.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Thanks for doing the interview, Sarah!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The post &lt;a rel=&quot;nofollow&quot; href=&quot;https://www.blog.pythonlibrary.org/2022/11/14/pydev-of-the-week-sarah-abderemane/&quot;&gt;PyDev of the Week: Sarah Abderemane&lt;/a&gt; appeared first on &lt;a rel=&quot;nofollow&quot; href=&quot;https://www.blog.pythonlibrary.org&quot;&gt;Mouse Vs Python&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Mon, 14 Nov 2022 13:30:54 +0000</pubDate>
</item>
<item>
	<title>Zato Blog: IMAP and OAuth2 Integrations with Microsoft 365</title>
	<guid>https://zato.io/blog/posts/imap-oauth2-microsoft365.html</guid>
	<link>https://zato.io/blog/posts/imap-oauth2-microsoft365.html</link>
	<description>&lt;img src=&quot;https://zato.io/blog/blog/images/3.2-imap/ms365.jpg&quot; /&gt; 


&lt;p&gt;Microsoft 365 requires for all IMAP connections to use OAuth2. This can be challenging to configure
in server-side automation and orchestration processes so Zato offers an easy way that lets you read and send emails
without a need for getting into low-level OAuth2 details.&lt;/p&gt;
&lt;p&gt;Consider a common orchestration scenario - a business partner sends automated emails with attachments that
need to be parsed, some information needs to be extracted and processed accordingly.&lt;/p&gt;
&lt;p&gt;Before OAuth2, an automation process would receive from Azure administrators a dedicated IMAP account with a username
and password.&lt;/p&gt;
&lt;p&gt;Now, however, in addition to creating an IMAP account, administrators will need to create and configure a few more
resources that the orchestration service will use. Note that the password to the IMAP account will never be used.&lt;/p&gt;
&lt;p&gt;Administrators need to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Register an Azure client app representing your service that uses IMAP&lt;/li&gt;
&lt;li&gt;Grant this app a couple of Microsoft Graph application permissions:
&lt;ul&gt;
&lt;li&gt;Mail.ReadWrite&lt;/li&gt;
&lt;li&gt;Mail.Send&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next, administrators need to give you a few pieces of information about the app:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Application (client) ID&lt;/li&gt;
&lt;li&gt;Tenant (directory) ID&lt;/li&gt;
&lt;li&gt;Client secret&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additionally, you still need to receive the IMAP username (an e-mail address). It is just that you do not need its
corresponding password.&lt;/p&gt;
&lt;h2 id=&quot;in-dashboard&quot;&gt;In Dashboard&lt;/h2&gt;
&lt;p&gt;The first step is to create a new connection in your Zato Dashboard - this will establish an OAuth2-using connection
that Zato will manage and your Python code will not have to do anything else,
all the underlying OAuth2 tokens will keep refreshing as needed, the platform will take care of everything.&lt;/p&gt;
&lt;p&gt;Having received the configuration details from Azure administrators, you can open your Zato Dashboard and navigate
to IMAP connections:&lt;/p&gt;

    &lt;img src=&quot;https://zato.io/blog/blog/images/3.2-imap/ms365-imap-menu.png&quot; /&gt; 


&lt;p&gt;Fill out the form as below, choosing “Microsoft 365” as the server type. The other type, “Generic IMAP” is used for
the classical case of IMAP with a username and password:&lt;/p&gt;

    &lt;img src=&quot;https://zato.io/blog/blog/images/3.2-imap/ms365-imap-create-form.png&quot; /&gt; 


&lt;p&gt;Change the secret and click Ping to confirm that the connection is configured correctly:&lt;/p&gt;

    &lt;img src=&quot;https://zato.io/blog/blog/images/3.2-imap/ms365-imap-secret-ping.png&quot; /&gt; 


&lt;h2 id=&quot;in-python&quot;&gt;In Python&lt;/h2&gt;
&lt;p&gt;Use the code below to receive emails. Note that it merely needs to refer to a connection definition by its
name and there is no need for any usage of OAuth2 here:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;# Zato&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;from&lt;/span&gt; zato.server.service &lt;span&gt;import&lt;/span&gt; Service
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MyService&lt;/span&gt;(Service):
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;handle&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;        &lt;span&gt;# Connect to a Microsoft 365 IMAP connection by its name ..&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;        conn &lt;span&gt;=&lt;/span&gt; self&lt;span&gt;.&lt;/span&gt;email&lt;span&gt;.&lt;/span&gt;imap&lt;span&gt;.&lt;/span&gt;get(&lt;span&gt;'My Automation'&lt;/span&gt;)&lt;span&gt;.&lt;/span&gt;conn
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;        &lt;span&gt;# .. get all messages matching filter criteria (&quot;unread&quot; by default)..&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;        &lt;span&gt;for&lt;/span&gt; msg_id, msg &lt;span&gt;in&lt;/span&gt; conn&lt;span&gt;.&lt;/span&gt;get():
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;            &lt;span&gt;# .. and access each of them.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;            self&lt;span&gt;.&lt;/span&gt;logger&lt;span&gt;.&lt;/span&gt;info(msg&lt;span&gt;.&lt;/span&gt;data)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is everything that is needed for integrations with IMAP using Microsoft 365 although we can still go further.
For instance, to create a scheduled job to periodically invoke the service, go to the Scheduler job
in Dashboard:&lt;/p&gt;

    &lt;img src=&quot;https://zato.io/blog/blog/images/3.2-imap/imap-scheduler-menu.png&quot; /&gt; 


&lt;p&gt;In this case, we decide to have a job that runs once per hour:&lt;/p&gt;

    &lt;img src=&quot;https://zato.io/blog/blog/images/3.2-imap/imap-scheduler-form.png&quot; /&gt; 


&lt;p&gt;As expected, clicking OK will suffice for the job to start in background. It is as simple as that.&lt;/p&gt;
&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Start &lt;a href=&quot;https://zato.io/docs/tutorial/01.html?b&quot;&gt;the tutorial&lt;/a&gt; to learn more technical details about Zato, including its architecture,
installation and usage. After completing it, you will have a multi-protocol service representing a sample scenario
often seen in banking systems with several applications cooperating to provide a single and consistent API to its callers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check more &lt;a href=&quot;https://zato.io/en/docs/3.2/dev/index.html&quot;&gt;resources for developers&lt;/a&gt; and &lt;a href=&quot;https://zato.io/en/docs/3.2/intro/screenshots.html&quot;&gt;screenshots&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Para aprender más sobre las integraciones de Zato y API en español, haga &lt;a href=&quot;https://zato.io/docs/intro/overview-high-level-es.html?b&quot;&gt;clic aquí&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
	<pubDate>Mon, 14 Nov 2022 10:41:35 +0000</pubDate>
</item>
<item>
	<title>Reuven Lerner: Level up your career with PythonDAB — the Python Data Analytics Bootcamp</title>
	<guid>https://lerner.co.il/2022/11/14/level-up-your-career-with-pythondab-the-python-data-analytics-bootcamp/</guid>
	<link>https://lerner.co.il/2022/11/14/level-up-your-career-with-pythondab-the-python-data-analytics-bootcamp/</link>
	<description>&lt;p&gt;The economy has been feeling a bit shaky as of late, with lots of layoffs, shakeups, and general uncertainty about what&amp;#8217;s coming next.&lt;/p&gt;



&lt;p&gt;With the right skills, you need not be too nervous. That&amp;#8217;s because companies are always interested in people who can help them to create new products, understand and improve the ones they&amp;#8217;re already making, and suggest new directions for the future.&lt;/p&gt;



&lt;p&gt;In other words: Having such skills is like having a career superpower, one that ensures you&amp;#8217;ll always be able to get a great job — with a great salary and benefits, solving interesting problems alongside smart, motivated colleagues.&lt;/p&gt;



&lt;p&gt;What skills am I talking about?&lt;/p&gt;



&lt;ul&gt;&lt;li&gt;Python&lt;/li&gt;&lt;li&gt;Version control and collaboration with Git&lt;/li&gt;&lt;li&gt;Data analytics with NumPy and Pandas&lt;/li&gt;&lt;/ul&gt;



&lt;p&gt;If you can program in Python, analyze data with NumPy and Pandas, and collaborate with colleagues using Git, then you&amp;#8217;re in a great position to level up your current career — to move ahead at your current job, or to get a new, better job using these skills.&lt;/p&gt;



&lt;p&gt;Maybe, but how can you acquire these skills? There are so many options, it&amp;#8217;s hard to know where to start.&lt;/p&gt;


&lt;div class=&quot;wp-block-image&quot;&gt;
&lt;img src=&quot;https://lerner.co.il/wp-content/uploads/2022/05/DAB-Logo-1024x667.png&quot; alt=&quot;Reuven Lerner's Python Data Analytics Bootcamp&quot; class=&quot;wp-image-2398&quot; width=&quot;378&quot; height=&quot;246&quot; /&gt;&lt;/div&gt;


&lt;p&gt;Starting November 30th, I&amp;#8217;ll be running a cohort of PythonDAB, my Python Analytics Bootcamp. Over four months, you&amp;#8217;ll learn Python, Git, NumPy, and Pandas — with tons of interactions with me (a live instructor), and by collaborating with others in your cohort.&lt;/p&gt;



&lt;p&gt;PythonDAB is meant for smart, hard-working people who want to advance their careers in a part-time, online bootcamp. Between video lectures, collaborative problem-solving, twice-weekly office hours, and a private forum, you&amp;#8217;ll learn everything you need to gain data analytics superpowers.&lt;/p&gt;



&lt;p&gt;Sounds interesting? You can learn more here: https://PythonDAB.com/ &lt;/p&gt;



&lt;p&gt;And of course, if you have questions, feel free to e-mail me at &lt;a href=&quot;mailto:reuven@lerner.co.il&quot;&gt;reuven@lerner.co.il&lt;/a&gt;. I&amp;#8217;ll gladly answer you ASAP.&lt;/p&gt;
&lt;span class=&quot;tve-leads-two-step-trigger tl-2step-trigger-0&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tve-leads-two-step-trigger tl-2step-trigger-0&quot;&gt;&lt;/span&gt;&lt;p&gt;The post &lt;a rel=&quot;nofollow&quot; href=&quot;https://lerner.co.il/2022/11/14/level-up-your-career-with-pythondab-the-python-data-analytics-bootcamp/&quot;&gt;Level up your career with PythonDAB — the Python Data Analytics Bootcamp&lt;/a&gt; appeared first on &lt;a rel=&quot;nofollow&quot; href=&quot;https://lerner.co.il&quot;&gt;Reuven Lerner&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Mon, 14 Nov 2022 09:09:46 +0000</pubDate>
</item>
<item>
	<title>Made With Mu: Mu: An Editor in Hostile Environments</title>
	<guid>https://madewith.mu/mu/users/2022/11/14/hostile-environments.html</guid>
	<link>https://madewith.mu/mu/users/2022/11/14/hostile-environments.html</link>
	<description>&lt;p&gt;&lt;img src=&quot;https://madewith.mu/assets/venera14.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is a picture of the surface of Venus, taken by the Soviet
&lt;a href=&quot;https://en.wikipedia.org/wiki/Venera_14&quot;&gt;Venera 14 probe&lt;/a&gt;. Apparently, the
temperature of the barren rocky surface is 465 °C and the pressure is that
of 94 Earth atmospheres (9.5 MPa). The atmosphere is a murky orange, contains
substantial quantities of hydrogen sulphide (so it smells like rotten eggs) and
it rains sulphuric acid. No wonder the probe lasted only 57 minutes before
breaking.&lt;/p&gt;

&lt;p&gt;This is, undoubtedly, a hostile environment.&lt;/p&gt;

&lt;p&gt;Mu is an editor for beginners. By definition, our users probably don’t know
what they’re doing (they’re beginners!) and, it is with some trepidation, that
we design Mu to work in all sorts of different environments… some of which
are hostile.&lt;/p&gt;

&lt;p&gt;For instance, we were once contacted by a teacher who explained that Mu didn’t
work on their classroom computers. Mu core contributor
&lt;a href=&quot;http://timgolden.me.uk/&quot;&gt;Tim Golden&lt;/a&gt; took up the challenge and liaised with
the school’s network administrator who had installed Mu. It
turns out they had deliberately configured the student’s home directory to be
read only. As many of you will undoubtedly know, a user’s home directory is
supposed to be writeable to the user (and any applications they
run, like Mu). Having a writeable home directory is how we save your code,
settings and the log files that help us debug what has happened when Mu
doesn’t work.&lt;/p&gt;

&lt;p&gt;It would be very easy to mock such a set-up and criticise the school’s network
admin as incompetent, ignorant or a clown. But a far more helpful and
compassionate response is to engage with and try to understand the situation.&lt;/p&gt;

&lt;p&gt;Tim embodied this approach with great aplomb.&lt;/p&gt;

&lt;p&gt;As I remember the details, students all saved their work on a networked drive
and the home directory (containing configuration files) was locked down so they
couldn’t change their settings. Unfortunately, Mu’s algorithm for discovering
the correct path for the user’s home directory was unable to distinguish that
the actual home directory was read only (why would it be?) or that some other
network attached drive was really where students had write permissions.&lt;/p&gt;

&lt;p&gt;At the core of this situation is a simple fact: schools are complicated and
often chaotic places.&lt;/p&gt;

&lt;p&gt;Lessons were disrupted because the applications
students needed to use were broken because students misconfigured them. The
answer: &lt;em&gt;don’t let students save configuration&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Hey presto, problem solved… until Mu arrived.&lt;/p&gt;

&lt;p&gt;In the end I believe Tim discussed other possible solutions around the core
problem and put guard code in place to ensure Mu would at least helpfully
recover in such a rare and unusual situation. Put simply, if we dealt
with every pathological situation, Mu itself would become pathological software
as it drifted away from simplicity and ease to coping with all possible
situations. Tim’s approach is a good example of our alternative: we try very
hard to keep Mu simple and easy while helping
our (beginner) users identify when they run up against a
pathological situation if Mu encounters a problem.&lt;/p&gt;

&lt;p&gt;Relatedly, a common solution to problematic configuration is to create a sort
of virtual sandbox isolated from other aspects of the system.&lt;/p&gt;

&lt;p&gt;In the Python world we use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip&lt;/code&gt; command to install packages, and we wanted
the new version of Mu to provide users with an easy-to-use and simple interface
for this command. My first attempt at a solution involved adding a directory
to the Python path used by Mu and instructing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip&lt;/code&gt; to use &lt;em&gt;that&lt;/em&gt; as the
destination for all packages. This mostly worked but not enough of the time
that it was reliable.&lt;/p&gt;

&lt;p&gt;Over a friendly coffee in London Tim (again) stepped up to help.&lt;/p&gt;

&lt;p&gt;He asked me if there was an aspect of Mu that needed attention but which I
didn’t have time to properly tackle. He explained he could own this part of the
codebase, thus giving me some time back to concentrate on all the other things
that needed doing. I explained the Mu and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip&lt;/code&gt; problem and we quickly came to
the conclusion that we should use the built-in capability of Python to create
virtual environments: isolated Python sandboxes into which packages could be
installed with no problems.&lt;/p&gt;

&lt;p&gt;You can probably guess where this is going…&lt;/p&gt;

&lt;p&gt;It turns out there are two ways to manage Python virtual environments: the
built-in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;venv&lt;/code&gt; module and the third-party &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;virtualenv&lt;/code&gt; package. Furthermore,
it turns out that automatically creating isolated Python environments isn’t
quite as easy as one might think.&lt;/p&gt;

&lt;p&gt;In exactly the same way we assumed a user’s home directory would always be
writeable, our assumptions about users’ computers and the naïveté of
“just automate the use of a virtual environment” opened up a veritable can of
worms. While this approach worked fine for most people, there were significant
numbers of edge cases, each of which required investigation and a solution.&lt;/p&gt;

&lt;p&gt;Let’s be honest here, asking a beginner to investigate this sort of technical
problem feels like trying to do a &lt;a href=&quot;https://en.wikipedia.org/wiki/Talk-down_aircraft_landing&quot;&gt;talk down aircraft landing&lt;/a&gt;,
yet Tim is both determined and a gifted technical communicator. Over the course
of a few months Tim was able to engage with many confused beginner developers
(along with a few highly experienced coders who’d also stumbled upon Mu) to
iron out the problems when creating a virtual environment for users.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://madewith.mu/assets/splash_screen.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In case you’re wondering, it is this process that happens on first run of Mu
(which is why Mu takes significantly longer at this moment). It’s also why we
engaged with long-time friend of Mu and Pythonic designer extraordinaire
&lt;a href=&quot;https://www.dev.ngo/&quot;&gt;Steve Hawkes&lt;/a&gt; to produce the funky animation of
Penelope the Python (our mascot).&lt;/p&gt;

&lt;p&gt;The end result is, we hope, an opportunity to introduce our users to the
personality of Mu, while also doing a bunch of rather complicated house-keeping
on their behalf.&lt;/p&gt;

&lt;p&gt;Of course, Tim doesn’t have super powers and there are still kinks to be ironed
out. For instance, there is a &lt;a href=&quot;https://bugs.python.org/issue46686&quot;&gt;bug in Python itself&lt;/a&gt;
(over which we have no control) which causes perhaps 90% of our current bug
report traffic. While we could work around the issue (it just so happens that
Tim is also a core Python developer and Windows expert, so one of the handful
of engineers on the planet with enough depth of knowledge and context to
understand exactly what would need to be done), the “correct” solution is for
it to be fixed in Python.&lt;/p&gt;

&lt;p&gt;Such are the challenges faced by Mu (and its developers, such as Tim) as we try
to make it work as simply as possible for our users, no matter their computing
environment.&lt;/p&gt;</description>
	<pubDate>Mon, 14 Nov 2022 08:00:00 +0000</pubDate>
</item>
<item>
	<title>John Ludhi/nbshare.io: Enable Python Virtual Enviornment in Visual Studio Code on Windows</title>
	<guid>https://www.nbshare.io/notebook/133195809/Enable-Python-Virtual-Enviornment-in-Visual-Studio-Code-on-Windows/</guid>
	<link>https://www.nbshare.io/notebook/133195809/Enable-Python-Virtual-Enviornment-in-Visual-Studio-Code-on-Windows/</link>
	<description>&lt;div&gt;&lt;h1&gt;Enable Python Virtual Enviornment in Visual Studio Code on Windows&lt;/h1&gt;&lt;h2&gt;Install Python&lt;/h2&gt;&lt;p class=&quot;&quot;&gt;Go to Microsoft Store and search for Python. Install the latest Python version.&amp;#160;&lt;/p&gt;&lt;h2&gt;Install Python Extension in Vs Code&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Open Vs Code and go to file &amp;gt; Preferences &amp;gt; Extensions&lt;/li&gt;&lt;li&gt;Search for Python and install the Python shown in the snapshot below.&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;medium-insert-images&quot;&gt;
    &lt;img src=&quot;https://www.nbshare.io/static/snapshots/2022-11-13%2012_43_40-Visual%20Studio%20Code.png&quot; alt=&quot;&quot; class=&quot;img-fluid&quot; /&gt;
        
&lt;/div&gt;&lt;ul&gt;&lt;li&gt;From the Vs Code top menu, click on Terminal and click &quot;New Terminal&quot;Create Python Virtual Environment&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;In the Terminal window, type following command &lt;/li&gt;&lt;li&gt;python3 -m venv venvpy310 and hit Enter&lt;/li&gt;&lt;li&gt;Go to file &amp;gt; Preferences &amp;gt; Settings and search for python.&amp;#160;&lt;/li&gt;&lt;li&gt;Then enter the path of Python Interpreter from virtual environment folder that you just created as shown below.&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;medium-insert-images&quot;&gt;
    &lt;img src=&quot;https://www.nbshare.io/static/snapshots/2022-11-13%2012_48_28-Settings%20-%20Visual%20Studio%20Code.png&quot; alt=&quot;&quot; class=&quot;img-fluid&quot; /&gt;
        
&lt;/div&gt;&lt;ul&gt;&lt;li&gt;Close the Vs Code and Reopen.&lt;/li&gt;&lt;li&gt;Now your terminal should have Python Virtual environment initialized automatically as shown below.&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;medium-insert-images&quot;&gt;
    &lt;img src=&quot;https://www.nbshare.io/static/snapshots/2022-11-13%2012_54_54-Settings%20-%20Visual%20Studio%20Code.png&quot; alt=&quot;&quot; class=&quot;img-fluid&quot; /&gt;
        
&lt;/div&gt;&lt;p class=&quot;&quot;&gt;Note you might run in to following error on Windows Power shell...&lt;/p&gt;&lt;pre&gt;vscode Activate.ps1  +  FullyQualifiedErrorId : UnauthorizedAccess&lt;/pre&gt;&lt;p class=&quot;&quot;&gt;To resolve this...&lt;/p&gt;&lt;p class=&quot;&quot;&gt;Open Windows power shell and run following command...&lt;/p&gt;&lt;pre&gt;Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser&lt;/pre&gt;&lt;p class=&quot;&quot;&gt;Close and Re-open Vs Code, Now everything should work fine.&lt;/p&gt;&lt;div class=&quot;medium-insert-buttons&quot;&gt;
    
    &lt;ul class=&quot;medium-insert-buttons-addons&quot;&gt;
            &lt;li&gt;
            &lt;li&gt;
    &lt;/li&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Mon, 14 Nov 2022 01:38:38 +0000</pubDate>
</item>

</channel>
</rss>
