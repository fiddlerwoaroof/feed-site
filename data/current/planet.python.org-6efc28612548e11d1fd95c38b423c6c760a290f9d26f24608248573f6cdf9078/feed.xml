<?xml version="1.0"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/">

<channel>
	<title>Planet Python</title>
	<link>http://planetpython.org/</link>
	<language>en</language>
	<description>Planet Python - http://planetpython.org/</description>

<item>
	<title>Tryton News: Newsletter for September 2021</title>
	<guid>https://discuss.tryton.org/t/newsletter-for-september-2021/4525</guid>
	<link>https://discuss.tryton.org/t/newsletter-for-september-2021/4525</link>
	<description>&lt;div&gt; &lt;/div&gt;
&lt;p&gt;&lt;div class=&quot;lightbox-wrapper&quot;&gt;&lt;a class=&quot;lightbox&quot; href=&quot;https://discuss-cdn.tryton.org/uploads/default/original/2X/9/953883dc17d8ffd73a59629b7b12713f38e150ea.jpeg&quot; title=&quot;Green and Gray Scissors&quot;&gt;&lt;img src=&quot;https://discuss-cdn.tryton.org/uploads/default/optimized/2X/9/953883dc17d8ffd73a59629b7b12713f38e150ea_2_690x459.jpeg&quot; alt=&quot;Green and Gray Scissors&quot; width=&quot;690&quot; height=&quot;459&quot; /&gt;&lt;div class=&quot;meta&quot;&gt;
&lt;span class=&quot;filename&quot;&gt;Green and Gray Scissors&lt;/span&gt;&lt;span class=&quot;informations&quot;&gt;1280×853 222 KB&lt;/span&gt;
&lt;/div&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;We hope that everybody had a nice Summer and enjoyed their holidays. The Tryton team continued working on the ERP and we are back with a resume of the latest improvements.&lt;/p&gt;
&lt;h2 id=&quot;heading--user&quot;&gt;Changes for the User&lt;/h2&gt;
&lt;p&gt;We added a &lt;a href=&quot;https://bugs.tryton.org/issue10563&quot;&gt;frame around the image widget&lt;/a&gt;. This makes the widget cleaner when empty.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bugs.tryton.org/issue10381&quot;&gt;More party identifiers&lt;/a&gt; and &lt;a href=&quot;https://bugs.tryton.org/issue10643&quot;&gt;tax identifiers&lt;/a&gt; have been added for Austria, Ukraine and Vietnam.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://bugs.tryton.org/issue10518&quot;&gt;rule keywords from statement lines are now stored&lt;/a&gt; in such way that they can be used for future matching. This adds a form of learning behavior to the statement rules engine.&lt;/p&gt;
&lt;p&gt;We added a &lt;a href=&quot;https://bugs.tryton.org/issue10424&quot;&gt;new wizard to split accounting lines&lt;/a&gt;.  This is useful to reschedule payable or receivable lines by applying a new maturity date to each new line. The wizard can also be used on dunning and invoice lines to reschedule them.&lt;/p&gt;
&lt;p&gt;It is now possible to &lt;a href=&quot;https://bugs.tryton.org/issue10656&quot;&gt;set accounts for taxes of type “None”&lt;/a&gt;. This is useful for taxes that are entered manually on the invoice because the account will be filled in automatically.&lt;/p&gt;
&lt;h2 id=&quot;heading--new-modules&quot;&gt;New Modules&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;https://docs.tryton.org/projects/modules-stock-package-shipping-sendcloud/en/latest/&quot;&gt;&lt;em&gt;Stock Package Shipping Sendcloud Module&lt;/em&gt;&lt;/a&gt; allows package labels to be generated for shipments made by any of &lt;a href=&quot;https://www.sendcloud.com/&quot;&gt;Sendcloud’s&lt;/a&gt; supported carriers.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://docs.tryton.org/projects/modules-account-budget/en/latest/&quot;&gt;&lt;em&gt;Account Budget Module&lt;/em&gt;&lt;/a&gt; provides the ability to set budgets for accounts over a defined period of time. These budgets can then be used to track the total amount from relevant transactions against the budgeted amount.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://docs.tryton.org/projects/modules-analytic-budget/en/latest/&quot;&gt;&lt;em&gt;Analytic Budget Module&lt;/em&gt;&lt;/a&gt; provides the ability to set budgets for analytic accounts over a defined period of time. These budgets can then be used to track the total amount from relevant transactions against the budgeted amount.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://docs.tryton.org/projects/modules-product-image/en/latest/&quot;&gt;&lt;em&gt;Product Image Module&lt;/em&gt;&lt;/a&gt; adds images to each product and variant.&lt;/p&gt;
&lt;h2 id=&quot;heading--sysadmin&quot;&gt;Changes for the System Administrator&lt;/h2&gt;
&lt;p&gt;We &lt;a href=&quot;https://bugs.tryton.org/issue10577&quot;&gt;improved the error management&lt;/a&gt; in the script used to import postal codes.&lt;/p&gt;
&lt;h2 id=&quot;heading--developer&quot;&gt;Changes for the Developer&lt;/h2&gt;
&lt;p&gt;We &lt;a href=&quot;https://bugs.tryton.org/issue10572&quot;&gt;moved and renamed the &lt;code&gt;cost_warehouse&lt;/code&gt;&lt;/a&gt; from the &lt;code&gt;product_cost_warehouse&lt;/code&gt; module to the &lt;code&gt;warehouse&lt;/code&gt; in the &lt;code&gt;stock&lt;/code&gt; module. By doing this it can now be used by any module that depends on the &lt;code&gt;stock&lt;/code&gt; module.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://bugs.tryton.org/issue10595&quot;&gt;complete locale definition&lt;/a&gt; for the user’s language is now sent to the clients.&lt;/p&gt;
&lt;p&gt;Proteus now also fills in the &lt;a href=&quot;https://bugs.tryton.org/issue10600&quot;&gt;wizard &lt;code&gt;actions&lt;/code&gt; attribute when the result is an empty list&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://bugs.tryton.org/issue10609&quot;&gt;number widgets’ &lt;code&gt;width&lt;/code&gt; attribute&lt;/a&gt; is now also used as its default display width.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;currency&lt;/code&gt; module defines a &lt;a href=&quot;https://bugs.tryton.org/issue10598&quot;&gt;new &lt;code&gt;Monetary&lt;/code&gt; field&lt;/a&gt;. This is derived from the &lt;code&gt;Numeric&lt;/code&gt; field by adding a &lt;code&gt;currency&lt;/code&gt; attribute which contains the name of the field which stores the currency. The desktop clients render these fields using the monetary format and with the currency symbol by default.&lt;/p&gt;
&lt;p&gt;It is now also possible to &lt;a href=&quot;https://bugs.tryton.org/issue10596&quot;&gt;use a string as the &lt;code&gt;digits&lt;/code&gt; value on number fields&lt;/a&gt; (instead of the usual pair of integers). The string must contain the name of a &lt;code&gt;Many2One&lt;/code&gt; field which points to a Model that inherits from &lt;code&gt;DigitsMixin&lt;/code&gt; and that provides a &lt;code&gt;get_digits&lt;/code&gt; method.&lt;br /&gt;
This allowed the removal of all the &lt;code&gt;Function&lt;/code&gt; fields that provided the &lt;a href=&quot;https://bugs.tryton.org/issue10598&quot;&gt;currency&lt;/a&gt; and &lt;a href=&quot;https://bugs.tryton.org/issue10677&quot;&gt;unit digits&lt;/a&gt;.&lt;br /&gt;
Another benefit is that clients cache the value for each &lt;code&gt;DigitsMixin&lt;/code&gt; record for 1 day by default, so this change also reduces the load on the server.&lt;/p&gt;
&lt;p&gt;We &lt;a href=&quot;https://bugs.tryton.org/issue10640&quot;&gt;reduced the number of times we save the cost values&lt;/a&gt; when doing multiple moves.&lt;/p&gt;
&lt;p&gt;We no longer try to &lt;a href=&quot;https://bugs.tryton.org/issue10652&quot;&gt;read records that were deleted&lt;/a&gt; after being instantiated from a browse list.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://bugs.tryton.org/issue10678&quot;&gt;digits argument to the &lt;code&gt;format_number&lt;/code&gt; method of &lt;code&gt;Report&lt;/code&gt; is now optional&lt;/a&gt;. If it is not specified, or is set to &lt;code&gt;None&lt;/code&gt;, it will display all the significant digits.&lt;/p&gt;
            &lt;p&gt;&lt;small&gt;1 post - 1 participant&lt;/small&gt;&lt;/p&gt;
            &lt;p&gt;&lt;a href=&quot;https://discuss.tryton.org/t/newsletter-for-september-2021/4525&quot;&gt;Read full topic&lt;/a&gt;&lt;/p&gt;</description>
	<pubDate>Wed, 01 Sep 2021 07:00:34 +0000</pubDate>
</item>
<item>
	<title>Django Weblog: Django bugfix release: 3.2.7</title>
	<guid>https://www.djangoproject.com/weblog/2021/sep/01/bugfix-release/</guid>
	<link>https://www.djangoproject.com/weblog/2021/sep/01/bugfix-release/</link>
	<description>&lt;p&gt;Today we've issued the &lt;a class=&quot;reference external&quot; href=&quot;https://docs.djangoproject.com/en/stable/releases/3.2.7/&quot;&gt;3.2.7&lt;/a&gt; bugfix release.&lt;/p&gt;
&lt;p&gt;The release package and checksums are available from &lt;a class=&quot;reference external&quot; href=&quot;http://www.djangoproject.com/download/&quot;&gt;our downloads page&lt;/a&gt;, as well as from the Python Package Index. The PGP key ID used for this release is Mariusz Felisiak: &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/felixxm.gpg&quot;&gt;2EF56372BA48CD1B&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Wed, 01 Sep 2021 05:54:22 +0000</pubDate>
</item>
<item>
	<title>TestDriven.io: Django REST Framework and Elasticsearch</title>
	<guid>https://testdriven.io/blog/django-drf-elasticsearch/</guid>
	<link>https://testdriven.io/blog/django-drf-elasticsearch/</link>
	<description>This tutorial looks at how to integrate Django REST Framework with Elasticsearch.</description>
	<pubDate>Tue, 31 Aug 2021 22:28:15 +0000</pubDate>
</item>
<item>
	<title>Sandipan Dey: Probabilistic Deep Learning with Tensorflow</title>
	<guid/>
	<link>
	<description>In this blog, we shall discuss on how to implement probabilistic deep learning models using Tensorflow. The problems to be discussed in this blog appeared in the exercises / projects in the coursera course “Probabilistic Deep Learning“, by Imperial College, London, as a part of TensorFlow 2 for Deep Learning Specialization. The problem statements / &amp;#8230; &lt;a href=&quot;https://sandipanweb.wordpress.com/2021/09/01/probabilistic-deep-learning-with-tensorflow/&quot; class=&quot;more-link&quot;&gt;Continue reading &lt;span class=&quot;screen-reader-text&quot;&gt;Probabilistic Deep Learning with&amp;#160;Tensorflow&lt;/span&gt;&lt;/a&gt;</description>
	<pubDate>Tue, 31 Aug 2021 21:40:37 +0000</pubDate>
</item>
<item>
	<title>PyCoder’s Weekly: Issue #488 (Aug. 31, 2021)</title>
	<guid>https://pycoders.com/issues/488</guid>
	<link>https://pycoders.com/issues/488</link>
	<description>&lt;p&gt; &lt;span&gt;#488 – AUGUST 31, 2021&lt;/span&gt;&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/issues/488&quot;&gt;View in Browser »&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://pycoders.com&quot;&gt;&lt;img alt=&quot;The PyCoder&amp;rsquo;s Weekly Logo&quot; src=&quot;https://cdn.pycoders.com/37bdf31dc645f968ffb90196e5d38ff5&quot; /&gt;&lt;/a&gt;&lt;/p&gt; &lt;hr /&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/6935/feed&quot; target=&quot;_blank&quot;&gt;Python Ranks #1 in IEEE &amp;ldquo;Top Programming Languages&amp;rdquo;&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &amp;ldquo;Python dominates as the de facto platform for new technologies&amp;rdquo; and &amp;ldquo;Learn Python. That&amp;rsquo;s the biggest takeaway we can give you from its continued dominance of IEEE Spectrum&amp;rsquo;s annual interactive rankings of the top programming languages. You don&amp;rsquo;t have to become a dyed-in-the-wool Pythonista, but learning the language well enough to use one of the vast number of libraries written for it is probably worth your time.&amp;rdquo;&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/6935/feed&quot; target=&quot;_blank&quot;&gt;IEEE.ORG&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/6920/feed&quot; target=&quot;_blank&quot;&gt;skybison: Instagram&amp;rsquo;s Experimental Performance Oriented Greenfield Implementation of Python&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &amp;ldquo;Skybison is experimental performance-oriented greenfield implementation of Python 3.8. It contains a number of performance optimizations, including: small objects; a moving GC; hidden classes; bytecode inline caching; type-specialized bytecode; an experimental template JIT.&amp;rdquo;&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/6920/feed&quot; target=&quot;_blank&quot;&gt;GITHUB.COM/FACEBOOKEXPERIMENTAL&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/6907/feed&quot; target=&quot;_blank&quot;&gt;Start Your Free Scout APM Trial, No CC Needed, and Receive a $5 Donation to the OSS of Your Choice&lt;/a&gt;&lt;/h3&gt; &lt;a href=&quot;https://pycoders.com/link/6907/feed&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://cdn.pycoders.com/8f3754a5f65066cbf57f632a5c4f920f&quot; alt=&quot;alt&quot; /&gt;&lt;/a&gt; &lt;p&gt; Scout APM is leading-edge application performance and error monitoring designed to help devs find and fix observability issues before the customer ever sees them. You can connect your error reporting and APM data on one platform, with Scout&amp;rsquo;s &lt;a href=&quot;https://pycoders.com/link/6907/feed&quot; target=&quot;_blank&quot;&gt;new error monitoring feature add-on →&lt;/a&gt;&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/6907/feed&quot; target=&quot;_blank&quot;&gt;SCOUT APM&lt;/a&gt;&lt;/span&gt; &lt;span&gt;sponsor&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/6916/feed&quot; target=&quot;_blank&quot;&gt;How to Use Optional Arguments When Defining Python Functions&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; In this tutorial, you&amp;rsquo;ll learn about optional arguments in Python and how to define functions with default values. You&amp;rsquo;ll also learn how to create functions that accept any number of arguments using &lt;code&gt;args&lt;/code&gt; and &lt;code&gt;kwargs&lt;/code&gt;.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/6916/feed&quot; target=&quot;_blank&quot;&gt;REAL PYTHON&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/6910/feed&quot; target=&quot;_blank&quot;&gt;Python Project-Local Virtualenv Management&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; On UNIX-like operating systems you can have the Python equivalent of &lt;code&gt;node_modules&lt;/code&gt; today, for every Python version, without changing your workflows.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/6910/feed&quot; target=&quot;_blank&quot;&gt;HYNEK SCHLAWACK&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/6943/feed&quot; target=&quot;_blank&quot;&gt;Humble Software Bundle: Python Superpowers 2021&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; Pick up the awesome programming potential of Python with software like Mastering PyCharm (2021 Edition) &amp;amp; Object-Oriented Programming (OOP) in Python. Pay what you want &amp;amp; support charity!&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/6943/feed&quot; target=&quot;_blank&quot;&gt;HUMBLEBUNDLE.COM&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/6917/feed&quot; target=&quot;_blank&quot;&gt;Join the PyCon US 2022 Team!&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; The PyCon US organizers are looking for motivated volunteers who want to contribute their time and knowledge to make this year&amp;rsquo;s conference a great success.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/6917/feed&quot; target=&quot;_blank&quot;&gt;PYCON US&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/6921/feed&quot; target=&quot;_blank&quot;&gt;Python 3.9.7 and 3.8.12 Are Now Available&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; More info in the &lt;a href=&quot;https://pycoders.com/link/6934/feed&quot; target=&quot;_blank&quot;&gt;full changelog.&lt;/a&gt;&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/6921/feed&quot; target=&quot;_blank&quot;&gt;CPYTHON DEV BLOG&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;h2&gt;Discussions&lt;/h2&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/6923/feed&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;math.sqrt&lt;/code&gt; vs &lt;code&gt;numpy.sqrt&lt;/code&gt; vs &lt;code&gt;x ** 0.5&lt;/code&gt; Performance Discussion&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; Andrej Karpathy (Director of AI at Tesla) shares an interesting performance observation on this Twitter thread that turns into a tale about accurate benchmarking. Calculating &lt;code&gt;math.sqrt(1337.0)&lt;/code&gt; appears to be 10x faster than &lt;code&gt;numpy.sqrt(1337.0)&lt;/code&gt;. Python&amp;rsquo;s built-in square root (&lt;code&gt;x ** 0.5&lt;/code&gt;) appears to be even faster. However, most of the performance differences seem to come from the benchmark setup, &lt;a href=&quot;https://pycoders.com/link/6933/feed&quot; target=&quot;_blank&quot;&gt;as Ishan Bhatt explains in this writeup.&lt;/a&gt;&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/6923/feed&quot; target=&quot;_blank&quot;&gt;TWITTER.COM/KARPATHY&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;h2&gt;Python Jobs&lt;/h2&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/6922/feed&quot; target=&quot;_blank&quot;&gt;Data Engineer - Python &amp;amp; PostgreSQL (Newport Beach, CA, USA)&lt;/a&gt;&lt;/h3&gt; &lt;p&gt;&lt;a href=&quot;https://pycoders.com/link/6922/feed&quot; target=&quot;_blank&quot;&gt;Research Affiliates&lt;/a&gt;&lt;/p&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/6940/feed&quot; target=&quot;_blank&quot;&gt;Sr. Backend Developer (Amsterdam, Netherlands)&lt;/a&gt;&lt;/h3&gt; &lt;p&gt;&lt;a href=&quot;https://pycoders.com/link/6940/feed&quot; target=&quot;_blank&quot;&gt;GUTS Tickets&lt;/a&gt;&lt;/p&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/6944/feed&quot; target=&quot;_blank&quot;&gt;Backend Software Engineer (Anywhere)&lt;/a&gt;&lt;/h3&gt; &lt;p&gt;&lt;a href=&quot;https://pycoders.com/link/6944/feed&quot; target=&quot;_blank&quot;&gt;Catalpa International&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://www.pythonjobshq.com?utm_source=newsletter&amp;utm_campaign=pycoders488&amp;utm_medium=feed&quot; target=&quot;_blank&quot;&gt;More Python Jobs &amp;gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt; &lt;h2&gt;Articles &amp;amp; Tutorials&lt;/h2&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/6909/feed&quot; target=&quot;_blank&quot;&gt;A Python Data Scientist&amp;rsquo;s Guide to the Apple Silicon Transition&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; A break down of what Apple Silicon means for Python users today, especially those doing scientific computing and data science: what works, what doesn&amp;rsquo;t, and where this might be going.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/6909/feed&quot; target=&quot;_blank&quot;&gt;STANLEY SEIBERT&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/6912/feed&quot; target=&quot;_blank&quot;&gt;Write an SQL Query Builder in 150 Lines of Python&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &amp;ldquo;This is the fourth article in a series about writing my own SQL query builder. Today, we&amp;rsquo;ll rewrite it from scratch, explore API design, learn when to be lazy, and look at worse and better ways of doing things – all in 150 lines of Python!&amp;rdquo;&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/6912/feed&quot; target=&quot;_blank&quot;&gt;ANDGRAVITY.COM&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/6906/feed&quot; target=&quot;_blank&quot;&gt;Rev APIs Solve All of Your Speech-to-Text Needs&lt;/a&gt;&lt;/h3&gt; &lt;a href=&quot;https://pycoders.com/link/6906/feed&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://cdn.pycoders.com/6f3098898c6e4598108c9fd8adec8562&quot; alt=&quot;alt&quot; /&gt;&lt;/a&gt; &lt;p&gt; Rev.ai is the most sophisticated automatic speech recognition in the world. Our speech-to-text APIs are more accurate, easier to use, and have less bias than competitors like Google, Amazon, and Microsoft. &lt;a href=&quot;https://pycoders.com/link/6906/feed&quot; target=&quot;_blank&quot;&gt;Try Rev.ai free for five hours right now →&lt;/a&gt;&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/6906/feed&quot; target=&quot;_blank&quot;&gt;REV.AI&lt;/a&gt;&lt;/span&gt; &lt;span&gt;sponsor&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/6925/feed&quot; target=&quot;_blank&quot;&gt;Splitting Datasets With &lt;code&gt;scikit-learn&lt;/code&gt; and &lt;code&gt;train_test_split()&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; Learn why it&amp;rsquo;s important to split your dataset in supervised machine learning and how to do that with &lt;code&gt;train_test_split()&lt;/code&gt; from the widely used &lt;code&gt;scikit-learn&lt;/code&gt; package.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/6925/feed&quot; target=&quot;_blank&quot;&gt;REAL PYTHON&lt;/a&gt;&lt;/span&gt; &lt;span&gt;video&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/6914/feed&quot; target=&quot;_blank&quot;&gt;Building With CircuitPython &amp;amp; Constraints of Python for Microcontrollers&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; Can you make a version of Python that fits within the memory constraints of a microcontroller and have it still feel like Python? That is the intention behind CircuitPython. This week on the show, Scott Shawcroft, who is the project lead for CircuitPython.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/6914/feed&quot; target=&quot;_blank&quot;&gt;REAL PYTHON&lt;/a&gt;&lt;/span&gt; &lt;span&gt;podcast&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/6927/feed&quot; target=&quot;_blank&quot;&gt;Parsing in Python: Tools and Libraries You Can Use&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &amp;ldquo;We present and compare all possible alternatives you can use to parse languages in Python. From libraries to parser generators, we present all options.&amp;rdquo;&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/6927/feed&quot; target=&quot;_blank&quot;&gt;GABRIELE TOMASSETTI&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/6928/feed&quot; target=&quot;_blank&quot;&gt;Low-Level Cache API in Django&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; Caching in Django can be implemented on different levels (or parts of the site). This article looks at how to use the low-level cache API in Django.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/6928/feed&quot; target=&quot;_blank&quot;&gt;J-O ERIKSSON&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/6905/feed&quot; target=&quot;_blank&quot;&gt;SonarLint Free and Open Source IDE Extension for Python Devs&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; Working in VS Code, PyCharm, Visual Studio, or Eclipse? SonarLint helps you find &amp;amp; fix Code Quality and Code Security issues in your Python codebase!&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/6905/feed&quot; target=&quot;_blank&quot;&gt;SONARSOURCE&lt;/a&gt;&lt;/span&gt; &lt;span&gt;sponsor&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/6930/feed&quot; target=&quot;_blank&quot;&gt;Python Behind the Scenes: How Async/Await Works in Python&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &amp;ldquo;The async/await pattern can be explained in a simple manner if you start from the ground up. And that&amp;rsquo;s what we&amp;rsquo;re going to do today.&amp;rdquo;&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/6930/feed&quot; target=&quot;_blank&quot;&gt;VICTOR SKVORTSOV&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/6931/feed&quot; target=&quot;_blank&quot;&gt;Using &lt;code&gt;libsqlite3&lt;/code&gt; Directly From Python With &lt;code&gt;ctypes&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; How to use &lt;code&gt;ctypes&lt;/code&gt; to run SQLite queries without using the built-in &lt;code&gt;sqlite3&lt;/code&gt; Python package, and without compiling anything.&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/6931/feed&quot; target=&quot;_blank&quot;&gt;GITHUB.COM/MICHALC&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/6945/feed&quot; target=&quot;_blank&quot;&gt;Handling Environment Variables in Python&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/6945/feed&quot; target=&quot;_blank&quot;&gt;BOB BELDERBOS&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/6947/feed&quot; target=&quot;_blank&quot;&gt;Simulating a Direct Digital Frequency Synthesizer in Python&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/6947/feed&quot; target=&quot;_blank&quot;&gt;NASH REILLEY&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;h2&gt;Projects &amp;amp; Code&lt;/h2&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/6941/feed&quot; target=&quot;_blank&quot;&gt;kmk_firmware: Clackety Keyboards Powered by Python&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/6941/feed&quot; target=&quot;_blank&quot;&gt;GITHUB.COM/KMKFW&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/6919/feed&quot; target=&quot;_blank&quot;&gt;ordered: Entropy-Controlled Contexts in Python&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/6919/feed&quot; target=&quot;_blank&quot;&gt;GITHUB.COM/HYPERC-AI&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/6915/feed&quot; target=&quot;_blank&quot;&gt;gopygo: Pure Python Go Parser, AST and Unparser Library&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/6915/feed&quot; target=&quot;_blank&quot;&gt;GITHUB.COM/UP9INC&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/6949/feed&quot; target=&quot;_blank&quot;&gt;cattrs: Complex Custom Class Converters for &lt;code&gt;attrs&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/6949/feed&quot; target=&quot;_blank&quot;&gt;GITHUB.COM/TINCHE&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/6937/feed&quot; target=&quot;_blank&quot;&gt;msl-apollo-entry-guidance: Python Implementation of the Apollo Entry Guidance Algorithm Used by NASA&amp;rsquo;s MSL Spacecraft&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/6937/feed&quot; target=&quot;_blank&quot;&gt;GITHUB.COM/THOMASANTONY&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/6946/feed&quot; target=&quot;_blank&quot;&gt;pylectronics: Reproduce Digital Electronics in Python&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/6946/feed&quot; target=&quot;_blank&quot;&gt;GITHUB.COM/FGARCI03&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/6948/feed&quot; target=&quot;_blank&quot;&gt;sqlmodel: SQL Databases in Python, Designed for Simplicity, Compatibility, and Robustness&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/6948/feed&quot; target=&quot;_blank&quot;&gt;GITHUB.COM/TIANGOLO&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;h2&gt;Events&lt;/h2&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/6951/feed&quot; target=&quot;_blank&quot;&gt;Real Python Office Hours (Virtual)&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; September 1, 2021&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/6951/feed&quot; target=&quot;_blank&quot;&gt;REALPYTHON.COM&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;h3&gt;&lt;a href=&quot;https://pycoders.com/link/6942/feed&quot; target=&quot;_blank&quot;&gt;PyConline AU 2021&lt;/a&gt;&lt;/h3&gt; &lt;p&gt; September 10 to September 13, 2021&lt;br /&gt; &lt;span&gt;&lt;a href=&quot;https://pycoders.com/link/6942/feed&quot; target=&quot;_blank&quot;&gt;PYCON.ORG.AU&lt;/a&gt;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;hr /&gt; &lt;p&gt;Happy Pythoning!&lt;br /&gt;This was PyCoder&amp;rsquo;s Weekly Issue #488.&lt;br /&gt;&lt;a href=&quot;https://pycoders.com/issues/488&quot;&gt;View in Browser »&lt;/a&gt;&lt;/p&gt; &lt;img src=&quot;https://pycoders.com/issues/488/open/feed&quot; width=&quot;1&quot; height=&quot;1&quot; alt=&quot;alt&quot; /&gt; 
        &lt;hr /&gt;
        &lt;p&gt;&lt;em&gt;[ Subscribe to 🐍 PyCoder&amp;rsquo;s Weekly 💌 – Get the best Python news, articles, and tutorials delivered to your inbox once a week &lt;a href=&quot;https://pycoders.com/?utm_source=pycoders&amp;utm_medium=feed&amp;utm_campaign=footer&quot;&gt;&amp;gt;&amp;gt; Click here to learn more&lt;/a&gt; ]&lt;/em&gt;&lt;/p&gt;</description>
	<pubDate>Tue, 31 Aug 2021 19:30:00 +0000</pubDate>
</item>
<item>
	<title>Will McGugan: Pretty printing JSON with Rich</title>
	<guid>https://www.willmcgugan.com/blog/tech/post/pretty-printing-json-with-rich/</guid>
	<link>https://www.willmcgugan.com/blog/tech/post/pretty-printing-json-with-rich/</link>
	<description>&lt;p&gt;If you work with &lt;a href=&quot;https://en.wikipedia.org/wiki/JSON&quot;&gt;JSON&lt;/a&gt; regularly (90% of Python developers I suspect) you might appreciate the &lt;code&gt;print_json&lt;/code&gt; function just landed in Rich v10.9.0&lt;/p&gt;
&lt;p&gt;If you call this function with a string, Rich will decode the string, reformat it, and print it to the console with nice syntax highlighting. Here's an example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from rich import print_json
print_json('{&quot;foo&quot;: [false, true, null]}')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here's the output:&lt;/p&gt;
&lt;div&gt;&lt;a&gt;&lt;/a&gt;
 &lt;img src=&quot;https://media.moyaproject.com/willmcgugan/uploads/thumbnails/techblog/765a9824-0a7f-11ec-908a-f23c91845b44.png/765a9824-0a7f-11ec-908a-f23c91845b44png.lg.3.jpeg&quot; title=&quot;print_json&quot; /&gt; 

&lt;div&gt;© 2021 Will McGugan&lt;/div&gt;


&lt;p&gt;Calling print_json with a string will decode the JSON and pretty print it.&lt;/p&gt;





&lt;/div&gt;
&lt;p&gt;Note that the atomic values &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt;, and &lt;code&gt;null&lt;/code&gt; have their own color. I find this helpful when scanning a JSON blob.&lt;/p&gt;
&lt;p&gt;If you call &lt;code&gt;print_json&lt;/code&gt; with a &lt;code&gt;data&lt;/code&gt; keyword argument it will &lt;em&gt;encode&lt;/em&gt; that data and  pretty print it in the same way.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;data = {
    &quot;foo&quot;: [
        3.1427,
        (
            &quot;Paul Atreides&quot;,
            &quot;Vladimir Harkonnen&quot;,
            &quot;Thufir Hawat&quot;,
        ),
    ],
    &quot;atomic&quot;: (False, True, None),
}
from rich import print_json
print_json(data=data)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here's the output:&lt;/p&gt;
&lt;div&gt;&lt;a&gt;&lt;/a&gt;
 &lt;img src=&quot;https://media.moyaproject.com/willmcgugan/uploads/thumbnails/techblog/17529bc2-0a81-11ec-908a-f23c91845b44.png/17529bc2-0a81-11ec-908a-f23c91845b44png.lg.3.jpeg&quot; title=&quot;JSON data&quot; /&gt; 

&lt;div&gt;© 2021 Will McGugan&lt;/div&gt;


&lt;p&gt;Calling the print_json function with a &lt;code&gt;data&lt;/code&gt; keyword argument.&lt;/p&gt;





&lt;/div&gt;
&lt;p&gt;Note that Rich will remove color if you pipe the output of your script to another program, so you can safely add syntax highlighting to your CLI tools.&lt;/p&gt;
&lt;p&gt;You can also pretty print JSON files from the command line with the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python -m rich.json data.json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here's an example of the output:&lt;/p&gt;
&lt;div&gt;&lt;a&gt;&lt;/a&gt;
 &lt;img src=&quot;https://media.moyaproject.com/willmcgugan/uploads/thumbnails/techblog/cdf325ce-0a7f-11ec-908a-f23c91845b44.png/cdf325ce-0a7f-11ec-908a-f23c91845b44png.lg.3.jpeg&quot; title=&quot;rich.json&quot; /&gt; 

&lt;div&gt;© 2021 Will McGugan&lt;/div&gt;


&lt;p&gt;Pretty printing a JSON file from the command line&lt;/p&gt;





&lt;/div&gt;
&lt;p&gt;This is admittedly a small addition to &lt;a href=&quot;https://github.com/willmcgugan/rich&quot;&gt;Rich&lt;/a&gt; but I'm already finding it helpful.&lt;/p&gt;
&lt;p&gt;Follow &lt;a href=&quot;https://twitter.com/willmcgugan&quot;&gt;@willmcgugan&lt;/a&gt; on Twitter for Rich and &lt;a href=&quot;https://github.com/willmcgugan/textual&quot;&gt;Textual&lt;/a&gt; updates.&lt;/p&gt;</description>
	<pubDate>Tue, 31 Aug 2021 17:43:52 +0000</pubDate>
</item>
<item>
	<title>Quansight Labs Blog: CZI EOSS4 Grants at Quansight Labs</title>
	<guid>https://labs.quansight.org/blog/2021/08/czi-eoss4-grants-at-quansight-labs/</guid>
	<link>https://labs.quansight.org/blog/2021/08/czi-eoss4-grants-at-quansight-labs/</link>
	<description>&lt;div&gt;&lt;p&gt;Here, at Quansight Labs, our goal is to work on sustaining the future of Open Source. We make sure we can live up to that goal by spending a significant amount of time working on impactful and critical infrastructure and projects within the Scientific Ecosystem.&lt;/p&gt;
&lt;p&gt;As such, our goals align with those of the &lt;a href=&quot;https://chanzuckerberg.com&quot;&gt;Chan Zuckerberg Initiative&lt;/a&gt; and, in particular, the &lt;a href=&quot;https://chanzuckerberg.com/rfa/essential-open-source-software-for-science/&quot;&gt;Essential Open Source Software for Science&lt;/a&gt; (EOSS) program that supports tools essential to biomedical research via funds for software maintenance, growth, development, and community engagement.&lt;/p&gt;
&lt;p&gt;CZI’s Essential Open Source Software for Science program supports software maintenance, growth, development, and community engagement for open source tools critical to science. And the Chan Zuckerberg Initiative was founded in 2015 to help solve some of society’s toughest challenges — from eradicating disease and improving education, to addressing the needs of our local communities. Their mission is to build a more inclusive, just, and healthy future for everyone.&lt;/p&gt;
&lt;p&gt;Today, we are thrilled to announce that the team at Quansight Labs &lt;a href=&quot;https://chanzuckerberg.com/newsroom/czi-awards-16-million-for-foundational-open-source-software-tools-essential-to-biomedicine/&quot;&gt;has been awarded&lt;/a&gt; five EOSS Cycle 4 grants to work on several projects within the PyData ecosystem. This post will introduce the successful grantees and their objectives for these two-year long grants.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://labs.quansight.org/blog/2021/08/czi-eoss4-grants-at-quansight-labs/&quot;&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 31 Aug 2021 17:01:00 +0000</pubDate>
</item>
<item>
	<title>Python for Beginners: How to Extract a Date from a .txt File in Python</title>
	<guid>https://www.pythonforbeginners.com/files/how-to-extract-a-date-from-a-txt-file-in-python</guid>
	<link>https://www.pythonforbeginners.com/files/how-to-extract-a-date-from-a-txt-file-in-python</link>
	<description>&lt;p&gt;In this tutorial, we’ll examine the different ways you can extract a date from a .txt file using Python programming. Python is a versatile language—as you’ll discover—and there are many solutions for this problem.&lt;/p&gt;



&lt;p&gt;First, we’ll look at using &lt;em&gt;regular expression&lt;/em&gt; patterns to search text files for dates that fit a predefined format. We’ll learn about using the &lt;strong&gt;re&lt;/strong&gt; library and creating our own regular expression searches.&lt;br /&gt;&lt;br /&gt;We’ll also examine &lt;strong&gt;datetime&lt;/strong&gt; objects and use them to convert strings into data models. Lastly, we’ll see how the &lt;strong&gt;datefinder&lt;/strong&gt; module simplifies the process of searching a text file for dates that haven’t been formatted, like we might find in natural language content.&lt;/p&gt;



&lt;h2&gt;Extract a Date from a .txt File using Regular Expression&lt;/h2&gt;



&lt;p&gt;Dates are written in many different formats. Sometimes people write month/day/year. Other dates might include times of the day, or the day of the week (Wednesday July 8, 2021 8:00PM).&lt;/p&gt;



&lt;p&gt;How dates are formatted is a factor to consider before we go about extracting them from text files.&amp;nbsp;&lt;/p&gt;



&lt;p&gt;For instance, if a date follows the month/date/year format, we can find it using a regular expression pattern. With regular expression, or &lt;strong&gt;regex&lt;/strong&gt; for short, we can search a text by matching a string to a predefined pattern.&amp;nbsp;&lt;/p&gt;



&lt;p&gt;The beauty of regular expression is that we can use special characters to create powerful search patterns. For instance, we can craft a pattern that will find all the formatted dates in the following body of text.&lt;/p&gt;



&lt;p&gt;&lt;em&gt;minutes.txt&lt;/em&gt;&lt;br /&gt;10/14/2021 &amp;#8211; Meeting with the client.&lt;br /&gt;07/01/2021 &amp;#8211; Discussed marketing strategies.&lt;br /&gt;12/23/2021 &amp;#8211; Interviewed a new team lead.&lt;br /&gt;01/28/2018 &amp;#8211; Changed domain providers.&lt;br /&gt;06/11/2017 &amp;#8211; Discussed moving to a new office.&lt;/p&gt;



&lt;h4&gt;Example: Finding formatted dates with regex&lt;/h4&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;import re

# open the text file and read the data
file = open(&quot;minutes.txt&quot;,'r')

text = file.read()
# match a regex pattern for formatted dates
matches = re.findall(r'(\d+/\d+/\d+)',text)

print(matches)
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;[&amp;#8217;10/14/2021&amp;#8242;, &amp;#8217;07/01/2021&amp;#8242;, &amp;#8217;12/23/2021&amp;#8242;, &amp;#8217;01/28/2018&amp;#8242;, &amp;#8217;06/11/2017&amp;#8242;]&lt;/p&gt;



&lt;p&gt;The regex pattern here uses special characters to define the strings we want to extract from the text file. The characters &lt;strong&gt;d &lt;/strong&gt;and &lt;strong&gt;+&lt;/strong&gt; tell regex we’re looking for multiple digits within the text.&lt;/p&gt;



&lt;p&gt;We can also use regex to find dates that are formatted in different ways. By altering our regex pattern, we can find dates that use either a forward slash (&lt;strong&gt;\&lt;/strong&gt;) or a dash (&lt;strong&gt;&amp;#8211;&lt;/strong&gt;) as the separator.&lt;/p&gt;



&lt;p&gt;This works because regex allows for optional characters in the search pattern. We can specify that either character—a forward slash or dash—is an acceptable match.&lt;/p&gt;



&lt;p&gt;&lt;em&gt;apple2.txt&lt;/em&gt;&lt;br /&gt;The first Apple II was sold on 07-10-1977. The last of the Apple II&lt;br /&gt;models were discontinued on 10/15/1994.&lt;/p&gt;



&lt;h4&gt;Example: Matching dates with a regex pattern&lt;/h4&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;import re

# open a text file
f = open(&quot;apple2.txt&quot;, 'r')

# extract the file's content
content = f.read()

# a regular expression pattern to match dates
pattern = &quot;\d{2}&amp;#91;/-]\d{2}&amp;#91;/-]\d{4}&quot;

# find all the strings that match the pattern
dates = re.findall(pattern, content)

for date in dates:
    print(date)

f.close()
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;07-10-1977&lt;br /&gt;10/15/1994&lt;/p&gt;



&lt;p&gt;Examining the full extent of regex’s potential is beyond the scope of this tutorial. Try experimenting with some of the following special characters to learn more about using regular expression patterns to extract a date—or other information—from a .txt file.&lt;/p&gt;



&lt;h4&gt;Special Characters in Regex&lt;/h4&gt;



&lt;ul&gt;&lt;li&gt;\s &amp;#8211; A space character&lt;/li&gt;&lt;li&gt;\S &amp;#8211; Any character except for a space character&lt;/li&gt;&lt;li&gt;\d &amp;#8211; Any digit from 0 to 9&lt;/li&gt;&lt;li&gt;\D &amp;#8211; And any character except for a digit&lt;/li&gt;&lt;li&gt;\w &amp;#8211; Any word of characters or digits [a-zA-Z0-9]&lt;/li&gt;&lt;li&gt;\W &amp;#8211; Any non-word characters&lt;/li&gt;&lt;/ul&gt;



&lt;h2&gt;Extract a Datetime Object from a .txt File&lt;/h2&gt;



&lt;p&gt;In Python we can use the &lt;strong&gt;datetime&lt;/strong&gt; library for manipulating dates and working with time. The datetime library comes pre-packed with Python, so there’s no need to install it.&lt;/p&gt;



&lt;p&gt;By using datetime objects, we have more control over string data read from text files. For example, we can use a datetime object to get a copy of the current date and time of our computer.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;import datetime

now = datetime.datetime.now()
print(now)
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;2021-07-04 20:15:49.185380&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;In the following example, we’ll extract a date from a company .txt file that mentions a scheduled meeting. Our employer needs us to scan a group of such documents for dates. Later, we plan to add the information we gather to a SQLite database.&lt;br /&gt;&lt;br /&gt;We’ll begin by defining a regex pattern that will match our date format. Once a match is found, we&amp;#8217;ll use it to create a &lt;em&gt;datetime&lt;/em&gt; object from the string data.&lt;/p&gt;



&lt;p&gt;&lt;em&gt;schedule.txt&lt;/em&gt;&lt;br /&gt;&lt;/p&gt;



&lt;p&gt;&lt;em&gt;schedule.txt&lt;/em&gt;&lt;br /&gt;The project begins next month. Denise has scheduled a meeting in the conference room at the Embassy Suits on 10-7-2021.&lt;/p&gt;



&lt;h4&gt;Example: Creating datetime objects from file data&lt;/h4&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;import re
from datetime import datetime

# open the data file
file = open(&quot;schedule.txt&quot;, 'r')
text = file.read()

match = re.search(r'\d+-\d+-\d{4}', text)
# create a new datetime object from the regex match
date = datetime.strptime(match.group(), '%d-%m-%Y').date()
print(f&quot;The date of the meeting is on {date}.&quot;)
file.close()
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;The date of the meeting is on 2021-07-10.&lt;/code&gt;&lt;/pre&gt;



&lt;h2&gt;Extracting Dates from a Text File with the Datefinder Module&lt;/h2&gt;



&lt;p&gt;The Python &lt;strong&gt;datefinder&lt;/strong&gt; module can locate dates in a body of text. Using the &lt;em&gt;find_dates&lt;/em&gt;() method, it&amp;#8217;s possible to search text data for many different types of dates. Datefinder will return any dates it finds in the form of a datetime object.&lt;br /&gt;&lt;br /&gt;Unlike the other packages we’ve discussed in this guide, Python does not come with datefinder. The easiest way to install the datefinder module is to use &lt;strong&gt;pip&lt;/strong&gt; from the command prompt.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;pip install datefinder&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;With datefinder installed, we’re ready to open files and extract data. For this example, we’ll use a text document that introduces a fictitious company project. Using datefinder, we’ll extract each date from the .txt file, and print their datimeobject counterparts.&lt;/p&gt;



&lt;p&gt;Feel free to save the file locally and follow along.&lt;/p&gt;



&lt;p&gt;&lt;em&gt;project_timeline.txt&lt;/em&gt;&lt;br /&gt;PROJECT PEPPER&lt;/p&gt;



&lt;p&gt;All team members must read the project summary by&lt;br /&gt;January 4th, 2021.&lt;/p&gt;



&lt;p&gt;The first meeting of PROJECT PEPPER begins on 01/15/2021&lt;/p&gt;



&lt;p&gt;at 9:00am. Please find the time to read the following links by then.&lt;br /&gt;&lt;em&gt;created on&lt;/em&gt; 08-12-2021 at 05:00 PM&lt;/p&gt;



&lt;p&gt;This project file has dates in many formats. Dates are written using dashes and forward slashes. What’s worse, the month January is written out. How can we find all these dates with Python?&lt;/p&gt;



&lt;h4&gt;Example: Using datefinder to extract dates from file data&lt;/h4&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;import datefinder

# open the project schedule
file = open(&quot;project_timeline.txt&quot;,'r')

content = file.read()

# datefinder will find the dates for us
matches = list(datefinder.find_dates(content))

if len(matches) &amp;gt; 0:
    for date in matches:
        print(date)
else:
    print(&quot;Found no dates.&quot;)

file.close()
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;br /&gt;2021-01-04 00:00:00&lt;br /&gt;2021-01-15 09:00:00&lt;br /&gt;2021-08-12 17:00:00&lt;/p&gt;



&lt;p&gt;As you can see from the output, datefinder is able to find a variety of date formats in the text. Not only is the package capable of recognizing the names of months, but it also recognizes the time of day if it’s included in the text.&lt;/p&gt;



&lt;p&gt;In another example, we’ll use the datefinder package to extract a date from a .txt file that includes the dates for a popular singer&amp;#8217;s upcoming tour.&lt;/p&gt;



&lt;p&gt;&lt;em&gt;tour_dates.txt&lt;/em&gt;&lt;br /&gt;Saturday July 25, 2021 at 07:00 PM &amp;nbsp; &amp;nbsp; Inglewood, CA&lt;br /&gt;Sunday July 26, 2021 at 7 PM &amp;nbsp; &amp;nbsp; Inglewood, CA&lt;br /&gt;09/30/2021 7:30PM&amp;nbsp; Foxbourough, MA&lt;/p&gt;



&lt;h4&gt;Example: Extract a tour date and times from a .txt file with datefinder&lt;/h4&gt;



&lt;pre class=&quot;wp-block-code language-python&quot;&gt;&lt;code&gt;import datefinder

# open the project schedule
file = open(&quot;tour_dates.txt&quot;,'r')

content = file.read()

# datefinder will find the dates for us
matches = list(datefinder.find_dates(content))

if len(matches) &amp;gt; 0:
    print(&quot;TOUR DATES AND TIMES&quot;)
    print(&quot;--------------------&quot;)
    for date in matches:
        # use f string to format the text
        print(f&quot;{date.date()}     {date.time()}&quot;)
else:
    print(&quot;Found no dates.&quot;)
file.close()
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;TOUR DATES AND TIMES&lt;br /&gt;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8211;&lt;br /&gt;2021-07-25 &amp;nbsp; &amp;nbsp; 19:00:00&lt;br /&gt;2021-07-26 &amp;nbsp; &amp;nbsp; 19:00:00&lt;br /&gt;2021-09-30 &amp;nbsp; &amp;nbsp; 19:30:00&lt;/p&gt;



&lt;p&gt;As you can see from the examples, datefinder can find many different types of dates and times. This is useful if the dates you’re looking for don’t have a certain format, as will often be the case in natural language data.&lt;/p&gt;



&lt;h2&gt;Summary&lt;/h2&gt;



&lt;p&gt;In this post, we’ve covered several methods of how to extract a date or time from a .txt file. We’ve seen the power of regular expression to find matches in string data, and we’ve seen how to convert that data into a Python datetime object.&lt;br /&gt;&lt;br /&gt;Finally, if the dates in your text files don’t have a specified format—as will be the case in most files with natural language content—try the &lt;strong&gt;datefinder&lt;/strong&gt; module. With this Python package, it’s possible to extract dates and times from a text file that aren’t conveniently formatted ahead of time.&lt;/p&gt;



&lt;h2&gt;Related Posts&lt;/h2&gt;



&lt;p&gt;If you enjoyed this tutorial and are eager to learn more about Python—and we sincerely hope you are—follow these links for more great guides from Python for Beginners.&lt;/p&gt;



&lt;ul&gt;&lt;li&gt;How to use Python concatenation to join strings&lt;/li&gt;&lt;li&gt;Using &lt;a href=&quot;https://www.pythonforbeginners.com/error-handling/python-try-and-except&quot;&gt;Python try catch&lt;/a&gt; to mitigate errors and prevent crashes&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;The post &lt;a rel=&quot;nofollow&quot; href=&quot;https://www.pythonforbeginners.com/files/how-to-extract-a-date-from-a-txt-file-in-python&quot;&gt;How to Extract a Date from a .txt File in Python&lt;/a&gt; appeared first on &lt;a rel=&quot;nofollow&quot; href=&quot;https://www.pythonforbeginners.com&quot;&gt;PythonForBeginners.com&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Tue, 31 Aug 2021 14:52:02 +0000</pubDate>
</item>
<item>
	<title>Real Python: Splitting Datasets With scikit-learn and train_test_split()</title>
	<guid>https://realpython.com/courses/splitting-datasets-scikit-learn-train-test-split/</guid>
	<link>https://realpython.com/courses/splitting-datasets-scikit-learn-train-test-split/</link>
	<description>&lt;p&gt;One of the key aspects of supervised &lt;a href=&quot;https://realpython.com/learning-paths/machine-learning-python/&quot;&gt;machine learning&lt;/a&gt; is model evaluation and validation. When you evaluate the predictive performance of your model, it&amp;rsquo;s essential that the process be unbiased. Using &lt;a href=&quot;https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html&quot;&gt;&lt;strong&gt;&lt;code&gt;train_test_split()&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; from the data science library &lt;a href=&quot;https://scikit-learn.org/stable/index.html&quot;&gt;scikit-learn&lt;/a&gt;, you can split your dataset into subsets that minimize the potential for bias in your evaluation and validation process.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In this course, you&amp;rsquo;ll learn:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Why you need to &lt;strong&gt;split your dataset&lt;/strong&gt; in supervised machine learning&lt;/li&gt;
&lt;li&gt;Which &lt;strong&gt;subsets&lt;/strong&gt; of the dataset you need for an unbiased evaluation of your model&lt;/li&gt;
&lt;li&gt;How to use &lt;strong&gt;&lt;code&gt;train_test_split()&lt;/code&gt;&lt;/strong&gt; to split your data&lt;/li&gt;
&lt;li&gt;How to combine &lt;code&gt;train_test_split()&lt;/code&gt; with &lt;strong&gt;prediction methods&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition, you&amp;rsquo;ll get information on related tools from &lt;a href=&quot;https://scikit-learn.org/stable/modules/classes.html#module-sklearn.model_selection&quot;&gt;&lt;code&gt;sklearn.model_selection&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
        &lt;hr /&gt;
        &lt;p&gt;&lt;em&gt;[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp;amp; sweet Python Trick delivered to your inbox every couple of days. &lt;a href=&quot;https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer&quot;&gt;&amp;gt;&amp;gt; Click here to learn more and see examples&lt;/a&gt; ]&lt;/em&gt;&lt;/p&gt;</description>
	<pubDate>Tue, 31 Aug 2021 14:00:00 +0000</pubDate>
</item>
<item>
	<title>Stack Abuse: Random Projection: Theory and Implementation in Python with Scikit-Learn</title>
	<guid>https://stackabuse.com/random-projection-theory-and-implementation-in-python-with-scikit-learn/</guid>
	<link>https://stackabuse.com/random-projection-theory-and-implementation-in-python-with-scikit-learn/</link>
	<description>&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;This guide is an in-depth introduction to an unsupervised dimensionality reduction technique called &lt;strong&gt;&lt;em&gt;Random Projections&lt;/em&gt;&lt;/strong&gt;. A Random Projection can be used to reduce the complexity and size of data, making the data easier to process and visualize. It is also a preprocessing technique for input preparation to a classifier or a regressor.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Random Projection&lt;/strong&gt; is typically applied to highly-dimensional data, where other techniques such as &lt;strong&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://stackabuse.com/implementing-pca-in-python-with-scikit-learn/&quot;&gt;Principal Component Analysis (PCA)&lt;/a&gt;&lt;/strong&gt; can't do the data justice.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this guide, we'll delve into the details of &lt;strong&gt;&lt;em&gt;Johnson-Lindenstrauss lemma&lt;/em&gt;&lt;/strong&gt;, which lays the mathematical foundation of Random Projections. We'll also show how to perform Random Projection using Python's Scikit-Learn library, and use it to transform input data to a lower-dimensional space.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Theory is theory, and practice is practice&lt;/strong&gt;. As a practical illustration, we'll load the &lt;a rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot; href=&quot;https://www.jmlr.org/papers/volume5/lewis04a/lewis04a.pdf&quot;&gt;Reuters Corpus Volume I Dataset&lt;/a&gt;, and apply Gaussian Random Projection and Sparse Random Projection to it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;whatisarandomprojectionofadataset&quot;&gt;What is a Random Projection of a Dataset?&lt;/h3&gt;
&lt;p&gt;Put simply:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Random Projection is a method of &lt;strong&gt;dimensionality reduction&lt;/strong&gt; and &lt;strong&gt;data visualization&lt;/strong&gt; that simplifies the complexity of high-dimensional datasets.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The method generates a new dataset by taking the projection of each data point along a randomly chosen set of directions. The projection of a single data point onto a vector is mathematically equivalent to taking the &lt;strong&gt;dot product of the point with the vector&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s3.stackabuse.com/media/articles/random-projection-theory-and-implementation-in-python-with-scikit-learn-1.png&quot; alt=&quot;random projections illustration&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Given a data matrix \(X\) of dimensions \(mxn\) and a \(dxn\) matrix \(R\) whose columns are the vectors representing random directions, the Random Projection of \(X\) is given by \(X_p\).&lt;/p&gt;

  
    X
    p
  
  =
  X
  R

&lt;p&gt;Each vector representing a random direction, has dimensionality \(n\), which is the same as all data points of \(X\). If we take \(d\) random directions, then we end up with a \(d\) dimensional transformed dataset. For the purpose of this tutorial, we'll fix a few notations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;m&lt;/code&gt;: Total example points/samples of input data.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt;: Total features/attributes of the input data. It is also the dimensionality of the original data.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d&lt;/code&gt;: Dimensionality of the transformed data.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The idea of Random Projections is very similar to &lt;strong&gt;Principal Component Analysis (PCA)&lt;/strong&gt;, fundementally. However, in PCA, the projection matrix is computed via &lt;strong&gt;eigenvectors&lt;/strong&gt;, which can be computationally expensive for large matrices.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When performing Random Projection, the vectors are chosen randomly making it very efficient. The name &lt;em&gt;&quot;projection&quot;&lt;/em&gt; may be a little misleading as the vectors are chosen &lt;strong&gt;randomly&lt;/strong&gt;, the transformed points are mathematically not true projections but close to being true projections.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The data with reduced dimensions is easier to work with. Not only can it be visualized but it can also be used in the pre-processing stage to reduce the size of the original data.&lt;/p&gt;
&lt;h3 id=&quot;asimpleexample&quot;&gt;A Simple Example&lt;/h3&gt;
&lt;p&gt;Just to understand how the transformation works, let's take the following simple example.&lt;/p&gt;
&lt;p&gt;Suppose our input matrix \(X\) is given by:&lt;/p&gt;

  X
  =
  
    [
    
      
        
          1
        
        
          3
        
        
          2
        
        
          0
        
      
      
        
          0
        
        
          1
        
        
          2
        
        
          1
        
      
      
        
          1
        
        
          3
        
        
          0
        
        
          0
        
      
    
    ]
  

&lt;p&gt;And the projection matrix is given by:&lt;/p&gt;

  R
  =
  
    1
    2
  
  
    [
    
      
        
          1
        
        
          −&lt;!-- − --&gt;
          1
        
      
      
        
          1
        
        
          1
        
      
      
        
          1
        
        
          −&lt;!-- − --&gt;
          1
        
      
      
        
          1
        
        
          1
        
      
    
    ]
  

&lt;p&gt;The projection of X onto R is:&lt;/p&gt;

  
    X
    p
  
  =
  X
  R
  =
  
    1
    2
  
  
    [
    
      
        
          6
        
        
          0
        
      
      
        
          4
        
        
          0
        
      
      
        
          4
        
        
          2
        
      
    
    ]
  

&lt;blockquote&gt;
&lt;p&gt;We started with three points in a &lt;strong&gt;four-dimensional space&lt;/strong&gt;, and with clever matrix operations ended up with three transformed points in a &lt;strong&gt;two-dimensional space&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Note, some important attributes of the projection matrix \(R\). Each column is a unit matrix, i.e., the norm of each column is one. Also, the dot product of all columns taken pairwise (in this case only column 1 and column 2) is zero, indicating that both column vectors are orthogonal to each other.&lt;/p&gt;
&lt;p&gt;This makes the matrix, an &lt;strong&gt;&lt;em&gt;Orthonormal Matrix&lt;/em&gt;&lt;/strong&gt;. However, in case of the Random Projection technique, the projection matrix does not have to be a true orthonormal matrix when very high-dimensional data is involved.&lt;/p&gt;
&lt;p&gt;The success of Random Projection is based on an &lt;em&gt;awesome&lt;/em&gt; mathematical finding known as &lt;strong&gt;&lt;em&gt;Johnson-Lindenstrauss lemma&lt;/em&gt;&lt;/strong&gt;, which is explained in detail in the following section!&lt;/p&gt;
&lt;h4 id=&quot;thejohnsonlindenstrausslemma&quot;&gt;The Johnson-Lindenstrauss lemma&lt;/h4&gt;
&lt;p&gt;The Johnson-Lindenstrauss lemma is the mathematical basis for Random Projection:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Johnson-Lindenstrauss lemma states that if the data points lie in a &lt;strong&gt;very high-dimensional space&lt;/strong&gt;, then projecting such points on simple &lt;strong&gt;random directions preserves their pairwise distances&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Preserving pairwise distances&lt;/em&gt; implies that the pairwise distances between points in the original space are the same or almost the same as the pairwise distance in the projected lower-dimensional space.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Thus, the structure of data and clusters within data are maintained in a lower-dimensional space, while the complexity and size of data are reduced substantially.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this guide, we refer to the difference in the actual and projected pairwise distances as the &lt;strong&gt;&lt;em&gt;&quot;distortion&quot;&lt;/em&gt;&lt;/strong&gt; in data, which is introduced due to its projection in a new space.&lt;/p&gt;
&lt;p&gt;Johnson-Lindenstrauss lemma also provides a &lt;strong&gt;&lt;em&gt;&quot;safe&quot;&lt;/em&gt;&lt;/strong&gt; measure of the number of dimensions to project the data points onto so that the error/distortion lies within a certain range, so finding the target number of dimensions is made easy.&lt;/p&gt;
&lt;p&gt;Mathematically, given a pair of points \((x_1,x_2)\) and their corresponding projections \((x_1',x_2')\) defines an &lt;strong&gt;&lt;em&gt;eps-embedding&lt;/em&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;$$&lt;br /&gt;
(1 - \epsilon) |x_1 - x_2|^2 &amp;lt; |x_1' - x_2'|^2 &amp;lt; (1 + \epsilon) |x_1 - x_2|^2&lt;br /&gt;
$$&lt;/p&gt;
&lt;p&gt;The Johnson-Lindenstrauss lemma specifies the minimum dimensions of the lower-dimensional space so that the above &lt;em&gt;eps-embedding&lt;/em&gt; is maintained.&lt;/p&gt;
&lt;h4 id=&quot;determiningtherandomdirectionsoftheprojectionmatrix&quot;&gt;Determining the Random Directions of the Projection Matrix&lt;/h4&gt;
&lt;p&gt;Two well-known methods for determining the projection matrix are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Gaussian Random Projection&lt;/strong&gt;: The projection matrix is constructed by choosing elements randomly from a Gaussian distribution with mean zero.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Sparse Random Projection&lt;/strong&gt;: This is a comparatively simpler method, where each vector component is a value from the set {-k,0,+k}, where k is a constant. One simple scheme for generating the elements of this matrix, also called the &lt;code&gt;Achlioptas&lt;/code&gt; method is to set \(k=\sqrt 3\):&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

  
    R
    
      i
      j
    
  
  =
  
    3
  
  
    {
    
      
        
          +
          1
        
        
          &amp;nbsp;with probability&amp;nbsp;
        
        
          
            1
            6
          
        
      
      
        
          0
        
        
          &amp;nbsp;with probability&amp;nbsp;
        
        
          
            2
            3
          
        
      
      
        
          −&lt;!-- − --&gt;
          1
        
        
          &amp;nbsp;with probability&amp;nbsp;
        
        
          
            1
            6
          
        
      
    
    
  

&lt;p&gt;The method above is equivalent to choosing the numbers from &lt;code&gt;{+k,0,-k}&lt;/code&gt; based on the outcome of the roll of a dice. If the dice score is &lt;em&gt;1&lt;/em&gt;, then choose &lt;em&gt;+k&lt;/em&gt;. If the dice score is in the range &lt;code&gt;[2,5]&lt;/code&gt;, choose &lt;em&gt;0&lt;/em&gt;, and choose &lt;em&gt;-k&lt;/em&gt; for a dice score of &lt;em&gt;6&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A more general method uses a &lt;code&gt;density&lt;/code&gt; parameter to choose the Random Projection matrix. Setting \(s=\frac{1}{\text{density}}\), the elements of the Random Projection matrix are chosen as:&lt;/p&gt;

  
    R
    
      i
      j
    
  
  =
  
    {
    
      
        
          +
          
            
              s
              d
            
          
        
        
          &amp;nbsp;with probability&amp;nbsp;
        
        
          
            1
            
              2
              s
            
          
        
      
      
        
          0
        
        
          &amp;nbsp;with probability&amp;nbsp;
        
        
          1
          −&lt;!-- − --&gt;
          
            1
            s
          
        
      
      
        
          −&lt;!-- − --&gt;
          
            
              s
              d
            
          
        
        
          &amp;nbsp;with probability&amp;nbsp;
        
        
          
            1
            
              2
              s
            
          
        
      
    
    
  

&lt;p&gt;The general recommendation is to set the &lt;code&gt;density&lt;/code&gt; parameter to \(\frac{1}{\sqrt n}\).&lt;/p&gt;
&lt;p&gt;As mentioned earlier, for both the Gaussian and sparse methods, the projection matrix is not a true orthonormal matrix. However, it has been shown that in high dimensional spaces, the randomly chosen matrix using either of the above two methods is &lt;strong&gt;&lt;em&gt;close to&lt;/em&gt;&lt;/strong&gt; an orthonormal matrix.&lt;/p&gt;
&lt;h3 id=&quot;randomprojectionusingscikitlearn&quot;&gt;Random Projection Using Scikit-Learn&lt;/h3&gt;
&lt;p&gt;The Scikit-Learn library provides us with the &lt;code&gt;random_projection&lt;/code&gt; module, that has three important classes/modules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;johnson_lindenstrauss_min_dim()&lt;/code&gt;: For determining the minimum number of dimensions of transformed data when given a sample size &lt;code&gt;m&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GaussianRandomProjection&lt;/code&gt;: Performs Gaussian Random Projections.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SparseRandomProjection&lt;/code&gt;: Performs Sparse Random Projections.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We'll demonstrate all the above three in the sections below, but first let's import the classes and functions we'll be using:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; sklearn.random_projection &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; SparseRandomProjection, johnson_lindenstrauss_min_dim
&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; sklearn.random_projection &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; GaussianRandomProjection
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; np
&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; matplotlib &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pyplot &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; plt
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sklearn.datasets &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; dt
&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; sklearn.metrics.pairwise &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; euclidean_distances
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;determiningtheminimumnumberofdimensionsviajohnsonlindenstrausslemma&quot;&gt;Determining the Minimum Number of Dimensions Via Johnson Lindenstrauss lemma&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;johnson_lindenstrauss_min_dim()&lt;/code&gt; function determines the minimum number of dimensions &lt;code&gt;d&lt;/code&gt;, which the input data can be mapped to when given the number of examples &lt;code&gt;m&lt;/code&gt;, and the &lt;code&gt;eps&lt;/code&gt; or \(\epsilon\) parameter.&lt;/p&gt;
&lt;p&gt;The code below experiments with a different number of samples to determine the minimum size of the lower-dimensional space, which maintains a certain &lt;strong&gt;&lt;em&gt;&quot;safe&quot;&lt;/em&gt;&lt;/strong&gt; distortion of data.&lt;/p&gt;
&lt;p&gt;Additionally, it plots &lt;code&gt;log(d)&lt;/code&gt; against different values of &lt;code&gt;eps&lt;/code&gt; for different sample sizes &lt;code&gt;m&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;An important thing to note is that the Johnson Lindenstrauss lemma determines the size of the lower-dimensional space \(d\) only based on the number of example points \(m\) in the input data. The number of attributes or features \(n\) of the original data is irrelevant:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;eps = np.arange(&lt;span class=&quot;hljs-number&quot;&gt;0.001&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.999&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.01&lt;/span&gt;)
colors = [&lt;span class=&quot;hljs-string&quot;&gt;'b'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'g'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'m'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'c'&lt;/span&gt;]
m = [&lt;span class=&quot;hljs-number&quot;&gt;1e1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1e3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1e7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1e10&lt;/span&gt;]
&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;):
    min_dim = johnson_lindenstrauss_min_dim(n_samples=m[i], eps=eps)
    label = &lt;span class=&quot;hljs-string&quot;&gt;'Total samples = '&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(m[i])
    plt.plot(eps, np.log10(min_dim), c=colors[i], label=label)
    
plt.xlabel(&lt;span class=&quot;hljs-string&quot;&gt;'eps'&lt;/span&gt;)
plt.ylabel(&lt;span class=&quot;hljs-string&quot;&gt;'log$_{10}$(d)'&lt;/span&gt;)
plt.axhline(y=&lt;span class=&quot;hljs-number&quot;&gt;3.5&lt;/span&gt;, color=&lt;span class=&quot;hljs-string&quot;&gt;'k'&lt;/span&gt;, linestyle=&lt;span class=&quot;hljs-string&quot;&gt;':'&lt;/span&gt;)
plt.legend()
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://s3.stackabuse.com/media/articles/random-projection-theory-and-implementation-in-python-with-scikit-learn-2.png&quot; alt=&quot;how to determine size of lower dimensional space for random projections&quot; /&gt;&lt;/p&gt;
&lt;p&gt;From the plot above, we can see that for small values of &lt;code&gt;eps&lt;/code&gt;, &lt;code&gt;d&lt;/code&gt; is quite large but decreases as &lt;code&gt;eps&lt;/code&gt; approaches one. The dimensionality is below 3500 (the dotted black line) for mid to large values of &lt;code&gt;eps&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This shows that applying &lt;strong&gt;Random Projections&lt;/strong&gt; only makes sense to &lt;strong&gt;high-dimensional data&lt;/strong&gt;, of the order of thousands of features. In such cases, a high reduction in dimensionality can be achieved.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Random Projections are, therefore, very successful for text or image data, which involve a large number of input features, where Principal Component Analysis would&lt;/p&gt;
&lt;h4 id=&quot;datatransformation&quot;&gt;Data Transformation&lt;/h4&gt;
&lt;p&gt;Python includes the implementation of both Gaussian Random Projections and Sparse Random Projections in its &lt;code&gt;sklearn&lt;/code&gt; library via the two classes &lt;code&gt;GaussianRandomProjection&lt;/code&gt; and &lt;code&gt;SparseRandomProjection&lt;/code&gt; respectively. Some important attributes for these classes are (the list is not exhaustive):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;n_components&lt;/code&gt;: Number of dimensions of the transformed data. If it is set to &lt;code&gt;auto&lt;/code&gt;, then the optimal dimensions are determined before projection&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eps&lt;/code&gt;: The parameter of Johnson-Lindenstrauss lemma, which controls the number of dimensions so that the distortion in projected data is kept within a certain bound.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;density&lt;/code&gt;: Only applicable for &lt;code&gt;SparseRandomProjection&lt;/code&gt;. The default value is &lt;code&gt;auto&lt;/code&gt;, which sets \(s=\frac{1}{\sqrt n}\) for the selection of the projection matrix.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Like other dimensionality reduction classes of &lt;code&gt;sklearn&lt;/code&gt;, both these classes include the standard &lt;code&gt;fit()&lt;/code&gt; and &lt;code&gt;fit_transform()&lt;/code&gt; methods. A notable set of attributes, which come in handy are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;n_components&lt;/code&gt;: The number of dimensions of the new space on which the data is projected.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;components_&lt;/code&gt;: The transformation or projection matrix.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;density_&lt;/code&gt;: Only applicable to &lt;code&gt;SparseRandomProjection&lt;/code&gt;. It is the value of &lt;code&gt;density&lt;/code&gt; based on which the elements of the projection matrix are computed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;randomprojectionwithgaussianrandomprojection&quot;&gt;Random Projection with &lt;em&gt;GaussianRandomProjection&lt;/em&gt;&lt;/h5&gt;
&lt;p&gt;Let's start off with the &lt;code&gt;GaussianRandomProjection&lt;/code&gt; class. The values of the projection matrix are plotted as a histogram and we can see that they follow a Gaussian distribution with mean zero. The size of the data matrix is reduced from 5000 to 3947:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;X_rand = np.random.RandomState(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;).rand(&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5000&lt;/span&gt;)
proj_gauss = GaussianRandomProjection(random_state=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)
X_transformed = proj_gauss.fit_transform(X_rand)

&lt;span class=&quot;hljs-comment&quot;&gt;# Print the size of the transformed data&lt;/span&gt;
&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;'Shape of transformed data: '&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(X_transformed.shape))

&lt;span class=&quot;hljs-comment&quot;&gt;# Generate a histogram of the elements of the transformation matrix&lt;/span&gt;
plt.hist(proj_gauss.components_.flatten())
plt.title(&lt;span class=&quot;hljs-string&quot;&gt;'Histogram of the flattened transformation matrix'&lt;/span&gt;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This code results in:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;Shape of transformed data: (100, 3947)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://s3.stackabuse.com/media/articles/random-projection-theory-and-implementation-in-python-with-scikit-learn-3.png&quot; alt=&quot;gaussian random projection scikit learn&quot; /&gt;&lt;/p&gt;
&lt;h5 id=&quot;randomprojectionwithsparserandomprojection&quot;&gt;Random Projection with &lt;em&gt;SparseRandomProjection&lt;/em&gt;&lt;/h5&gt;
&lt;p&gt;The code below demonstrates how data transformation can be made using a Sparse Random Projection. The entire transformation matrix is composed of three distinct values, whose frequency plot is also shown below.&lt;/p&gt;
&lt;p&gt;Note that the transformation matrix is a &lt;code&gt;SciPy&lt;/code&gt; sparse &lt;code&gt;csr_matrix&lt;/code&gt;. The following code accesses the non-zero values of the &lt;code&gt;csr_matrix&lt;/code&gt; and stores them in &lt;code&gt;p&lt;/code&gt;. Next, it uses &lt;code&gt;p&lt;/code&gt; to get the counts of the elements of the sparse projection matrix:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;proj_sparse = SparseRandomProjection(random_state=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)
X_transformed = proj_sparse.fit_transform(X_rand)

&lt;span class=&quot;hljs-comment&quot;&gt;# Print the size of the transformed data&lt;/span&gt;
&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;'Shape of transformed data: '&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(X_transformed.shape))

&lt;span class=&quot;hljs-comment&quot;&gt;# Get data of the transformation matrix and store in p. &lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;# p consists of only 2 non-zero distinct values, i.e., pos and neg&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;# pos and neg are determined below&lt;/span&gt;
p = proj_sparse.components_.data
total_elements = proj_sparse.components_.shape[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] *\
                  proj_sparse.components_.shape[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]
pos = p[p&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]
neg = p[p&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]
&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;'Shape of transformation matrix: '&lt;/span&gt;+ &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(proj_sparse.components_.shape))
counts = (&lt;span class=&quot;hljs-built_in&quot;&gt;sum&lt;/span&gt;(p==neg), total_elements - &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(p), &lt;span class=&quot;hljs-built_in&quot;&gt;sum&lt;/span&gt;(p==pos))
&lt;span class=&quot;hljs-comment&quot;&gt;# Histogram of the elements of the transformation matrix&lt;/span&gt;
plt.bar([neg, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, pos], counts, width=&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;)
plt.xticks([neg, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, pos])
plt.suptitle(&lt;span class=&quot;hljs-string&quot;&gt;'Histogram of flattened transformation matrix, '&lt;/span&gt; + 
             &lt;span class=&quot;hljs-string&quot;&gt;'density = '&lt;/span&gt; +
             &lt;span class=&quot;hljs-string&quot;&gt;'{:.2f}'&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(proj_sparse.density_))
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This results in:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;Shape of transformed data: (100, 3947)
Shape of transformation matrix: (3947, 5000)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://s3.stackabuse.com/media/articles/random-projection-theory-and-implementation-in-python-with-scikit-learn-4.png&quot; alt=&quot;sparse random projections scikit learn&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The histogram is in agreement with the method of generating a sparse Random Projection matrix as discussed in the previous section. The zero is selected with probability (1-1/100 = 0.99), hence around 99% of values of this matrix are zero. Utilizing the data structures and routines for sparse matrices makes this transformation method very fast and efficient on large datasets.&lt;/p&gt;
&lt;h3 id=&quot;practicalrandomprojectionswiththereuterscorpusvolume1dataset&quot;&gt;Practical Random Projections With the &lt;em&gt;Reuters Corpus Volume 1 Dataset&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;This section illustrates Random Projections on the &lt;a rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot; href=&quot;https://www.jmlr.org/papers/volume5/lewis04a/lewis04a.pdf&quot;&gt;Reuters Corpus Volume I Dataset&lt;/a&gt;. The dataset is freely accessible online, though for our purposes, it's easiest to looad via Scikit-Learn.&lt;/p&gt;
&lt;p&gt;The &lt;a rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot; href=&quot;https://scikit-learn.org/stable/datasets/real_world.html#rcv1-dataset&quot;&gt;&lt;code&gt;sklearn.datasets&lt;/code&gt;&lt;/a&gt; module contains a &lt;code&gt;fetch_rcv1()&lt;/code&gt; function that downloads and imports the dataset.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The dataset may take a few minutes to download, if you've never imported it beforehand through this method. Since there's no progress bar, it may appear as if the script is hanging without progressing further. Give it a bit of time, when you run it initially.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The RCV1 dataset is a multilabel dataset, i.e., each data point can belong to multiple classes at the same time, and consists of 103 classes. Each data point has a dimensionality of a &lt;strong&gt;whopping 47,236&lt;/strong&gt;, making it an ideal case for applying fast and cheap Random Projections.&lt;/p&gt;
&lt;p&gt;To demonstrate the effectiveness of Random Projections, and to keep things simple, we'll select 500 data points that belong to at least one of the first three classes. The &lt;code&gt;fetch_rcv1()&lt;/code&gt; function retrieves the dataset and returns an object with data and targets, both of which are sparse &lt;code&gt;CSR&lt;/code&gt; matrices from &lt;code&gt;SciPy&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let's fetch the Reuters Corpus and prepare it for data transformation:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;total_points = &lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;# Fetch the dataset&lt;/span&gt;
dat = dt.fetch_rcv1()
&lt;span class=&quot;hljs-comment&quot;&gt;# Select the sparse matrix's non-zero targets&lt;/span&gt;
target_nz = dat.target.nonzero()
&lt;span class=&quot;hljs-comment&quot;&gt;# Select only indices of target_nz for data points that belong to &lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;# either of class 1,2,3&lt;/span&gt;
ind_class_123 = np.asarray(np.where((target_nz[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]==&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) |\
                                    (target_nz[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]==&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) |\
                                    (target_nz[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] == &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;))).flatten()
&lt;span class=&quot;hljs-comment&quot;&gt;# Choose only 500 indices randomly&lt;/span&gt;
np.random.seed(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)
ind_class_123 = np.random.choice(ind_class_123, total_points, 
                                 replace=&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;)

&lt;span class=&quot;hljs-comment&quot;&gt;# Retreive the row indices of data matrix and target matrix&lt;/span&gt;
row_ind = target_nz[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][ind_class_123]
X = dat.data[row_ind,:]
y = np.array(dat.target[row_ind,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;].todense())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After data preparation, we need a function that creates a visualization of the projected data. To have an idea of the quality of transformation, we can compute the following three matrices:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dist_raw&lt;/code&gt;: Matrix of the pairwise Euclidean distances of the actual data points.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dist_transform&lt;/code&gt;: Matrix of the pairwise Euclidean distances of the transformed data points.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;abs_diff&lt;/code&gt;: Matrix of the absolute difference of &lt;code&gt;dist_raw&lt;/code&gt; and &lt;code&gt;dist_actual&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;abs_diff_dist&lt;/code&gt; matrix is a good indicator of the quality of the data transformation. Close to zero or small values in this matrix indicate low distortion and a good transformation. We can directly display an image of this matrix or generate a histogram of its values to visually assess the transformation. We can also compute the average of all the values of this matrix to get a single quantitative measure for comparison.&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;create_visualization()&lt;/code&gt; creates three plots. The first graph is a scatter plot of projected points along the first two random directions. The second plot is an image of the absolute difference matrix and the third is the histogram of the values of the absolute difference matrix:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;create_visualization&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;X_transform, y, abs_diff&lt;/span&gt;):&lt;/span&gt;
    fig,ax = plt.subplots(nrows=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, ncols=&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, figsize=(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;))

    plt.subplot(&lt;span class=&quot;hljs-number&quot;&gt;131&lt;/span&gt;)
    plt.scatter(X_transform[y[:,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]==&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], X_transform[y[:,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]==&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], c=&lt;span class=&quot;hljs-string&quot;&gt;'r'&lt;/span&gt;, alpha=&lt;span class=&quot;hljs-number&quot;&gt;0.4&lt;/span&gt;)
    plt.scatter(X_transform[y[:,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]==&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], X_transform[y[:,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]==&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], c=&lt;span class=&quot;hljs-string&quot;&gt;'b'&lt;/span&gt;, alpha=&lt;span class=&quot;hljs-number&quot;&gt;0.4&lt;/span&gt;)
    plt.scatter(X_transform[y[:,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]==&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], X_transform[y[:,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]==&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], c=&lt;span class=&quot;hljs-string&quot;&gt;'g'&lt;/span&gt;, alpha=&lt;span class=&quot;hljs-number&quot;&gt;0.4&lt;/span&gt;)
    plt.legend([&lt;span class=&quot;hljs-string&quot;&gt;'Class 1'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'Class 2'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;'Class 3'&lt;/span&gt;])
    plt.title(&lt;span class=&quot;hljs-string&quot;&gt;'Projected data along first two dimensions'&lt;/span&gt;)

    plt.subplot(&lt;span class=&quot;hljs-number&quot;&gt;132&lt;/span&gt;)
    plt.imshow(abs_diff)
    plt.colorbar()
    plt.title(&lt;span class=&quot;hljs-string&quot;&gt;'Visualization of absolute differences'&lt;/span&gt;)

    plt.subplot(&lt;span class=&quot;hljs-number&quot;&gt;133&lt;/span&gt;)
    ax = plt.hist(abs_diff.flatten())
    plt.title(&lt;span class=&quot;hljs-string&quot;&gt;'Histogram of absolute differences'&lt;/span&gt;)

    fig.subplots_adjust(wspace=&lt;span class=&quot;hljs-number&quot;&gt;.3&lt;/span&gt;) 
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;reutersdatasetgaussianrandomprojection&quot;&gt;Reuters Dataset: Gaussian Random Projection&lt;/h4&gt;
&lt;p&gt;Let's apply Gaussian Random Projection to the Reuters dataset. The code below runs a &lt;code&gt;for&lt;/code&gt; loop for different &lt;code&gt;eps&lt;/code&gt; values. If the minimum safe dimensions returned by &lt;code&gt;johnson_lindenstrauss_min_dim&lt;/code&gt; is less than the actual data dimensions, then it calls the &lt;code&gt;fit_transform()&lt;/code&gt; method of &lt;code&gt;GaussianRandomProjection&lt;/code&gt;. The &lt;code&gt;create_visualization()&lt;/code&gt; function is then called to create a visualization for that value of &lt;code&gt;eps&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;At every iteration, the code also stores the mean absolute difference and the percentage reduction in dimensionality achieved by Gaussian Random Projection:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;reduction_dim_gauss = []
eps_arr_gauss = []
mean_abs_diff_gauss = []
&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; eps &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; np.arange(&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.999&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;):

    min_dim = johnson_lindenstrauss_min_dim(n_samples=total_points, eps=eps)
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; min_dim &amp;gt; X.shape[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]:
        &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;
    gauss_proj = GaussianRandomProjection(random_state=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, eps=eps)
    X_transform = gauss_proj.fit_transform(X)
    dist_raw = euclidean_distances(X)
    dist_transform = euclidean_distances(X_transform)
    abs_diff_gauss = &lt;span class=&quot;hljs-built_in&quot;&gt;abs&lt;/span&gt;(dist_raw - dist_transform) 

    create_visualization(X_transform, y, abs_diff_gauss)
    plt.suptitle(&lt;span class=&quot;hljs-string&quot;&gt;'eps = '&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;'{:.2f}'&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(eps) + &lt;span class=&quot;hljs-string&quot;&gt;', n_components = '&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(X_transform.shape[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]))
    
    reduction_dim_gauss.append(&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;-X_transform.shape[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]/X.shape[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]*&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;)
    eps_arr_gauss.append(eps)
    mean_abs_diff_gauss.append(np.mean(abs_diff_gauss.flatten()))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://s3.stackabuse.com/media/articles/random-projection-theory-and-implementation-in-python-with-scikit-learn-5.png&quot; alt=&quot;RCV1 dataset gaussian random projections&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s3.stackabuse.com/media/articles/random-projection-theory-and-implementation-in-python-with-scikit-learn-6.png&quot; alt=&quot;RCV1 dataset gaussian random projections&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s3.stackabuse.com/media/articles/random-projection-theory-and-implementation-in-python-with-scikit-learn-7.png&quot; alt=&quot;RCV1 dataset gaussian random projections&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s3.stackabuse.com/media/articles/random-projection-theory-and-implementation-in-python-with-scikit-learn-8.png&quot; alt=&quot;RCV1 dataset gaussian random projections&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s3.stackabuse.com/media/articles/random-projection-theory-and-implementation-in-python-with-scikit-learn-9.png&quot; alt=&quot;RCV1 dataset gaussian random projections&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The images of the absolute difference matrix and its corresponding histogram indicate that most of the values are close to zero. Hence, a large majority of the pair of points maintain their actual distance in the low dimensional space, retaining the original structure of data.&lt;/p&gt;
&lt;p&gt;To assess the quality of transformation, let's plot the mean absolute difference against &lt;code&gt;eps&lt;/code&gt;. Also, the higher the value of &lt;code&gt;eps&lt;/code&gt;, the greater the dimensionality reduction. Let's also plot the percentage reduction vs. &lt;code&gt;eps&lt;/code&gt; in a second sub-plot:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;fig,ax = plt.subplots(nrows=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, ncols=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, figsize=(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;))
plt.subplot(&lt;span class=&quot;hljs-number&quot;&gt;121&lt;/span&gt;)
plt.plot(eps_arr_gauss, mean_abs_diff_gauss, marker=&lt;span class=&quot;hljs-string&quot;&gt;'o'&lt;/span&gt;, c=&lt;span class=&quot;hljs-string&quot;&gt;'g'&lt;/span&gt;)
plt.xlabel(&lt;span class=&quot;hljs-string&quot;&gt;'eps'&lt;/span&gt;)
plt.ylabel(&lt;span class=&quot;hljs-string&quot;&gt;'Mean absolute difference'&lt;/span&gt;)

plt.subplot(&lt;span class=&quot;hljs-number&quot;&gt;122&lt;/span&gt;)
plt.plot(eps_arr_gauss, reduction_dim_gauss, marker = &lt;span class=&quot;hljs-string&quot;&gt;'o'&lt;/span&gt;, c=&lt;span class=&quot;hljs-string&quot;&gt;'m'&lt;/span&gt;)
plt.xlabel(&lt;span class=&quot;hljs-string&quot;&gt;'eps'&lt;/span&gt;)
plt.ylabel(&lt;span class=&quot;hljs-string&quot;&gt;'Percentage reduction in dimensionality'&lt;/span&gt;)

fig.subplots_adjust(wspace=&lt;span class=&quot;hljs-number&quot;&gt;.4&lt;/span&gt;) 
plt.suptitle(&lt;span class=&quot;hljs-string&quot;&gt;'Assessing the Quality of Gaussian Random Projections'&lt;/span&gt;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://s3.stackabuse.com/media/articles/random-projection-theory-and-implementation-in-python-with-scikit-learn-10.png&quot; alt=&quot;RCV1 random projections reduction quality&quot; /&gt;&lt;/p&gt;
&lt;p&gt;We can see that using Gaussian Random Projection we can reduce the dimensionality of data to &lt;strong&gt;more than 99%&lt;/strong&gt;! Though, this &lt;em&gt;does&lt;/em&gt; come at the cost of a higher distortion of data.&lt;/p&gt;
&lt;h4 id=&quot;reutersdatasetsparserandomprojection&quot;&gt;Reuters Dataset: Sparse Random Projection&lt;/h4&gt;
&lt;p&gt;We can do a similar comparison with sparse Random Projection:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;reduction_dim_sparse = []
eps_arr_sparse = []
mean_abs_diff_sparse = []
&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; eps &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; np.arange(&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.999&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;):

    min_dim = johnson_lindenstrauss_min_dim(n_samples=total_points, eps=eps)
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; min_dim &amp;gt; X.shape[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]:
        &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;
    sparse_proj = SparseRandomProjection(random_state=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, eps=eps, dense_output=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)
    X_transform = sparse_proj.fit_transform(X)
    dist_raw = euclidean_distances(X)
    dist_transform = euclidean_distances(X_transform)
    abs_diff_sparse = &lt;span class=&quot;hljs-built_in&quot;&gt;abs&lt;/span&gt;(dist_raw - dist_transform) 

    create_visualization(X_transform, y, abs_diff_sparse)
    plt.suptitle(&lt;span class=&quot;hljs-string&quot;&gt;'eps = '&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;'{:.2f}'&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(eps) + &lt;span class=&quot;hljs-string&quot;&gt;', n_components = '&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(X_transform.shape[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]))
    
    reduction_dim_sparse.append(&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;-X_transform.shape[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]/X.shape[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]*&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;)
    eps_arr_sparse.append(eps)
    mean_abs_diff_sparse.append(np.mean(abs_diff_sparse.flatten()))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://s3.stackabuse.com/media/articles/random-projection-theory-and-implementation-in-python-with-scikit-learn-11.png&quot; alt=&quot;RCV1 dataset sparse random projections&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s3.stackabuse.com/media/articles/random-projection-theory-and-implementation-in-python-with-scikit-learn-12.png&quot; alt=&quot;RCV1 dataset sparse random projections&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s3.stackabuse.com/media/articles/random-projection-theory-and-implementation-in-python-with-scikit-learn-13.png&quot; alt=&quot;RCV1 dataset sparse random projections&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s3.stackabuse.com/media/articles/random-projection-theory-and-implementation-in-python-with-scikit-learn-14.png&quot; alt=&quot;RCV1 dataset sparse random projections&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s3.stackabuse.com/media/articles/random-projection-theory-and-implementation-in-python-with-scikit-learn-15.png&quot; alt=&quot;RCV1 dataset sparse random projections&quot; /&gt;&lt;/p&gt;
&lt;p&gt;In the case of Random Projection, the absolute difference matrix appears similar to the one of Gaussian projection. The projected data on the first two dimensions, however, has a more interesting pattern, with many points mapped on the coordinate axis.&lt;/p&gt;
&lt;p&gt;Let's also plot the mean absolute difference and percentage reduction in dimensionality for various values of the &lt;code&gt;eps&lt;/code&gt; parameter:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;fig,ax = plt.subplots(nrows=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, ncols=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, figsize=(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;))
plt.subplot(&lt;span class=&quot;hljs-number&quot;&gt;121&lt;/span&gt;)
plt.plot(eps_arr_sparse, mean_abs_diff_sparse, marker=&lt;span class=&quot;hljs-string&quot;&gt;'o'&lt;/span&gt;, c=&lt;span class=&quot;hljs-string&quot;&gt;'g'&lt;/span&gt;)
plt.xlabel(&lt;span class=&quot;hljs-string&quot;&gt;'eps'&lt;/span&gt;)
plt.ylabel(&lt;span class=&quot;hljs-string&quot;&gt;'Mean absolute difference'&lt;/span&gt;)

plt.subplot(&lt;span class=&quot;hljs-number&quot;&gt;122&lt;/span&gt;)
plt.plot(eps_arr_sparse, reduction_dim_sparse, marker = &lt;span class=&quot;hljs-string&quot;&gt;'o'&lt;/span&gt;, c=&lt;span class=&quot;hljs-string&quot;&gt;'m'&lt;/span&gt;)
plt.xlabel(&lt;span class=&quot;hljs-string&quot;&gt;'eps'&lt;/span&gt;)
plt.ylabel(&lt;span class=&quot;hljs-string&quot;&gt;'Percentage reduction in dimensionality'&lt;/span&gt;)

fig.subplots_adjust(wspace=&lt;span class=&quot;hljs-number&quot;&gt;.4&lt;/span&gt;) 
plt.suptitle(&lt;span class=&quot;hljs-string&quot;&gt;'Assessing the Quality of Sparse Random Projections'&lt;/span&gt;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://s3.stackabuse.com/media/articles/random-projection-theory-and-implementation-in-python-with-scikit-learn-17.png&quot; alt=&quot;sparse random projections reduction quality&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The trend of the two graphs is similar to that of a Gaussian Projection. However, the mean absolute difference for Gaussian Projection is lower than that of Random Projection.&lt;/p&gt;
&lt;h3 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h3&gt;
&lt;p&gt;In this guide, we discussed the details of two main types of Random Projections, i.e., Gaussian and sparse Random Projection.&lt;/p&gt;
&lt;p&gt;We presented the details of the &lt;strong&gt;&lt;em&gt;Johnson-Lindenstrauss lemma&lt;/em&gt;&lt;/strong&gt;, the mathematical basis for these methods. We then showed how this method can be used to transform data using Python's &lt;code&gt;sklearn&lt;/code&gt; library.&lt;/p&gt;
&lt;p&gt;We also illustrated the two methods on a real-life &lt;a rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot; href=&quot;https://www.jmlr.org/papers/volume5/lewis04a/lewis04a.pdf&quot;&gt;Reuters Corpus Volume I Dataset&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We encourage the reader to try out this method in supervised classification or regression tasks at the pre-processing stage when dealing with very high-dimensional datasets.&lt;/p&gt;</description>
	<pubDate>Tue, 31 Aug 2021 10:30:00 +0000</pubDate>
</item>
<item>
	<title>Zero to Mastery: Python Monthly 💻🐍 August 2021</title>
	<guid>https://zerotomastery.io/blog/python-monthly-august-2021/?utm_source=python-rss-feed</guid>
	<link>https://zerotomastery.io/blog/python-monthly-august-2021/?utm_source=python-rss-feed</link>
	<description>21st issue of Python Monthly! Read by 20,000+ Python developers every month. This monthly Python newsletter is focused on keeping you up to date with the industry and keeping your skills sharp, without wasting your valuable time.</description>
	<pubDate>Tue, 31 Aug 2021 10:00:00 +0000</pubDate>
</item>
<item>
	<title>Talk Python to Me: #332: Robust Python</title>
	<guid>https://talkpython.fm/episodes/show/332/robust-python</guid>
	<link>https://talkpython.fm/episodes/show/332/robust-python</link>
	<description>Does it seem like your Python projects are getting bigger and bigger? Are you feeling the pain as your codebase expands and gets tougher to debug and maintain? Patrick Viafore is here to help us write more maintainable, longer-lived, and more enjoyable Python code.&amp;lt;br/&amp;gt;
&amp;lt;br/&amp;gt;
&amp;lt;strong&amp;gt;Links from the show&amp;lt;/strong&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;br/&amp;gt;
&amp;lt;div&amp;gt;&amp;lt;b&amp;gt;Pat on Twitter&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://twitter.com/PatViaforever&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;@PatViaforever&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;Robust Python Book&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://www.oreilly.com/library/view/robust-python/9781098100650/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;oreilly.com&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;Typing in Python&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://docs.python.org/3/library/typing.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;docs.python.org&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;mypy&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;http://mypy-lang.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;mypy-lang.org&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;SQLModel&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://sqlmodel.tiangolo.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;sqlmodel.tiangolo.com&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;CUPID principles @ relevant time&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://overcast.fm/+BYsRlGnE/19:06&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;overcast.fm&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;Stevedore package&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://docs.openstack.org/stevedore/latest/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;docs.openstack.org&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;Watch YouTube live stream edition&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://www.youtube.com/watch?v=QU3JO4dwT-s&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;youtube.com&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;Episode transcripts&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://talkpython.fm/episodes/transcript/332/robust-python&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;talkpython.fm&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;Stay in touch with us&amp;lt;/b&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;Subscribe on YouTube (for live streams)&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://talkpython.fm/youtube&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;youtube.com&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;Follow Talk Python on Twitter&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://twitter.com/talkpython&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;@talkpython&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;b&amp;gt;Follow Michael on Twitter&amp;lt;/b&amp;gt;: &amp;lt;a href=&quot;https://twitter.com/mkennedy&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&amp;gt;@mkennedy&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;strong&amp;gt;Sponsors&amp;lt;/strong&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;a href='https://clubhouse.io/talkpython'&amp;gt;Clubhouse&amp;lt;/a&amp;gt;&amp;lt;br&amp;gt;
&amp;lt;a href='https://talkpython.fm/masterworks'&amp;gt;Masterworks.io&amp;lt;/a&amp;gt;&amp;lt;br&amp;gt;
&amp;lt;a href='https://talkpython.fm/assemblyai'&amp;gt;AssemblyAI&amp;lt;/a&amp;gt;&amp;lt;br&amp;gt;
&amp;lt;a href='https://talkpython.fm/training'&amp;gt;Talk Python Training&amp;lt;/a&amp;gt;</description>
	<pubDate>Tue, 31 Aug 2021 08:00:00 +0000</pubDate>
</item>
<item>
	<title>PyBites: How to handle environment variables in Python</title>
	<guid>https://pybit.es/articles/how-to-handle-environment-variables-in-python/</guid>
	<link>https://pybit.es/articles/how-to-handle-environment-variables-in-python/</link>
	<description>&lt;p&gt;In this article I will share 3 libraries I often use to isolate my environment variables from production code.&lt;/p&gt;



&lt;p&gt;Why is this important? &lt;/p&gt;



&lt;h2&gt;Separate config from code&lt;/h2&gt;



&lt;p&gt;As we can read in &lt;a href=&quot;https://12factor.net/config&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;The Twelve-Factor App / III. Config&lt;/a&gt;:&lt;/p&gt;



&lt;blockquote class=&quot;wp-block-quote&quot;&gt;&lt;p&gt;Apps sometimes store config as constants in the code. This is a violation of twelve-factor, which requires&amp;nbsp;&lt;strong&gt;strict separation of config from code&lt;/strong&gt;.&lt;/p&gt;&lt;cite&gt;https://12factor.net/config&lt;/cite&gt;&lt;/blockquote&gt;



&lt;p&gt;Basically you want to be able to make config changes &lt;strong&gt;independently&lt;/strong&gt; from code changes.&lt;/p&gt;



&lt;p&gt;We also want to hide secret keys and API credentials! Notice that git is very persistent (PyCon talk: &lt;a href=&quot;https://www.youtube.com/watch?v=2uaTPmNvH0I&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Oops, I committed my password to GitHub&lt;/a&gt;) so it&amp;#8217;s important to get this right from the start.&lt;/p&gt;



&lt;h2&gt;First package: python-dotenv&lt;/h2&gt;



&lt;p&gt;These days I mostly use &lt;a href=&quot;https://pypi.org/project/python-dotenv/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;&lt;code&gt;python-dotenv&lt;/code&gt;&lt;/a&gt; which makes this straightforward.&lt;/p&gt;



&lt;p&gt;First install the library and add it to your requirements (or if you use &lt;a href=&quot;https://www.youtube.com/watch?v=G-OAVLBFxbw&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Poetry&lt;/a&gt; it will automatically update your &lt;code&gt;.toml&lt;/code&gt; file):&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;pip install python-dotenv&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Secondly make an &lt;code&gt;.env&lt;/code&gt; file with your environment variables in it.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;It&amp;#8217;s important that you ignore this file with git&lt;/strong&gt;, otherwise you will end up committing sensitive data to your repo / project.&lt;/p&gt;



&lt;p&gt;What I usually do is commit an empty &lt;code&gt;.env-example&lt;/code&gt; (or &lt;code&gt;.env-template&lt;/code&gt;) file so other developers know what they should set (see examples &lt;a href=&quot;https://github.com/PyBites-Open-Source/pbreadinglist/blob/develop/.env-template&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://github.com/bbelderbos/youtube-thumbnails/blob/main/.env-template&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;here&lt;/a&gt;). &lt;/p&gt;



&lt;p&gt;So a new developer (or me checking out the repo on another machine) can do a &lt;code&gt;cp .env-template .env&lt;/code&gt; and populate the variables. As the (checked out) &lt;code&gt;.gitignore&lt;/code&gt; file contains &lt;code&gt;.env&lt;/code&gt;, git won&amp;#8217;t show it as a file to be staged for commit.&lt;/p&gt;



&lt;p&gt;Then, to load in the variables from this file we use two lines of code:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;from dotenv import load_dotenv

load_dotenv()&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;You can now access the environment variables using &lt;code&gt;os.environ&lt;/code&gt;, &lt;a href=&quot;https://github.com/bbelderbos/youtube-thumbnails/blob/main/thumbs.py&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;for example&lt;/a&gt;:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;BACKGROUND_IMG = os.environ&amp;#91;&quot;THUMB_BACKGROUND_IMAGE&quot;]
FONT_FILE = os.environ&amp;#91;&quot;THUMB_FONT_TTF_FILE&quot;]&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;To load the config without touching the environment, you can use &lt;code&gt;dotenv_values(&quot;.env&quot;)&lt;/code&gt; which works the same as &lt;code&gt;load_dotenv&lt;/code&gt;, except it doesn&amp;#8217;t touch the environment, it just returns a dict with the values parsed from the &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt;



&lt;p&gt;Check out &lt;a href=&quot;https://pypi.org/project/python-dotenv/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;the README&lt;/a&gt; for additional options.&lt;/p&gt;



&lt;h2&gt;Second package: python-decouple&lt;/h2&gt;



&lt;p&gt;Another library I have been using a lot with Django is &lt;code&gt;&lt;a href=&quot;https://pypi.org/project/python-decouple/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;python-decouple&lt;/a&gt;&lt;/code&gt;.&lt;/p&gt;



&lt;p&gt;The process is pretty similar:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;pip install python-decouple&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Create an &lt;code&gt;.env&lt;/code&gt; file with your config variables and &amp;#8220;gitignore&amp;#8221; it.&lt;/p&gt;



&lt;p&gt;Then in your code you can use the &lt;code&gt;config&lt;/code&gt; object. As per the example in the docs:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;from decouple import config

SECRET_KEY = config('SECRET_KEY')
DEBUG = config('DEBUG', default=False, cast=bool)
EMAIL_HOST = config('EMAIL_HOST', default='localhost')
EMAIL_PORT = config('EMAIL_PORT', default=25, cast=int)&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;The casting and the ability to specify defaults are really convenient.&lt;/p&gt;



&lt;p&gt;Another useful option is the &lt;code&gt;Csv&lt;/code&gt; helper. For example having this in our &lt;code&gt;.env&lt;/code&gt; file for &lt;a href=&quot;https://testandcode.com/83&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;our platform&lt;/a&gt; (a Django app):&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;ALLOWED_HOSTS=.localhost, .herokuapp.com&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;We can retrieve this variable in &lt;code&gt;settings.py&lt;/code&gt; like this:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;ALLOWED_HOSTS = config('ALLOWED_HOSTS', cast=Csv())&lt;/code&gt;&lt;/pre&gt;



&lt;h2&gt;Third package: dj-database-url&lt;/h2&gt;



&lt;p&gt;And while we are here, there is one more package I want to show you: &lt;a href=&quot;https://pypi.org/project/dj-database-url/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;&lt;code&gt;dj-database-url&lt;/code&gt;&lt;/a&gt;, which makes it easier to load in your database URL. &lt;/p&gt;



&lt;p&gt;As per the docs:&lt;/p&gt;



&lt;blockquote class=&quot;wp-block-quote&quot;&gt;&lt;p&gt;The&amp;nbsp;dj_database_url.config&amp;nbsp;method returns a Django database connection dictionary, populated with all the data specified in your URL. There is also a&amp;nbsp;conn_max_age&amp;nbsp;argument to easily enable Django’s connection pool.&lt;/p&gt;&lt;cite&gt;https://pypi.org/project/dj-database-url/&lt;/cite&gt;&lt;/blockquote&gt;



&lt;p&gt;And here is how to use it:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;import dj_database_url

DATABASES = {
    'default': dj_database_url.config(
        default=config('DATABASE_URL')
    )
}&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Nice and clean!&lt;/p&gt;



&lt;p&gt;This is what I mostly use, for more options, check out &lt;code&gt;python-decouple&lt;/code&gt;&amp;#8216;s README &lt;a href=&quot;https://pypi.org/project/python-decouple/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;



&lt;hr class=&quot;wp-block-separator&quot; /&gt;



&lt;h2&gt;Python Tips&lt;/h2&gt;



&lt;p&gt;As a recap, here is the &lt;code&gt;python-decouple&lt;/code&gt; code in a concise tip you can easily paste into your project:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;# pip install python-decouple dj-database-url

from decouple import config, Csv
import dj_database_url

SECRET_KEY = config('SECRET_KEY')
DEBUG = config('DEBUG', default=False, cast=bool)
ALLOWED_HOSTS = config('ALLOWED_HOSTS', cast=Csv())

DATABASES = {
    'default': dj_database_url.config(
        default=config('DATABASE_URL')
    )
}&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;We love &lt;strong&gt;practical tips&lt;/strong&gt; like these, to get our growing collection check out our book: &lt;em&gt;&lt;a href=&quot;http://pybit.es/tips&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;PyBites Python Tips &amp;#8211; 250 Bulletproof Python Tips That Will Instantly Make You A Better Developer&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;



&lt;p&gt;And with that we got a wrap. I hope this has been useful and will make it easier for you to &lt;em&gt;separate config from code&lt;/em&gt;, which I wholeheartedly agree with &lt;a href=&quot;https://12factor.net/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;The Twelve-Factor App&lt;/a&gt;, is important.&lt;/p&gt;



&lt;p&gt;&amp;#8212; Bob&lt;/p&gt;</description>
	<pubDate>Tue, 31 Aug 2021 07:50:52 +0000</pubDate>
</item>
<item>
	<title>Glyph Lefkowitz: Unproblematize</title>
	<guid>https://glyph.twistedmatrix.com/2021/08/unproblematize.html</guid>
	<link>https://glyph.twistedmatrix.com/2021/08/unproblematize.html</link>
	<description>&lt;p&gt;The essence of software engineering is &lt;em&gt;solving problems&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The first impression of this insight will almost certainly be that it seems
like a good thing.  If you have a problem, then solving it is great!&lt;/p&gt;
&lt;p&gt;But software engineers are more likely to have mental health problems&lt;sup id=&quot;fnref:1:unproblematize-2021-8&quot;&gt;&lt;a class=&quot;footnote-ref&quot; href=&quot;https://glyph.twistedmatrix.com/feeds/all.atom.xml#fn:1:unproblematize-2021-8&quot; id=&quot;fnref:1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; than
those who perform mechanical labor, and I think our problem-oriented world-view
has something to do with that.&lt;/p&gt;
&lt;p&gt;So, how could solving problems be a problem?&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;As an example, let’s consider the idea of a &lt;em&gt;bug tracker&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For many years, in the field of software, any system used to track work has
been commonly referred to as a “bug tracker”.  In recent years, the labels have
become more euphemistic and general, and we might now call them “issue
trackers”.  We have Sapir-Whorfed&lt;sup id=&quot;fnref:2:unproblematize-2021-8&quot;&gt;&lt;a class=&quot;footnote-ref&quot; href=&quot;https://glyph.twistedmatrix.com/feeds/all.atom.xml#fn:2:unproblematize-2021-8&quot; id=&quot;fnref:2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; our way into the default assumption that
any work that might need performing is a degenerate case of a &lt;em&gt;problem&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;We can contrast this with other fields.  Any industry will need to track work
that must be done.  For example, in doing some light research for this post, I
discovered that the relevant term of art in construction&lt;sup id=&quot;fnref:3:unproblematize-2021-8&quot;&gt;&lt;a class=&quot;footnote-ref&quot; href=&quot;https://glyph.twistedmatrix.com/feeds/all.atom.xml#fn:3:unproblematize-2021-8&quot; id=&quot;fnref:3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; is typically
“Project Management” or “Task Management” software.  “Projects” and “Tasks” are
no less hard work, but the terms do have a different &lt;em&gt;valence&lt;/em&gt; than “Bugs” and
“Issues”.&lt;/p&gt;
&lt;p&gt;I don’t think we can start to fix this ... problem ... by attempting to change
the terminology.  Firstly, the domain inherently lends itself to this sort of
language, which is why it emerged in the first place.&lt;/p&gt;
&lt;p&gt;Secondly, Atlassian has desperately been trying to get everybody to call their
bug tracker a “software development tool” where you write “stories” for years,
and nobody does.  It’s an issue tracker where you file bugs, and that’s what
everyone calls it and describes what they do with it.  Even they have to
protest, perhaps a bit too much, that it’s “way more than a bug and issue
tracker”&lt;sup id=&quot;fnref:4:unproblematize-2021-8&quot;&gt;&lt;a class=&quot;footnote-ref&quot; href=&quot;https://glyph.twistedmatrix.com/feeds/all.atom.xml#fn:4:unproblematize-2021-8&quot; id=&quot;fnref:4&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;This pervasive orientation towards “problems” as the atom of work does extend
to any knowledge work, and thereby to any “productivity system”.  &lt;em&gt;Any&lt;/em&gt; to-do
list is, at its core, a list of problems.  You wouldn’t put an item on the list
if you were happy with the way the world was.  Therefore every unfinished item
in any to-do list is a little pebble of worry.&lt;/p&gt;
&lt;p&gt;As of this writing, I have almost 1000 unfinished tasks on my personal to-do
list.&lt;/p&gt;
&lt;p&gt;This is to say nothing of any tasks I have to perform at work, not to mention
the implicit
&lt;a href=&quot;https://en.wikipedia.org/wiki/Aleph_number#Aleph-nought&quot;&gt;א‎&lt;sub&gt;&lt;small&gt;0&lt;/small&gt;&lt;/sub&gt;&lt;/a&gt;
of additional unfinished tasks once one considers open source issue trackers
for projects I work on.&lt;/p&gt;
&lt;p&gt;It’s not really reasonable to opt out of this habit of problematizing
everything.  This monument to human folly that I’ve meticulously constructed
out of the records of aspirations which exceed my capacity &lt;em&gt;is&lt;/em&gt;, in fact,
&lt;em&gt;also&lt;/em&gt; an excellent prioritization tool.  If you’re a good engineer, or even
just good at making to-do lists, you’ll inevitably make huge lists of problems.
On some level, this is what it means to set an intention to make the world — or
at least your world — better.&lt;/p&gt;
&lt;p&gt;On a different level though, this is how you set out to systematically give
yourself anxiety, depression, or both.  It’s clear from a wealth of
neurological research that repeated experiences and thoughts change neural
structures&lt;sup id=&quot;fnref:5:unproblematize-2021-8&quot;&gt;&lt;a class=&quot;footnote-ref&quot; href=&quot;https://glyph.twistedmatrix.com/feeds/all.atom.xml#fn:5:unproblematize-2021-8&quot; id=&quot;fnref:5&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;.  Thinking the same thought over and over literally re-wires
your brain.  Thinking the thought “here is another problem” over and over again
forever is bound to cause some problems of its own.&lt;/p&gt;
&lt;p&gt;The structure of to-do apps, bug trackers and the like is such that when an
item is completed — when a problem is &lt;em&gt;solved&lt;/em&gt; — it is subsequently removed
from both physical view and our mind’s eye.  What would be the point of simply
lingering on a completed task?  All the &lt;em&gt;useful work&lt;/em&gt; is, after all, problems
that &lt;em&gt;haven’t&lt;/em&gt; been solved yet.  Therefore the vast majority of our time is
spent contemplating nothing but problems, prompting the continuous
potentiation&lt;sup id=&quot;fnref:6:unproblematize-2021-8&quot;&gt;&lt;a class=&quot;footnote-ref&quot; href=&quot;https://glyph.twistedmatrix.com/feeds/all.atom.xml#fn:6:unproblematize-2021-8&quot; id=&quot;fnref:6&quot;&gt;6&lt;/a&gt;&lt;/sup&gt; of neural pathways which lead to despair.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;I don’t want to pretend that I have a &lt;em&gt;cure&lt;/em&gt; for this self-inflicted ailment.
I do, however, have a humble &lt;em&gt;suggestion&lt;/em&gt; for one way to push back just a
&lt;em&gt;little&lt;/em&gt; bit against the relentless, unending tide of problems slowly eroding
the shores of our souls: a positivity journal.&lt;/p&gt;
&lt;p&gt;By “journal”, I do mean a &lt;em&gt;private&lt;/em&gt; journal.  Public expressions of
positivity&lt;sup id=&quot;fnref:7:unproblematize-2021-8&quot;&gt;&lt;a class=&quot;footnote-ref&quot; href=&quot;https://glyph.twistedmatrix.com/feeds/all.atom.xml#fn:7:unproblematize-2021-8&quot; id=&quot;fnref:7&quot;&gt;7&lt;/a&gt;&lt;/sup&gt; can help; indeed, some social and cultural support for
expressing positivity is an important tool for maintaining a positive mind-set.
However, it may not be the best starting point.&lt;/p&gt;
&lt;p&gt;Unfortunately, any public expression becomes a discourse, and any discourse
inevitably becomes a
&lt;a href=&quot;https://www.merriam-webster.com/dictionary/dialectic&quot;&gt;dialectic&lt;/a&gt;.  Any
expression of a view in public is seen by some as an invitation to express its
opposite&lt;sup id=&quot;fnref:8:unproblematize-2021-8&quot;&gt;&lt;a class=&quot;footnote-ref&quot; href=&quot;https://glyph.twistedmatrix.com/feeds/all.atom.xml#fn:8:unproblematize-2021-8&quot; id=&quot;fnref:8&quot;&gt;8&lt;/a&gt;&lt;/sup&gt;.  Therefore one either becomes invested in defending the
boundaries of a positive community space — a psychically exhausting task in its
own right — or one must constantly entertain the possibility that things are,
in fact, bad, when one is &lt;em&gt;trying&lt;/em&gt; to condition one’s brain to maintain the
ability to &lt;em&gt;recognize&lt;/em&gt; when things are actually good.&lt;/p&gt;
&lt;p&gt;Thus my suggestion to write something for yourself, and &lt;em&gt;only&lt;/em&gt; for yourself.&lt;/p&gt;
&lt;p&gt;Personally, I use a template that I fill out every day, with four sections:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;“Summary”.  Summarize the day in one sentence that encapsulates its positive
   vibes.  Honestly I put this in there because the Notes app (which is what
   I’m using to maintain this) shows a little summary of the contents of the
   note, and I was getting annoyed by just seeing “Proud:” as the sole content
   of that summary.  But once I did so, I found that it helps to try to
   synthesize a positive narrative, as your brain may be constantly trying to
   assemble a negative one.  It can help to write this last, even if it’s up at
   the top of your note, once you’ve already filled out some of the following
   sections.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;“I’m proud of:”. First, focus on what &lt;em&gt;you personally&lt;/em&gt; have achieved through your
   skill and hard work.  This can be very difficult, if you are someone who has
   a habit of putting yourself down.  Force yourself to acknowledge that you
   did something useful, even if you didn’t finish anything, you almost
   certainly made progress and that progress deserves celebration.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;“I’m grateful to:”.  Who are you grateful to?  Why?  What did they do for you?  Once
   you’ve made the habit of allowing yourself to &lt;em&gt;acknowledge&lt;/em&gt; your own
   accomplishments, it’s easy to &lt;em&gt;see&lt;/em&gt; those; pay attention to the ways in
   which others support and help you.  Thank them by name.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;“I’m lucky because:”.  Particularly in post-2020 hell-world it’s easy to
   feel like every random happenstance is an aggravating tragedy.  But good
   things happen randomly all the time, and it’s easy to fail to notice them.
   Take a moment to notice things that went well for no good reason, because
   you’re &lt;em&gt;definitely&lt;/em&gt; going to feel attacked by the universe when bad things
   happen for no good reason; and they will.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Although such a journal is private, it’s helpful to &lt;em&gt;actually write out&lt;/em&gt; the
answers, to focus on them, to force yourself to get really specific.&lt;/p&gt;
&lt;p&gt;I hope this tool is useful to someone out there.  It’s not going to &lt;em&gt;solve any
problems&lt;/em&gt;, but perhaps it will make the world seem just a little brighter.&lt;/p&gt;
&lt;div class=&quot;footnote&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn:1:unproblematize-2021-8&quot;&gt;
&lt;p id=&quot;fn:1&quot;&gt;&lt;a href=&quot;https://www.infoq.com/articles/mental-health-software-teams/&quot;&gt;“Maintaining Mental health on Software Development
Teams”&lt;/a&gt;, Lena
Kozar and Vova Vovk, in InfoQ &lt;a class=&quot;footnote-backref&quot; href=&quot;https://glyph.twistedmatrix.com/feeds/all.atom.xml#fnref:1:unproblematize-2021-8&quot; title=&quot;Jump back to footnote 1 in the text&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn:2:unproblematize-2021-8&quot;&gt;
&lt;p id=&quot;fn:2&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Linguistic_relativity&quot;&gt;Wikipedia page for “Linguistic Relativity”&lt;/a&gt; &lt;a class=&quot;footnote-backref&quot; href=&quot;https://glyph.twistedmatrix.com/feeds/all.atom.xml#fnref:2:unproblematize-2021-8&quot; title=&quot;Jump back to footnote 2 in the text&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn:3:unproblematize-2021-8&quot;&gt;
&lt;p id=&quot;fn:3&quot;&gt;&lt;a href=&quot;https://medium.com/construction-project-management/construction-task-and-project-tracking-4d637cb50ce3&quot;&gt;“Construction Task and Project
Tracking”&lt;/a&gt;,
from Raptor Project Management Software &lt;a class=&quot;footnote-backref&quot; href=&quot;https://glyph.twistedmatrix.com/feeds/all.atom.xml#fnref:3:unproblematize-2021-8&quot; title=&quot;Jump back to footnote 3 in the text&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn:4:unproblematize-2021-8&quot;&gt;
&lt;p id=&quot;fn:4&quot;&gt;&lt;a href=&quot;https://www.atlassian.com/software/jira/features&quot;&gt;Jira Features List&lt;/a&gt;, Atlassian Software &lt;a class=&quot;footnote-backref&quot; href=&quot;https://glyph.twistedmatrix.com/feeds/all.atom.xml#fnref:4:unproblematize-2021-8&quot; title=&quot;Jump back to footnote 4 in the text&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn:5:unproblematize-2021-8&quot;&gt;
&lt;p id=&quot;fn:5&quot;&gt;&lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3409833/&quot;&gt;“Culture Wires the Brain: A Cognitive Neuroscience
Perspective”&lt;/a&gt;,
Denise C. Park and Chih-Mao Huang, Perspect Psychol Sci. 2010 Jul 1; 5(4):
391–400. &lt;a class=&quot;footnote-backref&quot; href=&quot;https://glyph.twistedmatrix.com/feeds/all.atom.xml#fnref:5:unproblematize-2021-8&quot; title=&quot;Jump back to footnote 5 in the text&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn:6:unproblematize-2021-8&quot;&gt;
&lt;p id=&quot;fn:6&quot;&gt;&lt;a href=&quot;https://pubmed.ncbi.nlm.nih.gov/8624136/&quot;&gt;Long-term potentiation and
learning&lt;/a&gt;, J L Martinez Jr, B E
Derrick &lt;a class=&quot;footnote-backref&quot; href=&quot;https://glyph.twistedmatrix.com/feeds/all.atom.xml#fnref:6:unproblematize-2021-8&quot; title=&quot;Jump back to footnote 6 in the text&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn:7:unproblematize-2021-8&quot;&gt;
&lt;p id=&quot;fn:7&quot;&gt;The &lt;a href=&quot;https://twitter.com/hashtag/positivePython?f=live&quot;&gt;#PositivePython hashtag on
Twitter&lt;/a&gt; was a lovely
experiment and despite my cautions here about public solutions to this
problem, it’s generally pleasant to participate in. &lt;a class=&quot;footnote-backref&quot; href=&quot;https://glyph.twistedmatrix.com/feeds/all.atom.xml#fnref:7:unproblematize-2021-8&quot; title=&quot;Jump back to footnote 7 in the text&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn:8:unproblematize-2021-8&quot;&gt;
&lt;p id=&quot;fn:8&quot;&gt;&lt;a href=&quot;https://wondermark.com/1k62/&quot;&gt;As we well know.&lt;/a&gt; &lt;a class=&quot;footnote-backref&quot; href=&quot;https://glyph.twistedmatrix.com/feeds/all.atom.xml#fnref:8:unproblematize-2021-8&quot; title=&quot;Jump back to footnote 8 in the text&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
	<pubDate>Tue, 31 Aug 2021 07:03:00 +0000</pubDate>
</item>
<item>
	<title>Python Piedmont Triad User Group: Lunch and learn series</title>
	<guid>http://www.pyptug.org/2021/08/lunch-and-learn-series.html</guid>
	<link>http://www.pyptug.org/2021/08/lunch-and-learn-series.html</link>
	<description>&lt;h2&gt;PYPTUG Lunch and Learn&lt;/h2&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;In order to help those starting out with python, we are starting a lunch and learn series. You can see upcoming lunch and learns on our meetup page:&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.meetup.com/PYthon-Piedmont-Triad-User-Group-PYPTUG/&quot;&gt;https://www.meetup.com/PYthon-Piedmont-Triad-User-Group-PYPTUG/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
	<pubDate>Tue, 31 Aug 2021 05:41:20 +0000</pubDate>
</item>
<item>
	<title>John Ludhi/nbshare.io: Object Oriented Programming In Python</title>
	<guid>https://www.nbshare.io/notebook/986482930/Object-Oriented-Programming-In-Python/</guid>
	<link>https://www.nbshare.io/notebook/986482930/Object-Oriented-Programming-In-Python/</link>
	<description>&lt;div tabindex=&quot;-1&quot; id=&quot;notebook&quot; class=&quot;border-box-sizing&quot;&gt;
    &lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h1 id=&quot;Object-Oriented-Programming-In-Python&quot;&gt;Object Oriented Programming In Python&lt;a class=&quot;anchor-link&quot; href=&quot;https://www.nbshare.io/feeds/all.atom.xml#Object-Oriented-Programming-In-Python&quot;&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Object-Oriented Programming is a fundamental programming paradigm based on the concepts of objects and classes that can perform certain operations through their &lt;strong&gt;methods&lt;/strong&gt;. We'll get into more details about OOP in this notebook.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Note: For this notebook, one should have some understanding of objects and classes.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Python-Classes&quot;&gt;Python Classes&lt;a class=&quot;anchor-link&quot; href=&quot;https://www.nbshare.io/feeds/all.atom.xml#Python-Classes&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A class is more or less a blueprint of an object. A class defines all the attributes and methods a certain object can attain. For example, a class for a student could contain attributes such as name, date of birth, phone number etc. and also contain methods which could perform any desired operations on these attributes.&lt;/p&gt;
&lt;p&gt;An important building block of the class is the class' constructor (i.e the &lt;strong&gt;__init__&lt;/strong&gt; method). This method is the default method called upon instantiation (creating an instance/object of that class) and is usually where we'll define our attributes..&lt;/p&gt;
&lt;p&gt;Let us understand all the above through an example.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;In&amp;#160;[&amp;#160;]:&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Instantiation of a new Python object ...&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;In&amp;#160;[&amp;#160;]:&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Mark&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Printing the type of the object to show which class it belongs to&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Retrieving the attribute &quot;name&quot; from the object&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;
&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;&amp;lt;__main__.Student object at 0x7f43f0d5a510&amp;gt;
&amp;lt;class '__main__.Student'&amp;gt;
Mark
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Python-Objects&quot;&gt;Python Objects&lt;a class=&quot;anchor-link&quot; href=&quot;https://www.nbshare.io/feeds/all.atom.xml#Python-Objects&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;An Object (Instance) is an instantiation of a class. As explained earlier, classes are blueprints that we can use to create objects/instances. The example shown above of the student class explains how to create a class and instantiate an object. Let us add more attributes to that class and test it's functionality.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;In&amp;#160;[&amp;#160;]:&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;datetime&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;birth_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dob&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;phone_number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;In&amp;#160;[&amp;#160;]:&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Mark&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;07/25/94&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;123456789&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Student Name: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Student Birth Date: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;birth_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Student Phone Number: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;phone_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;
&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;&amp;lt;__main__.Student object at 0x7f43f0c61f50&amp;gt;
&amp;lt;class '__main__.Student'&amp;gt;
Student Name:  Mark
Student Birth Date:  07/25/94
Student Phone Number:  123456789
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Python-Methods&quot;&gt;Python Methods&lt;a class=&quot;anchor-link&quot; href=&quot;https://www.nbshare.io/feeds/all.atom.xml#Python-Methods&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Methods are special types of functions. There is a difference between functions and methods and that is due to the fact that methods are only specific to the classes they belong to whereas functions have more of a global scope. Let us put all this into action and create a method in our student class to calculate the student's age from his/her date of birth.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;In&amp;#160;[&amp;#160;]:&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;birth_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dob&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;phone_number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;age_calculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;current_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;student_birthdate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strptime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;birth_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%m/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/%y&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;student_birthdate&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;365&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;I have used Python datetime package in above code. To learn more about Python datetime checkout &lt;a href=&quot;https://www.nbshare.io/notebook/914454993/Python-Datetime-Module/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;In&amp;#160;[&amp;#160;]:&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Mark&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;07/25/94&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;123456789&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Student Name: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Student Birth Date: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;birth_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Student Phone Number: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;phone_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Student Age: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age_calculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;
&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;&amp;lt;__main__.Student object at 0x7f43f0bc3210&amp;gt;
&amp;lt;class '__main__.Student'&amp;gt;
Student Name:  Mark
Student Birth Date:  07/25/94
Student Phone Number:  123456789
Student Age:  27
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Voila!
Now you have an idea about the building blocks of OOP in Python. Now let us discuss the Object Oriented Programming advantages.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Inheritance-In-Python&quot;&gt;Inheritance In Python&lt;a class=&quot;anchor-link&quot; href=&quot;https://www.nbshare.io/feeds/all.atom.xml#Inheritance-In-Python&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;One of the main reasons developers tend to use OOP paradigm is inheritance. To understand inheritance, Let us build up on our previous student example and extend it for university students. Now there can be different type of students in a university. For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Undergraduate Students&lt;/li&gt;
&lt;li&gt;Postgraduate Students&lt;/li&gt;
&lt;li&gt;Exchange Students (Undergraduate and Postgraduate)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For above cases, we can write a class for each type, however, this will make our code very messy and unreadable. Instead, the inheritance feature that OOP provides will help us create abstract parent class from which children classes could &lt;strong&gt;inherit&lt;/strong&gt; the common features. So what are the common attributes among all the students type defined above?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;name&lt;/li&gt;
&lt;li&gt;date of birth&lt;/li&gt;
&lt;li&gt;phone number&lt;/li&gt;
&lt;li&gt;address&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, Let us write a basic student &quot;parent&quot; class that will include the above basic attributes and then later we will write the child classes for every student type.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;In&amp;#160;[&amp;#160;]:&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;birth_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dob&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Now that we have created the parent abstract class, let us see how children subclasses can inherit this information and also can have their own unique attributes.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;In&amp;#160;[&amp;#160;]:&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Undergraduate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sat_score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fm&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sat_score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sat_score&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Postgraduate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bachelors_gpa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fm&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bachelors_gpa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bachelors_gpa&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;In&amp;#160;[&amp;#160;]:&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Undergraduate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Mark&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;07/21/94&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;123456789&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;12 Hollywood St.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1450&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Postgraduate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Sam&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;04/15/89&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;987654321&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;75 Hollywood St.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;3.50&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Student Name: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Student Birth Date: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;birth_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Student Phone Number: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Student's Address: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Student's SAT Score: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sat_score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'-----------------------------------'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Student Name: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Student Birth Date: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;birth_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Student Phone Number: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Student's Address: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Student's Bachelor's GPA: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bachelors_gpa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;
&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;&amp;lt;class '__main__.Undergraduate'&amp;gt;
Student Name:  Mark
Student Birth Date:  07/21/94
Student Phone Number:  123456789
Student's Address:  12 Hollywood St.
Student's SAT Score:  1450
-----------------------------------
&amp;lt;class '__main__.Postgraduate'&amp;gt;
Student Name:  Sam
Student Birth Date:  04/15/89
Student Phone Number:  987654321
Student's Address:  75 Hollywood St.
Student's Bachelor's GPA:  3.50
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Without inheritance, your code would have looked something like this ...&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Undergraduate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fm&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sat_score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;birth_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dob&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sat_score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sat_score&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Postgraduate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fm&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bachelors_gpa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;birth_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dob&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bachelors_gpa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bachelors_gpa&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now imagine what would have happened if you had 10 or more of the these above classes and not just two.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Polymorphism-in-Python&quot;&gt;Polymorphism in Python&lt;a class=&quot;anchor-link&quot; href=&quot;https://www.nbshare.io/feeds/all.atom.xml#Polymorphism-in-Python&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Polymorphism is the ability to use a common interface for multiple data types or forms. In examples below, we will observe how the same method can have different forms or outputs depending on their class. Let us take the classes from our previous example and add method &quot;highest_degree&quot; that can take different forms.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;In&amp;#160;[&amp;#160;]:&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;birth_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dob&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;highest_degree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Abstract Base Method&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Undergraduate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sat_score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fm&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sat_score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sat_score&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;highest_degree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Highest Degree is High Level Education.&quot;&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Postgraduate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bachelors_gpa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fm&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bachelors_gpa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bachelors_gpa&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;highest_degree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Highest Degree is a bachelor's degree.&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;In&amp;#160;[&amp;#160;]:&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Undergraduate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Mark&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;07/21/94&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;123456789&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;12 Hollywood St.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1450&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Postgraduate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Sam&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;04/15/89&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;987654321&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;75 Hollywood St.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;3.50&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;highest_degree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;highest_degree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;
&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;Highest Degree is High Level Education.
Highest Degree is a bachelor's degree.
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;As you can see, even though we used the same method call, the output was different for each and every class due to the fact that we have overridden the method called &lt;code&gt;highest_degree&lt;/code&gt; and made it custom to each and every class to demonstrate the concept that is polymorphism.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Enacpsulation-in-Python&quot;&gt;Enacpsulation in Python&lt;a class=&quot;anchor-link&quot; href=&quot;https://www.nbshare.io/feeds/all.atom.xml#Enacpsulation-in-Python&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We can also restrict access to methods and variables in OOP. This will prevent the data from being modified directly..&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;One side note here, In python, we denote the private attributes using the uderscore &lt;code&gt;_&lt;/code&gt;.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;In&amp;#160;[1]:&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;selling_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__price&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;In&amp;#160;[2]:&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Initial price: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selling_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;
&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;Initial price:  1500
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Let us try to change the price by accessing the private attribute and see if it works.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;In&amp;#160;[&amp;#160;]:&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Price change attempt: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selling_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;
&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;Initial price:  1500
Price change attempt:  1500
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;As we can see, it did'nt work.  Now let us try changing the price using the setter function &lt;code&gt;set_price&lt;/code&gt; that we created for this purpose.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;In&amp;#160;[&amp;#160;]:&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;New price: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selling_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;
&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;New price:  2000
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Note that you can also make an attribute private and not create a setter method for it that would make the attribute &quot;price&quot; unchangeable.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Ok, So far so good. We are now approaching the end of this introductory tutorial on Object oriented Programming. Let us end this tutorial by summarizing the Uses and advantages of OOP.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Uses-of-OOP&quot;&gt;Uses of OOP&lt;a class=&quot;anchor-link&quot; href=&quot;https://www.nbshare.io/feeds/all.atom.xml#Uses-of-OOP&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The uses of OOP are across all sorts of applications. Some of those are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Modelling databases.&lt;/li&gt;
&lt;li&gt;Creating Machine Learning, Neural Network models.&lt;/li&gt;
&lt;li&gt;Creating libraries and frameworks to use and/or publish.&lt;/li&gt;
&lt;li&gt;Modularizing applications for ease of organization.&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Advantages-of-OOP&quot;&gt;Advantages of OOP&lt;a class=&quot;anchor-link&quot; href=&quot;https://www.nbshare.io/feeds/all.atom.xml#Advantages-of-OOP&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Makes the program easy to understand as well as efficient.&lt;/li&gt;
&lt;li&gt;Code can easily be reused.&lt;/li&gt;
&lt;li&gt;Data is safe and secure with data abstraction and encapsultion.&lt;/li&gt;
&lt;li&gt;Polymorphism allows us to use the same interface for more than one funcitonality/output.&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;</description>
	<pubDate>Tue, 31 Aug 2021 04:40:23 +0000</pubDate>
</item>
<item>
	<title>Montreal Python User Group: Call for Speakers for Montréal-Python 88 – Hypnotized Statue</title>
	<guid>https://montrealpython.org/en/2021/08/mp-88-cfp/</guid>
	<link>https://montrealpython.org/en/2021/08/mp-88-cfp/</link>
	<description>&lt;p&gt;Hi everyone, exceptionally, our September meeting will take place on a Tuesday evening rather than our traditional Mondays to avoid the conflict with the elections.&lt;/p&gt;
&lt;p&gt;We are looking for presenters for the event. If you work on a Python project, we want to see it. Maybe you have created a machine learning algorithm to predict who will win on the 20th? It would be interesting to share its internals with the community.&lt;/p&gt;
&lt;p&gt;The rendez-vous will take place on September 22 at 6pm (Montréal time). Send up your talk proposal to &lt;a href=&quot;mailto:mtlpyteam@googlegroups.com&quot;&gt;mtlpyteam@googlegroups.com&lt;/a&gt;. Presentations can be anywhere from 5 to 20 minutes. We will accept any reasonable proposals until the program is full. We are looking forward to reading yours. &lt;/p&gt;
&lt;p&gt;More details on &lt;a href=&quot;https://www.meetup.com/Montreal-Python/events/279896005/&quot;&gt;the Meetup page of the event&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Tue, 31 Aug 2021 04:00:00 +0000</pubDate>
</item>
<item>
	<title>Wingware: Wing Python IDE Version 8.0.3 - August 31, 2021</title>
	<guid>https://wingware.com/news/2021-08-31</guid>
	<link>https://wingware.com/news/2021-08-31</link>
	<description>&lt;p&gt;Wing 8.0.3 allows specifying the Django settings module for unit tests with
&lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;--settings=&amp;lt;name&amp;gt;&lt;/span&gt;&lt;/tt&gt; in &lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Run&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;Args&lt;/span&gt;&lt;/tt&gt; on the &lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Testing&lt;/span&gt;&lt;/tt&gt; page of &lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Project&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;Properties&lt;/span&gt;&lt;/tt&gt;,
fixes using an &lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Activated&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;Env&lt;/span&gt;&lt;/tt&gt; that contains spaces in its path, prevents failure to
reformat code on remote hosts and containers, fixes searching in files with non-ascii
characters, and makes several other improvements.&lt;/p&gt;
&lt;p&gt;See the &lt;a class=&quot;reference&quot; href=&quot;https://wingware.com/pub/wingpro/8.0.3.0/CHANGELOG.txt&quot;&gt;change log&lt;/a&gt; for details.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Download Wing 8 Now:&lt;/strong&gt;  &lt;a class=&quot;reference&quot; href=&quot;https://wingware.com/downloads/wing-pro/8.0/binaries&quot;&gt;Wing Pro&lt;/a&gt; |
&lt;a class=&quot;reference&quot; href=&quot;https://wingware.com/downloads/wing-personal/8.0/binaries&quot;&gt;Wing Personal&lt;/a&gt; |
&lt;a class=&quot;reference&quot; href=&quot;https://wingware.com/downloads/wing-101/8.0/binaries&quot;&gt;Wing 101&lt;/a&gt; |
&lt;a class=&quot;reference&quot; href=&quot;https://wingware.com/downloads&quot;&gt;Compare Products&lt;/a&gt;&lt;/p&gt;
&lt;br /&gt;
&lt;h2&gt;&lt;img src=&quot;https://wingware.com/images/wing18.png&quot; /&gt; What's New in Wing 8.0&lt;/h2&gt;
&lt;br /&gt;&lt;img src=&quot;https://wingware.com/images/news/2021-07-26/wing8-screenshot.png&quot; alt=&quot;Wing 8 Screen Shot&quot; class=&quot;doc-image&quot; /&gt;&lt;br /&gt;&lt;div class=&quot;section&quot;&gt;
&lt;h3 class=&quot;title-3&quot;&gt;Support for Containers and Clusters&lt;/h3&gt;
&lt;p&gt;Wing 8 adds support for developing, testing, and debugging Python code that runs inside
containers, such as those provided by Docker and LXC/LXD, and clusters of containers
managed by a container orchestration system like Docker Compose. A new &lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Containers&lt;/span&gt;&lt;/tt&gt; tool
can be used to start, stop, and monitor container services, and new Docker container
environments may be created during project creation.&lt;/p&gt;
&lt;p&gt;For details, see &lt;a class=&quot;reference&quot; href=&quot;http://wingware.com/doc/proj/container-intro&quot;&gt;Working with Containers and Clusters&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
&lt;h3 class=&quot;title-3&quot;&gt;New Package Management Tool&lt;/h3&gt;
&lt;p&gt;Wing 8 adds a new &lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Packages&lt;/span&gt;&lt;/tt&gt; tool that provides the ability to install, remove, and
update packages found in the Python environment used by your project. This supports
pipenv, pip, and conda as the underlying package manager. Packages may be
selected manually from PyPI or by package specifications found in a &lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;requirements.txt&lt;/span&gt;&lt;/tt&gt;
or &lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Pipfile&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;For details, see &lt;a class=&quot;reference&quot; href=&quot;http://wingware.com/doc/packages/intro&quot;&gt;Package Manager&lt;/a&gt; .&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
&lt;h3 class=&quot;title-3&quot;&gt;Improved Project Creation&lt;/h3&gt;
&lt;p&gt;Wing 8 redesigns &lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;Project&lt;/span&gt;&lt;/tt&gt; support so that the host, project directory, Python
environment, and project type may all be selected independently. New projects may use
either an existing or newly created source directory, optionally cloning code from a
revision control repository. An existing or newly created Python environment may be
selected, using virtualenv, pipenv, conda, or Docker.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
&lt;h3 class=&quot;title-3&quot;&gt;Improved Python Code Analysis and Warnings&lt;/h3&gt;
&lt;p&gt;Wing 8 expands the capabilities of Wing's static analysis engine, by improving its support
for f-strings, named tuples, and other language constructs. &lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Find&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;Uses&lt;/span&gt;&lt;/tt&gt;,
&lt;tt class=&quot;literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Refactoring&lt;/span&gt;&lt;/tt&gt;, and auto-completion now work within f-string expressions, Wing's built-in
code warnings work with named tuples, the Source Assistant displays more detailed and
complete value type information, and code warning indicators are updated more cleanly
during edits.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot;&gt;
&lt;h3 class=&quot;title-3&quot;&gt;And More&lt;/h3&gt;
&lt;p&gt;Wing 8 also adds support for Python 3.10, native executable for Apple Silicon (M1)
hardware, a new Nord style display theme, reduced application startup time, and
much more.&lt;/p&gt;
&lt;p&gt;For a complete list of new features in Wing 8, see &lt;a class=&quot;reference&quot; href=&quot;https://wingware.com/wingide/whatsnew&quot;&gt;What's New in Wing 8&lt;/a&gt;.&lt;/p&gt;
&lt;br /&gt;
&lt;h2&gt;&lt;img src=&quot;https://wingware.com/images/wing18.png&quot; /&gt; Try Wing 8 Now!&lt;/h2&gt;
&lt;br /&gt;&lt;p&gt;Wing 8 is an exciting new step for Wingware's Python IDE product line. Find out how Wing
8 can turbocharge your Python development by trying it today.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Downloads:&lt;/strong&gt;  &lt;a class=&quot;reference&quot; href=&quot;https://wingware.com/downloads/wing-pro/8.0/binaries&quot;&gt;Wing Pro&lt;/a&gt; |
&lt;a class=&quot;reference&quot; href=&quot;https://wingware.com/downloads/wing-personal/8.0/binaries&quot;&gt;Wing Personal&lt;/a&gt; |
&lt;a class=&quot;reference&quot; href=&quot;https://wingware.com/downloads/wing-101/8.0/binaries&quot;&gt;Wing 101&lt;/a&gt; |
&lt;a class=&quot;reference&quot; href=&quot;https://wingware.com/downloads&quot;&gt;Compare Products&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;See &lt;a class=&quot;reference&quot; href=&quot;https://wingware.com/doc/install/upgrading&quot;&gt;Upgrading&lt;/a&gt; for details on upgrading
from Wing 7 and earlier, and &lt;a class=&quot;reference&quot; href=&quot;https://wingware.com/doc/install/migrating&quot;&gt;Migrating from Older Versions&lt;/a&gt; for a list of compatibility notes.&lt;/p&gt;
&lt;/div&gt;</description>
	<pubDate>Tue, 31 Aug 2021 01:00:00 +0000</pubDate>
</item>
<item>
	<title>PyBites: How to package and deploy CLI applications with Python PyPA setuptools build</title>
	<guid>https://pybit.es/articles/how-to-package-and-deploy-cli-apps/</guid>
	<link>https://pybit.es/articles/how-to-package-and-deploy-cli-apps/</link>
	<description>&lt;p&gt;This article covers how to package your Python code as a CLI application using just the official &lt;a href=&quot;https://www.pypa.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PyPA&lt;/a&gt; provided tools, without installing additional external dependencies.&lt;/p&gt;



&lt;p&gt;If you prefer reading code to reading words, you can find the full example demo code discussed in this article here: &lt;a href=&quot;https://github.com/yaythomas/python-cli-pypa-build-example&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;example repo of Python CLI packaged with PyPA setuptools build&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;Run your Python code from the command line&lt;/h2&gt;



&lt;h3&gt;Run a Python file as a script&lt;/h3&gt;



&lt;p&gt;Since Python is a scripting language, you can easily run your Python code from the CLI with the Python interpreter, like this:&lt;/p&gt;



&lt;div class=&quot;hcb_wrap&quot;&gt;&lt;pre class=&quot;prism undefined-numbers lang-bash&quot;&gt;&lt;code&gt;# run a python source file as a script
$ python mycode.py

# run a python module
$ python -m mycode&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;h3&gt;Create a CLI shortcut to bootstrap your Python application&lt;/h3&gt;



&lt;p&gt;If you want to run your Python script as a CLI application with a user-friendly name and not have to type in the Python interpreter &amp;amp; path in front of it, you could of course just create an executable shortcut file in your &lt;code&gt;/bin&lt;/code&gt; directory like this:&lt;/p&gt;



&lt;div class=&quot;hcb_wrap&quot;&gt;&lt;pre class=&quot;prism undefined-numbers lang-bash&quot;&gt;&lt;code&gt;#!/bin/sh

python3 /path/to/mycode.py &amp;quot;$@&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;&lt;img src=&quot;https://s.w.org/images/core/emoji/13.1.0/72x72/1f4a1.png&quot; alt=&quot;💡&quot; class=&quot;wp-smiley&quot; /&gt; The &lt;code&gt;&quot;$@&quot;&lt;/code&gt; passes all the CLI arguments from your shortcut launcher to your Python script.&lt;/p&gt;



&lt;p&gt;But this is not all that useful when you actually want to distribute your code, because you&amp;#8217;d still have to create &amp;amp; permission this executable file on all your end-users&amp;#8217; machines somehow, in addition to provisioning the actual Python dependencies and your app itself.&lt;/p&gt;



&lt;p&gt;Thankfully, Python has great well-tested &amp;amp; widely used built-in mechanisms for doing exactly this for you &amp;#8211; so no, you don&amp;#8217;t even need to jerry-rig your own shortcut like this at all!&lt;/p&gt;



&lt;h2&gt;How to package your Python code as a CLI application the proper way&lt;/h2&gt;



&lt;p&gt;The standard way to package your Python code is to use &lt;a href=&quot;https://setuptools.readthedocs.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;setuptools&lt;/a&gt;. You use &lt;strong&gt;setuptools&lt;/strong&gt; to create distributions that you can install with &lt;a href=&quot;https://pip.pypa.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;pip&lt;/a&gt;.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;setuptools&lt;/strong&gt; has been around for ages, and is currently (August 2021) in a bit of a transitional phase. This has been the case for a few years. This means that there are different ways of achieving the same thing using this tool-set, as the new and improved ways slowly have been supplanting the old:&lt;/p&gt;



&lt;ul&gt;&lt;li&gt;&lt;strong&gt;setup.py&lt;/strong&gt; &amp;#8211; the old way&lt;/li&gt;&lt;li&gt;&lt;strong&gt;setup.cfg&lt;/strong&gt; &amp;#8211; the sort-of newer&lt;/li&gt;&lt;li&gt;&lt;strong&gt;pyproject.toml&lt;/strong&gt; (aka PEP 517 &amp;amp; PEP 518) &amp;#8211; shiny &amp;amp; new&lt;/li&gt;&lt;/ul&gt;



&lt;p&gt;The key to creating your own CLI application is to specify an &lt;a href=&quot;https://setuptools.readthedocs.io/en/latest/userguide/entry_point.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;entry_point&lt;/a&gt; in either your &lt;strong&gt;setup.cfg&lt;/strong&gt; or &lt;strong&gt;setup.py&lt;/strong&gt; file.&lt;/p&gt;



&lt;p&gt;The &lt;strong&gt;pyproject.toml&lt;/strong&gt; specification does define this property (as &lt;code&gt;[project.scripts]&lt;/code&gt;), but the standard PyPA build has not yet implemented actually doing anything with this property yet.&lt;/p&gt;



&lt;h2&gt;Should you use setup.cfg, setup.py or pyproject.toml to configure Python packaging?&lt;/h2&gt;



&lt;p&gt;The short answer is: for the moment, you probably should have all three.&lt;/p&gt;



&lt;p&gt;Now for the longer answer. You don&amp;#8217;t &lt;em&gt;necessarily&lt;/em&gt; have to have all three, but if you don&amp;#8217;t you need to be sure you know exactly what you&amp;#8217;re doing and why, otherwise you&amp;#8217;re setting yourself up for mysterious errors down the line. If you&amp;#8217;re not interested in the evolution &amp;amp; background of these mechanisms, feel free to skip to the next section.&lt;/p&gt;



&lt;h3&gt;In the beginning was setup.py&lt;/h3&gt;



&lt;p&gt;&lt;strong&gt;setup.py&lt;/strong&gt; is the older, traditional way of packaging Python projects. Since &lt;strong&gt;setup.py&lt;/strong&gt; is literally a Python script in itself, it is very powerful because you can script whatever advanced installation functionality you want as part of the install.&lt;/p&gt;



&lt;p&gt;But just because you &lt;em&gt;can&lt;/em&gt;, doesn&amp;#8217;t mean you &lt;em&gt;should&lt;/em&gt;. The more unusual scripting you do as part of your install, the more your install becomes brittle &amp;amp; unpredictable on diverse client machines where you don&amp;#8217;t necessarily have strict control over the state &amp;amp; configuration of those machines.&lt;/p&gt;



&lt;h3&gt;Evolution to setup.cfg&lt;/h3&gt;



&lt;p&gt;By comparison, &lt;strong&gt;setup.cfg&lt;/strong&gt; is a config file, not an installation script like &lt;strong&gt;setup.py&lt;/strong&gt;. &lt;strong&gt;setup.cfg&lt;/strong&gt; is static, &lt;strong&gt;setup.py &lt;/strong&gt;is dynamic.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;setup.cfg&lt;/strong&gt; lets you specify declarative config &amp;#8211; meaning that you can define your project meta-data without having to worry about scripting. This is a good thing because you avoid having to run arbitrary code during installs, which will make your security &amp;amp; ops teams happy, and you don&amp;#8217;t have to maintain boilerplate code in your source. Bonus!&lt;/p&gt;



&lt;p&gt;Although it has been there alongside &lt;strong&gt;setup.py&lt;/strong&gt; since the beginning, &lt;strong&gt;setup.cfg&lt;/strong&gt; has taken more of a central role over the years. You can more or less accomplish the same thing with either, so from this perspective it doesn&amp;#8217;t really matter which you use.&lt;/p&gt;



&lt;p&gt;However, even if you do ALL your configuration in &lt;strong&gt;setup.cfg&lt;/strong&gt; you do still need a stub &lt;strong&gt;setup.py&lt;/strong&gt; file &lt;em&gt;unless&lt;/em&gt; you are running a PEP517 build. We&amp;#8217;ll discuss this new build system in the next section.&lt;/p&gt;



&lt;h3&gt;Enter pyproject.toml&lt;/h3&gt;



&lt;p&gt;&lt;strong&gt;pyproject.toml&lt;/strong&gt; is the official, anointed successor to &lt;strong&gt;setup.py&lt;/strong&gt; and &lt;strong&gt;setup.cfg&lt;/strong&gt;, but it has not reached feature parity with its predecessors yet. This new file format has come as a result of the &lt;a href=&quot;https://www.python.org/dev/peps/pep-0517/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PEP517 build specification&lt;/a&gt;.&lt;/p&gt;



&lt;p&gt;One of the notable features of the new Python build mechanisms specified in PEP517 is that you don&amp;#8217;t&lt;em&gt; have&lt;/em&gt; to use the &lt;strong&gt;setuptools&lt;/strong&gt; build system &amp;#8211; other build &amp;amp; packaging tools like &lt;a href=&quot;https://python-poetry.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Poetry&lt;/a&gt; and &lt;a href=&quot;https://flit.readthedocs.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Flit&lt;/a&gt; can use the same &lt;strong&gt;pyproject.toml&lt;/strong&gt; specification file (PEP621) to package python projects.&lt;/p&gt;



&lt;p&gt;Eventually all these tools &lt;em&gt;should&lt;/em&gt; be using the exact same &lt;strong&gt;pyproject.toml&lt;/strong&gt; file format, but be aware that historically build tools other than &lt;strong&gt;setuptools&lt;/strong&gt; have had their own ways of specifying CLI entry-points, so be sure to check the documentation for whichever tool you end up using to double-check that it&amp;#8217;s conforming to the latest PEP621 standard. Here, we are just going to focus on how to do this with &lt;strong&gt;setuptools&lt;/strong&gt;.&lt;/p&gt;



&lt;p&gt;While the latest version of the &lt;strong&gt;pyproject.toml&lt;/strong&gt; specification did add definitions for project meta-data that you will usually find in &lt;strong&gt;setup.cfg&lt;/strong&gt; and/or &lt;strong&gt;setup.py&lt;/strong&gt;, the &lt;strong&gt;setuptools&lt;/strong&gt; build tool does NOT yet support using the meta-data from &lt;strong&gt;pyproject.toml&lt;/strong&gt;. Other PEP517 compliant tools like Flit &amp;amp; Poetry do support projects with&lt;em&gt; only&lt;/em&gt; a &lt;strong&gt;pyproject.toml&lt;/strong&gt; file, so if you use those you don&amp;#8217;t need &lt;strong&gt;setup.py&lt;/strong&gt; and/or &lt;strong&gt;setup.cfg&lt;/strong&gt;.&lt;/p&gt;



&lt;p&gt;You can find the &lt;a href=&quot;https://www.python.org/dev/peps/pep-0621/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;full file format specification for pyproject.toml in PEP621&lt;/a&gt;.&lt;/p&gt;



&lt;p&gt;For all the gory details &amp;amp; progress of implementing full support for &lt;strong&gt;pyproject.toml &lt;/strong&gt;metadata in &lt;strong&gt;setuptools&lt;/strong&gt;, you can track the discussion here: &lt;a href=&quot;https://github.com/pypa/setuptools/issues/1688&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/pypa/setuptools/issues/1688&lt;/a&gt;&lt;/p&gt;



&lt;h3&gt;Recommended Python packaging setup in 2021&lt;/h3&gt;



&lt;p&gt;If you are using PyPA&amp;#8217;s &lt;strong&gt;setuptools&lt;/strong&gt; during this transitional phase of Python packaging, while you can get away with using one or the other combination of &lt;strong&gt;setup.py&lt;/strong&gt;, &lt;strong&gt;setup.cfg&lt;/strong&gt; &amp;amp; &lt;strong&gt;pyproject.toml&lt;/strong&gt; to specify your meta-data and build attributes, you probably want to cover your bases and avoid subtle problems by having all 3 as follows:&lt;/p&gt;



&lt;ol&gt;&lt;li&gt;have a minimal &lt;strong&gt;pyproject.toml&lt;/strong&gt; to specify the build system&lt;/li&gt;&lt;li&gt;put all project related config in &lt;strong&gt;setup.cfg&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;have a simple shim &lt;strong&gt;setup.py&lt;/strong&gt;&lt;/li&gt;&lt;/ol&gt;



&lt;p&gt;By &amp;#8220;subtle problems&amp;#8221; I mean inconsistencies like editable installs not working or builds that look like they&amp;#8217;re working but they&amp;#8217;re not actually using the meta-data you thought you specified (which you might only discover at deployment, urk!). So let&amp;#8217;s avoid the unpleasantness!&lt;/p&gt;



&lt;p&gt;In this setup, since &lt;strong&gt;pyproject.toml&lt;/strong&gt; and &lt;strong&gt;setup.py&lt;/strong&gt; are only minimalist shims, your individual project related configuration is only contained in the one place in &lt;strong&gt;setup.cfg&lt;/strong&gt;. Therefore you&amp;#8217;re not needlessly duplicating values between different files.&lt;/p&gt;



&lt;h2&gt;Create CLI entry point configuration for your Python project&lt;/h2&gt;



&lt;h3&gt;Sample project structure&lt;/h3&gt;



&lt;p&gt;Let&amp;#8217;s work through an example of a simple CLI application.&lt;/p&gt;



&lt;p&gt;The project structure looks like this:&lt;/p&gt;



&lt;pre class=&quot;wp-block-preformatted&quot;&gt;.
│ my-repo/
	│- mypackage/
		│- mymodule.py
	│- pyproject.toml
	│- setup.cfg
	│- setup.py
&lt;/pre&gt;



&lt;h3&gt;mypackage/mymodule.py&lt;/h3&gt;



&lt;p&gt;This is just some arbitrary code that we want to call directly from the CLI:&lt;/p&gt;



&lt;div class=&quot;hcb_wrap&quot;&gt;&lt;pre class=&quot;prism undefined-numbers lang-python&quot;&gt;&lt;code&gt;def my_function():
    print('hello from my_function')


def another_function():
    print('hello from another_function')


if __name__ == &amp;quot;__main__&amp;quot;:
    &amp;quot;&amp;quot;&amp;quot;This runs when you execute '$ python3 mypackage/mymodule.py'&amp;quot;&amp;quot;&amp;quot;
    my_function()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;h3&gt;setup.py&lt;/h3&gt;



&lt;p&gt;To allow editable installs (useful for your local dev machine) you need a shim &lt;strong&gt;setup.py&lt;/strong&gt; file.&lt;/p&gt;



&lt;p&gt;All you need in this file is this bit of boilerplate:&lt;/p&gt;



&lt;div class=&quot;hcb_wrap&quot;&gt;&lt;pre class=&quot;prism undefined-numbers lang-python&quot;&gt;&lt;code&gt;from setuptools import setup

setup()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;&lt;img src=&quot;https://s.w.org/images/core/emoji/13.1.0/72x72/1f4a1.png&quot; alt=&quot;💡&quot; class=&quot;wp-smiley&quot; /&gt; You could actually skip the &lt;strong&gt;setup.cfg&lt;/strong&gt; file and set your properties in &lt;code&gt;setup()&lt;/code&gt; itself in &lt;strong&gt;setup.py&lt;/strong&gt;, but this will make your migration harder in the future when the new PEP517 build system, like a death-star, is fully operational. I mention this because you&amp;#8217;ll see a lot of examples on &lt;a href=&quot;https://stackoverflow.com&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Stack Overflow&lt;/a&gt; &amp;amp; friends that go this way &amp;#8211; it is not wrong, per se, but be aware that it is the older way of doing things.&lt;/p&gt;



&lt;p&gt;An old-style &lt;strong&gt;setup.py&lt;/strong&gt; file would look something like this:&lt;/p&gt;



&lt;div class=&quot;hcb_wrap&quot;&gt;&lt;pre class=&quot;prism undefined-numbers lang-python&quot;&gt;&lt;code&gt;from setuptools import setup

setup(
	name='mypackage',
	version='0.0.1',
    # To provide executable scripts, use entry points in preference to the
    # &amp;quot;scripts&amp;quot; keyword. Entry points provide cross-platform support and allow
    # pip to create the appropriate form of executable for the target platform.
    entry_points={
        'console_scripts': [
            'myapplication=mypackage.mymodule:my_function'
        ]
    },
)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;h3&gt;setup.cfg&lt;/h3&gt;



&lt;p&gt;The &lt;strong&gt;setup.cfg&lt;/strong&gt; file is where the real magic happens. This is where you set your project-specific properties.&lt;/p&gt;



&lt;div class=&quot;hcb_wrap&quot;&gt;&lt;pre class=&quot;prism undefined-numbers lang-plain&quot;&gt;&lt;code&gt;[metadata]
name = mypackage
version = 0.0.1

[options]
packages = mypackage

[options.entry_points]
console_scripts =
    my-application = mypackage.mymodule:my_function
    another-application = mypackage.mymodule:another_function&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;ul&gt;&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;The build system uses this value to generate the build output files.&lt;/li&gt;&lt;li&gt;If you do not specify this, your output filename will have &amp;#8220;UNKNOWN&amp;#8221; instead of a more user-friendly name.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;version&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;The build system uses this value to add a version number to your output files.&lt;/li&gt;&lt;li&gt;If you do not specify this, your output filename will contain &amp;#8220;0.0.0&amp;#8221;.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;packages&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;Use this property to tell the build system which packages to build.&lt;/li&gt;&lt;li&gt;This is a list, so you can specify more than one package.&lt;/li&gt;&lt;li&gt;If you&amp;#8217;re not sure what a &amp;#8220;package&amp;#8221; is in Python, just think of it as the name of the directory your code lives in.&lt;/li&gt;&lt;li&gt;&lt;img src=&quot;https://s.w.org/images/core/emoji/13.1.0/72x72/2757.png&quot; alt=&quot;❗&quot; class=&quot;wp-smiley&quot; /&gt;If you do not specify this, your build output will not actually contain your code. If you forget to specify this, your package &amp;amp; deploy will look like it&amp;#8217;s working, but it won&amp;#8217;t actually package the code you want to run and it will not actually deploy correctly.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;console_scripts&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;This property tells the build system to create a shortcut CLI wrapper script to run a Python function.&lt;/li&gt;&lt;li&gt;This is a list, so you can create more than one CLI application from the same code-base.&lt;/li&gt;&lt;li&gt;In this example, we are creating two CLI shortcuts:&lt;ul&gt;&lt;li&gt;&lt;strong&gt;my-application&lt;/strong&gt;, which calls &lt;strong&gt;my_function&lt;/strong&gt; in &lt;strong&gt;mypackage/mymodule.py&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;another-application&lt;/strong&gt;, which calls &lt;strong&gt;another_function&lt;/strong&gt; in &lt;strong&gt;mypackage/mymodule.py&lt;/strong&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;The syntax for an entry is: &lt;strong&gt;&amp;lt;name&amp;gt; = [&amp;lt;package&amp;gt;.[&amp;lt;subpackage&amp;gt;.]]&amp;lt;module&amp;gt;[:&amp;lt;object&amp;gt;.&amp;lt;object&amp;gt;]&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;The name on the left will become the name of your CLI application. This is what an end-user will type in the CLI to invoke your application.&lt;/li&gt;&lt;li&gt;If you do not specify this property, your build will not create any CLI shortcuts for your code.&lt;/li&gt;&lt;li&gt;&lt;img src=&quot;https://s.w.org/images/core/emoji/13.1.0/72x72/2757.png&quot; alt=&quot;❗&quot; class=&quot;wp-smiley&quot; /&gt;Remember that you have to include the root package of the code you reference here under &lt;code&gt;options.packages&lt;/code&gt;, otherwise the build tool will not actually package the code you&amp;#8217;re referencing here!&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;



&lt;p&gt;There are many more meta-data properties that you can (and maybe should!) specify in &lt;strong&gt;setup.cfg&lt;/strong&gt; &amp;#8211; here is a &lt;a href=&quot;https://setuptools.readthedocs.io/en/latest/userguide/declarative_config.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;more comprehensive setup.cfg example&lt;/a&gt;. Given here instead is the bare minimum for a tidy build &amp;amp; packaging experience.&lt;/p&gt;



&lt;p&gt;&lt;img src=&quot;https://s.w.org/images/core/emoji/13.1.0/72x72/1f4a1.png&quot; alt=&quot;💡&quot; class=&quot;wp-smiley&quot; /&gt; Of the additional unlisted properties, of especial interest is &lt;strong&gt;install_requires&lt;/strong&gt;, with which you specify dependencies &amp;#8211; in other words, any external packages that your code depends on and that you want the installer to install alongside your application.&lt;/p&gt;



&lt;div class=&quot;hcb_wrap&quot;&gt;&lt;pre class=&quot;prism undefined-numbers lang-plain&quot;&gt;&lt;code&gt;[options]
install_requires =
    requests
    importlib; python_version == &amp;quot;2.6&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;h3&gt;pyproject.toml&lt;/h3&gt;



&lt;p&gt;All you need in your minimalist &lt;strong&gt;pyproject.toml&lt;/strong&gt; file is:&lt;/p&gt;



&lt;div class=&quot;hcb_wrap&quot;&gt;&lt;pre class=&quot;prism undefined-numbers lang-plain&quot;&gt;&lt;code&gt;[build-system]
build-backend = &amp;quot;setuptools.build_meta&amp;quot;
requires = [&amp;quot;setuptools&amp;quot;, &amp;quot;wheel&amp;quot;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;&lt;img src=&quot;https://s.w.org/images/core/emoji/13.1.0/72x72/1f4a1.png&quot; alt=&quot;💡&quot; class=&quot;wp-smiley&quot; /&gt; In the &lt;strong&gt;pyproject.toml&lt;/strong&gt; specification, &lt;code&gt;project.scripts&lt;/code&gt; is the equivalent to &lt;code&gt;console_scripts&lt;/code&gt; in &lt;strong&gt;setup.py&lt;/strong&gt; and &lt;strong&gt;setup.cfg&lt;/strong&gt;. However, at present this functionality is not implemented yet by the &lt;strong&gt;setuptools&lt;/strong&gt; build system.&lt;/p&gt;



&lt;h2&gt;Use python -m build to create a python distribution&lt;/h2&gt;



&lt;p&gt;&lt;strong&gt;build&lt;/strong&gt;, aka PyPA build, is the more modern PEP517 equivalent of the older &lt;code&gt;setup.py sdist bdist_wheel&lt;/code&gt; build command with which you might be familiar.&lt;/p&gt;



&lt;p&gt;If you&amp;#8217;ve not done this before, you can install the build tool like this:&lt;/p&gt;



&lt;div class=&quot;hcb_wrap&quot;&gt;&lt;pre class=&quot;prism undefined-numbers lang-bash&quot;&gt;&lt;code&gt;$ pip install build&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;Now, in the root of your project directory, you can run:&lt;/p&gt;



&lt;div class=&quot;hcb_wrap&quot;&gt;&lt;pre class=&quot;prism undefined-numbers lang-bash&quot;&gt;&lt;code&gt;$ python -m build&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;This will result in two output files in the &lt;code&gt;dist&lt;/code&gt; directory:&lt;/p&gt;



&lt;ul&gt;&lt;li&gt;dist/mypackage-0.0.1.tar.gz&lt;/li&gt;&lt;li&gt;dist/mypackage-0.0.1-py3-none-any.whl&lt;/li&gt;&lt;/ul&gt;



&lt;p&gt;The tool will create the &lt;strong&gt;./dist&lt;/strong&gt; directory for you if it doesn&amp;#8217;t exist already.&lt;/p&gt;



&lt;p&gt;What this command does is to create a source distribution tarball (the &lt;strong&gt;tar.gz&lt;/strong&gt; file), and then also create a wheel from that source distribution. A wheel (&lt;strong&gt;.whl&lt;/strong&gt;) is a versioned distribution format that deploys faster because during installation you can skip the build step necessary for source distributions, and there are better caching mechanisms for it.&lt;/p&gt;



&lt;p&gt;The output filenames you see here follow a defined format that you can find specified in the &lt;a href=&quot;https://www.python.org/dev/peps/pep-0427/#file-name-convention&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PEP427 wheel file name convention&lt;/a&gt;.&lt;/p&gt;



&lt;p&gt;You&amp;#8217;ll notice that the build tool uses &lt;strong&gt;name&lt;/strong&gt; and &lt;strong&gt;version&lt;/strong&gt; from &lt;strong&gt;setup.cfg&lt;/strong&gt; to generate these filenames &amp;#8211; which is why, even though you strictly speaking don&amp;#8217;t&lt;em&gt; need&lt;/em&gt; to specify these properties, they are useful if you want nicely named &amp;amp; easily identifiable outputs.&lt;/p&gt;



&lt;h2&gt;Install your wheel with pip&lt;/h2&gt;



&lt;p&gt;You can use &lt;a href=&quot;https://pip.pypa.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;pip&lt;/a&gt; to install the distribution you just created. (I&amp;#8217;m sure &lt;strong&gt;pip&lt;/strong&gt; doesn&amp;#8217;t need any introduction to any Pythonista&amp;#8230;)&lt;/p&gt;



&lt;div class=&quot;hcb_wrap&quot;&gt;&lt;pre class=&quot;prism undefined-numbers lang-bash&quot;&gt;&lt;code&gt;$ pip install dist/mypackage-0.0.1-py3-none-any.whl&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;h3&gt;How PyPA build creates CLI shortcuts&lt;/h3&gt;



&lt;p&gt;The pip install command will install your package and create the CLI shortcuts (the ones you specified in &lt;strong&gt;setup.cfg&lt;/strong&gt;) in the current Python environment&amp;#8217;s &lt;code&gt;bin&lt;/code&gt; directory.&lt;/p&gt;



&lt;ul&gt;&lt;li&gt;{Python Path}/bin/my-application&lt;/li&gt;&lt;li&gt;{Python Path}/bin/another-application&lt;/li&gt;&lt;/ul&gt;



&lt;p&gt;Under the hood, these shortcut files are actually just a more sophisticated version of the quick-and-dirty bash file we created in the beginning. The auto-generated &lt;strong&gt;my-application&lt;/strong&gt; shortcut file in the &lt;code&gt;bin/&lt;/code&gt; directory looks like this:&lt;/p&gt;



&lt;div class=&quot;hcb_wrap&quot;&gt;&lt;pre class=&quot;prism undefined-numbers lang-python&quot;&gt;&lt;code&gt;#!/bin/python3
# -*- coding: utf-8 -*-
import re
import sys
from mypackage.mymodule import my_function
if __name__ == '__main__':
    sys.argv[0] = re.sub(r'(-script\.pyw|\.exe)?$', '', sys.argv[0])
    sys.exit(my_function())&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;h3&gt;Testing your install in a clean environment&lt;/h3&gt;



&lt;p&gt;&lt;img src=&quot;https://s.w.org/images/core/emoji/13.1.0/72x72/1f4a1.png&quot; alt=&quot;💡&quot; class=&quot;wp-smiley&quot; /&gt;If you want to test whether your shiny new package is installable, create a fresh new virtual environment and install your package into it so that you can test it in isolation.&lt;/p&gt;



&lt;div class=&quot;hcb_wrap&quot;&gt;&lt;pre class=&quot;prism undefined-numbers lang-bash&quot;&gt;&lt;code&gt;# create virtual environment
$ python3 -m venv .env/fresh-install-test

# activate your virtual environment
$ . .env/fresh-install-test/bin/activate

# install your package into this fresh environment
$ pip install dist/mypackage-0.0.0-py3-none-any.whl

# your shortcuts are now in the venv bin directory
$ ls .env/fresh-install-test/bin/
my-application
another-application

# so you can run it directly from the cli
$ my-application
hello from my_function

# and run the second application
$ another-application
hello from another_function&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;h2&gt;Publishing &amp;amp; distributing your Python package&lt;/h2&gt;



&lt;p&gt;Publishing means &lt;em&gt;how&lt;/em&gt; you make your Python package available to your end-users.&lt;/p&gt;



&lt;p&gt;How you publish your package depends on your deployment plan for your specific requirements. A full discussion of these is beyond the scope of this article, but just to get you started, some of the options are:&lt;/p&gt;



&lt;ul&gt;&lt;li&gt;You can publish to and &lt;a href=&quot;https://pip.pypa.io/en/stable/topics/vcs-support/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;use pip to install from a private git repository&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;You can create your own &lt;a href=&quot;https://packaging.python.org/guides/hosting-your-own-index/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;private Python repository manager&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;You could just use &lt;strong&gt;pip&lt;/strong&gt; to install the &lt;strong&gt;whl&lt;/strong&gt; or &lt;strong&gt;sdist&lt;/strong&gt; from a file-share in your organization.&lt;/li&gt;&lt;li&gt;If you are planning to release your application publicly to the official &lt;a href=&quot;https://pypi.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PyPI&lt;/a&gt; repository, you can use &lt;a href=&quot;https://twine.readthedocs.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;twine&lt;/a&gt; to upload the distribution to PyPi.&lt;ul&gt;&lt;li&gt;Be aware that you very probably should be a lot more detailed in filling in your project&amp;#8217;s meta-data than the deliberately bare-bones minimal example given here if you are planning to create a public package.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Whereas &lt;strong&gt;pip&lt;/strong&gt; installs to whichever Python environment is active at the time, this can get messy on end-user machines that you do not control &amp;#8211; for example, shared dependencies can clash with other applications&amp;#8217; requirements.&lt;ul&gt;&lt;li&gt;If you want to install your application into an isolated environment, purposely separate just for your app with the dependencies for your app isolated from and not polluting the main system-wide Python installation, you can use &lt;a href=&quot;https://pypa.github.io/pipx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;pipx&lt;/a&gt; to install from a git repo (such as a private repo in your organization) or even just a file-path.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;You can email your wheels around as attachments and tell people to install. Just kidding, just kidding! Don&amp;#8217;t do this &amp;#8211; just because it&amp;#8217;s been known to happen doesn&amp;#8217;t make it &lt;em&gt;right&lt;/em&gt;. . .&lt;/li&gt;&lt;/ul&gt;



&lt;h2&gt;How to structure a Python CLI project&lt;/h2&gt;



&lt;p&gt;For the sake of clarity, this example just directly calls a simple Python function from the CLI. Your code is very likely to be more involved.&lt;/p&gt;



&lt;p&gt;How best to structure your code in any given application is, of course, a very. . . debatable. . . topic &lt;img src=&quot;https://s.w.org/images/core/emoji/13.1.0/72x72/1f62c.png&quot; alt=&quot;😬&quot; class=&quot;wp-smiley&quot; /&gt;. So instead of making bold claims about what is &amp;#8220;best&amp;#8221;, lets instead just look at what a typical tidy structure might look like&amp;#8230; which is to say, while this is a relatively common way of doing things, it&amp;#8217;s not necessarily THE way.&lt;/p&gt;



&lt;pre class=&quot;wp-block-preformatted&quot;&gt;.
│ my-repo/
  │- mypackage/
    │- mynamespace/
      │- anothermodule.py
    │- anothernamespace/
      │- arbmodule.py
    │- mymodule.py
    │- cli.py
    │- pyproject.toml
    │- setup.cfg
    │- setup.py&lt;/pre&gt;



&lt;p&gt;If you create your entry-point function as &lt;code&gt;def main()&lt;/code&gt; in &lt;strong&gt;cli.py&lt;/strong&gt; then your &lt;strong&gt;setup.cfg&lt;/strong&gt; file &lt;strong&gt;entry_points &lt;/strong&gt;configuration simply becomes:&lt;/p&gt;



&lt;div class=&quot;hcb_wrap&quot;&gt;&lt;pre class=&quot;prism undefined-numbers lang-plain&quot;&gt;&lt;code&gt;[options.entry_points]
console_scripts =
    my-application = mypackage.cli:main&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;You can think of your functional code as a library, and the CLI is effectively a client or consumer of that library. Break your code into namespaces and modules that make sense for you &amp;#8211; you can group together code by functional area, or by dependency, or by object, or by whatever categorization scheme works for you.&lt;/p&gt;



&lt;p&gt;If you think of the CLI as a consumer of your library&amp;#8217;s API, it makes sense to encapsulate the code specific to CLI handling in its own module. You can name this what you like, but &lt;strong&gt;cli.py&lt;/strong&gt; does have the benefit of being snappy. In this module you will very probably import something like &lt;a href=&quot;https://docs.python.org/3/library/argparse.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;argparse&lt;/a&gt;, to parse your CLI input arguments, print out errors when someone invokes your CLI with the wrong arguments, assign defaults and generate help &amp;amp; usage messages.&lt;/p&gt;



&lt;p&gt;Here is a real-life example of a large project structured like this, with a &lt;a href=&quot;https://github.com/pypyr/pypyr/blob/master/pypyr/cli.py&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CLI handling module&lt;/a&gt; that encapsulates all CLI functionality and invokes the underlying program being called like you would an API.&lt;/p&gt;



&lt;h2&gt;Alternative packaging tools in Python&lt;/h2&gt;



&lt;p&gt;In this article we just focused on using the &amp;#8220;official&amp;#8221; minimalist way of packaging &amp;amp; building your Python projects. But there are other 3rd party options out there that provide some extra functionality over and above what the vanilla setuptools &lt;strong&gt;build&lt;/strong&gt; tool does.&lt;/p&gt;



&lt;p&gt;We&amp;#8217;ve already mentioned PEP517 compliant build tools &lt;strong&gt;poetry&lt;/strong&gt; and &lt;strong&gt;flit&lt;/strong&gt;. With these, as with the standard PyPA &lt;strong&gt;build&lt;/strong&gt;, the end-user has to have an active Python run-time on their machine. Your code installs into that Python environment.&lt;/p&gt;



&lt;p&gt;Whereas other utilities follow a completely different approach by creating a single file executable of your application and its Python dependencies &amp;#8211; these 3rd party utilities create a standalone platform-native executable of your app for you. This means that the end-user does not even need to have a Python distribution on their machine &amp;#8211; they can just run your executable file by itself.&lt;/p&gt;



&lt;p&gt;In no particular order, some free tools in this space are:&lt;/p&gt;



&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.pyinstaller.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PyInstaller&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.py2exe.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;p2exe&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/schmir/bbfreeze&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;bbFreeze&lt;/a&gt; (unmaintained)&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://cx-freeze.readthedocs.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;cx_Freeze&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://beeware.org/project/projects/tools/briefcase/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Briefcase&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://nuitka.net&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Nuitka&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://py2app.readthedocs.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;py2app&lt;/a&gt; (Mac-only)&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://pyoxidizer.readthedocs.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PyOxidizer&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;



&lt;p&gt;Each of these has its own way of specifying which function to call from the CLI, so if you do want to go in this direction, be sure to check the documentation for your chosen tool.&lt;/p&gt;



&lt;p&gt;&lt;img src=&quot;https://s.w.org/images/core/emoji/13.1.0/72x72/1f64c.png&quot; alt=&quot;🙌&quot; class=&quot;wp-smiley&quot; /&gt; Much thanks for these excellent tool suggestions to &lt;a href=&quot;https://twitter.com/driscollis&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Mike Driscoll&lt;/a&gt; and &lt;a href=&quot;https://github.com/markgreene74&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;markgreene&lt;/a&gt; from the &lt;a href=&quot;https://pybit.es/community/&quot;&gt;PyBites Community&lt;/a&gt;, which you can freely join on slack! &lt;img src=&quot;https://s.w.org/images/core/emoji/13.1.0/72x72/1f64c.png&quot; alt=&quot;🙌&quot; class=&quot;wp-smiley&quot; /&gt;&lt;/p&gt;</description>
	<pubDate>Mon, 30 Aug 2021 20:01:45 +0000</pubDate>
</item>
<item>
	<title>Python Insider: Python 3.9.7 and 3.8.12 are now available</title>
	<guid>http://feedproxy.google.com/~r/PythonInsider/~3/FQQRx2G9O4s/python-397-and-3812-are-now-available.html</guid>
	<link>http://feedproxy.google.com/~r/PythonInsider/~3/FQQRx2G9O4s/python-397-and-3812-are-now-available.html</link>
	<description>&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;h2&gt;Python 3.9.7&lt;/h2&gt;
Get it here: &lt;a href=&quot;https://www.python.org/downloads/release/python-397/&quot;&gt;https://www.python.org/downloads/release/python-397/&lt;/a&gt;&lt;br /&gt;&lt;div class=&quot;onebox-metadata&quot;&gt;
    
    
  &lt;/div&gt;

  


&lt;p&gt;Python 3.9.7 is the newest major &lt;strong&gt;stable&lt;/strong&gt; release of 
the Python programming language, and it contains many new features and 
optimizations. There’s been 187 commits since 3.9.6 which is a similar 
amount compared to 3.8 at the same stage of the release cycle. See the &lt;a href=&quot;https://docs.python.org/release/3.9.7/whatsnew/changelog.html&quot;&gt;change log&lt;/a&gt; for details.&lt;/p&gt;
&lt;p&gt;On macOS, we encourage you to use the &lt;code&gt;universal2&lt;/code&gt; binary installer variant whenever possible. The legacy 10.9+ Intel-only variant will not be provided for Python 3.10 and the &lt;code&gt;universal2&lt;/code&gt; variant will become the default download for 3.9.8. You may need to upgrade third-party components, like &lt;code&gt;pip&lt;/code&gt;,
 to later versions. You may experience differences in behavior in IDLE 
and other Tk-based applications due to using the newer version of Tk.  
As always, if you encounter problems when using this installer variant, 
please check &lt;a href=&quot;https://bugs.python.org&quot;&gt;https://bugs.python.org&lt;/a&gt; for existing reports and for opening new issues.&lt;/p&gt;
&lt;p&gt;The next Python 3.9 maintenance release will be 3.9.8, currently scheduled for 2021-11-01.&lt;/p&gt;
&lt;h2&gt;
&lt;a class=&quot;anchor&quot; href=&quot;https://discuss.python.org/t/python-3-9-7-and-3-8-12-now-available/10401#the-second-security-only-release-of-python-38-2&quot; name=&quot;the-second-security-only-release-of-python-38-2&quot;&gt;&lt;/a&gt;The Second Security-Only Release of Python 3.8&lt;/h2&gt;
Get it here: &lt;a href=&quot;https://www.python.org/downloads/release/python-3812/&quot;&gt;https://www.python.org/downloads/release/python-3812/&lt;/a&gt;&lt;br /&gt;&lt;div class=&quot;onebox-metadata&quot;&gt;
    
    
  &lt;/div&gt;

  


&lt;p&gt;Security content in this release contains four fixes. There are also 
four additional fixes for bugs that might have lead to denial-of-service
 attacks. Finally, while we’re not providing binary installers anymore, 
for those users who produce installers, we upgraded the OpenSSL version 
used to 1.1.1l. Take a look at the &lt;a href=&quot;https://docs.python.org/release/3.8.12/whatsnew/changelog.html&quot;&gt;change log&lt;/a&gt; for details.&lt;/p&gt;
&lt;p&gt;According to the release calendar specified in &lt;a href=&quot;https://www.python.org/dev/peps/pep-0569/&quot;&gt;PEP 569&lt;/a&gt;,
 Python 3.8 is now in “security fixes only” stage of its life cycle: 3.8
 branch only accepts security fixes and releases of those are made 
irregularly in source-only form until October 2024. Python 3.8 isn’t 
receiving regular bug fixes anymore, and binary installers are no longer
 provided for it. &lt;strong&gt;Python 3.8.10&lt;/strong&gt; was the last full &lt;em&gt;bugfix release&lt;/em&gt; of Python 3.8 with binary installers.&lt;/p&gt;
&lt;h2&gt;
&lt;a class=&quot;anchor&quot; href=&quot;https://discuss.python.org/t/python-3-9-7-and-3-8-12-now-available/10401#security-releases-of-3712-and-3615-3&quot; name=&quot;security-releases-of-3712-and-3615-3&quot;&gt;&lt;/a&gt;Security releases of 3.7.12 and 3.6.15&lt;/h2&gt;
&lt;p&gt;Those aren’t ready just yet but are soon to follow.&lt;/p&gt;
&lt;p&gt;Similarly to 3.8, Python 3.7 and 3.6 are now in “security fixes only”
 stage of their life cycle. Python 3.7 will be providing source archives until June
 2023 while Python 3.6 ends its life in December 2021.&lt;/p&gt;
&lt;h2&gt;
&lt;a class=&quot;anchor&quot; href=&quot;https://discuss.python.org/t/python-3-9-7-and-3-8-12-now-available/10401#we-hope-you-enjoy-the-new-releases-4&quot; name=&quot;we-hope-you-enjoy-the-new-releases-4&quot;&gt;&lt;/a&gt;We hope you enjoy the new releases&lt;/h2&gt;
&lt;p&gt;Your friendly release team,&lt;br /&gt;
Ned Deily &lt;a class=&quot;mention&quot; href=&quot;https://discuss.python.org/u/nad&quot;&gt;@nad&lt;/a&gt;&lt;br /&gt;
Steve Dower &lt;a class=&quot;mention&quot; href=&quot;https://discuss.python.org/u/steve.dower&quot;&gt;@steve.dower&lt;/a&gt;&lt;br /&gt;
Łukasz Langa &lt;a class=&quot;mention&quot; href=&quot;https://discuss.python.org/u/ambv&quot;&gt;@ambv&lt;/a&gt;&lt;/p&gt;&lt;div class=&quot;feedflare&quot;&gt;
&lt;a href=&quot;http://feeds.feedburner.com/~ff/PythonInsider?a=FQQRx2G9O4s:R3vS3GB2oaI:yIl2AUoC8zA&quot;&gt;&lt;img src=&quot;http://feeds.feedburner.com/~ff/PythonInsider?d=yIl2AUoC8zA&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.feedburner.com/~ff/PythonInsider?a=FQQRx2G9O4s:R3vS3GB2oaI:-BTjWOF_DHI&quot;&gt;&lt;img src=&quot;http://feeds.feedburner.com/~ff/PythonInsider?i=FQQRx2G9O4s:R3vS3GB2oaI:-BTjWOF_DHI&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.feedburner.com/~ff/PythonInsider?a=FQQRx2G9O4s:R3vS3GB2oaI:F7zBnMyn0Lo&quot;&gt;&lt;img src=&quot;http://feeds.feedburner.com/~ff/PythonInsider?i=FQQRx2G9O4s:R3vS3GB2oaI:F7zBnMyn0Lo&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.feedburner.com/~ff/PythonInsider?a=FQQRx2G9O4s:R3vS3GB2oaI:V_sGLiPBpWU&quot;&gt;&lt;img src=&quot;http://feeds.feedburner.com/~ff/PythonInsider?i=FQQRx2G9O4s:R3vS3GB2oaI:V_sGLiPBpWU&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.feedburner.com/~ff/PythonInsider?a=FQQRx2G9O4s:R3vS3GB2oaI:qj6IDK7rITs&quot;&gt;&lt;img src=&quot;http://feeds.feedburner.com/~ff/PythonInsider?d=qj6IDK7rITs&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src=&quot;http://feeds.feedburner.com/~r/PythonInsider/~4/FQQRx2G9O4s&quot; height=&quot;1&quot; width=&quot;1&quot; alt=&quot;&quot; /&gt;</description>
	<pubDate>Mon, 30 Aug 2021 18:32:26 +0000</pubDate>
</item>
<item>
	<title>PyCon: Join the PyCon US 2022 team!</title>
	<guid>https://pycon.blogspot.com/2021/08/join-pycon-us-2022-team.html</guid>
	<link>https://pycon.blogspot.com/2021/08/join-pycon-us-2022-team.html</link>
	<description>&lt;span&gt;Want to play a pivotal role in the planning and success of PyCon US? Here’s your chance! &lt;br /&gt;&lt;br /&gt;Join our team by volunteering for one of our Call for Proposal Committees. We are looking for motivated volunteers who want to contribute their time and knowledge to make this year’s conference a great success. As a committee member, you’ll have the opportunity to be part of the PyCon US staff team, meet and work with organizers, volunteers, and speakers, and share your diverse skillset with the Python community. &lt;br /&gt;&lt;br /&gt;PyCon US is seeking volunteers of all experience levels and backgrounds to join our Program, Tutorial, and Posters Committees. Learn more about each committee and where to submit your application on the &lt;a href=&quot;https://www.python.org/psf/volunteer/pycon/&quot;&gt;PSF website&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;Thank you for considering this opportunity. PyCon US would not be a success without the support of community members like you!&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;</description>
	<pubDate>Mon, 30 Aug 2021 17:05:30 +0000</pubDate>
</item>
<item>
	<title>Python Morsels: Accessing command-line arguments in Python</title>
	<guid>https://www.pythonmorsels.com/topics/accessing-command-line-arguments-python/</guid>
	<link>https://www.pythonmorsels.com/topics/accessing-command-line-arguments-python/</link>
	<description>&lt;a href=&quot;https://www.pythonmorsels.com/topics/accessing-command-line-arguments-python/&quot; target=&quot;_blank&quot;&gt;
  &lt;img class=&quot;img-fluid&quot; src=&quot;https://i.vimeocdn.com/filter/overlay?src0=https%3A%2F%2Fi.vimeocdn.com%2Fvideo%2F1193492986_1920x1080&amp;src1=http%3A%2F%2Ff.vimeocdn.com%2Fp%2Fimages%2Fcrawler_play.png&quot; /&gt;
&lt;/a&gt;
&lt;h2&gt;Transcript&lt;/h2&gt;
&lt;p&gt;What if we wanted to &lt;strong&gt;pass information to our Python program&lt;/strong&gt; to change the way that it runs?
One of the most common ways to do this is with &lt;strong&gt;command-line arguments&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Passing command-line arguments&lt;/h3&gt;
&lt;p&gt;When you run a program from your system command-line, you can pass in arguments:&lt;/p&gt;
&lt;p&gt;Here we have a program called &lt;code&gt;greet.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello world&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here we're calling this program:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ python3 greet.py
Hello world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Function arguments vs command-line arguments&lt;/h3&gt;
&lt;p&gt;The word &quot;argument&quot; is a loaded term.&lt;/p&gt;
&lt;p&gt;In Python we have &lt;strong&gt;function arguments&lt;/strong&gt; which are &lt;strong&gt;inputs to a function&lt;/strong&gt;.
But &lt;em&gt;command-line arguments&lt;/em&gt;&lt;em&gt; are &lt;/em&gt;&lt;em&gt;inputs to an entire program&lt;/em&gt;*.&lt;/p&gt;
&lt;p&gt;So function arguments and command-line arguments are not very related, except that they're both &lt;em&gt;inputs&lt;/em&gt; into something.&lt;/p&gt;
&lt;h3&gt;Python accepts whatever command-line arguments we give it&lt;/h3&gt;
&lt;p&gt;What do you think will happen if we passed an argument to our &lt;code&gt;greet.py&lt;/code&gt; program, as we run it through Python?&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ python3 greet.py Trey
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Our &lt;code&gt;greet.py&lt;/code&gt; program doesn't use command-line arguments at all.
It's just a single line of code:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello world&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So what's your guess?
Will python print &lt;code&gt;Hello world&lt;/code&gt;?
Will it print &lt;code&gt;Hello Trey&lt;/code&gt;?
Will we get an error?
Something else?&lt;/p&gt;
&lt;p&gt;When we run this &lt;code&gt;greet.py&lt;/code&gt; program with the argument &lt;code&gt;Trey&lt;/code&gt; we see &lt;code&gt;Hello world&lt;/code&gt; printed out:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ python3 greet.py Trey
Hello world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That's a little bit odd.&lt;/p&gt;
&lt;p&gt;Python is just &lt;strong&gt;ignoring whatever argument we passed&lt;/strong&gt; to this program.
Python &lt;strong&gt;stores all the arguments&lt;/strong&gt; that we give it, but it doesn't &lt;em&gt;do&lt;/em&gt; anything with the arguments: it's up to us (the implementer of this program) to do something with them.&lt;/p&gt;
&lt;h3&gt;Where are command-line arguments stored?&lt;/h3&gt;
&lt;p&gt;Python stores command-line arguments in the &lt;code&gt;sys&lt;/code&gt; module within a list called &lt;code&gt;argv&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello world&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;sys.argv&lt;/code&gt; list has all of the arguments passed to our Python program:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ python3 greet.py Trey
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'greet.py'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'Trey'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
Hello world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Our &lt;code&gt;sys.argv&lt;/code&gt; list here has two things in it, our program name and the argument we've passed in.&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ python3 greet.py Trey
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'greet.py'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'Trey'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;strong&gt;first thing in &lt;code&gt;sys.argv&lt;/code&gt;&lt;/strong&gt; is always going to be &lt;strong&gt;our program name&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Accessing command-line arguments&lt;/h3&gt;
&lt;p&gt;If we wanted to grab the argument after our program name we could read the second item (index &lt;code&gt;1&lt;/code&gt;) from &lt;code&gt;sys.argv&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We're assuming we get an argument passed in and we're printing that argument out:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ python3 greet.py Trey
Hello Trey
$ python3 greet.py Carol
Hello Carol
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If I pass more than one argument our program is currently just &lt;em&gt;ignoring&lt;/em&gt; everything after that first argument:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ python3 greet.py Trey Hunner
Hello Trey
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What if we pass too few arguments?&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ python3 greet.py
Traceback &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;most recent call last&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
  File &lt;span class=&quot;s2&quot;&gt;&amp;quot;/home/trey/greet.py&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;
    print&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;, sys.argv&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;
IndexError: list index out of range
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If we pass in two few arguments we'll get an &lt;code&gt;IndexError&lt;/code&gt; (because &lt;code&gt;sys.argv&lt;/code&gt; doesn't have an index &lt;code&gt;1&lt;/code&gt; in this case).&lt;/p&gt;
&lt;p&gt;Processing &lt;code&gt;sys.argv&lt;/code&gt; &lt;em&gt;manually&lt;/em&gt; is something that you should only do for &lt;strong&gt;very simple Python programs&lt;/strong&gt;: programs that don't need much complex command-line argument processing and ideally only do this for programs that are &lt;em&gt;just for your use&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;Python provides all command-line arguments as strings&lt;/h3&gt;
&lt;p&gt;Let's take a look at another example.
Here we have a program called &lt;code&gt;add.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This program takes &lt;code&gt;sys.argv&lt;/code&gt; and unpacks it into three variables: the program name, and whatever two arguments are given after that:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then it adds those arguments together and prints them out:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What should we see when we run &lt;code&gt;add.py&lt;/code&gt; with &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;3&lt;/code&gt;?&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ python3 add.py &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Take a guess.&lt;/p&gt;
&lt;p&gt;6?&lt;/p&gt;
&lt;p&gt;5?&lt;/p&gt;
&lt;p&gt;100?&lt;/p&gt;
&lt;p&gt;Here's what we see when we run &lt;code&gt;add.py&lt;/code&gt; with &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;3&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ python3 add.py &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;m&quot;&gt;23&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Weird, right?
Clearly 2 plus 3 is not 23, or at least it shouldn't be 23, and yet that's what we see.&lt;/p&gt;
&lt;p&gt;If we &lt;code&gt;print&lt;/code&gt; out &lt;code&gt;sys.argv&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We'll see that it's a list of strings:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ python3 add.py &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'add.py'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'2'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'3'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Python stores all command-line arguments as strings&lt;/strong&gt; because all command-line arguments are given to Python &lt;strong&gt;as text&lt;/strong&gt; by the operating system.
Python doesn't do any processing with them; it's &lt;em&gt;up to us&lt;/em&gt; to make meaning of these arguments.&lt;/p&gt;
&lt;p&gt;So if we want &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;3&lt;/code&gt; to be numbers, we'll have to convert them to numbers ourselves:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we finally see the result we're expecting:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ python3 add.py &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;If you need to make a very simple command-line interface (one that's just for you) and it doesn't need to be friendly, you can &lt;strong&gt;read &lt;code&gt;sys.argv&lt;/code&gt; to &lt;em&gt;manually&lt;/em&gt; process the arguments&lt;/strong&gt; coming into your program.
But if you need something more complex, you should probably use a proper command-line argument processing tool (like Python's &lt;code&gt;argparse&lt;/code&gt; module).&lt;/p&gt;</description>
	<pubDate>Mon, 30 Aug 2021 15:00:00 +0000</pubDate>
</item>
<item>
	<title>Real Python: Using Python Optional Arguments When Defining Functions</title>
	<guid>https://realpython.com/python-optional-arguments/</guid>
	<link>https://realpython.com/python-optional-arguments/</link>
	<description>&lt;div&gt;&lt;p&gt;Defining your own functions is an essential skill for writing clean and effective code. In this tutorial, you’ll explore the techniques you have available for defining Python functions that take optional arguments. When you master Python optional arguments, you’ll be able to define functions that are more powerful and more flexible.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In this tutorial, you’ll learn:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What the difference is between &lt;strong&gt;parameters&lt;/strong&gt; and &lt;strong&gt;arguments&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;How to define functions with &lt;strong&gt;optional arguments&lt;/strong&gt; and &lt;strong&gt;default parameter values&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;How to define functions using &lt;strong&gt;&lt;code&gt;args&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;kwargs&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;How to deal with &lt;strong&gt;error messages&lt;/strong&gt; about optional arguments&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To get the most out of this tutorial, you’ll need some familiarity with &lt;a href=&quot;https://realpython.com/defining-your-own-python-function/&quot;&gt;defining functions&lt;/a&gt; with required arguments.&lt;/p&gt;
&lt;div class=&quot;alert alert-warning&quot;&gt;&lt;p&gt;&lt;strong&gt;Free Bonus:&lt;/strong&gt; &lt;a href=&quot;https://realpython.com/atom.xml&quot; class=&quot;alert-link&quot;&gt;Click here to get a Python Cheat Sheet&lt;/a&gt; and learn the basics of Python 3, like working with data types, dictionaries, lists, and Python functions.&lt;/p&gt;&lt;/div&gt;

&lt;h2 id=&quot;creating-functions-in-python-for-reusing-code&quot;&gt;Creating Functions in Python for Reusing Code&lt;a class=&quot;headerlink&quot; href=&quot;https://realpython.com/atom.xml#creating-functions-in-python-for-reusing-code&quot; title=&quot;Permanent link&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can think of a function as a mini-program that runs within another program or within another function. The main program calls the mini-program and sends information that the mini-program will need as it runs. When the function completes all of its actions, it may send some data back to the main program that has called it.&lt;/p&gt;
&lt;p&gt;The primary purpose of a function is to allow you to reuse the code within it whenever you need it, using different inputs if required.&lt;/p&gt;
&lt;p&gt;When you use functions, you are extending your Python vocabulary. This lets you express the solution to your problem in a clearer and more succinct way.&lt;/p&gt;
&lt;p&gt;In Python, by convention, you should name a function using lowercase letters with words separated by an underscore, such as &lt;code&gt;do_something()&lt;/code&gt;. These conventions are described in &lt;a href=&quot;https://www.python.org/dev/peps/pep-0008/&quot;&gt;PEP 8&lt;/a&gt;, which is Python’s style guide. You’ll need to add parentheses after the function name when you call it. Since functions represent actions, it’s a best practice to start your function names with a verb to make your code more readable.&lt;/p&gt;
&lt;h3 id=&quot;defining-functions-with-no-input-parameters&quot;&gt;Defining Functions With No Input Parameters&lt;a class=&quot;headerlink&quot; href=&quot;https://realpython.com/atom.xml#defining-functions-with-no-input-parameters&quot; title=&quot;Permanent link&quot;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In this tutorial, you’ll use the example of a basic program that creates and maintains a shopping list and &lt;a href=&quot;https://realpython.com/python-print/&quot;&gt;prints it out&lt;/a&gt; when you’re ready to go to the supermarket.&lt;/p&gt;
&lt;p&gt;Start by creating a shopping list:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;shopping_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;Bread&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;Milk&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;Chocolate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;Butter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;Coffee&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You’re using a &lt;a href=&quot;https://realpython.com/python-dicts/&quot;&gt;dictionary&lt;/a&gt; to store the item name as the key and the quantity you need to buy of each item as the value. You can define a function to display the shopping list:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# optional_params.py&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;shopping_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;Bread&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;Milk&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;Chocolate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;Butter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;Coffee&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quantity&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shopping_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quantity&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;x &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;show_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When you run this script, you’ll get a printout of the shopping list:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;python optional_params.py
&lt;span class=&quot;go&quot;&gt;1x Bread&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2x Milk&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;1x Chocolate&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;1x Butter&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;1x Coffee&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The function you’ve defined has no input parameters as the parentheses in the function &lt;strong&gt;signature&lt;/strong&gt; are empty. The signature is the first line in the function definition:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You don’t need any input parameters in this example since the dictionary &lt;code&gt;shopping_list&lt;/code&gt; is a &lt;strong&gt;global variable&lt;/strong&gt;. This means that it can be accessed from everywhere in the program, including from within the function definition. This is called the &lt;strong&gt;global scope&lt;/strong&gt;. You can read more about scope in &lt;a href=&quot;https://realpython.com/python-scope-legb-rule/&quot;&gt;Python Scope &amp;amp; the LEGB Rule: Resolving Names in Your Code&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Using global variables in this way is not a good practice. It can lead to several functions making changes to the same data structure, which can lead to bugs that are hard to find. You’ll see how to improve on this later on in this tutorial when you’ll pass the dictionary to the function as an argument.&lt;/p&gt;
&lt;p&gt;In the next section, you’ll define a function that has input parameters.&lt;/p&gt;
&lt;h3 id=&quot;defining-functions-with-required-input-arguments&quot;&gt;Defining Functions With Required Input Arguments&lt;a class=&quot;headerlink&quot; href=&quot;https://realpython.com/atom.xml#defining-functions-with-required-input-arguments&quot; title=&quot;Permanent link&quot;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Instead of writing the shopping list directly in the code, you can now initialize an empty dictionary and write a function that allows you to add items to the shopping list:&lt;/p&gt;
&lt;/div&gt;&lt;h2&gt;&lt;a href=&quot;https://realpython.com/python-optional-arguments/?utm_source=realpython&amp;utm_medium=rss&quot;&gt;Read the full article at https://realpython.com/python-optional-arguments/ »&lt;/a&gt;&lt;/h2&gt;
        &lt;hr /&gt;
        &lt;p&gt;&lt;em&gt;[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp;amp; sweet Python Trick delivered to your inbox every couple of days. &lt;a href=&quot;https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer&quot;&gt;&amp;gt;&amp;gt; Click here to learn more and see examples&lt;/a&gt; ]&lt;/em&gt;&lt;/p&gt;</description>
	<pubDate>Mon, 30 Aug 2021 14:00:00 +0000</pubDate>
</item>
<item>
	<title>Mike Driscoll: PyDev of the Week: Joshua Ebner</title>
	<guid>https://www.blog.pythonlibrary.org/2021/08/30/pydev-of-the-week-joshua-ebner/</guid>
	<link>https://www.blog.pythonlibrary.org/2021/08/30/pydev-of-the-week-joshua-ebner/</link>
	<description>&lt;p&gt;This week we welcome Joshua Ebner (&lt;a href=&quot;https://twitter.com/Josh_Ebner&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;@Josh_Ebner&lt;/a&gt;) as our PyDev of the Week. Joshua trains people in data science at &lt;a href=&quot;http://sharpsightlabs.com&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Sharp Sight&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s take some time to get to know Joshua better!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Can you tell us a little about yourself (hobbies, education, etc):&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Professionally, I own a data science training company, &lt;a href=&quot;http://sharpsightlabs.com&quot;&gt;Sharp Sight&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My background is somewhat unrelated.  I graduated from Cornell with a degree in Physics, but I decided that I didn’t want to be a physicist.  &lt;/p&gt;
&lt;p&gt;Through a series of fortunate events, I had an opportunity to join the Marketing Analytics department of Bank of America.  This was &lt;em&gt;way&lt;/em&gt; before data science was popular and it was just dumb luck that I sort of fell into the opportunity.&lt;/p&gt;
&lt;p&gt;Early in my career, I still wasn’t sure what I wanted to do, and I wasn’t sure that I would stay in the analytics industry.  But at some point around 2011 or 2012, it became obvious that data science and analytics were going to be huge, so I doubled down and started learning everything I could about all of the emerging tools and techniques.&lt;/p&gt;
&lt;p&gt;Through another series of fortunate events, I landed a job at Apple as a data scientist.  I stayed there for a while, and then left to start my own company.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why did you start using Python?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When I got my start in the analytics industry, we were using SAS and SQL almost exclusively.&lt;/p&gt;
&lt;p&gt;If you’re not familiar, SAS is a statistical programming language used for data analytics.  Back then, it was practically the only language used for data analytics, and certainly the analytics language of choice for large banks and more traditional Fortune 500 companies (e.g., ad agencies, pharmaceutical companies, etc).&lt;/p&gt;
&lt;p&gt;Around 2012, the industry began to change.  More companies in Silicon Valley began focusing on data (although some, like Google, had been data-driven for much longer).  I started seeing new job postings in San Francisco and Silicon Valley for analytics jobs, but they were starting to call it something different: data science.&lt;/p&gt;
&lt;p&gt;And whereas the industry had previously used SAS, around 2012, you started seeing more job posts and articles that talked about R and Python.&lt;/p&gt;
&lt;p&gt;It was obvious to me that SAS was likely to become a dinosaur.  Big tech companies started building data science teams, and almost all of them used Python, and to a lesser extent, R.&lt;/p&gt;
&lt;p&gt;It was clear that the industry was moving to R and Python, so I started learning them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What other programming languages do you know and which is your favorite?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Python and R are my main programming languages right now.  I also know quite a bit of SQL, although I use it less now that I’m no longer in a big enterprise setting.&lt;/p&gt;
&lt;p&gt;I’m not sure that I have an overall favorite.  I think that different languages are toolkits that are good at different things.&lt;/p&gt;
&lt;p&gt;When I want to wrangle, analyze, and visualize my data, Python and R are both excellent.&lt;/p&gt;
&lt;p&gt;If I want to automate or build a system, I prefer Python, because the syntax is easy to write and easy to read.  Compared to R, in my opinion, Python is much better for more traditional software building.&lt;/p&gt;
&lt;p&gt;Python is also better overall for machine learning and deep learning.&lt;/p&gt;
&lt;p&gt;So Python and R are the two big languages that I use, but I also have a few other tricks up my sleeve. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What projects are you working on now?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I’m mostly working on building more data science courses.&lt;/p&gt;
&lt;p&gt;At Sharp Sight, we teach data science.  In particular, I’ve developed a training system that helps people memorize syntax and become “fluent” in writing code.  &lt;/p&gt;
&lt;p&gt;If you’ve ever forgotten a piece of syntax, and had to google it, you know that forgetting syntax is a major drag on productivity.  I created a training system to solve this by:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;breaking syntax down into small learnable units&lt;/li&gt;
&lt;li&gt;giving people a training system to memorize those syntax units&lt;/li&gt;
&lt;li&gt;showing students how to put the pieces back together to do real work&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To give credit where credit is due, this system is largely based on the metalearning system described by Tim Ferriss in &lt;em&gt;The 4-Hour Chef&lt;/em&gt; (a book actually about learning, instead of cooking).  It also incorporates insights from cognitive psychology to &amp;#8220;hack&amp;#8221; your memory so you can memorize syntax. I’ve spent many years studying &amp;#8220;how to learn&amp;#8221; and I’ve applied good learning principles to our courses for mastering data science.&lt;/p&gt;
&lt;p&gt;With all of that said, I’m currently in then process of creating a course on Plotly (for data visualization in Python) and a course on Scikit Learn (for machine learning in Python).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Which Python libraries are your favorite (core or 3rd party)?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Oh man, Python has lots to choose from.&lt;/p&gt;
&lt;p&gt;At my core, I’m a data scientist, so my favorite Python libraries are data-related.&lt;/p&gt;
&lt;p&gt;Pandas is the one that I probably use the most, and it’s really great in many ways.  Having said that, it pains me to look at most Pandas code.  Unfortunately, many people use it in ways that make data wrangling and data analysis complicated, hard to understand, and hard to debug.&lt;/p&gt;
&lt;p&gt;Over the years, I’ve developed a somewhat unique style in how I use Pandas that allows you to do complicated data transformations in relatively compact blocks of code (this technique is a lot like dplyr pipes in R, or pipes in Unix).  If you use Pandas this way, it’s a lot of fun to use.&lt;/p&gt;
&lt;p&gt;I’m also a really big proponent of data visualization.  I think that data visualization is dramatically underrated.  Having said that, I really like Seaborn for static data visualizations.  The syntax is much easier to learn and use than Matplotlib, but it’s also built on top of Matplotlib. So Seaborn gives you the power of Matplotlib, but with added simplicity.&lt;/p&gt;
&lt;p&gt;Additionally, I’m increasingly interested in Plotly.  It’s very powerful, it has a clean syntax, and it also provides a toolkit for building dashboards and interactive charts.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You have multiple data science courses on your site. How did you decide which courses to make?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I think that data science is going to be very important over the next few decades, but learning data science is often very challenging.  I created our courses to be the fastest, most efficient way to learn data science, without wasting time and money.&lt;/p&gt;
&lt;p&gt;That said, there&amp;#8217;s a lot inside of that statement, so let me unpack it.&lt;/p&gt;
&lt;p&gt;It’s obviously a bit trite to say that &amp;#8220;X is going to change the world,&amp;#8221;  but I really do believe that data science and machine learning will change almost everything.  &lt;/p&gt;
&lt;p&gt;In a somewhat recent &lt;a href=&quot;https://www.forbes.com/sites/randalllane/2018/08/30/bezos-unbound-exclusive-interview-with-the-amazon-founder-on-what-he-plans-to-conquer-next/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Forbes article&lt;/a&gt;, Jeff Bezos said:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
&amp;#8220;The most interesting thing about machine learning, as opposed to a lot of other technologies, is just how horizontal it&amp;#8217;s going to be … There’s not a single category of business or government or anything, really, that can&amp;#8217;t improve itself.&amp;#8221;
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Machine learning and data science will impact everything.  In turn, they will probably be very valuable for individuals to learn.&lt;/p&gt;
&lt;p&gt;But there is a lot of bad books and bad advice out there on how to get started and what to focus on.&lt;/p&gt;
&lt;p&gt;I’ve been somewhat lucky, in that I had an analytics job really early on. And early in my career, I had good mentorship about some parts of the data science process.&lt;/p&gt;
&lt;p&gt;But since I started in the data industry over a decade ago, it has changed substantially.  I needed to learn new tools and I didn’t always have good mentors for those things.  I wasted a &lt;em&gt;lot&lt;/em&gt; of time on things that I didn’t really need and many of the resources that I used were confusing.&lt;/p&gt;
&lt;p&gt;So, I faced many challenges as I learned and upgraded my skills.&lt;/p&gt;
&lt;p&gt;But my industry experience – along with the challenges I&amp;#8217;ve had upskilling and learning data science – has given me a unique perspective on what students need to learn, and how to learn it.&lt;/p&gt;
&lt;p&gt;I created courses that help people learn the right things, in the right order, and I show my students how to practice so that they remember all of the important syntax permanently.&lt;/p&gt;
&lt;p&gt;In some sense, I simply created the courses that I wish I had years ago.&lt;/p&gt;
&lt;p&gt;With all that said, if any of your readers are interested in learning data science here is what I recommend:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Focus on the fundamentals.  Focus on data wrangling (Pandas, Numpy), data visualization (Seaborn, Plotly), and data analysis (how to use wrangling + visualization together to find insights).&lt;/li&gt;
&lt;li&gt;Avoid advanced math in the beginning (unless you’re in academia).  Most math is overrated for beginners in industry.&lt;/li&gt;
&lt;li&gt;Once you’ve mastered the basics, use that as a foundation to learn intermediate to advanced skills, like machine learning, deep learning, and geospatial visualization.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And if you want to connect or have a question, just reach out to me on Twitter at &lt;a href=&quot;https://twitter.com/Josh_Ebner&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;@Josh_Ebner&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Is there anything else you’d like to say?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Over the next decade or two, I think we’re going to see a major shift in the software and tech industry.&lt;/p&gt;
&lt;p&gt;Increasingly, I think that almost all software is going to be data-driven software.  &lt;/p&gt;
&lt;p&gt;In this regard, I don’t mean that data will be incidental to software or merely part of how it operates, but rather that data will be central to most software.&lt;/p&gt;
&lt;p&gt;Another way of saying this, is that most software will involve machine learning. We’re going to increasingly build machine learning elements into almost all software&lt;/p&gt;
&lt;p&gt;Andrej Karpathy, the director of AI at Tesla, recently called this “Software 2.0.”&lt;/p&gt;
&lt;p&gt;In a &lt;a href=&quot;https://karpathy.medium.com/software-2-0-a64152b37c35&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;blog post&lt;/a&gt;, Karpathy described it like this: &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
“Neural networks are not just another classifier, they represent the beginning of a fundamental shift in how we develop software. They are Software 2.0.&lt;/p&gt;
&lt;p&gt;… we are witnessing a massive transition across the industry where of a lot of 1.0 code is being ported into 2.0 code. Software (1.0) is eating the world, and now AI (Software 2.0) is eating software.”
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;If this is the case, then going forward, most software will have machine learning built in as a critical component.  This Software 2.0 will actively learn from data streams.  And it will become even more important as we digitize the world and add sensors to almost everything (a subject discussed in the book &lt;a href=&quot;https://www.amazon.com/The-Second-Machine-Age-audiobook/dp/B00HFX8JMQ&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;The Second Machine Age&lt;/a&gt;, by Brynjolfsson and McAfee).&lt;/p&gt;
&lt;p&gt;In turn, I think that data science and machine learning will become increasingly important for developers.  Most developers will need to know how to build, train, and maintain machine learning systems … or at least, build the infrastructure around them.&lt;/p&gt;
&lt;p&gt;The next few decades will be really exciting.  But also, challenging.  Many Python developers will need to skill up and learn some data science and ML.&lt;/p&gt;
&lt;p&gt;The question is, how?  Where do you start?&lt;/p&gt;
&lt;p&gt;I firmly believe that the foundation of machine learning and data science is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;data wrangling&lt;/li&gt;
&lt;li&gt;data visualization&lt;/li&gt;
&lt;li&gt;data analysis&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I strongly think that &lt;a href=&quot;https://www.sharpsightlabs.com/blog/math-for-data-science/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;math is overrated&lt;/a&gt; for data science and machine learning beginners, but data wrangling, data visualization, and data analysis are &lt;a href=&quot;https://www.sharpsightlabs.com/blog/machine-learning-prerequisite-isnt-math/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;used for almost everything&lt;/a&gt;, including machine learning.  So those three are the essential foundations that you need to know if you want to get started with machine learning or data science more broadly. &lt;/p&gt;
&lt;p&gt;So to sum up, if you want to learn foundational data science in Python, here are my recommendations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;learn Pandas for data wrangling
&lt;li&gt;learn Seaborn or Plotly for data visualization
&lt;li&gt;learn to combine data wrangling and data visualization to analyze data.  (Most data analysis is simply using data wrangling + data visualization to “find insights in data”)
&lt;/li&gt;&lt;/li&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Those are the foundations.  Once you know those foundations, then you can move on to Scikit learn for machine learning.  But make sure that you don&amp;#8217;t get &amp;#8220;shiny object&amp;#8221; syndrome and try to jump to the sexiest stuff first.  Master the foundations first, and you’ll be much better prepared once you start learning machine learning, deep learning, and other advanced topics.&lt;/p&gt;
&lt;p&gt;And finally, if you want to save yourself the time and frustration of trying to figure it all out yourself, consider one of our courses at &lt;a href=&quot;http://sharpsightlabs.com/course-directory/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;sharpsightlabs.com/course-directory/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thanks for doing the interview, Joshua!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The post &lt;a rel=&quot;nofollow&quot; href=&quot;https://www.blog.pythonlibrary.org/2021/08/30/pydev-of-the-week-joshua-ebner/&quot;&gt;PyDev of the Week: Joshua Ebner&lt;/a&gt; appeared first on &lt;a rel=&quot;nofollow&quot; href=&quot;https://www.blog.pythonlibrary.org&quot;&gt;Mouse Vs Python&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Mon, 30 Aug 2021 05:05:16 +0000</pubDate>
</item>
<item>
	<title>Python⇒Speed: The best Docker base image for your Python application (August 2021)</title>
	<guid>https://pythonspeed.com/articles/base-image-python-docker-images/</guid>
	<link>https://pythonspeed.com/articles/base-image-python-docker-images/</link>
	<description>&lt;p&gt;When you’re building a Docker image for your Python application, you’re building on top of an existing image—and there are many possible choices.
There are OS images like Ubuntu, and there are the many different variants of the &lt;code class=&quot;highlighter-rouge&quot;&gt;python&lt;/code&gt; base image.&lt;/p&gt;

&lt;p&gt;Which one should you use?
Which one is better?
There are many choices, and it may not be obvious which is the best for your situation.&lt;/p&gt;

&lt;p&gt;So to help you make a choice that fits your needs, in this article I’ll go through some of the relevant criteria, and suggest some reasonable defaults that will work for most people.&lt;/p&gt;


   &lt;a href=&quot;https://pythonspeed.com/articles/base-image-python-docker-images/&quot;&gt;Read more...&lt;/a&gt;</description>
	<pubDate>Mon, 30 Aug 2021 00:00:00 +0000</pubDate>
</item>

</channel>
</rss>
