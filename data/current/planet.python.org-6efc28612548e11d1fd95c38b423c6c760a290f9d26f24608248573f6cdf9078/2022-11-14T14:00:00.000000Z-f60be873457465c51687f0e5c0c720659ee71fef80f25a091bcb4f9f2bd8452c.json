{
  "title":"Python for Beginners: Working with JSON Files in Python",
  "date":"2022-11-14T14:00:00.000000Z",
  "author":null,
  "id":"https://www.pythonforbeginners.com/basics/working-with-json-files-in-python",
  "link":"https://www.pythonforbeginners.com/basics/working-with-json-files-in-python",
  "content":"<p>JSON Files are one of the most used data formats for communication between two web applications. In this article, we will discuss what JSON objects are and how can we work with JSON files in Python.</p>\n\n\n\n<div class=\"wp-block-ht-block-toc is-style-rounded htoc htoc--position-wide toc-list-style-numbered\"><span class=\"htoc__title\"><span class=\"ht_toc_title\">Table of Contents</span><span class=\"htoc__toggle\"></span></span><div class=\"htoc__itemswrap\"><ol class=\"ht_toc_list\"><li class=\"\"><a href=\"https://www.pythonforbeginners.com/feed#htoc-what-is-json-object\">What is JSON Object?</a><ol class=\"ht_toc_child_list\"><li class=\"\"><a href=\"https://www.pythonforbeginners.com/feed#htoc-what-is-a-nested-json-object\">What is a Nested JSON Object?</a></li></ol></li><li class=\"\"><a href=\"https://www.pythonforbeginners.com/feed#htoc-the-syntax-for-defining-json-objects\">The Syntax For Defining JSON Objects</a></li><li class=\"\"><a href=\"https://www.pythonforbeginners.com/feed#htoc-working-with-json-files-in-python\">Working with JSON Files in Python</a></li><li class=\"\"><a href=\"https://www.pythonforbeginners.com/feed#htoc-python-object-to-json-file\">Python Object to JSON File</a><ol class=\"ht_toc_child_list\"><li class=\"\"><a href=\"https://www.pythonforbeginners.com/feed#htoc-the-dump-method\">The dump() Method</a></li></ol></li><li class=\"\"><a href=\"https://www.pythonforbeginners.com/feed#htoc-python-object-to-json-string\">Python Object to JSON String</a><ol class=\"ht_toc_child_list\"><li class=\"\"><a href=\"https://www.pythonforbeginners.com/feed#htoc-the-dumps-method\">The dumps() Method</a></li></ol></li><li class=\"\"><a href=\"https://www.pythonforbeginners.com/feed#htoc-python-object-to-json-string-using-jsonencoder-class\">Python Object to JSON String Using JSONEncoder Class</a></li><li class=\"\"><a href=\"https://www.pythonforbeginners.com/feed#htoc-load-json-files-to-python-object\">Load JSON Files to Python Object</a><ol class=\"ht_toc_child_list\"><li class=\"\"><a href=\"https://www.pythonforbeginners.com/feed#htoc-the-load-method\">The load() Method</a></li></ol></li><li class=\"\"><a href=\"https://www.pythonforbeginners.com/feed#htoc-convert-json-string-to-python-object\">Convert JSON String to Python Object</a><ol class=\"ht_toc_child_list\"><li class=\"\"><a href=\"https://www.pythonforbeginners.com/feed#htoc-the-loads-method\">The loads() Method</a></li></ol></li><li class=\"\"><a href=\"https://www.pythonforbeginners.com/feed#htoc-json-string-to-python-dictionary-using-jsondecoder-class\">JSON String to Python Dictionary Using JSONDecoder Class</a></li><li class=\"\"><a href=\"https://www.pythonforbeginners.com/feed#htoc-why-use-json-files-with-python-for-data-transmission\">Why Use JSON Files With Python for Data Transmission?</a></li><li class=\"\"><a href=\"https://www.pythonforbeginners.com/feed#htoc-conclusion\">Conclusion</a></li></ol></div></div>\n\n\n\n<h2 id=\"htoc-what-is-json-object\">What is JSON Object?</h2>\n\n\n\n<p>JSON is an acronym for JavaScript Object Notation. It is a standard text-based format for representing data in a structured manner using key-value pairs. It is most commonly used for transmitting data between web applications. The JSON files have <code>.json</code> extension.</p>\n\n\n\n<p>Following is an example of a JSON object.</p>\n\n\n\n<pre class=\"wp-block-code language-python\"><code>{&quot;Name&quot;: &quot;Aditya&quot;, &quot;Age&quot;:23, &quot;Height&quot;:181}</code></pre>\n\n\n\n<h3 id=\"htoc-what-is-a-nested-json-object\">What is a Nested JSON Object?</h3>\n\n\n\n<p>A nested JSON object is a JSON object containing another JSON object as the associated value for one or more keys. We can also use a nested JSON object for transmitting data. For example, consider the following JSON object.</p>\n\n\n\n<pre class=\"wp-block-code language-python\"><code>{ \n    &quot;coffee&quot;: {\n        &quot;region&quot;: [\n            {&quot;id&quot;:1, &quot;name&quot;: &quot;John Doe&quot;},\n            {&quot;id&quot;:2, &quot;name&quot;: &quot;Don Josh&quot;}\n        ],\n        &quot;country&quot;: {&quot;id&quot;:2, &quot;company&quot;: &quot;ACME&quot;}\n    }, \n    &quot;brewing&quot;: {\n        &quot;region&quot;: [\n            {&quot;id&quot;:1, &quot;name&quot;: &quot;John Doe&quot;},\n            {&quot;id&quot;:2, &quot;name&quot;: &quot;Don Josh&quot;}\n        ],\n        &quot;country&quot;: {&quot;id&quot;:2, &quot;company&quot;: &quot;ACME&quot;}\n    }\n}\n</code></pre>\n\n\n\n<p>The above JSON object is a nested JSON object. You can observe the following.</p>\n\n\n\n<ul><li>In the outer object, we have two keys namely <code>“coffee”</code> and <code>“brewing”.</code> </li><li>The <code>“coffee”</code> and <code>“brewing”</code> keys contain other JSON objects as their values. Hence, the given JSON object is a nested JSON object. </li><li>Inside  <code>“coffee” </code>and <code>“brewing”</code>, we have two keys namely <code>“region”</code> and <code>“country”</code>. The<code> “country”</code> contains another JSON object as its key while the <code>“region”</code> contains a list of JSON objects.</li></ul>\n\n\n\n<p>So, a nested JSON object can contain another JSON object or a list of JSON objects.</p>\n\n\n\n<h2 id=\"htoc-the-syntax-for-defining-json-objects\">The Syntax For Defining JSON Objects</h2>\n\n\n\n<p>As you can observe in the above two examples, a JSON object has the following syntax.</p>\n\n\n\n<ul><li>The data is present in key-value pairs in a similar manner to a python dictionary. </li><li>The keys and values in a JSON string are separated by a colon <code>(:)</code>.</li><li>Each key-value pair in a JSON object is separated by a comma <code>(,)</code>.</li><li>The entire data in a JSON object is enclosed by curly brackets<code> ({ })</code>.</li><li>The string values and keys are enclosed in double quotes <code>(“ ”)</code>.</li><li>The arrays are enclosed in square brackets<code> ([ ])</code>.</li><li>The values in an array are separated by a comma. The values in the array can be a JSON object, an array, or a literal of any permitted data type.</li><li>The keys in the JSON object are of string data type. On the other hand, the associated values can be one of the permitted data types. The permitted data types are string, number, object, array, boolean or null. </li></ul>\n\n\n\n<h2 id=\"htoc-working-with-json-files-in-python\">Working with JSON Files in Python</h2>\n\n\n\n<p>Python provides us with the JSON module to work with JSON strings and files in Python. Let us now discuss how to convert a python object to a JSON object and vice versa.</p>\n\n\n\n<h2 id=\"htoc-python-object-to-json-file\">Python Object to JSON File</h2>\n\n\n\n<p>We can convert a python object to a JSON file using the dump() method.</p>\n\n\n\n<h3 id=\"htoc-the-dump-method\">The dump() Method</h3>\n\n\n\n<p>The <code>dump()</code> method has the following syntax.</p>\n\n\n\n<pre class=\"wp-block-code language-python\"><code>json.dump(python_obj, fp, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw)</code></pre>\n\n\n\n<p>Here, </p>\n\n\n\n<ul><li>The <code>python_obj</code> parameter takes a python object that needs to be converted to a JSON file. The object can be a number, string, dictionary, list, or custom python object. </li><li>The <code>fp</code> parameter takes a file pointer as its input argument. After opening a file with a <code>.json</code> extension in write mode, you can pass it to the <code>fp</code> parameter. After execution, the contents of the <code>python_obj</code> are saved to the file pointed by <code>fp</code> in JSON format.</li><li>A key in a python object can be of any data type. However, all the data types cannot be converted to JSON format. When we try to create a JSON file from a python object or a dictionary with keys having data types other than <code>str</code>, <code>int</code>, <code>float</code>, <code>bool</code>, and <code>None</code>, the <code>dump()</code> method raises a <a href=\"https://www.pythonforbeginners.com/basics/typeerror-in-python\" rel=\"noreferrer noopener\">TypeError exception</a>. The <code>skipkeys</code> parameter helps us handle data in such situations. When we set <code>skipkeys</code> to <code>True</code>, the <code>dump()</code> method skips the keys having incompatible data types instead of running into a TypeError exception.</li><li>The <code>ensure_ascii</code> parameter is used to make sure that all the characters in the output JSON file are ASCII characters. When <code>ensure_ascii</code> is set to <code>True</code>, all the non-ASCII characters in <code>python_obj</code> are skipped. If it is set to <code>False</code>, the non-ASCII characters are saved to the JSON file as is.</li><li>The <code>check_circular</code> parameter is used to make sure that the <code>dump()</code> method performs circular reference checks for container types. If <code>check_circular</code> is set to <code>False</code>, the circular reference check is skipped. In this case, a circular reference will cause the program to run into RecursionError exception.</li><li>The <code>allow_nan</code> parameter is used to convert <code>NaN</code> and infinity values to JSON format. When <code>allow_nan</code> is set to <code>True</code>, the <code>dump()</code> method converts <code>NaN</code>, <code>+inf</code>, and <code>-inf </code>to JavaScript <code>NaN</code>, <code>Infinity</code>, <code>-Infinity</code> respectively. When <code>allow_nan</code> is set to <code>False</code>, the <code>dump()</code> method raises a<a href=\"https://www.pythonforbeginners.com/exceptions/valueerror-invalid-literal-for-int-with-base-10\" rel=\"noreferrer noopener\"> ValueError exception</a> when it finds <code>NaN</code>, <code>+inf</code>, or <code>-inf </code>in <code>python_obj</code>.</li><li>The <code>cls</code> parameter is used when we want to convert custom python objects to JSON. For converting a custom object to JSON, we need to define a  custom <code>JSONEncoder</code> subclass and pass it to the <code>cls</code> parameter.</li><li>The <code>indent</code> parameter is used to specify the indentation in the JSON object. When the <code>indent</code> parameter is set to <code>None</code> or a negative integer, the JSON object is in the most compact representation. When the <code>indent</code> parameter is set to a positive integer value, it indents that many spaces per level in the JSON object created from the <code>dump()</code> method. When the <code>indent</code> is set to a string, the string is used as the indentation character. When the <code>indent</code> is set to 0 or an empty string, a new line is introduced for each level of indentation.</li><li>By default, the key-value pairs of a JSON object are separated by a comma and the key is separated from the values using a colon character. To specify a new separator for the keys and items,  you can pass a tuple containing two characters to the <code>separators</code> parameter. The first character of the tuple becomes the separator for the key and value. The second element of the tuple becomes a separator for different items. When the <code>indent</code> parameter is set to <code>None</code>, the default value for the <code>separators</code> parameter is <code>(', ', ': ')</code>. Otherwise, the default value for the <code>separators</code> parameter is <code>(',', ': ')</code>. To get the most compact JSON object, you should remove whitespaces from the separators and use <code>(',', ':')</code> as an input argument to the <code>separators</code> parameter.</li><li>When the <code>dump() </code>method gets a non-serializable object in the <code>python_obj</code> parameter, it raises a TypeError exception. You can use the <code>default</code> parameter to handle this case. The <code>default</code> parameter takes a function as its input argument. The function should return a JSON-encodable version of the object or raise a TypeError. </li><li>The <code>sort_keys</code> parameter is used in the <code>dump() </code>method if you want the keys of the JSON object in a sorted manner. If the <code>sort_keys</code> parameter is set to <code>True</code>, the keys of the output JSON object are sorted in a lexicographic manner. </li></ul>\n\n\n\n<p>After execution, the <code>dump()</code> method saves the JSON file to the given file pointer.  You can observe this in the following example.</p>\n\n\n\n<pre class=\"wp-block-code language-python\"><code>import json\nmyStr=&quot;Aditya Raj&quot;\nfp=open(&quot;fromstring.json&quot;,&quot;w&quot;)\njson.dump(myStr, fp)\nfp.close()</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<img width=\"575\" height=\"143\" src=\"https://www.pythonforbeginners.com/wp-content/uploads/image.png\" alt=\"\" class=\"wp-image-10968\">\n\n\n\n<p>In the above example, we have converted the string <code>&quot;Aditya Raj&quot; </code>to a JSON file named <code>fromstring.json</code>. For this, we first opened the <code>fromstring.json</code> file in write mode using the <code>open()</code> function. The <code>open()</code> function takes the file name and the literal <code>&quot;w&quot;</code> as its input argument. After execution, it opens the file in write mode and returns a file pointer. We pass the file pointer and the input string to the <code>dump()</code> method. After execution, the <code>dump()</code> method saves the JSON object in the file.</p>\n\n\n\n<p>Finally, we closed the file using the <code>close()</code> method. If you don’t close the file, any data written to the file will not be saved. Hence, it is an important step.</p>\n\n\n\n<p>You can also convert objects like lists and dictionaries to JSON files using the <code>dumps()</code> method in Python as shown below.</p>\n\n\n\n<pre class=\"wp-block-code language-python\"><code>import json\nmyDict={&quot;Name&quot;: &quot;Aditya&quot;, &quot;Age&quot;: 23}\nfp=open(&quot;fromdict.json&quot;,&quot;w&quot;)\njson.dump(myDict, fp)\nfp.close()</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<img width=\"575\" height=\"143\" src=\"https://www.pythonforbeginners.com/wp-content/uploads/image-2.png\" alt=\"\" class=\"wp-image-10970\">\n\n\n\n<p>In this article, we have converted a<a href=\"https://www.pythonforbeginners.com/dictionary/how-to-use-dictionaries-in-python\" rel=\"noreferrer noopener\"> python dictionary</a> to a JSON  file in python. Similarly, you can also convert a list to JSON file using the <code>dump() </code>method.</p>\n\n\n\n<p>For converting custom python objects to JSON, you can read this article on <a href=\"https://www.pythonforbeginners.com/basics/custom-json-encoder-in-python\" rel=\"noreferrer noopener\">custom JSON encoder in Python</a>.</p>\n\n\n\n<h2 id=\"htoc-python-object-to-json-string\">Python Object to JSON String</h2>\n\n\n\n<h3 id=\"htoc-the-dumps-method\">The dumps() Method</h3>\n\n\n\n<p>The dumps() method is used to convert a python object to a JSON formatted string. It has the following syntax.</p>\n\n\n\n<pre class=\"wp-block-code language-python\"><code>json.dumps(python_obj, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw)</code></pre>\n\n\n\n<p>All the parameters in the <code>dumps()</code> method have the same meaning as the respective parameters in the<code> dump() </code>method. The only difference is that the <code>dump()</code> method saves the JSON object to a file and the <code>dumps()</code> method returns a JSON formatted string after execution.  You can observe this in the following example.</p>\n\n\n\n<pre class=\"wp-block-code language-python\"><code>import json\nmyStr=&quot;Aditya Raj&quot;\nprint(&quot;The input string is:&quot;)\nprint(myStr)\njsonStr=json.dumps(myStr)\nprint(&quot;The JSON string is:&quot;)\nprint(jsonStr)</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code language-python\"><code>The input string is:\nAditya Raj\nThe JSON string is:\n&quot;Aditya Raj&quot;</code></pre>\n\n\n\n<p>You can also convert objects like lists and dictionaries to JSON strings using the <code>dumps()</code> method in Python as shown below.</p>\n\n\n\n<pre class=\"wp-block-code language-python\"><code>import json\nmyDict={&quot;Name&quot;: &quot;Aditya&quot;, &quot;Age&quot;: 23}\nprint(&quot;The dictionary is:&quot;)\nprint(myDict)\njsonStr=json.dumps(myDict)\nprint(&quot;The JSON string is:&quot;)\nprint(jsonStr)</code></pre>\n\n\n\n<p>Output</p>\n\n\n\n<pre class=\"wp-block-code language-python\"><code>The dictionary is:\n{'Name': 'Aditya', 'Age': 23}\nThe JSON string is:\n{&quot;Name&quot;: &quot;Aditya&quot;, &quot;Age&quot;: 23}</code></pre>\n\n\n\n<h2 id=\"htoc-python-object-to-json-string-using-jsonencoder-class\">Python Object to JSON String Using JSONEncoder Class</h2>\n\n\n\n<p>The JSONEncoder class is used to create default and custom JSON encoders for converting python objects to JSON format. The <code>JSONEncoder()</code> constructor, when executed, returns a JSONEncoder object.</p>\n\n\n\n<p>We can invoke the <code>encode()</code> method on the JSONEncoder object to create a JSON string from a python object. The <code>encode() </code>method, when invoked on a JSONEncoder object, takes a python object as its input argument and returns the JSON representation of the python object. You can observe this in the following example.</p>\n\n\n\n<pre class=\"wp-block-code language-python\"><code>import json\nmyStr=&quot;Aditya Raj&quot;\nprint(&quot;The input string is:&quot;)\nprint(myStr)\njsonStr=json.JSONEncoder().encode(myStr)\nprint(&quot;The JSON string is:&quot;)\nprint(jsonStr)</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code language-python\"><code>The input string is:\nAditya Raj\nThe JSON string is:\n&quot;Aditya Raj&quot;</code></pre>\n\n\n\n<p>In this example, we first created a JSONEncoder object using the <code>JSONEncoder()</code> constructor. Then, we used the <code>encode() </code>method to convert a python string to a JSON string. </p>\n\n\n\n<p>Instead of primitive data types, you can also convert container objects such as lists and dictionaries to JSON format as shown below.</p>\n\n\n\n<pre class=\"wp-block-code language-python\"><code>import json\nmyDict={&quot;Name&quot;: &quot;Aditya&quot;, &quot;Age&quot;: 23}\nprint(&quot;The dictionary is:&quot;)\nprint(myDict)\njsonStr=json.JSONEncoder().encode(myDict)\nprint(&quot;The JSON string is:&quot;)\nprint(jsonStr)</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code language-python\"><code>The dictionary is:\n{'Name': 'Aditya', 'Age': 23}\nThe JSON string is:\n{&quot;Name&quot;: &quot;Aditya&quot;, &quot;Age&quot;: 23}</code></pre>\n\n\n\n<p>Suggested Reading: If you are into machine learning, you can read this article on <a href=\"https://codinginfinite.com/mlops-a-complete-guide-for-beginners/\" rel=\"noreferrer noopener\">mlops for beginners</a>. You might also like this article on <a href=\"https://codinginfinite.com/clustering-for-mixed-data-types-in-python/\" rel=\"noreferrer noopener\">clustering mixed data types in Python</a>.</p>\n\n\n\n<h2 id=\"htoc-load-json-files-to-python-object\">Load JSON Files to Python Object</h2>\n\n\n\n<p>We can load JSON files to python objects using the <code>load()</code> method.</p>\n\n\n\n<h3 id=\"htoc-the-load-method\">The load() Method</h3>\n\n\n\n<p>The syntax for the <code>load()</code> method is as follows.</p>\n\n\n\n<pre class=\"wp-block-code language-python\"><code>json.load(fp, *, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)</code></pre>\n\n\n\n<ul><li>The <code>fp</code> parameter is the file pointer to the file object containing the JSON file. </li><li>The <code>cls</code> parameter is used when we want to convert JSON to a custom python object. For converting JSON to a custom object, we need to define a  custom JSONDecoder subclass and pass it to the <code>cls</code> parameter.</li><li>The <code>object_hook</code> parameter is used to create custom JSON decoders. The <code>object_hook</code> parameter takes a function as its input argument. The function is called with the object literal decoded from the JSON. In the output, the return value of the function is used instead of the dict. </li><li>The <code>parse_float</code> parameter is used to convert any floating point number in the JSON to another data type. By default, the <code>float()</code> function is called with the strings containing floating point numbers in the JSON. If we specify a function in the <code>parse_float</code> parameter,  the <code>load() </code>method passes the string containing a floating point number to the function and the output of the function is used in the python object. This parameter can be used if you want to convert the floats to ints or other data types while loading the JSON itself.</li><li>The <code>parse_int</code> parameter is used to convert any integer in the JSON to another data type. By default, the <code>int()</code> function is called with the strings containing integers in the JSON. If we specify a function in the <code>parse_int</code> parameter,  the <code>load()</code> method passes the string containing the integer to the function and the output of the function is used in the python object. This parameter can be used if you want to convert the integers to floats or other data types while loading the JSON itself. The default <code>parse_int</code> of <code>int()</code> now limits the maximum length of the integer string via the interpreter’s integer string conversion length limitation to help avoid denial of service attacks.</li><li>The <code>parse_constant</code> parameter is used to load <code>NaN</code>, <code>-Infinity</code>, and <code>+Infinity</code> from JSON to custom python values. The <code>parse_constant</code> parameter takes a function as its input argument. While the execution of the <code>load()</code> function,  <code>NaN</code>, <code>-Infinity</code>, and <code>+Infinity</code> are passed to the function, and the return value is used in the python object.</li><li>The <code>object_pairs_hook</code> is an optional parameter that takes a function as its input argument. The function is called with the result of any object literal decoded with an ordered list of pairs. The return value of <code>object_pairs_hook</code> is used instead of the dict. This feature can be used to implement custom decoders. If <code>object_hook</code> is also defined, the <code>object_pairs_hook</code> takes priority.</li></ul>\n\n\n\n<p> After execution, the <code>load()</code> method returns a python object. For instance, consider the following JSON file.</p>\n\n\n\n<img width=\"575\" height=\"143\" src=\"https://www.pythonforbeginners.com/wp-content/uploads/image-3.png\" alt=\"\" class=\"wp-image-10972\">\n\n\n\n<p>When we convert the above JSON file to a python object using the <code>load()</code> method, we will get a python dictionary.</p>\n\n\n\n<p>You can convert JSON files to python objects using the <code>load()</code> method as shown below.</p>\n\n\n\n<pre class=\"wp-block-code language-python\"><code>import json\nfp=open(&quot;simplestudent.json&quot;,&quot;r&quot;)\nmyDict=json.load(fp)\nprint(&quot;The python object is:&quot;)\nprint(myDict)\nfp.close()</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code language-python\"><code>The python object is:\n{'Name': 'Aditya', 'Age': 23}</code></pre>\n\n\n\n<h2 id=\"htoc-convert-json-string-to-python-object\">Convert JSON String to Python Object</h2>\n\n\n\n<p>To convert a JSON string to a python object, we can use the loads() method or the JSONDecoder class.</p>\n\n\n\n<h3 id=\"htoc-the-loads-method\">The loads() Method</h3>\n\n\n\n<p>The<code> loads()</code> method is used to load a JSON string into a python object. It has the following syntax.</p>\n\n\n\n<pre class=\"wp-block-code language-python\"><code>json.loads(json_string, *, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)</code></pre>\n\n\n\n<p>Here, the <code>json_string</code> parameter denotes the JSON string that has to be converted to a python object. All other parameters in the <code>loads()</code> method are the same as in the <code>load() </code>method. After execution, the <code>loads()</code> method returns a python object as shown below.</p>\n\n\n\n<pre class=\"wp-block-code language-python\"><code>import json\njsonStr='{&quot;Name&quot;: &quot;Aditya&quot;, &quot;Age&quot;: 23}'\nprint(&quot;The JSON string is:&quot;)\nprint(jsonStr)\nmyDict=json.loads(jsonStr)\nprint(&quot;The python object is:&quot;)\nprint(myDict)</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code language-python\"><code>The JSON string is:\n{&quot;Name&quot;: &quot;Aditya&quot;, &quot;Age&quot;: 23}\nThe python object is:\n{'Name': 'Aditya', 'Age': 23}</code></pre>\n\n\n\n<p>In this example, you can observe that we have converted a JSON string to a python dictionary using the <code>loads()</code> method.</p>\n\n\n\n<h2 id=\"htoc-json-string-to-python-dictionary-using-jsondecoder-class\">JSON String to Python Dictionary Using JSONDecoder Class</h2>\n\n\n\n<p>The JSONDecoder class is used  to create custom JSON decoders in Python. To convert a JSON string to a python object using the JSONDecoder class, we will first execute the <code>JSONDecoder() </code>constructor. The JSONDecoder constructor returns a JSONDecoder object after execution. </p>\n\n\n\n<p>We will invoke the <code>decode()</code> method on the JSONDecoder object to create a python object from the JSON string. The <code>decode()</code> method takes a JSON string and returns a python object as shown in the following example.</p>\n\n\n\n<pre class=\"wp-block-code language-python\"><code>import json\njsonStr='{&quot;Name&quot;: &quot;Aditya&quot;, &quot;Age&quot;: 23}'\nprint(&quot;The JSON string is:&quot;)\nprint(jsonStr)\nmyDict=json.JSONDecoder().decode(jsonStr)\nprint(&quot;The python object is:&quot;)\nprint(myDict)</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code language-python\"><code>The JSON string is:\n{&quot;Name&quot;: &quot;Aditya&quot;, &quot;Age&quot;: 23}\nThe python object is:\n{'Name': 'Aditya', 'Age': 23}</code></pre>\n\n\n\n<p>By default, the <code>load()</code> method, <code>loads()</code> method and the <code>decode()</code> function return a python dictionary. To convert a JSON object directly into a custom python object, you can read this article on <a href=\"https://www.pythonforbeginners.com/basics/custom-json-decoder-in-python\" rel=\"noreferrer noopener\">custom JSON decoder in Python</a>.</p>\n\n\n\n<h2 id=\"htoc-why-use-json-files-with-python-for-data-transmission\">Why Use JSON Files With Python for Data Transmission?</h2>\n\n\n\n<ul><li>The JSON Format is syntactically similar to primitive python objects. Hence, it is easy to convert a python object to JSON and send it over the network. To send custom python objects, we can define encoders and decoders and easily transmit data in JSON format. </li><li>The JSON data is in text format. Hence, we can send it to any application. Also, it can be handled by any programming language as all programming languages support text data.</li><li>The JSON format is extremely lightweight. It can easily be sent over HTTP and HTTPS due to its small size.</li><li>JSON is easy to read, structured using key-value pairs, and doesn’t have many closing or opening tags unlike other formats such as XML.</li><li>Almost every major language has dedicated libraries for handling JSON data. So, even if you are using different programming languages in different teams, your software modules can easily communicate with each other using JSON. </li></ul>\n\n\n\n<h2 id=\"htoc-conclusion\">Conclusion</h2>\n\n\n\n<p>In this article, we have discussed working with JSON files in Python.To learn more about python programming, you can read this article on how to <a href=\"https://codinginfinite.com/python-chat-application-tutorial-source-code/\" rel=\"noreferrer noopener\">create a chat app in Python</a>. You might also like this article on <a href=\"https://codinginfinite.com/linear-regression-using-sklearn-in-python/\" rel=\"noreferrer noopener\">linear regression using the sklearn</a> module in Python.</p>\n\n\n\n<p>Stay tuned for more informative articles.</p>\n\n\n\n<p>Happy Learning!</p>\n<p>The post <a rel=\"nofollow\" href=\"https://www.pythonforbeginners.com/basics/working-with-json-files-in-python\">Working with JSON Files in Python</a> appeared first on <a rel=\"nofollow\" href=\"https://www.pythonforbeginners.com\">PythonForBeginners.com</a>.</p>"
}