{
  "title":"Made With Mu: Mu: An Editor in Hostile Environments",
  "date":"2022-11-14T08:00:00.000000Z",
  "author":null,
  "id":"https://madewith.mu/mu/users/2022/11/14/hostile-environments.html",
  "link":"https://madewith.mu/mu/users/2022/11/14/hostile-environments.html",
  "content":"<p><img src=\"https://madewith.mu/assets/venera14.jpg\"></p>\n\n<p>This is a picture of the surface of Venus, taken by the Soviet\n<a href=\"https://en.wikipedia.org/wiki/Venera_14\">Venera 14 probe</a>. Apparently, the\ntemperature of the barren rocky surface is 465 °C and the pressure is that\nof 94 Earth atmospheres (9.5 MPa). The atmosphere is a murky orange, contains\nsubstantial quantities of hydrogen sulphide (so it smells like rotten eggs) and\nit rains sulphuric acid. No wonder the probe lasted only 57 minutes before\nbreaking.</p>\n\n<p>This is, undoubtedly, a hostile environment.</p>\n\n<p>Mu is an editor for beginners. By definition, our users probably don’t know\nwhat they’re doing (they’re beginners!) and, it is with some trepidation, that\nwe design Mu to work in all sorts of different environments… some of which\nare hostile.</p>\n\n<p>For instance, we were once contacted by a teacher who explained that Mu didn’t\nwork on their classroom computers. Mu core contributor\n<a href=\"http://timgolden.me.uk/\">Tim Golden</a> took up the challenge and liaised with\nthe school’s network administrator who had installed Mu. It\nturns out they had deliberately configured the student’s home directory to be\nread only. As many of you will undoubtedly know, a user’s home directory is\nsupposed to be writeable to the user (and any applications they\nrun, like Mu). Having a writeable home directory is how we save your code,\nsettings and the log files that help us debug what has happened when Mu\ndoesn’t work.</p>\n\n<p>It would be very easy to mock such a set-up and criticise the school’s network\nadmin as incompetent, ignorant or a clown. But a far more helpful and\ncompassionate response is to engage with and try to understand the situation.</p>\n\n<p>Tim embodied this approach with great aplomb.</p>\n\n<p>As I remember the details, students all saved their work on a networked drive\nand the home directory (containing configuration files) was locked down so they\ncouldn’t change their settings. Unfortunately, Mu’s algorithm for discovering\nthe correct path for the user’s home directory was unable to distinguish that\nthe actual home directory was read only (why would it be?) or that some other\nnetwork attached drive was really where students had write permissions.</p>\n\n<p>At the core of this situation is a simple fact: schools are complicated and\noften chaotic places.</p>\n\n<p>Lessons were disrupted because the applications\nstudents needed to use were broken because students misconfigured them. The\nanswer: <em>don’t let students save configuration</em>.</p>\n\n<p>Hey presto, problem solved… until Mu arrived.</p>\n\n<p>In the end I believe Tim discussed other possible solutions around the core\nproblem and put guard code in place to ensure Mu would at least helpfully\nrecover in such a rare and unusual situation. Put simply, if we dealt\nwith every pathological situation, Mu itself would become pathological software\nas it drifted away from simplicity and ease to coping with all possible\nsituations. Tim’s approach is a good example of our alternative: we try very\nhard to keep Mu simple and easy while helping\nour (beginner) users identify when they run up against a\npathological situation if Mu encounters a problem.</p>\n\n<p>Relatedly, a common solution to problematic configuration is to create a sort\nof virtual sandbox isolated from other aspects of the system.</p>\n\n<p>In the Python world we use the <code class=\"language-plaintext highlighter-rouge\">pip</code> command to install packages, and we wanted\nthe new version of Mu to provide users with an easy-to-use and simple interface\nfor this command. My first attempt at a solution involved adding a directory\nto the Python path used by Mu and instructing <code class=\"language-plaintext highlighter-rouge\">pip</code> to use <em>that</em> as the\ndestination for all packages. This mostly worked but not enough of the time\nthat it was reliable.</p>\n\n<p>Over a friendly coffee in London Tim (again) stepped up to help.</p>\n\n<p>He asked me if there was an aspect of Mu that needed attention but which I\ndidn’t have time to properly tackle. He explained he could own this part of the\ncodebase, thus giving me some time back to concentrate on all the other things\nthat needed doing. I explained the Mu and <code class=\"language-plaintext highlighter-rouge\">pip</code> problem and we quickly came to\nthe conclusion that we should use the built-in capability of Python to create\nvirtual environments: isolated Python sandboxes into which packages could be\ninstalled with no problems.</p>\n\n<p>You can probably guess where this is going…</p>\n\n<p>It turns out there are two ways to manage Python virtual environments: the\nbuilt-in <code class=\"language-plaintext highlighter-rouge\">venv</code> module and the third-party <code class=\"language-plaintext highlighter-rouge\">virtualenv</code> package. Furthermore,\nit turns out that automatically creating isolated Python environments isn’t\nquite as easy as one might think.</p>\n\n<p>In exactly the same way we assumed a user’s home directory would always be\nwriteable, our assumptions about users’ computers and the naïveté of\n“just automate the use of a virtual environment” opened up a veritable can of\nworms. While this approach worked fine for most people, there were significant\nnumbers of edge cases, each of which required investigation and a solution.</p>\n\n<p>Let’s be honest here, asking a beginner to investigate this sort of technical\nproblem feels like trying to do a <a href=\"https://en.wikipedia.org/wiki/Talk-down_aircraft_landing\">talk down aircraft landing</a>,\nyet Tim is both determined and a gifted technical communicator. Over the course\nof a few months Tim was able to engage with many confused beginner developers\n(along with a few highly experienced coders who’d also stumbled upon Mu) to\niron out the problems when creating a virtual environment for users.</p>\n\n<p><img src=\"https://madewith.mu/assets/splash_screen.gif\"></p>\n\n<p>In case you’re wondering, it is this process that happens on first run of Mu\n(which is why Mu takes significantly longer at this moment). It’s also why we\nengaged with long-time friend of Mu and Pythonic designer extraordinaire\n<a href=\"https://www.dev.ngo/\">Steve Hawkes</a> to produce the funky animation of\nPenelope the Python (our mascot).</p>\n\n<p>The end result is, we hope, an opportunity to introduce our users to the\npersonality of Mu, while also doing a bunch of rather complicated house-keeping\non their behalf.</p>\n\n<p>Of course, Tim doesn’t have super powers and there are still kinks to be ironed\nout. For instance, there is a <a href=\"https://bugs.python.org/issue46686\">bug in Python itself</a>\n(over which we have no control) which causes perhaps 90% of our current bug\nreport traffic. While we could work around the issue (it just so happens that\nTim is also a core Python developer and Windows expert, so one of the handful\nof engineers on the planet with enough depth of knowledge and context to\nunderstand exactly what would need to be done), the “correct” solution is for\nit to be fixed in Python.</p>\n\n<p>Such are the challenges faced by Mu (and its developers, such as Tim) as we try\nto make it work as simply as possible for our users, no matter their computing\nenvironment.</p>"
}