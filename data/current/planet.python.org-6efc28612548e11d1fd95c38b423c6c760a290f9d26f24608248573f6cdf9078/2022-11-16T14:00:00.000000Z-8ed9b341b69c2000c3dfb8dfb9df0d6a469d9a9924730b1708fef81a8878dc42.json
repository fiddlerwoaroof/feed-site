{
  "title":"Real Python: Python REST APIs With Flask, Connexion, and SQLAlchemy – Part 2",
  "date":"2022-11-16T14:00:00.000000Z",
  "author":null,
  "id":"https://realpython.com/flask-connexion-rest-api-part-2/",
  "link":"https://realpython.com/flask-connexion-rest-api-part-2/",
  "content":"<div><p>Most modern web applications are powered by a <strong>REST API</strong> under the hood. That way, developers can separate the front-end code from the back-end logic, and users can interact with the interface dynamically. In this three-part tutorial series, you’re building a REST API with the <strong>Flask web framework</strong>.</p>\n<p>You’ve created a foundation with a basic Flask project and added endpoints, which you’ll connect to a <strong>SQLite database</strong>. You’re also testing your API with <strong>Swagger UI API documentation</strong> that you’re building along the way.</p>\n<p>In the <a href=\"https://realpython.com/flask-connexion-rest-api/\">first part</a>, you used Flask and Connexion to create a REST API providing CRUD operations to an in-memory structure called <code>PEOPLE</code>. By doing so, you learned how the Connexion module helps you build a nice REST API and interactive documentation. </p>\n<p><strong>In the second part of this tutorial series, you’ll learn how to:</strong></p>\n<ul>\n<li>Write <strong>SQL commands</strong> in Python</li>\n<li>Configure a <strong>SQLite database</strong> for your Flask project</li>\n<li>Use <strong>SQLAlchemy</strong> to save Python objects to your database</li>\n<li>Leverage the <strong>Marshmallow library</strong> to serialize data</li>\n<li>Connect your <strong>REST API</strong> with your database</li>\n</ul>\n<p>After finishing the second part of this series, you’ll move on to the third part, where you’ll extend your REST API with the functionality to add notes to a person. </p>\n<p>You can download the code for the second part of this project by clicking the link below:</p>\n<div class=\"alert alert-warning\">\n<p><strong>Source Code:</strong> <a href=\"https://realpython.com/bonus/flask-connexion-rest-api-part-2-code/\" class=\"alert-link\">Click here to download the free source code</a> that you’ll use to continue building a REST API with the Flask web framework.</p>\n</div>\n<h2 id=\"demo\">Demo<a class=\"headerlink\" href=\"https://realpython.com/atom.xml#demo\" title=\"Permanent link\"></a></h2>\n<p>In this three-part tutorial series, you’re building a REST API to keep track of notes for people that may visit you throughout the year. You’ll create people like the <a href=\"https://en.wikipedia.org/wiki/Tooth_fairy\">Tooth Fairy</a>, the <a href=\"https://en.wikipedia.org/wiki/Easter_Bunny\">Easter Bunny</a>, and <a href=\"https://en.wikipedia.org/wiki/Knecht_Ruprecht\">Knecht Ruprecht</a>. </p>\n<p>Ideally, you want to be on good terms with all three of them. That’s why you’ll send them notes, to increase the chance of getting valuable gifts from them.</p>\n<p>You can interact with your application by leveraging the API documentation. Along the way, you’re also building a basic front end that reflects the contents of your database:</p>\n\n  <div class=\"embed-responsive embed-responsive-16by9 rounded mb-3 border\">\n    \n  </div>\n\n\n\n<p>In the second part of this series, you’ll enhance the back end of your application by adding a proper database. That way, you’ll persist your data even when you restart your app:</p>\n\n  <div class=\"embed-responsive embed-responsive-16by9 rounded mb-3 border\">\n    \n  </div>\n\n\n\n<p>With your Swagger UI documentation, you’ll be able to interact with your REST API and make sure that everything works as intended.</p>\n<h2 id=\"planning-part-two\">Planning Part Two<a class=\"headerlink\" href=\"https://realpython.com/atom.xml#planning-part-two\" title=\"Permanent link\"></a></h2>\n<p>In the first part of this tutorial series, you worked with a <code>PEOPLE</code> dictionary to store your data. The dataset looked like this:</p>\n<div class=\"highlight python\"><pre><span></span><code><span class=\"n\">PEOPLE</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;Fairy&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;fname&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Tooth&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;lname&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Fairy&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;timestamp&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;2022-10-08 09:15:10&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">&quot;Ruprecht&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;fname&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Knecht&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;lname&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Ruprecht&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;timestamp&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;2022-10-08 09:15:13&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">&quot;Bunny&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;fname&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Easter&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;lname&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Bunny&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;timestamp&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;2022-10-08 09:15:27&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>This data structure was handy to get your project up to speed. However, any data that you added with your REST API to <code>PEOPLE</code> got lost when you restarted your app.</p>\n<p>In this part, you’ll be translating your <code>PEOPLE</code> data structure into a database table that’ll look like this:</p>\n<div class=\"table-responsive\">\n<table class=\"table table-hover\">\n<thead>\n<tr>\n<th>id</th>\n<th>lname</th>\n<th>fname</th>\n<th>timestamp</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>Fairy</td>\n<td>Tooth</td>\n<td>2022-10-08 09:15:10</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Ruprecht</td>\n<td>Knecht</td>\n<td>2022-10-08 09:15:13</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Bunny</td>\n<td>Easter</td>\n<td>2022-10-08 09:15:27</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>You won’t make any changes to your REST API endpoints in this tutorial. But the changes that you’ll make in the back end will be significant, and you’ll end up with a much more versatile codebase to help scale your Flask project up in the future.</p>\n<h2 id=\"getting-started\">Getting Started<a class=\"headerlink\" href=\"https://realpython.com/atom.xml#getting-started\" title=\"Permanent link\"></a></h2>\n<p>In this section, you’ll check in with the Flask REST API project that you’re working on. You want to make sure that it’s ready for the next steps in this tutorial series. </p>\n</div><h2><a href=\"https://realpython.com/flask-connexion-rest-api-part-2/?utm_source=realpython&amp;utm_medium=rss\">Read the full article at https://realpython.com/flask-connexion-rest-api-part-2/ »</a></h2>\n        <hr>\n        <p><em>[ Improve Your Python With \uD83D\uDC0D Python Tricks \uD83D\uDC8C – Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href=\"https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer\">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>"
}