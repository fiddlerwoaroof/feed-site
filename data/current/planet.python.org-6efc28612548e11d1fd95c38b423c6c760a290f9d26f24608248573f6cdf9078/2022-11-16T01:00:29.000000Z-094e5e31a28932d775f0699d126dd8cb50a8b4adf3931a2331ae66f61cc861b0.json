{
  "title":"Brett Cannon: Unravelling `lambda` expressions",
  "date":"2022-11-16T01:00:29.000000Z",
  "author":null,
  "id":"https://snarky.ca/unraveling-lambda-expressions/",
  "link":"https://snarky.ca/unraveling-lambda-expressions/",
  "content":"<p>When I first wrote my series on <a href=\"https://snarky.ca/tag/syntactic-sugar/\">Python&amp;aposs syntactic sugar</a>, I left out <a href=\"https://docs.python.org/3.8/reference/expressions.html#lambda\"><code>lambda</code> expressions</a> as I knew I couldn&amp;apost unravel them without <a href=\"https://snarky.ca/unravelling-assignment-expressions/\">unravelling assignment expressions</a>. Luckily, I solved that problem, so now I can unravel <code>lambda</code>!</p><p>If you read the language specification it tells you how a <code>lambda</code> expression unravels semantically. Going from <code>lambda A: B</code> gets you:</p><pre><code class=\"language-python\">def &lt;lambda&gt;(A):\n    return B</code></pre>Simple unravelling of <code>lambda A: B</code><p>Now in a proper unravelling, that function would be given a temporary name and then you would call it in the appropriate place, e.g. <code>x + (lambda A: A)(y)</code> would unravel to:</p><pre><code class=\"language-python\">def _lambda(A):\n    return A\n\nx + _lambda(y)</code></pre>Simple unravelling of <code>x + (lambda A: A)(y)</code><p>But the one small detail we are missing is the function name: it technically needs to be <code>&lt;lambda&gt;</code>. Now we could be thorough and change the function <strong>and </strong>code object&amp;aposs names to match, but I don&amp;apost think many people will check the code object for the name, so we will keep this simple and only worry about the function name:</p><pre><code class=\"language-python\">def _lambda(A):\n    return A\n_lambda.__name__ = &quot;&lt;lambda&gt;&quot;</code></pre>Unravelling of <code>lambda A: A</code><p>With the unravelling to a function complete, the only other detail to mention is unravelling for everything else still needs to be applied, including assignment expressions. That way any created variable due to an assignment expression operates as expected.</p>"
}