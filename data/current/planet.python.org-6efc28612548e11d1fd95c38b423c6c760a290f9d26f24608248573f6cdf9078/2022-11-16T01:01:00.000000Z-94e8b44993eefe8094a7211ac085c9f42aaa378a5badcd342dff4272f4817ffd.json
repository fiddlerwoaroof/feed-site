{
  "title":"Brett Cannon: MVPy: Minimum Viable Python",
  "date":"2022-11-16T01:01:00.000000Z",
  "author":null,
  "id":"https://snarky.ca/mvpy-minimum-viable-python/",
  "link":"https://snarky.ca/mvpy-minimum-viable-python/",
  "content":"<p>Over 29 posts spanning 2 years, this is the final post in my <a href=\"https://snarky.ca/tag/syntactic-sugar/\">blog series on Python&amp;aposs syntactic sugar</a>. I had set out to find all of the Python 3.8 syntax that could be rewritten if you were to run a tool over a single Python source file in isolation and still end up with reasonably similar semantics (i.e. no whole-program analysis, <code>globals()</code> having different keys was okay). Surprisingly, it turns out to be easier to list what syntax you <strong>can&amp;apost</strong> rewrite than re-iterate all the syntax that you can rewrite!</p><ol><li><a href=\"https://docs.python.org/3.8/reference/lexical_analysis.html#integer-literals\">Integers</a> (as the base for other literals like bytes)</li><li><a href=\"https://docs.python.org/3.8/reference/expressions.html#calls\">Function calls</a></li><li><code><a href=\"https://docs.python.org/3.8/reference/simple_stmts.html#assignment-statements\">=</a></code></li><li>Function definitions</li><li><code><a href=\"https://docs.python.org/3.8/reference/simple_stmts.html#the-global-statement\">global</a></code></li><li><code><a href=\"https://docs.python.org/3.8/reference/simple_stmts.html#the-nonlocal-statement\">nonlocal</a></code></li><li><code><a href=\"https://docs.python.org/3.8/reference/simple_stmts.html#the-return-statement\">return</a></code></li><li><code><a href=\"https://docs.python.org/3.8/reference/simple_stmts.html#the-yield-statement\">yield</a></code></li><li><code><a href=\"https://docs.python.org/3.8/reference/simple_stmts.html#the-del-statement\">del</a></code></li><li><a href=\"https://docs.python.org/3.8/reference/compound_stmts.html#the-try-statement\"><code>try</code>/<code>except</code></a></li><li><code><a href=\"https://docs.python.org/3.8/reference/compound_stmts.html#the-while-statement\">while</a></code></li></ol><p>All other syntax can devolve to this core set of syntax. I call this subset of syntax the <em>Minimum Viable Python (MVPy)</em> you need to make Python function as a whole<em>. </em>If you can implement this subset of the language, then you can do a syntactic translation to support the rest of Python&amp;aposs syntax (although admittedly it might be a bit faster if you directly implemented all the syntax \uD83D\uDE09).</p><p>If you look at what syntax is left, it pretty much aligns to what is required to implement a Turing machine:</p><ol><li>Read/write data (<code>=</code>, Â <code>:=</code>, and integers)</li><li>Make decisions about data (<code>while</code> and <code>try</code>)</li><li>Do things to that data (everything involving defining and using functions)</li></ol><p>You might not be as productive in this subset of the language as you would be with all the syntax available in Python 3.8 (and later), but you should still be able to accomplish the same things given enough time and patience.</p><h2 id=\"addendum\">Addendum</h2><p>Since the initial publication of this post on 2022-08-14, I was able to unravel even more syntax than I initially thought. This post has been updated to reflect those later realizations.</p>"
}