<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>DEV Community üë©‚Äçüíªüë®‚Äçüíª: Brandon Weaver</title>
    <description>The latest articles on DEV Community üë©‚Äçüíªüë®‚Äçüíª by Brandon Weaver (@baweaver).</description>
    <link>https://dev.to/baweaver</link>
    <image>
      <url>https://res.cloudinary.com/practicaldev/image/fetch/s--Q7LEIss2--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/129384/bc4c54aa-bacc-4804-8de6-edc3ff7a173b.png</url>
      <title>DEV Community üë©‚Äçüíªüë®‚Äçüíª: Brandon Weaver</title>
      <link>https://dev.to/baweaver</link>
    </image>
    <atom:link rel="self" type="application/rss+xml" href="https://dev.to/feed/baweaver"/>
    <language>en</language>
    <item>
      <title>New in Ruby 3.2 - Data.define</title>
      <dc:creator>Brandon Weaver</dc:creator>
      <pubDate>Thu, 06 Oct 2022 04:16:42 +0000</pubDate>
      <link>https://dev.to/baweaver/new-in-ruby-32-datadefine-2819</link>
      <guid>https://dev.to/baweaver/new-in-ruby-32-datadefine-2819</guid>
      <description>&lt;p&gt;Victor Shepelev (Zverok) has just landed an extremely useful feature in Ruby, &lt;code&gt;Data.define&lt;/code&gt;. You can find the merge here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ruby/ruby/pull/6353&quot;&gt;https://github.com/ruby/ruby/pull/6353&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;...and the Ruby discussion here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://bugs.ruby-lang.org/issues/16122&quot;&gt;https://bugs.ruby-lang.org/issues/16122&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So what is it and what does it do? Well that's what we're going to take a look into.&lt;/p&gt;

&lt;h2&gt;
  
  
  What it Does
&lt;/h2&gt;

&lt;p&gt;Succinctly put &lt;code&gt;Data.define&lt;/code&gt; creates an immutable &lt;code&gt;Struct&lt;/code&gt;-like type which can be initialized with either positional or keyword arguments:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;north_of_origin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;x: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;y: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This does not inherit from &lt;code&gt;Struct&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;...and because the API supports pattern matching you can very much do things like this still:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;x: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# rightward assignment, pattern matching&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;y: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# shorthand hash syntax&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It can also take a block for creating additional methods if you'd like, much like &lt;code&gt;Struct&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  
  
  Then Why Not Struct?
&lt;/h2&gt;

&lt;p&gt;You can absolutely use &lt;code&gt;Struct&lt;/code&gt; still. Given that why should you use &lt;code&gt;Data&lt;/code&gt; instead?&lt;/p&gt;

&lt;p&gt;Because it's stricter, and the values it produces are immutable. With the advent of more functional patterns in Ruby this can be a very useful thing.&lt;/p&gt;

&lt;p&gt;Consider data passing in Ractors which requires immutable state, this becomes incredibly useful for value objects and message passing for what may inevitably be our next generation of Puma and other web servers.&lt;/p&gt;

&lt;h2&gt;
  
  
  Why not dry-rb?
&lt;/h2&gt;

&lt;p&gt;Interestingly the &lt;code&gt;dry-rb&lt;/code&gt; folks are &lt;em&gt;very&lt;/em&gt; pragmatic about things like this. In fact some of their core folks are already talking about how to wrap this new feature into their immutable structs to build on top of it, rather than in parallel:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/solnic29a/status/1577683251086376963&quot;&gt;https://twitter.com/solnic29a/status/1577683251086376963&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;They did the same with pattern matching, and it's great to see how we build on top of what the language formally adopts.&lt;/p&gt;

&lt;h2&gt;
  
  
  What Do You Think of It?
&lt;/h2&gt;

&lt;p&gt;Personally? I like it. I plan to use it a lot in the REPL whenever I need a quick data type I can match against without pulling out a full &lt;code&gt;Struct&lt;/code&gt; for it as often times I don't intend to mutate it and the &lt;code&gt;keyword_init&lt;/code&gt; flag can be a bit pesky to remember.&lt;/p&gt;

&lt;p&gt;It reminds me a lot of &lt;a href=&quot;https://docs.scala-lang.org/tour/case-classes.html&quot;&gt;case classes from Scala&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight scala&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isbn&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;frankenstein&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-0486282114&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...and of &lt;a href=&quot;https://kotlinlang.org/docs/data-classes.html&quot;&gt;data classes from Kotlin&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight kotlin&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So this is not a novel concept, but a useful one for Ruby to adopt.&lt;/p&gt;

&lt;h2&gt;
  
  
  Closing Thoughts
&lt;/h2&gt;

&lt;p&gt;While the new language features have certainly slowed, in accordance with Matz's focus on tooling, we're still seeing some interesting movement in the language core. Of course there's a lot of fascinating tooling too, and I'm thrilled to see those coming to fruition, and perhaps soon I'll write about them as well.&lt;/p&gt;

&lt;p&gt;In the mean time thanks to Zverok for seeing this through, and everyone who participated!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>On Promotions</title>
      <dc:creator>Brandon Weaver</dc:creator>
      <pubDate>Tue, 04 Oct 2022 07:05:41 +0000</pubDate>
      <link>https://dev.to/baweaver/on-promotions-npl</link>
      <guid>https://dev.to/baweaver/on-promotions-npl</guid>
      <description>&lt;h1&gt;
  
  
  On Promotions
&lt;/h1&gt;

&lt;p&gt;Ah yes, that time of year has come again, and with it come some of the most difficult discussions in your job role like &quot;will I get promoted?&quot;&lt;/p&gt;

&lt;p&gt;No resource, article, or course is going to guarantee you a promotion and if they do they're selling you something. No no, you cannot guarantee one, but you can certainly improve your odds and set the stage in such a way that it tells your story effectively.&lt;/p&gt;

&lt;p&gt;That's what this article intends to do, and to that note it will be a particularly long one as there's a lot of ground to cover on the subject. It will by no means be comprehensive, but it will give you a good foundation by which to start.&lt;/p&gt;

&lt;p&gt;With that said, shall we get started?&lt;/p&gt;

&lt;h2&gt;
  
  
  Crucial Conversations
&lt;/h2&gt;

&lt;p&gt;All promotions start with one fundamental thing: your manager.&lt;/p&gt;

&lt;p&gt;They are your representative to promotion panels, committees, or whatever incarnation exists at your job. They tell your story, distill your work, and make a case for whether or not you should be considered for promotion.&lt;/p&gt;

&lt;p&gt;Even before that moment though there are a lot of conversations to be had, and we miss so many of them in favor of assuming it's all work done for us.&lt;/p&gt;

&lt;h3&gt;
  
  
  Explicitly Start the Conversation
&lt;/h3&gt;

&lt;p&gt;You would be surprised how many managers I talk to that say they're not considering someone for promotion. Not because they don't have the skills, no, but because they have not expressed a desire to be promoted.&lt;/p&gt;

&lt;p&gt;Good managers will nudge this, yes, but it is always wise to have direct and explicit conversations with them about your career growth and what you can do to improve. That means explicitly and clearly saying you want to pursue promotion and the growth that entails.&lt;/p&gt;

&lt;p&gt;The higher level you are the &lt;em&gt;earlier&lt;/em&gt; you need to mention this. If you tell your manager a week before promotions are due that you want a Senior or above promotion, or even a mid-level, chances are real low that they respond positively.&lt;/p&gt;

&lt;h3&gt;
  
  
  Surprise Surprise
&lt;/h3&gt;

&lt;p&gt;One of the key rules when dealing with leadership is this: Do not surprise them.&lt;/p&gt;

&lt;p&gt;Be clear, explicit, and to the point. With promotions this means your desires should be clear, and your growth towards those desires should be recorded clearly as well.&lt;/p&gt;

&lt;p&gt;The more you surprise your manager relative to the difficulty of a promotion the less likely they are to work with you on that.&lt;/p&gt;

&lt;h3&gt;
  
  
  Meeting Expectation
&lt;/h3&gt;

&lt;p&gt;You can both start an explicit conversation and not surprise your lead, which are a solid start, but you also need to make sure that these conversations continue and that their outcomes are recorded.&lt;/p&gt;

&lt;p&gt;Being calibrated with your manager on expectations, whether or not you're meeting them, and what you can do to improve are crucial conversations to have to drive you towards a level of execution where that promotion is doable.&lt;/p&gt;

&lt;p&gt;This can take months to years depending on how high of a level you're aiming for. Tracking growth, expectations that you met, how you course-corrected, and whether or not your manager agrees you're on the right track are critically important to building a mutual understanding of where you're at.&lt;/p&gt;

&lt;p&gt;Now not every manager is straightforward, so I very much like to have this in explicit writing for each session to make sure we don't backtrack, because it turns out as an IC I don't particularly like being surprised either.&lt;/p&gt;

&lt;h3&gt;
  
  
  Held Accountable
&lt;/h3&gt;

&lt;p&gt;One of my largest frustrations with managers in the past has been a lack of critical feedback. Everyone has somewhere where they can grow, and managers should be actively watching for these areas in their teams. If not, you definitely need to prompt it and get them thinking in that direction.&lt;/p&gt;

&lt;p&gt;No feedback is not good feedback, it means you have no chances to grow and learn from potential mistakes you cannot see. It also becomes much harder to trust your manager if all they tend to say to you are ambiguous niceties that don't really reflect your work.&lt;/p&gt;

&lt;p&gt;Having those hard conversations earlier rather than later will save you a lot of unexpected thrashing in review rankings where you thought your manager was 100% ok with your work only to find out they were harboring more than a few annoyances they never owned up to.&lt;/p&gt;

&lt;h3&gt;
  
  
  Mentorship
&lt;/h3&gt;

&lt;p&gt;Outside of managers you should also consider finding someone willing to mentor you that's in a position you'd like to be in one day. For me that might be a Head of Engineering / VP / Distinguished Engineer that's done some of what I've done, or is in a role I want to hit in the future.&lt;/p&gt;

&lt;p&gt;It helps to have someone outside of your manager to help facilitate growth and have a more unbiased look at what you're doing.&lt;/p&gt;

&lt;p&gt;These don't have to be coworkers either. Two of my mentors are at completely different companies, and they're folks I've built relationships with over years of conversations. On that note, it's also probably not effective to surprise someone with asking them to mentor you.&lt;/p&gt;

&lt;p&gt;We can look more into this later, but see if your company has a mentor program. Many do.&lt;/p&gt;

&lt;h2&gt;
  
  
  Remember?
&lt;/h2&gt;

&lt;p&gt;We must also acknowledge that leaders are human. That means they can forget, misremember, or otherwise not have a full grasp of what it is you're working on.&lt;/p&gt;

&lt;p&gt;Quickly, tell me what you did precisely three months ago, down to the first Monday of the week. Now do that for five months ago, one year ago, last week. Hard, isn't it?&lt;/p&gt;

&lt;p&gt;Now do that for five engineers on your team, and you can begin to see where this may become difficult for a manager, and lessen the likelihood that they can clearly bring together a case in your favor for promotions.&lt;/p&gt;

&lt;p&gt;What do you do then?&lt;/p&gt;

&lt;h3&gt;
  
  
  Written Record
&lt;/h3&gt;

&lt;p&gt;Unless you keep a clear record of what you've worked on it's hard to recall all that information, yet we expect our managers to have a photographic recollection of our work with which to present us in the best possible light.&lt;/p&gt;

&lt;p&gt;By keeping a written record, even high-level and topical in nature, we can immediately recall the highlights from the assessment period and put together a compelling case far quicker than if you had to hunt this all down from scratch.&lt;/p&gt;

&lt;p&gt;Chances are you'll probably forget a few projects too while you're at it.&lt;/p&gt;

&lt;p&gt;For me that includes PRs, design documents, high level themes and targets, communications cross-linking, and a spider's web of information I can draw immediate insight from. Unsurprisingly this is also very helpful in your day-to-day work as chances are you won't remember it all then either.&lt;/p&gt;

&lt;h3&gt;
  
  
  Targets, Delivered
&lt;/h3&gt;

&lt;p&gt;The higher level of a promotion you're after the more your work is on the delta of multiple months to potentially years. You can be very busy certainly, but unless you're delivering projects at that scope (which we will get into later) you're going to miss.&lt;/p&gt;

&lt;p&gt;Keeping a high-level list of targets and how you're achieving them, especially in the context of your engineering levels, is crucial in framing conversations around your growth and assembling a story that speaks to those leveling criteria.&lt;/p&gt;

&lt;p&gt;While engineering levels are not checklists, strictly speaking, enough managers and people on panels are going to view it as such that you need to treat that as table stakes for getting into the conversation. We can philosophize all we want on that point, but the fact of the matter is at several companies I've seen that exact same thing play out, and all it can take are a few folks doing that to sink a promotion.&lt;/p&gt;

&lt;p&gt;Make sure you have a solid case for each level criteria, and keep building that case as you approach your promotion attempt.&lt;/p&gt;

&lt;p&gt;For me I spent a full year before attempting a Staff level promotion gathering evidence and reinforcing my points. That brings us to another important section.&lt;/p&gt;

&lt;h2&gt;
  
  
  Engineering Levels
&lt;/h2&gt;

&lt;p&gt;Many companies have them, and many still will insist that they're not explicitly checklists as much as guidelines. Be wary of this, as it's one thing to have a philosophical opinion on something and quite another to see how it plays out in actual promotion panels.&lt;/p&gt;

&lt;h3&gt;
  
  
  By the Books
&lt;/h3&gt;

&lt;p&gt;Strictly speaking one of the clearest things you can do for levels is to hit all the marks on the engineering levels for your target level, and make a clear case as to why you meet all of those criteria.&lt;/p&gt;

&lt;p&gt;One could fairly argue this defeats the purpose, certainly, but if promo panelists are reviewing 10+ packets chances are they're going to fall back hard on those explicit levels and nuance will not be as high of a consideration.&lt;/p&gt;

&lt;p&gt;Do I agree with that? No. Is that the way things have played in my experience? Absolutely. Focus on solving for what reality is today, not for what we would like it to be tomorrow. We should certainly seek to change and improve, but while the criteria still favors an old way make sure you have those conditions met, and clearly so.&lt;/p&gt;

&lt;h3&gt;
  
  
  Over-Level Contributions
&lt;/h3&gt;

&lt;p&gt;Speaking of philosophy I believe deeply that communication skills are critical to any engineer, and that glue work is an incredibly valuable skill to have. I also believe, perhaps contradictorily, that you should actively avoid getting to entangled in either until higher levels.&lt;/p&gt;

&lt;p&gt;Many newer engineers working on promotions at or below senior levels can get caught in a trap of heavy community and extra-curricular involvement that detracts from their actual role. While these are certainly noble pursuits and have value you should make sure that it does not compromise your actual role.&lt;/p&gt;

&lt;p&gt;This work is rarely recognized and rewarded until levels of Staff or above, and in a lot of cases can be framed as being &quot;non-technical&quot; and not pushing enough code. Again, I disagree with this, but many leveling systems are wired this way and we play to the game as it is written, not as we would like it to be.&lt;/p&gt;

&lt;p&gt;Especially for levels of senior or below I would actively encourage heavier code contributions to make an abundantly clear case for technical merit.&lt;/p&gt;

&lt;p&gt;I can certainly write more later on changing engineering levels and the process around that, but even then if you did change them it would take until the next promo cycle to really come into effect.&lt;/p&gt;

&lt;h3&gt;
  
  
  The Staff Curse
&lt;/h3&gt;

&lt;p&gt;On that technical point, promotions aren't the only thing happening, reviews are too. That means even if you're on for promotion you'll likely still get a judgement at your level.&lt;/p&gt;

&lt;p&gt;Many Staff+ roles heavily involve networking, communications, politics, and general socio-political skills. Those same skills would be seen as not pushing enough code in senior or below levels, which might land you in hot water.&lt;/p&gt;

&lt;p&gt;Back to the point of not surprising managers you're going to want to be exceptionally clear in getting written expectations and feedback when going for these levels as the assessment criteria is dramatically different than the ones before it.&lt;/p&gt;

&lt;p&gt;I have observed engineers trying for a Staff level getting put on a PIP (performance improvement plan) for &quot;not doing their jobs&quot; and pushing enough code, and so much of it was related to not setting clear expectations and progressions with their managers first.&lt;/p&gt;

&lt;h3&gt;
  
  
  The Staff Expectation
&lt;/h3&gt;

&lt;p&gt;Conversely if you're clear on pursuing a Staff role and you try and solo everything and pursue those levels from a perspective of Senior, but more technical, you're going to have a very steep uphill climb in many companies.&lt;/p&gt;

&lt;p&gt;Staff engineers are expected to abandon the notion of IC (individual contributor) in favor of OC (organizational contributor) or CC (company contributor) as they grow to Principal. This means that they're no longer one engineer, but the synthesis of an entire organization, a distillation of all that knowledge.&lt;/p&gt;

&lt;p&gt;Anything beyond a certain scope is fundamentally impossible to do effectively if you try to do so by yourself. Certainly you can solve the technical part, but not the domain and all the concerns of an entire organization or beyond, and that's what gets folks into trouble.&lt;/p&gt;

&lt;p&gt;It's also one of the most common reasons folks failed that promotion level at more than one company.&lt;/p&gt;

&lt;h2&gt;
  
  
  Writing the Packet
&lt;/h2&gt;

&lt;p&gt;So you've had the talks, written down all the information, made sure to calibrate it all against your engineering levels, and now you have a decent amount of evidence. How do you take that and make a packet then?&lt;/p&gt;

&lt;h3&gt;
  
  
  To the Point
&lt;/h3&gt;

&lt;p&gt;Remember that managers are human? ...and that they have five reports to watch? Panel reviewers for promotions are often not much better, if anything they're worse. They have a grand total of maybe a few weeks to review your entire record and make a yes-or-no call based on it, then they have to do that for probably ten more people each.&lt;/p&gt;

&lt;p&gt;Knowing this, and knowing how burnt out those reviewers can get, one of the most effective things you can go while writing packets is to keep things to the point. Use bullet points, bolded titles to draw attention to sections, keep paragraphs short and terse, explicitly call out level criteria and how you meet it.&lt;/p&gt;

&lt;p&gt;If I had two packets, one where the manager gave me a small-scale novel and another gave me a tightly bulleted summary with links to read more I know which one I would be far more likely to promote.&lt;/p&gt;

&lt;p&gt;Really though this is a critical skill in general, especially for talking with executives, who need the TL;DR yesterday.&lt;/p&gt;

&lt;h3&gt;
  
  
  What did YOU Do?
&lt;/h3&gt;

&lt;p&gt;At levels below staff you're very much judged on the work of your team and what your role was in that work. Above that point they want to know how you led and delivered on larger projects. What they have in common is people want to know what specifically you did, and if that information is hard to find it will not go over well.&lt;/p&gt;

&lt;p&gt;When assessing a promotion reviewers want to know who you are and what you've done in no unclear terms. Don't try to ambiguously latch on to the work of another engineer to make your case, as it will be far weaker for it, as well as dishonest.&lt;/p&gt;

&lt;h3&gt;
  
  
  Framing
&lt;/h3&gt;

&lt;p&gt;I'm going to give you two examples, let me know what you think of each of them:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Jill Smith worked on Feature Flags for the Java language, helped support engineers, and wrote documentation on how to use new features.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;....versus:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Jill Smith is the product owner of Feature Flags for Java and expert in the domain. She designed and shipped cloud-native support including onboarding documentation and directly onboarded consumers, integrating feedback into further improvements.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Same engineer, same work, but one clearly tells you that Jill wasn't working on features, she was &lt;em&gt;leading the entire thing&lt;/em&gt; from start to finish. The latter one is not an embellishment, but rather a reframing to tell the full story of the scope of work.&lt;/p&gt;

&lt;p&gt;Scope and impact are frequently the most important criteria to meet in leveling expectations, so be sure that how you frame your projects takes this into account. I do not mean to say puff yourself up, no, but give yourself credit.&lt;/p&gt;

&lt;p&gt;If you find that you're not good at selling yourself find someone who is and have them review your packet.&lt;/p&gt;

&lt;h3&gt;
  
  
  Collaborative Effort
&lt;/h3&gt;

&lt;p&gt;Remember that bit about managers and helping them? Packets, especially post-senior, are collaborative in nature. You build them together, and help to make sure that the packet reflects your best self.&lt;/p&gt;

&lt;p&gt;Some might think that this is entirely the job of your manager, but that would be a mistake as even with all the notes and other information they cannot know the full context of what you've worked on no matter how well they paid attention.&lt;/p&gt;

&lt;p&gt;That's where you step in, to make sure that everything going to that committee is what you agree with, and that the both of you have an understanding of that.&lt;/p&gt;

&lt;h3&gt;
  
  
  Peer Feedback
&lt;/h3&gt;

&lt;p&gt;Many companies include peer feedback, with some having stricter requirements on what constitutes applicable feedback. Over there for levels beyond senior you were required to have at least two people at or above the target level giving feedback on your packet to have it accepted, with some minor leeway.&lt;/p&gt;

&lt;p&gt;Even if that's not a hard requirement checking in with your peers is valuable from time to time. Keep discussions in the open, because sometimes passive-aggressiveness can play in hard, and you want to keep the air clean especially on teams.&lt;/p&gt;

&lt;p&gt;For me I want people who can speak to my strengths and who have directly worked with me, but perhaps oddly I also want people who will be critical of me in an honest and constructive way.&lt;/p&gt;

&lt;h3&gt;
  
  
  Critical Feedback and Evaluations
&lt;/h3&gt;

&lt;p&gt;I'll also make sure said critical feedback is gathered well before promotion reviews so I can adjust on that and make a case that I did for amended feedback.&lt;/p&gt;

&lt;p&gt;As a packet reviewer in the past nothing was more suspicious to me than someone who had no negative feedback. Everyone has something to grow on, so while you should absolutely frame things well you should not actively hide growth areas either.&lt;/p&gt;

&lt;p&gt;And no, that does not mean you should sneak in try-hard evaluations like &quot;They care too much for their own good&quot; unless you have something to follow that that makes a real clear case for it. In my case I made that argument because it got me involved in too many different initiatives which prevented me from focusing on the ones which mattered, which was definitely a weakness to address.&lt;/p&gt;

&lt;h2&gt;
  
  
  Additional Considerations
&lt;/h2&gt;

&lt;p&gt;Beyond these things there are a few additional considerations that don't strictly fit into sections, as much as they are anecdotes I've heard over my career that have really helped frame things for me.&lt;/p&gt;

&lt;h3&gt;
  
  
  Presence
&lt;/h3&gt;

&lt;p&gt;For levels beyond senior you have substantial visibility, and have to network across entire organizations if not higher. That means people have to trust you, and in some ways already see you at that level.&lt;/p&gt;

&lt;p&gt;If I were to go to anyone in your org and ask who you are and get blank stares and shrugs chances are there's a problem and people don't know what you do. For those levels that's a huge miss, as your entire effectiveness is based on how well you communicate and negotiate with folks.&lt;/p&gt;

&lt;p&gt;That doesn't mean to strut about and peacock, but to be sure to form relationships with those you're going to be working with as those will be essential to any high level project's execution.&lt;/p&gt;

&lt;h3&gt;
  
  
  Try Anyways
&lt;/h3&gt;

&lt;p&gt;Not sure if you're 100% ready? Try anyways. Often times this will result in useful feedback on what the panelists would like to see next round, and can help bolster your case. You might be surprised, you might be far further along than you think you are and get the promotion anyways.&lt;/p&gt;

&lt;p&gt;That happened to me once where I thought it was a long shot, but the feedback was that I had well exceeded the requirements and should have considered applying earlier. Lessons for future me I suppose.&lt;/p&gt;

&lt;h3&gt;
  
  
  Feedback
&lt;/h3&gt;

&lt;p&gt;If you have a mentor or others you respect absolutely get their feedback on your packet, it can really help as often times they'll also be excellent cheerleaders to help frame your packet in a way which really captures your impact.&lt;/p&gt;

&lt;p&gt;That said, if I were on promo panels and you asked me to look at your packet, I would recuse myself if you ended up in my group to prevent bias so do be aware that recusal is a risk you run sometimes.&lt;/p&gt;

&lt;h3&gt;
  
  
  Upward Feedback
&lt;/h3&gt;

&lt;p&gt;Especially post-senior levels you're going to want to ask higher level EMs what their view of you is, and what if anything they would suggest you do to grow and improve. As your scope increases you will be dealing with these folks a lot more, so getting their opinions will be invaluable.&lt;/p&gt;

&lt;h2&gt;
  
  
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;This is by no means a comprehensive list, but summarizes most of the advice that I have given folks over the past decade regarding promotions. So far that advice has helped to promote over 35 people now, with some all the way up to Staff levels, but that contains another secret:&lt;/p&gt;

&lt;p&gt;They were already incredible engineers with stories to tell, I just helped them tell them effectively and clearly.&lt;/p&gt;

&lt;p&gt;That's the other secret though dear reader: You're a pretty great engineer too, don't sell yourself short. Give it a try, start the conversations, and see what happens.&lt;/p&gt;

&lt;p&gt;I believe in you, so go out and give it your best.&lt;/p&gt;

</description>
      <category>promotion</category>
      <category>career</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Beyond Senior ‚Äì The Peacock, the Hermit, and the Counsel</title>
      <dc:creator>Brandon Weaver</dc:creator>
      <pubDate>Sun, 18 Sep 2022 03:31:00 +0000</pubDate>
      <link>https://dev.to/baweaver/beyond-senior-the-peacock-the-hermit-and-the-counsel-74f</link>
      <guid>https://dev.to/baweaver/beyond-senior-the-peacock-the-hermit-and-the-counsel-74f</guid>
      <description>&lt;p&gt;After a number of conversations over the past few years with several other engineers who have moved beyond senior levels into staff and principal positions I've come away with a lot of insights, many of which have seen their way to Twitter or other conversations first, but now it's time to start collecting some of those stories into this new series: Beyond Senior.&lt;/p&gt;

&lt;p&gt;What does it mean to go beyond the senior level in an engineering organization?&lt;/p&gt;

&lt;p&gt;That's the question we're going to be looking at throughout this series.&lt;/p&gt;

&lt;h2&gt;
  
  
  The Peacock, the Hermit, and the Counsel
&lt;/h2&gt;

&lt;p&gt;The more senior you become in your role the you need to self-market and sell people on your ideas. In order to drive consensus, inform decisions of executives, spread information, or otherwise raise awareness of work going on you'll find that communications and politics, especially around sales and marketing, are mandatory to be effective.&lt;/p&gt;

&lt;p&gt;Some love it, some hate it, but it's perhaps a bit more complicated than that. Let's explore a few archetypes of this particular type of politicking at scale, and a few examples from my own career of how these roles have worked out.&lt;/p&gt;

&lt;h3&gt;
  
  
  The Peacock
&lt;/h3&gt;

&lt;p&gt;You know the one. They proudly flaunt, loudly proclaim, demand attention, and overall make a significant amount of noise around anything they're currently doing. They write lavish announcement emails, threads on slack, tag every executive in a five mile radius, and make sure everyone is aware of exactly what they're up to at all times.&lt;/p&gt;

&lt;p&gt;Certainly it's very pretty and well formatted, gives a lot of information, and definitely raises awareness but you'll find it very lacking. The information you get tends to be vapid and hollow, lacking in any real substance, and filled to the brim with hyperbole if not outright falsehoods to make them look far grander than they truly are.&lt;/p&gt;

&lt;p&gt;When it comes down to it they tell an excellent story, but many will find it hard to trust the peacock as the information they share may or may not be an accurate retelling of events. You'll always be second guessing how much is flowery wordplay versus substantiated information.&lt;/p&gt;

&lt;p&gt;Their primary drives are ego and attention, and there are most certainly cases where a peacock can gain the attention and admiration of an executive, catapulting them to upper levels. Problem is eventually hollow words and architecture collapse, masks drop, and the curtain falls.&lt;/p&gt;

&lt;p&gt;I've run into several peacocks who got promoted quickly and were put into positions of power, only to fail visibly later once the spin and shine wore off. Near every single time their silver tongues would catch up to them, and people would find out that maybe they didn't get the straight story. Sometimes they'd get away with it for far longer, just to leave the company to start over again with someone who didn't know any better.&lt;/p&gt;

&lt;h3&gt;
  
  
  The Hermit
&lt;/h3&gt;

&lt;p&gt;The hermit &lt;em&gt;hates&lt;/em&gt; the peacock with a burning passion. They refuse to engage in all the politics, and adamantly refuse to play such petty games. They want nothing to do with it, and will defiantly hold to that stance.&lt;/p&gt;

&lt;p&gt;Their work speaks for itself, let others discover the value in their own time, because it's obviously the superior product. If anyone doesn't happen to read their source or directly ask them that's their problem, their job is to deliver code, not to flaunt around.&lt;/p&gt;

&lt;p&gt;They abhor the entire choreographed dance routine where you have to say the right words to the right people at the right time, and they want out.&lt;/p&gt;

&lt;p&gt;People seek them out for wisdom, not the other way around, they're not here to preach or prance. They don't care, only the code matters.&lt;/p&gt;

&lt;p&gt;I've seen many a hermit build a substantial amount of expertise, becoming indispensable to the company, and driving along large complicated technical projects. The problem is no one knew what in the world they were up to, and frequently they would have budgets and teams cut for it. Either that, or there would be significant misunderstandings, conflicting timelines, or otherwise general chaos as no one knew what the plan was.&lt;/p&gt;

&lt;h3&gt;
  
  
  The Counsel
&lt;/h3&gt;

&lt;p&gt;Perhaps unsurprisingly neither of those types sound particularly well-grounded, and indeed both have substantial flaws which prevent them from being effective at any sort of a scale. Both are driven by ego and a sense of self-importance, and both critically miss the point of levels beyond senior.&lt;/p&gt;

&lt;p&gt;Enter the counsel, option three. They act as an informational source, an intermediary, to summarize information between the executives in their scope (staff to directors, principal to heads / VPs), and to communicate broader goals down to those working on their localized teams.&lt;/p&gt;

&lt;p&gt;They certainly do some amount of marketing and sales, but not for ego, for drawing attention judiciously to that which needs it and seeing those cases through. They're not around to show off, nor do they self-isolate. They exist to inform and bring clarity to their teams.&lt;/p&gt;

&lt;p&gt;For them saying nothing is worse because than all that information is lost, and people may not be aware of larger efforts which may concern their teams, making it impossible to move larger projects along safely without collateral damage.&lt;/p&gt;

&lt;h3&gt;
  
  
  Balance
&lt;/h3&gt;

&lt;p&gt;What it comes down to, in the end, is the ability to use marketing and sales to drive clarity in your teams and why you pursue it. Was it all for your own glory, or was it for the betterment of your teams? Many lie to themselves on this, and it'll cost them in the long run.&lt;/p&gt;

&lt;p&gt;Engineering never was a solo effort, despite some folks best intentions to make it into one. To be effective at these levels you need to be able to let go of your ego and seek to serve others, to grow them, and to make them more effective over time.&lt;/p&gt;

&lt;p&gt;Losing sight of that will make a very brittle engineer, and a high-level liability just waiting to cause damage to the company around them.&lt;/p&gt;

&lt;h2&gt;
  
  
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;I get it. People either love or hate politics at work, but to frame it as such misses the point. They're necessary, like it or not, but how we approach it makes all the difference in the world. In order to be effective you need to seek clear communications for the sake of those communications, not for the sake of some ephemeral promotion or grand recognition.&lt;/p&gt;

&lt;p&gt;Beyond senior the path to growth is through others and empowering them to be more effective, because one person cannot ever take on the entire world, no matter how hard they might try to tell you otherwise.&lt;/p&gt;

</description>
      <category>politics</category>
      <category>staff</category>
      <category>career</category>
    </item>
    <item>
      <title>Beyond Senior ‚Äì The IC Misnomer</title>
      <dc:creator>Brandon Weaver</dc:creator>
      <pubDate>Mon, 05 Sep 2022 07:50:22 +0000</pubDate>
      <link>https://dev.to/baweaver/beyond-senior-the-ic-misnomer-dd9</link>
      <guid>https://dev.to/baweaver/beyond-senior-the-ic-misnomer-dd9</guid>
      <description>&lt;p&gt;After a number of conversations over the past few years with several other engineers who have moved beyond senior levels into staff and principal positions I've come away with a lot of insights, many of which have seen their way to Twitter or other conversations first, but now it's time to start collecting some of those stories into this new series: Beyond Senior.&lt;/p&gt;

&lt;p&gt;What does it mean to go beyond the senior level in an engineering organization?&lt;/p&gt;

&lt;p&gt;That's the question we're going to be looking at throughout this series.&lt;/p&gt;

&lt;h2&gt;
  
  
  The IC Misnomer
&lt;/h2&gt;

&lt;p&gt;When looking at job tracks for engineers you'll likely see one of a few:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;IC (Individual Contributor)&lt;/strong&gt; - The technical track&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;EM (Engineering Manager)&lt;/strong&gt; - Going into management, some project management&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;TL (Tech Lead)&lt;/strong&gt; - Semi-hybrid, focused on project management with tech&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Typically only the first two, IC and EM, are considered official roles. Tech lead at most places I've worked is an unofficial title, and tech lead managers are a more rare role doomed to failure for trying to do it all at once.&lt;/p&gt;

&lt;p&gt;Within IC you'll see a leveling system which looks somewhat like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;IC L1 - Entry level&lt;/li&gt;
&lt;li&gt;IC L2 - Mid level&lt;/li&gt;
&lt;li&gt;IC L3 - Senior&lt;/li&gt;
&lt;li&gt;IC L4 - Staff&lt;/li&gt;
&lt;li&gt;IC L5 - Principal&lt;/li&gt;
&lt;li&gt;IC L6 - Distinguished&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Companies like Block or Google tend to be L+2 of the above, whereas my current role is closer to the above. In any case the title gradient stays mostly the same with perhaps some interspersed &quot;Senior Staff&quot;, &quot;Senior Principal&quot;, or even some really fancy titles around &quot;Fellow&quot;.&lt;/p&gt;

&lt;p&gt;Interestingly most of these companies also have large warnings around IC-L4+ stating that it can be a qualitatively different job with very different measures of success. Given that, it seems odd that they'd still be called IC levels.&lt;/p&gt;

&lt;p&gt;In fact I would call &quot;IC&quot; a misnomer when one moves beyond a senior level.&lt;/p&gt;

&lt;h3&gt;
  
  
  The Individual (IC)
&lt;/h3&gt;

&lt;p&gt;Up to mid levels and for a good part of senior engineering levels you will be focused on landing individual tickets and work either by yourself or in small pairing groups depending on your organization's practices. Most of your assessment will be very heavily based on how you perform as an individual and the value you provide as an individual.&lt;/p&gt;

&lt;p&gt;There may be some cases where you're accountable to the growth of more entry level engineers, but as a formal part of your role this often won't start taking more shape until senior or above levels.&lt;/p&gt;

&lt;h3&gt;
  
  
  The Team (TC)
&lt;/h3&gt;

&lt;p&gt;When you're a senior engineer a vast majority of your focus is at the team level, often as an individual contributing to a larger goal or project. On occasion you might see some movement into technical leadership and being a team lead of sorts which moves this more from an individual contributor to a team contributor.&lt;/p&gt;

&lt;p&gt;Your focus shifts from being focused on individual delivery to the delivery of your team, and often you end up pairing with your manager to help drive discussions on how work should be originated, scheduled, delivered, and potentially even negotiated.&lt;/p&gt;

&lt;p&gt;At this stage you can be assessed not only on your individual performance, but also the performance of the team around you. This is where the line starts to blur between being an individual and being a part of something larger, and will be a recurring theme as we move on.&lt;/p&gt;

&lt;h3&gt;
  
  
  The Organization (OC)
&lt;/h3&gt;

&lt;p&gt;Just as an individual is not an island on a team, neither is a team isolated in their wider organization. The role of a staff engineer is where reaching across team boundaries in your organization goes from being an exemplary quality to being an expectation of the role.&lt;/p&gt;

&lt;p&gt;To succeed you have to build consensus, communicate, document, clarify, and present on work across an entire organization. If you step back into more individual focus at these levels your effectiveness will be severely limited, as the goal here is to make an entire organization succeed rather than playing hero.&lt;/p&gt;

&lt;p&gt;The best staff engineers are great at taking this and delegating out work, and helping to roadmap larger projects well beyond the scope that they could ever do individually. The worst? Well we'll leave that for another post, except to say that there's great danger in soloing work meant for much larger groups of people.&lt;/p&gt;

&lt;h3&gt;
  
  
  The Company (CC)
&lt;/h3&gt;

&lt;p&gt;What a staff engineer does a principal engineer does for an entire company.&lt;/p&gt;

&lt;p&gt;They work across disparate cultures, organizations, teams, and more to reach a much broader cultural shift at companies to drive standards and lead projects that are critical to the entire company. They are judged by the success of the company as a whole, and how well they can guide all of engineering to shared goals, and communicate that with executives.&lt;/p&gt;

&lt;p&gt;Whereas it's dangerous to try and solo as a staff engineer it is absolutely fatal to try and do it as a principal.&lt;/p&gt;

&lt;h3&gt;
  
  
  Does an IC Exist?
&lt;/h3&gt;

&lt;p&gt;No.&lt;/p&gt;

&lt;p&gt;In any team, organization, company, or other engineering group there is no such thing as an individual. Even at entry and mid levels you might have noticed mentions of pairing and working together to solve problems. Moving beyond that seniors rely on others to inform decisions, as do staff and above engineers.&lt;/p&gt;

&lt;p&gt;No matter where an engineer is at in a company they're contributing to something much larger, and engineering never was a solo activity. It has always been, and always will be, a group project.&lt;/p&gt;

&lt;h3&gt;
  
  
  Isolationism
&lt;/h3&gt;

&lt;p&gt;That doesn't mean people won't try to run it solo, but such people will often do more harm than good.&lt;/p&gt;

&lt;p&gt;Being that engineering is a group activity that requires frequent sharing of knowledge, delegation of work to land larger projects, and the ability to grow others. The more someone isolates from others the more they form silos of information and quickly become a liability to the company.&lt;/p&gt;

&lt;p&gt;Sure, they're very impressive and productive, for a while at least. Give that a few years, assuming they haven't left the company, and the echoes of those choices will start to reverberate. Code written without understanding others, the product, the customer, and all the related concerns will always be far more brittle and prone to error.&lt;/p&gt;

&lt;p&gt;I've met several of these engineers in my career, and in every single case after the shine wore off people were stuck cleaning up after a myriad of edge cases and bugs that said engineer never considered while going full hero on the code base.&lt;/p&gt;

&lt;h3&gt;
  
  
  The Purpose of Teams
&lt;/h3&gt;

&lt;p&gt;One thing a lot of folks who prefer isolationism miss is the purpose of teams, and what makes them productive.&lt;/p&gt;

&lt;p&gt;Commonly they would say the purpose of a team is to deliver code as quickly as possible.&lt;/p&gt;

&lt;p&gt;I would argue this misses the point. You can move as fast as you want to, but if you're running a marathon and take off sprinting to deliver on the first mile you'd look pretty foolish for the next 25 and some change miles.&lt;/p&gt;

&lt;p&gt;No, the purpose of a team is to deliver code as quickly and sustainably as possible.&lt;/p&gt;

&lt;p&gt;We create systems of reinforcement, delegation of work, planning, and other practices to make sure that if any one engineer is missing we can continue on a sustainable pace and deliver on our objectives. If the absence of any one person for 2-3 weeks causes the collapse of a team that's not a sustainable team.&lt;/p&gt;

&lt;p&gt;At one point I'd joked that this sounded a lot like the classic philosophy problem the &quot;&lt;a href=&quot;https://en.wikipedia.org/wiki/Ship_of_Theseus&quot;&gt;Ship of Theseus&lt;/a&gt;&quot;:&lt;/p&gt;

&lt;p&gt;If you were to replace every member of a team would it still be the same team? Perhaps that will be the subject of a later post, but an interesting idea to muse on in the mean time.&lt;/p&gt;

&lt;h2&gt;
  
  
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;It should be no secret that my opinion is that there is no such thing as a solo engineering role. Inevitably we're all part of a much larger engineering community and no one person is capable of doing it all.&lt;/p&gt;

&lt;p&gt;The strongest engineers I know are the ones that can admit this early, and the weakest are the ones who fight against it and find themselves hitting a brick wall right around the senior level. Collaboration, politics, and communication are essential to any level, especially beyond senior.&lt;/p&gt;

&lt;p&gt;That's why whenever I hear roles beyond senior phrased as individual contributor I find myself thinking that it misses the point, and sets the tone for heroics rather than collaboration.&lt;/p&gt;

&lt;p&gt;As a community we should address this misnomer, and grow together to find more sustainable solutions to growth.&lt;/p&gt;

</description>
      <category>staff</category>
      <category>career</category>
    </item>
    <item>
      <title>Beyond Senior ‚Äì Just Enough Experimentation</title>
      <dc:creator>Brandon Weaver</dc:creator>
      <pubDate>Sun, 04 Sep 2022 05:05:42 +0000</pubDate>
      <link>https://dev.to/baweaver/beyond-senior-just-enough-experimentation-hg7</link>
      <guid>https://dev.to/baweaver/beyond-senior-just-enough-experimentation-hg7</guid>
      <description>&lt;p&gt;After a number of conversations over the past few years with several other engineers who have moved beyond senior levels into staff and principal positions I've come away with a lot of insights, many of which have seen their way to Twitter or other conversations first, but now it's time to start collecting some of those stories into this new series: Beyond Senior.&lt;/p&gt;

&lt;p&gt;What does it mean to go beyond the senior level in an engineering organization?&lt;/p&gt;

&lt;p&gt;That's the question we're going to be looking at throughout this series.&lt;/p&gt;

&lt;h2&gt;
  
  
  Just Enough Experimentation
&lt;/h2&gt;

&lt;p&gt;In my last post we got into progressive influence and how to approach major projects. This was very much meant as an overview post, and as such was very generic in nature.&lt;/p&gt;

&lt;p&gt;This post will look more into code and process changes, and how experimentation can really kick off a great conversation, but you know: just enough experimentation.&lt;/p&gt;

&lt;h3&gt;
  
  
  Informed Code is Worth a Thousand Words
&lt;/h3&gt;

&lt;p&gt;You've probably heard the old phrase that a picture is worth a thousand words, and perhaps even the extrapolation that code is worth a thousand words as well. In some cases I would agree this is true, code can indeed make a very compelling point very quickly, but it can also be a distraction at times.&lt;/p&gt;

&lt;p&gt;Returning to the previous post I would very highly encourage you, before diving into too many experiments, to seek understanding and a mutual one between enough teams to form a reasonable opinion that you can base that experiment on.&lt;/p&gt;

&lt;p&gt;If instead you start to experiment from solely your own opinions without vetting them by others, doing some discovery work, or really any foundational research you're very likely going to have an experiment which does not reach people as effectively as it could have.&lt;/p&gt;

&lt;p&gt;I would instead amend that phrase in these contexts to be &quot;Informed code is worth a thousand words,&quot; and that means informed by more than just yourself no matter how well you may know a given domain.&lt;/p&gt;

&lt;h3&gt;
  
  
  Enough to Explore
&lt;/h3&gt;

&lt;p&gt;The beauty of an experiment is it allows us to investigate a novel idea, and test that idea with teams. Generating those conversations and pairing sessions is immensely valuable in turning an experiment into a full project, or perhaps in even disproving an experiment and finding out what other problems may exist.&lt;/p&gt;

&lt;p&gt;Your goal here should be to find teams which your experiment is designed to help, and run a bit of ping-pong with them to see:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If this could potentially solve their problem&lt;/li&gt;
&lt;li&gt;What features would make this more useful to them&lt;/li&gt;
&lt;li&gt;If this is even possible to code (it might not be)&lt;/li&gt;
&lt;li&gt;How expensive it might be to pursue&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For me I like to find at least three teams, sometimes up to five. Enough to vet ideas, but not so much as to require interviewing the entire company every time I need to test something.&lt;/p&gt;

&lt;h3&gt;
  
  
  But No More than Needed
&lt;/h3&gt;

&lt;p&gt;Now be careful with that though, as there's also a tendency when experimenting to add all the features, bells, and whistles. After all you're a smart fellow, why not? You could make something truly amazing in just a week and really polish off that interface.&lt;/p&gt;

&lt;p&gt;I believe this misses the point of an experiment. Think of experiments as more of a conversational piece, in that they provoke conversation about a potential direction of work that could be investigated. Every answer in code you give is met with a reply, and a retort.&lt;/p&gt;

&lt;p&gt;We let these retorts drive a bit of back-and-forth to suss out the edges of a problem certainly, but at some point we've gone from an experiment to a full project without considering how we'll break the work up and really push it into prime time.&lt;/p&gt;

&lt;p&gt;Before starting an experiment be sure that you're not taking it too far, because the point of an experiment is to make a point and generate buy-in. Once you have that it's time to start project planning and gathering more formal requirements.&lt;/p&gt;

&lt;p&gt;If your experiment immediately becomes a solution you've skipped a few steps, especially if this experiment is designed to address projects of significant scope.&lt;/p&gt;

&lt;h3&gt;
  
  
  Qualifying Success
&lt;/h3&gt;

&lt;p&gt;Your job with experiments is to prove whether or not something is worth pursuing. Hold fast to that line, and make sure to measure progress towards it. Crossing it can often times become a distraction and have you diving deep into code when it may well be time to promote it to a full project.&lt;/p&gt;

&lt;p&gt;Make sure to have a definition of success in mind before starting, otherwise you'll find it very tempting to move the goal posts as you get closer.&lt;/p&gt;

&lt;h3&gt;
  
  
  Qualifying Failure
&lt;/h3&gt;

&lt;p&gt;Likewise you should be willing to admit that an experiment was not successful. There's no shame in that, and in fact writing down solutions which did not work narrows the field for future pursuits and is valuable in and of itself.&lt;/p&gt;

&lt;p&gt;Many of the experiments I've done in my career have qualified as failures, but because of that I was able to stop from pursuing a full project based on an idea. That experiment let me quickly assess that moving further was not a good idea, and for that it was still very much worth the time.&lt;/p&gt;

&lt;p&gt;The trap here is often trying to make something a success, and not being willing to let go.&lt;/p&gt;

&lt;h2&gt;
  
  
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;Experiments are useful at levels beyond senior to prove a point, or to originate work. The danger is when experiments absorb all of your time and distract you from other work. They should be quick, light, measured, and to the point.&lt;/p&gt;

&lt;p&gt;When done as such they can be powerful tools to inform decisions and generate work for others. Especially at these levels your job is to create clarity and direction, not to play hero and do it all yourself. Being able to let go of an experiment and turn it into a full project is a critical step in growth for engineers once they go beyond senior.&lt;/p&gt;

</description>
      <category>staff</category>
      <category>experiment</category>
    </item>
    <item>
      <title>Beyond Senior ‚Äì Progressive Influence</title>
      <dc:creator>Brandon Weaver</dc:creator>
      <pubDate>Sat, 03 Sep 2022 23:35:45 +0000</pubDate>
      <link>https://dev.to/baweaver/beyond-senior-progressive-influence-254g</link>
      <guid>https://dev.to/baweaver/beyond-senior-progressive-influence-254g</guid>
      <description>&lt;p&gt;After a number of conversations over the past few years with several other engineers who have moved beyond senior levels into staff and principal positions I've come away with a lot of insights, many of which have seen their way to Twitter or other conversations first, but now it's time to start collecting some of those stories into this new series: Beyond Senior.&lt;/p&gt;

&lt;p&gt;What does it mean to go beyond the senior level in an engineering organization?&lt;/p&gt;

&lt;p&gt;That's the question we're going to be looking at throughout this series.&lt;/p&gt;

&lt;h2&gt;
  
  
  Progressive Influence
&lt;/h2&gt;

&lt;p&gt;You find yourself leading a change that's going to impact a substantial portion of the company, either through your own origination and discovery, or other means.&lt;/p&gt;

&lt;p&gt;Take a moment to think with me as to how you would approach such a change. What steps might be involved? How do you intend to land that change? Write it down, I really want you to give this a moment here.&lt;/p&gt;

&lt;p&gt;For high-level engineers this process is going to give you a lot of pause.&lt;/p&gt;

&lt;p&gt;Company-scale is significant, and the implications of those changes are enough to scare many more seasoned folks. Perhaps ironically the more senior the more deference you pay such changes, and the less senior the more you find yourself saying &quot;well that sounds easy&quot; only to have a very unpleasant time later.&lt;/p&gt;

&lt;p&gt;If it's so hard then how does one approach such problems to make them viable? What questions should you be asking? That's what we'll be looking at today, which is a concept I've taken to calling &quot;Progressive Influence.&quot;&lt;/p&gt;

&lt;h3&gt;
  
  
  Phase One - Qualification and Observation
&lt;/h3&gt;

&lt;p&gt;The first question one should ask when looking at any change of this scale is whether or not the change is even necessary. Are we solving the right problem?&lt;/p&gt;

&lt;p&gt;In this phase we take the old adage of &quot;Measure twice, cut once&quot; very much to heart. Before any change we should measure, and in the context of software engineering that means asking a lot of questions and getting as much detail about the problem as is reasonable before making decisions based on it.&lt;/p&gt;

&lt;p&gt;That reasonable part is where it gets a bit more interesting, but we'll circle back to that soon enough.&lt;/p&gt;

&lt;p&gt;What types of questions should we be asking when qualifying a problem? Well for me a few of my standards might be things like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Why Now?&lt;/strong&gt; - Was this a problem before, is it new, why the urgency to get it done now? Priority is key in planning larger changes, and if we don't know relative importance it hinders our ability to roadmap it.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Who's Impacted?&lt;/strong&gt; - What teams/orgs/etc are in scope? Why? How necessary is this for each of them, or can some defer until later?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Who Knows?&lt;/strong&gt; - It's impossible to be an expert in every domain and tech, find who knows the most about this surface area and start asking questions, especially the other ones in this list, to make sure you understand what you're getting into.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Business Value?&lt;/strong&gt; - How does this help the company? Are we saving money, time, both? Does this actually make things safer, or are we justifying? Selling to executives is &lt;em&gt;impossible&lt;/em&gt; without this.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Resistance?&lt;/strong&gt; - Who might object to this? Why? What would it take to negotiate with them? What can we learn from them?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of this really comes down to who the players are, what their concerns are, how you intend to get people to buy in, and whether or not this is even a problem to be solved. You'd be surprised how often that last one comes up, which is why I put qualification first.&lt;/p&gt;

&lt;h3&gt;
  
  
  Phase Two - Documentation and Understanding
&lt;/h3&gt;

&lt;p&gt;So now we get started coding, right? Not quite. In this second phase you collect your findings and write them down. Frequently these end up in something like a design document, architectural design, or whatever form they take at your company.&lt;/p&gt;

&lt;p&gt;Your job now that you've measured is to provide as much clarity as you can about the situation as it exists today, and capture that in written format somewhere, so that anyone onboarding to the problem can get a good idea of what's going on.&lt;/p&gt;

&lt;p&gt;It's also pivotal for generating consensus on problems, because a significant failure mode is when no one agrees on what a problem is or what terms mean. You don't need to agree on the solutions quite yet, but agreeing on what the problem even is is a substantial value add for these projects and should not be overlooked.&lt;/p&gt;

&lt;p&gt;You're distilling knowledge from around the company into a single source, and making that the root of your consensus. As mentioned above in &quot;Who Knows&quot; you're not going to be the expert in all of this, so when writing any of these it is exceptionally valuable to get known experts to aid in writing these documents to make sure it represents them well.&lt;/p&gt;

&lt;p&gt;If the owner of a domain or an expert in your company would disagree with how you've presented them that can lead to a lot of friction, so it's best to involve them early at this phase to ensure mutual understanding before you find yourself building something that doesn't actually solve their problems and have to rewrite it anyways. This applies especially to the folks who will be known detractors.&lt;/p&gt;

&lt;h3&gt;
  
  
  Phase Three - Agreement and Commitment
&lt;/h3&gt;

&lt;p&gt;Now that things are written down and people acknowledge the problem it's time to start getting agreement from leaders at the necessary level to start work. Tasks at these levels, to be very clear, are impossible to successfully manage by yourself. That means that you fundamentally need others to be willing to participate to move forward.&lt;/p&gt;

&lt;p&gt;This does not mean all teams need to agree to immediately start on this work, or even fully agree, and very likely you won't see that happen either. The goal here is to get alignment with at least a few major teams, and if you can't that's a sign that you need to reevaluate and make sure this is actually a problem that needs solved this moment, either way this is valuable information and should be recorded as such.&lt;/p&gt;

&lt;p&gt;The larger the scope of a project the less likely it is that it will start right after this step, but rather will be planned in advance to accommodate scheduling and engineer time. This is especially true with non-existential problems, hence the &quot;why now&quot; question qualifying the severity of a problem.&lt;/p&gt;

&lt;p&gt;Remember that importance is also very relative. For some teams something may warrant immediate consideration, and for others they can fairly delay for months at a time. Your goal here is to find and qualify teams with immediate concerns and work directly with them, and moving into the next phase together.&lt;/p&gt;

&lt;h3&gt;
  
  
  Phase Four - Protection and Warning
&lt;/h3&gt;

&lt;p&gt;Measurement does not only mean understanding a problem, but the scope and impact of that problem as well. When making this large of a change you want to have tools created that help your engineers measure the problem themselves in their domain to assist in planning their teams work.&lt;/p&gt;

&lt;p&gt;Assuming you've come to a mutual understanding of the problem above you can take this step to formalize when something happens to be a problem and create systems to warn and measure just how much work may be necessary to solve it.&lt;/p&gt;

&lt;p&gt;At a previous company I had worked on a large scale upgrade across 27 teams and 60+ engineers, and if my instructions were limited to &quot;upgrade your part&quot; I would have a lot of lost engineers. Instead I'd created tools to qualify what work was necessary, where, how hard those issues happened to be, and who the experts were that could help them solve particularly difficult ones.&lt;/p&gt;

&lt;p&gt;Using that information I could generate full reports on progress for executives to detail what work was left along with previous information on the relative risk to each team versus their progress. It should be noted to be exceptionally careful here not to &quot;name and shame&quot; as much as tell the full story of why certain teams are active and certain ones are waiting, as failure to do so will set people at odds and cause hostility.&lt;/p&gt;

&lt;p&gt;In this phase especially I want to start honing in on what it means to be &quot;done&quot; and work with involved teams on getting there and setting up a full roadmap on what time is necessary to solve the problem.&lt;/p&gt;

&lt;p&gt;If there are vulnerabilities and SLAs (service level agreements) involved and that roadmap doesn't align with the projected timetable for completion? Well that may mean it's time to escalate to the leaders of teams that may not clear and find out what an appropriate response is.&lt;/p&gt;

&lt;p&gt;Managing risk is crucial here, and being able to measure when that risk qualifies as concern is invaluable.&lt;/p&gt;

&lt;h3&gt;
  
  
  Phase Five - Mandate and Fiat
&lt;/h3&gt;

&lt;p&gt;What I mean by progressive influence is that each step should progress into the next, and that you use as little power as needed to establish consensus to move to the next phase. Your goals by the end of phase four are to have a majority of teams (~80%+) in scope on a time table, not necessarily done.&lt;/p&gt;

&lt;p&gt;Inevitably though there will always be holdouts to every change. It's the nature of engineering, any job really, that there will be blockers that prevent people from participating. It would be unwise to attribute this to malice or negligence, as many times these may be product teams with deadlines. Many times this information should already be clear on who will fall outside the time table in the previous phase, especially when qualifying risk to teams.&lt;/p&gt;

&lt;p&gt;The hard cases are the ones which are high risk, but low time. That's where we go to the last step, and the one I try and actively avoid for as long as possible. That would be the company mandate.&lt;/p&gt;

&lt;p&gt;This is when I get Directors, Heads of Engineering, VPs, or whoever else involved to start clearing roadblocks on team roadmaps to get something done. Again, only as much power as is needed, as each step up you go when doing this is a much larger disruption and much harder to convince.&lt;/p&gt;

&lt;p&gt;The more danger is posed by the problem the sooner I will reach for this lever, but each time you use it and especially the times you use it improperly and too early, the more you erode trust and set teams up against you for any future decisions.&lt;/p&gt;

&lt;p&gt;For the above problem I did not use this option until I had 70% of teams in compliance, but falling out of SLA for this problem involved a massive risk to the business, giving more credence to this choice.&lt;/p&gt;

&lt;p&gt;For some teams this meant getting onto long term support versions of the software to come into compliance, which makes an interesting point on viable alternatives during high-risk issues.&lt;/p&gt;

&lt;p&gt;The more you need this to get work done the more teams will resent you for it and for disrupting their workflows. That's not a badge of honor, that means that somewhere in the above four phases you missed something which should have informed decisions before now, and that's what it means to progressively influence teams to make changes.&lt;/p&gt;

&lt;h3&gt;
  
  
  As Much as Necessary
&lt;/h3&gt;

&lt;p&gt;The big point of all of this is that influence is very much about using only as much power as is necessary to solve the problem at hand. Using too much too soon will fracture team relationships and make it far harder to solve future problems, but using just enough gives teams time to plan, delegate, and manage.&lt;/p&gt;

&lt;p&gt;These are not problems to be solved by one person or team, they are problems that involve an entire company, and because of that you must be very conscious of conflicting incentives and being as fair to every team as you can.&lt;/p&gt;

&lt;p&gt;Just because something is important to you does not mean it is important to every team, and sometimes that means that going to phase five with mandates is completely off the table except in the most necessary of situations.&lt;/p&gt;

&lt;p&gt;In fact most of the first two phases are critical to opening your eyes to the concerns of others, understanding their struggles, and creating empathetic plans that work with them rather than against them. In a future post I intend to cover more on consent of teams, as force should be the last possible option, and I believe strongly in soft influence first and foremost.&lt;/p&gt;

&lt;h2&gt;
  
  
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;This is, of course, a very high level overview for a very complicated subject. It's a reflection on how I tend to approach large scale problems, how much influence is necessary at each phase, and how I work to avoid using force except as a last option.&lt;/p&gt;

&lt;p&gt;Others may have different approaches, and I would be fascinated to hear yours.&lt;/p&gt;

&lt;p&gt;My guiding philosophy for engineering is to understand and work with others, rather than against them, to achieve more and do so in a sustainable manner. As we continue on this series I will be exploring personal stories, observations, conversations, and other bits on my own journey but do remember I am but one voice among so many brilliant ones in our industry.&lt;/p&gt;

&lt;p&gt;I look forward to exploring more with you all.&lt;/p&gt;

</description>
      <category>influence</category>
      <category>staff</category>
      <category>politics</category>
    </item>
    <item>
      <title>Understanding Ruby ‚Äì Recursion</title>
      <dc:creator>Brandon Weaver</dc:creator>
      <pubDate>Fri, 26 Aug 2022 04:40:09 +0000</pubDate>
      <link>https://dev.to/baweaver/understanding-ruby-recursion-235f</link>
      <guid>https://dev.to/baweaver/understanding-ruby-recursion-235f</guid>
      <description>&lt;p&gt;To understand recursion, you must first understand recursion. Cute, but perhaps not the most useful explanation, though there is some truth to that statement that we might get into later.&lt;/p&gt;

&lt;p&gt;What precisely is recursion, and why should we choose to care about it versus other methods in Ruby? Well in a lot of cases you're probably right, but there are a few cases where it'll come in real handy, and we'll be taking a look at both.&lt;/p&gt;

&lt;h2&gt;
  
  
  Fundamental Recursion
&lt;/h2&gt;

&lt;p&gt;To start with, let's define recursion as a method (or function) which calls itself. This definition approaches it from the top down, but if we put it in reverse we find a potentially more useful definition to start with:&lt;/p&gt;

&lt;p&gt;Recursive problems are ones which can be broken down into easier solvable problems, which then in turn can be used to solve more complicated ones.&lt;/p&gt;

&lt;h3&gt;
  
  
  Iterative Factorial
&lt;/h3&gt;

&lt;p&gt;The classic example for this is factorial, which is the product of all numbers before &lt;code&gt;n&lt;/code&gt;, such that &lt;code&gt;5!&lt;/code&gt; (read as &quot;5 factorial&quot;) is equal to &lt;code&gt;5 * 4 * 3 * 2 * 1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In more traditional Ruby you would probably do something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We won't get into &lt;code&gt;reduce&lt;/code&gt; too much here except to mention that most folks would probably write that function like this instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...and I'll post more links to &lt;code&gt;reduce&lt;/code&gt; later in the footer, but I will give you a hint in saying &lt;code&gt;reduce&lt;/code&gt; is &lt;em&gt;very&lt;/em&gt; similar to recursion.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In tutorials I will very much seek to be verbose rather than concise, making a code example concise is left as an exercise to the reader.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Going back to that first example though we have a few distinct steps that we should remember:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We have a base number, &lt;code&gt;1&lt;/code&gt;, which we can use to &quot;accumulate&quot; results onto&lt;/li&gt;
&lt;li&gt;We iterate every number from 1 to &lt;code&gt;n&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;With each of those numbers we multiply the current product by that value, and save it&lt;/li&gt;
&lt;li&gt;Then we return the end product&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  
  
  Recursive Factorial
&lt;/h3&gt;

&lt;p&gt;If we were to take a look at a recursive version of factorial, it would look more like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...which very interestingly has some of the same properties as above. We still have the base number of &lt;code&gt;1&lt;/code&gt; which we accumulate onto as our &quot;base&quot; case, because &lt;code&gt;factorial(1)&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt; and we know the solution to that smaller problem.&lt;/p&gt;

&lt;p&gt;What we don't know, however, is what &lt;code&gt;factorial(5)&lt;/code&gt; might be. Since we don't have that answer we ask another question: What's the factorial of &lt;code&gt;4&lt;/code&gt;? We know that &lt;code&gt;factorial(5)&lt;/code&gt; is equal to &lt;code&gt;5 * factorial(4)&lt;/code&gt;, but to answer that we also need to know the factorial of &lt;code&gt;4&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This repeats until we go all the way down to &lt;code&gt;1&lt;/code&gt; and we go right back up the chain. If we were to take a look at each step we would get something like this happening behind the scenes:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Base case, we know this one!&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# So replace `factorial(1)` with `1` and back up we go.&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;120&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Final return value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  
  
  A Different Point of View
&lt;/h3&gt;

&lt;p&gt;Of course as mentioned before you're much more likely to use &lt;code&gt;reduce&lt;/code&gt; in your actual Ruby code, but this does present a very interesting new way of viewing this problem. Is one necessarily superior to the other? Yes and no, depending on the circumstance of the recursive problem in question, but the value in recognizing these patterns is &lt;em&gt;having that option because you know about it&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;There are numerous different ways to approach any problem, and sometimes a different point of view provides a new and novel insight that allows you to solve otherwise difficult and blocking problems.&lt;/p&gt;

&lt;p&gt;That being said, let's continue into building our intuition on the ways recursion might be used to solve other problems.&lt;/p&gt;

&lt;h2&gt;
  
  
  An Alternative to Iteration
&lt;/h2&gt;

&lt;p&gt;In Ruby when you want to go through a list of items you're going to use &lt;code&gt;each&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# STDOUT: 2&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# STDOUT: 4&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# STDOUT: 6&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [1, 2, 3]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We could also iterate a list recursively, which brings us an interesting pattern of &lt;code&gt;head&lt;/code&gt; and &lt;code&gt;tail&lt;/code&gt; (or &lt;code&gt;car&lt;/code&gt; and &lt;code&gt;cdr&lt;/code&gt; if you're LISP-inclined):&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty?&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# To emulate `each` which returns the original list&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# STDOUT: 2&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# STDOUT: 4&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# STDOUT: 6&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [1, 2, 3]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Looking at our above recursive example we can see some familiar elements in this method:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A base case (&lt;code&gt;return if list.empty?&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Finding a question we can answer (&lt;code&gt;function.call(head)&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Continuing with the rest of the items (&lt;code&gt;each(tail, &amp;amp;function)&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What's different is the order shifted and our base case is now no longer the question we know an answer to. With &lt;code&gt;each&lt;/code&gt; in Ruby we use a block function on every element of a list, and with this implementation we pull the first item off of the list, run the &lt;code&gt;function&lt;/code&gt; on it, and continue to dive into the rest of the list.&lt;/p&gt;

&lt;p&gt;To take a look at what it's doing behind the scenes, let's go to this example:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# head: 1, tail: [2, 3], STDOUT: 2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# head: 2, tail: [3], STDOUT: 4&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;# head: 3, tail: [], STDOUT: 6&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# head: nil, tail: [], hits `return`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each line is a subsequent call to &lt;code&gt;each&lt;/code&gt; with the &lt;code&gt;tail&lt;/code&gt;, and you can trace those values as they go through. Sometimes I even cheat and make my methods look like this while testing, which you might enjoy experimenting with:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty?&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;head: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;tail: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Debugging at its' finest&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# To emulate `each` which returns the original list&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# STDOUT: {:head=&amp;gt;1, :tail=&amp;gt;[2, 3]}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# STDOUT: 2&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# STDOUT: {:head=&amp;gt;2, :tail=&amp;gt;[3]}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# STDOUT: 4&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# STDOUT: {:head=&amp;gt;3, :tail=&amp;gt;[]}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# STDOUT: 6&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [1, 2, 3]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Personally I really like using keywords here because simply logging out the &lt;code&gt;head&lt;/code&gt; and &lt;code&gt;tail&lt;/code&gt; leaves me to remember what exactly I was outputting and where, and I do not have a very exceptional memory. Oh, side lesson, Ruby 3.1 lets you do this instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Same thing with &quot;punning&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can read on that more in &lt;a href=&quot;https://dev.to/baweaver/ruby-3-1-shorthand-hash-syntax-first-impressions-19op&quot;&gt;Ruby 3.1 - Shorthand Hash Syntax - First Impressions&lt;/a&gt;, but know that I really love that feature for things like this. Anyways, back to the article.&lt;/p&gt;

&lt;p&gt;For &lt;code&gt;each&lt;/code&gt; this isn't particularly exciting, but we could do this for pretty much &lt;em&gt;any&lt;/em&gt; Enumerable method.&lt;/p&gt;

&lt;h3&gt;
  
  
  Mapping
&lt;/h3&gt;

&lt;p&gt;For a more interesting example we can take a look at &lt;code&gt;Enumerable#map&lt;/code&gt; which transforms every element of a list using a block function:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [2, 4, 6]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before I dive into an implementation how about you give it a shot? Can you come up with an implementation for the &lt;code&gt;map&lt;/code&gt; method based on the above &lt;code&gt;each&lt;/code&gt; method? Take a minute, this article will still be here, but you might find some very interesting things out in experimenting.&lt;/p&gt;

&lt;p&gt;If we were to make a &lt;code&gt;map&lt;/code&gt; method in a similar way to the above &lt;code&gt;each&lt;/code&gt; it would look very similar indeed:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty?&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [2, 4, 6]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case the question we know how to answer is what happens to each element that is &quot;mapped&quot; to another element, or in the case of this code &lt;code&gt;function.call(head)&lt;/code&gt;. We can answer that one immediately, but then we have to continue through the rest of the list to figure out how those values map over.&lt;/p&gt;

&lt;p&gt;Notice the splat (&lt;code&gt;*&lt;/code&gt;) though on the next call to &lt;code&gt;map&lt;/code&gt;. That's because each step of this recursion will return an &lt;code&gt;Array&lt;/code&gt;, and at the end an empty one. Nifty, but seeing is believing, shall we go back to our tricks?:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty?&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;new_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:)&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;current_list: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# STDOUT: {:head=&amp;gt;1, :tail=&amp;gt;[2, 3], :new_value=&amp;gt;2}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# STDOUT: {:head=&amp;gt;2, :tail=&amp;gt;[3], :new_value=&amp;gt;4}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# STDOUT: {:head=&amp;gt;3, :tail=&amp;gt;[], :new_value=&amp;gt;6}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# STDOUT: {:current_list=&amp;gt;[6]} # Bottom of recursion, start collecting values!&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# STDOUT: {:current_list=&amp;gt;[4, 6]}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# STDOUT: {:current_list=&amp;gt;[2, 4, 6]} # Back at the top, return it&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [2, 4, 6]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I cannot recommend doing this highly enough while building intuition on how data flows through your methods as it really helps ground you to what's happening inside of it. I'd also really really recommend starting with simple examples rather than running this on something huge from the get-go, it's much easier to debug.&lt;/p&gt;

&lt;p&gt;You might notice I also used &lt;code&gt;tap&lt;/code&gt; on the end of the returned list. &lt;code&gt;tap&lt;/code&gt; lets you access the value, but returns it as-is, which is great for debugging. You might also notice &lt;code&gt;_&lt;/code&gt;1 which is a &lt;a href=&quot;https://medium.com/@baweaver/ruby-2-7-numbered-parameters-3f5c06a55fe4&quot;&gt;numbered parameter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now if you want something to experiment with I would try and reimplement &lt;code&gt;select&lt;/code&gt; and &lt;code&gt;reject&lt;/code&gt; and see if you can figure out how to use the &lt;code&gt;function&lt;/code&gt; in these cases. Bonus points if you figure out how to implement &lt;code&gt;filter_map&lt;/code&gt; because there are some &lt;em&gt;real interesting&lt;/em&gt; implications there of combining these functions.&lt;/p&gt;

&lt;p&gt;That said, we'll keep this one higher level, and look at something a bit different.&lt;/p&gt;

&lt;h3&gt;
  
  
  Reversing
&lt;/h3&gt;

&lt;p&gt;This one doesn't use a function at all, it only reverses a list:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reverse&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [3, 2, 1]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you know how this goes, and I'm one of &lt;em&gt;those&lt;/em&gt; writers, so before you keep reading give this a try yourself and see what you come up with. Most of the fun really is in trying things yourself and getting into the code, so take those chances to explore.&lt;/p&gt;

&lt;p&gt;Back to it, if we were to implement a &lt;code&gt;reverse&lt;/code&gt; function recursively it might look a bit like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty?&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [3, 2, 1]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are no particular rules around what you need to return from a recursion, or what order it needs to be in. Really though, if order is your game you might enjoy reimplementing &lt;code&gt;sort&lt;/code&gt; while you're at it. Point being the idea of &lt;code&gt;reverse&lt;/code&gt; is that we continuously put the head before the tail until we run out of items.&lt;/p&gt;

&lt;p&gt;If we were to tap into this we might see something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty?&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;current_list: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# STDOUT: {:head=&amp;gt;1, :tail=&amp;gt;[2, 3]}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# STDOUT: {:head=&amp;gt;2, :tail=&amp;gt;[3]}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# STDOUT: {:head=&amp;gt;3, :tail=&amp;gt;[]}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# STDOUT: {:current_list=&amp;gt;[3]}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# STDOUT: {:current_list=&amp;gt;[3, 2]}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# STDOUT: {:current_list=&amp;gt;[3, 2, 1]}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [3, 2, 1]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You might notice that recursive methods have a very distinct &quot;&amp;lt;&quot; shape. That's because we keep digging down until we run out of questions and hit our &quot;base&quot; case, then come back up with what we found out. If you go too deep though you'll quickly find out what &lt;a href=&quot;https://ruby-doc.org/core-3.1.2/SystemStackError.html&quot;&gt;SystemStackError&lt;/a&gt; is, which is very common when you get a base case wrong and you recurse out into the sunset.&lt;/p&gt;

&lt;p&gt;But seriously though? Try out &lt;code&gt;sort&lt;/code&gt;, bonus points if you can work &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; (rocket ship operator) into it too.&lt;/p&gt;

&lt;h2&gt;
  
  
  Going Deep
&lt;/h2&gt;

&lt;p&gt;Now that's all well and good, but when would we hit something which was legitimately hard to do with iteration? Whenever we're not quite sure the shape of something, but we know how to ask questions to find what's next.&lt;/p&gt;

&lt;p&gt;Consider with me this JSON:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;json&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Using https://json-generator.com/&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;~&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RAW&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
  [{
    &quot;name&quot;: &quot;Mercedes Chandler&quot;,
    &quot;gender&quot;: &quot;female&quot;,
    &quot;age&quot;: 33,
    &quot;eyeColor&quot;: &quot;blue&quot;,
    &quot;tags&quot;: [&quot;in&quot;, &quot;exercitation&quot;, &quot;ad&quot;],
    &quot;friends&quot;: [
      { &quot;id&quot;: 0, &quot;name&quot;: &quot;Latasha Kent&quot; },
      { &quot;id&quot;: 1, &quot;name&quot;: &quot;Douglas Craig&quot; },
      { &quot;id&quot;: 2, &quot;name&quot;: &quot;Parsons Davenport&quot; }
    ]
  }, {
    &quot;name&quot;: &quot;Conrad Maxwell&quot;,
    &quot;gender&quot;: &quot;male&quot;,
    &quot;age&quot;: 30,
    &quot;eyeColor&quot;: &quot;green&quot;,
    &quot;tags&quot;: [&quot;proident&quot;, &quot;non&quot;, &quot;proident&quot;],
    &quot;friends&quot;: [
      { &quot;id&quot;: 0, &quot;name&quot;: &quot;Dena Vasquez&quot; },
      { &quot;id&quot;: 1, &quot;name&quot;: &quot;Sherrie Marsh&quot; },
      { &quot;id&quot;: 2, &quot;name&quot;: &quot;Christina Petty&quot; }
    ]
  }, {
    &quot;name&quot;: &quot;Ellen Cote&quot;,
    &quot;gender&quot;: &quot;female&quot;,
    &quot;age&quot;: 27,
    &quot;eyeColor&quot;: &quot;brown&quot;,
    &quot;tags&quot;: [&quot;laboris&quot;, &quot;ullamco&quot;, &quot;nulla&quot;],
    &quot;friends&quot;: [
      { &quot;id&quot;: 0, &quot;name&quot;: &quot;Brady Wolf&quot; },
      { &quot;id&quot;: 1, &quot;name&quot;: &quot;Tisha Duffy&quot; },
      { &quot;id&quot;: 2, &quot;name&quot;: &quot;Gibbs Payne&quot; }
    ]
  }]
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RAW&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's easy enough to iterate each JSON object, or Ruby hash, inside of that array sure. What if I told you I wanted to get all the values?&lt;/p&gt;

&lt;p&gt;Not just first level, no no, &lt;em&gt;all&lt;/em&gt; the values, including inside of the arrays for tags and sub-objects in friends too! All of the sudden that's a really hard problem to do iteratively, but recursively? This is where it really shines.&lt;/p&gt;

&lt;p&gt;Now if you really want to know something trippy this entire thing can be done in five lines of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;all_values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;flat_map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all_values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is_a?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;flat_map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all_values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is_a?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;all_values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#  =&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# [&quot;Mercedes Chandler&quot;,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#  &quot;female&quot;,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#  33,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#  &quot;blue&quot;,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#  &quot;in&quot;,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#  &quot;exercitation&quot;,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#  &quot;ad&quot;,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#  0,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#  &quot;Latasha Kent&quot;,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#  1,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#  &quot;Douglas Craig&quot;,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#  2,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#  &quot;Parsons Davenport&quot;,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;More if you're behaving and using a &lt;code&gt;case&lt;/code&gt; statement, sure, but it makes a fun point no?&lt;/p&gt;

&lt;p&gt;You might notice that this &lt;em&gt;combines&lt;/em&gt; iteration for what it's best at and recursion for what it's best at. Nothing says they can't be used together, and in fact it's frequently much easier to approach problems like this. Take the best from each domain, whether functional, object oriented, imperative, or whatever.&lt;/p&gt;

&lt;p&gt;You'll also notice we're using &lt;code&gt;flat_map&lt;/code&gt; instead of &lt;code&gt;map&lt;/code&gt; here. For fun I suggest you change that to &lt;code&gt;map&lt;/code&gt; and see what you find out about nested data structures.&lt;/p&gt;

&lt;p&gt;Now this is really powerful, but we can take it further. So much further.&lt;/p&gt;

&lt;h3&gt;
  
  
  The Select Cases
&lt;/h3&gt;

&lt;p&gt;What if we wanted &lt;code&gt;select&lt;/code&gt;, except &lt;em&gt;any&lt;/em&gt; value that matched at &lt;em&gt;any&lt;/em&gt; depth? That type of problem is fiendishly hard and requires a firm grasp on the structure of the data and all of its facets, which makes this a...&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deep_select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;flat_map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deep_select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Array&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;flat_map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deep_select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;deep_select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;match?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/^L/i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [&quot;Latasha Kent&quot;, &quot;laboris&quot;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;deep_select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is_a?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [33, 0, 1, 2, 30, 0, 1, 2, 27, 0, 1, 2]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...strangely easy problem when solving recursively.&lt;/p&gt;

&lt;p&gt;The base case is at the bottom. We don't know how to answer whether or not an array or hash matches, but we &lt;em&gt;can&lt;/em&gt; answer if a value does so we break the problem down into values. At the end we use the function to decide whether to return the value, or an empty array which will be squashed in the &lt;code&gt;flat_map&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Why an empty array? Why &lt;code&gt;1&lt;/code&gt; with multiplication? &lt;code&gt;0&lt;/code&gt; with addition? If you noticed that pattern then extra bonus points to you, you're about to go on a &lt;a href=&quot;https://dev.to/baweaver/introducing-patterns-in-parallelism-for-ruby-2f4a&quot;&gt;wild trip into parallelism patterns&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some other interesting directions you can take this are &lt;a href=&quot;https://medium.com/@baweaver/on-dealing-with-deep-hashes-in-ruby-xf-part-one-scopes-f63447d59ee1&quot;&gt;looking into lenses&lt;/a&gt;, reading into &lt;a href=&quot;https://github.com/winebarrel/ruby-jq&quot;&gt;query languages like jq&lt;/a&gt;, or going into &lt;a href=&quot;https://medium.com/@baweaver/ruby-2-7-pattern-matching-first-impressions-cdb93c6246e6&quot;&gt;pattern matching for Ruby&lt;/a&gt;. The beauty of all of this is how many directions you can go from here.&lt;/p&gt;

&lt;h2&gt;
  
  
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;Now this is a very brief and high level introduction to recursion, and some concepts of functional programming. There's a lot more out there to explore, and if you want practice see how many Enumerable methods you can write recursively, and how many more of them you can write to work on arbitrarily deep data structures.&lt;/p&gt;

&lt;p&gt;As with all parts of the language it has its uses, but most of the time you really probably want to use Enumerable methods instead. Knowing the difference is when things get interesting, and having that extra tool in your box can make a world of difference.&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>recursion</category>
      <category>functional</category>
    </item>
    <item>
      <title>On Autism - Grounding and Normalcy</title>
      <dc:creator>Brandon Weaver</dc:creator>
      <pubDate>Mon, 20 Jun 2022 07:40:48 +0000</pubDate>
      <link>https://dev.to/baweaver/on-autism-grounding-and-normalcy-3kcn</link>
      <guid>https://dev.to/baweaver/on-autism-grounding-and-normalcy-3kcn</guid>
      <description>&lt;p&gt;Most of my writing on autism tends to pertain to software engineering in some regard, and while I cannot separate myself from it in my professional career there are writings which focus more directly on my experience as an autistic man rather than as a software engineer.&lt;/p&gt;

&lt;p&gt;Articles in this particular series, versus &quot;Tales of the Autistic Developer&quot;, reflect more on my personal life experiences and how my mind works.&lt;/p&gt;

&lt;p&gt;To many I pass very well as neurotypical, a mask I've spent years cultivating, but beneath that mask there's quite a bit going on. Some triumphs, some struggles, some just living life honestly but stories nonetheless I occasionally tell and write on and this is one such story.&lt;/p&gt;

&lt;h2&gt;
  
  
  Creatures of Habit
&lt;/h2&gt;

&lt;p&gt;It has been said that autistic folks are creatures of extreme habit, and in my case I have found this to be extraordinarily true. It's perhaps one of my greatest challenges in interacting with neurotypical society, and frequently the tell which fellow autistic or neurodivergent folks can tell I'm one of them. Perhaps a few more astute neurotypicals can catch on, but not often.&lt;/p&gt;

&lt;p&gt;This presents me with a very difficult problem: The world is rarely so kind as to be perfectly orderly, and life rarely follows a strict schedule.&lt;/p&gt;

&lt;p&gt;Given that, how do I go through life? What happens when I meet with disruption?&lt;/p&gt;

&lt;h2&gt;
  
  
  Panic and Freezing
&lt;/h2&gt;

&lt;p&gt;Let's start with what happens with enough disruption. When sufficiently knocked out of my normal schedule it's not a matter of simply being uncomfortable, it's a matter of full-blown anxiety bordering on panic. If pushed far enough into this state I will completely stop, freeze, and start shutting down. I will do whatever it takes at that point to get out of the situation and retreat, or my body will start making me do so.&lt;/p&gt;

&lt;p&gt;This can manifest frequently in migraine attacks, complete inability to stay still, severe nausea, severe tiredness, insomnia, and in the worst case passing out.&lt;/p&gt;

&lt;p&gt;For years I would focus on treating the symptoms rather than treating the underlying issue of panic caused by sufficient divergence.&lt;/p&gt;

&lt;p&gt;If that sounds sufficiently disabling and impossible to live a normal life with congratulations, you understand in a small part what my childhood was like before I understood myself more.&lt;/p&gt;

&lt;p&gt;But I did find a way.&lt;/p&gt;

&lt;h2&gt;
  
  
  Grounding
&lt;/h2&gt;

&lt;p&gt;If I cannot maintain a sense of normal, an equilibrium if you will, I descend into states of anxiety and panic. Given that treating symptoms only constitutes a patchwork solution applied after the point of no return, how do I go about solving that?&lt;/p&gt;

&lt;p&gt;Truthfully I don't. That's part of my secret, at any given time I'm under exceptional stress and anxiety, so I do what I can to mitigate that and give myself a sense of normal even in times where there's no such thing.&lt;/p&gt;

&lt;p&gt;I call this experience, as many like me do, grounding.&lt;/p&gt;

&lt;p&gt;We seek familiar experiences, whether that be food or drink, scent or feel, or any other number of things. In a state of chaos we find something to tether us back to the core of our being so that we may live in some part a normal life.&lt;/p&gt;

&lt;p&gt;If you have known me for any reasonable amount of time the grounding measures that I'm about to tell you will come as no surprise, and will probably explain quite a lot about my compulsions.&lt;/p&gt;

&lt;h3&gt;
  
  
  Schedule
&lt;/h3&gt;

&lt;p&gt;Whether or not it's booked down to the minute, I do have a schedule I follow almost every day to a T: Wake up, shower, tea, work, lunch, work, coffee, go on a walk, supper, tv, writing / grounding, sleep.&lt;/p&gt;

&lt;p&gt;Very rarely will I deviate from that, even if I'm in a completely different situation. On off days I tend to substitute in guitar, art, writing, resting, or wandering aimlessly for a bit.&lt;/p&gt;

&lt;p&gt;If someone knocks me off of it I'll start to get gradually more uncomfortable and will very likely end up doing one of the following grounding methods very quickly.&lt;/p&gt;

&lt;h3&gt;
  
  
  Coffee
&lt;/h3&gt;

&lt;p&gt;I will warn those of you who truly enjoy good coffee and seek it in earnest that you might want to skip this section. Familiarity of experience is far more important to me than quality of, though I do enjoy quality on occasion and finding new familiars.&lt;/p&gt;

&lt;p&gt;Any town I go to I can reliably predict there will be a Starbucks somewhere around, and almost every single one of those stores will have a very similar feel between them. I know that I can wander into one, get a familiar drink, find a corner, and disappear for a moment.&lt;/p&gt;

&lt;p&gt;If you see me in one very likely I will have headphones on and one of a sketchbook, a reading book, or a computer on me. During 2020 when I was mostly isolated the only real &quot;going out&quot; we did was to the drive through of a Starbucks to get a coffee and go back home.&lt;/p&gt;

&lt;p&gt;One thing to note though is I'm sure if I were more towards the east coast it'd be Dunkin, or around SF it might have been Peets, but I ended up with my habit and so the story goes.&lt;/p&gt;

&lt;p&gt;Heck, I even found one in Australia, and that was certainly well outside my normal.&lt;/p&gt;

&lt;h3&gt;
  
  
  Games
&lt;/h3&gt;

&lt;p&gt;If I've hit the end of my ability to cope, you'll very likely see me revert back to games I used to play when I was younger.&lt;/p&gt;

&lt;p&gt;Minecraft is the most frequent item on that list, though before I made a conscious choice to fully eliminate MMOs from my life Maplestory would have been more likely. It allows me to stop thinking, to escape, and to collect myself before returning to the real world.&lt;/p&gt;

&lt;p&gt;It's also the reason why I make such a strong point of not acquiring any new addictive games to my repertoire. People have tried for years to get me to play Chess, and you can imagine why that would be a horrible idea. Sure, I'd likely be good at it, but I'd also rebound into competitiveness and go far too deep into escape for it to be safe for me.&lt;/p&gt;

&lt;h3&gt;
  
  
  Guitar
&lt;/h3&gt;

&lt;p&gt;I play classical guitar, you might even notice I have slightly longer nails on my right hand. Not exceptionally well, mind, and any teacher of repute would probably force me to relearn from the basics and probably be correct in recommending me to do so. That said, it's something I grew up enjoying as a tactile feeling.&lt;/p&gt;

&lt;p&gt;You could likely divine my mood by which pieces I was playing more frequently. Excessively minor or exceptionally fast pieces were especially strong tells for me.&lt;/p&gt;

&lt;p&gt;Personally I enjoy Bach, Barrios, Lauro, Mertz, and Piazzola. Particularly I enjoy &lt;a href=&quot;https://www.youtube.com/watch?v=pqn4T3-Gt68&quot;&gt;Mertz's Three Nocturnes Op. 4&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/watch?v=NYV0Wvqrhq8&quot;&gt;Lauro's El Marabino&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/watch?v=k96nsGSU-gg&quot;&gt;Piazzolla's Invierno Porte√±o&lt;/a&gt;, and &lt;a href=&quot;https://www.youtube.com/watch?v=g-gY2aOImSs&quot;&gt;CPE Bach's Solfeggietto&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  
  
  Scents
&lt;/h3&gt;

&lt;p&gt;This perhaps is the most interesting of my grounding habits, and that would be scent. Particularly perfumes and colognes. It's something I can wear throughout the day to recall memories and perhaps make a few new ones.&lt;/p&gt;

&lt;p&gt;Given that as an autistic man I also have an exceptionally strong sense of smell this grounds me on multiple levels. Firstly to memory and feeling, and secondly from the world around me in some small part to make it a bit less loud out there.&lt;/p&gt;

&lt;p&gt;Some of the more common ones I tended to wear:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;https://www.parfumo.net/Perfumes/Tom_Ford/Tuscan_Leather_Eau_de_Parfum&quot;&gt;Tom Ford's Tuscan Leather&lt;/a&gt; to jazz bars&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://www.parfumo.net/Perfumes/Yves_Saint_Laurent/L_Homme_Eau_de_Toilette&quot;&gt;YSL's L'Homme&lt;/a&gt; when I was coming into my own at work with Square&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://www.parfumo.net/Perfumes/Chanel/Allure_Homme_Sport_Eau_Extrme&quot;&gt;Chanel's Allure Homme Sport Eau Extreme&lt;/a&gt; when I started dating my now wife&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://www.parfumo.net/Perfumes/Xerjoff/Casamorati_1888_Mefisto&quot;&gt;Xerjoff's Mefisto&lt;/a&gt; when we drove across the country together&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://www.parfumo.net/Perfumes/Parfums_de_Marly/Royal_Essence_Herod&quot;&gt;PDM's Herod&lt;/a&gt; when I got married&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://www.parfumo.net/Perfumes/Amouage/Reflection_Man&quot;&gt;Amouage's Reflection Man&lt;/a&gt; when I started presenting at conferences&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;...among several others. &lt;/p&gt;

&lt;p&gt;Now granted this also means that if I have a bad memory associated with something the opposite happens. It's part of the reason I would &lt;em&gt;never&lt;/em&gt; wear something I really liked on early dates, and the reason I mostly avoid wearing &lt;a href=&quot;https://www.parfumo.net/Perfumes/Yves_Saint_Laurent/L_Homme_Ultime&quot;&gt;YSL L'Homme Ultime&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Do I spend too much money on this? Probably, though for me it's a small cost relative to the calm it can bring, and by this point in my career I can certainly afford it without compromising my finances.&lt;/p&gt;

&lt;p&gt;Mostly I wear them for me, and tend heavily towards more subtle scents rather than trying to get &quot;noticed&quot;, as they're more of a little secret that whispers to me throughout the day rather than a megaphone announcing my presence.&lt;/p&gt;

&lt;p&gt;It was also very intentional that this section is longer than the others, as it's one of the strongest grounding methods I have. It's also, tellingly, a subject I could spend several hours chatting on if someone were to get me started.&lt;/p&gt;

&lt;h2&gt;
  
  
  Back to Earth
&lt;/h2&gt;

&lt;p&gt;Most of my life, in some regard, is escapism and grounding. It's seeking familiarity over novelty to assuage my anxiety.&lt;/p&gt;

&lt;p&gt;These are just a few of the ways I try and return myself back to earth to interact with society. Without them? Well I would rather not return to that state of affairs.&lt;/p&gt;

&lt;h3&gt;
  
  
  To Be &quot;Normal&quot;
&lt;/h3&gt;

&lt;p&gt;To many people I appear very normal, and they'd never think twice when interacting with me. That mask comes at a great personal cost, and there are days I wish the world were more accepting of people like me and how we exist.&lt;/p&gt;

&lt;p&gt;Where I grew up that hostility was a daily experience. Any deviance from &quot;normal&quot; was met with repeated efforts to bend me back in line, and has left me with quite a bit of resentment for such people and systems which inflict that on others.&lt;/p&gt;

&lt;p&gt;It is, therefor, not remotely surprising that I am politically liberal and am so vocally in support of marginalized groups that many where I grew up would very much like to stop existing altogether. It's also not surprising that I moved away to escape that.&lt;/p&gt;

&lt;p&gt;The compulsion for normalcy has driven such people to quite literally torture autistic people with &lt;a href=&quot;https://www.nbcnews.com/health/health-care/decades-long-fight-over-electric-shock-treatment-led-fda-ban-n1265546&quot;&gt;shock therapy&lt;/a&gt;, ABA to compel &quot;socially acceptable behavior&quot; &lt;a href=&quot;https://autisticscienceperson.com/why-aba-therapy-is-harmful-to-autistic-people/&quot;&gt;through inflicting PTSD&lt;/a&gt;, and more.&lt;/p&gt;

&lt;p&gt;I'm not normal, nor will I ever be, but despite that I have every right to exist and to enjoy life in my own way as do others who are different, and it's a very scary time to be different in America.&lt;/p&gt;

&lt;h2&gt;
  
  
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;Dark? Potentially, yes, but these are the things we live with every day. I did not decide to be autistic, I did not magically or medically contract it, but I do have to live with it and how society treats people like me.&lt;/p&gt;

&lt;p&gt;I write as I do to raise awareness of very real problems, how I personally approach them, and to bring light to the harms done to those who are different.&lt;/p&gt;

&lt;p&gt;Our existence is not political, and neither is talking about it.&lt;/p&gt;

</description>
      <category>mentalhealth</category>
      <category>autism</category>
    </item>
    <item>
      <title>ASTs in Ruby - Node Pattern and Introducing RuboCop</title>
      <dc:creator>Brandon Weaver</dc:creator>
      <pubDate>Wed, 15 Jun 2022 07:35:57 +0000</pubDate>
      <link>https://dev.to/baweaver/asts-in-ruby-node-pattern-and-introducing-rubocop-1j93</link>
      <guid>https://dev.to/baweaver/asts-in-ruby-node-pattern-and-introducing-rubocop-1j93</guid>
      <description>&lt;p&gt;In the last article I was not being quite honest when I said that regex would not work when trying to manipulate Ruby files. Strictly speaking, no, regex is not a good idea for working with tree-like structures and tokens but there is something there we need to take a look at.&lt;/p&gt;

&lt;p&gt;Regexp stands for Regular Expressions, or in the way I tend to define it a set of expressions that can describe the shape of text in such a way you can match against anything with a similar shape. We could be pedantic and go into &lt;a href=&quot;https://en.wikipedia.org/wiki/Regular_language&quot;&gt;regular languages&lt;/a&gt;, but let's instead focus on this part:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;describe the shape of text&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Who's to say we couldn't have an expression language of some sort that would match against other shapes, like say... ASTs? That, my friends, is where NodePattern comes in and is the start of what we'll be covering in this article.&lt;/p&gt;

&lt;h2&gt;
  
  
  Tools of the Trade
&lt;/h2&gt;

&lt;p&gt;To start out with though, you'll want a few methods and helpers to work with here:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rubocop&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Turn a string into a RuboCop AST (based on WhiteQuark's AST)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ast_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;RuboCop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ProcessedSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RUBY_VERSION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ast&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Useful for debugging and seeing how the nodes deconstruct&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deep_deconstruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;respond_to?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:deconstruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;deconstruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deep_deconstruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Create a NodePattern from a string&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;node_pattern_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;RuboCop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NodePattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With these three we'll have most of what we need to get started working with NodePatterns. Eventually I may wrap these in a gem later, and if I do I'll update this article to reflect that.&lt;/p&gt;

&lt;p&gt;Naturally the best source of information is &lt;a href=&quot;https://docs.rubocop.org/rubocop-ast/node_pattern.html&quot;&gt;the official documentation for NodePattern&lt;/a&gt;, and you'll find it to be quite comprehensive.&lt;/p&gt;

&lt;p&gt;Oh, and that regex bit? Remember how we have &lt;a href=&quot;https://rubular.com/&quot;&gt;Rubular&lt;/a&gt; for regex? We have the &lt;a href=&quot;https://nodepattern.herokuapp.com/&quot;&gt;NodePattern Debugger&lt;/a&gt; for ASTs which you will find incredibly helpful, in fact you might open it now and try out some of these examples to make sure I'm not pulling a &lt;a href=&quot;https://github.com/jonatas/fast&quot;&gt;Fast&lt;/a&gt; one. (No, I'm not apologizing for that one.)&lt;/p&gt;

&lt;h2&gt;
  
  
  Quickstart on NodePattern
&lt;/h2&gt;

&lt;p&gt;Before we get too deep, let's start with a basic example of NodePattern and what that might look like with this code example:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a = 1 + 1&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ast_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# returns&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:lvasgn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After reading the previous article on pattern matching this is going to look very familiar, but an exact match in NodePattern might look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;node_pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node_pattern_from&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;~&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PATTERN&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
  (lvasgn :a
    (send (int 1) :+ (int 1)))
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PATTERN&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;node_pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ast_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a = 1 + 1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we were to use pattern matching for this it might instead look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ast_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a = 1 + 1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:lvasgn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We could certainly say the NodePattern is more succinct, and you might notice that you can omit the &lt;code&gt;Symbol&lt;/code&gt;s for keywords in Ruby versus things like values, variables, and method names (&lt;code&gt;+&lt;/code&gt; is a method, fun fact.)&lt;/p&gt;

&lt;p&gt;But we said regexen, which means that's the start of what NodePattern can do. Let's say we wanted to make sure that both of those values being added were the same, like with pinning in pattern matching:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;node_pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node_pattern_from&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;~&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PATTERN&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
  (lvasgn :a
    (send _value :+ _value))
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PATTERN&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;node_pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ast_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a = 1 + 1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So unlike pinning similar underscore variables have to be the same, without requiring &lt;code&gt;^&lt;/code&gt; like in pattern matching:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ast_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a = 1 + 1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:lvasgn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ah, and before we get too much into it? You can use both of them somewhat interchangeably though NodePattern does have a slight edge in power but readability tends to be a preference thing. ASTs are &lt;em&gt;hard&lt;/em&gt; in general to work with, especially for larger tasks, so I'm not going to say easy.&lt;/p&gt;

&lt;h3&gt;
  
  
  Back to Shorthand
&lt;/h3&gt;

&lt;p&gt;Let's take a look back at the code examples from the previous article:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;even?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# What we expect&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# An argument&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;even?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Many methods&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Perhaps both&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;even?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Why though?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...or, more specifically, let's focus back in on the first one for now:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;[1, 2, 3].select { |v| v.even? }&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ast_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;deep_deconstruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [:block,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#      [:send, [:array, [:int, 1], [:int, 2], [:int, 3]], :select],&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#      [[:arg, :v]], [:send, [:lvar, :v], :even?]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll see in a moment, much like with the pattern matching variants, why the &lt;code&gt;Array&lt;/code&gt; representation can make this much easier to reason about. In fact, let's recall how we solved this with pattern matching before:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;shorthandable?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ast&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:lvar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we were to convert that to NodePattern it might look like this instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;SHORTHAND_PATTERN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node_pattern_from&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;~&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PATTERN&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
  (block $_receiver
    (args (arg _a)) (send (lvar _a) $_method_name))
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PATTERN&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;shorthandable_np?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SHORTHAND_PATTERN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;shorthandable_np?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ast_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[1, 2, 3].select { |v| v.even? }&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;SHORTHAND_PATTERN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ast_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[1, 2, 3].select { |v| v.even? }&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# returns&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:even?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One insidious little trick you might notice is that &lt;code&gt;args&lt;/code&gt; is conspicuously absent from the deconstructed &lt;code&gt;Array&lt;/code&gt; representation, so you do need to be careful with some edges on interpretations.&lt;/p&gt;

&lt;p&gt;The other interesting thing here is the &lt;code&gt;$&lt;/code&gt;, which is NodePattern for &quot;capture&quot;. While you could certainly capture with &lt;code&gt;$_&lt;/code&gt; I prefer to name those captures so I know what they were. Out the other side of &lt;code&gt;match&lt;/code&gt; you'll notice that both of those AST nodes were returned as well, which were the receiver and the method name.&lt;/p&gt;

&lt;h3&gt;
  
  
  That's More Code Though?
&lt;/h3&gt;

&lt;p&gt;You are absolutely correct there my clever clever reader, that it is. NodePattern on its own isn't quite as powerful as it might be when it's used in conjunction with RuboCop. Granted sometimes for testing I'll still use something very similar to the above, but the true power starts showing up here in the next section.&lt;/p&gt;

&lt;h4&gt;
  
  
  What About the Rest of NodePattern?
&lt;/h4&gt;

&lt;p&gt;The documentation will go into much more comprehensive detail, but we've barely looked into some of the power of NodePattern and what's possible with it. Given that, we still took a look at some of the most commonly used parts of it, which serves as a decent introduction for the moment.&lt;/p&gt;

&lt;h2&gt;
  
  
  Introducing RuboCop
&lt;/h2&gt;

&lt;p&gt;So where are we going with this? We've shown how to match against and rewrite code, sure, but how do we actually apply that? That's where &lt;a href=&quot;https://rubocop.org/&quot;&gt;RuboCop&lt;/a&gt; comes in. The unfortunate part is that so many only think of RuboCop as a tool to nag you on stylistic items, but it's far more than that.&lt;/p&gt;

&lt;p&gt;RuboCop is also a set of tools for identifying and potentially even replacing code that matches a certain pattern using custom cops. There's even an entire section of the docs which covers this in &lt;a href=&quot;https://docs.rubocop.org/rubocop/1.29/development.html&quot;&gt;Development&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;You'll notice much of what we've covered so far is going to get you pretty far down that page, but let's take a detour into our shorthand syntax again and focus on that.&lt;/p&gt;

&lt;h3&gt;
  
  
  Custom Shorthand Cop
&lt;/h3&gt;

&lt;p&gt;A RuboCop cop will look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;RuboCop&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Cop&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Style&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Namespace&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UseShorthandBlockSyntax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Our name&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# If we only want to see if something matches, excluding captures&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;def_node_matcher&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:shorthand?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;~&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PATTERN&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
          (block _receiver
            (args (arg _a)) (send (lvar _a) _method_name))
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;        PATTERN&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# If we still want those captures, we'll get to this next article&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;SHORTHAND_PATTERN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RuboCop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NodePattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;~&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PATTERN&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
          (block $_receiver
            (args (arg _a)) (send (lvar _a) $_method_name))
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;        PATTERN&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# On any block node RuboCop encounters, send it to this method&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;on_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;# Using that helper method above, it it's not shorthand bail out&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shorthand?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

          &lt;span class=&quot;c1&quot;&gt;# If it is, mark the node as an offense&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;add_offense&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The items which will look particularly strange to you are &lt;code&gt;def_node_matcher&lt;/code&gt;, &lt;code&gt;on_block&lt;/code&gt;, and &lt;code&gt;add_offense&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  
  
  Node Matcher
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;def_node_matcher&lt;/code&gt; creates a predicate method from a NodePattern which we called with &lt;code&gt;return false unless shorthand?(node)&lt;/code&gt; and takes care of all the &lt;code&gt;match&lt;/code&gt; handling for us. If we used a constant we'd still have to manually create the NodePattern from a String and call &lt;code&gt;match&lt;/code&gt; on it later.&lt;/p&gt;

&lt;h4&gt;
  
  
  On Methods
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;on_block&lt;/code&gt; is interesting in that any block node that RuboCop catches will be sent to any &lt;code&gt;on_block&lt;/code&gt; method to check if it's a match. The &lt;code&gt;on_&lt;/code&gt; methods exist for every type of block, and are typically the entry point to your checks. Frequently this will be &lt;code&gt;on_send&lt;/code&gt; instead.&lt;/p&gt;

&lt;h4&gt;
  
  
  Add Offense
&lt;/h4&gt;

&lt;p&gt;This is where we tell RuboCop that the node is a match for our rule, and that we want to flag it for reporting. Interestingly there are more options here around formatting the violation message, choosing where the violation occurred (entire node, part of it, where?), and a few more options.&lt;/p&gt;

&lt;h3&gt;
  
  
  Testing
&lt;/h3&gt;

&lt;p&gt;Now what makes this really powerful is the suite of testing tools to verify that various types of code are or are not matches for your new rule, and when we get to automatic correction? You can even test that it happened to replace it correctly.&lt;/p&gt;

&lt;p&gt;You can see why this might be &lt;em&gt;real&lt;/em&gt; handy indeed.&lt;/p&gt;

&lt;p&gt;Ah, and RSpec has an inline outrun mode, so let's sneak that into our script right quick:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rubocop&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rspec/autorun&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rubocop/rspec/support&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;RuboCop&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Cop&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Style&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UseShorthandBlockSyntax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;def_node_matcher&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:shorthand?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;~&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PATTERN&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
          (block _receiver
            (args (arg _a)) (send (lvar _a) _method_name))
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;        PATTERN&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# Make a custom message, if you want. `add_offense` also accepts one&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;MSG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;BAD!&quot;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;on_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shorthand?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

          &lt;span class=&quot;n&quot;&gt;add_offense&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Quick config - This gives us the helpers like `expect_offense`&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RuboCop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ExpectOffense&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Make SURE to include the `:config` here, or `cop` will be undefined on run&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RuboCop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Cop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;UseShorthandBlockSyntax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:config&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;catches a match&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Specify which code meets the rule, and what the error should look like&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expect_offense&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;~&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RUBY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
      [1, 2, 3].select { |v| v.even? }
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ BAD!
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;    RUBY&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;does not catch a non-match&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Or that there are no offenses from something&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expect_no_offenses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;~&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RUBY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
      [1, 2, 3].map { |v| v.to_s(2) }
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;    RUBY&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Granted you should probably nest that in your spec folder somewhere, but you can see how that could become very useful for quick tests.&lt;/p&gt;

&lt;p&gt;The major point here is that you can test against multiple variations of code you might expect, and define whether or not they should match your rule, and that's exceptionally powerful in large code bases.&lt;/p&gt;

&lt;p&gt;Now that all said, we'll save the really fun stuff for next time.&lt;/p&gt;

&lt;h2&gt;
  
  
  Wrap Up
&lt;/h2&gt;

&lt;p&gt;The point of this article was to introduce you to NodePattern, some of the tooling around it, and how that might look when integrated into RuboCop. It's very much meant as an introduction rather than a de-facto guide. The documentation will do a better job of that, but it's nice to know these things exist.&lt;/p&gt;

&lt;p&gt;Next time, however, we're going to take a look into the single most powerful secret that very few know of:&lt;/p&gt;

&lt;p&gt;Autocorrection.&lt;/p&gt;

&lt;p&gt;If we're just talking lint and style sure, that's interesting but not highly useful beyond prettying things up. No no, we're talking something far more incredible, and that would be code migrations. If you have, say, a giant monorepo and you want to migrate a pattern of code everywhere with the added benefit of testability you'll be real fond of the next piece in this series.&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
    </item>
    <item>
      <title>ASTs in Ruby - Pattern Matching</title>
      <dc:creator>Brandon Weaver</dc:creator>
      <pubDate>Tue, 14 Jun 2022 06:30:30 +0000</pubDate>
      <link>https://dev.to/baweaver/asts-in-ruby-pattern-matching-mjd</link>
      <guid>https://dev.to/baweaver/asts-in-ruby-pattern-matching-mjd</guid>
      <description>&lt;p&gt;Have you ever wanted to edit Ruby code programmatically? Perhaps change one bit of text to another, use a bit of regex and all good to go. The problem is Ruby code isn't text, strictly speaking, it's a series of tokens that all have distinct meaning which makes it very hard to change non-trivial codepaths with regex without committing horrible atrocities that would make a Perl programmer proud.&lt;/p&gt;

&lt;p&gt;(* Multiple Perl programmers were asked for their opinions on aforementioned regexen, and were indeed proud, horrified, and impressed all at once. It was a good day.)&lt;/p&gt;

&lt;h2&gt;
  
  
  What is an AST?
&lt;/h2&gt;

&lt;p&gt;Jokes aside, if regex isn't going to cut it we need another way to work with Ruby code programmatically, and that way is with ASTs. An AST is an Abstract Syntax Tree, a nested lisp-like representation of a Ruby program:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rubocop&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ast_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;RuboCop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ProcessedSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RUBY_VERSION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ast&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ast_from&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;~&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RUBY&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
  def my_method(a: 1, b:)
    a + b
  end
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RUBY&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# returns&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:def&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:my_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:kwoptarg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:kwarg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:lvar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:lvar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now this in and of itself does not make a particularly compelling case for why you might want to work with ASTs, no, so let's take a look at something a bit more pragmatic.&lt;/p&gt;

&lt;h2&gt;
  
  
  Our Task - Shorthanding Blocks
&lt;/h2&gt;

&lt;p&gt;If I were to give you the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;even?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...how might you go about detecting it and replacing it with its shorthand equivalent?&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:even?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Well there are a few things that we can immediately identify are similar here:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;Array&lt;/code&gt; of &lt;code&gt;[1, 2, 3]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;select&lt;/code&gt; is called on that &lt;code&gt;Array&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;The block has one argument, and that argument has one method called on it&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;From a glance this might not be too bad to solve with regex, but what if I said you had to do it across an entire codebase that's accumulated a significant amount of code? You might run into examples like:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# An argument&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;even?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Many methods&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Perhaps both&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;even?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Why though?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can begin to see how the number of variants might stack up here and become difficult to express. People do unusual and creative things in Ruby.&lt;/p&gt;

&lt;h2&gt;
  
  
  Enter the AST
&lt;/h2&gt;

&lt;p&gt;Let's start by taking a look at the AST of one of those examples:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ast_from&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;~&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RUBY&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
  [1, 2, 3].select { |v| v.even? }
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RUBY&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# returns&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:lvar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:even?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first step we want to do when considering any AST, and any query we might run against it, is what we're working with and how we might manually transform that code if we saw it.&lt;/p&gt;

&lt;p&gt;In this case we would see a few things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;select&lt;/code&gt; has a &lt;code&gt;block&lt;/code&gt; (or the other way around, not a fan of &lt;code&gt;block&lt;/code&gt; wrapping &lt;code&gt;select&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;That block has one argument, &lt;code&gt;v&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;v&lt;/code&gt; then receives one method, &lt;code&gt;even?&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;There is nothing else in the body of the block&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If we were to abstract this to a more general term for a rule, we might say:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A method receives a &lt;code&gt;block&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;That block has one argument, which we can call &lt;code&gt;a&lt;/code&gt; for now&lt;/li&gt;
&lt;li&gt;The body of the block has that argument, &lt;code&gt;a&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;a&lt;/code&gt; receives a single method with no arguments&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So we could have &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;select&lt;/code&gt;, or really any other method called and the more general rule would still work.&lt;/p&gt;

&lt;p&gt;In every case of writing matches against AST I've followed a similar frame of thinking, and generalizing is a very powerful tool here.&lt;/p&gt;

&lt;p&gt;Given that we know what we're generally looking for, how might we express that in code? Let's start with something else first.&lt;/p&gt;

&lt;h2&gt;
  
  
  Pattern Matching Quickstart
&lt;/h2&gt;

&lt;p&gt;We're going to take a quick whirlwind tour of pattern matching against &lt;code&gt;Array&lt;/code&gt;-like structures. If you're ever curious to learn more I would recommend reading &lt;a href=&quot;https://dev.to/baweaver/definitive-pattern-matching-array-like-structures-1298&quot;&gt;Definitive Pattern Matching - Array-like Structures&lt;/a&gt; as it goes into far more detail.&lt;/p&gt;

&lt;h3&gt;
  
  
  What is Pattern Matching?
&lt;/h3&gt;

&lt;p&gt;To start out with, pattern matching is the idea that you can describe a pattern you expect data to match:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Ruby this works with the &lt;code&gt;case&lt;/code&gt; and &lt;code&gt;in&lt;/code&gt; branch, rather than the &lt;code&gt;when&lt;/code&gt; branch you might have seen before. In both cases having a working knowledge of triple equals in Ruby will be invaluable, which you can read into more with &lt;a href=&quot;https://dev.to/baweaver/understanding-ruby-triple-equals-2p9c&quot;&gt;Understanding Ruby - Triple Equals&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With a &lt;code&gt;when&lt;/code&gt; branch each value separated by &lt;code&gt;,&lt;/code&gt; is compared against the value with &lt;code&gt;===&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;really small&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;small&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;large&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &quot;small&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which is great if you have one value, but how might you match against other types of data? We're focusing on &lt;code&gt;Array&lt;/code&gt;-like structures for now, and in the above example each value is compared via &lt;code&gt;===&lt;/code&gt; to each element of the pattern we define.&lt;/p&gt;

&lt;h2&gt;
  
  
  Variables, Pinning, and Rightward Assignment
&lt;/h2&gt;

&lt;p&gt;If that were all it would be useful, but not very powerful. That's where we get into variables and pinning. What if I wanted to say I have a nested &lt;code&gt;Array&lt;/code&gt; with three elements, each starting with the same number? Well it might look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case we're saying that we expect a value &lt;code&gt;a&lt;/code&gt; in a nested &lt;code&gt;Array&lt;/code&gt; with any element (&lt;code&gt;_&lt;/code&gt;) afterwards, and that same element in the first spot of the next two sub-&lt;code&gt;Array&lt;/code&gt;s using &lt;code&gt;^a&lt;/code&gt;, or &quot;pin &lt;code&gt;a&lt;/code&gt;.&quot; What's interesting is this is even more powerful than that last example, like if we also want &lt;code&gt;a&lt;/code&gt; to be an &lt;code&gt;Integer&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The value on the left of the rightward-assignment is the match, and the value on the right is what we dump that value into afterwards if it does match. Nifty, no?&lt;/p&gt;

&lt;p&gt;You could even do it in a one-liner if you really wanted to:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...which I tend to prefer, but introducing &lt;code&gt;case&lt;/code&gt; first is more familiar to start with. Same with rightward assignment, but that's a whole other thing to cover.&lt;/p&gt;

&lt;h3&gt;
  
  
  Deconstruct
&lt;/h3&gt;

&lt;p&gt;How does it work behind the scenes? The short version is a method called &lt;code&gt;deconstruct&lt;/code&gt; which returns an &lt;code&gt;Array&lt;/code&gt; representation of the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Array&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deconstruct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now this is just an example, but it would function something like that as an &lt;code&gt;Array&lt;/code&gt; is already in the needed format. What if we did an AST instead, how would that look when deconstructed? Remember, tree-like structure, so we have to be a bit more clever to get a look outside of pattern matching contexts:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Useful for debugging and seeing how the nodes deconstruct&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deep_deconstruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;respond_to?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:deconstruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;deconstruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deep_deconstruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;deep_deconstruct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ast_from&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;~&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RUBY&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
  [].select { |v| v.even? }
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RUBY&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [:block, [:send, [:array], :select],&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#      [[:arg, :v]], [:send, [:lvar, :v], :even?]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...and trust me when I say that little tool is incredibly valuable for creating patterns.&lt;/p&gt;

&lt;h2&gt;
  
  
  Matching ASTs
&lt;/h2&gt;

&lt;p&gt;Taking a look back at our AST and its deconstructed representation:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;deep_deconstruct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ast_from&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;~&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RUBY&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
  [].select { |v| v.even? }
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RUBY&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [:block, [:send, [:array], :select],&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#      [[:arg, :v]], [:send, [:lvar, :v], :even?]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...we can start to play directly with that &lt;code&gt;Array&lt;/code&gt; deconstruction to make our pattern:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:lvar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:even?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The questions we had above will again be very useful here:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A method receives a &lt;code&gt;block&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;That block has one argument, which we can call &lt;code&gt;a&lt;/code&gt; for now&lt;/li&gt;
&lt;li&gt;The body of the block has that argument, &lt;code&gt;a&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;a&lt;/code&gt; receives a single method with no arguments&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's break down that &lt;code&gt;Array&lt;/code&gt; deconstruction question by question then.&lt;/p&gt;

&lt;h3&gt;
  
  
  A method receives a block
&lt;/h3&gt;

&lt;p&gt;We have our representation:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:lvar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:even?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...and all we care about is that it has a block, we don't really care from where, just that the block is there. That means we can drop the entire second piece with &lt;code&gt;select&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:lvar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:even?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's great, but seeing is believing, and each step of generalization I would highly encourage testing against at least one example to make sure it still works:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ast_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%([].select { |v| v.even? })&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:lvar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:even?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Oh, right, one-liner may not quite be taken literally, and I've been known to break things across a few lines for readability when it makes sense. In any case this proves the &lt;code&gt;_&lt;/code&gt; works to stand in for that &lt;code&gt;Array&lt;/code&gt; receiving &lt;code&gt;select&lt;/code&gt; just fine, which brings us to the next step.&lt;/p&gt;

&lt;h3&gt;
  
  
  The block has one argument, &lt;code&gt;a&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Starting from last step:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:lvar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:even?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The current &lt;code&gt;arg&lt;/code&gt; is &lt;code&gt;:v&lt;/code&gt;, but we want it to be generic so we can express a pattern based on it, so let's switch it out with &lt;code&gt;a&lt;/code&gt; and see what happens:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ast_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%([].select { |v| v.even? })&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:lvar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:even?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Still good, but seeing is believing, so let's switch that &lt;code&gt;in&lt;/code&gt; to &lt;code&gt;=&amp;gt;&lt;/code&gt; for rightward assignment to see what &lt;code&gt;a&lt;/code&gt; is now:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ast_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%([].select { |v| v.even? })&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:lvar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:even?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; nil (Careful, raises an exception on no match)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; :v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great, next step then.&lt;/p&gt;

&lt;h3&gt;
  
  
  The body of the block has that argument
&lt;/h3&gt;

&lt;p&gt;Back to the last step:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ast_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%([].select { |v| v.even? })&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:lvar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:even?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What do you think we should do next here? Think about it for a moment before moving on.&lt;/p&gt;

&lt;p&gt;This is where pinning becomes exceptionally useful:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ast_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%([].select { |v| v.even? })&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:lvar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:even?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which leaves us with one last item to address.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;code&gt;a&lt;/code&gt; receives a single method with no arguments
&lt;/h3&gt;

&lt;p&gt;Back to the last step:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ast_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%([].select { |v| v.even? })&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:lvar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:even?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All we would need to do here is replace &lt;code&gt;:even?&lt;/code&gt; with an underscore and:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ast_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%([].select { |v| v.even? })&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:lvar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...we now have a very general pattern. Let's prove it though:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;shorthandable?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ast&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:lvar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;shorthandable?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ast_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[1, 2, 3].map { |v| v.to_s }&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;shorthandable?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ast_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[1, 2, 3].map { |v| v.to_s(2) }&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;shorthandable?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ast_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[1, 2, 3].select { |v| v.next.even? }&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;shorthandable?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ast_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[1, 2, 3].map { |v| v.next + 1 }&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;shorthandable?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ast_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;x = 4; [1, 2, 3].select { |v| x.even? }&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Neat, but let's take that one step further. I'm lazy, and I want Ruby to rewrite that code for me.&lt;/p&gt;

&lt;h3&gt;
  
  
  Rewriting and &lt;code&gt;source&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Remember assignment in matches? It's about to get very useful:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;to_shorthand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ast&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;receiver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:lvar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;receiver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;(&amp;amp;:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;)&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;to_shorthand&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ast_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[1, 2, 3].map { |v| v.to_s }&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &quot;[1, 2, 3].map(&amp;amp;:to_s)&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;to_shorthand&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ast_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[1, 2, 3].select { |v| v.even? }&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &quot;[1, 2, 3].select(&amp;amp;:even?)&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Those underscores we didn't care about before are a bit more important now. We need to know what received the block, so we put that in &lt;code&gt;receiver&lt;/code&gt;, and then we want to know which method name was called which is put into &lt;code&gt;method_name&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The fun one, which is a bit of a jump, is you can convert back to source with the &lt;code&gt;source&lt;/code&gt; method on an AST node:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ast_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[1, 2, 3].select { |v| v.even? }&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;source&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &quot;[1, 2, 3].select { |v| v.even? }&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From there it's a quick jump to string interpolation and we have our shiny new shorthand code out the other side.&lt;/p&gt;

&lt;h2&gt;
  
  
  But how do I use that?
&lt;/h2&gt;

&lt;p&gt;Great question! It's also one I'll answer in the next few posts on this, but the very short answer is RuboCop for both matching a node and for rewriting it using autocorrection which is really handy.&lt;/p&gt;

&lt;p&gt;That said, this post veers a bit long, so I'll wrap it up.&lt;/p&gt;

&lt;h2&gt;
  
  
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;Pattern matching is exceptionally powerful in Ruby, and this post barely scratched the surface of what it can do when used correctly. Combined with ASTs which are essentially nested lists and it's a very useful combination indeed.&lt;/p&gt;

&lt;p&gt;That said, there's a matter for next time, which is &lt;code&gt;NodePattern&lt;/code&gt;. Think of it like regex for ASTs and you won't be far off. It's more succinct than pattern matching, but a bit harder to reason about because of it. Still very useful though, and very common in RuboCop code so definitely worth learning if only for knowing how it works.&lt;/p&gt;

&lt;p&gt;With that we'll call this one, and I'll get on with writing the next few.&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
    </item>
    <item>
      <title>The Case for Pattern Matching Key Irreverence in Ruby</title>
      <dc:creator>Brandon Weaver</dc:creator>
      <pubDate>Sat, 11 Jun 2022 07:17:18 +0000</pubDate>
      <link>https://dev.to/baweaver/the-case-for-pattern-matching-key-irreverence-in-ruby-1oll</link>
      <guid>https://dev.to/baweaver/the-case-for-pattern-matching-key-irreverence-in-ruby-1oll</guid>
      <description>&lt;p&gt;I had alluded to this post a bit earlier on Twitter, and in the Ruby bug tracker, but wanted to more fully write out my thoughts on what could be an incredibly powerful paradigm shift in how Ruby treats pattern matching on hash-like objects.&lt;/p&gt;

&lt;p&gt;That idea, simply, is to treat the &lt;code&gt;keys&lt;/code&gt; argument to &lt;code&gt;destructure_keys&lt;/code&gt; as if they were keyword arguments, rather than as literal &lt;code&gt;Symbol&lt;/code&gt;s.&lt;/p&gt;

&lt;h2&gt;
  
  
  Keys as Literal Symbols
&lt;/h2&gt;

&lt;p&gt;The state of the world, for many maintainers, is that &lt;code&gt;keys&lt;/code&gt; is an &lt;code&gt;Array&amp;lt;Symbol&amp;gt;&lt;/code&gt; where each &lt;code&gt;Symbol&lt;/code&gt; represents a &lt;code&gt;key&lt;/code&gt; to be restructured from a hash-like object, or return all possible keys in the case of a &lt;code&gt;nil&lt;/code&gt; argument.&lt;/p&gt;

&lt;p&gt;In the strictest sense and most literal interpretation this makes sense, such that if you matched against the hash &lt;code&gt;{ a: 1, b: 2, c: 3 }&lt;/code&gt; like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;a: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;b: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;c: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;a: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;b: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Integer&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...the &lt;code&gt;deconstruct_keys&lt;/code&gt; method would receive &lt;code&gt;[:a, :b]&lt;/code&gt; for &lt;code&gt;keys&lt;/code&gt;. These would correspond to the keys  &lt;code&gt;:a&lt;/code&gt; and &lt;code&gt;:b&lt;/code&gt; in the above hash.&lt;/p&gt;

&lt;p&gt;This certainly makes sense in the above case, but I hope to show you that this pattern does not fully encompass what pattern matching can express, and is actually very restrictive.&lt;/p&gt;

&lt;h2&gt;
  
  
  The Compromises of Pattern Matching
&lt;/h2&gt;

&lt;h3&gt;
  
  
  Object Deconstruction via Instance Variables
&lt;/h3&gt;

&lt;p&gt;Let us say that we were to make our own custom object, a &lt;code&gt;Point&lt;/code&gt; with coordinates:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Point&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deconstruct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deconstruct_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;x: &lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;y: &lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;x: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;y: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;x: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This brings up a few sneaky questions hiding in plain sight:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Is a &lt;code&gt;Point&lt;/code&gt; a &lt;code&gt;Hash&lt;/code&gt;? - No&lt;/li&gt;
&lt;li&gt;Can it be represented as one? - Yes&lt;/li&gt;
&lt;li&gt;What do &lt;code&gt;keys&lt;/code&gt; represent then? - The instance variables &lt;code&gt;@x&lt;/code&gt; and &lt;code&gt;@y&lt;/code&gt; put into a &lt;code&gt;Hash&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That last one I want you to pay very close attention to.&lt;/p&gt;

&lt;p&gt;That leads to one more question: Are variables or instance variables &lt;code&gt;Symbol&lt;/code&gt;s? The answer, of course, is no.&lt;/p&gt;

&lt;p&gt;We're not treating them as literal &lt;code&gt;Symbol&lt;/code&gt;s in this case, we're treating them as something much more interesting: representations of something else.&lt;/p&gt;

&lt;p&gt;They represent internal state of the &lt;code&gt;Point&lt;/code&gt;, and we frame that internal representation as a &lt;code&gt;Hash&lt;/code&gt; which can be consumed by pattern matching.&lt;/p&gt;

&lt;p&gt;This was the first compromise pattern matching made with the above literal interpretation of &lt;code&gt;Symbol&lt;/code&gt;s, but not the last.&lt;/p&gt;

&lt;h3&gt;
  
  
  Object Deconstruction via Method Calls
&lt;/h3&gt;

&lt;p&gt;Now let's change the &lt;code&gt;Point&lt;/code&gt; class a bit to show something even more interesting:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Point&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:y&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deconstruct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deconstruct_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;y: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;x: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;y: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;x: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This one is far more subtle. The first thing is you might not recognize that syntax on &lt;code&gt;deconstruct_keys&lt;/code&gt;. That's because  &lt;code&gt;deconstruct_keys&lt;/code&gt; is using Ruby 3.1 punning to generate effectively &lt;code&gt;{ x: x, y: y }&lt;/code&gt; which will call both of the &lt;code&gt;attr_reader&lt;/code&gt; generated methods for &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now not only are we referring to literal &lt;code&gt;Symbol&lt;/code&gt;s and variables within scope, we're also referring to potential method calls in our representation as well.&lt;/p&gt;

&lt;p&gt;This compromise raises a critical point: As long as you can wrap it in a &lt;code&gt;Hash&lt;/code&gt; that pattern matching can understand it &lt;em&gt;does not care&lt;/em&gt; where the data comes from.&lt;/p&gt;

&lt;h3&gt;
  
  
  Distinctly Ruby Duck Typing
&lt;/h3&gt;

&lt;p&gt;It's also distinctly Ruby for one core reason: Duck typing. Like &lt;code&gt;===&lt;/code&gt;, &lt;code&gt;call&lt;/code&gt;, &lt;code&gt;to_proc&lt;/code&gt;, and other common interface methods as long as you play by the rules of pattern matching in a reasonable manner it will still work.&lt;/p&gt;

&lt;p&gt;The point of this interface is not a 1-1 &lt;code&gt;Hash&lt;/code&gt; mapping. What it is, however, is something much more compelling and interesting.&lt;/p&gt;

&lt;h2&gt;
  
  
  Query Language and Available Fields
&lt;/h2&gt;

&lt;p&gt;Every field that can be returned from a pattern match is, technically speaking, a &lt;code&gt;Symbol&lt;/code&gt; key and any value we could dream up.&lt;/p&gt;

&lt;p&gt;They're also representative of the internal state of an &lt;code&gt;Object&lt;/code&gt;, and what state we choose to make accessible as an &quot;available field&quot; to be matched against.&lt;/p&gt;

&lt;p&gt;That means that pattern matching is not matching a &lt;code&gt;Hash&lt;/code&gt; to a &lt;code&gt;Hash&lt;/code&gt;, it's querying an &lt;code&gt;Object&lt;/code&gt;'s available fields using the &lt;code&gt;===&lt;/code&gt; interface common to Ruby. It's up to us to define what those fields are, especially for cases where we're not literally matching a &lt;code&gt;Hash&amp;lt;Symbol, Any&amp;gt;&lt;/code&gt; type.&lt;/p&gt;

&lt;p&gt;The further away from that literal &lt;code&gt;Hash&amp;lt;Symbol, Any&amp;gt;&lt;/code&gt; we go, the more it is up to us to define what constitutes a reasonable interface, hence my insistence that pattern matching is a query language against available fields.&lt;/p&gt;

&lt;p&gt;Why is this important? Well let's take a look at how some of the rest of Ruby deals with &lt;code&gt;Symbol&lt;/code&gt;s real quick.&lt;/p&gt;

&lt;h2&gt;
  
  
  Ruby and &lt;code&gt;Symbol&lt;/code&gt;s
&lt;/h2&gt;

&lt;p&gt;If we were to look in the Ruby language, one might expect that a &lt;code&gt;Symbol&lt;/code&gt; is a &lt;code&gt;Symbol&lt;/code&gt;, but frequently it's anything but that simple. Let's take a look at a few distinct cases to show what I mean there.&lt;/p&gt;

&lt;h3&gt;
  
  
  Keyword Arguments
&lt;/h3&gt;

&lt;p&gt;In Ruby we have access to keyword arguments as a clearer way to accept arguments:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;some_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;a: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;b: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;c: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In older versions of Ruby this could be a &lt;code&gt;Hash&amp;lt;Symbol, Any&amp;gt;&lt;/code&gt; that would be coerced into keywords, and recent versions have leaned more towards explicit coercion with &lt;code&gt;some_method(**{ a: 1})&lt;/code&gt; style double-splatting.&lt;/p&gt;

&lt;p&gt;That said, in this case keywords are very similar to &lt;code&gt;Symbol&lt;/code&gt;s, and in the past were very much accepted as such.&lt;/p&gt;

&lt;h3&gt;
  
  
  Pattern Matching
&lt;/h3&gt;

&lt;p&gt;Pattern matching itself has interesting treatments for &lt;code&gt;Symbol&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;x: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;y: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;y:
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [1, 2]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Very much in line with keyword arguments from before, we're using these as arguments to &lt;code&gt;deconstruct_keys&lt;/code&gt; which extracts both the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; from the &lt;code&gt;Point&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;At the point of the caller they're very much in the style of keyword arguments, but in the method they're &lt;code&gt;Array&amp;lt;Symbol&amp;gt;&lt;/code&gt; or &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  
  
  Punning
&lt;/h3&gt;

&lt;p&gt;You saw the above example of punning, well that was very much due to and inspired by the above pattern matching syntax. The &lt;a href=&quot;https://bugs.ruby-lang.org/issues/14579&quot;&gt;original bug tracker issue&lt;/a&gt; predated pattern matching by quite a bit, but pattern matching and mandatory keyword arguments very much contributed to its merging in &lt;a href=&quot;https://bugs.ruby-lang.org/issues/14579#note-14&quot;&gt;this comment&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;After the RubyKaigi 2021 sessions, we have discussed this issue and I was finally persuaded.&lt;br&gt;
Our mindset has been updated (mostly due to mandatory keyword arguments).&lt;br&gt;
Accepted.&lt;/p&gt;

&lt;p&gt;Matz.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The above &lt;code&gt;Point&lt;/code&gt; class used this:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deconstruct_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;y: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Those symbols are treated as keywords, rather than &lt;code&gt;Symbol&lt;/code&gt;s despite technically being &lt;code&gt;Symbol&lt;/code&gt;s, and because of that we have a lot of power in reconstructing objects which I have found very useful, and you can &lt;a href=&quot;https://dev.to/baweaver/ruby-3-1-shorthand-hash-syntax-first-impressions-19op&quot;&gt;find more of my writing here on why I like them&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sufficient to say I think they're very powerful, but let's take a different vantage real quick.&lt;/p&gt;

&lt;h3&gt;
  
  
  Ambiguity and Coercion
&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.packtpub.com/product/polished-ruby-programming/9781801072724&quot;&gt;Polished Ruby Programming&lt;/a&gt; does an excellent job of covering some of this in Chapter 1 in &quot;Understanding how symbols differ from strings&quot; and I want to cover a few things from the book real quick. It uses two examples:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:add&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;add&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Strictly speaking &lt;code&gt;send&lt;/code&gt; expects a &lt;code&gt;Symbol&lt;/code&gt;, yet it still works with a &lt;code&gt;String&lt;/code&gt; here. Why? Well the book has a good answer:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;...this is only because Ruby tries to be friendly to the programmer and accept either.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(Yes, it is technically slower, but not quite the point of this post)&lt;/p&gt;

&lt;p&gt;So now we have a distinct case of Ruby coercing a &lt;code&gt;String&lt;/code&gt; to a &lt;code&gt;Symbol&lt;/code&gt; because Ruby is trying to be friendly, but also something more important is hidden here: It's because Ruby knows what you meant, and did not treat it literally.&lt;/p&gt;

&lt;p&gt;The book goes on to mention that this is not the only method which behaves like this. It also happens with &lt;code&gt;Module#define_method&lt;/code&gt;, &lt;code&gt;Kernel#instance_variable_get&lt;/code&gt;, &lt;code&gt;Module#const_get&lt;/code&gt;, and probably several more.&lt;/p&gt;

&lt;p&gt;Now this next part is critically important for the case I'm about to make, also from the book:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The previous examples show that when Ruby needs a symbol, it will often accept a string and convert it for the programmer's convenience. This allows strings to be treated as symbols in certain cases. There are opposite cases, where Ruby allows symbols to be treated as strings for the programmer's convenience.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The very ethos of Ruby is programmer happiness, convenience, and the ability to express yourself in multiple different ways as long as it makes reasonable sense.&lt;/p&gt;

&lt;p&gt;This case can be made with Ruby alone, but if you look into Rails it certainly takes this argument much further when you start seeing cases like &lt;code&gt;Hash#with_indifferent_access&lt;/code&gt;, but we will leave those cases alone excepting to say that this ethos has spread to implementations across the Ruby ecosystem.&lt;/p&gt;

&lt;p&gt;Or, in other words, &lt;strong&gt;it is established Ruby precedent to favor convenience over explicitness&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Now then, to get to the interesting part.&lt;/p&gt;

&lt;h2&gt;
  
  
  Pattern Matching as Keywords
&lt;/h2&gt;

&lt;p&gt;All of that was to say that there is indeed established Ruby precedent that we prefer to do the reasonable and convenient thing over the strictly &quot;correct&quot; and explicit thing, and that it is not confined to one part of the language.&lt;/p&gt;

&lt;p&gt;In the case of compromises for pattern matching we already know that &lt;code&gt;Symbol&lt;/code&gt;s have been used as representations of variables and methods, but given the last section we can make one more leap and make a case for a final and very interesting precedent that we've been very close to making:&lt;/p&gt;

&lt;p&gt;Arguments to pattern matching's &lt;code&gt;deconstruct_keys&lt;/code&gt; are effectively keyword arguments, and representations of internal state.&lt;/p&gt;

&lt;p&gt;It's up to us to determine what that means, and for me it brings up a slightly contentious subject that's received some amount of kick-back:&lt;/p&gt;

&lt;p&gt;What about &lt;code&gt;Hash&lt;/code&gt;-like structures that use &lt;code&gt;String&lt;/code&gt;s for key representations like &lt;code&gt;JSON&lt;/code&gt;, &lt;code&gt;CSV&lt;/code&gt;, &lt;code&gt;RegExp&lt;/code&gt;, and other core classes?&lt;/p&gt;

&lt;h3&gt;
  
  
  The Case for CSV
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;CSV::Row&lt;/code&gt; currently has an implementation of pattern matching:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# :call-seq:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#   row.deconstruct_keys(keys) -&amp;gt; hash&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Returns the new \Hash suitable for pattern matching containing only the&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# keys specified as an argument.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deconstruct_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nil?&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;to_h&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_h&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The problem, as I have enumerated upon in &lt;a href=&quot;https://github.com/ruby/csv/issues/246&quot;&gt;CSV#246&lt;/a&gt;, is that rows for CSVs are commonly &lt;code&gt;String&lt;/code&gt; keys, rather than &lt;code&gt;Symbol&lt;/code&gt; as the interface assumes.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/ruby/csv/issues/246#issuecomment-1150795568&quot;&gt;response&lt;/a&gt; was that there are flags which allow explicit conversion:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;csv&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CSV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;~&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ROWS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;headers: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;header_converters: :symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
  Name,Department,Salary
  Bob,Engineering,1000
  Jane,Sales,2000
  John,Management,5000
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ROWS&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/^J/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#&amp;lt;CSV::Row name:&quot;Jane&quot; department:&quot;Sales&quot; salary:&quot;2000&quot;&amp;gt;,&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;#&amp;lt;CSV::Row name:&quot;John&quot; department:&quot;Management&quot; salary:&quot;5000&quot;&amp;gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While correct in the strict sense, this feels like Ruby could very easily make a reasonable coercion for us and know what we meant, as it does in so many other cases.&lt;/p&gt;

&lt;p&gt;For me I believe that the implementation for &lt;code&gt;deconstruct_keys&lt;/code&gt; should coerce internal representation to &lt;code&gt;Symbol&lt;/code&gt; keys to treat it as keyword arguments that query against internal state, rather than a 1-1 match:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CSV::Row&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deconstruct_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nil?&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;to_h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;transform_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:to_sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_h&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;key?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;key?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
          &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I believe this satisfies the above ethos of Ruby being convenient and favoring programmer happiness over strict correctness as we know that &lt;code&gt;keys&lt;/code&gt; will be either &lt;code&gt;nil&lt;/code&gt; or &lt;code&gt;Array&amp;lt;Symbol&amp;gt;&lt;/code&gt; and can reasonably infer which fields the user wants.&lt;/p&gt;

&lt;p&gt;In the original implementation I had raised this concern on &lt;a href=&quot;https://github.com/ruby/csv/pull/207#discussion_r581610281&quot;&gt;CSV#207&lt;/a&gt; to say something very similar, but I did note the following:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want to support this you would want to instead transform the keys to &lt;code&gt;String&lt;/code&gt;, but this may be controversial as it conflates the two.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is, in a sense, controversial but the more I think about it the more it feels very Ruby to take care of this ergonomic usecase for us rather than being explicit.&lt;/p&gt;

&lt;p&gt;The author &lt;a href=&quot;https://github.com/ruby/csv/pull/207#discussion_r581981460&quot;&gt;disagreed with this&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I think I'd rather leave it as is for now. You can always pass &lt;code&gt;header_converters: :symbol&lt;/code&gt; to the parse function, which would make this work as expected.&lt;/p&gt;

&lt;p&gt;I think I would be really surprised if in my matching I specified symbols and it matched against strings.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;...and is one of the reasons I have written this article to articulate my case a bit more clearly.&lt;/p&gt;

&lt;h3&gt;
  
  
  An Aside on Disagreement
&lt;/h3&gt;

&lt;p&gt;To be clear, I hold no ill-will for kddnewton here, far be it. He's a very smart guy and does a lot of excellent work, I will not remotely contest that one.&lt;/p&gt;

&lt;p&gt;Programmers disagree, we make our cases, and eventually one wins out. Not everyone will agree with every decision, but I do believe it valuable to reevaluate on occasion to address cases which may have a very powerful impact on the language.&lt;/p&gt;

&lt;p&gt;What makes it a community is that we can have these discussions without name calling and vitriol, but rather laying out our thoughts and seeking the opinions of both the community and the core contributors.&lt;/p&gt;

&lt;p&gt;If I should have my solution become precedent I do think it would be of great benefit to the language, but should it not be I will not hold that against anyone as I have made my case far more clearly and if that is the will of Ruby then that is what I shall accept.&lt;/p&gt;

&lt;p&gt;There are several things in Ruby I don't agree with, but there are also several that I enjoy, and that's the nature of any language.&lt;/p&gt;

&lt;p&gt;Why bring it up then? Because this was a one-repo decision, and I want to clarify this at the language level rather than trying to sneak it into multiple downstream repos and attempt to create precedent via attrition which does not feel correct to me.&lt;/p&gt;

&lt;h3&gt;
  
  
  The Case for MatchData
&lt;/h3&gt;

&lt;p&gt;The next interesting case is on &lt;code&gt;MatchData&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MatchData&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;alias_method&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:deconstruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:to_a&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deconstruct_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;named_captures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;transform_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:to_sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;named_captures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;transform_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:to_sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;IP_REGEX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/
  (?&amp;lt;first_octet&amp;gt;\d{1,3})\.
  (?&amp;lt;second_octet&amp;gt;\d{1,3})\.
  (?&amp;lt;third_octet&amp;gt;\d{1,3})\.
  (?&amp;lt;fourth_octet&amp;gt;\d{1,3})
/x&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;'192.168.1.1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;IP_REGEX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;first_octet: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'198'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;fourth_octet: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'1'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Match capture groups are currently &lt;code&gt;String&lt;/code&gt; keys, as strictly speaking the names of the groups are &lt;code&gt;String&lt;/code&gt;s in the regex. I believe this is a clearer case as we're referring to &lt;code&gt;named_captures&lt;/code&gt; with a 1-1 mapping to the &lt;code&gt;Symbol&lt;/code&gt; variant.&lt;/p&gt;

&lt;h3&gt;
  
  
  The Case for Hash
&lt;/h3&gt;

&lt;p&gt;Now I'm going to do something potentially interesting and note the anti-case for &lt;code&gt;Hash&lt;/code&gt; and why that may be concerning. Do note I would still love it if it were to occur but it does present some insidious potential bugs in rare cases.&lt;/p&gt;

&lt;p&gt;Let's say we had the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;a: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we treated all pattern matching keys as query parameters rather than as literal &lt;code&gt;Symbol&lt;/code&gt; which one should win out? This creates ambiguity, and as such would need a very firm rule of precedence that &lt;code&gt;Symbol&lt;/code&gt; keys are preferred over &lt;code&gt;String&lt;/code&gt; keys if both should happen to exist.&lt;/p&gt;

&lt;p&gt;The other problem here is that if we were to implement this it would cause a potential slow-down for pattern matching in the general case of &lt;code&gt;Hash&lt;/code&gt; where we do two key lookups rather than one for every potential value. One &lt;code&gt;Symbol&lt;/code&gt; and then one &lt;code&gt;String&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This could be mitigated somewhat with a &lt;code&gt;key?&lt;/code&gt; check, but would still present a minor slowdown.&lt;/p&gt;

&lt;p&gt;In this case I do believe the benefits would outweigh the performance implications, though let's take a quick look:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Don't do this in production code&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# So we have a &quot;Ruby&quot; implementation to level against, rather than the C&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# one.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HashOriginal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deconstruct_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each_with_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({})&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HashPrime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deconstruct_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nil?&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;transform_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:to_sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each_with_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({})&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Benchmark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ips&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hash&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;a: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;b: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;a: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;b: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;c: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HashOriginal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;HashOriginal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;a: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;b: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;a: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;b: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;c: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HashPrime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;HashPrime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;a: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;b: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;a: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;b: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;c: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HashPrime String&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;HashPrime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;a: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;b&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;a: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;b: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;c: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Warming up --------------------------------------&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#                 Hash   299.651k i/100ms&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#         HashOriginal   103.085k i/100ms&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#            HashPrime    85.180k i/100ms&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#     HashPrime String    80.537k i/100ms&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Calculating -------------------------------------&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#                 Hash      2.951M (¬± 3.0%) i/s -     14.983M in   5.081797s&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#         HashOriginal      1.057M (¬± 2.6%) i/s -      5.360M in   5.075552s&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#            HashPrime    924.234k (¬± 3.8%) i/s -      4.685M in   5.076900s&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#     HashPrime String    784.882k (¬± 4.9%) i/s -      3.946M in   5.041825s&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Few things to note here:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;Hash&lt;/code&gt; implements &lt;code&gt;deconstruct_keys&lt;/code&gt; in &lt;code&gt;C&lt;/code&gt; making that a bit uneven, hence &lt;code&gt;HashOriginal&lt;/code&gt; as a litmus.&lt;/li&gt;
&lt;li&gt;Yes, you can omit the &lt;code&gt;{}&lt;/code&gt; around the pattern in newer Ruby versions, but not if there's ambiguity like this case.&lt;/li&gt;
&lt;li&gt;We explicitly added a key which does not exist as that incurs both checks.&lt;/li&gt;
&lt;li&gt;Avoid subclassing classes like this in prod code, I'm only doing it for a quick measurement.&lt;/li&gt;
&lt;li&gt;This is not a definitive benchmark as much as a quick measure, more comprehensive ones are likely warranted if this pattern is under serious review.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Anyways, the thing to note here is that the &lt;code&gt;HashPrime&lt;/code&gt; implementation is within striking distance of &lt;code&gt;HashOriginal&lt;/code&gt; and &lt;code&gt;HashPrime String&lt;/code&gt; is not incredibly slower than both of those implementations. If this were done in &lt;code&gt;C&lt;/code&gt; it may not be far behind at all.&lt;/p&gt;

&lt;p&gt;Now why, given that performance implication, would I still recommend it potentially? Because as it exists right now if you pattern match against a &lt;code&gt;Hash&amp;lt;String, Any&amp;gt;&lt;/code&gt; it will not work, making the performance measurement more a case between &lt;code&gt;HashOriginal&lt;/code&gt; and &lt;code&gt;HashPrime&lt;/code&gt; with the caveat of missing keys.&lt;/p&gt;

&lt;h2&gt;
  
  
  Closing Thoughts
&lt;/h2&gt;

&lt;p&gt;My case, simply, is that by treating pattern matching arguments as keyword arguments, and the return value as defining available fields which can be queried against it unlocks a lot of power in Ruby which currently does not exist, or requires a lot of coercion to get to.&lt;/p&gt;

&lt;p&gt;I believe that the precedent for this currently exists, as I have enumerated upon above, and that this is not an entirely unreasonable jump to make given the benefits to programmer convenience it yields. It is still a precedent that lies in a gray area, granted, and one could make a reasonable case against it as well.&lt;/p&gt;

&lt;p&gt;My purpose here is not to make demands of Ruby, far be it, but to present my case and my thoughts on the matter rather than implementing similar patterns myself in repositories which may create conflicting patterns in the Ruby codebase depending on who is reviewing and what their opinions may be.&lt;/p&gt;

&lt;p&gt;Whether or not my case is accepted that is the one thing that I would like to avoid, hence asking for clarification at a language level. That, to me, would be far more against the spirit of Ruby.&lt;/p&gt;

&lt;p&gt;We discuss, we learn, we come to agreements, and we hear others. That's what makes a community, but what makes it special is we can disagree on such matters in kindness rather than vitriol.&lt;/p&gt;

&lt;p&gt;If you have thoughts on this as well do reply to me on Twitter at &lt;a href=&quot;https://twitter.com/keystonelemur/status/1535521834459836418&quot;&gt;keystonelemur&lt;/a&gt;, in the comments section here, or on any other media this article finds itself on.&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Exploring dry-rb - Intuition of Results</title>
      <dc:creator>Brandon Weaver</dc:creator>
      <pubDate>Sun, 05 Jun 2022 06:06:47 +0000</pubDate>
      <link>https://dev.to/baweaver/exploring-dryrb-intuition-of-results-1lnd</link>
      <guid>https://dev.to/baweaver/exploring-dryrb-intuition-of-results-1lnd</guid>
      <description>&lt;p&gt;&lt;code&gt;dry-rb&lt;/code&gt; is a fascinating set of tools and libraries, but their usage may not be readily apparent. Why might one add these libraries when there are perhaps much simpler techniques that will suffice? What is the reasoning behind the abstractions, and what gains might they afford us that could make a case for their inclusion?&lt;/p&gt;

&lt;p&gt;Well that's what this series is. We're going to take a look at a few more non-trivial examples and explain the reasoning behind why one might want these tools, because there are most certainly cases where the incurred complexity becomes very cost-positive indeed.&lt;/p&gt;

&lt;p&gt;In order to build the intuition there though, we first need to explore a bit of theory.&lt;/p&gt;

&lt;h2&gt;
  
  
  Shapes and HTTP Responses
&lt;/h2&gt;

&lt;p&gt;Perhaps one of the most powerful single concepts in programming, and one we so often take for granted, is the HTTP Response and HTTP response codes. With REST/JSON endpoints we can be (reasonably) sure we're going to get back a response which looks something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;body: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;json content&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;code: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Name 100 different APIs that use REST and JSON and you can name 100 that very closely follow a similar convention to this. These responses come with a very clear &quot;shape&quot; that allows us to make reasonable assumptions on how we might act on them, such as with a &lt;a href=&quot;https://www.rubydoc.info/gems/rack/Rack/Response&quot;&gt;Rack Response&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_data&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Rack::Response returned&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;response_body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;successful?&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Rack::Response::Helpers&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response_body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;handle_errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response_body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is exceptionally powerful, underlies so much of our modern web, yet is so frequently taken for granted. Encapsulated in this single idea of a response we have both data, as well as the context for the data such as whether the request was a success, an error, maybe a bad form, who knows &lt;em&gt;but it's consistent&lt;/em&gt; (as long as we play by its rules.)&lt;/p&gt;

&lt;h3&gt;
  
  
  Rule Breaker
&lt;/h3&gt;

&lt;p&gt;Now there is indeed a danger, alluded to above, that this presumes reason and playing by a set of rules that allow us to make those assumptions. There are some APIs which might do something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;body: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ERROR! IT BLEW UP!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;code: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By doing that we've violated reasonable expectations and have lost trust in the interface, so it's up to us to be vigilant in compliance to those rules as the power of that interface is well worth the extra overhead of adopting it.&lt;/p&gt;

&lt;h3&gt;
  
  
  Without Context
&lt;/h3&gt;

&lt;p&gt;Let's say that we did away with codes for the moment, and a response only contained a body. Take a moment, before continuing, to muse on why that may make things substantially more complicated to use.&lt;/p&gt;

&lt;p&gt;Got it? Well let's take a look into a few implications of removing that additional context to the data.&lt;/p&gt;

&lt;p&gt;How do you define success? An error? Is it somewhere in the body? What if the response is empty, nil, falsy, or any other number of shapes? The JSON could very well take any number of these shapes:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Inline status&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;content: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;data&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;status: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;success&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Empty response&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# No response&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# String error&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;Error: Something went boom&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Number code&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;123456&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now take that potential inconsistency of how we define success and stratify it across every API in the world that plays (mostly) nicely by REST and JSON standards (oh yes, JSON has rules too) and you can see how this quickly becomes a headache.&lt;/p&gt;

&lt;p&gt;Every single API from here on out that you consume plays by its own unique rules, and as a result inflicts the cost of implementing error and success handling on the user rather than on the service. What a painful world that would be to work in, especially if you find yourself consuming several APIs at once and creating wrappers around each to make them play nicely in your own domain.&lt;/p&gt;

&lt;p&gt;Oh, and those wrappers that you'd have to write? You'll very likely end up with some vaguely standardized response type all your own, perhaps or probably still inconsistently, within your own application.&lt;/p&gt;

&lt;h3&gt;
  
  
  Cross-Company Coupling
&lt;/h3&gt;

&lt;p&gt;The more systems are coupled together, and the more they require intimate knowledge of the underlying technologies to work with them, the more difficult you will likely find it to interface.&lt;/p&gt;

&lt;p&gt;If a company were to create a new pseudo-standard on top of HTTP like that above &lt;code&gt;200 Error&lt;/code&gt; bit they have now directly coupled all of your code with their own system for processing errors.&lt;/p&gt;

&lt;p&gt;You're now required to write a wrapper with knowledge of their own strange implementation to get it to reasonably work within your application, as mentioned above, which heavily couples you to their definition of success.&lt;/p&gt;

&lt;p&gt;I'll give you a hint to the next major section: Imagine that internally in your own application / service mesh and how pesky that might be.&lt;/p&gt;

&lt;h3&gt;
  
  
  Consistency
&lt;/h3&gt;

&lt;p&gt;While there is indeed a cost associated with adopting the HTTP Response standard there is undeniably a benefit we derive from playing by its rules. That's why web servers, Rack included, use it.&lt;/p&gt;

&lt;p&gt;It doesn't matter what the underlying data looks like, but it does matter that we can expect a consistent response from any reasonable API adhering to the standard with the same shape and agreeing to the same language of what it means when we say success.&lt;/p&gt;

&lt;p&gt;You go to any company, work on any API, consume any API, or otherwise in this arena and you'll very likely find things very familiar. That's powerful, so incredibly so, and yet we take that for granted.&lt;/p&gt;

&lt;h2&gt;
  
  
  APIs aren't Only External
&lt;/h2&gt;

&lt;p&gt;That's all well and good, but how does that apply to our applications? Why is it relevant and why should we care about this consistency of shapes and HTTP responses?&lt;/p&gt;

&lt;p&gt;Quite simply because API means public interface, and that's not necessarily talking about external interfaces either. Every public method is an API to your application, class, library, or what have you.&lt;/p&gt;

&lt;p&gt;Consider the above for a moment, and think of all the ways you might reflect failure inside of your application, then continue along.&lt;/p&gt;

&lt;h3&gt;
  
  
  What Does it Mean to Fail?
&lt;/h3&gt;

&lt;p&gt;What did you come up with? Probably several different ways, each with a myriad of assumptions and requirements for working with them. Let's look at a few real quick:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Exceptions - String based&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;It failed!&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Exceptions - Class based&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyCustomSpecificUsefulError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Something went wrong&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Returning false or nil (what if falsy is valid? That's fun)&lt;/span&gt;
&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Reasonable empty defaults&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# ...and probably many more&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Even worse is when you realize this same headache applies to what it means to succeed, but we'll skip that one for now.&lt;/p&gt;

&lt;p&gt;You can see how each of these likely has very interesting implications on code that relies on that interface. Now you have to know about all the underlying exceptions, or perhaps whether or not falsy returns are valid, or in the more useful case like with &lt;code&gt;Enumerable&lt;/code&gt; methods you get back a reasonable empty result like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;odd?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; []&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That last one is particularly interesting as we can continue chaining things on the end of that select, and if it actually had data it'd continue down that pipeline. Sounds useful, no? We'll get back to why that's critically important here in a moment, but first...&lt;/p&gt;

&lt;h3&gt;
  
  
  Exception Handling
&lt;/h3&gt;

&lt;p&gt;What if &lt;code&gt;select&lt;/code&gt; instead raised an exception like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Please don't actually do this to `select`:&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Enumerable&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;found_elements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# If calling the block on the element is truthy, add it&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;found_elements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NoResultsHere&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;No data!&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;found_elements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty?&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;found_elements&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Can you imagine working with that? You'd probably have to do something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NoResultsHere&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now make every Enumerable method do that instead, and we've inflicted that error handling on consumers making it a much more unpleasant interface to work with.&lt;/p&gt;

&lt;h3&gt;
  
  
  The Power of Enumerable
&lt;/h3&gt;

&lt;p&gt;The fact that &lt;code&gt;select&lt;/code&gt; and other &lt;code&gt;Enumerable&lt;/code&gt; methods continue to return &lt;code&gt;Enumerable&lt;/code&gt; shaped objects is really something quite useful. It even lets us do something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;even?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;group_by&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;transform_values&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; {false=&amp;gt;150, true=&amp;gt;12600}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You get all of that because &lt;code&gt;Enumerable&lt;/code&gt; agrees on what shape of object to return, allowing you to chain as you will, and allowing you to even route around failure in a way to achieve results.&lt;/p&gt;

&lt;p&gt;This entire concept of reasonable defaults has a name, and that name is &quot;Identity&quot;. It's even a law, fancy that, of something much more interesting when joined with two other laws.&lt;/p&gt;

&lt;p&gt;If you haven't yet, stop and read &lt;a href=&quot;https://dev.to/baweaver/introducing-patterns-in-parallelism-for-ruby-2f4a&quot;&gt;Introducing Patterns for Parallelism for Ruby&lt;/a&gt;. I promise you will find it quite interesting with where your intuition might currently be going with these shapes I've been on about.&lt;/p&gt;

&lt;p&gt;Those shapes have a name, and that name is &quot;Monoid&quot;. Honestly though the name doesn't matter as much as the intuition that these like-typed things can be combined and chained together however we wish. Once you have that, well there are some very interesting possibilities which open up.&lt;/p&gt;

&lt;p&gt;And that? That my friends is where &lt;code&gt;dry-rb&lt;/code&gt; enters the stage with the &lt;code&gt;Result&lt;/code&gt; type.&lt;/p&gt;

&lt;h2&gt;
  
  
  Introducing Our Friend Result
&lt;/h2&gt;

&lt;p&gt;I've spent a good bit of time leading into this, and I do apologize for that, but as a friend once said it's far easier to show the value of painkillers rather than vitamins. In a way you have to experience the absence of something to appreciate what value it might bring, rather than being immediately extolled on its inherit virtues.&lt;/p&gt;

&lt;h3&gt;
  
  
  Setting the Stage
&lt;/h3&gt;

&lt;p&gt;Let's set the stage right quick. You happen to be in a large Rails application that follows along with something like &lt;a href=&quot;https://github.com/Shopify/packwerk&quot;&gt;Packwerk&lt;/a&gt; to clearly delineate different packages in your Rails monolith. Let's say you have 100 packs, which is not particularly unusual with larger applications.&lt;/p&gt;

&lt;p&gt;Now take all 100 of those packs, and give them public interfaces with minimal coupling. We'll say those happen in the pack in a file like &lt;code&gt;public_api.rb&lt;/code&gt; or something similar, go wild really. What matters is there's a single entry point to each package.&lt;/p&gt;

&lt;p&gt;Opening one of those public APIs we might find something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# packs/app/public/service_name.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServiceName&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;offering_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;offering_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;offering_c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;offering_d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;offering_e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All of which reach into the internals of the pack to do very important businessy things, probably some ActiveRecord, and return back a result.&lt;/p&gt;

&lt;p&gt;Remember that bit about defining failure, and the hint on defining success as well? Oh yes:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# packs/app/public/service_name.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServiceName&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Exception&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;offering_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;ServiceModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Nil&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;offering_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;ServiceModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;id: &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# False&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;offering_c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;ServiceModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;id: &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Empty Collection&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;offering_d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;ServiceModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Invalid Object&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;offering_e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;ServiceModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Every single one of them has both an idea of what constitutes success and failure. Now multiply that by 100, where every service takes their own unique and probably very valid approach to this problem and you can imagine it becoming very difficult to reason about. Doubly so when you rely on multiple services input to produce your own output, that means you get all of those services downstream too.&lt;/p&gt;

&lt;p&gt;Now every bit of that error handling or failure handling has now been imposed on the consumer, and you're right back to square one with coupling despite having packages and very firm lines between them. Even returning direct ActiveRecord objects or collections introduces coupling, but that's another matter we won't touch for the moment.&lt;/p&gt;

&lt;p&gt;What if, instead, they agreed on a singular definition and shape of what it means to succeed or fail? Well that's where &lt;code&gt;Result&lt;/code&gt; comes in.&lt;/p&gt;

&lt;h3&gt;
  
  
  The Result Type
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;dry-rb&lt;/code&gt; presents a very interesting solution called Result to this problem, along with very lovely documentation I suggest you wait a moment before reading that you can find &lt;a href=&quot;https://dry-rb.org/gems/dry-monads/1.3/result/&quot;&gt;here&lt;/a&gt;. Ah, and don't mind that &quot;Monad&quot; word, it's not important for the moment.&lt;/p&gt;

&lt;p&gt;It gives us the idea of &lt;code&gt;Success&lt;/code&gt; and &lt;code&gt;Failure&lt;/code&gt;, the two parts that comprise the larger &lt;code&gt;Result&lt;/code&gt; type:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;dry/monads&quot;&lt;/span&gt;

&lt;span class=&quot;kp&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Dry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Monads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Failure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;wrong&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Think of &lt;code&gt;Success&lt;/code&gt; and &lt;code&gt;Failure&lt;/code&gt; almost like that additional context provided by HTTP Responses status code. It's a wrapper that clearly indicates to us whether something is considered successful, or if it had failed somewhere.&lt;/p&gt;

&lt;p&gt;Like Enumerable, we can chain &lt;code&gt;Result&lt;/code&gt; types together because their reasonable default is still a &lt;code&gt;Result&lt;/code&gt; type:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;dry/monads&quot;&lt;/span&gt;

&lt;span class=&quot;kp&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Dry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Monads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Pretend it's a DB of some sort&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;IDS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Red&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;b&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Blue&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;offering_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Failure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ID not found: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;IDS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;key?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;no&quot;&gt;Success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;IDS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;offering_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; Success(&quot;Red&quot;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;offering_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nope&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; Failure(&quot;ID not found: nope&quot;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Remember Enumerable? What happens if we chain each of these?&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;offering_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;We found &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;!&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; Success(&quot;We found Red!&quot;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;offering_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nope&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;We found &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;!&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; Failure(&quot;ID not found: nope&quot;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For &lt;code&gt;Result&lt;/code&gt; types we can call a special method called &lt;code&gt;fmap&lt;/code&gt; on them to do things to the value inside, but if it's a failure? It does nothing, the failure persists through and we get it out at the end.&lt;/p&gt;

&lt;p&gt;It can be far more interesting, though, when applied to pattern matching in Ruby 2.7+:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offering_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Red&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Blue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Found who we were looking for&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Success&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Not who we expected, but still ok&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Failure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/_why/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;He's still in our hearts though&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Failure&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;I give, you win&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can reach inside each of those values based on the fact it's a &lt;code&gt;Result&lt;/code&gt; type, or really we don't even need to reach at all:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offering_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value_or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Yellow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Though perhaps you want the more familiar &lt;code&gt;if&lt;/code&gt; branch:&lt;br&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight js-code-highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offering_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;success?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There's quite a bit you can do with this type of concept, but as with an HTTP Response because we've agreed on that shape and if all of our services play nice with it all of the consumer code can make those same assumptions and handle them the same way.&lt;/p&gt;

&lt;p&gt;Hey, if the shapes all line up, that even means we could combine them or do all types of other interesting tricks like say how &lt;code&gt;Promise&lt;/code&gt; or &lt;code&gt;Future&lt;/code&gt; works with async in Javascript, or how &lt;code&gt;Task&lt;/code&gt; could have a transactional execution list, or maybe &lt;code&gt;Validated&lt;/code&gt; combining multiple errors when trying to create something that's not quite right.&lt;/p&gt;

&lt;p&gt;The collective mental burden that alleviates when navigating a codebase pays dividends over time, just as you very likely never spend much time thinking about HTTP Responses either.&lt;/p&gt;

&lt;p&gt;Good code is useful, but great code is transparent. HTTP Responses are transparent, and I would say that Result types very may well be too.&lt;/p&gt;

&lt;h3&gt;
  
  
  Yeah, but the Underlying Data
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Record screech&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yeah, about that one. You have the same shape, sure, but that doesn't necessarily absolve you from worrying about the data within it. The container may be great and make sense, but that doesn't mean the content is too.&lt;/p&gt;

&lt;p&gt;If you're trying to keep clear boundaries across packs it's probably not wise to directly hand them an ActiveRecord object that can still directly access the database, or that cannot be serialized, or maybe even validated beyond the context of the database. That's only the success branch.&lt;/p&gt;

&lt;p&gt;The failure branch is even more fun. Are we doing String errors now? What about the context, the backtrace, what params it was called with, or any of that other lovely meta information? Granted &lt;code&gt;Result&lt;/code&gt; comes with &lt;a href=&quot;https://dry-rb.org/gems/dry-monads/1.3/tracing-failures/&quot;&gt;Tracing Failures&lt;/a&gt;, but not the point. &lt;/p&gt;

&lt;h3&gt;
  
  
  Standards
&lt;/h3&gt;

&lt;p&gt;The larger the application the more that standards start to become force multipliers rather than annoying rules that someone in infrastructure told you to follow. The part left unsaid there is that defining and creating those standards, especially for something like errors, is really really danged hard.&lt;/p&gt;

&lt;p&gt;There are hundreds if not thousands of possible approaches to these problems, but overall what I've found? Pick one, build on it, and as long as you can agree on what the edges look like you can work from there.&lt;/p&gt;

&lt;p&gt;For me things like &lt;code&gt;Promise&lt;/code&gt;, HTTP Response (and even Request), Result, and other such types make great edges to start from.&lt;/p&gt;

&lt;h2&gt;
  
  
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;Rails wasn't built in a day, and neither will your application. It's a continual and evolving process where we learn and grow, and with our understanding so to changes our opinions. If anything the best advice is to make it easy to change, easy to recover when you fail, and minimize how much systems know about each other.&lt;/p&gt;

&lt;p&gt;Perhaps my opinions will change one day too, they have several times already, but that's about where I'm currently at.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;dry-rb&lt;/code&gt;, to me, presents a set of tools which define edges capable of bearing the weight of larger applications and reducing coupling and complexity. Are they free? No, but nothing ever is. Are they worth it? Well that'll be for you to decide, but I would say they are.&lt;/p&gt;

&lt;p&gt;I'll be taking a look into the &lt;code&gt;dry-rb&lt;/code&gt; libraries more in this series and taking a similar approach of building a case rather than telling you why things are so great or amazing. We're not here for shiny, we're here to solve problems, and perhaps this will solve yours.&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>functional</category>
      <category>endofunctors</category>
    </item>
  </channel>
</rss>
