<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="https://karolgalanciak.com/atom.xml" rel="self" type="application/atom+xml"><link href="https://karolgalanciak.com/" rel="alternate" type="text/html"><updated>2022-11-12T09:01:08+00:00</updated><id>https://karolgalanciak.com/atom.xml</id><title type="html">Karol Galanciak - Distributed Systems Architect and Ruby on Rails expert</title><subtitle>&quot;&quot;</subtitle><author><name>Karol Galanciak</name><email>karol.galanciak@gmail.com</email></author><entry><title type="html">The inherent unreliability of after_commit callbacks and most service objects’ implementation</title><link href="https://karolgalanciak.com/blog/2022/11/12/the-inherent-unreliability-of-after_commit-callback-and-most-service-objects-implementation/" rel="alternate" type="text/html" title="The inherent unreliability of after_commit callbacks and most service objects’ implementation"><published>2022-11-12T08:00:00+00:00</published><updated>2022-11-12T08:00:00+00:00</updated><id>https://karolgalanciak.com/blog/2022/11/12/the-inherent-unreliability-of-after_commit-callback-and-most-service-objects-implementation</id><content type="html" xml:base="https://karolgalanciak.com/blog/2022/11/12/the-inherent-unreliability-of-after_commit-callback-and-most-service-objects-implementation/">&lt;p&gt;Service objects and/or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;after_commit&lt;/code&gt; callbacks are ubiquitous in most real-world Rails applications. Whether it’s a good idea or not (ActiveRecord callbacks - I’m looking at you) is a different story, but one thing that is notoriously overlooked in the &lt;strong&gt;application design&lt;/strong&gt; is &lt;strong&gt;reliability&lt;/strong&gt;. And yes, the service objects are equally bad as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;after_commit&lt;/code&gt; callbacks in that regard.&lt;/p&gt;

&lt;p&gt;Let’s explore the concept of reliability and also some solutions that can help solve the problem.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;using-transactions-and-reliability&quot;&gt;Using transactions and reliability&lt;/h2&gt;

&lt;p&gt;Typically, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;after_commit&lt;/code&gt; callbacks are used for executing side effects after the transaction. And for a good reason! This is usually where some background jobs are scheduled, and it would be pointless to do that from, for example, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;after_save&lt;/code&gt; callback as the transaction can fail. In such a scenario, the background job will never be processed and will keep failing with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ActiveRecord::RecordNotFound&lt;/code&gt;error. So using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;after_commit&lt;/code&gt; sounds like a great design decision, right? Right..?&lt;/p&gt;

&lt;p&gt;Unfortunately - &lt;strong&gt;no&lt;/strong&gt;. Let’s make this problem even more apparent with a simple service object:&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserCreator&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;valid?&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;transaction&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save!&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;UserProfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;user: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;UserCreatedNotifierJob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;MySuperCriticalJobThatAbsolutelyNeedsToBeExecuted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RecordInvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There is nothing special here, and at first glance, it might actually look quite solid - there is a transaction block for two separate writes, so either both will succeed, or both will fail so that the state will be consistent. And also, the side effects are outside the transaction block, and they happen after the commit, just like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;after_commit&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So what’s the problem here?&lt;/p&gt;

&lt;p&gt;There is no guarantee that anything after the transaction block will be executed. As far as the transaction goes, this is entirely clear - it will just work as you expect. However, once the transaction ends, there is a chance that the rest of the logic might just not be executed. And exactly the same thing applies to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;after_commit&lt;/code&gt; callbacks.&lt;/p&gt;

&lt;p&gt;The process might experience Out Of Memory error and will be killed right after the transaction block. It might also be restarted, or maybe the node where the actual process is running might be taken down. There are multiple ways how it can happen. It doesn’t mean that it happens often, it’s more of a relatively rare edge case, but on a huge scale, even the low-chance events can happen multiple times per day. And it would be pretty bad if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MySuperCriticalJobThatAbsolutelyNeedsToBeExecuted&lt;/code&gt; was not executed 100% of the time.&lt;/p&gt;

&lt;p&gt;The key question to ask at this point would be: what’s the solution to that problem? For sure, moving the execution of the side effects to the transaction block is not the solution. Having some errors in the background jobs is definitely the least problematic scenario you could experience.&lt;/p&gt;

&lt;p&gt;Imagine performing some HTTP requests that modify the state in some external service. If the transaction failed, an automatic rollback handled by ActiveRecord wouldn’t be enough - you would also need to execute some compensatory logic on the third-party service, which not only brings massive complexity, but it might also be not easily doable - for example, if that service delivers some notifications, e.g., SMS message or even just sends an email.&lt;/p&gt;

&lt;p&gt;Fortunately, there is a well-established pattern precisely to this problem. It’s a transactional outbox.&lt;/p&gt;

&lt;h2 id=&quot;transactional-outbox-pattern&quot;&gt;Transactional Outbox Pattern&lt;/h2&gt;

&lt;p&gt;The transactional outbox pattern is based on the atomicity of the transactions (and no, we don’t need a distributed transaction here) - either everything fails or everything succeeds.&lt;/p&gt;

&lt;p&gt;To apply this pattern, we need to create something extra in the transaction - a dedicated Outbox Entry record that will stand for the execution of some side effects. Then, some external process will fetch it, execute the side effects, and mark the entry as processed (or destroy the record to not re-execute it again in the future).&lt;/p&gt;

&lt;p&gt;Essentially, it would be using an ACID database as a temporary message queue.&lt;/p&gt;

&lt;p&gt;Here is how we could visualize the entire flow:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/transactional_outbox/transactional_outbox.jpg&quot; alt=&quot;Graph&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;
  &lt;a href=&quot;/assets/images/transactional_outbox/transactional_outbox.jpg&quot; target=&quot;_blank&quot;&gt;See in better quality&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;As the graph shows, the&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserCreator&lt;/code&gt; service creates all the records within the same transaction, including the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OutboxEntry&lt;/code&gt;. Later, some Outbox worker (a separate process) picks unprocessed records (probably in the infinite loop), executes the logic (ideally, scheduling Sidekiq jobs where the actual side effects will be executed), and marks the entries as processed so that the records will not be processed again in the next iteration. It’s important to keep in mind that it will likely imply the at-least-once delivery semantics as the process might get killed after scheduling jobs (but right before marking entries as processed), so the jobs need to be idempotent. Funny enough, that’s another potential reliability issue inside the solution that is supposed to bring more reliability.&lt;/p&gt;

&lt;p&gt;The unclear part is how exactly the Outbox worker will know what logic to execute once it fetches the entries. The essential thing is that the entry itself should contain some indicators. It could be, for example, the event name with the  ID and name of the created model (so here: “user_created” &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;event&lt;/code&gt; with “User” as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;model_class&lt;/code&gt; and its ID as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;model_id&lt;/code&gt;) and based on that, you could implement some pub-sub mechanism using model class and its ID as arguments. Or you could store the name of the service instead of the event name and implement some dedicated method/hook, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;on_success&lt;/code&gt; that would be executed by the worker:&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserCreator&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;on_success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;UserCreatedNotifierJob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;MySuperCriticalJobThatAbsolutelyNeedsToBeExecuted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# original method goes here&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Using events might be a bit more complex, but it can sometimes be worth it. One of the significant benefits is that such a solution will make it easier to use event sourcing in the future or at least have an event-driven architecture.&lt;/p&gt;

&lt;p&gt;We’ve managed to cover service objects, but what about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;after_commit&lt;/code&gt; callbacks? Ideally, you would not use them at all. However, if there are already there in the app and the refactoring/rewrite is not feasible, there are some things that you could do that are not that complex.&lt;/p&gt;

&lt;p&gt;First, you would need to use some other dedicated callback that would work like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;after_commit&lt;/code&gt; but would not be a part of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ActiveRecord&lt;/code&gt;, for example, a custom &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reliable_after_commit&lt;/code&gt; that would have the same interface as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;after_commit&lt;/code&gt;. The next step would be to keep these callbacks in some registry accessible from the outside (like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Model.reliable_after_callbacks&lt;/code&gt;) so that the worker can easily execute each of them. And since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;after_commit&lt;/code&gt; callbacks often contain some logic taking advantage of dirty-tracking (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;previous_changes&lt;/code&gt;), you would also need to store such changeset with the Outbox Entry and bring back that state in the Outbox worker when materializing the model record.&lt;/p&gt;

&lt;p&gt;Sounds complex? Fortunately, you don’t need to implement this logic or even the worker itself. You can use &lt;a href=&quot;https://github.com/BookingSync/rails-transactional-outbox&quot;&gt;rails-transactional-outbox gem&lt;/a&gt; that I extracted from one of the &lt;a href=&quot;https://www.bookingsync.com&quot;&gt;BookingSync&lt;/a&gt;  projects as an experimental way of addressing reliability concerns.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Reliability&lt;/strong&gt; is a factor that is arguably often overlooked when it comes to implementing business logic, at least if judging it by the popularity (or lack of it) of a &lt;strong&gt;transactional outbox pattern&lt;/strong&gt; or other alternatives. Fortunately, the pattern itself is not very complex, and some solutions are available as &lt;a href=&quot;https://github.com/BookingSync/rails-transactional-outbox&quot;&gt;gems&lt;/a&gt; that make it easy to apply the pattern in your Rails applications.&lt;/p&gt;</content><author><name>Karol Galanciak</name><email>karol.galanciak@gmail.com</email></author><category term="Ruby"/><category term="Ruby on Rails"/><category term="Architecture"/><category term="Design"/><category term="Transactional Outbox"/><summary type="html">Service objects and/or after_commit callbacks are ubiquitous in most real-world Rails applications. Whether it’s a good idea or not (ActiveRecord callbacks - I’m looking at you) is a different story, but one thing that is notoriously overlooked in the application design is reliability. And yes, the service objects are equally bad as after_commit callbacks in that regard.</summary></entry><entry><title type="html">The Story of a Critical Issue With Kafka</title><link href="https://karolgalanciak.com/blog/2021/10/10/the-story-of-a-critical-issue-with-kafka/" rel="alternate" type="text/html" title="The Story of a Critical Issue With Kafka"><published>2021-10-10T08:00:00+00:00</published><updated>2021-10-10T08:00:00+00:00</updated><id>https://karolgalanciak.com/blog/2021/10/10/the-story-of-a-critical-issue-with-kafka</id><content type="html" xml:base="https://karolgalanciak.com/blog/2021/10/10/the-story-of-a-critical-issue-with-kafka/">&lt;p&gt;Recently, I’ve had an unfortunate opportunity to deal with a very unexpected issue with Kafka that had quite terrible consequences. The exact origin of the issue is yet to be discovered; nevertheless, the process leading to the final solution to the problem and the fix itself were interesting enough that I decided to write a quick blog post about it as it might be potentially valuable to someone who also encounters a similar problem.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;how-the-issue-was-diagnosed&quot;&gt;How the issue was diagnosed&lt;/h2&gt;

&lt;p&gt;Suddenly, after one of the deployments (nothing related to any change around Kafka or &lt;a href=&quot;http://github.com/karafka/karafka&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;karafka&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;http://github.com/zendesk/ruby-kafka/&quot;&gt;ruby-kafka&lt;/a&gt; gems that we use in the app) we’ve started to receive a massive number of error traces in Datadog APM (precisely, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kafka::ConnectionError: Connection error Errno::ETIMEDOUT: Connection timed out&lt;/code&gt; inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kafka.request.join_group&lt;/code&gt; span) and the number of API calls drastically decreased as well (expressed by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;api.calls{*}&lt;/code&gt; metric from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ruby-kafka&lt;/code&gt; integration with Datadog APM). It turned that no consumer was able to join the consumer group for this particular application. What was even more strange, the config for this application and its Karafka consumers was the same as for other applications, so there must have been something about this consumer group.&lt;/p&gt;

&lt;p&gt;But to verify this, we had to check if it was possible to join this consumer group from a different application, e.g., from the Rails console. There is no simple API for doing such a thing, so the only thing left to me was to study the code of &lt;a href=&quot;http://github.com/zendesk/ruby-kafka/&quot;&gt;ruby-kafka&lt;/a&gt; and figure out how to connect all the dots. That was quite an effort, but I eventually came up with something looking like this:&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;seed_brokers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;KAFKA_SEED_BROKERS&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;client_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;the_name_of_the_consumer_group&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Kafka&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;seed_brokers: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seed_brokers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;client_id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;group_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;the_name_of_the_consumer_group&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;consumer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;consumer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;group_id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cluster&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;consumer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;group_id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instance_variable_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;@cluster&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Kafka&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ConsumerGroup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;cluster: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cluster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;logger: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;group_id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;session_timeout: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;rebalance_timeout: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;retention_time: &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;instrumenter: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instrumenter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Kafka&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Instrumenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;client_id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;assignment_strategy: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;some_example_topic&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s super hacky and dirty (especially using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;instance_variable_get&lt;/code&gt;), but it did the job. The result was that it was possible to join all the consumer groups from the different applications except this problematic one! That meant the issue was not with the application but something on the Kafka cluster side. As the cluster is not a self-hosted one but an AWS MSK service, we had limited capabilities to debug the problem. However, we needed the fix as soon as possible.&lt;/p&gt;

&lt;p&gt;Well, if the problem is just with one consumer group, why not create the new one? And manually set the offset for every topic/partition just like in the original consumer group so that we don’t need to reprocess all the events?&lt;/p&gt;

&lt;h2 id=&quot;how-the-issue-was-addressed&quot;&gt;How the issue was addressed&lt;/h2&gt;

&lt;p&gt;It turned out that it’s a straightforward thing to do, and the offsets are the only thing we care about. That way, it made hardly a difference for the application if it uses the original consumer group or the new one.&lt;/p&gt;

&lt;p&gt;To get the offsets for all topics and partitions, I ran the following command:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kafka-consumer-groups.sh --describe --group the_name_of_the_consumer_group --bootstrap-server KAFKA_SERVER_URI
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The output followed this pattern:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GROUP                                TOPIC          PARTITION  CURRENT-OFFSET  LOG-END-OFFSET  LAG             CONSUMER-ID     HOST            CLIENT-ID
the_name_of_the_consumer_group       topic_name     1          123             124             1               -               -               -
the_name_of_the_consumer_group       topic_name     2          100             200             100             -               -               -

// more topic/partitions
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What I had to do in the next step was to extract TOPIC/PARTITION/CURRENT-OFFSET values and prepare commands that will set the offsets for the new consumer group, let’s call it &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;the_name_of_the_consumer_group_2&lt;/code&gt;. Easily doable with few lines of Ruby.&lt;/p&gt;

&lt;p&gt;To set the offset for a given topic/partition for the new consumer group, it turned out that it needed to be done in 2 steps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Reset the offset (set to beginning):&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kafka-consumer-groups.sh --bootstrap-server KAFKA_SERVER_URI --group the_name_of_the_consumer_group_2 --reset-offsets --to-earliest --topic TOPIC_WITH_PARTITIONS --execute
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The expected format of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TOPIC_WITH_PARTITIONS&lt;/code&gt; is e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;topic_name:1&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Shift offset (from 0) by a given value:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kafka-consumer-groups.sh --bootstrap-server KAFKA_SERVER_URI --group the_name_of_the_consumer_group_2 --reset-offsets --shift-by OFFSET --topic TOPIC_WITH_PARTITIONS --execute
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To prepare the script with interpolated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TOPIC_WITH_PARTITIONS&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OFFSET&lt;/code&gt; values, I performed the following steps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Assign output to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config&lt;/code&gt; variable (excluding the headers):&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;the_name_of_the_consumer_group       topic_name     1          123             124             1               -               -               -
the_name_of_the_consumer_group       topic_name     2          100             200             100             -               -               -&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Build the commands:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;commands&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;topic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/\s+/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/\s+/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/\s+/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

  &lt;span class=&quot;s2&quot;&gt;&quot;kafka-consumer-groups.sh --bootstrap-server KAFKA_SERVER_URI --group the_name_of_the_consumer_group_2 --reset-offsets --to-earliest --topic &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; --execute ; kafka-consumer-groups.sh --bootstrap-server KAFKA_SERVER_URI --group the_name_of_the_consumer_group_2 --reset-offsets --shift-by &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; --topic &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; --execute&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I executed these commands, changed the name of the consumer group in the application form &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;the_name_of_the_consumer_group&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;the_name_of_the_consumer_group_2&lt;/code&gt;, and everything was fine again!&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;When using any complex piece of tech like Kafka, it’s essential to not only have proper monitoring established but also have a good understanding of how it works. That knowledge will definitely pay off if some unexpected issue happens.&lt;/p&gt;</content><author><name>Karol Galanciak</name><email>karol.galanciak@gmail.com</email></author><category term="Kafka"/><category term="Ruby on Rails"/><category term="Ruby"/><category term="Rails"/><summary type="html">Recently, I’ve had an unfortunate opportunity to deal with a very unexpected issue with Kafka that had quite terrible consequences. The exact origin of the issue is yet to be discovered; nevertheless, the process leading to the final solution to the problem and the fix itself were interesting enough that I decided to write a quick blog post about it as it might be potentially valuable to someone who also encounters a similar problem.</summary></entry><entry><title type="html">Multiple databases in a single query in your Rails apps - Postgres Foreign Data Wrappers to the rescue</title><link href="https://karolgalanciak.com/blog/2021/06/27/using-multiple-databases-in-a-single-query-in-your-rails-app-postgres-foreign-data-wrappers-to-the-rescue/" rel="alternate" type="text/html" title="Multiple databases in a single query in your Rails apps - Postgres Foreign Data Wrappers to the rescue"><published>2021-06-27T07:00:00+00:00</published><updated>2021-06-27T07:00:00+00:00</updated><id>https://karolgalanciak.com/blog/2021/06/27/using-multiple-databases-in-a-single-query-in-your-rails-app-postgres-foreign-data-wrappers-to-the-rescue</id><content type="html" xml:base="https://karolgalanciak.com/blog/2021/06/27/using-multiple-databases-in-a-single-query-in-your-rails-app-postgres-foreign-data-wrappers-to-the-rescue/">&lt;p&gt;Imagine that you are building a separate application for your e-commerce system dedicated to business intelligence. In other words, you want to calculate some stats for the orders. So you are going to create some new model, like OrderStat(s), and have a &lt;strong&gt;separate Postgres database&lt;/strong&gt; for a new app. Sounds trivial so far.&lt;/p&gt;

&lt;p&gt;However, how are you going to get the data from the actual Orders? One way of doing that would be to do some data liberation and stream all Orders (or events related to orders) into &lt;a href=&quot;https://karolgalanciak.com/blog/2020/12/20/kafka-for-rubyists-mini-course/&quot;&gt;Kafka&lt;/a&gt; and let the consumers get the &lt;strong&gt;data from Kafka&lt;/strong&gt;.  If that’s ever your plan to have &lt;strong&gt;Kafka in your ecosystem&lt;/strong&gt;, then this is a way better solution than what will be discussed in this article. On the other hand, we went from &lt;strong&gt;querying a single table from a different database&lt;/strong&gt;, which sounds like a straightforward thing, to an event-driven ecosystem backed by Kafka, which is a complex thing, especially if you don’t have much experience with it. This time, for this particular problem, we are going to explore some solution that maybe is not pretty and indicates an architectural smell, but also does the job efficiently - performing queries between &lt;strong&gt;two separate PostgreSQL databases&lt;/strong&gt; (including joins!) using &lt;strong&gt;Foreign Data Wrappers&lt;/strong&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;foreign-data-wrappers&quot;&gt;Foreign Data Wrappers&lt;/h2&gt;

&lt;p&gt;Foreign Data Wrappers is a fantastic feature of PostgreSQL that allows you to query against external data sources. The external data source is not just a different Postgres database - it could be anything as long as the appropriate extension is available for that particular data source. You can make it work with MySQL, Redis, MongoDB, and even Kafka, so the flexibility is quite impressive. Nevertheless, let’s focus on Postgres-to-Postgres integration, which is available out of the box.&lt;/p&gt;

&lt;p&gt;The idea behind FDWs is quite simple - after enabling the extension, we need to define an external server, define the mapping of how to access that server, and create foreign tables, which are adapter/proxy-like tables to an external data source. In the end, we are going to run queries against just yet another table - it will just be a table with some extras compared to a standard one.&lt;/p&gt;

&lt;p&gt;Now that we know the basics let’s see how we could use it in a Rails application.&lt;/p&gt;

&lt;h2 id=&quot;using-in-rails&quot;&gt;Using in Rails&lt;/h2&gt;

&lt;p&gt;Imagine that we have some OrderStat model in our current app, and we need some data from the Order model represented by the “orders” table from a different database.&lt;/p&gt;

&lt;p&gt;We will need four migrations to make it work.&lt;/p&gt;

&lt;p&gt;First, let’s create the extension:&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateFdwExtension&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Migration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;6.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;up&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;CREATE EXTENSION postgres_fdw;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;down&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;DROP EXTENSION postgres_fdw;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, let’s create a server:&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateFdwServer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Migration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;6.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;up&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;CREATE SERVER server_name
      FOREIGN DATA WRAPPER postgres_fdw
      OPTIONS (host 'localhost', dbname 'name_of_external_db');
    &quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;down&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;DROP SERVER server_name&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the next step, we will need to provide the user and password to access that DB:&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateFdwMapping&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Migration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;6.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;up&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;CREATE USER MAPPING FOR CURRENT_USER SERVER name_of_external_db OPTIONS (user '', password '');&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;down&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;DROP USER MAPPING FOR CURRENT_USER SERVER name_of_external_db&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the last step, we will be creating a foreign table. One way of doing this is via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CREATE FOREIGN TABLE orders&lt;/code&gt; where you provide the exact schema for this table, but this is not efficient for a large number of columns. It’s way more convenient to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IMPORT FOREIGN SCHEMA&lt;/code&gt; where you can provide the schema name (unless you went with some custom solution, just use “public” here), name of the table(s), and name of the server, and that’s it! You don’t need to bother with the exact columns and their types and constraints.&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateForeignAccountsTable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Migration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;6.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;up&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;IMPORT FOREIGN SCHEMA public LIMIT TO (orders) FROM SERVER server_name INTO public;&quot;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Alternatively:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# execute &quot;CREATE FOREIGN TABLE orders (&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#     id integer NOT NULL&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#   )&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#     SERVER server_name&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#     OPTIONS (schema_name 'public', table_name 'orders');&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# &quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;down&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;DROP FOREIGN TABLE orders&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And that’s it!&lt;/p&gt;

&lt;p&gt;You could test it using joins:&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# assuming that OrderStat and Order models exist in the app and OrderStat belongs to Order&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;OrderStat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And that’s how you join tables from two different databases :). However, to make it fully work in your Rails app, so that you can, for example, execute simple queries like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OrderStat.joins(:order).first.order&lt;/code&gt;, you might need one adjustment in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Order&lt;/code&gt; model with explicitly specifying the primary key, as otherwise, you might get the following error:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ActiveRecord::UnknownPrimaryKey (Unknown primary key for table orders in model Order.)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So here it is:&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;primary_key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And that’s it!&lt;/p&gt;

&lt;h3 id=&quot;refreshing-schema&quot;&gt;Refreshing schema&lt;/h3&gt;

&lt;p&gt;It’s quite likely that the schema of the “orders” table will change. In such a case, if you need to refresh the schema, just recreate foreign tables.&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;Performing &lt;strong&gt;queries between two different databases&lt;/strong&gt;, especially performing joins, is probably not something that you do every day and, to some extent, might indicate an architectural smell in your ecosystem. Still, it’s worth knowing such an option is available as it might be a very quick win under certain circumstances. Fortunately, it’s a pretty straightforward thing to do using &lt;strong&gt;Postgres Foreign Data Wrappers&lt;/strong&gt;.&lt;/p&gt;</content><author><name>Karol Galanciak</name><email>karol.galanciak@gmail.com</email></author><category term="Ruby on Rails"/><category term="Ruby"/><category term="Postgres"/><category term="databases"/><summary type="html">Imagine that you are building a separate application for your e-commerce system dedicated to business intelligence. In other words, you want to calculate some stats for the orders. So you are going to create some new model, like OrderStat(s), and have a separate Postgres database for a new app. Sounds trivial so far.</summary></entry><entry><title type="html">Kafka for Rubyists Mini Course: Advanced Karafka</title><link href="https://karolgalanciak.com/blog/2021/02/05/kafka-for-rubyists-mini-course-advanced-karafka/" rel="alternate" type="text/html" title="Kafka for Rubyists Mini Course: Advanced Karafka"><published>2021-02-05T08:00:00+00:00</published><updated>2021-02-05T08:00:00+00:00</updated><id>https://karolgalanciak.com/blog/2021/02/05/kafka-for-rubyists-mini-course-advanced-karafka</id><content type="html" xml:base="https://karolgalanciak.com/blog/2021/02/05/kafka-for-rubyists-mini-course-advanced-karafka/">&lt;p&gt;This is the fourth and also the last part of the Kafka For Rubyists mini course. If you are interested in other parts of the course, please check them out &lt;a href=&quot;https://karolgalanciak.com/blog/2020/12/20/kafka-for-rubyists-mini-course/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;4-advanced-karafka&quot;&gt;4. Advanced Karafka&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=ZCZYbCOUDYI&quot;&gt;Video&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/azdaroth/kafka-for-rubyists-advanced-karafka&quot;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Karol Galanciak</name><email>karol.galanciak@gmail.com</email></author><category term="Kafka"/><category term="Karafka"/><category term="Ruby on Rails"/><category term="Ruby"/><summary type="html">This is the fourth and also the last part of the Kafka For Rubyists mini course. If you are interested in other parts of the course, please check them out here.</summary></entry><entry><title type="html">Kafka for Rubyists Mini Course: Advanced Kafka</title><link href="https://karolgalanciak.com/blog/2021/01/15/kafka-for-rubyists-mini-course-advanced-kafka/" rel="alternate" type="text/html" title="Kafka for Rubyists Mini Course: Advanced Kafka"><published>2021-01-15T10:00:00+00:00</published><updated>2021-01-15T10:00:00+00:00</updated><id>https://karolgalanciak.com/blog/2021/01/15/kafka-for-rubyists-mini-course-advanced-kafka</id><content type="html" xml:base="https://karolgalanciak.com/blog/2021/01/15/kafka-for-rubyists-mini-course-advanced-kafka/">&lt;p&gt;This is the third part of the Kafka For Rubyists mini course. If you are interested in other parts of the course, please check them out &lt;a href=&quot;https://karolgalanciak.com/blog/2020/12/20/kafka-for-rubyists-mini-course/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;3-advanced-kafka&quot;&gt;3. Advanced Kafka&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Lw5lmxhctgQ&quot;&gt;Video&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/azdaroth/kafka-for-rubyists-advanced-kafka&quot;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Karol Galanciak</name><email>karol.galanciak@gmail.com</email></author><category term="Kafka"/><category term="Ruby on Rails"/><category term="Ruby"/><summary type="html">This is the third part of the Kafka For Rubyists mini course. If you are interested in other parts of the course, please check them out here.</summary></entry><entry><title type="html">Kafka for Rubyists Mini Course: Consuming and Performance</title><link href="https://karolgalanciak.com/blog/2020/12/27/kafka-for-rubyists-mini-course-consuming-and-performance/" rel="alternate" type="text/html" title="Kafka for Rubyists Mini Course: Consuming and Performance"><published>2020-12-27T10:00:00+00:00</published><updated>2020-12-27T10:00:00+00:00</updated><id>https://karolgalanciak.com/blog/2020/12/27/kafka-for-rubyists-mini-course-consuming-and-performance</id><content type="html" xml:base="https://karolgalanciak.com/blog/2020/12/27/kafka-for-rubyists-mini-course-consuming-and-performance/">&lt;p&gt;This is the second part of the Kafka For Rubyists mini course. If you are interested in other parts of the course, please check them out &lt;a href=&quot;https://karolgalanciak.com/blog/2020/12/20/kafka-for-rubyists-mini-course/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;2-consuming-and-performance&quot;&gt;2. Consuming and Performance&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=-MG9Qf-WJrA&quot;&gt;Video&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/azdaroth/kafka-for-rubyists-consuming-and-performance&quot;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Karol Galanciak</name><email>karol.galanciak@gmail.com</email></author><category term="Kafka"/><category term="Ruby on Rails"/><category term="Ruby"/><summary type="html">This is the second part of the Kafka For Rubyists mini course. If you are interested in other parts of the course, please check them out here.</summary></entry><entry><title type="html">Kafka for Rubyists Mini Course: Fundamentals</title><link href="https://karolgalanciak.com/blog/2020/12/20/kafka-for-rubyists-mini-course-fundamentals/" rel="alternate" type="text/html" title="Kafka for Rubyists Mini Course: Fundamentals"><published>2020-12-20T11:32:00+00:00</published><updated>2020-12-20T11:32:00+00:00</updated><id>https://karolgalanciak.com/blog/2020/12/20/kafka-for-rubyists-mini-course-fundamentals</id><content type="html" xml:base="https://karolgalanciak.com/blog/2020/12/20/kafka-for-rubyists-mini-course-fundamentals/">&lt;p&gt;This is the first part of the Kafka For Rubyists mini course. If you are interested in other parts of the course, please check them out &lt;a href=&quot;https://karolgalanciak.com/blog/2020/12/20/kafka-for-rubyists-mini-course/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;1-fundamentals&quot;&gt;1. Fundamentals&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;1.1 Intro to Kafka
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=kuNKQgWdl8g&quot;&gt;Video&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/azdaroth/kafka-for-rubyists-intro-to-kafka&quot;&gt;Slides&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;1.2. Modelling topics and publishing messages
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=e1g8D7wAIA8&quot;&gt;Video&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/azdaroth/kafka-for-rubyists-topics-and-publishing-messages&quot;&gt;Slides&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;1.3. Karafka in practice:
    &lt;ul&gt;
      &lt;li&gt;1.3.1 Producers
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=YCpr-AQlK2I&quot;&gt;Video&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;1.3.2 Consumers
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=ZQ2ls3f_h8k&quot;&gt;Video&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;1.4. Monitoring
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=wpRIpuG8EF4&quot;&gt;Video&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/azdaroth/kafka-for-rubyists-monitoring&quot;&gt;Slides&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Karol Galanciak</name><email>karol.galanciak@gmail.com</email></author><category term="Kafka"/><category term="Ruby on Rails"/><category term="Ruby"/><summary type="html">This is the first part of the Kafka For Rubyists mini course. If you are interested in other parts of the course, please check them out here.</summary></entry><entry><title type="html">Kafka for Rubyists Mini Course</title><link href="https://karolgalanciak.com/blog/2020/12/20/kafka-for-rubyists-mini-course/" rel="alternate" type="text/html" title="Kafka for Rubyists Mini Course"><published>2020-12-20T11:30:00+00:00</published><updated>2020-12-20T11:30:00+00:00</updated><id>https://karolgalanciak.com/blog/2020/12/20/kafka-for-rubyists-mini-course</id><content type="html" xml:base="https://karolgalanciak.com/blog/2020/12/20/kafka-for-rubyists-mini-course/">&lt;p&gt;I’ve been recently planning to record a couple of tutorials for my team in &lt;a href=&quot;https://www.bookingsync.com&quot;&gt;BookingSync&lt;/a&gt;, focusing mostly on monitoring and some other more advanced aspects of &lt;strong&gt;Kafka&lt;/strong&gt; and &lt;strong&gt;Karafka&lt;/strong&gt;. But if I was already recording something, then why not make it available publicly so that more developers could benefit from it?  So, in the end, I decided to make a bit more effort and recorded this &lt;strong&gt;mini-course&lt;/strong&gt;, which will be available for everyone, for free ;).&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;This course consists of 5 blocks (including intro):&lt;/p&gt;

&lt;h3 id=&quot;0-intro-to-course&quot;&gt;0. Intro to course&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=OK8k-krza0Y&quot;&gt;Intro&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;1-fundamentals&quot;&gt;1. Fundamentals&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;1.1 Intro to Kafka
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=kuNKQgWdl8g&quot;&gt;Video&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/azdaroth/kafka-for-rubyists-intro-to-kafka&quot;&gt;Slides&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;1.2. Modelling topics and publishing messages
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=e1g8D7wAIA8&quot;&gt;Video&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/azdaroth/kafka-for-rubyists-topics-and-publishing-messages&quot;&gt;Slides&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;1.3. Karafka in practice:
    &lt;ul&gt;
      &lt;li&gt;1.3.1 Producers
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=YCpr-AQlK2I&quot;&gt;Video&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;1.3.2 Consumers
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=ZQ2ls3f_h8k&quot;&gt;Video&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;1.4. Monitoring
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=wpRIpuG8EF4&quot;&gt;Video&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/azdaroth/kafka-for-rubyists-monitoring&quot;&gt;Slides&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-consuming-and-performance&quot;&gt;2. Consuming and Performance&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=-MG9Qf-WJrA&quot;&gt;Video&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/azdaroth/kafka-for-rubyists-consuming-and-performance&quot;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3-advanced-kafka&quot;&gt;3. Advanced Kafka&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Lw5lmxhctgQ&quot;&gt;Video&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/azdaroth/kafka-for-rubyists-advanced-kafka&quot;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;4-advanced-karafka&quot;&gt;4. Advanced Karafka&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=ZCZYbCOUDYI&quot;&gt;Video&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/azdaroth/kafka-for-rubyists-advanced-karafka&quot;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s the plan for this mini-course, and hopefully, you will learn a lot from it, and have an enjoyable experience.&lt;/p&gt;</content><author><name>Karol Galanciak</name><email>karol.galanciak@gmail.com</email></author><category term="Kafka"/><category term="Ruby on Rails"/><category term="Ruby"/><summary type="html">I’ve been recently planning to record a couple of tutorials for my team in BookingSync, focusing mostly on monitoring and some other more advanced aspects of Kafka and Karafka. But if I was already recording something, then why not make it available publicly so that more developers could benefit from it? So, in the end, I decided to make a bit more effort and recorded this mini-course, which will be available for everyone, for free ;).</summary></entry><entry><title type="html">Tracking All Paper Trail Version From A Single Request With Correlation UUIDs</title><link href="https://karolgalanciak.com/blog/2020/09/20/tracking-all-paper-trail-version-from-a-single-request-with-correlation-uuids/" rel="alternate" type="text/html" title="Tracking All Paper Trail Version From A Single Request With Correlation UUIDs"><published>2020-09-20T09:00:00+00:00</published><updated>2020-09-20T09:00:00+00:00</updated><id>https://karolgalanciak.com/blog/2020/09/20/tracking-all-paper-trail-version-from-a-single-request-with-correlation-uuids</id><content type="html" xml:base="https://karolgalanciak.com/blog/2020/09/20/tracking-all-paper-trail-version-from-a-single-request-with-correlation-uuids/">&lt;p&gt;If you’ve ever had a need to implement an &lt;strong&gt;audit log&lt;/strong&gt; to track all the changes that get persisted for all or at least some models in your application, there is a good chance that you’ve encountered &lt;a href=&quot;https://github.com/paper-trail-gem/paper_trail&quot;&gt;PaperTrail gem&lt;/a&gt; that makes it trivial to &lt;strong&gt;track all the changes&lt;/strong&gt; - it might be as easy as adding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;has_paper_trail&lt;/code&gt; to the desired models.&lt;/p&gt;

&lt;p&gt;However, storing versions is just one thing. The other one is using them later, which sometimes might be far from obvious. For example, you see that some record was updated, but you don’t exactly know why. Maybe you have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;whodunnit&lt;/code&gt; stored, but it still doesn’t give you the entire picture as there might be multiple ways how a given record can be updated and you are trying to establish some &lt;strong&gt;causality&lt;/strong&gt; between multiple actions as one update can lead to another one that can lead to yet another one. Not to mention that the persistence can be executed from the background jobs, which will mean that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;whodunnit&lt;/code&gt; will either be nil or be something else (if you, for example, decide to use the name of the job class for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;paper_trail_user&lt;/code&gt;). Merely using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;created_at&lt;/code&gt; won’t be that useful for sure as it’s not enough to group versions form the same context.&lt;/p&gt;

&lt;p&gt;Fortunately, there is an easy solution to this problem, which is also quite simple to implement - it’s adding a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;correlation UUID&lt;/code&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;what-is-correlation-uuid&quot;&gt;What Is Correlation UUID?&lt;/h2&gt;

&lt;p&gt;Correlation UUID is a value in UUID format that is used for grouping &lt;em&gt;things&lt;/em&gt; (events, logs…) that have the same origin (e.g., a specific action) that helps establish the causality (how exactly you ended up with something and what events lead to it). Thanks to that, you can easily figure out what happened during a specific request by assigning the same value of correlation UUID to all PaperTrailVersion records that got created. Furthermore, you can also track its side effects by reusing the same value in background jobs, e.g., in Sidekiq.&lt;/p&gt;

&lt;p&gt;You might be wondering if this really has to be in UUID format, but the answer here is simple: no, it doesn’t need to be. For example, you can use ULID, which could even be a better choice as it has the benefit of being lexicographically sortable. It just happens that UUID is the most popular approach and it’s easy to generate.&lt;/p&gt;

&lt;h2 id=&quot;how-to-implement-correlation-uuid-for-papertrailversions&quot;&gt;How to implement Correlation UUID for PaperTrailVersions&lt;/h2&gt;

&lt;p&gt;The most straightforward approach would be assigning some global value unique per request (which implies the need for thread-safety) before saving the version. So what we need is an extra column (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;correlation_uuid&lt;/code&gt;) and something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Thread.current&lt;/code&gt; store but with values erased after each request. Fortunately, there is a gem that does exactly that: &lt;a href=&quot;https://github.com/steveklabnik/request_store&quot;&gt;request_store&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Using a global is quite ugly, but it allows us to implement the desired feature in a simple way, and it doesn’t necessarily make the design worse as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;paper_trail&lt;/code&gt; already uses a similar global for storing, e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;whodunnit&lt;/code&gt; value.&lt;/p&gt;

&lt;p&gt;Here is how an example UUID generator could look like:&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RequestCorrelationUuidGenerator&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;uuid&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:correlation_uuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SecureRandom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;uuid&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:correlation_uuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;store&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;RequestStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:paper_trail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;private_class_method&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:store&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;paper_trail&lt;/code&gt; stores global data in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RequestStore.store[:paper_trail]&lt;/code&gt; so it’s a reasonable idea to reuse it for storing our correlation UUID.&lt;/p&gt;

&lt;p&gt;Now, that we have a generator, let’s add a callback to the to PaperTrailVersion model:&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PaperTrail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Version&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;before_create&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ensure_correlation_uuid_assigned&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ensure_correlation_uuid_assigned&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;correlation_uuid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RequestCorrelationUuidGenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;uuid&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And that’s it! That will be enough to group version coming from a single request. Now, if you find something suspicious, you can take the correlation UUID, find other versions with that value, order them by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;created_at,&lt;/code&gt; and the debugging should be way more pleasant. Just don’t forget to add the index ;).&lt;/p&gt;

&lt;h2 id=&quot;correlation-uuid-for-further-side-effects---how-to-use-it-in-background-jobs&quot;&gt;Correlation UUID for further side-effects - how to use it in background jobs?&lt;/h2&gt;

&lt;p&gt;As I mentioned earlier, it might be quite valuable to pass the correlation UUID further to the background jobs, so that we can understand every step of the saga that originated from a specific action.&lt;/p&gt;

&lt;p&gt;Of course, background jobs are not requests, but fortunately, it’s not that difficult to reuse our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RequestCorrelationUuidGenerator&lt;/code&gt; inside jobs.&lt;/p&gt;

&lt;p&gt;Since Sidekiq is arguably the most popular solution for background jobs processing in Rails apps, I will show an example solution for Sidekiq. However, the idea itself should be possible to replicate for every other processor.&lt;/p&gt;

&lt;p&gt;As a prerequisite to make it work with Sidekiq, we will need to introduce &lt;a href=&quot;https://github.com/madebylotus/request_store-sidekiq&quot;&gt;request_store-sidekiq&lt;/a&gt; gem. Since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;request_store&lt;/code&gt; clears the storage after each request, so that the values don’t stick between them, we need something that will do the same thing, but after the job is processed. And that’s exactly what this gem does.&lt;/p&gt;

&lt;p&gt;The first problem that we need to solve is to make the correlation UUID somehow available in the job. One way to do this would be to make it an argument of the job, but that sounds painful to deal with. Ideally, we would have something that doesn’t force us to change the signature of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;perform&lt;/code&gt; method, and that injects the value without us doing it directly in any place. The second problem to solve would be to extract somehow the value of correlation UUID before the job gets executed and set that UUID for the global context (for a current Thread) using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RequestCorrelationUuidGenerator.uuid=&lt;/code&gt; attribute writer.&lt;/p&gt;

&lt;p&gt;Fortunately, Sidekiq has us covered as it allows us to add some extra behavior when enqueuing the job and around the execution of the job. We can do that using &lt;a href=&quot;https://github.com/mperham/sidekiq/wiki/Middleware&quot;&gt;middlewares&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What we will need are two middlewares:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;a client middleware that will inject the correlation UUID to the job&lt;/li&gt;
  &lt;li&gt;a server middleware that will set the correlation UUID&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is an example implementation of the desired client middleware:&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InjectCorrelationUuidMiddleware&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_worker_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_redis_pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;correlation_uuid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RequestCorrelationUuidGenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;uuid&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;job&lt;/code&gt; is a hash of a serialized job, we can put there pretty much anything we want. That way, we will make sure that the correlation UUID is stored in Redis.&lt;/p&gt;

&lt;p&gt;And here is the server middleware:&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SetCorrelationUuidMiddleware&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;RequestCorrelationUuidGenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;uuid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;correlation_uuid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RequestCorrelationUuidGenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The last thing we need to do is to actually inject these middlewares so that Sidekiq can make the proper use of them. We can put that in an initializer:&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Sidekiq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configure_client&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;client_middleware&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;InjectCorrelationUuidMiddleware&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Sidekiq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configure_server&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;client_middleware&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;InjectCorrelationUuidMiddleware&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;server_middleware&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SetCorrelationUuidMiddleware&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To understand more about middlewares, it would definitely help to get through the &lt;a href=&quot;https://github.com/mperham/sidekiq/wiki/Middleware&quot;&gt;docs&lt;/a&gt;. What is important to remember here is that jobs can also enqueue other jobs. That’s why we need to add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SetCorrelationUuidMiddleware&lt;/code&gt; twice - one for the client (e.g., for the request) and for the server (other jobs).&lt;/p&gt;

&lt;h2 id=&quot;alternatives-and-similar-problems&quot;&gt;Alternatives and similar problems&lt;/h2&gt;

&lt;p&gt;If you find yourself often wondering about the causality between the events, state transition, and trying to figure out how you exactly ended up in a given state, you might consider changing the implementation of your domain model and perhaps introduce CQRS and Event Sourcing. You might also want to check Sagas and Process Managers. Even though these are the concepts that are used rather in distributed systems, you might still find them useful if you have a complex logic that gets executed in the jobs that often enqueue other jobs.&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;Having &lt;strong&gt;correlation UUID&lt;/strong&gt; assigned to &lt;strong&gt;PaperTrail Versions&lt;/strong&gt; is something that might significantly &lt;strong&gt;help with debugging&lt;/strong&gt;. Fortunately, it’s something that is not that difficult to implement.&lt;/p&gt;</content><author><name>Karol Galanciak</name><email>karol.galanciak@gmail.com</email></author><category term="Ruby"/><category term="Rails"/><category term="Ruby on Rails"/><category term="Paper Trail"/><category term="Audit Log"/><category term="Correlation UUID"/><summary type="html">If you’ve ever had a need to implement an audit log to track all the changes that get persisted for all or at least some models in your application, there is a good chance that you’ve encountered PaperTrail gem that makes it trivial to track all the changes - it might be as easy as adding has_paper_trail to the desired models.</summary></entry><entry><title type="html">Race Conditions on Rails</title><link href="https://karolgalanciak.com/blog/2020/06/07/race-conditions-on-rails/" rel="alternate" type="text/html" title="Race Conditions on Rails"><published>2020-06-07T20:00:00+00:00</published><updated>2020-06-07T20:00:00+00:00</updated><id>https://karolgalanciak.com/blog/2020/06/07/race-conditions-on-rails</id><content type="html" xml:base="https://karolgalanciak.com/blog/2020/06/07/race-conditions-on-rails/">&lt;p&gt;Imagine that you are implementing a payment processing system for the e-commerce system and discover that multiple customers were &lt;strong&gt;charged twice&lt;/strong&gt; for exactly the same order. Ouch… Sounds like a real &lt;strong&gt;nightmare&lt;/strong&gt; to deal with! And the next day, you see that something is not right with the credits system in which users were able to pay using special credits instead of using credit card - somehow instead of getting charged $100 in total for two orders of $25 and $75, they were charged just 25$! And to make it even more epic, it turned out that the &lt;strong&gt;uniqueness validation&lt;/strong&gt; you added didn’t work at all, and now you have three users with the same email address!&lt;/p&gt;

&lt;p&gt;Hopefully, such a grim reality is &lt;strong&gt;not inevitable&lt;/strong&gt;. To avoid such nasty issues, we need to be careful about potential &lt;strong&gt;race conditions&lt;/strong&gt; and understand the circumstances where they might happen and what kind of &lt;strong&gt;protective measures&lt;/strong&gt; we could apply.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;race-conditions---what-are-they&quot;&gt;Race conditions - what are they?&lt;/h2&gt;

&lt;p&gt;Race conditions are undesirable situations caused when the concurrent execution of the code causes negative consequences comparing to the scenario of having them executed sequentially. If you are used to dealing with threads, race conditions could sound like a regular thing. However, race conditions are as likely to happen when you run multiple processes of the same application! It might seem counterintuitive at first glance, but keep in mind that in most cases, there are some shared components between processes. In Ruby on Rails application, it will most likely be a database.&lt;/p&gt;

&lt;p&gt;Let’s take a look at a couple of common race conditions scenarios and protective measures against them.&lt;/p&gt;

&lt;h2 id=&quot;multi-threaded-servers-and-mutable-globals&quot;&gt;Multi-threaded servers and mutable globals&lt;/h2&gt;

&lt;p&gt;Saying that global variables are not a good idea will be nothing extraordinary. However, the issues with globals get pretty bad when you operate in a multi-threaded environment. A notable example for Rails apps would be Puma web server. By default, every Puma instance will use up to 5 threads. That approach certainly has some great benefits.  On the other hand, you can easily expose yourself to race conditions with global variables if you are not careful.&lt;/p&gt;

&lt;p&gt;Let’s examine some antipattern: a global variable for the current user’s IP. One of the “creative” ways of implementing this pattern would be having &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User.current_ip&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User.current_ip=&lt;/code&gt; method for class-level attribute reader and writer:&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class=&quot;vc&quot;&gt;@@current_ip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current_ip&lt;/span&gt;
    &lt;span class=&quot;vc&quot;&gt;@@current_ip&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current_ip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vc&quot;&gt;@@current_ip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s say that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User.current_ip&lt;/code&gt; is set in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ApplicationController&lt;/code&gt; for every controller action and is later persisted when performing any write action, just to know the person and their IP address behind all the changes.&lt;/p&gt;

&lt;p&gt;The original idea of having a nice audit log sounded good, but if you ever decide to go with this kind of implementation, don’t be surprised if the wrong IP addresses get persisted. But what’s the actual problem?&lt;/p&gt;

&lt;p&gt;Globals as class-level variables are shared by all threads within the same process. Imagine that we have a single Puma worker with 5 threads and we have 2 requests roughly at the same time:
User A decides to change their password. They typed a new one and clicked some &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;save&lt;/code&gt; button. A hypothetical &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UsersController#update&lt;/code&gt; action is hit, and the proper IP is set.
Roughly at the same time, User B visits some page, and again, the IP address is set.
The change of the password gets persisted, along with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User.current_ip&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In such a case, it would look like as if the User B changed User’s A address as it could be their IP address that would get stored for that change! That’s a typical race condition that easily happens when using global variables that way.&lt;/p&gt;

&lt;p&gt;Does it mean that it’s not possible to use global variables without risk of race conditions?&lt;/p&gt;

&lt;p&gt;Well, if the global is indeed the only way (hint: usually, it isn’t), you could still use a thread-local variable, which is still a global variable, but visible only within a current thread. It exposes hash-like methods for reading and setting values, which makes it quite convenient to use:&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current_ip&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:current_ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current_ip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:current_ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That way, you can still use globals and protect yourself from race conditions (although it won’t protect you from the ugly code).&lt;/p&gt;

&lt;h2 id=&quot;lack-of-database-constraints&quot;&gt;Lack of database constraints&lt;/h2&gt;

&lt;p&gt;Let’s look at the typical example: a signup process. We ask users to provide email, password, and password confirmation and let them sign up by clicking a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sign up&lt;/code&gt; button. We don’t want to have multiple user records with the same email, so we add a uniqueness validation:&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;validates&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;uniqueness: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Any idea what is going to happen is some user clicks the button quickly three times in a row? There is a good chance that three records will be created, and the uniqueness validation won’t provide any benefit!&lt;/p&gt;

&lt;p&gt;One critical thing to understand here is that a uniqueness validation doesn’t ensure uniqueness at all - it’s rather for displaying a helpful validation error in the absence of race conditions. When clicking the button three times quickly in a row, we are quite likely to have the following scenario:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Request 1 - check if a user exists, and proceed as no user with that email is found.&lt;/li&gt;
  &lt;li&gt;Request 2 - check if a user exists, and proceed as no user with that email is found.&lt;/li&gt;
  &lt;li&gt;Request 3 - check if a user exists, and proceed as no user with that email is found.&lt;/li&gt;
  &lt;li&gt;Request 1 - arrive at the code that inserts data into the database. A new user record gets created.&lt;/li&gt;
  &lt;li&gt;Request 2 - arrive at the code that inserts data into the database. A new user record gets created.&lt;/li&gt;
  &lt;li&gt;Request 3 - arrive at the code that inserts data into the database. A new user record gets created.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The only way to protect ourselves against this kind of race condition in all scenarios would be adding a unique index on the database level. Or you could prevent concurrent execution of that code with an advisory lock (which is covered later in the article).&lt;/p&gt;

&lt;p&gt;There is one more variation of this problem, that can also be caused by a race condition, but this time a lack of proper database constraint would be an issue. Imagine that Traveller A wants to book a stay between 3rd of June 2021 and 10th of June 2021, and Traveller B wants to book a stay between 2nd od June 2021 and 7th of June 2021, and they create a reservation, roughly at the same time - making a validation that checks if the dates are available useless as far as data integrity goes.&lt;/p&gt;

&lt;p&gt;The solution is again handling it on the database level. For this particular example, we could take advantage of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tsrange&lt;/code&gt; in PostgreSQL. A typical example of  ensuring uniqueness for a datetime range would look like this:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reservations&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ADD&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CONSTRAINT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no_overlapping_reservations&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EXCLUDE&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;USING&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;property_id&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tsrange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;pessimistic-locking&quot;&gt;Pessimistic locking&lt;/h2&gt;

&lt;p&gt;Let’s get back to the example from the introduction to the article. Imagine that in your e-commerce system, you can either pay with a credit card or credits that can be added to the user. Some hypothetical user has 100 credits - just enough to pay for two orders, with a total price of $25 and $75. Interestingly enough, this user knows something about software development and wants to check if the system can handle some nasty edge-cases and decides to do a little experiment: pay for these two orders roughly at the same time and check what happens. It turns out that both orders are marked as paid, and there are still 75 credits available!&lt;/p&gt;

&lt;p&gt;Sounds pretty bad, huh? Let’s take a look at the code then:&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;charge_user_for_order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;transaction&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;credits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;price&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save!&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;paid!&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Well, we have some method that finds a user and order, subtracts credits from the user, persists that change, and marks the order as paid. It’s pretty much what we expected, what could go wrong?&lt;/p&gt;

&lt;p&gt;The problem here is the result of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-=&lt;/code&gt; operation. We might expect it to be 0 after paying for both orders, but with concurrent execution of the code, it’s quite likely that the following scenario will happen:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Request A: load User and Order&lt;/li&gt;
  &lt;li&gt;Request B: load User and Order&lt;/li&gt;
  &lt;li&gt;Request A: set user’s credits to 100 - 75 and persist the change&lt;/li&gt;
  &lt;li&gt;Request B: set user’s credits to 100 - 25 and persist the change&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that’s exactly how we can end up with having both orders paid and 75 credits available.&lt;/p&gt;

&lt;p&gt;Fortunately, it’s quite easy to avoid it: we would just need to acquire a row-level lock using ActiveRecord’s Pessimistic Locking feature and its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lock!&lt;/code&gt; method, which makes it one extra line in our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;charge_user_for_order&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;charge_user_for_order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;transaction&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lock!&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# do not forget about this!&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;credits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;price&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save!&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;paid!&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What happens under the hood is that ActiveRecord will perform &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SELECT FOR UPDATE&lt;/code&gt; query, which will prevent any modification of that record within any other transaction (or will wait until concurrent transaction finishes) as long as it’s also locked in that transaction. Also, it internally reloads the record (with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reload&lt;/code&gt; method). That way can be sure we operate on the most recent data.&lt;/p&gt;

&lt;h2 id=&quot;advisory-lock&quot;&gt;Advisory lock&lt;/h2&gt;

&lt;p&gt;It often happens that we need to prevent concurrent execution of the code, but it’s not the database table or a database row that we need to have locked. Instead, we need something like Ruby &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mutex&lt;/code&gt; that would be applicable to multiple processes, not to just threads within the same process, so that the  code will be executed sequentially.&lt;/p&gt;

&lt;p&gt;Fortunately, PostgresSQL offers a great feature for precisely this purpose - &lt;a href=&quot;https://www.postgresql.org/docs/12/explicit-locking.html#ADVISORY-LOCKS&quot;&gt;advisory locks&lt;/a&gt;. What is more, there is &lt;a href=&quot;https://github.com/ClosureTree/with_advisory_lock&quot;&gt;with_advisory_lock&lt;/a&gt; gem that simplifies using advisory locks.&lt;/p&gt;

&lt;p&gt;So what would be the case where advisory locks would be useful? Imagine a situation where you need to fetch some file from Amazon S3, modify its content, and upload it back after the modification. To be more precise, we have some Sidekiq workers that handle this logic in the background, and the code looks like this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;S3Worker&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Sidekiq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Worker&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fetch_file&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;modify_file&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;upload_file&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What’s going to happen if this code is executed concurrently by 5 workers? Depending on when the file fetching and uploading happens, we can get very different results, but we will surely have a huge inconsistency in the end. And the result would be very different comparing to having the jobs executed one by one.&lt;/p&gt;

&lt;p&gt;It sounds like a significant potential issue, but fortunately, advisory locks can easily prevent the concurrent execution of the code. That’s what the code could look like with a little help coming from &lt;a href=&quot;https://github.com/ClosureTree/with_advisory_lock&quot;&gt;with_advisory_lock&lt;/a&gt; gem:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;S3Worker&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Sidekiq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Worker&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;with_advisory_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;S3Worker-Lock&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;fetch_file&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;modify_file&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;upload_file&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once a lock with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S3Worker-Lock&lt;/code&gt; is acquired, every process trying to acquire the same lock will need to wait until the existing one is released. And that’s how we can ensure the sequential execution of the jobs, despite the concurrency coming from having multiple processes.&lt;/p&gt;

&lt;p&gt;What is also interesting is that we could replace pessimistic locks with advisory locks, which might make sense in some circumstances. One example could be a high frequency of updates of the same row within the different transactions that take a considerable amount of time, and waiting until each of them finishes might not be an option, which would be especially desired if the different updates have nothing in common.&lt;/p&gt;

&lt;p&gt;This could even be the case in our previous example with credits. This is how we could rewrite the code to use an advisory lock instead of a row-level lock:&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;charge_user_for_order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;transaction&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;with_advisory_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;charge_user_for_order_&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order_id&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;credits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;price&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save!&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;paid!&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As long as we don’t modify the same attributes in any other transactions, we should be fine without using pessimistic locking. But if the same attributes of either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;order&lt;/code&gt; were getting modified elsewhere as well, we might get some deadlocks.&lt;/p&gt;

&lt;p&gt;There is one crucial thing to keep in mind when using an advisory lock instead of pessimistic locking - watch out when you materialize the record as there is no &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reload&lt;/code&gt;ing of the record in the code! This could result in the same problem that we initially wanted to fix with pessimistic locking. For example, an advisory lock is pretty much useless here:&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;charge_user_for_order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;transaction&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;with_advisory_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;charge_user_for_order_&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order_id&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;credits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;price&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save!&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;paid!&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;order&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt; are materialized before acquiring the advisory lock, so even if we block the concurrent execution of the code, we could end up with executing further logic on the outdated records. That’s why we need to wrap the execution of the entire logic inside the advisory lock, not just a small part of it.&lt;/p&gt;

&lt;h2 id=&quot;redlock&quot;&gt;Redlock&lt;/h2&gt;

&lt;p&gt;What if you don’t use PostgreSQL but still need a distributed lock/mutex for the use case like with S3 operations? If you use Redis, that shouldn’t be a problem. You could use some solution implementing &lt;a href=&quot;https://redis.io/topics/distlock&quot;&gt;Redlock&lt;/a&gt; - an algorithm implementing a distributed lock.&lt;/p&gt;

&lt;p&gt;It turns that there is a solid gem for that purpose: &lt;a href=&quot;https://github.com/leandromoreira/redlock-rb&quot;&gt;redlock-rb&lt;/a&gt;, which makes it easy to use in the Rails apps as we don’t need to figure it out on our own. However, it is not a replacement for an advisory lock, as it needs to be used a bit differently. Check the following example out:&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;redlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Redlock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;redis://localhost:6379&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;expiration_time_in_milliseconds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60_000&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;first_lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock_manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;S3Worker-Lock&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expiration_time_in_milliseconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; almost immediately returns a hash containing data about the lock&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;second_lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock_manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;S3Worker-Lock&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expiration_time_in_milliseconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; almost immediately returns `false`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we used an advisory lock (at least via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with_advisory_lock&lt;/code&gt; method, there is also &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with_advisory_lock_result&lt;/code&gt; method, which works a bit differently), the second job would be waiting until the first lock is released and then execute the logic. With Redlock, the second job would return immediately without executing the logic. That could actually be the desired behavior, as maybe there is no need to execute the same thing twice. Still, if we wanted to have the same behavior as in the original example, we would need to take care of it on our own, e.g., by retrying the job later.&lt;/p&gt;

&lt;h2 id=&quot;optimistic-locking&quot;&gt;Optimistic locking&lt;/h2&gt;

&lt;p&gt;When our system allows multiple users to operate on the same records, we might run into critical problems. For example, we might want to make sure that every time someone makes a decision, it is done based on the latest data. One use case would be making a refund to the customer so that we grant that person some special credits that can be used later for the purchases. If multiple people can do that and roughly at the same time they see that there is some refund to be made, we might have an unfortunate scenario where the credits are given twice. In such a case, what would be desired is not allowing the second operation to happen, which comes down to optimistic locking.&lt;/p&gt;

&lt;p&gt;It turns out that this is a pretty simple thing to achieve in Rails - it requires merely adding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lock_version&lt;/code&gt; column to the model’s table, and that’s it, you don’t even need to add any extra config! ActiveRecord is going to take care of incrementing it on every update. That way, ActiveRecord will prevent an update of the record if the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lock_version&lt;/code&gt; for that particular record has changed by raising &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ActiveRecord::StaleObjectError&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;user_1_a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;user_1_b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;user_1_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;credits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;user_1_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save!&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; works just fine&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;user_1_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;credits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;user_1_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save!&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; raises ActiveRecord::StaleObjectError&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Race conditions&lt;/strong&gt;, even outside of multi-threaded code, can have pretty terrible consequences if they are not prevented before they happen. Fortunately, by understanding just several possible scenarios and strategies on how to mitigate them, we can easily avoid these kinds of issues.&lt;/p&gt;</content><author><name>Karol Galanciak</name><email>karol.galanciak@gmail.com</email></author><category term="Ruby"/><category term="Rails"/><category term="Ruby on Rails"/><category term="Race Conditions"/><category term="ActiveRecord"/><summary type="html">Imagine that you are implementing a payment processing system for the e-commerce system and discover that multiple customers were charged twice for exactly the same order. Ouch… Sounds like a real nightmare to deal with! And the next day, you see that something is not right with the credits system in which users were able to pay using special credits instead of using credit card - somehow instead of getting charged $100 in total for two orders of $25 and $75, they were charged just 25$! And to make it even more epic, it turned out that the uniqueness validation you added didn’t work at all, and now you have three users with the same email address!</summary></entry></feed>