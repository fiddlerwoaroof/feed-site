{
  "title":"Rails 7.1 preview of new features",
  "date":"2022-11-01T13:01:23.000000Z",
  "author":"Stefan Wienert",
  "id":"repo://posts.collection/_posts/2022/2022-11-01-rails-7-1-preview-of-new-features.md",
  "link":"https://www.stefanwienert.de/blog/2022/11/01/rails-7-1-preview-of-new-features/",
  "content":"<p>Rails 7.0 was released almost a year ago (december 2021), so a new Rails release might be just around the corner. Time to look into the CHANGELOG.md of the various Core-Gems.\nThe following features are just a small <strong>selection by me</strong> of all the Changelog.md’s. There are tons and tons of fixes all around, but like all huge frameworks, not all parts are used by everyone.</p>\n\n<details>\n<p>\nI just have been downloading the CHANGELOG.md of the various projects:\n</p>\n\n<pre>\n<code>\n%w[actionmailer actioncable activemodel actionpack actionmailbox actiontext actionview activejob activerecord activestorage activesupport railties].each do |gem|\n  url = &quot;https://raw.githubusercontent.com/rails/rails/main/#{gem}/CHANGELOG.md&quot;\nend\n</code>\n</pre>\n\n<summary>\nMethodology of getting all the changes.\n</summary>\n</details>\n\n<h2 id=\"activerecord-activemodel\">ActiveRecord, ActiveModel</h2>\n\n<h3 id=\"has_secure_password-password_challenge\">has_secure_password password_challenge</h3>\n\n<p><code class=\"highlighter-rouge\">has_secure_password</code> now supports password challenges via a <code class=\"highlighter-rouge\">password_challenge</code> accessor and validation.</p>\n\n<p>Creates a virtual column <code class=\"highlighter-rouge\">password_challenge</code> and adds a validation that the password must match when updating the core model itself, IF it is not nil. E.g. User must provide “old” password when updating email/password.</p>\n\n<p>Safes some boilerplate and integrates nicely in the core validation flow.</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">password_params</span> <span class=\"o\">=</span> <span class=\"n\">params</span><span class=\"p\">.</span><span class=\"nf\">require</span><span class=\"p\">(</span><span class=\"ss\">:user</span><span class=\"p\">).</span><span class=\"nf\">permit</span><span class=\"p\">(</span>\n  <span class=\"ss\">:password_challenge</span><span class=\"p\">,</span> <span class=\"ss\">:password</span><span class=\"p\">,</span> <span class=\"ss\">:password_confirmation</span><span class=\"p\">,</span>\n<span class=\"p\">).</span><span class=\"nf\">with_defaults</span><span class=\"p\">(</span><span class=\"ss\">password_challenge: </span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n<span class=\"c1\"># Important: MUST not be nil to activate the validation</span>\n\n<span class=\"k\">if</span> <span class=\"n\">current_user</span><span class=\"p\">.</span><span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">password_params</span><span class=\"p\">)</span>\n  <span class=\"c1\"># ...</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<h3 id=\"activerecordbasegenerates_token_for\"><code class=\"highlighter-rouge\">ActiveRecord::Base::generates_token_for</code></h3>\n\n<p>Automatically generate and validate various “tokens” for the user, think: Password Reset Token, Login Token etc.</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">User</span> <span class=\"o\">&lt;</span> <span class=\"no\">ActiveRecord</span><span class=\"o\">::</span><span class=\"no\">Base</span>\n  <span class=\"n\">has_secure_password</span>\n\n  <span class=\"n\">generates_token_for</span> <span class=\"ss\">:password_reset</span><span class=\"p\">,</span> <span class=\"ss\">expires_in: </span><span class=\"mi\">15</span><span class=\"p\">.</span><span class=\"nf\">minutes</span> <span class=\"k\">do</span>\n    <span class=\"c1\"># A password's BCrypt salt changes when the password is updated.</span>\n    <span class=\"c1\"># By embedding (part of) the salt in a token, the token will</span>\n    <span class=\"c1\"># expire when the password is updated.</span>\n    <span class=\"no\">BCrypt</span><span class=\"o\">::</span><span class=\"no\">Password</span><span class=\"p\">.</span><span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">password_digest</span><span class=\"p\">).</span><span class=\"nf\">salt</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"o\">..</span><span class=\"p\">]</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"no\">User</span><span class=\"p\">.</span><span class=\"nf\">first</span>\n<span class=\"n\">token</span> <span class=\"o\">=</span> <span class=\"n\">user</span><span class=\"p\">.</span><span class=\"nf\">generate_token_for</span><span class=\"p\">(</span><span class=\"ss\">:password_reset</span><span class=\"p\">)</span>\n\n<span class=\"no\">User</span><span class=\"p\">.</span><span class=\"nf\">find_by_token_for</span><span class=\"p\">(</span><span class=\"ss\">:password_reset</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"p\">)</span> <span class=\"c1\"># =&gt; user</span>\n\n<span class=\"n\">user</span><span class=\"p\">.</span><span class=\"nf\">update!</span><span class=\"p\">(</span><span class=\"ss\">password: </span><span class=\"s2\">&quot;new password&quot;</span><span class=\"p\">)</span>\n<span class=\"no\">User</span><span class=\"p\">.</span><span class=\"nf\">find_by_token_for</span><span class=\"p\">(</span><span class=\"ss\">:password_reset</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"p\">)</span> <span class=\"c1\"># =&gt; nil</span>\n</code></pre></div></div>\n\n<h3 id=\"infinity-ranges-on-on-validators\">Infinity Ranges on on Validators:</h3>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">validates_length_of</span> <span class=\"ss\">:first_name</span><span class=\"p\">,</span> <span class=\"ss\">in: </span><span class=\"o\">..</span><span class=\"mi\">30</span>\n<span class=\"n\">validates_inclusion_of</span> <span class=\"ss\">:birth_date</span><span class=\"p\">,</span> <span class=\"ss\">in: </span><span class=\"o\">-&gt;</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"o\">..</span><span class=\"no\">Date</span><span class=\"p\">.</span><span class=\"nf\">today</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"allow-activerecordquerymethodsselect-to-receive-hash-values\">Allow ActiveRecord::QueryMethods#select to receive hash values.</h3>\n\n<p>FINALLY, select can be used with hash syntax, too.</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"no\">Post</span><span class=\"p\">.</span><span class=\"nf\">joins</span><span class=\"p\">(</span><span class=\"ss\">:comments</span><span class=\"p\">).</span>\n  <span class=\"nf\">select</span><span class=\"p\">(</span><span class=\"ss\">posts: </span><span class=\"p\">[</span><span class=\"ss\">:id</span><span class=\"p\">,</span> <span class=\"ss\">:title</span><span class=\"p\">,</span> <span class=\"ss\">:created_at</span><span class=\"p\">],</span> <span class=\"ss\">comments: </span><span class=\"p\">[</span><span class=\"ss\">:id</span><span class=\"p\">,</span> <span class=\"ss\">:body</span><span class=\"p\">,</span> <span class=\"ss\">:author_id</span><span class=\"p\">])</span>\n<span class=\"no\">Post</span><span class=\"p\">.</span><span class=\"nf\">joins</span><span class=\"p\">(</span><span class=\"ss\">:comments</span><span class=\"p\">)</span><span class=\"o\">.</span>\n  <span class=\"c1\"># also with selection-aliases</span>\n  <span class=\"nb\">select</span><span class=\"p\">(</span><span class=\"ss\">posts: </span><span class=\"p\">{</span> <span class=\"ss\">id: :post_id</span><span class=\"p\">,</span> <span class=\"ss\">title: :post_title</span> <span class=\"p\">},</span> <span class=\"ss\">comments: </span><span class=\"p\">{</span> <span class=\"ss\">id: :comment_id</span><span class=\"p\">,</span> <span class=\"ss\">body: :comment_body</span> <span class=\"p\">})</span>\n</code></pre></div></div>\n\n<h3 id=\"find_or_create_by-now-try-to-find-a-second-time-if-it-hits-a-unicity-constraint\"><code class=\"highlighter-rouge\">find_or_create_by</code> now try to find a second time if it hits a unicity constraint.</h3>\n\n<p>Sound’s useful for some race conditions.</p>\n\n<h3 id=\"cte-support\">CTE Support</h3>\n\n<p>Sometimes, it’s nice to define “Common Table Expressions” which are supported by some databases, to clean up huge SQL. In the past one had to fallback to raw SQL for this, but now it is easier to do it with AREL:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"no\">Post</span><span class=\"p\">.</span><span class=\"nf\">with</span><span class=\"p\">(</span><span class=\"ss\">posts_with_comments: </span><span class=\"no\">Post</span><span class=\"p\">.</span><span class=\"nf\">where</span><span class=\"p\">(</span><span class=\"s2\">&quot;comments_count &gt; ?&quot;</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"c1\"># =&gt; ActiveRecord::Relation</span>\n<span class=\"c1\"># WITH posts_with_comments AS (SELECT * FROM posts WHERE (comments_count &gt; 0)) SELECT * FROM posts</span>\n</code></pre></div></div>\n\n<h3 id=\"ignore-tables-for-schema-dump\">Ignore tables for schema-dump</h3>\n\n<p>Nice, if you have a shared database other (legacy?) tables that you don’t care about:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"no\">ActiveRecord</span><span class=\"o\">::</span><span class=\"no\">SchemaDumper</span><span class=\"p\">.</span><span class=\"nf\">ignore_tables</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sr\">/^_/</span><span class=\"p\">]</span>\n</code></pre></div></div>\n\n<h3 id=\"alias_attribute-not-new-but-til\">alias_attribute (not new, but TIL)</h3>\n\n<p>I read about a fixed bug in <code class=\"highlighter-rouge\">alias_attribute</code>, and thus found out about it the first time. Appareantly it is part of ActiveRecord for a long time, but I never stumbled upon it. I can sometimes think of aliasing old columns to better names, esp. when working with legacy schemata.</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Book</span> <span class=\"o\">&lt;</span> <span class=\"no\">ApplicationRecord</span>\n  <span class=\"n\">alias_attribute</span> <span class=\"ss\">:title</span><span class=\"p\">,</span> <span class=\"ss\">:name</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<h3 id=\"userauthenticate_by\">User.authenticate_by</h3>\n\n<p>Instead of manually loading the user by mail and THEN validating the password:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"no\">User</span><span class=\"p\">.</span><span class=\"nf\">find_by</span><span class=\"p\">(</span><span class=\"ss\">email: </span><span class=\"s2\">&quot;...&quot;</span><span class=\"p\">)</span><span class=\"o\">&amp;</span><span class=\"p\">.</span><span class=\"nf\">authenticate</span><span class=\"p\">(</span><span class=\"s2\">&quot;...&quot;</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Use the new method, which is also supposed to be timing-Attack resistant:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"no\">User</span><span class=\"p\">.</span><span class=\"nf\">authenticate_by</span><span class=\"p\">(</span><span class=\"ss\">email: </span><span class=\"s2\">&quot;...&quot;</span><span class=\"p\">,</span> <span class=\"ss\">password: </span><span class=\"s2\">&quot;...&quot;</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"composite-primary-keys\">Composite primary keys</h3>\n\n<p>Preliminary work has been merged, that allows Rails to better handle composite primary keys (on a later stage as <a href=\"https://github.com/rails/rails/pull/46331\">noted in the PR</a>)</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Developer</span> <span class=\"o\">&lt;</span> <span class=\"no\">ActiveRecord</span><span class=\"o\">::</span><span class=\"no\">Base</span>\n  <span class=\"n\">query_constraints</span> <span class=\"ss\">:company_id</span><span class=\"p\">,</span> <span class=\"ss\">:id</span>\n<span class=\"k\">end</span>\n<span class=\"n\">developer</span> <span class=\"o\">=</span> <span class=\"no\">Developer</span><span class=\"p\">.</span><span class=\"nf\">first</span><span class=\"p\">.</span><span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"ss\">name: </span><span class=\"s2\">&quot;Bob&quot;</span><span class=\"p\">)</span>\n<span class=\"c1\"># =&gt; UPDATE &quot;developers&quot; SET &quot;name&quot; = 'Bob' WHERE &quot;developers&quot;.&quot;company_id&quot; = 1 AND &quot;developers&quot;.&quot;id&quot; = 1</span>\n</code></pre></div></div>\n\n<h2 id=\"actionpack-view-railties-etc\">ActionPack View, Railties etc.</h2>\n\n<h3 id=\"trailing-slashes-in-routes\">Trailing slashes in Routes</h3>\n\n<p>Force trailing slashes for various URL demands:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">get</span> <span class=\"s1\">'/test'</span> <span class=\"o\">=&gt;</span> <span class=\"s2\">&quot;test#index&quot;</span><span class=\"p\">,</span> <span class=\"ss\">as: :test</span><span class=\"p\">,</span> <span class=\"ss\">trailing_slash: </span><span class=\"kp\">true</span>\n\n<span class=\"n\">test_path</span><span class=\"p\">()</span> <span class=\"c1\"># =&gt; &quot;/test/&quot;</span>\n</code></pre></div></div>\n\n<h3 id=\"allow-erb-templates-to-set-strict-locals\">Allow (ERB) templates to set strict <code class=\"highlighter-rouge\">locals</code>.</h3>\n\n<p>Define, which locales (not controller instance vars) are required by the template</p>\n\n<div class=\"language-erb highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">&lt;%# locals: (message:) -%&gt;</span>\n<span class=\"cp\">&lt;%=</span> <span class=\"n\">message</span> <span class=\"cp\">%&gt;</span>\n</code></pre></div></div>\n\n<p>Default values can also be provided:</p>\n\n<div class=\"language-erb highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">&lt;%# locals: (message: &quot;Hello, world!&quot;) -%&gt;</span>\n<span class=\"cp\">&lt;%=</span> <span class=\"n\">message</span> <span class=\"cp\">%&gt;</span>\n</code></pre></div></div>\n\n<p>Maybe ok, to prevent typos in the variable names.</p>\n\n<h3 id=\"find-unused-routes\">Find unused routes</h3>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>rails routes --unused\n</code></pre></div></div>\n\n<p>Tries to find defined routes without a controller and missing action OR missing template (either is needed).</p>\n\n<h3 id=\"grep-routes-in-command\">Grep routes in command</h3>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>rails routes --grep\n</code></pre></div></div>\n\n<p>Not sure why this is needed on a UNIX/Linux system, but ok, if it is there.</p>\n\n<h3 id=\"limit-log-size\">Limit log size</h3>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>config.log_file_size = 100.megabytes\n</code></pre></div></div>\n\n<p>No gigantic (5GB in some cases…) development.log or test.log anymore! Yay!</p>\n\n<h3 id=\"railscache-with-options\">Rails.cache with options</h3>\n\n<p>ActiveSupport::Cache:Store#fetch` now passes an options accessor to the block.</p>\n\n<p>It makes possible to override cache options:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"no\">Rails</span><span class=\"p\">.</span><span class=\"nf\">cache</span><span class=\"p\">.</span><span class=\"nf\">fetch</span><span class=\"p\">(</span><span class=\"s2\">&quot;3rd-party-token&quot;</span><span class=\"p\">)</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"nb\">name</span><span class=\"p\">,</span> <span class=\"n\">options</span><span class=\"o\">|</span>\n  <span class=\"n\">token</span> <span class=\"o\">=</span> <span class=\"n\">fetch_token_from_remote</span>\n  <span class=\"c1\"># set cache's TTL to match token's TTL</span>\n  <span class=\"n\">options</span><span class=\"p\">.</span><span class=\"nf\">expires_in</span> <span class=\"o\">=</span> <span class=\"n\">token</span><span class=\"p\">.</span><span class=\"nf\">expires_in</span>\n  <span class=\"n\">token</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>"
}