<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:base="https://www.justinweiss.com/">
  <id>https://www.justinweiss.com/</id>
  <title>Justin Weiss</title>
  <updated>2019-05-01T04:40:15Z</updated>
  <link rel="alternate" href="https://www.justinweiss.com/">
  <link rel="self" href="https://www.justinweiss.com/atom.xml">
  <author>
    <name>Justin Weiss</name>
    <uri>https://www.justinweiss.com</uri>
  </author>
  <entry>
    <id>tag:www.justinweiss.com,2019-05-01:/articles/how-do-you-catch-back-up/</id>
    <title type="html">When you've taken a learning break, how do you catch back up?</title>
    <published>2019-05-01T04:40:15Z</published>
    <updated>2019-05-01T04:40:15Z</updated>
    <link rel="alternate" href="https://www.justinweiss.com/articles/how-do-you-catch-back-up/">
    <content type="html">
&lt;p&gt;When you’ve been deeply focused on a big project or a new job, you might poke your head up and feel lost. Like the tech world has moved beyond you. &lt;strong&gt;Did that time you didn’t spend learning new things finally catch up with you?&lt;/strong&gt; And how can you close that gap?&lt;/p&gt;

&lt;h2 id=&quot;study-at-home-or-learn-at-work&quot;&gt;Study at home? Or learn at work?&lt;/h2&gt;

&lt;p&gt;If you haven’t been making time for learning, that time has to come from somewhere.&lt;/p&gt;

&lt;p&gt;But where will that time come from? Should you study on your own time? Or study on the job?&lt;/p&gt;

&lt;p&gt;It’s a trick question. &lt;strong&gt;The answer is both.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Finding time outside of work can be a struggle. It definitely has been for me, as I’ve gone from 0 to 1 to 2 kids. &lt;strong&gt;But learning something in my own time makes that thing feel more like mine.&lt;/strong&gt; It feels more exciting, and you can pick up a topic that’s more interesting than practical.&lt;/p&gt;

&lt;p&gt;If you feel like the time just isn’t there, plan ahead. Set aside a specific time of day, or make up a trigger. For example, “I’ll read a few pages right after I wake up”, or “I’ll read from 5:30–6 PM.” &lt;strong&gt;Have the book sitting right there, and it can be its own reminder.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I’ve also had some great times reading programming books after the family has gone to sleep. It works, but you have to be careful not to sacrifice much sleep of your own.&lt;/p&gt;

&lt;h2 id=&quot;what-about-on-the-job&quot;&gt;What about on the job?&lt;/h2&gt;

&lt;p&gt;When it comes to studying as part of the job, it’s the same thing: &lt;strong&gt;plan time for yourself&lt;/strong&gt;. I’ll even block it out on my work calendar.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;At most jobs, nobody will specifically give you that time.&lt;/strong&gt; Count yourself lucky if they do! (&lt;a href=&quot;https://www.aha.io/company/culture&quot;&gt;Aha!, my current employer&lt;/a&gt;, is one of those rare ones).&lt;/p&gt;

&lt;p&gt;For the rest, the first step is to build trust. Can you have a conversation that starts, “I’m going to spend time learning this so I can become more effective at the work we do every day?” If so, you’re on the right track.&lt;/p&gt;

&lt;p&gt;You might be limited to learning something directly related to the job. For example, reading up on React if you’re going to be doing more front-end JavaScript work.&lt;/p&gt;

&lt;p&gt;But that’s not as limited as it seems.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Work time is a great time to read fundamental books, like &lt;a href=&quot;http://martinfowler.com/books/refactoring.html&quot;&gt;Refactoring&lt;/a&gt;, or &lt;a href=&quot;https://www.oreilly.com/library/view/working-effectively-with/0131177052/&quot;&gt;Working Effectively with Legacy Code&lt;/a&gt;, or &lt;a href=&quot;http://dddcommunity.org/book/evans_2003/&quot;&gt;Domain Driven Design&lt;/a&gt;&lt;/strong&gt;. Those are all books I’ve read at various jobs, and some of the most valuable of my career.&lt;/p&gt;

&lt;p&gt;What if they say no? You’ll have to make a decision. Learning is important enough that I would take the time anyway. There’s usually enough downtime to fit it in somewhere, as long as you have the material on hand. And if you put in the effort and focus on the right things, you’ll become more efficient, and the time will create itself.&lt;/p&gt;

&lt;h2 id=&quot;one-final-warning&quot;&gt;One final warning&lt;/h2&gt;

&lt;p&gt;If you feel like you’re trying to catch up, you’ll be tempted to take on too much at once. That’s a mistake.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Learning one new language and one or two major frameworks a year is a good low bar, and probably also a good high bar.&lt;/strong&gt; You might be able to stretch a little, but much more than that and you’ll forget it when you need it.&lt;/p&gt;

&lt;p&gt;That seems low, but it adds up over time. And even if you’re not totally caught up, you’ll still feel like you’re making real progress toward the developer you want to be.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.justinweiss.com,2017-08-22:/articles/how-do-you-do-a-rails-deep-dive/</id>
    <title type="html">How do you do a Rails deep dive?</title>
    <published>2017-08-22T04:40:15Z</published>
    <updated>2017-08-22T04:40:15Z</updated>
    <link rel="alternate" href="https://www.justinweiss.com/articles/how-do-you-do-a-rails-deep-dive/">
    <content type="html">
&lt;p&gt;Maybe fixing a bug just spawned a dozen new ones. Or your code breaks in such a weird way that you wonder if you really understand it at all. You think &lt;a href=&quot;/articles/take-a-rails-deep-dive/&quot;&gt;it’s time for a deep dive&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But &lt;em&gt;knowing&lt;/em&gt; you need to dive deeply into a topic? That’s only step 1. &lt;strong&gt;How do you actually  learn a topic down to its fundamentals?&lt;/strong&gt; How do you learn enough that it comes naturally to you?&lt;/p&gt;

&lt;h2 id=&quot;where-do-you-start&quot;&gt;Where do you start?&lt;/h2&gt;

&lt;p&gt;There are a lot of places you could start your learning. &lt;strong&gt;But when I need to learn a lot about a topic quickly, books are my favorite place to start.&lt;/strong&gt; For example, if you’re doing a deep dive into git, a book called &lt;em&gt;Pro Git&lt;/em&gt; is probably exactly what you’re looking for.&lt;/p&gt;

&lt;p&gt;Books are great for deep dives because they’re comprehensive: Most medium-sized topics are pretty well covered by a 200–400 page book. At the end, you might not be an expert, but you’ll have a pretty good understanding and solid fundamentals to grow from. That’ll help if you decide to move on to reading source code or specs.&lt;/p&gt;

&lt;p&gt;But maybe you don’t want to buy a book. Or a book on your topic doesn’t even exist. When that happens, where else can you look?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Official documentation is a good alternative.&lt;/strong&gt; If you’re doing a deep dive into a single part of a framework like Rails, or a web technology like OAuth, official docs are an especially good match.&lt;/p&gt;

&lt;p&gt;For projects and frameworks, something named “The X Guide(s)” is your best bet for starting. For example, I often recommend the &lt;a href=&quot;http://guides.rubyonrails.org&quot;&gt;Rails Guides&lt;/a&gt; for new Rails developers, and the &lt;a href=&quot;https://elixir-lang.org/getting-started/introduction.html&quot;&gt;Elixir Guides&lt;/a&gt; are a great place to learn how to write Elixir code.&lt;/p&gt;

&lt;p&gt;But while guides are more comprehensive than, say, a blog post, they aren’t totally comprehensive. &lt;strong&gt;Instead, you can use the guide as a jumping-off point to the reference documentation, like RDoc.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Reference material is hard to understand if you don’t have a way to put all those methods and classes into context. It’s just a mess of details with no real structure. So I find that references work best when you pair them with guides or books.&lt;/p&gt;

&lt;p&gt;For example, almost nothing will teach you ActiveModel more than digging through the &lt;a href=&quot;http://api.rubyonrails.org/classes/ActiveModel/Model.html&quot;&gt;ActiveModel API docs&lt;/a&gt;. But the &lt;a href=&quot;http://guides.rubyonrails.org/active_model_basics.html&quot;&gt;ActiveModel guide&lt;/a&gt; will help you put it all together.&lt;/p&gt;

&lt;p&gt;I say “almost nothing”, because &lt;strong&gt;there is one thing more comprehensive than reading official docs: Reading the source code.&lt;/strong&gt; But reading source code isn’t like reading a book: it takes experience, practice, and guidance. So even though it will give you the most detail, it’s not where you should go first.&lt;/p&gt;

&lt;p&gt;After deep diving through all this written material, you’ll have some open questions. So, ask them! &lt;strong&gt;The author of a library will usually have a better mental model of it than anyone else, and can walk through their thought process to help you out.&lt;/strong&gt; Many authors of open source projects and frameworks make themselves available through Slack or IRC. You can usually find details on project pages.&lt;/p&gt;

&lt;p&gt;If you don’t have access to those people? You can still ask. &lt;strong&gt;Ask your colleagues, or more senior devs.&lt;/strong&gt; I’m surprised at how often asking a single unanswered question to a friend will make everything else click into place.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Once you know you have to do a deep dive, there are a few places you can start. &lt;strong&gt;Here’s the order I’ll usually follow:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A book, or an official guide&lt;/li&gt;
  &lt;li&gt;The official reference documentation (like RDoc) or a spec / &lt;a href=&quot;https://en.wikipedia.org/wiki/Request_for_Comments&quot;&gt;RFC&lt;/a&gt;
&lt;/li&gt;
  &lt;li&gt;The source code&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And I’ll fill the gaps by asking questions. It’s not the fastest process, but it’s the best combination of breadth and depth that I’ve found so far.&lt;/p&gt;

&lt;p&gt;Do you regularly do deep dives? If so, I’d love to know what resources you’ve found most helpful. Leave a comment and let me know!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.justinweiss.com,2017-08-15:/articles/take-a-rails-deep-dive/</id>
    <title type="html">When to take a Rails deep dive</title>
    <published>2017-08-15T04:40:15Z</published>
    <updated>2017-08-15T04:40:15Z</updated>
    <link rel="alternate" href="https://www.justinweiss.com/articles/take-a-rails-deep-dive/">
    <content type="html">
&lt;p&gt;Have you ever found a Rails topic that didn’t make any sense to you?&lt;/p&gt;

&lt;p&gt;Like, you thought you knew it, so you wrote some code, and something completely different happened?&lt;/p&gt;

&lt;p&gt;Or you &lt;em&gt;know&lt;/em&gt; you don’t understand, but you kind of know enough to get by, except you spend so much time fighting edge cases that you could have been an expert in it by the time you were done?&lt;/p&gt;

&lt;p&gt;Well, what if it didn’t have to be that way? Wouldn’t it better to just &lt;em&gt;know&lt;/em&gt; how things worked? To have a solid mental model of the problem in front of you? &lt;strong&gt;So you could just make the right decisions, and write the right code?&lt;/strong&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;When I was first learning web development, sessions were That Thing: I thought I kind of knew them, but I didn’t. And my misunderstanding of sessions caused so many bugs that I was criticized, a lot, for the problems I created.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Soon, I realized I had to take time to &lt;em&gt;actually&lt;/em&gt; understand how sessions worked.&lt;/strong&gt; To demystify them, to make them not scary or weird. And eventually, to be able to guess how they’d behave – and to be right.&lt;/p&gt;

&lt;p&gt;“Sessions” isn’t the only topic I’ve done a deep dive into. Data modeling, caching, metaprogramming, they’re all confusing things that are really easy to get to &lt;em&gt;kind of&lt;/em&gt; work. But you’ll run into eternally hard debugging problems if you don’t understand them.&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;&lt;a href=&quot;https://www.justinweiss.com/practicing-rails/&quot;&gt;Practicing Rails&lt;/a&gt;&lt;/em&gt;, I wrote about &lt;em&gt;T-Shaped learning&lt;/em&gt;: When you have good baseline knowledge, but push much further into specific topics as you need to. &lt;strong&gt;Those pushes are deep dives, and they’ll help you solve huge problems over the course of your programming career.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;when-should-you-do-a-deep-dive&quot;&gt;When should you do a deep dive?&lt;/h2&gt;

&lt;p&gt;So how do you know when it’s time for a deep dive?&lt;/p&gt;

&lt;p&gt;First, to do a deep dive, you have to know what you’re diving into.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deep dives are most helpful when you’re dealing with a single topic.&lt;/strong&gt; A specific thing you can describe in a word or a short phrase. &lt;em&gt;SQL query performance&lt;/em&gt;. &lt;em&gt;Sessions&lt;/em&gt;. &lt;em&gt;HTTP Caching&lt;/em&gt;. Too specific, and you miss the interactions that make a topic so complicated. Too general, and you’re doing a deep dive into “Programming.” Which, I guess you kind of are, but that’s a deep dive you’ll spend your whole career on.&lt;/p&gt;

&lt;p&gt;Next, you should do a deep dive in one of two situations:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;You &lt;em&gt;think&lt;/em&gt; you know what you’re doing, but something totally unexpected happens.&lt;/strong&gt; You &lt;em&gt;know in your heart&lt;/em&gt; that pushing that green button turns the hallway light on, but you push it, and the room collapses instead.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;You &lt;em&gt;know&lt;/em&gt; you don’t really understand something, and that’s been OK…&lt;/strong&gt; But now, you’re fixing a bug, and everything you try causes more problems than you’re solving, creating new bugs as quickly as you’re fixing old ones.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These situations have something in common: You’ve just started to notice that you’re going in the wrong direction. And even though you &lt;em&gt;hope&lt;/em&gt; you’ll turn things around, you’re starting to realize you’ll waste a lot of time struggling.&lt;/p&gt;

&lt;p&gt;They’re both ways to help you sense, early on, that the way you’re doing things isn’t working.&lt;/p&gt;

&lt;p&gt;So, the next time you run around in circles, battling edge cases to fix a bug, or the next time you’re floored by code you wrote doing something completely different than what you expected, remember the feeling you have. Get sensitive to it. That’s the feeling that’ll tell you it’s time to pause. To collect yourself. &lt;strong&gt;And to learn, deeply, that thing you now know you don’t understand.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/articles/how-do-you-do-a-rails-deep-dive/&quot;&gt;But now that you’ve decided you need a deep dive, how do you go about doing it?&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.justinweiss.com,2017-05-09:/articles/a-decorator-vs-a-subclass/</id>
    <title type="html">A decorator vs. a subclass</title>
    <published>2017-05-09T04:40:15Z</published>
    <updated>2017-05-09T04:40:15Z</updated>
    <link rel="alternate" href="https://www.justinweiss.com/articles/a-decorator-vs-a-subclass/">
    <content type="html">
&lt;p&gt;In my &lt;a href=&quot;/articles/the-lesser-known-features-in-rails-5-dot-1/&quot;&gt;most recent article&lt;/a&gt;, I mentioned a great new feature in Rails 5.1, &lt;code&gt;delegate_missing_to&lt;/code&gt;. &lt;strong&gt;With &lt;code&gt;delegate_missing_to&lt;/code&gt;, any method that you can’t find on one object is called on another object, instead&lt;/strong&gt;:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Player&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;delegate_missing_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:@user&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;points&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;points_for_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# calls user.name&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But, like &lt;a href=&quot;/articles/the-lesser-known-features-in-rails-5-dot-1/#comment-3285972786&quot;&gt;Gavin mentioned in the comments&lt;/a&gt;, this seems like an odd way to avoid inheritance. Why not just use a subclass? You’d get the same effect, and you don’t have to add a whole new feature. It seems like a weird thing to add.&lt;/p&gt;

&lt;p&gt;There must be a reason &lt;code&gt;delegate_missing_to&lt;/code&gt; was added, though. And for Rails features, pull requests are a great way to find those reasons. &lt;strong&gt;In &lt;a href=&quot;https://github.com/rails/rails/issues/23824&quot;&gt;this pull request&lt;/a&gt;, DHH mentioned why he suggested the feature:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Here’s a common pattern if you want to build a decorator:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That seems like a pretty good place to start digging.&lt;/p&gt;

&lt;h2 id=&quot;why-decorators&quot;&gt;Why decorators?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;When you build a &lt;a href=&quot;http://wiki.c2.com/?DecoratorPattern&quot;&gt;decorator&lt;/a&gt;, you’re changing the way an object acts, without creating a new subclass.&lt;/strong&gt; For example, in the code from earlier:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Player&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;delegate_missing_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:@user&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;points&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;points_for_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You’d say that “Player &lt;em&gt;decorates&lt;/em&gt; user,” because a Player &lt;em&gt;almost&lt;/em&gt; acts like a User, but has an extra method, &lt;code&gt;points&lt;/code&gt;. And it does this without inheritance.&lt;/p&gt;

&lt;p&gt;Why would you need something like this? That’s a tough question to answer, because like many design patterns, it’s not always clear where you’d want to use it instead of something else.&lt;/p&gt;

&lt;h2 id=&quot;when-would-you-use-a-decorator&quot;&gt;When would you use a decorator?&lt;/h2&gt;

&lt;p&gt;Decorators could just be a more complicated way to do inheritance. I mean, which of these two lines of code is better?&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;player&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Justin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Player decorates User&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;player&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Justin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;# Player subclasses User&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Clearly the second one, right? Here, creating Player as a decorator instead of a subclass is just a waste of code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But sometimes, you want to add functionality to an object later on, far away from where you created the object.&lt;/strong&gt; For example, what if you had code like this?&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;later&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;player&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, you can create the user however you want, in whatever method you want. The code that creates the User object doesn’t know or care that a Player class even exists. And you can still use the original User object if you don’t want those extra methods anymore.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This helps you separate behavior into different classes.&lt;/strong&gt; Each class can focus on how the User object would be used in a specific situation – a Player, an Employee, a Developer. With inheritance, it’s easy for all this stuff to get jumbled together.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.justinweiss.com/articles/the-lesser-known-features-in-rails-5-dot-1/#comment-3286300468&quot;&gt;MrChris mentioned another benefit to decorators in the comments&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;When you decorate an object, you can only call the public methods on that object. When you subclass, you can call any method, even private ones. &lt;strong&gt;That can make subclasses break more frequently, because they can accidentally rely on their parents’ implementation details.&lt;/strong&gt; Those details will usually change more often than the public methods.&lt;/p&gt;

&lt;p&gt;Decorators can be especially useful when you’re breaking apart large classes. With decorators, it’s easier to follow the &lt;a href=&quot;http://wiki.c2.com/?SingleResponsibilityPrinciple&quot;&gt;Single-Responsibility Principle&lt;/a&gt; – &lt;strong&gt;each decorator can do one thing and do it well, and you can combine decorators to get more complex behavior.&lt;/strong&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;There are a lot of ways to share behavior in Ruby. You can subclass, you can combine modules, you can even &lt;a href=&quot;http://www.justinweiss.com/articles/fun-with-the-method-method/&quot;&gt;grab methods off one class and attach them to another if you want to&lt;/a&gt;. The decorator pattern, though, gives you something a little different. &lt;strong&gt;You’re just using instance variables and method calls, the building blocks of any object-oriented language.&lt;/strong&gt; From those fundamentals, you can have flexible behavior while your app is running – all without overcomplicating your code.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.justinweiss.com,2017-05-02:/articles/the-lesser-known-features-in-rails-5-dot-1/</id>
    <title type="html">The lesser-known features in Rails 5.1</title>
    <published>2017-05-02T05:49:00Z</published>
    <updated>2017-05-02T05:49:00Z</updated>
    <link rel="alternate" href="https://www.justinweiss.com/articles/the-lesser-known-features-in-rails-5-dot-1/">
    <content type="html">&lt;p&gt;Last week, during RailsConf 2017, &lt;a href=&quot;http://weblog.rubyonrails.org/2017/4/27/Rails-5-1-final/&quot;&gt;Rails 5.1 shipped&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you followed the announcements, you’ve seen the big features: better integration with modern JavaScript, encrypted secrets, and system tests. And there’s my personal favorite: &lt;em&gt;finally&lt;/em&gt; getting rid of the weird combo of &lt;code&gt;form_for&lt;/code&gt; and &lt;code&gt;form_tag&lt;/code&gt;, and &lt;a href=&quot;https://github.com/rails/rails/issues/25197&quot;&gt;replacing it with &lt;code&gt;form_with&lt;/code&gt;&lt;/a&gt;. I can’t wait to try it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But the reason I love Rails isn’t the big new features. It’s the little, constant improvements.&lt;/strong&gt; It’s those quality-of-life changes that make me happier when I’m writing Rails apps. And Rails 5.1 is full of them.&lt;/p&gt;

&lt;h2 id=&quot;more-consistent-tag-helpers&quot;&gt;More consistent tag helpers&lt;/h2&gt;

&lt;p&gt;Have you used Rails’ tag helpers, like &lt;code&gt;tag&lt;/code&gt; and &lt;code&gt;content_tag&lt;/code&gt;?&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-erb&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content_tag&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;class: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/rails/rails/pull/25289&quot;&gt;Rails 5.1 adds a new tag helper syntax&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use calls like &lt;code&gt;tag.div&lt;/code&gt; or &lt;code&gt;tag.br&lt;/code&gt;, and you can stop worrying about parameter order and juggling two different methods:&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-erb&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;class: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;br&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These new tag helpers support HTML5 by default, and even let you create your own elements:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-erb&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pea&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;class: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- turns into &amp;lt;pea class=&quot;name&quot;&amp;gt;Justin Weiss&amp;lt;/pea&amp;gt; --&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;assert-more-than-just-differences&quot;&gt;Assert more than just differences&lt;/h2&gt;

&lt;p&gt;I love &lt;code&gt;assert_difference&lt;/code&gt;. &lt;strong&gt;Before &lt;code&gt;assert_difference&lt;/code&gt;, I spent way too much time juggling local variables in tests:&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;old_score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;score&lt;/span&gt;
&lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;answer_question!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;score&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With &lt;code&gt;assert_difference&lt;/code&gt;, it’s much clearer what you’re trying to do:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;assert_difference&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;@user.score&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;answer_question!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/rails/rails/pull/25393&quot;&gt;In Rails 5.1, &lt;code&gt;assert_changes&lt;/code&gt; takes this one step further&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;assert_difference&lt;/code&gt; only checks changes in count. &lt;strong&gt;But &lt;code&gt;assert_changes&lt;/code&gt; can check non-numerical changes, like changes between two strings, or between nil and something else:&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;assert_changes&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;users(:justin).name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;from: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Justin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;to: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Bob&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update_attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Bob&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Instead of a string, you can give it a lambda:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;assert_changes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:justin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;from: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Justin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;to: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Bob&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update_attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Bob&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;to:&lt;/code&gt; can be anything that compares with ===. &lt;strong&gt;That’s nice when you know &lt;em&gt;something&lt;/em&gt; about the value, but don’t know what it is, specifically:&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;assert_changes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:justin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;updated_at&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;to: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TimeWithZone&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update_attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Bob&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;delegate-everything&quot;&gt;Delegate everything&lt;/h2&gt;

&lt;p&gt;In some Rails code, you’ll see the &lt;code&gt;delegate&lt;/code&gt; method used. &lt;strong&gt;Delegation is helpful when you want to add behavior on top of another class, without inheriting from it:&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Player&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;to: :@user&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;points&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;points_for_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But sometimes you want to forward &lt;em&gt;everything&lt;/em&gt; to the class you’re wrapping.&lt;/p&gt;

&lt;p&gt;There are a few ways to do this with Ruby, using &lt;code&gt;method_missing&lt;/code&gt; or &lt;code&gt;SimpleDelegator&lt;/code&gt;. &lt;strong&gt;But to better match the &lt;code&gt;delegate&lt;/code&gt; method, &lt;a href=&quot;https://github.com/rails/rails/issues/23824&quot;&gt;&lt;code&gt;delegate_missing_to&lt;/code&gt; was added to Rails 5.1&lt;/a&gt;.&lt;/strong&gt; It does exactly what it says:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Player&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;delegate_missing_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:@user&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;points&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;points_for_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, any call to a method that’s not in the Player class will search on &lt;code&gt;@user&lt;/code&gt; instead.&lt;/p&gt;

&lt;h2 id=&quot;bonus-aliasmethodchain-is-gone&quot;&gt;Bonus: &lt;code&gt;alias_method_chain&lt;/code&gt; is gone!&lt;/h2&gt;

&lt;p&gt;One of my favorite features in Ruby 2 is &lt;a href=&quot;https://bugs.ruby-lang.org/issues/1102&quot;&gt;Module#prepend&lt;/a&gt;. I liked it so much, &lt;a href=&quot;http://www.justinweiss.com/articles/rails-5-module-number-prepend-and-the-end-of-alias-method-chain/#comment-3078737465&quot;&gt;I wrote a post about it&lt;/a&gt;. Specifically, about how I hoped Module#prepend would eventually replace &lt;code&gt;alias_method_chain&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And as of Rails 5.1, &lt;a href=&quot;https://github.com/rails/rails/pull/27035/commits/7c848e6dd493ff236d33a0410a92f4c3e5cc3c7f&quot;&gt;&lt;code&gt;alias_method_chain&lt;/code&gt; is now officially gone&lt;/a&gt; – replaced with prepend.&lt;/strong&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;New versions of Rails are always exciting. &lt;strong&gt;But it’s the details that give Rails its beauty.&lt;/strong&gt; The small changes that make you happier with the code you write every day.&lt;/p&gt;

&lt;p&gt;How do you find those changes? Dive into the changelogs. Take a look at interesting pull requests. See which of the new, small, 5.1 features will make your life that little bit easier.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And when you find some cool stuff, don’t keep it to yourself. Share it here, so we can all learn something new!&lt;/strong&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.justinweiss.com,2017-03-01:/articles/write-that-first-complicated-test/</id>
    <title type="html">Write that first complicated test</title>
    <published>2017-03-01T05:05:56Z</published>
    <updated>2017-03-01T05:05:56Z</updated>
    <link rel="alternate" href="https://www.justinweiss.com/articles/write-that-first-complicated-test/">
    <content type="html">
&lt;p&gt;What code of yours isn’t tested? Is it code that deals with complicated situations that you don’t control? Threads, running commands, git, networking, or UI?&lt;/p&gt;

&lt;p&gt;Our apps are most interesting when they’re complicated. They’re also most dangerous. &lt;strong&gt;And that’s why code that’s hard to test is exactly the kind of code that needs to be tested well.&lt;/strong&gt; That doesn’t always happen.&lt;/p&gt;

&lt;p&gt;Instead, every time you touch that code, you touch lightly. You tread carefully. Maybe you do some manual testing. And when you send the pull request, you hope your teammates don’t realize those tests don’t exist.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But that won’t make things better.&lt;/strong&gt; You’ll run into the same problems, the same bugs, the same stress next time – and every time after that. How can you finally make those challenging tests something you can rely on?&lt;/p&gt;

&lt;h2 id=&quot;shift-your-mindset&quot;&gt;Shift your mindset&lt;/h2&gt;

&lt;p&gt;The most frustrating thing about these tests? &lt;strong&gt;It’s going to take ten times as long to write it as it feels like it should.&lt;/strong&gt; If you estimate the time the test saves you against the time you spend writing the test, it just doesn’t seem worth it.&lt;/p&gt;

&lt;p&gt;But it’s not just about this test. It’s about &lt;em&gt;all your future tests&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Most of the best-tested code I’ve seen has a lot of support.&lt;/strong&gt; It’s not just the code in &lt;code&gt;test/models&lt;/code&gt;. Extremely well-tested code has &lt;a href=&quot;http://www.justinweiss.com/articles/testing-network-services-in-ruby/&quot;&gt;fakes&lt;/a&gt;, it has mocks, it has a good set of test fixtures, it has configuration options specifically for the tests.&lt;/p&gt;

&lt;p&gt;All that takes time to write and put together.&lt;/p&gt;

&lt;p&gt;But once you have it, it feels &lt;em&gt;so good.&lt;/em&gt; You can come up with test after test, feeling comfortable about your code, and confident in quickly you can move after the investment you’ve made.&lt;/p&gt;

&lt;p&gt;You can &lt;em&gt;rely&lt;/em&gt; on the work you’ve already done.&lt;/p&gt;

&lt;p&gt;So it’s not just about preventing bugs in complicated code. &lt;strong&gt;It’s also about making future code easier to test, piece by piece.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;make-it-an-integration-test-for-now&quot;&gt;Make it an integration test (for now)&lt;/h2&gt;

&lt;p&gt;Sometimes, though, it’s not about understanding the value – I get it. &lt;strong&gt;Instead, I just get stuck because I can’t figure out how to write a small, fast, unit test.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;How do you know you’re running the right git commands in your deployment tool, without actually running &lt;code&gt;git&lt;/code&gt;? How do you make sure you’re sending a remote server the right headers?&lt;/p&gt;

&lt;p&gt;With enough time, you can build a quality fake for your tests to rely on.&lt;/p&gt;

&lt;p&gt;But when that seems like too much to think about, there’s something else you can try. &lt;strong&gt;Break testing apart into two separate steps: “test the code” and “write the mock.”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Just call that server. Just run that command. Why?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
&lt;strong&gt;It’s much easier to get started.&lt;/strong&gt; You’re probably testing those commands manually, right? Running it in a console, or trying it in a browser? Just copy it into a test.&lt;/li&gt;
  &lt;li&gt;
&lt;strong&gt;When you eventually write your mock or fake, you can use these tests to make sure your mock works.&lt;/strong&gt; If you see the same behavior in the real world as you see from your fake, your fake is probably good!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You probably don’t want to keep these tests around forever, though:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
&lt;strong&gt;They have all the problems integration tests have.&lt;/strong&gt; They can be slow. They might need a live internet connection. They might be brittle, because they’re depending on behavior that your app doesn’t actually care about.&lt;/li&gt;
  &lt;li&gt;
&lt;strong&gt;You might not be able to test some things in the real world.&lt;/strong&gt; For example, how do you force specific error codes when you don’t control the server on the other end?&lt;/li&gt;
  &lt;li&gt;
&lt;strong&gt;You might get blocked by a server you depend on, and that can break your tests (and your app!).&lt;/strong&gt; This actually happened to me, and it was a big problem.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, writing your test as a real-world integration test isn’t a permanent solution, or even a long-term one. But even with all those drawbacks, it’s still helpful. And after you replace it, you can still keep the integration test around, in a separate suite. That way, you can always check my code against reality, not just your assumptions.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Some code is just hard to test. It takes a while to build up the infrastructure you need to write reliable tests quickly. And a lot of the time, it doesn’t seem worth it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But when you stop thinking about that single test, and think about the value of making all your future tests easier, testing complicated code becomes a lot more motivating.&lt;/strong&gt; And once the first test goes down, the rest of them seem to magically become so much easier to write.&lt;/p&gt;

&lt;p&gt;Sometimes, though, that’s not enough. What if you know how to make sure your code works in the real world, but just can’t figure out how to test it?&lt;/p&gt;

&lt;p&gt;When that happens, stop looking at the test as something you need to keep pure and isolated. &lt;strong&gt;Instead, see it as a way to automatically do what you’re already doing manually.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It’s not perfect, and you should replace it as soon as you can. But those tests can give you the confidence you need to write and change complicated code quickly.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.justinweiss.com,2017-02-14:/articles/writing-a-one-time-script-in-rails/</id>
    <title type="html">Writing a one-time script in Rails</title>
    <published>2017-02-14T06:08:51Z</published>
    <updated>2017-02-14T06:08:51Z</updated>
    <link rel="alternate" href="https://www.justinweiss.com/articles/writing-a-one-time-script-in-rails/">
    <content type="html">&lt;p&gt;Have you ever wanted to import a bunch of data into your app from a CSV file? Or maybe you need to fix &lt;a href=&quot;/articles/how-to-get-from-theyre-to-theyre/&quot;&gt;badly encoded characters&lt;/a&gt; in some of your customer reviews. Or you changed your mind about how you wanted to store data in Redis, and had to move everything from the old format to the new one.&lt;/p&gt;

&lt;p&gt;At &lt;a href=&quot;https://www.avvo.com&quot;&gt;Avvo&lt;/a&gt;, we called these “ad-hoc tasks.” As in, you probably only need to run them once. &lt;strong&gt;So what’s the best way to handle an ad-hoc task in Rails?&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;write-a-database-migration&quot;&gt;Write a database migration&lt;/h2&gt;

&lt;p&gt;A migration works well if you need to change the structure of the data in your database. It tracks whether the task was run, it carries over changes to other environments – it’s what migrations were &lt;em&gt;built&lt;/em&gt; for. It’s also what you’re probably already using them for.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you’re changing data at the same time, a migration &lt;em&gt;might&lt;/em&gt; work well. But there are some things to watch out for.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Calling something like &lt;code&gt;Permissions.create(...)&lt;/code&gt; in your migration can cause you trouble. If the model has changed, your migration &lt;a href=&quot;http://railsguides.net/change-data-in-migrations-like-a-boss/&quot;&gt;might break&lt;/a&gt;, because your model might not be available when the migration runs. Or your model might have changed between the time you wrote the migration and when it ran. There are ways to get around this, but they’re error-prone and can fail in weird ways.&lt;/p&gt;

&lt;p&gt;Migrations are also less useful if your task doesn’t involve ActiveRecord.&lt;/p&gt;

&lt;p&gt;These aren’t deal-breakers. &lt;strong&gt;But I tend not to import or change much data in migrations. There are better options.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;write-a-rake-task&quot;&gt;Write a rake task&lt;/h2&gt;

&lt;p&gt;You have a task. You probably only want to run it once. And you want to be able to test it on your machine and run it in production.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rake tasks work really well for this.&lt;/strong&gt; Rails can even generate rake tasks for you:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rails&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locations&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;import&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rake&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This creates a file for you to stash your code into:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;lib/tasks/locations.rake&lt;/span&gt;&lt;/figcaption&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:locations&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;TODO&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;import: :environment&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Inside that &lt;code&gt;task&lt;/code&gt; block, you can use all your models and the rest of the code in your Rails app. &lt;strong&gt;It’s easy to import and change data, because you can write your code just like you were sitting at a Rails console.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once you’ve written your task, you can run it with &lt;code&gt;rake locations:import&lt;/code&gt;. If you’re using Heroku, you can run it with &lt;code&gt;heroku run rake locations:import&lt;/code&gt;. If you’re using Capistrano, you can use the &lt;a href=&quot;https://github.com/sheharyarn/capistrano-rake&quot;&gt;capistrano-rake&lt;/a&gt; gem to run your task. You might have an even better option, though.&lt;/p&gt;

&lt;h2 id=&quot;write-a-scheduled-job-using-sidekiq-schedulerhttpsgithubcommoove-itsidekiq-scheduler&quot;&gt;Write a scheduled job, using &lt;a href=&quot;https://github.com/Moove-it/sidekiq-scheduler&quot;&gt;sidekiq-scheduler&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;If your app is big enough, you’re &lt;em&gt;probably&lt;/em&gt; already using &lt;a href=&quot;http://sidekiq.org&quot;&gt;Sidekiq&lt;/a&gt;, &lt;a href=&quot;https://github.com/resque/resque&quot;&gt;Resque&lt;/a&gt;, or something like that.&lt;/p&gt;

&lt;p&gt;Most of these background job processors can schedule jobs to run later. In Sidekiq, for example, there’s the &lt;a href=&quot;https://github.com/Moove-it/sidekiq-scheduler&quot;&gt;sidekiq-scheduler gem&lt;/a&gt;. And with sidekiq-scheduler, there’s a trick you can do.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What if you had a job that never &lt;em&gt;automatically&lt;/em&gt; scheduled itself, but let you &lt;em&gt;manually&lt;/em&gt; schedule it whenever you wanted?&lt;/strong&gt; That would work great for “one-off” jobs that you might want to run again later, or that you’d rather run using a UI.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In sidekiq-scheduler, you can schedule the job far in the future, and set the job to disabled:&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;sidekiq.yml&lt;/span&gt;&lt;/figcaption&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;ss&quot;&gt;:schedule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;location_importer:
    class: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;LocationImporterWorker&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;at: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'3001/01/01'&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;enabled: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, when you visit sidekiq-web, you’ll see a button to manually enqueue the job:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/schedule-adhoc-task.png&quot; width=&quot;819&quot; height=&quot;144&quot;&gt;&lt;/p&gt;

&lt;p&gt;With this, you can run your job whenever you’re ready, in both development and production. And if you ever need to run it again, it’s right there in the UI.&lt;/p&gt;

&lt;p&gt;This isn’t the best option if your job is dangerous. It’s too easy to accidentally click that button. And it’s also not great if the job takes a while to complete, because Sidekiq works best if jobs finish quickly. Your job will take over a worker, and you won’t be able to safely restart Sidekiq until your job finishes. &lt;strong&gt;But if your job is fast, and can run safely more than once, this works well.&lt;/strong&gt; If it’s a cleanup kind of task, you might decide you &lt;em&gt;want&lt;/em&gt; to run it regularly.&lt;/p&gt;

&lt;p&gt;If you only want to focus on scheduling and triggering, or need more flexibility to set params in your one-time scripts, a reader, Dmitry, pointed me at &lt;a href=&quot;https://github.com/richfisher/sidekiq-enqueuer&quot;&gt;sidekiq-enqueuer&lt;/a&gt;. &lt;strong&gt;With sidekiq-enqueuer, you can schedule jobs and set params, all through the Sidekiq web interface.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;ssh-into-production-and-paste-code-into-the-rails-console&quot;&gt;SSH into production and paste code into the Rails console&lt;/h2&gt;

&lt;p&gt;Just kidding.&lt;/p&gt;

&lt;h2 id=&quot;which-should-you-choose&quot;&gt;Which should you choose?&lt;/h2&gt;

&lt;p&gt;I’ve used all of these ways to run one-off tasks. &lt;strong&gt;But I’ll usually go for a rake task first.&lt;/strong&gt; It works, it’s hard to run accidentally, and it’s easy to get rid of when you’re done with it. I don’t choose rake tasks every time, though.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I might choose a migration if:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The job fixes up data using SQL as part of a database schema change.&lt;/li&gt;
  &lt;li&gt;The job is very simple data work, like changing data in a column or adding a few records.&lt;/li&gt;
  &lt;li&gt;I want to easily track whether the job has been run, and not run it again.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;I might choose a Sidekiq job if:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I think I might want to run the job again later.&lt;/li&gt;
  &lt;li&gt;Someone who’s not me has to run it. All they’ll have to do is click a button.&lt;/li&gt;
  &lt;li&gt;It’s a short data import or data cleanup job. I’ll probably have to run those regularly, even if I don’t expect to at first.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How about you? Do you have any other options, or make different choices? &lt;strong&gt;Leave a comment and let me know!&lt;/strong&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.justinweiss.com,2015-09-22:/articles/how-to-get-from-theyre-to-theyre/</id>
    <title type="html">How to get from theyâ€™re to they’re</title>
    <published>2015-09-22T06:35:48Z</published>
    <updated>2015-09-22T06:35:48Z</updated>
    <link rel="alternate" href="https://www.justinweiss.com/articles/how-to-get-from-theyre-to-theyre/">
    <content type="html">
&lt;p&gt;&lt;a href=&quot;/blog/2015/09/15/3-steps-to-fix-encoding-problems-in-ruby/&quot;&gt;In last week’s article&lt;/a&gt;, you learned a short process that solves most encoding problems. &lt;strong&gt;But there’s one encoding problem that’s much harder to solve.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I know you’ve seen it. (Or maybe youâ€™ve seen it?) It’s when a curly quote turns into â€™, or an em-dash turns into â€”. It’ll make you think you’ve gone crazy. It should just work!&lt;/p&gt;

&lt;p&gt;You could create a giant table, so you could find bad characters and replace them with good ones:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;broken: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'â€“'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;ss&quot;&gt;fixed: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;—&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;broken: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;â€”&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;ss&quot;&gt;fixed: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;–&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;broken: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;â€˜&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;ss&quot;&gt;fixed: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;‘&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;broken: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;â€™&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;ss&quot;&gt;fixed: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;’&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;broken: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;â€œ&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;ss&quot;&gt;fixed: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;“&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;broken: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;â€&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;fixed: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;”&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;But there’s an easier, more reliable way to fix those broken characters.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;why-does-good-typography-always-break&quot;&gt;Why does good typography always break?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.justinweiss.com/blog/2015/09/15/3-steps-to-fix-encoding-problems-in-ruby/&quot;&gt;Last week&lt;/a&gt;, you learned that an encoding is just a way to turn groups of meaningless bytes into displayable characters.&lt;/strong&gt; Not every character can be represented in a single byte, because there are more than 256 possible characters. So some characters, like the curly quote &lt;code&gt;’&lt;/code&gt;, are represented with more than one byte:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-irb&quot;&gt;&lt;span class=&quot;gp&quot;&gt;irb(main):001:0&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;they’re&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bytes&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;116&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;104&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;101&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;121&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;226&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;153&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;114&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;101&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Even though the string only has 7 characters, they’re represented by 9 bytes!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When you focus on just the curly quote:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-irb&quot;&gt;&lt;span class=&quot;gp&quot;&gt;irb(main):002:0&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;’&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bytes&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;226&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;153&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You’ll see it uses 3 bytes. And our messed up string, theyâ€™re, has three characters where it should just have one. That seems like more than a coincidence, right?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It seems like those three bytes should be read as UTF-8, where they’d represent a curly quote. Instead, &lt;em&gt;each byte&lt;/em&gt; is showing up as a different character.&lt;/strong&gt; So, which encoding would represent &lt;code&gt;[226, 128, 153]&lt;/code&gt; as &lt;code&gt;â€™&lt;/code&gt;? If you look at a few tables of popular encodings, you’ll see it’s &lt;a href=&quot;https://en.wikipedia.org/wiki/Windows-1252&quot;&gt;Windows-1252&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can check this in &lt;code&gt;irb&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-irb&quot;&gt;&lt;span class=&quot;gp&quot;&gt;irb(main):003:0&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;they’re&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;force_encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Windows-1252&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;theyâ€™re&quot;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;(We need that last &lt;code&gt;.encode(&quot;UTF-8&quot;)&lt;/code&gt; to display the string in the console.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Yep! That’s the problem.&lt;/strong&gt; But it gets worse.&lt;/p&gt;

&lt;p&gt;The data is supposed to be UTF-8, but is being misread as Windows-1252. But you’ll probably save that data to a database, or a file, as UTF-8. &lt;strong&gt;Ruby will helpfully convert it to UTF-8 for you, so you’ll end up with:&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-irb&quot;&gt;&lt;span class=&quot;gp&quot;&gt;irb(main):004:0&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;they’re&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;force_encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Windows-1252&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;theyâ€™re&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;irb(main):005:0&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;they’re&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;force_encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Windows-1252&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bytes&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;116&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;104&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;101&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;121&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;195&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;162&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;226&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;130&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;172&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;226&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;132&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;162&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;114&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;101&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Your string has been badly-encoded &lt;em&gt;twice&lt;/em&gt;. Those broken characters now look like they’re supposed to be there. And if you didn’t know how it happened, it’d be almost impossible to untangle it.&lt;/p&gt;

&lt;h2 id=&quot;how-do-you-fix-it&quot;&gt;How do you fix it?&lt;/h2&gt;

&lt;p&gt;How do you get things back to normal? Let’s think about the problem backwards:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;You have a UTF-8 string, (theyâ€™re)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;converted from a Windows-1252 string, (theyâ€™re)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;whose bytes &lt;em&gt;should have been&lt;/em&gt; read as UTF-8 (they’re)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;To fix it, you just have to follow those backwards steps.&lt;/strong&gt; Use &lt;code&gt;encode&lt;/code&gt; to convert the UTF-8 string back into a Windows-1252 string. Then, use &lt;code&gt;force_encoding&lt;/code&gt; to force that mis-encoded Windows-1252 string to be read as UTF-8:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-irb&quot;&gt;&lt;span class=&quot;gp&quot;&gt;irb(main):006:0&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;theyâ€™re&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Windows-1252&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;force_encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;they’re&quot;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Fixed!&lt;/p&gt;

&lt;h2 id=&quot;theres-one-small-problem&quot;&gt;There’s one small problem…&lt;/h2&gt;

&lt;p&gt;Unfortunately, you probably found this problem because a bunch of files or database records had badly encoded data in it. And not every file or record is necessarily badly encoded – you might have a mix of good and bad data. &lt;em&gt;Especially&lt;/em&gt; if that data came from the people visiting your site.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If that’s the case, you can’t blindly run that code on every string:&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-irb&quot;&gt;&lt;span class=&quot;gp&quot;&gt;irb(main):007:0&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;theyâ€™re&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Windows-1252&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;force_encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;they’re&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;irb(main):008:0&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;they’re&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Windows-1252&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;force_encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;they&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x92&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;re&quot;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you run it on good data, you’ll just turn it into bad data. So what can you do?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can use a heuristic: only change strings that have one of the bad characters in them, like &lt;code&gt;â&lt;/code&gt;.&lt;/strong&gt; This works well if a character like &lt;code&gt;â&lt;/code&gt; won’t ever appear in a valid string.&lt;/p&gt;

&lt;p&gt;The last time I fixed this kind of bug, though, I wanted to play it safe. I used another useful tool to help: my eyes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Whenever I found a badly encoded string, I printed it out, along with its replacement:&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Changing title with ID 6 from &quot;Theyâ€™re over there!&quot; to &quot;They’re over there!&quot;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That way, I could spot-check the small number of strings that changed, and make sure they didn’t break any further.&lt;/p&gt;

&lt;h2 id=&quot;i-think-i-have-a-headache&quot;&gt;I think I have a headache&lt;/h2&gt;

&lt;p&gt;Like I said last week, keeping different interpretations of the same data straight in your head is hard! But if you’re confused, exploring in an &lt;code&gt;irb&lt;/code&gt; console will help. So try it out! Open one up, and see if you can go back and forth between &lt;code&gt;—&lt;/code&gt; and &lt;code&gt;â€”&lt;/code&gt;, or &lt;code&gt;“&lt;/code&gt; and &lt;code&gt;â€œ&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Practicing complicated ideas like these is the fastest way to feel confident when you need them.&lt;/strong&gt; And in the &lt;a href=&quot;/practicing-rails&quot;&gt;free sample chapter of &lt;em&gt;Practicing Rails&lt;/em&gt;&lt;/a&gt;, you’ll learn the best techniques and processes to do just that.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.justinweiss.com,2015-09-16:/articles/3-steps-to-fix-encoding-problems-in-ruby/</id>
    <title type="html">3 steps to fix encoding problems in Ruby</title>
    <published>2015-09-16T06:59:11Z</published>
    <updated>2015-09-16T06:59:11Z</updated>
    <link rel="alternate" href="https://www.justinweiss.com/articles/3-steps-to-fix-encoding-problems-in-ruby/">
    <content type="html">
&lt;p&gt;&lt;strong&gt;You only really think about a string’s encoding when it breaks.&lt;/strong&gt; When you check your exception tracker and see&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Encoding::InvalidByteSequenceError: &quot;\xFE&quot; on UTF-8&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;staring you in the face. Or maybe “they’re” starts showing up as “theyâ€™re”.&lt;/p&gt;

&lt;p&gt;So, when you have a bad encoding, how do you figure out what broke? And how can you fix it?&lt;/p&gt;

&lt;h2 id=&quot;what-is-an-encoding&quot;&gt;What is an encoding?&lt;/h2&gt;

&lt;p&gt;If you can imagine what encoding does to a string, these bugs are easier to fix.&lt;/p&gt;

&lt;p&gt;You can think of a string as an array of bytes, or small numbers:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-irb&quot;&gt;&lt;span class=&quot;gp&quot;&gt;irb(main):001:0&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bytes&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;104&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;101&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;108&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;108&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;111&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this encoding, &lt;code&gt;104&lt;/code&gt; means &lt;code&gt;h&lt;/code&gt;, &lt;code&gt;33&lt;/code&gt; means &lt;code&gt;!&lt;/code&gt;, and so on.&lt;/p&gt;

&lt;p&gt;It gets trickier when you use characters that are less common in English:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-irb&quot;&gt;&lt;span class=&quot;gp&quot;&gt;irb(main):002:0&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hellṏ!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bytes&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;104&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;101&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;108&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;108&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;225&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;185&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;143&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now it’s harder to tell which number represents which character. Instead of one byte, &lt;code&gt;ṏ&lt;/code&gt; is represented by the group of bytes &lt;code&gt;[225, 185, 143]&lt;/code&gt;. But there’s still a relationship between bytes and characters. &lt;strong&gt;And a string’s encoding defines that relationship.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Take a look at what a single set of bytes looks like when you try different encodings:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-irb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Try an ISO-8859-1 string with a special character!
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;irb(main):003:0&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hellÔ!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ISO-8859-1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hellÔ!&quot;&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;irb(main):004:0&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bytes&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;104&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;101&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;108&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;108&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;212&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# What would that string look like interpreted as ISO-8859-5 instead?
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;irb(main):005:0&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;force_encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ISO-8859-5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hellд!&quot;&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;irb(main):006:0&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bytes&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;104&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;101&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;108&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;108&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;212&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The bytes didn’t change. But that doesn’t look right at all. Changing the encoding changed how the string printed, without changing the bytes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And not all strings can be represented in all encodings&lt;/strong&gt;:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-irb&quot;&gt;&lt;span class=&quot;gp&quot;&gt;irb(main):006:0&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hi∑&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Windows-1252&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Encoding::UndefinedConversionError: U+2211 to WINDOWS-1252 in conversion from UTF-8 to WINDOWS-1252
	from (irb):61:in `encode'
	from (irb):61
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;	from /usr/local/bin/irb:11:in `&amp;lt;main&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Most encodings are small, and can’t handle every possible character. You’ll see that error when a character in one encoding doesn’t exist in another, or when Ruby can’t figure out how to translate a character between two encodings.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can work around this error if you pass extra options into &lt;a href=&quot;http://ruby-doc.org/core-2.2.3/String.html#method-i-encode&quot;&gt;&lt;code&gt;encode&lt;/code&gt;&lt;/a&gt;:&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-irb&quot;&gt;&lt;span class=&quot;gp&quot;&gt;irb(main):064:0&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hi∑&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Windows-1252&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;invalid: :replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;undef: :replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hi?&quot;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code&gt;invalid&lt;/code&gt; and &lt;code&gt;undef&lt;/code&gt; options replace characters that can’t be translated with a different character. By default, that replacement character is &lt;code&gt;?&lt;/code&gt;. (When you convert to Unicode, it’s �).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Unfortunately, when you replace characters with &lt;code&gt;encode&lt;/code&gt;, you might lose information.&lt;/strong&gt; You have no idea which bytes were replaced by &lt;code&gt;?&lt;/code&gt;. But if you need your data to be in that new encoding, losing data can be better than things being broken.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;So far, you’ve seen three key string methods to help you understand encodings:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://ruby-doc.org/core-2.2.3/String.html#method-i-encode&quot;&gt;&lt;code&gt;encode&lt;/code&gt;&lt;/a&gt;, which translates a string to another encoding (converting characters to their equivalent in the new encoding)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://ruby-doc.org/core-2.2.3/String.html#method-i-bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;, which will show you the bytes that make up a string&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://ruby-doc.org/core-2.2.3/String.html#method-i-force_encoding&quot;&gt;&lt;code&gt;force_encoding&lt;/code&gt;&lt;/a&gt;, which will show you what those bytes would look like interpreted by a different encoding&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The major difference between &lt;code&gt;encode&lt;/code&gt; and &lt;code&gt;force_encoding&lt;/code&gt; is that &lt;code&gt;encode&lt;/code&gt; might change &lt;code&gt;bytes&lt;/code&gt;, and &lt;code&gt;force_encoding&lt;/code&gt; won’t.&lt;/p&gt;

&lt;h2 id=&quot;a-three-step-process-for-fixing-encoding-bugs&quot;&gt;A three-step process for fixing encoding bugs&lt;/h2&gt;

&lt;p&gt;You can fix most encoding issues with three steps:&lt;/p&gt;

&lt;h3 id=&quot;discover-which-encoding-your-string-is-actually-in&quot;&gt;1. Discover which encoding your string is &lt;em&gt;actually&lt;/em&gt; in.&lt;/h3&gt;

&lt;p&gt;This sounds easy. &lt;strong&gt;But just because a string &lt;em&gt;says&lt;/em&gt; it’s some encoding, doesn’t mean it actually is:&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-irb&quot;&gt;&lt;span class=&quot;gp&quot;&gt;irb(main):078:0&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hi&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x99&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encoding&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;#&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Encoding&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:UTF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s not right – if it was &lt;em&gt;really&lt;/em&gt; UTF-8, it wouldn’t have that weird backslashed number in it. So how do you figure out the right encoding for your string?&lt;/p&gt;

&lt;p&gt;A lot of older software will stick to a single default encoding, so you can research where the input came from. Did someone paste it in from Word? It could be &lt;a href=&quot;https://en.wikipedia.org/wiki/Windows-1252&quot;&gt;Windows-1252&lt;/a&gt;. Did it come from a file or did you pull it from an older website? It might be &lt;a href=&quot;https://en.wikipedia.org/wiki/ISO/IEC_8859-1&quot;&gt;ISO-8859-1&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I’ve also found it helpful to search for encoding tables, like the ones on those linked Wikipedia pages.&lt;/strong&gt; On those tables, you can look up the characters referenced by the unknown numbers, and see if they make sense in context.&lt;/p&gt;

&lt;p&gt;In this example, the Windows-1252 chart shows that the byte &lt;code&gt;99&lt;/code&gt; represents the “™” character. Byte &lt;code&gt;99&lt;/code&gt; doesn’t exist under ISO-8859-1. If ™ makes sense here, you could assume the input was in Windows-1252 and move on. Otherwise, you could keep researching until you found a character that seems more reasonable.&lt;/p&gt;

&lt;h3 id=&quot;decide-which-encoding-you-want-the-string-to-be&quot;&gt;2. Decide which encoding you &lt;em&gt;want&lt;/em&gt; the string to be.&lt;/h3&gt;

&lt;p&gt;This one’s easy. Unless you have a really good reason, &lt;a href=&quot;http://utf8everywhere.org&quot;&gt;you want your strings to be UTF-8 encoded&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There’s one other common encoding you might use in Ruby: ASCII-8BIT. In ASCII-8BIT, every character is represented by a single byte. That is, &lt;code&gt;str.chars.length == str.bytes.length&lt;/code&gt;. So, if you want a lot of control over the specific bytes in your string, ASCII-8BIT might be a good option.&lt;/p&gt;

&lt;h3 id=&quot;re-encode-your-string-from-the-encoding-in-step-1-to-the-encoding-in-step-2&quot;&gt;3. Re-encode your string from the encoding in step 1 to the encoding in step 2.&lt;/h3&gt;

&lt;p&gt;You can do this with the &lt;code&gt;encode&lt;/code&gt; method. In this example, our string &lt;em&gt;was&lt;/em&gt; in the Windows-1252 encoding, and we &lt;em&gt;want&lt;/em&gt; it to become UTF-8. Pretty straightforward:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-irb&quot;&gt;&lt;span class=&quot;gp&quot;&gt;irb(main):088:0&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hi&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x99&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Windows-1252&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hi™!&quot;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Much better. (Even though the order of the encodings in that call always seemed backwards to me).&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;It can be brain-bending to imagine different interpretations of the same array of bytes. &lt;em&gt;Especially&lt;/em&gt; when one of those interpretations is broken. &lt;strong&gt;But there’s a great way to become a lot more comfortable with encodings: Play with them.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Open an &lt;code&gt;irb&lt;/code&gt; console, and mess around with &lt;code&gt;encode&lt;/code&gt;, &lt;code&gt;bytes&lt;/code&gt;, and &lt;code&gt;force_encoding&lt;/code&gt;. Watch how &lt;code&gt;encode&lt;/code&gt; changes the bytes making up the string. Build intuition about what different encodings look like. When you’ve grown more comfortable with encodings and use these steps, you’ll fix in minutes what would have taken you hours before.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Finally, if you want to learn how to make a habit out of learning these kinds of things by doing, &lt;a href=&quot;/practicing-rails&quot;&gt;grab the free sample chapter of my book&lt;/a&gt;.&lt;/strong&gt; Breaking things in the console is a &lt;em&gt;really&lt;/em&gt; fun way to study ideas like this.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.justinweiss.com,2015-09-08:/articles/keeping-your-logs-from-becoming-an-unreadable-mess/</id>
    <title type="html">Keeping your logs from becoming an unreadable mess</title>
    <published>2015-09-08T07:23:49Z</published>
    <updated>2015-09-08T07:23:49Z</updated>
    <link rel="alternate" href="https://www.justinweiss.com/articles/keeping-your-logs-from-becoming-an-unreadable-mess/">
    <content type="html">&lt;p&gt;When you run into a strange, seemingly unsolvable bug, improving your logging can be the best step you can take. &lt;strong&gt;Great logging is the easiest way to detect and fix entire classes of bugs.&lt;/strong&gt; When you log enough information, you can see how your data changes during a request. You can track the calls you make to other services, and investigate the response. In fact, when debuggers failed, logging helped me fix the toughest bug I’ve ever run into.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But log too much, and your log files will quickly turn into a jumble of unreadable, unhelpful messages.&lt;/strong&gt; How can you slice just the information you care about out of that pile of data? Can you print messages in a way that’s easy to filter later?&lt;/p&gt;

&lt;h2 id=&quot;marking-your-log-messages&quot;&gt;Marking your log messages&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Rails includes &lt;a href=&quot;http://api.rubyonrails.org/classes/ActiveSupport/TaggedLogging.html&quot;&gt;TaggedLogging&lt;/a&gt;, which can help you quickly categorize related log messages.&lt;/strong&gt; When you tag a logger, you’ll get a marker at the beginning of your message. So instead of:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;Finding people...
  Person Load &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.3ms&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  SELECT &lt;span class=&quot;s2&quot;&gt;&quot;people&quot;&lt;/span&gt;.&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; FROM &lt;span class=&quot;s2&quot;&gt;&quot;people&quot;&lt;/span&gt;
Found 0 people!&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You could tag the Rails logger:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tagged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;People&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;debug&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Finding people...&quot;&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@people&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;debug&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Found &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@people&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; people!&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And you’d see something like this:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;People] Finding people...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;People]   Person Load &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.3ms&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  SELECT &lt;span class=&quot;s2&quot;&gt;&quot;people&quot;&lt;/span&gt;.&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; FROM &lt;span class=&quot;s2&quot;&gt;&quot;people&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;People] Found 0 people!&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Now, log messages that care about different things can &lt;em&gt;look&lt;/em&gt; different.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;some-tagged-logger-examples&quot;&gt;Some tagged logger examples&lt;/h2&gt;

&lt;p&gt;As you log more often, and log more complicated things, you’ll naturally notice areas where those tags will make your messages clearer. &lt;strong&gt;But there are a few places I’ve found tagged logging particularly helpful.&lt;/strong&gt; I’ll usually tag those right away.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can log requests you make to other APIs:&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tagged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;GitHub API&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;URI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://api.github.com/repos/rails/rails/tags&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Fetching &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;First tag: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;GitHub API] Fetching https://api.github.com/repos/rails/rails/tags
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;GitHub API] First tag: v4.2.4.rc1&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That way, you can easily see how and when your app is talking to that API.&lt;/p&gt;

&lt;p&gt;(This works particularly well with &lt;a href=&quot;https://github.com/lostisland/faraday&quot;&gt;Faraday&lt;/a&gt; middleware, or if you only communicate with a server through a &lt;a href=&quot;http://martinfowler.com/eaaCatalog/gateway.html&quot;&gt;Gateway&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Background jobs also work well with tagged logging:&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;active_support/tagged_logging&quot;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Resque&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TaggedLogging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Resque&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;LoggedJob&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;around_perform_log_job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tagged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Performing &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; with &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inspect&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyJob&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;LoggedJob&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, any job that extends LoggedJob will have all of its log messages tagged with the class name of the job.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And if you have a logged-in user, you could tag messages with their user ID:&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tagged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_user_id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;user-&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_user_id&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;user-anonymous&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;debug&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Finding people...&quot;&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@people&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;debug&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Found &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@people&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; people!&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user-123] Finding people...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user-123]   Person Load &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.3ms&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  SELECT &lt;span class=&quot;s2&quot;&gt;&quot;people&quot;&lt;/span&gt;.&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; FROM &lt;span class=&quot;s2&quot;&gt;&quot;people&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user-123] Found 0 people!&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Finally, if you add a line to your &lt;code&gt;config/environments/production.rb&lt;/code&gt; (or &lt;code&gt;development.rb&lt;/code&gt;), you can have Rails automatically tag your messages:&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;log_tags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:subdomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:uuid&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;log_tags&lt;/code&gt; lists the tags you want to appear at the beginning of every Rails log entry. Each symbol refers to a method on &lt;a href=&quot;http://api.rubyonrails.org/classes/ActionDispatch/Request.html&quot;&gt;ActionDispatch::Request&lt;/a&gt;, so &lt;code&gt;:uuid&lt;/code&gt; means &lt;code&gt;request.uuid&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can also pass a Proc that takes a &lt;code&gt;request&lt;/code&gt; object:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;log_tags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:subdomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:uuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;User-Agent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But I don’t see that very often.&lt;/p&gt;

&lt;p&gt;These default tags are nice: &lt;code&gt;uuid&lt;/code&gt; can tie together all the log entries that happen in one request, and if you’re keeping sessions on the server, the session ID is also helpful. &lt;strong&gt;With those tags, and enough messages, you can trace some really complicated paths through your app.&lt;/strong&gt; And usually, that’s what it takes to figure out how a nasty bug happened.&lt;/p&gt;

&lt;p&gt;How much do you use the Rails logger in your apps? Have you tried tagged logging? If you haven’t, try finding a place for it. &lt;strong&gt;Tagging actions taken by your users is a good start.&lt;/strong&gt; It’ll help you out the next time you have to debug a crazy multi-step bug.&lt;/p&gt;

&lt;p&gt;If you want to learn more about logging and other debugging techniques, I’ve dedicated an entire chapter of &lt;a href=&quot;/practicing-rails&quot;&gt;Practicing Rails&lt;/a&gt; to finding and fixing the errors you’ll run into as you create your apps. &lt;strong&gt;&lt;a href=&quot;/practicing-rails&quot;&gt;Grab the first chapter for free here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.justinweiss.com,2015-09-01:/articles/should-you-use-scopes-or-class-methods/</id>
    <title type="html">Should you use scopes or class methods?</title>
    <published>2015-09-01T07:30:32Z</published>
    <updated>2015-09-01T07:30:32Z</updated>
    <link rel="alternate" href="https://www.justinweiss.com/articles/should-you-use-scopes-or-class-methods/">
    <content type="html">
&lt;p&gt;&lt;em&gt;This article is &lt;a href=&quot;http://kydonia.net/blog/npmachine/2016/12/27/Should-You-Use-Scopes-or-Class-Methods.html&quot;&gt;also available in Korean&lt;/a&gt;, thanks to Soonsang Hong!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://guides.rubyonrails.org/active_record_querying.html#scopes&quot;&gt;Scopes&lt;/a&gt; are a great way to grab the right objects out of your database:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;app/models/review.rb&lt;/span&gt;&lt;/figcaption&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Review&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:most_recent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;created_at desc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You’d use the scope like this:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;app/models/homepage_controller.rb&lt;/span&gt;&lt;/figcaption&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;vi&quot;&gt;@recent_reviews&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Review&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;most_recent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Calling that scope, though, looks &lt;em&gt;exactly&lt;/em&gt; like calling a class method on &lt;code&gt;Review&lt;/code&gt;&lt;/strong&gt;. And it’s easy to build it as a class method, instead:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;app/models/review.rb&lt;/span&gt;&lt;/figcaption&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;most_recent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;created_at desc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;app/controllers/homepage_controller.rb&lt;/span&gt;&lt;/figcaption&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;vi&quot;&gt;@recent_reviews&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Review&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;most_recent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;So why would you use a scope when you could use regular Ruby class methods?&lt;/strong&gt; Is it worth keeping these totally separate, but equivalent, concepts in your head? What if you run into weird bugs? Isn’t all this extra stuff the kind of thing that makes Rails harder to learn?&lt;/p&gt;

&lt;p&gt;When &lt;em&gt;would&lt;/em&gt; it make sense to use a scope instead of a class method?&lt;/p&gt;

&lt;h2 id=&quot;why-use-scopes-when-we-already-have-class-methods&quot;&gt;Why use scopes when we already have class methods?&lt;/h2&gt;

&lt;p&gt;What if you wanted to grab all the reviews written after a specific date? But if no date was specified, you wanted &lt;em&gt;all&lt;/em&gt; the reviews returned instead?&lt;/p&gt;

&lt;p&gt;As a scope, that looks like this:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;app/models/review.rb&lt;/span&gt;&lt;/figcaption&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:created_since&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;reviews.created_at &amp;gt; ?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;present?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Easy enough, right? What about the class method?&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;app/models/review.rb&lt;/span&gt;&lt;/figcaption&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;created_since&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;present?&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;reviews.created_at &amp;gt; ?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It takes a little bit of extra work. Scopes prefer to return scopes, so they’re easy to chain together:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Review&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;positive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;created_since&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ago&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;But to get the class method to work the same way, you have to specifically handle the case where time is nil.&lt;/strong&gt; Otherwise, the &lt;em&gt;caller&lt;/em&gt; would have to figure out whether it has a valid, chainable scope.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;/blog/2014/06/24/simplify-your-ruby-code-with-the-robustness-principle/&quot;&gt;Methods that always return the same kind of object are really useful&lt;/a&gt;&lt;/strong&gt;. You don’t have to worry as much about edge cases or errors. You can assume you’ll always be handed back an object you can use.&lt;/p&gt;

&lt;p&gt;Here, it means you can chain scopes together, without having to worry about &lt;code&gt;nil&lt;/code&gt; values coming back.&lt;/p&gt;

&lt;p&gt;There are still ways you can break the assumption that you’d always get a scope back:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;app/models/review.rb&lt;/span&gt;&lt;/figcaption&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:broken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello!!!&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-irb&quot;&gt;&lt;span class=&quot;gp&quot;&gt;irb(main):001:0&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Review&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;broken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;most_recent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;NoMethodError: undefined method `most_recent' for &quot;Hello!!!&quot;:String&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But I’ve never had that happen in real code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The thing I love most about scopes is that they express &lt;em&gt;intent&lt;/em&gt;&lt;/strong&gt;. You’re telling the next person who reads your code, “This method can be chained, will eventually turn into a list of objects, and will help you select the right set of objects.” That’s a whole lot more than a generic class method says.&lt;/p&gt;

&lt;h2 id=&quot;when-should-you-use-a-class-method-instead-of-a-scope&quot;&gt;When should you use a class method instead of a scope?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Because scopes express intent, I use them whenever I’m chaining simple, built-in scopes (like &lt;code&gt;where&lt;/code&gt; and &lt;code&gt;limit&lt;/code&gt;) into more complicated scopes&lt;/strong&gt;. Finding the right bunch of objects is what scopes were designed for.&lt;/p&gt;

&lt;p&gt;There are two exceptions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
&lt;strong&gt;When I need to preload scopes, &lt;a href=&quot;http://www.justinweiss.com/blog/2015/06/23/how-to-preload-rails-scopes/&quot;&gt;I turn them into associations instead&lt;/a&gt;&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;
&lt;strong&gt;When I do more than chain built-in scopes into larger scopes, I use class methods&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When your scope logic gets complicated, a class method feels like the right place to put it.&lt;/p&gt;

&lt;p&gt;Inside a class method, you can easily mix Ruby code with database code. If you have sorting code that’s easier to write in Ruby, you could grab your objects in their default order, and use &lt;a href=&quot;http://ruby-doc.org/core-2.2.3/Enumerable.html#method-i-sort_by&quot;&gt;sort_by&lt;/a&gt; to put them in the right order.&lt;/p&gt;

&lt;p&gt;Or, if you’re feeling particularly tricky, a class method could grab data from a few different places: your database, Redis, or an external API or service. Then, it could assemble it all into a collection of objects that &lt;em&gt;feels&lt;/em&gt; like a scope that’s been turned into an array.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Even then, it’s still good to put your selecting, sorting, joining, and filtering code inside scopes. Then, use your scopes inside your class method.&lt;/strong&gt; You’ll end up with a clearer class method, and scopes you can use throughout your app.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Scopes are one of my favorite Rails features. &lt;strong&gt;You can do some powerful stuff – read my article on &lt;a href=&quot;/blog/2014/02/17/search-and-filter-rails-models-without-bloating-your-controller/&quot;&gt;sorting and filtering Rails models&lt;/a&gt; to see an especially useful scope example.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And there’s a really simple way to master using scopes: play with them inside tiny, focused apps. &lt;strong&gt;&lt;a href=&quot;/practicing-rails&quot;&gt;The free sample chapter of Practicing Rails&lt;/a&gt; will show you how.&lt;/strong&gt; Check it out!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.justinweiss.com,2015-07-29:/articles/how-to-predict-the-future-of-programming/</id>
    <title type="html">How to predict the future of programming</title>
    <published>2015-07-29T05:52:27Z</published>
    <updated>2015-07-29T05:52:27Z</updated>
    <link rel="alternate" href="https://www.justinweiss.com/articles/how-to-predict-the-future-of-programming/">
    <content type="html">&lt;p&gt;Why did Rails become so popular, so quickly?&lt;/p&gt;

&lt;p&gt;The simplicity helped, especially if you came from the Java, XML, Enterprise world. &lt;a href=&quot;https://www.youtube.com/watch?v=Gzj723LkRJY&quot;&gt;It was also marketed incredibly well&lt;/a&gt;. But that’s not everything.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A lot of Rails’ success in the startup world came from a simple fact: The problems businesses have aren’t that unique.&lt;/strong&gt; Rails was great at creating &lt;a href=&quot;https://en.wikipedia.org/wiki/Create,_read,_update_and_delete&quot;&gt;CRUD&lt;/a&gt; sites, while remaining flexible. And that’s really all a &lt;em&gt;ton&lt;/em&gt; of businesses need. Especially at the beginning.&lt;/p&gt;

&lt;p&gt;But this isn’t just true for businesses. &lt;strong&gt;A lot of the problems we face as software developers don’t change.&lt;/strong&gt; Sure, our solutions evolve. They cycle. We get better. But the same solutions discovered by the last generation of developers can still help us today.&lt;/p&gt;

&lt;p&gt;So, do you want to know the answers to the problems you’ll face in the future? The best thing you can do is look to the past.&lt;/p&gt;

&lt;h2 id=&quot;look-to-the-past&quot;&gt;Look to the past&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;On &lt;a href=&quot;http://martinfowler.com&quot;&gt;his website&lt;/a&gt;, Martin Fowler has an unbelievable collection of good solutions to common problems&lt;/strong&gt;. Have you been &lt;a href=&quot;http://blog.arkency.com/2015/03/fast-introduction-to-event-sourcing-for-ruby-programmers/&quot;&gt;hearing devs talk about Event Sourcing&lt;/a&gt;? He wrote the &lt;a href=&quot;http://www.martinfowler.com/eaaDev/EventSourcing.html&quot;&gt;definitive article&lt;/a&gt; on it 10 years ago. Chasing performance and reliability problems with your new REST API or &lt;a href=&quot;https://en.wikipedia.org/wiki/Service-oriented_architecture&quot;&gt;Service-Oriented Architecture&lt;/a&gt;? It’s &lt;a href=&quot;http://www.drdobbs.com/errant-architectures/184414966&quot;&gt;his first law of distributed objects&lt;/a&gt;, from close to 15 years ago.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://avdi.org&quot;&gt;Avdi Grimm&lt;/a&gt; told me that “If you want to lead the technology curve, start investigating whatever Martin Fowler was writing about a decade ago.” That’s totally true. &lt;strong&gt;The time you spend reading through the &lt;a href=&quot;http://martinfowler.com&quot;&gt;patterns on his website&lt;/a&gt; will be a great investment in your programming future.&lt;/strong&gt; And that’s not even mentioning &lt;a href=&quot;http://refactoring.com/catalog/&quot;&gt;the refactoring patterns&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Going further, just about any book or article written by the &lt;a href=&quot;http://www.agilemanifesto.org&quot;&gt;authors of the Agile Manifesto&lt;/a&gt; is worth reading – 15 years ago, they were working through the same software architecture problems we run into today.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can find a lot of their discussions on the &lt;a href=&quot;http://www.c2.com/cgi/wiki&quot;&gt;C2 Wiki&lt;/a&gt;&lt;/strong&gt;. The debates we have about &lt;a href=&quot;http://www.c2.com/cgi/wiki?TestDrivenDevelopment&quot;&gt;when TDD makes the most sense&lt;/a&gt;? They’re all there. And they’ve &lt;em&gt;been&lt;/em&gt; there. The wiki has been around for a while, and it’s still a fantastic resource.&lt;/p&gt;

&lt;p&gt;Books from the late 90’s to the early 2000’s are also helpful. I smiled all the way through &lt;a href=&quot;http://www.amazon.com/Smalltalk-Best-Practice-Patterns-Kent/dp/013476904X&quot;&gt;Smalltalk Best Practice Patterns&lt;/a&gt; and &lt;a href=&quot;http://www.amazon.com/Patterns-Enterprise-Application-Architecture-Martin/dp/0321127420&quot;&gt;Patterns of Enterprise Application Architecture&lt;/a&gt; (which was a huge influence on Rails), because they described problems I’ve had &lt;em&gt;so well&lt;/em&gt;.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Just like design fashions, software development practices cycle. From distributed to centralized, from client side to server side, from dynamic to static.&lt;/p&gt;

&lt;p&gt;Do you want to get ahead, understand what’s coming, and maybe even &lt;em&gt;drive&lt;/em&gt; what comes next? Look to the past. &lt;strong&gt;Research the solutions to the problems that our current solutions will cause.&lt;/strong&gt; And help bring the good practices of the last generation of software developers to the next.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.justinweiss.com,2015-07-21:/articles/turn-ruby-conference-videos-into-your-own-personal-podcast/</id>
    <title type="html">Turn Ruby conference videos into your own personal podcast</title>
    <published>2015-07-21T06:58:03Z</published>
    <updated>2015-07-21T06:58:03Z</updated>
    <link rel="alternate" href="https://www.justinweiss.com/articles/turn-ruby-conference-videos-into-your-own-personal-podcast/">
    <content type="html">
&lt;p&gt;Ruby conferences are awesome. There are so many people sharing so much knowledge, and you’ll take something away from almost every talk. &lt;strong&gt;And even if you can’t be there, new conferences mean lots of new talk videos.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;But there’s a problem. Videos take time. Even at 1.5x, they’ll still last 20 or 30 minutes each. And that’s focused time that’s hard to find as often as I’d like.&lt;/p&gt;

&lt;p&gt;Podcasts, though, &lt;a href=&quot;http://www.justinweiss.com/blog/2014/05/13/how-to-learn-ruby-while-you-walk-the-dog/&quot;&gt;have already found a place in my life&lt;/a&gt;. I start almost every commute by firing up &lt;a href=&quot;https://overcast.fm&quot;&gt;Overcast&lt;/a&gt; and listening to a few episodes. And besides the commute, you can listen to them while you walk the dog, or do the dishes. You can hear them as you go off to sleep.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So, after conference videos are posted, I’d love to take some of the non-code-heavy talks and put them where I’ll naturally hear them: inside my podcast player.&lt;/strong&gt; And it turns out there’s a pretty easy way to do just that.&lt;/p&gt;

&lt;h2 id=&quot;creating-a-personal-podcast-with-huffduffer&quot;&gt;Creating a personal podcast with Huffduffer&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://huffduffer.com&quot;&gt;Huffduffer&lt;/a&gt; is a website that turns audio files you find anywhere on the web into your own personal podcast station.&lt;/strong&gt; This is really cool! But there’s a problem when you try it with conference talks:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Most conference videos are conference &lt;em&gt;videos&lt;/em&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So, before you can add a talk to Huffduffer, you have to grab just the audio out of it. And to do that, you have to find a way to download the video.&lt;/p&gt;

&lt;h2 id=&quot;fetching-a-video-with-youtube-dl&quot;&gt;Fetching a video with &lt;code&gt;youtube-dl&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;When you see a video on a site like Youtube, Vimeo, or Confreaks, and you’d rather have it on your machine, you can use a little tool called &lt;a href=&quot;https://rg3.github.io/youtube-dl/&quot;&gt;&lt;code&gt;youtube-dl&lt;/code&gt;&lt;/a&gt;.&lt;/strong&gt; On a Mac, it’s easy to install using &lt;a href=&quot;http://brew.sh&quot;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;youtube-dl&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;(You can install it on other systems using &lt;a href=&quot;https://rg3.github.io/youtube-dl/download.html&quot;&gt;the instructions on the site&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Once it’s installed, if you wanted to download &lt;a href=&quot;http://kyfast.net&quot;&gt;Kylie Stradley’s&lt;/a&gt; &lt;a href=&quot;http://confreaks.tv/videos/railsconf2015-amelia-bedelia-learns-to-code&quot;&gt;great RailsConf 2015 talk&lt;/a&gt; so you could watch it offline, run:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;youtube-dl http://confreaks.tv/videos/railsconf2015-amelia-bedelia-learns-to-code&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is close to what we want. But to put it in a podcast, you only need the audio. &lt;code&gt;youtube-dl&lt;/code&gt; supports that with the &lt;code&gt;-x&lt;/code&gt; flag, but you have to install &lt;code&gt;ffmpeg&lt;/code&gt; first:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;ffmpeg
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;youtube-dl &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt; http://confreaks.tv/videos/railsconf2015-amelia-bedelia-learns-to-code

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;generic] railsconf2015-amelia-bedelia-learns-to-code: Requesting header
WARNING: Falling back on generic information extractor.
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;generic] railsconf2015-amelia-bedelia-learns-to-code: Downloading webpage
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;generic] railsconf2015-amelia-bedelia-learns-to-code: Extracting information
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;download] Downloading playlist: Confreaks TV | Amelia Bedelia Learns to Code - RailsConf 2015
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;generic] playlist Confreaks TV | Amelia Bedelia Learns to Code - RailsConf 2015: Collected 1 video ids &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;downloading 1 of them&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;download] Downloading video 1 of 1
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;youtube] bSbla50tqZE: Downloading webpage
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;youtube] bSbla50tqZE: Extracting video information
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;download] Destination: RailsConf 2015 - Amelia Bedelia Learns to Code-bSbla50tqZE.m4a
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;download] 100% of 31.88MiB &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;00:05
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ffmpeg] Correcting container &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;RailsConf 2015 - Amelia Bedelia Learns to Code-bSbla50tqZE.m4a&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;youtube] Post-process file RailsConf 2015 - Amelia Bedelia Learns to Code-bSbla50tqZE.m4a exists, skipping&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, in Huffduffer, click the “Huffduff it” link in the header, and you’ll run into the last hoop you have to jump through.&lt;/p&gt;

&lt;h2 id=&quot;uploading-the-audio-with-dropbox&quot;&gt;Uploading the audio with Dropbox&lt;/h2&gt;

&lt;p&gt;You can’t upload your new audio file to Huffduffer, because Huffduffer wants a &lt;em&gt;link&lt;/em&gt; to the file, not the file itself.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you’re a Dropbox user, you can easily get the file onto the internet if you drop it into Dropbox’s &lt;code&gt;Public/&lt;/code&gt; folder.&lt;/strong&gt; Then, you can right click and “Copy Public Link” to get the link you’ll use on Huffduffer.&lt;/p&gt;

&lt;p&gt;Finally, use the “RSS” link on Huffduffer to get your podcast into your favorite podcast player.&lt;/p&gt;

&lt;p&gt;Sadly, as a podcast, you miss out on the (frankly awesome) pictures in this talk. And it doesn’t work well with code- or demo-heavy talks (though you might still be able to get the gist of it).&lt;/p&gt;

&lt;p&gt;But sometimes, it’s not a choice between listening to a talk or watching a talk. It’s between listening to a talk and not experiencing it at all. If those are your options, audio-only seems like a decent compromise.&lt;/p&gt;

&lt;h2 id=&quot;putting-it-all-together&quot;&gt;Putting it all together&lt;/h2&gt;

&lt;p&gt;So, here’s that process again:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Sign up for a free &lt;a href=&quot;https://huffduffer.com&quot;&gt;Huffduffer&lt;/a&gt; account.&lt;/li&gt;
  &lt;li&gt;Install &lt;code&gt;youtube-dl&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Install &lt;code&gt;ffmpeg&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Download the talk’s audio with &lt;code&gt;youtube-dl -x &amp;lt;url_to_talk_video&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Toss the audio file into &lt;code&gt;~/Dropbox/Public&lt;/code&gt;, or somewhere else that’s publicly accessible.&lt;/li&gt;
  &lt;li&gt;Click “Huffduff it,” and paste the link to your new audio file.&lt;/li&gt;
  &lt;li&gt;Listen to the new episode of your very own conference podcast!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you’re a fan of podcasts, give this a try. It’s &lt;em&gt;really&lt;/em&gt; nice to have conference talks pop up where you’re already listening.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.justinweiss.com,2015-07-15:/articles/a-web-server-vs-an-app-server/</id>
    <title type="html">A web server vs. an app server</title>
    <published>2015-07-15T07:13:18Z</published>
    <updated>2015-07-15T07:13:18Z</updated>
    <link rel="alternate" href="https://www.justinweiss.com/articles/a-web-server-vs-an-app-server/">
    <content type="html">&lt;p&gt;When you research how to deploy your Rails app, you’ll see a lot of names: &lt;a href=&quot;https://httpd.apache.org&quot;&gt;Apache&lt;/a&gt;, &lt;a href=&quot;http://unicorn.bogomips.org&quot;&gt;Unicorn&lt;/a&gt;, &lt;a href=&quot;http://puma.io&quot;&gt;Puma&lt;/a&gt;, &lt;a href=&quot;https://www.phusionpassenger.com&quot;&gt;Phusion Passenger&lt;/a&gt;, &lt;a href=&quot;http://nginx.org&quot;&gt;Nginx&lt;/a&gt;, &lt;a href=&quot;http://rainbows.bogomips.org&quot;&gt;Rainbows&lt;/a&gt;, and many more. They all seem to fit under the “deploying Rails” category of software, but there’s a key difference between them. Some are “web servers,” and others are “app servers.”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Once you understand which is which, and where each category fits in your system, deployment will make a lot more sense.&lt;/strong&gt; But the categories aren’t always clear.&lt;/p&gt;

&lt;p&gt;What’s a web server, and how is it different than an app server? Can you use one without the other? And where does &lt;a href=&quot;https://rack.github.io&quot;&gt;Rack&lt;/a&gt; fit in?&lt;/p&gt;

&lt;h2 id=&quot;whats-a-web-server&quot;&gt;What’s a web server?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;A &lt;em&gt;web server&lt;/em&gt; is a program that takes a request to your website from a user and does some processing on it. Then, it might give the request to your Rails app.&lt;/strong&gt; Nginx and Apache are the two big web servers you’ll run into.&lt;/p&gt;

&lt;p&gt;If the request is for something that doesn’t change often, like CSS, JavaScript, or images, your Rails app probably doesn’t need to see it. The web server can handle the request itself, without even talking to your app. It’ll usually be faster that way.&lt;/p&gt;

&lt;p&gt;Web servers can handle SSL requests, serve static files and assets, compress requests, and do lots of other things that almost every website needs. And if your Rails app &lt;em&gt;does&lt;/em&gt; need to handle a request, the web server will pass it on to your app server.&lt;/p&gt;

&lt;h2 id=&quot;whats-an-app-server&quot;&gt;What’s an app server?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;An &lt;em&gt;app server&lt;/em&gt; is the thing that actually runs your Rails app.&lt;/strong&gt; Your app server loads your code and keeps your app in memory. When your app server gets a request from your web server, it tells your Rails app about it. After your app is done handling the request, the app server sends the response back to the web server (and eventually to the user).&lt;/p&gt;

&lt;p&gt;You can run most app servers by themselves, without a web server in front of it. That’s probably what you do in development mode! &lt;strong&gt;In production, though, you’ll usually have a web server in front.&lt;/strong&gt; It’ll handle multiple apps at once, render your assets faster, and deal with a lot of the processing you’ll do on every request.&lt;/p&gt;

&lt;p&gt;There are a &lt;em&gt;ton&lt;/em&gt; of app servers for Rails apps, including Mongrel (which isn’t used much anymore), Unicorn, Thin, Rainbows, and Puma. Each has different advantages and different philosophies. But in the end, they all accomplish the same thing – keeping your Rails app running and handling requests.&lt;/p&gt;

&lt;h2 id=&quot;what-about-passenger&quot;&gt;What about Passenger?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.phusionpassenger.com&quot;&gt;Phusion Passenger&lt;/a&gt; is a little unique. In “standalone mode,” it can act just like an app server. &lt;strong&gt;But it can also be built right into a web server, so you don’t &lt;em&gt;need&lt;/em&gt; a separate app server to run your Rails apps.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This can be really convenient. Especially if you’re planning to run a bunch of apps and don’t want to spend time setting up an app server for each one. After installing Passenger, you just point the web server directly at your Rails app (instead of an app server), and your Rails app will start handling requests!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Passenger is a nice option, but having a separate app server can be still be good.&lt;/strong&gt; Keeping the app server separate gives you the flexibility to choose an app server that best fits your needs, and you can run and scale it on its own. Still, I’m going to try it again the next time I deploy a new small app. I’m hoping it’ll make it easier to deploy future apps to the same server.&lt;/p&gt;

&lt;h2 id=&quot;what-about-rack&quot;&gt;What about Rack?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://rack.github.io&quot;&gt;Rack&lt;/a&gt; is the magic that lets any of these app servers run your Rails app. (Or Sinatra app, or Padrino app, or…)&lt;/p&gt;

&lt;p&gt;You can think of Rack as a common language that Ruby web frameworks (like Rails) and app servers both speak. Because each side knows the same language, it means Rails can talk to Unicorn and Unicorn to Rails, without having either Rails or Unicorn know anything about the other.&lt;/p&gt;

&lt;h2 id=&quot;how-do-they-relate&quot;&gt;How do they relate?&lt;/h2&gt;

&lt;p&gt;So, how does this all fit together?&lt;/p&gt;

&lt;p&gt;Out of these pieces, a web request will hit your web server first. If the request is something Rails can handle, the web server will do some processing on the request, and hand it off to the app server. The app server uses Rack to talk to your Rails app. When your app is done with the request, your Rails app sends the response back through the app server and the web server to the person using your app.&lt;/p&gt;

&lt;p&gt;More specifically, Nginx might pass a request to Unicorn. Unicorn gives the request to Rack, which gives it to the Rails router, which gives it to the right controller. Then, your response just goes back through the other way.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;This overview might be simplified. &lt;strong&gt;But even just knowing these categories will help you put the software you run into into the right mental buckets.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After you understand how app servers and web servers fit together, it’ll be a lot easier to debug server problems when you have them. You’ll know all the different places you could look, and how they interact. And once the next interesting app server arrives, it’ll be even easier for you to swap it in!&lt;/p&gt;

&lt;p&gt;If you’d like to learn more about how Rails interacts with the web, check this article out: &lt;a href=&quot;https://www.justinweiss.com/articles/how-rails-sessions-work/&quot;&gt;How Rails Sessions Work&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.justinweiss.com,2015-07-08:/articles/the-easiest-way-to-get-into-open-source/</id>
    <title type="html">The easiest way to get into open source</title>
    <published>2015-07-08T03:23:04Z</published>
    <updated>2015-07-08T03:23:04Z</updated>
    <link rel="alternate" href="https://www.justinweiss.com/articles/the-easiest-way-to-get-into-open-source/">
    <content type="html">
&lt;p&gt;&lt;em&gt;This article is &lt;a href=&quot;https://emaren84.github.io/blog/archivers/the-easiest-way-to-get-into-open-source-kor&quot;&gt;also available in Korean&lt;/a&gt;, thanks to Dohyung Ahn!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Thom Parkin made a &lt;a href=&quot;http://www.justinweiss.com/blog/2014/10/28/how-to-go-beyond-documentation-and-learn-a-new-library/#comment-1657912979&quot;&gt;great point in the comments of an earlier article of mine&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Great advice. But you missed one very important [final] point. Since this is Open Source, once you have figured out the details of that feature/function where the documentation is a bit light, YOU SHOULD UPDATE THE DOCS AND SUBMIT A PULL REQUEST. In that way the entire community benefits, and you can even gain some “coder cred” for your participation!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;I’m happy Thom mentioned this, because it’s so important&lt;/strong&gt;. Fixing documentation is the easiest way to start contributing back to the projects you use and love.&lt;/p&gt;

&lt;p&gt;My first contributions to projects like Rails, Rubinius, and Elixir have all been doc fixes. I’ve made small tweaks to make things clearer, explained some things that you could only discover by reading the code, even just fixed broken formatting. These have all been quick, easy ways to help out some big open source projects. Even when they’re my only contributions to a project, they’ve still helped future users, and Future Me. And that’s what open source is all about.&lt;/p&gt;

&lt;h2 id=&quot;why-documentation-fixes-are-such-a-great-way-to-get-started&quot;&gt;Why documentation fixes are such a great way to get started&lt;/h2&gt;

&lt;p&gt;Doc fixes are the least intimidating way to contribute to a big project like Rails:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;You don’t have to set up the project in order to fix the bug&lt;/strong&gt;. Since you’re just updating the documentation, you don’t have to get the tests or the app running. Sometimes, you won’t even have to clone the project to your machine – you can make your change right on GitHub!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;If the maintainer asks you to make changes to your pull request, they’re usually a matter of wording or taste&lt;/strong&gt;. Those kind of changes can be easier to stomach than criticism of your code. And it’s easier for you to make those changes, because you don’t have to update tests or code, just words.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Documentation is &lt;em&gt;hard&lt;/em&gt; for a project maintainer, so updates are appreciated&lt;/strong&gt;. Often, authors are too close to the code to understand where the confusing parts are. They need other, newer developers to tell them where the docs need help. It takes practice to see your project as a beginner would, and not everyone has built that skill.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Finally, you’re starting to build a relationship with the maintainer, with a low-impact change&lt;/strong&gt;. You’re not changing the direction of the project, like you would if you were contributing an entire feature. So your change is easier for a maintainer to review, and they’ll usually respond to you more quickly. Your merge request won’t get stuck in the “Is this a good idea?” phase.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you keep building that relationship, you’ll start to be seen as a reliable contributor. Your pull requests will get reviewed faster, and it’ll be easier for both of you to talk through more complicated feature requests and bug fixes.&lt;/p&gt;

&lt;p&gt;They’re easier to start, they’re easier to do, and they tend to get merged more quickly. So why wouldn’t your first contribution be a doc fix?&lt;/p&gt;

&lt;h2 id=&quot;how-to-start-contributing-back-updated-documentation&quot;&gt;How to start contributing back updated documentation&lt;/h2&gt;

&lt;p&gt;There’s an important way contributing doc updates is like fixing bugs: &lt;strong&gt;They both rely on being sensitive to things that feel wrong&lt;/strong&gt;. You have to pay attention.&lt;/p&gt;

&lt;p&gt;When you run into behavior you didn’t expect, it might be time to update the docs. If you have to dive into the code to solve a problem, you might also want to tell other people about it. You should even be sensitive to broken formatting and typos in the documentation you read. If you’re not going to fix it, who will?&lt;/p&gt;

&lt;p&gt;Once you have a good idea of where to make the change and how you want to word it, make your change and send a pull request through GitHub.&lt;/p&gt;

&lt;p&gt;If you’re still trying to decide on the best way to update the docs, open an issue on GitHub. It can be something like this:&lt;/p&gt;

&lt;p&gt;“Hey, this was confusing to me. I was thinking of updating it to look something like this: … What do you think? Anything else I should mention?” Together, you can come up with wording that satisfies everyone.&lt;/p&gt;

&lt;p&gt;Finally, don’t be discouraged if you don’t get a response. Big projects have a lot going on, so it’s easy for your contribution to fall through the cracks. &lt;strong&gt;In a week or so, if you still don’t hear from anyone, ask the maintainer again&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Documentation is often the first thing you encounter when you work with a library, so it’s important that it’s detailed and clear.&lt;/p&gt;

&lt;p&gt;So when you’re confused about the code you use, or have to dive into the source, make it easier for the next person. Write a quick update, and contribute it back. It’s the easiest way I know of to become an open source contributor.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article was originally sent to the people on &lt;a href=&quot;/list&quot;&gt;my list&lt;/a&gt;. To read more like it, &lt;a href=&quot;/list&quot;&gt;sign up here!&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.justinweiss.com,2015-06-30:/articles/creating-easy-readable-attributes-with-activerecord-enums/</id>
    <title type="html">Creating easy, readable attributes with ActiveRecord enums</title>
    <published>2015-06-30T07:39:15Z</published>
    <updated>2015-06-30T07:39:15Z</updated>
    <link rel="alternate" href="https://www.justinweiss.com/articles/creating-easy-readable-attributes-with-activerecord-enums/">
    <content type="html">
&lt;p&gt;Imagine a question that can be either “pending”, “approved”, or “flagged”. Or a phone number that’s a “home”, “office”, “mobile”, or “fax” (if it’s 1982).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Some models call for this kind of data.&lt;/strong&gt; An attribute that can have only one of a few different values. And that set of values almost never changes.&lt;/p&gt;

&lt;p&gt;It’s a situation where, if it were plain Ruby, you’d just use a symbol.&lt;/p&gt;

&lt;p&gt;You could create a PhoneNumberType or QuestionStatus model and a &lt;code&gt;belongs_to&lt;/code&gt; relationship to hold these values, but that doesn’t seem worth it. You could stuff them in a yaml file, but now you have to look in a totally different place to figure out what your object can do.&lt;/p&gt;

&lt;p&gt;In 4.1, Rails took a stab at solving this problem with &lt;a href=&quot;http://api.rubyonrails.org/v4.1.0/classes/ActiveRecord/Enum.html&quot;&gt;ActiveRecord enums&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;a-few-values-in-the-model&quot;&gt;A few values, in the model&lt;/h2&gt;

&lt;p&gt;ActiveRecord enums are pretty easy. You give your model an &lt;code&gt;integer&lt;/code&gt; column:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;bin/rails g model phone number:string phone_number_type:integer&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;List the values that attribute can take:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;app/models/phone.rb&lt;/span&gt;&lt;/figcaption&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Phone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;phone_number_type: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:home&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:office&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:mobile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:fax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And now you can deal with strings instead of numbers.&lt;/p&gt;

&lt;p&gt;Instead of this:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-irb&quot;&gt;&lt;span class=&quot;gp&quot;&gt;irb(main):001:0&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Phone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;phone_number_type&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You’ll see this:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-irb&quot;&gt;&lt;span class=&quot;gp&quot;&gt;irb(main):002:0&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Phone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;phone_number_type&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;fax&quot;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can &lt;em&gt;change&lt;/em&gt; that attribute using either strings or ints:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-irb&quot;&gt;&lt;span class=&quot;gp&quot;&gt;irb(main):003:0&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;phone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;phone_number_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;phone_number_type&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;office&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;irb(main):004:0&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;phone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;phone_number_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mobile&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;phone_number_type&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mobile&quot;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Or even using a bang method:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-irb&quot;&gt;&lt;span class=&quot;gp&quot;&gt;irb(main):005:0&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;phone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;office!&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;irb(main):006:0&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;phone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;phone_number_type&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;office&quot;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You get methods for asking if your attribute has some specific value:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-irb&quot;&gt;&lt;span class=&quot;gp&quot;&gt;irb(main):007:0&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;phone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;office?&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And you can find &lt;em&gt;all&lt;/em&gt; objects with the value you’re looking for:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-irb&quot;&gt;&lt;span class=&quot;gp&quot;&gt;irb(main):008:0&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Phone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;office&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  Phone Load (0.3ms)  SELECT &quot;phones&quot;.* FROM &quot;phones&quot; WHERE &quot;phones&quot;.&quot;phone_number_type&quot; = ?  [[&quot;phone_number_type&quot;, 1]]&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you want to see all the different values you can use, along with the numbers they’re associated with, use the &lt;code&gt;phone_number_types&lt;/code&gt; class method:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-irb&quot;&gt;&lt;span class=&quot;gp&quot;&gt;irb(main):009:0&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Phone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;phone_number_types&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;home&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;office&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mobile&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;fax&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Which makes them easy to put into an HTML form:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;app/views/phones/_form.html.erb&lt;/span&gt;&lt;/figcaption&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-erb&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;field&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:phone_number_type&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:phone_number_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Phone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;phone_number_types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;keys&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/enum.png&quot; class=&quot;img-responsive&quot; width=&quot;238&quot; height=&quot;234&quot; alt=&quot;An enum in a form&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;a-few-things-to-watch-for&quot;&gt;A few things to watch for&lt;/h2&gt;

&lt;p&gt;Enums aren’t without their problems, though. You have to keep a few things in mind if you don’t want to run into trouble later on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When you define an enum, order matters.&lt;/strong&gt; So if you go back to your code and decide that those values should really be in alphabetical order:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;app/models/phone.rb&lt;/span&gt;&lt;/figcaption&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Phone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;phone_number_type: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:fax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:home&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:mobile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:office&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Your phones won’t have the right types anymore. You can get around this by telling &lt;code&gt;enum&lt;/code&gt; which number goes with which value:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;app/models/phone.rb&lt;/span&gt;&lt;/figcaption&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Phone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;phone_number_type: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;fax: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;home: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;mobile: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;office: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But really, your best option is to keep the order consistent.&lt;/p&gt;

&lt;p&gt;A bigger problem is what to do outside the Rails world. Even though Rails sees these enum values as strings, they’re just numbers inside your database. &lt;strong&gt;So someone looking at your raw data will have &lt;em&gt;no&lt;/em&gt; idea what those numbers mean.&lt;/strong&gt; This also means that every app that reads that database will have to know that enum mapping.&lt;/p&gt;

&lt;p&gt;You could dump your enum mapping to the database or a yaml file if you really needed other people to see them. But that’s not DRY, because now you’re defining your enum in two places. And if you’re going that far, it might be better to do what we were avoiding in the beginning: create a totally separate model and association, so that a Phone would &lt;code&gt;belong_to&lt;/code&gt; a PhoneNumberType.&lt;/p&gt;

&lt;p&gt;But if you’re keeping it simple, enums are a great way to start.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S. In case you missed it, &lt;em&gt;Practicing Rails&lt;/em&gt; is going to be included in the &lt;a href=&quot;http://rubybookbundle.com/?c=jw&quot;&gt;Ruby Book Bundle&lt;/a&gt;, launching on Monday, July 6. Get it and 5 other great Ruby books at a huge discount!&lt;/strong&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.justinweiss.com,2015-06-23:/articles/how-to-preload-rails-scopes/</id>
    <title type="html">How to preload Rails scopes</title>
    <published>2015-06-23T20:17:34Z</published>
    <updated>2015-06-23T20:17:34Z</updated>
    <link rel="alternate" href="https://www.justinweiss.com/articles/how-to-preload-rails-scopes/">
    <content type="html">
&lt;p&gt;&lt;em&gt;This article is &lt;a href=&quot;http://kydonia.net/blog/npmachine/2016/11/25/How-to-Preload-Rails-Scopes.html&quot;&gt;also available in Korean&lt;/a&gt;, thanks to Soonsang Hong!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Rails’ &lt;a href=&quot;http://guides.rubyonrails.org/active_record_querying.html#scopes&quot;&gt;scopes&lt;/a&gt; make it easy to find the records you want:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;app/models/review.rb&lt;/span&gt;&lt;/figcaption&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Review&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:restaurant&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:positive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rating &amp;gt; 3.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-irb&quot;&gt;&lt;span class=&quot;gp&quot;&gt;irb(main):001:0&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Restaurant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;positive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  Restaurant Load (0.4ms)  SELECT  `restaurants`.* FROM `restaurants`  ORDER BY `restaurants`.`id` ASC LIMIT 1
   (0.6ms)  SELECT COUNT(*) FROM `reviews` WHERE `reviews`.`restaurant_id` = 1 AND (rating &amp;gt; 3.0)
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But if you’re not careful with them, you’ll seriously hurt your app’s performance.&lt;/p&gt;

&lt;p&gt;Why? &lt;strong&gt;You can’t really preload a scope.&lt;/strong&gt; So if you tried to show a few restaurants with their positive reviews:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-irb&quot;&gt;&lt;span class=&quot;gp&quot;&gt;irb(main):001:0&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;restauraunts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Restaurant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;irb(main):002:0&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;restauraunts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;restaurant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;irb(main):003:1*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;restaurant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;restaurant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;positive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; positive reviews.&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;irb(main):004:1&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  Review Load (0.6ms)  SELECT `reviews`.* FROM `reviews` WHERE `reviews`.`restaurant_id` = 1 AND (rating &amp;gt; 3.0)
  Review Load (0.5ms)  SELECT `reviews`.* FROM `reviews` WHERE `reviews`.`restaurant_id` = 2 AND (rating &amp;gt; 3.0)
  Review Load (0.7ms)  SELECT `reviews`.* FROM `reviews` WHERE `reviews`.`restaurant_id` = 3 AND (rating &amp;gt; 3.0)
  Review Load (0.7ms)  SELECT `reviews`.* FROM `reviews` WHERE `reviews`.`restaurant_id` = 4 AND (rating &amp;gt; 3.0)
  Review Load (0.7ms)  SELECT `reviews`.* FROM `reviews` WHERE `reviews`.`restaurant_id` = 5 AND (rating &amp;gt; 3.0)
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Judd's Pub: 5 positive reviews.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Felix's Nightclub: 6 positive reviews.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Mabel's Burrito Shack: 7 positive reviews.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Kendall's Burrito Shack: 2 positive reviews.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Elisabeth's Deli: 15 positive reviews.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;Yep, that’s an &lt;a href=&quot;http://guides.rubyonrails.org/active_record_querying.html#eager-loading-associations&quot;&gt;N+1 query&lt;/a&gt;. The biggest cause of slow Rails apps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can fix this pretty easily, though, if you think about the relationship in a different way.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;convert-scopes-to-associations&quot;&gt;Convert scopes to associations&lt;/h2&gt;

&lt;p&gt;When you use the Rails association methods, like &lt;code&gt;belongs_to&lt;/code&gt; and &lt;code&gt;has_many&lt;/code&gt;, your model usually looks like this:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;app/models/restaurant.rb&lt;/span&gt;&lt;/figcaption&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Restaurant&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:reviews&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But if you check out &lt;a href=&quot;http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html&quot;&gt;the documentation&lt;/a&gt;, you’ll see that they can do more. You can pass other parameters to those methods and change how they work.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;scope&lt;/code&gt; is one of the most useful. &lt;strong&gt;It works just like the &lt;code&gt;scope&lt;/code&gt; from earlier:&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;app/models/restaurant.rb&lt;/span&gt;&lt;/figcaption&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Restaurant&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:reviews&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:positive_reviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rating &amp;gt; 3.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;class_name: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Review&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-irb&quot;&gt;&lt;span class=&quot;gp&quot;&gt;irb(main):001:0&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Restaurant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;positive_reviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  Restaurant Load (0.2ms)  SELECT  `restaurants`.* FROM `restaurants`  ORDER BY `restaurants`.`id` ASC LIMIT 1
   (0.4ms)  SELECT COUNT(*) FROM `reviews` WHERE `reviews`.`restaurant_id` = 1 AND (rating &amp;gt; 3.0)
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, you can preload your new association with &lt;code&gt;includes&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-irb&quot;&gt;&lt;span class=&quot;gp&quot;&gt;irb(main):001:0&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;restauraunts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Restaurant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:positive_reviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  Restaurant Load (0.3ms)  SELECT  `restaurants`.* FROM `restaurants`  ORDER BY `restaurants`.`id` ASC LIMIT 5
  Review Load (1.2ms)  SELECT `reviews`.* FROM `reviews` WHERE (rating &amp;gt; 3.0) AND `reviews`.`restaurant_id` IN (1, 2, 3, 4, 5)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;irb(main):002:0&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;restauraunts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;restaurant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;irb(main):003:1*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;restaurant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;restaurant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;positive_reviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; positive reviews.&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;irb(main):004:1&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Judd's Pub: 5 positive reviews.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Felix's Nightclub: 6 positive reviews.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Mabel's Burrito Shack: 7 positive reviews.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Kendall's Burrito Shack: 2 positive reviews.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Elisabeth's Deli: 15 positive reviews.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Instead of 6 SQL calls, we only did two.&lt;/p&gt;

&lt;p&gt;(Using &lt;code&gt;class_name&lt;/code&gt;, you can have multiple associations to the same object. This comes in handy pretty often.)&lt;/p&gt;

&lt;h2 id=&quot;what-about-duplication&quot;&gt;What about duplication?&lt;/h2&gt;

&lt;p&gt;There still might be a problem here. The &lt;code&gt;where(&quot;rating &amp;gt; 3.0&quot;)&lt;/code&gt; is now on your Restaurant class. If you later changed positive reviews to &lt;code&gt;rating &amp;gt; 3.5&lt;/code&gt;, you’d have to update it twice!&lt;/p&gt;

&lt;p&gt;It gets worse: If you also wanted to grab all the positive reviews a person has ever left, you’d have to duplicate that scope over on the User class, too:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;app/models/user.rb&lt;/span&gt;&lt;/figcaption&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:reviews&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:positive_reviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rating &amp;gt; 3.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;class_name: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Review&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It’s not very &lt;a href=&quot;http://www.c2.com/cgi/wiki?DontRepeatYourself&quot;&gt;DRY&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There’s an easy way around this, though. &lt;strong&gt;Inside of &lt;code&gt;where&lt;/code&gt;, you can use the &lt;code&gt;positive&lt;/code&gt; scope you added to the Review class:&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;app/models/restaurant.rb&lt;/span&gt;&lt;/figcaption&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Restaurant&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:reviews&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:positive_reviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;positive&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;class_name: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Review&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That way, the &lt;em&gt;idea&lt;/em&gt; of what makes a review a positive review is still only in one place.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Scopes are great. In the right place, they can make querying your data easy and fun. But if you want to avoid N+1 queries, you have to be careful with them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So, if a scope starts to cause you trouble, wrap it in an association and preload it&lt;/strong&gt;. It’s not much more work, and it’ll save you a bunch of SQL calls.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.justinweiss.com,2015-06-16:/articles/a-guide-to-the-best-beginning-rails-resources/</id>
    <title type="html">A guide to the best beginning Rails resources</title>
    <published>2015-06-16T06:19:09Z</published>
    <updated>2015-06-16T06:19:09Z</updated>
    <link rel="alternate" href="https://www.justinweiss.com/articles/a-guide-to-the-best-beginning-rails-resources/">
    <content type="html">
&lt;p&gt;There are a ton of books, videos, podcasts, and courses for learning Rails. &lt;strong&gt;There’s no way you’d have time to go through them all!&lt;/strong&gt; So what’s the best way for an absolute beginner to learn Ruby and Rails? Which resources should you start with, and when?&lt;/p&gt;

&lt;h2 id=&quot;books-and-websites&quot;&gt;Books and websites&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;If you’re totally new to programming, the best place to start is &lt;a href=&quot;https://pragprog.com/book/ltp2/learn-to-program&quot;&gt;Learn to Program&lt;/a&gt;, by Chris Pine&lt;/strong&gt;. It’s an intro to the core programming ideas you’ll need to know. If you’re planning to learn Ruby and Rails, it’s especially great, because it uses Ruby for all of the examples.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;After that, Daniel Kehoe’s &lt;a href=&quot;http://learn-rails.com/learn-ruby-on-rails.html&quot;&gt;Learn Ruby on Rails&lt;/a&gt; is a gentle introduction to Rails&lt;/strong&gt;. It teaches you a small part of Rails that will prepare you to take on the harder resources.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you already know a few other languages or frameworks, check out the free &lt;a href=&quot;http://guides.rubyonrails.org/getting_started.html&quot;&gt;Getting Started with Rails&lt;/a&gt; guide&lt;/strong&gt;. It’s a good, short intro to Rails, that will teach you Rails’ concepts and core ideas.&lt;/p&gt;

&lt;p&gt;Once you know the basics, there are two bigger books that will fill out your Rails knowledge.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://pragprog.com/book/rails2/agile-web-development-with-rails&quot;&gt;Agile Web Development with Rails&lt;/a&gt; is my favorite general Rails book&lt;/strong&gt;. It does a good job of teaching first by example, and then by reference. We use it at work to teach devs without Rails experience, and like most of the rest of the &lt;a href=&quot;https://pragprog.com&quot;&gt;Pragmatic Bookshelf&lt;/a&gt; books, it’s very good.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The &lt;a href=&quot;https://www.railstutorial.org&quot;&gt;Ruby on Rails Tutorial&lt;/a&gt; is the other big Rails resource&lt;/strong&gt;. It walks you through most of what you need to know to build a fully functional example app. I know a lot of great Rails developers who got started with the Rails Tutorial. And the &lt;a href=&quot;https://www.railstutorial.org/book&quot;&gt;web version is free&lt;/a&gt;, so you can see if it’s your style before you commit to it. If you put in the effort, you’ll get a lot out of it.&lt;/p&gt;

&lt;p&gt;Once you’ve gone through one or two of these books, it’s pretty normal to feel confused and frustrated. Especially when you try to put everything together and build your own apps. &lt;strong&gt;My book, &lt;a href=&quot;https://www.justinweiss.com/practicing-rails/&quot;&gt;Practicing Rails&lt;/a&gt;, will help you solve the most painful problems you’ll run into as you start your programming career.&lt;/strong&gt; In &lt;em&gt;Practicing Rails&lt;/em&gt;, you’ll learn how to debug your code when it breaks, pick up some processes you can follow to turn the ideas in your head into real features, and discover how to write tests without getting stuck.&lt;/p&gt;

&lt;p&gt;While you build your own apps, there are two resources you’ll use more than any others:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The &lt;a href=&quot;http://guides.rubyonrails.org&quot;&gt;Rails Guides&lt;/a&gt; will teach you the most important parts of Rails with documentation and examples&lt;/strong&gt;. I go back to these &lt;em&gt;all the time&lt;/em&gt;. And they’re always up to date.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When you want to know how to call a Rails method, or even whether a method exists to do what you want to do, you’ll need the official &lt;a href=&quot;http://api.rubyonrails.org&quot;&gt;Rails API documentation&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(There are much better ways of browsing the API documentation, though, and I talk through a few of them in &lt;a href=&quot;/practicing-rails-course&quot;&gt;one of the lessons in my free email course&lt;/a&gt;)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;You can start building simple apps without knowing a whole lot of Ruby, but spending more time learning Ruby will become important, quickly. &lt;strong&gt;And &lt;a href=&quot;https://pragprog.com/book/ruby4/programming-ruby-1-9-2-0&quot;&gt;Programming Ruby&lt;/a&gt; is the best book I’ve found to get comfortable with the language&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;videos-and-guided-courses&quot;&gt;Videos and guided courses&lt;/h2&gt;

&lt;p&gt;Books and websites are my favorite way to learn new things about Ruby and Rails. But if you prefer watching to reading, there are lots of great screencasts and courses you can check out, too.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you want a video course to teach you Ruby and Rails, I’ve heard lots of praise for the &lt;a href=&quot;https://pragmaticstudio.com&quot;&gt;Pragmatic Studio&lt;/a&gt; courses&lt;/strong&gt;. They sound like a great place to start.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The &lt;a href=&quot;http://railscasts.com&quot;&gt;RailsCasts&lt;/a&gt; haven’t been updated in a few years, but they’ll still show you great answers to common web problems&lt;/strong&gt;. The APIs might have changed, but the ideas have stayed pretty much the same. They’re definitely worth watching.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Avdi Grimm’s &lt;a href=&quot;http://www.rubytapas.com&quot;&gt;Ruby Tapas&lt;/a&gt; screencasts will show you fun Ruby code in 5-10 minute videos&lt;/strong&gt;. They’re Ruby-focused (rather than Rails-focused), but I always learn a lot from them. You can find a few free sample videos on the site, but they’re all great. It’s really worth subscribing to.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The &lt;a href=&quot;https://www.destroyallsoftware.com/screencasts&quot;&gt;Destroy All Software&lt;/a&gt; screencasts aren’t specifically about Ruby and Rails, but watching them will make you a better developer, whatever your language.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Finally, &lt;a href=&quot;https://www.bloc.io&quot;&gt;bloc.io&lt;/a&gt; is an online bootcamp some readers have recommended&lt;/strong&gt;. They pair you with a mentor who can help you with your specific problems when you get stuck.&lt;/p&gt;

&lt;p&gt;One-on-one help is great – it can be exactly what you need while you’re learning. If you can’t find a friend or mentor to help you out, &lt;a href=&quot;https://www.getdrip.com/3522028/campaigns/3566296/emails/39216/archive&quot;&gt;I wrote an email to my list about where you should look&lt;/a&gt;. &lt;em&gt;(By the way, you can &lt;a href=&quot;/list&quot;&gt;sign up here&lt;/a&gt; to get helpful emails like that every Friday)&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;what-do-i-recommend&quot;&gt;What do I recommend?&lt;/h2&gt;

&lt;p&gt;I know, that’s still a whole lot of stuff! &lt;strong&gt;My recommendation, if you like reading and already know the programming basics, is to start with &lt;a href=&quot;https://pragprog.com/book/ruby4/programming-ruby-1-9-2-0&quot;&gt;Programming Ruby&lt;/a&gt; and &lt;a href=&quot;https://pragprog.com/book/rails4/agile-web-development-with-rails-4&quot;&gt;Agile Web Development with Rails&lt;/a&gt;&lt;/strong&gt;. While you read, build some tiny sample apps to try out the things you learn. (You’ll learn more about how to do that &lt;a href=&quot;/practicing-rails&quot;&gt;in the free sample chapter of Practicing Rails&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Do you have any other recommendations for resources that helped you out? Anything you can’t believe I missed? Comment and tell us all about them!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article was inspired by a question from James on &lt;a href=&quot;/advice&quot;&gt;my advice page&lt;/a&gt;. If you’re stuck on questions about Ruby and Rails, and need some help or advice, &lt;a href=&quot;/advice&quot;&gt;ask me there&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.justinweiss.com,2015-06-09:/articles/youve-got-the-rails-basics-so-why-do-you-feel-so-star-slow-star/</id>
    <title type="html">You've got the Rails basics. So why do you feel so slow?</title>
    <published>2015-06-09T03:56:10Z</published>
    <updated>2015-06-09T03:56:10Z</updated>
    <link rel="alternate" href="https://www.justinweiss.com/articles/youve-got-the-rails-basics-so-why-do-you-feel-so-star-slow-star/">
    <content type="html">&lt;p&gt;You’re confident about the core ideas behind Rails. You can write working code, no problem. And you’re learning more about code quality, refactoring, writing great tests, and object-oriented design.&lt;/p&gt;

&lt;p&gt;By this point, you’re starting to feel like you’re getting it, that you’re on the path to becoming an expert. When you look backwards, you see just how far you’ve come, and you’re pretty happy with your progress.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So why do you feel so slow?&lt;/strong&gt; Now that you care about testing, maintainability, and design, it feels like it takes you way more time to ship anything!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Is it even &lt;em&gt;possible&lt;/em&gt; to ship high quality code quickly?&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;its-all-part-of-the-process&quot;&gt;It’s all part of the process&lt;/h2&gt;

&lt;p&gt;This feeling is incredibly common, no matter what you’re learning.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now that you’re no longer a beginner, you’re starting to see all the different shapes that your code could have.&lt;/strong&gt; You have more alternatives to think through whenever you put down a line of code. You have to test edge cases you never recognized before.&lt;/p&gt;

&lt;p&gt;You’ve learned lots of helpful skills. But right now, they still take a lot of thought. You have to weigh every decision you make, so you feel comfortable that you’re making the right decision based on the things you’ve learned.&lt;/p&gt;

&lt;p&gt;It will get faster, though. &lt;strong&gt;The skills you’ve learned will become more automatic. You’ll build intuition. And you’ll be able to make better decisions more quickly.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Which is nice to know, but it doesn’t help you &lt;em&gt;right now&lt;/em&gt;. &lt;strong&gt;So what &lt;em&gt;can&lt;/em&gt; you do now, to finish things faster?&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;take-it-in-stages&quot;&gt;Take it in stages&lt;/h2&gt;

&lt;p&gt;If you’re obsessed with writing perfect, high-quality, highly-maintainable code every time you put your fingers on the keyboard, you’ll never get anything done.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When I get stuck, I write code the same way I write articles.&lt;/strong&gt; You’d start with a rough draft. Maybe sketch out some tests, code, or comments. Or even write some ideas out on paper. At this point, you wouldn’t worry about structure, you’re just using code to clear up the vague ideas you have in your head.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Then, I turn those ideas into a straightforward implementation.&lt;/strong&gt; What you might call “The simplest thing that could possibly work.” It’s not perfect, and not even close. But don’t worry about it. Because once the code works, you’ll do a tidying pass. TDD edge cases, refactor obviously bad code, or make names clearer.&lt;/p&gt;

&lt;p&gt;These “refined drafts” are usually good enough to ship. But I’ll usually do a few more passes. Not too many, though – you’ll soon start to see diminishing returns. You’ll spend more time cleaning up the code than it’s worth.&lt;/p&gt;

&lt;p&gt;Then, if you really want to end up with the cleanest possible code, let it settle for a while. &lt;strong&gt;Come back to it in a few weeks or months, and do another pass at it.&lt;/strong&gt; By that time, you’ll know more about your system, and you’ll have learned more about how to write great, highly-maintainable code. So you’ll do an even better job.&lt;/p&gt;

&lt;p&gt;Just like writing, that process is:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Sketch out a rough outline, draft, or prototype.&lt;/li&gt;
  &lt;li&gt;Write a simple, unedited, straightforward implementation (often guided by TDD, or written along with tests).&lt;/li&gt;
  &lt;li&gt;Refine, refactor, and clean up that implementation a little bit.&lt;/li&gt;
  &lt;li&gt;Let it settle.&lt;/li&gt;
  &lt;li&gt;Come back to it, and do one more pass.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It sounds like a lot more work. &lt;strong&gt;But when you go in stages like this, you’ll move faster, without always second-guessing yourself.&lt;/strong&gt; And you won’t end up overthinking decisions between a few just-as-good options.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article was inspired by a question from Topher on &lt;a href=&quot;/advice&quot;&gt;my advice page&lt;/a&gt;. If you’re stuck on questions about Ruby and Rails, and need some help or advice, &lt;a href=&quot;/advice&quot;&gt;ask me there&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.justinweiss.com,2015-06-01:/articles/3-ways-to-configure-your-ruby-api-wrappers/</id>
    <title type="html">3 ways to configure your Ruby API wrappers</title>
    <published>2015-06-01T21:01:05Z</published>
    <updated>2015-06-01T21:01:05Z</updated>
    <link rel="alternate" href="https://www.justinweiss.com/articles/3-ways-to-configure-your-ruby-api-wrappers/">
    <content type="html">
&lt;p&gt;When you use Ruby to wrap an API, you have to have a way to configure it. Maybe the wrapper needs a username and secret key, or maybe just a host.&lt;/p&gt;

&lt;p&gt;There are a few different ways to handle this. So which one should you choose?&lt;/p&gt;

&lt;h2 id=&quot;the-easy-global-way&quot;&gt;The easy, global way&lt;/h2&gt;

&lt;p&gt;You might want your service to act like it’s always around. &lt;strong&gt;No matter where you are in your app, you’d have it ready to use.&lt;/strong&gt; Otherwise, you’ll spend three lines of configuring it for every line of using it!&lt;/p&gt;

&lt;p&gt;You could make the configuration global, using constants or class attributes:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;config/initializers/product_api.rb&lt;/span&gt;&lt;/figcaption&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;ProductApi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://staging-host.example.com/&quot;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;ProductApi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;justin&quot;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;ProductApi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;secret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mysecret123&quot;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;app/controllers/products_controller.rb&lt;/span&gt;&lt;/figcaption&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ProductApi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jpoz/APNS&quot;&gt;Lots of gems&lt;/a&gt; use this pattern. It’s pretty easy to write, and really easy to use. But it has some big problems:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;You can only have one &lt;code&gt;ProductApi&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;If you want to use the Product API as two different users, or hit different servers from a single app, you’re out of luck.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;code&gt;ProductApi&lt;/code&gt; has global data that’s easy to accidentally change.&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;If a thread or a part of your app changed &lt;code&gt;ProductApi.user&lt;/code&gt;, everything else using &lt;code&gt;ProductApi&lt;/code&gt; would break. And those are &lt;em&gt;painful&lt;/em&gt; bugs to track down.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, class variables have some problems. &lt;strong&gt;What if you configured &lt;em&gt;instances&lt;/em&gt; of your Product API class, instead?&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-would-it-look-like-with-initialize&quot;&gt;What would it look like with &lt;code&gt;#initialize&lt;/code&gt;?&lt;/h2&gt;

&lt;p&gt;If you used instances, you’d create and configure your API wrapper when you need it:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;app/controllers/products_controller.rb&lt;/span&gt;&lt;/figcaption&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;product_api&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ProductApi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;root: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://staging-host.example.com/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;user: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;justin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;secret: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mysecret123&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product_api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, you can pass different details to your API whenever you use it. No other methods or threads are using your instance, so you don’t have to worry about it changing without you knowing it.&lt;/p&gt;

&lt;p&gt;This seems better. But it’s still not as easy as it should be. &lt;strong&gt;Because you have to configure your API &lt;em&gt;every time&lt;/em&gt; you use it.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Most of the time you don’t care how the API is set up, you just want to use it with sane options. But when you’re working with instances, every part of your app that uses the API has to know how to configure it.&lt;/p&gt;

&lt;p&gt;But there’s a way to get the convenience of global access, using good defaults, while still being able to change it if you need to.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And this pattern shows up all the time in an interesting place: OS X and iOS development.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-do-you-get-good-defaults-and-flexibility&quot;&gt;How do you get good defaults &lt;em&gt;and&lt;/em&gt; flexibility?&lt;/h2&gt;

&lt;p&gt;What if you could configure each instance of your API wrapper, but you also had a global “default” instance when you just didn’t care?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You’ll see this “defaultSomething” or “sharedWhatever” pattern all over the iOS and Mac OS SDKs:&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-objc&quot;&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLSession&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sharedSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;downloadTaskWithURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;http://www.google.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSFileManager&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;defaultManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;removeItemAtPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:...];&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And you can still ask for instances of these classes if you need more than what the default gives you:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-objc&quot;&gt;&lt;span class=&quot;n&quot;&gt;NSURLSession&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURLSession&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sessionWithConfiguration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:...];&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;NSFileManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSFileManager&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You could build something like that in Ruby, with a &lt;code&gt;default_api&lt;/code&gt; class method:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;app/controllers/products_controller.rb&lt;/span&gt;&lt;/figcaption&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ProductApi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;default_product_api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show_special&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;special_product_api&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ProductApi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;root: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://special-product-host.example.com/&quot;&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;user: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;justin&quot;&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;secret: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mysecret123&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@special_product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;special_product_api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And the implementation might look something like this:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ProductApi&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@secret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secret&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;default_api&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@default_api&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;root: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'PRODUCT_API_ROOT'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;user: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'PRODUCT_API_USER'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;secret: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'PRODUCT_API_SECRET'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here, I used environment variables in &lt;code&gt;default_api&lt;/code&gt;, but you could also use &lt;a href=&quot;http://www.justinweiss.com/blog/2015/02/24/how-to-configure-your-rails-app-to-ship/&quot;&gt;config files&lt;/a&gt;. And you could switch the &lt;code&gt;||=&lt;/code&gt; to use &lt;a href=&quot;http://www.justinweiss.com/blog/2014/12/01/better-globals-with-a-tiny-activesupport-module/&quot;&gt;thread- or request-local storage&lt;/a&gt; instead.&lt;/p&gt;

&lt;p&gt;But this is a decent start.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Most gems I’ve seen, like the &lt;a href=&quot;https://github.com/sferik/twitter&quot;&gt;Twitter&lt;/a&gt; gem, will have you configure and create each API object when you need them. This is an OK solution (though I usually see people assigning these to globals &lt;em&gt;anyway&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;But if you go one step further, and also use a pre-configured default object, you’ll have a much more comfortable time.&lt;/p&gt;

</content>
  </entry>
</feed>
