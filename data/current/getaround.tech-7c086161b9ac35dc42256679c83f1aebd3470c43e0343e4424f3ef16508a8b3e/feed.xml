<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Getaround Engineering</title>
    <description>This is the tech blog of getaround.com</description>
    <link>https://getaround.tech/</link>
    <atom:link href="https://getaround.tech/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 17 Nov 2022 09:57:59 +0000</pubDate>
    <lastBuildDate>Thu, 17 Nov 2022 09:57:59 +0000</lastBuildDate>
    <generator>Jekyll v4.2.2</generator>
    
      
      <item>
        <title>Babel, JavaScript Transpiling And Polyfills</title>
        <dc:creator>Cédric Patchane</dc:creator>
        <description>&lt;p&gt;&lt;a href=&quot;https://babeljs.io/&quot;&gt;BabelJS or Babel&lt;/a&gt; is a prevalent tool in the JavaScript ecosystem. Most developers know that it is essential when developing using brand new JavaScript features. But how does this system work?&lt;/p&gt;

&lt;p&gt;In this article, we’ll explain what Babel is doing under the hood to allow the use of state-of-the-art JavaScript features, and even TypeScript, without manually dealing with older browsers’ version compatibility.&lt;/p&gt;

&lt;h2 id=&quot;state-of-the-art-javascript-features&quot;&gt;State-of-the-art JavaScript Features&lt;/h2&gt;

&lt;p&gt;Let’s take a step back and look at the context.&lt;/p&gt;

&lt;p&gt;JavaScript is a language that has evolved and is still evolving, especially in the last few years. It is based on a specification named &lt;strong&gt;ECMAScript&lt;/strong&gt;, provided by &lt;a href=&quot;https://www.ecma-international.org/memento/tc39.htm&quot;&gt;TC39 (Technical Committee 39)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;It’s a common mistake to think that ECMAScript is the “new JavaScript” or a “standardized JavaScript”. ECMAScript is a specification for creating a scripting language when JavaScript is a scripting language. It may even happen that rare features are not following the ECMAScript specification in the experimental versions of some browsers.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To be included in the ECMAScript specification, a new feature &lt;a href=&quot;https://tc39.es/process-document/&quot;&gt;passes through a specific process with five phases&lt;/a&gt;. So it could take some time before it is integrated into the specifications and then implemented in the browsers.&lt;/p&gt;

&lt;p&gt;While we, developers, can’t wait to use new exciting features that improve our &lt;del&gt;life&lt;/del&gt; code, most browsers don’t support them yet, so we can’t just deliver the code as we wrote it.&lt;/p&gt;

&lt;h2 id=&quot;babel-to-the-rescue&quot;&gt;Babel To The Rescue&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt; is a tool that allows you to write code in the latest (or even experimental) version of JavaScript. Because not all of the browsers currently support those hot features, it will transform the cutting-edge source code down to a code supported by older browsers. Babel’s primary purpose is about two things: &lt;strong&gt;JavaScript transpiling&lt;/strong&gt; and &lt;strong&gt;polyfills handling&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let’s take a look at the key points of interest regarding Babel:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Its configuration is defined in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;babel.config.js&lt;/code&gt; file located at the project’s root.&lt;/li&gt;
  &lt;li&gt;Babel uses &lt;strong&gt;plugins&lt;/strong&gt; to be as modular as possible (example: &lt;a href=&quot;https://babeljs.io/docs/en/babel-plugin-transform-arrow-functions&quot;&gt;@babel/plugin-transform-arrow-functions&lt;/a&gt;). Each plugin is often related to one functionality or a minimal scope of functionalities.&lt;/li&gt;
  &lt;li&gt;You can create a &lt;strong&gt;preset&lt;/strong&gt; from a configuration to easily share it between projects, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@babel/preset-env&lt;/code&gt; to manage Babel plugins, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@babel/preset-typescript&lt;/code&gt; for TypeScript usage, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@babel/preset-react&lt;/code&gt; for React applications.&lt;/li&gt;
  &lt;li&gt;By providing a list of targeting node environments or browsers (using &lt;a href=&quot;https://github.com/browserslist/browserslist&quot;&gt;browserslist&lt;/a&gt; syntax) as an option to &lt;a href=&quot;https://babeljs.io/docs/en/babel-preset-env&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@babel/preset-env&lt;/code&gt;&lt;/a&gt;, it will automatically decide which plugins and polyfills (thanks to &lt;a href=&quot;https://github.com/zloirock/core-js&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;core-js&lt;/code&gt;&lt;/a&gt;) have to be applied when processing the code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below is a simple Babel configuration file that we will use as an example throughout this article:&lt;/p&gt;
&lt;figure&gt;
  &lt;figcaption class=&quot;highlight-caption&quot;&gt;babel.config.js&lt;/figcaption&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;presets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Babel plugin/preset options are passing using an array syntax&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@babel/preset-env&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
          &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;gt; 0.25%&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Specify the version of core-js used, the last minor version is core-js@3.26.x&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;corejs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;3.26&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Specify how to handle polyfills, see polyfills handling section below&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;useBuiltIns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;usage&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;entry&quot;, &quot;usage&quot; or false by default&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@babel/preset-react&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@babel/preset-typescript&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Specify some plugins enabled in any cases&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;dynamic-import-webpack&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;a href=&quot;https://github.com/zloirock/core-js&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;core-js&lt;/code&gt;&lt;/a&gt; is an NPM package that contains all polyfills for every possible ECMAScript feature. It must be installed for Babel to work with this latter. We’ll learn more about its usage in the polyfills handling section below.&lt;/p&gt;

&lt;h3 id=&quot;javascript-transpiling&quot;&gt;JavaScript Transpiling&lt;/h3&gt;

&lt;p&gt;A &lt;strong&gt;code transpiler&lt;/strong&gt;, slightly different from a compiler, will read the source code written in one language (here, modern JavaScript code) to produce the equivalent code in another language (here, an older and more supported JavaScript code). Afterward, a compiler, like Webpack, is still needed to collect, optimize and build a project’s final output(s).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; Let’s say we are writing a piece of code using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot;&gt;arrow functions&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals&quot;&gt;template literals&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyFunc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`Using my argument: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With the configuration from the previous section, Babel will output the code as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyFunc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Using my argument: &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As a result, arrow functions are transformed to the basic function syntax supported by every browser. Same thing for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.concat()&lt;/code&gt;, which is more widely supported by browsers than template literals. Finally, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;const&lt;/code&gt; is transformed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var&lt;/code&gt;, mainly for IE 11.&lt;/p&gt;

&lt;p&gt;To do this transformation, Babel creates an &lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_syntax_tree&quot;&gt;AST (Abstract syntax tree)&lt;/a&gt;, a tree representation of the code structure. Then it applies plugins that use this AST to transform and output the code. In this example, the plugin &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@babel/plugin-transform-arrow-functions&lt;/code&gt; was used to transform arrow functions, but there are a lot of other Babel plugins to handle any transformation.&lt;/p&gt;

&lt;p&gt;The good news is that &lt;strong&gt;it’s not necessary to know all of them to transform the code correctly, thanks to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@babel/preset-env&lt;/code&gt; preset&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Indeed, this preset &lt;a href=&quot;https://github.com/babel/babel/blob/master/packages/babel-compat-data/data/plugins.json&quot;&gt;has a built-in list of plugins matching browser versions&lt;/a&gt;. So, according to the browser versions list provided, it knows precisely which plugins need to be applied.&lt;/p&gt;

&lt;p&gt;Now that we know how to transform the code, there is still something to tackle: how to add not supported yet implementations of very recent JavaScript functions.&lt;/p&gt;

&lt;h3 id=&quot;polyfills-handling&quot;&gt;Polyfills Handling&lt;/h3&gt;

&lt;p&gt;According to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Polyfill&quot;&gt;MDN&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A polyfill is a piece of code used to provide modern functionality on older browsers that do not natively support it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s take an example. Here is a code using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Array.prototype.find&lt;/code&gt; to find the first element matching a condition in an array:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;garage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Model 3&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;electric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Punto&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;electric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;208&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;electric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isElectric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;electric&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myFirstElectricCar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;garage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isElectric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This code works well on recent browsers, but when running on Internet Explorer 11, it throws an error &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Object doesn't support property or method 'find'&lt;/code&gt;. Indeed, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find()&lt;/code&gt; method for arrays doesn’t exist for this browser and won’t exist since this browser is not updated anymore.&lt;/p&gt;

&lt;p&gt;The solution is to &lt;del&gt;drop IE 11 support&lt;/del&gt; provide a &lt;strong&gt;polyfill&lt;/strong&gt;. In this case, it could be as simple as copying/pasting &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find#Polyfill&quot;&gt;this polyfill from the MDN&lt;/a&gt; directly into the code to make it work.&lt;/p&gt;

&lt;p&gt;But it is more complicated to do that for every feature used in a codebase. It’s easy to forget or duplicate too many of them in the code, while it’s complicated to test and monitor. This is where the &lt;a href=&quot;https://www.npmjs.com/package/core-js&quot;&gt;NPM package &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;core-js&lt;/code&gt;&lt;/a&gt; full of ECMAScript polyfills, comes in.&lt;/p&gt;

&lt;p&gt;As for the code transpiling, the preset &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@babel/preset-env&lt;/code&gt; has a built-in list of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;core-js&lt;/code&gt; polyfills names that match browsers versions. According to the targeting environments, it knows which polyfills to include. From this point on, you have three ways to do that using &lt;a href=&quot;https://babeljs.io/docs/en/babel-preset-env#usebuiltins&quot;&gt;the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useBuiltIns&lt;/code&gt; option&lt;/a&gt; of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@babel/preset-env&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;usebuiltins-entry&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useBuiltIns: &quot;entry&quot;&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;This option requires the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;core-js&lt;/code&gt; module to be imported (and &lt;strong&gt;only once&lt;/strong&gt;) at the entry point of the project. According to the standard level targeted, many import options are available:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Must be at the root, the very beginning of the code, before anything else&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// polyfill all `core-js` features&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;core-js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// OR polyfill only stable `core-js` features - ES and web standards&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;core-js/stable&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// OR polyfill only stable ES features&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;core-js/es&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// OR any other module/folder from core-js&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then Babel will parse the code, and when it finds the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;core-js&lt;/code&gt; import, it will transform this one-line import into multiple imports of unit modules from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;core-js&lt;/code&gt;. As a result, it’ll &lt;strong&gt;only import polyfills necessary for the targeting environments whether or not the features are used&lt;/strong&gt;. Here’s what that looks like by importing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;core-js/es&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;core-js/modules/es.symbol&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;core-js/modules/es.symbol.description&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;core-js/modules/es.symbol.async-iterator&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;core-js/modules/es.symbol.has-instance&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;core-js/modules/es.symbol.is-concat-spreadable&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;core-js/modules/es.symbol.iterator&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;core-js/modules/es.symbol.match&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;core-js/modules/es.symbol.replace&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;core-js/modules/es.symbol.search&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ... and all other polyfills that exist in core-js/es...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;usebuiltins-usage&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useBuiltIns: &quot;usage&quot;&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;This option tells Babel to &lt;strong&gt;automatically write&lt;/strong&gt; the polyfill imports related to a feature each time it encounters it.&lt;/p&gt;

&lt;p&gt;Thus, this code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* We keep the previous example with the garage of cars */&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myFirstElectricCar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;garage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isElectric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;haveMyElectricCar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;garage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;myFirstElectricCar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;will be transformed by Babel to this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;core-js/modules/es7.array.includes&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;core-js/modules/es6.array.find&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myFirstElectricCar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;garage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isElectric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;haveElectricCar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;garage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;myFirstElectricCar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It’s important to understand that &lt;strong&gt;it’s no longer needed to write &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;core-js&lt;/code&gt; imports&lt;/strong&gt;. Polyfills imports will &lt;strong&gt;automatically be added at every part of the code that needs one or many polyfills&lt;/strong&gt;. It also means that if a modern feature is used multiple times at different places, it will result in multiple imports of the same polyfills. Indeed, it assumes that a bundler (like Webpack) will collect and deduplicate imports so that polyfills are only included once in the final output(s).&lt;/p&gt;

&lt;p&gt;This is the most optimized and automatic way to include only the polyfills that are needed and remove them when they become unnecessary (whether they are not used anymore or the targeting environments list evolved to more recent ones).&lt;/p&gt;

&lt;h4 id=&quot;usebuiltins-false&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useBuiltIns: false&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;This will tell Babel not to handle polyfills at all. Every polyfill from the different &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;core-js&lt;/code&gt; imports will be included without fine selections according to the targeted environments. It will be still possible to import &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;core-js&lt;/code&gt; manually. There won’t be any filtering but the selected modules imports:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// polyfill everything from `core-js`&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;core-js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// polyfill only array ES features&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;core-js/es/array&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// polyfill only array.includes ES feature&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;core-js/es/array/includes&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Your&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;highly&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;up&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;here&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Using this way, be sure &lt;strong&gt;never to import polyfill twice&lt;/strong&gt;; otherwise, it will throw an error.&lt;/p&gt;

&lt;h3 id=&quot;transpiling-the-case-of-typescript&quot;&gt;Transpiling: The Case Of TypeScript&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.typescriptlang.org/index.html&quot;&gt;The documentation&lt;/a&gt; states, “TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.” This means that any JavaScript code is a valid TypeScript code, but TypeScript is not necessarily valid JavaScript and, therefore, not supported by browsers.&lt;/p&gt;

&lt;p&gt;At Getaround, we use TypeScript to develop our front-end features. Consequently, we need to transform our TypeScript code to “classical JavaScript” before deploying it.&lt;/p&gt;

&lt;p&gt;To do so, TypeScript comes with a code transpiler. This latter will transform the TypeScript code to an ECMAScript 3 code, so it could be wrongly thought that we don’t need to transpile with Babel anymore.&lt;/p&gt;

&lt;p&gt;But there are some points that we need to highlight here:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;You’ll have two different configurations to handle JavaScript-related files in the project. Babel for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.js&lt;/code&gt; files and Typescript for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.ts&lt;/code&gt; files.&lt;/li&gt;
  &lt;li&gt;TypeScript doesn’t handle polyfills as Babel does, and Babel doesn’t do type-checking as TypeScript does.&lt;/li&gt;
  &lt;li&gt;Babel is much more extensible and has a more extensive plugin ecosystem than TypeScript.&lt;/li&gt;
  &lt;li&gt;There are some incompatibilities between the two tools (you can read &lt;a href=&quot;https://devblogs.microsoft.com/typescript/typescript-and-babel-7/&quot;&gt;this article from Microsoft&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So a solution here would be to keep using Babel for both cases, thanks to a dedicated preset named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@babel/preset-typescript&lt;/code&gt; that allows Babel to transform TypeScript code correctly. And for the type-checking, we can still rely on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tsc&lt;/code&gt; CLI provided by TypeScript.&lt;/p&gt;

&lt;h2 id=&quot;our-open-source-preset-configuration&quot;&gt;Our open-source preset configuration&lt;/h2&gt;

&lt;p&gt;At Getaround, we use a custom preset to share our configuration across all front-end apps. It is publicly available on our &lt;a href=&quot;https://github.com/drivy/frontend-configs/blob/main/packages/babel-preset-app/index.js&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drivy/frontend-configs&lt;/code&gt; Github repository&lt;/a&gt;, along with all of our other front-end configurations.&lt;/p&gt;

&lt;p&gt;You can also find it on &lt;a href=&quot;https://www.npmjs.com/package/@getaround-eu/babel-preset-app&quot;&gt;NPM&lt;/a&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@getaround-eu/babel-preset-app&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Don’t hesitate to take a look and to use it!&lt;/p&gt;
</description>
        
          <description>&lt;p&gt;&lt;a href=&quot;https://babeljs.io/&quot;&gt;BabelJS or Babel&lt;/a&gt; is a prevalent tool in the JavaScript ecosystem. Most developers know that it is essential when developing using brand new JavaScript features. But how does this system work?&lt;/p&gt;
</description>
        
        <pubDate>Thu, 17 Nov 2022 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/babel-transpiling-polyfills/</link>
        <guid isPermaLink="true">https://getaround.tech/babel-transpiling-polyfills/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Building a modular multiple flows wizard in Ruby</title>
        <dc:creator>Rémy Hannequin</dc:creator>
        <description>&lt;p&gt;Wizards are a common component in a lot of applications. Either for signing up new users, creating products, purchasing items and many more.&lt;/p&gt;

&lt;p&gt;They can be tricky to manage once they get bigger and more complex. At Getaround, we have several wizards which don’t share their architecture. A common architecture cannot fit every use case with different needs, flow, and user experience.&lt;/p&gt;

&lt;p&gt;To list new cars on our platform, hosts provide multiple pieces of information on the vehicle, themselves, and their needs. We may ask for more information or skip some steps. Such constraints lead to complexity and difficulty in handling and testing every variation.&lt;/p&gt;

&lt;p&gt;After multiple iterations, we ended up with a modular architecture that was less strict than a decision tree and allowed us to design wizards with complex or simple logic.&lt;/p&gt;

&lt;p&gt;In this article, I’ll try to guide you through building such a modular architecture. We’ll use a &lt;a href=&quot;https://getaround.tech/sanitize-your-attributes/&quot;&gt;form object&lt;/a&gt; for each step and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Manager&lt;/code&gt; to orchestrate everything.&lt;/p&gt;

&lt;h2 id=&quot;form-object-interface&quot;&gt;Form object interface&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ActiveModel&lt;/code&gt; provides convenient modules to create custom form objects and manipulate attributes. We are going to use the following modules:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://api.rubyonrails.org/classes/ActiveModel/Model.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ActiveModel::Model&lt;/code&gt;&lt;/a&gt; so that our form object behaves like a regular model&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://api.rubyonrails.org/classes/ActiveModel/Attributes/ClassMethods.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ActiveModel::Attributes&lt;/code&gt;&lt;/a&gt; to access submitted fields as attributes&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://api.rubyonrails.org/classes/ActiveModel/Validations.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ActiveModel::Validations&lt;/code&gt;&lt;/a&gt; to benefit from convenient attribute validations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using these modules will also allow us to use Rails form helpers as if the manipulated object were an actual model. Many thanks to &lt;a href=&quot;https://github.com/Intrepidd&quot;&gt;Intrepidd&lt;/a&gt; for sharing code that led to this base form.&lt;/p&gt;

&lt;p&gt;Our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BaseForm&lt;/code&gt; would then look like this:&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;active_model&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BaseForm&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Model&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Attributes&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Validations&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:car&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;complete?&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NotImplementedError&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;next_step&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NotImplementedError&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;public_send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;=&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valid?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NotImplementedError&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s take the time to explain this code. First, we’re declaring &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attribute :car&lt;/code&gt; because our form objects will be initialized with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Car&lt;/code&gt; model. This object will be the source of truth, the one we will fill with new data and rely on to determine what’s missing from it.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;complete?&lt;/code&gt; will be the method called to know if a step has been successfully completed. In this method we can for example check if a particular attribute has been filled in on our car record.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next_step&lt;/code&gt; handles the logic to compute what the next step will be. A step knows what the next one is because it will rely on what was submitted previously.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;submit&lt;/code&gt; is the method to submit our params from the associated form. It will only call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;perform&lt;/code&gt;, supposed to be implemented on each form object, if all validations passed.&lt;/p&gt;

&lt;p&gt;With this public interface, we can create as many steps as we want and they will create the flow by themselves using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;perform&lt;/code&gt; to save data, and then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;complete?&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next_step&lt;/code&gt; to handle going from one step to another.&lt;/p&gt;

&lt;h2 id=&quot;manager&quot;&gt;Manager&lt;/h2&gt;

&lt;p&gt;Having steps handling themselves is great, but we still need some logic to initiate the wizard and determine which step the user is currently on.&lt;/p&gt;

&lt;p&gt;Our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Manager&lt;/code&gt; object will handle this logic. It also can manage having available steps, and non-available steps. For instance, if we have steps &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt;, with step &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; already being submitted. The next step to submit is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt;, but I should be allowed to access step &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; again if I want to correct what I submitted. Step &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt; is not accessible as long as step &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt; is not complete, it shouldn’t even be visible to the user.&lt;/p&gt;

&lt;p&gt;Our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Manager&lt;/code&gt; could then look like this:&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Manager&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;FIRST_STEP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:country&lt;/span&gt;

  &lt;span class=&quot;no&quot;&gt;STEP_FORMS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;country: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CountryForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;insurance_provider: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;InsuranceProviderForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;mileage: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MileageForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;freeze&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@instantiated_forms&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@possible_steps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compute_possible_steps&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;current_step&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@possible_steps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nil?&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find_or_instantiate_form_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;complete?&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;form_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;STEP_FORMS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compute_possible_steps&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;steps_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;FIRST_STEP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;steps_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;starting_step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;steps_acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;steps_acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;starting_step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;starting_step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nil?&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find_or_instantiate_form_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;starting_step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;steps_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next_step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;steps_acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;complete?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;find_or_instantiate_form_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@instantiated_forms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;form_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;car: &lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@instantiated_forms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Every step is declared with its associated form object. At initialization, all possible steps are computed using the public &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;complete?&lt;/code&gt;, calculating one step after another with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next_step&lt;/code&gt;. The method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;form_for&lt;/code&gt; will allow the controller to manipulate the right form object from the manager.&lt;/p&gt;

&lt;p&gt;As we support multiple flows, the last step may not be the last one defined in the list. We then expect &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next_step&lt;/code&gt; to return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nil&lt;/code&gt; when there’s no step left.&lt;/p&gt;

&lt;h2 id=&quot;steps&quot;&gt;Steps&lt;/h2&gt;

&lt;p&gt;In the manager, I mentioned three steps, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;country&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insurance_provider&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mileage&lt;/code&gt;. Let’s build them and see how with only 3 steps we can already have multiple flows.&lt;/p&gt;

&lt;h3 id=&quot;country&quot;&gt;Country&lt;/h3&gt;

&lt;p&gt;This step will simply save the selected country on the car record. However, its next step will depend on what country was selected.&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CountryForm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BaseForm&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;ALLOWED_COUNTRIES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%w[CA ES PK JP]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;freeze&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;COUNTRY_REQUIRING_INSURANCE_PROVIDER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%w[ES]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;freeze&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:country&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:string&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;validates_inclusion_of&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:country&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;in: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ALLOWED_COUNTRIES&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;country: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;country&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;complete?&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;country&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nil?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;next_step&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;COUNTRY_REQUIRING_INSURANCE_PROVIDER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;country&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;:insurance_provider&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;:mileage&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First we can see how readable the attributes and validations are thanks to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ActiveModel&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;country&lt;/code&gt; is a string attribute and we expect it to be one of the allowed countries, defined in a constant. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;perform&lt;/code&gt; method will only be called if the requirements are met, if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;valid?&lt;/code&gt; returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;complete?&lt;/code&gt; only checks if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;country&lt;/code&gt; has been successfully saved on the car record.&lt;/p&gt;

&lt;p&gt;Finally, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next_step&lt;/code&gt; depends on the country selected. If an insurance provider is required in the country, then we’ll need the user to provide this data. If not, we decide to go directly to the next one, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mileage&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Of course we could improve things here, especially in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;perform&lt;/code&gt;. We probably don’t want to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update!&lt;/code&gt; which raises when it fails, but we still want to be sure what’s inside this method is properly executed. For the sake of simplicity I didn’t add such a logic here, but we can easily play with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;errors&lt;/code&gt; available thanks to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ActiveModel::Validations&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;insurance-provider&quot;&gt;Insurance provider&lt;/h3&gt;

&lt;p&gt;Nothing particular to say about this one, except that it will be displayed only if the car’s country requires an insurance provider.&lt;/p&gt;

&lt;p&gt;The next step is defined as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mileage&lt;/code&gt;, but from here we could imagine another branch in the decision tree, multiple flows, multiple possibilities.&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InsuranceProviderForm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BaseForm&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:insurance_provider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:string&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;insurance_provider: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insurance_provider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;complete?&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insurance_provider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nil?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;next_step&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;:mileage&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;mileage&quot;&gt;Mileage&lt;/h3&gt;

&lt;p&gt;In our example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mileage&lt;/code&gt; is the last step. Once a mileage integer is submitted, validated and saved, there’s no other step to go to. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next_step&lt;/code&gt; returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nil&lt;/code&gt; to announce that the wizard is finished.&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MileageForm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BaseForm&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:mileage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:integer&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;validates&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:mileage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;numericality: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;greater_than: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;mileage: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mileage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;complete?&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mileage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nil?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;next_step&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;controller-and-routes&quot;&gt;Controller and routes&lt;/h2&gt;

&lt;p&gt;We only need two routes to support this wizard: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;show&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;show&lt;/code&gt; will display the step to the user while &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt; will handle the step submission.&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# config/routes.rb&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;resources&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:car_wizards&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;only: &lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%i[show update]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On the controller side, we’re supposed to let all the logic come from the manager and only handle rendering, form submission and redirections.&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CarWizardController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;before_action&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:initialize_variables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;only: &lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%i[show update]&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:current&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car_wizard_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@step_manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current_step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@step_manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;possible_step?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;set_form&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@step&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;errors/not_found&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;status: :not_found&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@step_manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;possible_step?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;errors/not_found&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;status: :not_found&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;set_form&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car_wizard_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next_step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@step&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize_variables&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;incomplete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:car_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sym&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@step_manager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;car: &lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RecordNotFound&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;error: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Car not found&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set_form&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@form&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@step_manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;form_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;car: &lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;view&quot;&gt;View&lt;/h2&gt;

&lt;p&gt;Finally, each step has its associated view. A step view only needs a form helper instance, based on the form object, to display form fields. At Getaround, we also have an associated presenter for each step, which allows us to share information between web, web mobile and mobile apps.&lt;/p&gt;

&lt;div class=&quot;language-haml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;simple_form_for @form, as: :car, url: car_wizard_path(@car, @step), method: :put do |f|
  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:mileage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car_mileage_options_for_select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;label: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;car_wizard.steps.mileage.attributes.mileage.label&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;pros-and-cons&quot;&gt;Pros and cons&lt;/h2&gt;

&lt;p&gt;With this architecture, we can build a complex wizard, with multiple flows. A user can stop and resume it any time, and it is possible to have many flows with many rules without having to write the entire logic in one single file, which would be much harder to understand and maintain.&lt;/p&gt;

&lt;p&gt;Each step having its own logic allows us to test the flow step by step, independently. The simple public API helps us to test service perfoming logic and attribute validation separately.&lt;/p&gt;

&lt;p&gt;It is easy to integrate into our MVC pattern with a very simple controller and basic views. The wizard manager itself is only a simple algorithm to compute possible steps.&lt;/p&gt;

&lt;p&gt;However, having most logic inside the form objects forces us to read each step to understand how the flows work. If the whole wizards gets too complicated, computing each step could begin to take some time, so this is something to watch out on the long term.&lt;/p&gt;

&lt;p&gt;Also, the step completion is based on saving things on database records. Having informational steps is a challenge to handle because we need to find other ways to store state to indicate that they have been seen, or rely on the state of adjacent steps.&lt;/p&gt;

&lt;p&gt;For the simplicity of the article we haven’t show all the features we have based on the car wizard. For instance, we have a logic to handle tracking on each step automatically. Also, the mobile wizard is driven by the backend, based on a dedicated API. With this in mind, such an architecture allows us to reorder, add or remove any step without having to deploy a new version of our mobile apps. Well, to be honest, it’s a little bit more complicated than that depending on what the mobile app supports, but you get the idea.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This modular flow is one solution to the wizard problem. It won’t suit every need, but a similar architecture has its advantages if you seek to manage multiple flows with complex decision trees.&lt;/p&gt;

&lt;p&gt;Feel free to comment and let us know what you think of this architecture and how we could improve it.&lt;/p&gt;

&lt;p&gt;Cheers.&lt;/p&gt;
</description>
        
          <description>&lt;p&gt;Wizards are a common component in a lot of applications. Either for signing up new users, creating products, purchasing items and many more.&lt;/p&gt;
</description>
        
        <pubDate>Mon, 12 Sep 2022 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/multiple-flows-wizard/</link>
        <guid isPermaLink="true">https://getaround.tech/multiple-flows-wizard/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>JavaScript smooth API with named-arguments and TypeScript</title>
        <dc:creator>Thibaud Esnouf</dc:creator>
        <description>&lt;p&gt;As a JavaScript developer, you surely have encountered some functions that require a lot of arguments to be called.
Because the argument list is an Array-like object, all the values need to be set and so it may have given you a headache to understand the order and purpose of each argument.&lt;/p&gt;

&lt;p&gt;Let see an approach to define developer-friendly function signatures with the named-arguments pattern and TypeScript.&lt;/p&gt;

&lt;h2 id=&quot;the-original-issues-with-functions-and-arguments&quot;&gt;The original issues with functions and arguments&lt;/h2&gt;

&lt;p&gt;Passing multiples arguments to a function can leads to several issues:&lt;/p&gt;

&lt;figure&gt;
  &lt;figcaption class=&quot;highlight-caption&quot;&gt;Example with the infamous null in the middle&lt;/figcaption&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;    &lt;span class=&quot;nx&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;itemId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Unless some variables with good naming are used, you have no clue of what the values stand for.&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;itemId&lt;/code&gt; is fine but what are behind the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; values ?&lt;/li&gt;
  &lt;li&gt;The order is important. Miss it and your code is broken.&lt;/li&gt;
  &lt;li&gt;You can’t skip optional parameter if they are defined in the middle of the argument list.&lt;br /&gt;
You’ll have to pass the full requested list of arguments, using default values like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Those issues apply for both the developer calling the function and the one reviewing the resulting code&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The more arguments you pass to a function, the faster it will become a nightmare to call it.&lt;/p&gt;

&lt;p&gt;
&lt;strong&gt;TypeScript&lt;/strong&gt; can help you by providing an IDE integration displaying the function input naming.&lt;br /&gt; Type checking can also help you in some cases with the order.
&lt;/p&gt;

&lt;figure&gt;
  &lt;img alt=&quot;TypeScript IDE documentation&quot; src=&quot;/assets/posts/2022-05-04-javascript-named-arguments-pattern/typescript-ide-documentation.jpg&quot; /&gt;
  &lt;figcaption&gt;
    Example of a documentation based on TypeScript in VSCode
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;But you still have to pass the full argument list even though you only want to use 2 of them.
Plus the TypeScript « auto documentation » may not be available when performing a read-only review of some code, on GitHub for example&lt;/p&gt;

&lt;p&gt;So let’s jump in a solution that resolve all those issues.&lt;/p&gt;

&lt;h2 id=&quot;named-arguments-pattern-with-typescript&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Named-arguments&lt;/code&gt; pattern (with TypeScript)&lt;/h2&gt;

&lt;p&gt;
The trick is to &quot;replace&quot; the argument list by a single javascript object that will embed all the arguments as properties.
This pattern is called `named-arguments`
&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This pattern has always been available but it has been made easy with es6 &lt;strong&gt;Object destructuring&lt;/strong&gt; and &lt;strong&gt;TypeScript&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;single-object-as-an-argument&quot;&gt;Single Object as an argument&lt;/h3&gt;

&lt;p&gt;Using a single object as a wrapper and using properties to pass arguments will resolve all the issues:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;If a parameter is optional and you don’t want to define it, just omit the related property&lt;/li&gt;
  &lt;li&gt;You can define the properties in any order. It doesn’t matter.&lt;/li&gt;
  &lt;li&gt;with nicely named-properties, you’ll always have a clue of the purpose of a value&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;itemId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;disabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; value makes perfect sense now!
Plus, we don’t need anymore to pass extra values for optional parameters. No more extra &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; values !&lt;/p&gt;

&lt;figure&gt;
  &lt;figcaption class=&quot;highlight-caption&quot;&gt;Calling the function with some extra parameters&lt;/figcaption&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;itemId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;createdAfter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;date1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;createdBefore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;date2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;disabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;/figure&gt;

&lt;p&gt;If we want to add some optional parameters, we just need to define the related properties (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;createdAfter&lt;/code&gt; &amp;amp; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;createdAfter&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;So now, let’s have a look of such a function declaration&lt;/p&gt;

&lt;p&gt;Using a single object as an argument will make it more obtrusive to guess the input and harder to retrieve the values?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// no idea of the data structure :(&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// we have to retrieve the values one by one….&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createdAfter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createdAfter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// setting a default value&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Not at all, thanks to ES6 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#object_destructuring&quot;&gt;object destructuring&lt;/a&gt; that can be used straight to function inputs&lt;/p&gt;

&lt;h3 id=&quot;object-destructuring&quot;&gt;Object destructuring&lt;/h3&gt;

&lt;figure&gt;
  &lt;figcaption class=&quot;highlight-caption&quot;&gt;Object destructuring to the rescue&lt;/figcaption&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createdAfter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createdBefore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;disabled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// our arguments are listed back, with some default values !&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;my input id&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;/figure&gt;

&lt;p&gt;It looks like the classic Array-like argument list (positional arguments) with some extra brackets around &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Notice that we are using default parameters to define optional arguments:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;createdAfter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createdBefore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;disabled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;createdAfter&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;createdBefore&lt;/code&gt; property is missing (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined&lt;/code&gt;) the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; value will be set automatically.&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;disabled&lt;/code&gt; argument if omitted will be set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you are familiar with &lt;strong&gt;React&lt;/strong&gt; you have notice that this mechanism is used for &lt;strong&gt;Component props&lt;/strong&gt;, taking advantage that adding attributes to a HTML( JSX) element has the same behavior that adding properties to an object:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;No order.&lt;/li&gt;
  &lt;li&gt;Optional argument can be omitted.&lt;/li&gt;
  &lt;li&gt;Defining the attribute name allow you to understand the nature &amp;amp; purpose of the data.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;typescript-enhancement&quot;&gt;TypeScript enhancement&lt;/h3&gt;

&lt;p&gt;
Although all the issues as been resolved using our object, the developer experience will be really smooth when coupled with TypeScript.
Your function API will be auto-documented showing to the developer the available property names and their related types.
&lt;/p&gt;
&lt;p&gt;Sometimes, the name of a property is not enough to understand the type of the value that should be used. Should a date argument be a Date object ? A formatted string ? Or a timestamp ?&lt;br /&gt; TypeScript will give you this information.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ApiInterface&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// oh ! So the id should be a string and not a number&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;createdAfter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// date is a Date object ! +optional&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;createdBefore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//optional&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;disabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// optional&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// just by reading the interface we get a clear understanding of the argument natures&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createdAfter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createdBefore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;disabled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ApiInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The input interface gives a good understanding of the arguments used by the function.&lt;br /&gt;
At a glance we can see which arguments are optionals thanks to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you omit a mandatory argument, TypeScript will notify you.&lt;/p&gt;

&lt;figure&gt;
  &lt;img alt=&quot;TypeScript IDE documentation&quot; src=&quot;/assets/posts/2022-05-04-javascript-named-arguments-pattern/typescript-missing-property.jpg&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;So TypeScript will help both the developer calling the function and a reviewer reading the code from the function itself&lt;/p&gt;

&lt;h3 id=&quot;shorthand-property-names&quot;&gt;Shorthand property names&lt;/h3&gt;

&lt;p&gt;
Cherry on the cake, shortand property names can ease the process of calling such a function.
&lt;/p&gt;
&lt;p&gt;If you’re passing values using variable names matching the expected properties, you’ll just have to call the function wrapping the variables inside brackets&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;disabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It is the same thing than&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;disabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;disabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If one of your variable name doesn’t match an expected property name, you can of course mix shorthand property names with classic declarations.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;itemId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;disabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The nice thing with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;named-arguments&lt;/code&gt; pattern is that the more arguments are required for a function, the more sense it will make to use it.&lt;/p&gt;

&lt;h2 id=&quot;use-it-wisely&quot;&gt;Use it wisely&lt;/h2&gt;

&lt;p&gt;That’s not because this pattern has some advantages that you should use it everywhere:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If your function accepts a single argument, it doesn’t make sense to wrap it in an object.&lt;/strong&gt;&lt;br /&gt;
You should just ensure that the naming give a good hint of the input nature. Using TypeScript won’t even make it an issue.
&lt;br /&gt;
You could be tempted to use named-argument because of potential future evolution of your API but you shouldn’t forecast it by sacrifying simplicity.
If you need additional arguments later, let’s refactor it at this moment.&lt;/p&gt;

&lt;p&gt;
In my opinion, if your function only accepts 2 arguments, it is still excessive to use this pattern, especially if the second one is optional.
&lt;br /&gt;
&lt;strong&gt;But it could be a good call to use named-arguments if the 2 properties have the same types&lt;/strong&gt;.
&lt;/p&gt;
&lt;p&gt;For example building a range of values (min/max) or a range of dates (start/end)&lt;br /&gt;
The order may be important and TypeScript won’t help in this case.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;isValidRange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;endDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// should startDate be the first argument ?&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;isValidRange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;startDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;endDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// no more ambiguity&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Keep in mind that if you have a lot of properties in your argument object, this can be a good hint that you are doing too many things at once.&lt;br /&gt;
For example, if you return an object using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RORO (Receive Object / Return Object) pattern&lt;/code&gt;, you could split your function into multiple sub tasks using composition.&lt;br /&gt;
As always, when your single input and output share the same type, it can be a good hint that you can enable composing, splitting the manipulation on your input data on multiple functions.&lt;/p&gt;

</description>
        
          <description>&lt;p&gt;As a JavaScript developer, you surely have encountered some functions that require a lot of arguments to be called.
Because the argument list is an Array-like object, all the values need to be set and so it may have given you a headache to understand the order and purpose of each argument.&lt;/p&gt;
</description>
        
        <pubDate>Wed, 04 May 2022 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/javascript-named-arguments-pattern/</link>
        <guid isPermaLink="true">https://getaround.tech/javascript-named-arguments-pattern/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>GDPR compliance and account deletion</title>
        <dc:creator>Eric Favre</dc:creator>
        <description>&lt;p&gt;The GDPR has been around for several years now, and as advocates of data privacy, we are convinced by the legitimacy of such a regulation. However, as good as this measure is from a user’s perspective, it comes with its own puzzles and challenges for an online service provider… Here we’ll try to describe the solution we implemented to deal with the user’s data deletion, which is one of the rights granted by the GDPR (&lt;a href=&quot;https://ec.europa.eu/info/law/law-topic/data-protection_en&quot;&gt;General Data Protection Regulation&lt;/a&gt;) to any European user of a service collecting personal data. As a result, this piece does not try to cover all the implications of the GDPR, nor does it pretend to bring a one size fits all solution deal with user data deletion.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;gdpr-in-a-nutshell&quot;&gt;GDPR In A Nutshell&lt;/h2&gt;

&lt;p&gt;GDPR specifies different roles and responsibilities. As an online service provider directly dealing with the end users, Getaround falls into the &lt;em&gt;controller&lt;/em&gt; category. And as such we must comply with some obligations, notably:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Collect data limited to what is necessary for the purposes for which they are processed, and &lt;em&gt;keep it for the time strictly necessary&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Collect explicit consent over personal data collection and usage&lt;/li&gt;
  &lt;li&gt;Ensure data security&lt;/li&gt;
  &lt;li&gt;Upon user request, provide:
    &lt;ul&gt;
      &lt;li&gt;Access to personal data (right of access)&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Means to delete personal data (right to erasure)&lt;/em&gt;&lt;/li&gt;
      &lt;li&gt;Export of personal data (right to data portability)&lt;/li&gt;
      &lt;li&gt;Change inaccurate or incomplete personal data (right to rectification)&lt;/li&gt;
      &lt;li&gt;Means to object to the data treatment (Right to object)&lt;/li&gt;
      &lt;li&gt;Enable limitation of personal data treatment (Right to restriction of processing)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Address and communicate data breaches&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;data-retention&quot;&gt;Data Retention&lt;/h2&gt;

&lt;p&gt;In the description of the data usage, we define its processing and why the data is needed. The data retention is subject to 3 phases:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;active database&lt;/li&gt;
  &lt;li&gt;intermediate archiving&lt;/li&gt;
  &lt;li&gt;deletion&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can keep the data in an active database for the time necessary to execute the specific purpose for which it was collected. The data can be afterwards kept in an intermediate archive for a legitimate purpose (essentially to serve a legal obligation or when it corresponds to a user’s legal right) providing the archived data is only the one which is necessary for that purpose and access is strictly limited. Afterwards, we have to erase the data and can do it through full anonymization. These principles applying to data archiving and deletion prevent abusive data retention for an undetermined period “just in case”, and this also allows damage control in case of data leaks. Once data is fully removed from the system, it is “unleakable”. Similarly, the users are the primary owners of their data, so they can spontaneously ask for their personal data deletion.&lt;/p&gt;

&lt;p&gt;This basically means the system must offer a way to delete a user’s personal details, whether upon their own request, or according to a time-based data expiration rule.  While a manual solution can be acceptable for smaller systems, a large scale product such as ours requires a real technical solution.&lt;/p&gt;

&lt;h2 id=&quot;getaround-context&quot;&gt;Getaround Context&lt;/h2&gt;

&lt;p&gt;Our service requires personal data from our users. We collect names, birth dates, id documents for driver vetting, etc. This is legitimate data to collect in a car rental context, and can be kept as long as it’s relevant (user is active, has some recent or upcoming rentals, has an ongoing claim, etc), but we must make sure that it’s thoroughly deleted when it’s no longer deemed relevant.&lt;/p&gt;

&lt;p&gt;We also rely on 3rd parties (as per GDPR terminology) which process some of this data (for email campaigns, identity document authentication, customer support, etc.). The personal data communicated to these 3rd parties needs to be deleted when the user’s data is removed from our platform. Fortunately, most of these services also provide an API to automatically remove all data related to a user.&lt;/p&gt;

&lt;p&gt;Finally, in the case where a user requests their account deletion, and some legal constraints force us to delay the actual data deletion, we must still make their account unusable and invisible to the other users or administrators.&lt;/p&gt;

&lt;h2 id=&quot;the-user-lifecycle&quot;&gt;The User Lifecycle&lt;/h2&gt;

&lt;p&gt;Now that the legal context is laid out, let’s dive into the implementation. First, we tried to materialize the different needs under a formalized user account lifecycle.&lt;/p&gt;

&lt;figure&gt;
  &lt;img alt=&quot;User lifecycle: Active - Inactive - Archived - Deleted&quot; src=&quot;/assets/posts/2021-12-02-gdpr-account-deletion/user_lifecycle.png&quot; /&gt;
  &lt;figcaption&gt;
    User lifecycle
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;As illustrated, we have 2 paths to a user account’s deletion. A main passive one, and a spontaneous one when the user requests their own account deletion. The passive one is the nominal user lifecycle path:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;User is &lt;strong&gt;active&lt;/strong&gt;: they use our service&lt;/li&gt;
  &lt;li&gt;User is &lt;strong&gt;inactive&lt;/strong&gt;: in the database, the user status is still active, however they haven’t had any recent activity logged in our system. When the latest monitored activity reaches a certain age (in our current configuration, 3 years), we send a notification to warn the user that their account will be automatically deleted if they do not log back in soon. If they do come back and create new activity, then they’re back to the active stage.&lt;/li&gt;
  &lt;li&gt;User gets &lt;strong&gt;archived&lt;/strong&gt; if the user didn’t create any new activity when the time comes. Once archived, an account is unusable. From any user’s perspective, the personal data of an archived user (and their car, reviews…) are not viewable. At the time of archival, a deletion date is also determined. Most of the time (unless specific criteria apply) this deletion date is the next day. The date is stored along with the user account.&lt;/li&gt;
  &lt;li&gt;The user account becomes &lt;strong&gt;deleted&lt;/strong&gt; when the deletion date is reached. The anonymization of the user data is performed. We chose to keep a fully anonymized record rather than completely deleting the record out of concern for referential integrity and for statistical analysis.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The spontaneous account deletion happens upon the user’s own request. When they do so, the inactivity phase is skipped, and they are directly processed through the archiving phase, with the determination of the deletion date. Then the same process applies.&lt;/p&gt;

&lt;p&gt;Once this lifecycle logic is laid out, the only remaining matter is the technical implementation.&lt;/p&gt;

&lt;h2 id=&quot;technical-implementation&quot;&gt;Technical Implementation&lt;/h2&gt;

&lt;h3 id=&quot;flow-management&quot;&gt;Flow Management&lt;/h3&gt;

&lt;p&gt;We chose to define a dedicated model that holds the archiving and deletion logic. Let’s call it &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserDeletionFlow&lt;/code&gt;, and define its attributes like this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;create_table&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:user_deletion_flows&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;references&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;null: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;null: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;index: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:archive_notice_email_sent_at&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:archive_after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;null: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:archived_at&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:delete_after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;null: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:deleted_at&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;timestamps&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;null: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:archive_after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:delete_after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt; has many &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserDeletionFlow&lt;/code&gt;, but only one can be active at any time. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state&lt;/code&gt; column stores the state machine step where the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserDeletionFlow&lt;/code&gt; is. It applies the following sequence:&lt;/p&gt;

&lt;figure&gt;
  &lt;img alt=&quot;UserDeletionFlow state machine: archive_eligible - deletion_eligible - completed - discarded&quot; src=&quot;/assets/posts/2021-12-02-gdpr-account-deletion/user_deletion_flow_state_machine.png&quot; width=&quot;270&quot; /&gt;
  &lt;figcaption&gt;
    UserDeletionFlow state machine
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;When a user has been inactive for 3 years, a related &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserDeletionFlow&lt;/code&gt; is created with a state &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;archive_eligible&lt;/code&gt;. An archive notice is sent to the user, and the current date is stored in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;archive_notice_email_sent_at&lt;/code&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;archive_after&lt;/code&gt; date is set to 1 month later and stored.&lt;/li&gt;
  &lt;li&gt;When the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;archive_after&lt;/code&gt; date is passed, the user’s latest activity is reassessed. If there was new activity, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserDeletionFlow&lt;/code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;discarded&lt;/code&gt;. Otherwise, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserDeletionFlow&lt;/code&gt; state is set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deletion_eligible&lt;/code&gt;, and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;delete_after&lt;/code&gt; date is computed based on several parameters and stored in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserDeletionFlow&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Once the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;delete_after&lt;/code&gt; date is passed, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserDeletionFlow&lt;/code&gt; state is set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;completed&lt;/code&gt;, and an anonymization process takes over to erase the user’s data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These steps are preformed by nightly cron jobs that query the database to retrieve all impacted accounts. If a user spontaneously requests the deletion of their data, their related &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserDeletionFlow&lt;/code&gt; is immediately created in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deletion_eligible&lt;/code&gt; state, and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;delete_after&lt;/code&gt; column is populated similarly to the passive deletion flow.&lt;/p&gt;

&lt;h3 id=&quot;anonymization-process&quot;&gt;Anonymization Process&lt;/h3&gt;

&lt;p&gt;When a user account gets deleted, we immediately create N &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DataDeletionAttempt&lt;/code&gt; for N user “areas”, and trigger asynchronous jobs to actually perform these &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DataDeletionAttempt&lt;/code&gt;. We have designed several data erasers, each taking care of anonymizing a specific area of the user’s data. They fall into 2 categories:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Internal erasers&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each of these bears the responsibility to anonymize one specific area of the user data stored in our database. For instance, there is an eraser for the user’s identity (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;users.first_name&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;users.last_name&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;users.birth_date&lt;/code&gt;,…), another one for the user’s cars (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cars.registration_plate&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cars.vehicle_identification_number&lt;/code&gt;, etc.). The erasers anonymize the data by replacing them with placeholders, either static or randomly generated, so that the database constraints and referential integrity are respected.&lt;/p&gt;

&lt;p&gt;And since we’re using &lt;a href=&quot;https://github.com/paper-trail-gem/paper_trail&quot;&gt;PaperTrail&lt;/a&gt; on some models to keep an audit trail of the changes that are applied, these erasers also have the responsibility to anonymize the versions that tracked some personal data changes.&lt;/p&gt;

&lt;p&gt;Finally, some of these erasers remove the possible files that were stored for the deleted account.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Third party erasers&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These erasers are clients to our 3rd party providers’ APIs, and request their users endpoint to request the user’s data deletion.&lt;/p&gt;

&lt;p&gt;All erasers are run asynchronously, and some of the 3rd party erasers need a personal identifier from our database. For instance, to erase a user’s history on Zendesk, we first need their Zendesk identifier, which we can get by searching for the user’s email on Zendesk API. But it can happen that the user’s email has already been erased when the Zendesk eraser runs. To address this situation, we denormalize some deletion arguments into the related &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DataDeletionAttempt&lt;/code&gt;. When the eraser succeeds, this denormalized data is of course nullified to guarantee the full removal of personal data.&lt;/p&gt;

&lt;p&gt;If any data eraser fails for any reason, we are notified on our bug tracking system, and we make sure to address the situation.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;This solution took some time to implement and still has room for improvement, but we are satisfied with the upside it already brings. It’s fully automated, flexible and easy to maintain. More importantly, we take some pride in continuously working on improving our compliance with European regulation requirements and make sure we provide a platform which is respectful of our users’ privacy.&lt;/p&gt;
</description>
        
          <description>&lt;p&gt;The GDPR has been around for several years now, and as advocates of data privacy, we are convinced by the legitimacy of such a regulation. However, as good as this measure is from a user’s perspective, it comes with its own puzzles and challenges for an online service provider… Here we’ll try to describe the solution we implemented to deal with the user’s data deletion, which is one of the rights granted by the GDPR (&lt;a href=&quot;https://ec.europa.eu/info/law/law-topic/data-protection_en&quot;&gt;General Data Protection Regulation&lt;/a&gt;) to any European user of a service collecting personal data. As a result, this piece does not try to cover all the implications of the GDPR, nor does it pretend to bring a one size fits all solution deal with user data deletion.&lt;/p&gt;
</description>
        
        <pubDate>Thu, 02 Dec 2021 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/gdpr-account-deletion/</link>
        <guid isPermaLink="true">https://getaround.tech/gdpr-account-deletion/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>MySQL 8 Features</title>
        <dc:creator>Michael Bensoussan</dc:creator>
        <description>&lt;p&gt;MySQL 8 was released in 2018 and is the next release after 5.7.&lt;br /&gt;
Since 2018 and as of today there was 27 minor versions bringing the last version to 8.0.27. It’s important because MySQL did bring a lot of feature enhancements in these minor versions as we’ll see in the next part.&lt;/p&gt;

&lt;h2 id=&quot;common-table-expressions-ctes&quot;&gt;Common Table Expressions (CTEs)&lt;/h2&gt;

&lt;p&gt;A Common Table Expression (also known as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WITH&lt;/code&gt; query) is a named temporary result set.&lt;br /&gt;
It exists only in the scope of a single statement and can be later referred within that statement.&lt;br /&gt;
You create a CTE using a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WITH&lt;/code&gt; query, then reference it within a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SELECT&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INSERT&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UPDATE&lt;/code&gt;, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DELETE&lt;/code&gt; statement.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/10755/140494098-cb47d22c-3ee5-4f5b-b0a1-a4806418e636.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;CTEs make a query &lt;strong&gt;more readable&lt;/strong&gt;, allow to better &lt;strong&gt;organize long queries&lt;/strong&gt; and better reflects human logic (like &lt;strong&gt;functions&lt;/strong&gt; does). It’s particularly useful when you need to &lt;strong&gt;reference a derived table multiple times&lt;/strong&gt; in a single query. There is also a specific category of CTEs called &lt;strong&gt;recursive CTEs&lt;/strong&gt; that are allowed to reference themselves. These CTEs can solve problems that cannot be addressed with other queries.&lt;/p&gt;

&lt;p&gt;This feature is available as of MySQL 8.0 and some edge cases have been handled in 8.0.19 (recursive &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/select.html&quot;&gt;SELECT&lt;/a&gt;  with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LIMIT&lt;/code&gt;  clause).&lt;br /&gt;
Documentation is &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/with.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;window-functions&quot;&gt;Window Functions&lt;/h2&gt;

&lt;p&gt;PostgreSQL’s documentation does an excellent job of &lt;a href=&quot;http://www.postgresql.org/docs/9.1/static/tutorial-window.html&quot;&gt;introducing the concept of Window Functions&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A &lt;em&gt;window function&lt;/em&gt; performs a calculation across a set of table rows that are somehow related to the current row. This is comparable to the type of calculation that can be done with an aggregate function. But unlike regular aggregate functions, use of a window function does not cause rows to become grouped into a single output row — the rows retain their separate identities. Behind the scenes, the window function is able to access more than just the current row of the query result.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/10755/140494248-2f011038-ac39-480d-8848-0f60049512e4.png&quot; alt=&quot;Untitled&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is an example that shows how to compare each employee’s salary with the average salary in his or her department:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/10755/140494298-eec44fe9-a0f2-4594-a316-b0e765686e65.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;MySQL comes with the following &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WINDOW&lt;/code&gt; functions:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/10755/140494455-1ee6bbd7-8712-40a3-8aed-087842a2b5e9.png&quot; alt=&quot;Untitled&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WINDOW&lt;/code&gt; functions probably deserves an article on their own. You can find one &lt;a href=&quot;https://www.mysqltutorial.org/mysql-window-functions/&quot;&gt;here&lt;/a&gt;.
This feature is available as of MySQL 8.0.&lt;br /&gt;
Documentation is &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/window-functions.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;expressions-as-default-values&quot;&gt;Expressions as Default Values&lt;/h2&gt;

&lt;p&gt;MySQL now supports use of “expressions” as default values. Expressions are distinguished by the use of parenthesis. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BLOB&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TEXT&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GEOMETRY&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON&lt;/code&gt; data types can be assigned a default value only if the value is written as an expression, even if the expression value is a literal.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/10755/140494552-be95bdb3-8561-44b3-bbea-0d131c351f14.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This feature is available starting MySQL 8.0.13. Before 8.0.13, the only expression supported was &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_current-timestamp&quot;&gt;CURRENT_TIMESTAMP&lt;/a&gt;.&lt;br /&gt;
Documentation is &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/data-type-defaults.html#data-type-defaults-explicit&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;indexing-key-parts&quot;&gt;Indexing key parts&lt;/h2&gt;

&lt;p&gt;MySQL now supports indexing expression values referencing other keys rather than column values or column prefixes. Using parts of a function key allows you to index values that are not directly stored in the table.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/10755/140494606-01083b5a-a2f4-45f9-bcb8-db24a311fbd0.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This feature is available starting MySQL 8.0.13. Prior to 8.0.13, you could achieve the same result by using virtual columns and indexing them but this is clearly way more straightforward.&lt;br /&gt;
Documentation is &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/create-index.html#create-index-functional-key-parts&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;descending-indexes&quot;&gt;Descending Indexes&lt;/h2&gt;

&lt;p&gt;MySQL now supports descending indexes (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DESC&lt;/code&gt;). Previously, indexes could be scanned in reverse order but at a performance penalty. A descending index can be scanned in forward order, which is more efficient.&lt;/p&gt;

&lt;p&gt;Descending indexes also make it possible for the optimizer to use multiple-column indexes when the most efficient scan order mixes ascending order for some columns and descending order for others.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/10755/140494645-c0286532-d0a7-4bd1-8fe9-9e6f7f106737.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This feature is available as of MySQL 8.0.&lt;br /&gt;
Documentation is &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/descending-indexes.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;invisible-indexes&quot;&gt;Invisible indexes&lt;/h2&gt;

&lt;p&gt;MySQL now supports invisible indexes. An invisible index is not used by the optimizer, but is otherwise maintained normally.&lt;/p&gt;

&lt;p&gt;It’s basically a toggle for indexes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/10755/140494817-54fc6a7f-3208-4230-bff0-959da39adb49.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hidden index can be used to quickly test the impact of index deletion or index creation on query performance without index deletion and reconstruction. If the index is needed, it is good to set it visible again. This is undoubtedly very useful in large table testing, because it consumes performance for index deletion and addition of large table, and even affects the normal operation of the table.&lt;/p&gt;

&lt;p&gt;This feature is available as of MySQL 8.0.&lt;br /&gt;
Documentation is &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/invisible-indexes.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;explain-analyze-statement&quot;&gt;EXPLAIN ANALYZE Statement&lt;/h2&gt;

&lt;p&gt;This statement provides expanded information about the execution of &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/select.html&quot;&gt;SELECT&lt;/a&gt; statements in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TREE&lt;/code&gt; format. This includes startup cost, total cost, number of rows returned by iterator, and the number of loops executed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/10755/140494857-854bfb84-bec7-4bc6-84b9-c9e127a578f1.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The cost is an arbitrary unit but it is consistent between queries and usually a good proxy to answer the question “is this query faster than this other query?”.&lt;/p&gt;

&lt;p&gt;This feature is available in 8.0.18.&lt;br /&gt;
Documentation is &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/explain.html#explain-analyze&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;what-else&quot;&gt;What else?&lt;/h2&gt;

&lt;p&gt;MySQL 8 comes with tons of other features like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Better UTF8 support&lt;/li&gt;
  &lt;li&gt;New “role” system allowing to give/remove permissions to groups of people&lt;/li&gt;
  &lt;li&gt;User comments and user attributes&lt;/li&gt;
  &lt;li&gt;JSON enhancements ( &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&amp;gt;&amp;gt;&lt;/code&gt; operator, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON_PRETTY()&lt;/code&gt;, merge function, aggregation functions, JSON schema validation draft 4 …)&lt;/li&gt;
  &lt;li&gt;Better regexp support&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And of course performance and stability improvements.&lt;/p&gt;

&lt;p&gt;The full list of changes is &lt;strong&gt;&lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/mysql-nutshell.html&quot;&gt;here&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
</description>
        
          <description>&lt;p&gt;MySQL 8 was released in 2018 and is the next release after 5.7.&lt;br /&gt;
Since 2018 and as of today there was 27 minor versions bringing the last version to 8.0.27. It’s important because MySQL did bring a lot of feature enhancements in these minor versions as we’ll see in the next part.&lt;/p&gt;
</description>
        
        <pubDate>Fri, 05 Nov 2021 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/mysql-8-features/</link>
        <guid isPermaLink="true">https://getaround.tech/mysql-8-features/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Your job is not just to write good code</title>
        <dc:creator>Michael Bensoussan</dc:creator>
        <description>&lt;p&gt;This is an opinion piece.&lt;/p&gt;

&lt;p&gt;I usually write about technical subjects but I recently wanted to formalize my opinion on the role of the software engineer and decided to publish it in the hope it could benefit some readers or trigger interesting discussions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TLDR;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You have two jobs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Write good and maintainable code&lt;/li&gt;
  &lt;li&gt;Make it easy to work with you&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Writing good code is the easy part; it has challenges of course but most engineers struggle with the second part. That’s what I’ll be talking about.&lt;/p&gt;

&lt;p&gt;There’s a famous quote &lt;a href=&quot;https://skeptics.stackexchange.com/questions/19836/has-phil-karlton-ever-said-there-are-only-two-hard-things-in-computer-science&quot;&gt;attributed to Phil Karlton&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There are only two hard things in Computer Science: cache invalidation and naming things.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That quote is certainly true while purely discussing software engineering but if we expand to areas that &lt;em&gt;use&lt;/em&gt; computer science, it’s clear that communication wins as the hardest part.&lt;/p&gt;

&lt;p&gt;Let’s try to illustrate that point with some examples.&lt;/p&gt;

&lt;h2 id=&quot;code-reviews&quot;&gt;Code reviews&lt;/h2&gt;

&lt;p&gt;Reviewing someone’s work is a personal process, and criticism, whether it’s constructive or not, can be difficult to digest.
But it’s not just about practicing good “etiquette”—this is the easy part.&lt;/p&gt;

&lt;p&gt;It’s also important to convey intention and adapt to your audience.
Let’s imagine a scenario with &lt;em&gt;Junior Billy&lt;/em&gt; writing some code and &lt;em&gt;Senior Bob&lt;/em&gt; doing a review using the following code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;36&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Senior Bob:&lt;/strong&gt; These numbers are a bit puzzling!
And to which Junior Bob replies with the updated code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;OK&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;NOT_OK&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And a whole bunch of updates everywhere the function was called.&lt;/p&gt;

&lt;p&gt;Was it necessary? Maybe. Was it needed for this PR? Probably not.&lt;/p&gt;

&lt;p&gt;Senior Bob could have replied with:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Senior Bob:&lt;/strong&gt; These numbers are a bit puzzling. Maybe to make it a bit clearer you could introduce either a named variable to convey the meaning in this function or a constant to be used elsewhere in the code at a later stage or in a follow-up PR if you have the time.&lt;/p&gt;

&lt;p&gt;Senior Bob could even give a code example; it would cost him less than a minute and would help Junior Bob grow and not lose hour(s) of his/her time on a wrong rewrite.&lt;/p&gt;

&lt;p&gt;Going the extra mile in code reviews always pays and is another example where making sure everyone is on the same page is beneficial.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: Some people like to use an &lt;a href=&quot;https://github.com/erikthedeveloper/code-review-emoji-guide&quot;&gt;Emoji legend&lt;/a&gt; to convey intention. This is especially useful when you or the person being reviewed have not completely mastered the language you’re doing the review in. In this case, codifying intention is a good approach to avoid misunderstandings.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;meetings&quot;&gt;Meetings&lt;/h2&gt;

&lt;p&gt;A lot of things can go wrong in a meeting, so communication is key here.
I won’t create a list of all the mistakes we, as developers, make. Instead, let’s focus on three points I see a lot of people struggling with:&lt;/p&gt;

&lt;h3 id=&quot;your-audience-matters&quot;&gt;Your audience matters&lt;/h3&gt;

&lt;p&gt;The importance of identifying the target audience is true for all kinds of meetings. But as developers, we have to learn to simplify concepts and keep things simple.&lt;/p&gt;

&lt;p&gt;The next time you are in a meeting, take a step back and put yourself in the other person’s shoes. Think about how someone with no technical knowledge would perceive the information you are about to share with them.&lt;/p&gt;

&lt;p&gt;🙅‍♂️ Don’t say, “This will probably raise the mean time by 2000ms for the whole website because the transaction will generate a table lock.”&lt;/p&gt;

&lt;p&gt;👍 Say, “This is going to lead to a significant performance issue, which could slow down the system.”&lt;/p&gt;

&lt;p&gt;This comes with some practice but you can practice with your spouse, friends, and family. This is key to being an effective communicator.&lt;/p&gt;

&lt;p&gt;You can and probably should still teach your non-tech coworkers some “crucial” tech terms and, in some companies it is part of the company glossary or part of the onboarding (terms like “front-end”, “backend”, “iterate” or “mvp”, for example). Similarly developers should probably learn some business vocabulary to understand their coworkers’ jobs and challenges like “churn” or “ltv”.&lt;/p&gt;

&lt;h3 id=&quot;listening&quot;&gt;Listening&lt;/h3&gt;

&lt;p&gt;This may sound ridiculous to some but communication is not just about presenting ideas.
Careful listening requires energy and can be difficult and, in certain situations, boring or unpleasant, that doesn’t mean you can’t do it.&lt;/p&gt;

&lt;p&gt;Avoid multitasking even if you can multitask or think you can.
Be patient and hold your tongue.&lt;br /&gt;
&lt;strong&gt;And try to interpret what’s being said.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Based on the purpose of your discussion, what the speaker cares most about, or what’s been said before, what does this mean? Use what you know to interpret what they’re trying to tell you, and ask questions if you need more details.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rephrase your understanding if needed.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Also, assume the best. Assume that the intention of the person opposite to you is good and clever, even if you understand it at first as stupid and offensive. Again, repeat and rephrase.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Meetings would go faster if people took the time to listen.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Careful listening also applies to written communication; read twice before answering, put the message in context and don’t hesitate to ask questions before having a (strong) opinion.&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;Double check what you wrote before hitting send as well, disambiguation is often more painful on a written discussion.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;making-sure-everyone-is-on-the-same-page&quot;&gt;Making sure everyone is on the same page&lt;/h3&gt;

&lt;p&gt;Because of a failure to take the first two points into account, but also for countless other reasons, I have often witnessed people leaving a meeting with a different understanding of the next steps. And you might discover this days, weeks or even months later!&lt;/p&gt;

&lt;p&gt;A good reflex is to always have a “Scribe”, someone taking notes during a meeting with a specific section for action items and their owners in the meeting notes.
I also like to keep the last part of meetings to focus on the recap and the next steps:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;So we only have five minutes left, let’s stop here. What are the next steps?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And enumerate each of them with the people who own them.&lt;/p&gt;

&lt;p&gt;Sometimes, it also makes sense to repeat and rephrase something to make sure everyone has the same understanding.&lt;/p&gt;

&lt;p&gt;Let’s imagine a scenario with &lt;em&gt;Developer Jim&lt;/em&gt; and &lt;em&gt;Product Manager Laura&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developer Jim:&lt;/strong&gt; It should take two days.&lt;br /&gt;
&lt;strong&gt;Product manager Laura:&lt;/strong&gt; Alright, so it’s Tuesday, I guess it should be ready by Thursday night for a release Friday morning?&lt;br /&gt;
&lt;strong&gt;Developer Jim:&lt;/strong&gt; Ah, no, I meant two days of full work. But Wednesday afternoon I do pair programming with Junior Billy on his assigned task and Thursday afternoon I have my performance review. I’d therefore like to avoid releasing on Friday. It should probably be released Monday morning!&lt;/p&gt;

&lt;p&gt;Here, Laura had the right reflex by not assuming two days meant two calendar days and to make sure Laura and Jim had the same understanding of the situation.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Communication is hard but going the extra mile always pays. Communication helps to build strong and healthy relationships, so don’t underestimate its power.&lt;/p&gt;

&lt;p&gt;Most of the difficult problems engineers face include both technical and human components, and the greatest engineers can address both.&lt;/p&gt;
</description>
        
          <description>&lt;p&gt;This is an opinion piece.&lt;/p&gt;
</description>
        
        <pubDate>Fri, 25 Jun 2021 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/your-job-not-just-to-write-code/</link>
        <guid isPermaLink="true">https://getaround.tech/your-job-not-just-to-write-code/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>What's a good team process?</title>
        <dc:creator>Eric Favre</dc:creator>
        <description>&lt;p&gt;You may have heard about the &lt;a href=&quot;https://intersol.ca/news/organizational-culture-and-the-5-monkeys-experiment/&quot;&gt;five monkeys experiment&lt;/a&gt;, a cautionary tale sometimes used to illustrate how we can get locked up in an organisational harness without sufficient hindsight, power or leeway to change the way things are.&lt;/p&gt;

&lt;p&gt;This comparison may sound unflattering, but I have seen similar situations in previous lives, where a process I don’t understand is enforced, and I simply end up complying and assimilating it as normal. No-one is really responsible for that process, it may not even be relevant anymore, but it’s still there and is so much part of the habits that nobody thinks of questioning it, or the ones who do get dismissed with a “that’s how it is”.&lt;/p&gt;

&lt;p&gt;Of course not all processes are like this. All organisations have frictions, and introducing processes or rituals is a sensible answer to some of them. When well thought out, good processes can avoid outage, enforce continuous improvement, ease up newcomers’ onboarding, pay out tech debt… Bottom line, they can help save time, secure the future and improve customer satisfaction.&lt;/p&gt;

&lt;p&gt;So we’ve tried to formalise below a few basic rules that should help building a good team process.&lt;/p&gt;

&lt;h2 id=&quot;a-good-process-is-fully-understood&quot;&gt;A good process is fully understood&lt;/h2&gt;

&lt;p&gt;People will apply it more easily if they understand where it comes from. Making sure everyone knows what the process achieves, for whom, and the context in which it emerged will ease up a great deal the team’s adhesion to it. It’s therefore the manager’s responsibility to carefully onboard a newcomer on the existing processes, so they can adhere to them.&lt;/p&gt;

&lt;p&gt;For instance, in a consulting company, when you’ve gotten a glimpse at the work of an accountant who needs to bill the clients at the end of each month, you’ll be much more inclined to fill your timesheets thoroughly.&lt;/p&gt;

&lt;h2 id=&quot;a-good-process-emerges-from-the-team-wholl-apply-it&quot;&gt;A good process emerges from the team who’ll apply it&lt;/h2&gt;

&lt;p&gt;A corollary to the previous point is that a process will be even better understood if the team that ends up applying it contributes to its definition. Even if the initial need is not theirs, it’s much more empowering and deemed to succeed if the team members actually comes up with the solution by themselves. The underlying need must first be stripped from any assumed solution. It can then be well explained and discussed beforehand, so that the team can fully appreciate what it’s about, and come up with the best solution to address it in their day to day context. Sometimes the solution may even appear to be much easier and more definitive than expected.&lt;/p&gt;

&lt;p&gt;Team retrospectives are often a good opportunity to identify a friction that could be addressed by a new or updated process. It’s also ok to get inspiration from elsewhere, but beware of &lt;a href=&quot;https://business-digest.eu/are-you-guilty-of-cargo-cult-thinking-without-even-knowing-it/?lang=en&quot;&gt;cargo cult&lt;/a&gt;. Don’t parachute new tools or processes into your organisation because you’ve heard about the results they’ve achieved somewhere else. Understand what they’re trying to achieve and how to adapt them to your specific context.&lt;/p&gt;

&lt;h2 id=&quot;a-good-process-is-challengeable&quot;&gt;A good process is challengeable&lt;/h2&gt;

&lt;p&gt;A process addresses a need at a given time. This need, and its context, will very likely evolve, possibly to the point where the process is no longer the best answer to a changed situation. So every now and then, it’s always healthy to discuss it, reassess its relevance, improve it or remove it altogether. A newcomer’s arrival in the team, providing a fresh perspective and some different experience, is often a good opportunity to challenge the status quo and make sure the team still has the best fit processes with regards to their tasks.&lt;/p&gt;

&lt;p&gt;For instance, we have daily stand-ups with the whole dev team, so we can keep up with the other squad’s ongoing works, identify mutualisable effort, and ask for / offer help. This used to be done in a big conference room with the few remote workers connected to a meet, and that worked pretty well at that time. After the first Covid lockdown and related furlough, though, some of us were working part time, most of us fully remotely, and this format soon proved unadapted to this new situation. Instead of forcibly maintaining this ritual as is, we iterated on new formats until we reached the current one where we’re having synchronous fully online stand-ups twice a week, and async written stand-ups every other days. That works well now, and may change again as the situation evolves.&lt;/p&gt;

&lt;h2 id=&quot;a-good-process-is-well-tooled&quot;&gt;A good process is well tooled&lt;/h2&gt;

&lt;p&gt;It can already feel cumbersome enough to comply with some processes, so you should make sure you do everything possible to make it as seamless as possible. Automate everything you can, make sure the team members are reminded of the process when the time is right, document all useful resources, links and details in the reminder, and provide all the possible tooling that can help complete the process in an automated fashion. The automation also saves the manager or the stakeholder the painful task of manually chasing up the people involved in the process. Ideally the tooling is also flexible and accessible enough for the team to update and improve it by themselves as they get more familiar with the process.&lt;/p&gt;

&lt;p&gt;The tooling must be helpful, and thought out to support the process ; the process must not be bent to suit the tool. Most recent softwares expose APIs to ease custom tooling. As an example, we built many custom integrations between Slack, Github, Bugsnag, New Relic, Google Suite… so that most unnecessary overhead is automated, and only the human added value is required from the teams.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The key take-away here is for the team to &lt;em&gt;own&lt;/em&gt; the processes, instead of letting them own the team. Start with the need, get the people who will end up addressing this need to help, figure out a solution and its tooling together, and iterate over it whenever the necessity arises.&lt;/p&gt;
</description>
        
          <description>&lt;p&gt;You may have heard about the &lt;a href=&quot;https://intersol.ca/news/organizational-culture-and-the-5-monkeys-experiment/&quot;&gt;five monkeys experiment&lt;/a&gt;, a cautionary tale sometimes used to illustrate how we can get locked up in an organisational harness without sufficient hindsight, power or leeway to change the way things are.&lt;/p&gt;
</description>
        
        <pubDate>Thu, 03 Jun 2021 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/team-processes/</link>
        <guid isPermaLink="true">https://getaround.tech/team-processes/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>What I learned in two years at Getaround</title>
        <dc:creator>Rémy Hannequin</dc:creator>
        <description>&lt;p&gt;I joined Getaround, which was still named Drivy back then, two years ago. My previous and most extended professional experience had an internal organization that did not allow me to code full time, so many of my technical projects were actually side projects working alone.&lt;/p&gt;

&lt;p&gt;Although I could choose my topics and constraints, working alone does not always help to learn good practices and tips that make a developer efficient and aware of the different technical challenges.&lt;/p&gt;

&lt;p&gt;A few weeks ago, I took the time to understand how working in a (brilliant) team made me progress so much, not only as a Ruby developer but as a “Tech”. Here are a few topics that I learned or progressed on in the past two years.&lt;/p&gt;

&lt;h1 id=&quot;ruby-and-rails-related-apis&quot;&gt;Ruby and Rails-related APIs&lt;/h1&gt;

&lt;h2 id=&quot;tap-and-then&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tap&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;then&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;I love &lt;a href=&quot;https://rubyapi.org/3.0/o/kernel#method-i-tap&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel#tap&lt;/code&gt;&lt;/a&gt; because it lets me compose objects with conditions without having to add multiple conditional blocks.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;elements&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second_element&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;available?&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# versus&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;elements&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second_element&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;available?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can argue that this is neither necessary nor more performant, but most of us love Ruby because it makes us write concise and straightforward code. I am feeling more comfortable with less procedural code.&lt;/p&gt;

&lt;p&gt;On the same topic, we also have &lt;a href=&quot;https://rubyapi.org/3.0/o/kernel#method-i-then&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel#then&lt;/code&gt;&lt;/a&gt; which is comparable to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tap&lt;/code&gt; but returns the result of the block. This is very helpful when building conditional requests without having to add big &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; blocks:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Order&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;country: :fr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;completed?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;relation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:completed_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;relation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;last&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;then&lt;/code&gt; is just an alias for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yield_self&lt;/code&gt; introduced in Ruby 2.5.&lt;/p&gt;

&lt;h2 id=&quot;active-record-transactions&quot;&gt;Active Record Transactions&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://api.rubyonrails.org/classes/ActiveRecord/Transactions/ClassMethods.html&quot;&gt;Transactions&lt;/a&gt; enforce the integrity of the database by wrapping several SQL statements into one atomic action. I find them not only useful but sometimes even essential. In some cases, you have to ensure several changes were made successfully or to cancel them all.&lt;/p&gt;

&lt;p&gt;The following example is quite explicit about how convinient transactions are:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;transaction&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cancel!&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;available!&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;create_ticket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If ticket creation were to fail, I am sure not to leave the car available or the order canceled, since the transaction will roll back.&lt;/p&gt;

&lt;h1 id=&quot;design-patterns&quot;&gt;Design Patterns&lt;/h1&gt;

&lt;h2 id=&quot;command-pattern&quot;&gt;Command pattern&lt;/h2&gt;

&lt;p&gt;A lot of articles exist about this topic on the web. We even wrote about it a while ago in our &lt;a href=&quot;https://getaround.tech/code_simplicity_command_pattern/&quot;&gt;Code Simplicity series&lt;/a&gt; by Nicolas.&lt;/p&gt;

&lt;p&gt;The command pattern is a great way to extract business logic from controllers or even models, stay tied to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Single-responsibility_principle&quot;&gt;Single-responsibility principle&lt;/a&gt; and share a common API for service objects.&lt;/p&gt;

&lt;p&gt;Although as a pattern, this one must be used carefully because it cannot resolve every situation. Jason Swett has even &lt;a href=&quot;https://www.codewithjason.com/code-without-service-objects/&quot;&gt;an interesting point of view&lt;/a&gt; about using this pattern in the Rails community.&lt;/p&gt;

&lt;h2 id=&quot;form-objects-pattern&quot;&gt;Form objects pattern&lt;/h2&gt;

&lt;p&gt;A form object is a simple class that handles logic from a form submission. This class can be associated with the command pattern to share a common API with multiple form objects in your app.&lt;/p&gt;

&lt;p&gt;Not only does this pattern allow you to extract business code from the controller and make it more testable, but it is also a great way to have different validations for the same model. You cannot always share a common form or even common validations depending on your action, for instance, when handling a user account. The rules applied to form parameters in a user registration are not the same as an account update.&lt;/p&gt;

&lt;p&gt;Take the terms of service for instance. You probably want to ensure a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terms_of_service&lt;/code&gt; parameter is present and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; when signing up, but this requirement is unnecessary for a user updating her account. Having multiple form objects depending on the feature is a great help for this.&lt;/p&gt;

&lt;p&gt;Jean also &lt;a href=&quot;https://getaround.tech/sanitize-your-attributes/&quot;&gt;wrote about it&lt;/a&gt; on our blog a few years ago.&lt;/p&gt;

&lt;h2 id=&quot;facade-pattern&quot;&gt;Facade pattern&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://refactoring.guru/design-patterns/facade/ruby/example&quot;&gt;Facade pattern&lt;/a&gt; is proper when (but not only) decoupling business code from third-party code.&lt;/p&gt;

&lt;p&gt;Let’s take the example of a third-party web &lt;abbr title=&quot;Application Programming Interface&quot;&gt;API&lt;/abbr&gt; prividing its own gem.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GreatApi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Using it directly sometimes can be less maintainable as you don’t own its public API and are vulnerable to changes. What if you need to update this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;great_api&lt;/code&gt; gem for security reasons, but the gem changed its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Car::fetch&lt;/code&gt; method to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vehicle::get&lt;/code&gt;? You would need to change every occurrence of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GreatApi::Car::fetch&lt;/code&gt; in your business code to handle this breaking change.&lt;/p&gt;

&lt;p&gt;Building a gateway around the gem ensures you to own it and encapsulate third-party code in one single place.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Getaround::Gateway::GreatApi&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;GreatApi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Getaround&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Gateway&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GreatApi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get_car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;tell-dont-ask&quot;&gt;Tell, don’t ask&lt;/h2&gt;

&lt;p&gt;I try to remember the “Tell, don’t ask” principle when designing a brand new object to keep in mind what &lt;abbr title=&quot;Object-oriented programming&quot;&gt;OOP&lt;/abbr&gt; is about: designing objects being able to interact. Therefore an object should describe itself its behavior rather than having a program asking it what it is composed of to predict its behavior.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://thoughtbot.com/blog/tell-dont-ask&quot;&gt;This example of Thoughbot’s blog&lt;/a&gt; is quite explicit:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Instead of asking the system monitor for temperature&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# in order to trigger an alarm&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check_for_overheating&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system_monitor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;system_monitor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;temperature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;system_monitor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sound_alarms&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Let it internally handle the rules (attributes)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# and trigger the alarm (behaviour)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SystemMonitor&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check_for_overheating&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temperature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sound_alarms&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;system_monitor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;check_for_overheating&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;gems&quot;&gt;Gems&lt;/h1&gt;

&lt;h2 id=&quot;delayed-deprecations&quot;&gt;Delayed deprecations&lt;/h2&gt;

&lt;p&gt;Sometimes we want to ship fast, but we still want to ship well. There are some cases where we want to release code that is meant to be temporary, or to be reminded to monitor some behaviors once a feature has been live for a few weeks.&lt;/p&gt;

&lt;p&gt;Temporary code is often associated with forgotten code and then technical dept, if not bugs. But &lt;a href=&quot;https://github.com/drivy/delayed_deprecation&quot;&gt;delayed deprecations&lt;/a&gt; are a great way to keep a codebase clean month after month.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;DelayedDeprecation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Only for April fools day&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;reconsider_after: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2021&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;owner: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Alice&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Deprecations trigger notifications to their owners for both Ruby and JavaScript code. This can be useful to remind you to clean up a piece of code.&lt;/p&gt;

&lt;p&gt;I enjoy using them because it helps me staying efficient while maintaining a clean codebase.&lt;/p&gt;

&lt;h2 id=&quot;feature-flipper&quot;&gt;Feature flipper&lt;/h2&gt;

&lt;p&gt;Another game-changer for our velocity and confidence when shipping new features is the &lt;a href=&quot;https://github.com/jnunemaker/flipper&quot;&gt;feature flipper&lt;/a&gt;. It enables us to make some features available for a percentage of users or a percentage of time.&lt;/p&gt;

&lt;p&gt;This is particularly useful to test changes and measure their impact without risking changing habits for all our users. If we need to urgently cancel a feature - because Murphy’s Law is always lurking - we can do so without deploying an urgent fix to hide it.&lt;/p&gt;

&lt;p&gt;It doesn’t prevent us from being cautious and striving to ship high-quality tested code. Still, we are far more confident in ourselves when we know we can quickly handle unpredicted behaviors.&lt;/p&gt;

&lt;h2 id=&quot;timecop&quot;&gt;Timecop&lt;/h2&gt;

&lt;p&gt;Quite often, we have to test behaviors in the past or the future. Sometimes we also want to test a feature without time variation, for example, to avoid &lt;a href=&quot;https://engineering.atspotify.com/2019/11/18/test-flakiness-methods-for-identifying-and-dealing-with-flaky-tests/&quot;&gt;test flakiness&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/travisjeffery/timecop&quot;&gt;Timecop&lt;/a&gt; is the perfect tool for this with a simple and comprehensive API.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when rental is ended for a month&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;still respects some fundamentals rules&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Timecop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;freeze&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when booking failed 5 minutes ago&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Timecop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;travel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;minutes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ago&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;booking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;failure!&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;created a notification&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;good-practices&quot;&gt;Good practices&lt;/h1&gt;

&lt;h2 id=&quot;zero-downtime-migrations&quot;&gt;Zero downtime migrations&lt;/h2&gt;

&lt;p&gt;Zero downtime migrations are a pretty common thing, but to be honest, I never had not the chance to work with this process before working at Getaround.&lt;/p&gt;

&lt;p&gt;The rule of thumb is to ensure any migration being deployed is compatible with the code already running. For instance, you cannot deploy at once a migration renaming a table’s column and the code handling the new column name. There is a very high chance that someone will run the app while the migrations haven’t been run yet and the column name doesn’t refer to anything yet.&lt;/p&gt;

&lt;p&gt;Simple caution must be taken with multiple deployments such as:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Add a new column with the new name&lt;/li&gt;
  &lt;li&gt;Ensure both old and new columns are equally filled&lt;/li&gt;
  &lt;li&gt;Back-fill data from the old column to the new one&lt;/li&gt;
  &lt;li&gt;Stop using and referring to the old column&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://api.rubyonrails.org/classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-ignored_columns-3D&quot;&gt;Ignore the old column&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Remove the old column&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;specs-to-cover-future-changes&quot;&gt;Specs to cover future changes&lt;/h2&gt;

&lt;p&gt;Writing decoupled and reusable code is great. Ensuring this code will be properly used by others is even better. When I write code that can be shared or with variable data, I try to make sure nobody can add use cases that would break my code.&lt;/p&gt;

&lt;p&gt;Let’s take an example, I am adding a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state&lt;/code&gt; attribute to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Car&lt;/code&gt; and I want to localize each state.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;na&quot;&gt;en&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;activerecord&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;states&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;active&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Active&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;deactivated&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Not available&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is great, now I am able to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I18n.t(&quot;activerecord.attributes.car.states.#{car.state}&quot;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But what if two months later, another developer adds a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pending&lt;/code&gt; state? It would break when somebody runs my code with a pending car, and I would only be warned about it when facing the bug itself.&lt;/p&gt;

&lt;p&gt;To avoid this situation, when adding the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state&lt;/code&gt; attribute, I also add specs to ensure all states have an associated translation:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;states&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;has an associated translation for &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;I18n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;activerecord.attributes.car.states.&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;not_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raise_error&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;rspec-mocking&quot;&gt;RSpec mocking&lt;/h2&gt;

&lt;p&gt;Some people love it, some people don’t; in either case, we have to admit RSpec mocking is quite powerful. My perspective on the subject is to avoid mocking in feature specs as we want to stay as close as possible to a real-world example. When I have too much mocking to do to test a method, I probably need to think about the method/class dependencies.&lt;/p&gt;

&lt;p&gt;Anyway, if you decide to use mocking, RSpec is a sweet candy. It helps you write difficult test cases with complex dependencies without instantiating tons of real objects and data.&lt;/p&gt;

&lt;p&gt;Let’s take an example where I need an object to return a particular value. But this method has complex rules to return this value:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pro?&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;validated?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bank_account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;allowed?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;country&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;enables_pro?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;electric_vehicles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;any?&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# &amp;amp;&amp;amp; ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It is expensive to write and compute all requirements for this method, and I may even want it to return different results. I don’t want to be validating this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pro?&lt;/code&gt; method neither; this is not the purpose of my test. With mocking, I can &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;allow&lt;/code&gt; this object to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;receive&lt;/code&gt; this method and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return&lt;/code&gt; the value I need for my test, instead of the value it would have returned with its default state.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when owner is pro&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;allow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:pro?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;and_return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once again, let’s not forget that this powerful tool must be used cautiously; if an object is hard to unit test, maybe it is too much coupled with another object, or the abstraction is wrong.&lt;/p&gt;

&lt;h2 id=&quot;auto-document-a-base-class-with-notimplementederror&quot;&gt;Auto document a base class with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NotImplementedError&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Finally, ensuring the next developer, who could be yourself 6 months from now, is using your base class properly. When creating a base class meant for inheritance, you may need that its children implement a method.&lt;/p&gt;

&lt;p&gt;Using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NotImplementedError&lt;/code&gt; standard error is a good way to ensure the method is implemented and to document it as necessary for child instances.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;engine&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NotImplementedError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#engine must be implemented on Car's children instances&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UrbanCar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Car&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;UrbanCar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;engine&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; NotImplementedError is raised&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;I could add many more topics, even some simpler ones. With these tips, I am more confident now than I was 2 years ago, and I am looking forward to learning more in the years to come.&lt;/p&gt;

&lt;p&gt;Of course, some may seem common sense to you, or even not necessary. I may also have forgotten good practices that look like a &lt;em&gt;must have&lt;/em&gt; to you. If so, please feel free to reach us and debate.&lt;/p&gt;
</description>
        
          <description>&lt;p&gt;I joined Getaround, which was still named Drivy back then, two years ago. My previous and most extended professional experience had an internal organization that did not allow me to code full time, so many of my technical projects were actually side projects working alone.&lt;/p&gt;
</description>
        
        <pubDate>Tue, 20 Apr 2021 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/what-i-learnt-in-two-years-at-getaround/</link>
        <guid isPermaLink="true">https://getaround.tech/what-i-learnt-in-two-years-at-getaround/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>How we handle incidents at Getaround</title>
        <dc:creator>Miguel Torres</dc:creator>
        <description>&lt;p&gt;At Getaround, like at any other company, we sometimes experience incidents that negatively affect our product.&lt;/p&gt;

&lt;p&gt;A couple of weeks ago from the time of writing, I released a feature that contained a seemingly harmless SQL query that returned the total balance of a user. This calculation was previously made on the fly with Ruby every time a user loaded a page where this was needed. This was particularly problematic with owners that had many cars and the query was slow to load, sometimes causing timeouts. So the commit that I had deployed was meant to counter this problem by using a table that was built exactly for this purpose. Instead, it brought the CPU utilisation to go over 90% and slowed down all database queries, causing timeouts all over the site&lt;/p&gt;

&lt;h2 id=&quot;finding-out-and-responding&quot;&gt;Finding out and responding&lt;/h2&gt;

&lt;p&gt;We use &lt;a href=&quot;https://grafana.com/&quot;&gt;Grafana&lt;/a&gt; for monitoring, and we use a Slack webhook integration that let us know when certain events happen. In this case, 13 minutes after my code was live, we get a notification on Slack on a dedicated channel letting us know that there is a problem&lt;/p&gt;

&lt;figure&gt;
  &lt;img alt=&quot;ALT&quot; src=&quot;/assets/posts/2021-04-05-incident-handling-at-getaround/incident-slack-alert.png&quot; /&gt;
  &lt;figcaption&gt;
    Automated Slack alert to let the team know there is a problem
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;After looking at the CPU utilization graph and some further investigation, my commit is rolled back.&lt;/p&gt;

&lt;figure&gt;
  &lt;img alt=&quot;ALT&quot; src=&quot;/assets/posts/2021-04-05-incident-handling-at-getaround/incident-cpu-graph.png&quot; /&gt;
  &lt;figcaption&gt;
    Red dotted line just before 15:30 indicates the faulty deploy
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Despite the rollback, MySQL was still busy running the existing queries and the CPU utilization did not diminish, but after a couple of back and forth, and communicating with the rest of the company what was going on in the perfectly named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#war-room&lt;/code&gt; channel in Slack, the issue was under control in less than an hour 🎉&lt;/p&gt;

&lt;figure&gt;
  &lt;img style=&quot;height: 20em;&quot; alt=&quot;ALT&quot; src=&quot;/assets/posts/2021-04-05-incident-handling-at-getaround/incident-cpu-graph-2.png&quot; /&gt;
  &lt;figcaption&gt;
    Red dotted line just before 15:30 indicates the faulty deploy
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;after-the-incident&quot;&gt;After the incident&lt;/h3&gt;

&lt;p&gt;At Getaround we keep a record of all the technical incidents that have happened, and each entry on the list contains a couple of things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A &lt;strong&gt;description&lt;/strong&gt; of the problem&lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;timeline&lt;/strong&gt; of events&lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;root cause&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is also called a &lt;a href=&quot;https://www.pagerduty.com/resources/learn/incident-postmortem/&quot;&gt;Postmortem&lt;/a&gt; and it is an important step after an incident. The goal being to be able to share knowledge with your colleagues and try to prevent it from happening in the future as much as we can, all while acknowledging  that incident are a normal part of software development. It is essential that a &lt;a href=&quot;https://codeascraft.com/2012/05/22/blameless-postmortems/&quot;&gt;blameless culture&lt;/a&gt; exists in the company in order to be able for everyone to write in detail freely about what went wrong so we can learn from our mistakes. The Post mortem for this incident in particular would look similar to this:&lt;/p&gt;

&lt;h2 id=&quot;post-mortem-example&quot;&gt;Post Mortem Example&lt;/h2&gt;

&lt;h2 id=&quot;timeline&quot;&gt;Timeline&lt;/h2&gt;

&lt;p&gt;15:24 - A release was made containing the commit which included the slow query&lt;/p&gt;

&lt;p&gt;15:37 - Team was alerted on Slack about about a high CPU load&lt;/p&gt;

&lt;p&gt;15:44 - The team identified the issue (high CPU load) to be related with the release at 15:24&lt;/p&gt;

&lt;p&gt;15:46 - Commit rolled back&lt;/p&gt;

&lt;p&gt;15:52 - After noticing that the CPU usage does not decrease, even after the rollback, it is identified that the db is still busy running the queries that it had enqueued&lt;/p&gt;

&lt;p&gt;16:00 - Incident opened in &lt;a href=&quot;https://newrelic.com/&quot;&gt;New Relic&lt;/a&gt; (monitoring tool used at Getaround)&lt;/p&gt;

&lt;p&gt;16:15 - Command launched to kill lingering db queries&lt;/p&gt;

&lt;p&gt;16:23 - CPU load back to normal&lt;/p&gt;

&lt;p&gt;23:48 - Incident on New Relic closed&lt;/p&gt;

&lt;h2 id=&quot;impact&quot;&gt;&lt;strong&gt;Impact&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;User searches started timing out and there was an uptick of incidents on &lt;a href=&quot;https://www.bugsnag.com/&quot;&gt;Bugsnag&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-caused-the-incident&quot;&gt;&lt;strong&gt;What caused the incident&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;The combination of an underperforming query and the fact that it was a query used across many different placed caused the overload.&lt;/p&gt;

&lt;p&gt;The offending code was:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Balance&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;entity_type: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'User'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;target_type: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'User'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;entity_id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:country&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:entity_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The problem was is not obvious at first, but after trying to understand &lt;a href=&quot;https://www.exoscale.com/syslog/explaining-mysql-queries/&quot;&gt;what the query was doing with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EXPLAIN&lt;/code&gt;&lt;/a&gt; it turns out that the query was not fully taking advantage of all of the indexes that we had in place, which means it scanned way more columns than it needed to. After the query was optimised to take advantage of the indexes, the number of examined rows returned by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EXPLAIN&lt;/code&gt; came down from 3468 to 4. So… yeah, big improvement.&lt;/p&gt;

&lt;p&gt;Although we are able to objectively point towards the code that caused the incident, there are also other, more subtle factors that contributed for this code to be overlooked and committed. For example:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;This query is only used in the back office used only by administrators, where the volume is not as high as production and performance is not as big of a concern as it can be for other user facing code&lt;/li&gt;
  &lt;li&gt;The table used (&lt;strong&gt;Balances&lt;/strong&gt;) was born as an attempt to speed up balance calculations, since previously balances were calculated every single time, and it was assumed that the fact that we were replacing a long ruby calculation with a SQL query would inherently be a performance boost&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;mitigation&quot;&gt;&lt;strong&gt;Mitigation&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;The rollback of the offending code caused the queries to stop enqueuing themselves on an already stressed database and the killing of lingering processes managed to solve the incident completely. After finding the ids of the processes to kill, the following command was executed:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; ~/Downloads/ids-to-kill | &lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; a&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt; |  mysql &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt; &amp;lt;USER&amp;gt;  &lt;span class=&quot;nt&quot;&gt;--host&lt;/span&gt; &amp;lt;HOST&amp;gt; &lt;span class=&quot;nt&quot;&gt;--password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;PASSWORD&amp;gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;permanent-solution&quot;&gt;&lt;strong&gt;Permanent solution&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;After finding out that using a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;where&lt;/code&gt; condition for entities was an overkill, the query was rewritten to take advantage on the existing indexes and a promising indicator that it was a good solution was that the rows to be examined dropped from 3468 to only 4&lt;/p&gt;

&lt;h2 id=&quot;lessons-learned-and-possible-action-items&quot;&gt;&lt;strong&gt;Lessons learned and possible action items&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Even for “low volume” queries (i.e. queries used only in admin), it is very important to make sure that queries are performant&lt;/li&gt;
  &lt;li&gt;Tweak the internal Developer’s Checklist and/or the PR draft document to include soft reminders to think about performance. (For example: &lt;em&gt;Running explain to new queries and scan through the output&lt;/em&gt; or &lt;em&gt;Making sure that the queries used can leverage on existing indexes or create new ones if they don’t exist and will be heavily read&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;links-and-images&quot;&gt;&lt;strong&gt;Links and images&lt;/strong&gt;&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;In the original Post-Mortem I added the links to relevant places like the Slack, or the New Relic incident link, but in this public version I’ll omit some of them 😬&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure&gt;
  &lt;img style=&quot;height: 20em;&quot; alt=&quot;ALT&quot; src=&quot;/assets/posts/2021-04-05-incident-handling-at-getaround/incident-cpu-graph-3.png&quot; /&gt;
  &lt;figcaption&gt;
    First dotted line just before 15:30 indicates the faulty commit deploy and the one at 15:50 is the rollback deploy
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
  &lt;img style=&quot;height: 20em;&quot; alt=&quot;ALT&quot; src=&quot;/assets/posts/2021-04-05-incident-handling-at-getaround/incident-search-controller-response-time.jpeg&quot; /&gt;
  &lt;figcaption&gt;
    Search Controller response time during the incident
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;takeaways&quot;&gt;Takeaways&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Postmortems&lt;/strong&gt; are a great practice that help make the best out of bad situations when they happen, since incidents are not a matter of wether they will happen, but of when they will happen, and the best way to minimize the potential negative impact is for the team to be aware of potential pitfalls, this requires that everyone can feel free to go into detail about how their actions led to an undesirable outcome.&lt;/p&gt;
</description>
        
          <description>&lt;p&gt;At Getaround, like at any other company, we sometimes experience incidents that negatively affect our product.&lt;/p&gt;
</description>
        
        <pubDate>Mon, 05 Apr 2021 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/incident-handling-at-getaround/</link>
        <guid isPermaLink="true">https://getaround.tech/incident-handling-at-getaround/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>How we ran our last hack day</title>
        <dc:creator>Michael Bensoussan</dc:creator>
        <description>&lt;p&gt;For the last few years, we did about one hackday a year where the whole team gathered together in Paris from different areas of France.&lt;/p&gt;

&lt;p&gt;For one day, participants were given creative freedom to create a demo-able, team-based Getaround-related project. People try new technologies, explore new ideas, get coffee together and we all end up debriefing with a cold beverage and a cheese board 🧀🍻.&lt;/p&gt;

&lt;figure&gt;
   &lt;img alt=&quot;hackday&quot; src=&quot;/assets/posts/hack-day/team.jpg&quot; /&gt;
  &lt;figcaption&gt;
    &lt;a href=&quot;/drivy-hack-day/&quot;&gt;Writeup&lt;/a&gt; of our first hackday.
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Despite the pandemic and the fact that we’re currently all working remotely, we didn’t see any reason to miss out on the fun. Thus, the first fully-remote Hackday was born!&lt;/p&gt;

&lt;h3 id=&quot;the-organization&quot;&gt;The organization&lt;/h3&gt;

&lt;p&gt;A day is short and to come up with something meaningful,  you need some organization.&lt;br /&gt;
When I say meaningful, I don’t mean some &lt;em&gt;code&lt;/em&gt; you could put in production at the end of the day but really anything that would make this day different from the others; work with a coworker you never work with and learn he/she likes cats, discover and play with a new technology or plant a seed for a future feature.&lt;/p&gt;

&lt;p&gt;So, to make sure the day is used to its fullest the objective was mostly to have groups and ideas ready for d-day.&lt;br /&gt;
One month before the event, we created a slack channel for people to pitch ideas and find their crew.&lt;/p&gt;

&lt;p&gt;We also had a spreadsheet accessible to the whole company - not only people participating - to submit ideas.&lt;/p&gt;

&lt;h3 id=&quot;the-format&quot;&gt;The format&lt;/h3&gt;

&lt;p&gt;We had 32 people participating from the tech and data teams split into 12 groups of 2 to 5 people.&lt;/p&gt;

&lt;p&gt;We met in the morning on a Google Meet and, while people finished their breakfast, did a small round table to explain what we’d be working on during the day.&lt;/p&gt;

&lt;p&gt;People then gathered in their own Meet to work together during the day. There also was a global “breakroom” to chitchat during breaks.&lt;/p&gt;

&lt;p&gt;Later in the evening, we had a virtual beer to debrief the day and chill out 🍻.&lt;/p&gt;

&lt;h3 id=&quot;the-results&quot;&gt;The results&lt;/h3&gt;

&lt;p&gt;Some projects warrant a blog post in their own right, but in the meantime here is a quick overview and some demos.&lt;/p&gt;

&lt;h4 id=&quot;-ios-app-clip&quot;&gt;📱 iOS App Clip&lt;/h4&gt;

&lt;p&gt;Jean-Élie created a proof-of-concept allowing anyone to scan QR codes off of in-street-cars and book them instantly 😍&lt;br /&gt;
He created an &lt;a href=&quot;https://developer.apple.com/app-clips/&quot;&gt;iOS App Clip&lt;/a&gt; so that users don’t need to download the full aplication.&lt;/p&gt;

&lt;figure&gt;
  &lt;img alt=&quot;iOS App Clip&quot; src=&quot;/assets/img/app_clip.gif&quot; /&gt;
&lt;/figure&gt;

&lt;h4 id=&quot;-android-auto-companion-application&quot;&gt;🚗 Android Auto Companion application&lt;/h4&gt;

&lt;p&gt;Quentin created an &lt;a href=&quot;https://www.android.com/auto/&quot;&gt;Android Auto companion&lt;/a&gt; displaying trip information (return date and place, kms &amp;amp; fuel at checkin, assistance, …), navigation and notifications (missing check-in information, fuel before return reminder, …).&lt;/p&gt;

&lt;figure&gt;
  &lt;img alt=&quot;Android auto companion&quot; src=&quot;/assets/img/android_auto.gif&quot; /&gt;
&lt;/figure&gt;

&lt;h4 id=&quot;-cobalt-web-ide&quot;&gt;🖼 Cobalt Web IDE&lt;/h4&gt;

&lt;p&gt;Romain and Thibaud worked on a no-code React app connected to Android to build a full Android native page based on our &lt;a href=&quot;https://getaround.tech/mobile-api-driven/&quot;&gt;API Driven UI&lt;/a&gt; and our &lt;a href=&quot;https://cutt.ly/cobalt-eu&quot;&gt;design system&lt;/a&gt; ✨&lt;/p&gt;

&lt;figure&gt;
  &lt;img alt=&quot;Cobalt Design System&quot; src=&quot;/assets/img/cobalt_ide.gif&quot; /&gt;
&lt;/figure&gt;

&lt;h4 id=&quot;️-green-search&quot;&gt;♻️ “Green Search”&lt;/h4&gt;

&lt;p&gt;Emily, Alice, Rémy, Benjamin, Hugo and Camille (😅) built a car ecoscore and implemented it in our search pages to direct demand towards greener supply.&lt;/p&gt;

&lt;p&gt;Here’s the full presentation:&lt;/p&gt;

&lt;center&gt;
  &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/qgcWsCZZVgY&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/center&gt;

&lt;h4 id=&quot;-type-signatures-with-ruby&quot;&gt;💎 Type signatures with Ruby&lt;/h4&gt;

&lt;p&gt;Miguel, Howard and Eric spent the day exploring type signatures with Ruby.&lt;br /&gt;
They played with &lt;a href=&quot;https://sorbet.org/&quot;&gt;Sorbet&lt;/a&gt; and &lt;a href=&quot;https://github.com/ruby/rbs&quot;&gt;rbs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here’s the full presentation:&lt;/p&gt;

&lt;center&gt;
  &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/TYOMHynPIwk&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/center&gt;

&lt;p&gt;But also, all these other projects:&lt;/p&gt;

&lt;p&gt;🧬 Use of a &lt;a href=&quot;https://dgraph.io/&quot;&gt;graph database&lt;/a&gt; dgraph to detect risky profiles&lt;br /&gt;
👀 Use of &lt;a href=&quot;https://fast.ai/&quot;&gt;computer vision&lt;/a&gt; to autofill car listings&lt;br /&gt;
🤑 Create a car listing in the &lt;a href=&quot;https://web3js.readthedocs.io/en/v1.3.4/&quot;&gt;Blockchain&lt;/a&gt; with Ethereum&lt;br /&gt;
🍕 Foodaround, an app to share recipes between employees&lt;br /&gt;
💬 A notification center for our Android &amp;amp; iOS apps&lt;br /&gt;
🐦 A system to analyse, categorise and apply sentiment analysis on Twitter messages&lt;br /&gt;
🔬 NLP on user-generated content; categorize reviews and support tickets, and recommend macros to answer our clients&lt;/p&gt;

&lt;figure&gt;
  &lt;img alt=&quot;Hackday Slides&quot; src=&quot;/assets/img/hackday-slides.jpg&quot; /&gt;
  &lt;figcaption&gt;
    Slides from different projects presented at our Demo Day
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Skills were sharpened, bonds were strengthened, beers were enjoyed - it was a blast!&lt;/p&gt;

&lt;p&gt;Thanks for reading 🍻&lt;/p&gt;

&lt;figure&gt;
  &lt;img alt=&quot;hackday&quot; src=&quot;/assets/img/hackday_beers.jpg&quot; /&gt;
  &lt;figcaption&gt;
    🍻
  &lt;/figcaption&gt;
&lt;/figure&gt;
</description>
        
          <description>&lt;p&gt;For the last few years, we did about one hackday a year where the whole team gathered together in Paris from different areas of France.&lt;/p&gt;
</description>
        
        <pubDate>Wed, 24 Mar 2021 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/hackday-4-full-remote/</link>
        <guid isPermaLink="true">https://getaround.tech/hackday-4-full-remote/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Predicting slack emoji reactions with machine learning</title>
        <dc:creator>Adrien Siami</dc:creator>
        <description>&lt;p&gt;Every year at getaround, we (The engineering team) take part in what we call a &lt;a href=&quot;/drivy-hack-day/&quot;&gt;“Hack Day”&lt;/a&gt;.We can work on a subject of our choice for a day, in a team of developers.&lt;/p&gt;

&lt;p&gt;We can work on pretty much anything we want as long as it is remotely related to Getaround. It could be exciting beta features, or tooling to make our lives better. It does not necessarily needs to be shippable.&lt;/p&gt;

&lt;p&gt;This time, I wanted to work on something both fun and challenging.
I always wanted to look into machine learning but never got the chance, so it didn’t took me long to find a fun topic to work on.&lt;/p&gt;

&lt;p&gt;As a slack emoji reactions power user, I thought building a bot that could react on slack messages with a relevant emoji would be very &lt;del&gt;useful&lt;/del&gt; funny.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: This approach is most likely far from good, this is the result of 3 full-stack engineers working for 8 hours on a topic they didn’t know anything about beforehand.&lt;/p&gt;

&lt;h1 id=&quot;what-are-we-building&quot;&gt;What are we building?&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;In the contextual menu of a message, we want a new action to trigger an emoji reaction.&lt;/li&gt;
  &lt;li&gt;The emoji reaction has to be relevant to the message being reacted on.&lt;/li&gt;
  &lt;li&gt;To build relevance, we are going to use the existing data of emoji reactions and messages by our team, into a machine learning model.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;what-tools-are-we-going-to-use&quot;&gt;What tools are we going to use?&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Ruby, our favorite swiss knife.&lt;/li&gt;
  &lt;li&gt;A neural network, which after a bit of research seemed to be an easy and “good enough” solution.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tangledpath/ruby-fann&quot;&gt;ruby-fann&lt;/a&gt; to build the neural network in ruby&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/brenes/stopwords-filter&quot;&gt;stopwords-filter&lt;/a&gt; to remove stop words from the sentences&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/diasks2/pragmatic_tokenizer&quot;&gt;pragmatic_tokenizer&lt;/a&gt; to turn our sentences into a list of words, without punctuation.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/aurelian/ruby-stemmer&quot;&gt;ruby-stemmer&lt;/a&gt; to find the “&lt;a href=&quot;https://en.wikipedia.org/wiki/Word_stem&quot;&gt;stem&lt;/a&gt;” of the words in our sentences&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;neural-networks-crash-course&quot;&gt;Neural networks crash course&lt;/h1&gt;

&lt;p&gt;The following video helped us a lot to grasp the concepts of neural networks :&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/GvQwE2OhL8I&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;What I retained of this video, which may not be 100% correct but was enough to build this project, is as follows :&lt;/p&gt;

&lt;p&gt;A neural network makes use of a graph data structure to predict a different set of outputs, given a different set of inputs.You have to choose the number of inputs (only rational numbers) and outputs (between 0 and 1).Those are the input layer and output layer, there are also one or more hidden layers in the middle, where the “magic happens”.&lt;/p&gt;

&lt;p&gt;My rough understanding is that when you train a neural network, you basically try to find mathematical correlations between the input and the output, you kind of bruteforce coefficients which will transform your inputs into your outputs. There is also things such as the activation function that are taken into account.&lt;/p&gt;

&lt;p&gt;Choosing the good number of inputs and outputs is primmordial, as well as number of hidden layers, and depends a lot on the shape of your data and what you expect to get from it.&lt;/p&gt;

&lt;p&gt;For our project, as inputs we have a list of words, and as output we want one emoji.&lt;/p&gt;

&lt;p&gt;Since the number of inputs and outputs has to be fixed, here is what we decided to do :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We took the top 200 most used stems and used them as input, the value will be the number of times they appeared in the message.&lt;/li&gt;
  &lt;li&gt;We took the top 50 most used emoji reactions, the expected output will either be 1 (the emoji was used as a reaction) or 0 (the emoji was not used as a reaction).&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;importing-the-data-from-slack&quot;&gt;Importing the data from slack&lt;/h1&gt;

&lt;p&gt;First step is to get enough data to work with, we used the &lt;a href=&quot;https://github.com/slack-ruby/slack-ruby-client&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;slack-ruby-client&lt;/code&gt;&lt;/a&gt; gem to fetch messages on a selected list of channels, we only kept the messages with emoji reactions.&lt;/p&gt;

&lt;p&gt;We stored the message content and the emoji reactions in a JSON file.&lt;/p&gt;

&lt;h1 id=&quot;training-the-neural-network&quot;&gt;Training the neural network&lt;/h1&gt;

&lt;p&gt;The interesting code is &lt;a href=&quot;https://gist.github.com/Intrepidd/9d6be0882d73e13dfb83240fd6ba0190&quot;&gt;available here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One important thing to do when working with machine learning is to control how well your model is doing. An usual approach is to keep a certain amount of your data for testing purposes. That’s what we do in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;train.rake&lt;/code&gt;. We keep 10% of the data apart in another file, and we don’t use this data for training. Later on, we can try to apply our model on this data and see if the results make sense.&lt;/p&gt;

&lt;p&gt;To be quite honest, we didn’t obtain a very good result statistically speaking. However, the emoji predictions were quite hilarious, so we decided to stick with it.&lt;/p&gt;

&lt;h1 id=&quot;plug-it-into-slack&quot;&gt;Plug it into slack&lt;/h1&gt;

&lt;p&gt;Then it’s just a matter of plumbing, we created a slack app and made use of &lt;a href=&quot;https://api.slack.com/interactivity/shortcuts&quot;&gt;message shortcuts&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Each slack message now has a link in the contextual menu. When clicking on this link, a request is sent to our app from slack, with a payload containing informations about the clicked message. Then, we clean the message with the same process we used for training, and we run it throught the machine learning model.&lt;/p&gt;

&lt;p&gt;Finally, we add a reaction to the message, from our bot API key.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dzwonsemrish7.cloudfront.net/items/0M1h2m1A1s1Q3Y350o2S/Screen%20Recording%202020-03-20%20at%2002.47%20PM.gif?v=dae6de94&quot; alt=&quot;Emoji predictor demo&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Writing this bot was very fun and informative, and made us realize that machine learning concepts, although obscure from the uninformed eye, can be grasped pretty quickly.&lt;/p&gt;

&lt;p&gt;If you know about machine learning, I’d love to know what would be the best way to have done that, feel free to leave a comment in &lt;a href=&quot;https://gist.github.com/Intrepidd/9d6be0882d73e13dfb83240fd6ba0190&quot;&gt;the gist I shared&lt;/a&gt;.&lt;/p&gt;
</description>
        
          <description>&lt;p&gt;Every year at getaround, we (The engineering team) take part in what we call a &lt;a href=&quot;/drivy-hack-day/&quot;&gt;“Hack Day”&lt;/a&gt;.We can work on a subject of our choice for a day, in a team of developers.&lt;/p&gt;
</description>
        
        <pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/emoji-machine-learning/</link>
        <guid isPermaLink="true">https://getaround.tech/emoji-machine-learning/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Bookkeeping</title>
        <dc:creator>Nicolas Zermati</dc:creator>
        <description>&lt;p&gt;All companies handle money &lt;strong&gt;transactions&lt;/strong&gt;. The law enforces companies to maintain and
publish records of those transactions. Those records are called &lt;strong&gt;books&lt;/strong&gt; and the act
of maintaining them is called &lt;strong&gt;bookkeeping&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;At Getaround, our business-model generates a lot of transactions. We receive and route
customer’s money to various partners. For that part, we decided to build digital books
in our platform in order to do its part in the company’s bookkeeping.&lt;/p&gt;

&lt;p&gt;In this article, I’ll tell you about bookkeeping techniques from the 15th century and
how close they are to programming concepts we use everyday.&lt;/p&gt;

&lt;h2 id=&quot;double-entry-bookkeeping&quot;&gt;Double-entry-bookkeeping&lt;/h2&gt;

&lt;p&gt;This technique was formalized in the 15th century by Luca Pacioli. It has been used way
before that though. Pacioli’s work has been translated by Jeremy Cripps in an &lt;a href=&quot;https://jeremycripps.com/Summa2.pdf&quot;&gt;online
available text&lt;/a&gt;. In a nutshell, it is a simple, powerful, flexible, and
mature accounting system. It describes various documents, called &lt;strong&gt;books&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the inventory,&lt;/li&gt;
  &lt;li&gt;the memorandum,&lt;/li&gt;
  &lt;li&gt;the journal, and&lt;/li&gt;
  &lt;li&gt;the ledger.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those documents provides guidelines to record and control economic activities.&lt;/p&gt;

&lt;p&gt;I’ll skip the inventory and introduce only the last three books.&lt;/p&gt;

&lt;h3 id=&quot;memorandum&quot;&gt;Memorandum&lt;/h3&gt;

&lt;p&gt;This book keeps track of &lt;strong&gt;business operations&lt;/strong&gt; in a chronological order.
Each entry includes &lt;strong&gt;all the details&lt;/strong&gt; related to the operation:
« The who, what, why, how, when, and where need to be answered ».&lt;/p&gt;

&lt;p&gt;An entry, page &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;53&lt;/code&gt; of the Memorandum, could look like this:&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;/assets/posts/2020-03-01-double-entry-bookkeeping/memorandum.svg&quot; alt=&quot;split ledger view&quot; /&gt;&lt;/center&gt;

&lt;p&gt;You can see three entries:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;John Doe paying for an upcoming rental,&lt;/li&gt;
  &lt;li&gt;Nicolas Z. being paid for this rental when it is done, and&lt;/li&gt;
  &lt;li&gt;Insurance being paid commissions for a bunch of rentals.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each entry match a different business operation.&lt;/p&gt;

&lt;p&gt;Because merchants were not always around, their employees would write those entries in the
Memorandum. The knowledge from the Memorandum will be transferred to the Journal and to the
Ledger later.&lt;/p&gt;

&lt;h3 id=&quot;journal&quot;&gt;Journal&lt;/h3&gt;

&lt;p&gt;Each Memorandum entry leads to at least one entry in the Journal. Each entry in the Journal
represents a transaction, it has multiple lines and each line has:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;an &lt;strong&gt;account&lt;/strong&gt;, prefixed by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;To&lt;/code&gt; for debits and by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;By&lt;/code&gt; for credits,&lt;/li&gt;
  &lt;li&gt;a reference to the &lt;strong&gt;Memorandum page number&lt;/strong&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M-53&lt;/code&gt;),&lt;/li&gt;
  &lt;li&gt;a reference to the &lt;strong&gt;&lt;em&gt;Ledger Account&lt;/em&gt; page number&lt;/strong&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;L-000001-1&lt;/code&gt;),&lt;/li&gt;
  &lt;li&gt;an &lt;strong&gt;amount&lt;/strong&gt;, either in the credit or in the debit column, and&lt;/li&gt;
  &lt;li&gt;more details about the transactions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is the page &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;34&lt;/code&gt; of the Journal:&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;/assets/posts/2020-03-01-double-entry-bookkeeping/journal.svg&quot; alt=&quot;split ledger view&quot; /&gt;&lt;/center&gt;

&lt;p&gt;We have four entries:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;John receives €100 from Stripe, following his credit-card payment,&lt;/li&gt;
  &lt;li&gt;John splits this €100 between each party involved in Rental #5043,&lt;/li&gt;
  &lt;li&gt;Nicolas Z. gives €60 to Stripe, to receive a bank transfer, and&lt;/li&gt;
  &lt;li&gt;Insurance gives €1,000 to Stripe too, to receive a bank transfer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When an account &lt;strong&gt;gives&lt;/strong&gt; money, we record a &lt;strong&gt;credit&lt;/strong&gt;.
When an account &lt;strong&gt;receives&lt;/strong&gt; money we record a &lt;strong&gt;debit&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It can be a bit surprising to see that John starts by receiving €100.
From John’s perspective, he just gave something.
But from the merchant’s perspective, John’s &lt;strong&gt;internal account&lt;/strong&gt; just received €100!
Same when we want to pay €60 to Nicolas. It is €60 that are going out from Nicolas Z.’s
&lt;strong&gt;internal account&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To ensure consistency, there is a single rule: &lt;strong&gt;for a transaction, the credits must
be equal to the debits&lt;/strong&gt;. This rule makes it easy to avoid mistakes like disappearance of
resources.&lt;/p&gt;

&lt;h3 id=&quot;ledger&quot;&gt;Ledger&lt;/h3&gt;

&lt;p&gt;The Ledger has many sections representing &lt;strong&gt;Ledger Accounts&lt;/strong&gt;. Each account has a
reference, in this example, I used a number (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#123456&lt;/code&gt;) and a name.&lt;/p&gt;

&lt;p&gt;The goal of a Ledger Account is to keep track of operations that happen on that specific
account. The choices of the accounts will have an impact on what we’ll be able to monitor
with the Ledger.&lt;/p&gt;

&lt;p&gt;Each entry in the Ledger is coming from a line in the Journal. It has:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a reference to the &lt;strong&gt;Journal page number&lt;/strong&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;J-34&lt;/code&gt;),&lt;/li&gt;
  &lt;li&gt;a description mentioning the &lt;strong&gt;other party&lt;/strong&gt; from the Journal transaction and&lt;/li&gt;
  &lt;li&gt;an &lt;strong&gt;amount&lt;/strong&gt;, either in the credit or in the debit column.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The sum of debits, from all Ledger Accounts, must be the same as the sum of credits.&lt;/strong&gt;&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;/assets/posts/2020-03-01-double-entry-bookkeeping/ledgers.svg&quot; alt=&quot;split ledger view&quot; /&gt;&lt;/center&gt;

&lt;p&gt;We our Ledger Accounts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;John Doe received €100 from Stripe and then gave it all to others accounts.&lt;/li&gt;
  &lt;li&gt;Nicolas Z. received €60 from John Doe and then gave it all to Stripe.&lt;/li&gt;
  &lt;li&gt;Stripe gave €100 to John Doe, received €60 from Nicolas Z., and received €1,000 from the Insurance.&lt;/li&gt;
  &lt;li&gt;The Insurance received €20 and then gave €1,000 to Stripe.&lt;/li&gt;
  &lt;li&gt;Assistance and Getaround received €10 from John’s Doe.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With that information, we can tell that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;we are good with John Doe and Nicolas Z., we don’t owe them, they don’t owe us,&lt;/li&gt;
  &lt;li&gt;we owe Stripe €1,050, that’s most likely an anomaly because transactions are missing,&lt;/li&gt;
  &lt;li&gt;Insurance owes us €980, but that’s the same kind of anomaly,&lt;/li&gt;
  &lt;li&gt;we owe €10 to the Assistance provider, they haven’t been paid, and&lt;/li&gt;
  &lt;li&gt;we owe €10 to ourselves, Getaround, they haven’t been paid either.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;much-more&quot;&gt;Much more&lt;/h3&gt;

&lt;p&gt;There is much more to say about this system but that’s more or less all I need for the
rest of this article. If you’re interested there is still &lt;a href=&quot;https://jeremycripps.com/Summa2.pdf&quot;&gt;Jeremy Cripps’ interpretation
of Luca Pacioli’s writing&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;what-about-tech&quot;&gt;What about tech?&lt;/h2&gt;

&lt;h3 id=&quot;frameworks&quot;&gt;Frameworks&lt;/h3&gt;

&lt;p&gt;The first thing that I admire in that work is that it is &lt;strong&gt;generic&lt;/strong&gt;. No matter the nature
of your business, those guidelines can help you to solve a &lt;strong&gt;technical&lt;/strong&gt; problem. The
solution will adapt to the specifics of your business.&lt;/p&gt;

&lt;p&gt;It really looks like a framework like Ruby on Rails. If you follow the &lt;strong&gt;conventions&lt;/strong&gt;,
you will benefit from the work of a whole &lt;strong&gt;community&lt;/strong&gt; and from the wisdom of those who
tried to solve the same problems before you.&lt;/p&gt;

&lt;h3 id=&quot;databases&quot;&gt;Databases&lt;/h3&gt;

&lt;p&gt;Those books I described are very close to a &lt;strong&gt;database&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The reference system that ties entries from different books together is comparable to
&lt;strong&gt;foreign keys&lt;/strong&gt;. Information is split between books, sometimes denormalized, sometimes
referenced.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;Ledger&lt;/em&gt; represents the same information that we have in the &lt;em&gt;Journal&lt;/em&gt; but optimized for
different use-cases. A &lt;em&gt;Ledger&lt;/em&gt; is like a projection, like a &lt;strong&gt;materialized view&lt;/strong&gt;. It
creates &lt;strong&gt;read-models&lt;/strong&gt; optimized for certain use-cases, certain &lt;strong&gt;consistency checks&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;decoupling&quot;&gt;Decoupling&lt;/h3&gt;

&lt;p&gt;The Memorandum and the Journal are used by different people and for different
purposes. There is &lt;strong&gt;a context&lt;/strong&gt; for business operations and another for the accounting.
That looks like some &lt;a href=&quot;https://martinfowler.com/bliki/BoundedContext.html&quot;&gt;Domain-Driven-Design&lt;/a&gt; to me.&lt;/p&gt;

&lt;p&gt;We don’t want the Memorandum to be impacted by the Journal &lt;strong&gt;unavailability&lt;/strong&gt;.
We don’t want to need the Memorandum when searching informations in the Journal.
And finally, we don’t want to have them synchronized all the time. We’re talking about
&lt;strong&gt;asynchrony&lt;/strong&gt; and &lt;strong&gt;eventual consistency&lt;/strong&gt; here!&lt;/p&gt;

&lt;h3 id=&quot;immutability&quot;&gt;Immutability&lt;/h3&gt;

&lt;p&gt;One of the important properties of those books is that entries were &lt;strong&gt;immutable&lt;/strong&gt;. Each book
is an &lt;strong&gt;append-only log&lt;/strong&gt; of &lt;strong&gt;events&lt;/strong&gt; and transactions. This looks very much like an
&lt;a href=&quot;https://kickstarter.engineering/event-sourcing-made-simple-4a2625113224&quot;&gt;event-driven architecture&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When there is some mistake or something to update, it has to be through &lt;strong&gt;compensating
transactions&lt;/strong&gt; rather than amending past transactions.&lt;/p&gt;

&lt;h3 id=&quot;simplicity&quot;&gt;Simplicity&lt;/h3&gt;

&lt;p&gt;Double-entry-bookkeeping was in use way before the 15th century. Being relatively
simple was one of the key to &lt;strong&gt;longevity&lt;/strong&gt;. A complex solution would be dead by now, but
this is still the foundation of most financial systems today!&lt;/p&gt;

&lt;p&gt;Another key is certainly its &lt;strong&gt;robustness&lt;/strong&gt;. The process leaves little room for error.
It exposes a &lt;strong&gt;clear&lt;/strong&gt; set of rules to follow and provides &lt;strong&gt;guarantees&lt;/strong&gt; about the
information the system will deliver.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Italian merchants knew a lot about how to build information systems. I wonder if there are
other disciplines that refined systems, like accounting, over centuries, without any
computer, and to end up with such mature models.
If you have other examples, in any other field, please reach out to me!&lt;/p&gt;

&lt;p&gt;Discovering such simple, effective, and flexible tools is truly inspiring.
In my opinion, it is totally relevant to guide the design of &lt;em&gt;modern software systems&lt;/em&gt; as
we’re still solving the same problems!&lt;/p&gt;

</description>
        
          <description>&lt;p&gt;All companies handle money &lt;strong&gt;transactions&lt;/strong&gt;. The law enforces companies to maintain and
publish records of those transactions. Those records are called &lt;strong&gt;books&lt;/strong&gt; and the act
of maintaining them is called &lt;strong&gt;bookkeeping&lt;/strong&gt;.&lt;/p&gt;
</description>
        
        <pubDate>Sun, 01 Mar 2020 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/double-entry-bookkeeping/</link>
        <guid isPermaLink="true">https://getaround.tech/double-entry-bookkeeping/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Writing JavaScript like it's 2020</title>
        <dc:creator>Clement Bruno</dc:creator>
        <description>&lt;p&gt;JavaScript (JS) has long been criticized for being verbose and quirky. But the recent additions made to the language allow us to cope nicely with some of the debatable design decisions that were made and even benefit from a truly enjoyable development experience. In fact JS boasts a vast ecosystem, is present in a wide array of development use cases and is improved each and every year with excellent features.&lt;/p&gt;

&lt;p&gt;In the following article we explore some of these great features that were added to the language with ES2019 and ES2020.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NB: The following list does not aim at being exhaustive but merely at describing some of the new stuff I am enthusiastic about.
Additionally, most of these new features are not yet supported by the major browsers but are already usable if you use the Babel transpiler or a recent version of TypeScript (&amp;gt;= 3.7).&lt;/em&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;es2020&quot;&gt;ES2020&lt;/h1&gt;

&lt;h2 id=&quot;optional-chaining-operator&quot;&gt;Optional chaining operator&lt;/h2&gt;

&lt;p&gt;This one probably is among my favorites because it allows to vastly reduce the amount of code written when dealing with complex objects and when being unsure about the content structure.&lt;/p&gt;

&lt;p&gt;For instance, if we take the following example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userInfos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Bob&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;bob@getaround.com&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;familyMembers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;brother&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Bobby&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mother&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Constance&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;55&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;father&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;John&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;userInfos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;familyMembers&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userInfos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;familyMembers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mother&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userInfos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;familyMembers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mother&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see above retrieving the mother’s age was a pain and the nesting level is not even that deep. Developers already tried to solve this issue in the past and some interesting solutions such as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;delve&lt;/code&gt; utility function were developed. But the optional chaining operator is now a native implementation of the wanted behaviour and removes the dependency to external packages which is always appreciated.
Using this new operator allows us to reduce the code to:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;userInfos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;familyMembers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mother&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// =&amp;gt; 55&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In case the value called after &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&lt;/code&gt; is not found the program won’t crash and will return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined&lt;/code&gt; instead.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;userInfos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;familyMembers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;grandPa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// =&amp;gt; undefined&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;bigint&quot;&gt;BigInt&lt;/h2&gt;

&lt;p&gt;The addition of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BigInt&lt;/code&gt; to JS primitives is a good thing since, for long, manipulating numbers in JS was considered hazardous. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Number&lt;/code&gt; type is capped to integer values of 2**53-1 which can be really limiting.&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MAX_SAFE_INTEGER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// =&amp;gt; 9007199254740991&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This addition provides real built-in support for manipulating large numbers and using this new type is trivial. Just adding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt; at the end of a number makes it a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BigInt&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// BigInt numbers can be declared like that:&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bigIntNum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bigIntNum2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BigInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bigIntNum3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BigInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There are some limitations though:&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Operations between numbers are only possible if they share the same type:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// =&amp;gt; TypeError: Cannot mix BigInt and other types, use explicit conversions&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// =&amp;gt; 50n&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// =&amp;gt; 'bigint'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Since the output of operations involving &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BigInt&lt;/code&gt; numbers is itself a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BigInt&lt;/code&gt;, fractional values are truncated:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// =&amp;gt; 12n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;nullish-coalescing-operator&quot;&gt;Nullish coalescing Operator&lt;/h2&gt;

&lt;p&gt;I am really looking forward for this one to be widespread because it is also a great feature that fixes the flaws of the infamous &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;||&lt;/code&gt;.
As a reminder previously the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;||&lt;/code&gt; operator could produce surprising result because it would consider all falsy values…&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;some value&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// =&amp;gt; &quot;some value&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The above example is perfectly valid but I am way less comfortable with the following 2 lines:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// =&amp;gt; 300 &lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someStr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;some string&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// =&amp;gt; &quot;some string&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is due to the fact that, contrarily to what we have in most other languages, in JavaScript:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// =&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// =&amp;gt; false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Using the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;??&lt;/code&gt; operator solves such issue since it only deals with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined&lt;/code&gt; values instead of all the falsy ones:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;some value&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// =&amp;gt; &quot;some value&quot;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// =&amp;gt; 0 &lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someStr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;some string&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// =&amp;gt; &quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;es2019&quot;&gt;ES2019&lt;/h1&gt;

&lt;p&gt;I’d also like to mention two useful features that aren’t yet very widespread despite their usefulness which were brought with ES2019.&lt;/p&gt;

&lt;h2 id=&quot;arrayflat&quot;&gt;Array.flat()&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flat&lt;/code&gt; as its name indicates allows to reduce progressively the nesting of imbricated lists:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nestedList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;first level&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;second level&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;third level&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]];&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nestedList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;flat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// =&amp;gt; [ 'first level', 'second level', [ 'third level' ] ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It takes an optional parameter that specifies how many level of nesting should be unnested.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nestedList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;flat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// =&amp;gt; [ 'first level', 'second level', 'third level' ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When no parameter is provided the function defaults to 1. Therefore it is equivalent to write:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nestedList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;flat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// =&amp;gt; [ 'first level', 'second level', [ 'third level' ] ]&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nestedList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;flat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// =&amp;gt; [ 'first level', 'second level', [ 'third level' ] ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you are dealing with a data structure with an unknown level of nesting and are sure you want everything unnested you can provide &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Infinity&lt;/code&gt; as an argument to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flat&lt;/code&gt; function.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nestedList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;flat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;Infinity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// =&amp;gt; [ 'first level', 'second level', 'third level' ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;NB: Please note that a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flatMap&lt;/code&gt; function was also introduced and as its name indicates it combines the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flat&lt;/code&gt; described above with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; loop method.&lt;br /&gt;
It is also worth mentioning that, in the functional programming spirit, these new methods do no mutate the array on which they are called but create a new one.&lt;/p&gt;

&lt;h2 id=&quot;objectfromentries&quot;&gt;Object.fromEntries()&lt;/h2&gt;

&lt;p&gt;This new feature is interesting to switch from one data structure to another to best fit our development need.&lt;br /&gt;
For instance, given a nested lists data structure:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;55&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;bob&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;bob@bobby.com&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;if I needed to access the “bob” value, I’d have to write something like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;someList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// =&amp;gt; &quot;bob&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This works but it is flawed because it relies on the list content ordering and it does not provide any context regarding the fact that I want to access the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; property.
With the the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Object.fromEntries()&lt;/code&gt; function we can adopt a very much cleaner approach:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;55&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;bob&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;bob@bobby.com&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fromEntries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;someList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;someObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// =&amp;gt; { age: 55, name: 'bob', email: 'bob@bobby.com' }&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;someObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// =&amp;gt; &quot;bob&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;NB: The corollary feature is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Object.entries()&lt;/code&gt; which allows to transform an Object into a nested array structure.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;55&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;bob&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;bob@bobby.com&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;someObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;someList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// =&amp;gt; [['age', 55], ['name', 'bob'], ['email', 'bob@bobby.com']];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;The features described above are just a subset of the recent additions made to the language but these are very much likable because they allow us to write code that is much more readable and concise. As a consequence the whole development experience feels less hacky and really enjoyable overall.&lt;/p&gt;
</description>
        
          <description>&lt;p&gt;JavaScript (JS) has long been criticized for being verbose and quirky. But the recent additions made to the language allow us to cope nicely with some of the debatable design decisions that were made and even benefit from a truly enjoyable development experience. In fact JS boasts a vast ecosystem, is present in a wide array of development use cases and is improved each and every year with excellent features.&lt;/p&gt;
</description>
        
        <pubDate>Wed, 08 Jan 2020 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/writing-js-like-its-2020/</link>
        <guid isPermaLink="true">https://getaround.tech/writing-js-like-its-2020/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Migrating a Live IoT Telemetry Backend</title>
        <dc:creator>Khwaab Dave</dc:creator>
        <description>&lt;p&gt;In order to provide a magical experience for our carsharing customers, Getaround vehicles are equipped with Connect® hardware that communicates with the Getaround network. That magic is powered by an entire IoT backend which we recently migrated. Some might call that magical. As our platform grew quickly, the initial infrastructure experienced stability issues and hindered our ability to scale or improve telemetry features. Migrating an internal service which powers the business is &lt;a href=&quot;https://youtu.be/SVGgvevWnls?t=25&quot;&gt;a bit tricky&lt;/a&gt;. A single mistake has the potential to shutdown business for hours if not days. With this in mind, we used an iterative and parallel approach to carefully migrate each feature from the old to the new.&lt;/p&gt;

&lt;h1 id=&quot;iot-at-getaround&quot;&gt;IoT at Getaround&lt;/h1&gt;

&lt;p&gt;We believe the best carsharing experience should be seamless– from booking, to finding and unlocking, and then returning the car. Getaround’s Connect® hardware powers this experience of finding and accessing the car and allows us to monitor our fleet’s health.&lt;/p&gt;

&lt;p&gt;When Getaround started, IoT was still a relatively new field, and off-the-shelf services were limited at best. We created a proprietary telemetry backend and protocol. It was a single cloud server, running a service written in Erlang, receiving telemetry and routing commands and configurations to all vehicles on the platform.&lt;/p&gt;

&lt;p&gt;At a high level our system looked like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2019-12-10-migrating-a-live-iot-telemetry-backend/iot_1-min.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For years, with a smaller number of cars on our platform, this was functional and required minimal maintenance. However, once we started rapidly scaling, minor issues became huge problems:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The service and protocol did not scale with thousands of devices&lt;/li&gt;
  &lt;li&gt;As we scaled, edge cases became a more frequent problem we could no longer ignore&lt;/li&gt;
  &lt;li&gt;Hiring a specialized Erlang team to fix and work on a system is very difficult&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;choosing-an-iot-service&quot;&gt;Choosing an IoT Service&lt;/h1&gt;

&lt;p&gt;IoT as a field had made leaps of progress in the years since we created our initial infrastructure. We decided the best way to scale our system was to switch away from our proprietary solution and use one of the newer off-the-shelf IoT products.&lt;/p&gt;

&lt;p&gt;We began research and landed on four services to evaluate:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;AWS IoT Core&lt;/li&gt;
  &lt;li&gt;Google Core IoT&lt;/li&gt;
  &lt;li&gt;Samsung Artik&lt;/li&gt;
  &lt;li&gt;ThingsBoard&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As we looked into these offerings we had a few metrics we were comparing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Stability / Age / Development Cycle / Adoption&lt;/li&gt;
  &lt;li&gt;Scaling&lt;/li&gt;
  &lt;li&gt;Protocol - MQTT or COAP&lt;/li&gt;
  &lt;li&gt;Flexibility&lt;/li&gt;
  &lt;li&gt;Setup Ease&lt;/li&gt;
  &lt;li&gt;Maintenance Ease and Skillset&lt;/li&gt;
  &lt;li&gt;Integration Ease&lt;/li&gt;
  &lt;li&gt;Cost of Service&lt;/li&gt;
  &lt;li&gt;Bandwidth cost of service (over GSM)&lt;/li&gt;
  &lt;li&gt;Limits&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First we eliminated ThingsBoard. Their software was interesting and open source, but it was geared towards running your own instance, like we had been. They had a SaaS offering as well, but we decided it was risky to use a relatively unknown and small company for a system which our entire business relied upon.&lt;/p&gt;

&lt;p&gt;Next we eliminated Samsung Artik. Artik had similar issues as AWS in moving the data from Samsung to our platform in Google Cloud, but it was a much newer and less adopted system than AWS. Samsung Artik did offer COAP and MQTT, and we looked into it specifically to evaluate COAP, but we finally chose MQTT due to its more mature libraries and better TLS support. Samsung Artik had the same feature limitations as Google Cloud and the same integration problems of AWS.&lt;/p&gt;

&lt;p&gt;Finally, the decision ended up being between Google and AWS. In evaluating the basic MQTT Telemetry (offering, cost, and limits), they both seemed similar. Since we had a working relationship with Google through our other backend systems, we decided it was beneficial to try and keep our services within Google Cloud Platform. The integration seemed simpler even though AWS was more established, flexible, and feature-rich.&lt;/p&gt;

&lt;p&gt;Our first design thoughts were to replicate our current features falling largely into three categories:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Receive telemetry from Connect® devices&lt;/li&gt;
  &lt;li&gt;Send commands to Connect® devices&lt;/li&gt;
  &lt;li&gt;Modify configuration of Connect® devices&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As we began designing the commands and configuration infrastructure, we started to see the limits of Google’s Cloud IoT Core:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MQTT topics were predefined, making it harder to organize the system for our purposes&lt;/li&gt;
  &lt;li&gt;Implementing a robust device configuration system required a large amount of work&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When sending a configuration request to a device, we wanted a system in which we could guarantee the configuration is sent whenever the device comes online, and monitored even while it is offline. We previously lacked this ability which hindered monitoring the state of any device. To do this with Google’s Cloud IoT Core, we would’ve had to implement another service with a database maintaining these configurations. As we started to design this system, it was almost as much work as implementing the entire IoT backend from scratch. We took a step back and started to rethink our decision regarding Google versus Amazon.&lt;/p&gt;

&lt;p&gt;AWS IoT Core eventually won out because of the additional features offered along with the basic MQTT telemetry system:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Flexible MQTT topics&lt;/li&gt;
  &lt;li&gt;Device Shadows&lt;/li&gt;
  &lt;li&gt;Jobs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As we looked deeper into Device Shadows, we realized the configuration system we were designing with Google Core IoT was a rudimentary version of AWS’ Device Shadows. Using AWS, we didn’t need to create supplementary services to achieve the functionality we desired. The only downside was that we needed an ETL from AWS to the rest of our company infrastructure in Google, but we decided the work to implement the ETL was far less than the work required to have Google Core IoT perform the way we needed. As much as we would’ve liked to have kept our systems contained within Google, their IoT product was too new and didn’t offer as many features as AWS.&lt;/p&gt;

&lt;h1 id=&quot;iterative-and-parallel-migration&quot;&gt;Iterative and Parallel Migration&lt;/h1&gt;

&lt;p&gt;When we designed the migration process we took into account how we release new Connect® features. When we develop a new feature for the Connect®, it is difficult to test all the real world situations the Connect® devices are exposed to. To verify these features, we roll out firmware releases iteratively to an increasing percentage of the fleet, and with feature flags on all the new features. Feature flags allow code to be exercised with the end result mocked out, making it possible to test new features in parallel with a functioning system.&lt;/p&gt;

&lt;p&gt;During the migration, our system looked like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2019-12-10-migrating-a-live-iot-telemetry-backend/iot_2-min.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-sequential-steps-of-our-migration-workflows&quot;&gt;The sequential steps of our migration workflows&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Activate the connection between Connect® devices to AWS and move data from AWS to our telemetry database in Google Cloud.&lt;/li&gt;
  &lt;li&gt;Implement sending commands from our web platform in Google Cloud to AWS IoT Core, receiving the commands on the Connect®, and replying back.&lt;/li&gt;
  &lt;li&gt;Shutdown the connection between the Connect® and our old backend.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;step-1-telemetry&quot;&gt;Step 1: Telemetry&lt;/h2&gt;

&lt;p&gt;The first migration we implemented was our main telemetry feed from each vehicle. We rolled this out iteratively based on a flag that maintained the connection to the old backend, but when enabled, sent the data to AWS instead.&lt;/p&gt;

&lt;p&gt;Ideally, we would have duplicated this data and sent it through both backends to our database for comparison, but the format of our database made this a complex task. Instead, after the firmware was released, we closely observed about 10 vehicles which had been switched over to AWS. Each of these vehicles could immediately revert back to the original network if required, and could also be accessed via SMS in an emergency. Once we identified and fixed some minor issues with these vehicles, we slowly (over the course of a month) increased the number of cars until all capable devices were sending telemetry through AWS.&lt;/p&gt;

&lt;h2 id=&quot;step-2-commands&quot;&gt;Step 2: Commands&lt;/h2&gt;

&lt;p&gt;We focused on commands once our telemetry was stable and fully released. Fortunately, commands did not have the same database complexity as our telemetry system, so we could run both AWS and legacy commands in parallel.&lt;/p&gt;

&lt;p&gt;We implemented a feature flag which allowed AWS commands to function normally up until the point a Connect® executed a command (e.g. lock, unlock, set configuration). At this point, the device replied to AWS with a message saying it would’ve performed the action if the feature flag was enabled. This allowed us to test the the communication with AWS without unintentional consequences from any bugs in our implementation.&lt;/p&gt;

&lt;p&gt;Using this feature flag and the same iterative rollout process, we were able to fully update the fleet and monitor the health of AWS commands while still using our older backend to do the actual work. This allowed us to verify that AWS commands were working as expected, and to roll out any bug fixes before actually using the feature. When our analytics confirmed that AWS commands were performing as well as before (it was actually better), we started another iterative rollout to flip the feature flag which actually acted on the AWS command. We still kept the previous commands enabled, but had deduplication logic in the Connect® to ensure we didn’t execute the command twice.&lt;/p&gt;

&lt;p&gt;Finally, once we had sufficiently verified all commands running in parallel, we stopped sending commands through the old system if a device was registered with AWS, completing the migration of commands and no longer relying on the old infrastructure.&lt;/p&gt;

&lt;h2 id=&quot;step-3-close-the-connection&quot;&gt;Step 3: Close the connection&lt;/h2&gt;

&lt;p&gt;Now that our AWS implementation had reached feature parity, we had the option to disable the connection from the Connect® to our old server and complete the migration. Because of a number of legacy devices in our fleet, we still run the old system to ensure those vehicles are still operational, but the load is so minimal it takes virtually no effort.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;The complete migration of our telemetry system, from choosing a new service to full migration, took just under a year. Each step had to be carefully considered to avoid any negative impact on our users. The migration would’ve been nearly impossible if it were not iterative and done in parallel with our older system. Every release was verified before roll out and we assured our operations teams that there would be no changes in day-to-day business during migration. Everything had to work the exact same way it always had.&lt;/p&gt;

&lt;p&gt;There were a few hiccups along the way, but because we had iteratively rolled out all of our features in parallel with our old system, it was simple to revert back when we encountered issues. And with the iterative release, any issues we did encounter were confined to small portions of the fleet. Fixing a couple mistakes by hand is feasible, but a bug affecting the entire fleet would have been disastrous.&lt;/p&gt;

&lt;p&gt;As a result, we finally have a fully scalable, distributed and flexible backend which no longer is the blocker in expanding the functionality of the Connect®. Now we just have to explore how to use all this new data!&lt;/p&gt;

</description>
        
          <description>&lt;p&gt;In order to provide a magical experience for our carsharing customers, Getaround vehicles are equipped with Connect® hardware that communicates with the Getaround network. That magic is powered by an entire IoT backend which we recently migrated. Some might call that magical. As our platform grew quickly, the initial infrastructure experienced stability issues and hindered our ability to scale or improve telemetry features. Migrating an internal service which powers the business is &lt;a href=&quot;https://youtu.be/SVGgvevWnls?t=25&quot;&gt;a bit tricky&lt;/a&gt;. A single mistake has the potential to shutdown business for hours if not days. With this in mind, we used an iterative and parallel approach to carefully migrate each feature from the old to the new.&lt;/p&gt;
</description>
        
        <pubDate>Tue, 10 Dec 2019 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/migrating-a-live-iot-telemetry-backend/</link>
        <guid isPermaLink="true">https://getaround.tech/migrating-a-live-iot-telemetry-backend/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Improving Performance with Flame Graphs</title>
        <dc:creator>Howard Wilson</dc:creator>
        <description>&lt;p&gt;Recently we had reason to investigate the performance of one of our most commonly used endpoints. We find &lt;a href=&quot;https://newrelic.com/&quot;&gt;New Relic&lt;/a&gt; to be a great tool for identifying and exploring performance problems, but what about when performance isn’t exactly a problem per se, but we’d like to optimize it all the same?&lt;/p&gt;

&lt;p&gt;Often the key to understanding can be in effective &lt;em&gt;visualization&lt;/em&gt; of the problem, so in this short post we’ll explore how to do just that using &lt;a href=&quot;http://www.brendangregg.com/flamegraphs.html&quot;&gt;Flame Graphs&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;generating-the-graph&quot;&gt;Generating the Graph&lt;/h2&gt;

&lt;p&gt;We won’t go through this in detail, because it’s very well covered in &lt;a href=&quot;https://www.codementor.io/tylerboyd/finding-performance-bottlenecks-in-your-rails-api-du107r9zt&quot;&gt;this good blog post&lt;/a&gt; from 2016. We found the following development environment setup process effective:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Gemfile&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ruby-prof-flamegraph&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# development.rb&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cache_classes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Controller action&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RubyProf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;profile&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Action code here&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ruby-prof-profile&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;w+&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;RubyProf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;FlameGraphPrinter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Fire the action locally and then convert the output to a graph using &lt;a href=&quot;https://github.com/brendangregg/FlameGraph&quot;&gt;FlameGraph&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;ruby-prof-profile | ./flamegraph.pl &lt;span class=&quot;nt&quot;&gt;--countname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ms &lt;span class=&quot;nt&quot;&gt;--width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1600 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; flame.svg&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;a href=&quot;https://github.com/tmm1/stackprof&quot;&gt;Stackprof&lt;/a&gt; is a popular alternative to &lt;a href=&quot;https://github.com/ruby-prof/ruby-prof&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ruby-prof&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;reading-the-graph&quot;&gt;Reading the Graph&lt;/h2&gt;

&lt;p&gt;Here’s part of the graph for the endpoint in question:&lt;/p&gt;

&lt;figure&gt;
   &lt;img alt=&quot;Flame Graph&quot; src=&quot;/assets/posts/2019-10-31-improving-performance-with-flame-graphs/flame_graph.png&quot; /&gt;
  &lt;figcaption&gt;
    Flame Graph
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;146e938aa8d735588265ca14fbe6dd90_Screen20Shot202019-10-2820at2014-bf47205f-681f-4058-9de4-5a9d3fe62ff7.38.54.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Time is represented horizontally, and the call stack is represented from bottom to top. This block of code is iterating over an array of cars and serializing a photo URL for each one, as well as some other attributes.&lt;/p&gt;

&lt;p&gt;The parts of interest are highlighted in blue. Oddly enough, they were all calls to a simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#config&lt;/code&gt; method which was necessary to generate each of our photo URLs. This gets called hundreds of times by this endpoint, but it’s just a hash so that shouldn’t be a problem, right? Here’s the code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;config&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;SHARED_CONFIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;deep_merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV_SPECIFIC_CONFIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Unfortunately, it is a problem because it’s doing a &lt;a href=&quot;https://apidock.com/rails/Hash/deep_merge&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#deep_merge&lt;/code&gt;&lt;/a&gt; of our increasingly large environment config into our system-wide config &lt;em&gt;every time it’s called&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Once we’ve spotted it, the memoization fix is simple:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;config&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@_config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SHARED_CONFIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;deep_merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV_SPECIFIC_CONFIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Take care when memoizing class methods in this way in a threaded environment: some other thread-safe store might be more appropriate for you.&lt;/p&gt;

&lt;h2 id=&quot;caveats&quot;&gt;Caveats&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;In development, application performance isn’t necessarily going to behave the same as it will in production. For example, we noticed local &lt;a href=&quot;https://stackoverflow.com/questions/41353532/why-is-time-utc-slower-in-a-forked-process-in-ruby-on-os-x-and-not-in-python&quot;&gt;performance issues with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Time#utc&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Bear in mind the impact that adding a call-stack profiler to your production environment might have. Tools like &lt;a href=&quot;https://rbspy.github.io/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rbspy&lt;/code&gt;&lt;/a&gt; might be a better way to go.&lt;/li&gt;
  &lt;li&gt;Absolute timing isn’t going to be as useful as the relative time spent in methods, since the profiler itself has an impact.&lt;/li&gt;
&lt;/ul&gt;
</description>
        
          <description>&lt;p&gt;Recently we had reason to investigate the performance of one of our most commonly used endpoints. We find &lt;a href=&quot;https://newrelic.com/&quot;&gt;New Relic&lt;/a&gt; to be a great tool for identifying and exploring performance problems, but what about when performance isn’t exactly a problem per se, but we’d like to optimize it all the same?&lt;/p&gt;
</description>
        
        <pubDate>Tue, 29 Oct 2019 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/improving-performance-with-flame-graphs/</link>
        <guid isPermaLink="true">https://getaround.tech/improving-performance-with-flame-graphs/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>What is my job like at Getaround EU</title>
        <dc:creator>Nicolas Zermati</dc:creator>
        <description>&lt;p&gt;My job title is officially &lt;em&gt;backend engineer&lt;/em&gt; but this is pretty vague. I wanted to explain a bit what I do on a daily basis. First, it is a good reflective exercise for myself. Then, if readers like what I do, maybe some of you will want to &lt;a href=&quot;https://drivy.engineering/jobs/&quot;&gt;join us&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;If you’re in a hurry, this is a quick recap of the main points of the article:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I mostly maintain an existing system, which is both challenging and rewarding.&lt;/li&gt;
  &lt;li&gt;I’ll build a long-term vision in order to guide incremental refactoring rather than big rewrites.&lt;/li&gt;
  &lt;li&gt;I’m responsible for a key piece of the product.&lt;/li&gt;
  &lt;li&gt;Some of the main features I work on can take months to get done.&lt;/li&gt;
  &lt;li&gt;I mostly deliver internal APIs, with very little UI.&lt;/li&gt;
  &lt;li&gt;I have lot of freedom and very few deadlines.&lt;/li&gt;
  &lt;li&gt;The feedback loop on some decisions is really long.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, all this only reflects my own beliefs and perceptions. I’m happy to discuss anything you read here and encourage you to say &lt;em&gt;Hi!&lt;/em&gt; on &lt;a href=&quot;https://twitter.com/@nicoolas25&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: Sometimes I’ll say &lt;em&gt;I&lt;/em&gt;, sometimes I’ll say &lt;em&gt;we&lt;/em&gt;. I’m not doing anything completely by myself. All of what I do greatly relies on and involves the work of the team.&lt;/p&gt;

&lt;p&gt;I think the easiest way to share what my job is like would be to tell the story of the main areas I work on. I’m in what we call the &lt;em&gt;finance squad&lt;/em&gt; so my work is mostly focused on how the company accepts money from our customers, how we keep track of it, and how we dispatch it to our various partners. The scope is a bit broader than this but it is a good starting point…&lt;/p&gt;

&lt;center&gt;
&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; version=&quot;1.1&quot; width=&quot;415px&quot; height=&quot;136px&quot; viewBox=&quot;-0.5 -0.5 415 136&quot;&gt;&lt;defs /&gt;&lt;g&gt;&lt;path d=&quot;M 44 54.86 L 88.97 54.86 L 127.63 54.86&quot; fill=&quot;none&quot; stroke=&quot;#005700&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;path d=&quot;M 132.88 54.86 L 125.88 58.36 L 127.63 54.86 L 125.88 51.36 Z&quot; fill=&quot;#005700&quot; stroke=&quot;#005700&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(63.5,58.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;53&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;&quot;&gt;Payments&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;27&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;Payments&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;ellipse cx=&quot;29&quot; cy=&quot;32.5&quot; rx=&quot;7.5&quot; ry=&quot;7.5&quot; fill=&quot;#ffffff&quot; stroke=&quot;#000000&quot; pointer-events=&quot;none&quot; /&gt;&lt;path d=&quot;M 29 40 L 29 65 M 29 45 L 14 45 M 29 45 L 44 45 M 29 65 L 14 85 M 29 65 L 44 85&quot; fill=&quot;none&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(-0.5,92.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;58&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;&quot;&gt;Customers&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;29&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;Customers&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;ellipse cx=&quot;359&quot; cy=&quot;32.5&quot; rx=&quot;7.5&quot; ry=&quot;7.5&quot; fill=&quot;#ffffff&quot; stroke=&quot;#000000&quot; pointer-events=&quot;none&quot; /&gt;&lt;path d=&quot;M 359 40 L 359 65 M 359 45 L 344 45 M 359 45 L 374 45 M 359 65 L 344 85 M 359 65 L 374 85&quot; fill=&quot;none&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(336.5,92.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;45&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;&quot;&gt;Partners&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;23&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;Partners&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;ellipse cx=&quot;389&quot; cy=&quot;62.5&quot; rx=&quot;7.5&quot; ry=&quot;7.5&quot; fill=&quot;#ffffff&quot; stroke=&quot;#000000&quot; pointer-events=&quot;none&quot; /&gt;&lt;path d=&quot;M 389 70 L 389 95 M 389 75 L 374 75 M 389 75 L 404 75 M 389 95 L 374 115 M 389 95 L 404 115&quot; fill=&quot;none&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(363.5,122.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;51&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;&quot;&gt;Providers&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;26&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;Providers&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;path d=&quot;M 254 55 L 337.63 55&quot; fill=&quot;none&quot; stroke=&quot;#005700&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;path d=&quot;M 342.88 55 L 335.88 58.5 L 337.63 55 L 335.88 51.5 Z&quot; fill=&quot;#005700&quot; stroke=&quot;#005700&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(270.5,57.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;43&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;&quot;&gt;Payouts&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;22&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;Payouts&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;rect x=&quot;134&quot; y=&quot;0&quot; width=&quot;120&quot; height=&quot;110&quot; rx=&quot;16.5&quot; ry=&quot;16.5&quot; fill=&quot;#f5f5f5&quot; stroke=&quot;#666666&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(173.5,48.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;41&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(51, 51, 51); line-height: 1.2; vertical-align: top; width: 41px; white-space: nowrap; overflow-wrap: normal; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;&quot;&gt;System&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;21&quot; y=&quot;12&quot; fill=&quot;#333333&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;System&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;
&lt;/center&gt;

&lt;p&gt;There is no particular order here.&lt;/p&gt;

&lt;h4 id=&quot;payments&quot;&gt;Payments&lt;/h4&gt;
&lt;p&gt;We support credit cards via Stripe. We also accept Paypal in some countries. We used to use other providers, so our integration aims to be provider-agnostic. This integration style works quite well and I can’t thank enough the people that set it up.&lt;/p&gt;

&lt;p&gt;I’ve been busy &lt;em&gt;keeping up with regulations&lt;/em&gt;. For instance, I worked on being &lt;a href=&quot;https://www.pcisecuritystandards.org/pci_security/standards_overview&quot;&gt;PCI-DSS&lt;/a&gt;-compliant. Thanks to Stripe, becoming compliant was a smooth process. We use Stripe &lt;a href=&quot;https://stripe.com/payments/elements&quot;&gt;Elements&lt;/a&gt; and &lt;a href=&quot;https://stripe.com/docs/sources&quot;&gt;Sources&lt;/a&gt; so we don’t have to handle sensitive credit card information.&lt;/p&gt;

&lt;p&gt;You may have noticed, the European Commission released the &lt;a href=&quot;https://europa.eu/rapid/press-release_MEMO-17-4961_en.htm&quot;&gt;PSD2&lt;/a&gt;, a directive aiming at securing online payments with two-factor authentication. All the payment providers operating in the European Commission had to work really hard to be ready for this. Account managers at Stripe did their best to help us, they made themselves very available, invited us to workshops, and so on. On my side, the main challenges were:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;releasing the new API incrementally, and&lt;/li&gt;
  &lt;li&gt;keeping our provider-agnostic code agnostic.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The new (&lt;a href=&quot;https://stripe.com/docs/api/payment_intents&quot;&gt;Payment Intent&lt;/a&gt; and &lt;a href=&quot;https://stripe.com/docs/api/payment_methods&quot;&gt;Payment Method&lt;/a&gt;) APIs introduced some &lt;em&gt;pressure&lt;/em&gt; on our existing abstractions. For instance, the system was designed in such a way that a call to the payment provider should either end up in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;successful&lt;/code&gt; transaction or a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;failed&lt;/code&gt; one. This change introduced another state: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pending_action&lt;/code&gt; when the bank requires a two-factor authentication to complete the transaction. How to handle that? What’s the impact on our apps, on our data, etc?&lt;/p&gt;

&lt;center&gt;
  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; version=&quot;1.1&quot; width=&quot;522px&quot; height=&quot;352px&quot; viewBox=&quot;-0.5 -0.5 522 352&quot;&gt;&lt;defs /&gt;&lt;g&gt;&lt;path d=&quot;M 200 160 L 200 223.63&quot; fill=&quot;none&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;path d=&quot;M 200 228.88 L 196.5 221.88 L 200 223.63 L 203.5 221.88 Z&quot; fill=&quot;#000000&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(190.5,184.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;19&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;&quot;&gt;2xx&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;10&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;2xx&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;path d=&quot;M 240 119.67 L 360 119.67 L 360 223.63&quot; fill=&quot;none&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;path d=&quot;M 360 228.88 L 356.5 221.88 L 360 223.63 L 363.5 221.88 Z&quot; fill=&quot;#000000&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(355.5,188.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;19&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;&quot;&gt;5xx&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;10&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;5xx&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;path d=&quot;M 160 119.67 L 40 119.67 L 40 223.63&quot; fill=&quot;none&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;path d=&quot;M 40 228.88 L 36.5 221.88 L 40 223.63 L 43.5 221.88 Z&quot; fill=&quot;#000000&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(30.5,184.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;19&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;&quot;&gt;4xx&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;10&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;4xx&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;ellipse cx=&quot;200&quot; cy=&quot;120&quot; rx=&quot;40&quot; ry=&quot;40&quot; fill=&quot;#f5f5f5&quot; stroke=&quot;#666666&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(178.5,113.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;42&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(51, 51, 51); line-height: 1.2; vertical-align: top; width: 44px; white-space: nowrap; overflow-wrap: normal; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;&quot;&gt;pending&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;21&quot; y=&quot;12&quot; fill=&quot;#333333&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;pending&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;ellipse cx=&quot;40&quot; cy=&quot;270&quot; rx=&quot;40&quot; ry=&quot;40&quot; fill=&quot;#f8cecc&quot; stroke=&quot;#b85450&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(25.5,263.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;28&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 30px; white-space: nowrap; overflow-wrap: normal; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;&quot;&gt;failed&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;14&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;failed&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;ellipse cx=&quot;200&quot; cy=&quot;270&quot; rx=&quot;40&quot; ry=&quot;40&quot; fill=&quot;#d5e8d4&quot; stroke=&quot;#82b366&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(170.5,263.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;58&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 60px; white-space: nowrap; overflow-wrap: normal; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;&quot;&gt;succeeded&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;29&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;succeeded&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;ellipse cx=&quot;360&quot; cy=&quot;270&quot; rx=&quot;40&quot; ry=&quot;40&quot; fill=&quot;#ffe6cc&quot; stroke=&quot;#d79b00&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(335.5,263.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;48&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 50px; white-space: nowrap; overflow-wrap: normal; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;&quot;&gt;unknown&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;24&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;unknown&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;path d=&quot;M 200 20 L 200 73.63&quot; fill=&quot;none&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;path d=&quot;M 200 78.88 L 196.5 71.88 L 200 73.63 L 203.5 71.88 Z&quot; fill=&quot;#000000&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;ellipse cx=&quot;200&quot; cy=&quot;10&quot; rx=&quot;10&quot; ry=&quot;10&quot; fill=&quot;#0a0a0a&quot; stroke=&quot;#000000&quot; pointer-events=&quot;none&quot; /&gt;&lt;path d=&quot;M 0 170 L 410 170&quot; fill=&quot;none&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; stroke-dasharray=&quot;3 3&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(418.5,163.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;102&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;&quot;&gt;Call to the gateway&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;51&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;Call to the gateway&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;g transform=&quot;translate(44.5,333.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;310&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 310px; white-space: nowrap; overflow-wrap: normal; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;&quot;&gt;&lt;u&gt;payment transaction's state machine - previous integration&lt;/u&gt;&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;155&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;&amp;lt;u&amp;gt;payment transaction's state machine - previous integration&amp;lt;/u&amp;gt;&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;
  &lt;hr /&gt;
  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; version=&quot;1.1&quot; width=&quot;641px&quot; height=&quot;441px&quot; viewBox=&quot;-0.5 -0.5 641 441&quot;&gt;&lt;defs /&gt;&lt;g&gt;&lt;path d=&quot;M 285 120 L 325 120 L 325 223.63&quot; fill=&quot;none&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;path d=&quot;M 325 228.88 L 321.5 221.88 L 325 223.63 L 328.5 221.88 Z&quot; fill=&quot;#000000&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(315.5,184.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;19&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;&quot;&gt;2xx&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;10&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;2xx&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;path d=&quot;M 285 120 L 450 120 L 450 223.63&quot; fill=&quot;none&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;path d=&quot;M 450 228.88 L 446.5 221.88 L 450 223.63 L 453.5 221.88 Z&quot; fill=&quot;#000000&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(440.5,184.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;19&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;&quot;&gt;5xx&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;10&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;5xx&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;path d=&quot;M 205 120 L 40 120 L 40 223.63&quot; fill=&quot;none&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;path d=&quot;M 40 228.88 L 36.5 221.88 L 40 223.63 L 43.5 221.88 Z&quot; fill=&quot;#000000&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(31.5,184.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;19&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;&quot;&gt;4xx&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;10&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;4xx&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;path d=&quot;M 205 120 L 165 120 L 165 223.63&quot; fill=&quot;none&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;path d=&quot;M 165 228.88 L 161.5 221.88 L 165 223.63 L 168.5 221.88 Z&quot; fill=&quot;#000000&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(155.5,184.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;19&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;&quot;&gt;2xx&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;10&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;2xx&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;ellipse cx=&quot;245&quot; cy=&quot;120&quot; rx=&quot;40&quot; ry=&quot;40&quot; fill=&quot;#f5f5f5&quot; stroke=&quot;#666666&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(223.5,113.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;42&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(51, 51, 51); line-height: 1.2; vertical-align: top; width: 44px; white-space: nowrap; overflow-wrap: normal; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;&quot;&gt;pending&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;21&quot; y=&quot;12&quot; fill=&quot;#333333&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;pending&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;ellipse cx=&quot;40&quot; cy=&quot;270&quot; rx=&quot;40&quot; ry=&quot;40&quot; fill=&quot;#f8cecc&quot; stroke=&quot;#b85450&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(25.5,263.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;28&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 30px; white-space: nowrap; overflow-wrap: normal; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;&quot;&gt;failed&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;14&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;failed&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;ellipse cx=&quot;325&quot; cy=&quot;270&quot; rx=&quot;40&quot; ry=&quot;40&quot; fill=&quot;#d5e8d4&quot; stroke=&quot;#82b366&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(295.5,263.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;58&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 60px; white-space: nowrap; overflow-wrap: normal; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;&quot;&gt;succeeded&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;29&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;succeeded&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;ellipse cx=&quot;450&quot; cy=&quot;270&quot; rx=&quot;40&quot; ry=&quot;40&quot; fill=&quot;#ffe6cc&quot; stroke=&quot;#d79b00&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(425.5,263.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;48&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 50px; white-space: nowrap; overflow-wrap: normal; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;&quot;&gt;unknown&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;24&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;unknown&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;path d=&quot;M 245 20 L 245 73.63&quot; fill=&quot;none&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;path d=&quot;M 245 78.88 L 241.5 71.88 L 245 73.63 L 248.5 71.88 Z&quot; fill=&quot;#000000&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;ellipse cx=&quot;245&quot; cy=&quot;10&quot; rx=&quot;10&quot; ry=&quot;10&quot; fill=&quot;#0a0a0a&quot; stroke=&quot;#000000&quot; pointer-events=&quot;none&quot; /&gt;&lt;path d=&quot;M 0 170 L 495 170&quot; fill=&quot;none&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; stroke-dasharray=&quot;3 3&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(506.5,164.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;102&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: left;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;&quot;&gt;Call to the gateway&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;51&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;Call to the gateway&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;g transform=&quot;translate(101.5,423.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;286&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 288px; white-space: nowrap; overflow-wrap: normal; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;&quot;&gt;&lt;u&gt;payment transaction's state machine - new integration&lt;/u&gt;&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;143&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;&amp;lt;u&amp;gt;payment transaction's state machine - new integration&amp;lt;/u&amp;gt;&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;path d=&quot;M 165 310 L 165 380 L 40 380 L 40 316.37&quot; fill=&quot;none&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;path d=&quot;M 40 311.12 L 43.5 318.12 L 40 316.37 L 36.5 318.12 Z&quot; fill=&quot;#000000&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(81.5,384.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;27&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;&quot;&gt;Error&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;14&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;Error&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;path d=&quot;M 165 310 L 165 380 L 325 380 L 325 316.37&quot; fill=&quot;none&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;path d=&quot;M 325 311.12 L 328.5 318.12 L 325 316.37 L 321.5 318.12 Z&quot; fill=&quot;#000000&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(222.5,384.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;45&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;&quot;&gt;Success&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;23&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;Success&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;ellipse cx=&quot;165&quot; cy=&quot;270&quot; rx=&quot;40&quot; ry=&quot;40&quot; fill=&quot;#dae8fc&quot; stroke=&quot;#6c8ebf&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(143.5,256.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;42&quot; height=&quot;26&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 44px; white-space: nowrap; overflow-wrap: normal; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;&quot;&gt;pending&lt;br /&gt;action&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;21&quot; y=&quot;19&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;pending&amp;lt;br&amp;gt;action&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;path d=&quot;M 0 350 L 495 350&quot; fill=&quot;none&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; stroke-dasharray=&quot;3 3&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(506.5,344.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;133&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: left;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;&quot;&gt;Client call to the gateway&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;67&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;Client call to the gateway&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;
&lt;/center&gt;

&lt;p&gt;In both situations, when moving to Sources and then to Payment Methods, my role was to &lt;strong&gt;adapt and extend our existing abstractions&lt;/strong&gt; to isolate those new concepts, specific to Stripe, as much as possible from the rest of the system to finally plug the new APIs in. I attended Stripe’s workshop, worked with other squads to clarify what the impact was going to be on our product, did a lot of Q&amp;amp;A, monitored the releases, challenged our testing strategy for Stripe’s integration, tuned the integration during the releases, fixed bugs and so on.&lt;/p&gt;

&lt;p&gt;As I mentioned, in addition to receiving money, we also dispatch it to our partners. Each payment must match certain transactions between actors.&lt;/p&gt;

&lt;center&gt;
  &lt;a href=&quot;https://d2ddoduugvun08.cloudfront.net/items/2p460y3c1o2G322V270s/Screenshot%20from%202019-10-18%2010-33-33.png&quot; target=&quot;_blank&quot; title=&quot;Example of an accounting&quot;&gt;
    &lt;img src=&quot;https://d2ddoduugvun08.cloudfront.net/items/2p460y3c1o2G322V270s/Screenshot%20from%202019-10-18%2010-33-33.png&quot; title=&quot;Example of an accounting&quot; /&gt;
  &lt;/a&gt;
&lt;/center&gt;

&lt;p&gt;We need to pay or debit each of those actors. The squad maintains and scales the &lt;em&gt;payout system&lt;/em&gt;. We do batches of bank transfers to the owners almost every working day. The system has to decide what we should pay to whom and what need to be reviewed by the finance department. With the company’s growth, this part of the system was often subject to technical and operational &lt;strong&gt;scaling&lt;/strong&gt; issues.&lt;/p&gt;

&lt;p&gt;In order to be able to expand to other countries easily we integrated Stripe &lt;a href=&quot;https://stripe.com/connect&quot;&gt;Connect&lt;/a&gt;. With that came a lot of work around KYC (Know Your Customer) compliance. We needed to collect identity documents, billing information, legal information, to add rules in the payouts, etc. Introducing Connect triggered the need to introduce &lt;strong&gt;new concepts and internal processes&lt;/strong&gt;. The impact of such a thing is far-reaching: we needed to make changes to our on-boarding flow to communicate with our partners, ensure that customer support were ready, etc.&lt;/p&gt;

&lt;center&gt;
&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; version=&quot;1.1&quot; width=&quot;100%&quot; viewBox=&quot;-0.5 -0.5 824 142&quot;&gt;&lt;defs /&gt;&lt;g&gt;&lt;rect x=&quot;461&quot; y=&quot;0&quot; width=&quot;210&quot; height=&quot;140&quot; fill=&quot;#ffffff&quot; stroke=&quot;#000000&quot; pointer-events=&quot;none&quot; /&gt;&lt;ellipse cx=&quot;806&quot; cy=&quot;57.5&quot; rx=&quot;7.500000000000001&quot; ry=&quot;7.500000000000001&quot; fill=&quot;#ffffff&quot; stroke=&quot;#000000&quot; pointer-events=&quot;none&quot; /&gt;&lt;path d=&quot;M 806 65 L 806 90 M 806 70 L 791 70 M 806 70 L 821 70 M 806 90 L 791 110 M 806 90 L 821 110&quot; fill=&quot;none&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(787.5,116.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;35&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;&quot;&gt;Owner&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;18&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;Owner&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;path d=&quot;M 541 68 L 501 60 L 477.22 65.29&quot; fill=&quot;none&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;path d=&quot;M 472.09 66.42 L 478.17 61.49 L 477.22 65.29 L 479.68 68.32 Z&quot; fill=&quot;#000000&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(488.5,44.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;25&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;&quot;&gt;KYC&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;13&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;KYC&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;path d=&quot;M 661 80 L 784.63 80&quot; fill=&quot;none&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;path d=&quot;M 789.88 80 L 782.88 83.5 L 784.63 80 L 782.88 76.5 Z&quot; fill=&quot;#000000&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(696.5,84.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;71&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;&quot;&gt;Bank transfer&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;36&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;Bank transfer&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;rect x=&quot;541&quot; y=&quot;50&quot; width=&quot;120&quot; height=&quot;60&quot; rx=&quot;9&quot; ry=&quot;9&quot; fill=&quot;#dae8fc&quot; stroke=&quot;#6c8ebf&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(560.5,72.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;79&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 81px; white-space: nowrap; overflow-wrap: normal; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;&quot;&gt;Stripe Connect&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;40&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;Stripe Connect&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;path d=&quot;M 471 93.33 L 501 100 L 534.76 93.25&quot; fill=&quot;none&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;path d=&quot;M 539.9 92.22 L 533.73 97.02 L 534.76 93.25 L 532.35 90.16 Z&quot; fill=&quot;#000000&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(485.5,107.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;32&quot; height=&quot;26&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;&quot;&gt;Billing&lt;br /&gt;Info&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;16&quot; y=&quot;19&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;[Not supported by viewer]&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;rect x=&quot;351&quot; y=&quot;50&quot; width=&quot;120&quot; height=&quot;60&quot; rx=&quot;9&quot; ry=&quot;9&quot; fill=&quot;#f5f5f5&quot; stroke=&quot;#666666&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(389.5,72.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;41&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(51, 51, 51); line-height: 1.2; vertical-align: top; width: 41px; white-space: nowrap; overflow-wrap: normal; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;&quot;&gt;System&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;21&quot; y=&quot;12&quot; fill=&quot;#333333&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;System&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;path d=&quot;M 31 80 L 134.63 80&quot; fill=&quot;none&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;path d=&quot;M 139.88 80 L 132.88 83.5 L 134.63 80 L 132.88 76.5 Z&quot; fill=&quot;#000000&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(50.5,87.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;61&quot; height=&quot;26&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;&quot;&gt;Credit Card&lt;br /&gt;Payment&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;31&quot; y=&quot;19&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;Credit Card&amp;lt;br&amp;gt;Payment&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;ellipse cx=&quot;16&quot; cy=&quot;57.5&quot; rx=&quot;7.500000000000001&quot; ry=&quot;7.500000000000001&quot; fill=&quot;#ffffff&quot; stroke=&quot;#000000&quot; pointer-events=&quot;none&quot; /&gt;&lt;path d=&quot;M 16 65 L 16 90 M 16 70 L 1 70 M 16 70 L 31 70 M 16 90 L 1 110 M 16 90 L 31 110&quot; fill=&quot;none&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(-1.5,116.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;32&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;&quot;&gt;Driver&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;16&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;Driver&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;path d=&quot;M 261 80 L 344.63 80&quot; fill=&quot;none&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;path d=&quot;M 349.88 80 L 342.88 83.5 L 344.63 80 L 342.88 76.5 Z&quot; fill=&quot;#000000&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(266.5,87.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;68&quot; height=&quot;26&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;&quot;&gt;Payment&lt;br /&gt;Confirmation&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;34&quot; y=&quot;19&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;Payment&amp;lt;br&amp;gt;Confirmation&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;rect x=&quot;141&quot; y=&quot;50&quot; width=&quot;120&quot; height=&quot;60&quot; rx=&quot;9&quot; ry=&quot;9&quot; fill=&quot;#dae8fc&quot; stroke=&quot;#6c8ebf&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(184.5,72.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;31&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 33px; white-space: nowrap; overflow-wrap: normal; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;&quot;&gt;Stripe&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;16&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;Stripe&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;g transform=&quot;translate(523.5,13.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;84&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 84px; white-space: nowrap; overflow-wrap: normal; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;&quot;&gt;New integration&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;42&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;New integration&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;
&lt;/center&gt;

&lt;p&gt;It is better to identify the consequences of the new constraints as soon as possible. Fortunately, this is a team effort. Most of this effort is done by the product owner; coworkers will help through kick-offs and reviews too. I need to &lt;strong&gt;be involved in the product&lt;/strong&gt; in order to help to spot those consequences. When we miss something, it is no big deal, we find out and &lt;strong&gt;adapt&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;moving-forward&quot;&gt;Moving forward&lt;/h4&gt;

&lt;p&gt;Our application and its accounting system was centered around a single concept: the rental. The assumption that we’re dealing with a rental had firmly taken root throughout the app and coupled things together.&lt;/p&gt;

&lt;p&gt;With &lt;a href=&quot;https://www.drivy.com/open-proprietaire&quot;&gt;Drivy Open&lt;/a&gt;, we were actually selling something else entirely: subscriptions to a service. Whilst Open was still a startup inside the startup, we operated a separate system for everything. Because it was a great success, we incrementally merged Drivy Open to the main application. Everyone worked hard to make Drivy Open the future of Drivy. On my side, it was a challenge to untangle all the rental-coupled logic that was everywhere in the application in order to build more flexible sub-systems.&lt;/p&gt;

&lt;center&gt;
&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; version=&quot;1.1&quot; width=&quot;571px&quot; height=&quot;162px&quot; viewBox=&quot;-0.5 -0.5 571 162&quot;&gt;&lt;defs /&gt;&lt;g&gt;&lt;rect x=&quot;0&quot; y=&quot;20&quot; width=&quot;240&quot; height=&quot;140&quot; rx=&quot;21&quot; ry=&quot;21&quot; fill=&quot;#f5f5f5&quot; stroke=&quot;#666666&quot; pointer-events=&quot;none&quot; /&gt;&lt;rect x=&quot;20&quot; y=&quot;70&quot; width=&quot;60&quot; height=&quot;60&quot; fill=&quot;#ffffff&quot; stroke=&quot;#000000&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(32.5,93.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;34&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 36px; white-space: nowrap; overflow-wrap: normal; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;&quot;&gt;Rental&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;17&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;Rental&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;g transform=&quot;translate(69.5,33.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;101&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 101px; white-space: nowrap; overflow-wrap: normal; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;&quot;&gt;Accounting system&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;51&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;Accounting system&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;rect x=&quot;90&quot; y=&quot;60&quot; width=&quot;110&quot; height=&quot;60&quot; fill=&quot;#ffffff&quot; stroke=&quot;#000000&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(100.5,83.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;88&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 88px; white-space: nowrap; overflow-wrap: normal; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;&quot;&gt;Accounting Stuff&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;44&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;Accounting Stuff&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;rect x=&quot;100&quot; y=&quot;70&quot; width=&quot;110&quot; height=&quot;60&quot; fill=&quot;#ffffff&quot; stroke=&quot;#000000&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(110.5,93.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;88&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 88px; white-space: nowrap; overflow-wrap: normal; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;&quot;&gt;Accounting Stuff&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;44&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;Accounting Stuff&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;rect x=&quot;110&quot; y=&quot;80&quot; width=&quot;110&quot; height=&quot;60&quot; fill=&quot;#ffffff&quot; stroke=&quot;#000000&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(120.5,103.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;88&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 88px; white-space: nowrap; overflow-wrap: normal; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;&quot;&gt;Accounting Stuff&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;44&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;Accounting Stuff&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;rect x=&quot;280&quot; y=&quot;20&quot; width=&quot;180&quot; height=&quot;140&quot; rx=&quot;21&quot; ry=&quot;21&quot; fill=&quot;#f5f5f5&quot; stroke=&quot;#666666&quot; pointer-events=&quot;none&quot; /&gt;&lt;rect x=&quot;300&quot; y=&quot;60&quot; width=&quot;110&quot; height=&quot;60&quot; fill=&quot;#ffffff&quot; stroke=&quot;#000000&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(310.5,83.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;88&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 88px; white-space: nowrap; overflow-wrap: normal; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;&quot;&gt;Accounting Stuff&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;44&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;Accounting Stuff&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;rect x=&quot;310&quot; y=&quot;70&quot; width=&quot;110&quot; height=&quot;60&quot; fill=&quot;#ffffff&quot; stroke=&quot;#000000&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(320.5,93.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;88&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 88px; white-space: nowrap; overflow-wrap: normal; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;&quot;&gt;Accounting Stuff&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;44&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;Accounting Stuff&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;rect x=&quot;320&quot; y=&quot;80&quot; width=&quot;110&quot; height=&quot;60&quot; fill=&quot;#ffffff&quot; stroke=&quot;#000000&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(330.5,103.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;88&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 88px; white-space: nowrap; overflow-wrap: normal; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;&quot;&gt;Accounting Stuff&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;44&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;Accounting Stuff&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;g transform=&quot;translate(319.5,33.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;101&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 101px; white-space: nowrap; overflow-wrap: normal; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;&quot;&gt;Accounting system&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;51&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;Accounting system&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;rect x=&quot;420&quot; y=&quot;75&quot; width=&quot;90&quot; height=&quot;30&quot; fill=&quot;#ffffff&quot; stroke=&quot;#000000&quot; transform=&quot;rotate(-90,465,90)&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(438.5,83.5)rotate(-90,26,6)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;52&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 54px; white-space: nowrap; overflow-wrap: normal; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;&quot;&gt;Interfaces&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;26&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;Interfaces&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;path d=&quot;M 510 72 L 485.91 81.63&quot; fill=&quot;none&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;path d=&quot;M 481.04 83.58 L 486.24 77.74 L 485.91 81.63 L 488.84 84.23 Z&quot; fill=&quot;#000000&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;rect x=&quot;510&quot; y=&quot;30&quot; width=&quot;60&quot; height=&quot;60&quot; fill=&quot;#ffffff&quot; stroke=&quot;#000000&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(522.5,53.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;34&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 36px; white-space: nowrap; overflow-wrap: normal; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;&quot;&gt;Rental&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;17&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;Rental&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;path d=&quot;M 510 114 L 485.62 101&quot; fill=&quot;none&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;path d=&quot;M 480.99 98.53 L 488.81 98.73 L 485.62 101 L 485.52 104.91 Z&quot; fill=&quot;#000000&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;rect x=&quot;510&quot; y=&quot;100&quot; width=&quot;60&quot; height=&quot;60&quot; fill=&quot;#ffffff&quot; stroke=&quot;#000000&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(524.5,123.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;30&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 30px; white-space: nowrap; overflow-wrap: normal; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;&quot;&gt;Open&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;15&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;Open&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;g transform=&quot;translate(105.5,3.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;28&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 29px; white-space: nowrap; overflow-wrap: normal; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;&quot;&gt;From&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;14&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;From&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;g transform=&quot;translate(363.5,3.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;12&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 14px; white-space: nowrap; overflow-wrap: normal; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;&quot;&gt;To&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;6&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;To&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;path d=&quot;M 260 160 L 260 0&quot; fill=&quot;none&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; stroke-dasharray=&quot;3 3&quot; pointer-events=&quot;none&quot; /&gt;&lt;/g&gt;&lt;/svg&gt;
&lt;/center&gt;

&lt;p&gt;To accomplish this, we needed to establish &lt;strong&gt;a long-term vision&lt;/strong&gt;. Refactoring a whole system in one go would be a very big investment. Also, by doing it slowly, we can learn along the way. Each feature becomes a good opportunity to advance toward the vision. If a feature doesn’t fit that vision well, both the vision and the feature get the opportunity to get reworked.&lt;/p&gt;

&lt;center&gt;
&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; version=&quot;1.1&quot; width=&quot;541px&quot; height=&quot;274px&quot; viewBox=&quot;-0.5 -0.5 541 274&quot;&gt;&lt;defs /&gt;&lt;g&gt;&lt;g transform=&quot;translate(179.5,256.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;181&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 181px; white-space: nowrap; overflow-wrap: normal; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;&quot;&gt;&lt;u&gt;Adjusting the vision along the way&lt;/u&gt;&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;91&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;&amp;lt;u&amp;gt;Adjusting the vision along the way&amp;lt;/u&amp;gt;&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;ellipse cx=&quot;30&quot; cy=&quot;160&quot; rx=&quot;30&quot; ry=&quot;30&quot; fill=&quot;#dae8fc&quot; stroke=&quot;#6c8ebf&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(8.5,146.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;42&quot; height=&quot;26&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 42px; white-space: nowrap; overflow-wrap: normal; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;&quot;&gt;Starting&lt;br /&gt;point&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;21&quot; y=&quot;19&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;Starting&amp;lt;br&amp;gt;point&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;ellipse cx=&quot;510&quot; cy=&quot;30&quot; rx=&quot;30&quot; ry=&quot;30&quot; fill=&quot;#f5f5f5&quot; stroke=&quot;#666666&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(493.5,23.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;32&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(51, 51, 51); line-height: 1.2; vertical-align: top; width: 34px; white-space: nowrap; overflow-wrap: normal; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;&quot;&gt;&lt;strike&gt;Vision&lt;/strike&gt;&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;16&quot; y=&quot;12&quot; fill=&quot;#333333&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;[Not supported by viewer]&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;ellipse cx=&quot;390&quot; cy=&quot;140&quot; rx=&quot;30&quot; ry=&quot;30&quot; fill=&quot;#d5e8d4&quot; stroke=&quot;#82b366&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(362.5,133.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;54&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 54px; white-space: nowrap; overflow-wrap: normal; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;&quot;&gt;Increment&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;27&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;Increment&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;path d=&quot;M 289.67 155.55 L 354.06 145.54&quot; fill=&quot;none&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;path d=&quot;M 359.24 144.73 L 352.86 149.27 L 354.06 145.54 L 351.79 142.35 Z&quot; fill=&quot;#000000&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;ellipse cx=&quot;260&quot; cy=&quot;160&quot; rx=&quot;30&quot; ry=&quot;30&quot; fill=&quot;#d5e8d4&quot; stroke=&quot;#82b366&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(232.5,153.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;54&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 54px; white-space: nowrap; overflow-wrap: normal; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;&quot;&gt;Increment&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;27&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;Increment&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;path d=&quot;M 174.04 137.52 L 224.81 150.81&quot; fill=&quot;none&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;path d=&quot;M 229.89 152.14 L 222.23 153.76 L 224.81 150.81 L 224.01 146.98 Z&quot; fill=&quot;#000000&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;ellipse cx=&quot;145&quot; cy=&quot;130&quot; rx=&quot;30&quot; ry=&quot;30&quot; fill=&quot;#d5e8d4&quot; stroke=&quot;#82b366&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(117.5,123.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;54&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 54px; white-space: nowrap; overflow-wrap: normal; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;&quot;&gt;Increment&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;27&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;Increment&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;path d=&quot;M 59.04 152.48 L 109.81 139.19&quot; fill=&quot;none&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;path d=&quot;M 114.89 137.86 L 109.01 143.02 L 109.81 139.19 L 107.23 136.24 Z&quot; fill=&quot;#000000&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; pointer-events=&quot;none&quot; /&gt;&lt;path d=&quot;M 481.07 37.92 L 173.93 122.07&quot; fill=&quot;none&quot; stroke=&quot;#666666&quot; stroke-miterlimit=&quot;10&quot; stroke-dasharray=&quot;3 3&quot; pointer-events=&quot;none&quot; /&gt;&lt;path d=&quot;M 481.08 222.02 L 288.89 168.09&quot; fill=&quot;none&quot; stroke=&quot;#666666&quot; stroke-miterlimit=&quot;10&quot; stroke-dasharray=&quot;3 3&quot; pointer-events=&quot;none&quot; /&gt;&lt;ellipse cx=&quot;510&quot; cy=&quot;230&quot; rx=&quot;30&quot; ry=&quot;30&quot; fill=&quot;#f5f5f5&quot; stroke=&quot;#666666&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(493.5,223.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;32&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(51, 51, 51); line-height: 1.2; vertical-align: top; width: 34px; white-space: nowrap; overflow-wrap: normal; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;&quot;&gt;&lt;strike&gt;Vision&lt;/strike&gt;&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;16&quot; y=&quot;12&quot; fill=&quot;#333333&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;[Not supported by viewer]&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;path d=&quot;M 480.41 124.93 L 419.59 135.07&quot; fill=&quot;none&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot; stroke-dasharray=&quot;3 3&quot; pointer-events=&quot;none&quot; /&gt;&lt;ellipse cx=&quot;510&quot; cy=&quot;120&quot; rx=&quot;30&quot; ry=&quot;30&quot; fill=&quot;#dae8fc&quot; stroke=&quot;#6c8ebf&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(493.5,113.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;32&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 34px; white-space: nowrap; overflow-wrap: normal; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;&quot;&gt;Vision&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;16&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;Vision&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;
&lt;/center&gt;

&lt;p&gt;Not rushing through the vision could get frustrating. It would solve most of our current issues, be more efficient, easier to maintain and so on. I said frustrating because moving on to that vision is definitely subject to the needs of the company. As long as the users are happy, and we can move fast enough, we don’t need to rush into building it. Thus we need to &lt;strong&gt;be patient&lt;/strong&gt;. We wait for the opportunities to make progress on it. When planning and discussing with the squad, we can elaborate that vision together. We also have to &lt;strong&gt;make trade-offs&lt;/strong&gt; between short-term and long-term investments.&lt;/p&gt;

&lt;h4 id=&quot;supporting-other-squads&quot;&gt;Supporting other squads&lt;/h4&gt;

&lt;p&gt;We’re dealing with a &lt;a href=&quot;https://m.signalvnoise.com/the-majestic-monolith/&quot;&gt;majestic monolith&lt;/a&gt;. A given functional scope matches a certain area in the code. Many scopes require interaction with the payments, or with the accounting. Team organization evolved quickly. It evolved quicker than the code itself. We’re organized in cross-functional teams with a given scope (inspired by &lt;a href=&quot;https://labs.spotify.com/2014/03/27/spotify-engineering-culture-part-1/&quot;&gt;Spotify’s squads&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Many squads will at some point need &lt;em&gt;something&lt;/em&gt; from the finance squad. It could be some assistance for a given task, or it could be a feature that isn’t yet supported and that we’ll need to add. This brings its fair share of effort in term of planning prioritisation. It also encourages interaction and &lt;strong&gt;cross-squad collaboration&lt;/strong&gt; which I enjoy. So in addition to working on the system itself, I’m often in &lt;strong&gt;a support role&lt;/strong&gt; to other squads. It’s very rewarding, but sometimes this dependency becomes a bottleneck for the team’s outcomes. Fortunately, the long-term vision solves it!&lt;/p&gt;

&lt;p&gt;To avoid that bottleneck, we &lt;strong&gt;aim for a &lt;a href=&quot;https://engineering.shopify.com/blogs/engineering/deconstructing-monolith-designing-software-maximizes-developer-productivity&quot;&gt;modular monolith&lt;/a&gt;&lt;/strong&gt;. We need to &lt;strong&gt;expose clear boundaries&lt;/strong&gt; of what the subsystems are that the finance squad must provide, in term of &lt;strong&gt;scope and APIs&lt;/strong&gt;. I, obviously, would like to reduce our scope. But wait, it’s not that simple… Features are built on the scope I would like to get rid of. It means than if we move a boundary between &lt;em&gt;A&lt;/em&gt; and &lt;em&gt;B&lt;/em&gt;, the scope of subsystem &lt;em&gt;A&lt;/em&gt; will shrink and leave a hole between &lt;em&gt;A&lt;/em&gt; and &lt;em&gt;B&lt;/em&gt;. So my job would be to deprecate that scope; to prevent further features to rely on it. Then, thinking about how to fill the void for the existing features. Maybe by adding stuff to B? Maybe by filling the void with another subsystem? Maybe the void belongs to subsystem A after all?&lt;/p&gt;

&lt;center&gt;
&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; version=&quot;1.1&quot; width=&quot;321px&quot; height=&quot;181px&quot; viewBox=&quot;-0.5 -0.5 321 181&quot;&gt;&lt;defs /&gt;&lt;g&gt;&lt;rect x=&quot;0&quot; y=&quot;0&quot; width=&quot;180&quot; height=&quot;100&quot; rx=&quot;15&quot; ry=&quot;15&quot; fill=&quot;#dae8fc&quot; stroke=&quot;#6c8ebf&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(54.5,43.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;71&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 71px; white-space: nowrap; overflow-wrap: normal; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;&quot;&gt;Subsystem A&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;36&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;Subsystem A&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;rect x=&quot;140&quot; y=&quot;60&quot; width=&quot;180&quot; height=&quot;100&quot; rx=&quot;15&quot; ry=&quot;15&quot; fill=&quot;#d5e8d4&quot; stroke=&quot;#82b366&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(194.5,103.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;71&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 71px; white-space: nowrap; overflow-wrap: normal; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;&quot;&gt;Subsystem B&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;36&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;Subsystem B&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;rect x=&quot;140&quot; y=&quot;60&quot; width=&quot;40&quot; height=&quot;40&quot; fill=&quot;#f8cecc&quot; stroke=&quot;#b85450&quot; pointer-events=&quot;none&quot; /&gt;&lt;g transform=&quot;translate(156.5,73.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;7&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 7px; white-space: nowrap; overflow-wrap: normal; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;&quot;&gt;?&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;4&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;?&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;g transform=&quot;translate(80.5,163.5)&quot;&gt;&lt;switch&gt;&lt;foreignObject style=&quot;overflow:visible;&quot; pointer-events=&quot;none&quot; width=&quot;158&quot; height=&quot;12&quot; requiredFeatures=&quot;http://www.w3.org/TR/SVG11/feature#Extensibility&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 158px; white-space: nowrap; overflow-wrap: normal; text-align: center;&quot;&gt;&lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;&quot;&gt;&lt;u&gt;What to do with the red area?&lt;/u&gt;&lt;/div&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;text x=&quot;79&quot; y=&quot;12&quot; fill=&quot;#000000&quot; text-anchor=&quot;middle&quot; font-size=&quot;12px&quot; font-family=&quot;Helvetica&quot;&gt;&amp;lt;u&amp;gt;What to do with the red area?&amp;lt;/u&amp;gt;&lt;/text&gt;&lt;/switch&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;
&lt;/center&gt;

&lt;p&gt;To achieve that, I must stay alert, keep the vision in mind, say no, offer alternatives, make it clear that it is a long-term investment, … Deprecating scope provides no short-term business value. But, the more the team grows, the greater the value of this investment when it pays off.&lt;/p&gt;

&lt;h4 id=&quot;reporting&quot;&gt;Reporting&lt;/h4&gt;

&lt;p&gt;One of the most important responsibilities of the squad is to produce reporting for the finance department to use. Seems boring, doesn’t it? Not to me it doesn’t! The needs of a finance department can create a lot of constraints that are fun to play around with.&lt;/p&gt;

&lt;p&gt;Over time, this reporting pushed the system to be more robust. At some point in the past, the finance department was using a single report with all the figures for each rental the company did, &lt;em&gt;since forever&lt;/em&gt;. In order to get a monthly vision, the technique was to &lt;em&gt;calculate the difference between the report from month N and N-1&lt;/em&gt;. This clever way was found in order to cope with the fact that some changes could happen to past data, for instance an adjustment on an old rental. Because of the volumes, such a technique wasn’t working anymore. The extract was too big to work with, and too long to generate.&lt;/p&gt;

&lt;center&gt;
  &lt;a href=&quot;https://d2ddoduugvun08.cloudfront.net/items/362M2R2q2g2l3q031K2h/Untitled%20Diagram.png&quot; target=&quot;_blank&quot; title=&quot;Rental-based approach&quot;&gt;
    &lt;img src=&quot;https://d2ddoduugvun08.cloudfront.net/items/362M2R2q2g2l3q031K2h/Untitled%20Diagram.png&quot; title=&quot;Rental-based approach&quot; /&gt;
  &lt;/a&gt;
&lt;/center&gt;

&lt;p&gt;It took &lt;strong&gt;months of work&lt;/strong&gt; to take the system to a point where it could generate many &lt;em&gt;small monthly extracts&lt;/em&gt; with only the data of what happened that month. We needed to find out a clear way of cutting exports, to detect modification of the past, to find out ways of avoiding those modifications, to be confident that we all we did was equivalent to the previous technique, and to do the migration correctly. We went from rental-based extracts to invoice-based ones. Maybe this doesn’t seem much to you but I’ve faced lots of technical implications while trying to figure out reporting.&lt;/p&gt;

&lt;center&gt;
  &lt;a href=&quot;https://d2ddoduugvun08.cloudfront.net/items/1C2E1m1l1K3n2E0n3H0F/Untitled%20Diagram%20(1).png&quot; target=&quot;_blank&quot; title=&quot;Invoice-based approach&quot;&gt;
    &lt;img src=&quot;https://d2ddoduugvun08.cloudfront.net/items/1C2E1m1l1K3n2E0n3H0F/Untitled%20Diagram%20(1).png&quot; title=&quot;Invoice-based approach&quot; /&gt;
  &lt;/a&gt;
&lt;/center&gt;

&lt;p&gt;A good thing is that I mostly care about &lt;strong&gt;keeping the accounting system sound&lt;/strong&gt;. The reports are, in the end, a dozen of - relatively simple - SQL queries that don’t move too much.&lt;/p&gt;

&lt;h4 id=&quot;small-features&quot;&gt;Small features&lt;/h4&gt;

&lt;p&gt;Alongside the big projects and the long-term vision, there is a lot of other features that I do. Those are smaller and can be done in less than a few days. Usually those are features that &lt;strong&gt;improve the team efficiency&lt;/strong&gt;. Here are a few examples: new administration tools, financial processes that get automated, or updates on existing facilities.&lt;/p&gt;

&lt;p&gt;What I like about those is that, in contrast to the other features, they provide &lt;strong&gt;predictable, easy, and quick satisfaction&lt;/strong&gt;. A feature is usually done quickly, shipped, and instantly useful. Many of those features are internal tools. This context is pretty easy to work with:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We only support English in the tools thus we can avoid the internationalization flow.&lt;/li&gt;
  &lt;li&gt;We &lt;em&gt;usually&lt;/em&gt; don’t care about supporting old versions of Internet Explorer.&lt;/li&gt;
  &lt;li&gt;We don’t do complex CSS things: we use an internal bootstrap mixed with our design system.&lt;/li&gt;
  &lt;li&gt;We can iterate very fast.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also like having those small features because they have a &lt;strong&gt;direct impact&lt;/strong&gt; on my coworkers workload so I can be a hero :-)&lt;/p&gt;

&lt;h4 id=&quot;data-analysis&quot;&gt;Data analysis&lt;/h4&gt;

&lt;p&gt;We are dealing with a database that has been holding the company’s data for almost a decade. Still more challenging, is the fact that we collect data from our providers, unstructured &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jsons&lt;/code&gt; fields, and even others companies’ data that we imported. Given the timescale and the diversity of sources, data isn’t always consistent with today’s happy path. We’ve got some &lt;a href=&quot;https://drivy.engineering/checker-jobs/&quot;&gt;safety nets&lt;/a&gt; in place to help us gain confidence that the data stay as we expect over time.&lt;/p&gt;

&lt;p&gt;Still, before adding a feature, we often need to dig in the data a little bit. It helps understand the volumes we’re dealing with, to be sure we have no holes in our thinking, … We don’t have a data-analyst like other squads could have thus we need to do that digging ourselves. This routine is very useful. It allows us to &lt;strong&gt;know the data&lt;/strong&gt; well, and to &lt;strong&gt;keep SQL skills sharp&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We’re also blessed with a product owner that understands, tweaks, and writes SQL requests. When I have an unexpected result, she can proofread my requests and spot missing bits!&lt;/p&gt;

&lt;p&gt;Writing &lt;strong&gt;SQL is a must&lt;/strong&gt; as we sometimes have CPU-expensive logic that we need to translate from Ruby to SQL for efficiency purposes. With our growth and with the diversity of our customers, the &lt;strong&gt;performance truly matters&lt;/strong&gt;. We’re constantly trying to find better ways than duplicating logic from our application code to SQL. To do that, many solutions are used such as introducing immutability, storing more information in the database, building specialized tables, caching, and more.&lt;/p&gt;

&lt;p&gt;We also have a dedicated data department that makes available hundreds of tables with all the information you can imagine. We’re in the process of gaining the ability to maintain our own &lt;a href=&quot;https://en.wikipedia.org/wiki/Extract,_transform,_load&quot;&gt;ETL&lt;/a&gt; pipelines in order to suit our specific needs. I’m really excited by that prospect!&lt;/p&gt;

&lt;h4 id=&quot;more&quot;&gt;More&lt;/h4&gt;

&lt;p&gt;I didn’t mention the way we &lt;a href=&quot;https://drivy.engineering/bug-management/&quot;&gt;manage bugs&lt;/a&gt;, how we &lt;a href=&quot;https://drivy.engineering/continuous-integration/&quot;&gt;deliver software&lt;/a&gt;, how we support the rest of the team when they have a question about the system, … There are many aspects of my job that I left out here but I think I pictured the biggest part.&lt;/p&gt;

&lt;p&gt;If you find all this interesting, if you want to know more or dig into specific points, I encourage you to reach out to me. It would be my pleasure to discuss all this even more!&lt;/p&gt;

</description>
        
          <description>&lt;p&gt;My job title is officially &lt;em&gt;backend engineer&lt;/em&gt; but this is pretty vague. I wanted to explain a bit what I do on a daily basis. First, it is a good reflective exercise for myself. Then, if readers like what I do, maybe some of you will want to &lt;a href=&quot;https://drivy.engineering/jobs/&quot;&gt;join us&lt;/a&gt;!&lt;/p&gt;
</description>
        
        <pubDate>Tue, 29 Oct 2019 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/what-is-my-job-like-as-backend-dev-in-the-finance-squad/</link>
        <guid isPermaLink="true">https://getaround.tech/what-is-my-job-like-as-backend-dev-in-the-finance-squad/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>More tips and tricks for junior developers</title>
        <dc:creator>Emily Fiennes</dc:creator>
        <description>&lt;p&gt;This article follows on from &lt;a href=&quot;https://drivy.engineering/ruby-tricks-for-junior-devs/&quot; target=&quot;_blank&quot;&gt;Clement’s post&lt;/a&gt; in which he details useful tips and tricks learnt while working at Drivy. Like Clement, I undertook &lt;a href=&quot;https://www.lewagon.com/program&quot; target=&quot;_blank&quot;&gt;Le Wagon’s&lt;/a&gt; intensive 9-week bootcamp. The program was great for a rapid overview of the key elements of full-stack engineering.&lt;/p&gt;

&lt;p&gt;Since then, the learning curve has been a steep and stimulating one - at Drivy, I’m surrounded by real dev-warriors. As you can imagine, I relish every pull request I submit or review, for the opportunity to learn new things from my colleagues.&lt;/p&gt;

&lt;p&gt;In this article, I will explore just a handful of the many useful tips and tricks that they have shared with me, in the hope that they will be useful to other junior developers.&lt;/p&gt;

&lt;h3 id=&quot;post-or-putor-patch-&quot;&gt;POST or PUT?….or PATCH ?&lt;/h3&gt;

&lt;p&gt;At Drivy we implement RESTful api design, where CRUD actions match to HTTP verbs. I found the difference between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PUT&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATCH&lt;/code&gt; difficult to grasp, before I encountered concrete examples in the Drivy codebase:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;POST&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST&lt;/code&gt; is used to create a new resource on the server, and maps to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create&lt;/code&gt; controller action. To create a car, i.e. a new row in the database, we need to gather and post to the server the data that corresponds to the columns in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cars&lt;/code&gt; table. This might be:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;is_open: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;make_id: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;53&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;model_id: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;plate_number: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'L87hYQJ'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;registration_year: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2019&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;user_id: &lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We send this information, or payload, to the server at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www.drivy.com/cars&lt;/code&gt;. The server then decides the location, or URI, for the resource - which will also correspond to the resource’s unique ID - and creates the row in our databse corresponding to that location. For example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www.drivy.com/cars/1&lt;/code&gt;. So far, so good…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PATCH and PUT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hang on, both verbs correspond to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt; in CRUD? Yes, but there is a subtle difference.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PUT&lt;/code&gt; overwrites the whole resource at an existing location. If we send the following payload to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www.drivy.com/cars/123&lt;/code&gt;…&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;mileage: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;…the entire resource at location &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/123&lt;/code&gt; will be overwritten i.e. our car’s only attribute will now be its mileage. By the way, if a resource is not found on the server at the given location, a new one is created by the server.&lt;/p&gt;

&lt;p&gt;On the other hand, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATCH&lt;/code&gt; overwrites only the attributes included in the payload. If the attribute is a new one, it is added to the resource. If we send this payload to our original resource, which now resides at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www.drivy.com/cars/1&lt;/code&gt;…&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;mileage: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;is_open: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;… the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_open&lt;/code&gt; attribute will be overwritten, and the mileage attribute added. So once these changes have been applied by the server, we will end up with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Car&lt;/code&gt; resource at location &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www.drivy.com/cars/1&lt;/code&gt; that looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;is_open: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;make_id: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;53&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;mileage: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;model_id: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;plate_number: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'L87hYQJ'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;registration_year: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2019&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;user_id: &lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;manipulating-data-structures-benchmarking-flat_map-vs-mapflatten&quot;&gt;Manipulating data structures: benchmarking &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flat_map&lt;/code&gt; vs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map.flatten&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;One of the first Ruby tools in the toolbox that I encountered during Le Wagon was &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enumerable#map&lt;/code&gt;, and this method can be usefully combined with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Array#flatten&lt;/code&gt;, to return a useable array of resources that might otherwise be nested. Take the following example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# A `car` has many `car_photos`. Imagine we want to get all the photos of all the cars for one of our pro owners. This owner has 56 cars, and each car has at least 3 car_photos. I could:&lt;/span&gt;

&lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:car_photos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With this request, I end up with a data structure that looks something like this&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car_photo_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car_photo_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car_photo_3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car_photo_4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car_photo_5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It’s an array of an array of ruby objects. To be able to use it, I must first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.flatten&lt;/code&gt; the array because the values are nested.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:car_photos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;flatten&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But I know I’ll be using this request a lot, for users with a lot of cars. Maybe I’ll even be rendering all the photos at once. I’m going to need a faster way I can do this, so I’ll benchmark the performance of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.flatten&lt;/code&gt; compared to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.flat_map&lt;/code&gt;. I’ll do this in a temporary rake task (for easy access to database connection) but you might also run it as a script. My rake task requires the &lt;a href=&quot;https://ruby-doc.org/stdlib-2.5.3/libdoc/benchmark/rdoc/Benchmark.html&quot; target=&quot;_blank&quot;&gt;Benchmark&lt;/a&gt; module and looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;benchmark_flat_map_vs_map: :drivy_environment&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'benchmark'&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;cars: :car_photos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;977&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;Benchmark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bmbm&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'flatten'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:car_photos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;flatten&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'flat_map'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;flat_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:car_photos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’m loading all the user data into memory first, so we can just focus on the map comparison without including time needed for database roundtrips. I’ve chosen to use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bmbm&lt;/code&gt; method which does a “rehearsal” run to get a stable runtime environment and eliminate other factors.&lt;/p&gt;

&lt;p&gt;(By the way, &lt;a href=&quot;https://www.youtube.com/watch?v=XL51vf-XBTs&quot; target=&quot;_blank&quot;&gt;this&lt;/a&gt; RailsConf 2019 talk is a really useful and accessible intro to how and when to profile and benchmark your code.)&lt;/p&gt;

&lt;p&gt;So, the results were:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;Rehearsal &lt;span class=&quot;nt&quot;&gt;--------------------------------------------&lt;/span&gt;
flatten    0.006082   0.001934   0.008016 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;  0.010056&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
flat_map   0.000158   0.000015   0.000173 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;  0.000188&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-----------------------------------&lt;/span&gt; total: 0.008189sec

               user     system      total        real
flatten    0.000316   0.000003   0.000319 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;  0.000313&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
flat_map   0.000147   0.000002   0.000149 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;  0.000145&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You’ll notice that flat_map is more than twice as fast than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt;. This latter will create an intermediary array, and so the code has to be iterated over twice.&lt;/p&gt;

&lt;p&gt;This, my friends, is where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flat_map&lt;/code&gt; is useful. Like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; it takes a block:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@user.cars.flat_map(&amp;amp;:car_photos)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;but doesn’t create that intermediary array.&lt;/p&gt;

&lt;p&gt;I used to rely on these out-of-the-box methods, without ever interrogating what was going on. Imagine running the same request involving 1000 power users, each with 50 cars, and each car with 10 photos. Using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flat_map&lt;/code&gt; can significantly help improve performance.&lt;/p&gt;

&lt;h3 id=&quot;-safe-navigation-operatorpart-2&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; Safe Navigation operator…part 2&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://127.0.0.1:4000/ruby-tricks-for-junior-devs/&quot; target=&quot;_blank&quot;&gt;Clement discussed&lt;/a&gt; the use of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; safe navigation operator to safely navigate through layers of object relations.&lt;/p&gt;

&lt;p&gt;In the Owner Success squad, we learned the hard way that method chaining using the safe navigation operator can also be a sure-fire way to introduce bugs - and precisely because navigation is safe, i.e. no errors are raised, they can be excruciatingly difficult to debug.&lt;/p&gt;

&lt;p&gt;When we install an &lt;a href=&quot;http://www.drivy.com/open&quot; target=&quot;_blank&quot;&gt;Open&lt;/a&gt; box in a car, we use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;provider_device_id&lt;/code&gt; given by the box provider. A device id is considered valid on the provider’s api if it is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;in ALL CAPS;&lt;/li&gt;
  &lt;li&gt;with no whitespaces (internal, leading or trailing).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, on our side, the device ids are entered manually in the backoffice. To cover our backs against human error, we format the device number at the time of form submission:&lt;/p&gt;

&lt;p&gt;The &amp;amp; allows us to safely chain the methods, so that in the event that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strip&lt;/code&gt; returns nil, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;upcase&lt;/code&gt; will not raise an error. Great!&lt;/p&gt;

&lt;p&gt;What we didn’t realise is that whilst &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strip&lt;/code&gt; returns the original receiver, even if no changes are made, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strip!&lt;/code&gt; returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nil&lt;/code&gt; in the event that the receiver was not modified. Plus &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strip&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strip!&lt;/code&gt; only deal with trailing and leading whitespaces, &lt;em&gt;not internal ones&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So for a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;provider_device_id&lt;/code&gt; looking something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;s1&quot;&gt;'A dEVice ID 123'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;…&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strip!&lt;/code&gt; returned nil and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;upcase!&lt;/code&gt; was never run on the original object. We didn’t know about it because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nil&amp;amp;.upcase!&lt;/code&gt; was not raising an error. We ended up with lots of device numbers in an invalid state, leading to errors on our external provider’s api, and had to correct them manually with a rake task.&lt;/p&gt;

&lt;p&gt;It’s always worth checking the documentation for the subtle differences between methods with and without the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!&lt;/code&gt;. We generally try to avoid chaining them to avoid introducing bugs like this one.&lt;/p&gt;

&lt;h3 id=&quot;arrays-concat-prepend--and-&quot;&gt;Arrays: concat, prepend, + and «&lt;/h3&gt;

&lt;p&gt;I find it useful to remind myself with clear examples of the precise output and side effects of each of these methods. Methods that modify the original receiver can also be a source of well-hidden bugs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Array#concat&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;array_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Volkswagen'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Vauxhall'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Renault'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;array_2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tesla'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'BMW'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;array_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; ['Volkswagen', 'Vauxhall', 'Renault', 'Tesla', 'BMW']&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;array_1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt;  ['Volkswagen', 'Vauxhall', 'Renault', 'Tesla', 'BMW']&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;array_2&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; ['Tesla', 'BMW']&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Moral of the story: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;array_1&lt;/code&gt; is modified, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;array_2&lt;/code&gt; is unchanged.&lt;/p&gt;

&lt;h2 id=&quot;array&quot;&gt;Array#+&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;array_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Volkswagen'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Vauxhall'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Renault'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;array_2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tesla'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'BMW'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;array_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array_2&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; ['Volkswagen', 'Vauxhall', 'Renault', 'Tesla', 'BMW']&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;array_1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt;  ['Volkswagen', 'Vauxhall', 'Renault']&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;array_2&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; ['Tesla', 'BMW']&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Moral of the story: Neither array is modified.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Array#prepend&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;array_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Volkswagen'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Vauxhall'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Renault'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;array_2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tesla'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'BMW'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;array_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;prepend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; [['Volkswagen', 'Vauxhall', 'Renault'], 'Tesla', 'BMW']&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;array_1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; [['Volkswagen', 'Vauxhall', 'Renault'], 'Tesla', 'BMW']&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;array_2&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; ['Tesla', 'BMW']&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Moral of the story: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;array_1&lt;/code&gt; is modified, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;array_2&lt;/code&gt; is unchanged.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Array#&amp;lt;&amp;lt;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;array_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Volkswagen'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Vauxhall'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Renault'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;array_2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tesla'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'BMW'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;array_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array_2&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt;  ['Volkswagen', 'Vauxhall', 'Renault', ['Tesla', 'BMW']]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;array_1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; ['Volkswagen', 'Vauxhall', 'Renault', ['Tesla', 'BMW']]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;array_2&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt;  ['Tesla', 'BMW']&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Moral of the story: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;array_1&lt;/code&gt; is modified, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;array_2&lt;/code&gt; is unchanged.&lt;/p&gt;

&lt;h3 id=&quot;delegating-methods-with-moduledelegate&quot;&gt;Delegating methods with Module#delegate&lt;/h3&gt;

&lt;p&gt;You can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;delegate&lt;/code&gt; to expose the methods of objects on another class. For example, a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cancellation&lt;/code&gt; belongs to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rental&lt;/code&gt; - as indeed you might expect it to in the real world.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cancellation&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:rental&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;#[...]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;By the way, this database relationship is incidental and not a strict criteria for the use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;delegate&lt;/code&gt;. It is a hint though, that there might be some overlap in the implementation of these two classes, and thus that there may be scope to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;delegate&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cancellations&lt;/code&gt; table might look something like this in the database:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;state&quot;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;integer&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rental_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;integer&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;some_other_id_field&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;decimal&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;some_refund_field&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;decimal&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;some_other_refund_field&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see, it does not have its own &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;currency&lt;/code&gt; column.&lt;/p&gt;

&lt;p&gt;So, what if you need to access the currency of a cancellation? You could:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cancellation.rental.currency&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But this means that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cancellation&lt;/code&gt; object has to know that a rental object has a currency column. That violates the &lt;a href=&quot;https://en.wikipedia.org/wiki/Law_of_Demeter&quot; target=&quot;_blank&quot;&gt;Law of Demeter&lt;/a&gt;, which is the principle that objects should know as little as possible about each other. If our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cancellation&lt;/code&gt; object knows too much about the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rental&lt;/code&gt; object, or is &lt;em&gt;coupled too closely&lt;/em&gt;, then any future changes to the implementation of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rental&lt;/code&gt; class become hard to maintain.&lt;/p&gt;

&lt;p&gt;You can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;delegate&lt;/code&gt; to avoid chainging objects in this way. On the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cancellation&lt;/code&gt; class you can do:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cancellation&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:rental&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:currency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;to: :rental&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;#[...]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, you might call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cancellation.currency&lt;/code&gt; elsewhere in the code. For example:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;invoices = Invoice.where(currency: @cancellation.currency)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This helps keep your code DRYer, avoids object-chaining and respects the law of Demeter. Hoorah!&lt;/p&gt;

&lt;h3 id=&quot;capybarascreenshot&quot;&gt;CapybaraScreenshot&lt;/h3&gt;

&lt;p&gt;The Capybara-Screenshot gem will automatically capture a screenshot for each failure in your test suite. But did you know that you can also manually capture photos? Just pop one of the following directly in your code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Capybara&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Screenshot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;screenshot_and_save_page&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Capybara&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Screenshot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;screenshot_and_open_image&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and a lovely screenshot will be taken of the current step in your integration spec at that point in time. This has helped me countless times to debug my integration specs. You get to see what the user would see at that stage in the flow, and check that all information is correct and displaying as it should. Plus you’ll get a more digestible error output and stacktrace.&lt;/p&gt;

&lt;h3 id=&quot;to_sql&quot;&gt;to_sql&lt;/h3&gt;

&lt;p&gt;9 weeks didn’t leave a whole lot of time to cover SQL in any detail. As I start to work on more complex projects, I need to make data-based decisions or include SQL in my requests for performance reasons. Chaining &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;to_sql&lt;/code&gt; to an ActiveRecord relation returns the SQL statement run by the database adapter against the database to retrieve the results.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OpenDevice.where(“id &amp;lt; ?”, 500).to_sql&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;returns&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`open_devices`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`open_devices`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Little by little, this is helping to improve my understanding of the underlying SQL syntax, rather than relying on the magical layer between me and the database that is provided by ActiveRecord.&lt;/p&gt;

&lt;p&gt;Whether you are setting out on your full-stack adventure, or you already have a bit of experience, I hope this summary of some tips and tricks has been helpful. Don’t hestitate to reach out with comments or feedback :)&lt;/p&gt;
</description>
        
          <description>&lt;p&gt;This article follows on from &lt;a href=&quot;https://drivy.engineering/ruby-tricks-for-junior-devs/&quot; target=&quot;_blank&quot;&gt;Clement’s post&lt;/a&gt; in which he details useful tips and tricks learnt while working at Drivy. Like Clement, I undertook &lt;a href=&quot;https://www.lewagon.com/program&quot; target=&quot;_blank&quot;&gt;Le Wagon’s&lt;/a&gt; intensive 9-week bootcamp. The program was great for a rapid overview of the key elements of full-stack engineering.&lt;/p&gt;
</description>
        
        <pubDate>Wed, 18 Sep 2019 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/more-junior-tricks/</link>
        <guid isPermaLink="true">https://getaround.tech/more-junior-tricks/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>A basic decision tree in Ruby</title>
        <dc:creator>Jean Anquetil</dc:creator>
        <description>&lt;p&gt;Recently, we did a rework of the user’s profile completion flow in our Drivy web and mobile applications. We went from a basic single screen form to a multi-steps one. The idea was to simplify the flow and ask only for the information needed depending on the user’s answers. As we had to deal with multiple possible paths, we decided to work on a little decision tree algorithm.&lt;/p&gt;

&lt;figure&gt;
  &lt;img alt=&quot;Multi steps flow&quot; src=&quot;/assets/posts/2019-08-23-basic-decision-tree-in-ruby/multi_steps_flow.png&quot; /&gt;
  &lt;figcaption&gt;
    Fig 1. The new profile flow
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;what-do-we-need-to-define-our-decision-tree&quot;&gt;What do we need to define our decision tree?&lt;/h2&gt;
&lt;p&gt;Let’s say that our decision tree is made up of multiple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;steps&lt;/code&gt; and for every steps there’s one or several possible answers that we will call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;outcomes&lt;/code&gt;.&lt;/p&gt;

&lt;figure&gt;
  &lt;img alt=&quot;Decision tree drawing&quot; src=&quot;/assets/posts/2019-08-23-basic-decision-tree-in-ruby/decision_tree_figure_1.png&quot; /&gt;
  &lt;figcaption&gt;
    Fig 2. First step
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
  &lt;img alt=&quot;Decision tree drawing&quot; src=&quot;/assets/posts/2019-08-23-basic-decision-tree-in-ruby/decision_tree_figure_2.png&quot; /&gt;
  &lt;figcaption&gt;
    Fig 3. Complete flow made up of outcomes
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;If we know the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;path&lt;/code&gt;, which is made up of outcomes, we will be able to find the next step.&lt;/p&gt;

&lt;figure&gt;
  &lt;img alt=&quot;Decision tree drawing&quot; src=&quot;/assets/posts/2019-08-23-basic-decision-tree-in-ruby/decision_tree_figure_3.png&quot; /&gt;
  &lt;figcaption&gt;
    Fig 4. The path made up of outcomes
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;decision-tree-declaration&quot;&gt;Decision tree declaration&lt;/h2&gt;
&lt;p&gt;The idea is to have a collection where the first element is a step class name and the second one is an object composed of the possible step’s outcomes. For each step’s outcome, we define a collection where the first element is a step class name and the second one is an object…and so on.&lt;/p&gt;

&lt;p&gt;Let’s imagine that we need to ask if the user wants to rent a car or if they own a car and want to add it on the platform.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;DECISION_TREE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;RoleStep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;RoleStep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DRIVER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;DriverStep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;DriverStep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EligibleLicenseYears&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;DriverStep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;IneligibleLicenseYears&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;RoleStep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;OWNER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;OwnerStep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;OwnerStep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CarHasManualTransmission&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;OwnerStep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CarHasAutomaticTransmission&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;step-class-declaration&quot;&gt;Step class declaration&lt;/h2&gt;
&lt;p&gt;The step class would gather its possible outcomes and everything else related to it. For instance, in almost all of our steps we had to deal with a form so this is where we defined it. We could define a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#can_skip?&lt;/code&gt; method that could check if the step has already been filled, or could be skippable somehow. Doing this way, it becomes really convenient to define specific rules on steps.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RoleStep&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;DRIVER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:driver&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;OWNER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:owner&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;form_class&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;RoleStepForm&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;finding-the-next-step&quot;&gt;Finding the next step&lt;/h2&gt;
&lt;p&gt;Once we have our decision tree declared with all of its steps, we need to build a small recursive method that will find the next step according to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;path&lt;/code&gt; (cf figure 4).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;next_step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;path: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;steps: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DECISION_TREE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty?&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;next_steps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;next_step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;path: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;steps: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_steps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And here you are, you can now iterate through the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DECISION_TREE&lt;/code&gt;, giving a path or not, to find the according next step.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;puts next_step.first
&lt;span class=&quot;c&quot;&gt;# =&amp;gt; RoleStep&lt;/span&gt;

puts next_step&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;path: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;RoleStep::OWNER]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.first
&lt;span class=&quot;c&quot;&gt;# =&amp;gt; OwnerStep&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        
          <description>&lt;p&gt;Recently, we did a rework of the user’s profile completion flow in our Drivy web and mobile applications. We went from a basic single screen form to a multi-steps one. The idea was to simplify the flow and ask only for the information needed depending on the user’s answers. As we had to deal with multiple possible paths, we decided to work on a little decision tree algorithm.&lt;/p&gt;
</description>
        
        <pubDate>Fri, 23 Aug 2019 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/basic-decision-tree-in-ruby/</link>
        <guid isPermaLink="true">https://getaround.tech/basic-decision-tree-in-ruby/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Sharing React components with rollup.js</title>
        <dc:creator>Thibaud Esnouf</dc:creator>
        <description>&lt;p&gt;At Drivy, we have defined our very own design system.
This system describes our visual guidelines and rules, and is composed of visual web components.
For each component, we have created a React implementation that could easily be used by our design team to build a web site documentation (thanks to &lt;a href=&quot;https://mdxjs.com/&quot;&gt;MDX&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Having a documented design system was an achievement in itself. But to fully take advantage of it, the final step was to use our React components in other frontend projects.&lt;/p&gt;

&lt;p&gt;In a Node.js world, that means importing them as a node module dependency.&lt;/p&gt;

&lt;p&gt;The main steps are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;bundle the components in a useable manner&lt;/li&gt;
  &lt;li&gt;publish the result through NPM&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;project-characteristics&quot;&gt;Project characteristics&lt;/h2&gt;

&lt;p&gt;Key points of the design system project to bundle:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;React components (tsx files)&lt;/li&gt;
  &lt;li&gt;TypeScript (ts files)&lt;/li&gt;
  &lt;li&gt;SVG assets&lt;/li&gt;
  &lt;li&gt;Sass classes and utilities&lt;/li&gt;
  &lt;li&gt;Design tokens (single source of truth variables stored in JSON files, used to propagate our design decisions)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Notice that some of the sources have a specific syntax (tsx/ts files) and have to be transformed (transpiled) to be read by a browser.
Bundling process must produce outputs that can be seamlessly imported in a tier project without extra configuration or processing.&lt;/p&gt;

&lt;h2 id=&quot;building-the-project-with-rollupjs&quot;&gt;Building the project with rollup.js&lt;/h2&gt;

&lt;p&gt;We chose rollup.js as bundler tool for our library because it is well adapted: it’s efficient and easy to configure. Other module bundlers like Webpack and Parcel provide advanced features for a developer (dev-server with hot module replacement, for example) but those things are not required for our achievement.&lt;/p&gt;

&lt;p&gt;We want the following outputs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;React components as ES modules (preferred to CommonJs as it is more future proof and allows &lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/optimizing-javascript/tree-shaking/&quot;&gt;tree-shaking&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;TypeScript declarations files&lt;/li&gt;
  &lt;li&gt;SVGs&lt;/li&gt;
  &lt;li&gt;Source maps&lt;/li&gt;
  &lt;li&gt;Sass files&lt;/li&gt;
  &lt;li&gt;Design tokens&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;rollup-configuration&quot;&gt;Rollup configuration&lt;/h3&gt;

&lt;p&gt;Rollup is configured thanks to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rollup.config.js&lt;/code&gt; file at the root of our project.&lt;/p&gt;

&lt;h4 id=&quot;plugins&quot;&gt;Plugins&lt;/h4&gt;

&lt;p&gt;Rollup has a bunch of plugins. For our needs we use:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;rollup-plugin-typescript2 (to transpile TypeScript files and generate declarations)&lt;/li&gt;
  &lt;li&gt;rollup-plugin-json (to convert our token .json files to ES6 modules)&lt;/li&gt;
  &lt;li&gt;rollup-plugin-svgo (to export SVGs through JavaScript)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note:
currently, we don’t use a plugin to convert our Sass files to CSS ones.
It’s a deliberate choice as we want to output our design system variables and mixins to use them in other projects using Sass.
But it would be great if we could support both Sass and CSS, in order to stick with our “ready-to-use” principle.
So we’ve scheduled this task in our roadmap.&lt;/p&gt;

&lt;h4 id=&quot;entry-point-and-output&quot;&gt;Entry point and output&lt;/h4&gt;

&lt;p&gt;Rollup’s config requires an entry point that will be used to resolve the dependencies&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;input&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/index.ts&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This file will export all our components&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BasicCell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;./components/BasicCell/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BulletList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BulletListItem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;./components/BulletList/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ButtonGroup&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;./components/Button/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then we define how the build result should be output&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;output&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;file&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dist/index.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;format&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;esm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;sourcemap&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;The result will be put in a dist folder&lt;/li&gt;
  &lt;li&gt;We tell Rollup to generate the sourcemaps&lt;/li&gt;
  &lt;li&gt;We tell Rollup to generate &lt;a href=&quot;https://rollupjs.org/guide/en#es-module-syntax&quot;&gt;ES modules&lt;/a&gt;.
This will allow Tree Shaking&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;exclude-external-dependencies&quot;&gt;Exclude external dependencies&lt;/h3&gt;

&lt;p&gt;Our project is based on React and so uses some external dependencies (react, react-dom, classnames …).
We don’t want such libraries to be resolved and bundled with our project.
So, all dependencies external to the project (described in package.json dependencies/peerDependencies) are configured to be excluded from the build process&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;external&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pkg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pkg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;peerDependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;typescript-declarations-types&quot;&gt;TypeScript declarations (types)&lt;/h2&gt;

&lt;p&gt;Our project being set up with TypeScript, we want to export our declarations files (*.d.ts) so our lib API will be smoothly consumed (available) by any other TypeScript project.&lt;/p&gt;

&lt;p&gt;We have 2 options:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Put declaration files with the same name and at the same level as your JavaScript modules. So for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello.js&lt;/code&gt; module, TypeScript will look for a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello.d.ts&lt;/code&gt; file in the same directory.&lt;/li&gt;
  &lt;li&gt;Declare the entry point for your declaration file in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package.json&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;types&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;types/index.d.ts&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We recommend the latter. It allows you to separate the types (TypeScript related) from your JavaScript code source&lt;/p&gt;

&lt;h3 id=&quot;going-further-with-the-rollup-configuration&quot;&gt;Going further with the rollup configuration&lt;/h3&gt;

&lt;p&gt;To obtain this result, you can configure the TypeScript compiler (tsconfig/json) to generate the declaration files in a dedicated directory&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;compilerOptions&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;declaration&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;declarationDir&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dist/types&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then you can configure rollup to use this setting for its TypeScript plugin&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;typescript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;typescript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;typescript&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;useTsconfigDeclarationDir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;build-task&quot;&gt;Build task&lt;/h2&gt;

&lt;p&gt;We launch rollup to build our project:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;yarn rollup &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The result is available in the dist folder (as defined in the rollup output config)&lt;/p&gt;

&lt;figure&gt;
&lt;img alt=&quot;rollup build result&quot; src=&quot;/assets/posts/2019-07-24-sharing-react-components-with-rollupjs/rollup_build_result.png&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;Note:
Our full build script launches rollup then copy our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package.json&lt;/code&gt; to the dist folder.&lt;/p&gt;

&lt;h2 id=&quot;publishing&quot;&gt;Publishing&lt;/h2&gt;

&lt;p&gt;We are now ready to publish our package to NPM so it will be available as a dependency to another project (using npm install / yarn add).
NPM has different mechanisms to specify the files to package and publish:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Blacklist strategy (.gitignore + .npmignore )&lt;/li&gt;
  &lt;li&gt;Whitelist strategy: &lt;a href=&quot;https://docs.npmjs.com/files/package.json#files&quot;&gt;files configuration in package.json&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These 2 approaches are somewhat different, and one is not necessarily preferable to the other. However, the blacklisting strategy tends to be riskier as it exposes files that are sensitive or not relevant.
Keep in mind that some files are always included, regardless of settings:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;package.json&lt;/li&gt;
  &lt;li&gt;README&lt;/li&gt;
  &lt;li&gt;CHANGES / CHANGELOG / HISTORY&lt;/li&gt;
  &lt;li&gt;LICENSE / LICENCE&lt;/li&gt;
  &lt;li&gt;NOTICE&lt;/li&gt;
  &lt;li&gt;The file in the “main” field&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package.json&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;files&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tokens/**/*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;**/*.{scss,d.ts,js.map,svg,png,woff,woff2}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.stylelintrc.js&quot;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Tip:
It’s not easy to visualize files that are packaged by NPM (npmjs.com doesn’t list files of a module)
To do so with your local project, execute the following command in the directory containing your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package.json&lt;/code&gt; file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;npm pack &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-xvzf&lt;/span&gt; _.tgz &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; package _.tgz&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It will output the files that will be included in the publishing process&lt;/p&gt;

&lt;h2 id=&quot;testingusing-locally&quot;&gt;Testing/using locally&lt;/h2&gt;

&lt;p&gt;When importing our components in a tier-project and using them in a real context, we can often encounter conflicts (from tier css rules for example) and unintended behavior, or simply discover some bugs.
We can’t afford to wait for our components to be published to encounter those issues.
We must have a way to test our components in a tier project before publishing to NPM
We can use the npm/yarn link mechanism to symlink our component project and add it to the node_modules of another one.
However, such a mechanism doesn’t allow us to perfectly reflect how our project will be packaged by NPM and deployed in another project. Plus, some configuration files that would not be present in the node modules (filtered by the NPM publishing process) can interfere.
To be closer to the real process (how our package will be published and installed), we used an advanced tool named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yalc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yalc&lt;/code&gt; allows to package a project and add it as a node module like NPM would do, but in a local store.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;We can now use our design system assets in any frontend projects.
There are natural advantages that come with using a centralised library: single source of truth, reduced maintenance cost, etc. But using a centralised library also enables us to invest more in our design system, which in turn makes it easier for the design system to be adopted company-wide.&lt;/p&gt;
</description>
        
          <description>&lt;p&gt;At Drivy, we have defined our very own design system.
This system describes our visual guidelines and rules, and is composed of visual web components.
For each component, we have created a React implementation that could easily be used by our design team to build a web site documentation (thanks to &lt;a href=&quot;https://mdxjs.com/&quot;&gt;MDX&lt;/a&gt;).&lt;/p&gt;
</description>
        
        <pubDate>Wed, 24 Jul 2019 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/sharing-react-components-with-rollupjs/</link>
        <guid isPermaLink="true">https://getaround.tech/sharing-react-components-with-rollupjs/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>How Kotlin's Coroutines help us to deal with Bluetooth</title>
        <dc:creator>Romain Guefveneu</dc:creator>
        <description>&lt;p&gt;At Drivy, we want to enable users to open the car even if it’s on the bottom floor of the deepest, underground parking. Since we can’t rely on a GSM connection when so deep underground, we need to use a Bluetooth connection. &lt;br /&gt;
But communicating with a Bluetooth device is easier said than done, due to the fact that it’s low-level and requires many asynchronous calls. Let’s see how we can improve this.&lt;/p&gt;

&lt;h2 id=&quot;bluetooth-101&quot;&gt;Bluetooth 101&lt;/h2&gt;
&lt;p&gt;Bluetooth communication is not exactly like HTTP communication. We don’t have URLs or ports. All we have are services and caracteristics. And UUIDs, lots of UUIDs.&lt;/p&gt;

&lt;p&gt;According to the &lt;a href=&quot;https://www.bluetooth.com/specifications/gatt/services/&quot;&gt;official doc&lt;/a&gt;, Bluetooth GATT services are collections of characteristics and relationships to other services that encapsulate the behavior of part of a device.
So basically a service is a set of characteristics.&lt;/p&gt;

&lt;p&gt;According to the same &lt;a href=&quot;https://www.bluetooth.com/specifications/gatt/characteristics/&quot;&gt;official doc&lt;/a&gt;, “Characteristics are defined attribute types that contain a single logical value.”&lt;br /&gt;
Characteristics are where the data is, that’s what we want to read or write.&lt;/p&gt;

&lt;p&gt;Last thing, services and characteristics are identified by UUIDs.&lt;/p&gt;

&lt;h2 id=&quot;bluetooth-callbacks&quot;&gt;Bluetooth callbacks&lt;/h2&gt;
&lt;p&gt;On Android, a Bluetooth device communicates with us via a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BluetoothGattCallback&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BluetoothGattCallback&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onConnectionStateChange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gatt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BluetoothGatt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onServicesDiscovered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gatt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BluetoothGatt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCharacteristicRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gatt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BluetoothGatt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;characteristic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BluetoothGattCharacteristic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCharacteristicWrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gatt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BluetoothGatt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;characteristic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BluetoothGattCharacteristic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;    &lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;    [...]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here is our issue: when we write a characteristic to the Bluetooth device to send a command, we want to wait for the device’s acknowledgement to continue. In other words, we want to communicate synchronously with the device.&lt;br /&gt;
To do so, we need to block the execution until &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onCharacteristicWrite&lt;/code&gt; is called back for my characteristic.&lt;/p&gt;

&lt;h2 id=&quot;kotlins-coroutines-and-channels&quot;&gt;Kotlin’s coroutines and channels&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://kotlinlang.org/docs/reference/coroutines-overview.html&quot;&gt;Coroutines&lt;/a&gt; are a great tool for dealing with asynchronous calls. Combined with channels, we have here the perfect tools to communicate synchronously with a Bluetooth device.&lt;/p&gt;

&lt;p&gt;Here is a simple “Hello World!” using a channel:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;suspend&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;coroutineScope&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;channel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;launch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3000L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;offer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello ${channel.receive()}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;channel.receive()&lt;/code&gt; will wait for the channel to have something to offer. In this way, “Hello World!” will be displayed 3 seconds later.&lt;/p&gt;

&lt;h2 id=&quot;bluetooth-callbacks-coroutines-and-channels&quot;&gt;Bluetooth callbacks, Coroutines and Channels&lt;/h2&gt;
&lt;p&gt;What we need is a way to wait for the device acknowledgment before sending another command. We’ll use a coroutine and a channel to achieve this.&lt;/p&gt;

&lt;h3 id=&quot;the-channel-setup&quot;&gt;The channel setup&lt;/h3&gt;
&lt;p&gt;We’ll use a channel of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BluetoothResult&lt;/code&gt;s, a data class composed of the characteristic’s UUID and value, and the event status:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BluetoothResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ByteArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Each call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onCharacteristicRead&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onCharacteristicWrite&lt;/code&gt; will offer to the channel a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BluetoothResult&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;channel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;BluetoothResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;gattCallback&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;BluetoothGattCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCharacteristicRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gatt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BluetoothGatt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;characteristic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BluetoothGattCharacteristic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;offer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;BluetoothResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;characteristic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;characteristic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCharacteristicWrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gatt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BluetoothGatt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;characteristic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BluetoothGattCharacteristic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;offer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;BluetoothResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;characteristic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;characteristic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We now need a function that will wait for the channel to have a matching &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BluetoothResult&lt;/code&gt; to offer:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;suspend&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;waitForResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BluetoothResult&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;withTimeoutOrNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TimeUnit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SECONDS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toMillis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;bluetoothResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BluetoothResult&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bluetoothResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uuid&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;bluetoothResult&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;bluetoothResult&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BluetoothTimeoutException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;waitForResult&lt;/code&gt; function will wait for the channel for 3 seconds, or throw a custom &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BluetoothTimeoutException&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then, we’ll use a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BluetoothGatt.readCharacteristic&lt;/code&gt; function that will wait for the response, via the channel:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;suspend&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BluetoothGatt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;readCharacteristic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serviceUUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;characteristicUUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BluetoothResult&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;characteristic&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serviceUUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getCharacteristic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;characteristicUUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;readCharacteristic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;characteristic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;waitForResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;characteristicUUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Et voilà! Now we can communicate synchronously with a Bluetooth device:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;gatt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BluetoothGatt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;connectToBluetoothDevice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gatt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;readCharacteristic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MY_SERVICE_UUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MY_CHARACTERISTIC_UUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BluetoothTimeoutException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nc&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bluetooth&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Can't communicate with the device.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        
          <description>&lt;p&gt;At Drivy, we want to enable users to open the car even if it’s on the bottom floor of the deepest, underground parking. Since we can’t rely on a GSM connection when so deep underground, we need to use a Bluetooth connection. &lt;br /&gt;
But communicating with a Bluetooth device is easier said than done, due to the fact that it’s low-level and requires many asynchronous calls. Let’s see how we can improve this.&lt;/p&gt;
</description>
        
        <pubDate>Tue, 16 Jul 2019 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/bluetooth-and-coroutines/</link>
        <guid isPermaLink="true">https://getaround.tech/bluetooth-and-coroutines/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Things to consider when choosing a third-party API</title>
        <dc:creator>Christophe Yammouni</dc:creator>
        <description>&lt;p&gt;External third-party-services APIs are useful: they allow you to benefit from the expertise and knowledge that others have acquired on a specific subject - a subject which is not your area of expertise and not the problem in hand. It would take too much time and effort to build and maintain such a service yourself.&lt;/p&gt;

&lt;p&gt;However, choosing an API isn’t always an easy task.&lt;br /&gt;
Indeed, your choice will have an impact on your codebase and database architecture, and even your service itself.
Imagine if your third-party payment-service went down: your customers wouldn’t be able to buy your products.&lt;/p&gt;

&lt;p&gt;There are a lot of services that are alike providing APIs, with similar pricing and features. &lt;br /&gt;
So, how can you be sure you are making the right choice?&lt;br /&gt;
I’ll try to list all the different questions you need to ask yourself before implementing an API, covering documentation, libraries/SDKs, support, pricing, data privacy, and maintenance.&lt;/p&gt;

&lt;h3 id=&quot;documentation&quot;&gt;Documentation&lt;/h3&gt;

&lt;p&gt;Most of the time, when you need to choose a third-party library and there’s no documentation available, you can have a look at the source code to understand how it works and evaluate the code quality.&lt;/p&gt;

&lt;p&gt;For a third-party-service API, as you won’t have access to the source code, you need to find a way to understand how it works, and to evaluate the implementation complexity.&lt;/p&gt;

&lt;p&gt;Proper documentation should give you an idea of how your implementation looks. Most of your questions should be answered.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What’s the data format (&lt;a href=&quot;https://en.wikipedia.org/wiki/JSON&quot;&gt;JSON&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/XML&quot;&gt;XML&lt;/a&gt; etc.)?&lt;/li&gt;
  &lt;li&gt;Which authentication mechanism is required (&lt;a href=&quot;https://en.wikipedia.org/wiki/Basic_access_authentication&quot;&gt;basic auth&lt;/a&gt;, API token, etc.)?&lt;/li&gt;
  &lt;li&gt;How are successes and errors rendered?&lt;/li&gt;
  &lt;li&gt;Which and how many calls do I need to complete my task?&lt;/li&gt;
  &lt;li&gt;For inputs and outputs, which attributes are required? Which type should they be, what do they mean and are they any examples?&lt;/li&gt;
  &lt;li&gt;If there are any string values with a specific format such as date, time, and country, then, which convention do they follow?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some documentation also provides live querying tools, enabling you to run tests to ensure documentation and code are aligned.
If it does not, be sure to find a way to test it before implementing it, because you can find some significant differences between documentation and production APIs.&lt;/p&gt;

&lt;h3 id=&quot;libraries&quot;&gt;Libraries&lt;/h3&gt;

&lt;p&gt;Having an SDK to consume an API can save you a lot of time, but be cautious about them.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Is the SDK available in your language?&lt;/li&gt;
  &lt;li&gt;Does it follow the latest API version?&lt;/li&gt;
  &lt;li&gt;Does it handle all the features you want?&lt;/li&gt;
  &lt;li&gt;Does it provide useful feedback for errors?&lt;/li&gt;
  &lt;li&gt;Does it have any dependencies? Are they up-to-date? Beware that they might conflict with yours.&lt;/li&gt;
  &lt;li&gt;What size is it? For example, this can be a red flag for mobile apps: you don’t want to double the size of your app, just because of a third-party SDK.&lt;/li&gt;
  &lt;li&gt;If it has not been written by the company providing the API, be sure it’s mature enough and well maintained. Have a look at open issues, too.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;consistency&quot;&gt;Consistency&lt;/h3&gt;

&lt;p&gt;While you’re having a look at documentation and the library, make sure everything is consistent. Lack of consistency can mean the underlying code quality is poor, and you’ll have trouble implementing it.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If it’s a &lt;a href=&quot;https://en.wikipedia.org/wiki/Representational_state_transfer&quot;&gt;REST&lt;/a&gt; API, make sure it follows the principles.&lt;/li&gt;
  &lt;li&gt;If the output is formatted in JSON, make sure all outputs are in JSON - even errors.&lt;/li&gt;
  &lt;li&gt;Check the cases of attributes (ex: &lt;a href=&quot;https://en.wikipedia.org/wiki/Snake_case&quot;&gt;Snake case&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/CamelCase&quot;&gt;Camel case&lt;/a&gt;), and make sure all endpoints follow the same.&lt;/li&gt;
  &lt;li&gt;Does the naming of endpoints and attributes/parameters make sense to you?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;support&quot;&gt;Support&lt;/h3&gt;

&lt;p&gt;Technical support can help a lot when you need your questions answered, whether it’s for implementation questions, or when you think there’s an outage.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Does your pricing plan include any phone support?&lt;/li&gt;
  &lt;li&gt;If there’s phone support, is it available 24/7? If not, is it compatible with your time zone?&lt;/li&gt;
  &lt;li&gt;If there’s no phone support, do they answer mail quickly?&lt;/li&gt;
  &lt;li&gt;Are the answers relevant?&lt;/li&gt;
  &lt;li&gt;Are there any community forums? Are they active?&lt;/li&gt;
  &lt;li&gt;Does a status page exist? Are outages frequent, and if so, are they well explained?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reputation&quot;&gt;Reputation&lt;/h3&gt;

&lt;p&gt;Doing some research on the Internet can help you avoid surprises: find out the frequency of breaking changes and outages, or get news about the selling of the company providing the service and save yourself a migration.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Can you find any resources on the internet aside from the provider’s page?&lt;/li&gt;
  &lt;li&gt;Do the articles about the service tend to be negative or positive?&lt;/li&gt;
  &lt;li&gt;Is it used by well-known companies?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;pricing&quot;&gt;Pricing&lt;/h3&gt;

&lt;p&gt;This is a tough one because when you compare API pricing, you could think one is cheaper than the others.
However, digging deeper can make you realize the cheaper one is actually more expensive on higher volumes.&lt;/p&gt;

&lt;p&gt;For a start, look beyond the pricing plan that suits your needs: you’ll scale eventually, and you’ll quickly realize that adding a new user or making a few extra requests will become so expensive that you’ll need to migrate to another service anyway.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Is the price per month or per requests?&lt;/li&gt;
  &lt;li&gt;If it’s per request:
    &lt;ul&gt;
      &lt;li&gt;What’s the request limit? Does it fit your expected usage?&lt;/li&gt;
      &lt;li&gt;How much are you charged per additional request?&lt;/li&gt;
      &lt;li&gt;Can you monitor usage?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;How many calls are you allowed to make per hour/day/month? It can differ depending on the plan.&lt;/li&gt;
  &lt;li&gt;If there’s phone support, make sure it’s included in your plan.&lt;/li&gt;
  &lt;li&gt;If there’s a free plan, don’t hesitate to try it before you pay for it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;data-privacy&quot;&gt;Data privacy&lt;/h3&gt;

&lt;p&gt;Whether you are concerned by the &lt;a href=&quot;https://en.wikipedia.org/wiki/General_Data_Protection_Regulation&quot;&gt;GDPR&lt;/a&gt; or not, if any personal data transits between your service and the provider, you should have a look at the data privacy policy.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Does it have a privacy policy page?&lt;/li&gt;
  &lt;li&gt;For how long will they keep your data on their servers?&lt;/li&gt;
  &lt;li&gt;Will your data be shared with third parties?&lt;/li&gt;
  &lt;li&gt;If they provide an SDK, does it have dependencies on tracking libraries? If this SDK is implemented on the client side, it means that you need to ensure no data that can be used to identify a person is given.&lt;/li&gt;
  &lt;li&gt;Is communication between you and the provider secured enough? Take a look at authentication and communication protocol.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;maintenance&quot;&gt;Maintenance&lt;/h3&gt;

&lt;p&gt;Even if all the lights are green and you are confident with your choice, have in mind that the third-party API you are integrating will be replaced eventually.&lt;/p&gt;

&lt;p&gt;To ease up the replacement, design your integration with the migration process in mind.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Encapsulate all the provider’s related code in abstraction layers (Ex: Remove the company reference from the method names).&lt;/li&gt;
  &lt;li&gt;Remove any provider’s related naming from your table/column names.&lt;/li&gt;
  &lt;li&gt;If you have some extra time, add multi-provider support, to do a progressive migration or fallback support.
    &lt;ul&gt;
      &lt;li&gt;For example, if you have to integrate a push notification service’s API, design your system so it can support having two providers at the same time.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To sum up, this is by no means an exhaustive list of the problems you might encounter when integrating third-party services. Spoiler: APIs are always tricky. This article feeds off our own experiences and struggles. It explores the trade-offs to be made, between investing time and energy in building and maintaining a service yourself, or choosing to benefit from the expertise and knowledge of a third-party service when you integrate their API - warts and all.&lt;/p&gt;
</description>
        
          <description>&lt;p&gt;External third-party-services APIs are useful: they allow you to benefit from the expertise and knowledge that others have acquired on a specific subject - a subject which is not your area of expertise and not the problem in hand. It would take too much time and effort to build and maintain such a service yourself.&lt;/p&gt;
</description>
        
        <pubDate>Tue, 02 Jul 2019 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/things-to-consider-when-choosing-a-third-party-api/</link>
        <guid isPermaLink="true">https://getaround.tech/things-to-consider-when-choosing-a-third-party-api/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Design system and API-Driven UI</title>
        <dc:creator>Renaud Boulard</dc:creator>
        <description>&lt;h1 id=&quot;why&quot;&gt;Why?&lt;/h1&gt;

&lt;p&gt;For some time now, we have been heavily relying on our API to display formatted content on our apps &lt;a href=&quot;https://drivy.engineering/api-driven-apps/&quot;&gt;API Driven Apps&lt;/a&gt;. It enables us to be more agile, by shipping new features faster and easily iterating on them without updates. Recently, we pushed this paradigm even further, generating complete native views from the API with our design system.&lt;/p&gt;

&lt;p&gt;There are several advantages to this, you can:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Build a brand new screen with almost no mobile development if all the visual components already exist&lt;/li&gt;
  &lt;li&gt;Easily add or remove components on a given screen without the need of an app update&lt;/li&gt;
  &lt;li&gt;Run A/B testing on your screens to see what works best, by moving or adding/removing component&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Plus, you build your new features based on native views to keep the best experience for the end users. Let’s see how its work.&lt;/p&gt;

&lt;h1 id=&quot;design-system&quot;&gt;Design system&lt;/h1&gt;

&lt;p&gt;A design system is a collection of components that can be reused in different combinations to build your UI. It also includes colors, spacing and typography specifications. Design systems allow you to manage design at scale in order to build consistent websites and applications. Every component has its own purpose, and can itself show or hide a subset of information depending on the context.&lt;/p&gt;

&lt;p&gt;Here’s an example of what the components in the Play Store App would be:&lt;/p&gt;

&lt;figure&gt;
  &lt;img alt=&quot;PlayStore App&quot; src=&quot;/assets/posts/2019-06-05-mobile-api-driven/playstore_app.png&quot; /&gt;
  &lt;figcaption&gt;
    Play Store App components
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;At Drivy we have built our own design system in order to develop consistent UI across all screens of the application. Our design team has worked on a series of components for both iOS and Android in order to respect the specific guidelines of each OS. Every component has a name and an associated custom view in our code base.&lt;/p&gt;

&lt;p&gt;Here is a sneak peek of what it looks like:&lt;/p&gt;

&lt;figure&gt;
  &lt;img alt=&quot;Drivy mobile design system component&quot; src=&quot;/assets/posts/2019-06-05-mobile-api-driven/design_system_mobile.png&quot; /&gt;
  &lt;figcaption&gt;
    Mobile design system component
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h1 id=&quot;api-driven-ui&quot;&gt;API Driven UI&lt;/h1&gt;
&lt;p&gt;The purpose of these components is to display information to our users. This information will most of the time come from a call to our API. So we decided to associate a JSON schema to every component of our design system.&lt;/p&gt;

&lt;p&gt;Let’s take a simple component:&lt;/p&gt;
&lt;figure&gt;
   &lt;img alt=&quot;basic_subtitled component&quot; src=&quot;/assets/posts/2019-06-05-mobile-api-driven/drivy_open.png&quot; /&gt;
  &lt;figcaption&gt;
    `basic_subtitled` component
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;There are 3 pieces of information in this component:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Icon&lt;/li&gt;
  &lt;li&gt;Title: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Drivy Open&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Subtitle: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;This is a self-service car.&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The associated JSON schema will look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;basic_subtitled&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Drivy Open&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;&quot;subtitle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;This is a self-service car.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;&quot;icon_url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://drivy-assets.imgix.net/icons/open_badge.png&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Each component has a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt; property, defining what kind of component it is. Here comes the magic: we can now have a list of components returned by the API, in order to build an entire screen. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt; is used to deserialize the appropriate object and bind it to the appropriate custom view associated to the components.&lt;/p&gt;

&lt;p&gt;Let’s take a example with our car details screen:&lt;/p&gt;
&lt;figure&gt;
   &lt;img alt=&quot;basic_subtitled component&quot; src=&quot;/assets/posts/2019-06-05-mobile-api-driven/car_detail_json.png&quot; /&gt;
  &lt;figcaption&gt;
    Each component has a dedicated type, which gives us the ability to build an entire screen from the API. Also, `Components` are grouped by `Sections` to help organize content hierarchy. 
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h1 id=&quot;concrete-example&quot;&gt;Concrete example&lt;/h1&gt;

&lt;p&gt;We have commercial vans on our platform. A few months ago, we decided to add all the dimensions of the vans to help our users know exactly what kind of furniture they can carry with the van.&lt;/p&gt;

&lt;p&gt;As you can see below we were able to add a complex composant to the screen:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;basic_subtitled component&quot; src=&quot;/assets/posts/2019-06-05-mobile-api-driven/van.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This change only required an update of the API, it’s win-win for everyone:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Customer&lt;/strong&gt;: All of our customers can now see the van dimensions, no matter which version of the application they have&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;App developer&lt;/strong&gt;: No mobile update is required, which means no iOS or Android development&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Your Team&lt;/strong&gt;: Only one backend developer is required, it’s time saved for the team&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The App&lt;/strong&gt;: It’s a native feature&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;drawbacks&quot;&gt;Drawbacks&lt;/h1&gt;
&lt;p&gt;As with every software solution there are some drawbacks, this will no be the perfect solution for all of your screens:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;When updating a component, you should take care not to break the API for the previous version of the component&lt;/li&gt;
  &lt;li&gt;As usual when it comes to offline mode, you must save the data for the information, but you should also save the list of component return by the API otherwise your screen will be empty&lt;/li&gt;
  &lt;li&gt;You cannot have a completely different layout for the landscape mode or tablet&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;We have been using this technique for a few months, and we have already seen the benefits for some features. There is a small start up cost of setting it up in your app and API, but we definitely think that on a long terms basis, it’s a valuable and powerful tool for quickly building a new feature, in a scalable way.&lt;/p&gt;

&lt;p&gt;Not all of the screens in your app will match with API/design system technique, but when it comes to a new screen you can ask yourself the following questions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Will this screen need frequent updates/iterations?&lt;/li&gt;
  &lt;li&gt;Do we want to run A/B tests?&lt;/li&gt;
  &lt;li&gt;Does this feature get its information from an API?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If the answer to all of these questions is &lt;em&gt;YES&lt;/em&gt;, it could be a good solution to go for.&lt;/p&gt;
</description>
        
          <description>&lt;h1 id=&quot;why&quot;&gt;Why?&lt;/h1&gt;
</description>
        
        <pubDate>Wed, 05 Jun 2019 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/mobile-api-driven/</link>
        <guid isPermaLink="true">https://getaround.tech/mobile-api-driven/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Embracing or banishing randomness</title>
        <dc:creator>Nicolas Zermati</dc:creator>
        <description>&lt;p&gt;Writing tests is becoming a big part of our job. If it isn’t yet, I strongly encourage you to push your organization down that path. &lt;em&gt;Why&lt;/em&gt; could be the topic of another article.&lt;/p&gt;

&lt;p&gt;I think there is a tremendous value in having an efficient test-suite. By efficient, I mean that it doesn’t give much extra work when refactoring and it gives accurate information when something is broken. And by accurate, I mean having as few false positive as possible, as many defects being caught as possible, and as few tests failing as possible for a single defect.&lt;/p&gt;

&lt;p&gt;As important as tests are to me, I don’t give as much attention to tests as I give to production code…  In my reviews, I tend to have lower standards when looking at the tests. For instance, I won’t ask for a refactoring of the tests as long as they &lt;em&gt;seem&lt;/em&gt; to be testing the behavior that just changed. It leads to heterogeneous practices. And on some topics, we simply disagree!&lt;/p&gt;

&lt;p&gt;This article will be about a controversial topic and will &lt;em&gt;try&lt;/em&gt; to show the benefits of using randomness in your tests. I will also cover some of the downsides too and if you have more points you would like to add, please ping &lt;a href=&quot;https://twitter.com/nicoolas25&quot;&gt;me on Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;context&quot;&gt;Context&lt;/h3&gt;

&lt;p&gt;The examples in this article will follow a feature and its testing journey. Here is a description of the feature:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We consider the duration of the rental to be the number of 24-hour chunks between its start time and its end time. When a trip spans across more calendar days than its number of 24-hour chunks, we would like to use the pricing of the car for the most relevant days. For instance: if a trip starts at 2pm and finishes at 8am the next day, we would like to consider the pricing of the car for the first day to be from 2pm to midnight.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here we’ll look at the development of the tests written to test the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#date_range&lt;/code&gt; method. This method gives the relevant days we should consider in order to price the trip.&lt;/p&gt;

&lt;h3 id=&quot;use-case-based-approach&quot;&gt;Use-case based approach&lt;/h3&gt;

&lt;p&gt;In this context, in order to clarify things between the product owner and the development team, some examples were created and agreed upon before the code was created. Those examples were translated into the following test-cases by the developer:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:date_range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;described_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;date_range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;starts_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ends_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:starts_on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;starts_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_date&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ends_on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ends_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_date&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ends_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;starts_at&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when the duration is less than 24 hours&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when the start and the end time are on the same day&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:starts_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2018-06-01 07:00&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hours&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;returns a range including only the day the trip started&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;is_expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;starts_on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;starts_on&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when the trip spans across 2 calendar days&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when the majority of the trip happens on the first day&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:starts_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2018-06-03 11:00&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hours&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;considers only the first day&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;is_expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;starts_on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;starts_on&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when the majority of the trip happens on the second day&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:starts_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2018-06-01 20:00&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hours&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;considers only the second day&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;is_expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ends_on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ends_on&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when the duration is between 24 and 48 hours&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when the trip spans across 2 calendar days&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:starts_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2018-06-01 11:00&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;36&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hours&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;starts_on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ends_on&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when the trip spans across 3 calendar days&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when a majority of time is spent on the last day compared to the first day&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:starts_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2018-06-01 18:00&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hours&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;excludes the first day&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;is_expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;starts_on&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ends_on&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when a majority of the rental's total time is on the first day rather than on the last day&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:starts_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2018-06-01 10:00&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hours&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;excludes the last day&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;is_expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;starts_on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ends_on&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I rewrote the test names as the ones we had were &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Example 1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Example 2&lt;/code&gt;,  and so on. They were extracted from a spreadsheet of use-cases the product team gave us.&lt;/p&gt;

&lt;p&gt;What you may see here is that those examples describe &lt;em&gt;some&lt;/em&gt; use-cases that &lt;em&gt;we believed would be enough&lt;/em&gt; to ensure that the implementation was correct: ie to cover all cases. And it actually covered the given specifications correctly. And the implementation was making all tests green. Unfortunately, the whole team forgot about this one:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when the duration is less than 24 hours&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when the trip spans on 3 days (because of daylight savings)&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:starts_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;2018-03-24 23:30&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;in_time_zone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Europe/Paris&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hours&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Produces this time: 2018-03-26 00:30&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;excludes the first and last days&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;is_expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;starts_on&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ends_on&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Because of daylight savings in some time zones, we could have one trip that spans across more than &lt;em&gt;N + 1&lt;/em&gt; calendar days, where &lt;em&gt;N&lt;/em&gt; is the number of 24-hour chunks between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;starts_at&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ends_at&lt;/code&gt;. The first lesson here is to be &lt;em&gt;really&lt;/em&gt; careful about the edge cases.&lt;/p&gt;

&lt;p&gt;While in this example it does look like an edge case, it was actually a bit more common. We have an extra rule that allows a trip starting from 10am and finishing at 11am the next day to be considered as a one - rather than two - day trip.&lt;/p&gt;

&lt;h3 id=&quot;approaching-tests-from-a-different-angle&quot;&gt;Approaching tests from a different angle&lt;/h3&gt;

&lt;p&gt;The point of the article is to show that without being more clever, we could leverage another strategy to explore the expected behavior and detect that missing use-case from earlier.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:date_range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;described_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;date_range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@starts_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@ends_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when the trip spans over the same number of days than its duration&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;add_constraint&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@trip_span_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@number_of_days&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@starts_on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@ends_on&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when the trip spans over one more day than its duration&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;add_constraint&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@trip_span_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@number_of_days&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when the lowest amount of time is spent on the last day&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_constraint&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_spent_on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@starts_on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_spent_on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@ends_on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@starts_on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@ends_on&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when the lowest amount of time is spent on the first day&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_constraint&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_spent_on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@starts_on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_spent_on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@ends_on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@starts_on&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@ends_on&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when the trip spans over two more days than its duration&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;add_constraint&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@trip_span_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@number_of_days&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@starts_on&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@ends_on&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# This method is called for each test until the result meet all the constraints.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# If a context doesn't meet any branch of the constraint tree, then it raises an&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# error telling you what context you may be missing.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generate_context&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@starts_at&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random_datetime&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@duration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random_trip_duration&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@ends_at&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@starts_at&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@durationlike&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@number_of_days&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rational&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ceil&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@starts_on&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@starts_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_date&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@ends_on&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@ends_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_date&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@trip_span_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@ends_on&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@starts_on&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;time_spent_on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;in_time_zone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@starts_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;time_zone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;from_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;beginning_of_day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@starts_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;max&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;to_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@ends_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;end_of_day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;min&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;to_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from_time&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Below are some shared helpers that could be reused everywhere.&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;random_datetime&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;time_zone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TimeZone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MAPPING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;uniq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sample&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TimeZone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_zone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2010&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;year&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# year&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;                          &lt;span class=&quot;c1&quot;&gt;# month&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                                    &lt;span class=&quot;c1&quot;&gt;# day&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;                          &lt;span class=&quot;c1&quot;&gt;# hour&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                       &lt;span class=&quot;c1&quot;&gt;# minute&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                                    &lt;span class=&quot;c1&quot;&gt;# second&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;day_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;end_of_month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sample&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# randomize the day&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;days&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;random_trip_duration&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add_constraint&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;generate_context&lt;/code&gt; are features that doesn’t exists yet. If you’re interested to work on implementing them, let me know!&lt;/p&gt;

&lt;p&gt;Using that kind of approach leads to fewer examples, and to ones that are more meaningful. Now, &lt;strong&gt;the team needs to find properties that the subject under test should respect given a certain context&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The product and the developer must, &lt;em&gt;together&lt;/em&gt;, come with both those contexts and properties. They force us to clarify our thinking. Here it means that we reformulate &lt;em&gt;relevant days&lt;/em&gt; from the original specification. The context and properties forces us to extract the domain related concepts of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;number_of_days&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trip_span_size&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;time_spent_on&lt;/code&gt; which could help to model the problem and maybe lead to a clearer solution.&lt;/p&gt;

&lt;p&gt;Random generators can be shared across the application. Custom generators for any value of your domain must be available, very much like &lt;a href=&quot;https://thepugautomatic.com/2012/07/randomize-your-factories/&quot;&gt;factories would be&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If it was that great, everyone would be doing it, right?&lt;/p&gt;

&lt;h3 id=&quot;caveats-and-workarounds&quot;&gt;Caveats and workarounds&lt;/h3&gt;

&lt;h4 id=&quot;coding-the-logic-twice&quot;&gt;Coding the logic twice&lt;/h4&gt;

&lt;p&gt;In this appoach, we need to use elements from the context (such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@starts_on&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ends_on&lt;/code&gt;) to compute the expected results. What prevents me from making a mistake in both the expected value computation and the production code?&lt;/p&gt;

&lt;p&gt;The use-cases approach is simpler to setup and less risky to write because it focuses on a single and fixed context. Even when the context isn’t fixed, we could use &lt;em&gt;constraints&lt;/em&gt; on it in order to reduce the complexity of the expected result computation.&lt;/p&gt;

&lt;p&gt;In the examples, the arithmetic on start and end dates are the same in term of complexity.&lt;/p&gt;

&lt;h4 id=&quot;too-much-generalization&quot;&gt;Too much generalization&lt;/h4&gt;

&lt;p&gt;The obvious difference between the two approaches is that the use-cases are really close to reality while the one using randomness forces us to come with well-structured rules and a more generalized approach. Driving the implementation from the use-cases may be more natural for TDD practitioners. The use-cases are needed in order to find relevant properties and contexts. Thus, &lt;strong&gt;use-cases are still mandatory&lt;/strong&gt; in the process.&lt;/p&gt;

&lt;h4 id=&quot;not-bad-but-what-about-determinism&quot;&gt;Not bad but… what about determinism&lt;/h4&gt;

&lt;p&gt;Using randomness is something that many people are afraid of. They may feel that they are losing control, that their test suite is gonna start slowing them down. Here are two remarks that are deep enough to, maybe, make you reconsider:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The tests are random as soon as impure functions are used such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Date.current&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The tests are random since they are randomized at programming-time by the developper &lt;a href=&quot;https://www.youtube.com/watch?v=5pwv3cuo3Qk&quot;&gt;*&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those remarks implie that there are various classes of randomness. One is comming from impure functions either in the tests or in the production code. Those could lead to &lt;a href=&quot;https://hackernoon.com/flaky-tests-a-war-that-never-ends-9aa32fdef359&quot;&gt;flaky tests&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another one, introduced purposefully, which is here to help us to discover failures, to reveal inconsistencies in our thinking, and to detect unexpected behaviour as soon as possible.&lt;/p&gt;

&lt;h4 id=&quot;reproducing-failures&quot;&gt;Reproducing failures&lt;/h4&gt;

&lt;p&gt;Your tests will run on CI and will give you failures. Once spec fails, it isn’t obvious what the generated inputs were. Being able to understand and reproduce a failure is critical.&lt;/p&gt;

&lt;p&gt;In the example, the context is lost upon failure. It is simple to get that context and it would give us a good hint as to what’s going on. Here is an example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;must_equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;~&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MSG&lt;/span&gt;
&lt;span class=&quot;sh&quot;&gt;  	Expected &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; to eq &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; while using:&lt;/span&gt;
&lt;span class=&quot;sh&quot;&gt;    - Starts at: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@starts_at&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;sh&quot;&gt;    - Ends at: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@ends_at&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;  MSG&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Replace this:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@starts_on&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@ends_on&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# With:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;must_equal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@starts_on&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@ends_on&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’m also experimenting with a custom pseudo-random generator that would use a different seed for each test and, in case of a failure, would display that specific seed to you. This experiment is a bit raw at the moment but lives in &lt;a href=&quot;https://github.com/nicoolas25/fuzzier&quot;&gt;Github’s nicoolas25/fuzzier repository&lt;/a&gt;. It would look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;random_datetime&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;time_zone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Fuzzier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TimeZone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MAPPING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;uniq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TimeZone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_zone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Fuzzier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2010&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2020&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Fuzzier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Fuzzier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Fuzzier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;59&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Fuzzier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;59&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;day_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Fuzzier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;end_of_month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;days&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;random_trip_duration&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Fuzzier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When an error occurs, it will output an integer, lets say &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;12345&lt;/code&gt; that can be used to reproduce the same randomness:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;has as many days as the number of days of the trip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;fuzzier: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12345&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/stympy/faker&quot;&gt;faker gem&lt;/a&gt; provides something similar with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Faker::Config.random.rand&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;using-only-one-generation&quot;&gt;Using only one generation&lt;/h4&gt;

&lt;p&gt;This approach is very similar to &lt;a href=&quot;https://hypothesis.works/articles/what-is-property-based-testing/&quot;&gt;property-based-testing&lt;/a&gt;. The difference is mostly that we don’t try many input sets on those examples; only one. But because tests run quite often, we end with way more use-cases over time. Solutions like &lt;a href=&quot;https://github.com/rantly-rb/rantly&quot;&gt;Rantly&lt;/a&gt; fully embrace property-based testing and provide more tools including the ability to run a test against many input generations.&lt;/p&gt;

&lt;p&gt;Because I see this approach more like an &lt;em&gt;exploration tool&lt;/em&gt;, we could try to run a given test many times to be more confident that nothing could go wrong. It would look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;mi&quot;&gt;1_000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;has as many days as the number of days of the trip&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Doing that exploration may show you some use-cases you missed and give you more confidence that the properties you specified truly match the requirements.&lt;/p&gt;

&lt;h3 id=&quot;when-to-use-it&quot;&gt;When to use it&lt;/h3&gt;

&lt;p&gt;I think using this kind of approach has multiple benefits:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Conciseness &amp;amp; expressiveness of the specifications, as we don’t test samples but we specify the expected behavior using the language of the problem.&lt;/li&gt;
  &lt;li&gt;Adaptive and dynamic examples over the life of the test suite, as the test will run against new domain values as they are introduced in the application over time.&lt;/li&gt;
  &lt;li&gt;Better maintainability, as we can reason about properties rather than a long list of examples.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I wouldn’t recommend this approach for integration testing where the goal is rather to secure well-known paths rather than explore all the possible cases. Also, I think about UI tests as a place I wouldn’t like randomness. You may want to compare screenshots of your application and that would be harder if the content was changing.&lt;/p&gt;

&lt;p&gt;But, for components where we need its behavior to be fully described, I would consider this approach. I would consider it &lt;strong&gt;in addition to the usual use-cases&lt;/strong&gt; for some edge cases. It forces me to think more about the problem and to have deeper discussions with the business. It can also point me to cases I didn’t think of.&lt;/p&gt;

&lt;p&gt;As I said before, this technique can be a bit controversial and I invite you to talk about this with your team and share your opinion!&lt;/p&gt;

</description>
        
          <description>&lt;p&gt;Writing tests is becoming a big part of our job. If it isn’t yet, I strongly encourage you to push your organization down that path. &lt;em&gt;Why&lt;/em&gt; could be the topic of another article.&lt;/p&gt;
</description>
        
        <pubDate>Wed, 15 May 2019 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/non-deterministic-testing/</link>
        <guid isPermaLink="true">https://getaround.tech/non-deterministic-testing/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Your JavaScript can reveal your secrets</title>
        <dc:creator>Adrien Siami</dc:creator>
        <description>&lt;p&gt;Security is hard. It’s often very easy to overlook things, and one small mistake can have a very big impact.&lt;/p&gt;

&lt;p&gt;When writing JavaScript, it’s easy to forget that you’re writing code that will be sent in plain text to your users.&lt;/p&gt;

&lt;p&gt;Recently I have been doing a bit of offensive security, with a special interest on JavaScript files, to see what kind of information could be retrieved from them.&lt;/p&gt;

&lt;p&gt;Here’s what I’ve learned.&lt;/p&gt;

&lt;h1 id=&quot;business-logic-and-other-business-leaks&quot;&gt;Business logic and other business leaks&lt;/h1&gt;

&lt;p&gt;It’s not uncommon to see some business logic in JavaScript files, especially for frontend-heavy websites.&lt;/p&gt;

&lt;p&gt;While this is not a direct security problem, it can tell a great deal about your internals.&lt;/p&gt;

&lt;p&gt;It could be a secret pricing function, a list of states that reveal an upcoming feature, or an array of translation strings that uncover some internal tools.&lt;/p&gt;

&lt;p&gt;You wouldn’t want your secret algorithms exposed to the face of the world, would you?&lt;/p&gt;

&lt;h1 id=&quot;internal-api-paths&quot;&gt;Internal API paths&lt;/h1&gt;

&lt;p&gt;Another interesting find in JavaScript files is API paths.&lt;/p&gt;

&lt;p&gt;Frontend-heavy applications need to make calls to an internal API, and often the list of API endpoints is conveniently stored in an Object in one of the JavaScript files.&lt;/p&gt;

&lt;p&gt;This makes the work of security searchers very easy as they have access to all endpoints at once. Some endpoints are maybe deprecated but are still showing in the list: this is more attack surface for a security searcher.&lt;/p&gt;

&lt;h1 id=&quot;access-tokens&quot;&gt;Access tokens&lt;/h1&gt;

&lt;p&gt;This one is really bad, but is really not that uncommon.&lt;/p&gt;

&lt;p&gt;In JavaScript files, I’ve found the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;AWS S3 id and secret key giving anyone full control over a S3 bucket&lt;/li&gt;
  &lt;li&gt;Cloudinary credentials giving anyone full control over the bucket&lt;/li&gt;
  &lt;li&gt;A CircleCI token, allowing me to launch builds, view commit history, and more&lt;/li&gt;
  &lt;li&gt;Various other third party API keys&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those are often found in the admin / internal JS files. Developers may think these files won’t be served to regular users so it’s fine to put sensitive information inside, but more often that not, it’s easy to get access to those files.&lt;/p&gt;

&lt;h1 id=&quot;getting-to-the-interesting-files&quot;&gt;Getting to the interesting files&lt;/h1&gt;

&lt;p&gt;The interesting files are often the ones not intended for regular users: it can be an admin part, some internal tools, etc.&lt;/p&gt;

&lt;p&gt;Every website has a different JS architecture. Some will load all the JS in every page, some more modern will have different entry points depending on the page you are visiting.&lt;/p&gt;

&lt;p&gt;Let’s consider the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/assets/js/front.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It’s very trivial, but in this case, one could try to load &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;back.js&lt;/code&gt;, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s consider another example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/static/compiled/homepage.d1239afab9972f0dbeef.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now this is a bit more complicated, the file has a hash in its name so it’s impossible to do some basic enumeration.&lt;/p&gt;

&lt;p&gt;What if we try to access this url: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://website/static/compiled/manifest.json&lt;/code&gt;?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;assets&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;admin.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;admin.a8240714830bbf66efb4.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;homepage.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;homepage.d1239afab9972f0dbeef.js&quot;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;publicPath&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/static/compiled/&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Ooops! In this case this website is using &lt;a href=&quot;https://webpack.js.org/&quot;&gt;webpack&lt;/a&gt;, a famous assets bundler. It is often used with a plugin that generates a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manifest.json&lt;/code&gt; file containing the link to all assets, which is often served by the web server.&lt;/p&gt;

&lt;p&gt;If you manage to find which tools a website is using, it’s easier to find this kind of vulnerabilities.&lt;/p&gt;

&lt;h1 id=&quot;how-to-protect-yourself&quot;&gt;How to protect yourself&lt;/h1&gt;

&lt;p&gt;Here are a few tips to avoid being vulnerable to this kind of attacks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Consider your JavaScript code public, all of it&lt;/li&gt;
  &lt;li&gt;If you really need access tokens in the front-end, get them via (secure &amp;amp; authenticated) API&lt;/li&gt;
  &lt;li&gt;Know your front-end toolbelt well to avoid basic attacks (manifest.json example)&lt;/li&gt;
  &lt;li&gt;Regularly audit your front-end code and look for specific keywords:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secret&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;token&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accessToken&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;access_token&lt;/code&gt;, etc&lt;/li&gt;
      &lt;li&gt;your domain name, for possible API urls&lt;/li&gt;
      &lt;li&gt;your company name, for possible 3rd party credentials&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Security issues can come from a lot of unexpected spots. When writing any kind of code, when pasting sensible data, it’s always good to ask yourself who will have access to this code, to avoid leaking all your secrets!&lt;/p&gt;
</description>
        
          <description>&lt;p&gt;Security is hard. It’s often very easy to overlook things, and one small mistake can have a very big impact.&lt;/p&gt;
</description>
        
        <pubDate>Thu, 02 May 2019 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/javascript-security/</link>
        <guid isPermaLink="true">https://getaround.tech/javascript-security/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Sorbet: A Ruby type checker</title>
        <dc:creator>Antoine Lyset</dc:creator>
        <description>&lt;p&gt;This article is aimed at beginner Rubyists who want to understand what the fuss around type checking is all about. It can also be relevant for more experienced developers who might be interested in using Sorbet and learning why it’s a bit special.&lt;/p&gt;

&lt;p&gt;First I need to say that Sorbet has not been released yet (a preview version is &lt;a href=&quot;https://sorbet.run/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;available&lt;/a&gt;). Stripe is improving it internally and some other companies are testing it. We can still talk about it because it should be open-sourced in the coming future (they said summer 2019) and it’s nonetheless very interesting. This blogpost is the result of watching talks, and reading articles, Twitter feeds and the &lt;a href=&quot;https://sorbet.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;official website&lt;/a&gt;. It may contain some small mistakes and some parts may be obsolete when Sorbet will be released.&lt;/p&gt;

&lt;h2 id=&quot;whats-a-type-checker-and-what-do-i-need-to-know&quot;&gt;What’s a type checker and what do I need to know?&lt;/h2&gt;

&lt;p&gt;To understand Sorbet we first need to understand what a type is. A type is a definition applied to a part of our program (this part can be a variable or a function for example). This definition usually says something like “this variable is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt;” or “this function returns an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Integer&lt;/code&gt;”. A type checker will enforce these definitions by raising an expection if it finds an incoherence. An incoherence can be something like “this variable is of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt; and you try to call the method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#map&lt;/code&gt; on it but this method does not exist on type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt; so this is incoherent”, and then it will raise an exception. This exception can be raised at runtime when the program is launched (this is called dynamic typing) or just by analysing the source code without executing it (this is called static typing). The tool that will enforce these types is called a type checker.&lt;/p&gt;

&lt;p&gt;There are a lot of different type checkers and it’s a large research field. We don’t need to understand Type Theory (one of the mathematical theories used by type checkers) to enjoy their use. I will just focus on Sorbet and describe what you can do with it.&lt;/p&gt;

&lt;h2 id=&quot;gradual-type-checking-with-runtime-checks&quot;&gt;Gradual type checking with runtime checks&lt;/h2&gt;

&lt;p&gt;Sorbet is both a static and a dynamic type checker. It will catch wrong definitions as early as possible by analysing the source code (you should run it in your editor and/or before releasing your code). This is particularly useful because Sorbet is fast, it can analyze 100kloc/sec (Rubocop is around 1kloc/s for comparison), so it will find bugs instantly before you even launch your tests.&lt;/p&gt;

&lt;p&gt;The more interesting and specific side of Sorbet is that it will run side by side with your Ruby code, verifying types at runtime. Sorbet’s creator decided to implement this because Ruby is a very dynamic language and a lot of Rubyists write code that will generate code.&lt;sup&gt;&lt;a href=&quot;#fn-metaprogramming-and-ruby&quot; id=&quot;metaprogramming-and-ruby&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; Plus, Sorbet is a gradual type checker.&lt;/p&gt;

&lt;p&gt;A gradual type checker is a special kind of type checker because you don’t need to add type annotations to all your code to use it. You can start small, just use it in some parts of your code then extend its usage gradually when you feel the need. Actually Stripe even added a tool to Sorbet to find which parts of your code you should type check to have the most impact. You may think that these runtime checks are costly, but it does not seem like it &lt;sup&gt;&lt;a href=&quot;#fn-runtime-overhead&quot; id=&quot;runtime-overhead&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;, and you can be sure that since Stripe is using it in production, performance problems are taken very seriously.&lt;/p&gt;

&lt;h2 id=&quot;how-to-use-it&quot;&gt;How to use it&lt;/h2&gt;

&lt;p&gt;First some typing.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# typed: true&lt;/span&gt;
&lt;span class=&quot;kp&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Sig&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sig&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;time: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;returns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;format_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Time is : &quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;formatted_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;strftime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%M:%H&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;formatted_time&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://sorbet.run/#%23%20typed%3A%20true%0Aextend%20T%3A%3ASig%0A%0Asig%20do%0A%20%20params(time%3A%20Time)%0A%20%20%20%20.returns(String)%0Aend%0Adef%20format_time(time)%0A%20%20label%20%3D%20%22Time%20is%20%3A%20%22%0A%20%20formatted_time%20%3D%20time.strftime(%22%25M%3A%25H%22)%0A%20%20label%20%2B%20formatted_time%0Aend&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Runnable Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, Sorbet is just plain Ruby. First you add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;# typed: true&lt;/code&gt; comment to instruct Sorbet that it’s a typed file (there are other values than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; for different levels of strictness). Then you &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extend&lt;/code&gt; the object where you want to use it. Finally, you can call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sig&lt;/code&gt; (short for signature) to define which types are your params and what the type of your returned value would be. This signature is applied to the definition of the next method.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sig&lt;/code&gt; takes a block as a parameter and in this block you use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;params&lt;/code&gt; that you chain with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;returns&lt;/code&gt;. These &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;params&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;returns&lt;/code&gt; methods are the core of Sorbet.&lt;/p&gt;

&lt;p&gt;Here I defined the params of my method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;format_time&lt;/code&gt; to be a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Time&lt;/code&gt; and the return type to be a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt;. As you can see I didn’t have to type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;label&lt;/code&gt; because Sorbet can infer types and this makes it way more practical and less verbose than some other type Systems.&lt;/p&gt;

&lt;h2 id=&quot;bye-nomethoderror&quot;&gt;Bye “NoMethodError:”&lt;/h2&gt;

&lt;p&gt;In the next bit of code we have an ActiveRecord-like Model with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.find&lt;/code&gt; and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#plate_number&lt;/code&gt;. This example simulates a common use-case where you query a record and ask for one of its attributes.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# typed: true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Sig&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;sig&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;attributes: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;id: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;plate_number: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;void&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@attributes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;sig&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;id: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;returns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nilable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# We are simulating some kind of Database Query&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;id: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;plate_number: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1234&quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;sig&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;plate_number&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:plate_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;plate_number&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Result:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;editor.rb:35: Method plate_number does not exist on NilClass component of T.nilable&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Car&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
    35 |car.plate_number
        ^^^^^^^^^^^^^^^^
  Autocorrect: Use &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; to autocorrect
    editor.rb:35: Replace with T.must&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;car&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    35 |car.plate_number
        ^^^
Errors: 1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://sorbet.run/#%23%20typed%3A%20true%0Aclass%20Car%0A%20%20extend%20T%3A%3ASig%0A%20%20%0A%20%20sig%20do%0A%20%20%20%20params(attributes%3A%20%7Bid%3A%20Integer%2C%20plate_number%3A%20String%7D)%0A%20%20%20%20%20%20.void%0A%20%20end%0A%20%20def%20initialize(attributes)%0A%20%20%20%20%40attributes%20%3D%20attributes%0A%20%20end%0A%20%20%0A%20%20sig%20do%0A%20%20%20%20params(id%3A%20Integer)%0A%20%20%20%20%20%20.returns(T.nilable(Car))%0A%20%20end%0A%20%20def%20self.find(id)%0A%20%20%20%20%23%20We%20are%20simulating%20some%20kind%20of%20Database%20Query%0A%20%20%20%20if%20id%20%3D%3D%201%0A%20%20%20%20%20%20new(%7B%0A%20%20%20%20%20%20%20%20id%3A%201%2C%0A%20%20%20%20%20%20%20%20plate_number%3A%20%221234%22%0A%20%20%20%20%20%20%7D)%0A%20%20%20%20end%0A%20%20end%0A%20%20%0A%20%20sig%20%7B%20returns(String)%20%7D%0A%20%20def%20plate_number%0A%20%20%20%20%40attributes%5B%3Aplate_number%5D%0A%20%20end%0Aend%0A%0A%0Acar%20%3D%20Car.find(1)%0Acar.plate_number&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Runnable Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When we type check it with Sorbet , it warns us that we didn’t handle the case where we don’t find a Car. The message is pretty clear and it even recommends that we use a special method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T.must&lt;/code&gt;. This will enforce at runtime that we always have a Car. This may not be what we want and we can handle the case ourselves by adding something like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;plate_number&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;A plate number's placeholder&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://sorbet.run/#%23%20typed%3A%20true%0Aclass%20Car%0A%20%20extend%20T%3A%3ASig%0A%20%20%0A%20%20sig%20do%0A%20%20%20%20params(attributes%3A%20%7Bid%3A%20Integer%2C%20plate_number%3A%20String%7D)%0A%20%20%20%20%20%20.void%0A%20%20end%0A%20%20def%20initialize(attributes)%0A%20%20%20%20%40attributes%20%3D%20attributes%0A%20%20end%0A%20%20%0A%20%20sig%20do%0A%20%20%20%20params(id%3A%20Integer)%0A%20%20%20%20%20%20.returns(T.nilable(Car))%0A%20%20end%0A%20%20def%20self.find(id)%0A%20%20%20%20%23%20We%20are%20simulating%20some%20kind%20of%20Database%20Query%0A%20%20%20%20if%20id%20%3D%3D%201%0A%20%20%20%20%20%20new(%7B%0A%20%20%20%20%20%20%20%20id%3A%201%2C%0A%20%20%20%20%20%20%20%20plate_number%3A%20%221234%22%0A%20%20%20%20%20%20%7D)%0A%20%20%20%20end%0A%20%20end%0A%20%20%0A%20%20sig%20%7B%20returns(String)%20%7D%0A%20%20def%20plate_number%0A%20%20%20%20%40attributes%5B%3Aplate_number%5D%0A%20%20end%0Aend%0A%0A%0Acar%20%3D%20Car.find(1)%0Aif%20car%0A%20%20car.plate_number%0Aelse%0A%20%20%22A%20plate%20number's%20placeholder%22%0Aend&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Runnable Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And now Sorbet is happy. It understands the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if ... else&lt;/code&gt; and there is no more risk of errors.&lt;/p&gt;

&lt;h2 id=&quot;more-than-a-type-checker&quot;&gt;More than a type checker&lt;/h2&gt;

&lt;figure&gt;
  &lt;img alt=&quot;Code autocomplete thanks to Sorbet&quot; src=&quot;/assets/posts/2019-04-05-sorbet-a-ruby-type-checker/sorbet-autocomplete.png&quot; /&gt;
  &lt;figcaption&gt;
    Code autocomplete thanks to Sorbet
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Sorbet is not only a type checker, it’s a tool suite around types. For example there is a &lt;a href=&quot;https://microsoft.github.io/language-server-protocol/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LSP&lt;/a&gt; server, it enables developers to easily implement code autocomplete, go to definition and all kinds of nice things for different editors (Visual Studio Code, Atom, Sublime Text, Vim, Emacs…). So if you’re using Sorbet in your code and in your editor you will have a source of documentation already available that is always true.&lt;/p&gt;

&lt;h2 id=&quot;a-lot-more-to-learn-and-to-come&quot;&gt;A lot more to learn and to come&lt;/h2&gt;

&lt;p&gt;These are pretty basic examples, but it can go further with &lt;a href=&quot;https://sorbet.run/#%23%20typed%3A%20true%0Aclass%20Box%0A%20%20extend%20T%3A%3ASig%0A%20%20extend%20T%3A%3AGeneric%0A%0A%20%20Elem%20%3D%20type_member%0A%0A%20%20sig%20%7Breturns(Elem)%7D%0A%20%20attr_reader%20%3Ax%0A%0A%20%20sig%20%7Bparams(x%3A%20Elem).returns(Elem)%7D%0A%20%20attr_writer%20%3Ax%0Aend%0A%0ABox%5BInteger%5D.new.x%20%2B%20Box%5BString%5D.new.x&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Generics&lt;/a&gt; or &lt;a href=&quot;https://sorbet.run/#%23%20typed%3A%20true%0Amodule%20Fooable%0A%20%20extend%20T%3A%3ASig%0A%20%20abstract!%0A%20%20sig%20%7Babstract.void%7D%0A%20%20def%20foo%0A%20%20end%0Aend%0A%0Aclass%20GoodFooable%0A%20%20include%20Fooable%0A%0A%20%20def%20foo%0A%20%20end%0Aend%0A%0Aclass%20BadFooable%0A%20%20include%20Fooable%0Aend&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Interfaces&lt;/a&gt;. It can even warn us of &lt;a href=&quot;https://sorbet.run/#%23%20typed%3A%20true%0Aif%20true%0A%20%20%20%20foo%20%3D%201%0Aelse%0A%20%20%20%20foo%20%3D%202%0Aend&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;dead code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I think Sorbet will really shine in large projects: it will reduce the fear of refactoring by providing instant feedbacks, it is a self-documenting method and it helps reuse someone else’s code. Sure it won’t remove testing but it can reduce some of it and will let us focus on what’s important (and not “What will happen if I put a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt; instead of an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Array&lt;/code&gt; here?”).&lt;/p&gt;

&lt;p&gt;The Ruby Community is very lucky to have such a big company investing so much effort in a type checker and willing to give it to the community (we are talking about more than 9 months of work by 3 very skilled people). If you want to know more, I really encourage you to check &lt;a href=&quot;https://sorbet.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://sorbet.org/&lt;/a&gt; and to watch this video from Ruby Kaigi :&lt;/p&gt;

&lt;iframe width=&quot;800&quot; height=&quot;450&quot; src=&quot;https://www.youtube.com/embed/eCnnBS2LXcI&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h2&gt;

&lt;p&gt;&lt;a id=&quot;fn-metaprogramming-and-ruby&quot;&gt;[1]&lt;/a&gt;: To handle some common Ruby metaprogramming techniques (code that generate code), Sorbet is able to “unroll” Ruby code, creating the metaprogrammed methods and type checking them. &lt;a href=&quot;#metaprogramming-and-ruby&quot; title=&quot;Jump back&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;fn-runtime-overhead&quot;&gt;[2]&lt;/a&gt;: &lt;a href=&quot;#runtime-overhead&quot; title=&quot;Jump back&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;1) we run it in production;&lt;br /&gt;2) &lt;a href=&quot;https://twitter.com/nelhage?ref_src=twsrc%5Etfw&quot;&gt;@nelhage&lt;/a&gt; measured overhead and the worst case(for method that does nothing) IIRC was under 5%;&lt;br /&gt;3) `sig` supports one more builder method: `.checked(false)` to disable runtime checking;&lt;br /&gt;4) runtime type system erases generics.&lt;/p&gt;&amp;mdash; Dmitry Petrashko (@darkdimius) &lt;a href=&quot;https://twitter.com/darkdimius/status/1003629455225511936?ref_src=twsrc%5Etfw&quot;&gt;June 4, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

</description>
        
          <description>&lt;p&gt;This article is aimed at beginner Rubyists who want to understand what the fuss around type checking is all about. It can also be relevant for more experienced developers who might be interested in using Sorbet and learning why it’s a bit special.&lt;/p&gt;
</description>
        
        <pubDate>Fri, 19 Apr 2019 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/sorbet-a-ruby-type-checker/</link>
        <guid isPermaLink="true">https://getaround.tech/sorbet-a-ruby-type-checker/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>From translator to developer</title>
        <dc:creator>Jordan Jalabert &amp; Emily Fiennes</dc:creator>
        <description>&lt;p&gt;After working as a teacher and translator for several years, Emily embarked on a new phase in her career by learning a different kind of language: programming.&lt;/p&gt;

&lt;p&gt;Emily has worked at Drivy for the past year and a half as a Full-Stack Engineer, after attending the intensive Le Wagon bootcamp in Paris. Here, she shares how she began coding and what life is like for a developer at Drivy.&lt;/p&gt;

&lt;p&gt;If you’re considering a career change to become a software engineer, hopefully Emily’s story will inspire you to go for it.&lt;/p&gt;

&lt;h3 id=&quot;what-were-you-doing-before-you-became-a-software-engineer&quot;&gt;What were you doing before you became a software engineer?&lt;/h3&gt;

&lt;p&gt;I studied modern languages and translation, and after university worked as a teacher and translator. My freelance translation work led me to work with some startups based in Bordeaux. I was intrigued by what the developers were doing and they pointed me in the direction of sites like &lt;a href=&quot;https://www.pluralsight.com/learn&quot; target=&quot;_blank&quot;&gt;Pluralsight&lt;/a&gt;, &lt;a href=&quot;https://www.codecademy.com/&quot; target=&quot;_blank&quot;&gt;CodeCademy&lt;/a&gt; and &lt;a href=&quot;https://ruby.github.io/TryRuby/&quot; target=&quot;_blank&quot;&gt;TryRuby&lt;/a&gt;. I was pretty certain that I was going to be completely useless - I hadn’t studied maths or science since the age of 15! But initially, it was like learning another language.&lt;/p&gt;

&lt;p&gt;Then I heard about &lt;a href=&quot;https://www.lewagon.com&quot; target=&quot;_blank&quot;&gt;Le Wagon&lt;/a&gt;, a 9-week intensive bootcamp to learn to code. After Le Wagon I was determined to find an internship because I knew that I had still had lots to learn. I did a 6-month unofficial internship with another startup, and then, after reading Jean’s &lt;a href=&quot;https://drivy.engineering/story-of-a-junior-developer-at-drivy/&quot; target=&quot;_blank&quot;&gt;Story of a Junior Developer&lt;/a&gt;, applied to Drivy.&lt;/p&gt;

&lt;h3 id=&quot;describe-what-you-do-as-a-full-stack-engineer-whats-a-typical-day-like&quot;&gt;Describe what you do as a Full-Stack Engineer. What’s a typical day like?&lt;/h3&gt;

&lt;p&gt;The tech-product team is organised into squads, and I’m in the squad that builds features for owners. Our features focus on acquiring and onboarding new owners, improving fleet quality, and providing tooling for owners. I’m a Full-Stack engineer so often I’ll work on a feature from start to finish, implementing both the client- and server-side code.&lt;/p&gt;

&lt;p&gt;Starting out, I was apprehensive about being stuck behind a computer all day but in fact that’s rarely the case… there’s a lot of variety in my days at Drivy. True, some days I might spend the whole day writing code. But there’s always room to ask for help, or to discuss choices and strategies with colleagues.&lt;/p&gt;

&lt;p&gt;Other days are a mixture of meetings with product managers to help define feature specs; with members of the design team to discuss implementation of design specs; with my squad to define the roadmap for the coming quarter; or simply with the developers in my squad to elaborate on the technical specs for a feature.&lt;/p&gt;

&lt;p&gt;Sometimes I do pair-programming with a more senior developer, which is always an opportunity to learn new tricks. We might refactor something I’ve been working on, build specific skills like writing tests or reviewing pull requests, or doing coding exercises.&lt;/p&gt;

&lt;p&gt;Half of my team works remotely, so communication is either be face-to-face or via Slack and video calls. In short, there’s no ‘typical’ day - the only thing that is typical is that I’m constantly learning, and that’s really stimulating.&lt;/p&gt;

&lt;h3 id=&quot;what-do-you-enjoy-the-most-about-your-job-at-drivy&quot;&gt;What do you enjoy the most about your job at Drivy?&lt;/h3&gt;

&lt;p&gt;There are so many things I enjoy about my job: I genuinely go home on a Friday excited to come back on Monday. I enjoy the balance between human interaction, and losing myself in the feature I’m working on. I enjoy solving problems, big and small, and having something to show for my work at the end of the day.&lt;/p&gt;

&lt;p&gt;The pleasure I take from coding is similar to the one I take from translation. I find abstractions to map on to real-world problems and create a vocabulary that represents these abstractions in the digital world, respecting coherence within the codebase and the syntax and grammar of Ruby&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. I have to think about how the code I write might be interpreted by future developers, and resolve the problem in such a way that leaves future options open. I was surprised to learn that writing code is very creative work.&lt;/p&gt;

&lt;p&gt;Working at Drivy is very rewarding because we are encouraged to take responsibility for our work. When I work on a feature, I’m not just integrating technical specs that a senior developer has written for me: I’m encouraged to think about the end needs of the user and the unexpected edge cases that might arise, and challenge the product specs if necessary.&lt;/p&gt;

&lt;p&gt;I’m surrounded by very talented and experienced people: it really motivates every day to think that one day I might be able to write code that is as sophisticated (which often means beautifully simple!) as they do. That said, everyone is very humble: sometimes I’ll ask a question or challenge something for being too complex, simply because my repertoire of methods - my ‘vocabulary’ - is less broad. I’m never made to feel that my opinion is less valid because I’m junior, and sometimes my suggestion even gets accepted!&lt;/p&gt;

&lt;h3 id=&quot;technology-is-often-described-as-a-male-dominated-field-do-you-feel-that-women-have-the-same-opportunities-as-men-in-tech&quot;&gt;Technology is often described as a male-dominated field. Do you feel that women have the same opportunities as men in tech?&lt;/h3&gt;

&lt;p&gt;I can’t speak for all women, and I’m not sure binary male-female is helpful in a bid to be more inclusive. The question of equal opportunities for men and women is huge and complex. Suffice to say: the men vastly outnumber the women in the tech team, and that speaks volumes about the inequality of opportunities.&lt;/p&gt;

&lt;p&gt;But for me the problem came much earlier. I can remember being told aged 13 that I was good at HTML - but I was never told that it would be a career option for me. I was also good at languages, and instead it was suggested I would make a good teacher! I’m sure that those messages, received at such a formative age, contributed to the self-doubt I experienced (and continue to experience!) in my work.&lt;/p&gt;

&lt;h3 id=&quot;how-many-women-are-there-in-the-engineering-team&quot;&gt;How many women are there in the Engineering Team?&lt;/h3&gt;

&lt;p&gt;Too few - I’m the only female developer. There are two women in the data team, one of whom is the Head of Data.&lt;/p&gt;

&lt;h3 id=&quot;how-do-you-keep-yourself-informed-about-the-latest-trends&quot;&gt;How do you keep yourself informed about the latest trends?&lt;/h3&gt;

&lt;p&gt;I’ve attended a couple of meetups and conferences since I’ve been in Paris. In all honesty, I haven’t attended as many as I would have liked to. This is for two reasons. Firstly, I love my work but by the end of the day I’m exhausted - the learning curve is still steep. But it’s ok that I have other passions and other things I like doing beyond coding - it took me a long time to accept that.&lt;/p&gt;

&lt;p&gt;Secondly, even though everyone at the events I’ve been to has been nothing less than welcoming, I still suffer from a lot of self-doubt! It’s easy to worry that you won’t be taken seriously.&lt;/p&gt;

&lt;p&gt;There are also a couple of blogs and newsletters I receive regularly and other resources I’ve come across online when trying to find a solution to a problem. And I read the Drivy engineering blog of course!&lt;/p&gt;

&lt;h3 id=&quot;what-advice-would-you-give-to-a-woman-considering-a-career-in-the-tech-industry-what-do-you-wish-you-had-known&quot;&gt;What advice would you give to a woman considering a career in the tech industry? What do you wish you had known?&lt;/h3&gt;

&lt;p&gt;I wish I had known that the insecurity and self-doubt will never leave me, but that everyone suffers from that. In fact, I think that can even help make you a good developer, because it means you are constantly asking questions and seeking to improve your knowledge. Being aware of the things you don’t know is really important in keeping up with the changes in tech and sharing knowledge with colleagues.&lt;/p&gt;

&lt;p&gt;I worried a lot about my fundamental capacities because of not having a mathematical and scientific background and because of being dyspraxic. I wish I had taken confidence from the fact that my atypical background means I have a unique skill-set that I can bring to my work.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Videla, A., “Programming as translation”, February 2019, &lt;a href=&quot;https://increment.com/internationalization/programming-as-translation/&quot; target=&quot;_blank&quot;&gt;https://increment.com/internationalization/programming-as-translation/&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        
          <description>&lt;p&gt;After working as a teacher and translator for several years, Emily embarked on a new phase in her career by learning a different kind of language: programming.&lt;/p&gt;
</description>
        
        <pubDate>Tue, 19 Feb 2019 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/from-translator-to-developer/</link>
        <guid isPermaLink="true">https://getaround.tech/from-translator-to-developer/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Rails 6 unnoticed features</title>
        <dc:creator>Alexandre Ferraille</dc:creator>
        <description>&lt;p&gt;Rails 6.0.0.beta1 is out and you may have already tested it. We all have heard about the main features such as multi-database connectivity, Action Mailbox &amp;amp; Action Text merge, parallelized testing, Action Cable testing etc. But there’s also a ton of other cool features that I found interesting.&lt;/p&gt;

&lt;h2 id=&quot;requirements-change&quot;&gt;Requirements change&lt;/h2&gt;
&lt;p&gt;With each major release comes new requirements, starting with Ruby which is now required with a minimal version of 2.5.0 instead of 2.2.2 for Rails 5.2. Our databases also get an upgrade with 5.5.8 for MySQL, 9.3 for PostgreSQL and 3.8 for SQLite.&lt;/p&gt;

&lt;h2 id=&quot;webpacker-as-default&quot;&gt;Webpacker as default&lt;/h2&gt;
&lt;p&gt;Webpacker has been merged in Rails 5.1 and provides a modern asset pipeline with the integration of Webpack for your javascript files. Before Rails 6 you had to generate your app with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--webpacker&lt;/code&gt; option to use it, now Webpacker is the default and it’s a good first step for a modern asset pipeline on Rails in replacement of Sprockets - you currently still need it to load your CSS and images.&lt;/p&gt;

&lt;h2 id=&quot;environment-support-for-encrypted-credentials&quot;&gt;Environment support for encrypted credentials&lt;/h2&gt;
&lt;p&gt;Rails 5.1 introduced encrypted credentials: a file containing your passwords, API keys etc., which can be safely shared. All you need to do is to store safely the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ENV[’RAILS_MASTER_KEY’]&lt;/code&gt;. This created a problem: when you wanted to have different credentials for your environments you were stuck with one shared file across all your environments. This is solved now: you can have a specific encrypted file per environment.&lt;/p&gt;

&lt;h2 id=&quot;dns-guard-hosts-whitelist&quot;&gt;DNS Guard: hosts whitelist&lt;/h2&gt;
&lt;p&gt;Rails 6 added a new middleware called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ActionDispatch::HostAuthorization&lt;/code&gt; allowing you to whitelist some hosts for your application and preventing &lt;a href=&quot;https://dzone.com/articles/what-is-a-host-header-attack&quot;&gt;Host header attacks&lt;/a&gt;. You can easily configure it with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IPAddr&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Proc&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegExp&lt;/code&gt; (useful when dealing with wildcard domains).&lt;/p&gt;

&lt;h2 id=&quot;translations-and-_html&quot;&gt;Translations and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_html&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;If you’re using the &lt;a href=&quot;/security-tips-for-rails-apps&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_html&lt;/code&gt; suffix&lt;/a&gt; a lot for your translation keys, you can refactor a group of keys on the same level by adding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_html&lt;/code&gt; to the parent and removing it to the children.&lt;/p&gt;

&lt;h2 id=&quot;filtering-sensitive-parameters&quot;&gt;Filtering sensitive parameters&lt;/h2&gt;
&lt;p&gt;If you’re dealing with sensitive data you want to hide from logs, console etc. you can configure &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ActiveRecord::Base::filter_attributes&lt;/code&gt; with a list of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegExp&lt;/code&gt; which match sensitive attributes.&lt;/p&gt;

&lt;h2 id=&quot;time-comparisons&quot;&gt;Time comparisons&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Date&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DateTime&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Time&lt;/code&gt; received a bunch of methods allowing us to do comparisons without traditional operators - easier to read:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;rental_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;starts_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;after?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rental_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ends_at&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rental_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;starts_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;before?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rental_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ends_at&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;private-delegate&quot;&gt;Private &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;delegate&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;You can now &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;delegate&lt;/code&gt; a method without exposing it publicly with the new option &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;private&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:full_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;to: :current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;private: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;relationpick&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Relation#pick&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;If you need to select a column from an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ActiveRecord::Relation&lt;/code&gt; you can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pluck&lt;/code&gt; which will trigger the following query:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`articles`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`title`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`articles`&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But if you want the first value you’ll need to add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.limit(1)&lt;/code&gt;, that’s what &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pick&lt;/code&gt; is doing for you:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`articles`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`title`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`articles`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;deprecate-update_attributes--update_attributes&quot;&gt;Deprecate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update_attributes!&lt;/code&gt; &amp;amp; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update_attributes&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Should we prefer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update_attributes&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt;? &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update_attributes!&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update!&lt;/code&gt;? These methods have always been confusing but were nothing more than aliases. No more confusions and consistency issues!&lt;/p&gt;

&lt;h2 id=&quot;utf8mb4-as-default-for-mysql&quot;&gt;Utf8mb4 as default for MySQL&lt;/h2&gt;
&lt;p&gt;Users are putting emojis 😀 everywhere, I’m 💯% sure you already got the issue when trying to insert them in your database. Setting Utf8mb4 as default instead of Utf8 solves the problem. It also helps if you need to handle Asian characters, mathematical characters etc.
Note that you still need to migrate your old tables manually.&lt;/p&gt;

&lt;h2 id=&quot;change-system-database&quot;&gt;Change system database&lt;/h2&gt;
&lt;p&gt;Changing database from default SQLite to PostgreSQL (for example) is something that you might need to do at an early stage of your project, and could be painful if you don’t have the proper config files and templates in your Rails app. Now, you no longer need to generate a new Rails app with the proper database to grab the files you need,  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rails db:system:change&lt;/code&gt; is here.&lt;/p&gt;

&lt;h2 id=&quot;create_table-if_not_exist-option-for-migrations&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create_table&lt;/code&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:if_not_exist&lt;/code&gt; option for migrations&lt;/h2&gt;
&lt;p&gt;When running, rollbacking and updating migrations it can be a mess and sometimes you need to manually clean your database in order to run a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create_table&lt;/code&gt; which already physically exists. Now, you can bypass a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create_table&lt;/code&gt; block in this case using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:if_not_exist&lt;/code&gt; option.&lt;/p&gt;

&lt;h2 id=&quot;navigating-in-the-session-object&quot;&gt;Navigating in the session object&lt;/h2&gt;
&lt;p&gt;Using and navigating in the session object can be painful if the keys/sub-keys you’re looking for are not defined. Fortunately, Rails 6 is adding a Hash-like method called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dig&lt;/code&gt;, allowing you to safely navigate in your session object.&lt;/p&gt;

&lt;h2 id=&quot;enumerableindex_with&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enumerable#index_with&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;New method allowing you to create a Hash from an Enumerable:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;sx&quot;&gt;%w(driver owner drivy)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;index_with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; { 'driver' =&amp;gt; nil, 'owner' =&amp;gt; nil, 'drivy' =&amp;gt; nil }&lt;/span&gt;

&lt;span class=&quot;sx&quot;&gt;%w(driver owner drivy)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;index_with&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta_amount_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; { 'driver' =&amp;gt; '...', 'owner' =&amp;gt; '...', 'drivy' =&amp;gt; '...' }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;arrayextract&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Array#extract!&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;This is a new method added to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Array&lt;/code&gt; which works like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reject!&lt;/code&gt; but instead of returning an array of the non-rejected values, you get the values which returns true for the block.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;my_array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;my_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extract!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [3,4]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;my_array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;starting-your-app&quot;&gt;Starting your app&lt;/h2&gt;
&lt;p&gt;You get an error when starting your rails server? The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rails server&lt;/code&gt; command no longer passes the server name as a Rack argument but is using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-u&lt;/code&gt; option. You will start you server this way: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rails server -u puma&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;of-course-theres-more&quot;&gt;Of course, there’s more&lt;/h2&gt;
&lt;p&gt;This is a non-exhaustive list of things I found fun and/or useful and I encourage you to &lt;a href=&quot;https://github.com/rails/rails/releases/tag/v6.0.0.beta1&quot;&gt;read the full changelog&lt;/a&gt;. A lot of deprecation has been added, previously deprecated methods have been dropped and there’s much more that you might find useful.&lt;/p&gt;
</description>
        
          <description>&lt;p&gt;Rails 6.0.0.beta1 is out and you may have already tested it. We all have heard about the main features such as multi-database connectivity, Action Mailbox &amp;amp; Action Text merge, parallelized testing, Action Cable testing etc. But there’s also a ton of other cool features that I found interesting.&lt;/p&gt;
</description>
        
        <pubDate>Fri, 15 Feb 2019 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/rails-6-unnoticed-features/</link>
        <guid isPermaLink="true">https://getaround.tech/rails-6-unnoticed-features/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Handle disabled mobile data setting on iOS</title>
        <dc:creator>Thomas Senkman</dc:creator>
        <description>&lt;p&gt;For an unknown reason, a significant number of users &lt;strong&gt;disable the mobile data for our iOS app&lt;/strong&gt;. This is not a problem when they are booking a car from their couch at home with Wi-Fi, but can quickly become a major issue when they try to unlock their Drivy Open car in the street. At this specific moment, there is very little chance that they remember they disabled this setting, so it very often leads to a call to Customer Services that could have been avoided.&lt;/p&gt;

&lt;figure&gt;
  &lt;img alt=&quot;Drivy's settings with mobile data switched off&quot; src=&quot;/assets/posts/2019-02-13-handle-disabled-mobile-data-setting-on-ios/settings.jpeg&quot; /&gt;
  &lt;figcaption&gt;
    Drivy's settings with mobile data switched off
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;If we do nothing about this, the users’s resquests would always fail when not on Wi-Fi, and they would see a default error. In our case, they would see the message “An error has occurred”, which doesn’t help them to understand what’s wrong. However, &lt;strong&gt;it’s our job to let the users know what they can do to fix the issue.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;ios-native-implementation&quot;&gt;iOS native implementation&lt;/h2&gt;

&lt;p&gt;To try to solve this, according to our tests, iOS shows an alert when &lt;strong&gt;all these conditions are met&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;network is &lt;strong&gt;not reachable&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;mobile data setting &lt;strong&gt;is disabled&lt;/strong&gt; for the current app&lt;/li&gt;
  &lt;li&gt;mobile data setting &lt;strong&gt;value has changed since last app opening&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
  &lt;img alt=&quot;iOS native alert&quot; src=&quot;/assets/posts/2019-02-13-handle-disabled-mobile-data-setting-on-ios/popup.png&quot; /&gt;
  &lt;figcaption&gt;
    iOS native alert
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Its UX is nice, because it &lt;strong&gt;redirect the user to the correct screen to update the setting with a single tap&lt;/strong&gt;. But this doesn’t cover all the cases: if a first Wi-Fi call is successful, even with the mobile data setting disabled, the user will never see the alert.&lt;/p&gt;

&lt;p&gt;Because we think it’s not sufficient, &lt;strong&gt;we decided to reimplement this alert for each network call that fails because of this specific setting&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;lets-code-this&quot;&gt;Let’s code this&lt;/h2&gt;

&lt;h3 id=&quot;requirements&quot;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;The only requirement is to have an &lt;strong&gt;iOS 9&lt;/strong&gt; app target, as we will use &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CTCellularData&lt;/code&gt;&lt;/strong&gt; which is only available from this version. To our knownledge there is unfortunately no way to check the network-data setting value before.&lt;/p&gt;

&lt;h3 id=&quot;used-tools&quot;&gt;Used tools&lt;/h3&gt;

&lt;p&gt;So since iOS 9, Apple provides in &lt;a href=&quot;https://developer.apple.com/documentation/coretelephony/ctcellulardata&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CTCellularData&lt;/code&gt;&lt;/a&gt; a listener to check the value of the mobile data switch for the current app.&lt;/p&gt;

&lt;p&gt;We’ll also need to be able to check for &lt;strong&gt;reachability&lt;/strong&gt; to know if we are in our specific error case. As we use Alamofire in our app, we used their &lt;a href=&quot;https://github.com/Alamofire/Alamofire/blob/master/Documentation/AdvancedUsage.md#network-reachability&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NetworkReachabilityManager&lt;/code&gt;&lt;/a&gt;, but you can also use another solution like &lt;a href=&quot;https://github.com/ashleymills/Reachability.swift&quot;&gt;Reachability.swift&lt;/a&gt; or even add Apple’s &lt;a href=&quot;https://developer.apple.com/documentation/systemconfiguration/scnetworkreachability-g7d&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SCNetworkReachability&lt;/code&gt;&lt;/a&gt; class to your app for this.&lt;/p&gt;

&lt;h3 id=&quot;getting-the-current-mobile-data-setting-value&quot;&gt;Getting the current mobile data setting value&lt;/h3&gt;

&lt;p&gt;Implementing the listener to get the current value is pretty straightforward:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CoreTelephony&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cellularData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CTCellularData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cellularData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cellularDataRestrictionDidUpdateNotifier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;getting-the-reachability-status&quot;&gt;Getting the reachability status&lt;/h3&gt;

&lt;p&gt;Same logic here, we just have to explicitly start the listener after setting it:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alamofire&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;networkReachabilityManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NetworkReachabilityManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;networkReachabilityManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    
&lt;span class=&quot;n&quot;&gt;networkReachabilityManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;startListening&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;data-availability&quot;&gt;Data availability&lt;/h3&gt;

&lt;p&gt;Checking reachability can be done at any moment, but is not instant. So if you init the &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NetworkReachabilityManager&lt;/code&gt;&lt;/strong&gt; and directly try to get the current status, this will probably fail. To avoid this, and because this does not consume a great deal of memory, we can have our own manager that stores the current value whenever it changes:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alamofire&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ApiReachabilityManager&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;currentNetworkReachabilityState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NetworkReachabilityManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NetworkReachabilityStatus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unknown&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;networkReachabilityManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NetworkReachabilityManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;networkReachabilityManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentNetworkReachabilityState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    
    &lt;span class=&quot;n&quot;&gt;networkReachabilityManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;startListening&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;when-to-make-the-checks&quot;&gt;When to make the checks&lt;/h2&gt;

&lt;p&gt;We strongly advise to &lt;strong&gt;check both statuses&lt;/strong&gt;, especially reachability, &lt;strong&gt;only when network errors happen&lt;/strong&gt;. You should never check for reachability before making a network call to potentially avoid making it.
If there is an issue with the reachability, this would result in blocking all the network calls of your app. This is even the first “important thing” Alamofire says in their documentation:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Do NOT use Reachability to determine if a network request should be sent.
You should ALWAYS send it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;final-implementation&quot;&gt;Final implementation&lt;/h2&gt;

&lt;p&gt;Here is our singleton manager, which contains:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2 publics functions to:
    &lt;ul&gt;
      &lt;li&gt;start listeners&lt;/li&gt;
      &lt;li&gt;check current statuses&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;1 private function to present the same alert as the native one&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Foundation&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CoreTelephony&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alamofire&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ApiReachabilityManager&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;shared&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ApiReachabilityManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;networkReachabilityManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NetworkReachabilityManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cellularData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CTCellularData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;currentNetworkReachabilityState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NetworkReachabilityManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NetworkReachabilityStatus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unknown&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;currentCellularDataState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CTCellularDataRestrictedState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;restrictedStateUnknown&lt;/span&gt;
  
  &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cellularData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cellularDataRestrictionDidUpdateNotifier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentCellularDataState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;networkReachabilityManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentNetworkReachabilityState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;networkReachabilityManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;startListening&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;checkApiReachability&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;viewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;restricted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;isRestricted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentNetworkReachabilityState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;notReachable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentCellularDataState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;restricted&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isRestricted&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;viewController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;presentReachabilityAlert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;nf&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;presentReachabilityAlert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;viewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alertController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIAlertController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// TODO: replace YOUR-APP by your app's name&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Mobile Data is Turned Off for &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;YOUR-APP&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;You can turn on mobile data for this app in Settings.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;preferredStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alert&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;settingsUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;openSettingsURLString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shared&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;canOpenURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;settingsUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;alertController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;UIAlertAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Settings&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shared&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;settingsUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;okAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIAlertAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;OK&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;alertController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;okAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;alertController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preferredAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;okAction&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;viewController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;present&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alertController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We need to start the listeners at some point, we’ve chosen to do it directly at app launch, in &lt;strong&gt;AppDelegate&lt;/strong&gt; since our app needs network calls directly:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kt&quot;&gt;ApiReachabilityManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shared&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, in your view controller, you can simply call the &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;checkApiReachability&lt;/code&gt;&lt;/strong&gt; method in case of error:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;ApiReachabilityManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shared&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;checkApiReachability&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;viewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;restricted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;restricted&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// TODO: continue to handle error, there is no network-data issue&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// No need to handle else case as alert has been presented if needed&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;It’s kind of strange to reimplement a native alert, but we were really surprised by iOS’s &lt;del&gt;incomplete&lt;/del&gt; basic version, which isn’t that much of a help in our case. We only did this recently so we don’t have enough data to draw conclusions, but we hope this will avoid some calls to Customer Services.&lt;/p&gt;

&lt;p&gt;And don’t forget to &lt;strong&gt;never rely on reachability before making the actual network call&lt;/strong&gt;: it should always be an error handling helper.&lt;/p&gt;
</description>
        
          <description>&lt;p&gt;For an unknown reason, a significant number of users &lt;strong&gt;disable the mobile data for our iOS app&lt;/strong&gt;. This is not a problem when they are booking a car from their couch at home with Wi-Fi, but can quickly become a major issue when they try to unlock their Drivy Open car in the street. At this specific moment, there is very little chance that they remember they disabled this setting, so it very often leads to a call to Customer Services that could have been avoided.&lt;/p&gt;
</description>
        
        <pubDate>Wed, 13 Feb 2019 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/handle-disabled-mobile-data-setting-on-ios/</link>
        <guid isPermaLink="true">https://getaround.tech/handle-disabled-mobile-data-setting-on-ios/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Ruby tricks for junior developers</title>
        <dc:creator>Clement Bruno</dc:creator>
        <description>&lt;p&gt;As a junior developer who started his professional coding journey fairly recently I realized that I only used a limited number of methods and ruby capabilities. Since I got started at Drivy, I have discovered several ruby tricks that helped me make my code more readable and efficient.&lt;/p&gt;

&lt;h2 id=&quot;the-dig-method&quot;&gt;The dig method&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dig&lt;/code&gt;&lt;/strong&gt; method can be used on hashes (and Arrays) to, as its name suggests, dig through the potential multiple layers in the object and retrieve the value corresponding to the argument provided to the method.&lt;br /&gt;
By using &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dig&lt;/code&gt;&lt;/strong&gt; you find yourself able to nicely shorten your code and improve overall readability:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Let's consider the following hash structure&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;user_info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Bob'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;email: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'bob@drivy.com'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;family_members: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;brother: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Bobby'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;age: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;mother: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Constance'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;age: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;55&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;father: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'John'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;age: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Formerly, if I wanted to access our user’s brother name, I would have written something like that:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;user_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:family_members&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:brother&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But that is considering the fact that I was &lt;strong&gt;SURE&lt;/strong&gt; that each key in fact existed in the hash structure.&lt;br /&gt;
For instance, if I executed the following statement, my program would crash because of a non existing key:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;user_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:family_members&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:grand_father&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; `NoMethodError: undefined method `[]' for nil:NilClass`&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Therefore, if I wanted to be safe while navigating in my hash structure, I should have written something like that:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;user_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:family_members&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:family_members&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:grand_father&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:family_members&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:grand_father&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; nil&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is way too long and annoying to write… With the &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dig&lt;/code&gt;&lt;/strong&gt; method I can simplify this statement a lot:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;users_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:family_members&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:brother&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &quot;Bobby&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;users_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:family_members&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:grand_father&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; nil&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;protected-methods&quot;&gt;Protected methods&lt;/h2&gt;

&lt;p&gt;Everyone knows about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;private&lt;/code&gt; methods but I’ve found that not many people use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;protected&lt;/code&gt; ones.&lt;/p&gt;

&lt;p&gt;Neither &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;private&lt;/code&gt; methods nor &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;protected&lt;/code&gt; ones can be called &lt;strong&gt;directly&lt;/strong&gt; by instances of the class in which the method is defined.&lt;br /&gt; 
For an instance to access these methods they must be called within a public method defined in the class.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Let's consider the following classes&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Animal&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;current_activity&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;I am &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define_activity&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;define_activity&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@activity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;eating&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hunting&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sleeping&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sample&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Hereabove, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;current_activity&lt;/code&gt; method could be called by any instance of the Animal class (&lt;em&gt;or any other class inheriting from the Animal class&lt;/em&gt;).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# For instance&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Animal&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;preferred_activity&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;My favorite activity is &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define_activity&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;felix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;felix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;preferred_activity&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &quot;My favorite activity is sleeping&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However, when a method is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;private&lt;/code&gt; it cannot be called on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self&lt;/code&gt; within a class…
For instance, this would raise an error:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Animal&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;current_activity&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;I am &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define_activity&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;define_activity&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@activity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;eating&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hunting&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sleeping&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sample&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;kong&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current_activity&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; NoMethodError: private method `define_activity' called for #&amp;lt;Animal:0x007ff6881d08b8&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Being able to do so could be especially handy if you wanted to call it on other instances of your class passed as method arguments. For instance it would be useful to be able to do that:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Animal&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;same_activity_as?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other_animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;define_activity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other_animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define_activity&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;define_activity&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@activity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;eating&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hunting&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sleeping&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sample&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;fido&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bobby&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;fido&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;same_activity_as?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bobby&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; NoMethodError: private method `define_activity' called for #&amp;lt;Animal:0x007ff688142f90&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In order for the above code not to break we can make the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;define_activity&lt;/code&gt; method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;protected&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;private&lt;/code&gt; and everything will work just fine:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Animal&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;same_activity_as?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other_animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;define_activity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other_animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define_activity&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;protected&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;define_activity&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@activity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;eating&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hunting&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sleeping&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sample&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;fido&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bobby&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;fido&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;same_activity_as?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bobby&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;NB: Please note that the protected method can here be called on instances of the class but only within the class definition body. These methods cannot be directly called on an instance of the class such as: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fido.define_activity&lt;/code&gt; which would return an error &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NoMethodError: protected method 'define_activity' called for #&amp;lt;Animal:0x007ff688846120&amp;gt;&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;-assignment&quot;&gt;||= assignment&lt;/h2&gt;

&lt;p&gt;When I got started I didn’t know about ruby’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;double pipe equals:&lt;/code&gt; &lt;strong&gt;||=&lt;/strong&gt;. The concept is fairly simple and can be very useful in a variety of situations.
Basically using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;||=&lt;/code&gt; allows you to perform a variable assignment &lt;strong&gt;if and only if&lt;/strong&gt; the variable is not yet defined or if its value is currently falsey (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nil&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;nil_variable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;nil_variable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 10 --&amp;gt; nil_variable is now set to 10&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;false_variable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;false_variable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 10 --&amp;gt; false_variable is now set to 10&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;not_defined_variable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 10 --&amp;gt; not_defined_variable is now set to 10&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;I already have some content&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &quot;I already have some content&quot; --&amp;gt; The content variable is not reassigned and keeps its initial value&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;safe-navigation-operator-&quot;&gt;Safe navigation operator: &lt;em&gt;&amp;amp;&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;This one allows to navigate safely through the layers of objects relations.
Basically, let’s say that we have a company with only one employee and that this employee has a name and an email address:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Company&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:employee&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@employee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employee&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:email&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;bobby&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Bobby'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bobby@drivy.com'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;drivy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bobby&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this context if I wanted to access Drivy’s employee name I woud probably do the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drivy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; Bobby&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However, this only works in an environment where none of the elements in the chain (except possibly for the last one) can be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nil&lt;/code&gt;.
Now, let’s imagine a case where the company does not really have any employee. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drivy&lt;/code&gt; object would be instantiated as follows and the above code would raise an error:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;drivy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drivy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; NoMethodError: undefined method `name' for nil:NilClass&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In order to prevent this behaviour, ruby has the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; operator (since version 2.3) which behaves a bit like the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try&lt;/code&gt; method in rails. 
It tries to fetch the object attribute and returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nil&lt;/code&gt; if any element in the chain is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nil&lt;/code&gt;.
For instance:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;drivy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drivy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; nil&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;google&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bobby&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; Bobby&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;struct&quot;&gt;Struct&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Struct&lt;/code&gt; is kind of a shortcut class which acts in a way more “liberal” manner. It allows for faster development when you are not willing to create a new class with an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initialize&lt;/code&gt; method and other behavioural methods.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Struct&lt;/code&gt; is created as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:number_of_legs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fido&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;fido&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;dog&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And the parameters passed to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new&lt;/code&gt; method are instance variables directly accessible from the instance:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fido&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &quot;fido&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fido&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'cat'&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &quot;cat&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# I said that Struct are more liberal because they do not enforce the presence of the arguments that you have to provide to create new instances:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bob&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bob&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In addition to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Struct&lt;/code&gt;, ruby provides the ability to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OpenStruct&lt;/code&gt;. The main difference is that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Struct&lt;/code&gt; creates a new class whereas &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OpenStruct&lt;/code&gt; directly creates a new object.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;dinosaur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OpenStruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;t-rex&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;number_of_legs: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dinosaur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;number_of_legs&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These tools can be very useful to stub simple object or classes while testing since they allow to replicate basic behaviours very quickly without much hassle.&lt;/p&gt;

&lt;h2 id=&quot;symbolto_proc&quot;&gt;Symbol#to_proc&lt;/h2&gt;

&lt;p&gt;Finally I’d like to share a ruby idiom which allows to nicely shorten some statements and improve readability :)&lt;/p&gt;

&lt;p&gt;You may have already seen things such as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 6&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When ruby sees the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; followed by a symbol, it calls the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;to_proc&lt;/code&gt; method on the symbol and passes the proc as a block to the method.&lt;/p&gt;

&lt;p&gt;The above examples are equivalent to writing:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 6&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        
          <description>&lt;p&gt;As a junior developer who started his professional coding journey fairly recently I realized that I only used a limited number of methods and ruby capabilities. Since I got started at Drivy, I have discovered several ruby tricks that helped me make my code more readable and efficient.&lt;/p&gt;
</description>
        
        <pubDate>Tue, 22 Jan 2019 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/ruby-tricks-for-junior-devs/</link>
        <guid isPermaLink="true">https://getaround.tech/ruby-tricks-for-junior-devs/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Lambda composition in ruby 2.6</title>
        <dc:creator>David Bourguignon</dc:creator>
        <description>&lt;h2 id=&quot;what-are-we-talking-about&quot;&gt;What are we talking about?&lt;/h2&gt;

&lt;p&gt;We recently updated a sizeable application to ruby 2.5, which opened up some nice features for us,
such as
the &lt;a href=&quot;https://mlomnicki.com/yield-self-in-ruby-25/&quot;&gt;yield_self&lt;/a&gt; feature.&lt;/p&gt;

&lt;p&gt;But I also wanted to have a quick look at 2.6 for comparison purposes, 
and I found a small feature that can easily be overlooked:
the new proc composition operators: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt;&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can find the original request (from 2012!) &lt;a href=&quot;https://bugs.ruby-lang.org/issues/6284&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is a way to compose a new proc by “appending” several other procs together.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: all the code that is present in this article can also be found in 
this &lt;a href=&quot;https://gist.github.com/dbourguignon/1d7e94daaddd3b2e133ae1fe17aad92f&quot;&gt;gist&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;a-simple-example&quot;&gt;A simple example&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# This lambda takes one argument and returns the same prefixed by &quot;hello&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;greet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# This lambda takes one argument and returns the upcased version&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;upcase&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# So you can do&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; hello world&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; WORLD&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;present&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;present&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; HELLO WORLD&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;present&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;present&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; hello WORLD&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Lines 2 and 4 declare 2 simple lambdas, taking 1 argument each.&lt;/p&gt;

&lt;p&gt;Lines 10 and 14 are where the magic happens.&lt;/p&gt;

&lt;p&gt;This works like a shell-redirect operator, it takes the “output” from one
lambda and sets it as input of the other.&lt;/p&gt;

&lt;p&gt;In line 10, we take the “world” input, pass it to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greet&lt;/code&gt;, then take the output to pass it to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;upper&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The equivalent would be doing: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;upper[greet[&quot;world&quot;]]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Line 14 is the same in reverse order. The equivalent is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greet[upper[&quot;world&quot;]]&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;lets-dive-deeper&quot;&gt;Let’s dive deeper&lt;/h2&gt;

&lt;p&gt;That was a simplistic example. Let’s try something more useful.&lt;/p&gt;

&lt;p&gt;Let’s say we have a transformation-rules directory,
and some pipeline definition that would define which rules we should use in a particular case.&lt;/p&gt;

&lt;p&gt;Let’s define some pricing rules:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# List of our individual pricing rules&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;TAX&lt;/span&gt;           &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.05&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;FEE&lt;/span&gt;           &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;PREMIUM&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;DISCOUNT&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.90&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;ROUND_TO_CENT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# One presenter&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;PRESENT&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Pre-define some rule sets for some pricing scenarios&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;REGULAR_SET&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;FEE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ROUND_TO_CENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PRESENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;PREMIUM_SET&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;FEE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PREMIUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ROUND_TO_CENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PRESENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;DISCOUNTED_SET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;FEE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DISCOUNT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ROUND_TO_CENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PRESENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we can define a price calculator:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply_rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;At this point we can easily calculate the pricing for a given scenario:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BigDecimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;regular:    &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply_rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;rules: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;REGULAR_SET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;base_price: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 106.05&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;premium:    &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply_rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;rules: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PREMIUM_SET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;base_price: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 116.55&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;discounted: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply_rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;rules: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DISCOUNTED_SET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;base_price: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 95.45&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Again, this is quite a naive implementation.&lt;/p&gt;

&lt;p&gt;Here we can find that the order of the rules and the type of operator we use will change, for instance
in our case we want to apply taxes on the final amount (including discount, premium or other).
Rounding as a last step is important too.&lt;/p&gt;

&lt;h2 id=&quot;is-using-these-composition-operators-a-good-idea&quot;&gt;Is using these composition operators a good idea?&lt;/h2&gt;

&lt;p&gt;I’ll let you make your own mind up.&lt;/p&gt;

&lt;p&gt;This is one more tool in the ruby toolbox. It’s one important step toward 
a more functional style, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yield_self&lt;/code&gt; in 2.5 (now aliased as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;then&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Both allow for some kind of pipeline, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yield_self&lt;/code&gt; for transforming values, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt;&amp;gt;&lt;/code&gt; for
transforming lambdas.&lt;/p&gt;
</description>
        
          <description>&lt;h2 id=&quot;what-are-we-talking-about&quot;&gt;What are we talking about?&lt;/h2&gt;
</description>
        
        <pubDate>Tue, 15 Jan 2019 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/ruby-lambda-composition/</link>
        <guid isPermaLink="true">https://getaround.tech/ruby-lambda-composition/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Why we've chosen Snowflake ❄️ as our Data Warehouse</title>
        <dc:creator>Faouz EL FASSI</dc:creator>
        <description>&lt;p&gt;In the first of this series of blog posts about Data-Warehousing, I’ve been talking about &lt;a href=&quot;https://drivy.engineering/redshift_tips_ticks_part_1/&quot;&gt;how we use and manage our Amazon Redshift cluster&lt;/a&gt; at Drivy.&lt;/p&gt;

&lt;p&gt;One of the most significant issues we had at this time was: how to isolate the compute from the storage to ensure maximum concurrency on read in order to &lt;strong&gt;do more and more data analysis and on-board more people in the team&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I briefly introduced Amazon Spectrum and promised to talk about how we were going to use it in a second blog post… But, that turned out not to be the case, because we ultimately decided to choose another data-warehousing technology (&lt;a href=&quot;https://www.snowflake.com/&quot;&gt;Snowflake Computing&lt;/a&gt;) which addresses the issue mentioned above, among other things, that I’ll expose here.&lt;/p&gt;

&lt;h1 id=&quot;why-are-we-changing-our-data-warehouse&quot;&gt;Why are we changing our Data Warehouse?&lt;/h1&gt;
&lt;p&gt;In Redshift and most of the Massive Parallel Processing SQL DBMS, the underlying data architecture is a mix of two paradigms:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Shared nothing: chunks of a table are spread across the worker nodes with no overlaps;&lt;/li&gt;
  &lt;li&gt;Shared everything: a full copy of a table is available on every worker node.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This approach is convenient for homogeneous workloads: a system configuration that is ideal of bulk loading (high I/O, light compute) is a poor fit for complex analytical queries (low I/O, heavy compute) and vice versa.&lt;/p&gt;

&lt;p&gt;When you deal with many consumers with different volumes and treatments you usually tend towards a multi-cluster organization of your data warehouse, where each cluster is dedicated to a workload category: I/O intensive, storage-intensive or compute-intensive.&lt;/p&gt;

&lt;p&gt;This design gives more velocity to the teams. You can decide to have one cluster for each team, for example, one for the finance, one for the marketing, one for the product, etc. They generally no longer have resource related issues, but new kinds of problems could emerge: &lt;strong&gt;data freshness and consistency across clusters&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Indeed, multi-clustering involves synchronization between clusters to ensure that the same complete data is available on every cluster on time. It complexifies the overall system, and thus results in a loss of agility.&lt;/p&gt;

&lt;p&gt;In our case we have thousands of queries running on a single Redshift cluster, so very different workloads can occur concurrently:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a Drivy fraud application frequently requires the voluminous web and mobile app tracking data to detect fraudulent devices,&lt;/li&gt;
  &lt;li&gt;the main business-reporting runs a large computation on multiple tables,&lt;/li&gt;
  &lt;li&gt;the ETL pipeline of production DB dump and enrichment is running,&lt;/li&gt;
  &lt;li&gt;the ETL pipeline responsible for the tracking is running,&lt;/li&gt;
  &lt;li&gt;an exploration software extracts millions of records.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In order to improve the overall performance, to reduce our SLAs and make room for every analyst who wants to sandbox a complex analysis, we were looking for a solution that would increase the current capabilities of the system without adding new struggles.&lt;/p&gt;

&lt;p&gt;It has to ensure the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ANSI SQL support and ACID transactions.&lt;/li&gt;
  &lt;li&gt;Peta-byte scale.&lt;/li&gt;
  &lt;li&gt;A fully managed solution.&lt;/li&gt;
  &lt;li&gt;Seamless scaling capability, ideally ability to scale independently compute and storage.&lt;/li&gt;
  &lt;li&gt;Cost effective.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Snowflake Computing meets all those requirements, it has a cloud-agnostic (could be Azure or AWS) shared-data architecture and elastic on-demand virtual warehouses that access the same data layer.&lt;/p&gt;

&lt;h1 id=&quot;the-snowflake-elastic-data-warehouse&quot;&gt;The Snowflake Elastic data warehouse&lt;/h1&gt;

&lt;p&gt;Snowflake is a pure software as a service, which supports ANSI SQL and ACID transactions. It also supports semi-structured data such as JSON and AVRO.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The most important aspect is its elasticity.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Storage and computing resources can be scaled independently in seconds. To achieve that, virtual warehouses can be created and decommissioned on the fly. Each virtual warehouse has access to the shared tables directly on S3, &lt;strong&gt;without the need to physically copy the data&lt;/strong&gt;.&lt;/p&gt;

&lt;figure&gt;
  &lt;img alt=&quot;Snowflake architecture&quot; src=&quot;/assets/posts/2019-01-07-snowflake-migration/architecture.png&quot; /&gt;
  &lt;figcaption&gt;
    Multi-Cluster, Shared Data Architecture. Source: https://www.snowflake.com
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;They also have two really interesting features: &lt;strong&gt;auto-suspend&lt;/strong&gt; and &lt;strong&gt;auto-scale&lt;/strong&gt;.
Every time a cluster is not used for more than 10 minutes, it is automatically put in sleep mode with no additional fees.
The “Enterprise” plan also gives the auto-scale feature that adapts the size of the virtual warehouse according to the workload (horizontal scaling). I haven’t tested this feature yet since we have the lower “Premier” plan.&lt;/p&gt;

&lt;h1 id=&quot;from-redshift-to-snowflake&quot;&gt;From Redshift to Snowflake&lt;/h1&gt;

&lt;p&gt;The data engineering team at Drivy is composed of two engineers. We dedicated a full quarter to the migration on top of the day-to-day operations, and it’s not finished yet.
During this migration, we took the opportunity to pay some of our technical debt and modernize some of our ETL processes.&lt;/p&gt;

&lt;p&gt;One of the greatest improvements we addressed was the versioning on S3 of every data involved prior and post a transformation.
At every run of every ETL pipeline, for instance, if we consider the bulk loading of the production DB, a copy of the raw data and the transformed data is stored on S3.&lt;/p&gt;

&lt;p&gt;That gives us many new capabilities: reproducibility, auditing and easier operations (when backfilling or when updating a table schema).&lt;/p&gt;

&lt;p&gt;The biggest blocks of the migration were:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MySQL to Snowflake: Production DB bulk loading and transformations, with three kinds of ingestions, incremental append-only, incremental upsert, and full dump - we made a questionable choice here: our intermediate format is csv, we had many formatting issues.&lt;/li&gt;
  &lt;li&gt;Captur: Our internal tracking framework, it’s a pipeline that loads raw events from S3 (sent by the web and the mobile apps through a Kinesis stream) and split them into a backend and a frontend schema holding different tables (one for each event). It also automatically detects changes and adapts the schema (new columns, new tables) when needed.&lt;/li&gt;
  &lt;li&gt;API integrations: spreadsheets, 3rd parties APIs… straightforward but numerous.&lt;/li&gt;
  &lt;li&gt;Security and Grants management.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;virtual-warehouses-mix&quot;&gt;Virtual Warehouses mix&lt;/h2&gt;

&lt;p&gt;We want to group similar workloads in the same warehouses, to tailor the resources needed to the complexity of the computations, we made the following choice in our first iteration:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;quantity&lt;/th&gt;
      &lt;th&gt;size&lt;/th&gt;
      &lt;th&gt;users&lt;/th&gt;
      &lt;th&gt;description&lt;/th&gt;
      &lt;th&gt;usage per day&lt;/th&gt;
      &lt;th&gt;usage per week&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;S&lt;/td&gt;
      &lt;td&gt;ETL + Viz&lt;/td&gt;
      &lt;td&gt;Main warehouse for bulk loading, ETL and visualizations software.&lt;/td&gt;
      &lt;td&gt;∞&lt;/td&gt;
      &lt;td&gt;7d/7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;L&lt;/td&gt;
      &lt;td&gt;Exploration&lt;/td&gt;
      &lt;td&gt;Used early in the morning for ~100 high I/O extractions for an exploration software.&lt;/td&gt;
      &lt;td&gt;0 - 4h&lt;/td&gt;
      &lt;td&gt;7d/7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;XS&lt;/td&gt;
      &lt;td&gt;Analysts + Business users&lt;/td&gt;
      &lt;td&gt;Main warehouse for analysts, ~200 daily complex analytical queries.&lt;/td&gt;
      &lt;td&gt;0 - 10h&lt;/td&gt;
      &lt;td&gt;5d/7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;L&lt;/td&gt;
      &lt;td&gt;Machine Learning + Ops&lt;/td&gt;
      &lt;td&gt;Compute intensive warehouse for punctual heavy computations.&lt;/td&gt;
      &lt;td&gt;0 - 2h&lt;/td&gt;
      &lt;td&gt;N.A.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Every warehouse has the default auto-suspend set to 10min of inactivity.&lt;/p&gt;

&lt;h1 id=&quot;whats-next&quot;&gt;What’s next&lt;/h1&gt;

&lt;p&gt;Once we finish our migration, I’ll share my thoughts with you about the overall performance of the new system.
I’ll also iterate on the mix of strategies presented above to ensure maximum velocity and convenience while minimizing the costs.
Also, I’ll tell you more about how we do grant management.&lt;/p&gt;

&lt;p&gt;Meanwhile, don’t hesitate of course to reach out to me if you have any feedback!&lt;/p&gt;
</description>
        
          <description>&lt;p&gt;In the first of this series of blog posts about Data-Warehousing, I’ve been talking about &lt;a href=&quot;https://drivy.engineering/redshift_tips_ticks_part_1/&quot;&gt;how we use and manage our Amazon Redshift cluster&lt;/a&gt; at Drivy.&lt;/p&gt;
</description>
        
        <pubDate>Mon, 07 Jan 2019 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/snowflake-migration/</link>
        <guid isPermaLink="true">https://getaround.tech/snowflake-migration/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Airflow Architecture at Drivy</title>
        <dc:creator>Eloïse Gomez</dc:creator>
        <description>&lt;p&gt;Drivy has been using Airflow to orchestrate tasks for 2 years now. We thought it was the best tool on the market when we wanted to start digging into data. The purpose was to understand how well our features were performing. We didn’t really know how the data was going to be used, and by whom. We wanted something easy to use and set up. We set up everything on an ec2 instance. 75 workflows later, we wanted to upgrade our Airflow version and move from a local to a celeryExecutor mode. In a local mode there is only one worker (which is also the webserver and the scheduler). In the celeryExecutor, on the contrary, there are several workers which can execute tasks in parallel. Our number of DAGs is constantly growing and Celery mode is the best choice to handle this growth.&lt;/p&gt;

&lt;h1 id=&quot;what-is-airflow-&quot;&gt;What is Airflow ?&lt;/h1&gt;

&lt;p&gt;Airflow is Airbnb’s baby. It is an open-source project which schedules DAGs. Dag stands for Directed Acyclic Graph. Basically, they are an organized collection of tasks. Thanks to Airflow’s nice UI, it is possible to look at how DAGs are currently doing and how they perform. If a DAG fails an email is sent with its logs. It can be manually re-triggered through the UI. Dags can combine lot of different types of tasks (bash, python, sql…) and interact with different datasources. Airflow is a really handy tool to transform and load data from a point A to a point B.
You can check their documentation over &lt;a href=&quot;https://airflow.apache.org/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A simple Airflow DAG with several tasks:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/posts/2018-08-24-airflow-architecture/airflow-dag.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;airflow-components&quot;&gt;Airflow components&lt;/h1&gt;

&lt;p&gt;An Airflow cluster has a number of daemons that work together : a webserver, a scheduler and one or several workers.&lt;/p&gt;

&lt;h2 id=&quot;webserver&quot;&gt;Webserver&lt;/h2&gt;

&lt;p&gt;The airflow webserver accepts HTTP requests and allows the user to interact with it. It provides the ability to act on the DAG status (pause, unpause, trigger). When the webserver is started, it starts gunicorn workers to handle different requests in parallel.&lt;/p&gt;

&lt;h2 id=&quot;scheduler&quot;&gt;Scheduler&lt;/h2&gt;

&lt;p&gt;The Airflow scheduler monitors DAGs. It triggers the task instances whose dependencies have been met. It monitors and stays in synchronisation with a folder for all DAG objects, and periodically inspects tasks to see if they can be triggered.&lt;/p&gt;

&lt;h2 id=&quot;worker&quot;&gt;Worker&lt;/h2&gt;

&lt;p&gt;Airflow workers are daemons that actually execute the logic of tasks. They manage one to many CeleryD processes to execute the desired tasks of a particular DAG.&lt;/p&gt;

&lt;h2 id=&quot;how-do-they-interact-&quot;&gt;How do they interact ?&lt;/h2&gt;

&lt;p&gt;Airflow daemons don’t need to register with each other and don’t need to know about each other. They all take care of a specific task and when they are all running, everything works as expected.
The scheduler periodically polls to see if any DAGs which are registered need to be executed. If a specific DAG needs to be triggered, then the scheduler creates a new DagRun instance in the Metastore and starts to trigger the individual tasks in the DAG. The scheduler will do that by pushing messages into the queuing service. A message contains information about the task to execute (DAG_id, task_id..) and what function needs to be performed.
In some cases, the user will interact with the web server. He can manually trigger a DAG to be ran. A DAGRun is created and the scheduler will start trigger individual tasks the same way as described before.
Celeryd processes, controlled by workers, periodically pull from the queuing service. When a celeryd process pulls a task message, it updates the task instance in the metastore to a running state and begins executing the code provided. When the task ends (in a success or fail state) it updates the state of the task.&lt;/p&gt;

&lt;h1 id=&quot;airflow-architecture&quot;&gt;Airflow architecture&lt;/h1&gt;

&lt;h2 id=&quot;single-node-architecture&quot;&gt;Single-node architecture&lt;/h2&gt;
&lt;p&gt;In a single-node architecture all components are on the same node. To use a single node architecture, Airflow has to be configured with the LocalExecutor mode.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/posts/2018-08-24-airflow-architecture/single-node-architecture.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The single-node architecture is widely used by the users in case they have a moderate amount of DAGs. In this mode, the worker pulls tasks to run from an IPC (Inter Process Communication) queue. This mode doesn’t any need external dependencies. It scales up well until all resources on the server are used.
This solution works pretty well. However, to scale out to multiple servers, the Celery executor mode has to be used. Celery executor uses Celery (and a message-queuing server) to distribute the load on a pool of workers.&lt;/p&gt;

&lt;h2 id=&quot;multi-node-architecture&quot;&gt;Multi-node Architecture&lt;/h2&gt;

&lt;p&gt;In a multi node architecture daemons are spread in different machines. We decided to colocate the webserver and the scheduler. To use this architecture, Airflow has to be configure with the Celery Executor mode.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/posts/2018-08-24-airflow-architecture/multi-node-architecture.png&quot; alt=&quot;&quot; /&gt;.&lt;/p&gt;

&lt;p&gt;In this mode, a Celery backend has to be set (Redis in our case).  Celery is an asynchronous queue based on distributed message passing. Airflow uses it to execute several tasks concurrently on several workers server using multiprocessing. This mode allows to scale up the Airflow cluster really easily by adding new workers.&lt;/p&gt;

&lt;h3 id=&quot;why-did-we-choose-to-use-the-multi-node-architecture-&quot;&gt;Why did we choose to use the multi-node architecture ?&lt;/h3&gt;

&lt;p&gt;Multi-node architecture provides several benefits :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Higher availability: if one of the worker nodes goes down, the cluster will still be up and DAGs will still be running.&lt;/li&gt;
  &lt;li&gt;Dedicated workers for specific tasks : we have a workflow where some of our DAGs are CPU intensive. As we have several workers we can dedicate some of them to these kinds of DAGs.&lt;/li&gt;
  &lt;li&gt;Scaling horizontally: Indeed since workers don’t need to register with any central authority to start processing tasks, we can scale our cluster by easily adding new workers. Nodes can be turned on and off without any downtime on the cluster.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the next episode, we’ll look at how we automate Airflow cluster deployment :).&lt;/p&gt;

&lt;h2 id=&quot;sources&quot;&gt;Sources&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://airflow.apache.org/airflow&quot;&gt;Airflow Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/airbnb-engineering/airflow-a-workflow-management-platform-46318b977fd8&quot;&gt;https://medium.com/airbnb-engineering/airflow-a-workflow-management-platform-46318b977fd8&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.slideshare.net/RobertSanders49/running-apache-airflow-workflows-as-etl-processes-on-hadoop&quot;&gt;https://www.slideshare.net/RobertSanders49/running-apache-airflow-workflows-as-etl-processes-on-hadoop&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://demorenoc.github.io/slides/pycon-co-2017/airflow/&quot;&gt;http://demorenoc.github.io/slides/pycon-co-2017/airflow/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        
          <description>&lt;p&gt;Drivy has been using Airflow to orchestrate tasks for 2 years now. We thought it was the best tool on the market when we wanted to start digging into data. The purpose was to understand how well our features were performing. We didn’t really know how the data was going to be used, and by whom. We wanted something easy to use and set up. We set up everything on an ec2 instance. 75 workflows later, we wanted to upgrade our Airflow version and move from a local to a celeryExecutor mode. In a local mode there is only one worker (which is also the webserver and the scheduler). In the celeryExecutor, on the contrary, there are several workers which can execute tasks in parallel. Our number of DAGs is constantly growing and Celery mode is the best choice to handle this growth.&lt;/p&gt;
</description>
        
        <pubDate>Wed, 21 Nov 2018 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/airflow-architecture/</link>
        <guid isPermaLink="true">https://getaround.tech/airflow-architecture/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Open-sourcing checker jobs</title>
        <dc:creator>Nicolas Zermati</dc:creator>
        <description>&lt;p&gt;We’ve recently extracted the &lt;a href=&quot;https://github.com/drivy/checker_jobs&quot;&gt;checker_jobs&lt;/a&gt; gem from our codebase.
It’s a simple alerting tool with a very specific purpose which this article will explain.&lt;/p&gt;

&lt;p&gt;Over time, we update the rules that our data has to comply with. Making sure our data
is always what we expect it to be is hard, especially when old constraints change, new
constraints come along, new fields are added, backfill isn’t always possible…&lt;/p&gt;

&lt;p&gt;Even with a careful team behind it, the system can produce corrupted data for weeks,
months, or years before anyone notices. By that time, it could be too late or just
impossible to fix. In comparison, crashes are noticed faster and could be corrected
quickly, when a data issue could spread and impact many parts of the system making the
issue way more expensive to fix.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;checker_jobs&lt;/code&gt; are here to be sure that when this sneaky data corruption happens,
you notice it right away.&lt;/p&gt;

&lt;h2 id=&quot;what-was-the-problem&quot;&gt;What was the problem?&lt;/h2&gt;

&lt;p&gt;Imagine we’ve got, a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;users&lt;/code&gt; table with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terms_of_services_accepted_at&lt;/code&gt; column. This
column could be set for new users but not for old ones. We need the user to accept the
ToS before they can book a trip on our platform. Unfortunately, old trips aren’t subject
to that rule since the column didn’t exist back then.&lt;/p&gt;

&lt;p&gt;We’ll do the best we can to be sure that we update all our user’s paths to take that
new requirement into account. Even with our nice test suite, we don’t cover all the code
paths, especially with all the production data. That data isn’t fresh from a testing
factory, but testing on legacy, old, and sparse data is a different topic!&lt;/p&gt;

&lt;p&gt;So to get some peace of mind, we would like to be sure that there are no recent trips
booked where the driver didn’t accept the ToS. What we could do is write a piece of
code verifying that &lt;em&gt;we have no trips with users having the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;users.terms_of_services_accepted_at&lt;/code&gt;
unset&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;how-this-gem-is-useful&quot;&gt;How this gem is useful&lt;/h2&gt;

&lt;p&gt;The gem is offering you a quick way to get alerted when this piece of code finds such a
trip. You can basically get notifications (emails, bugtrackers, …) when a trip doesn’t
honor the ToS rule.&lt;/p&gt;

&lt;p&gt;It would look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TripChecker&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CheckerJobs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;notify&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;to: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;oss@drivy.com&quot;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;ensure_no&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:trip_without_users_terms_of_service_being_accepted&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Trip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;terms_of_service_not_yet_accepted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;ensure_no&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:trip_with_deactivated_car&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then you would have to enqueue that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TripChecker&lt;/code&gt; as often as you want to do that verification.
In our case, because we use a Ruby tasks scheduler and Sidekiq, it looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;every&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'trip_checker'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;at: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'00:10'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'12:05'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;tz: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Paris&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Sidekiq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TripChecker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here is an example of what we see in Bugsnag when one of our checkers is triggered:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://dha4w82d62smt.cloudfront.net/items/253T2g0Y2f1s3q3T0p1x/Screenshot%20from%202018-09-25%2011-30-05.png&quot; target=&quot;_blank&quot;&gt;
  &lt;img src=&quot;https://dha4w82d62smt.cloudfront.net/items/253T2g0Y2f1s3q3T0p1x/Screenshot%20from%202018-09-25%2011-30-05.png&quot; alt=&quot;CheckerJob error in BugSnag&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-are-the-other-ways-of-solving-this&quot;&gt;What are the other ways of solving this?&lt;/h2&gt;

&lt;p&gt;There are others solutions to this issue like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;code that is more defensive and crashes if the preconditions aren’t met,&lt;/li&gt;
  &lt;li&gt;some database features such as triggers, foreign keys, or checks, or&lt;/li&gt;
  &lt;li&gt;a better test suite that can work with production data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We try to use those when it makes sense, and we advise you to do the same.
Still, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;checker_jobs&lt;/code&gt; are different from all of those solutions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;they are safer than code defensiveness, they don’t impact your production system,&lt;/li&gt;
  &lt;li&gt;they are cheaper to create, maintain, and, most of all, delete than database constraints, and&lt;/li&gt;
  &lt;li&gt;they are easier to setup than regression testing on production data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, they don’t provide the same guarantees compared to the other solutions
thus the comparison isn’t that fair.&lt;/p&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h2&gt;

&lt;p&gt;You could give &lt;a href=&quot;https://github.com/drivy/checker_jobs&quot;&gt;checker_jobs&lt;/a&gt; a go, follow the instructions on Github and tell us
how it went!&lt;/p&gt;

&lt;p&gt;In the future, there are many things that we would like to see, things such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;More job processors, ActiveJob is a good candidate,&lt;/li&gt;
  &lt;li&gt;More notifiers, I’m talking about PagerDuty, Bugtrackers, SMS, etc.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;checker_jobs-web&lt;/code&gt; a extra gem that allows you to publish the results of the checks on a dedicated web UI, and of course&lt;/li&gt;
  &lt;li&gt;Contributions from the community!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We intend to extract and release more of this kind of libraries and we hope others will find them useful.&lt;/p&gt;

</description>
        
          <description>&lt;p&gt;We’ve recently extracted the &lt;a href=&quot;https://github.com/drivy/checker_jobs&quot;&gt;checker_jobs&lt;/a&gt; gem from our codebase.
It’s a simple alerting tool with a very specific purpose which this article will explain.&lt;/p&gt;

</description>
        
        <pubDate>Mon, 24 Sep 2018 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/checker-jobs/</link>
        <guid isPermaLink="true">https://getaround.tech/checker-jobs/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Exporting significant SQL reports with ActiveRecord</title>
        <dc:creator>Nicolas Zermati</dc:creator>
        <description>&lt;p&gt;A few months ago we faced a memory issue on some of our background jobs.
Heroku was killing our dyno because it was exceeding its allowed memory. Thanks
to our &lt;a href=&quot;/sidekiq-instrumentation&quot;&gt;instrumentation of Sidekiq&lt;/a&gt;, it was easy to
spot the culprit. The job was doing a fairly complex SQL request, and
outputing the query’s result into a CSV file before archiving this file.&lt;/p&gt;

&lt;p&gt;In this article, I’ll explain what happened and detail the method we used
to solve the problem. I had never seen or used this technique before thus I
thought it would be nice to share.&lt;/p&gt;

&lt;h2 id=&quot;more-context&quot;&gt;More context&lt;/h2&gt;

&lt;p&gt;We run a tiny framework, something more like a convention, to run SQL queries
and archive the results. If I remove the noise of the framework, we had a code
like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with_replica_database&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select_rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;CSV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;csv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this simplified example, there are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with_replica_database&lt;/code&gt;: a helper that helps us run a piece of code using a replica database,&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;query&lt;/code&gt;: our SQL query, as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt;, and&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;header&lt;/code&gt;: a placeholder for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Array&lt;/code&gt; of our columns names.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;select_rows&lt;/code&gt; as the results of the query didn’t really match any of our
models. It is a reporting query that does too many &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;join&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;group by&lt;/code&gt;, and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subqueries&lt;/code&gt;. The query takes dozens of minutes to run. We could, and probably
should, integrate that into our ETL but that’s not the point…&lt;/p&gt;

&lt;p&gt;The resulting CSV file wasn’t that big, maybe a hundred megabytes.&lt;/p&gt;

&lt;h2 id=&quot;the-issue&quot;&gt;The issue&lt;/h2&gt;

&lt;p&gt;The memory comsumption of this came from the many rows returned by the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;select_rows&lt;/code&gt; method. Each row is an array containing many entries as our CSV
have many columns. Each entry could be a complex datatype converted by
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ActiveRecord&lt;/code&gt; into even more complex Ruby objects. We had many instances of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Time&lt;/code&gt; with their &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TimeZone&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BigDecimal&lt;/code&gt;, …&lt;/p&gt;

&lt;p&gt;Since the query returns millions of rows, even while having a linear complexity,
the memory consumption is too high.&lt;/p&gt;

&lt;h2 id=&quot;an-impossible-approach&quot;&gt;An impossible approach&lt;/h2&gt;

&lt;p&gt;At first I thought about paginating the results much in the same way that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find_each&lt;/code&gt;
works. The problem with that was that for 10000 rows, if I paginatd by 1000, it
would take 10 times the time of the same request without pagination.&lt;/p&gt;

&lt;p&gt;Our query looked like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;c&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u_id&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v_id&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Just imagine t, u, v being &lt;em&gt;subqueries&lt;/em&gt; with &lt;em&gt;unions&lt;/em&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OR&lt;/code&gt; conditions, other
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GROUP BY&lt;/code&gt;and more of poorly performing stuff. The sad part is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GROUP BY&lt;/code&gt;
 which required the engine to go through all results in order to group rows
correctly. Using pagination on this would be something like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;c&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u_id&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v_id&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;OFFSET&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000000&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So the fewer entries on a page, the less memory used on the client-side but the
more time spent in the database because more requests will be done.
The more entries on a page, the more memory used on the client-side but the
less time spent in the database because less requests will be done.&lt;/p&gt;

&lt;p&gt;In the end, this approach wouldn’t have been future-proof.&lt;/p&gt;

&lt;h2 id=&quot;focusing-more-on-the-problem&quot;&gt;Focusing more on the problem&lt;/h2&gt;

&lt;p&gt;It was easy to try to find solutions to the &lt;em&gt;results does not fit in memory&lt;/em&gt;
problem because it is a known one. It is common with Rails that long lists and
association-preloading will cause you memory issues. The quick-fix is to use
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find_each&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;in_batches&lt;/code&gt; methods.&lt;/p&gt;

&lt;p&gt;I realized that I didn’t actually need to load everything in memory, I’m only
interested in getting one line at a time in order to write it into the CSV and
then forgotting about it, thanks to the garbage collector.&lt;/p&gt;

&lt;h2 id=&quot;solving-the-right-problem&quot;&gt;Solving the right problem&lt;/h2&gt;

&lt;p&gt;After acknowledging what the true issue was, it was possible to find something
more efficient: streaming APIs.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;CSV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;csv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;with_replica_database&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mysql2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instance_variable_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:@connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mysql2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;stream: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;cache_rows: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The idea was to bypass &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ActiveRecord&lt;/code&gt; and use the underlying MySQL client which
was providing the &lt;a href=&quot;https://github.com/brianmario/mysql2#streaming&quot;&gt;stream&lt;/a&gt; option.
I’m sure there are similar options for &lt;a href=&quot;https://deveiate.org/code/pg/PG/Result.html#method-i-stream_each_row&quot;&gt;other databases&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With that implementation, we only do one request, so no pagination, but we won’t
have all the results in memory. We never needed to have all those results in memory
in the first place anyway.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I would be very interested to use this feature with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ActiveRecord&lt;/code&gt;’s ability to
return models rather than rows. Maybe it is already possible but I didn’t find
it. If you have any further information on the subject, please let me know!&lt;/p&gt;

&lt;p&gt;I hope you won’t have to use these lower level APIs. But, if you do encounter the
same kind of memory issues, don’t throw money at it right away. Try this first ^^&lt;/p&gt;

&lt;p&gt;And obviously, most of this could be avoided by tweaking the layout of data and
their relations. In our case, denormalization could make this easier but we’re not
ready to pay that cost - yet.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Edit&lt;/strong&gt; As &lt;a href=&quot;https://www.reddit.com/r/ruby/comments/9bkqoq/exporting_significant_sql_reports_with/e54baw5/&quot;&gt;nyekks mentionned it on Reddit&lt;/a&gt;, &lt;a href=&quot;https://sequel.jeremyevans.net/&quot;&gt;sequel&lt;/a&gt; seems
to be better at this out of the box.&lt;/p&gt;

</description>
        
          <description>&lt;p&gt;A few months ago we faced a memory issue on some of our background jobs.
Heroku was killing our dyno because it was exceeding its allowed memory. Thanks
to our &lt;a href=&quot;/sidekiq-instrumentation&quot;&gt;instrumentation of Sidekiq&lt;/a&gt;, it was easy to
spot the culprit. The job was doing a fairly complex SQL request, and
outputing the query’s result into a CSV file before archiving this file.&lt;/p&gt;
</description>
        
        <pubDate>Wed, 29 Aug 2018 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/streaming-raw-sql-results-with-active-record/</link>
        <guid isPermaLink="true">https://getaround.tech/streaming-raw-sql-results-with-active-record/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Security tips for rails apps</title>
        <dc:creator>Adrien Siami</dc:creator>
        <description>&lt;p&gt;As your application gets larger and larger, the surface area for security issues expands accordingly, and security bugs become more and more problematic.&lt;/p&gt;

&lt;p&gt;Here are a few tips to avoid some common pitfalls regarding security for Rails apps.&lt;/p&gt;

&lt;h1 id=&quot;use-i18n-with-html-tags-properly&quot;&gt;Use I18n with html tags properly&lt;/h1&gt;

&lt;p&gt;It is quite common to want to mix I18n translation keys with HTML tags. I’d recommend against doing that as much as possible, but sometimes you can’t
really avoid it.&lt;/p&gt;

&lt;p&gt;Let’s take the following example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# en.yml&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;en&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Welcome&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;strong&amp;gt;%{user_name}&amp;lt;/strong&amp;gt;!&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-erb&quot; data-lang=&quot;erb&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;user_name: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We have a problem here, because this will produce the following output:&lt;/p&gt;

&lt;p&gt;Welcome &amp;#x3C;strong&amp;#x3E;John&amp;#x3C;/strong&amp;#x3E;!&lt;/p&gt;

&lt;p&gt;Oops! Indeed, our string was never marked as html safe, therefore rails will escape html entities.&lt;/p&gt;

&lt;p&gt;One (bad) way to fix it would be to do the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-erb&quot; data-lang=&quot;erb&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Don't do this! &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;user_name: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;html_safe&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While it works, we just exposed ourselves to a nasty &lt;a href=&quot;https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)&quot;&gt;XSS&lt;/a&gt;. Indeed, our user can now change their name with some pesky JavaScript in it and the JavaScript will be executed.&lt;/p&gt;

&lt;p&gt;XSSes are often underrated as benign security issues, but they can be fatal if exploited properly.&lt;/p&gt;

&lt;h2 id=&quot;recommended-solution&quot;&gt;Recommended solution&lt;/h2&gt;

&lt;p&gt;Fortunately, Rails has a &lt;a href=&quot;https://guides.rubyonrails.org/i18n.html#using-safe-html-translations&quot;&gt;nice solution&lt;/a&gt; for us: if an I18n key ends up with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_html&lt;/code&gt;, it will automatically be marked as html safe &lt;strong&gt;while the key interpolations will be escaped&lt;/strong&gt;!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# en.yml&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;en&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;hello_html&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Welcome&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;strong&amp;gt;%{user_name}&amp;lt;/strong&amp;gt;!&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-erb&quot; data-lang=&quot;erb&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Do this! &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hello_html'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;user_name: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2&gt;🎉&lt;/h2&gt;

&lt;p&gt;Note that this is pretty much the same as doing this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-erb&quot; data-lang=&quot;erb&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Don't do this either! &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;user_name: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;html_safe&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;One good way to avoid XSSes is to really try to avoid using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;html_safe&lt;/code&gt; (or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;raw&lt;/code&gt;) as much as possible, and when forced, double check that you have full control of the content displayed.&lt;/p&gt;

&lt;h1 id=&quot;be-defensive-by-default&quot;&gt;Be defensive by default&lt;/h1&gt;

&lt;p&gt;You can’t trust user params; you most likely already know that. But there are different ways to implement sanitization of user params.&lt;/p&gt;

&lt;p&gt;Let’s pretend we have a form, and we want to use one of two different &lt;a href=&quot;https://robots.thoughtbot.com/activemodel-form-objects&quot;&gt;Form Objects&lt;/a&gt; depending on a param:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FooForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BarForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;form_klass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;camelize&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Form&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;constantize&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Don't do that&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;form_klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here, we get the good form class by constantizing a string that is controllable by the user. This is very bad practice and can lead to terrible side effects (imagine sending &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make_user_admin&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bar&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;One solution could be to do this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'foo'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bar'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;form_klass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;camelize&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Form&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;constantize&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Still, don't do that&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;form_klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here we are ‘safe’. We check that the params are one of the two expected values and only constantize if needed. While this works fine, we haven’t corrected the root security issue (which is the use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;constantize&lt;/code&gt; over user input).&lt;/p&gt;

&lt;p&gt;Code grows old and evolves, developers copy and paste parts constantly, and at some point your offending line could end up outside of its guard.&lt;/p&gt;

&lt;p&gt;Now let’s have a look at this alternative:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;klasses&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;'foo'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FooForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;'bar'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BarForm&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;klasses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We have the same behaviour as above, except this time we don’t use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;constantize&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;By being defensive and keeping a close eye on user input, we can avoid many basic security issues.&lt;/p&gt;

&lt;h1 id=&quot;beware-of-arrays-or-hashes&quot;&gt;Beware of arrays or hashes&lt;/h1&gt;

&lt;p&gt;Consider the following code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;c1&quot;&gt;# POST /delete_user?id=xxx&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;can_delete?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;other_user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;can_delete?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;can_delete?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;deleted: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This code is voluntarily weird-looking in its structure to be vulnerable to the security issue, but trust me, I’ve seen it in the wild ;)&lt;/p&gt;

&lt;p&gt;Everything works ok here until we start messing a bit with the params.&lt;/p&gt;

&lt;p&gt;Let’s imagine we send the following request:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST /delete_user?id[]=42&amp;amp;id[]=43&amp;amp;id[]=44&amp;amp;id[]=45..&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Rails will parse &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;params[:id]&lt;/code&gt; as an array: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[42, 43, 44, 45]&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;id: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;43&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;44&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# This will return one user with id 42 (lower id)&lt;/span&gt;

  &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;id: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;43&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;44&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;deleted: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# This will update all of those records!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Thanks to some &lt;em&gt;weirdness&lt;/em&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find_by&lt;/code&gt; and messing with the params, here we managed to act on records we may not have access to.&lt;/p&gt;

&lt;p&gt;It’s always good to remember that params can also be arrays (or hashes!) as that can pose some security risks.&lt;/p&gt;

&lt;h1 id=&quot;remember-that-evil-input-is-not-always-where-we-think-it-is&quot;&gt;Remember that evil input is not always where we think it is&lt;/h1&gt;

&lt;p&gt;Most of us are very wary when dealing with user params, or values coming from the database.&lt;/p&gt;

&lt;p&gt;However, there are some attack vectors that can be forgotten, including (but not limited to) the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cookies: they are 100% editable by the user&lt;/li&gt;
  &lt;li&gt;Other headers in general: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Referer&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User-Agent&lt;/code&gt;, etc.&lt;/li&gt;
  &lt;li&gt;User IP: easily spoofable on misconfigured apps (using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X-Forwarded-For&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Local files: here’s an &lt;a href=&quot;http://www.hackingarticles.in/rce-with-lfi-and-ssh-log-poisoning/&quot;&gt;interesting example&lt;/a&gt; of poisoning the ssh auth.log file in order to perform a remote code execution.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s always good to think about where any given input comes from and wonder if it can be tampered.&lt;/p&gt;
</description>
        
          <description>&lt;p&gt;As your application gets larger and larger, the surface area for security issues expands accordingly, and security bugs become more and more problematic.&lt;/p&gt;
</description>
        
        <pubDate>Mon, 27 Aug 2018 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/security-tips-for-rails-apps/</link>
        <guid isPermaLink="true">https://getaround.tech/security-tips-for-rails-apps/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Implementing Up Navigation on Android</title>
        <dc:creator>Romain Guefveneu</dc:creator>
        <description>&lt;p&gt;Parent Navigation has always been a tough topic on Android. There are not a lot of apps that implement the &lt;a href=&quot;https://developer.android.com/training/design-navigation/ancestral-temporal&quot;&gt;guidelines&lt;/a&gt; correctly, maybe because they are hard to understand or complicated to implement. Even the Google apps don’t implement them: it’s always frustrating to take a screenshot, press &lt;em&gt;Up&lt;/em&gt; on the preview and not be redirected to the &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.google.android.apps.photos&quot;&gt;Google Photo&lt;/a&gt; app 😞.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Unlike the &lt;em&gt;Back&lt;/em&gt; button, which should come back to the previous screen – even if that screen was not from the same app –, the &lt;em&gt;Up&lt;/em&gt; button should stay &lt;a href=&quot;https://developer.android.com/training/design-navigation/ancestral-temporal#into-your-app&quot;&gt;in the same app&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s see how to implement this navigation.&lt;/p&gt;

&lt;h1 id=&quot;a-simple-app&quot;&gt;A Simple App&lt;/h1&gt;

&lt;p&gt;Here is a simple music app, with 3 activities:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a &lt;em&gt;Main&lt;/em&gt; activity, with a list of albums&lt;/li&gt;
  &lt;li&gt;an &lt;em&gt;Album&lt;/em&gt; activity, with a list of tracks&lt;/li&gt;
  &lt;li&gt;a &lt;em&gt;Track&lt;/em&gt; activity, with the track’s name and that of the album.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Forward navigation is pretty obvious:&lt;/p&gt;

&lt;h2 id=&quot;forward-navigation&quot;&gt;Forward Navigation&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;../assets/posts/2018-08-04-android-parent-navigation/forward-navigation.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MainActivity&lt;/code&gt;, users can go to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AlbumActivity&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TrackActivity&lt;/code&gt;.&lt;br /&gt;
Nothing special here. So what about back navigation?&lt;/p&gt;

&lt;h2 id=&quot;back-navigation&quot;&gt;Back Navigation&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;../assets/posts/2018-08-04-android-parent-navigation/back-navigation.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since we’re in the same &lt;a href=&quot;https://developer.android.com/guide/components/activities/tasks-and-back-stack&quot;&gt;task&lt;/a&gt;, &lt;em&gt;Up&lt;/em&gt; navigation and &lt;em&gt;Back&lt;/em&gt; navigation do the same thing: they come back to the previous activity.
But if we don’t start from the main activity (for instance from a notification or a widget), &lt;em&gt;Up&lt;/em&gt; and &lt;em&gt;Back&lt;/em&gt; won’t have the same behavior:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Back&lt;/em&gt; will still dismiss the current activity (or fragment), so users will come back to the previous app&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Up&lt;/em&gt; should redirect to the app’s parent activity.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;notification-navigation&quot;&gt;Notification Navigation&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;../assets/posts/2018-08-04-android-parent-navigation/notification-navigation.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;how-to-implement&quot;&gt;How to implement&lt;/h1&gt;

&lt;p&gt;No need to write anything in the &lt;a href=&quot;https://developer.android.com/reference/android/app/Activity.html#onOptionsItemSelected(android.view.MenuItem)&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Activity#onOptionsItemSelected&lt;/code&gt;&lt;/a&gt; method! Everything is already done in the Android SDK.
We mainly just need to edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AndroidManifest.xml&lt;/code&gt; file to add some attributes to our activities.&lt;/p&gt;

&lt;h2 id=&quot;declare-a-parentactivityname&quot;&gt;Declare a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parentActivityName&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;First, we need to declare a parent activity for each child activity:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TrackActivity&lt;/code&gt; will come back to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AlbumActivity&lt;/code&gt;, which itself comes back to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MainActivity&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;activity&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.AlbumActivity&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:parentActivityName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.MainActivity&quot;&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;activity&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.TrackActivity&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:parentActivityName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.AlbumActivity&quot;&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;See also : &lt;a href=&quot;https://developer.android.com/reference/android/app/Activity.html#getParentActivityIntent()&quot;&gt;getParentActivityIntent&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But that’s not enough: now when pressing the &lt;em&gt;Up&lt;/em&gt; button a new activity is created – even if we’re in the same task –, instead of dimissing the current activity.&lt;/p&gt;

&lt;figure&gt;
    &lt;video width=&quot;100%&quot; height=&quot;540&quot; src=&quot;../assets/posts/2018-08-04-android-parent-navigation/activity-recreated.mp4&quot; type=&quot;video/mp4&quot; controls=&quot;controls&quot;&gt;&lt;/video&gt;
    &lt;figcaption&gt;
        The parent activity is recreated when pressing up. Subtle, isn’t it?
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;declare-a-launchmode&quot;&gt;Declare a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchMode&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;By declaring parent activities’ &lt;a href=&quot;https://developer.android.com/guide/topics/manifest/activity-element#lmode&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchMode&lt;/code&gt;&lt;/a&gt; as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;singleTop&lt;/code&gt;, we prevent the system from creating a new activity each time we press &lt;em&gt;Up&lt;/em&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;activity&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.MainActivity&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:launchMode=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;singleTop&quot;&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/activity&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;activity&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.AlbumActivity&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:launchMode=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;singleTop&quot;&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure&gt;
    &lt;video width=&quot;100%&quot; height=&quot;540&quot; src=&quot;../assets/posts/2018-08-04-android-parent-navigation/activity-not-recreated.mp4&quot; type=&quot;video/mp4&quot; controls=&quot;controls&quot;&gt;&lt;/video&gt;
    &lt;figcaption&gt;
        The parent activity is no longer recreated. 🎉
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Now we have the desired behavior, but we don’t cover all the cases. What if I start &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TrackActivity&lt;/code&gt; from outside the app, and press &lt;em&gt;Up&lt;/em&gt;? I want to be redirected to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AlbumActivity&lt;/code&gt;.&lt;/p&gt;

&lt;figure&gt;
    &lt;video width=&quot;100%&quot; height=&quot;540&quot; src=&quot;../assets/posts/2018-08-04-android-parent-navigation/notification-up-not-redirected.mp4&quot; type=&quot;video/mp4&quot; controls=&quot;controls&quot;&gt;&lt;/video&gt;
    &lt;figcaption&gt;
        &lt;code&gt;TrackActivity&lt;/code&gt; is not redirect to &lt;code&gt;AlbumActivity&lt;/code&gt; when pressing Up. Mildly frustrating, to say the least.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;To do that, we have to declare a &lt;a href=&quot;https://developer.android.com/guide/topics/manifest/activity-element#aff&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;taskAffinity&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;declare-a-taskaffinity&quot;&gt;Declare a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;taskAffinity&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Declaring a &lt;a href=&quot;https://developer.android.com/guide/topics/manifest/activity-element#aff&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;taskAffinity&lt;/code&gt;&lt;/a&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TrackActivity&lt;/code&gt; allows a new task to be created when starting this activity from outside the app. Thanks to that, &lt;em&gt;Up&lt;/em&gt; navigation will switch to the main task and create an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AlbumActivity&lt;/code&gt;.&lt;br /&gt;
&lt;em&gt;Curious about how it works? See &lt;a href=&quot;https://github.com/aosp-mirror/platform_frameworks_base/blob/master/core/java/android/app/Activity.java#L3643&quot;&gt;Activity#onNavigateUp&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;activity&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.TrackActivity&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:taskAffinity=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.Track&quot;&lt;/span&gt; 
    &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;One issue here: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AlbumActivity&lt;/code&gt; needs to know which album we want to display.&lt;/p&gt;

&lt;h2 id=&quot;override-onpreparesupportnavigateuptaskstack&quot;&gt;Override &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onPrepareSupportNavigateUpTaskStack&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;On &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TrackActivity&lt;/code&gt;, we need to override &lt;a href=&quot;https://developer.android.com/reference/android/app/Activity#onPrepareNavigateUpTaskStack(android.app.TaskStackBuilder)&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onPrepareSupportNavigateUpTaskStack&lt;/code&gt;&lt;/a&gt; to edit the intent that will start the parent activity when pressing &lt;em&gt;Up&lt;/em&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onPrepareSupportNavigateUpTaskStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TaskStackBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onPrepareSupportNavigateUpTaskStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;albumId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getLongExtra&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TrackActivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;EXTRA_ALBUM_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;albumIntent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AlbumActivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;albumId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;editIntentAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intentCount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;putExtras&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;albumIntent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;See also &lt;a href=&quot;https://developer.android.com/reference/android/app/Activity.html#onCreateNavigateUpTaskStack(android.app.TaskStackBuilder)&quot;&gt;onCreateNavigateUpTaskStack&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;figure&gt;
    &lt;video width=&quot;100%&quot; height=&quot;540&quot; src=&quot;../assets/posts/2018-08-04-android-parent-navigation/notification-up-redirected.mp4&quot; type=&quot;video/mp4&quot; controls=&quot;controls&quot;&gt;&lt;/video&gt;
    &lt;figcaption&gt;
        &lt;code&gt;TrackActivity&lt;/code&gt; is now redirected to &lt;code&gt;AlbumActivity&lt;/code&gt; when pressing Up. 👌
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;One last thing: because we create a new task when starting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TrackActivity&lt;/code&gt; from outside the app, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TrackActivity&lt;/code&gt; will remain on the &lt;a href=&quot;https://developer.android.com/guide/components/activities/recents&quot;&gt;Recents screen&lt;/a&gt; when pressing &lt;em&gt;Up&lt;/em&gt;. It would be great to remove it automatically.&lt;/p&gt;

&lt;figure&gt;
    &lt;img width=&quot;311&quot; height=&quot;540&quot; src=&quot;../assets/posts/2018-08-04-android-parent-navigation/2-recents-tasks.png&quot; /&gt;
    &lt;figcaption&gt;
        &lt;code&gt;TrackActivity&lt;/code&gt; is still visible in the Recents screen. Not very useful.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;declare-autoremovefromrecents&quot;&gt;Declare &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;autoRemoveFromRecents&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;With &lt;a href=&quot;https://developer.android.com/guide/topics/manifest/activity-element#autoremrecents&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;autoRemoveFromRecents&lt;/code&gt;&lt;/a&gt;, the activity will be removed from the Recents screen when its task is completed, for instance when coming back to the parent activity.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;activity&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.TrackActivity&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:autoRemoveFromRecents=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure&gt;
    &lt;img width=&quot;311&quot; height=&quot;540&quot; src=&quot;../assets/posts/2018-08-04-android-parent-navigation/1-recent-task.png&quot; /&gt;
    &lt;figcaption&gt;
        &lt;code&gt;TrackActivity&lt;/code&gt; is no more visible in the Recents screen. 🙌
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;

&lt;p&gt;To sum up, this is what the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AndroidManifest.xml&lt;/code&gt; looks like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;activity&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.MainActivity&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:label=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@string/app_name&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:launchMode=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;singleTop&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;intent-filter&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;action&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android.intent.action.MAIN&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;category&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android.intent.category.LAUNCHER&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/intent-filter&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/activity&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;activity&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.AlbumActivity&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:label=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@string/album_title&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:launchMode=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;singleTop&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:parentActivityName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.MainActivity&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;activity&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.TrackActivity&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:autoRemoveFromRecents=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:label=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@string/track_title&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:parentActivityName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.AlbumActivity&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:taskAffinity=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.Track&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Now that you know how to tune the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AndroidManifest&lt;/code&gt; to get a satisfying parent navigation, please don’t just &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;finish()&lt;/code&gt; the activity when pressing &lt;em&gt;Up&lt;/em&gt; 😀&lt;/p&gt;

&lt;h2 id=&quot;sources&quot;&gt;Sources&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/drivy/blog-android-parent-navigation&quot;&gt;Github Project&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.android.com/training/implementing-navigation/temporal&quot;&gt;https://developer.android.com/training/implementing-navigation/temporal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.android.com/training/design-navigation/ancestral-temporal&quot;&gt;https://developer.android.com/training/design-navigation/ancestral-temporal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.android.com/guide/components/tasks-and-back-stack.html&quot;&gt;https://developer.android.com/guide/components/tasks-and-back-stack.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.android.com/design/patterns/navigation.html&quot;&gt;https://developer.android.com/design/patterns/navigation.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        
          <description>&lt;p&gt;Parent Navigation has always been a tough topic on Android. There are not a lot of apps that implement the &lt;a href=&quot;https://developer.android.com/training/design-navigation/ancestral-temporal&quot;&gt;guidelines&lt;/a&gt; correctly, maybe because they are hard to understand or complicated to implement. Even the Google apps don’t implement them: it’s always frustrating to take a screenshot, press &lt;em&gt;Up&lt;/em&gt; on the preview and not be redirected to the &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.google.android.apps.photos&quot;&gt;Google Photo&lt;/a&gt; app 😞.&lt;/p&gt;
</description>
        
        <pubDate>Fri, 03 Aug 2018 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/android-parent-navigation/</link>
        <guid isPermaLink="true">https://getaround.tech/android-parent-navigation/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Quick wins to deal with users' broken email addresses</title>
        <dc:creator>Jean Anquetil</dc:creator>
        <description>&lt;p&gt;If a user signs up to Drivy, we want to welcome them. If a driver has an upcoming booked trip, we would like to send them the needed information. If they want to reset their password, they need to receive a confirmation email and so on.&lt;/p&gt;

&lt;p&gt;In another words, transactional emails are very important for a successful experience. So, how do we deal with broken email addresses?&lt;/p&gt;

&lt;h2 id=&quot;regex-ing-the-format&quot;&gt;Regex-ing the format&lt;/h2&gt;
&lt;p&gt;First of all we decided to check the email-address format of a new user during her sign-up flow. To do so, we compare it with a very simple regex.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\A\S+@\S+\.\S+\z&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here is our assumption. An email address can:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;have at least one or more instance of any non-whitespace character,&lt;/li&gt;
  &lt;li&gt;be imperatively followed by an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;at&lt;/code&gt; symbol,&lt;/li&gt;
  &lt;li&gt;then have again one or more instance of any non-whitespace character,&lt;/li&gt;
  &lt;li&gt;be imperatively followed by a dot symbol,&lt;/li&gt;
  &lt;li&gt;then have again one or more instance of any non-whitespace character.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that’s it. We don’t want to define a complex pattern such as the &lt;a href=&quot;https://tools.ietf.org/html/rfc5322&quot;&gt;RFC 5322&lt;/a&gt; one whereas an email provider has its own syntax rules: we don’t want to block some potentially valid addresses.&lt;/p&gt;

&lt;h2 id=&quot;transliterating&quot;&gt;Transliterating&lt;/h2&gt;
&lt;p&gt;Later down the line, we faced some delivery issues with email addresses containing special characters (i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;àéèù…&lt;/code&gt;) so we decided to transliterate the email addresses of some specific domains.&lt;/p&gt;

&lt;p&gt;For instance, we know that Gmail supports addresses with accents. But they don’t differentiate between an address with or without accents: they are the same. We therefore decided to transliterate the email addresses from the following domain names: Gmail, Outlook, Hotmail and Live.&lt;/p&gt;

&lt;p&gt;Using a &lt;a href=&quot;/sanitize-your-attributes/&quot; target=&quot;_blank&quot;&gt;custom coercion&lt;/a&gt; with Virtus in our form object, this is done really smoothly. (However, Virtus is now deprecated so if we were to start from scratch today, we would use something else.)&lt;/p&gt;

&lt;p&gt;However, transliteration is not without its limits. The day we open a country without a Latin alphabet we will not be able to transliterate the email addresses anymore:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;I18n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;transliterate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;日本語&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &quot;???&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;using-an-external-service&quot;&gt;Using an external service&lt;/h2&gt;
&lt;p&gt;To go further, we could carry out many more checks using an external service. For instance, &lt;a href=&quot;https://www.mailgun.com/&quot;&gt;MailGun&lt;/a&gt; released a library called &lt;a href=&quot;https://github.com/mailgun/flanker&quot;&gt;Flanker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It carries out the following checks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DNS lookup: that the @domain.com exists.&lt;/li&gt;
  &lt;li&gt;MX check: if that @domain.com has a Mail Exchange record. In other words, that the domain is configured to receive emails.&lt;/li&gt;
  &lt;li&gt;That the email address complies with general validation rules but also specific ones. For instance, regarding @gmail.com they check if &lt;a href=&quot;https://github.com/mailgun/flanker/blob/master/flanker/addresslib/plugins/gmail.py#L8&quot;&gt;the address length is between 6 and 30 characters&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;There will always be a lot of different ways to prevent or sanitize broken email addresses but it will remain difficult to handle all the use cases. Maybe another way to fight this would be by not relying too much on emails: using the phone number to verify a profile and using push or browser notifications to talk to a user.&lt;/p&gt;
</description>
        
          <description>&lt;p&gt;If a user signs up to Drivy, we want to welcome them. If a driver has an upcoming booked trip, we would like to send them the needed information. If they want to reset their password, they need to receive a confirmation email and so on.&lt;/p&gt;
</description>
        
        <pubDate>Thu, 05 Jul 2018 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/dealing-with-users-broken-email-addresses/</link>
        <guid isPermaLink="true">https://getaround.tech/dealing-with-users-broken-email-addresses/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Usage of Sidekiq middleware</title>
        <dc:creator>David Bourguignon</dc:creator>
        <description>&lt;p&gt;At Drivy, we use a lot of background jobs, called from service objects, API calls, cron, etc.&lt;br /&gt;
A time came when we needed to add some context data across several of these code layers.&lt;/p&gt;

&lt;p&gt;For instance, we have some context data we need to keep for auditing reasons.
This data can originate from several points in the application:
maybe from some part of the web application, from the mobile app,
or from a service object.&lt;/p&gt;

&lt;p&gt;We tried to find a way to keep this new context data through all code layers and jobs
without having to resort to adding context data arguments everywhere.&lt;/p&gt;

&lt;p&gt;We decided to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Thread.current&lt;/code&gt; objects to host this data for the current process.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;CAVEAT: Using this kind of &lt;em&gt;global&lt;/em&gt; data in this way is usually considered to be bad practice.
I will not discuss it here, but you can look at this &lt;a href=&quot;https://softwareengineering.stackexchange.com/questions/148108/why-is-global-state-so-evil&quot;&gt;discussion&lt;/a&gt; for more detail.&lt;br /&gt;
We use global data with caution, in a limited scope and only after having really thought about it.
All interactions with the global data is tightly contained in service objects to limit the risk of
using the data outside of its intended scope.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ProcessContext&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;module_function&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;attributes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;attributes&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;process_context&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;process_context&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_attributes&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It works well, up to the point where we delegate some of this processing to background jobs.
The jobs run on a different thread (even on a different machine).&lt;/p&gt;

&lt;p&gt;We use Sidekiq to manage our jobs.
Sidekiq works in the following way (a simplified version):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The client side enqueues a job into a Redis database;&lt;/li&gt;
  &lt;li&gt;On the server side the workers:
    &lt;ul&gt;
      &lt;li&gt;read the database to pick a job in the queue;&lt;/li&gt;
      &lt;li&gt;run them.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Conveniently, Sidekiq provides a way to add some code around job processing,
on the client side, the server side or both.
So we used these middlewares to propagate the context information from the client
(our Rails application) to the Sidekiq server.&lt;/p&gt;

&lt;h2 id=&quot;client-side&quot;&gt;Client side&lt;/h2&gt;

&lt;p&gt;The Sidekiq middleware client API is:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Drivy::MyClientMiddleware&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;worker_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redis_pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# custom code&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# custom code&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And you add it to Sidekiq configuration in this way:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# config/initializers/sidekiq.rb&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Sidekiq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configure_client&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;client_middleware&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Drivy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MyClientMiddleware&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Note: You may want to add this client middleware to the server middleware pipe, see below&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In our case, we want to enrich the job with some metadata.
Sidekiq allows the adding of information to the job that will be available on the server side:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Drivy::Sidekiq::Middleware::Client&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AddProcessContext&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;process_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ProcessContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;present?&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'process_context'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TrackedEventContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_json&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# Log/notify error as we do not want to fail the job in this case&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We only need the job argument here. It’s basically a &lt;a href=&quot;https://github.com/mperham/sidekiq/wiki/Job-Format&quot;&gt;regular Hash&lt;/a&gt;.
We just add here our own information
(be careful to store only data that will be serialised in JSON).&lt;/p&gt;

&lt;h2 id=&quot;server-side&quot;&gt;Server Side&lt;/h2&gt;

&lt;p&gt;The Sidekiq middleware server API is:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Drivy::MyServerMiddleware&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# custom code&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# custom code&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And you add it to Sidekiq configuration in this way:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# config/initializers/sidekiq.rb&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Sidekiq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configure_server&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;server_middleware&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Drivy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MyServerMiddleware&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In our usage, we need to retrieve the metadata from the job and set it in the current process:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Drivy::Sidekiq::Middleware::Server&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AddProcessContext&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;process_metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;reset_metadata&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process_metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'process_context'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;ProcessContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;attributes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'process_context'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# Log/notify error as we do not want to fail the job in this case&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reset_metadata&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;ProcessContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We simply restore the data from the serialised version.&lt;/p&gt;

&lt;p&gt;Each middleware is executed in the same thread as the main job process,
so we know the context data will be available to the Ruby job.&lt;/p&gt;

&lt;h2 id=&quot;a-word-of-caution&quot;&gt;A word of caution&lt;/h2&gt;

&lt;h3 id=&quot;thread-reuse&quot;&gt;Thread reuse&lt;/h3&gt;

&lt;p&gt;Sidekiq will reuse threads for different jobs in some cases,
so we must be very careful to cleanup our ProcessContext
to ensure we do not pollute the context of other jobs.&lt;/p&gt;

&lt;h3 id=&quot;middleware-client-on-the-server-side&quot;&gt;Middleware client on the server side&lt;/h3&gt;

&lt;p&gt;Sometimes, jobs running on the server can enqueue jobs, and act as a client.
In this case, you’ll want to add the client middleware to the server configuration as well:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# config/initializers/sidekiq.rb&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Sidekiq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configure_server&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;client_middleware&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Drivy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MyClientMiddleware&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;server_middleware&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Drivy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MyServerMiddleware&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Middlewares are a useful tool, we use them for logging, and monitoring mainly.
You can find some interesting plugins using middleware on the &lt;a href=&quot;https://github.com/mperham/sidekiq/wiki/Related-Projects&quot;&gt;Sidekiq Wiki&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And again, do not use global states if you can avoid it.&lt;/p&gt;

</description>
        
          <description>&lt;p&gt;At Drivy, we use a lot of background jobs, called from service objects, API calls, cron, etc.&lt;br /&gt;
A time came when we needed to add some context data across several of these code layers.&lt;/p&gt;
</description>
        
        <pubDate>Thu, 31 May 2018 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/use-sidekiq-middleware/</link>
        <guid isPermaLink="true">https://getaround.tech/use-sidekiq-middleware/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Rails 5.2: ActiveStorage highlight</title>
        <dc:creator>Alexandre Ferraille</dc:creator>
        <description>&lt;p&gt;Rails 5.2 was released a few weeks ago and comes with awesome features like the new credentials vault, HTTP/2 early hints, Redis cache store and ActiveStorage, which I’m going to focus on in this blog post. The project was initiated by DHH in mid-2017 and has been merged into Rails core. It’s a built-in way to deal with uploads without extra dependencies like Paperclip, Carrierwave or Shrine.&lt;/p&gt;

&lt;h1 id=&quot;how-does-it-work&quot;&gt;How does it work?&lt;/h1&gt;

&lt;p&gt;ActiveStorage comes with a complete DSL which allows you to attach and detach one or multiple files to a model. By default, ActiveStorage isn’t installed in a new rails project, you have to run:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rails active_storage:install&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This command simply copies a migration in your projet. ActiveStorage needs two models/tables : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;active_storage_blobs&lt;/code&gt; where each record represents a file (which is not stored in the database of course) and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;active_storage_attachments&lt;/code&gt; is a polymorphic bridge between your models and your uploaded files.&lt;/p&gt;

&lt;p&gt;In your model, you need to declare that you’re attaching files:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_one_attached&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:photo&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, you can add a file input into your form:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%= image_tag url_for(car.photo) if car.photo.attachment.present? %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sx&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:photo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%= form.file_field :photo %&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In your controller, you must specify that you want to attach a file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;vi&quot;&gt;@car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;photo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;attach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:photo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:photo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And that’s all you need to do for a basic file uploader. If you attach a new file or you delete your record, ActiveStorage will remove the old one from your storage and clean up your database.&lt;/p&gt;

&lt;h1 id=&quot;activestorage-goes-further-still&quot;&gt;ActiveStorage goes further still&lt;/h1&gt;

&lt;p&gt;With a lot of nice little “cherries on the cake”, ActiveStorage covers most of the cases:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Storage:&lt;/strong&gt; A few lines of configuration are enough to store/mirror your files into AWS S3, Microsoft Azure or Google Cloud. And if you’re using a more funky storage provider, you can extend the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ActiveStorage::Service&lt;/code&gt; class.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Direct upload:&lt;/strong&gt; A complete JavaScript library has been written for ActiveStorage which allows you to directly upload to your storage bypassing the rails backend. It comes with a lot a JavaScript events to easily plug this feature with common libraries such as TinyMCE, DropZoneJS…&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Image post-processing:&lt;/strong&gt; A common need when uploading images is to create resized variants from the original. ActiveStorage works by default with MiniMagick, which is a Ruby implementation for ImageMagick.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Video and PDF previews:&lt;/strong&gt; With external libraries (ffmpeg and mutool), you can get a preview from a file without downloading it entirely.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;whats-the-difference-with-other-upload-managers&quot;&gt;What’s the difference with other upload managers?&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Maintenability:&lt;/strong&gt;
Since ActiveStorage has been merged into Rails, all the features described above are built-in and don’t require any extra dependencies and so less maintenance needs to be scheduled.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Structure:&lt;/strong&gt;
Most popular gems like Shrine, Paperclip, etc. don’t provide ready-to-use tables and require a migration to add a few fields where you want to store your file information. Even if you feel free to do what you want and you’re not stuck to the ActiveStorage way, from my experience you’ll certainly recreate a polymorphic &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Asset&lt;/code&gt; model.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Form:&lt;/strong&gt;
As we seen above, ActiveStorage attaches and detaches files outside ActiveRecord transactions. You need to do it by yourself when you need to, independently from a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;save&lt;/code&gt;, whereas common gems store your files using ActiveRecord callbacks directly from your params. In my opinion, ActiveStorage provides a better way to handle file attachments by separating two concepts: attributes which go in the database and files which depend on your storage.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Missing features:&lt;/strong&gt;
There’s a few advanced features which are not handled by ActiveStorage (yet?) and you’ll need to develop them if you choose to go with ActiveStorage. For instance, Shrine (currently the most advanced competitor), provides a way to cache uploaded files and avoid re-upload when your form has errors. Shrine also provides a simple way to manipulate and post-process files in the background. And last but not least, the implementation of TUS protocol allow you to do multi-part uploads.&lt;/p&gt;

&lt;h1 id=&quot;what-does-the-future-have-in-store-for-them&quot;&gt;What does the future have in store for them?&lt;/h1&gt;

&lt;p&gt;It’s really interresting to see that &lt;em&gt;Thoughbot&lt;/em&gt; (the Paperclip maintainers) just announced the deprecation of Paperclip in favor of ActiveStorage and it’s a good example of what makes the Ruby On Rails community so strong.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;fr&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Major kudos to &lt;a href=&quot;https://twitter.com/thoughtbot?ref_src=twsrc%5Etfw&quot;&gt;@thoughtbot&lt;/a&gt; for all the work on Paperclip over the years! It was one of the premiere file attachment solutions for Rails for a very long time. The work helped inform and inspire Active Storage 🙏❤️ &lt;a href=&quot;https://t.co/DGoCDAZS0N&quot;&gt;https://t.co/DGoCDAZS0N&lt;/a&gt;&lt;/p&gt;&amp;mdash; DHH (@dhh) &lt;a href=&quot;https://twitter.com/dhh/status/996456644287414272?ref_src=twsrc%5Etfw&quot;&gt;15 mai 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;fr&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;We are deprecating Paperclip in favor of ActiveStorage. Learn what this means for you.  &lt;a href=&quot;https://t.co/b4MpPhKXaN&quot;&gt;https://t.co/b4MpPhKXaN&lt;/a&gt;&lt;/p&gt;&amp;mdash; thoughtbot (@thoughtbot) &lt;a href=&quot;https://twitter.com/thoughtbot/status/996001704377311232?ref_src=twsrc%5Etfw&quot;&gt;14 mai 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;We can be sure they’ll use their experience by contributing to ActiveStorage, as did &lt;em&gt;janko-m&lt;/em&gt; (Shrine maintainer) who already improved S3 storage and &lt;a href=&quot;https://github.com/rails/rails/pull/32471&quot;&gt;implemented his own ImageProcessing gem&lt;/a&gt; to ActiveStorage.&lt;/p&gt;

&lt;h1 id=&quot;how-we-handle-file-uploads-at-drivy&quot;&gt;How we handle file uploads at Drivy&lt;/h1&gt;

&lt;p&gt;At Drivy we handle file uploads in a similar way to ActiveStorage. We have our own DSL for models and a lot of methods for controllers and views. We also have some JavaScript for direct upload to our cloud storage. We don’t use post processing libraries for our images and we delegate all these tasks to a third party in order to reduce the impact on our CPUs.&lt;/p&gt;

&lt;p&gt;So, should we move to ActiveStorage? We already have all the features we need and there’s currently no need to move to ActiveStorage. Sure it might reduce the maintenance cost and we could take advantage of security fixes and evolution with Rails upgrades, but with a 6-year-old codebase and thousands of attachments the migration would be huge!&lt;/p&gt;

&lt;p&gt;In my opinion, ActiveStorage is a really good choice for a new project.&lt;/p&gt;

&lt;p&gt;EDIT: &lt;em&gt;janko-m&lt;/em&gt; (Shrine maintainer) commented this post &lt;a href=&quot;https://www.reddit.com/r/ruby/comments/8k3qlm/rails_52_activestorage_highlight_drivy_engineering/dz5ocn1/&quot;&gt;via reddit&lt;/a&gt; and raised interesting points related to ActiveStorage and future changes for Shrine.&lt;/p&gt;
</description>
        
          <description>&lt;p&gt;Rails 5.2 was released a few weeks ago and comes with awesome features like the new credentials vault, HTTP/2 early hints, Redis cache store and ActiveStorage, which I’m going to focus on in this blog post. The project was initiated by DHH in mid-2017 and has been merged into Rails core. It’s a built-in way to deal with uploads without extra dependencies like Paperclip, Carrierwave or Shrine.&lt;/p&gt;
</description>
        
        <pubDate>Thu, 17 May 2018 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/rails-5.2-active-storage-highlight/</link>
        <guid isPermaLink="true">https://getaround.tech/rails-5.2-active-storage-highlight/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Android Makers 2018 Key takeaways</title>
        <dc:creator>Renaud Boulard</dc:creator>
        <description>&lt;p&gt;Android Makers is the largest Android event in France, organized by the &lt;a href=&quot;http://www.paug.fr/&quot;&gt;PAUYG&lt;/a&gt; and &lt;a href=&quot;http://www.bemyapp.com/&quot;&gt;BeMyApp&lt;/a&gt;. This year the event was held in Le Beffroi de Montrouge - what a great place to enjoy a conference. There was much more space than the previous Android Makers event: we were really comfortable, with all we needed to be fully focussed on the conferences.&lt;/p&gt;

&lt;p&gt;Below are some key takeaways of these 2 days of great conferences.&lt;/p&gt;

&lt;h2 id=&quot;modern-android-development&quot;&gt;Modern Android development&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/romainguy&quot;&gt;Romain Guy&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://twitter.com/chethaase&quot;&gt;Chet Haase&lt;/a&gt;, Google, &lt;a href=&quot;https://www.youtube.com/watch?v=8GFLCL0u1lw&amp;amp;list=PLn7H9CUCuXAus0YgFW7QiIpnwHJd3Yinw&amp;amp;index=1&amp;amp;t=0s&quot;&gt;Video&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;They gave us a big overview of the improvements of the last few years to Core Android development, from the view (ConstraintLayout) to the programming language (Kotlin) through the architecture, the tools and more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key takeaways:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use &lt;a href=&quot;https://developer.android.com/studio/debug/layout-inspector&quot;&gt;Layout Inspector&lt;/a&gt; instead of the deprecated &lt;del&gt;Hierarchy Viewer&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;Don’t use &lt;del&gt;AbsoluteLayout&lt;/del&gt;, &lt;del&gt;GridLayout&lt;/del&gt; and &lt;del&gt;RelativeLayout&lt;/del&gt; any more. The best performances are provided by LinearLayout, FrameLayout and ConstraintLayout&lt;/li&gt;
  &lt;li&gt;Use SurfaceView not &lt;del&gt;TextureView&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;Handling life cycle should be much more simple than previously, with the help of Architecture Component&lt;/li&gt;
  &lt;li&gt;Architecture components are not necessarily the way you must build your app, it’s a recommended way, but you must build what matches your need&lt;/li&gt;
  &lt;li&gt;Google recommends the libraries such as &lt;a href=&quot;https://bumptech.github.io/glide/&quot;&gt;Glide&lt;/a&gt;, &lt;a href=&quot;http://square.github.io/picasso/&quot;&gt;Picasso&lt;/a&gt; and &lt;a href=&quot;https://airbnb.design/lottie/&quot;&gt;Lottie&lt;/a&gt;, and they will never build equivalent tools in android SDK as they are already really good&lt;/li&gt;
  &lt;li&gt;Use systrace instead of &lt;del&gt;traceview&lt;/del&gt; to profile your code, and the Android Profiler which containts a nice view including the touch events at the top (purple dot, the long dot are swipe event)
&lt;img src=&quot;../assets/posts/2018-04-25-android-makers-2018/android-profiler.png&quot; alt=&quot;Android Profiler&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Remember that devices are resource-constrained, you must pay attention to, take care with the resources you use because there is a direct link to your user’s battery life&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;travelling-across-asia---our-journey-from-java-to-kotlin&quot;&gt;Travelling across Asia - Our journey from Java to Kotlin&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/K4KYA&quot;&gt;Amal Kakaiya&lt;/a&gt;, Deliveroo, &lt;a href=&quot;https://www.youtube.com/watch?v=ZaPIcI42Qtw&amp;amp;list=PLn7H9CUCuXAus0YgFW7QiIpnwHJd3Yinw&amp;amp;index=13&amp;amp;t=0s&quot;&gt;Video&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A talk about their switch from Java to Kotlin at Deliveroo&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key takeaways:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Start small, like the test or the data class, and then increase slightly the amount of Kotlin code in your project. Everyone in your team must be confident about using it, and not feel the need to rush.&lt;/li&gt;
  &lt;li&gt;Use comments on PRs, to learn the language from concrete examples in your own code base - it’s always better than a HelloWorld example&lt;/li&gt;
  &lt;li&gt;Android Studio is your friend: it offers you alternatives to improve your kotlin code&lt;/li&gt;
  &lt;li&gt;You can use Android studio converter, but it doesn’t always convert with the optimum results.&lt;/li&gt;
  &lt;li&gt;At Deliveroo they schedule a weekly meeting called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kotlin Hour&lt;/code&gt; where all the developers share what they have learned on Kotlin.&lt;/li&gt;
  &lt;li&gt;I learned the existence of the &lt;a href=&quot;https://www.google.fr/maps/place/Kotlin+Island/@60.001918,29.6841889,13z/data=!3m1!4b1!4m5!3m4!1s0x4696454b3c730d79:0x84277e6a3fbe0093!8m2!3d60.0125003!4d29.7336138&quot;&gt;Koltin Island&lt;/a&gt; (An island in Russia) far far away from the &lt;a href=&quot;https://www.google.fr/maps/place/Java,+Indon%C3%A9sie/data=!4m2!3m1!1s0x2e7aa07ed2323237:0x86fe1c59d6abed60?sa=X&amp;amp;ved=0ahUKEwjSlJfDxdjaAhWGcRQKHUXbB4sQ8gEI4AEwEA&quot;&gt;Java Island&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;better-asynchronous-programming-with-kotlin-coroutines&quot;&gt;Better asynchronous programming with Kotlin Coroutines&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/ErikHellman&quot;&gt;Erik Hellman&lt;/a&gt;, Hellsoft, &lt;a href=&quot;https://speakerdeck.com/erikhellman/better-async-with-kotlin-coroutines&quot;&gt;Slides&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/watch?v=Bb4CVrf5al4&amp;amp;list=PLn7H9CUCuXAus0YgFW7QiIpnwHJd3Yinw&amp;amp;index=11&amp;amp;t=0s&quot;&gt;Video&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Good starting points if you have never used &lt;a href=&quot;https://kotlinlang.org/docs/reference/coroutines.html&quot;&gt;Coroutine&lt;/a&gt;, Erik told us about coroutines, and how we can use them to end up with simple code looking like the excerpt below for async calls:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;loadTweets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#AndroidMakers&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;showTweets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Key takeaways:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Channel: basically a queue, it’s a way of passing multiple values to a coroutine&lt;/li&gt;
  &lt;li&gt;The coroutine doesn’t replace RxJava they can work together&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/JakeWharton/retrofit2-kotlin-coroutines-adapter&quot;&gt;Retrofit&lt;/a&gt; has a coroutine adapter&lt;/li&gt;
  &lt;li&gt;Coroutine is still in an experimental phase&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;design-tools-and-handoffs&quot;&gt;Design Tools and Handoffs&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;../assets/posts/2018-04-25-android-makers-2018/taylor.jpg&quot; alt=&quot;Design Tools and Handoffs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/taylorling&quot;&gt;Taylor Ling&lt;/a&gt;, Fabulous, &lt;a href=&quot;https://speakerdeck.com/taylorling/design-tools-closing-the-gap-between-designer-and-developer&quot;&gt;Slides&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/watch?v=_yIsiEiBk5s&amp;amp;list=PLn7H9CUCuXAus0YgFW7QiIpnwHJd3Yinw&amp;amp;index=6&amp;amp;t=0s&quot;&gt;Video&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;During his talk Taylor answered a really good question &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;What should a developer expect from a designer?&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;He divides his answer into 5 different parts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Visual Design&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Always design on Small Screen (recommended size 640x360, Nexus 5) because this is where you have all the constraints&lt;/li&gt;
      &lt;li&gt;Use consistent design across all of your app&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Design Assets&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Proper size, proper format assets (SVG, PNG, JPG), and optimized assets to avoid increasing your apk size. New &lt;a href=&quot;https://developer.android.com/guide/app-bundle/&quot;&gt;App Bundle&lt;/a&gt; will also help a lot for this point)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Design Specification&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;To avoid wasting both your designer’s and developer’s time, use tools like &lt;a href=&quot;https://zeplin.io/&quot;&gt;Zeplin&lt;/a&gt; to easily communicate the complete design specification (The new &lt;a href=&quot;https://material.io/tools/gallery/&quot;&gt;Gallery&lt;/a&gt; tools would be a good alternative)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Interaction Design&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Provided not only screen but also screen flow diagram&lt;/li&gt;
      &lt;li&gt;Animation should be defined with high quality video and even animation specification (delay, scale, duration etc…) and a timeline&lt;/li&gt;
      &lt;li&gt;Define the right interpolator depending on the animation purpose (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FastOutSlowIn&lt;/code&gt;, LinearOutSlow`, etc… )&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Animation Design&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Today &lt;a href=&quot;https://airbnb.design/lottie/&quot;&gt;Lottie&lt;/a&gt; and &lt;a href=&quot;https://www.adobe.com/products/aftereffects.html&quot;&gt;After effect&lt;/a&gt; are the best ways to easily add complex animation to add to a mobile application&lt;/li&gt;
      &lt;li&gt;For simple icon transition you could also use &lt;a href=&quot;https://shapeshifter.design/&quot;&gt;Shape Shifter&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;He turned the question the other way around &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;What should a designer expect from a developper&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Communication, ensure we all speak the same language (dp, sp, FAB, Snackar, etc…)&lt;/li&gt;
  &lt;li&gt;Explain to them what the constraints are, what could be implemented, and what could be not, and moreover suggest alternative solutions&lt;/li&gt;
  &lt;li&gt;Understand the business goal of design&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;themes-style--more-from-zero-to-hero&quot;&gt;Themes, style &amp;amp; more: from zero to hero&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/cyrilmottier&quot;&gt;Cyril Mottier&lt;/a&gt;, Zenly, &lt;a href=&quot;https://speakerdeck.com/cyrilmottier/theme-styles-and-more-from-zero-to-here&quot;&gt;Slides&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/watch?v=q_LJG4VuU3Q&amp;amp;list=PLn7H9CUCuXAus0YgFW7QiIpnwHJd3Yinw&amp;amp;index=7&amp;amp;t=0s&quot;&gt;Video&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Overall a really great overview of theme, style, text appereance and more. He explained how you should write them and organize them in your project. If you don’t feel confident with this part of the Android sdk, I definitely recommend that you watch this presentation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key takeaways:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How to properly handle themes regarding API version, to avoid re-writing them for every version in addition to the new attributes for each new version&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;../assets/posts/2018-04-25-android-makers-2018/theme.png&quot; alt=&quot;Theme API version&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;remote-control-your-application&quot;&gt;Remote-control your application&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/stan_kocken&quot;&gt;Stan Kocken&lt;/a&gt;, Dashlane, &lt;a href=&quot;https://speakerdeck.com/stankocken/remote-control-your-app&quot;&gt;Slides&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Stan gave us his feedback on how they manage remote configuration of their Dashlane app, without need of a new release on the store. He told us about five main concepts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Web View&lt;/strong&gt;: Load web content in your app
    &lt;ul&gt;
      &lt;li&gt;Pros: It allows you to update the entire screen&lt;/li&gt;
      &lt;li&gt;Cons: Bad user experience. This is ok for small parts of your app like the help center&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Remote Screen config&lt;/strong&gt;: Send screen content with json (text, icon)
    &lt;ul&gt;
      &lt;li&gt;Pros: Good user experience&lt;/li&gt;
      &lt;li&gt;Cons: Limited possibility for updating the layout&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Remote Copy&lt;/strong&gt;: Change the strings.xml by a remotely downloaded json file to easily update the wording with a Custom Layout inflator to manage string in .xml file
    &lt;ul&gt;
      &lt;li&gt;Pros: Fast wording updates in your app&lt;/li&gt;
      &lt;li&gt;Cons: Hard to manage multi-language, plurals and text formating&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;A/B test&lt;/strong&gt;: Compare two experiences to choose the best
    &lt;ul&gt;
      &lt;li&gt;Comparing local and server-side A/B test&lt;/li&gt;
      &lt;li&gt;Server-side is more appropriate for remotely updating the A/B tests&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Feature Flip&lt;/strong&gt;: Remotely enable or disable features in your app
    &lt;ul&gt;
      &lt;li&gt;At Dashlane they distinguish between &lt;em&gt;App Release&lt;/em&gt; and &lt;em&gt;Feature Release&lt;/em&gt;. They release their app every 2 weeks, no matter the state of the feature, and then enable the feature when it’s ready&lt;/li&gt;
      &lt;li&gt;Good question from the audience, you can no longer use the new release note feature from the Playstore with this workflow&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;adb-break-on-though-to-the-other-side&quot;&gt;ADB, Break On though To the Other Side&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/Eyal_Lezmy&quot;&gt;Eyal Lezmy&lt;/a&gt;, Quonto, &lt;a href=&quot;https://bit.ly/adb-chill&quot;&gt;Slides&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As I’m not a fan of “Magic programming”, it’s always interesting to understand how the tools you use work. This presentation about ADB was an in-depth understanding of how ADB works under the hood.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key takeaways:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ADB is split in 3 parts:
    &lt;ul&gt;
      &lt;li&gt;adb client (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;adb&lt;/code&gt; command)&lt;/li&gt;
      &lt;li&gt;adb server (Multiplexer)&lt;/li&gt;
      &lt;li&gt;adb deamon (Phone)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Android Studio does not use &lt;em&gt;abd&lt;/em&gt; but &lt;em&gt;ddmlib&lt;/em&gt;(a jar that provides APIs for talking with Dalvik VM, both on Android phones and emulators)&lt;/li&gt;
  &lt;li&gt;I learned about the existence of the &lt;a href=&quot;https://www.androidauthority.com/google-sooner-first-android-reference-device-83468/&quot;&gt;Google Sooner&lt;/a&gt; first ever Android phone, which has never been shown to the public.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;typesetting-desiging-and-building-beautiful-text-layout&quot;&gt;Typesetting: desiging and building beautiful text layout&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/FMuntenescu?lang=en&quot;&gt;Florina Muntenescu&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://twitter.com/crafty?lang=en&quot;&gt;Nick Butcher&lt;/a&gt;, Google
&lt;img src=&quot;../assets/posts/2018-04-25-android-makers-2018/typesetting.jpg&quot; alt=&quot;Typesetting&quot; /&gt;, &lt;a href=&quot;https://www.youtube.com/watch?v=ccEMHdTc0ZM&amp;amp;list=PLn7H9CUCuXAus0YgFW7QiIpnwHJd3Yinw&amp;amp;index=3&amp;amp;t=0s&quot;&gt;Video&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Big overview of all the Typesetting you can include in your app&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key takeaways:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Android P will add baseline param in TextView&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TextView&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;android:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;firstBaselineToTopHeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;24dp&quot;&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;android:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lastBaselineToBottomHeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;24dp&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.../&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.android.com/reference/android/widget/TextView.html#androidfirstbaselinetotopheight&quot;&gt;android:firstBaselineToTopHeight&lt;/a&gt;: Distance from the top of the TextView to the first text baseline. If set, this overrides the value set for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;paddingTop&lt;/code&gt;.
&lt;a href=&quot;https://developer.android.com/reference/android/widget/TextView.html#androidlastbaselinetobottomheight&quot;&gt;android:lastBaselineToBottomHeight&lt;/a&gt;: Distance from the bottom of the TextView to the last text baseline. If set, this overrides the value set for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;paddingBottom&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I learnt about the existence of the &lt;a href=&quot;https://developer.android.com/reference/android/widget/TextView.html#attr_android:breakStrategy&quot;&gt;android:breakStrategy&lt;/a&gt; param: Break strategy (control over paragraph layout).&lt;/li&gt;
  &lt;li&gt;If you have a long piece of text don’t use a single TextView but use a subset of paragraph that you must put in a recyclerView,  doing it this way will give you all the benefits of the RecyclerView when you scroll.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;gradle-in-android-studio-32-33-and-beyond&quot;&gt;Gradle in Android Studio &lt;del&gt;3.2&lt;/del&gt; 3.3 and beyond&lt;/h2&gt;
&lt;p&gt;Bradley Smith &amp;amp; Lucas Smaira, Google&lt;/p&gt;

&lt;p&gt;This was a good overview of how Gradle and Android Studio work together. They highlighted the pain points and explained to us why it’s slow sometimes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key takeaways&lt;/strong&gt; (new upcoming features):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Single Variant Sync (Sync only the selected variant, should be available in AS 3.3-canary)&lt;/li&gt;
  &lt;li&gt;PSD (Project structure Dialog) new graphical interface with nice suggestions, dependency graphs and more to help you manage your gradle file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;../assets/posts/2018-04-25-android-makers-2018/gradle.jpg&quot; alt=&quot;Project structure Dialog&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What’s next (Utlimate goal):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Running Android test through Gradle&lt;/li&gt;
  &lt;li&gt;Remove need for manual Sync of Gradle&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tools-of-the-trade&quot;&gt;Tools of the Trade&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/tsmith&quot;&gt;Ty Smith&lt;/a&gt;, Uber&lt;/p&gt;

&lt;p&gt;He gave us a big overview of how the Android team work at Uber, and the tools and architectures they use.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key takeaways:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The Uber app is based on a MonoRepository mainly to avoid dependency issues &lt;a href=&quot;https://eng.uber.com/android-monorepo/&quot;&gt;Full article&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;They introduced a system called Submit Queue which rebases changes on master and runs a customizable set of tests before merging them to avoid broken master&lt;/li&gt;
  &lt;li&gt;They use &lt;a href=&quot;https://phacility.com/phabricator/&quot;&gt;Phacility./Phabricator&lt;/a&gt; as a main tools&lt;/li&gt;
  &lt;li&gt;They use &lt;a href=&quot;https://buckbuild.com/&quot;&gt;Buck&lt;/a&gt; and the &lt;a href=&quot;https://buckbuild.com/article/exopackage.html&quot;&gt;Exopackage&lt;/a&gt;: from Ty word &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;It's like instantApp but it's works :)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;They have built a demo application with all the design components available, to keep a consistent design across the app
&lt;img src=&quot;../assets/posts/2018-04-25-android-makers-2018/uber.jpg&quot; alt=&quot;Project structure Dialog&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s quite impressive to see how many open-source libraries Uber have shared with the Android community:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/uber/okbuck&quot;&gt;OkBuck&lt;/a&gt;: OkBuck is a gradle plugin that lets developers utilize the Buck build system on a gradle project.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/uber/ribs&quot;&gt;RIBs&lt;/a&gt;: Uber’s cross-platform mobile architecture framework.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/uber/crumb&quot;&gt;Crumb&lt;/a&gt;: An annotation processor for breadcrumbing metadata across compilation boundaries.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/uber/autodispose&quot;&gt;AutoDispose&lt;/a&gt;: Automatic binding+disposal of RxJava 2 streams.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/uber/artist&quot;&gt;Artist&lt;/a&gt;: An artist creates views. Artist is a Gradle plugin that codegens a base set of Android Views.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/uber/NullAway&quot;&gt;NullAway&lt;/a&gt;: A tool to help eliminate NullPointerExceptions (NPEs) in your Java code with low build-time overhead&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/uber-common/rave&quot;&gt;RAVE&lt;/a&gt;: A data model validation framework that uses java annotation processing.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This year Android Makers regroups 816 people, including 82 speakers and it was organized by 34 organizers. Thanks to them and all the sponsors who make this event possible! We will definitely come back next year. You can already buy your ticket for &lt;a href=&quot;http://bit.ly/am-19&quot;&gt;Android Makers 2019&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;As always, it’s good to meet the android community and learn from other developers. This year the event became more international - I only saw one talk in French, all the other talks were in English. It was great to see that we have a conference in France that is attractive for the Android community!&lt;/p&gt;

&lt;p&gt;See you next year!&lt;/p&gt;

</description>
        
          <description>&lt;p&gt;Android Makers is the largest Android event in France, organized by the &lt;a href=&quot;http://www.paug.fr/&quot;&gt;PAUYG&lt;/a&gt; and &lt;a href=&quot;http://www.bemyapp.com/&quot;&gt;BeMyApp&lt;/a&gt;. This year the event was held in Le Beffroi de Montrouge - what a great place to enjoy a conference. There was much more space than the previous Android Makers event: we were really comfortable, with all we needed to be fully focussed on the conferences.&lt;/p&gt;
</description>
        
        <pubDate>Thu, 17 May 2018 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/android-makers-2018/</link>
        <guid isPermaLink="true">https://getaround.tech/android-makers-2018/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Ensuring consistent spacing in your UI</title>
        <dc:creator>Tim Petricola</dc:creator>
        <description>&lt;p&gt;Drivy is growing, and the impact of this is particularly reflected in the evolution of our visual identity, conveyed by Drivy’s UI.&lt;/p&gt;

&lt;p&gt;Having more and more people involved in new features (product managers, copywriters, designers, developers, …) means having more UI updates on the website. To make things easier, we’ve recently started working on Cobalt, Drivy’s internal design system.&lt;/p&gt;

&lt;p&gt;Design systems are a broad topic. This post will only focus on dealing with whitespace across the website.&lt;/p&gt;

&lt;h1 id=&quot;the-problem&quot;&gt;The problem&lt;/h1&gt;

&lt;p&gt;In the past, we didn’t have a process for deciding on what value we should use for a given whitespace. Sometimes, a designer would choose a specific value or the developer might decide to take the time to make it pixel perfect. Other times it would just be a question of getting a feeling for “what looked right” during implementation. And then we’d end up with feedback such as “try adding 1 or 2 pixels there”.&lt;/p&gt;

&lt;p&gt;This would lead to two main frustrations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;developers and designers would spend time searching for &lt;em&gt;the perfect value™&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;visual approximations and inconsistency would appear across pages&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;choosing-values&quot;&gt;Choosing values&lt;/h1&gt;

&lt;p&gt;We knew we wanted to establish a fixed set of values that we could use for all whitespaces. But how to choose them?&lt;/p&gt;

&lt;p&gt;We experimented with some of our components (a car card, new landing pages, our new booking page etc.) to see what could work. This also meant playing with typography to find the proper line-heights for every font style. In doing so, we ended up with a 4px baseline.&lt;/p&gt;

&lt;p&gt;We then extracted the main values from this set of experimental components. When it made sense to do so, we homogenized and merged some of the values to end up with a reduced set. Several components and a bit of tweaking later, we now use this set of values:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/posts/2018-04-19-design-system-spacings/spacings.png&quot; alt=&quot;spacing values&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;enforcing-it&quot;&gt;Enforcing it&lt;/h1&gt;

&lt;p&gt;Having a theoretical set of values is great. But how do you make sure that they will be used?&lt;/p&gt;

&lt;p&gt;This is not an issue for our UI team as they are at the core of the design-system project and know what values to use. But what about developers who had been less involved? And, is it now necessary for them to know the specific value of a given spacing as they implement it?&lt;/p&gt;

&lt;p&gt;We don’t think so.&lt;/p&gt;

&lt;p&gt;We got inspired by what Shopify are doing with &lt;a href=&quot;https://polaris.shopify.com/&quot;&gt;Polaris&lt;/a&gt; and ended up writing a custom Scss function. Whenever someone needs to add some spacing, they can write the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin-bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;spacing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And the implementation is quite simple:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$spacing-data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;extra-tight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;tight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;medium&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;loose&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;extra-loose&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;spacing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$variant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;map-get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$spacing-data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$variant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;@if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;@error&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Spacing variant `&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$variant&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;` not found.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;@return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;dealing-with-edge-cases&quot;&gt;Dealing with edge cases&lt;/h1&gt;

&lt;h2 id=&quot;components-with-a-border&quot;&gt;Components with a border&lt;/h2&gt;

&lt;p&gt;But what if a component has a bottom border of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1px&lt;/code&gt;, setting the whole baseline off? There are various solutions to this issue, such as dropping borders in favor of box shadows. But our approach is quite simple: compensate by removing some spacing.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$border-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nl&quot;&gt;padding-bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;spacing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$border-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border-bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$border-width&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;#fff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;component-with-user-uploaded-media&quot;&gt;Component with user uploaded media&lt;/h2&gt;

&lt;p&gt;We have to accept that the baseline will not be respected. In our case here at Drivy, this occurs when we display pictures uploaded by users, where we want to respect the ratio.&lt;/p&gt;

&lt;figure&gt;
  &lt;img alt=&quot;Car Card&quot; src=&quot;/assets/posts/2018-04-19-design-system-spacings/car-card.png&quot; /&gt;
  &lt;figcaption&gt;
    The image has a height of 222px, which does not conform to the base 4 rule.
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Our design system is still young and we have a lot of things to improve on and decide about. In the same way that we chose spacing values, we also have conventions for typography and colors.&lt;/p&gt;

&lt;p&gt;Seeing as we have a lot of pages in our application, it’s not feasible to migrate the whole site to Cobalt at once. But we’re very excited to slowly roll out our new system throughout the application!&lt;/p&gt;
</description>
        
          <description>&lt;p&gt;Drivy is growing, and the impact of this is particularly reflected in the evolution of our visual identity, conveyed by Drivy’s UI.&lt;/p&gt;
</description>
        
        <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/design-system-spacings/</link>
        <guid isPermaLink="true">https://getaround.tech/design-system-spacings/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Running Our First Internal Hack Day</title>
        <dc:creator>Emily Fiennes &amp; Marc G Gauthier</dc:creator>
        <description>&lt;p&gt;Trying out new technologies, exploring new ideas, investigating potential solutions: these are all fundamental parts of the problem-solving element of a developer’s work. As with any form of creative work, it’s important to keep motivated and one step ahead of ever-changing technological advancements. This encourages a fresh approach, and above all, boosts the enjoyment we take from our work.&lt;/p&gt;

&lt;p&gt;That’s why we’ve started holding regular hack days here at Drivy. Every few months, the tech, product and data teams can get together and pool their skills, experience and ideas. The brief? To plan and implement an Drivy-related MVP that could improve the product, but which you wouldn’t usually get the chance to explore or implement in your day-to-day work.&lt;/p&gt;

&lt;h1 id=&quot;format&quot;&gt;Format&lt;/h1&gt;

&lt;p&gt;We felt strongly that, if our hack days were to be a sustainable project,  it was important to get the format right. This meant setting aside a specific day within our normal working week. Many team members with commitments outside of work wouldn’t have been able to show up, had we held it at the weekend. Furthermore, the direct benefits of the exercise - team cohesion, innovation, boosting motivation - could ultimately be invested back into our productivity and creativity in the long run.   &lt;/p&gt;

&lt;h2 id=&quot;keeping-focus&quot;&gt;Keeping focus&lt;/h2&gt;

&lt;p&gt;We decided to venture out of Drivy HQ, so as to focus purely on coding and avoid any unwanted interruptions. This made a nice change of pace from what can be a fast-moving and sometimes intense working environment. Plus, the change of scene made it feel different to a usual working day, and got those creative juices flowing.&lt;/p&gt;

&lt;p&gt;Because that’s exactly what it was - another working day, just not at the office.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/posts/hack-day/offsite.jpg&quot; alt=&quot;Working in a different setup&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But there was one problem: we didn’t want to hold the hack day at the weekend, but we also couldn’t desert the office en masse and have no one available to respond to potential production issues either. We thus split the team, with each half hacking on different days, one week apart. Sure, it might have been better if the entire team had been present but this was a good middle ground that actually afforded a certain intimacy and didn’t disturb the usual operations of the website.&lt;/p&gt;

&lt;p&gt;One ground rule was that all hackers would quit Slack. If something really critical happened in production, we would revert to a good old-fashioned phone call and a developer would stop hacking in order to address the issue. Thankfully it didn’t come to that, but it’s always reassuring to have a back-up plan.&lt;/p&gt;

&lt;h2 id=&quot;teams-and-projects&quot;&gt;Teams and projects&lt;/h2&gt;

&lt;p&gt;We decided on teams and projects beforehand, so were able to get straight down to business and fully capitalise on the 1-day timeframe.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/posts/hack-day/ideas.jpeg&quot; alt=&quot;Hack day ideas&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Starting the discussion early also gave us plenty of time to improve our ideas and debate the most interesting, and most feasible, projects to pursue.&lt;/p&gt;

&lt;h2 id=&quot;quality-time&quot;&gt;Quality time&lt;/h2&gt;

&lt;p&gt;Some members of our tech team work remotely, but they all came to Paris for the hack day. This was a great chance for everyone to collaborate with people they might not otherwise get to work with. There’s also something to be said for the team-building potential of a hack day in a wider sense. For one day, we collectively ventured outside of our zones of comfort, in terms of the projects we chose, the speed of delivery and the technologies used.&lt;/p&gt;

&lt;p&gt;In that context, trust and communication between teammates becomes key to decision-making, and ultimately the experience can make for stronger, more cohesive teams. As the Drivy team continues to grow, and collaboration becomes more squad-oriented, team cohesion and communication will be increasingly important.&lt;/p&gt;

&lt;h2 id=&quot;project-time&quot;&gt;Project time!&lt;/h2&gt;

&lt;p&gt;With 17 developers, there were many projects. Some warrant a blog post in their own right, but in the meantime here is a quick overview:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rebuild the search using ReactJS, Flux and styled components&lt;/li&gt;
  &lt;li&gt;Integrate Google Assistant to book cars using Google Home&lt;/li&gt;
  &lt;li&gt;Pay on Android using credit cards NFC &lt;a href=&quot;https://en.wikipedia.org/wiki/EMV&quot;&gt;capabilities&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Build a Slack chatbot to book meeting rooms&lt;/li&gt;
  &lt;li&gt;Search and book cars with Alexa&lt;/li&gt;
  &lt;li&gt;Detect licence plates and more based on user-uploaded pictures&lt;/li&gt;
  &lt;li&gt;Try out a new way of doing caching&lt;/li&gt;
  &lt;li&gt;Use &lt;a href=&quot;../assets/posts/hack-day/machine-learning.jpg&quot;&gt;machine learning&lt;/a&gt; to better understand user behaviour with our new Instant Booking feature&lt;/li&gt;
  &lt;li&gt;Use &lt;a href=&quot;https://developer.apple.com/arkit/&quot;&gt;iOS 11’s ARKit&lt;/a&gt; to locate Drivy cars in the street&lt;/li&gt;
  &lt;li&gt;Add a chat system to help users encountering problems&lt;/li&gt;
  &lt;li&gt;Reliably send SMS using &lt;a href=&quot;https://wammu.eu/gammu/&quot;&gt;Gammu&lt;/a&gt;, a sim card and a Raspberry Pi&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s a bonus extract of the demo day presentation for the Alexa project by &lt;a href=&quot;https://github.com/watsonbox&quot;&gt;Howard&lt;/a&gt;.&lt;/p&gt;

&lt;center&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/V5i7RreIxqc?rel=0&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/center&gt;

&lt;h2 id=&quot;crunch-time&quot;&gt;Crunch time&lt;/h2&gt;

&lt;p&gt;Once the two hack days were completed, we held a Demo Day together back at Drivy HQ. It lasted for an hour, where each group had the opportunity to present their objectives, work process and results.&lt;/p&gt;

&lt;p&gt;We recorded the demo and shared it with the rest of the company, as many people were curious to learn about what we built. Interest had been sparked by the endless potential for future developments to the product that could be imagined, and it was cool to transcend any tech/non-tech frontiers in this way. Plus the positive feedback further proved the real sense of ownership and investment that all team members have here at Drivy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/posts/hack-day/demo.jpg&quot; alt=&quot;Hack day demo at Drivy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With our first hack day successfully under our belt, we’re already eagerly anticipating the next. The day was a valuable opportunity to collaborate with different teammates, to explore novel ideas in a new context and to disrupt our usual working practices. After all, it’s through moving fast and breaking a few things along the way that you can come up with novel solutions to problems you maybe didn’t even know existed.&lt;/p&gt;

</description>
        
          <description>&lt;p&gt;Trying out new technologies, exploring new ideas, investigating potential solutions: these are all fundamental parts of the problem-solving element of a developer’s work. As with any form of creative work, it’s important to keep motivated and one step ahead of ever-changing technological advancements. This encourages a fresh approach, and above all, boosts the enjoyment we take from our work.&lt;/p&gt;
</description>
        
        <pubDate>Tue, 03 Apr 2018 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/drivy-hack-day/</link>
        <guid isPermaLink="true">https://getaround.tech/drivy-hack-day/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Redshift tips and tricks - part 1</title>
        <dc:creator>Faouz EL FASSI</dc:creator>
        <description>&lt;p&gt;At Drivy we have massively been using &lt;a href=&quot;https://aws.amazon.com/fr/redshift/&quot;&gt;Redshift&lt;/a&gt; as our data warehouse since mid-2015, we store in it all our transformations and aggregations of our production database and 3rd-party data (spreadsheets, csv, APIs and so on).
In this first blog post, we will discuss how we adapted our Redshift configuration and architecture as our usages changed over time.&lt;/p&gt;

&lt;p&gt;This article targets a technical audience designing or maintaining Redshift data warehouses: architects, database developers or data engineers.
It will aim to provide a simple overview, with a mix of tips to help you scale your Redshift cluster.&lt;/p&gt;

&lt;p&gt;To recap, Amazon Redshift is a fully managed, petabyte-scale data warehouse deployed on AWS. It is based on PostgreSQL 8.0.2, uses &lt;a href=&quot;https://en.wikipedia.org/wiki/Column-oriented_DBMS&quot;&gt;columnar storage&lt;/a&gt; and massively parallel processing.
It also has a very good query plan optimizer and strong compression capabilities.&lt;/p&gt;

&lt;figure&gt;
  &lt;img alt=&quot;Redshift architecture&quot; src=&quot;/assets/posts/redshift/architecture.png&quot; /&gt;
  &lt;figcaption&gt;
    Overview of Redshift's architecture. Source: https://docs.aws.amazon.com
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;In this first blog post, we will cover the following topics:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;how engineers must adapt the default-queue management strategy, called workload management (WLM) to fit their needs;&lt;/li&gt;
  &lt;li&gt;how to tweak Redshift’ distribution and sorting styles in order to tune table design for improving queries performance, which is crucial for large tables (&amp;gt; ~100M rows).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;usage-at-drivy&quot;&gt;Usage at Drivy&lt;/h2&gt;

&lt;p&gt;The big picture is that we have different usages with different SLA levels: from fast-running queries that must be highly available (near real-time reporting for fraud) to long-running batch jobs (e.g: propagating an ID on all the tracking records for all the sessions of all the users across all their devices 😅).&lt;/p&gt;

&lt;p&gt;Prior to recent changes, Redshift was subject to roughly 50K requests per day:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;~70% were ETL jobs and visualizations jobs, having a high reliability and availability requirement and various execution times [1min, 60min];&lt;/li&gt;
  &lt;li&gt;~10% were short running queries (&amp;lt; 15min) written by analysts, having no specific SLA;&lt;/li&gt;
  &lt;li&gt;~20% were very short queries (&amp;lt; 1min), metrics, health and stats (internals of Redshift).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since a few months ago our usages have slightly changed as more analysts came and a new set of exploratory tools is being used.&lt;/p&gt;

&lt;p&gt;We’ve decided to deploy &lt;a href=&quot;https://www.tableau.com/&quot;&gt;Tableau&lt;/a&gt; to all project managers and analysts to improve agility in data-driven decision making. They have started using it with their own credentials to ingest data from Redshift to Tableau.&lt;/p&gt;

&lt;p&gt;It resulted in multiplying the concurrent connections to Redshift by two, and a high load on the queue dedicated to analysts, neither fitting the current WLM strategy, therefore breaking our SLAs.&lt;/p&gt;

&lt;p&gt;We identified a few levers.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Design a better WLM strategy and monitor it thoroughly.&lt;/li&gt;
  &lt;li&gt;Improve our schema design:
    &lt;ul&gt;
      &lt;li&gt;create pre-processing ETL pipelines for the frequent extractions that do a lot of aggregations and computations which are responsible for memory issues;&lt;/li&gt;
      &lt;li&gt;reduce redistribution among worker nodes of the Redshift cluster for frequent computations with high cardinality;&lt;/li&gt;
      &lt;li&gt;leverage AWS S3 if it is a simple extraction of large tables (relocate the data source).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;concurrency-issues&quot;&gt;Concurrency issues&lt;/h2&gt;
&lt;p&gt;Initially we had the following workload management strategy, in addition to the Short Query Acceleration queue set at a maximal timeout of 6 seconds:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;queue&lt;/th&gt;
      &lt;th&gt;concurrency&lt;/th&gt;
      &lt;th&gt;timeout&lt;/th&gt;
      &lt;th&gt;RAM&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;etl&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;∞&lt;/td&gt;
      &lt;td&gt;50%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;visualisations&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;900s&lt;/td&gt;
      &lt;td&gt;20%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;analysts&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;900s&lt;/td&gt;
      &lt;td&gt;20%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;default&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;1800s&lt;/td&gt;
      &lt;td&gt;10%&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;When enabled, Redshift uses machine learning to predict short running queries and affect them to this queue, so there is no need to define and manage a queue dedicated to short running queries, &lt;a href=&quot;https://docs.aws.amazon.com/redshift/latest/dg/wlm-short-query-acceleration.html&quot;&gt;for more info&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To face the limitations introduced by the use of Tableau through the credentials of the analysts, we’ve created a dedicated Redshift user group called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exploration&lt;/code&gt; where we’ve added the Tableau user, using the same Redshift queue as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;etl&lt;/code&gt; and slightly changed the timeout of the other ones to the following configuration:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;queue&lt;/th&gt;
      &lt;th&gt;concurrency&lt;/th&gt;
      &lt;th&gt;timeout&lt;/th&gt;
      &lt;th&gt;RAM&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;etl, exploration&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;∞&lt;/td&gt;
      &lt;td&gt;50%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;visualisations&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;1500s&lt;/td&gt;
      &lt;td&gt;20%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;analysts&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;1800s&lt;/td&gt;
      &lt;td&gt;20%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;default&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;3600s&lt;/td&gt;
      &lt;td&gt;10%&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;We kept the SQA queue and increased its timeout to 20s. This avoids short queries getting stuck behind the long-running ones in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;visualisations&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;analysts&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt; queues.&lt;/p&gt;

&lt;p&gt;This new configuration limited the high load on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;analysts&lt;/code&gt; queue resulting in queries being queued and frequent out of memory issues, but added some lag on the ETL pipelines.&lt;/p&gt;

&lt;p&gt;We wanted to monitor badly designed queries, and queries that are subject to a bad distribution of the underlying data, significantly impacting the queries execution time.
WLM gives us the possibility to define rules for logging, re-routing or aborting queries when specific conditions were met.&lt;/p&gt;

&lt;p&gt;We decided to log all the queries that may contain errors, such as badly designed joins requiring a nested loop (cartesian product between two tables).&lt;/p&gt;

&lt;p&gt;Here is an example of our current logging strategy:&lt;/p&gt;
&lt;figure&gt;
  &lt;img alt=&quot;WLM rules&quot; src=&quot;/assets/posts/redshift/wlm.png&quot; /&gt;
  &lt;figcaption&gt;
    Logging rules for the etl &amp;amp; exploration queue
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;When the rules are met, the query ID is logged in the &lt;a href=&quot;https://docs.aws.amazon.com/redshift/latest/dg/r_STL_WLM_RULE_ACTION.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STL_WLM_RULE_ACTION&lt;/code&gt;&lt;/a&gt; internal table.
Here is a view to locating the culprit: the query text, the user or system who ran it and the rule name that it is violating (defined in the WLM json configuration file).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;OR&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;REPLACE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VIEW&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v_wlm_rules_violations&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;distinct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;usename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;&quot;rule&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;&quot;database&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;querytxt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recordtime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_record_time&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STL_WLM_RULE_ACTION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STL_QUERY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pg_user&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;usesysid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userid&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note that the query rules are executed in a bottom-up approach, if 3 rules are defined (log, hop and abort).
The query will be logged and then re-routed to the next available queue (⚠️ only for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SELECT&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CREATE&lt;/code&gt; statements) before being aborted.&lt;/p&gt;

&lt;p&gt;Now that we have a suitable workload configuration and a few monitoring tools to log badly designed queries, let’s see how to improve query performances to shorten the ETL pipelines!&lt;/p&gt;

&lt;h2 id=&quot;schema-optimizations&quot;&gt;Schema optimizations&lt;/h2&gt;

&lt;h3 id=&quot;one-of-the-most-important-aspect-of-a-columnar-storage-database-such-as-redshift-is-to-decrease-the-amount-of-redistribution-needed-to-perform-a-specific-task&quot;&gt;One of the most important aspect of a columnar storage database such as Redshift is to decrease the amount of redistribution needed to perform a specific task.&lt;/h3&gt;

&lt;p&gt;The only way of approximating it is to define the correct combination of distribution and sort keys.&lt;/p&gt;

&lt;p&gt;Here is a recipe for choosing the best sort keys, adapted from AWS documentation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;if recent data is queried most frequently, specify the timestamp column as the leading column for the sort key;&lt;/li&gt;
  &lt;li&gt;if you do frequent range filtering or equality filtering on one column, specify that column as the sort key;&lt;/li&gt;
  &lt;li&gt;if you frequently join a (dimension) table, specify the join column as the sort key;&lt;/li&gt;
  &lt;li&gt;if one of your fact tables has more than ~100M rows and has many dimensions, use an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;interleaved&lt;/code&gt; distribution style.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And, for distribution keys:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;distribute the fact table and one dimension table on their common columns;&lt;/li&gt;
  &lt;li&gt;choose the largest dimension based on the size of the filtered data set;&lt;/li&gt;
  &lt;li&gt;choose a column with high cardinality in the filtered result set;&lt;/li&gt;
  &lt;li&gt;change some dimension tables to use ALL distribution (copy the whole table to all compute nodes).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;explain&lt;/code&gt; command gives us the opportunity to test different distribution styles by measuring the query cost.&lt;/p&gt;

&lt;p&gt;To summarize, using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;explain&lt;/code&gt; it’s really important to follow certain points.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Avoid &lt;strong&gt;NESTED LOOP&lt;/strong&gt; in all your queries.&lt;/li&gt;
  &lt;li&gt;Limit &lt;strong&gt;HASH JOINS&lt;/strong&gt;: by defining the join condition as distribution &lt;strong&gt;and&lt;/strong&gt; sorting key it will be transformed to a &lt;strong&gt;MERGE JOIN&lt;/strong&gt; &lt;strong&gt;-&amp;gt; fastest join style&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Maximize &lt;strong&gt;DB_DIST_NONE&lt;/strong&gt; in your long-running queries: this means that the records are collocated on the same node, thus no redistribution is needed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You should also be careful regarding the skew ratio across slices of your worker nodes if you have an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;interleaved&lt;/code&gt; sort distribution style, if the data is evenly distributed the load is split evenly across slices of each worker.&lt;/p&gt;

&lt;figure&gt;
  &lt;img alt=&quot;Skew ratios source: aws.amazon.com&quot; src=&quot;/assets/posts/redshift/skew.gif&quot; /&gt;
  &lt;figcaption&gt;
    Skewed distribution resulting in starvation, computations are as long as the slowest slice (containing most of the data). Source: https://aws.amazon.com/fr/blogs/big-data/top-10-performance-tuning-techniques-for-amazon-redshift/
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Bonus tip:&lt;/strong&gt; this view gives you a full overview of all the tables in your database and it gives, the following information on each table:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;its size in MB;&lt;/li&gt;
  &lt;li&gt;if it has a distribution key;&lt;/li&gt;
  &lt;li&gt;if it has a sortkey;&lt;/li&gt;
  &lt;li&gt;its skew ratio.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;OR&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;REPLACE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VIEW&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v_tables_infos&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;SCHEMA&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;schemaname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;&quot;table&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tablename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;table_id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tableid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size_in_mb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;CASE&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;WHEN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diststyle&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'EVEN'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ALL'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;THEN&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;ELSE&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has_dist_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;CASE&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;WHEN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortkey1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;THEN&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;ELSE&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has_sort_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;CASE&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;WHEN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoded&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Y'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;THEN&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;ELSE&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has_col_encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;CAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_blocks_per_slice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min_blocks_per_slice&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;FLOAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GREATEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NVL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min_blocks_per_slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)::&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ratio_skew_across_slices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;CAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dist_slice&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;FLOAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;COUNT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;DISTINCT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stv_slices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pct_slices_populated&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;svv_table_info&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ti&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tbl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;MIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min_blocks_per_slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;MAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_blocks_per_slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;COUNT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;DISTINCT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dist_slice&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tbl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;COUNT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;c&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STV_BLOCKLIST&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tbl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tbl&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table_id&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;svv_table_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tbl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iq&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tbl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ti&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This not-too-long blog post highlighted some of the straight forward ways to scale a Redshift cluster, by configuring the best WLM setup, leveraging query rules monitoring and improving query performances by limiting redistribution.&lt;/p&gt;

&lt;p&gt;You should also bear the following list of various points in mind when designing your data warehouse:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You’ll need at least 3 times the size of your largest table as available disk space to be able to perform basic maintenance operations;&lt;/li&gt;
  &lt;li&gt;Use distribution keys to avoid redistribution, and use ALL distribution on small dimensions;&lt;/li&gt;
  &lt;li&gt;Reduce the use of the leader node as much as possible by leveraging COPY/UNLOAD;&lt;/li&gt;
  &lt;li&gt;Compress your columns. &lt;strong&gt;Pro-tip:&lt;/strong&gt; don’t compress sort keys columns because there will be more data in each zone map and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SCAN&lt;/code&gt; operation will take more time;&lt;/li&gt;
  &lt;li&gt;Increase batch size as much as possible;&lt;/li&gt;
  &lt;li&gt;Gain half the IO time in your ETL pipelines by creating temporay tables for pre-processing instead of disposable regular tables: temporary tables are not replicated!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the last major update of Redshift, Amazon came up with Redshift Spectrum. It is a dedicated Amazon Redshift server independent from the main cluster. Such as many compute intensive tasks can be pushed down to the Amazon Spectrum layer using Amazon S3 as its storage.
It uses much less of the cluster’s processing and storage resources and provides &lt;strong&gt;unlimited&lt;/strong&gt;&lt;em&gt;ish&lt;/em&gt; read concurrency!&lt;/p&gt;

&lt;p&gt;We will deep dive in Redshift Spectrum in the second part of this blog post series.&lt;/p&gt;

&lt;p&gt;Meanwhile, don’t hesitate of course to reach me out for any feedback!&lt;/p&gt;

</description>
        
          <description>&lt;p&gt;At Drivy we have massively been using &lt;a href=&quot;https://aws.amazon.com/fr/redshift/&quot;&gt;Redshift&lt;/a&gt; as our data warehouse since mid-2015, we store in it all our transformations and aggregations of our production database and 3rd-party data (spreadsheets, csv, APIs and so on).
In this first blog post, we will discuss how we adapted our Redshift configuration and architecture as our usages changed over time.&lt;/p&gt;

</description>
        
        <pubDate>Wed, 21 Mar 2018 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/redshift_tips_ticks_part_1/</link>
        <guid isPermaLink="true">https://getaround.tech/redshift_tips_ticks_part_1/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Rails 5.1 Change Tracking in Callbacks</title>
        <dc:creator>Howard Wilson</dc:creator>
        <description>&lt;p&gt;After recently upgrading to Rails 5.1, we noticed that certain model changes were no longer getting logged properly by &lt;a href=&quot;https://github.com/airblade/paper_trail&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PaperTrail&lt;/code&gt;&lt;/a&gt;. After a bit of digging, this turned out to be due to a subtle difference in the way that Rails &lt;a href=&quot;https://github.com/rails/rails/pull/25337&quot;&gt;now tracks changes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It’s a little contrived, but let’s say we have a model that becomes active once info is present, like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;after_save&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;active&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info_was&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;blank?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;present?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;active&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;changes&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Let's see how changes are tracked&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;save!&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In Rails 5, we get something like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;info: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;info&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;active&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;updated_at&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Fri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Jan&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Fri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Jan&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However, after upgrading to Rails 5.1, we’ll get:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;info: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;info&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;updated_at&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Fri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Jan&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Fri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Jan&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The state transition is now missing from the tracked changes.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NOTE: As of Rails 5.1, we’ll now see also see the following warning, but it doesn’t give us any indication of this small change in behavior.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;DEPRECATION WARNING: The behavior of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;changes&lt;/code&gt; inside of after callbacks will be changing in the next version of Rails. The new return value will reflect the behavior of calling the method after &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;save&lt;/code&gt; returned (e.g. the opposite of what it returns now). To maintain the current behavior, use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;saved_changes&lt;/code&gt; instead.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Admittedly this is a small and isolated change, and this illustration is something of an anti-pattern, but this might just help clarify the new behavior for others seeing similar issues!&lt;/p&gt;
</description>
        
          <description>&lt;p&gt;After recently upgrading to Rails 5.1, we noticed that certain model changes were no longer getting logged properly by &lt;a href=&quot;https://github.com/airblade/paper_trail&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PaperTrail&lt;/code&gt;&lt;/a&gt;. After a bit of digging, this turned out to be due to a subtle difference in the way that Rails &lt;a href=&quot;https://github.com/rails/rails/pull/25337&quot;&gt;now tracks changes&lt;/a&gt;.&lt;/p&gt;
</description>
        
        <pubDate>Mon, 12 Feb 2018 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/rails-5.1-change-tracking/</link>
        <guid isPermaLink="true">https://getaround.tech/rails-5.1-change-tracking/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>How we documented our API using unit testing</title>
        <dc:creator>Christophe Yammouni</dc:creator>
        <description>&lt;p&gt;At Drivy, we have an internal API to communicate with our native apps available on both iOS and Android.
One of the main pain point we experienced is documentation.&lt;/p&gt;

&lt;p&gt;As our product is constantly evolving, we need to have up-to-date documentation in order to help both mobile and backend developers stay aware of what each endpoint is expecting and returning.&lt;/p&gt;

&lt;p&gt;Static documentation is known to be hard to maintain, it’s indeed easy to forget to update it from time to time. What is more, you quickly end up with differences between documentation and actual behaviour.&lt;/p&gt;

&lt;p&gt;The solution we are going to see is something between a static and a live documentation.&lt;/p&gt;

&lt;h2 id=&quot;backend-stack&quot;&gt;Backend stack&lt;/h2&gt;

&lt;p&gt;Our backend is written in Rails and we use Rspec as part of our test suite.
For our API, we use &lt;a href=&quot;https://github.com/rails-api/active_model_serializers&quot;&gt;active_model_serializers&lt;/a&gt; to handle the view component of the MVC pattern. Here, views are called serializers.
We tried other options like &lt;a href=&quot;https://github.com/nesquena/rabl&quot;&gt;RABL&lt;/a&gt;, but felt that active_model_serializers was the best choice. For example, its DSL is inspired from Rails, so a Ruby developer does not need special training to learn how to use it, it’s also more simple to do unit testing.&lt;/p&gt;

&lt;p&gt;We tend to have a serializer per action and some nested nodes are generated by shared ones.&lt;/p&gt;

&lt;h2 id=&quot;our-solution&quot;&gt;Our solution&lt;/h2&gt;

&lt;p&gt;Here’s an example of one of our serializer spec.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;err&quot;&gt;let(:expected_json)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;user.id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;first_name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Ben&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;last_name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Driver&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;email&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ben@driver.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;phone_number_national&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0612345678&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;phone_country&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;FR&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;address_line1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;28 rue des paquerettes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;address_line2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;appt B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;city&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Suresnes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;postal_code&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;92150&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;country&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;FR&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;about_me&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;I love cars&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;license_number&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1234567890&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;license_first_issue_date&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2001-01-01&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;license_country&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;FR&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;birth_date&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1981-01-01&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;birth_place&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;macon&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;created_at&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2016-01-01T11:00:00Z&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;avatar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;thumb_url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://drivy-test.imgix.net/uploads/originals/ed3585a06f3ad9a1c945456953cb9ed7.jpeg?auto=format%2Ccompress&amp;amp;crop=faces&amp;amp;dpr=2.0&amp;amp;fit=crop&amp;amp;fm=png&amp;amp;h=100&amp;amp;mask=https%3A%2F%2Fdrivy-prod-static.s3.amazonaws.com%2Fimgix%2Favatar_mask_circle.png&amp;amp;w=100&quot;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;license_release_date&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2001-01-01&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;stats&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;ratings_average&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ratings_average&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;ratings_count&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;owner_ended_rentals_count&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;driver_ended_rentals_count&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;it_behaves_like&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a serializer&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;shared_examples_for&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a serializer&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;matches the expected output&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pretty_generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generated_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pretty_generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expected_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Under the hood, we generate the JSON output from the serializer, and compare it to our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;expected_json&lt;/code&gt; variable. If any difference is spotted, the spec will fail.&lt;/p&gt;

&lt;p&gt;What’s really interesting here is that this is an actual test. This means that any change to the serializer will break the spec, preventing a release to production and therefore forcing developers to actually update the test.&lt;/p&gt;

&lt;p&gt;So what we see in this file will always be synchronised with the production generated content.&lt;/p&gt;

&lt;p&gt;From a quick look, you can learn attribute names, possible values/types, and if some changes are tied to a specific app version, you can have different context, exposing those behaviors.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;We’ve been using this solution for more than a year, with new developers joining the team, and it still fits our needs. Contexts and expected outputs are easy to read by a non-Ruby developer.&lt;/p&gt;

&lt;p&gt;Of course, we have room for improvements, for example, it’s missing description of attributes, endpoints path, etc.
But it’s a win-win solution, because we have all benefits of unit testing, and it acts as a documentation.&lt;/p&gt;

&lt;p&gt;With some additional work, we could easily generate a standalone documentation on a regular basis regrouping all serializers output in a single page.&lt;/p&gt;

&lt;p&gt;We’ve only been seeing a standalone piece of documentation for what a client can expect to receive from requesting our API.
But what about inputs? What does a client need to send as parameters to properly receive those answers.
In a future article, we’ll see how we managed to document request inputs.&lt;/p&gt;
</description>
        
          <description>&lt;p&gt;At Drivy, we have an internal API to communicate with our native apps available on both iOS and Android.
One of the main pain point we experienced is documentation.&lt;/p&gt;
</description>
        
        <pubDate>Tue, 23 Jan 2018 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/api-documentation/</link>
        <guid isPermaLink="true">https://getaround.tech/api-documentation/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Pro tips for productivity</title>
        <dc:creator>Emily Fiennes</dc:creator>
        <description>&lt;p&gt;Every 2 weeks we hold Tech Talks here at Drivy. These are an opportunity for our now 17-strong team of developers to gather for 1 hour in a non-squad setting. The Tech Talks are emphatically not about tackling issues or solving problems, but are instead an opportunity to explore new ideas, ask questions, or to return to discussions started in a different context.&lt;/p&gt;

&lt;p&gt;As a recent new hire to Drivy in a junior capacity, I quickly recognised that the Tech Talks were going to be a valuable addition to my onboarding experience. Any junior, joining an established tech team with rigorous working practices in place, will likely feel daunted as I did. One way I combatted this was by trying to learn as much from my colleagues as possible.&lt;/p&gt;

&lt;p&gt;Imagine my glee then, when during a recent edition of the Tech Talks, we were invited to share our productivity tips 🎁. I’ve rounded up a selection of the tips and tricks that were shared, which covered a broad range of topics including Git, shell config and debugging. These tips may be highly valuable to other juniors out there - or indeed anyone looking to streamline their personal working practices. Plus it’s really interesting — and reassuring — to take a step back and see that everyone has their own way of working.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; these are tips that were shared by members of the dev team at Drivy. Many of the points have themselves been sifted from the Internet - no point reinventing the wheel as they say, especially when you’re aiming to move fast and break things 😉.&lt;/p&gt;

&lt;h2 id=&quot;git&quot;&gt;Git&lt;/h2&gt;

&lt;h3 id=&quot;force-with-lease&quot;&gt;force-with-lease&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/_renaudb&quot;&gt;Renaud&lt;/a&gt; reminded us that the standard&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;overwrites the remote branch with your local branch, thereby potentially overwriting any work that may have been built on top of your original remote branch. The alternative is to&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;force&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lease&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;which affords more flexibility: if any new commits have been added to the remote branch in the meantime, the force-with-lease option will not update the remote branch.&lt;/p&gt;

&lt;p&gt;To quote the &lt;a href=&quot;https://git-scm.com/docs/git-push&quot;&gt;documentation&lt;/a&gt;, ‘it is like taking a “lease” on the ref without specifically locking it, and the remote ref is updated only if the “lease” is still valid’. This is important if it’s possible that another team member has checked out your branch locally and continued working on it.&lt;/p&gt;

&lt;h3 id=&quot;git_dig&quot;&gt;git_dig&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/nicoolas25&quot;&gt;Nico&lt;/a&gt; has the following in his .bashrc file&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;git_dig&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pretty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:'%Cred%h%Creset - %Cgreen(%ad)%Creset - %s %C(bold blue)&amp;lt;%an&amp;gt;%Creset'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abbrev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$1&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$2&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With the following command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;git_dig&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rental_agreement&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;he can subsequently see all commits that contain the string &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rental_agreement&lt;/code&gt; in their diff, whether those commits have been deleted or not. Sometimes you might want to find dead code, or to see the evolution over time of a given method.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/posts/2018-1-16-productivity-pro-tips-highlights/git_dig_nicolas.gif&quot; alt=&quot;git_dig gif&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;octobox-for-github-notifications&quot;&gt;Octobox for GitHub notifications&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Nico&lt;/em&gt; also shared this tool with us, to help keep on top of GitHub notifications in your inbox. &lt;a href=&quot;https://octobox.io/&quot;&gt;Octobox&lt;/a&gt; ‘adds an extra “archived” state to each notification so that you can mark it as done.’ Plus, if any new activity occurs on an archived item, it is moved back to your inbox so it won’t get forgotten.&lt;/p&gt;

&lt;h2 id=&quot;aliases&quot;&gt;Aliases&lt;/h2&gt;

&lt;p&gt;Aliases were a new discovery for me, right on Day One of my Drivy adventure. There just wasn’t time to cover this kind of setup in depth at &lt;a href=&quot;https://www.lewagon.com/&quot;&gt;Le Wagon&lt;/a&gt;, the 9-week intensive bootcamp where I started to code.&lt;/p&gt;

&lt;p&gt;So, for anyone who is in the dark as I was, an alias basically lets you abbreviate a system command or add default arguments to a command you use regularly. For example, to start up the server or to drop and recreate the database, you can create a shorter alias. You write them in the config file of whatever framework you are using for managing your z-shell config (usually &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.zshrc&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.zshenv&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Here’s a quick tour of some of the useful ones that came up. This can give you an idea of how you might use aliases, although of course you’ll need to customise for your own setup and tools:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To start or restart the server, or open your CI:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dstart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'foreman start -f Procfile.dev'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drestart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'pgrep unicorn | xargs kill - USR2'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'open https://circleci.com/gh/drivy/drivy-rails'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/TimPetricola&quot;&gt;Tim&lt;/a&gt; suggested the following to quickly migrate and rollback:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rdm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'rake db:migrate &amp;amp;&amp;amp; rake db:rollback &amp;amp;&amp;amp; rake db:migrate'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Drivy operates in 6 countries, so there’s a lot of country-specific config. &lt;a href=&quot;https://twitter.com/jeanquetil&quot;&gt;Jean&lt;/a&gt; suggested the following alias to quickly open all country files for editing in Sublime:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;countries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'subl lib/drivy/countries/*.rb'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/RomainGuefveneu&quot;&gt;Romain&lt;/a&gt; showed how to set aliases for various workspaces:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'cd ~Workspaces/drivy-rails'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;da&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'cd ~Workspaces/drivy-android'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;di&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'cd ~/Workspace/drivy-ios'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'~/Workspaces/drivy-android/scripts/write_device_hosts'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/mickeyben&quot;&gt;Mike&lt;/a&gt; uses the following aliases. The first asks for confirmation before file deletion. The second searches your code for any ‘TO DO’ or a ‘FIX ME’ left as a note-to-self awaiting action.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'rm -i'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;todos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ack -n --nogroup '(TODO|XXX|FIX(ME)?):'&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Whatever aliases you choose to set, remember to commit the file somewhere!&lt;/p&gt;

&lt;h2 id=&quot;git-aliases&quot;&gt;Git aliases&lt;/h2&gt;

&lt;p&gt;Git aliases go in the global .gitconfig file, and can save you time and effort on regularly used commands. The following were suggested by &lt;em&gt;Christophe&lt;/em&gt; and &lt;em&gt;Romain&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;co&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;checkout&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ci&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;br&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;branch&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;di&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;lg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pretty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abbrev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Plus, less typing means less chance of making a mistake 😇.&lt;/p&gt;

&lt;h2 id=&quot;plugins&quot;&gt;Plugins&lt;/h2&gt;

&lt;h3 id=&quot;the-fuck&quot;&gt;The Fuck&lt;/h3&gt;

&lt;p&gt;If you do make mistakes often though, &lt;a href=&quot;https://twitter.com/Intrepidd&quot;&gt;Adrien&lt;/a&gt; has a remedy.&lt;a href=&quot;https://github.com/nvbn/thefuck&quot;&gt;The Fuck&lt;/a&gt; can be installed via Homebrew and is, in their own words, ‘a magnificent app which corrects your previous console command’.&lt;/p&gt;

&lt;p&gt;It tries to match mis-spelled commands, and then create a new command using the matched rule like so:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/posts/2018-1-16-productivity-pro-tips-highlights/the_fuck_adrien.png&quot; alt=&quot;The Fuck&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;bitbar-mike&quot;&gt;BitBar (Mike)&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Mike&lt;/em&gt; recommended &lt;a href=&quot;https://github.com/matryer/bitbar&quot;&gt;BitBar&lt;/a&gt; to us, for putting the output from any script or program directly in your menu bar. You can either browse their plugins, or write your own if you’ve got what it takes 💪.&lt;/p&gt;

&lt;p&gt;He uses it to be able to easily check the status of external tools, or to stop and and start Homebrew services, like so:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/posts/2018-1-16-productivity-pro-tips-highlights/bitbar_mike.png&quot; alt=&quot;Bitbar&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;sublime-plugins&quot;&gt;Sublime plugins&lt;/h2&gt;

&lt;p&gt;A real medley of text-editor plugins were mentioned. Some useful ones for Sublime were:&lt;/p&gt;

&lt;h3 id=&quot;click-to-partial&quot;&gt;Click to Partial&lt;/h3&gt;

&lt;p&gt;With &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;⌘ + shift + click&lt;/code&gt; on a Rails partial path, you can open that file in a new tab, as explained by &lt;em&gt;Adrien&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/posts/2018-1-16-productivity-pro-tips-highlights/click_to_partial_adrien.gif&quot; alt=&quot;Click to Partial&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;trailing-spaces&quot;&gt;Trailing Spaces&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Jean&lt;/em&gt; recommended &lt;a href=&quot;https://github.com/SublimeText/TrailingSpaces&quot;&gt;Trailing Spaces&lt;/a&gt;. This plugin lets you highlight and delete any redundant trailing spaces in your code, either automatically upon saving or by hand at any time.&lt;/p&gt;

&lt;h3 id=&quot;brackethighlighter&quot;&gt;BracketHighlighter&lt;/h3&gt;

&lt;p&gt;Another handy Sublime plugin is &lt;a href=&quot;https://github.com/facelessuser/BracketHighlighter&quot;&gt;BracketHighlighter&lt;/a&gt;. It will match a variety of brackets, helping you to avoid unclosed or unmatched brackets. It too is fully customizable.&lt;/p&gt;

&lt;h2 id=&quot;debugging&quot;&gt;Debugging&lt;/h2&gt;

&lt;p&gt;Lastly, a quick word on debugging. We use &lt;a href=&quot;https://github.com/Mon-Ouie/pry-remote&quot;&gt;pry_remote&lt;/a&gt; for debugging at Drivy, because running our processes on &lt;a href=&quot;https://www.theforeman.org/&quot;&gt;Foreman&lt;/a&gt; means we can’t interact with a regular Pry session.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Jean&lt;/em&gt; reminded us that when pry hits its breakpoint,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;can be used in the pry console as a shortcut for&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;whereami&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Adrien&lt;/em&gt; shared a tip for pry_remote too. You can call:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;on an object within the pry console, and get a list of associated methods:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/posts/2018-1-16-productivity-pro-tips-highlights/pry_ls_adrien.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This has just been a sample of the points touched upon, and of course there were other, more sophisticated ideas too - beyond the scope of a junior. But if there’s one thing that emerged from the veritable smörgåsbord of tips and tricks shared, it’s that there is no one standardized way of working. Joining an established tech team in a junior capacity can be very overwhelming, so it can be reassuring to remember that sometimes.&lt;/p&gt;
</description>
        
          <description>&lt;p&gt;Every 2 weeks we hold Tech Talks here at Drivy. These are an opportunity for our now 17-strong team of developers to gather for 1 hour in a non-squad setting. The Tech Talks are emphatically not about tackling issues or solving problems, but are instead an opportunity to explore new ideas, ask questions, or to return to discussions started in a different context.&lt;/p&gt;
</description>
        
        <pubDate>Tue, 16 Jan 2018 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/productivity-pro-tips-highlights/</link>
        <guid isPermaLink="true">https://getaround.tech/productivity-pro-tips-highlights/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Highlights from the 2017 dotJS</title>
        <dc:creator>Victor Mours</dc:creator>
        <description>&lt;p&gt;&lt;img src=&quot;../assets/posts/2018-01-11-highlights-from-dotjs/dotjs-marcy-sutton.jpg&quot; alt=&quot;Marcy Sutton speaking at the 2017 dotJS&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Last month was the dotJS conference in Paris, which we attended, along with some 1400 developers from all over the world. As you could expect, the speakers were stellar. Some talks made us want to ponder our assumptions about how we write JavaScript and come to a more elevated understanding of our front-end ways, and some of them made us want to grab the nearest keyboard and tinker frantically with WebAssembly, TypeScript, or WebGL.&lt;/p&gt;

&lt;p&gt;If you don’t have a full day of free time ahead of you to watch all the talks, here are some highlights of the ones we recommend checking out first.&lt;/p&gt;

&lt;h1 id=&quot;wes-bos---async--await&quot;&gt;&lt;a href=&quot;https://www.dotconferences.com/2017/12/wes-bos-async-await&quot;&gt;Wes Bos - Async &amp;amp; Await&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;If you haven’t had time to play with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;await&lt;/code&gt;, you could take a look at the documentation by yourself, or you could just kick back, relax, and let Wes Bos do the explaining. He lays out really nicely how you can simplify your code when you’re chaining synchronous promises, and how to handle errors in this case.&lt;/p&gt;

&lt;p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/9YkUCxvaLEk?showinfo=0&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1 id=&quot;trent-willis---working-well-the-future-of-web-testing&quot;&gt;Trent Willis - Working Well: The Future of Web Testing&lt;/h1&gt;

&lt;p&gt;Trent’s talk explores the consequences of the arrival of Headless Chrome in our testing toolkit.
Chrome headless now comes with Puppeteer, an API for controlling the browser and its DevTools, which makes for a much better developer experience than the old school Selenium-driven scripts.&lt;/p&gt;

&lt;p&gt;Along with the DevTool profiler and the accessibility testing library &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axe-core&lt;/code&gt;, these open up the possibility of a shift of what we expect from our tests. We can now go from “does this code work?” to “how well does this code work?”. This allows a more nuanced, yet measurable way of seeing our code.&lt;/p&gt;

&lt;p&gt;I think what really lies beyond this is the topic of code metrics. While we have a fairly established way of taking code validity into account in the standard development workflow - either the test suite runs a green build and the code can be merged, or it is red and must be fixed before merging - there doesn’t seem to be a standard way of taking code quality metrics into account.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/posts/2018-01-11-highlights-from-dotjs/dotjs-trent-willis.jpg&quot; alt=&quot;Trent Willis speaking at the 2017 dotJS&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One way some teams deal with this is to consider the build to be green if it improves code quality metrics overall, and red if it doesn’t. But that process can break down easily. What if a change to the codebase were to considerably improve accessibility, while degrading performance a bit?&lt;/p&gt;

&lt;p&gt;Would it be acceptable to merge it? Obviously the answer is “It depends”. If we want to make informed decisions based on code quality, we should also be considering other factors that are harder to measure, such as code readability and maintainability.&lt;/p&gt;

&lt;p&gt;I feel like these are still open problems, and I’m excited to see what comes out of the more widespread use of these tools in the years to come.&lt;/p&gt;

&lt;p&gt;The video of the talk is not online yet, but &lt;a href=&quot;https://pretty-okay.com/2017/12/04/qunit-in-browser&quot;&gt;this article&lt;/a&gt; from Trent’s blog is worth a read.&lt;/p&gt;

&lt;h1 id=&quot;adrian-holovaty---a-framework-authors-case-against-frameworks&quot;&gt;&lt;a href=&quot;https://www.dotconferences.com/2017/12/adrian-holovaty-a-framework-author-case-against-frameworks&quot;&gt;Adrian Holovaty - A framework author’s case against frameworks&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;As we’re all three node packages away from irrecoverable JavaScript fatigue, this was one of the most refreshing talks of the conference.
Adrian gave us a solid reminder that we may want to chill out about keeping up with every framework out there,
maybe focus a bit more on the patterns than on the frameworks, and take it easy. He’s building &lt;a href=&quot;https://www.soundslice.com/&quot;&gt;Soundslice&lt;/a&gt; in plain vanilla JavaScript, and it’s an impressive app, so he’s probably got a fair point.&lt;/p&gt;

&lt;p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/VvOsegaN9Wk?showinfo=0&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1 id=&quot;and-if-youve-still-got-time-check-these-out&quot;&gt;…And if you’ve still got time, check these out:&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.dotconferences.com/2017/12/feross-aboukhadijeh-the-most-annoying-website&quot;&gt;Feross Aboukhadijeh&lt;/a&gt; built the best annoying website to send to spammers. And it’s hilarious.&lt;/li&gt;
  &lt;li&gt;Suz Hinton told an inspiring story about the design of the accessibility icon. The video is not yet available, but in the meantime, I encourage you to find out more &lt;a href=&quot;http://accessibleicon.org&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
        
          <description>&lt;p&gt;&lt;img src=&quot;../assets/posts/2018-01-11-highlights-from-dotjs/dotjs-marcy-sutton.jpg&quot; alt=&quot;Marcy Sutton speaking at the 2017 dotJS&quot; /&gt;&lt;/p&gt;
</description>
        
        <pubDate>Thu, 11 Jan 2018 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/highlights-from-dotjs/</link>
        <guid isPermaLink="true">https://getaround.tech/highlights-from-dotjs/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>dotCSS 2017 hightlights</title>
        <dc:creator>Jean Anquetil</dc:creator>
        <description>&lt;p&gt;dotCSS is the largest CSS conference in Europe. The 2017 edition occurred late November in Paris and it was a great opportunity to exchange and learn from the community. As you can play back the talks on the &lt;a href=&quot;https://www.dotconferences.com/talks&quot;&gt;dotConferences&lt;/a&gt; website, this post won’t dive into the details of all the conferences, this is a digest of what what was most interesting for us.&lt;/p&gt;

&lt;h2 id=&quot;a-search-engine-built-with-css-only&quot;&gt;A search engine built with CSS only&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/pixelastic&quot;&gt;Tim Carry&lt;/a&gt; from &lt;a href=&quot;https://blog.algolia.com/real-demo-fake-css-api-client/&quot;&gt;Algolia&lt;/a&gt; told us how he built a search engine with CSS only. It uses the power of selectors, as the language is super powerful at targeting elements in the HTML and applying style to them.&lt;/p&gt;

&lt;p&gt;The search bar is a simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;input&lt;/code&gt; tag which has a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value&lt;/code&gt; attribute. Thus, a CSS selector will be able to match this input when it has a specific value.&lt;/p&gt;

&lt;p&gt;Actually the search engine cheats somewhat, as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value&lt;/code&gt; attribute has to be updated each time something is typed with a JavaScript statement. But this is the only line of JS to make it work 🙂&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.dotconferences.com/2017/11/tim-carry-building-a-search-engine-in-css&quot;&gt;Link to the talk&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-grid-css-property&quot;&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grid&lt;/code&gt; CSS property&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/bdc&quot;&gt;Benjamin De Cock&lt;/a&gt; from Stripe showed us how cool the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grid&lt;/code&gt; CSS property is. This property is mainly used by Stripe on their website’s backgrounds and often combined with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;skewY&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;Quickly, here’s how it works: the grid area is made of multiple span tags where each one can receive a specific style. In comparison, Flexbox is great when working on a single axis but grids are easier to deal with on two axes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/posts/2017-12-21-dot-css-conference-highlights/drivy_grid.png&quot; alt=&quot;Drivy Homepage&quot; /&gt;
&lt;em&gt;We are also using a grid on the Drivy homepage&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately the browser support is not that good yet: depending on your target audience, decide if you need a fallback style or if it is reasonable to drop support for older browsers. Anyway using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grid&lt;/code&gt; CSS property with simple rules gives a bunch of possibilities.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.dotconferences.com/2017/11/benjamin-de-cock-css-grid-in-production&quot;&gt;Link to the talk&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;write-less-css&quot;&gt;Write less CSS&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/akdetrick&quot;&gt;Adam Detrick&lt;/a&gt;, Web Engineer &amp;amp; Design Systems Lead at Meetup talked about the difficulty of maintaining a sustainable style codebase.&lt;/p&gt;

&lt;p&gt;He explained that as reading CSS is too complicated we are used to writing new components and to adding new styles. We should write less of it and break the vicious circle by framing the problem correctly and thinking more about the developer experience.&lt;/p&gt;

&lt;p&gt;For instance, he mentioned that using these kinds of utility classes could be a step in the right direction:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;at[breakpoint]_[property]--[variant]&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;These are small sharp tools&lt;/li&gt;
  &lt;li&gt;You style by memory, these classes are easy to understand and to remember&lt;/li&gt;
  &lt;li&gt;This leads to a quick implementation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An example would be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;atLarge_align--center&lt;/code&gt; where the text inherits the default left alignment but at large viewports the text is centered.&lt;/p&gt;

&lt;p&gt;Finally he also mentionned the fact that the documentation should be kept as close to the code as possible. In this way, using a documentation generator could be useful.&lt;/p&gt;

&lt;h1 id=&quot;media-queries-level-4&quot;&gt;Media queries level 4&lt;/h1&gt;

&lt;p&gt;Member of the CSS Working Group, &lt;a href=&quot;https://twitter.com/frivoal&quot;&gt;Florian Rivoal&lt;/a&gt; presented the Media Queries Level 4 which offers some syntax improvements regarding the range, the boolean logic and shortcuts.&lt;/p&gt;

&lt;p&gt;He also explained that using Media Types is not a good idea anymore. For instance, using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@media screen {...}&lt;/code&gt; goes for a smartphone, a TV screen, a laptop… Perhaps we want different behaviors on each ones: using Media Features we could match with a precise device such as a Wii, a phone, a e-ink media and so on.&lt;/p&gt;

&lt;p&gt;Finally, he gave us some best practices.&lt;/p&gt;

&lt;p&gt;Don’t:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;use wrong media features as proxy,&lt;/li&gt;
  &lt;li&gt;set breakpoints based on popular devices,&lt;/li&gt;
  &lt;li&gt;try not to be too specific,&lt;/li&gt;
  &lt;li&gt;use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;px&lt;/code&gt; to define size.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Do:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;try not to use Media Queries that much, there is Flexbox, grid, etc,&lt;/li&gt;
  &lt;li&gt;use all tools in the box,&lt;/li&gt;
  &lt;li&gt;set breakpoints for where your design would break,&lt;/li&gt;
  &lt;li&gt;use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;em&lt;/code&gt; to  define size.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://www.dotconferences.com/2017/11/florian-rivoal-media-queries-4&quot;&gt;Link to the talk&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;typography---axis-praxis&quot;&gt;Typography - Axis-Praxis&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/Lorp&quot;&gt;Laurence Penney&lt;/a&gt; created Axis-Praxis which is an environment for playing with Variable Fonts.&lt;/p&gt;

&lt;p&gt;You choose fonts then you can adjust sliders and play with precise settings on the variations axes built into them. It relies on the font-variation-settings CSS property and this lets us experiment what the future of Variable Fonts may be.&lt;/p&gt;

&lt;p&gt;Check it out on &lt;a href=&quot;http://www.axis-praxis.org/&quot;&gt;Axis-Praxis.org&lt;/a&gt; 😉&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.dotconferences.com/2017/11/laurence-penney-variable-fonts&quot;&gt;Link to the talk&lt;/a&gt;&lt;/p&gt;
</description>
        
          <description>&lt;p&gt;dotCSS is the largest CSS conference in Europe. The 2017 edition occurred late November in Paris and it was a great opportunity to exchange and learn from the community. As you can play back the talks on the &lt;a href=&quot;https://www.dotconferences.com/talks&quot;&gt;dotConferences&lt;/a&gt; website, this post won’t dive into the details of all the conferences, this is a digest of what what was most interesting for us.&lt;/p&gt;
</description>
        
        <pubDate>Thu, 21 Dec 2017 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/dot-css-conference-highlights/</link>
        <guid isPermaLink="true">https://getaround.tech/dot-css-conference-highlights/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Embulk: move easily data across datasources</title>
        <dc:creator>Antoine Augusti</dc:creator>
        <description>&lt;p&gt;At Drivy, we heavily use &lt;a href=&quot;http://www.embulk.org/docs/&quot;&gt;Embulk&lt;/a&gt; for our data needs. Embulk is an &lt;a href=&quot;https://github.com/embulk/embulk&quot;&gt;open-source&lt;/a&gt; data loader that helps data transfer between various databases, storages, file formats, and cloud services. It can automatically guess file formats, distribute execution to deal with big datasets, offers transactions, can resume stuck tasks and is modular thanks to plugins.&lt;/p&gt;

&lt;p&gt;Embulk is written in JRuby and the configuration is specified in YAML. You then execute Embulk configuration files through the command line. It’s possible to inject environment variables and other configuration files can be embedded thanks to the &lt;a href=&quot;https://shopify.github.io/liquid/&quot;&gt;Liquid template engine&lt;/a&gt;.&lt;/p&gt;

&lt;figure&gt;
  &lt;img alt=&quot;Embulk architecture&quot; src=&quot;/assets/posts/embulk/architecture.png&quot; /&gt;
  &lt;figcaption&gt;
    Overview of Embulk's architecture and its various components
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The available components are the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Input: specify where the data is coming from (MySQL, AWS S3, Jira, Mixpanel etc.)&lt;/li&gt;
  &lt;li&gt;Output: specify the destination of the data (BigQuery, Vertica, Redshift, CSV etc.)&lt;/li&gt;
  &lt;li&gt;File parser: to parse specific input files (JSON, Excel, Avro, XML etc.)&lt;/li&gt;
  &lt;li&gt;File decoder: to deal with compressed files&lt;/li&gt;
  &lt;li&gt;File formatter: to format specific output files (similar to parsers)&lt;/li&gt;
  &lt;li&gt;Filter: to keep only some rows from the input&lt;/li&gt;
  &lt;li&gt;File encoder: to compress output file (similar to decoders)&lt;/li&gt;
  &lt;li&gt;Executor: where do Embulk task are executed (locally or Hadoop)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The plugins &lt;a href=&quot;http://www.embulk.org/plugins/&quot;&gt;are listed on the Embulk website&lt;/a&gt; and are usually available on GitHub. If needed, you can &lt;a href=&quot;http://www.embulk.org/docs/customization.html#creating-plugins&quot;&gt;write your own plugin&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;usage-at-drivy&quot;&gt;Usage at Drivy&lt;/h2&gt;
&lt;p&gt;At Drivy, we currently have a bit less than 150 Embulk configuration files and we perform nearly 1,200 Embulk tasks everyday for our ETL needs running on &lt;a href=&quot;https://airflow.apache.org/&quot;&gt;Apache Airflow&lt;/a&gt;. Our main usage is to replicate tables coming from MySQL to Amazon Redshift, our data warehouse.&lt;/p&gt;

&lt;h3 id=&quot;from-mysql-to-redshift&quot;&gt;From MySQL to Redshift&lt;/h3&gt;
&lt;p&gt;For example, here is the Embulk configuration file we use to pull data about push notifications from MySQL to Redshift, incrementally.&lt;/p&gt;

&lt;p&gt;This is stored in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;push_notifications.yml.liquid&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;include 'datasources/in_mysql_read_only' %&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;push_notifications&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;incremental&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;incremental_columns&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;updated_at&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;include 'datasources/out_redshift' %&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;push_notifications&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;merge&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;merge_keys&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This short configuration file uses powerful concepts. First, it leverages &lt;a href=&quot;https://github.com/embulk/embulk-input-jdbc/tree/master/embulk-input-mysql#incremental-loading&quot;&gt;incremental loading&lt;/a&gt; to load records inserted (or updated) after the latest execution. In our case, we will load or update records according to the value of the latest &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;updated_at&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; columns. Records will be merged according to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; column, which is a primary key. Secondly, we use the Liquid template engine to pull two partials. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;datasources/in_mysql_read_only&lt;/code&gt; is used to specify the common MySQL configuration for the input mode and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;datasources/out_redshift&lt;/code&gt; is used to specify the Redshift configuration for the output mode.&lt;/p&gt;

&lt;p&gt;Here is what the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;datasources/out_redshift.yml.liquid&lt;/code&gt; looks like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redshift&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;env.REDSHIFT_HOST&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;}}&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;env.REDSHIFT_USER&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;}}&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;env.REDSHIFT_PASSWORD&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;}}&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;enable&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;env.REDSHIFT_DB&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;}}&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;aws_access_key_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;env.S3_ACCESS_KEY_ID&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;}}&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;aws_secret_access_key&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;env.S3_SECRET_ACCESS_KEY&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;}}&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;iam_user_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;env.S3_IAM_USER_NAME&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;}}&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;s3_bucket&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;env.S3_BUCKET&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;}}&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;s3_key_prefix&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;env.S3_KEY_PREFIX&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;}}&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;default_timezone&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;env.REDSHIFT_DEFAULT_TIMEZONE&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;}}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Basically, it describes how to connect to our Redshift cluster and it respects the format defined by the &lt;a href=&quot;https://github.com/embulk/embulk-output-jdbc/tree/master/embulk-output-redshift&quot;&gt;Redshift output plugin for Embulk&lt;/a&gt;. Note that we reference almost only environment variables that will be injected at runtime. This is used to keep secrets out of the codebase and gives us the ability to switch easily between several environments (production and staging for instance).&lt;/p&gt;

&lt;p&gt;Running the script is then as straightforward as executing the Bash command&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;embulk run push_notifications.yml.liquid &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; diffs/push_notifications.yml&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;after setting the required environment variables. Embulk will keep the last values for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;updated_at&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; columns in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;diffs/push_notifications.yml&lt;/code&gt; for future executions.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;diffs/push_notifications.yml&lt;/code&gt; file looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;last_record&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;2017-12-11T13:51:41.000000'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;11230196&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;from-a-csv-file-to-redshift&quot;&gt;From a CSV file to Redshift&lt;/h3&gt;
&lt;p&gt;Here is how we import CSV files into Redshift.&lt;/p&gt;

&lt;p&gt;Embulk ships with a CSV guesser, that can automatically build a configuration file from a CSV file.&lt;/p&gt;

&lt;p&gt;If we start from a sample configuration file like this one that we will write in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cr_agents.yml.liquid&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;file&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;path_prefix&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;env.EMBULK_PATH_PREFIX&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;}}&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;include 'datasources/out_redshift' %&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cr_agents&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;truncate_insert&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and by running the Bash command&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nv&quot;&gt;EMBULK_PATH_PREFIX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/tmp/agents.csv embulk guess cr_agents.yml.liquid&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Embulk will then generate the appropriate CSV boilerplate like this, after parsing our CSV file.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;file&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;path_prefix&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;env.EMBULK_PATH_PREFIX&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;}}&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;UTF-8&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;newline&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;CRLF&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;csv&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;delimiter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;,'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;quote&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;escape&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;null_string&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;NULL'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;trim_if_not_quoted&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;skip_header_lines&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;allow_extra_columns&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;allow_optional_columns&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;stop_on_invalid_record&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;drivy_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;zendesk_user_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;talkdesk_user_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;first_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;last_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;country&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;second_country&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;third_country&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fourth_country&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;is_drivy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;is_active&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;include 'datasources/out_redshift' %&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cr_agents&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;truncate_insert&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can then adjust manually the configuration for &lt;a href=&quot;http://www.embulk.org/docs/built-in.html#csv-parser-plugin&quot;&gt;the CSV parser&lt;/a&gt; if needed.&lt;/p&gt;

&lt;p&gt;Finally, we’re now ready to import our CSV file into Redshift. This can be done thanks to the Bash command&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nv&quot;&gt;EMBULK_PATH_PREFIX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/tmp/agents.csv embulk run cr_agents.yml.liquid&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Because we specified that we want to use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;truncate_insert&lt;/code&gt; mode for the output plugin, Embulk will delete first every record in the destination table &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cr_agents&lt;/code&gt; before inserting rows from the CSV file.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I hope you now have a quick grasp of what Embulk is and how it can speed up your data import and export tasks. With simple configuration files and a good plugin ecosystem, it is our go-to solution almost every time we need to perform data transfers in our ETL.&lt;/p&gt;

</description>
        
          <description>&lt;p&gt;At Drivy, we heavily use &lt;a href=&quot;http://www.embulk.org/docs/&quot;&gt;Embulk&lt;/a&gt; for our data needs. Embulk is an &lt;a href=&quot;https://github.com/embulk/embulk&quot;&gt;open-source&lt;/a&gt; data loader that helps data transfer between various databases, storages, file formats, and cloud services. It can automatically guess file formats, distribute execution to deal with big datasets, offers transactions, can resume stuck tasks and is modular thanks to plugins.&lt;/p&gt;

</description>
        
        <pubDate>Mon, 11 Dec 2017 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/embulk-data-transfer/</link>
        <guid isPermaLink="true">https://getaround.tech/embulk-data-transfer/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Sending an e-mail to millions of users</title>
        <dc:creator>Adrien Siami</dc:creator>
        <description>&lt;p&gt;Recently, we had to send an e-mail to all our active users. For cost reasons, we decided
to invest a bit of tech time and to go with transactional e-mails instead of using an
e-mail marketing platform.&lt;/p&gt;

&lt;p&gt;While it would certainly be quite straightforward for, say, hundreds or
even thousands of users, it starts to get a bit more complicated for larger user bases.&lt;/p&gt;

&lt;p&gt;In our case, we had to send the e-mail to ~1.5 million e-mail addresses.&lt;/p&gt;

&lt;p&gt;In this blog post, I’ll quickly explain why a standard approach is not acceptable
and go through the solution we chose.&lt;/p&gt;

&lt;h1 id=&quot;a-naive-solution&quot;&gt;A naive solution&lt;/h1&gt;

&lt;p&gt;Let’s implement a very naive way to send an e-mail to all our users. We’re going to create
a job that loops through all the users and enqueues an e-mail.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MassEmailJob&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationJob&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;queue_as&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:default&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Notifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;some_email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;deliver_later&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now let’s see what could go wrong.&lt;/p&gt;

&lt;h2 id=&quot;your-job-might-get-killed&quot;&gt;Your job might get killed&lt;/h2&gt;

&lt;p&gt;Looping through millions of users is not free and it will most likely take a fair amount
of time.&lt;/p&gt;

&lt;p&gt;During this time, you’re maybe going to deploy, restarting your job manager, and killing
your job. Now you don’t know which users have received the e-mail, and which have not yet.&lt;/p&gt;

&lt;p&gt;One easy fix would be to run the code outside of your job workers, maybe in a rake task,
but you have to make sure it won’t get killed, or that if it’s killed, you can resume
it without any issue.&lt;/p&gt;

&lt;h2 id=&quot;you-are-going-to-get-blacklisted-from-e-mail-providers&quot;&gt;You are going to get blacklisted from e-mail providers&lt;/h2&gt;

&lt;p&gt;E-mail providers don’t like spam. If you send thousands of e-mails from the same IP in a
short time, you’re guaranteed to get throttled or even blacklisted.&lt;/p&gt;

&lt;p&gt;Therefore, it is necessary to space out the e-mails a bit, for example, adding a 30s delay
every 100 e-mails.&lt;/p&gt;

&lt;h2 id=&quot;you-are-going-to-congest-your-job-queue&quot;&gt;You are going to congest your job queue&lt;/h2&gt;

&lt;p&gt;Every e-mail to be sent equals a job run in your job queue: if you enqueue millions of
jobs in the same queue you use for other operations, you’re going to create a lot of
congestion.&lt;/p&gt;

&lt;p&gt;Therefore, you’d probably want to have a special queue only for your sending with a
dedicated worker.&lt;/p&gt;

&lt;h1 id=&quot;our-solution&quot;&gt;Our solution&lt;/h1&gt;

&lt;p&gt;First, let’s list the requirements we had in mind:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We wanted to be able to enqueue as many or as few e-mails to be able to test
the water first (check deliverability, congestion) and then scale up&lt;/li&gt;
  &lt;li&gt;We wanted to easily be able to establish those users for whom we had scheduled an
email, and those users who were still waiting.&lt;/li&gt;
  &lt;li&gt;We had to be able to stop sending emails quickly in case something went wrong, and we
had to be able to resume it without losing data.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;redis-to-the-rescue&quot;&gt;Redis to the rescue&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://redis.io&quot;&gt;Redis&lt;/a&gt; is an amazing multi-purpose tool, it can be used for storing
short lived data such as cache, used as a session store, etc. It has a multitude of useful
data structures, the one we’re going to use today is the
&lt;a href=&quot;https://redis.io/commands#sorted_set&quot;&gt;Sorted Set&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A sorted set it a bit like a hash / dictionary / associative array. It contains a list
of values, and each of these values has a &lt;strong&gt;score&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Redis offers very useful functions to deal with sorted sets, let’s have a look at one in
particular.&lt;/p&gt;

&lt;h2 id=&quot;zrangebyscore&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ZRANGEBYSCORE&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://redis.io/commands/zrangebyscore&quot;&gt;This function&lt;/a&gt; returns a range of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt; elements
from the sorted set, with a score included between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;min&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max&lt;/code&gt;, can you see where
this is going? :)&lt;/p&gt;

&lt;p&gt;We’re going to store all our user ids in a sorted set, with a score of 0, and change that
score to 1 when we enqueue an e-mail for them.&lt;/p&gt;

&lt;p&gt;Then, it’s really easy to ask for any number of users for whom we haven’t enqueued the
e-mail, using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ZRANGEBYSCORE&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;building-the-sorted-set&quot;&gt;Building the sorted set&lt;/h2&gt;

&lt;p&gt;Let’s create a rake task to populate a sorted set with our user ids.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:populate_users_zset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:environment&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;no&quot;&gt;Redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;YOUR_CONFIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each_slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zadd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mass_email_user_ids'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here I’m using &lt;a href=&quot;https://redis.io/topics/transactions&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MULTI&lt;/code&gt;&lt;/a&gt; to add the user ids 100 by
100 to the set in transactions, to go easy on redis CPU.&lt;/p&gt;

&lt;p&gt;While this task may take quite some time, it is safe to re-launch if killed.&lt;/p&gt;

&lt;h2 id=&quot;enqueuing-a-number-of-e-mails-for-send&quot;&gt;Enqueuing a number of e-mails for send&lt;/h2&gt;

&lt;p&gt;Now that we have our sorted set, let’s write another task. This one will
pick a given number of user ids from the set and enqueue an e-mail for them, while spacing
out the sends in time a bit.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:send_email_batch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:batch_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:environment&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;YOUR_CONFIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zrangebyscore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mass_email_user_ids'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;limit: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;batch_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;seconds&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each_slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ids_slice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ids_slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Notifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;some_email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;deliver_later&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;wait: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zadd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mass_email_user_ids'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;xx: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;seconds&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here I get as many user ids as requested thanks to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ZRANGEBYSCORE&lt;/code&gt; and its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;limit&lt;/code&gt; option.
I then iterate over the ids and enqueue the jobs 100 by 100, while delaying the sending by
30 seconds each time.&lt;/p&gt;

&lt;p&gt;And that’s it! Thanks to this system you can gradually increase your e-mail batches while
keeping an eye on deliverability.&lt;/p&gt;

&lt;p&gt;Send 100 mails to test it out:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rake 'your_namespace:send_email_batch[100]'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Everything looks good ? Send 1000, then 10000, etc.&lt;/p&gt;

&lt;p&gt;Then it’s easy to know how many e-mails are left to be scheduled: just pop a redis console
and ask away using &lt;a href=&quot;https://redis.io/commands/zcount&quot;&gt;zcount&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Remaining e-mails to schedule:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ZCOUNT mass_email_user_ids 0 0&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;E-mails already scheduled or sent:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ZCOUNT mass_email_user_ids 1 1&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;cons&quot;&gt;Cons&lt;/h1&gt;
&lt;p&gt;Obviously there is no perfect solution, here are a few downsides:&lt;/p&gt;

&lt;h2 id=&quot;quite-a-few-manual-actions&quot;&gt;Quite a few manual actions&lt;/h2&gt;
&lt;p&gt;This is clearly not a fire and forget solution, it needs
the attention of a dev for a little bit of time: enqueuing the sends, monitoring, waiting
for a batch to finish and then send another one, etc.&lt;/p&gt;

&lt;p&gt;However, this kind of sending is usually rare but important, so having it done right
is worth the effort.&lt;/p&gt;

&lt;h2 id=&quot;stopping-the-machine-is-possible-but-at-a-cost&quot;&gt;Stopping the machine, is possible, but at a cost&lt;/h2&gt;
&lt;p&gt;If you enqueue a lot of small batches,
you’re going to be fine, but at some point you are going to enqueue batches of 100k
e-mails or even more.&lt;/p&gt;

&lt;p&gt;What if something goes wrong (deliverability dropping, etc) and you want to stop
everything to have a look? You would need to stop the dedicated worker but the jobs are
already enqueued, meaning that if you don’t resume for a long time, when starting over
the jobs are going to run without delay and you may experience congestion or throttling
from your e-mail provider.&lt;/p&gt;

&lt;p&gt;This is a risk we were willing to take and that we mitigated
with strong monitoring and cautious batching.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;This solution worked well for our needs, but as always, your mileage may vary!&lt;/p&gt;

&lt;p&gt;Sending millions of e-mails is tricky, but is an interesting problem to solve.
Thanks to a bit of custom dev and redis, we were able to send our e-mail in a reasonable
amount of time with excellent deliverability.&lt;/p&gt;
</description>
        
          <description>&lt;p&gt;Recently, we had to send an e-mail to all our active users. For cost reasons, we decided
to invest a bit of tech time and to go with transactional e-mails instead of using an
e-mail marketing platform.&lt;/p&gt;
</description>
        
        <pubDate>Mon, 20 Nov 2017 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/sending-mass-emails/</link>
        <guid isPermaLink="true">https://getaround.tech/sending-mass-emails/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Multi-currency support in Java</title>
        <dc:creator>Romain Guefveneu</dc:creator>
        <description>&lt;p&gt;For a few weeks, &lt;a href=&quot;https://www.drivy.co.uk&quot;&gt;Drivy&lt;/a&gt; has been available in the United-Kingdom. Unlike the others European countries where Drivy operates, the United-Kingdom uses a different currency: the pound (£). We had to make some changes in our Android apps to support this.&lt;/p&gt;

&lt;h1 id=&quot;server-side-or-client-side-formatting&quot;&gt;Server-side or Client-side Formatting?&lt;/h1&gt;

&lt;p&gt;At Drivy, formatting is generally done &lt;a href=&quot;https://drivy.engineering/api-driven-apps/&quot;&gt;server-side&lt;/a&gt;, we just display the values as they are:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/posts/2017-11-20-multi-currency-java/picks.png&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;Here, prices are formatted server-side, depending on the search place (London, so £), and the app’s locale (french).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But for some specific features we need client-side formatting, for instance an input field. Let’s dive into some Java APIs to see how they can help.&lt;/p&gt;

&lt;h1 id=&quot;formatting&quot;&gt;Formatting&lt;/h1&gt;

&lt;p&gt;First thing first, how to format a currency? The position of the currency symbol doesn’t depend on the currency itself, but on the country of the locale. That means we’ll display “1 234,50 GBP” in French, and “€1,234.50” in English:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;€&lt;/th&gt;
      &lt;th&gt;£&lt;/th&gt;
      &lt;th&gt;$&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;France&lt;/td&gt;
      &lt;td&gt;1 234,50 €&lt;/td&gt;
      &lt;td&gt;1 234,50 GBP&lt;/td&gt;
      &lt;td&gt;1 234,50 USD&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Switzerland&lt;/td&gt;
      &lt;td&gt;EUR 1’234.50&lt;/td&gt;
      &lt;td&gt;GBP 1’234.50&lt;/td&gt;
      &lt;td&gt;USD 1’234.50&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Italy&lt;/td&gt;
      &lt;td&gt;€ 1.234,50&lt;/td&gt;
      &lt;td&gt;GBP 1.234,50&lt;/td&gt;
      &lt;td&gt;USD 1.234,50&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;United-Kingdom&lt;/td&gt;
      &lt;td&gt;€1,234.50&lt;/td&gt;
      &lt;td&gt;£1,234.50&lt;/td&gt;
      &lt;td&gt;USD1,234.50&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;USA&lt;/td&gt;
      &lt;td&gt;EUR1,234.50&lt;/td&gt;
      &lt;td&gt;$1,234.50&lt;/td&gt;
      &lt;td&gt;$1,234.50&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;As you can see, the currency symbol is not always displayed. Since there are multiple currencies using the same symbol (e.g. United States dollar and Canadian dollar), we will instead display the currency code if there is any ambiguity (well, except for € in en_US 🤷‍).&lt;/p&gt;

&lt;p&gt;Alright, how do we do that in Java? Pretty simple:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;Locale&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;countryLocale&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Locale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;FRANCE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Locale&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currencyLocale&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Locale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;UK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;NumberFormat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currencyFormat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NumberFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCurrencyInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;countryLocale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Currency&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Currency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currencyLocale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;currencyFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCurrency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currencyFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1234.5f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//1 234,50 GBP&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If we dig a bit deeper, we can extract the format pattern:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;DecimalFormat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currencyFormat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DecimalFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NumberFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCurrencyInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Locale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;FRANCE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currencyFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toPattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//#,##0.00 ¤&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#,##0.00 ¤&lt;/code&gt; is the French currency format, and it doesn’t depend on any currency. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;¤&lt;/code&gt; is the &lt;a href=&quot;https://en.wikipedia.org/wiki/Currency_sign_(typography)&quot;&gt;currency symbol&lt;/a&gt; and behaves like a placeholder for the currency symbol or code.&lt;/p&gt;

&lt;h1 id=&quot;input-field&quot;&gt;Input field&lt;/h1&gt;

&lt;p&gt;Building our own currency input field is not very complicated. The main issue to solve is to know where to draw the currency symbol. Indeed, depending on the currency format, we have seen that the symbol can be either before the value or after the value. As we certainly don’t want to parse the format pattern, these four &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/text/DecimalFormat.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DecimalFormat&lt;/code&gt;&lt;/a&gt; methods will be useful:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getNegativePrefix()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getPositivePrefix()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getNegativeSuffix()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getPositiveSuffix()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are some interesting values:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;NegativePrefix&lt;/th&gt;
      &lt;th&gt;PositivePrefix&lt;/th&gt;
      &lt;th&gt;NegativeSuffix&lt;/th&gt;
      &lt;th&gt;PositiveSuffix&lt;/th&gt;
      &lt;th&gt;Example&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;France&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;€&lt;/td&gt;
      &lt;td&gt;€&lt;/td&gt;
      &lt;td&gt;-1 234,50 €&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Denmark&lt;/td&gt;
      &lt;td&gt;kr -&lt;/td&gt;
      &lt;td&gt;kr&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;kr -1.234,50&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Netherlands&lt;/td&gt;
      &lt;td&gt;€&lt;/td&gt;
      &lt;td&gt;€&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;€ 1.234,50-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;United-Kingdom&lt;/td&gt;
      &lt;td&gt;-£&lt;/td&gt;
      &lt;td&gt;£&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;-£1,234.50&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;USA&lt;/td&gt;
      &lt;td&gt;($&lt;/td&gt;
      &lt;td&gt;$&lt;/td&gt;
      &lt;td&gt;)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;($1,234.50)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Now all we have to do is to draw the prefix and postfix!&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;With the help of just a few provided APIs, we have seen that formatting a currency can be easy. So don’t try and format currencies by hand!&lt;/p&gt;
</description>
        
          <description>&lt;p&gt;For a few weeks, &lt;a href=&quot;https://www.drivy.co.uk&quot;&gt;Drivy&lt;/a&gt; has been available in the United-Kingdom. Unlike the others European countries where Drivy operates, the United-Kingdom uses a different currency: the pound (£). We had to make some changes in our Android apps to support this.&lt;/p&gt;
</description>
        
        <pubDate>Mon, 20 Nov 2017 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/multi-currency-java/</link>
        <guid isPermaLink="true">https://getaround.tech/multi-currency-java/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Data quality checkers</title>
        <dc:creator>Antoine Augusti</dc:creator>
        <description>&lt;p&gt;At Drivy, we store, process and analyse hundreds of gigabytes of data in our production systems and our data warehouse. Data is of utmost importance to us because it makes our marketplace run and we use it &lt;a href=&quot;https://drivy.engineering/from-member-voice-to-ux/&quot;&gt;to continuously improve our service&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Making sure that the data we store and use is what we expect is a challenge. We use multiple techniques to achieve this goal such as &lt;a href=&quot;https://drivy.engineering/code_simplicity_introduction/&quot;&gt;high standard coding practices&lt;/a&gt; or &lt;a href=&quot;https://drivy.engineering/best-practices-for-large-features/&quot;&gt;checker jobs&lt;/a&gt; we run on production data to make sure that our assumptions are respected.&lt;/p&gt;

&lt;h2 id=&quot;defining-data-quality&quot;&gt;Defining data quality&lt;/h2&gt;
&lt;p&gt;There are several research papers discussing the data quality dimensions as professionals have a hard time agreeing on the terminology. I found that &lt;a href=&quot;https://www.whitepapers.em360tech.com/wp-content/files_mf/1407250286DAMAUKDQDimensionsWhitePaperR37.pdf&quot;&gt;the article written by the DAMA UK Working Group&lt;/a&gt; successfully defines 6 key dimensions that I summarize as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Completeness&lt;/strong&gt;: are all data items recorded? If something is mandatory, 100% completeness will be achieved. Sampling data does not achieve completeness for example.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Consistency&lt;/strong&gt;: can we match the same data across data stores?&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Timeliness&lt;/strong&gt;: do we store data when the event occurred? For example, if we know that an event occurred 6 hours ago and we stored it only 1 hour ago, it could break a timeliness constraint.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Uniqueness&lt;/strong&gt;: do we have duplicate records? Nothing will be recorded more than once based upon how a record is identified.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Validity&lt;/strong&gt;: do we store data conforming to the syntax (format, type, range of values) of its definition? Storing a negative integer for a user’s age breaks the validity of the record for example.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Accuracy&lt;/strong&gt;: does the data describe the real-world? For example if a temperature sensor is malconfigured and reports wrong data points that are still within the accepted validity range, the data generated is not accurate.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example in a log database, uniqueness does not always need to be enforced. However, in another table aggregating these logs we might want to enforce the uniqueness dimension.&lt;/p&gt;

&lt;h2 id=&quot;data-quality-in-the-context-of-data-warehousing&quot;&gt;Data quality in the context of data warehousing&lt;/h2&gt;
&lt;p&gt;My main goal was to enforce a high quality of data in our data warehouse, which we fill with standard &lt;a href=&quot;https://en.wikipedia.org/wiki/Extract,_transform,_load&quot;&gt;ETL processes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For our web application, we already have checker jobs (we talked about this &lt;a href=&quot;https://drivy.engineering/best-practices-for-large-features/&quot;&gt;in this blog post&lt;/a&gt;) in the context of a monolith Rails application with MySQL databases. They are somewhat simpler: they run on a single database and check the quality of data we have control over because we wrote code to produce it. We can also afford to perform migrations or backfill in case we detect a corruption and want to fix the data.&lt;/p&gt;

&lt;p&gt;When working with ETL processes and in the end a data warehouse, we have different needs. The main issue we face is that we pull data from various databases, third parties, APIs, spreadsheets, unreliable FTPs connections etc. Unfortunately, we have little or no control over what we fetch or collect from these external systems. Working with external datasources is &lt;a href=&quot;https://marcgg.com/blog/2012/09/24/working-with-apis-facebook/&quot;&gt;a hard challenge&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We ingest raw data, we build aggregates and summaries, and we cross join data. Freshness depends on the source of the data and how we extract it.
We don’t want alerts on data that is already corrupted upstream (this point is debatable), but we want to know if an upstream datasource &lt;em&gt;gets&lt;/em&gt; corrupted. We usually want to compare datasets side by side (especially when pulling from another database) to make sure that the consistency dimension is respected.&lt;/p&gt;

&lt;p&gt;Overall, I find it hard to enforce a strict respect of all data quality dimensions with 100% confidence, as data we pull upstream will never fully respect what was advertised. Data quality checkers can help us in improving our data quality, make sure preconditions hold true and aim for better data quality in the long run.&lt;/p&gt;

&lt;h2 id=&quot;abstractions&quot;&gt;Abstractions&lt;/h2&gt;
&lt;p&gt;Now that we have a clearer idea about what data quality dimensions are and what we want to achieve, we can starting building something. My goal was to be able to perform checks to prove that data quality dimensions are respected. I had to come up with high-level abstractions to have a flexible library to work with and &lt;a href=&quot;https://www.researchgate.net/profile/Tarek_Mahmoud5/publication/287571065_Automated_ETL_Testing_on_the_Data_Quality_of_a_Data_Warehouse/links/5677a2b008ae0ad265c71a3e/Automated-ETL-Testing-on-the-Data-Quality-of-a-Data-Warehouse.pdf&quot;&gt;this research article&lt;/a&gt; helped me.&lt;/p&gt;

&lt;p&gt;My key components can be defined as follows:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Data quality checks are performed at a specified interval on one or multiple datasets that are coming from various datasources, using predicates we define. Checks have a tolerance and trigger alerts on alert destinations with an alert level defined by the severity of the found errors.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s define each word used here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Alert levels&lt;/strong&gt;: define how important the error is&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Alerters&lt;/strong&gt;: alert people or systems when errors are detected&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Checkers&lt;/strong&gt;: perform predicate checks on datasets&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Parsers&lt;/strong&gt;: create datasets from a source (parse a CSV file, read database records, call an API etc.)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tolerance levels&lt;/strong&gt;: tolerate some errors on a check (number, percentage, known broken points)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Escalation policies&lt;/strong&gt;: switch alert destination depending on alert level&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Logger&lt;/strong&gt;: logs failing datasets somewhere&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Clock&lt;/strong&gt;: defines when a checker should be executed&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Scheduler&lt;/strong&gt;: run checks when they are up for execution&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;checkers&quot;&gt;Checkers&lt;/h3&gt;
&lt;p&gt;Checkers are the most important components of the system. They actually perform the defined data quality checks on datasets. When implementing a new checker, you write a subclass from one of the abstract checkers supporting the core functionalities (extraction types, alert destinations, alert levels, logging etc.)&lt;/p&gt;

&lt;p&gt;Available checkers:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;PredicateSingleDatasetChecker&lt;/em&gt;: check that each element of the dataset respects a predicate&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;OffsetPredicateSingleDatasetChecker&lt;/em&gt;: given a predicate, an offset, check that two elements separated by the given offset respect the predicate. This is very useful to compare time records for example&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;PredicateDoubleDatasetsChecker&lt;/em&gt;: iterate on 2 datasets at the same time and check that the 2 records respect a predicate&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;scheduler&quot;&gt;Scheduler&lt;/h3&gt;
&lt;p&gt;We rely on &lt;a href=&quot;https://airflow.incubator.apache.org/&quot;&gt;Apache Airflow&lt;/a&gt; to specify, schedule and run our tasks for our data platform. We therefore created a pipeline putting together the data quality checks library with Airflow tasks and scheduling capabilities to easily run checks.&lt;/p&gt;

&lt;p&gt;The main pipeline is executed every 15 minutes. Each data-quality check is composed of 2 main tasks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a task with a &lt;a href=&quot;https://pythonhosted.org/airflow/code.html#airflow.operators.ShortCircuitOperator&quot;&gt;&lt;em&gt;ShortCircuitOperator&lt;/em&gt;&lt;/a&gt; which determines if the quality check needs to be executed now or not. If the quality check is not up for running, the second task is skipped&lt;/li&gt;
  &lt;li&gt;a task with a &lt;a href=&quot;https://pythonhosted.org/airflow/concepts.html#subdags&quot;&gt;&lt;em&gt;SubDagOperator&lt;/em&gt;&lt;/a&gt; to actually run the check: extract the dataset, run the checker and perform any alerting if needed.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
  &lt;img alt=&quot;Airflow DAG for data quality checks&quot; src=&quot;/assets/posts/data-quality/dags.png&quot; /&gt;
  &lt;figcaption&gt;
    Airflow directed acyclic graph in charge of running the various data quality checks
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
  &lt;img alt=&quot;Airflow subdag&quot; src=&quot;/assets/posts/data-quality/subdag.png&quot; /&gt;
  &lt;figcaption&gt;
    Airflow sub graph of a quality check running on two datasets side by side
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;alerts&quot;&gt;Alerts&lt;/h2&gt;
&lt;p&gt;When a check is executed and detects a malfunction, we get alerted. For now on we only use Slack, but there is room for other alerters such as text messages, PagerDuty or emails.&lt;/p&gt;

&lt;p&gt;When an alert triggers, we get to know what’s the alert, what’s the purpose of the associated check, how important the alert is with the number of falsy elements etc. Remember that alerts can have a certain level of tolerance - some errors can be tolerated - and different alert levels to help triage alerts. We get a quick view of data points which failed the check to have a rough idea about what’s going on, without jumping to the logs or looking immediately at the dataset.&lt;/p&gt;

&lt;figure&gt;
  &lt;img alt=&quot;Sample alert message on Slack&quot; src=&quot;/assets/posts/data-quality/alert.png&quot; /&gt;
  &lt;figcaption&gt;
    Sample alert message on Slack showing a breach of SLA for data freshness
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;If we need to investigate further, we can look at the logs in Airflow or inspect the raw dataset. We find it convenient to have alerts in Slack so that we can start threads explaining why an alert triggered and if we need to take actions.&lt;/p&gt;

&lt;h2 id=&quot;the-future&quot;&gt;The future&lt;/h2&gt;
&lt;p&gt;We’ve been using these data quality checks over the last 3 months and we’ve been really happy to have them. It makes us trust more our data, helps us detect issues or prove that assumptions are indeed always respected. It’s also a good opportunity to step up our data quality level: we can lower thresholds over time, review SLAs and put more pressure on the level of confidence we have in critical parts of our storage.&lt;/p&gt;

&lt;p&gt;For now, we plan to add more checkers (we have currently 20-30 checkers) to see if we’re happy with what we have, improve it and keep building on it.&lt;/p&gt;

&lt;h3 id=&quot;open-source&quot;&gt;Open source&lt;/h3&gt;
&lt;p&gt;We thought about open sourcing what we built, but we think that it’s a bit too soon and we want to gain more confidence before publishing it on GitHub.&lt;/p&gt;

&lt;h3 id=&quot;ideas-and-thoughts&quot;&gt;Ideas and thoughts&lt;/h3&gt;
&lt;p&gt;If data quality is of interest to you and you want to react to this blog post, I would be thrilled to hear from you! Reach out &lt;a href=&quot;https://twitter.com/AntoineAugusti&quot;&gt;on my Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;code-sample&quot;&gt;Code sample&lt;/h2&gt;
&lt;p&gt;To get an idea of what a data quality checker looks like, here is a sample quality check which checks if data is fresh enough for various tables in our data warehouse (Redshift). This class can easily be tested, to have automated tests proving that alerts trigger with specific datasets.&lt;/p&gt;

&lt;p&gt;This class is complete enough so that Airflow can know how to extract data from Redshift, transform and run the check automatically.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;datetime&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timedelta&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;data_quality.alert_levels&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FailingElementsThresholds&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;data_quality.checkers&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PredicateSingleDatasetChecker&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;data_quality.tolerances&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LessThan&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;data_quality_checks.base_checkers.base&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseQualityCheck&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;data_quality_checks.base_checkers.base&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DatasetTypes&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;data_quality_checks.base_checkers.base&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExtractionTypes&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;data_quality_checks.base_checkers.base&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ScheduleTypes&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DataFreshness&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseQualityCheck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Run a query on Redshift&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;EXTRACTION_TYPE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExtractionTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;REDSHIFT_QUERY&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Dataset can be parsed from a CSV&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DATASET_TYPE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DatasetTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CSV&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SCHEDULE_TYPE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ScheduleTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRON&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CRON_SCHEDULE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'20,50 7-22 * * *'&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alert_level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 0-2: warning&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 2-3: error&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# &amp;gt; 3: critical&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FailingElementsThresholds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tolerance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Get notified as soon as we have a single issue&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LessThan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Check that data is fresh enough in various tables'&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;checker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dummy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PredicateSingleDatasetChecker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;predicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dummy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;predicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;checker_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'last_update'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'table_name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dummy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;checker_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;freshness_targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FINANCE_TABLES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CORE_TABLES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NON_URGENT_TABLES&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tables&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iteritems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'table'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'target'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timedelta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hours&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)})&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;


    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;freshness_configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;targets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;freshness_targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;table_conf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;targets&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'table'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table_conf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;KeyError&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table_conf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;target_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;freshness_configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'target'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lag&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table_conf&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;freshness_targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'''&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;                SELECT&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;                    MAX(&quot;{col}&quot;) last_update,&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;                    '{table}' table_name&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;                FROM &quot;{table}&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;            '''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table_conf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'col'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'created_at'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table_conf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'table'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;the_query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;' UNION '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove_whitespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;the_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        
          <description>&lt;p&gt;At Drivy, we store, process and analyse hundreds of gigabytes of data in our production systems and our data warehouse. Data is of utmost importance to us because it makes our marketplace run and we use it &lt;a href=&quot;https://drivy.engineering/from-member-voice-to-ux/&quot;&gt;to continuously improve our service&lt;/a&gt;.&lt;/p&gt;

</description>
        
        <pubDate>Thu, 09 Nov 2017 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/data-quality/</link>
        <guid isPermaLink="true">https://getaround.tech/data-quality/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Sanitize your attributes through your form object</title>
        <dc:creator>Jean Anquetil</dc:creator>
        <description>&lt;p&gt;At Drivy, we use the &lt;a href=&quot;https://github.com/solnic/virtus&quot; target=&quot;_blank&quot;&gt;Virtus gem&lt;/a&gt; to build &lt;a href=&quot;https://robots.thoughtbot.com/activemodel-form-objects&quot; target=&quot;_blank&quot;&gt;form objects&lt;/a&gt; in our codebase. This lets us:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Keep our business logic out of the Controller and Views&lt;/li&gt;
  &lt;li&gt;Deal with unpersisted attributes&lt;/li&gt;
  &lt;li&gt;Add specific validations instead of adding them directly in the model&lt;/li&gt;
  &lt;li&gt;Display custom data validations errors directly in the form&lt;/li&gt;
  &lt;li&gt;Use features from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ActiveModel::Model&lt;/code&gt; by including it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sometimes, we have to sanitize user input: format the data, remove whitespaces and so on. Here is a convenient way to handle it with Virtus.&lt;/p&gt;

&lt;h1 id=&quot;using-coerce&quot;&gt;Using #coerce&lt;/h1&gt;

&lt;p&gt;Let’s imagine that we want to remove all the whitespaces from a VAT number recorded as a string. This is a pretty simple use case, but concepts will apply to more complex situation as well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2017-10-17-sanitize-your-attributes/form_field.png&quot; alt=&quot;User input&quot; /&gt;&lt;/p&gt;

&lt;p&gt;First we have to define a custom attribute object for the attribute we want to sanitize. It has to inherit from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Virtus::Attribute&lt;/code&gt; in order to use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;coerce&lt;/code&gt; method. Then, in this method, we just have to define the reformatting we want to perform.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SanitizedVatNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Virtus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Attribute&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;coerce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;respond_to?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/\s+/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next, in your Virtus form object, we specify the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vat_number&lt;/code&gt; attribute - the one we want to update - as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SanitizedVatNumber&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CompanyForm&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:vat_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SanitizedVatNumber&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And there we have it! The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vat_number&lt;/code&gt; will be sanitized once the form is submitted.&lt;/p&gt;

&lt;h1 id=&quot;testing-it-with-rspec&quot;&gt;Testing it with Rspec&lt;/h1&gt;

&lt;p&gt;It is also easy to add basic tests on this custom Virtus attribute, for instance by using Rspec:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SanitizedVatNumber&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;described_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;described_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;coerce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


  &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'when vat_number is nil'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'when vat_number has white spaces'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'EN XX 999 999 999'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ENXX999999999'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;You avoid giving too much responsibility to your form object, which would be the risk of sanitizing attributes directly inside the form. Plus, Virtus custom coercion can be reused across multiple forms, and lends itself well to be easily unit tested.&lt;/p&gt;
</description>
        
          <description>&lt;p&gt;At Drivy, we use the &lt;a href=&quot;https://github.com/solnic/virtus&quot; target=&quot;_blank&quot;&gt;Virtus gem&lt;/a&gt; to build &lt;a href=&quot;https://robots.thoughtbot.com/activemodel-form-objects&quot; target=&quot;_blank&quot;&gt;form objects&lt;/a&gt; in our codebase. This lets us:&lt;/p&gt;
</description>
        
        <pubDate>Tue, 17 Oct 2017 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/sanitize-your-attributes/</link>
        <guid isPermaLink="true">https://getaround.tech/sanitize-your-attributes/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Evolution Of Our Continuous Delivery Process</title>
        <dc:creator>Marc G Gauthier</dc:creator>
        <description>&lt;p&gt;We’ve always valued releasing quickly, as unreleased code is &lt;a href=&quot;https://en.wikipedia.org/wiki/Theory_of_constraints&quot;&gt;basically inventory&lt;/a&gt;. It slowly gathers dust and becomes outdated or costs time to be kept updated. Almost 3 years ago we published an article “&lt;a href=&quot;https://blog.drivy.com/2015/01/27/drivy-500/&quot;&gt;Drivy, version 500!&lt;/a&gt;” on our main blog, so I feel now is the time to get more into the details of how we accomplish pushing a lot of new versions of the app to production.&lt;/p&gt;

&lt;h2 id=&quot;our-different-iterations&quot;&gt;Our Different Iterations&lt;/h2&gt;

&lt;p&gt;As in most cases, we keep &lt;a href=&quot;https://en.wikipedia.org/wiki/Kaizen&quot;&gt;改善&lt;/a&gt; in mind and go for continuous improvement over one huge definitive solution straight away. We don’t try to build the perfectly automated system that handles all cases, when there are only 2 developers and no users. Probably obvious, but it’s something always worth repeating.&lt;/p&gt;

&lt;p&gt;In this article I’ll try to explain chronologically all the steps we went through over the course of 5 years, so as to showcase the evolution of our tools and processes. Of course if you want to see how we do it now, go straight to the last step… but it might already be outdated by the time you read this!&lt;/p&gt;

&lt;h3 id=&quot;adding-tests--releasing-manually&quot;&gt;Adding Tests &amp;amp; Releasing Manually&lt;/h3&gt;

&lt;p&gt;Drivy used to be in PHP, but for &lt;a href=&quot;https://blog.drivy.com/2013/03/22/au-revoir-php/&quot;&gt;various reasons&lt;/a&gt; we decided to move away from it and use Ruby on Rails. At this point we started creating automated tests for everything we were doing, and have kept adding to our test suite since then. This is very important because without automated tests, you will never be able to release often whilst avoiding major bugs.&lt;/p&gt;

&lt;figure&gt;
  &lt;img alt=&quot;First specs added in 2012&quot; src=&quot;/assets/posts/releasing/specs.jpg&quot; /&gt;
&lt;center&gt;&lt;small&gt;First specs added in 2012&lt;/small&gt;&lt;/center&gt;
&lt;/figure&gt;

&lt;p&gt;As far as pushing to production was concerned, we tended to basically do nothing about automation, and would just release manually after running to the specs on our machines. This was fine because we were not a lot of developers and therefore didn’t move too quickly, and there were not too many specs yet so the build was fast.&lt;/p&gt;

&lt;p&gt;Note that I don’t mention &lt;a href=&quot;http://capistranorb.com/&quot;&gt;Capistrano&lt;/a&gt; or similar tools. This is because we are hosted on Heroku, and they provide their own simple toolbelt for deployment. However, if we were not using this provider, I feel like the minimal first step would be setting up something like Capistrano.&lt;/p&gt;

&lt;h3 id=&quot;improved-process&quot;&gt;Improved Process&lt;/h3&gt;

&lt;p&gt;Quickly we developed a simple process loosely inspired by &lt;a href=&quot;https://en.wikipedia.org/wiki/Kanban&quot;&gt;Kanban&lt;/a&gt; and &lt;a href=&quot;http://marcgg.com/blog/2014/09/17/huboard-kanban-board-github/&quot;&gt;based on Github tags and Huboard&lt;/a&gt; to be able to visualize progress. This would allow us to quickly see if a given commit could be deployed or not, and therefore to release faster without the need for additional back and forth.&lt;/p&gt;

&lt;p&gt;To do so we started linking every commit to issues and used tags such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Backlog: This needs to be done eventually&lt;/li&gt;
  &lt;li&gt;Todo: This needs to be done soon&lt;/li&gt;
  &lt;li&gt;Going: Someone is currently working on it&lt;/li&gt;
  &lt;li&gt;On Staging: The ticket is mostly completed and is being tested on the staging environment&lt;/li&gt;
  &lt;li&gt;Ready For Prod: The ticket has been tested on staging and works as expected&lt;/li&gt;
  &lt;li&gt;On Prod: The ticket has been deployed to production&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Closing an issue would mean “the ticket has been proved to be successful in production, with no bugs or regressions of any kind”.&lt;/p&gt;

&lt;figure&gt;
  &lt;img alt=&quot;Huboard a few years ago&quot; src=&quot;/assets/posts/releasing/kanban.jpg&quot; /&gt;
&lt;center&gt;&lt;small&gt;Huboard a few years ago&lt;/small&gt;&lt;/center&gt;
&lt;/figure&gt;

&lt;p&gt;Since then we moved from Huboard to &lt;a href=&quot;https://waffle.io/&quot;&gt;waffle&lt;/a&gt; which was more stable and quicker, but there are tons of options out there nowadays including &lt;a href=&quot;https://www.zenhub.com/&quot;&gt;Zenhub&lt;/a&gt; or &lt;a href=&quot;https://help.github.com/articles/about-project-boards/&quot;&gt;Github project boards&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;note-on-documentation&quot;&gt;Note On Documentation&lt;/h4&gt;

&lt;p&gt;At this point we were already half a dozen developers and we needed simple ways to share information with newcomers. We started adding and maintaining more documentation on the important parts of the release process.&lt;/p&gt;

&lt;figure&gt;
  &lt;img alt=&quot;Documentation&quot; src=&quot;/assets/posts/releasing/doc.png&quot; /&gt;
&lt;center&gt;&lt;small&gt;Release documentation from the Drivy wiki&lt;/small&gt;&lt;/center&gt;
&lt;/figure&gt;

&lt;h4 id=&quot;getting-migrations-right&quot;&gt;Getting Migrations Right&lt;/h4&gt;

&lt;p&gt;Releasing code might also imply changing the database schema, which can get tricky. Rails makes it easier since it uses migrations, but we’ve added a couple of ground rules in order to be effective:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Never edit/remove a migration file that has been merged into master. Add new migrations instead.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Commit the migration file (and schema.rb) in its own commit if the migration needs to be done in two steps. There shouldn’t be other files in the commit. This makes it easier to do a zero-downtime deployment.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are a lot of articles and &lt;a href=&quot;https://github.com/soundcloud/lhm&quot;&gt;resources&lt;/a&gt; on how to do &lt;a href=&quot;http://jakeyesbeck.com/2016/02/07/how-to-remove-a-column-with-zero-downtime-in-ruby-on-rails/&quot;&gt;zero downtime deployments&lt;/a&gt;, so I won’t get into details here, but know that’s something required in order to ship fast.&lt;/p&gt;

&lt;h3 id=&quot;jenkins&quot;&gt;Jenkins&lt;/h3&gt;

&lt;p&gt;After a bit we added &lt;a href=&quot;https://jenkins.io/&quot;&gt;Jenkins&lt;/a&gt;, a continuous integration server. It would run on a spare mac mini in the open space. This was a good improvement because it would help make sure we always ran tests and that any red build would be noticed.&lt;/p&gt;

&lt;p&gt;Jenkins also had the great advantage of deploying to our staging environment right after a succesfull build.&lt;/p&gt;

&lt;h3 id=&quot;shell-deploy-script&quot;&gt;Shell Deploy Script&lt;/h3&gt;

&lt;p&gt;Since we already had a documented flow to release and a Jenkins server, it was only a matter of time until we could automate it. The thing that made us decide to automate was the fact that, with people joining the team, we were afraid that it would slow down releases and create larger and therefore riskier releases.&lt;/p&gt;

&lt;p&gt;To achieve this we created a simple shell script that could be run by Jenkins at the press of a button. It would go through all the documented steps to release, except automatically!&lt;/p&gt;

&lt;figure&gt;
  &lt;img alt=&quot;Release script&quot; src=&quot;/assets/posts/releasing/script.png&quot; /&gt;
&lt;center&gt;&lt;small&gt;Excerpt from the release script&lt;/small&gt;&lt;/center&gt;
&lt;/figure&gt;

&lt;p&gt;Note that all this time we would often look back at the data and see how we were doing in term of number of releases.&lt;/p&gt;

&lt;figure&gt;
  &lt;img alt=&quot;Releases&quot; src=&quot;/assets/posts/releasing/release_rythm.png&quot; /&gt;
&lt;center&gt;&lt;small&gt;Releases per day in 2014 using git logs and Excel&lt;/small&gt;&lt;/center&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;feature-flippers--soft-releases&quot;&gt;Feature Flippers &amp;amp; Soft Releases&lt;/h3&gt;

&lt;p&gt;Releasing quickly proved to be steadily improving the way we worked, and reduced the risk of bugs. However there were cases where we could not deploy to all users right away. To deal with this issue, we added a feature flipper feature  using the appropriately named &lt;a href=&quot;https://github.com/jnunemaker/flipper&quot;&gt;flipper gem&lt;/a&gt;.&lt;/p&gt;

&lt;figure&gt;
  &lt;img alt=&quot;Releases&quot; src=&quot;/assets/posts/releasing/flipper.png&quot; /&gt;
&lt;center&gt;&lt;small&gt;UI to decide how to make a feature available to our users&lt;/small&gt;&lt;/center&gt;
&lt;/figure&gt;

&lt;p&gt;This allowed us to release code that we didn’t intend to use right away, or that we wanted to offer only to a subset of users. It was a great way to decorrelate the “technical” release from the “product” release.&lt;/p&gt;

&lt;h3 id=&quot;circleci--the-drivy-cli&quot;&gt;CircleCI &amp;amp; the Drivy CLI&lt;/h3&gt;

&lt;h4 id=&quot;the-limits-of-jenkins&quot;&gt;The Limits of Jenkins&lt;/h4&gt;

&lt;p&gt;After a while with this setup, we started to see some limitations. We didn’t want to invest a lot of time managing Jenkins, but the machine would sometime go down, there would be random hardware issues and making sure to apply software updates were a pain.&lt;/p&gt;

&lt;p&gt;We decided not to invest more energy into Jenkins and instead move to a cloud solution. At this time &lt;a href=&quot;https://circleci.com/&quot;&gt;CircleCI&lt;/a&gt; looked like a great option. So after properly benchmarking all other competitors, we dropped Jenkins and started using CircleCI.&lt;/p&gt;

&lt;p&gt;CircleCI also provides additional functionalities out of the box. One particularly interesting feature is to add multiple containers in order to increase parallelization when running specs, thereby speeding up the test suite.&lt;/p&gt;

&lt;h4 id=&quot;adding-a-command-line-tool&quot;&gt;Adding a Command Line Tool&lt;/h4&gt;

&lt;p&gt;Since CircleCI didn’t provide a way to manually trigger a release, we had to build a bit of instrumentation and it took the form of a command line interface tool.&lt;/p&gt;

&lt;figure&gt;
  &lt;img alt=&quot;Releases&quot; src=&quot;/assets/posts/releasing/cli.png&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;This was fairly easy to develop using &lt;a href=&quot;https://github.com/mdub/clamp&quot;&gt;clamp&lt;/a&gt; and we integrated it as a gem in our project so that every developer could release easily.&lt;/p&gt;

&lt;h4 id=&quot;adding-more-developer-tools&quot;&gt;Adding More Developer Tools&lt;/h4&gt;

&lt;p&gt;When needed, we would build small tools like &lt;a href=&quot;https://github.com/watsonbox/chrome-github-shipit&quot;&gt;a chrome extension&lt;/a&gt; to be able to better visualize in github was was about to get released using a URL looking like this:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://github.com/ORG/REPO/compare/last_release...master&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;improving-bug-management&quot;&gt;Improving Bug Management&lt;/h3&gt;

&lt;p&gt;As we grew and shipped faster, we needed to make sure we weren’t introducing regressions. We were adding automated tests of course, but this doesn’t prevent every possible issue, so we improved the way we were monitoring and fixing bugs.&lt;/p&gt;

&lt;p&gt;If you’d like to know more about this, we actually have an entire article dedicated to it: &lt;a href=&quot;https://drivy.engineering/bug-management/&quot;&gt;Managing Bugs at Drivy&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;improving-the-cli&quot;&gt;Improving the CLI&lt;/h3&gt;

&lt;p&gt;As time passed we improved with a Slack integration for notifications, a GitHub integration for automatic updates on issues and much more.&lt;/p&gt;

&lt;figure&gt;
  &lt;img alt=&quot;Slack Integration&quot; src=&quot;/assets/posts/releasing/cli_slack.png&quot; /&gt;
&lt;/figure&gt;

&lt;figure&gt;
  &lt;img alt=&quot;Slack Integration&quot; src=&quot;/assets/posts/releasing/cli_update.png&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;This proved to be very useful and made the act of releasing more or less painless.&lt;/p&gt;

&lt;h3 id=&quot;simplifying-the-release-process&quot;&gt;Simplifying The Release Process&lt;/h3&gt;

&lt;p&gt;We were using &lt;a href=&quot;https://datasift.github.io/gitflow/IntroducingGitFlow.html&quot;&gt;git-flow&lt;/a&gt;, but it felt way too complicated compared to what we actually needed. We decided to streamline the process, making releases even simpler to understand. This was detailed in this article: “&lt;a href=&quot;http://marcgg.com/blog/2016/02/22/git-flow-heroku-pipelines/&quot;&gt;Simple Git Flow With Heroku Pipelines&lt;/a&gt;”.&lt;/p&gt;

&lt;figure&gt;
  &lt;img alt=&quot;Git flow at Drivy&quot; src=&quot;/assets/posts/releasing/git-flow-drivy.jpg&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;We also worked on making even smaller incremental releases than before, splitting work into individual and releasable commits. This made releases easier, and if you’d like to know more you can check out this article: “&lt;a href=&quot;https://drivy.engineering/best-practices-for-large-features/&quot;&gt;Best Practices for Large Features&lt;/a&gt;”&lt;/p&gt;

&lt;h3 id=&quot;better-data&quot;&gt;Better Data&lt;/h3&gt;

&lt;p&gt;Since we prefer looking at data rather than staying in the dark, we added more information about the different steps of our release process. This way we now have a nice graph in &lt;a href=&quot;https://grafana.com/&quot;&gt;Grafana&lt;/a&gt; with the number of releases we are making per week:&lt;/p&gt;

&lt;figure&gt;
  &lt;img alt=&quot;Releases count in Grafana&quot; src=&quot;/assets/posts/releasing/grafana.png&quot; /&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;improving-organization&quot;&gt;Improving Organization&lt;/h3&gt;

&lt;p&gt;As we grew, the engineering team got larger and it lead to reduced &lt;a href=&quot;https://pragdave.me/blog/2014/03/04/time-to-kill-agile.html&quot;&gt;agility&lt;/a&gt;. We worked on a new organisation based on &lt;a href=&quot;https://labs.spotify.com/2014/03/27/spotify-engineering-culture-part-1/&quot;&gt;Spotify’s squads&lt;/a&gt; and it helped us move even faster than before, which was visible in the number of releases.&lt;/p&gt;

&lt;figure&gt;
  &lt;img alt=&quot;Spotify&quot; src=&quot;/assets/posts/releasing/spotify.jpg&quot; /&gt;
&lt;center&gt;&lt;small&gt;Excerpt from Spotify's &lt;a href=&quot;https://vimeo.com/85490944&quot;&gt;presentation video&lt;/a&gt; about Squads&lt;/small&gt;&lt;/center&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;circleci-2--docker&quot;&gt;CircleCI 2 &amp;amp; Docker&lt;/h3&gt;

&lt;p&gt;After years spent adding on to the test suite, we started to feel that the build time was slowing us down, clocking in at approximatively 15 minutes. At this point CircleCI released a &lt;a href=&quot;https://circleci.com/docs/2.0/&quot;&gt;new version&lt;/a&gt; that allowed us to tweak our build better thanks to &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt;, so we integrated it and saw great improvements on build speed.&lt;/p&gt;

&lt;figure&gt;
  &lt;img alt=&quot;Drivy + Docker&quot; src=&quot;/assets/posts/releasing/docker.png&quot; /&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;release-tool&quot;&gt;Release Tool&lt;/h3&gt;

&lt;p&gt;Once again growth caused us to change our way of working. Now with more developers than ever in the team, there are more questions to be answered: about access rights, enforcing certain constraints, making internal contributions to the tooling easier…&lt;/p&gt;

&lt;p&gt;This is why we introduced our new Drivy Tool app, strongly inspired by Shopify’s &lt;a href=&quot;https://shopifyengineering.myshopify.com/blogs/engineering/introducing-shipit&quot;&gt;shipit&lt;/a&gt;. This allowed us to better control credentials and improve onboarding as there is nothing to install: just login using Github and use the app!&lt;/p&gt;

&lt;figure&gt;
  &lt;img alt=&quot;Drivy tools&quot; src=&quot;/assets/posts/releasing/tools.png&quot; /&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;what-about-micro-services&quot;&gt;What About Micro Services?&lt;/h2&gt;

&lt;p&gt;Splitting the app into a lot of micro services could improve release rate as well. However this is quite costly to do, so we plan on extracting services on an as-we-go and if-appropriate basis. We don’t feel any pain (yet), so there is no need to make a big technical move.&lt;/p&gt;

&lt;h2 id=&quot;current-state-of-affairs&quot;&gt;Current State Of Affairs&lt;/h2&gt;

&lt;p&gt;As you can see we went through a lot of iterations, involving new tools, changes in processes and more. Nowadays we release to production close to 10 times a day, with very few regressions.&lt;/p&gt;

&lt;p&gt;I can’t say enough how central a good test suite is to any continuous integration process. If you can’t catch regressions or new bugs quickly, there is no chance you can implement such a process.&lt;/p&gt;

&lt;p&gt;Same goes for good and simple processes. There’s no need to go overboard with &lt;a href=&quot;http://marcgg.com/blog/2014/07/28/company-process-red-tape/&quot;&gt;red tape&lt;/a&gt;… but effective, structured and documented ways of doing things will help with productivity. It’s also great for onboarding new and more junior developers.&lt;/p&gt;

</description>
        
          <description>&lt;p&gt;We’ve always valued releasing quickly, as unreleased code is &lt;a href=&quot;https://en.wikipedia.org/wiki/Theory_of_constraints&quot;&gt;basically inventory&lt;/a&gt;. It slowly gathers dust and becomes outdated or costs time to be kept updated. Almost 3 years ago we published an article “&lt;a href=&quot;https://blog.drivy.com/2015/01/27/drivy-500/&quot;&gt;Drivy, version 500!&lt;/a&gt;” on our main blog, so I feel now is the time to get more into the details of how we accomplish pushing a lot of new versions of the app to production.&lt;/p&gt;

</description>
        
        <pubDate>Wed, 27 Sep 2017 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/continuous-integration/</link>
        <guid isPermaLink="true">https://getaround.tech/continuous-integration/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Setting up Vim for React development</title>
        <dc:creator>Victor Mours</dc:creator>
        <description>&lt;p&gt;We’ve recently introduced &lt;a href=&quot;https://preactjs.com/&quot;&gt;Preact&lt;/a&gt; to our Rails stack at Drivy, and the results have been rather satisfying so far.
As a Vim lover, I was curious to see how to go about setting up Vim React or React-like project. As usual, the wealth of plugins out there didn’t disappoint.&lt;/p&gt;

&lt;p&gt;Here’s the setup that I came up with:&lt;/p&gt;

&lt;h1 id=&quot;syntax-highlighting&quot;&gt;Syntax Highlighting&lt;/h1&gt;

&lt;p&gt;Let’s start with the basics, and get some syntax highlighting for JavaScript and JSX by adding these to the plugins section of your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.vimrc&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Plug&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'pangloss/vim-javascript'&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Plug&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mxw/vim-jsx'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’m assuming here that you’re using &lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt; as your plugin manager. If you’re unsure about how to install these with another plugin manager, check out the README from the respective repos.&lt;/p&gt;

&lt;h1 id=&quot;emmet-for-easier-jsx&quot;&gt;Emmet for easier JSX&lt;/h1&gt;

&lt;p&gt;In a Rails environment, I’m mostly used to languages such as Slim or Haml which simplify writing HTML, so going back to writing closing tags in JSX felt a little tedious.
Fortunately, you can get rid of some of the grunt work with &lt;a href=&quot;https://github.com/mattn/emmet-vim&quot;&gt;Emmet-vim&lt;/a&gt;, which enables you to expand your CSS selectors into HTML (or JSX) on the fly.&lt;/p&gt;

&lt;p&gt;For example, you could type&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haml&quot; data-lang=&quot;haml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;%h2&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;#tagline&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.hero-text&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and then expand it to&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tagline&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hero-text&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;in just two keystrokes.&lt;/p&gt;

&lt;p&gt;Let’s install it:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Plug&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mattn/emmet-vim'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and then add this to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.vimrc&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user_emmet_leader_key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&amp;lt;Tab&amp;gt;'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user_emmet_settings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;  &lt;span class=&quot;s1&quot;&gt;'javascript.jsx'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;      &lt;span class=&quot;s1&quot;&gt;'extends'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'jsx'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;\}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Give it a try: in insert mode, type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p.description&lt;/code&gt;, and then hit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tab-,&lt;/code&gt; (without leaving insert mode). It will expand as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;p className=&quot;description&quot;&amp;gt;&amp;lt;/p&amp;gt;&lt;/code&gt;. Note that this is using the JSX &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;className&lt;/code&gt; syntax, thanks to the tweak on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user_emmet_settings&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;syntax-checking&quot;&gt;Syntax checking&lt;/h1&gt;

&lt;p&gt;Syntastic has been the go-to solution for syntax checking in Vim for a while, but it has the major flaw of being synchronous.
That means that you can’t do anything - not even move your cursor - while it is running.
For large files, this gets annoying rather quickly. The good news is that Vim now has support for async tasks, and you can switch to &lt;a href=&quot;https://github.com/w0rp/ale&quot;&gt;Ale&lt;/a&gt;, which is short for Asynchronous Lint Engine.
You will never be interrupted by your linter again, hurray!&lt;/p&gt;

&lt;p&gt;Arguably, this isn’t specific to React, but since you’ll need syntax checking for JSX, it’s a good opportunity to improve your overall setup.&lt;/p&gt;

&lt;p&gt;Installing Ale is nothing unexpected:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Plug&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'w0rp/ale'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Of course, Ale is only the glue between Vim and the actual syntax checker that runs under the hood, which in this case would be ESLint.&lt;/p&gt;

&lt;p&gt;Here’s how to install ESLint:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yarn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dev&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eslint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;babel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eslint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eslint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;react&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and then configure it by runnning:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eslint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will create an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.eslintrc&lt;/code&gt; file, which you should check in to version control so that everybody is using the same style guide. You may want to have a chat with the other people working on your project, to make sure everybody agrees on which rules you’ll enforce.&lt;/p&gt;

&lt;p&gt;Ale works out of the box with ESLint, so there’s no further setup needed. However, I found Ale more pleasant to use with a couple tweaks in my vimrc:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ale_sign_error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'●'&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; Less aggressive than the default '&amp;gt;&amp;gt;'&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;let g:ale_sign_warning = '.'&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;let g:ale_lint_on_enter = 0 &quot;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Less&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distracting&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opening&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;autoformatting&quot;&gt;Autoformatting&lt;/h1&gt;

&lt;p&gt;Ok, this is the best part. You may know about &lt;a href=&quot;https://github.com/prettier/prettier&quot;&gt;Prettier&lt;/a&gt;, an “opinionated code formatter”, which will reformat your Javascript code from scratch, much like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gofmt&lt;/code&gt; does for Go.&lt;/p&gt;

&lt;p&gt;Having Prettier run each time that you save a file is surprisingly satisfying: you’ll basically never have to think about formatting again.
After using it for a couple hours, I even realized my way of writing was a bit different: I was just typing unformatted code, and trusting Prettier to make it look good.
That’s its killer feature: you get to focus on what your code does, not how it’s written.&lt;/p&gt;

&lt;p&gt;Once again, this will be useful for all your JS projects, not just React ones, so let’s get the setup going:&lt;/p&gt;

&lt;p&gt;First, let’s install prettier:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yarn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dev&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prettier&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eslint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prettier&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eslint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prettier&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, you should be able to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eslint --fix src/App.js&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/App.js&lt;/code&gt; will be reformatted automatically.&lt;/p&gt;

&lt;p&gt;Good, now let’s make that happen in vim each time you save a file. A naive way of doing this would just be to set an autocommand to run ESLint, but that would have the downside of being synchronous.
Rather than digging into Vim’s async job api, the easiest way of doing this is to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;asyncrun&lt;/code&gt;, a plugin to easily run shell commands in the background.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Plug&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'skywind3000/asyncrun.vim'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And then you can add that sweet sweet autocommand.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;autocmd&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BufWritePost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;js&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AsyncRun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;checktime&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node_modules&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eslint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-post=checktime&lt;/code&gt; option reloads the buffer from the file after the command is done running.&lt;/p&gt;

&lt;p&gt;However, this does bring an issue: each time you tweak a file, the whole thing will be reformatted, which might make your git diff a bit unreadable.
Here at Drivy, we’ve decided to bite the bullet and run prettier on our whole JS codebase, so that the styling would be up to date on the whole app.
It was a big commit, but everything went smoothly, and we now have a consistent and pleasant style across the codebase.&lt;/p&gt;

&lt;h1 id=&quot;closing-thoughts&quot;&gt;Closing thoughts&lt;/h1&gt;

&lt;p&gt;This config is working pretty well for me, but as ever with Vim, it’s always possible to go deeper and find other improvements.
If you do or if you have any questions, feel free to &lt;a href=&quot;https://twitter.com/victormours&quot;&gt;ping me on twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy coding with Vim and (p)React!&lt;/p&gt;
</description>
        
          <description>&lt;p&gt;We’ve recently introduced &lt;a href=&quot;https://preactjs.com/&quot;&gt;Preact&lt;/a&gt; to our Rails stack at Drivy, and the results have been rather satisfying so far.
As a Vim lover, I was curious to see how to go about setting up Vim React or React-like project. As usual, the wealth of plugins out there didn’t disappoint.&lt;/p&gt;
</description>
        
        <pubDate>Tue, 12 Sep 2017 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/setting-up-vim-for-react/</link>
        <guid isPermaLink="true">https://getaround.tech/setting-up-vim-for-react/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Code simplicity - Reading levels</title>
        <dc:creator>Nicolas Zermati</dc:creator>
        <description>&lt;p&gt;When we write code, who is it for? Is it for the machine? It is the machine that
will parse and run your code. Is it for the next developer? It is that person that
will spend time reading and updating the code. Is it for the business? After all,
the code wouldn’t exist if it had no purpose. Obviously I think code targets all
of them.&lt;/p&gt;

&lt;p&gt;The goal is to not only make your code understandable by the machine, but also to
your future self and to the business itself. This isn’t an easy thing. In this
article I only aim to go past the machine-readable to reach the next developer
level. To do that, let’s refactor a small fictive class…&lt;/p&gt;

&lt;h3 id=&quot;initial-code&quot;&gt;Initial code&lt;/h3&gt;

&lt;p&gt;In the &lt;a href=&quot;/code_simplicity_command_pattern&quot;&gt;previous article&lt;/a&gt; of &lt;a href=&quot;/code_simplicity_introduction&quot;&gt;the serie&lt;/a&gt;, I started extracting a
chunk of code from a Rails’ controller to an external object. I did it in a very
simple way and here is the result:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConfirmOrder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Command&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payment_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;notify: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@payment_token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payment_token&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@notify&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notify&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;validate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;payment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;payments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;token: &lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@payment_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;valid?&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;add_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:payment_token_invalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sales_quote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;currency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sales_quote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;currency&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;add_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:payment_amount_mismatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;payments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;token: &lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@payment_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;capture!&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;transaction&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;invoice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;invoices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;amount: &lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sales_quote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;currency: &lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sales_quote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;currency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

      &lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sales_quote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;invoice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
          &lt;span class=&quot;ss&quot;&gt;product_id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;product_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;ss&quot;&gt;quantity: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;quantity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;ss&quot;&gt;unit_price: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;unit_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;status: :confirmed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@notify&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;OrderMailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;preparation_details&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;deliver_async&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;OrderMailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;confirmation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;deliver_async&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;OrderMailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;available_invoice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;deliver_async&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Payment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CaptureError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:payment_capture_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It is machine-readable. Does that mean that you can read that easily? Nope…
I explain a bit what the code is doing in the &lt;a href=&quot;/code_simplicity_command_pattern&quot;&gt;other article&lt;/a&gt; but it
isn’t enough and more importantly, do we want to maintain an up to date
documentation for everything?&lt;/p&gt;

&lt;h3 id=&quot;use-the-method-luke&quot;&gt;Use the method Luke&lt;/h3&gt;

&lt;p&gt;One of the technique I use is to abstract things in methods. As we do with
variable, picking relevant name could create a narrative that’s much easier
to follow.&lt;/p&gt;

&lt;p&gt;For instance, let’s look at that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;validate&lt;/code&gt; block, starting with this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sales_quote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;currency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sales_quote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;currency&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;add_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:payment_amount_mismatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We don’t want to clutter the reader’s mind with the detail of the conditional.
It doesn’t even fit on my screen! We could instead wrap this in a method:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;add_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:payment_amount_mismatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payment_matches_sales_quote?&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This doesn’t put all the details in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;validate&lt;/code&gt; block. And I think it is for
the best because when I read that block, I would like to have an overview of
what’s validated, not every single implementation details.&lt;/p&gt;

&lt;p&gt;We could apply the same for the other conditional and get this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;validate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;add_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:payment_token_invalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valid_payment_token?&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;add_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:payment_amount_mismatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payment_amount_matches_sales_quote?&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To make this happen, we need to define 3 private methods:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;payment&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@payment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;payments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;token: &lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@payment_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;valid_payment_token?&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;payment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;valid?&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;payment_matches_sales_quote?&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;payment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sales_quote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;payment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;currency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sales_quote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;currency&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After that we end up with more lines in the file but the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;validate&lt;/code&gt; block can
now provide a faster understanding to anyone reading the class.&lt;/p&gt;

&lt;p&gt;It is possible to go to an higher level of narrative with something like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;validate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;payment_token_must_be_valid&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;payment_amount_must_match_sales_quote&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You’re the judge of the abstraction level you want to give. The first refactoring
uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unless&lt;/code&gt;. It is understandable by any Ruby developer. The second version could be
understood even by the business person asking for that feature.&lt;/p&gt;

&lt;h3 id=&quot;taking-a-few-steps-further&quot;&gt;Taking a few steps further&lt;/h3&gt;

&lt;p&gt;If we continue to apply this to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;perform&lt;/code&gt; block, we could end up with something
like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;capture_payment!&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;create_invoice_and_update_status&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;send_notifications&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Payment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CaptureError&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;add_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:payment_capture_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you’re interested in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create_invoice_and_update_status&lt;/code&gt;, you’re free to
dig deeper, but if you don’t you have the choice not to bother with the details.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;By creating different narratives you can optimize for different targets.
Targeting the business forces you to think in the same mindset which has great
communication benefits.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can find the gist of the code &lt;a href=&quot;https://gist.github.com/nicoolas25/d3297e9e10e870787c6a40431c2ffa88&quot;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
        
          <description>&lt;p&gt;When we write code, who is it for? Is it for the machine? It is the machine that
will parse and run your code. Is it for the next developer? It is that person that
will spend time reading and updating the code. Is it for the business? After all,
the code wouldn’t exist if it had no purpose. Obviously I think code targets all
of them.&lt;/p&gt;
</description>
        
        <pubDate>Fri, 01 Sep 2017 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/code_simplicity_reading_levels/</link>
        <guid isPermaLink="true">https://getaround.tech/code_simplicity_reading_levels/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Code simplicity - Command pattern</title>
        <dc:creator>Nicolas Zermati</dc:creator>
        <description>&lt;p&gt;The command pattern is sometimes called a service object, an operation, an action,
and probably more names that I’m not aware of. Whatever the name we gave it,
the purpose of such a pattern is rather simple: take a business action and put it
behind an object with a simple interface.&lt;/p&gt;

&lt;h3 id=&quot;a-controllers-action-doing-it-all&quot;&gt;A controller’s action doing it all&lt;/h3&gt;

&lt;p&gt;One of the most common use case I encounter for this pattern is to get business
logic out of MVC’s controllers. For instance, in a Rails application, an action
responds to a single HTTP call using a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST&lt;/code&gt;, a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATCH&lt;/code&gt;, or a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PUT&lt;/code&gt; verb and
semantic. It means that those actions are intended to update the application’s
state.&lt;/p&gt;

&lt;p&gt;The following example takes an action to illustrate the situation. The goal of
the confirm action is to complete an order. Completing an order follow those
steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;validate that the payment amount is correct,&lt;/li&gt;
  &lt;li&gt;pay the order,&lt;/li&gt;
  &lt;li&gt;create an invoice using the existing sales quote,&lt;/li&gt;
  &lt;li&gt;update the state of the order, and&lt;/li&gt;
  &lt;li&gt;send notifications.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrdersController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;confirm&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;payment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;payments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;token: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:payment_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sales_quote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;currency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sales_quote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;currency&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Payment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MismatchError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;payment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;capture!&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;transaction&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;invoice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;invoices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;amount: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sales_quote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;currency: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sales_quote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;currency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

      &lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sales_quote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;invoice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
          &lt;span class=&quot;ss&quot;&gt;product_id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;product_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;ss&quot;&gt;quantity: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;quantity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;ss&quot;&gt;unit_price: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;unit_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;status: :confirmed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;OrderMailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;preparation_details&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;deliver_async&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;OrderMailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;confirmation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;deliver_async&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;OrderMailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;available_invoice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;deliver_async&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;flash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;orders.create.success&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invoice_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;invoice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Payment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MismatchError&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;flash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;orders.create.payment_amount_mismatch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:back&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Payment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CaptureError&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;flash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;orders.create.payment_capture_error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:back&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RecordInvalid&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;flash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;orders.create.payment_token_invalid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:back&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There are more or less obvious issues in that implementation. Let’s see how much
extracting that logic could help.&lt;/p&gt;

&lt;h3 id=&quot;moving-out&quot;&gt;Moving out&lt;/h3&gt;

&lt;p&gt;The first step of the extracting process is simple: take the content of the action, put
it in an object and call this object from the controller.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrdersController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;confirm&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;ConfirmOrder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:payment_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;flash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;orders.create.success&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invoice_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;invoice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Payment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MismatchError&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;flash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;orders.create.payment_amount_mismatch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:back&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Payment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CaptureError&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;flash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;orders.create.payment_capture_error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:back&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RecordInvalid&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;flash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;orders.create.payment_token_invalid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:back&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConfirmOrder&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payment_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@payment_token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payment_token&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;payment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;payments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;token: &lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@payment_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sales_quote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;currency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sales_quote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;currency&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Payment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MismatchError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;payment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;capture!&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;transaction&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;invoice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;invoices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;amount: &lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sales_quote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;currency: &lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sales_quote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;currency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

      &lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sales_quote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;invoice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
          &lt;span class=&quot;ss&quot;&gt;product_id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;product_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;ss&quot;&gt;quantity: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;quantity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;ss&quot;&gt;unit_price: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;unit_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;status: :confirmed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;OrderMailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;preparation_details&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;deliver_async&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;OrderMailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;confirmation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;deliver_async&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;OrderMailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;available_invoice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;deliver_async&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It seems to be more complicated than before. In some way it is since there is one
extra level of indirection to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConfirmOrder&lt;/code&gt; object now. Despite that, this
basic extraction provides interesting benefits such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;focusing the controller on fetching the parameters and handling the response,&lt;/li&gt;
  &lt;li&gt;reusing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConfirmOrder&lt;/code&gt; in another context,&lt;/li&gt;
  &lt;li&gt;testing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConfirmOrder&lt;/code&gt; itself, this is an important-enough context to mention,&lt;/li&gt;
  &lt;li&gt;sharing behavior between commands, and&lt;/li&gt;
  &lt;li&gt;getting some &lt;em&gt;privacy&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;supporting-multiple-contexts&quot;&gt;Supporting multiple contexts&lt;/h3&gt;

&lt;p&gt;Reusing this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConfirmOrder&lt;/code&gt; in a different context is easy. It is a small amount
of work to get variations. Imagine that, &lt;em&gt;because of the context&lt;/em&gt;,  you want to
confirm an order without sending the notifications…&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConfirmOrder&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payment_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;notify: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@payment_token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payment_token&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@notify&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notify&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Same code as before...&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@notify&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;OrderMailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;preparation_details&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;deliver_async&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;OrderMailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;confirmation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;deliver_async&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;OrderMailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;available_invoice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;deliver_async&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We could use some state machine’s hook in order to deliver notifications and even
to create the invoice. I tend to avoid callback as much as possible. Encapsulating
the behavior in an object allows us to see what’s going on during that action in
the same file. Also, it is easy to tweak the behavior if needed without impacting
the rest of the system, as we just did.&lt;/p&gt;

&lt;h3 id=&quot;sharing-behavior&quot;&gt;Sharing behavior&lt;/h3&gt;

&lt;p&gt;Many business actions, such as completing an order, can be extracted using this
pattern. Giving a clean API to all those commands gives some structure and
consistency to the codebase.&lt;/p&gt;

&lt;p&gt;In the example, the errors mechanism is using exceptions, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Payment::CaptureError&lt;/code&gt;,
forcing the controller to know about each one of them. At Drivy we’ve built a
validation layer allowing us to write:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrdersController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;confirm&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;ConfirmOrder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:payment_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform!&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;flash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;orders.create.success&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invoice_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;invoice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;flash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;orders.create.&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:back&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConfirmOrder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Command&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payment_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;notify: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@payment_token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payment_token&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@notify&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notify&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;validate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;payment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;payments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;token: &lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@payment_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;valid?&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;add_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:payment_token_invalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sales_quote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;currency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sales_quote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;currency&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;add_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:payment_amount_mismatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;payments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;token: &lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@payment_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;capture!&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;transaction&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;invoice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;invoices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;amount: &lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sales_quote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;currency: &lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sales_quote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;currency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

      &lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sales_quote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;invoice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
          &lt;span class=&quot;ss&quot;&gt;product_id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;product_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;ss&quot;&gt;quantity: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;quantity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;ss&quot;&gt;unit_price: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;unit_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;status: :confirmed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@notify&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;OrderMailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;preparation_details&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;deliver_async&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;OrderMailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;confirmation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;deliver_async&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;OrderMailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;available_invoice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;deliver_async&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Payment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CaptureError&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:payment_capture_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You may be able to guess what’s in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Command&lt;/code&gt; class but there isn’t much.
Also here I’m using the Ruby 2.5 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rescue&lt;/code&gt; which will work inside blocks!&lt;/p&gt;

&lt;h3 id=&quot;wait-what-did-you-meant-by-privacy&quot;&gt;Wait, what did you meant by privacy?&lt;/h3&gt;

&lt;p&gt;When all that code was in the controller, it was surrounded by other actions. It
means that each private method that you would like to define would also be visible
from within those other actions. Most of the time it doesn’t make sense. I’ve seen,
and unfortunately wrote myself, controllers with too many private methods. I dodged
the name clashes with prefixes, I grouped methods by the action they referred to, I
added comments, and I even tried concerns. Nothing really was really satisfying.&lt;/p&gt;

&lt;p&gt;In that sense, a dedicated object make things a lot simpler to organize. In the next
article of the serie, I’ll go deeper on how to &lt;a href=&quot;/code_simplicity_reading_levels&quot;&gt;use and abuse methods&lt;/a&gt; in order
to offer the best documentation to the next developer. It’ll continue this example
so be sure to check it out.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;In this article nothing is especially new but this way of bundling business actions
is getting more and more common. &lt;a href=&quot;http://hanamirb.org/&quot;&gt;Hanami&lt;/a&gt; has &lt;a href=&quot;http://hanamirb.org/guides/actions/overview/&quot;&gt;Action&lt;/a&gt; and
&lt;a href=&quot;http://trailblazer.to/&quot;&gt;Trailblazer&lt;/a&gt; has &lt;a href=&quot;http://trailblazer.to/gems/operation/2.0/index.html&quot;&gt;Operation&lt;/a&gt; for instance. If you never thought of it,
it is time to practice!&lt;/p&gt;

</description>
        
          <description>&lt;p&gt;The command pattern is sometimes called a service object, an operation, an action,
and probably more names that I’m not aware of. Whatever the name we gave it,
the purpose of such a pattern is rather simple: take a business action and put it
behind an object with a simple interface.&lt;/p&gt;
</description>
        
        <pubDate>Fri, 01 Sep 2017 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/code_simplicity_command_pattern/</link>
        <guid isPermaLink="true">https://getaround.tech/code_simplicity_command_pattern/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Best Practices for Large Features</title>
        <dc:creator>Howard Wilson</dc:creator>
        <description>&lt;p&gt;As developers, we sometimes find ourselves faced with feature requests that will take weeks of work and touch many areas of the codebase. This comes with increased risk in terms of how we spend our time and whether things break when we come to release.&lt;/p&gt;

&lt;p&gt;Examples might be moving from a single to multi-tennant application (scoping everything by accounts), or supporting multiple currencies or time zones. This post brings together some tips that we find useful at Drivy for approaching these types of problems.&lt;/p&gt;

&lt;p&gt;In general, our goals are to &lt;strong&gt;build the right thing&lt;/strong&gt;, &lt;strong&gt;take the right implementation approach&lt;/strong&gt;, and &lt;strong&gt;not to break anything&lt;/strong&gt;. We’d like to try to do those things pretty quickly, too!&lt;/p&gt;

&lt;h2 id=&quot;building-the-right-thing&quot;&gt;Building the Right Thing&lt;/h2&gt;

&lt;p&gt;When working on large features, the cost of building the wrong thing is higher than usual, since there is more time between receiving a feature request and presenting the completed feature back to the product team for validation. This makes up-front communication a very important part of the process, especially since more agile startups often don’t use formal specification documents.&lt;/p&gt;

&lt;h3 id=&quot;assumptions&quot;&gt;Assumptions&lt;/h3&gt;

&lt;p&gt;One way to avoid misunderstandings is to make a list of &lt;strong&gt;assumptions&lt;/strong&gt;. Check these with the product team and include them in pull requests so any reviewers are aware of them (and can challenge them). Assumptions might take the following form:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It’s not possible for a user to be in state X and Y at the same time&lt;/li&gt;
  &lt;li&gt;This feature will only be implemented for countries X and Y&lt;/li&gt;
  &lt;li&gt;There’s no need to update old data to be consistent with the new rules&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;smaller-features&quot;&gt;Smaller Features&lt;/h3&gt;

&lt;p&gt;It’s always worth questioning whether a large feature really does need to be released all in one go. Are there smaller pieces which all add value incrementally? For example, Drivy now supports precise times for rental start and end, instead of just AM/PM time slots. But we didn’t need to make this change all in one go. We started with bookings, then moved on to booking changes, and eventually the state changes of the rentals themselves.&lt;/p&gt;

&lt;h2 id=&quot;taking-the-right-implementation-approach&quot;&gt;Taking the Right Implementation Approach&lt;/h2&gt;

&lt;p&gt;There are normally several ways to solve a problem. Taking the right implementation approach is the “tech side” of building the right thing. In other words, “will we solve this problem in a way that the tech team generally agrees is appropriate?”&lt;/p&gt;

&lt;h3 id=&quot;naming&quot;&gt;Naming&lt;/h3&gt;

&lt;p&gt;Often, naming is a useful place to start. Getting a few developers together to talk about what any new entities or concepts will be called can help to identify the right abstractions in our code. Even if sometimes they feel like isolated implementation details, the abstractions developers select can strongly influence terminology and understanding across other teams in the company. For example, modeling an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Order&lt;/code&gt; rather than a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Request&lt;/code&gt; can have a profound impact on the perceived urgency of that user action.&lt;/p&gt;

&lt;p&gt;Are data flows or processes changing? Even if not explicitly &lt;a href=&quot;https://drivy.engineering/designing-state-machines/&quot;&gt;designing a state machine&lt;/a&gt;, it’s exactly these kinds of problems that typically take a lot longer to discuss and get right, than to implement. There’s nothing wrong with taking time up front to properly explore the different possibilities. Draw on the whiteboard and get the opinions of the rest of your team!&lt;/p&gt;

&lt;h3 id=&quot;spike--prototype&quot;&gt;Spike / Prototype&lt;/h3&gt;

&lt;p&gt;The purpose of a &lt;a href=&quot;https://en.wikipedia.org/wiki/Spike_(software_development)&quot;&gt;spike&lt;/a&gt; is to gain the knowledge necessary to reduce the risk of a technical approach. It also often gives developers enough confidence to more accurately estimate how long the feature will take to develop.&lt;/p&gt;

&lt;p&gt;Some general guidelines:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Aim to cover enough of the feature to model the majority use case, but also explore any worrying edge cases&lt;/li&gt;
  &lt;li&gt;Take plenty of notes when questions/concerns arise, possibly split into product/tech&lt;/li&gt;
  &lt;li&gt;Tests are not mandatory, but simple acceptance tests may be useful&lt;/li&gt;
  &lt;li&gt;Keep a release plan in mind and, if possible, split the spike into deployable commits (more on this later)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;first-code-review&quot;&gt;First Code Review&lt;/h3&gt;

&lt;p&gt;Reviewing code is hard. A reviewer is expected to make sure the code is correct and of a high quality before it gets merged into the release branch. In order to do this effectively, it’s usually best to keep the size of the pull request to a minimum. But how then will a reviewer be able to get an end-to-end perspective of your implementation?&lt;/p&gt;

&lt;p&gt;One answer is to split code reviews which &lt;strong&gt;validate a general approach&lt;/strong&gt; from code reviews which &lt;strong&gt;accept code into production&lt;/strong&gt;. Here, we’re doing the first type of review. It’s a review best suited to a senior member of the team; ideally someone who has a broad knowledge of the codebase.&lt;/p&gt;

&lt;p&gt;Here’s what we like to do:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Split the spike into commits which roughly represent separately releasable work areas. This helps to keep focused on the goal of minimizing risk when releasing.&lt;/li&gt;
  &lt;li&gt;Describe each one of these commits separately. A reviewer is then able to focus on smaller chunks of code, even if the overall pull request is quite large.&lt;/li&gt;
  &lt;li&gt;Create a simple release plan, paying special attention to any data migrations - these can be more time consuming and error prone than anticipated.&lt;/li&gt;
  &lt;li&gt;Include all the technical questions which arose while building the spike&lt;/li&gt;
  &lt;li&gt;Include screenshots&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Again, the goal at this point is to validate the approach, but without losing sight of how we’ll structure the feature for release. This code isn’t going to be merged into the release branch in it’s current form.&lt;/p&gt;

&lt;h3 id=&quot;iterate-on-feedback&quot;&gt;Iterate on Feedback&lt;/h3&gt;

&lt;p&gt;This takes a little more time if the pull request has already been split into separate commits, but git helps us re-write our branch. There’s plenty of information on how to go about this in the related post: &lt;a href=&quot;https://drivy.engineering/git-rebase-edit-history/&quot;&gt;“Editing your git history with rebase for cleaner pull requests”&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Of course, there are lots of visual tools too (such as &lt;a href=&quot;http://gitup.co/&quot;&gt;Gitup&lt;/a&gt;), which get the same job done without using the command line.&lt;/p&gt;

&lt;p&gt;Once the branch is updated, we force push back to the same remote branch to preserve a clean commit history.&lt;/p&gt;

&lt;h2 id=&quot;minimizing-risk-when-releasing&quot;&gt;Minimizing Risk When Releasing&lt;/h2&gt;

&lt;h3 id=&quot;test-preconditions&quot;&gt;Test Preconditions&lt;/h3&gt;

&lt;p&gt;Before starting to release any code, it can be worth verifying that things expected to be true in production &lt;em&gt;are&lt;/em&gt; actually true. Let’s say our new feature is going to introduce behavior which depends on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;country&lt;/code&gt; of active cars. We can check in the database to ensure that the expectation “an active car always has a country” is true, but that doesn’t give 100% confidence. It may be true a few seconds after activation, but not immediately.&lt;/p&gt;

&lt;p&gt;What we can do in cases like this is introduce some logging where our feature will go:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;active?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;country&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;blank?&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;warn&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Active car &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; doesn't have a country, which is required by feature #123&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once we have more confidence in this precondition, the logging can be replaced with a guard clause which raises an exception. Not only does this mean that we can be confident in our assumptions in production, but other developers will also understand immediately which preconditions are satisfied and benefit from the same confidence when coding.&lt;/p&gt;

&lt;h3 id=&quot;final-code-reviews&quot;&gt;Final Code Reviews&lt;/h3&gt;

&lt;p&gt;Now it’s time to get the feature into production. Typically, having split the original pull request, each commit can be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git cherry-pick&lt;/code&gt;‘d to a new branch in turn and then improved to a production-ready state:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Link to the original PR/issue for context&lt;/li&gt;
  &lt;li&gt;Add complete tests if they’re not already present&lt;/li&gt;
  &lt;li&gt;Ask the question: can this be rolled back if something goes wrong?&lt;/li&gt;
  &lt;li&gt;Split out migrations if they need to be run before the code is deployed&lt;/li&gt;
  &lt;li&gt;Soft release the feature behind a feature flipper if it shouln’t actually be visible until later&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This time, Github’s &lt;a href=&quot;https://help.github.com/articles/requesting-a-pull-request-review/&quot;&gt;suggested reviewers&lt;/a&gt; facility is a good way to find someone on your team to review the code. The suggestions are based on git blame data, so they’ll be people who are familiar with the code being changed. Their goal is to confirm that the changes are safe to release. This should be a much quicker process, since the quantity of code is smaller, and the overall approach has already been agreed.&lt;/p&gt;

&lt;h3 id=&quot;checker-jobs--monitoring&quot;&gt;Checker Jobs / Monitoring&lt;/h3&gt;

&lt;p&gt;We often write small jobs to test the long term “postconditions” of a feature. Or in other words, ensuring ongoing data consistency. Usually this concerns aggregate data that is difficult to verify synchronously. For example, checker jobs might verify that there are no overlapping rentals for the same car, or that there are no gaps in the numbering of our tax documents.&lt;/p&gt;

&lt;p&gt;These jobs usually send an email to the appropriate team if inconsistencies are detected. They’re cheap to create, and can help to catch unexpected outcomes before they become too problematic.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Remember, this is just a selection of ideas that we find work well for us. Your mileage may vary!&lt;/p&gt;
</description>
        
          <description>&lt;p&gt;As developers, we sometimes find ourselves faced with feature requests that will take weeks of work and touch many areas of the codebase. This comes with increased risk in terms of how we spend our time and whether things break when we come to release.&lt;/p&gt;
</description>
        
        <pubDate>Mon, 31 Jul 2017 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/best-practices-for-large-features/</link>
        <guid isPermaLink="true">https://getaround.tech/best-practices-for-large-features/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>How we are using member voice to improve UX</title>
        <dc:creator>Julia Maunier &amp; Marion Crosnier</dc:creator>
        <description>&lt;p&gt;Whether it’s on social media, on the app stores, through emails or phone calls, we receive hundreds of messages from our users every day, and answer each of them.&lt;/p&gt;

&lt;p&gt;If answering questions is good, fixing the original problem is even better. We truly believe in this virtuous circle as a customer centric company.&lt;/p&gt;

&lt;p&gt;Since customer service data is the first accessible and actionable “member voice” data in every company, we started by focusing on it. In collaboration between product, customer relationship &amp;amp; data, we wanted to turn our volumes of tickets &amp;amp; phone calls into clear contact reasons, to identify pain points on which we should focus to improve user experience.&lt;/p&gt;

&lt;h1 id=&quot;qualify-customer-service-data&quot;&gt;Qualify customer service data&lt;/h1&gt;

&lt;p&gt;Here are the steps we used at Drivy to improve the way we deal with member voice. This is not a perfect process and might not work for you as it is, but we’ve been successful with this approach.&lt;/p&gt;

&lt;h2 id=&quot;step-1-define-a-common-tag-referential&quot;&gt;Step 1: Define a common tag referential&lt;/h2&gt;

&lt;p&gt;The very first step is to make a list of all the possible issues you can think of (replicating the customer journey helps), and gather it behind topics. If a topic seems too big, split it into smaller topics. Accept you won’t be able to be exhaustive, but don’t end up in a giant “Other” section. Turn these topics into tags to apply it on tickets or phone calls.&lt;/p&gt;

&lt;h2 id=&quot;step-2-apply-it-manually&quot;&gt;Step 2: Apply it manually&lt;/h2&gt;

&lt;p&gt;After checking with the Customer Service team that the tags made sense, we applied them on each ticket and phone call manually until we had enough data to run our analysis. Onboarding of front-line teams is key for the quality of the data as their input is the basis of our analysis.&lt;/p&gt;

&lt;p&gt;We could then identify the contact reasons in each country ranked by volume, and understand clearly what pain points generated most contacts from our users.&lt;/p&gt;

&lt;h2 id=&quot;step-3-automatize-as-much-as-possible-the-tagging&quot;&gt;Step 3: Automatize as much as possible the tagging&lt;/h2&gt;

&lt;p&gt;Manual tagging can’t scale, and doesn’t enable us to know in advance why a user needs our help.&lt;/p&gt;

&lt;p&gt;In order to achieve that, we revamped our contact form to reflect the contact reasons we observed from our manual test. This way, according to the contact reason the user selected, we could either push help articles, or let him contact us and prioritize his request.&lt;/p&gt;

&lt;h2 id=&quot;step-4-import-data-from-our-tools&quot;&gt;Step 4: Import data from our tools&lt;/h2&gt;

&lt;p&gt;In order to perform our analysis, we needed to have access to the necessary data from our ticketing, phone calls and satisfaction tools.&lt;/p&gt;

&lt;p&gt;We imported the data in &lt;a href=&quot;https://aws.amazon.com/redshift/&quot;&gt;Redshift&lt;/a&gt; thanks to an Extract Load and Transform process using &lt;a href=&quot;https://airflow.incubator.apache.org/&quot;&gt;Apache Airflow&lt;/a&gt; and some Python scripts. The tables are updated on a regular basis.&lt;/p&gt;

&lt;figure&gt;
  &lt;img alt=&quot;&quot; src=&quot;/assets/posts/2017-07-18-from-member-voice-to-ux/chart.png&quot; /&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;step-5-make-it-visual&quot;&gt;Step 5: Make it visual&lt;/h2&gt;

&lt;p&gt;Once the data was available in Redshift, we wanted to know what were the issues faced by our users in each country at a glance, so anyone in the company could know it, without requiring to be a SQL expert.&lt;/p&gt;

&lt;p&gt;We created dashboards on &lt;a href=&quot;https://redash.io/&quot;&gt;Redash&lt;/a&gt; displaying the data we needed to understand our users better.&lt;/p&gt;

&lt;h2 id=&quot;step-6-prioritization-of-pain-points&quot;&gt;Step 6: Prioritization of pain points&lt;/h2&gt;

&lt;p&gt;However, it’s not all about volumes. A topic generating lots of contact is not necessarily the top source of insatisfaction.
We also implemented satisfaction surveys sent automatically after each ticket resolution. This way, we can identify easily which contact reasons generate insatisfaction, and work on improving our treatment processes and policies.&lt;/p&gt;

&lt;p&gt;It’s the mix volume x insatisfaction that truly tells us where our focus should be.  &lt;/p&gt;

&lt;h2 id=&quot;step-7-need-for-emotional-data&quot;&gt;Step 7: Need for emotional data&lt;/h2&gt;

&lt;p&gt;When focusing on a major pain point, we needed to understand precisely what were the issues faced by our users.
We are frequently spending time reading the tickets and listening to phone calls so that we can capture better our users perception and feelings, as well as precise the pain points we need to work on with product evolution.&lt;/p&gt;

&lt;h1 id=&quot;to-infinity-and-beyond&quot;&gt;To infinity and beyond&lt;/h1&gt;

&lt;p&gt;We started with the data from our customer service, but there are lots of other sources we’d love to include (app reviews, social media posts…).&lt;/p&gt;

&lt;p&gt;Including these other sources will help us catch more than only pain points. Feedbacks on the product help us not only on reducing insatisfaction, but increase satisfaction and user delight.&lt;/p&gt;

</description>
        
          <description>&lt;p&gt;Whether it’s on social media, on the app stores, through emails or phone calls, we receive hundreds of messages from our users every day, and answer each of them.&lt;/p&gt;
</description>
        
        <pubDate>Mon, 17 Jul 2017 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/from-member-voice-to-ux/</link>
        <guid isPermaLink="true">https://getaround.tech/from-member-voice-to-ux/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Running feature specs with Capybara and Chrome headless</title>
        <dc:creator>Tim Petricola</dc:creator>
        <description>&lt;p&gt;At Drivy, we’ve been using Capybara and PhantomJS to run our feature specs for years. Even with its issues, PhantomJS is a great way to interact with a browser without starting a graphical interface. Recently, Chrome added support for a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;headless&lt;/code&gt; flag so it could be started without any GUI. Following this announcement, the creator of PhantomJS even &lt;a href=&quot;https://groups.google.com/d/msg/phantomjs/9aI5d-LDuNE/5Z3SMZrqAQAJ&quot;&gt;announced&lt;/a&gt; that he would be stepping down as a maintainer.&lt;/p&gt;

&lt;p&gt;Setting feature specs to run with a headless version of Chrome means that our features specs can be executed in the same environment most of our users are browsing with. It is also supposed to improve memory usage and stability.&lt;/p&gt;

&lt;h2 id=&quot;installing-prerequisites-dependencies&quot;&gt;Installing prerequisites dependencies&lt;/h2&gt;

&lt;p&gt;Assuming you already have Chrome (59 or more recent for macOS/Linux, 60 or more recent for Windows) on your machine, you’ll also need to install &lt;a href=&quot;https://sites.google.com/a/chromium.org/chromedriver/&quot;&gt;ChromeDriver&lt;/a&gt;. On macOS, you can install it with homebrew:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;chromedriver&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If not already present in your application, add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;selenium-webdriver&lt;/code&gt; to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'selenium-webdriver'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;configuring-capybara&quot;&gt;Configuring Capybara&lt;/h3&gt;

&lt;p&gt;Capybara provides a simple API to register a custom driver. You can do so in your test/spec helper file.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Capybara&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;register_driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:headless_chrome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;capabilities&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Selenium&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;WebDriver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Remote&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Capabilities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;chrome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;chromeOptions: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;args: &lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%w[headless disable-gpu]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;no&quot;&gt;Capybara&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Selenium&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;browser: :chrome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;desired_capabilities: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;capabilities&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As &lt;a href=&quot;https://developers.google.com/web/updates/2017/04/headless-chrome#cli&quot;&gt;stated in the documentation&lt;/a&gt;, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;disable-gpu&lt;/code&gt; is needed to run Chrome as headless.&lt;/p&gt;

&lt;h3 id=&quot;using-chrome-headless&quot;&gt;Using Chrome headless&lt;/h3&gt;

&lt;p&gt;On an app running on Rails 5.1 with system test cases, use the provided DSL to use the driver:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ApplicationSystemTestCase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActionDispatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SystemTestCase&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;driven_by&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:headless_chrome&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Otherwise, use the more generic way of setting a javascript driver for Capybara:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Capybara&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;javascript_driver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:headless_chrome&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;troubleshooting&quot;&gt;Troubleshooting&lt;/h2&gt;

&lt;h3 id=&quot;empty-screenshots&quot;&gt;Empty screenshots&lt;/h3&gt;

&lt;p&gt;With Capybara, there is a possibility to take a screenshot during your tests (or automatically on a failure). This feature results in an empty gray image on headless Chrome 59 but the proper behavior is restored on Chrome 60 (in beta as of today).&lt;/p&gt;

&lt;h3 id=&quot;trigger-method&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trigger&lt;/code&gt; method&lt;/h3&gt;

&lt;p&gt;To prevent some issues in PhantomJS when elements would overlap, we had a lot of calls like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.clickable_element'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'click'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In Chrome, it is raising the following error as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trigger&lt;/code&gt; method is not supported:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Capybara&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NotSupportedByDriverError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Capybara&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#trigger&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This can now safely be replaced by the straightforward &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;click&lt;/code&gt; method:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.clickable_element'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;click&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;You can see an example app on &lt;a href=&quot;https://github.com/drivy/rails-headless-capybara&quot;&gt;drivy/rails-headless-capybara&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Even though we introduced Chrome headless very recently, we’re quite optimistic that it will lead to even less bugs in our application.&lt;/p&gt;
</description>
        
          <description>&lt;p&gt;At Drivy, we’ve been using Capybara and PhantomJS to run our feature specs for years. Even with its issues, PhantomJS is a great way to interact with a browser without starting a graphical interface. Recently, Chrome added support for a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;headless&lt;/code&gt; flag so it could be started without any GUI. Following this announcement, the creator of PhantomJS even &lt;a href=&quot;https://groups.google.com/d/msg/phantomjs/9aI5d-LDuNE/5Z3SMZrqAQAJ&quot;&gt;announced&lt;/a&gt; that he would be stepping down as a maintainer.&lt;/p&gt;
</description>
        
        <pubDate>Wed, 05 Jul 2017 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/running-capybara-headless-chrome/</link>
        <guid isPermaLink="true">https://getaround.tech/running-capybara-headless-chrome/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>The Tech Recruitment Process At Drivy</title>
        <dc:creator>Marc G Gauthier</dc:creator>
        <description>&lt;p&gt;I recently saw &lt;a href=&quot;https://medium.freecodecamp.com/welcome-to-the-software-interview-ee673bc5ef6&quot;&gt;another article&lt;/a&gt; highlighting the many ways in which recruitment in software development is broken. Whiteboard coding, random trivia, poorly trained interviewers… it’s all very painful and it seems to be the situation in a lot of places.&lt;/p&gt;

&lt;p&gt;However there are companies trying to turn this around. For instance I loved the “&lt;a href=&quot;https://github.com/poteto/hiring-without-whiteboards&quot;&gt;Companies that don’t have a broken hiring process&lt;/a&gt;” list, and I’m constantly working to make sure Drivy deserves its place in it.&lt;/p&gt;

&lt;p&gt;Since this is still a major pain point, I decided to share how we handle recruitment for engineering positions at Drivy. I don’t think that it’s perfect or much out of the ordinary. I’m also convinced that it’s going to evolve as it has done in the past, but it’s been working well for us and we got good feedback so far!&lt;/p&gt;

&lt;h2 id=&quot;the-interviewing-process&quot;&gt;The Interviewing Process&lt;/h2&gt;

&lt;h3 id=&quot;our-vision&quot;&gt;Our Vision&lt;/h3&gt;

&lt;p&gt;Overall there are two big things we want to check: making sure that the person has the technical capabilities to do the job, and then making sure that they will bring a lot to the company’s mission and culture.&lt;/p&gt;

&lt;p&gt;Here is basically how it goes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Phone screening&lt;/li&gt;
  &lt;li&gt;Take home assignment&lt;/li&gt;
  &lt;li&gt;“Resume” interview&lt;/li&gt;
  &lt;li&gt;Technical interview&lt;/li&gt;
  &lt;li&gt;Product interview&lt;/li&gt;
  &lt;li&gt;Interview with another team&lt;/li&gt;
  &lt;li&gt;Finalizing the hire&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This might seem that there are a lot of steps… and maybe it’s true. However we feel that it’s good for both parties if they get a good look at what working together would be like.&lt;/p&gt;

&lt;p&gt;In terms of timing, we try to be as fast as possible, so that even if you get to see a lot of people, it can be condensed in a  very tight schedule, grouping some interviews together if needed. We all know that processes that last forever are a major pain for applicants. Also most interviews don’t last more than one hour, so overall it still seems reasonable.&lt;/p&gt;

&lt;h3 id=&quot;the-process-in-more-details&quot;&gt;The Process In More Details&lt;/h3&gt;

&lt;p&gt;Let me explain the process for fullstack or backend developers. Note that your mileage might slightly vary, we don’t want to be completely rigid as we’re still young and growing. However we follow this exact process in most cases.&lt;/p&gt;

&lt;h4 id=&quot;phone-screening&quot;&gt;Phone Screening&lt;/h4&gt;

&lt;p&gt;After applying, the applicant will quickly get a first skype call with someone in charge of recruitment. This first contact is usually a good place for the applicant to ask more information about the position and the company, as well as explaining why they’re interested in Drivy.&lt;/p&gt;

&lt;h4 id=&quot;take-home-assignment&quot;&gt;Take Home Assignment&lt;/h4&gt;

&lt;p&gt;If the applicant is still interested, they will be given an assignment to complete at home. We spent a lot of time trying to provide something that can be completed in an acceptable amount of time while still reflecting what the job will be. &lt;a href=&quot;https://github.com/drivy/jobs/tree/master/backend&quot;&gt;You can check it on Github&lt;/a&gt;, it is based on our internal accounting system which is a massive part of the app since we are a marketplace and we have to deal with a lot of money moving around.&lt;/p&gt;

&lt;p&gt;Once the applicant has done the assignment, it is reviewed by people in the engineering team. We mostly check if the applicant can write clear and simple object oriented code and is able to justify main decisions if necessary.&lt;/p&gt;

&lt;p&gt;If it’s not considered good enough (the standard varies depending on the position), the process stops here and we try to give some insights on what to improve.&lt;/p&gt;

&lt;h4 id=&quot;resume-interview&quot;&gt;“Resume” Interview&lt;/h4&gt;

&lt;p&gt;The next step is an interview with one of the senior member of the team - most likely me. There we discuss what they’ve done in the past, the position, motivation to work for Drivy and so on.&lt;/p&gt;

&lt;p&gt;If we didn’t talk about salary range during the screening, it will be discussed here.&lt;/p&gt;

&lt;h4 id=&quot;technical-interview&quot;&gt;Technical Interview&lt;/h4&gt;

&lt;p&gt;If this goes well, they move to an onsite technical interview with a couple of developers from the team. Depending on the position, the exact process and the people involved can vary, but the main objective is to talk about code.&lt;/p&gt;

&lt;p&gt;The applicant is asked to bring code written before. It can be open source code, a side project, client work or a small subset of the codebase from a previous position (if this is something the candidate is allowed to do). We’ll sit around the applicant’s computer and challenge the choices made and how it turned out. We believe that it’s a good way to discover what a candidate is capable of. Of course we know that all code in a codebase can’t be perfect, but there’s a lot to be learned in the tradeoffs and teachings of old code.&lt;/p&gt;

&lt;p&gt;We’re proud of our own code and often show pieces of it  to candidates at this point in the process to see how they react to it and grasp it. This also helps them to get some confidence that they won’t be working on spaghetti code.&lt;/p&gt;

&lt;h4 id=&quot;product-interview&quot;&gt;Product Interview&lt;/h4&gt;

&lt;p&gt;After this there is an interview with someone working a lot with product management. This is important because we consider ourselves a product company, so we are looking for people interested in what we are building. It is also a good opportunity for applicants to ask more questions about the project.&lt;/p&gt;

&lt;h4 id=&quot;interview-with-another-team&quot;&gt;Interview With Another Team&lt;/h4&gt;

&lt;p&gt;Finally the applicant has a small interview with someone from another team - it could be the person responsible for international expansion, the head of communication or someone at customer support. This is a way to make sure every department is aligned on who we hire as well as show the applicant what the rest of their future colleagues look like. It’s also an opportunity to for the applicant to get insights about the company’s culture - not just the engineering team.&lt;/p&gt;

&lt;h4 id=&quot;finalizing-the-hire&quot;&gt;Finalizing The Hire&lt;/h4&gt;

&lt;p&gt;Once everybody agrees that the person would be a good fit, we ask for past references to contact. In every case so far it’s been a formality, but we prefer to be safe on this one.&lt;/p&gt;

&lt;p&gt;If this goes well we discuss all the remaining topics, like finalizing the exact offer.&lt;/p&gt;

&lt;h2 id=&quot;our-experience-with-this-process&quot;&gt;Our Experience With This Process&lt;/h2&gt;

&lt;p&gt;Personally I think that this process works quite well. We avoid the pitfalls of whiteboard interviews, but still get a great sense of the technical capabilities of applicants.&lt;/p&gt;

&lt;p&gt;It is a bit time consuming, but hiring is too important to be cutting corners, and I feel like the amount of time we ask of applicants remains reasonable. We also had a lot of people - that we hired or not - telling us that the process was a good experience because the exercices and conversations were interesting. The current team is also a great example that this process helps us find the right people.&lt;/p&gt;

&lt;p&gt;Of course, like everything we do, this process will evolve and this post will probably be outdated soon. However the guiding principles of trying to have an interview process close to the reality of the job will remain the same.&lt;/p&gt;

&lt;h2 id=&quot;note-on-sharing-information-about-the-open-positions&quot;&gt;Note On Sharing Information About The Open Positions&lt;/h2&gt;

&lt;p&gt;I mostly talked about the process after a candidate applied, so here is a little information about how we hope to get candidate’s attention.&lt;/p&gt;

&lt;p&gt;All &lt;a href=&quot;https://www.drivy.com/jobs&quot;&gt;our job offers&lt;/a&gt; try to give a sense of what the position is going to be about. We don’t shy away from &lt;a href=&quot;/about/&quot;&gt;sharing info about our stack&lt;/a&gt;, &lt;a href=&quot;https://www.drivy.com/open&quot;&gt;our projects&lt;/a&gt; or &lt;a href=&quot;/bug-management/&quot;&gt;our internal processes&lt;/a&gt;. We also want to be inclusive by not requiring a specific degree, opening remote for certain positions and making otherselves visibles to as many communities as we can.&lt;/p&gt;

&lt;figure&gt;
  &lt;img alt=&quot;MySQL 5.7 presentation at Drivy&quot; src=&quot;/assets/posts/hiring-process/michael_mysql_parisrb.jpg&quot; /&gt;
  &lt;figcaption&gt;
    &lt;a href=&quot;https://twitter.com/mickeyben&quot;&gt;Michael&lt;/a&gt; presenting MySQL 5.7 features during a ParisRB Meetup at Drivy
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;We are present in meetups so that anyone can meet a Drivy employee and ask questions about our open positions and have an informal chat. For instance lately we hosted &lt;a href=&quot;https://www.meetup.com/parisrb/events/231737339/&quot;&gt;ParisRB&lt;/a&gt; (large Ruby meetup), &lt;a href=&quot;https://twitter.com/womenonrails/status/874325055395831811&quot;&gt;Women On Rails&lt;/a&gt; and &lt;a href=&quot;https://www.meetup.com/Paris-Ruby-Workshop/events/236048396/&quot;&gt;Paris Ruby Workshop&lt;/a&gt;. Our developers also tend to go to &lt;a href=&quot;https://drivy.engineering/android-makers/&quot;&gt;various conferences&lt;/a&gt; and get to chat with a lot of people there as well.&lt;/p&gt;

</description>
        
          <description>&lt;p&gt;I recently saw &lt;a href=&quot;https://medium.freecodecamp.com/welcome-to-the-software-interview-ee673bc5ef6&quot;&gt;another article&lt;/a&gt; highlighting the many ways in which recruitment in software development is broken. Whiteboard coding, random trivia, poorly trained interviewers… it’s all very painful and it seems to be the situation in a lot of places.&lt;/p&gt;

</description>
        
        <pubDate>Mon, 03 Jul 2017 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/tech-recruitment-process/</link>
        <guid isPermaLink="true">https://getaround.tech/tech-recruitment-process/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Designing state machines</title>
        <dc:creator>Adrien Di Pasquale</dc:creator>
        <description>&lt;p&gt;State machines are a very powerful tool but are often underused in web development. The design process forces you to think hard about how you want to model your data, about the different objects lifecycles, about the way you want to expose your data and communicate with your whole team, and about the upcoming evolutions.&lt;/p&gt;

&lt;p&gt;Going through this process takes a lot of efforts but is worthwile, it brings a lot of structure to your code and your team. Also, the actual implementation of a state machine is usually very simple.&lt;/p&gt;

&lt;h2 id=&quot;intro--state-machines-are-simple&quot;&gt;Intro : State machines are simple&lt;/h2&gt;

&lt;p&gt;A simplified state machine for a a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Movie&lt;/code&gt; object can be represented like this :&lt;/p&gt;

&lt;figure&gt;
  &lt;img alt=&quot;&quot; src=&quot;/assets/posts/2017-06-16-designing-state-machines/Movie_state.svg&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;And this diagram was generated with the following Ruby code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# first, gem install 'state_machine'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Movie&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;state_machine&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:initial&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:in_production&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:finish_shooting&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;transition&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:in_production&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:in_theaters&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;movie&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Movie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;movie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# in_production&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;movie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;finish_shooting!&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# will raise if something goes wrong&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;movie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;state&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# in_theaters&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# to generate the diagram : $ rake state_machine:draw CLASS=Movie FORMAT=svg&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;see the &lt;a href=&quot;https://github.com/pluginaweek/state_machine&quot;&gt;state_machine&lt;/a&gt; gem for more information&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;design-objectives&quot;&gt;Design objectives&lt;/h2&gt;

&lt;p&gt;In the context of a fast evolving product and a growing team, the aimed qualities of a state machine should be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;simple&lt;/strong&gt; : so it’s easy to understand and feels natural for everyone, not only developers.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;useful&lt;/strong&gt; : it should help developers build and maintain the app, not be an obstacle&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;adaptable&lt;/strong&gt; : it should be thought out to be evolutive&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is no one-size-fits-all solution and a lot of questions will have many valid solutions. An infinity of state machines could represent your data, and you could make your app work with them. You need to pick the one that makes the most sense for your needs and your vision.&lt;/p&gt;

&lt;p&gt;Here are some tips to help you make these decisions:&lt;/p&gt;

&lt;h2 id=&quot;tip-1--talk-with-everyone&quot;&gt;Tip 1 : Talk with everyone&lt;/h2&gt;

&lt;p&gt;Designing a state machine should be a collaborative process. It is important that developers share their opinions and agree on a structure, so they will be willing to use it afterwards.&lt;/p&gt;

&lt;p&gt;It is also extremely important to go talk to people with other roles in your team, to understand how they talk about the data and how they interact with it.&lt;/p&gt;

&lt;p&gt;Here is a quick example to illustrate the diversity of viewpoints:&lt;/p&gt;

&lt;figure&gt;
  &lt;img alt=&quot;&quot; src=&quot;/assets/posts/2017-06-16-designing-state-machines/MovieForSupplyTeam_state.svg&quot; /&gt;
  &lt;figcaption&gt;
    a movie seen by the Netflix Supply Team
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
  &lt;img alt=&quot;&quot; src=&quot;/assets/posts/2017-06-16-designing-state-machines/MovieForMarketingTeam_state.svg&quot; /&gt;
  &lt;figcaption&gt;
    a movie seen by the Netflix Marketing Team
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;tip-2--accept-that-some-choices-are-partial&quot;&gt;Tip 2 : Accept that some choices are partial&lt;/h2&gt;

&lt;p&gt;Unfortunately, when designing state machines it is often hard to reach an unanimous and universal truth. As pointed above, different teams opinions are all valid in their context. Also, as the product evolves, the truth evolves.&lt;/p&gt;

&lt;p&gt;It is your responsibility to decide what to preserve from the different opinions and what you will go against. It is important that you have all the elements to decide, and make a conscious and reasoned choice, so you can justify it to other people.&lt;/p&gt;

&lt;p&gt;Don’t rush, reaching consensus is a time-consuming process.&lt;/p&gt;

&lt;h2 id=&quot;tip-3--do-not-over-anticipate-the-future&quot;&gt;Tip 3 : Do not over-anticipate the future&lt;/h2&gt;

&lt;p&gt;In the context of a startup like Drivy, the product roadmap and the strategic directions are likely to change often. Some decisions will reveal to have been short-sighted, sub-objects may appear, you may have to add extra transitions for edge-cases, etc…&lt;/p&gt;

&lt;p&gt;It is useful to think about the degrees of freedom your design leaves open. You can orient and pick these degrees in the directions you think are more likely to happen.&lt;/p&gt;

&lt;p&gt;When you do not feel extremely confident about the forecast evolutions, it is a good advice to try and make the least engaging choices. It often boils down to creating the least states possible, because it is easier to split them later than to merge them (&lt;em&gt;from our experience at least, your mileage may vary&lt;/em&gt;).&lt;/p&gt;

&lt;h2 id=&quot;tip-4--store-everything&quot;&gt;Tip 4 : Store everything&lt;/h2&gt;

&lt;p&gt;Storing only the current state on objects is dangerous. Investigate objects in corrupt states is complicated, as you cannot understand how they ended up there. Also, when you have to make changes to your state machine, you have much less flexibility on how to migrate objects because you cannot distinguish them.&lt;/p&gt;

&lt;p&gt;We strongly recommend you archive all the different states, transitions and events that objects go through. A versioning library like &lt;a href=&quot;https://github.com/airblade/paper_trail&quot;&gt;the papertrail gem&lt;/a&gt; can help in that matter.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This was initially presented as a &lt;a href=&quot;https://github.com/adipasquale/state-machines-lightning-talk&quot;&gt;talk at Paris.rb&lt;/a&gt; on 05/07/2016&lt;/em&gt;&lt;/p&gt;
</description>
        
          <description>&lt;p&gt;State machines are a very powerful tool but are often underused in web development. The design process forces you to think hard about how you want to model your data, about the different objects lifecycles, about the way you want to expose your data and communicate with your whole team, and about the upcoming evolutions.&lt;/p&gt;
</description>
        
        <pubDate>Mon, 26 Jun 2017 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/designing-state-machines/</link>
        <guid isPermaLink="true">https://getaround.tech/designing-state-machines/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Android Makers 2017 Highlights</title>
        <dc:creator>Romain Guefveneu &amp; Jean-Élie Le Corre</dc:creator>
        <description>&lt;p&gt;Android Makers is the biggest Android event in France, it occurred last month in Paris. It’s always a great time to connect and learn from the Android community. For this first edition, a lot of great speakers from all around the world were in Paris.
This post is not intended to dive into the details of each conference, but more about an overview, giving you enough insights to chose the right conference to playback.&lt;/p&gt;

&lt;h2 id=&quot;modules---octo&quot;&gt;Modules - Octo&lt;/h2&gt;

&lt;p&gt;Our friends at Octo talked about how they improved compilation time, test time and how to better split your app into reusable components.&lt;/p&gt;

&lt;p&gt;They worked on the Meetic app, if you work on a big app or on multiple apps for the same company, you certainly faced the same kind of issue:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Compilation time is growing up&lt;/li&gt;
  &lt;li&gt;It becomes slower and slower to launch tests&lt;/li&gt;
  &lt;li&gt;Multiple apps using the same component and repeating code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They finally split the app into modules:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It dramatically improved the build time&lt;/li&gt;
  &lt;li&gt;They could share the message component between 2 apps&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;one-year-of-clean-architecture-the-good-the-bad-and-the-bob---octo&quot;&gt;One year of Clean Architecture: the Good, the Bad and the Bob - Octo&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=IOzZQXZb91E&quot;&gt;Watch on YouTube&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Octo again, on how they applied the principle of Uncle Bob’s clean architecture on Android.&lt;/p&gt;

&lt;p&gt;By splitting the responsibility of each layer of your app, you improve the testability and flexibility.&lt;/p&gt;

&lt;p&gt;Takeaways:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Easier to onboard new developers in big teams on big projects because of the conventions to follow&lt;/li&gt;
  &lt;li&gt;Be pragmatic, adapt the architecture to your need and team size, don’t over-engineer if it’s not necessary&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;make-your-app-work-offline---virtuo&quot;&gt;Make your app work offline - Virtuo&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;../assets/posts/2017-05-17-android-makers/virtuo.jpg&quot; alt=&quot;Virtuo&quot; /&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=0WhDgKY9j-s&quot;&gt;Watch on YouTube&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Virtuo is a new generation car rental agency. Your smartphone replaces the old rental agency.&lt;/p&gt;

&lt;p&gt;The main feature of the app is to be the virtual key responsible to open the car.
As the cars can be parked in an underground parking, the app must work offline.&lt;/p&gt;

&lt;p&gt;Takeaways:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You can use http headers &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max-age&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max-stale&lt;/code&gt; to fine tune your client cache&lt;/li&gt;
  &lt;li&gt;UX matters: instead of downloading the virtual key in the background without telling the user, they enforce the user to click on a big “Download the key” button. That way, you are sure the key is on the phone when it is offline in the parking.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-fabulous-journey-to-material-design-award---fabulous&quot;&gt;The Fabulous Journey to Material Design Award - Fabulous&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;../assets/posts/2017-05-17-android-makers/fabulous.png&quot; alt=&quot;Fabulous&quot; /&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=8o6DnPPxD1I&quot;&gt;Watch on YouTube&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While I would prefer more conferences about UX and UI at Android Makers, this one by the co-founder of Fabulous was really great!&lt;/p&gt;

&lt;p&gt;The particularity of Fabulous: be Android first. Why? There are a lot more users on Android, and they are willing to pay for great experiences.&lt;/p&gt;

&lt;p&gt;To achieve such a great experience means that the whole company must be sensible to design and user experience.&lt;/p&gt;

&lt;p&gt;Takeaways:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Design first in the specs flow&lt;/li&gt;
  &lt;li&gt;Context is super important to re-engage users&lt;/li&gt;
  &lt;li&gt;Great illustrations give your app personality&lt;/li&gt;
  &lt;li&gt;You can A/B tests in the app and A/B test Google Play Page to improve conversion&lt;/li&gt;
  &lt;li&gt;Always take the user feedbacks into account when you iterate on your product&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-art-of-organizing-resources---philips-hue&quot;&gt;The ART of organizing resources - Philips Hue&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=AjSgAHZT9a0&quot;&gt;Watch on YouTube&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All computer scientists knows that naming things is hard. As your app grows, assets multiplies and it can quickly becomes a mess if you don’t follow strict naming rule.
Jeroen Mols, from Philips Hue, suggests this simple pattern:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/posts/2017-05-17-android-makers/whatwheredescriptionsize.jpg&quot; alt=&quot;`WHAT_WHERE_DESCRIPTION_SIZE`&quot; /&gt;
For example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;activity_main&lt;/code&gt; for activities layouts&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;linearlyaout_main_fragmentcontainer&lt;/code&gt; for views&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;all_infoicon_small&lt;/code&gt; for drawables&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It makes everything clear!&lt;/p&gt;

&lt;h2 id=&quot;taking-care-of-ui-test---novoda&quot;&gt;Taking care of UI Test - Novoda&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=dcWTq7MyrBQ&quot;&gt;Watch on YouTube&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Keep your tests clean!
When using Espresso, UI tests look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;autoCompleteTextView_clickAndCheck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Type text into the text view&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;onView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;auto_complete_text_view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;typeTextIntoFocusedView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;South &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;closeSoftKeyboard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Tap on a suggestion.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;onView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;South China Sea&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;inRoot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withDecorView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getWindow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDecorView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))))&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// By clicking on the auto complete term, the text should be filled in.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;onView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;auto_complete_text_view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;South China Sea&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With  &lt;a href=&quot;https://martinfowler.com/bliki/PageObject.html&quot;&gt;PageObject Pattern&lt;/a&gt;, it’ll look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;autoCompleteTextView_clickAndCheck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;SearchScreen&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;searchScreen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SearchScreen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;searchScreen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;givenKeyword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;South &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;tapOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;South China Sea&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertTextMatches&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;South&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;China&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sea&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It’s easier to read, reuse and maintain!&lt;/p&gt;

&lt;h2 id=&quot;deep-android-integration---uber&quot;&gt;Deep Android Integration - Uber&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=5C5bgY84WXw&quot;&gt;Watch on YouTube&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ty Smith from Uber reminds us that a good user experience also consist in a deep system integration.
It’s not only about having a UI, but also about using right system APIs such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.android.com/training/app-indexing/deep-linking.html&quot;&gt;Deep linking&lt;/a&gt;: redirect URLs to your app&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.android.com/training/sync-adapters/index.html&quot;&gt;SyncAdapter&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://developer.android.com/training/id-auth/identify.html&quot;&gt;AcountManager&lt;/a&gt;: save users settings and information in the cloud&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.android.com/guide/topics/providers/content-providers.html&quot;&gt;ContentProvider&lt;/a&gt;: if you need to share data between apps&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Pro Tip&lt;/em&gt;: You can listen for &lt;a href=&quot;https://developers.google.com/android/reference/com/google/android/gms/tagmanager/InstallReferrerReceiver&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INSTALL_REFERRER&lt;/code&gt;&lt;/a&gt; broadcast to show the relevant screen after an install!&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;A lot of great talks for this first Android Makers conference in Paris. It’s always a pleasure to learn from other developers and other people in the industry.
It’s also a great moment to meet passionate people and to connect with others at the after-hours events.
See you next year!&lt;/p&gt;
</description>
        
          <description>&lt;p&gt;Android Makers is the biggest Android event in France, it occurred last month in Paris. It’s always a great time to connect and learn from the Android community. For this first edition, a lot of great speakers from all around the world were in Paris.
This post is not intended to dive into the details of each conference, but more about an overview, giving you enough insights to chose the right conference to playback.&lt;/p&gt;
</description>
        
        <pubDate>Tue, 23 May 2017 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/android-makers/</link>
        <guid isPermaLink="true">https://getaround.tech/android-makers/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Story of a junior developer at Drivy</title>
        <dc:creator>Jean Anquetil</dc:creator>
        <description>&lt;p&gt;Hey, I’m Jean, a Junior Full Stack Developer at Drivy. I joined the company after graduating from a two-month full stack program at &lt;a href=&quot;https://www.lewagon.com&quot; target=&quot;_blank&quot;&gt;Le Wagon&lt;/a&gt;. Except from being passionate about tech at large, I didn’t know anything about web development last year but from now on I am coding full time and I love it! Here is my feedback after 6 months at Drivy.&lt;/p&gt;

&lt;h1 id=&quot;dont-panic-if-you-dont-understand-anything&quot;&gt;Don’t panic if you don’t understand anything&lt;/h1&gt;

&lt;p&gt;The &lt;a href=&quot;/about#our-tech-stack&quot; target=&quot;_blank&quot;&gt;stack&lt;/a&gt; was definitely new to me, the only web dev experience I had was the Bootcamp. I had almost never heard about these things such as Sidekiq, Rspec, FactoryGirl, Webpack, Haml or the basic design patterns… But it doesn’t matter, I was here to get experience and to give in to panic wouldn’t have helped me into learning step-by-step.&lt;/p&gt;

&lt;p&gt;At first I was asked to work on basic static pages, which seems like nothing but actually it made me feel quickly confident in my ability to contribute to the product. Besides that, I worked on asynchronous emails and then I completed my first product feature. Slowly but surely I’m discovering the codebase, the different services plugged to it, the good practices, and I’m finding my niche in the team!&lt;/p&gt;

&lt;p&gt;After all, when you start working on a five-year-old project, anyone has to get one’s bearings, right?&lt;/p&gt;

&lt;h1 id=&quot;dont-be-afraid-to-ask&quot;&gt;Don’t be afraid to ask&lt;/h1&gt;

&lt;p&gt;I work with 13 brilliant developers and even if I have to keep in mind that I could make them loose time, I can’t expect them to keep an eye on me all the time. In other words, I guess they expect me to ask for help if needed. It seemed pretty tricky to me at first, I was often wondering if my questions were relevant.&lt;/p&gt;

&lt;p&gt;I think the most important is to be honest with you and your colleagues. If you feel stuck then take a look at Stack Overflow, look for something similar in the codebase, read the documentation and if you still have no answers: that’s not a big deal, just ask your colleagues but the most important thing is to formulate well your issue.&lt;/p&gt;

&lt;p&gt;Formulating my issue gives me a global view on it and it often &lt;a href=&quot;https://en.wikipedia.org/wiki/Rubber_duck_debugging&quot; target=&quot;_blank&quot;&gt;highlights new tracks to look at&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;benefits-of-working-on-a-high-traffic-app&quot;&gt;Benefits of working on a high traffic app&lt;/h1&gt;

&lt;h2 id=&quot;testing&quot;&gt;Testing&lt;/h2&gt;
&lt;p&gt;Working on an high traffic app such as Drivy also gives me the opportunity to face scalability matters. As we have millions+ users the smallest code update can bring bugs. So one of the first skills I had to improve when arriving in the company was testing.&lt;/p&gt;

&lt;p&gt;I don’t work alone on the codebase so beyond the fact that my code has to be easily maintainable by the others, adding tests is also a way to prevent another developer from breaking what I just did. And honestly, writing tests is - according to me - one of the best answers to fight stress generated by deploying new features.&lt;/p&gt;

&lt;p&gt;I also learnt to do benchmarks: what happens if I run this query on millions+ of records? Should I consider a denormalization for this data? So using benchmarks let me justify using this or that approach.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Benchmark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bm&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Arel scope:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rental&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3577388&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;readable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Denormalized scope:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rental&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3577388&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is_readable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Quickly comparing an Arel scope with a denormalized one.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;release-flow&quot;&gt;Release Flow&lt;/h2&gt;
&lt;p&gt;Another concept I quickly learnt not to ignore in a feature development: what is my release flow?&lt;/p&gt;

&lt;p&gt;This is super important to consider when you start working on a new feature. Should I ship my migration first, then my code? Am I doing a rollbackable migration or not? Could it lock the database? What if users are browsing the page I am updating?&lt;/p&gt;

&lt;p&gt;Thus, I’m always wondering if the feature I’m working on is splittable into smaller ones: that will be easier to review, easier to test and less painful to release.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/assets/posts/2017-05-15-story-of-a-junior-developer-at-drivy/release_flow_with_migration.jpg&quot; alt=&quot;Release Flow with migration&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;Releasing first the migration in a separate commit then the code makes it easier to do a zero-downtime deployment.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;communication&quot;&gt;Communication&lt;/h2&gt;
&lt;p&gt;I realized that working as developer doesn’t mean keeping to yourself. For instance, I like to make an effort to prepare my pull requests: well explain the context, which design patterns I used, what my release flow is, and maybe give some screenshots.&lt;/p&gt;

&lt;p&gt;That sounds naive but this is to make the reviewer comfortable and let them focus on what I did and why I did it this way. That also helps me to see my work’s big picture and feel justified in asking for advice.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/assets/posts/2017-05-15-story-of-a-junior-developer-at-drivy/pull_request_example.png&quot; alt=&quot;Release Flow with migration&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;Pull Request with explanations.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Another important thing about communication is that you also work with non-developer.&lt;/p&gt;

&lt;p&gt;As a Junior dev I can’t afford to loose time working on misunderstood requirements. So there is a challenge in converting the requirements into well defined specs by doing short, prepared and focused meeting especially with the help of our product managers.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Finally, I strongly believe that working on a real project with a real team is the best way to keep learning and improving your skills: you are surrounded by smart people who let you focus on things that matter.&lt;/p&gt;

&lt;p&gt;Day after day I feel more confident in bringing my contributions to the project I’m working on without neglecting the fact that I can have a serious impact on it.&lt;/p&gt;
</description>
        
          <description>&lt;p&gt;Hey, I’m Jean, a Junior Full Stack Developer at Drivy. I joined the company after graduating from a two-month full stack program at &lt;a href=&quot;https://www.lewagon.com&quot; target=&quot;_blank&quot;&gt;Le Wagon&lt;/a&gt;. Except from being passionate about tech at large, I didn’t know anything about web development last year but from now on I am coding full time and I love it! Here is my feedback after 6 months at Drivy.&lt;/p&gt;
</description>
        
        <pubDate>Thu, 18 May 2017 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/story-of-a-junior-developer-at-drivy/</link>
        <guid isPermaLink="true">https://getaround.tech/story-of-a-junior-developer-at-drivy/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Code Simplicity - Value Objects</title>
        <dc:creator>Nicolas Zermati</dc:creator>
        <description>&lt;p&gt;Understanding the application’s state at a given point in time is valuable. You
and your team must make efforts to keep the cognitive load required to reason
about its state as low as possible.&lt;/p&gt;

&lt;p&gt;Application’s state is often based on classes such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Numeric&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Array&lt;/code&gt;, etc. In this article we’ll see how to abstract business-specific
objects on top of those primitive types.&lt;/p&gt;

&lt;h3 id=&quot;a-simple-specification&quot;&gt;A simple specification&lt;/h3&gt;

&lt;p&gt;I need to model a car. A car is simply defined by its serial number and its
mileage. In addition to this, a car will have an interface to update distance
that have been driven. When a car is created the serial number is generated
and the mileage is set to zero.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@serial_number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SerialNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@mileage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;drive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@mileage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distance&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here I used another module to generate the serial number. It isn’t the purpose
of the article so let’s ignore it for this time. To express the distance, I used
a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Numeric&lt;/code&gt; instance. Indeed, nothing had been said explicitly in the
specification.&lt;/p&gt;

&lt;h3 id=&quot;fighting-implicitness&quot;&gt;Fighting implicitness&lt;/h3&gt;

&lt;p&gt;Here I implicitly expect the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;distance&lt;/code&gt; passed to the drive method to be
positive. It obiously is because a negative distance make no sense!&lt;/p&gt;

&lt;p&gt;However, something looking obvious now to you might not look the same to someone
else or in the future. A code with a lot of implicit constraints is hard to trust
because for each change you’ll have to carry in your head all those implicit
constraints and make sure they are still enforced. I don’t know about you but
this looks scary as hell to me.&lt;/p&gt;

&lt;p&gt;There is different way of fighting this implicitness. We could try to add
safeties to our code to mitigate the unexpected inputs. It would look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;drive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@mileage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;abs&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Tada! No more problem having a negative number as argument!&lt;/p&gt;

&lt;p&gt;This is, in my opinion, worse than the first version. Now there is some
misplaced code in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Car&lt;/code&gt; class. It raises questions that makes no sense.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Why a distance would be negative?&lt;/li&gt;
  &lt;li&gt;Is that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#abs&lt;/code&gt; call really needed?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those are hard questions, especially when it isn’t your code, when it is in a
critical part of the application, and it has been there forever. Those questions
are hard because some would find obvious that a distance must always be
positive.&lt;/p&gt;

&lt;p&gt;Other &lt;a href=&quot;http://archive.adaic.com/standards/83rat/html/ratl-04-04.html&quot;&gt;programming&lt;/a&gt; &lt;a href=&quot;https://coq.inria.fr/library/Coq.Init.Nat.html&quot;&gt;environments&lt;/a&gt; helps you express that kind of
constraints using advanced type systems. Ruby, on the other hand, is more
permissive and the responsibility of making things explicit, relies on the
design you’ll come with.&lt;/p&gt;

&lt;h3 id=&quot;the-right-battlefield&quot;&gt;The right battlefield&lt;/h3&gt;

&lt;p&gt;The issue is that we have no place to express that implicit constraint about the
distance being positive. The car shouldn’t be responsible to manage this. Lets
fight the distance battle on a more appropriate battlefield: in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Distance&lt;/code&gt;
class.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Distance&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ArgumentError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;A distance must be positive&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;vi&quot;&gt;@value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;kind_of?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ArgumentError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Only another distance can be added&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;Distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:value&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:value&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@serial_number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SerialNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@mileage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;drive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@mileage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distance&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Distance&lt;/code&gt; class isn’t perfect but the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Car&lt;/code&gt; class is more robust than it
was and even more expressive. Distance is a &lt;em&gt;value object&lt;/em&gt; that we created in
response to a &lt;em&gt;primitive obsession&lt;/em&gt; &lt;em&gt;code smell&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In this example, we made the concept of a distance explicit. It allowed us to
express the constraints related to the concept itself.&lt;/p&gt;

&lt;p&gt;One could argue that it was shorter with the implicit version. It was shorter
to write. Code is read way more often than written. Once the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;distance&lt;/code&gt; class is
done, no need to read it each time you use it. And finally, if you only look at
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Car&lt;/code&gt; class, the last version express more and is safer.&lt;/p&gt;

&lt;h3 id=&quot;going-further&quot;&gt;Going further&lt;/h3&gt;

&lt;p&gt;Value objects are not only good for giving a home to implicit constraints. They
are also good to aggregate things that belong together. For instance, an amount
of money will need a currency and an amount. A value object can tie them
together and prevent operations mixing currencies.&lt;/p&gt;

&lt;p&gt;Internet is
&lt;a href=&quot;https://www.martinfowler.com/bliki/ValueObject.html&quot;&gt;full&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Value_object&quot;&gt;of&lt;/a&gt;
&lt;a href=&quot;https://medium.com/@franzejr/value-object-in-ruby-89b5e3b6b5f9&quot;&gt;articles&lt;/a&gt;
&lt;a href=&quot;http://wiki.c2.com/?ValueObject&quot;&gt;about&lt;/a&gt;
&lt;a href=&quot;https://blog.dnsimple.com/2016/10/overcoming-primitive-obsession/&quot;&gt;value&lt;/a&gt;
&lt;a href=&quot;https://blog.dnsimple.com/2016/11/purposes-and-properties-of-value-objects/&quot;&gt;objects&lt;/a&gt;!
Read them all as each of them would give you a different perspective on this topic.&lt;/p&gt;

</description>
        
          <description>&lt;p&gt;Understanding the application’s state at a given point in time is valuable. You
and your team must make efforts to keep the cognitive load required to reason
about its state as low as possible.&lt;/p&gt;
</description>
        
        <pubDate>Tue, 09 May 2017 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/code_simplicity_value_objects/</link>
        <guid isPermaLink="true">https://getaround.tech/code_simplicity_value_objects/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Code Simplicity - Introduction</title>
        <dc:creator>Nicolas Zermati</dc:creator>
        <description>&lt;p&gt;This is an introduction to a serie of articles about &lt;em&gt;code simplicity&lt;/em&gt;. The
concept itself is a bit abstract but don’t worry: I aim to provide some good
examples and explainations for you to get something out of it!&lt;/p&gt;

&lt;p&gt;In this first article I’ll share some context about that whole code simplicity
thing.&lt;/p&gt;

&lt;h3 id=&quot;building-applications&quot;&gt;Building applications&lt;/h3&gt;

&lt;p&gt;There are different kinds of applications. Most of the application I wrote
myself were web applications. They could be defined as &lt;em&gt;state&lt;/em&gt; associated with
a list of &lt;em&gt;operations&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;state&lt;/strong&gt; of the application includes obviously what’s in the database as
well as the emails that have been sent, payments that have been made, logs,
cached contents, etc.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;operations&lt;/strong&gt; transform the current state of your application to the new
one. For instance, when you Tweet something, you’re updating Twitter’ state.
Even when you display your feed, Twitter updates its state regarding the ads it
showed, the last tweets you’ve seen, etc.&lt;/p&gt;

&lt;p&gt;The portion of &lt;em&gt;code simplicity&lt;/em&gt; relating to the previous definitions is that
reading simple code helps you better understand the application’s state and how
it evolves over time. If you acknowledge the difference between state and
operations then you’ll tend to write code in an intention-revealing way that
will contribute to the understanding of future readers.&lt;/p&gt;

&lt;p&gt;Keep in mind that we spend more time reading than writing code.&lt;/p&gt;

&lt;h3 id=&quot;why-does-it-matter&quot;&gt;Why does it matter?&lt;/h3&gt;

&lt;p&gt;If state and operations never needed to evolve we wouldn’t care so much about
making the code expressing them as simply as possible. But…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;application grows: new feature need to be added,&lt;/li&gt;
  &lt;li&gt;requirements change: old features need to be updated,&lt;/li&gt;
  &lt;li&gt;code isn’t perfect: bugs need to be fixed,&lt;/li&gt;
  &lt;li&gt;teams get bigger: new hires need to understand the application,&lt;/li&gt;
  &lt;li&gt;teams get smaller: remaining members need to be able to take over,&lt;/li&gt;
  &lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When either state or operations are poorly organized, it becomes longer and
harder to deal with the previous list. Time is lost trying to untangle the past,
making those actions more expensive and sometime impossible to achieve.&lt;/p&gt;

&lt;h3 id=&quot;code-simplicity-finally&quot;&gt;Code simplicity, finally!&lt;/h3&gt;

&lt;p&gt;Now that I gave more context, I can afford to give you my definition!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Code simplicity is a way to get changes in your application, through both
years and people, at a low and constant cost.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’m not saying that getting there is achieved only by code simplicity. I’m
saying that without simple code, you’ll have a hard time.&lt;/p&gt;

&lt;h3 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h3&gt;

&lt;p&gt;As I said this article was an introduction. In the next articles we’re going to
explore examples showing situation where code simplicity could be enhanced. Here
are the list of the following articles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/code_simplicity_value_objects/&quot;&gt;Express the application’s state better with value objects&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/code_simplicity_command_pattern/&quot;&gt;Split state from operations with the the Command pattern&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/code_simplicity_reading_levels/&quot;&gt;Offer various levels of reading by (ab)using methods&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Maintain invariants by raising often&lt;/li&gt;
  &lt;li&gt;Protect your state with preconditions&lt;/li&gt;
  &lt;li&gt;More to be announced!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ll update the list with links as they are published!&lt;/p&gt;
</description>
        
          <description>&lt;p&gt;This is an introduction to a serie of articles about &lt;em&gt;code simplicity&lt;/em&gt;. The
concept itself is a bit abstract but don’t worry: I aim to provide some good
examples and explainations for you to get something out of it!&lt;/p&gt;
</description>
        
        <pubDate>Mon, 08 May 2017 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/code_simplicity_introduction/</link>
        <guid isPermaLink="true">https://getaround.tech/code_simplicity_introduction/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>MySQL Evolution - From 5.6 to 8.0</title>
        <dc:creator>Michael Bensoussan</dc:creator>
        <description>&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;dc99328c1c8748b6b9443a6388eb82df&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

</description>
        
          <description>&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;dc99328c1c8748b6b9443a6388eb82df&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

</description>
        
        <pubDate>Tue, 02 May 2017 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/mysql-evolution/</link>
        <guid isPermaLink="true">https://getaround.tech/mysql-evolution/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Editing your git history with rebase for cleaner pull requests</title>
        <dc:creator>Adrien Siami</dc:creator>
        <description>&lt;p&gt;At Drivy, we make extensive use of pull requests to ensure that our code is up to our standards and to catch possible issues.&lt;/p&gt;

&lt;p&gt;Reviewing big pull requests can get tedious, that’s why we try to make them as readable as possible. This means splitting them in small commits that all make sense individually, so you can read the pull request commit by commit and understand the general direction of the code change.&lt;/p&gt;

&lt;p&gt;It’s also useful if you want to only show a part of your PR to some people. For instance, you might want the front-end developer to only look at the front-related commits.&lt;/p&gt;

&lt;h1 id=&quot;split-your-pr-commit-by-commit&quot;&gt;Split Your PR Commit by Commit&lt;/h1&gt;

&lt;p&gt;In a perfect world, you’d come up with a plan on how you want your PR to be split into commits, work on each commit sequentially, then submit your PR.&lt;/p&gt;

&lt;p&gt;Unfortunately, this is not the world we live in, and more often than not, mistakes happen and your history quickly looks like this:&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/assets/posts/2017-04-19-git-rebase-edit-history/clutter.png&quot; alt=&quot;clutter&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;Thankfully, git is super powerful and allows to rewrite history, thanks to the dreaded &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase&lt;/code&gt; command.&lt;/p&gt;

&lt;h1 id=&quot;git-rebase&quot;&gt;Git rebase&lt;/h1&gt;

&lt;p&gt;Git rebase has many usages. The main idea is that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase&lt;/code&gt; is used to apply a bunch of commits on top of a different base.&lt;/p&gt;

&lt;p&gt;In this article I’ll focus on one use case we can encounter when trying to submit a readable PR: editing past commits.&lt;/p&gt;

&lt;h2 id=&quot;editing-commits&quot;&gt;Editing commits&lt;/h2&gt;

&lt;p&gt;Let’s imagine we’re building a car sharing platform ;)
We’re working on a big redesign of the “new car” form and our history looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/posts/2017-04-19-git-rebase-edit-history/history.png&quot; alt=&quot;history&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So far so good! But we just realised that we forgot to update a wording.
The commit is already far back in the history so we can’t use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit --amend&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We could create another commit but wouldn’t it be much better to edit our “update wordings” commit as if we never forgot this wording to begin with? Let’s use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase&lt;/code&gt; to achieve just that.&lt;/p&gt;

&lt;h3 id=&quot;interactive-rebase&quot;&gt;Interactive rebase&lt;/h3&gt;

&lt;p&gt;We’re going to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase -i master&lt;/code&gt;, meaning that we want to reapply our commits on top of master, but in interactive mode (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-i&lt;/code&gt;). This will allow us to play around with each commit :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/posts/2017-04-19-git-rebase-edit-history/rebase.png&quot; alt=&quot;rebase&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here, git opens our favorite text editor and asks us what to do with each commit.&lt;/p&gt;

&lt;p&gt;By default, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pick&lt;/code&gt; will just apply the commit, but we can update each commit line to tell another story. We can also reorder the lines to have the commits applied in a different order.&lt;/p&gt;

&lt;h3 id=&quot;choosing-a-commit-to-edit&quot;&gt;Choosing a commit to edit&lt;/h3&gt;

&lt;p&gt;In our current use case, the command that we want is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;edit&lt;/code&gt;, if we replace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pick&lt;/code&gt; by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;edit&lt;/code&gt; on a commit line, when applying the commit, git will halt and yield control to us so we can do whatever we want.&lt;/p&gt;

&lt;p&gt;Let’s do it!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/posts/2017-04-19-git-rebase-edit-history/edit.png&quot; alt=&quot;edit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now let’s just save the file and quit our editor.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/posts/2017-04-19-git-rebase-edit-history/mid_rebase.png&quot; alt=&quot;rebase&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We’re now back to when we commited this first commit, the 2 others haven’t been applied yet, and we can now do our changes.&lt;/p&gt;

&lt;h3 id=&quot;applying-our-changes&quot;&gt;Applying our changes&lt;/h3&gt;

&lt;p&gt;When we’re happy with our changes, we can add them and run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit --amend&lt;/code&gt; to update the commit.&lt;/p&gt;

&lt;p&gt;Afterwards, we have to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase --continue&lt;/code&gt; to continue with the rebase and apply the next commits.&lt;/p&gt;

&lt;p&gt;In the end, we’ll keep our 3 commits, but the one we edited now contains our latest changes.&lt;/p&gt;

&lt;p&gt;Our history is clean, ready for review!&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase&lt;/code&gt; is super powerful, especially with its interactive mode. You can use it to do many things: reorder commits, merge commits together, edit past commits, split commits in several commits, remove commits completely, etc. If you want to know more about it, have a look at the &lt;a href=&quot;https://git-scm.com/docs/git-rebase#_interactive_mode&quot;&gt;official documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But as you know, with great power comes great responsibility. Rewriting the history could cause harm if you’re working on a shared branch and other developers are pulling your code, keep that in mind!&lt;/p&gt;

&lt;p&gt;Before ending this article, here’s a last piece of advice: if you find yourself lost in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase -i&lt;/code&gt; session and just want to return to the state before ever trying to rebase, the command you’re looking for is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase --abort&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Happy rebasing!&lt;/p&gt;

</description>
        
          <description>&lt;p&gt;At Drivy, we make extensive use of pull requests to ensure that our code is up to our standards and to catch possible issues.&lt;/p&gt;
</description>
        
        <pubDate>Wed, 26 Apr 2017 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/git-rebase-edit-history/</link>
        <guid isPermaLink="true">https://getaround.tech/git-rebase-edit-history/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Instrumenting Sidekiq</title>
        <dc:creator>Michael Bensoussan</dc:creator>
        <description>&lt;p&gt;As &lt;a href=&quot;https://en.drivy.com&quot;&gt;Drivy&lt;/a&gt; continues to grow, we were interested in having more insights on the performance of our jobs, their success rate and the congestion of our queues. This would help us:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Better organize our queues.&lt;/li&gt;
  &lt;li&gt;Focus our performance work on the slow and high throughtput jobs.&lt;/li&gt;
  &lt;li&gt;Eventually split some jobs in 2 or more jobs.&lt;/li&gt;
  &lt;li&gt;Add more background workers or scale our infrastructure so we stay ahead when our application is growing quickly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It also helps detect high failure rates and look at overall usage trends.&lt;/p&gt;

&lt;p&gt;To setup the instrumentation we used a Sidekiq Middleware.&lt;br /&gt;
Sidekiq supports middlewares, quite similar to Rack, which lets you hook into the job lifecycle easily.
Server-side middlewares runs around job processing and client-side middlewares runs before pushing the job to Redis.
In our case, we’ll use a server middleware so we can measure the time of the processing and know whether the job succeeded or failed.&lt;/p&gt;

&lt;p&gt;We use &lt;a href=&quot;https://github.com/influxdata/influxdb&quot;&gt;InfluxDB&lt;/a&gt; to store our metrics, so we’ll use the &lt;a href=&quot;https://github.com/influxdata/influxdb-ruby&quot;&gt;InfluxDB Ruby client&lt;/a&gt; but you could easily adapt this code to use StatsD, Librato, Datadog or any other system.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-the-influxdb-client&quot;&gt;Setting Up The InfluxDB Client&lt;/h2&gt;
&lt;p&gt;We instantiate our InfluxDB client with the following initialiser:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;INFLUX_INSTRUMENTATION&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'influxdb'&lt;/span&gt;

  &lt;span class=&quot;no&quot;&gt;INFLUXDB_CLIENT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;InfluxDB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;INFLUX_DATABASE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;udp: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;host: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;INFLUX_HOST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;port: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;INFLUX_PORT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;username: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;INFLUX_USERNAME&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;password: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;INFLUX_PASSWORD&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;time_precision: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ns'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;discard_write_errors: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’re using UDP because we chose performance over reliability. We also added the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;discard_write_errors&lt;/code&gt; flag because UDP can return (asynchronous) errors when a previous packet was received. We don’t want any kind of availability issue in our InfluxDB server to cause our instrumentation to fail. We added this flag to the official client in the &lt;a href=&quot;https://github.com/influxdata/influxdb-ruby/pull/182&quot;&gt;following PR&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note that we use a global InfluxDB connection to simplify our exemple, but if you’re in a threaded environment you might want to use a &lt;a href=&quot;https://github.com/mperham/connection_pool&quot;&gt;connection pool&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once the connection is setup, we can start extracting the following metrics:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The time the job was enqueued for - this will allow to identify queues congestion&lt;/li&gt;
  &lt;li&gt;The time the job took to perform&lt;/li&gt;
  &lt;li&gt;The success count&lt;/li&gt;
  &lt;li&gt;The fail count&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;InfluxDB also supports the concept of &lt;a href=&quot;https://docs.influxdata.com/influxdb/v1.2/concepts/glossary/#tag&quot;&gt;tags&lt;/a&gt;. Tags are indexed and are used to add metadata around the metrics. We’ll add the following tags:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;worker class name&lt;/li&gt;
  &lt;li&gt;queue name&lt;/li&gt;
  &lt;li&gt;Rails environment&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;creating-the-sidekiq-middleware&quot;&gt;Creating The Sidekiq Middleware&lt;/h2&gt;
&lt;p&gt;The middleware &lt;a href=&quot;https://github.com/mperham/sidekiq/wiki/Middleware&quot;&gt;interface&lt;/a&gt; is similar to the one used by Rack - you implement a single method named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call&lt;/code&gt;, which takes three arguments: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;worker&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;item&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;queue&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;worker&lt;/code&gt; holds the worker instance that will process the job&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;item&lt;/code&gt; is a hash that holds information about arguments, the job ID, when the job was created and when it was enqueued, …&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;queue&lt;/code&gt; holds the queue name the job is fetched from&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s the skeleton of our middleware:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Drivy::Sidekiq::Middleware::Server::Influxdb&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@influx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;influxdb :client is missing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# code goes here&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;elapsed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1000.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Our middleware is instantiated with the InfluxDB client and we added a private helper to measure the time difference in milliseconds.&lt;/p&gt;

&lt;p&gt;Now to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call&lt;/code&gt; code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;worker_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'wrapped'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;freeze&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;enqueued_for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elapsed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'enqueued_at'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;worker: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;worker_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;queue: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;env: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;series: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sidekiq&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;tags: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;values: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;count: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;enqueued_for: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enqueued_for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Here the job is processing&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;series: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sidekiq&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;tags: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;values: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;success: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;perform: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elapsed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@influx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write_points&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Exception&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;series: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sidekiq&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;tags: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;values: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;failure: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@influx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write_points&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If the job succeeds we send a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;success&lt;/code&gt; point with our tags and the time the job ran (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;perform&lt;/code&gt;). If it fails, we only send a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;failure&lt;/code&gt; point with tags.&lt;/p&gt;

&lt;p&gt;To load our middleware, we add this code to our Sidekiq initialiser:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Sidekiq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configure_server&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;server_middleware&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;INFLUX_INSTRUMENTATION&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Drivy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Sidekiq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Middleware&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Influxdb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;client: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;INFLUXDB_CLIENT&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;visualising-our-metrics&quot;&gt;Visualising Our Metrics&lt;/h2&gt;

&lt;p&gt;To visualise our metrics, we use &lt;a href=&quot;https://grafana.com/&quot;&gt;Grafana&lt;/a&gt;. It’s a great tool allowing us to graph metrics from different time series database. It can connect to &lt;a href=&quot;https://grafana.com/grafana#unify&quot;&gt;different backends&lt;/a&gt;, supports &lt;a href=&quot;http://docs.grafana.org/alerting/rules/&quot;&gt;alerting&lt;/a&gt;, &lt;a href=&quot;http://docs.grafana.org/reference/annotations/&quot;&gt;annotations&lt;/a&gt; and dynamic &lt;a href=&quot;http://docs.grafana.org/reference/templating/&quot;&gt;templating&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Templating allows us to add filters to our dashboards and using the tags we defined earlier we’ll be able to filter our metrics by environment, queue or job name.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/assets/posts/2017-03-20-sidekiq-instrumentation/filters.gif&quot; alt=&quot;&quot; /&gt; 
&lt;/figure&gt;

&lt;p&gt;This article is not about Grafana so we’ll only show you how to build one graph. Let’s say we want to graph the average and 99th percentile time our jobs are taking to process.&lt;/p&gt;

&lt;p&gt;We’ll have this InfluxQL query to get the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mean&lt;/code&gt; time:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;perform&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;drivy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;sidekiq&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;env&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/^&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;queue&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/^&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;worker&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/^&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeFilter&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;period&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here we select the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mean&lt;/code&gt; of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;perform&lt;/code&gt; field that we filter by our tags then group it by time interval. We also use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fill(0)&lt;/code&gt; to replace all the null points with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To get the 99th percentile we use the same query but replace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mean(&quot;perform&quot;)&lt;/code&gt; by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;percentile(&quot;perform&quot;, 99)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here how this graph looks in Grafana:&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/assets/posts/2017-03-20-sidekiq-instrumentation/job_sql.png&quot; alt=&quot;&quot; /&gt; 
  &lt;figcaption&gt;SQL Editor&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
  &lt;img src=&quot;/assets/posts/2017-03-20-sidekiq-instrumentation/job_graph.png&quot; alt=&quot;&quot; /&gt; 
&lt;/figure&gt;

&lt;p&gt;And here’s our whole dashboard:&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/assets/posts/2017-03-20-sidekiq-instrumentation/dashboard.png&quot; alt=&quot;&quot; /&gt; 
  &lt;figcaption&gt;
    You'll find our Grafana config in the following &lt;a href=&quot;https://gist.github.com/mickey/cc0de597b763e40f4f8acff5b75b6858&quot;&gt;gist&lt;/a&gt;.
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s next&lt;/h2&gt;

&lt;p&gt;The next step would probably be to add some alerting. At Drivy, we alert on the rate of failure and on the queue congestion so we can reorganize our queues or scale our workers accordingly. Grafana supports alerting but that’s probably out of the scope of this article.&lt;/p&gt;

&lt;p&gt;Instrumenting Sidekiq has been a big win for our team. It helps us better organize our queues, follow the performance of our jobs, detect anomalies or investigate some bugs.&lt;/p&gt;
</description>
        
          <description>&lt;p&gt;As &lt;a href=&quot;https://en.drivy.com&quot;&gt;Drivy&lt;/a&gt; continues to grow, we were interested in having more insights on the performance of our jobs, their success rate and the congestion of our queues. This would help us:&lt;/p&gt;
</description>
        
        <pubDate>Thu, 20 Apr 2017 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/sidekiq-instrumentation/</link>
        <guid isPermaLink="true">https://getaround.tech/sidekiq-instrumentation/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>API Driven Apps</title>
        <dc:creator>Jean-Élie Le Corre</dc:creator>
        <description>&lt;p&gt;At Drivy, the product is often changing. To be as reactive as possible, we want to be fast and iterate a lot of features. For mobile teams, it’s a challenge to keep up the pace for our iOS and Android apps. You have to deal with the release cycle of the App Store for iOS, and with the users who don’t update their app to the last version on both platforms.&lt;/p&gt;

&lt;p&gt;We use a lot of different technical solutions to make our apps flexible, here we will describe one of them: how to make your content dynamic and let your users use your latest features even if it’s not yet implemented in your native app.&lt;/p&gt;

&lt;h2 id=&quot;dynamic-content&quot;&gt;Dynamic Content&lt;/h2&gt;

&lt;p&gt;Recently we had to implement a new view helping our car owners to see all their requests at once. It’s quite a simple view:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/posts/2017-04-18-api-driven-apps/requests.png&quot; alt=&quot;Requests&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A single cell looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/posts/2017-04-18-api-driven-apps/request_cell.png&quot; alt=&quot;Request cell&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To fill the content, the usual way of doing it would be the API sending an array of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Requests&lt;/code&gt; with raw data:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;avatar_url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;…assets/avatar.jpg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;created_at&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2017-02-11T14:03:23Z&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;driver_name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Jean-Élie Locataire&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;car_title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Tesla Model S&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;start_date&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2013-07-01T14:03:23Z&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;end_date&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2013-07-01T14:03:23Z&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;mileage&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;69&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;state&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;auto_cancel&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, the app would format the dates, the distances, the price and the state to display all of them with style.&lt;/p&gt;

&lt;p&gt;Instead, we used a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GenericItem&lt;/code&gt; model:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;image_url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;…assets/avatar.jpg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Jean-Élie Locataire&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;subtitle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Tesla Model S&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;top_right_detail&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;02/11/2017&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;detail_text_html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;from &amp;lt;strong&amp;gt;Wed, Feb 15, 2017&amp;lt;/strong&amp;gt; at 07:00&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;to &amp;lt;strong&amp;gt;Sat, Feb 18, 2017&amp;lt;/strong&amp;gt; at 07:30&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;to &amp;lt;strong&amp;gt;200 km&amp;lt;/strong&amp;gt; included&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;bottom_left_detail&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;€69&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;bottom_right_detail&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Automatically cancelled&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://www.drivy.com/requests/1&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;From now on, the app doesn’t even know what it manipulates, it could be a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Car&lt;/code&gt;, a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Driver&lt;/code&gt; or a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Request&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is a schematic representation of the generic cell composed with an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UIImageView&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UILabels&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/posts/2017-04-18-api-driven-apps/generic_cell.png&quot; alt=&quot;Generic Cell&quot; /&gt;
The server is responsible for formatting all the content like the dates and price. 
The apps send a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Accept-Language&lt;/code&gt; header in every API call with the current locale of the device, that way the back end can localize the content accordingly.&lt;/p&gt;

&lt;p&gt;We also use html with simplified tags in the middle details, allowing us to format dynamically the content. On the native side, almost all the fields are optional, the cell is adapting its height to the content.&lt;/p&gt;

&lt;p&gt;Once we have this generic mechanism, we can leverage it for other part of the app. Here is our message cell, you can find an image, a title, details and top right details. The layout is different though, we use a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt; property on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GenericItem&lt;/code&gt; to tell the app which layout it must use to display the cell.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/posts/2017-04-18-api-driven-apps/message_cell.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;dynamic-features&quot;&gt;Dynamic Features&lt;/h2&gt;

&lt;p&gt;You can see a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;url&lt;/code&gt; parameter attached to the generic item. 
Whenever a user tap the cell, the app’s router parse this url, if we have a native view responding to this path, it is pushed on the stack. If the path is not yet handled by the app, it’s opened in an in-app web browser.&lt;/p&gt;

&lt;p&gt;That way, the app can handle new features, whether you have not yet implemented them in the app, or if a user didn’t update the app yet.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Making natives apps flexible is useful if you want to be agile and iterate quickly on your app. 
Generic content and dynamic navigation are only 2 technical solutions to achieve that, so far it helped us a lot!&lt;/p&gt;
</description>
        
          <description>&lt;p&gt;At Drivy, the product is often changing. To be as reactive as possible, we want to be fast and iterate a lot of features. For mobile teams, it’s a challenge to keep up the pace for our iOS and Android apps. You have to deal with the release cycle of the App Store for iOS, and with the users who don’t update their app to the last version on both platforms.&lt;/p&gt;
</description>
        
        <pubDate>Tue, 18 Apr 2017 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/api-driven-apps/</link>
        <guid isPermaLink="true">https://getaround.tech/api-driven-apps/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Send Rails console commands to Slack</title>
        <dc:creator>Antoine Augusti</dc:creator>
        <description>&lt;p&gt;At Drivy, our main repository is a Ruby on Rails application that we run on Heroku. Sometimes, things don’t go as planned and we need to run one-off commands to fix a particular piece of data or to investigate a bit further about an issue. To do this, we use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rails console&lt;/code&gt; command in the production environment.&lt;/p&gt;

&lt;p&gt;Let’s be clear: &lt;strong&gt;we reach for the console only if we have no other choice&lt;/strong&gt;. We always deploy new code to fix bugs or use migrations if we need to update a large number of database rows. But as we still need it sometimes, we need to be sure this is a tool we can trust and control. Our rule is that if a command has been run more than twice, it needs to be automated in our back-office. We also have processes to limit the access to this feature to a group of people and rules in place to comply with our data privacy policy.&lt;/p&gt;

&lt;h2 id=&quot;reporting-on-console-commands&quot;&gt;Reporting on console commands&lt;/h2&gt;
&lt;p&gt;We want commands typed by authorised developers or system administrators to be made public and available in real-time. This serves multiple purposes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;be aware when this happen&lt;/strong&gt;: commands should be executed manually only on special conditions. If we need to run commands to fix events often, we need to build something that can handle automatically this kind of events to avoid at all cost the need to run console commands.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;have an history of executed commands&lt;/strong&gt;: if at some point we encounter an issue we had weeks ago, we can see how we fixed the issue by looking at the commands’ log.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;let developers discover commands&lt;/strong&gt;: because commands are made public, developers often discover interesting ways to fix an issue. This leads to discussions and code improvements later.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;hooking-into-the-rails-console&quot;&gt;Hooking into the Rails console&lt;/h2&gt;
&lt;p&gt;We use &lt;a href=&quot;https://github.com/pry/pry&quot;&gt;pry&lt;/a&gt; locally, but the Rails console uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;irb&lt;/code&gt; in staging or production. We needed a way to hook into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;irb&lt;/code&gt; and we used the fact that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;irb&lt;/code&gt; interacts with the standard output to override the behaviour of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STDOUT&lt;/code&gt; class. To know if we need to change the behaviour of the standard output, we check if we are running in a one-off Heroku dyno thanks to the environment variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DYNO&lt;/code&gt; set by Heroku.&lt;/p&gt;

&lt;p&gt;We added an initializer which looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;is_staging_or_prod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;production?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;staging?&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dyno_in_run_mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'DYNO'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'nope'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;starts_with?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'run'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dev_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'DEV_NAME'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_staging_or_prod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dyno_in_run_mode&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Drivy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DevNameNotSetError&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dev_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;blank?&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Override how printing to sdtout works by sending&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# the output of stdout to a Slack webhook also.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# When writing commands in irb, irb prints to stdout&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;STDOUT&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Drivy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ReportCommand&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:usual_write&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:write&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;usual_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;send_command_to_slack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dev_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReportCommand&lt;/code&gt; class actually does the work of reading from the standard output history using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Readline::HISTORY&lt;/code&gt; and sending the data to an external service (Slack for us). The code below gives the main logic, the complete code is available &lt;a href=&quot;https://gist.github.com/AntoineAugusti/a379d4060da40e1ec4218a4e6e3974dc&quot;&gt;in a gist&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Drivy::Console::ReportCommand&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send_command_to_slack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;developer_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has_command?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has_output?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Documentation is at https://api.slack.com/docs/message-attachments&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;title: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Command&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;value: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wrap_command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;short: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;title: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Output&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;value: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wrap_command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;short: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;title: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Developer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;value: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;developer_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;short: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;env_color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env_title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#e74c3c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;production&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;attachments: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;ss&quot;&gt;fields: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;ss&quot;&gt;color: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env_color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;ss&quot;&gt;footer: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Console &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env_title&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; spy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;ss&quot;&gt;footer_icon: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://drivy-prod-static.s3.amazonaws.com/slack/spy-small.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;ss&quot;&gt;ts: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;ss&quot;&gt;mrkdwn_in: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;fields&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slack_client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Failed to notify Slack of console command, status: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;success?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;has_command?&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Readline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HISTORY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;has_output?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instance_of?&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;command_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;start_with?&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;=&amp;gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read_command&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Readline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HISTORY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Readline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HISTORY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We use the console thanks to our homemade Drivy CLI and not directly through the Heroku CLI. We will likely talk about our CLI in upcoming posts, it is a tool we use to manage our day-to-day operations (running commands, releasing, handling database migrations, managing content…). After configuring the Slack webhook integration, the final result looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/posts/2017-03-16-rails-console-spy/output.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We’re pretty happy about this new tool because we gained a lot in visibility and confidence in our operations. We are always looking forward to improving our developers’ tooling.&lt;/p&gt;
</description>
        
          <description>&lt;p&gt;At Drivy, our main repository is a Ruby on Rails application that we run on Heroku. Sometimes, things don’t go as planned and we need to run one-off commands to fix a particular piece of data or to investigate a bit further about an issue. To do this, we use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rails console&lt;/code&gt; command in the production environment.&lt;/p&gt;
</description>
        
        <pubDate>Thu, 16 Mar 2017 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/rails-console-spy/</link>
        <guid isPermaLink="true">https://getaround.tech/rails-console-spy/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Use Android's FileProvider to get rid of the Storage Permission</title>
        <dc:creator>Romain Guefveneu</dc:creator>
        <description>&lt;p&gt;When you need to share a file with other apps, the easiest way could be to use the external storage as a temporary place where to save this file.
For example, if you need to take a picture with a camera app, you need to specify a file where the camera app will save the picture, and using external storage might be tempting.&lt;/p&gt;

&lt;p&gt;However this solution has many drawbacks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You lose control of your file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because you put your file in a public directory, you can’t safely delete it nor control which app can read and modify it.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You have to ask &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WRITE_EXTERNAL_STORAGE&lt;/code&gt; permission&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This could make many users afraid and may lead to a bad UX with runtime permissions.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;External storage quickly becomes a mess&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since you can’t safely delete your shared files, you let them in the external storage forever.&lt;/p&gt;

&lt;h2 id=&quot;use-a-fileprovider&quot;&gt;Use a FileProvider&lt;/h2&gt;
&lt;p&gt;You may already use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ContentProvider&lt;/code&gt; to share data with other apps, you can do the same with &lt;a href=&quot;https://developer.android.com/training/secure-file-sharing/setup-sharing.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FileProvider&lt;/code&gt;&lt;/a&gt; to share files!&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FileProvider&lt;/code&gt; is part of Support Library, available for all Android versions starting 2.3.
The main goal of this API is to temporary open a private file to some targeted apps: you keep the file in your private folder, and let some other apps read or even write it via a secured &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ContentProvider&lt;/code&gt;. Permissions are revoked when your activity is destroyed.&lt;/p&gt;

&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;/h2&gt;

&lt;h3 id=&quot;add-support-lib-dependency&quot;&gt;Add support lib dependency&lt;/h3&gt;
&lt;p&gt;In your app &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt;, add this dependency:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'com.android.support:support-v4:&amp;lt;version&amp;gt;'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;specify-available-folders&quot;&gt;Specify available folders&lt;/h3&gt;
&lt;p&gt;Create an xml file (for example &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file_provider_paths.xml&lt;/code&gt;) in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xml&lt;/code&gt; resources folder:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;paths&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:android=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;files-path&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;shared&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;shared/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/paths&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;define-a-provider&quot;&gt;Define a Provider&lt;/h3&gt;
&lt;p&gt;In your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ApplicationManifest.xml&lt;/code&gt;, add this provider inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application&lt;/code&gt; node:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;provider&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android.support.v4.content.FileProvider&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:authorities=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;your provider authority&amp;gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:exported=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:grantUriPermissions=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta-data&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android.support.FILE_PROVIDER_PATHS&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;android:resource=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@xml/file_provider_paths&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/provider&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Just set your  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;android:authorities&lt;/code&gt;, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.drivy.android.myfileprovider&lt;/code&gt;, and link the created xml resource file in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;android:resource&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;ProTip&lt;/em&gt;: Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;${applicationId}&lt;/code&gt;in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;android:authorities&lt;/code&gt; to automatically use your package name: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;${applicationId}.myfileprovider&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;share-a-file&quot;&gt;Share a file&lt;/h3&gt;
&lt;p&gt;First thing to do: get the shared file’s Uri&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;Uri&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sharedFileUri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FileProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUriForFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;your&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;provider&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auhtority&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sharedFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Use the same provider authority as in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ApplicationManifest.xml&lt;/code&gt;.
The Uri will looks like this:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;content://com.drivy.android.myfileprovider/shared/myfile.jpg&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can now create a chooser intent:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;ShareCompat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;IntentBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intentBuilder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ShareCompat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;IntentBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sharedFileUri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And start it:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chooserIntent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intentBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createChooserIntent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;startActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chooserIntent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s it!&lt;/p&gt;

&lt;h2 id=&quot;one-last-thing-legacy-support&quot;&gt;One last thing: Legacy support&lt;/h2&gt;
&lt;p&gt;You need to manually grant permission for older Android versions.&lt;/p&gt;

&lt;h3 id=&quot;grant-permission-for-intent&quot;&gt;Grant permission for intent&lt;/h3&gt;
&lt;p&gt;Before sharing your file, you’ll have to manually grant the permission (read and/or write), for all applications targeted with your intent. Indeed, you can’t know which one the user will choose to share the file with.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PackageManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;packageManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPackageManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ResolveInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activities&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;packageManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;queryIntentActivities&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PackageManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MATCH_DEFAULT_ONLY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ResolveInfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resolvedIntentInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activities&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;packageName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resolvedIntentInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;activityInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;packageName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;grantUriPermission&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;packageName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;permissions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;revoke-permissions-on-activity-destroy&quot;&gt;Revoke permissions on activity destroy&lt;/h3&gt;
&lt;p&gt;We can assume that, when returning back to your app and leaving the activity, the shared file has already been copied by the targeted app, and is not required anymore. You can revoke all permissions.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;revokeUriPermission&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileUri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;permissions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;FileProvider is a really convenient and elegant way to get rid of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WRITE_EXTERNAL_STORAGE&lt;/code&gt;, I encourage you to use it: your app will be better without extra permissions.&lt;/p&gt;

&lt;h3 id=&quot;sources&quot;&gt;Sources&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/drivy/blog-android-fileprovider&quot;&gt;Github project&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.android.com/training/secure-file-sharing/setup-sharing.html&quot;&gt;Setting Up File Sharing - Android Developers&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        
          <description>&lt;p&gt;When you need to share a file with other apps, the easiest way could be to use the external storage as a temporary place where to save this file.
For example, if you need to take a picture with a camera app, you need to specify a file where the camera app will save the picture, and using external storage might be tempting.&lt;/p&gt;
</description>
        
        <pubDate>Tue, 14 Mar 2017 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/android-fileprovider/</link>
        <guid isPermaLink="true">https://getaround.tech/android-fileprovider/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Taskqueues tips</title>
        <dc:creator>Adrien Di Pasquale</dc:creator>
        <description>&lt;p&gt;Taskqueues are used to asynchronously run tasks (indistinctly called “jobs”). They are very useful to enqueue actions for later processing in order to preserve short response times. For example, during the signup you may want to send the confirmation mail asynchronously. Or you may have a slow task to generate an export file instead of doing it inline.&lt;/p&gt;

&lt;p&gt;As a website grows, the need to use a taskqueue often arises. The general architecture usually looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/posts/2015-10-12-taskqueues-go-wild/taskqueues.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The broker is a messaging queue (&lt;a href=&quot;https://redis.io/&quot;&gt;Redis&lt;/a&gt;, &lt;a href=&quot;https://www.rabbitmq.com/&quot;&gt;RabbitMQ&lt;/a&gt; …)&lt;/li&gt;
  &lt;li&gt;The webapp enqueues tasks upon specific requests&lt;/li&gt;
  &lt;li&gt;The CRON enqueues tasks at specific times (often called a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Clock&lt;/code&gt; or a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Scheduler&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Workers dequeue and process tasks.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;frameworks&quot;&gt;Frameworks&lt;/h2&gt;

&lt;p&gt;All the main web languages have several: &lt;a href=&quot;http://www.celeryproject.org/&quot;&gt;Celery&lt;/a&gt;, &lt;a href=&quot;http://python-rq.org/&quot;&gt;RQ&lt;/a&gt;, &lt;a href=&quot;https://mrq.readthedocs.io/en/latest/&quot;&gt;MRQ&lt;/a&gt; (Python), &lt;a href=&quot;https://github.com/resque/resque&quot;&gt;Resque&lt;/a&gt;, &lt;a href=&quot;http://sidekiq.org/&quot;&gt;Sidekiq&lt;/a&gt; (Ruby) …&lt;/p&gt;

&lt;p&gt;The main qualities of a framework are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Efficiency&lt;/strong&gt;: Fast and cheap&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Reliability&lt;/strong&gt;: All tasks get executed exactly the right number of times&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Visibility&lt;/strong&gt;: Live monitoring, debugging tools, exception tracebacks …&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;common-problems&quot;&gt;Common problems&lt;/h2&gt;

&lt;p&gt;Workers generally execute the same codebase as the app. This is the source of many problems, since the codebase is not optimized for this context. Workers aim at high throughput but Ruby and Python default implementations are single-threaded. Also, tasks often interact with unreliable third party services, so they have to be very resilient.&lt;/p&gt;

&lt;p&gt;We use a taskqueue extensively at Drivy, so we have some tips to share!&lt;/p&gt;

&lt;h2 id=&quot;tip-1-design-tasks-well&quot;&gt;Tip 1: Design tasks well&lt;/h2&gt;

&lt;p&gt;Most importantly, tasks should aim at being &lt;strong&gt;re-entrant&lt;/strong&gt;. This means that they can stop in the middle and be ran again in another process. This is important because jobs may raise exceptions in the middle and be retried at a later time. Workers may also crash and restart.
This often means that your tasks should be stateless, and not expect the DB to be in a certain state at processing time. They should be responsible for checking the state before running their actions.&lt;/p&gt;

&lt;p&gt;Tasks should try to be &lt;strong&gt;idempotent&lt;/strong&gt;. This means that running them several times (consecutively or in parallel) should not change the final output. This is very convenient, so that you’re not too scared if a task gets enqueued or processed multiple times.&lt;/p&gt;

&lt;p&gt;It is also a good practice that &lt;strong&gt;tasks require the least number of arguments possible&lt;/strong&gt;. For instance, you can only send a model ID instead of sending the whole serialized object. This gives you better predictability and easier visibility.&lt;/p&gt;

&lt;p&gt;Additionally, if you want workers to run in multiple threads, you should be careful to design thread-safe tasks. Specifically, you should pay attention to the libraries you use, they are often the culprits of unsafe calls.&lt;/p&gt;

&lt;h4 id=&quot;--avoid-class-level-calls&quot;&gt;-&amp;gt; Avoid class level calls&lt;/h4&gt;

&lt;p&gt;Example of unsafe Ruby code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SomeTask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ResqueTask&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;some_opt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;do_something&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Classes are instanciated process-wise. So when you run multiple tasks in parralel, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Util.some_opt&lt;/code&gt; will be the same process-wise. This can lead to many problems.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/posts/2015-10-12-taskqueues-go-wild/jobs_threads.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is the same code refactored not to use class level calls:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SomeTask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ResqueTask&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;util&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;do_something&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;--avoid-mutable-instance-variables&quot;&gt;-&amp;gt; Avoid Mutable instance variables&lt;/h4&gt;

&lt;p&gt;Here is another example of unsafe code in Python:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SomeTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MRQTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;some_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;some_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When ran in parallel, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;some_list&lt;/code&gt; will be the same process-wise. A simple way to fix it is to instanciate missing params inside the task perform method:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SomeTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MRQTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;some_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;some_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;tip-2-know-your-broker&quot;&gt;Tip 2: Know your broker&lt;/h2&gt;

&lt;p&gt;We often misunderstand the exact behaviour of our backend task storage systems. It is often a good idea to take the time to read the specs and the open issues of the system you use.&lt;/p&gt;

&lt;p&gt;Each broker library has its own trade-offs in terms of delivery atomicity. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Exactly-once&lt;/code&gt; is the guarantee that each message will only be delivered once.
Few systems can provide this, and some would say that it’s infeasible in a distributed environment.
Most systems provide &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;at-least-once&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;at-most-once&lt;/code&gt; delivery guarantees. You therefore often have to handle redundant messages delivery.&lt;/p&gt;

&lt;p&gt;Also, a broker should have a good resiliency to crashes. You don’t want to loose tasks on system crashes. If you use in-memory storage systems like Redis, you should backup regularly to the file system if you don’t want this to happen.&lt;/p&gt;

&lt;h2 id=&quot;tip-3-monitor-your-broker&quot;&gt;Tip 3: Monitor your broker&lt;/h2&gt;

&lt;p&gt;In some cases, tasks enqueuing calls may get entirely discarded: the webapp (or the CRON) tries to enqueue a task to the broker, but the call fails. This is obviously a very bad situation, as you’re going to have a very hard time trying to re-enqueue the lost tasks afterwards. If the volumes are high, or if the failures are silent, then this quickly turns into a catastrophic situation.&lt;/p&gt;

&lt;p&gt;One situation where this can happen is when the broker exceeds its storage capacity. You should foresee this happening. A common issue causing this is to pollute your broker with metadata: very long arguments, results, logs, stacktraces …&lt;/p&gt;

&lt;p&gt;Having network issues with the broker can also become a very painful point, especially since it’s often random. You should try and design your infrastructure to have as little latency as possible between the app and the broker.&lt;/p&gt;

&lt;p&gt;A very good advice is thus to monitor your broker’s system in depth, looking at the different metrics and setting up alerts. You can also look for SaaS hosting for your brokers as they often provide out-of-the-box monitoring solutions.&lt;/p&gt;

&lt;h2 id=&quot;tip-4-specialize-your-workers&quot;&gt;Tip 4: Specialize your workers&lt;/h2&gt;

&lt;p&gt;Workers can have different configs depending on what type of tasks they perform. For instance:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Computing Worker: 2Gb ram + 4 threads&lt;/li&gt;
  &lt;li&gt;I/O Worker: 256Mb ram + 100 threads&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;../assets/posts/2015-10-12-taskqueues-go-wild/workers.svg&quot; alt=&quot;workers different configs&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;tip-5-strategical-queuing&quot;&gt;Tip 5: Strategical queuing&lt;/h2&gt;

&lt;p&gt;You usually try and optimize your different workers and queues to be able to dequeue everything in time at the lowest cost possible.&lt;/p&gt;

&lt;p&gt;Here is an example of a queuing strategy:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/posts/2015-10-12-taskqueues-go-wild/workers_and_queues.svg&quot; alt=&quot;workers + queues&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(the number on the arrows represent the queue priority for each worker)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There is no one-size-fits-all solution for optimizing this. You’ll have to iterate and find out what works best for your tasks with your specific workers. You’ll have to change it over time as you update tasks and their mean runtime evolves independently. Again, monitoring is absolutely necessary.&lt;/p&gt;

&lt;p&gt;At Drivy we have decided not to name our queues after the bit of logic they handle. We don’t want to have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mail&lt;/code&gt; queue or a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;car_photos_checks&lt;/code&gt; queue. We think it’s more scalable to group tasks in queues depending on their properties: mean runtime, acceptable dequeuing delay. So we have queues like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;urgent_fast&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;average_slow&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;tip-6-anticipate-tasks-congestions&quot;&gt;Tip 6: Anticipate tasks congestions&lt;/h2&gt;

&lt;p&gt;Here is a common bad day scenario:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Task A becomes 10 times slower (maybe because of network latency)&lt;/li&gt;
  &lt;li&gt;Task B keeps failing (maybe because some corrupt data got introduced in the DB)&lt;/li&gt;
  &lt;li&gt;Workers cannot dequeue everything in time&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These sort of situations will necessarily happen. You should not try and avoid them altogether but at least be monitoring this, and be ready to take some actions.&lt;/p&gt;

&lt;p&gt;Your monitoring system should be able to alert you when queues don’t respect their SLAs anymore.
Being able to scale lots of worker quickly will help you. Try and know your limits in advance so you don’t overload a resource or consume all the network bandwidth. Auto-scaling is not easy to setup at all, don’t rely on it at the beginning.&lt;/p&gt;

&lt;h2 id=&quot;tip-7-anticipate-worker-crashes&quot;&gt;Tip 7: Anticipate worker crashes&lt;/h2&gt;

&lt;p&gt;Here is a common list of things that can go wrong:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Exceptions&lt;/li&gt;
  &lt;li&gt;Hardware crashes&lt;/li&gt;
  &lt;li&gt;System reboots (e.g. Heroku apps restart everyday)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You absolutely need to handle soft shutdowns: receive the signals, try and finish tasks in time, and requeue them otherwise.
Your workers should also feature an auto-restart feature, so that the congestion doesn’t get out of hand to quickly.&lt;/p&gt;

&lt;p&gt;Memory leaks may also happen. Depending on the volumes, this may grow quickly and workers may crash. (be aware that Heroku Errors like &lt;a href=&quot;https://devcenter.heroku.com/articles/error-codes#r14-memory-quota-exceeded&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Memory Exceeded&lt;/code&gt;&lt;/a&gt; are not monitored by error trackers like new relic). Debugging memory leaks is very hard. It’s even harder in taskqueue systems, so try and find the right tools for your stack, and arm yourself with patience.&lt;/p&gt;

&lt;h2 id=&quot;tip-8-reliable-cron&quot;&gt;Tip 8: Reliable CRON&lt;/h2&gt;

&lt;p&gt;Syntax errors can go undetected: the CRON system is rarely ran in development and even less covered by tests.&lt;/p&gt;

&lt;p&gt;You may also encounter runtime errors e.g.: argument computed on the fly fails. This can easily go undetected as we often run the clock as a background process of a proper worker.&lt;/p&gt;

&lt;p&gt;To avoid this, you should try and keep the CRON as simple as possible: it should only enqueue tasks with hardcoded arguments. It should not fetch anything from external resources, like the DB.&lt;/p&gt;

&lt;p&gt;Two good practices that can help:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;check the syntax of your CRON in your specs&lt;/li&gt;
  &lt;li&gt;monitor the CRON effect, possibly by enqueuing a ‘heartbeat’ task every minute and checking it’s been dequeued quickly in a separate monitoring tool.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tip-9-track-exceptions&quot;&gt;Tip 9: Track exceptions&lt;/h2&gt;

&lt;p&gt;Tasks &lt;strong&gt;will&lt;/strong&gt; raise exceptions. You cannot and should not cover in advance all cases. User input, unexpected context, different environments are just a subset of the problems that you cannot forecast.&lt;/p&gt;

&lt;p&gt;You should rather focus your efforts on tracking. Using a bug tracker service (Bugsnag, Sentry, ..) is a very good idea. You should have a middleware that logs all Exceptions to your bug tracker, and setup alerting from your bug tracker. You can then treat the bugs and create issues for each depending on their priority / urgency.&lt;/p&gt;

&lt;p&gt;Here is how a bug tracker interface (Bugsnag) looks:
&lt;img src=&quot;../assets/posts/2015-10-12-taskqueues-go-wild/bugsnag.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;tip-10-have-a-coherent-retry-strategy&quot;&gt;Tip 10: Have a coherent retry strategy&lt;/h2&gt;

&lt;p&gt;Most tasks should be retried several times before being considered as properly failed. If your tasks respect the contracts from Tip 1, it should not be a problem to retry tasks by default.&lt;/p&gt;

&lt;p&gt;Different tasks may have different retry strategies. All I/O calls (especially HTTP) should be expected to fail as a regular behaviour. You can implement increasing retries delays to handle temporarily unavailable resources.&lt;/p&gt;

&lt;h2 id=&quot;tip-11-check-your-db-connections&quot;&gt;Tip 11: Check your DB connections&lt;/h2&gt;

&lt;p&gt;Depending on the tasks, workers may hit the DB way harder than a regular web process. Try and estimate how hard before scaling your workers. You may also hit connections limits quickly: namely your SaaS provider connection limit, or your system’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ulimit&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A good practice is to use connection pools in your workers, and to be a good citizen: release the unused ones, reconnect on deconnections … Dimension these pools according to your DB limits.&lt;/p&gt;

&lt;p&gt;Another very alleviating solution is to use slave databases in your workers: a task may then never slow down your product. However, you have to be careful with the possible replication lags. It is sometimes necessary to kill workers while the slaves are catching up with their masters.&lt;/p&gt;

&lt;h2 id=&quot;tip-12-dont-over-optimize&quot;&gt;Tip 12: Don’t over-optimize&lt;/h2&gt;

&lt;p&gt;Workers are very cheap nowadays, so you should be better off investing time into monitoring than optimizing your tasks and queries.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This was initially given as a meetup talk, see the slides here:
&lt;a href=&quot;http://adipasquale.github.io/taskqueues-slides-2015&quot;&gt;http://adipasquale.github.io/taskqueues-slides-2015&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
        
          <description>&lt;p&gt;Taskqueues are used to asynchronously run tasks (indistinctly called “jobs”). They are very useful to enqueue actions for later processing in order to preserve short response times. For example, during the signup you may want to send the confirmation mail asynchronously. Or you may have a slow task to generate an export file instead of doing it inline.&lt;/p&gt;
</description>
        
        <pubDate>Mon, 13 Mar 2017 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/taskqueues-tips/</link>
        <guid isPermaLink="true">https://getaround.tech/taskqueues-tips/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Managing Bugs at Drivy</title>
        <dc:creator>Marc G Gauthier</dc:creator>
        <description>&lt;p&gt;It is very important to have a minimal number of bugs in production. I would love to say that we have absolutely no issues, but problems are bound to happen and it’s really a matter of reducing risk. The question is really about how fast and how efficiently can you react.&lt;/p&gt;

&lt;h2 id=&quot;detecting-bugs&quot;&gt;Detecting Bugs&lt;/h2&gt;

&lt;h3 id=&quot;monitoring-errors&quot;&gt;Monitoring Errors&lt;/h3&gt;

&lt;p&gt;First we need to know if there are any problems. The more obvious solution is to be reactive to any user reports, this is why we have a dedicated Slack channel so that the customer support team can let us know about any issues:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/bug/ask_a_tech.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is a very simple and light process that works pretty well for now. However this isn’t great when we have to rely on users to let us know about bugs! This is why we use &lt;a href=&quot;https://www.bugsnag.com/&quot;&gt;Bugsnag&lt;/a&gt; that let us know of any 500 or JS error in our live environments:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/bug/bugsnag.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;detecting-possible-errors-using-metrics&quot;&gt;Detecting Possible Errors Using Metrics&lt;/h3&gt;

&lt;p&gt;In the examples above the error is pretty straightforward: someone tried to do something and it failed. However the most worrying bugs are the one that are failing silently. They are harder to detect and can cause a lot of problems. For instance if you have an issue with Facebook connect that fails 10% of the time silently, you will not see any 500 error… however you will see a decrease in KPIs related to the Facebook connect feature.&lt;/p&gt;

&lt;p&gt;This is why we use business metrics to detect possible issues as it’s a great way to detect possible regressions. We use a wide variety of tools, depending on the situation, from  &lt;a href=&quot;https://support.google.com/analytics/answer/2790010?hl=en&quot;&gt;Universal Analytics&lt;/a&gt; to &lt;a href=&quot;https://redash.io/&quot;&gt;Redash&lt;/a&gt;. This gives us a simple way to detect changes in patterns and react accordingly.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/bug/redash.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For performances and other technical monitoring, we use New Relic and Logmatic. We also have a setup with &lt;a href=&quot;https://github.com/influxdata/telegraf&quot;&gt;Telegraf&lt;/a&gt;, &lt;a href=&quot;https://www.influxdata.com/&quot;&gt;Influxdb&lt;/a&gt; and &lt;a href=&quot;http://grafana.org/&quot;&gt;Grafana&lt;/a&gt; to check our time based metrics:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/bug/grafana.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We have a lot of others solution to be completely sure that everything works properly. For instance we will write “checker jobs”, which is basically a cron running frequently and checking if data is shaped as expected.&lt;/p&gt;

&lt;h2 id=&quot;reacting-to-bugs&quot;&gt;Reacting To Bugs&lt;/h2&gt;

&lt;h3 id=&quot;notifications&quot;&gt;Notifications&lt;/h3&gt;

&lt;p&gt;We use &lt;a href=&quot;https://aws.amazon.com/cloudwatch/&quot;&gt;various&lt;/a&gt; &lt;a href=&quot;https://logmatic.io/&quot;&gt;tools&lt;/a&gt; with specific &lt;a href=&quot;https://support.pagerduty.com/hc/en-us/articles/202828950-What-is-an-Escalation-Policy-&quot;&gt;escalation policies&lt;/a&gt; in order to react quickly to any issues. For instance &lt;a href=&quot;https://www.pagerduty.com/&quot;&gt;PagerDuty&lt;/a&gt; will phone us if some metrics are getting bad, but we also built a Slack bot that let us know of less critical issues:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/bug/cli.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To make sure that every problem is taken care of, we have set up a new role we call the “Bugmaster” who is in charge of checking all issues.&lt;/p&gt;

&lt;h3 id=&quot;fixing-bugs&quot;&gt;Fixing Bugs&lt;/h3&gt;

&lt;p&gt;We work hard on &lt;a href=&quot;https://zachholman.com/posts/deploying-software&quot;&gt;reducing the cost of releasing to production&lt;/a&gt;. If you can ship quickly and safely, you’re able to remove any bug quickly. To do so we constantly work our internal processes and tools. For instance we have a command line interface connected to Slack that allows us to release a new version of the website:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/bug/release.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once a fix has been made, it’s important to have new automated tests to prevent regressions.&lt;/p&gt;

&lt;h2 id=&quot;not-having-bugs-in-the-first-place&quot;&gt;Not Having Bugs In The First Place&lt;/h2&gt;

&lt;p&gt;Detecting and fixing bugs is not the most fun part of the job… and it’s way better to have none! This is why we invest a lot in a solid test suite that runs on &lt;a href=&quot;http://circleci.com/&quot;&gt;CircleCI&lt;/a&gt;, an &lt;a href=&quot;http://marcgg.com/blog/2016/02/22/git-flow-heroku-pipelines/&quot;&gt;efficient Git workflow&lt;/a&gt;. We also focus on shipping small things quickly using &lt;a href=&quot;https://zachholman.com/posts/deploying-software#prepare&quot;&gt;feature flags&lt;/a&gt; instead of a doing massive releases and, of course, we have a great team of individual that want to ship working software.&lt;/p&gt;

&lt;p&gt;Our workflow and tools changed a lot over the years, but it’s getting more and more robust. I can honestly say that it is very rare when we’re caught off guard by a serious bug, which is great for our users.&lt;/p&gt;

&lt;p&gt;Overall it feels great to be working on a project that is evolving quickly, but can keep a good level of quality.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is a simplified update of an article originally posted on my personal website. You can &lt;a href=&quot;http://marcgg.com/blog/2016/07/04/monitoring-bugs/&quot;&gt;read the previous version here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
        
          <description>&lt;p&gt;It is very important to have a minimal number of bugs in production. I would love to say that we have absolutely no issues, but problems are bound to happen and it’s really a matter of reducing risk. The question is really about how fast and how efficiently can you react.&lt;/p&gt;
</description>
        
        <pubDate>Thu, 09 Mar 2017 00:00:00 +0000</pubDate>
        <link>https://getaround.tech/bug-management/</link>
        <guid isPermaLink="true">https://getaround.tech/bug-management/</guid>
        
        
      </item>
      
    
  </channel>
</rss>
