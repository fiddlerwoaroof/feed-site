<?xml version="1.0" encoding="utf-8"?>
    <feed xmlns="http://www.w3.org/2005/Atom">
     <title>BigBinary Blog</title>
     <link href="https://www.bigbinary.com/feed.xml" rel="self">
     <link href="https://www.bigbinary.com/">
     <updated>2022-11-16T03:53:30+00:00</updated>
     <id>https://www.bigbinary.com/</id>
     <entry>
       <title><![CDATA[How to detect changes in component visibility when scrolling?]]></title>
       <author><name>Amaljith K</name></author>
      <link href="https://www.bigbinary.com/blog/how-to-detect-changes-in-component-visibility-when-scrolling">
      <updated>2022-09-27T12:00:00+00:00</updated>
      <id>https://www.bigbinary.com/blog/how-to-detect-changes-in-component-visibility-when-scrolling</id>
      <content type="html"><![CDATA[<p>When there is a need to display large set of data, most of the web applicationssplit whole set into several smaller chunks and then serve on demand. Thistechnique is called pagination.</p><p>Earlier, pagination looked like this:<img src="https://user-images.githubusercontent.com/85148587/191435753-53aa1d13-3d55-42f2-b95d-922b6e0e3b7f.png" alt="image">Here, loading next set of data required user to click on next page button.</p><p>These days, we use infinite scroll technique which automatically loads next setof data when user scrolls to the bottom of the list. This is more user friendly:<img src="https://user-images.githubusercontent.com/85148587/191432751-89eef3dc-5c5e-4939-8150-38dc98cee262.gif" alt="image"></p><p>Several JS libraries are available to facilitate infinite scroll. But to quenchour curiosity about how things work under the hood, it is best to try toimplement it from the scratch.</p><p>To implement infinite scroll, we need to know when the user has scrolled to thebottom of the list to load the next page's data. To know if the user has reachedthe bottom, we can watch the last element of the list. That is, when the list isscrolled and the last element becomes visible, we know that we are at thebottom.</p><p>Detecting the visibility of elements during scroll was a hard problem untilrecently. We had to hook onto <code>onscroll</code> events of the element and check theboundaries of the elements using<a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect">getBoundingClientRect</a>function.</p><p>Since <code>onscroll</code> event gets fired around 40-50 times per second, performing theoperations inside it will become expensive. Moreover, the <code>onscroll</code> functiongets executed from the main UI thread. All these together make our webapplication sluggish.</p><p>But now, we have a much more performant alternative for this problem.<a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API#browser_compatibility">All popular web browsers</a>support a new API named<a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API">IntersectionObserver</a>from 2019 onwards.</p><p>The advantages of <code>IntersectionObserver</code> API are:</p><ul><li>It doesn't grab the resources from the UI thread. It accepts a callbackfunction that will be fired <strong>asynchronously</strong>.</li><li>The supplied callback is triggered only when a change in visibility isdetected. We can save 40-50 repetitions per second during the scroll.</li><li>We don't need to worry about maintaining boilerplate code for detecting theboundaries &amp; calculating the visibility. We get all useful data as a parameterto the callback function.</li></ul><p>The introduction of <code>IntersectionObserver</code> simplified a whole set ofrequirements like:</p><ul><li>Infinite loading.</li><li>Improving page load time by not fetching resources (like images) that aren'tvisible until the user scrolls to it. This is called lazy loading.</li><li>Track whether the user has scrolled to and viewed an ad posted on the webpage.</li><li>UX improvements like dimming animation for the components that aren't fullyvisible.</li></ul><p>In this blog, we are going to discuss how we can use <code>IntersectionObserver</code> in aReact application as hooks.</p><h2>Creating a hook for detecting visibility changes</h2><p>We will create a custom hook that will update whenever the specified componentscrolls into view and scrolls out of view. Let us name the hook<code>useIsElementVisible</code>. Obviously, it will accept a reference to the component ofwhich visibility need to be monitored as its argument.</p><p>It will have a state to store the visibility status of the specified element. Itwill have a useEffect hook from which we will bind the <code>IntersectionObserver</code> tothe specified component.</p><p>Here is the basic implementation:</p><pre><code class="language-js">import { useEffect, useState } from &quot;react&quot;;const useIsElementVisible = target =&gt; {  const [isVisible, setIsVisible] = useState(false); // store visibility status  useEffect(() =&gt; {    // bind IntersectionObserver to the target element    const observer = new IntersectionObserver(onVisibilityChange);    observer.observe(target);  }, [target]);  // handle visibility changes  const onVisibilityChange = entries =&gt; setIsVisible(entries[0].isIntersecting);  return isVisible;};export default useIsElementVisible;</code></pre><p>We can use <code>useIsElementVisible</code> like this:</p><pre><code class="language-jsx">const ListItem = () =&gt; {  const elementRef = useRef(null); // to hold reference to the component we need to track  const isElementVisible = useIsElementVisible(elementRef.current);  return (    &lt;div ref={elementRef} id=&quot;list-item&quot;&gt;      {/* your component jsx */}    &lt;/div&gt;  );};</code></pre><p>The component <code>ListItem</code> will get updated whenever the user has scrolled to seethe div <code>&quot;list-item&quot;</code>. We can use the value of <code>isElementVisible</code> to load thecontents of the next page from a <code>useEffect</code> hook:</p><pre><code class="language-js">useEffect(() =&gt; {  if (isElementVisible &amp;&amp; nextPageNotLoadedYet()) {    loadNextPage();  }}, [isElementVisible]);</code></pre><p><strong>This works in theory.</strong> But if you try it, you will notice that this doesn'twork as expected. We missed an edge case.</p><h2>The real-life edge case</h2><p>We use a <code>useRef</code> hook for referencing the <code>div</code>. During the initial render,<code>elementRef</code> was just initialized with <code>null</code> as its value. So,<code>elementRef.current</code> will be null and as a result, the call<code>useIsElementVisible(elementRef.current)</code> won't attach our observer with theelement for the first time.</p><p>Unfortunately, useRef hook won't re-render when a value is set to it after DOMis prepared. Also, there are no state updates or anything that requests are-render inside our example component. In short, our component will render onlyonce.</p><p>With these in place, <code>useIsElementVisible</code> will never get reference to the<code>&quot;list-item&quot;</code> div in our previous example.</p><p>But there is a workaround for our problem. We can force render the componenttwice during the first mount.</p><p>To make it possible, we will add a dummy state. When our hook is called for thefirst time (when <code>ListItem</code> mounts), we will update our state once, therebyrequesting React to repeat the component render steps again. During the secondrender, we will already have our DOM ready and we will have the target elementattached to <code>elementRef</code>.</p><h2>Force re-rendering the component</h2><p>To keep our code clean and modular, let us create a dedicated custom hook formanaging force re-renders:</p><pre><code class="language-js">import { useState } from &quot;react&quot;;const useForceRerender = () =&gt; {  const [, setValue] = useState(0); // we don't need the value of this state.  return () =&gt; setValue(value =&gt; value + 1);};export default useForceRerender;</code></pre><p>Now, we can use it in our <code>useIsElementVisible</code> hook this way:</p><pre><code class="language-js">const useIsElementVisible = target =&gt; {  const [isVisible, setIsVisible] = useState(false);  const forceRerender = useForceRerender();  useEffect(() =&gt; {    forceRerender();  }, []);  // previous code to register observer  return isIntersecting;};</code></pre><p>With this change, our hook is now self-sufficient and fully functional. In our<code>ListItem</code> component, <code>isElementVisible</code> will update to <code>false</code> and triggercomponent re-render whenever our <code>&quot;list-item&quot;</code> div goes outside visible zoneduring scroll. It will also update to <code>true</code> when it is scrolled into visibilityagain.</p><h2>Possible improvements on useIsElementVisible hook</h2><p>The <code>useIsElementVisible</code> hook shown in the previous sections serves only thebasic use case. It is not optimal to use in a production world.</p><p>These are the scopes for improvement for our hook:</p><ul><li>We can let in<a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API#intersection_observer_options">configurations for IntersectionObserver</a>to customize its behavior.</li><li>We can prevent initializing observer when the <code>target</code> is not ready yet (whenit is <code>null</code>).</li><li>We can add a cleanup function to stop observing the element when our componentgets unmounted.</li></ul><p>Here is what the optimum code for the hook should look like:</p><pre><code class="language-js">import { useEffect, useState } from &quot;react&quot;;export const useForceRerender = () =&gt; {  const [, setValue] = useState(0); // we don't need the value of this state.  return () =&gt; setValue(value =&gt; value + 1);};export const useIsElementVisible = (target, options = undefined) =&gt; {  const [isVisible, setIsVisible] = useState(false);  const forceUpdate = useForceRerender();  useEffect(() =&gt; {    forceUpdate(); // to ensure that ref.current is attached to the DOM element  }, []);  useEffect(() =&gt; {    if (!target) return;    const observer = new IntersectionObserver(handleVisibilityChange, options);    observer.observe(target);    return () =&gt; observer.unobserve(target);  }, [target, options]);  const handleVisibilityChange = ([entry]) =&gt;    setIsVisible(entry.isIntersecting);  return isVisible;};</code></pre>]]></content>
    </entry><entry>
       <title><![CDATA[Setting up Heroku DNS using cloudflare]]></title>
       <author><name>Neeraj Singh</name></author>
      <link href="https://www.bigbinary.com/blog/setting-up-heroku-dns-using-clouflare">
      <updated>2022-09-26T12:00:00+00:00</updated>
      <id>https://www.bigbinary.com/blog/setting-up-heroku-dns-using-clouflare</id>
      <content type="html"><![CDATA[<p>Lots of folks know <a href="https://www.cloudflare.com/">cloudflare</a> for the DDoSprotection, rate liminting etc services it provides. Here at BigBinary we alsouse cloudflare for DNS management.</p><p>DNS management is a free service by cloudflare. However on first glance it mightnot appear that it's a free service. Once we add a site then we see a screenlike this. Here we need to remember to scroll down to see the free option.</p><p><img src="/blog_images/heroku-cloudflare/pricing.png" alt="cloudflare pricing page"></p><p>Now let's see how we can map the DNS settings from heroku to cloudflare. We willlook at both a standard domain name and then we will take a look at a wildcarddomain name.</p><h3>Standad domain name</h3><p>We are hosting <a href="https://www.gitemit.com/">GitEmit</a> using Heroku. We are lettingHeroku manage the SSL for this domain.</p><p>After setting up domains in Heroku here is what we see.</p><p><img src="/blog_images/heroku-cloudflare/heroku-dns-gitemit.png" alt="Heroku DNS gitemit"></p><p>In Cloudflare we can set it up using two CNAMEs. It looks like this.</p><p><img src="/blog_images/heroku-cloudflare/cloudflare-heroku-gitemit.png" alt="Heroku DNS"></p><h3>Wild card domain name</h3><p>We are hosting <a href="https://www.neeto.com/neetochat/">neetoChat</a> application usingHeroku.</p><p>Since it's a wild card domain we had to<a href="https://www.bigbinary.com/blog/wild-card-ssl-on-heroku">generate the certificates</a>ourselves.</p><p>After setting up domains in Heroku here is what we see.</p><p><img src="/blog_images/heroku-cloudflare/heroku-dns-neetochat.png" alt="Heroku DNS neetoChat"></p><p>In Cloudflare we can set it up using three CNAMEs. It looks like this.</p><p><img src="/blog_images/heroku-cloudflare/cloudflare-heroku-neetochat.png" alt="Heroku DNS"></p>]]></content>
    </entry><entry>
       <title><![CDATA[How we upgraded from Rails 6 to Rails 7]]></title>
       <author><name>Abhishek T</name></author>
      <link href="https://www.bigbinary.com/blog/how-we-upgraded-from-rails-6-to-rails-7">
      <updated>2022-09-20T12:00:00+00:00</updated>
      <id>https://www.bigbinary.com/blog/how-we-upgraded-from-rails-6-to-rails-7</id>
      <content type="html"><![CDATA[<p>Recently, we upgraded all <a href="https://www.neeto.com/">neeto</a> products to Rails 7using<a href="https://guides.rubyonrails.org/upgrading_ruby_on_rails.html">Rails upgrade guide</a>.</p><p>Here are the issues we faced during the upgrade.</p><h3>Migrating to Active Record Encryption</h3><p>This was the biggest challenge we faced during the upgrade. For encryptingcolumns, we had used the<a href="https://github.com/attr-encrypted/attr_encrypted">attr_encrypted</a> gem. HoweverRails 7 came with<a href="https://guides.rubyonrails.org/active_record_encryption.html">Active Record Encryption</a>.So we needed to decrypt the records in the production database and encrypt themusing Active Record Encryption. We found that &quot;attr_encrypted&quot; gem wasincompatible with Rails 7. So the only option was to remove the &quot;attr_encrypted&quot;gem and decrypt the records using a script. We used the following method todecrypt the records.</p><pre><code class="language-rb">def decrypted_attribute(attribute_name, record)  value = record.send(attribute_name)  return if value.blank?  value = Base64.decode64(value)  cipher = OpenSSL::Cipher.new(&quot;aes-256-gcm&quot;)  cipher.decrypt  cipher.key = Rails.application.secrets.attr_encrypted[:encryption_key]  cipher.iv = Base64.decode64(record.send(:&quot;#{attribute_name}_iv&quot;))  cipher.auth_tag = value[-16..]  cipher.auth_data = &quot;&quot;  cipher.update(value[0..-17]) + cipher.finalend</code></pre><h3>Broken images in Active Storage</h3><p>After the upgrade, we started getting broken images in some places. Thishappened for Active Storage links embedded in Rich Text. After some debugging wefound that we were getting incorrect Active Storage links because of a change inthe key generation algorithm. The following configuration was loading imagesusing the old algorithm.</p><pre><code class="language-rb">config.active_support.key_generator_hash_digest_class = OpenSSL::Digest::SHA1</code></pre><p>Since the new algorithm provides more security, we decided to migrate the linksinstead of using the old algorithm. We used the following code to migrate theold link to the new valid link.</p><pre><code class="language-rb"># Usage:# text_with_new_links = ActiveStorageKeyConverter.new(text_with_old_links).process# If no links are there to replace, the original text will be returned as it is.class ActiveStorageKeyConverter  def initialize(text)    @text = text  end  def process    replace(@text)  end  private    def convert_key(id)      verifier_name = &quot;ActiveStorage&quot;      key_generator =  ActiveSupport::KeyGenerator.new(Rails.application.secrets.      secret_key_base iterations: 1000, hash_digest_class: OpenSSL::Digest::SHA1)      key_generator = ActiveSupport::CachingKeyGenerator.new(key_generator)      secret = key_generator.generate_key(verifier_name.to_s)      verifier = ActiveSupport::MessageVerifier.new(secret)      ActiveStorage::Blob.find_by_id(verifier.verify(id, purpose: :blob_id))      .try(:signed_id) rescue nil    end    def replace(text)      keys = text.scan(URI.regexp).flatten.select{|x|      x.to_s.include? (&quot;rails/active_storage&quot;)}.map{|x| x.split(&quot;/&quot;)[-2]}      keys.each do |key|        new_key = convert_key(key)        text = text.gsub(key, new_key) if new_key      end      text    endend</code></pre><p>Following one time rake task was used to update the Active Storage links in the<code>content</code> column of <code>Task</code> model:</p><pre><code class="language-rb">desc &quot;Update active storage links embedded in rich text to support in rails 7&quot;task migrate_old_activestorage_links: :environment do  table_colum_map = {    &quot;Task&quot; =&gt; &quot;content&quot;,  }  match_term = &quot;%rails/active_storage%&quot;  table_colum_map.each do |model_name, column_name|    model_name.to_s.constantize.where(&quot;#{column_name} ILIKE ?&quot;, match_term).find_each do|row|      row.update_column(column_name, ActiveStorageKeyConverter.new(row[column_name]).process)    end  endend</code></pre><h3>Test failures with the mailer jobs</h3><p>After upgrading to Rails 7, tests related to mailers started to fail. This wasbecause the mailer jobs were enqueued in the <code>default</code> queue instead of<code>mailers</code>. We fixed this by adding the following configuration.</p><pre><code class="language-rb">config.action_mailer.deliver_later_queue_name = :mailers</code></pre><h3>Autoloading during initialization failed</h3><p>After the upgrade if we start Rails sever then we were getting the followingerror.</p><pre><code>$ rails s=&gt; Booting Puma=&gt; Rails 7.0.3.1 application starting in development=&gt; Run `bin/rails server --help` for more startup optionsExiting/Users/BB/Neeto/neeto_commons/lib/neeto_commons/initializers/session_store.rb:13:in`session_store': uninitialized constant #&lt;Class:NeetoCommons::Initializers&gt;::ServerSideSession     (NameError)    ActionDispatch::Session::ActiveRecordStore.session_class = ServerSideSession                                                                ^^^^^^^^^^^^^^^^^   from /Users/BB/Neeto/neeto-planner-web/config/initializers/common.rb:10:in `&lt;main&gt;'</code></pre><p>That error was coming from our internal <code>neeto-commons</code> initializer called<code>session_store.rb</code>. The code looked like this.</p><pre><code class="language-rb">#session_store.rbmodule NeetoCommons  module Initializers    class &lt;&lt; self      def session_store        Rails.application.config.session_store :active_record_store,          key: Rails.application.secrets.session_cookie_name, expire_after: 10.years.to_i        ActiveRecord::SessionStore::Session.table_name = &quot;server_side_sessions&quot;        ActiveRecord::SessionStore::Session.primary_key = &quot;session_id&quot;        ActiveRecord::SessionStore::Session.serializer = :json        ActionDispatch::Session::ActiveRecordStore.session_class = ServerSideSession      end    end  endend</code></pre><p>In order to fix the issue we had to put the last statement in a block like shownbelow.</p><pre><code class="language-rb">Rails.application.config.after_initialize do ActionDispatch::Session::ActiveRecordStore.session_class = ServerSideSessionend</code></pre><h3>Missing template error with pdf render</h3><p>After the Rails 7 upgrade the following test started failing.</p><pre><code class="language-rb">def test_get_task_pdf_download_success  get api_v1_project_section_tasks_download_path(@project.id, @section, @task, format: :pdf)  assert_response :ok  assert response.body.starts_with? &quot;%PDF-1.4&quot;  assert response.body.ends_with? &quot;%EOF\n&quot;end</code></pre><p>The actual error is <code>Missing template api/v1/projects/tasks/show.html.erb</code>.</p><p>In order to fix it we renamed the file name from <code>/tasks/show.html.erb</code> to<code>/tasks/show.pdf.erb</code>. Similarly we changed the layout from<code>/layouts/pdf.html.erb</code> to <code>/layouts/pdf.pdf.erb</code>.</p><p>Initially the controller code looked like this.</p><pre><code class="language-rb">format.pdf do  render \    template: &quot;api/v1/projects/tasks/show.html.erb&quot;    pdf: pdf_file_name,    layout: &quot;pdf.html.erb&quot;end</code></pre><p>After the change the code looked like this.</p><pre><code class="language-rb">format.pdf do  render \    template: &quot;api/v1/projects/tasks/show&quot;,    pdf: pdf_file_name,    layout: &quot;pdf&quot;end</code></pre><h3>Open Redirect protection</h3><p>After the Rails 7 upgrade the following test started failing.</p><pre><code class="language-rb">def test_that_users_are_redirected_to_error_url_when_invalid_subdomain_is_entered  invalid_subdomain = &quot;invalid-subdomain&quot;  auth_subdomain_url = URI(app_secrets.auth_app[:url].gsub(   app_secrets.app_subdomain, invalid_subdomain))  auth_app_url = app_secrets.auth_app[:url]  host! test_domain(invalid_subdomain)  get &quot;/&quot;  assert_redirected_to auth_app_urlend</code></pre><p>In the test we are expecting the application to redirect to <code>auth_app_url</code> butwe are getting <code>UnsafeRedirectError</code> error for open redirections. In Rails 7 thenew Rails defaults<a href="https://api.rubyonrails.org/v7.0.3.1/classes/ActionController/Redirecting.html#method-i-redirect_to-label-Open+Redirect+protection">protects</a>applications against the<a href="https://cwe.mitre.org/data/definitions/601.html">Open Redirect Vulnerability</a>.</p><p>To allow any external redirects we can pass <code>allow_other_host: true</code>.</p><pre><code class="language-rb">redirect_to &lt;External URL&gt;, allow_other_host: true</code></pre><p>Since we use open redirection in many places we disabled this protectionglobally.</p><pre><code class="language-rb">config.action_controller.raise_on_open_redirects = false</code></pre><h3>Argument Error for Mailgun signing key</h3><p>After the upgrade, we started getting the following error in production.</p><pre><code>&gt;&gt; ArgumentError: Missing required Mailgun Signing key. Set action_mailbox.mailgun_signing_keyin your application's encrypted credentials or provide the MAILGUN_INGRESS_SIGNING_KEYenvironment variable.</code></pre><p>Before Rails 7, we used the <code>MAILGUN_INGRESS_API_KEY</code> environment variable toset up the<a href="https://guides.rubyonrails.org/action_mailbox_basics.html#mailgun">Mailgun signing key</a>. In Rails 7, that is changed to <code>MAILGUN_INGRESS_SIGNING_KEY</code>. So we renamedthe environment variable to fix the problem.</p>]]></content>
    </entry><entry>
       <title><![CDATA[Three case studies of debugging redis running out of memory]]></title>
       <author><name>Unnikrishnan KP</name></author>
      <link href="https://www.bigbinary.com/blog/debugging-redis-memory-issue">
      <updated>2022-09-12T12:00:00+00:00</updated>
      <id>https://www.bigbinary.com/blog/debugging-redis-memory-issue</id>
      <content type="html"><![CDATA[<p>In this blog we would be discussing three separate case studies of Redis runningout of memory. All the three case studies have videos demonstrating how thedebugging was done.</p><p>All the three videos were prepared for my team members to show how to go aboutdebugging. The videos are being presented &quot;as it was recorded&quot;.</p><h2>First Case Study</h2><p>When a job fails in <a href="https://sidekiq.org/">Sidekiq</a>, Sidekiq puts that job in<a href="https://github.com/mperham/sidekiq/wiki/API#retries">RetrySet</a> and retries thatjob until the job succeeds or the job reaches the maximum number of retries. Bydefault the maximum number of retries is 25. If a job fails 25 times then thatjob is moved to the <a href="https://github.com/mperham/sidekiq/wiki/API#dead">DeadSet</a>.By default Sidekiq will store up to 10,000 jobs in the deadset.</p><p>We had a situation where Redis was running out of memory. Here is how thedebugging was done.</p><p>&lt;iframewidth=&quot;560&quot;height=&quot;315&quot;src=&quot;https://www.youtube.com/embed/dg-K_IoT-x0&quot;title=&quot;YouTube video player&quot;frameborder=&quot;0&quot;allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot;allowfullscreen</p><blockquote><p>&lt;/iframe&gt;</p></blockquote><h3>How to inspect the deadset</h3><pre><code class="language-ruby">ds = Sidekiq::DeadSet.newds.each do |job|  puts &quot;Job #{job['jid']}: #{job['class']} failed at #{job['failed_at']}&quot;end</code></pre><p>Running the following to view the latest entry to the dataset:</p><pre><code class="language-ruby">ds.firstds.count</code></pre><p>To see the memory usage following commands were executed in the Redis console.</p><pre><code>&gt; memory usage dead30042467&gt; type deadzset</code></pre><p>As discussed in the video large amount of payload was being sent. This is notthe right way to send data to the worker. Ideally some sort of <code>id</code> should besent to the worker and the worker should be able to get the necessary data fromthe database based on the received <code>id</code>.</p><h4>References</h4><ol><li><a href="https://github.com/mperham/sidekiq/discussions/5011">How to increase the number of jobs in the Sidekiq deadset or disable deadset</a></li><li><a href="https://github.com/mperham/sidekiq/blob/main/lib/sidekiq/job_retry.rb#L71">Maximum number of job retries in Sidekiq</a></li><li><a href="https://github.com/mperham/sidekiq/blob/a89d84509c569a78882e24e0e28913a22c9311f5/lib/sidekiq.rb#L38">Maximum number of jobs in Sidekiq Deadset</a></li></ol><h2>Second case study</h2><p>In this case the Redis instance of <a href="https://www.neeto.com/neetochat/">neetochat</a>was running out of memory. The Redis instance had 50MB capacity but we weregetting the following error.</p><pre><code>ERROR: heartbeat: OOM command not allowed when used memory &gt; 'maxmemory'.</code></pre><p>We were pushing too many geo info records to Redis and that caused the memory tofill up. Here is the video capturing the debugging session.</p><p>&lt;iframewidth=&quot;560&quot;height=&quot;315&quot;src=&quot;https://www.youtube.com/embed/oz7Pcbc_zxM&quot;title=&quot;YouTube video player&quot;frameborder=&quot;0&quot;allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot;allowfullscreen</p><blockquote><p>&lt;/iframe&gt;</p></blockquote><p>Followings are the commands that were executed while debugging.</p><pre><code>&gt; pingPONG&gt; info&gt; info memory&gt; info keyspace&gt; keys *failed*&gt; keys *process*&gt; keys *geocoder*&gt; get getocoder:http://ipinfo.io/41.174.30.55/geo?</code></pre><h2>Third Case Study</h2><p>In this case the authentication service of <a href="https://www.neeto.com/">neeto</a> wasfailing because of memory exhaustion.</p><p>Here the number of keys was limited but the payload data was huge and all thatpayload data was hogging the memory. Here is the video capturing the debuggingsession.</p><p>&lt;iframewidth=&quot;560&quot;height=&quot;315&quot;src=&quot;https://www.youtube.com/embed/a_Ygbcreokw&quot;title=&quot;YouTube video player&quot;frameborder=&quot;0&quot;allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot;allowfullscreen</p><blockquote><p>&lt;/iframe&gt;</p></blockquote><p>Followings are the commands that were executed while debugging.</p><pre><code>&gt; ping&gt; info keyspacedb0:keys=106, expires=86,avg_ttl=1233332728573&gt; key * (to see all the keys)</code></pre><p>Last command listed all the 106 keys. Next we needed to find how much memoryeach of these keys are using. For that the following commands were executed.</p><pre><code>&gt; memory usage organizations/subdomains/bigbinary/neeto_app_links736 bytes&gt; memory usage failed10316224 (10MB)&gt; memory usage dead29871174 (29MB)</code></pre>]]></content>
    </entry><entry>
       <title><![CDATA[How my server got infected with a crypto mining malware and how I fixed it]]></title>
       <author><name>Sreeram Venkitesh</name></author>
      <link href="https://www.bigbinary.com/blog/how-my-server-got-infected-with-a-crypto-mining-malware-and-how-I-fixed-it">
      <updated>2022-09-06T12:00:00+00:00</updated>
      <id>https://www.bigbinary.com/blog/how-my-server-got-infected-with-a-crypto-mining-malware-and-how-I-fixed-it</id>
      <content type="html"><![CDATA[<p>I was working on a side project recently where I had faced an issue when runninga PostgreSQL database. The database server was getting shut down randomly for noapparent reason. I had deployed my Rails application along with itsdependencies, like Redis and PostgreSQL in one of my EC2 instances in AWS.</p><p>PostgreSQL was running on the machine at the default port of <code>5432</code>. Ports <code>443</code>and <code>80</code> were open to everyone, for handling HTTP/S traffic. Port <code>22</code> was alsoopen to everyone so that anyone with their public SSH keys added in the<code>authorized_keys</code> file in the remote server, or having access to the private keyfile of the server could log into the machine remotely.</p><p>For development I needed to access this remote database locally, so I edited the<code>pg_hba.conf</code> file and opened PostgreSQL to the network. I added a new rule toopen port <code>5432</code> so that anyone could connect to the PostgreSQL instanceremotely if they had all the credentials. If you notice in the below screenshot,you will see all the ports that are open to the public network. This was allworking great for me, until one fine day it wasnt.</p><p><img src="/blog_images/crypto-malware/aws-before.png" alt="The networking screen in AWS where you can add inbound port rules."></p><p>I realized that something was wrong when I couldnt connect to the PostgreSQLinstance remotely one day. The response I was getting was the standard<code>is PostgreSQL running?</code> error.</p><pre><code class="language-bash">psql: could not connect to server: No such file or directoryConnection refused Is the server running on host ${hostname}and accepting TCP/IP connections on port 5432?</code></pre><p>I was still able to SSH into the VM so I tried to restart PostgreSQL. After someinvestigation I figured out that PostgreSQL was back up momentarily when I do<code>systemctl restart postgresql</code>, but it goes down again.</p><p>Inspecting the processes with <code>htop</code> I was able to see that all the CPU coreswere at 100% usage. Something didnt feel right. Sorting the processes based onthe percentage of CPU and memory used, I came across two peculiar processes -<code>kdevtmpfsi</code> and <code>kinsing</code>. A quick Google search showed that this was a cryptomining malware that spreads by exploiting flaws in resources that are exposed tothe public. Killing the process was of no use since the malware also adds a cronjob to replicate itself so that it cant be stopped.</p><h3>Removing the malware</h3><p>I found all files in the system with <code>kdevtmpfsi</code> and <code>kinsing</code> in their namesusing the unix <code>find</code> command and deleted them. The malwares files was insidethe <code>/tmp</code> directory.</p><pre><code class="language-bash">find / -name kdevtmpfsi*find / -name kinsing*</code></pre><p>Then I checked if there were any cron jobs running in the machine with the<code>crontab</code> command. There were some jobs running which were there to reload themalware script even if you delete it. I deleted the jobs related to <code>kdevtmpfsi</code>and <code>kinsing</code>. Another information I learnt was that in Unix, each user willhave their own crontab which can run jobs as that particular user.</p><pre><code class="language-bash">crontab -l  #To list all running cron jobscrontab -e #To delete running jobs</code></pre><h3>Things to pay attention to</h3><p>I made all the passwords stronger, especially for the resources that were beingexposed to the public. One of the lessons I learnt was that you can always bemore secure, and that you should never compromise on your passwords. Thepasswords that I had set for my users were weak, with just a dictionary word, adigit and a special character - something like the format of <code>himalaya7!</code></p><p>Instead of opening the required ports to the public network, I exposed them toonly the IP addresses that I needed to access it from.</p><p>Notice how the ports for SSH and PostgreSQL are only exposed to the required IPaddresses now.<img src="/blog_images/crypto-malware/aws-after.png" alt="how ports 22 and 5432 are only open to certain IP addresses now"></p><p>I moved the application database to a managed PostgreSQL service rather thanrunning it in a VM by myself. This also means that I need not worry about theperformance or uptime as all of this will be taken care of by AWS themselves.</p><p>For extra security, I also set up a reverse proxy so that no one can ping mydeployed URL and get the IP address of the VM where the application is running.</p><p>Securing your deployments is as important as any other step when deploying yourapplication and needs to be a priority right from when you are designing thearchitecture of your application. Taking care of such small details duringdevelopment will facilitate you in writing good code and follow the rightpatterns from the start.</p>]]></content>
    </entry><entry>
       <title><![CDATA[Rails 7.1 allows infinite ranges for LengthValidators and Clusivity validators]]></title>
       <author><name>Ghouse Mohamed</name></author>
      <link href="https://www.bigbinary.com/blog/rails-7-adds-endless-ranges-for-activemodel-validations">
      <updated>2022-08-30T12:00:00+00:00</updated>
      <id>https://www.bigbinary.com/blog/rails-7-adds-endless-ranges-for-activemodel-validations</id>
      <content type="html"><![CDATA[<p>Rails 7.1 adds support for infinite ranges for Active Model validations whichuse the <code>:in</code>, and <code>:within</code> options. It was already possible to query usinginfinite ranges in Active Record like so:</p><pre><code class="language-ruby">Book.where(purchases: 20..)# Returns a collection of records with purchases from 20 and upwards.Book.where(purchases: ..20)# Returns a collection of records with purchases from 20 and below.</code></pre><p>But the same idea of using infinite ranges in Active Model validations waslimited in scope. Rails 7.1 extends this scope of usage by adding support forinfinite ranges in Active Model validations. For example, validating the lengthof <code>first_name</code> without an upper bound for a <code>User</code> will be as simple aswriting:</p><pre><code class="language-ruby">class Person    # ...    validates_length_of :first_name, in: 20..end</code></pre><p>The length of the <code>:first_name</code> does not have an upper bound. As long as thelength is greater than or equal to 20, it will remain valid.</p><p>The above example also holds true when using the <code>:within</code> option as well:</p><pre><code class="language-ruby">class User    # ...    validates_length_of :first_name, within: 20..end</code></pre><p>In a similar example, let's look at how we would use Active Model validationsalong with the <code>:inclusion</code> option:</p><pre><code class="language-ruby">class User    # ...    validates :age, inclusion: { in: proc { (25..) } }end</code></pre><p>The above example would validate the <code>:age</code> field such that, it's value needs tobe 25 or above for the record to be valid.</p><p>Please check out the following pull requests for more details:</p><ol><li><a href="https://github.com/rails/rails/pull/45138">Infinite ranges for LengthValidator</a></li><li><a href="https://github.com/rails/rails/pull/45123">Infinite ranges for Clusivity validator</a></li></ol>]]></content>
    </entry><entry>
       <title><![CDATA[Rails 7.1 raises RuntimeError if Active Storage service is not specified]]></title>
       <author><name>Ghouse Mohamed</name></author>
      <link href="https://www.bigbinary.com/blog/rails-7-1-raises-error-if-active-storage-service-not-specified">
      <updated>2022-08-23T12:00:00+00:00</updated>
      <id>https://www.bigbinary.com/blog/rails-7-1-raises-error-if-active-storage-service-not-specified</id>
      <content type="html"><![CDATA[<p>If Active Storage has been configured, and the service type has not beenexplicitly set in the respective environment's configuration file, then tryingto use active storage throws the following error message:</p><pre><code class="language-plaintext">Failed to replace attachments_attachments because one or more of the new records could not be saved.</code></pre><p>This is not helpful, and it doesn't indicate where to make the required changesfor Active Storage to be able to save the attachment(s). It also allows theapplication to start as if a valid service has been set for Active Storage touse. Starting Rails 7.1, if <code>config.active_storage.service</code> has not beenexplicitly set, then even attempting to start the application would throw a<code>RuntimeError</code> with the following error message:</p><pre><code class="language-plaintext">Missing Active Storage service name. Specify Active Storage service name for config.active_storage.service in config/environments/production.rb</code></pre><p>Please check out this <a href="https://github.com/rails/rails/pull/44372">pull request</a>for more details.</p>]]></content>
    </entry><entry>
       <title><![CDATA[Rails 7.1 adds callbacks for Action Cable commands at the connection level]]></title>
       <author><name>Ghouse Mohamed</name></author>
      <link href="https://www.bigbinary.com/blog/rails-7-1-adds-callbacks-for-action-cable-connection">
      <updated>2022-08-02T12:00:00+00:00</updated>
      <id>https://www.bigbinary.com/blog/rails-7-1-adds-callbacks-for-action-cable-connection</id>
      <content type="html"><![CDATA[<p>Action Cable allows us to add callbacks for individual channels. These are:<code>after_subscribe</code>, <code>after_unsubscribe</code>, <code>before_subscribe</code>,<code>before_unsubscribe</code>, <code>on_subscribe</code>, <code>on_unsubscribe</code>. These callbacks areregistered individually for each Channel. Before Rails 7.1, there was no way inwhich we could register callbacks to be called before every command generically.Rails 7.1 solves this problem by providing a set of callbacks which can beregistered at the connection level. And these callbacks are called for everycommand regardless of which channel's command is being invoked.</p><p>These are the following callbacks which can be registered:</p><ol><li><code>before_command</code>: This callback is invoked before any command can beprocessed by the channel.</li><li><code>around_command</code>: This callback is generally invoked around the command. Anypiece of code before <code>yield</code> is run before the actual command and any pieceof code after <code>yield</code> is run after the command has been processed by thechannel.</li><li><code>after_command</code>: This callback is invoked after the command has beenprocessed by the channel.</li></ol><p>Let's take a look at some example code to understand this behaviour better:</p><pre><code class="language-ruby">class Connection &lt; ActionCable::Connection::Base  identified_by :current_user  before_command :set_current_user  around_command :register_telemetry_data  after_command :update_current_user  private    def set_current_user      if request.params[&quot;user_id&quot;].present?        self.current_user = User.find_by(request.params[&quot;user_id&quot;])      end      reject_unauthorized_connection if self.current_user.nil?    end    def register_telemetry_data      self.current_user.register_telemetry({ start: true })      yield      self.current_user.register_telemetry({ end: true })    end    def update_current_user      self.current_user.touch(:updated_at)    endend</code></pre><p>Here, we can expect <code>set_current_user</code> to be invoked before every command isprocessed. Similar to this, we can also expect <code>update_current_user</code> to beinvoked after every command is processed. Where as for the<code>register_telemetry_data</code>,<code>self.current_user.register_telemetry({ start: true })</code> is run before thecommand is processed and then after the command is processed,<code>self.current_user.register_telemetry({ end: true })</code> is run.</p><p>Please check out this <a href="https://github.com/rails/rails/pull/44696">pull request</a>for more details.</p>]]></content>
    </entry><entry>
       <title><![CDATA[How to remove the white screen just before the splash screen in Android]]></title>
       <author><name>Kamolesh Mondal</name></author>
      <link href="https://www.bigbinary.com/blog/adding-splash-screen-in-react-native-cli-app">
      <updated>2022-07-28T12:00:00+00:00</updated>
      <id>https://www.bigbinary.com/blog/adding-splash-screen-in-react-native-cli-app</id>
      <content type="html"><![CDATA[<p>In order to add a splash screen we'll use the<a href="https://www.npmjs.com/package/react-native-splash-screen">react-native-splash-screen</a>package. While most of the job is done by following the installation steps,there are some additional steps we need to follow for android.</p><p>There's a concept known as the &quot;preview window&quot; in android which serves a basicpurpose of faking a fast launch of app when the app icon is clicked. Whilepreview window fakes fast launching, it shows an empty white screen until theapp has loaded. More info available in<a href="https://www.tothenew.com/blog/disabling-the-preview-or-start-window-in-android/">this</a>article.</p><p>The preview window can itself be disabled by adding the following line in the<code>android/app/src/main/res/values/styles.xml</code> file.</p><pre><code class="language-xml">&lt;item name=&quot;android:windowDisablePreview&quot;&gt;true&lt;/item&gt;</code></pre><p>However disabling the preview window introduces an undesirable delay betweenclicking on the app icon and the actual launching of the app.</p><p>We can get rid of the delay and the empty white screen by adding an additionalsplash activity.</p><h2>Additional steps for android</h2><ul><li><p>Create a background_splash.xml file with the same design you used in<code>launch_screen.xml</code> during the installation above.</p></li><li><p>Place this new xml file inside the <code>android/app/src/main/res/drawable</code>directory.</p></li><li><p>Create a new splash theme in the <code>android/app/src/main/res/values/styles.xml</code>file by adding the following snippet.</p><pre><code class="language-xml">&lt;style name=&quot;SplashTheme&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;&gt;    &lt;item name=&quot;android:windowBackground&quot;&gt;@drawable/background_splash&lt;/item&gt;&lt;/style&gt;</code></pre></li><li><p>Create a new splash activity to call the main activity, and add the followingcode in it.</p><pre><code class="language-java">package com.example;import android.content.Intent;import android.os.Bundle;import androidx.appcompat.app.AppCompatActivity;public class SplashActivity extends AppCompatActivity {    @Override    protected void onCreate(Bundle savedInstanceState){        super.onCreate(savedInstanceState);        Intent intent = new Intent(this, MainActivity.class);        startActivity(intent);        finish();    }}</code></pre></li><li><p>Finally we will call this activity first on launch with the splash theme wecreated above.</p></li><li><p>Add the new activity in AndroidManifest.xml.</p><pre><code class="language-xml">&lt;activity android:name=&quot;.SplashActivity&quot; android:label=&quot;@string/app_name&quot; android:launchMode=&quot;singleTask&quot; android:theme=&quot;@style/SplashTheme&quot;&gt;  &lt;intent-filter&gt;    &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;    &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;  &lt;/intent-filter&gt;&lt;/activity&gt;</code></pre></li><li><p>The intent-filter tag, with its &quot;MAIN&quot; action and &quot;LAUNCHER&quot; categorychildren, allows us to call this new activity first on launch. It's usuallyfound in the main activity by default, so we have to remove them entirely fromthere, leaving them exclusively in <code>SplashActivity</code>.</p></li></ul><p>Once we've done all this, we can rebuild the app and run it with<code>npx react-native run-android</code> to see the splashscreen we created.</p><p>The app should now launch quickly with no empty white screen on startup.</p>]]></content>
    </entry><entry>
       <title><![CDATA[Rails 7.1 allows audio_tag and video_tag to receive Active Storage attachments]]></title>
       <author><name>Ghouse Mohamed</name></author>
      <link href="https://www.bigbinary.com/blog/rails-7-extends-support-for-audio-tag-and-video-tag">
      <updated>2022-07-27T12:00:00+00:00</updated>
      <id>https://www.bigbinary.com/blog/rails-7-extends-support-for-audio-tag-and-video-tag</id>
      <content type="html"><![CDATA[<p>Rails 7.1 allows <code>audio_tag</code> and <code>video_tag</code> ActionView helpers to receiveActive Storage Attachments which implicitly unpacks the asset path to beincluded in the <code>src</code> attribute of the <code>&lt;audio&gt;&lt;/audio&gt;</code> and <code>&lt;video&gt;&lt;/video&gt;</code>tags.</p><p>Previously, the helper methods received only the asset path/url. To get theasset path of an Active Storage Attachment, we had to explicitly call<code>polymorphic_path</code> on the attachment, which returned the desired asset path.</p><h3>Before</h3><pre><code class="language-ruby">audio_tag(polymorphic_path(user.audio_file))# =&gt; &lt;audio src=&quot;/...&quot;&gt;&lt;/audio&gt;video_tag(polymorphic_path(user.video_file))# =&gt; &lt;video src=&quot;/...&quot;&gt;&lt;/video&gt;</code></pre><h3>After</h3><pre><code class="language-ruby">audio_tag(user.audio_file)# =&gt; &lt;audio src=&quot;/...&quot;&gt;&lt;/audio&gt;video_tag(user.video_file)# =&gt; &lt;video src=&quot;/...&quot;&gt;&lt;/video&gt;</code></pre><p>Please check out this <a href="https://github.com/rails/rails/pull/44085">pull request</a>for more details.</p>]]></content>
    </entry>
     </feed>